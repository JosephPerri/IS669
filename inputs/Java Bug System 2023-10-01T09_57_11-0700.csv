Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Inward issue link (Blocks),Inward issue link (Blocks),Inward issue link (Blocks),Outward issue link (Blocks),Outward issue link (Blocks),Outward issue link (CSR),Inward issue link (Cloners),Inward issue link (Cloners),Inward issue link (Cloners),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Duplicate),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field ( Type of Bug [Challenge] ),Custom field (CPU),Custom field (CPU),Custom field (Cost of Delay),Custom field (Epic Link),Custom field (Imported),Custom field (Indexed),Custom field (Introduced In Build),Custom field (Introduced In Version),Custom field (Number of Tests Affected [Challenge]),Custom field (OS),Custom field (OS),Custom field (OS),Custom field (Oracle Evaluation),Custom field (Original story points),Custom field (Parent Link),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Resolved In Build),Sprint,Custom field (Story Points),Custom field (Subcomponent),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Time Spent),Custom field (Understanding),Custom field (Value),Custom field (Verification),Custom field (external_bug),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Add GitHub user picpromusic,SKARA-966,5046857,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,sebastian,sebastian,2021-04-13 21:27,2021-04-14 06:14,2023-10-01 09:57,2021-04-14 06:14,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sdqj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
hgupdate-sync mistakenly added to 16.0.2 backport record,SKARA-965,5046788,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,rwestberg,kcr,kcr,2021-04-13 04:58,2021-04-14 01:09,2023-10-01 09:57,2021-04-13 23:46,,,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,,,,,,,,,,"The Skara bot mistakenly added the hgupdate-sync label to JDK-8263841, which is a 16.0.2 backport record. There is also 16.0.1.0.1-oracle backport for that same issue, but since that is a BPR build, it should not affect the 16.0.2 record.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263841,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sdb7:",9223372036854775807,,,,,,,,,,,,,"2021-04-13 23:46;roboduke;Changeset: ea2dc184
Author:    Robin Westberg <rwestberg@openjdk.org>
Date:      2021-04-14 06:45:50 +0000
URL:       https://git.openjdk.java.net/skara/commit/ea2dc184
;;;","2021-04-14 01:09;rwestberg;Pinged the listed issue and it seems to have been updated correctly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Should only consider Fixed bugs for hgupdate-sync,SKARA-964,5046745,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,rwestberg,erikj,erikj,2021-04-12 14:22,2022-02-24 11:23,2023-10-01 09:57,2021-04-13 09:22,,,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,,,,,,,,,,"The new labelsync bot is mislabeling a few bugs still. It seems it's not taking the resolution into account when figuring out which bugs should get the hgupdate-sync label. From comment in SKARA-883:

https://bugs.openjdk.java.net/browse/JDK-8235829
This is a new situation not described in the spec.
fixVersion 11.0.11-oracle Won't Fix
fixVersion 11.0.12-oracle Fixed 
The 11.0.12-oracle should not have the label as the 11.0.11-oracle was closed as Won't Fix.

https://bugs.openjdk.java.net/browse/JDK-8209901
This looks like the bot is including Rejected and Withdrawn instead of only accepting Fixed resolution. Similar to JDK-8235829

https://bugs.openjdk.java.net/browse/JDK-8213738
Another instance of the bot reacting to Won't Fix as if the bug was fixed.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-883,JDK-8205574,JDK-8235829,JDK-8209901,SKARA-1363,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sd1n:",9223372036854775807,,,,,,,,,,,,,"2021-04-13 09:22;roboduke;Changeset: 995a8584
Author:    Robin Westberg <rwestberg@openjdk.org>
Date:      2021-04-13 16:21:43 +0000
URL:       https://git.openjdk.java.net/skara/commit/995a8584
;;;","2021-04-14 01:05;rwestberg;I've pinged the listed issues, and they seem to have been updated correctly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Skara mlbridge bot sometimes resends old messages,SKARA-963,5046733,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,rwestberg,kcr,kcr,2021-04-12 12:24,2021-04-14 04:53,2023-10-01 09:57,2021-04-14 04:53,,,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,,,,,,,,,,"It looks like there is a hiccup in the Skara mlbridge bot. I added the following PR comment this morning:

https://github.com/openjdk/jdk/pull/3407#issuecomment-817771898

It was sent twice to the mailing list about 5 hours apart:

https://mail.openjdk.java.net/pipermail/awt-dev/2021-April/017469.html
https://mail.openjdk.java.net/pipermail/awt-dev/2021-April/017474.html

Even more puzzling is that the following two long-running PRs in jfx were partially replayed this morning. Many of messages in question were more than 1 year old.

https://github.com/openjdk/jfx/pull/127
https://mail.openjdk.java.net/pipermail/openjfx-dev/2021-April/029711.html

https://github.com/openjdk/jfx/pull/125
https://mail.openjdk.java.net/pipermail/openjfx-dev/2021-April/029719.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2scyz:",9223372036854775807,,,,,,,,,,,,,"2021-04-13 09:33;erikj;Another instance of this was reported. PR:

https://github.com/openjdk/jdk/pull/3436

Repeated mails:
https://mail.openjdk.java.net/pipermail/hotspot-runtime-dev/2021-April/047089.html
https://mail.openjdk.java.net/pipermail/hotspot-runtime-dev/2021-April/047094.html
https://mail.openjdk.java.net/pipermail/hotspot-runtime-dev/2021-April/047095.html
https://mail.openjdk.java.net/pipermail/hotspot-runtime-dev/2021-April/047129.html
https://mail.openjdk.java.net/pipermail/hotspot-runtime-dev/2021-April/047132.html;;;","2021-04-13 10:05;dcubed;Another instance in this PR:

https://git.openjdk.java.net/jdk/pull/3191

Robbin's message that looks like this is being repeated:

On Tue, 13 Apr 2021 07:44:58 GMT, David Holmes <david.holmes@oracle.com> wrote:

> Could be a neat use of a lambda ""on_suspension_do"" ...

If no one else picks that up, I'll give it go after this 

However, I can't find the repeats in pipermail for some reason...;;;","2021-04-13 12:56;erikj;I took a closer look at the instance I commented on above: jdk/pr/3436, and have some insights to share. Looking in the mbox archive for this PR, the mail is stored as sent multiple times. With the recently enabled increased logging, I was able to find the logs for each work item where this PR was processed. The thing that stood out there was repeated lines like this (one more line for each time the mail had been resent):

[00:06][INFO] Can't find parent: <3230b478-6f53-140f-e8f4-d9de3bd4b70b@oracle.com> - discarding
[00:06][INFO] Can't find parent: <3230b478-6f53-140f-e8f4-d9de3bd4b70b@oracle.com> - discarding
[00:06][INFO] Can't find parent: <3230b478-6f53-140f-e8f4-d9de3bd4b70b@oracle.com> - discarding
[00:06][INFO] Can't find parent: <3230b478-6f53-140f-e8f4-d9de3bd4b70b@oracle.com> - discarding

That particular ID is listed in the mbox archive for the duplicate email under ""References"" and ""In-Reply-To"", but there is no email in mbox with that ID, which is why I think this email entry in mbox is discarded when the mbox file is parsed. Because it's discarded, the bot cannot later see that this email has already been sent, and so will send it again for this comment.

The parent comment in this case is this one: https://github.com/openjdk/jdk/pull/3436#issuecomment-818377992 which was posted as an email on hotspot-runtime-dev and then bridged over to Github by Skara. So there seems to be some kind of glitch between emails bridged into Skara and comments made in reply to such emails.

After looking further, it seems bridged comments are not stored in the mbox archive file ever, so having the requirement when parsing an mbox file that all emails found must have their In-Reply-To header resolve within the mbox file seems to be the error. At least when using the resulting collection of emails to track what comments have already been handled.

On a quick glance, the example posted by Dan looks like the same situation. The parent comment is bridged from the mailing list.
;;;","2021-04-13 14:07;erikj;Side note while trying to trace the flow around parsing the mbox for a particular PR. We supply a maxAge parameter of 365 days. This means that if a PR is open for more than a year, new emails will be sent as each comment becomes older than a year. While this seems unusual, I don't think we can leave it like that.;;;","2021-04-13 14:54;dholmes;So what determines how many times these messages will be repeated? I saw 7 copies of Robbin's email.;;;","2021-04-13 15:08;erikj;From what I can see, it will keep sending until the PR is closed (or this bug is fixed). I think it will only actually evaluate if something needs to be sent if the PR is picked for evaluation for some other reason though, so basically every time something happens with the PR, the extra email gets sent.;;;","2021-04-13 15:10;erikj;I started looking into a solution, but given how unfamiliar I am with the code base, I didn't manage to figure out a good solution today. [~rwestberg] or [~ehelin], please take a look at this.;;;","2021-04-13 15:29;dholmes;Okay this is not good. Robbin's PR is very active so this mail is going to be sent over and over. Just got copy 8. :(;;;","2021-04-13 23:45;rwestberg;Thanks for investigating it Erik, should be fairly easy to fix now that you found the root cause!;;;","2021-04-14 04:53;roboduke;Changeset: e3b75ffc
Author:    Robin Westberg <rwestberg@openjdk.org>
Date:      2021-04-14 11:52:40 +0000
URL:       https://git.openjdk.java.net/skara/commit/e3b75ffc
;;;",,,,,,,,,,,,,,,,,,
Add test cases for known corner cases for synclabel bot,SKARA-958,5046332,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,rwestberg,erikj,erikj,2021-04-07 08:52,2021-04-08 07:06,2023-10-01 09:57,2021-04-08 06:09,,,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,,,,,,,,,,There are still some known corner cases for the synclabel bot that we probably don't have test cases for. These tests need to be implemented and verified.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sau3:",9223372036854775807,,,,,,,,,,,,,"2021-04-08 06:09;roboduke;Changeset: f12ee73c
Author:    Robin Westberg <rwestberg@openjdk.org>
Date:      2021-04-08 13:08:53 +0000
URL:       https://git.openjdk.java.net/skara/commit/f12ee73c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Skara bot is continually trying to process the same PR command,SKARA-956,5046302,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,rwestberg,kcr,kcr,2021-04-07 04:42,2021-04-20 06:27,2023-10-01 09:57,2021-04-20 06:27,,,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,,,,,,,,,,"After successfully processing the ""/sponsor"" command for the following PR:

https://github.com/openjdk/jfx/pull/421

the Skara bot committed the fix, but then attempted to reprocess the same ""/sponsor"" command again multiple times, leading it to add several comments of the form ""The command sponsor can only be used in open pull requests.""

See https://github.com/openjdk/jfx/pull/421#issuecomment-814834454

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sanf:",9223372036854775807,,,,,,,,,,,,,"2021-04-07 04:59;kcr;It seems to have stopped now (after 29 times). I don't know if it's relevant or if it's a coincidence, but I added a comment about the problem to the PR. No further reprocessing has happened after that.

https://github.com/openjdk/jfx/pull/421#issuecomment-814852210;;;","2021-04-07 05:05;rwestberg;There was a similar bug some time ago, I guess it still is not completely fixed then. It may also be a problem with GitHub's page cache not returning the truth / what we expect. 

What happened is that the /sponsor command in this case is the very last comment in a list of paginated results: https://api.github.com/repos/openjdk/jfx/issues/421/comments - and when the reply has been posted it ends up on the next page: https://api.github.com/repositories/185199202/issues/421/comments?page=2 . However, the next time around, when the RestRequestCache asks for the https://api.github.com/repos/openjdk/jfx/issues/421/comments page, the ""next page"" link is not present in the set of returned headers. Therefore there is no attempt to fetch the second page of comments until the cached entry expires (which for GitHub is currently set to 30 minutes). This in turns makes the reply invisible, and another one is sent, and so on..;;;","2021-04-07 07:02;erikj;Would it make sense to always try to fetch ""next page"" just in case?;;;","2021-04-07 07:48;rwestberg;The GitHub API docs explicitly say that you should never try to guess the ""next"" link but use the value from the header. They are a bit different as well, although I suspect we could figure out how to construct them..

Perhaps we could invalidate the cache when doing a POST for all URL's that are similar (I think both GitHub and GitLab use the same URL for reading and posting comments, but with different HTTP actions).;;;","2021-04-07 08:43;erikj;Oh, that sounds like we should not try to guess next links then.

Is this cache part of skara to reduce the number of times we call Github per day? If so, some smart invalidation seems like a reasonable approach to me.;;;","2021-04-20 06:27;roboduke;Changeset: 5d545376
Author:    Robin Westberg <rwestberg@openjdk.org>
Date:      2021-04-20 12:26:41 +0000
URL:       https://git.openjdk.java.net/skara/commit/5d545376
;;;",,,,,,,,,,,,,,,,,,,,,,
Add Github user theRealELiu,SKARA-954,5046187,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,eliu,eliu,2021-04-05 22:30,2021-06-10 19:04,2023-10-01 09:57,2021-04-06 11:49,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,"Please add GitHub user 'theRealELiu' [1] and map to me (OpenJDK username - 'eliu') [2]. Thanks!

[1] https://github.com/theRealELiu
[2] http://openjdk.java.net/census#eliu",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s9xv:",9223372036854775807,,,,,,,,,,,,,"2021-04-06 11:49;erikj;Done;;;","2021-06-09 03:31;eliu;Could anyone take a look at this link?https://github.com/openjdk/jdk/commit/9cfd560bb113b630e0ca28f9204afc079a87017b

It seems that my name could not link to my github account as before, I guess it's due to the mismatch of openjdk email address(eliu@openjdk.org) and my github email. But how can I access the openjdk email ?;;;","2021-06-09 07:41;erikj;I don't see what the problem is. That commit is recorded as:

""Eric Liu authored and Pengfei Li committed 5 hours ago""

As in you created it and Pengfei Li sponsored it.

You cannot access the openjdk.org email (yet). I believe there is a long term plan to make them forward to an email of your choice, but I don't know of any timeline to actually implement this. The email address in the commit will always be the openjdk.org one, that's how the system is setup.;;;","2021-06-09 19:36;eliu;Thanks for your explanations. The issue is that one can not contact to me by this commit since ""Eric Liu"" was not linked to my github account, also the eliu@openjdk.org is not an available email.

I can contact the author since he leaves the personal email in the profile page. E.g.
https://github.com/openjdk/jdk/commit/2cc1977a9698af9538101a5842c311659521a0aa
But the precondition is that I can find him by the commit message.

I remember the first time I asked for help to Tobias was through his oracle email, which he left in his page. Because of thartmann@openjdk.org has been no response:P

I don't know if my name(Eric Liu or theRealELiu) could be changed to a link associated with my Github account.

Thanks.;;;","2021-06-10 06:04;erikj;I didn't know this was possible, so I asked around internally and it appears you can. You can add your openjdk.org email (as it shows up in your commits) to your github account. It won't get verified as it's not yet working, but it still works as a way for github to associate your commits. I just did this and it worked immediately.;;;","2021-06-10 06:19;tbell;<openjdk_userid>@openjdk.org mailing addresses should up and working for users after completing [1].  In case of difficulty, contact ops @ openjdk.java.net

[1] https://wiki.openjdk.java.net/display/skara#Skara-AssociatingyourGitHubaccountandyourOpenJDKusername;;;","2021-06-10 19:04;eliu;Thanks, it works!;;;",,,,,,,,,,,,,,,,,,,,,
Add GitHub user dwhite-intel,SKARA-948,5045906,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,drwhite,drwhite,2021-03-31 14:41,2021-04-05 13:46,2023-10-01 09:57,2021-04-05 13:10,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,Please update my gitihub username to dwhite-intel (previously dwhite-marvell). Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s87f:",9223372036854775807,,,,,,,,,,,,,"2021-04-05 13:10;erikj;Added the new user. Would you like the old mapping to be removed too?;;;","2021-04-05 13:13;drwhite;Yes, the Marvell account should not longer be associated.

Thanks Erik!;;;","2021-04-05 13:46;erikj;Done.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Rejected tags in jdk repo,SKARA-944,5045797,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,ehelin,erikj,erikj,2021-03-30 13:39,2021-03-31 01:30,2023-10-01 09:57,2021-03-31 01:30,,,,,,,,,,bots,,0,,,,,,,,,,,,,,,,,,,,,,,"This error has been thrown a lot today. It might have died off now, so not sure what the current status is.

'git fetch --recurse-submodules=on-demand --tags https://XXX@github.com/openjdk/jdk.git 0257caad38b4358bd151e993b708603fce2056f2' exited with status: 1
[stdout]
[stderr]
[stderr]
> From https://github.com/openjdk/jdk
>  * branch                    0257caad38b4358bd151e993b708603fce2056f2 -> FETCH_HEAD
>  ! [rejected]                jdk-15-ga  -> jdk-15-ga  (would clobber existing tag)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.BackportCommand.handle(BackportCommand.java:230)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CommitCommandWorkItem.processCommand(CommitCommandWorkItem.java:131)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CommitCommandWorkItem.run(CommitCommandWorkItem.java:171)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:79)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:832)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s7j7:",9223372036854775807,,,,,,,,,,,,,"2021-03-31 01:30;ehelin;Fixed in https://github.com/openjdk/skara/pull/1104;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
remote: GitLab: You can only delete protected branches using the web interface,SKARA-943,5045787,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,rwestberg,erikj,erikj,2021-03-30 12:37,2021-03-31 02:46,2023-10-01 09:57,2021-03-31 02:46,,,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,,,,,,,,,,"We are currently getting error messages from handling an MR in gitlab. 

'git push --delete <gitlab server> pr/394' exited with status: 1
[stdout]
[stderr]
> Authorized uses only. All activity may be monitored and reported.
> remote: GitLab: You can only delete protected branches using the web interface.

Looking in the web interface, the branch is indeed still there and marked as PROTECTED.

Stacktrace:
at org.openjdk.skara.bots.notify/org.openjdk.skara.bots.notify.prbranch.PullRequestBranchNotifier.deleteBranch(PullRequestBranchNotifier.java:72)
	at org.openjdk.skara.bots.notify/org.openjdk.skara.bots.notify.prbranch.PullRequestBranchNotifier.onStateChange(PullRequestBranchNotifier.java:87)
	at org.openjdk.skara.bots.notify/org.openjdk.skara.bots.notify.PullRequestWorkItem.lambda$notifyStateChange$11(PullRequestWorkItem.java:193)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.openjdk.skara.bots.notify/org.openjdk.skara.bots.notify.PullRequestWorkItem.notifyStateChange(PullRequestWorkItem.java:193)
	at org.openjdk.skara.bots.notify/org.openjdk.skara.bots.notify.PullRequestWorkItem.run(PullRequestWorkItem.java:251)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:79)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:832)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s7gz:",9223372036854775807,,,,,,,,,,,,,"2021-03-30 12:42;erikj;The author of that MR is getting emails sent over and over.;;;","2021-03-30 12:50;erikj;The fix for SKARA-940 looks like it touched very close to this area. Could it be related?;;;","2021-03-30 13:00;erikj;I'm wondering if this is the first time we have an MR in Gitlab being merged since the dependent PR feature was deployed for JDK. Seems like we are missing some kind of authorization to be allowed to actually delete such branches.;;;","2021-03-31 02:46;roboduke;Changeset: 3d6d56f5
Author:    Robin Westberg <rwestberg@openjdk.org>
Date:      2021-03-31 09:46:15 +0000
URL:       https://git.openjdk.java.net/skara/commit/3d6d56f5
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Exception during item execution: has integrated label but no integration comment,SKARA-940,5045700,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,rwestberg,erikj,erikj,2021-03-29 14:43,2021-03-30 02:54,2023-10-01 09:57,2021-03-30 02:54,,,,,,,,,0.9,admin,,0,,,,,,,,,,,,,,,,,,,,,,,"These kinds of messages show up several times a day. Needs to be investigated.

Exception during item execution (ArchiveWorkItem@openjdk/panama-vector#53): PR https://git.openjdk.java.net/panama-vector/pull/53 has integrated label but no integration comment",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s6xn:",9223372036854775807,,,,,,,,,,,,,"2021-03-30 02:54;roboduke;Changeset: c33a832d
Author:    Robin Westberg <rwestberg@openjdk.org>
Date:      2021-03-30 09:54:35 +0000
URL:       https://git.openjdk.java.net/skara/commit/c33a832d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve robustness and error reporting on invalid fixVersion,SKARA-939,5045698,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,rwestberg,erikj,erikj,2021-03-29 14:36,2021-03-30 05:51,2023-10-01 09:57,2021-03-30 02:01,,,,,,,,,0.9,admin,,0,,,,,,,,,,,,,,,,,,,,,,,"This was reported every 10m today until it instead seem to have gotten stuck with:

Item RepositoryWorkItem@openjdk/jdk15u-dev has been active more than PT30M22.302910728S - this may be an error!

I believe this is the cause for the issue reported in 
https://bugs.openjdk.java.net/browse/SKARA-920?focusedCommentId=14409817&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-14409817",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-920,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s6x7:",9223372036854775807,,,,,,,,,,,,,"2021-03-30 02:01;roboduke;Changeset: 2234a03a
Author:    Robin Westberg <rwestberg@openjdk.org>
Date:      2021-03-30 09:00:42 +0000
URL:       https://git.openjdk.java.net/skara/commit/2234a03a
;;;","2021-03-30 05:51;erikj;From Robin on Slack:
""the problem is that the requested fixVersion “15.0.4” does not yet exist in JBS. Yuri requested it to be created on the 26h (on ops@ojn) but as Iris replied it seems it’s not been possible to actually create it yet"";;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Exception during item execution (CheckWorkItem@openjdk/jmc7#2): No value present,SKARA-938,5045697,Bug,Closed,SKARA,Skara,software,darcy,,,P3,Fixed,,erikj,erikj,2021-03-29 14:30,2021-03-30 01:43,2023-10-01 09:57,2021-03-30 01:43,,,,,,,,,,bots,,0,,,,,,,,,,,,,,,,,,,,,,,This was logged several times during March 29.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s6wz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception during item execution (CommitCommandWorkItem@openjdk/jdk:0257caad): No writeable fork for openjdk/jdk13u-dev,SKARA-937,5045696,Bug,Closed,SKARA,Skara,software,darcy,,,P3,Fixed,,erikj,erikj,2021-03-29 14:26,2021-03-30 02:21,2023-10-01 09:57,2021-03-30 02:21,,,,,,,,,,bots,,0,,,,,,,,,,,,,,,,,,,,,,,"This error is logged every 10 minutes. Erik D has already implemented a fix that he plans to deploy tomorrow. 

PR: https://github.com/openjdk/skara/pull/1097",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s6wr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception during item execution (JBridgeBot@http://hg.openjdk.java.net/jdk-updates/jdk11u-dev): Failed to find author mapping for: rcastanedalo,SKARA-936,5045695,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-03-29 14:20,2021-03-30 05:57,2023-10-01 09:57,2021-03-30 05:57,,,,,,,,,,bots,,0,,,,,,,,,,,,,,,,,,,,,,,This error is logged every 10 minutes and needs to be investigated.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s6wj:",9223372036854775807,,,,,,,,,,,,,"2021-03-29 15:08;erikj;rcastanedalo was recently added to the census as committer for the JDK project. This is the first time a bug fix he authored was backported to 11u. It looks like he just needs to be added to the hgbridge configuration.;;;","2021-03-29 15:38;erikj;Added rcastanedalo to authors config in skara-convert-configuration project.;;;","2021-03-29 16:52;erikj;The error is no longer being thrown, but the git repo is also not being updated. I have traced around in logs and looked at the working dir on the host running the hgbridge bot. It looks like the conversion has happened correctly, but for some reason it won't push to the github repo. 

{""log"":""[2021-03-29T08:10:20Z][35][F] No changes detected in http://hg.openjdk.java.net/jdk-updates/jdk11u-dev - skipping push to openjdk/jdk11u-dev\n"",""stream"":""stdout"",""time"":""2021-03-29T08:10:20.047826804Z""}
{""log"":""[2021-03-29T08:10:20Z][35][F] Item JBridgeBot@http://hg.openjdk.java.net/jdk-updates/jdk11u-dev is now done\n"",""stream"":""stdout"",""time"":""2021-03-29T08:10:20.04782957Z""}

From what I can tell, this is caused by the marks.txt file already containing the mapping for all the new changes. I suspect that I can force this through by going to the marks repo and manually removing the mappings for changes that are not present in github. Looking at history in that repo, it doesn't look like that remedy has been used for this situation the past, so I don't dare trying it now. It's also possible that this will resolve itself when the next change is pushed to the source repo in hg.openjdk. It may also be possible to just manually push the changes from the storage dir on the bot host, but again, I don't dare trying that.

[~rwestberg] could you shed some light?;;;","2021-03-29 23:49;rwestberg;I think everything looks fine actually, the ""problem"" is probably that the GitHub web UI view of commits is sorted by date, and many things going into 11u-dev are seen as committed when the original fix was made. But a git --log is consistent with https://hg.openjdk.java.net/jdk-updates/jdk11u-dev/ and the top commit is the same in both.;;;","2021-03-30 05:57;erikj;Ah right, thanks for pointing that out!;;;",,,,,,,,,,,,,,,,,,,,,,,
"Bots incorrectly assigned ""build"" label despite no obvious matching rule",SKARA-934,5045343,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,rwestberg,ihse,ihse,2021-03-24 08:41,2021-04-15 00:30,2023-10-01 09:57,2021-04-15 00:30,,,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,,,,,,,,,,"For unclear reasons, the bots assigned the `build` label to https://github.com/openjdk/jdk/pull/3172. There are no files in this PR that should match the `build` requirement. Attempts to reproduce this behavior using `git debug mlrules` has failed.

Possibly additional instrumentation is needed to be able to analyze similar failures in the future.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s4qj:",9223372036854775807,,,,,,,,,,,,,"2021-04-15 00:30;roboduke;Changeset: 132acee4
Author:    Robin Westberg <rwestberg@openjdk.org>
Date:      2021-04-15 07:30:27 +0000
URL:       https://git.openjdk.java.net/skara/commit/132acee4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Skara bot adds confusing comment to PR when CSR is needed,SKARA-930,5044943,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,ehelin,kcr,kcr,2021-03-19 06:16,2021-04-16 01:30,2023-10-01 09:57,2021-04-16 01:30,,,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,,,,,,,,,,"Skara adds the following comment to a PR when processing the ""/csr needed"" command:

<USERNAME>: please create a CSR request and add link to it in JDK-nnnnnnn. This pull request cannot be integrated until the CSR request is approved.

This is a confusing comment, suggesting that there is some additional action needed to ""add link"" beyond creating the CSR. This is not the case, since creating a CSR from the bug does all of the necessary linking.

See this comment for an example of the confusion it created:

https://mail.openjdk.java.net/pipermail/core-libs-dev/2021-March/075486.html

I suggest rewording this to something like:

<USERNAME>: please create a CSR request for JDK-nnnnnnn. This pull request cannot be integrated until the CSR request is approved.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s29v:",9223372036854775807,,,,,,,,,,,,,"2021-04-16 01:30;roboduke;Changeset: 64a8dc16
Author:    Erik Helin <ehelin@openjdk.org>
Date:      2021-04-16 08:30:19 +0000
URL:       https://git.openjdk.java.net/skara/commit/64a8dc16
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"bots claim ""Unknown command /covered"" long afterward",SKARA-929,5044934,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,,yan,yan,2021-03-19 04:33,2021-03-23 10:43,2023-10-01 09:57,2021-03-23 10:43,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,"In PR https://github.com/openjdk/jdk13u-dev/pull/143 a contributor sent /covered command 8 days ago -- just as it was suggested by a standard explanatory text in that PR -- there was no reaction for 6 days, and finally a bot responded by 

 openjdk bot commented 2 days ago

@alvdavi Unknown command covered - for a list of valid commands use /help.

An issue seems serious enough, it prevents new contributors from joining the project[s]. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s27v:",9223372036854775807,,,,,,,,,,,,,"2021-03-19 09:35;ihse;There is a problem here, but it's not the one you are seeing. :-)

Unfortunately, the `/covered` command still requires a manual step, and this has been overlooked for this particular PR. I apologize for this, and I can only say that this is now being handled.

Then you see an error message from the bots several days later. This is annoying, but it is not a P2. I'm lowering priority.

In summary -- the error message do not indicate a general problem prohibiting new contributors from joining.;;;","2021-03-19 09:58;yan;Fine, thank you, Magnus! ;;;","2021-03-19 11:21;alvdavi;The error message could be changed, though, as it suggests that somehow I was doing something wrong;;;","2021-03-23 10:43;ihse;This was caused by a misconfiguration of the bots. This should be fixed by now.

The error message was misleading, but it was a bug that it got presented so I don't think that would warrant any changes.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user jmtd,SKARA-925,5044401,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,,jdowland,jdowland,2021-03-12 02:02,2021-03-12 06:43,2023-10-01 09:57,2021-03-12 06:43,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,for me. Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ryxv:",9223372036854775807,,,,,,,,,,,,,"2021-03-12 02:03;jdowland;I've got one PR open at the moment, so once my GH username is recorded in the relevant place, if someone could poke the labels for https://github.com/openjdk/jdk/pull/2963 I'd appreciate it, thanks!;;;","2021-03-12 06:43;rwestberg;Thanks, added! And the bots should notice and proceed with your PR automatically, hopefully!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user JB-Dmitry,SKARA-923,5044333,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,,dbatrak,dbatrak,2021-03-11 07:49,2021-03-12 01:11,2023-10-01 09:57,2021-03-12 01:11,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ryir:",9223372036854775807,,,,,,,,,,,,,"2021-03-12 01:11;rwestberg;Thanks, added!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Mail subjects get spurious project prefix despite config,SKARA-922,5044331,Bug,Resolved,SKARA,Skara,software,darcy,,,P5,Fixed,ehelin,ihse,ihse,2021-03-11 07:37,2021-03-31 01:37,2023-10-01 09:57,2021-03-31 01:37,,,,,,,,,,bots,,0,,,,,,,,,,,,,,,,,,,,,,,"It seems like mail to the skara-dev mailing list sometimes get a [skara] prefix, despite being configured not to.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ryib:",9223372036854775807,,,,,,,,,,,,,"2021-03-31 01:28;ehelin;This was due to a misconfiguration;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user jgneff,SKARA-918,5044115,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,,jgneff,jgneff,2021-03-09 14:47,2021-03-10 00:33,2023-10-01 09:57,2021-03-10 00:33,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rxir:",9223372036854775807,,,,,,,,,,,,,"2021-03-10 00:33;rwestberg;Thanks, added!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user jespersm,SKARA-917,5043777,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,,jespersm,jespersm,2021-03-05 00:46,2021-03-08 02:47,2023-10-01 09:57,2021-03-08 02:47,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,"Hi 'admin'

I'm jespersm on github as well as here.

-Jesper",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rvfn:",9223372036854775807,,,,,,,,,,,,,"2021-03-08 02:47;rwestberg;Thanks, added!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Add Github user kelthuzadx,SKARA-916,5043726,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,,yyang,yyang,2021-03-04 06:10,2021-03-08 02:44,2023-10-01 09:57,2021-03-08 02:44,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,"Please help to add the github user https://github.com/kelthuzadx/ , thanks。",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rv4b:",9223372036854775807,,,,,,,,,,,,,"2021-03-08 02:44;rwestberg;Thanks, added!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Add Github user shqking,SKARA-914,5043663,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,,haosun,haosun,2021-03-03 18:27,2021-03-04 00:32,2023-10-01 09:57,2021-03-04 00:32,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,"I'm OpenJDK Contributor haosun:
https://openjdk.java.net/census#haosun

I'm GitHub user shqking:
https://github.com/shqking",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ruqb:",9223372036854775807,,,,,,,,,,,,,"2021-03-04 00:32;rwestberg;Thanks, added!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Skara should honor .gitconfig and /etc/gitconfig,SKARA-913,5043513,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,ihse,erikj,erikj,2021-03-02 09:21,2021-03-11 06:08,2023-10-01 09:57,2021-03-11 06:08,,,,,,,,,0.9,cli,,0,,,,,,,,,,,,,,,,,,,,,,,"In SKARA-868, the fix to ignore .gitconfig and /etc/gitconfig was applied universally, which is causing trouble for users. The intention from the filer was to just disable this when running the Skara tests. I still think we should have a way to ignore gitconfig when running tests, but we need to keep honoring the git configuration at runtime.

Myself and other users are now either running Skara with a local patch disabling SKARA-868, or simply updated our repos to the change right before.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-915,,,,SKARA-868,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rtt7:",9223372036854775807,,,,,,,,,,,,,"2021-03-11 06:08;roboduke;Changeset: dbef34b8
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2021-03-11 14:08:01 +0000
URL:       https://git.openjdk.java.net/skara/commit/dbef34b8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
PR title correction logic can get stuck,SKARA-912,5043472,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,ihse,rwestberg,rwestberg,2021-03-02 00:56,2021-03-12 05:13,2023-10-01 09:57,2021-03-12 05:13,,,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,,,,,,,,,,"The PR title correct logic introduced with SKARA-572 can end up trying to correct the title forever. An observed case is where the JBS title ends with a trailing space. When trying to update the PR title to include this trailing space, it will be stripped by GitLab and no update will actually be done. This will then get retried again and again.

It may be a good idea to check if the title actually changed as intended, and if not, stop trying to fix it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rtk3:",9223372036854775807,,,,,,,,,,,,,"2021-03-02 05:06;kcr;Another possible change to consider is to always trim the title when generating the PR title, and then compare that title against a trimmed JBS title (i.e., ignoring white-space ""errors"" in the JBS title).;;;","2021-03-11 03:25;ihse;I think Kevin's approach here is much simpler. The entire architecture relies on the fact that a ""pr"" object is a cached json description that is passed along to the check work items of the bot. I *could* of course add a way to refresh that json object from the forge provider, but that seems like it will introduce much more risk of spillover effects than seems motivated by this bug.;;;","2021-03-11 04:47;rwestberg;Sounds reasonable, then you'll solve SKARA-730 as well. :);;;","2021-03-12 05:13;roboduke;Changeset: e664a653
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2021-03-12 13:12:43 +0000
URL:       https://git.openjdk.java.net/skara/commit/e664a653
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user luchsh,SKARA-910,5043445,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,,luchsh,luchsh,2021-03-01 19:01,2021-03-02 08:06,2023-10-01 09:57,2021-03-02 08:02,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,Please help to associate my OpenJDK ID with Github user luchsh.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rte3:",9223372036854775807,,,,,,,,,,,,,"2021-03-02 00:58;rwestberg;Thanks, added!;;;","2021-03-02 07:50;luchsh;Thanks, Robin!

But I found myself still could not create a new branch in the 'jdk-sandbox' repository (git@github.com:openjdk/jdk-sandbox.git), is that expected?;;;","2021-03-02 07:53;rwestberg;You'll need to accept your invitation to the OpenJDK organisation on GitHub before you can be granted access there.;;;","2021-03-02 08:02;luchsh;Just realized that and it works now!
Thanks a lot!;;;","2021-03-02 08:06;rwestberg;Great!;;;",,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user christianwimmer,SKARA-909,5043428,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,,cwimmer,cwimmer,2021-03-01 12:44,2021-03-02 01:01,2023-10-01 09:57,2021-03-02 01:01,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,Following the instructions in https://wiki.openjdk.java.net/display/SKARA to associate my GitHub account with my OpenJDK username,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rtab:",9223372036854775807,,,,,,,,,,,,,"2021-03-02 01:01;rwestberg;Thanks, added!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Github UI code markdown can fail to get copied correctly into email,SKARA-905,5042845,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,rwestberg,dholmes,dholmes,2021-02-24 12:41,2021-04-12 00:52,2023-10-01 09:57,2021-04-12 00:52,,,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,,,,,,,,,,"UI comment with code markdown:

You should still have

```assert_locked_or_safepoint(Threads_lock);```

for non-JavaThread access.

https://github.com/openjdk/jdk/pull/2535#discussion_r581521979

Text in email:

You should still have

(Threads_lock);```

for non-JavaThread access.

http://mail.openjdk.java.net/pipermail/hotspot-runtime-dev/2021-February/045779.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rpor:",9223372036854775807,,,,,,,,,,,,,"2021-04-12 00:52;roboduke;Changeset: 1137b55a
Author:    Robin Westberg <rwestberg@openjdk.org>
Date:      2021-04-12 07:51:52 +0000
URL:       https://git.openjdk.java.net/skara/commit/1137b55a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user bondolo,SKARA-903,5042601,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,,mduigou,mduigou,2021-02-22 10:29,2021-03-01 00:50,2023-10-01 09:57,2021-03-01 00:50,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,My GitHub user name is bondolo. Please add the association between my openjdk user name mduigou and my github username bondolo. As appropriate please also add me to the OpenJDK github organization. Thank you.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ro6j:",9223372036854775807,,,,,,,,,,,,,"2021-03-01 00:50;rwestberg;Thanks, added!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user Quaffel,SKARA-901,5042369,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,,nradomski,nradomski,2021-02-18 13:11,2021-03-01 00:47,2023-10-01 09:57,2021-03-01 00:47,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,"Please associate my GitHub user name ""Quaffel"" with my OpenJDK ID ""nradomski"". Thank you!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rmqz:",9223372036854775807,,,,,,,,,,,,,"2021-03-01 00:47;rwestberg;Thanks, added!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user vlsi,SKARA-900,5042323,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,,vsitnikov,vsitnikov,2021-02-18 04:46,2021-03-01 00:40,2023-10-01 09:57,2021-03-01 00:40,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rmgr:",9223372036854775807,,,,,,,,,,,,,"2021-03-01 00:40;rwestberg;Thanks, added!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user akashche,SKARA-897,5042116,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,,akasko,akasko,2021-02-16 02:46,2021-03-01 00:45,2023-10-01 09:57,2021-03-01 00:45,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,"OpenJDK user: http://openjdk.java.net/census#akasko

GitHub user: https://github.com/akashche

email: akashche@redhat.com

Note, name in OpenJDK census is a short form: Kas[hchen]ko .

Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rl6z:",9223372036854775807,,,,,,,,,,,,,"2021-02-22 12:47;akasko;Hello!

Is there something wrong with the process of associating GitHub users? I've followed Jira link from this section of Skara wiki:

https://wiki.openjdk.java.net/display/SKARA#Skara-AssociatingyourGitHubaccountandyourOpenJDKusername

Any pointers about the process are appreciated!;;;","2021-03-01 00:45;rwestberg;Hi Alex, sorry about the delay, we're having some internal staffing issues.. But I've added you now!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"""Add GitHub user vyommani""",SKARA-896,5042110,Bug,Closed,SKARA,Skara,software,darcy,,,P3,Fixed,,vtewari,vtewari,2021-02-16 01:59,2021-03-01 00:42,2023-10-01 09:57,2021-03-01 00:42,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rl5n:",9223372036854775807,,,,,,,,,,,,,"2021-02-18 21:21;vtewari;Hi Erick,
Can you please add my github user  vyommani, i am planning to send a code for review but i can't until my git user vyommani added.
Thanks,
Vyom;;;","2021-03-01 00:42;rwestberg;Thanks, added!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Adding project specific settings to ignore forbidden references ,JMC-7236,5046571,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,ghb,hirt,hirt,2021-04-09 04:40,2022-04-06 22:18,2023-10-01 09:57,2021-05-17 13:38,,,,,,,,,8.1.0,Release Engineering,,0,,,,,,,,,,,,,,,,,,,,,,,"When importing the release notes tool into a new workspace, it will flag using the XSLT class as an error, since it is internal. This will make the initial import work properly.",,,,,,,,,,JMC-7648,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sbyz:",9223372036854775807,,,,,,,,,,,,,"2021-05-17 13:38;roboduke;Changeset: 9829c205
Author:    Marcus Hirt <hirt@openjdk.org>
Date:      2021-05-17 20:37:44 +0000
URL:       https://git.openjdk.java.net/jmc/commit/9829c205fc0e36e45150731397961b9f48b36076
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Some writer cleanup,JMC-7235,5046569,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,hirt,hirt,hirt,2021-04-09 04:37,2022-04-06 22:18,2023-10-01 09:57,2021-05-17 13:38,,,,,,,,,8.1.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,,,,,,"When importing the jfr writer into Eclipse, I get some annoying warnings.",,,,,,,,,,JMC-7647,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sbyj:",9223372036854775807,,JMC 8.1 Sprint 1,,,,,,,,,,,"2021-05-17 13:38;roboduke;Changeset: 278a95f5
Author:    Marcus Hirt <hirt@openjdk.org>
Date:      2021-05-17 20:37:07 +0000
URL:       https://git.openjdk.java.net/jmc/commit/278a95f58caedf213990d8a80369177794dc51e8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JMC createReport for JMC8 Automated Analysis fails to evaluate several rules,JMC-7231,5046104,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,aptmac,shadowbug,shadowbug,2021-04-04 12:38,2022-04-06 22:26,2023-10-01 09:57,2021-10-14 08:05,8.0.0,,,,,,,,8.2.0,Mission Control Client,,0,bugdb_32717163,Internal,regression,,,,,,,,,,,,,,,,,,,,"createReport for JMC8 Automated Analysis fails to evaluate several rules.
 This is a regression introduced in JMC8 as createReport was working fine in
 JMC6 and JMC7

Following Rules are failing:
 # _GCs Caused by System.gc()_
 # _GCs Caused by Heap Inspection_
 # _GC Stall_
 # _String Deduplication_
 # _GCs Caused by GC Locker_

 All are above rules are throwing NullPointerException.",,,,,,,,,,JMC-7712,JMC-7426,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7122,,,,,,"2021-04-30 01:02;schaturvedi;7231_Logs.txt;https://bugs.openjdk.org/secure/attachment/94461/7231_Logs.txt","2021-04-30 00:43;schaturvedi;JfrAnalyzer2.jfr;https://bugs.openjdk.org/secure/attachment/94460/JfrAnalyzer2.jfr",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s9ff:",9223372036854775807,,,,,,,,,,,,,"2021-04-27 15:32;hirt;Do they fail intermittently or deterministically? Do you have a recording that deterministically make this happen?;;;","2021-04-30 00:42;schaturvedi;[~hirt] They fail deterministically. Yes they have provided a recording to replicate the issue. I am attaching that here.;;;","2021-04-30 01:03;schaturvedi;I have also attached the logs showing NullPointerException for these rules using the attached JFR.;;;","2021-07-23 14:20;aptmac;Edit: the fix for JMC-7122 is application-side, whereas this issue takes place in core; therefore this is not fixed by 7122. I can recreate this with the recording I was using for JMC-7122 however, and I'm thinking it's a similar issue. There are five rules that crash here, including the 4 GC rules that have the dependency on the GCInfoRule. Additionally, StringDeduplicationRule crashes due to Rules 2.0 related changes, but similarly to the GC rules I'm not sure if it's supposed to be run to completion in the first place.

While taking a look into JMC-7122 [0], I've noticed that a handful of rules are skipped. In the case of the GC rules, GarbageCollectionInfo is assigned a severity of NA (see below) and as a result those 4 GC rules that Suchita listed in this bug description never run.

Additionally, there are other rules that are assigned a severity of NA and set as ignored by RuleManager at line 165 [1]. These rules include:
Competing Processes
Class Leak
Process Started
DMS Incidents
String Deduplication
Class Loading Pressure
Code Cache
Heap Dump
Fatal Errors
Heap Content
Java Blocking
Garbage Collection Info
Primitive To Object Conversion
Exceptional Dump Reason
Socket Write Peak Duration

[0] https://bugs.openjdk.java.net/browse/JMC-7122
[1] https://github.com/openjdk/jmc/blob/master/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/RuleManager.java#L165;;;","2021-08-09 11:28;aptmac;After a bit more digging (and from what I can tell), this looks to be directly affected by the Rules 2.0 changes.

Rules 2.0 added more constraints and evaluations to check if a rule _should_ be evaluated (e.g., dependencies on rules). This can be found in the RuleManager @ https://github.com/openjdk/jmc/blob/master/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/RuleManager.java#L138. However, these changes were done application-side, so while everything will work for the RCP application the same cannot be said for core.

Core-side (where this issue is concerned), the rules are still evaluated without concern of dependencies: https://github.com/openjdk/jmc/blob/master/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/RulesToolkit.java#L1214. So in this case, we're not checking the severities or dependencies of the rule to verify whether or not it should be evaluated, and as a result rules that should be skipped (like some of these GC rules) are evaluated and throw a NPE.
;;;","2021-08-11 13:42;schaturvedi;I would like to add few points related to this bug:
1. This is a bug raised by one of our customer who is using only JMC core api jars to generate report.
2. This null pointer exception is a blocker for him as he is not able to generate the report at all.
3. The issue can be seen for multiple JFRs and its not something related to some special JFR.;;;","2021-08-18 10:51;hirt;Henrik will take a look to see what the best way of solving the root issue would be.;;;","2021-10-14 08:05;roboduke;Changeset: c7250786
Author:    Alex Macdonald <aptmac@openjdk.org>
Date:      2021-10-14 15:04:24 +0000
URL:       https://git.openjdk.java.net/jmc/commit/c72507860b5edb91564fdf4b170004eb97bca25c
;;;",,,,,,,,,,,,,,,,,,,,
Enable jcheck for jmc7,JMC-7222,5045690,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,hirt,hirt,hirt,2021-03-29 13:07,2021-03-31 04:39,2023-10-01 09:57,2021-03-31 04:39,,,,,,,,,7.1.3,Release Engineering,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7223,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|hzzyt8:w",9223372036854775807,,JMC 8.1 Sprint 1,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5dc4c445,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The release notes tool should be using JDK 8,JMC-7191,5044758,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,ghb,hirt,hirt,2021-03-17 10:42,2022-04-06 22:17,2023-10-01 09:57,2021-06-01 14:05,,,,,,,,,8.1.0,Release Engineering,,0,,,,,,,,,,,,,,,,,,,,,,,Right now it can't be launched directly with the included launcher when imported.,,,,,,,,,,JMC-7224,JMC-7630,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s157:",9223372036854775807,,JMC 8.1 Sprint 1,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5dc4c445,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stop using the chromium library based browser component,JMC-7162,5043645,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,ghb,hirt,hirt,2021-03-03 11:19,2022-04-06 22:17,2023-10-01 09:57,2021-04-04 20:18,,,,,,,,,8.1.0,Release Engineering,,0,,,,,,,,,,,,,,,,,,,,,,,"Seems they have a commercial plan for the stuff that might work. Since we're an open source project, we should just stop using it.

https://github.com/maketechnology/chromium.swt/issues/89",,,,,,,,,,JMC-7229,JMC-7632,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|hzzyt7:9",9223372036854775807,,JMC 8.1 Sprint 1,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4bcb9d9e,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update Supported System configurations for JMC 8.0.0,JMC-7159,5043453,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,rajmaddu,bbanathur,bbanathur,2021-03-01 21:33,2021-03-22 08:47,2023-10-01 09:57,2021-03-22 08:47,,,,,,,,,8.0.0,docs,,0,,,,,,,,,,,,,,,,,,,,,,,"We need to update JMC 8.0.0 supported system configuration based on eclipse's target environment support 

*Eclipse Target Platform* 

[https://www.eclipse.org/projects/project-plan.php?planurl=http://www.eclipse.org/eclipse/development/plans/eclipse_project_plan_4_16.xml#target_environments]

*JMC 7 Supported Platforms*

[https://www.oracle.com/java/technologies/javase/products-doc-jmc7-certified-system-config.html]

 

*JMC 8 Tested Platforms*

[http://st2oci.us.oracle.com/StatusTool2/faces/queryresult2.jsp?matrix_id=1000039991]
 * Mac OS 10.15 (x64)
 * Mac OS 10.14 (x64)
 * Mac OS 10.13 (x64)
 * Ubuntu 20.04 x64
 * OEL 8.* Any Kernel x64
 * Mac OS 10.13 (x64
 * Windows 10 x64
 * SLES 15 SP1 x64

[~ghb] [~snair] [~ssatish] requesting your review",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rtfv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"javac -Xdoclint:all gives ""no comment"" warning for code that can't be commented",JDK-8265253,5046753,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,webbuggrp,webbuggrp,2021-04-12 18:19,2021-08-30 17:33,2023-10-01 09:57,2021-08-23 10:32,11,14,15,16,17,8-pool,,,18,tools,,0,dcsad,doclint,redhat-interest,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10
Java 16

A DESCRIPTION OF THE PROBLEM :
Useful thread - https://stackoverflow.com/questions/67010921/

If I attempt to use ""javac -Xdoclint:all"" on code that contains an optional anonymous class, javac will return a warning, telling me that I am missing a comment for that anonymous optional class. The problem is, there is no possible way to document an optional anonymous class in a way that satisfies javac. It will flag it no matter what.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1 - On a system with a current Java setup, copy the attached program into a directory.

2 - Compile the program on the commandline with the following command

javac    -Xdoclint:all     Xdoclint.java

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The code should compile with no warnings.
ACTUAL -
It compiles with the following error

Xdoclint.java:10: warning: no comment
   A
   ^
1 warning

---------- BEGIN SOURCE ----------
/** Comment. */
public
/** Comment. */
enum
/** Comment. */
Xdoclint
/** Comment. */
{
/** Comment. */
   A
   /** Comment. */
   {
   /** Comment. */
   }
/** Comment. */
   ,
/** Comment. */
   ;
/** Comment. */
}
/** Comment. */
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Technically speaking, you can use the following command to bypass this

javac     -Xdoclint:all,-missing/private         Xdoclint.java

However, this workaround has a few problems.

First off and most importantly, it doesn't solve the problem, it just avoids it.

Second off, it actually hides warnings that should be thrown from a private instance field that is missing a comment. Take the test case code, make a new line after the only semicolon in the test case, then paste the following code into the newly created line ""private int a = 0;"" Now, compile it with the ""workaround"", and you will see that it does not report a warning when it should. The line directly above it is a semicolon, not a comment, and therefore, violates javadoc. Therefore, it should throw a warning, but it does not. However, if you redo the same sequence of steps, but use a public int instead of a private one, you will see that it returns the expected error.

Third off, it also hides missing comments for everything contained within the optional anonymous class. Make a new line after the opening curly brace of the optional anonymous class, then paste the following code into the newly created line ""public int b = 0;"". Then compile it with the workaround and you will see that it does not return a warning when it should.

Point is, this workaround can cause lots of problems, so I hesitate to call it a workaround, but it seems like the best option available.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265257,,,,,,"2021-04-22 23:15;adev;Xdoclint.java;https://bugs.openjdk.org/secure/attachment/94354/Xdoclint.java",,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i2sd3f:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-04-14 21:46;adev;As per https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-8.9.1

'The optional class body of an enum constant implicitly defines an anonymous class declaration (§15.9.5) that extends the immediately enclosing enum type.'
There is no way to add a comment to an anonymous class. - https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html#anonymous
 If you want to document an anonymous class, the proper way to do so is in a doc comment of its outer class, or another closely associated class.;;;","2021-04-14 21:46;adev;Closing this as not an issue.;;;","2021-04-14 22:31;adev;Requested submitter to check if the problem is resolved.;;;","2021-04-15 21:02;adev;Information from submitter
=========================
I understand, but can we make the warning not trigger when a user uses an anonymous class? I understand that there is a convention to comment the anonymous class via a comment on the outer class, but that doesn't change the fact that the warning still triggers.

I am just taking issue with this because I just introduced an enum with many values, and each value is throwing a warning. It's clogging up the warning report and hiding the real warnings that I should be dealing with. I am saying that leaving this in will make the javadoc -Xdoclint return many confusing and deceptive false positives, so I would like this to be resolved.

Also, please understand that that means the javadoc -Xdoclint:all would be inconsistent with the convention that Oracle is telling us to follow. If there is no way to comment an Anonymous class, why am I receiving a warning for it? This is a contradiction between what Oracle is telling us to do, and what the tool is reporting.

Because of the above, I would like the tool to be fixed. Please reconsider.
;;;","2021-04-22 23:16;adev;Additional information from the submitter
===================================
I would like to update you on another discovery I have made. This issue is also capable of occurring in versions Java 8 all the way up to and including Java 16. I imagine it also occurs for Java 17, but I am not sure. Could we update the ticket to include the appropriate versions?;;;","2021-04-30 11:36;jjg;Yes, doclint should probably ignore comments on anonymous classes.;;;","2021-05-04 01:26;adev;Additional information from the submitter
=================================
It is important that we do not ignore comments WITHIN the anonymous class. That would be throwing out the baby with the bathwater. And more importantly, it would be no better than the workaround that I proposed. Anonymous classes need accurate and proper documentation too, so simply ignoring the comments within the anonymous class would be a mistake.

We need to make Xdoclint ignore only the class level comment of the anonymous class. Everything within it should still be checked and linted by Xdoclint. Anything less than this would damage the value of the linter and make it inconsistent and inaccurate.
;;;","2021-05-12 14:13;jjg;I'm not (yet) convinced by the preceding ""Additional information from the submitter"".

Since javadoc will never ever document the anonymous class, it seems questionable to check it.  Also, this would introduce another difference between javac support for doclint and javadoc support for doclint, since javadoc only checks those comments it uses to generate documentation.

It could also be said that whether or not to doc-comment the innards of anonymous classes is a matter of programming style.


I will discuss this with colleagues.

--

Later: agreed that just the warning on the anon class declaration should be suppressed.
;;;","2021-05-12 21:03;adev;Additional information from the submitter
==================================
I concede that this will deepen the break between javac and javadoc's implementation of Xdoclint. I also concede that the comments will never show up on a documentation webpage, thus reducing the need for this change.

However, ""-Xdoclint:missing"" is an opt-in command. Therefore, the user who calls it (or ""-Xdoclint:all"") is expecting ALL missing Javadoc to throw a warning. It's doing that right now - for better and worse. To turn around years later and say ""it was not technically missing"" just because it won't generate an HTML page damages the goal of javadoc - to facilitate code documentation and comprehension. The HTML page was just an implementation of that goal.

Here's an idea - why not introduce a new group to the -Xdoclint option called ""anonymous""? Have it perform the linting for anonymous classes. And thus, like any other group, if they choose to subtract that group via ""-anonymous"", they can continue on without any further interruptions. Because after all, it won't generate an HTML page. So for some users, they may find that validation unnecessary to their purposes. But I think removing it outright is just removing useful functionality and pulling the rug out from underneath the user.
;;;","2021-08-20 13:40;jjg;The issue is valid, but the example is unnecessarily confusing for the excess comments and punctuation.

Here is a stripped-down version that exits the same problem.

/** Xdoclint2 comment. */
public enum Xdoclint2 {
   /** A comment. */
   A { }
}

play/demo/src/Xdoclint2.java:4: warning: no comment
   A { }
   ^
1 warning;;;","2021-08-20 14:12;jjg;[~darcy] After adding some debug output to Doclint, it seems that the `origin` of anonymous class in question is EXPLICIT, not SYNTHETIC. This seems surprising.  [[Maybe not, I guess the anon class really is there in the source, even if it is somewhat obscurely hidden.]]

Checker.reportMissing: ENUM <anonymous Xdoclint2$1> ANONYMOUS EXPLICIT [final, enum, anonconstr, acyclic]
>> enum extends Xdoclint2 { ; () { super(); } }
>> new Xdoclint2()/*enum*/{ () { super(); } }
>> /*public static final*/ A /* = new Xdoc[...]it>() { super(); } }
>> public enum Xdoclint2 { /*public static[...]nt2() { super(); } }
>> /** * Xdoclint2 comment. */ public enum[...]nt2() { super(); } }
play/demo/src/Xdoclint2.java:4: warning: no comment
   A { },
   ^
1 warning
;;;","2021-08-20 15:15;jjg;The example is notable for having an anonymous class in a declaration context (the decl of enum member `A`).;;;","2021-08-23 10:32;roboduke;Changeset: 18840724
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-08-23 17:31:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/18840724749c839259688bfa052652a1f34a378a
;;;",,,,,,,,,,,,,,,
Move Proc.java from security/testlibrary to test/lib,JDK-8265227,5046908,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2021-04-14 09:33,2021-04-21 17:58,2023-10-01 09:57,2021-04-15 08:08,,,,,,,,,17,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,,The Proc.java helper class is used by several security tests to easily start sub-JVM processes. It should be moved into a shared directory along with the security-related helper classes.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2se1v:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-04-15 08:09;roboduke;Changeset: c70589c6
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-04-15 15:07:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c70589c6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
(dc) API note in DatagramChannel.open should link to StandardProtocolFamily.UNIX,JDK-8265226,5046907,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,michaelm,michaelm,michaelm,2021-04-14 09:31,2021-04-21 18:04,2023-10-01 09:57,2021-04-19 02:32,,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"The apiNote in DatagramChannel.open(ProtocolFamily) 

should say that StandardProtocolFamily#UNIX is not supported

since the parameter to this method is a ProtocolFamily. That probably requires a CSR. Any other comments on 8262883 can be included here also.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2se1n:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-04-14 09:44;alanb;If this issue is strictly apiNote then a CSR is not required.;;;","2021-04-19 02:32;roboduke;Changeset: d9e19f16
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2021-04-19 09:31:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d9e19f16
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/tool/TestConfigure.java fails to cleanup the output files after the testing,JDK-8265225,5046905,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-04-14 08:37,2021-04-21 18:01,2023-10-01 09:57,2021-04-14 23:36,17,,,,,,,,17,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,,"The output files should be removed after the testing.

```
test/jdk/jdk/jfr/tool/1618403178745test-selection.jfc
test/jdk/jdk/jfr/tool/1618403180406test-text.jfc
test/jdk/jdk/jfr/tool/1618403181283test-flag.jfc
test/jdk/jdk/jfr/tool/1618403182099test-condition-1.jfc
test/jdk/jdk/jfr/tool/1618403182885test-condition-2.jfc
test/jdk/jdk/jfr/tool/1618403183598test-and-true.jfc
test/jdk/jdk/jfr/tool/1618403184320test-and-false.jfc
test/jdk/jdk/jfr/tool/1618403185068test-or-true.jfc
test/jdk/jdk/jfr/tool/1618403185738test-or-false.jfc
test/jdk/jdk/jfr/tool/1618403186440new.jfc
test/jdk/jdk/jfr/tool/1618403187198missed.jfc
test/jdk/jdk/jfr/tool/1618403187911fresh.jfc
test/jdk/jdk/jfr/tool/1618403188568new.jfc
test/jdk/jdk/jfr/tool/1618403189200test-superfluous.jfc
test/jdk/jdk/jfr/tool/1618403190777test-modify-succeed.jfc
test/jdk/jdk/jfr/tool/1618403191304test-adding-succeed-1.jfc
test/jdk/jdk/jfr/tool/1618403191787test-adding-succeed-2.jfc
test/jdk/jdk/jfr/tool/1618403192284combined.jfc
test/jdk/jdk/jfr/tool/1618403192834quoted-timespan.jfc
test/jdk/jdk/jfr/tool/1618403193319compact-timespan.jfc
test/jdk/jdk/jfr/tool/1618403193816threshold-period-timespan.jfc
test/jdk/jdk/jfr/tool/1618403194331verbose-1.jfc
test/jdk/jdk/jfr/tool/1618403194791verbose-2.jfc
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260862,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2se17:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-04-14 23:35;roboduke;Changeset: b224b566
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-04-15 06:35:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b224b566
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
revisit foreign library loading,JDK-8265222,5046900,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,sundar,sundar,sundar,2021-04-14 07:49,2021-05-06 23:22,2023-10-01 09:57,2021-05-06 07:24,repo-panama,,,,,,,,,tools,,0,foreign-abi,,,,,,,,,,,,,,,,,,,,,,"On Windows and Mac, default lookup allows looking up symbols from any loaded library in the process. On Linux, it does not work that way. We need a stable, portable solution for default lookup.

One of the main reasons for default lookup is to allow uses to use standard C runtime library functions (from stdlib.h, stdio.h, math.h etc.) without having to load platform specific C runtime library / libraries.

Instead of fixing default lookup alone, foreign library loading is going to be revisited as documented in 

https://mail.openjdk.java.net/pipermail/panama-dev/2021-April/013577.html 

We plan to use the current bug for library loading changes. ",,,,,,,,,,,,,,,,,,,,JDK-8266627,,,,,,,,,,,,,,,,,JDK-8262126,JDK-8266682,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2se03:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-04-16 04:42;sundar;Problem description:

The get default lookup behaves differently on different platforms. On Mac, symbols from *all* loaded shared objects are searched. On Linux, only few libraries (standard C runtime library included) are searched. On Windows, it works but the implementation uses a *debug* api to enumerate all DLLs (called ""modules"") loaded in the process.

Solution approaches discussed/tried so far:

1) Introduce an intermediate library called ""libcstdlib.dylib/.so"" / ""cstdlib.dll"". This library will not have any code in it. Just has dependency on C runtime and math libraries.
This requires special linker flags for Linux (-WI,--no-as-needed -lc -lm). Without these flags, linkers does not inject library dependencies. On Mac, no special flags needed.
We don't know if this approach is workable on Windows at all.


2) Use current default lookup implementation on Mac and Linux but filter everything except known C standard library functions. ""known standard functions"" list is hard-coded.
For windows, we'd use ""msvrt.dll"" directly and apply lookup filter on top of that. But msvcrt.dll is not shipped with JDK and so we need to load it from ""standard Windows path""


One of the possible risks of this approach (on Mac and Linux) is that, a random library may expose symbols from C runtime library. If such a library is loaded before using default lookup, will the lookup resolve the correct C runtime version or not?

Experiment:

File: t.c

int strlen(char* msg) { return 0; }

The above file is compiled into libt.dylib or libt.so

File: import jdk.incubator.foreign.*;

public class Main {
   public static void main(String[] a) throws Throwable {
       System.out.println(LibraryLookup.ofDefault().lookup(""strlen""));
       LibraryLookup.ofLibrary(""t"");
       System.out.println(LibraryLookup.ofDefault().lookup(""strlen""));
   }
}

The above experiment showed that C runtime library version is always resolved. So such ""overriding"" risk does not exist.;;;","2021-04-19 04:42;sundar;Other experiments tried:

1) instead of creating a new library, we tried to use an existing library. libjvm.so is in different path which is not part of java.library.path. Also any JNI library is problematic because same JNI library cannot be loaded by two different class loaders. Non-JNI library like libverify.so works. But that library does not have right dependencies (like ""math"" dependency with -lm)

2) Combination of above two solutions (libcstdlib.so for Unix platforms and msvcrt.dll for Windows) and java based filtering lookup. This solution results in test hang. test TestLibraryLookup.testInvalidSymbolLookup() fails by timeout.     

With the combination solution StdLibC.java has the following code:

final LibraryLookup lookup = switch (CABI.current()) {
        case SysV, AArch64 -> LibraryLookup.ofLibrary(""cstdlib"");
        case Win64 -> LibraryLookup.ofPath(Path.of(System.getenv(""SystemRoot""), ""System32"", ""msvcrt.dll"")); // do not depend on java.library.path!
    };
;;;","2021-04-19 05:12;sundar;The root cause of that test timeout hang (mentioned in the last comment) is that the test assumes the number native libraries loaded. but the loading cstdlib for default lookup changes that. Note that this test is not seen on Window because TestLibraryLookup.java test is dibbled for Windows!;;;","2021-04-19 06:08;sundar;Combining two approaches (java level filter & msvcrt.dll for Windows, libcstdlib.dylib/.so for Mac/Linux) works.

;;;","2021-05-05 03:59;sundar;Foreign library loading is going to be revisited as documented in 

https://mail.openjdk.java.net/pipermail/panama-dev/2021-April/013577.html

We plan to use the current bug for library loading changes.
;;;",,,,,,,,,,,,,,,,,,,,,,,
trace_method_handle_stub fails to find calling frame on x86 ,JDK-8265218,5046896,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,dcubed,dcubed,2021-04-14 06:41,2021-04-28 17:38,2023-10-01 09:57,2021-04-22 05:17,17,,,,,,,,17,hotspot,,0,hs-comp-triaged,oracle-triage-17,tier7,tier8,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

runtime/logging/RedefineClasses.java

Here's a snippet from the log file:

#section:main
----------messages:(5/423)----------
command: main -Xmx256m -XX:MaxMetaspaceSize=64m -javaagent:redefineagent.jar -Xlog:all=trace:file=all.log RedefineClasses
reason: User specified action: run main/othervm -Xmx256m -XX:MaxMetaspaceSize=64m -javaagent:redefineagent.jar -Xlog:all=trace:file=all.log RedefineClasses 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.compiler,java.instrument
elapsed time (seconds): 27.289
----------configuration:(3/57)----------
Boot Layer
  add modules: java.compiler java.instrument

----------System.out:(43/3436)----------
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/frame_x86.cpp:367
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79625/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e121a4ac-ae69-4112-87ab-ba829ed21fad/runs/1fcfdcdf-3388-4156-95ab-90890ea2845c/workspace/open/src/hotspot/cpu/x86/frame_x86.cpp:367), pid=30027, tid=30406
#  assert(nm->insts_contains_inclusive(original_pc)) failed: original PC must be in the main code section of the the compiled method (or must be immediately following it)
#
# JRE version: Java(TM) SE Runtime Environment (17.0+18) (fastdebug build 17-ea+18-LTS-1447)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+18-LTS-1447, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xbe5525]  frame::verify_deopt_original_pc(CompiledMethod*, long*)+0xa5
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79374/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b12a4e35-a572-4134-a1dd-ea36c600fe98/runs/879dc36a-7752-4beb-af4e-34313f3030e2/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/4/core.30027)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79374/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b12a4e35-a572-4134-a1dd-ea36c600fe98/runs/879dc36a-7752-4beb-af4e-34313f3030e2/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/4/hs_err_pid30027.log
Compiled method (c2)   21335 3113             java.lang.invoke.MethodHandles::argumentsWithCombiner (130 bytes)
 total in heap  [0x00007ff121a4e710,0x00007ff121a4fca8] = 5528
 relocation     [0x00007ff121a4e888,0x00007ff121a4ea48] = 448
 main code      [0x00007ff121a4ea60,0x00007ff121a4f1e0] = 1920
 stub code      [0x00007ff121a4f1e0,0x00007ff121a4f250] = 112
 metadata       [0x00007ff121a4f250,0x00007ff121a4f2c8] = 120
 scopes data    [0x00007ff121a4f2c8,0x00007ff121a4f610] = 840
 scopes pcs     [0x00007ff121a4f610,0x00007ff121a4fb40] = 1328
 dependencies   [0x00007ff121a4fb40,0x00007ff121a4fb70] = 48
 handler table  [0x00007ff121a4fb70,0x00007ff121a4fc60] = 240
 nul chk table  [0x00007ff121a4fc60,0x00007ff121a4fca8] = 72
Compiled method (c2)   21335 3113             java.lang.invoke.MethodHandles::argumentsWithCombiner (130 bytes)
 total in heap  [0x00007ff121a4e710,0x00007ff121a4fca8] = 5528
 relocation     [0x00007ff121a4e888,0x00007ff121a4ea48] = 448
 main code      [0x00007ff121a4ea60,0x00007ff121a4f1e0] = 1920
 stub code      [0x00007ff121a4f1e0,0x00007ff121a4f250] = 112
 metadata       [0x00007ff121a4f250,0x00007ff121a4f2c8] = 120
 scopes data    [0x00007ff121a4f2c8,0x00007ff121a4f610] = 840
 scopes pcs     [0x00007ff121a4f610,0x00007ff121a4fb40] = 1328
 dependencies   [0x00007ff121a4fb40,0x00007ff121a4fb70] = 48
 handler table  [0x00007ff121a4fb70,0x00007ff121a4fc60] = 240
 nul chk table  [0x00007ff121a4fc60,0x00007ff121a4fca8] = 72
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(50/7513)*----------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007ff12c3117a0):  JavaThread ""MainThread"" [_thread_in_Java, id=30406, stack(0x00007ff1106f6000,0x00007ff1107f7000)]

Stack: [0x00007ff1106f6000,0x00007ff1107f7000],  sp=0x00007ff1107f3d70,  free space=1015k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xbe5525]  frame::verify_deopt_original_pc(CompiledMethod*, long*)+0xa5
V  [libjvm.so+0x1479862]  trace_method_handle_stub(char const*, oopDesc*, long*, long*)+0x422
v  ~BufferBlob::MethodHandles adapters
j  java.lang.invoke.BoundMethodHandle$Species_LL.copyWithExtendL(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;Ljava/lang/Object;)Ljava/lang/invoke/BoundMethodHandle;+18 java.base@17-ea
J 3113 c2 java.lang.invoke.MethodHandles.argumentsWithCombiner(ZLjava/lang/invoke/MethodHandle;ILjava/lang/invoke/MethodHandle;[I)Ljava/lang/invoke/MethodHandle; java.base@17-ea (130 bytes) @ 0x00007ff121a4ec80 [0x00007ff121a4ea60+0x0000000000000220]
J 3112 c2 java.lang.invoke.MethodHandles.filterArgumentsWithCombiner(Ljava/lang/invoke/MethodHandle;ILjava/lang/invoke/MethodHandle;[I)Ljava/lang/invoke/MethodHandle; java.base@17-ea (9 bytes) @ 0x00007ff1219188f8 [0x00007ff1219188c0+0x0000000000000038]
j  java.lang.invoke.StringConcatFactory.generateMHInlineCopy(Ljava/lang/invoke/MethodType;Ljava/util/List;)Ljava/lang/invoke/MethodHandle;+387 java.base@17-ea
j  java.lang.invoke.StringConcatFactory.makeConcatWithConstants(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;+220 java.base@17-ea
J 3003 c2 java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; java.base@17-ea (22 bytes) @ 0x00007ff121e31d78 [0x00007ff121e31ce0+0x0000000000000098]
J 3023 c2 java.lang.invoke.DelegatingMethodHandle$Holder.delegate(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; java.base@17-ea (25 bytes) @ 0x00007ff121e36f6c [0x00007ff121e36ee0+0x000000000000008c]
J 3026 c2 java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; java.base@17-ea (30 bytes) @ 0x00007ff121e366fc [0x00007ff121e365c0+0x000000000000013c]
j  java.lang.invoke.BootstrapMethodInvoker.invoke(Ljava/lang/Class;Ljava/lang/invoke/MethodHandle;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;+157 java.base@17-ea
J 1581 c2 java.lang.invoke.CallSite.makeSite(Ljava/lang/invoke/MethodHandle;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/invoke/CallSite; java.base@17-ea (91 bytes) @ 0x00007ff121bf8c0c [0x00007ff121bf8bc0+0x000000000000004c]
J 1580 c2 java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(Ljava/lang/Class;Ljava/lang/invoke/MethodHandle;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName; java.base@17-ea (44 bytes) @ 0x00007ff121bf5c20 [0x00007ff121bf5be0+0x0000000000000040]
J 1579 c2 java.lang.invoke.MethodHandleNatives.linkCallSite(Ljava/lang/Object;ILjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName; java.base@17-ea (66 bytes) @ 0x00007ff121bf70f8 [0x00007ff121bf7020+0x00000000000000d8]
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe73325]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x595
V  [libjvm.so+0xe74492]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*)+0x312
V  [libjvm.so+0x1806e4e]  SystemDictionary::invoke_bootstrap_method(BootstrapInfo&, Thread*)+0x31e
V  [libjvm.so+0x127b0c5]  LinkResolver::resolve_dynamic_call(CallInfo&, BootstrapInfo&, Thread*)+0x25
V  [libjvm.so+0x127b626]  LinkResolver::resolve_invokedynamic(CallInfo&, constantPoolHandle const&, int, Thread*)+0x136
V  [libjvm.so+0xe62a33]  InterpreterRuntime::resolve_invokedynamic(JavaThread*)+0x1b3
V  [libjvm.so+0xe64798]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x1f8
j  jdk.test.lib.compiler.InMemoryJavaCompiler$MemoryJavaFileObject.<init>(Ljava/lang/String;Ljava/lang/CharSequence;)V+15
j  jdk.test.lib.compiler.InMemoryJavaCompiler.compile(Ljava/lang/String;Ljava/lang/CharSequence;[Ljava/lang/String;)[B+6
j  RedefineClassHelper.redefineClass(Ljava/lang/Class;Ljava/lang/String;)V+9
j  RedefineClasses.main([Ljava/lang/String;)V+5
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe73325]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x595
V  [libjvm.so+0x165eefb]  invoke(InstanceKlass*, methodHandle const&, Handle, bool, objArrayHandle, BasicType, objArrayHandle, bool, Thread*) [clone .constprop.0]+0xf3b
V  [libjvm.so+0x165ffd0]  Reflection::invoke_method(oop, Handle, objArrayHandle, Thread*)+0x200
V  [libjvm.so+0xff89c6]  JVM_InvokeMethod+0x196
J 684  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-ea (0 bytes) @ 0x00007ff1219a223e [0x00007ff1219a20e0+0x000000000000015e]
J 682 c2 jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-ea (150 bytes) @ 0x00007ff1219a2a58 [0x00007ff1219a2940+0x0000000000000118]
J 681 c2 jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-ea (10 bytes) @ 0x00007ff12199fbb4 [0x00007ff12199fb40+0x0000000000000074]
J 652 c2 java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-ea (65 bytes) @ 0x00007ff121994e7c [0x00007ff121994e00+0x000000000000007c]
j  com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V+172
J 2847 c2 java.lang.Thread.run()V java.base@17-ea (17 bytes) @ 0x00007ff121df6830 [0x00007ff121df67c0+0x0000000000000070]
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe73325]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x595
V  [libjvm.so+0xe73b85]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*)+0x4c5
V  [libjvm.so+0xe74007]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Thread*)+0x77
V  [libjvm.so+0xfe4d5b]  thread_entry(JavaThread*, Thread*)+0x12b
V  [libjvm.so+0x1865cd1]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x186de10]  Thread::call_run()+0x100
V  [libjvm.so+0x1559576]  thread_native_entry(Thread*)+0x116",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264358,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,os_x_10.15,,,,,"0|i2sdz7:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-14 06:46;dcubed;The build-ID for this Tier7 job set contains just two changesets (which is very rare):

JDK-8264644 Add PrintClassLoaderDataGraphAtExit to print the detailed CLD graph

JDK-8264358 Don't create invalid oop in method handle tracing

Since the last few frames include trace_method_handle_stub(), this failure
might be related to JDK-8264358.

V [libjvm.so+0xbe5525] frame::verify_deopt_original_pc(CompiledMethod*, long*)+0xa5
V [libjvm.so+0x1479862] trace_method_handle_stub(char const*, oopDesc*, long*, long*)+0x422
v ~BufferBlob::MethodHandles adapters
j java.lang.invoke.BoundMethodHandle$Species_LL.copyWithExtendL(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;Ljava/lang/Object;)Ljava/lang/invoke/BoundMethodHandle;+18 java.base@17-ea

 [~stefank] - can you take a look at this failure?;;;","2021-04-14 07:16;stefank;I've verified that this is caused by JDK-8264358.;;;","2021-04-14 07:33;stefank;The code seems to be very sensitive to stack usage. This ""fixes"" the failure:
diff --git a/src/hotspot/cpu/x86/methodHandles_x86.cpp b/src/hotspot/cpu/x86/methodHandles_x86.cpp
index 5ad7b718df7..e1dc2b2864d 100644
--- a/src/hotspot/cpu/x86/methodHandles_x86.cpp
+++ b/src/hotspot/cpu/x86/methodHandles_x86.cpp
@@ -612,6 +612,7 @@ struct MethodHandleStubArguments {
   intptr_t* entry_sp;
 };
 void trace_method_handle_stub_wrapper(MethodHandleStubArguments* args) {
+  oop dummy = NULL;
   trace_method_handle_stub(args->adaptername,
                            args->mh,
                            args->saved_regs,
;;;","2021-04-14 08:00;dcubed;[~stefank] - JDK-8264358 is a hotspot/runtime bug so this bug should probably
be moved to hotspot/runtime also. I'll leave that up to you, if you agree.;;;","2021-04-14 15:31;dholmes;The stack sensitivity is not really surprising given:

 // Incoming state:
  // rcx: method handle
  //
  // To avoid calling convention issues, build a record on the stack
  // and pass the pointer to that instead.
  __ push(rbp);               // entry_sp (with extra align space)
  __ push(rbx);               // pusha saved_regs
  __ push(rcx);               // mh
  __ push(rcx);               // slot for adaptername
  __ movptr(Address(rsp, 0), (intptr_t) adaptername);
  __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, trace_method_handle_stub_wrapper), rsp);
  __ increment(rsp, sizeof(MethodHandleStubArguments));

Though exactly what the mis-match is here I cannot see.;;;","2021-04-14 23:47;thartmann;ILW = Crash during method handle tracing, at tier7 with method handle logging enabled, no workaround but disable logging = MMM = P3;;;","2021-04-15 08:54;dcubed;These two test failures have happened in 4 Tier7 job sets in a row.;;;","2021-04-22 05:17;roboduke;Changeset: e16d568c
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2021-04-22 12:17:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e16d568c
;;;",,,,,,,,,,,,,,,,,,,,
TreeCell: cell editing state not updated on cell re-use,JDK-8265210,5046887,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fastegal,fastegal,fastegal,2021-04-14 04:27,2021-06-01 15:14,2023-10-01 09:57,2021-05-24 07:35,jfx16,,,,,,,,jfx17,javafx,,0,editing,TreeCell,,,,,,,,,,,,,,,,,,,,,"similar to pre-fix of  JDK-8150525, the cell's editing property is not updated when updating its index, examples of failing tests:

    int editingIndex = 2;
    int cellIndex = 1;
     @Test
    public void testOffEditingIndex() {
        cell.updateIndex(editingIndex);
        TreeItem<String> editingItem = table.getTreeItem(editingIndex);
        table.edit(editingItem);
        cell.updateIndex(cellIndex);
        assertEquals(""sanity: cell index changed"", cellIndex, cell.getIndex());
        assertFalse(""cell must not be editing on update from editingIndex"" + editingIndex 
                + "" to cellIndex "" + cellIndex, cell.isEditing());
    }
   
    @Test
    public void testToEditingIndex() {
        cell.updateIndex(cellIndex);
        TreeItem<String> editingItem = table.getTreeItem(editingIndex);
        table.edit(editingItem);
        cell.updateIndex(editingIndex);
        assertEquals(""sanity: cell at editing index"", editingIndex, cell.getIndex());
        assertTrue(""cell must be editing on update from "" + cellIndex 
                + "" to editingIndex "" + editingIndex, cell.isEditing());
    }
    
fix might be similar like that for TableCell (force updateEditing always) - doing so still leaves some unhandled transitions. Needs further digging. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8150525,JDK-8264127,JDK-8265206,JDK-8267094,,,JDK-8266969,,,,,,"2021-04-14 04:26;fastegal;TreeCellEditingTest.java;https://bugs.openjdk.org/secure/attachment/94164/TreeCellEditingTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sdx7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-05-06 06:28;fastegal;trying to fix this in the same way as the related turned up a difference in cancelEvent:

passing test for all cell types except treeCell, here for TableCell:

    @Test
    public void testCancelOffEditingIndex() {
        cell.updateIndex(editingIndex);
        table.edit(editingIndex, editingColumn);
        List<CellEditEvent<String, String>> events = new ArrayList<>();
        editingColumn.setOnEditCancel(e -> {
            events.add(e);
        });
        cell.updateIndex(cellIndex);
        assertEquals(""cell must have fired edit cancel"", 1, events.size());
        assertEquals(""cancel event index must be same as editingIndex"", editingIndex,
                events.get(0).getTablePosition().getRow());
     }

 
Similar test for TreeCell fails:

    @Test
    public void testCancelOffEditingIndex() {
        cell.updateIndex(editingIndex);
        TreeItem<String> editingItem = tree.getTreeItem(editingIndex);
        tree.edit(editingItem);
        List<EditEvent> events = new ArrayList<EditEvent>();
        tree.setOnEditCancel(e -> {
            events.add(e);
        });
        cell.updateIndex(cellIndex);
        assertEquals(""cell must have fired edit cancel"", 1, events.size());
        assertEquals(""treeView editingItem unchanged"", editingItem, tree.getEditingItem());
        TreeItem<String> oldItem = events.get(0).getTreeItem();
        assertEquals(""cancel on updateIndex from "" + editingIndex + "" to "" + cellIndex + ""\n  "", editingItem, oldItem);
    }
    
failure at the last assert: the oldItem attached to the cancelEvent is the _current_ treeItem of the cell.

The reason is the difference of building the cancelEvent. 

All except TreeCell do something like:

     editingLocation = control.getEditingLocation();
     fire(new XXEvent(...editingLocation...);

TreeCell:

      editingLocation = this.getTreeItem();
      fire(new XXEvent(...editingLocation...)

The first leads to incorrect cancel location when edit it cancelled on the control (JDK-8187226 and JDK-8165214 for ListCell, and JDK-8187229 for Tree/TableCell). The second has the correct cancel location when edit is cancelled on the control, but leads to incorrect location here.

Not quite certain how to handle this difference: in the end, all event locations must be correct, no matter what triggered the cancel. With the current implementations, having one trigger correct implies a broken event state for the other. 

Ideas?
;;;","2021-05-24 07:35;roboduke;Changeset: 24ffe353
Author:    Jeanette Winzenburg <fastegal@openjdk.org>
Date:      2021-05-24 14:34:42 +0000
URL:       https://git.openjdk.java.net/jfx/commit/24ffe353e175d1c4e9824e7ec1840e531014a500
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[JEP-356] : SplittableRandom and SplittableGenerators  - splits() methods does not throw NullPointerException when source is null ,JDK-8265208,5046886,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlaskey,kganapureddy,kganapureddy,2021-04-14 04:18,2021-05-17 17:39,2023-10-01 09:57,2021-05-10 11:53,17,,,,,,,,17,core-libs,,0,conformance,jep-356,tck-red-17,,,,,,,,,,,,,,,,,,,,"The split and splits methods which has SplittableRandom as source does not conform to the spec throwing NullPointerException when the source is null.

The methods behavior not conform to the spec : NullPointerException - if source is null
splits​(RandomGenerator.SplittableGenerator source)
splits(long, RandomGenerator.SplittableGenerator)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263221,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sdwz:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2021-05-10 11:52;roboduke;Changeset: 0cc7833f
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-05-10 18:52:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0cc7833f3d84971dd03a9a620585152a6debb40e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Tree-/TableCell: editing state not updated on cell re-use,JDK-8265206,5046884,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fastegal,fastegal,fastegal,2021-04-14 04:10,2021-05-14 14:50,2023-10-01 09:57,2021-04-29 03:37,jfx16,,,,,,,,jfx17,javafx,,0,editing,TableCell,TreeTableCell,,,,,,,,,,,,,,,,,,,,"happens when cell index is update from table's editing index to -1, failing test method:

    @Test
    public void testOffEditingIndex() {
        int editingIndex = 2;
        int cellIndex = -1;
        cell.updateIndex(editingIndex);
        table.edit(editingIndex, editingColumn);
        cell.updateIndex(cellIndex);
        assertEquals(""sanity: cell index changed"", cellIndex, cell.getIndex());
        assertFalse(""cell must not be editing on update from editingIndex"" + editingIndex 
                + "" to cellIndex "" + cellIndex, cell.isEditing());
    }

Looks like a left-over from fixing JDK-8150525 - bubbled up in review for JDK-8264127 

The technical reason seems to be updateEditing which backs out if index == -1

    private void updateEditing() {
        if (getIndex() == -1 || getTableView() == null) return;

should make certain to not be in editing state in this case.

Attaching complete tests, that is also for the fixed state transitions (there are no tests for the former fix).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264127,JDK-8150525,,,,,JDK-8265210,,,,,,"2021-04-14 04:09;fastegal;TableCellEditingTest.java;https://bugs.openjdk.org/secure/attachment/94163/TableCellEditingTest.java","2021-04-14 04:09;fastegal;TreeTableCellEditingTest.java;https://bugs.openjdk.org/secure/attachment/94162/TreeTableCellEditingTest.java",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sdwj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-04-21 04:53;fastegal;Implementation notes on updateEditing:

- originally, the method had the single responsibility of updating cell editing state on receiving notification from control.editingIndex: in that scenario a cell with index -1 could not have been in editing state, so backing out makes sense
- fix JDK-8150525 also uses it when changing the cell's index from indexChanged: now a cell with index -1 might be in editing state and needs to be cleaned
- a side-effect of the original fix is to fire editCancel/-Start events on re-use even though the control's edit location is unchanged: still not entirely certain if that's acceptable for edit handlers in all use-cases (also see debate in PR for JDK-8264127) but  couldn't come up with any example where it might hurt (and fx apps have lived with those artificial events for 5+ years now). Now there are tests to expect them.
;;;","2021-04-23 08:39;fastegal;
triggered by review (https://github.com/openjdk/jfx/pull/473#discussion_r617762020), I also changed the re/set of the internal boolean updateEditingIndex - it controls whether or not the table's editing state should be changed - to be reliable in scenarios of subclasses implementing misbehaving cancelEdit;;;","2021-04-29 03:37;roboduke;Changeset: ccf51e4f
Author:    Jeanette Winzenburg <fastegal@openjdk.org>
Date:      2021-04-29 10:36:36 +0000
URL:       https://git.openjdk.java.net/jfx/commit/ccf51e4f4f005d28c3d8e577022b0dd91851910f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[macos_aarch64] configure script fails if GNU uname in PATH,JDK-8265192,5046868,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ngasson,ngasson,ngasson,2021-04-14 00:36,2021-05-13 08:21,2023-10-01 09:57,2021-04-14 18:44,17,,,,,,,,17,infrastructure,,0,azul-interest,,,,,,,,,,,,,,,,,,,,,,"checking build system type... Invalid configuration `arm64-apple-darwin20.2.0': machine `arm64-apple' not recognized
configure: error: /opt/homebrew/bin/bash /Users/nicgas01/jdk/make/autoconf/build-aux/config.sub arm64-apple-darwin20.2.0 failed
configure exiting with result code 1

GNU uname -m prints ""arm64"" unlike the system uname which prints ""arm"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i2sdsz:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-04-14 00:37;ngasson;We just need to handle this extra case in config.guess;;;","2021-04-14 18:43;roboduke;Changeset: f4c3efd9
Author:    Nick Gasson <ngasson@openjdk.org>
Date:      2021-04-15 01:43:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f4c3efd9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
make sure all code snippets in jdk.incubator.foreign javadoc comments are proper,JDK-8265185,5046859,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,sundar,sundar,sundar,2021-04-13 22:15,2021-04-14 06:25,2023-10-01 09:57,2021-04-14 05:16,repo-panama,,,,,,,,,tools,,0,foreign-abi,,,,,,,,,,,,,,,,,,,,,,make sure all code snippets in jdk.incubator.foreign javadoc comments are proper (compilable and runnable with appropriate surrounding ceremony) ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2sdqz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos_aarch64] java/foreign/TestIntrinsics.java crashes with SIGBUS,JDK-8265183,5046856,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,akozlov,mikael,mikael,2021-04-13 20:56,2021-05-24 16:41,2023-10-01 09:57,2021-05-18 11:55,17,,,,,,,,17,hotspot,,0,intermittent,tier1,,,,,,,,,,,,,,,,,,,,,"java/foreign/TestIntrinsics.java fails intermittently:

[TestNG] Running:
  java/foreign/TestIntrinsics.java

test TestIntrinsics.testIntrinsics(TestIntrinsics$$Lambda$83/0x0000000800c22bd0@1a84eafa): success
test TestIntrinsics.testIntrinsics(TestIntrinsics$$Lambda$83/0x0000000800c22bd0@176ce2d9): success
test TestIntrinsics.testIntrinsics(TestIntrinsics$$Lambda$83/0x0000000800c22bd0@659e5a0a): success
test TestIntrinsics.testIntrinsics(TestIntrinsics$$Lambda$83/0x0000000800c22bd0@50c79a9): success
test TestIntrinsics.testIntrinsics(TestIntrinsics$$Lambda$83/0x0000000800c22bd0@54b1e653): success
test TestIntrinsics.testIntrinsics(TestIntrinsics$$Lambda$83/0x0000000800c22bd0@602db931): success
test TestIntrinsics.testIntrinsics(TestIntrinsics$$Lambda$83/0x0000000800c22bd0@6d55e222): success
test TestIntrinsics.testIntrinsics(TestIntrinsics$$Lambda$83/0x0000000800c22bd0@392ba7a2): success
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGBUS (0xa) at pc=0x00000001098c11e0, pid=6109, tid=41475
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (build 17-internal+0-LTS-2021-04-13-2249517.mikael.vidstedt.jdk)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17-internal+0-LTS-2021-04-13-2249517.mikael.vidstedt.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Problematic frame:
# V  [libjvm.dylib+0x8c11e0]  _ZN21MarkActivationClosure12do_code_blobEP8CodeBlob+0x3c
#
# Core dump will be written. Default location: core.6109
#",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265182,JDK-8263512,,,,,JDK-8265292,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i2sdqb:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-20 11:15;mseledtsov;ILW = HLM = P3;;;","2021-05-18 11:55;roboduke;Changeset: b92c5a44
Author:    Anton Kozlov <akozlov@openjdk.org>
Date:      2021-05-18 18:54:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b92c5a44f268c3a866fa6bc6f6218abc0457e689
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[macos_aarch64] java/foreign/TestUpcall.java crashes with SIGBUS,JDK-8265182,5046855,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,akozlov,mikael,mikael,2021-04-13 20:52,2021-05-24 16:41,2023-10-01 09:57,2021-05-18 11:56,17,,,,,,,,17,hotspot,,0,intermittent,tier1,,,,,,,,,,,,,,,,,,,,,"java/foreign/TestUpcall.java fails intermittently:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGBUS (0xa) at pc=0x00000001098c11e0, pid=97243, tid=24835
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (build 17-internal+0-LTS-2021-04-13-2249517.mikael.vidstedt.jdk)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17-internal+0-LTS-2021-04-13-2249517.mikael.vidstedt.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Problematic frame:
# V  [libjvm.dylib+0x8c11e0]  _ZN21MarkActivationClosure12do_code_blobEP8CodeBlob+0x3c
#
# Core dump will be written. Default location: core.97243
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

...

Stack: [0x000000016dedc000,0x000000016e0df000],  sp=0x000000016e0dba90,  free space=2046k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x8c11e0]  _ZN21MarkActivationClosure12do_code_blobEP8CodeBlob+0x3c
V  [libjvm.dylib+0x8febf8]  _ZN10JavaThread11nmethods_doEP15CodeBlobClosure+0x84
V  [libjvm.dylib+0x401760]  _ZN14HandshakeState18process_self_innerEv+0x18c
V  [libjvm.dylib+0x4015c0]  _ZN14HandshakeState15process_by_selfEv+0x48
V  [libjvm.dylib+0x8327d0]  _ZN18SafepointMechanism25process_if_requested_slowEP10JavaThread+0x54
V  [libjvm.dylib+0x8fe638]  _ZN10JavaThread44check_safepoint_and_suspend_for_native_transEPS_+0x24
V  [libjvm.dylib+0x923adc]  _ZN19ProgrammableInvoker13invoke_nativeEPFvPhES0_P10JavaThread+0x118
V  [libjvm.dylib+0x923c28]  PI_invokeNative+0x104
J 2860  jdk.internal.foreign.abi.ProgrammableInvoker.invokeNative(JJ)V jdk.incubator.foreign@17-internal (0 bytes) @ 0x0000000119290b50 [0x0000000119290ac0+0x0000000000000090]
C  0x0000000000000000

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J 2860  jdk.internal.foreign.abi.ProgrammableInvoker.invokeNative(JJ)V jdk.incubator.foreign@17-internal (0 bytes) @ 0x0000000119290b50 [0x0000000119290ac0+0x0000000000000090]
J 3409 c1 jdk.internal.foreign.abi.ProgrammableInvoker.invokeMoves([Ljava/lang/Object;[Ljdk/internal/foreign/abi/Binding$VMStore;[Ljdk/internal/foreign/abi/Binding$VMLoad;)Ljava/lang/Object; jdk.incubator.foreign@17-internal (595 bytes) @ 0x00000001121e698c [0x00000001121e1280+0x000000000000570c]
J 3595 c2 java.lang.invoke.LambdaForm$DMH+0x0000000800c35400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; java.base@17-internal (20 bytes) @ 0x000000011947c008 [0x000000011947bfc0+0x0000000000000048]
j  java.lang.invoke.LambdaForm$MH+0x00000008010a9400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+177 java.base@17-internal
J 2675 c1 java.lang.invoke.LambdaForm$MH+0x0000000800cb4800.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; java.base@17-internal (70 bytes) @ 0x000000011213fa8c [0x000000011213edc0+0x0000000000000ccc]
J 3589 c2 java.lang.invoke.MethodHandle.invokeWithArguments([Ljava/lang/Object;)Ljava/lang/Object; java.base@17-internal (32 bytes) @ 0x000000011947c6ec [0x000000011947c540+0x00000000000001ac]
J 3431 c1 jdk.internal.foreign.abi.ProgrammableInvoker.invokeInterpBindings([Ljava/lang/Object;Ljava/lang/invoke/MethodHandle;Ljava/util/Map;Ljava/util/Map;)Ljava/lang/Object; jdk.incubator.foreign@17-internal (240 bytes) @ 0x0000000111deeccc [0x0000000111dee0c0+0x0000000000000c0c]
J 3429 c2 java.lang.invoke.LambdaForm$DMH+0x0000000800c35800.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; java.base@17-internal (22 bytes) @ 0x00000001193f620c [0x00000001193f61c0+0x000000000000004c]
j  java.lang.invoke.LambdaForm$MH+0x000000080117e400.invoke(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+184 java.base@17-internal
J 3436 c2 TestUpcall.testUpcalls(Ljava/lang/String;LCallGeneratorHelper$Ret;Ljava/util/List;Ljava/util/List;)V (159 bytes) @ 0x000000011941f344 [0x000000011941ccc0+0x0000000000002684]
J 2331 c1 jdk.internal.reflect.GeneratedMethodAccessor1.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; (90 bytes) @ 0x00000001120523ec [0x0000000112051d40+0x00000000000006ac]
J 2471 c1 jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-internal (10 bytes) @ 0x00000001120a527c [0x00000001120a5140+0x000000000000013c]
J 2240 c1 org.testng.internal.MethodInvocationHelper.invokeMethod(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; (239 bytes) @ 0x0000000112008b90 [0x0000000112006ac0+0x00000000000020d0]
J 2786 c1 org.testng.internal.Invoker.invokeMethod(Ljava/lang/Object;Lorg/testng/ITestNGMethod;[Ljava/lang/Object;ILorg/testng/xml/XmlSuite;Ljava/util/Map;Lorg/testng/ITestClass;[Lorg/testng/ITestNGMethod;[Lorg/testng/ITestNGMethod;Lorg/testng/internal/ConfigurationGroupMethods;Lorg/testng/internal/Invoker$FailureContext;)Lorg/testng/ITestResult; (1242 bytes) @ 0x0000000112175790 [0x0000000112174040+0x0000000000001750]
J 2785 c1 org.testng.internal.Invoker.invokeTestMethod(Ljava/lang/Object;Lorg/testng/ITestNGMethod;[Ljava/lang/Object;ILorg/testng/xml/XmlSuite;Ljava/util/Map;Lorg/testng/ITestClass;[Lorg/testng/ITestNGMethod;[Lorg/testng/ITestNGMethod;Lorg/testng/internal/ConfigurationGroupMethods;Lorg/testng/internal/Invoker$FailureContext;)Lorg/testng/ITestResult; (37 bytes) @ 0x00000001121726c4 [0x00000001121724c0+0x0000000000000204]
j  org.testng.internal.Invoker.invokeTestMethods(Lorg/testng/ITestNGMethod;Lorg/testng/xml/XmlSuite;Ljava/util/Map;Lorg/testng/internal/ConfigurationGroupMethods;Ljava/lang/Object;Lorg/testng/ITestContext;)Ljava/util/List;+675
j  org.testng.internal.TestMethodWorker.invokeTestMethods(Lorg/testng/ITestNGMethod;Ljava/lang/Object;Lorg/testng/ITestContext;)V+19
j  org.testng.internal.TestMethodWorker.run()V+60
j  org.testng.TestRunner.privateRun(Lorg/testng/xml/XmlTest;)V+358
j  org.testng.TestRunner.run()V+26
j  org.testng.SuiteRunner.runTest(Lorg/testng/TestRunner;)V+1
j  org.testng.SuiteRunner.runSequentially()V+31
j  org.testng.SuiteRunner.privateRun()V+281
j  org.testng.SuiteRunner.run()V+6
j  org.testng.SuiteRunnerWorker.runSuite(Lorg/testng/internal/SuiteRunnerMap;Lorg/testng/xml/XmlSuite;)V+89
j  org.testng.SuiteRunnerWorker.run()V+12
j  org.testng.TestNG.runSuitesSequentially(Lorg/testng/xml/XmlSuite;Lorg/testng/internal/SuiteRunnerMap;ILjava/lang/String;)V+66
j  org.testng.TestNG.runSuitesLocally()Ljava/util/List;+143
j  org.testng.TestNG.run()V+77
j  com.sun.javatest.regtest.agent.TestNGRunner.main(Ljava/lang/ClassLoader;[Ljava/lang/String;)V+290
j  com.sun.javatest.regtest.agent.TestNGRunner.main([Ljava/lang/String;)V+2
v  ~StubRoutines::call_stub
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+0 java.base@17-internal
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+146 java.base@17-internal
j  jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+6 java.base@17-internal
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+59 java.base@17-internal
j  com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V+172
j  java.lang.Thread.run()V+11 java.base@17-internal
v  ~StubRoutines::call_stub

siginfo: si_signo: 10 (SIGBUS), si_code: 1 (BUS_ADRALN), si_addr: 0x0000000119290a58",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263512,,,,,,JDK-8265183,JDK-8265292,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i2sdq3:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-20 11:15;mseledtsov;ILW = HLM = P3;;;","2021-05-18 11:56;roboduke;Changeset: b92c5a44
Author:    Anton Kozlov <akozlov@openjdk.org>
Date:      2021-05-18 18:54:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b92c5a44f268c3a866fa6bc6f6218abc0457e689
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
JvmtiCompiledMethodLoadEvent should include the stub section of nmethods,JDK-8265180,5046853,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,never,never,never,2021-04-13 17:31,2021-04-21 18:02,2023-10-01 09:57,2021-04-15 16:42,,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"The entire code_begin() to code_end() region contains executable assembly but JVMTI dumps only insts_begin() to insts_end() which leaves out the stubs section.  PrintNMethod output always dumps the code_begin() to code_end().  It's not usually a hot part of the nmethod but it can get profiler ticks so it's confusing to leave it out.  Following the pattern from the dynamic generated code notification the fix should be something like this:
diff --git a/src/share/vm/prims/jvmtiExport.cpp b/src/share/vm/prims/jvmtiExport.cpp
index bac36634d6..b41be2c3f2 100644
--- a/src/share/vm/prims/jvmtiExport.cpp
+++ b/src/share/vm/prims/jvmtiExport.cpp
@@ -720,8 +720,8 @@ class JvmtiCompiledMethodLoadEventMark : public JvmtiMethodEventMark {
  public:
   JvmtiCompiledMethodLoadEventMark(JavaThread *thread, nmethod *nm, void* compile_info_ptr = NULL)
           : JvmtiMethodEventMark(thread,methodHandle(thread, nm->method())) {
-    _code_data = nm->insts_begin();
-    _code_size = nm->insts_size();
+    _code_data = nm->code_begin();
+    _code_size = (jint)pointer_delta(nm->code_end(), nm->code_begin(), sizeof(char));
     _compile_info = compile_info_ptr; // Set void pointer of compiledMethodLoad Event. Default value is NULL.
     JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nm, &_map, &_map_length);
   }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sdpn:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-04-15 16:42;roboduke;Changeset: 3423f3e1
Author:    Tom Rodriguez <never@openjdk.org>
Date:      2021-04-15 23:42:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3423f3e1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
vinserti128 operand mix up for KNL platforms,JDK-8265154,5046826,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sviswanathan,sviswanathan,sviswanathan,2021-04-13 13:23,2021-04-22 02:20,2023-10-01 09:57,2021-04-16 14:28,11,16,17,9,,,,,17,hotspot,,0,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,,,,,,,,,,,,,,,,,,,"There is a bug in macro assembler in vinserti128 special handling for platforms like KNL that do not support AVX512VL.
 
The following: 
   void vinserti128(XMMRegister dst, XMMRegister nds, XMMRegister src, uint8_t imm8) {
     if (UseAVX > 2 && VM_Version::supports_avx512novl()) {
       Assembler::vinserti32x4(dst, dst, src, imm8);
     }  
     ...
  }
 
Should have been:
   void vinserti128(XMMRegister dst, XMMRegister nds, XMMRegister src, uint8_t imm8) {
     if (UseAVX > 2 && VM_Version::supports_avx512novl()) {
       Assembler::vinserti32x4(dst, nds, src, imm8);
     }  
    ...
  }

",,,,,,,,,,JDK-8265738,JDK-8265671,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8151003,,,,,,,,,,,,,,,,,x86,,,,,,b115,9,,,,,,,,"0|i2sdjn:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-14 00:04;thartmann;ILW = Potential incorrect execution, vinserti128 for platforms that do not support AVX512VL (never showed up), disable AVX=3 = HLM = P3;;;","2021-04-16 14:28;roboduke;Changeset: c108e7ab
Author:    Sandhya Viswanathan <sviswanathan@openjdk.org>
Date:      2021-04-16 21:28:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c108e7ab
;;;","2021-04-21 08:26;shade;Fix Request (11u)

This fixes a compiler bug and keeps codebases in sync (I see 11.0.11-oracle). Patch applies cleanly to 11u, passes tier{1,2}.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
jpackage cleanup fails on Windows with IOException deleting msi,JDK-8265152,5046820,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ysuenaga,herrick,herrick,2021-04-13 12:15,2021-04-26 13:14,2023-10-01 09:57,2021-04-19 18:19,17,,,,,,,,17,tools,,0,regression,regression_8263135,,,,,,,,,,,,,,,,,,,,,"When creating an ""exe"" installer on Windows, AbstractBundler.cleanup() calls IOUtils.deleteRecursive() to delete the tmp directory.  It can intermittently fail trying to delete the msi file.
JDK-8265078 noted that this caused large problems in the automated tests, which were addressed by modifying IOUtils.deleteRecursive() and by modifying the tests, but the underlying problem (sometimes not deleting the msi file) still exists, and should be addressed by this issue.

This may be related to  JDK-8263135 and JDK-8264551, and also may be related by running antivirus software on the system.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264551,JDK-8265078,JDK-8263135,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i2sdib:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-04-14 13:59;herrick;The underlying problem is intermittent, and though I could reproduce it yesterday morning, with the same code it could not b reproduced yesterday afternoon or today.
The problem can only be reproduced by a jpackage command creating an exe.  In the failure case the intermediate msi file cannot be deleted (with fix to JDK-8265078, only the msi file is left behind).  Even with 30 seconds of retrying delete, the msi cannot be deleted, though it can always be deleted after the jpackage command exits.
This is evidence against file being locked by anti-virus software, the msi file is held open or locked by code in jpackage, possibly the native code in embedMSI()

;;;","2021-04-15 07:15;herrick;I can reproduce again today every time - problem first occurs in JDK-17+13, so likely caused by fix to JDK-8263135 (which was fixed in b13) - also looking at the other 3 jpackage fixes in b13.;;;","2021-04-16 13:11;herrick;applying the reverse patch of  JDK-8263135 makes the problem go away - proving this is caused by that fix.

I no longer think this is intermittent, it happens every time with the simple script below (to create exe installer for empty app):
---------------------------
set -v
rm -rf app-empty-1.0.exe empty-app /tmp/jdk.jpackage*

mkdir empty-app
touch empty-app/empty-file
$JDK_HOME/bin/jpackage -n app-empty --app-image empty-app \

ls /tmp/jdk-jpackage*

-------------------------;;;","2021-04-18 05:47;ysuenaga;I saw the exception as following with `-J-Xlog:exceptions=debug`. It is caused by `DatabaseView` did not close MSIHANDLE. I've sent PR to close it.

https://github.com/openjdk/jdk/pull/3560

```
[9.330s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba4778}> (0x0000000703ba4778) 
thrown [c:\github-forked\jdk\src\hotspot\share\prims\jni.cpp, line 515]
for thread 0x0000022dbf113450
[9.330s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba4778}>
 thrown in interpreter method <{method} {0x00000008002392c8} 'DeleteFile0' '(J)V' in 'sun/nio/fs/WindowsNativeDispatcher'>
 at bci 0 for thread 0x0000022dbf113450 (main)
[9.330s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba4778}>
 thrown in interpreter method <{method} {0x0000000800238a08} 'DeleteFile' '(Ljava/lang/String;)V' in 'sun/nio/fs/WindowsNativeDispatcher'>
 at bci 9 for thread 0x0000022dbf113450 (main)
[9.330s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba4778}>
 thrown in interpreter method <{method} {0x0000000800238a08} 'DeleteFile' '(Ljava/lang/String;)V' in 'sun/nio/fs/WindowsNativeDispatcher'>
 at bci 25 for thread 0x0000022dbf113450 (main)
[9.330s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba4778}>
 thrown in interpreter method <{method} {0x00000008002450e0} 'implDelete' '(Ljava/nio/file/Path;Z)Z' in 'sun/nio/fs/WindowsFileSystemProvider'>
 at bci 49 for thread 0x0000022dbf113450 (main)
[9.330s][info ][exceptions] Exception <a 'java/nio/file/FileSystemException'{0x0000000703ba47a8}: プロセスはファイルにアクセスできません。別のプロセスが使用中です。>
 thrown in interpreter method <{method} {0x0000022de28adbb8} 'rethrowAsIOException' '(Lsun/nio/fs/WindowsPath;Lsun/nio/fs/WindowsPath;)V' in 'sun/nio/fs/WindowsException'>
 at bci 38 for thread 0x0000022dbf113450 (main)
[9.330s][info ][exceptions] Exception <a 'java/nio/file/FileSystemException'{0x0000000703ba47a8}: プロセスはファイルにアクセスできません。別のプロセスが使用中です。>
 thrown in interpreter method <{method} {0x0000022de28adc88} 'rethrowAsIOException' '(Lsun/nio/fs/WindowsPath;)V' in 'sun/nio/fs/WindowsException'>
 at bci 3 for thread 0x0000022dbf113450 (main)
[9.330s][info ][exceptions] Exception <a 'java/nio/file/FileSystemException'{0x0000000703ba47a8}: プロセスはファイルにアクセスできません。別のプロセスが使用中です。>
 thrown in interpreter method <{method} {0x00000008002450e0} 'implDelete' '(Ljava/nio/file/Path;Z)Z' in 'sun/nio/fs/WindowsFileSystemProvider'>
 at bci 130 for thread 0x0000022dbf113450 (main)
[9.330s][info ][exceptions] Exception <a 'java/nio/file/FileSystemException'{0x0000000703ba47a8}: プロセスはファイルにアクセスできません。別のプロセスが使用中です。>
 thrown in interpreter method <{method} {0x00000008002443c0} 'delete' '(Ljava/nio/file/Path;)V' in 'sun/nio/fs/AbstractFileSystemProvider'>
 at bci 3 for thread 0x0000022dbf113450 (main)
[9.330s][info ][exceptions] Exception <a 'java/nio/file/FileSystemException'{0x0000000703ba47a8}: プロセスはファイルにアクセスできません。別のプロセスが使用中です。>
 thrown in interpreter method <{method} {0x00000008002283c8} 'delete' '(Ljava/nio/file/Path;)V' in 'java/nio/file/Files'>
 at bci 5 for thread 0x0000022dbf113450 (main)
[9.330s][info ][exceptions] Exception <a 'java/nio/file/FileSystemException'{0x0000000703ba47a8}: プロセスはファイルにアクセスできません。別のプロセスが使用中です。>
 thrown in interpreter method <{method} {0x0000022de2cd8980} 'visitFile' '(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;' in 'jdk/jpackage/internal/IOUtils$1'>
 at bci 25 for thread 0x0000022dbf113450 (main)
[9.331s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba5278}> (0x0000000703ba5278) 
thrown [c:\github-forked\jdk\src\hotspot\share\prims\jni.cpp, line 515]
for thread 0x0000022dbf113450
[9.331s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba5278}>
 thrown in interpreter method <{method} {0x00000008002393c8} 'RemoveDirectory0' '(J)V' in 'sun/nio/fs/WindowsNativeDispatcher'>
 at bci 0 for thread 0x0000022dbf113450 (main)
[9.331s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba5278}>
 thrown in interpreter method <{method} {0x0000000800238998} 'RemoveDirectory' '(Ljava/lang/String;)V' in 'sun/nio/fs/WindowsNativeDispatcher'>
 at bci 9 for thread 0x0000022dbf113450 (main)
[9.331s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba5278}>
 thrown in interpreter method <{method} {0x0000000800238998} 'RemoveDirectory' '(Ljava/lang/String;)V' in 'sun/nio/fs/WindowsNativeDispatcher'>
 at bci 25 for thread 0x0000022dbf113450 (main)
[9.331s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba5278}>
 thrown in interpreter method <{method} {0x00000008002450e0} 'implDelete' '(Ljava/nio/file/Path;Z)Z' in 'sun/nio/fs/WindowsFileSystemProvider'>
 at bci 39 for thread 0x0000022dbf113450 (main)
[9.332s][info ][exceptions] Exception <a 'java/nio/file/DirectoryNotEmptyException'{0x0000000703ba5330}>
 thrown in interpreter method <{method} {0x00000008002450e0} 'implDelete' '(Ljava/nio/file/Path;Z)Z' in 'sun/nio/fs/WindowsFileSystemProvider'>
 at bci 126 for thread 0x0000022dbf113450 (main)
[9.332s][info ][exceptions] Exception <a 'java/nio/file/DirectoryNotEmptyException'{0x0000000703ba5330}>
 thrown in interpreter method <{method} {0x00000008002443c0} 'delete' '(Ljava/nio/file/Path;)V' in 'sun/nio/fs/AbstractFileSystemProvider'>
 at bci 3 for thread 0x0000022dbf113450 (main)
[9.332s][info ][exceptions] Exception <a 'java/nio/file/DirectoryNotEmptyException'{0x0000000703ba5330}>
 thrown in interpreter method <{method} {0x00000008002283c8} 'delete' '(Ljava/nio/file/Path;)V' in 'java/nio/file/Files'>
 at bci 5 for thread 0x0000022dbf113450 (main)
[9.332s][info ][exceptions] Exception <a 'java/nio/file/DirectoryNotEmptyException'{0x0000000703ba5330}>
 thrown in interpreter method <{method} {0x0000022de2cd8b90} 'postVisitDirectory' '(Ljava/nio/file/Path;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;' in 'jdk/jpackage/internal/IOUtils$1'>
 at bci 1 for thread 0x0000022dbf113450 (main)
[9.333s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba7588}> (0x0000000703ba7588) 
thrown [c:\github-forked\jdk\src\hotspot\share\prims\jni.cpp, line 515]
for thread 0x0000022dbf113450
[9.334s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba7588}>
 thrown in interpreter method <{method} {0x00000008002393c8} 'RemoveDirectory0' '(J)V' in 'sun/nio/fs/WindowsNativeDispatcher'>
 at bci 0 for thread 0x0000022dbf113450 (main)
[9.334s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba7588}>
 thrown in interpreter method <{method} {0x0000000800238998} 'RemoveDirectory' '(Ljava/lang/String;)V' in 'sun/nio/fs/WindowsNativeDispatcher'>
 at bci 9 for thread 0x0000022dbf113450 (main)
[9.334s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba7588}>
 thrown in interpreter method <{method} {0x0000000800238998} 'RemoveDirectory' '(Ljava/lang/String;)V' in 'sun/nio/fs/WindowsNativeDispatcher'>
 at bci 25 for thread 0x0000022dbf113450 (main)
[9.334s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba7588}>
 thrown in interpreter method <{method} {0x00000008002450e0} 'implDelete' '(Ljava/nio/file/Path;Z)Z' in 'sun/nio/fs/WindowsFileSystemProvider'>
 at bci 39 for thread 0x0000022dbf113450 (main)
[9.334s][info ][exceptions] Exception <a 'java/nio/file/DirectoryNotEmptyException'{0x0000000703ba75b8}>
 thrown in interpreter method <{method} {0x00000008002450e0} 'implDelete' '(Ljava/nio/file/Path;Z)Z' in 'sun/nio/fs/WindowsFileSystemProvider'>
 at bci 126 for thread 0x0000022dbf113450 (main)
[9.334s][info ][exceptions] Exception <a 'java/nio/file/DirectoryNotEmptyException'{0x0000000703ba75b8}>
 thrown in interpreter method <{method} {0x00000008002443c0} 'delete' '(Ljava/nio/file/Path;)V' in 'sun/nio/fs/AbstractFileSystemProvider'>
 at bci 3 for thread 0x0000022dbf113450 (main)
[9.334s][info ][exceptions] Exception <a 'java/nio/file/DirectoryNotEmptyException'{0x0000000703ba75b8}>
 thrown in interpreter method <{method} {0x00000008002283c8} 'delete' '(Ljava/nio/file/Path;)V' in 'java/nio/file/Files'>
 at bci 5 for thread 0x0000022dbf113450 (main)
[9.334s][info ][exceptions] Exception <a 'java/nio/file/DirectoryNotEmptyException'{0x0000000703ba75b8}>
 thrown in interpreter method <{method} {0x0000022de2cd8b90} 'postVisitDirectory' '(Ljava/nio/file/Path;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;' in 'jdk/jpackage/internal/IOUtils$1'>
 at bci 1 for thread 0x0000022dbf113450 (main)
[9.335s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba9750}> (0x0000000703ba9750) 
thrown [c:\github-forked\jdk\src\hotspot\share\prims\jni.cpp, line 515]
for thread 0x0000022dbf113450
[9.335s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba9750}>
 thrown in interpreter method <{method} {0x00000008002393c8} 'RemoveDirectory0' '(J)V' in 'sun/nio/fs/WindowsNativeDispatcher'>
 at bci 0 for thread 0x0000022dbf113450 (main)
[9.335s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba9750}>
 thrown in interpreter method <{method} {0x0000000800238998} 'RemoveDirectory' '(Ljava/lang/String;)V' in 'sun/nio/fs/WindowsNativeDispatcher'>
 at bci 9 for thread 0x0000022dbf113450 (main)
[9.335s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba9750}>
 thrown in interpreter method <{method} {0x0000000800238998} 'RemoveDirectory' '(Ljava/lang/String;)V' in 'sun/nio/fs/WindowsNativeDispatcher'>
 at bci 25 for thread 0x0000022dbf113450 (main)
[9.335s][info ][exceptions] Exception <a 'sun/nio/fs/WindowsException'{0x0000000703ba9750}>
 thrown in interpreter method <{method} {0x00000008002450e0} 'implDelete' '(Ljava/nio/file/Path;Z)Z' in 'sun/nio/fs/WindowsFileSystemProvider'>
 at bci 39 for thread 0x0000022dbf113450 (main)
[9.335s][info ][exceptions] Exception <a 'java/nio/file/DirectoryNotEmptyException'{0x0000000703ba9780}>
 thrown in interpreter method <{method} {0x00000008002450e0} 'implDelete' '(Ljava/nio/file/Path;Z)Z' in 'sun/nio/fs/WindowsFileSystemProvider'>
 at bci 126 for thread 0x0000022dbf113450 (main)
[9.335s][info ][exceptions] Exception <a 'java/nio/file/DirectoryNotEmptyException'{0x0000000703ba9780}>
 thrown in interpreter method <{method} {0x00000008002443c0} 'delete' '(Ljava/nio/file/Path;)V' in 'sun/nio/fs/AbstractFileSystemProvider'>
 at bci 3 for thread 0x0000022dbf113450 (main)
[9.336s][info ][exceptions] Exception <a 'java/nio/file/DirectoryNotEmptyException'{0x0000000703ba9780}>
 thrown in interpreter method <{method} {0x00000008002283c8} 'delete' '(Ljava/nio/file/Path;)V' in 'java/nio/file/Files'>
 at bci 5 for thread 0x0000022dbf113450 (main)
[9.336s][info ][exceptions] Exception <a 'java/nio/file/DirectoryNotEmptyException'{0x0000000703ba9780}>
 thrown in interpreter method <{method} {0x0000022de2cd8b90} 'postVisitDirectory' '(Ljava/nio/file/Path;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;' in 'jdk/jpackage/internal/IOUtils$1'>
 at bci 1 for thread 0x0000022dbf113450 (main)
[9.336s][info ][exceptions] Exception <a 'java/nio/file/FileSystemException'{0x0000000703ba47a8}: プロセスはファイルにアクセスできません。別のプロセスが使用中です。>
 thrown in interpreter method <{method} {0x0000022de2c8bef8} 'deleteRecursive' '(Ljava/nio/file/Path;)V' in 'jdk/jpackage/internal/IOUtils'>
 at bci 47 for thread 0x0000022dbf113450 (main)
[9.336s][info ][exceptions] Exception <a 'java/nio/file/FileSystemException'{0x0000000703ba47a8}: プロセスはファイルにアクセスできません。別のプロセスが使用中です。>
 thrown in interpreter method <{method} {0x0000022de2c5ff18} 'cleanup' '(Ljava/util/Map;)V' in 'jdk/jpackage/internal/AbstractBundler'>
 at bci 10 for thread 0x0000022dbf113450 (main)
```;;;","2021-04-19 18:19;roboduke;Changeset: 142edd3a
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2021-04-20 01:18:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/142edd3a
;;;",,,,,,,,,,,,,,,,,,,,,,,
AsyncGetCallTrace crashes on ResourceMark,JDK-8265150,5046818,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,never,never,2021-04-13 11:42,2022-03-03 22:22,2023-10-01 09:57,2021-12-04 05:06,17,,,,,,,,18,hotspot,,0,AsyncGetCallTrace,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,,,,"While running a fastdebug build I hit this:

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/resourceArea.hpp:117
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/Users/graal2/slave/e/main/jdk_tlda/open/src/hotspot/share/memory/resourceArea.hpp:117), pid=85699, tid=6403
#  assert(size_in_bytes() > state._size_in_bytes) failed: size: 984, saved size: 984

V  [libjvm.dylib+0x11730ed]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6dd
V  [libjvm.dylib+0x117370b]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V  [libjvm.dylib+0x6177ef]  report_vm_error(char const*, int, char const*, char const*, ...)+0x13f
V  [libjvm.dylib+0x5582]  ResourceArea::rollback_to(ResourceArea::SavedState const&)+0x82
V  [libjvm.dylib+0x2d0c05]  ResourceMark::~ResourceMark()+0x35
V  [libjvm.dylib+0xdd40d2]  Method::bci_from(unsigned char*) const+0xe2
V  [libjvm.dylib+0xdd4162]  Method::validate_bci_from_bcp(unsigned char*) const+0x52
V  [libjvm.dylib+0x6f980e]  forte_fill_call_trace_given_top(JavaThread*, ASGCT_CallTrace*, int, frame)+0x42e
V  [libjvm.dylib+0x6f93b9]  AsyncGetCallTrace+0x249
C  [libasyncProfiler.so+0x116c7]  Profiler::getJavaTraceAsync(void*, ASGCT_CallFrame*, int)+0xc7
C  [libasyncProfiler.so+0x12379]  Profiler::recordSample(void*, unsigned long long, int, _jmethodID*, ThreadState)+0x379
C  [libasyncProfiler.so+0x1923e]  WallClock::signalHandler(int, __siginfo*, void*)+0x9e
C  [libsystem_platform.dylib+0x3d7d]  _sigtramp+0x1d

I think you can end up with a following chunk without changing the size of the current chunk if your allocation is bigger than the remaining space in the current chunk.  So I think it should be >=.  This seems to have been introduced by JDK-8251850.",,,,,,,,,,JDK-8278512,JDK-8278765,JDK-8279161,JDK-8279163,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282405,,,,,,,,,,,,"2021-11-18 21:46;never;hs_err_pid53080.log;https://bugs.openjdk.org/secure/attachment/97144/hs_err_pid53080.log",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sdhv:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2021-04-13 11:47;mseledtsov;ILW = MLM = P4;;;","2021-04-21 14:05;kbarrett;The failing assert was copied during JDK-8251850 refactoring from the previous code:

https://github.com/openjdk/jdk/commit/52117c6f62949fd6de47cca94159f012e9077ebb
new code: resourceArea.hpp:115
old code: resourceArea.hpp:135 and resourceArea.hpp:238

The assert was originally introduced by
JDK-7199092: NMT: NMT needs to deal overlapped virtual memory ranges
10/19/2012
;;;","2021-11-18 10:42;coleenp;I don't see how this is possible.

#ifdef ASSERT
  {
    ResourceMark rm;
    assert(is_native() && bcp == code_base() || contains(bcp) || VMError::is_error_reported(),
           ""bcp doesn't belong to this method: bcp: "" INTPTR_FORMAT "", method: %s"",
           p2i(bcp), name_and_sig_as_C_string());
  }
#endif

It looks like the caller of bci_from is_native() so it wouldn't have allocated a new chunk for a ResourceArea.  Even if it did, the size in the assert is the total size of all the allocations in the chunks, so should be strictly greater than what was saved in the SavedState. edit: calling Afree doesn't changed the allocated size. 

Do you have a core file or can you reproduce this?
;;;","2021-11-18 21:50;never;I can reproduce it on latest 18 using this command line
~/Downloads/jdk-18/fastdebug/bin/java -server -Xmx8G -XX:SuppressErrorAt=/stackWatermarkSet.cpp:73 -XX:+UnlockDiagnosticVMOptions -XX:SuppressErrorAt=/frame_x86.cpp:737 -XX:+DebugNonSafepoints -agentpath:libasyncProfiler.so=start,file=scalatest_2021-11-18_120812.svg -jar /Users/tkrodrig/.mx/cache/DACAPO_SCALA_59b64c974662b5cf9dbd3cf9045d293853dd7a51/dacapo-scala.jar scalatest -n 80 -s default

I attached https://bugs.openjdk.java.net/secure/attachment/97144/hs_err_pid53080.log showing the crash.  You can download the async profiler from https://github.com/jvm-profiling-tools/async-profiler and scala dacapo from https://repo.scalabench.org/snapshots/org/scalabench/benchmarks/scala-benchmark-suite/0.1.0-SNAPSHOT/scala-benchmark-suite-0.1.0-20120216.103539-3.jar;;;","2021-11-22 10:48;coleenp;Is -n 80 running this 80 times?

Should I be getting this error?

[WARN] perf_event_open for TID 4360 failed: Permission denied
[ERROR] No access to perf events. Try --fdtransfer or --all-user option or 'sysctl kernel.perf_event_paranoid=1'
Using scaled threading model. 48 processors detected, 48 threads used to drive the workload, in a possible range of [1,unlimited]

Is jvmci suppressing stack watermark errors because the code isn't there yet?;;;","2021-11-22 10:57;never;Yes that runs it 80 times.
I think you can drop the watermark suppress since it should be fixed in 18 https://bugs.openjdk.java.net/browse/JDK-8265148.  I was reproducing this in a couple different configs so I needed that one at some point.
The perf error is probably a permissions error.  See https://github.com/jvm-profiling-tools/async-profiler#basic-usage for the command you need to enable access.  Hopefully you have root access on your test machine.;;;","2021-11-22 11:06;coleenp;Ok, thanks, that's better.  Now I get the crash immediately.;;;","2021-11-22 13:19;coleenp;
The PerfEvents signal handler signals the thread while in the ~ResourceMarkImpl destructor in Chunk::next_chop, after rollback_to has reset the size_in_bytes:

114	    if (state._chunk->next() != nullptr) { // Delete later chunks.
(gdb) 
115	      // Reset size before deleting chunks.  Otherwise, the total
116	      // size could exceed the total chunk size.
117	      assert(size_in_bytes() > state._size_in_bytes,
118	             ""size: "" SIZE_FORMAT "", saved size: "" SIZE_FORMAT,
119	             size_in_bytes(), state._size_in_bytes);
120	      _last_size = _size_in_bytes;   (my debugging code _last_size is 33712)
121	      set_size_in_bytes(state._size_in_bytes);    <===  HERE set to 984
122	      state._chunk->next_chop();     <==== SIGTRAMP gets a signal here
123	    } else {
124	      assert(size_in_bytes() == state._size_in_bytes, ""Sanity check"");

Further down the stack (up in gdb) is a ResourceMark, and ResourceMark destructor with the same code.

Here the chunk->_next hasn't been chopped yet, but the total size in bytes has been set to 984, and hits the assertion.
It should be safe to change to >= in the assert with a comment for this case.

Wow, no, it fails in other ways.  Lots of other ways, seemingly unrelated to the > vs >= change I just made.;;;","2021-11-22 15:00;coleenp;Signal based sampling is really bad:

#17 0x00007f64bc0b89b4 in Profiler::getJavaTraceAsync(void*, ASGCT_CallFrame*, int) () from ./libasyncProfiler.so
#18 0x00007f64bc0b9242 in Profiler::recordSample(void*, unsigned long long, int, Event*) () from ./libasyncProfiler.so
#19 0x00007f64bc0e4f2c in PerfEvents::signalHandler(int, siginfo_t*, void*) () from ./libasyncProfiler.so
#20 <signal handler called>
#21 0x00007f64bf0b8d62 in pthread_mutex_lock () from /lib64/libpthread.so.0
#22 0x00007f64be28cd4f in ThreadCritical::ThreadCritical (this=<optimized out>)
    at src/hotspot/os/linux/threadCritical_linux.cpp:43
#23 0x00007f64bce5a69d in allocate (this=0x7f64bea3f820 <ChunkPool::_pools>)
    at src/hotspot/share/memory/arena.cpp:174
#24 Chunk::operator new (sizeofChunk=sizeofChunk@entry=24, alloc_failmode=alloc_failmode@entry=AllocFailStrategy::EXIT_OOM, 
    length=length@entry=32728) at src/hotspot/share/memory/arena.cpp:174
#25 0x00007f64bce5b0fc in Arena::grow (this=0x7f64b80581b0, x=2048, 

It sends a signal in pthread_mutex_lock.  Further up the stack we're waiting for the same lock, and it's deadlocked.

#2  0x00007f64bf0b8d68 in pthread_mutex_lock () from /lib64/libpthread.so.0
#3  0x00007f64be28cd4f in ThreadCritical::ThreadCritical (this=<optimized out>)
    at src/hotspot/os/linux/threadCritical_linux.cpp:43
#4  0x00007f64bce5a69d in allocate (this=0x7f64bea3f820 <ChunkPool::_pools>)
    at src/hotspot/share/memory/arena.cpp:174
#5  Chunk::operator new (sizeofChunk=sizeofChunk@entry=24, alloc_failmode=alloc_failmode@entry=AllocFailStrategy::EXIT_OOM, 
    length=length@entry=32728) at src/hotspot/share/memory/arena.cpp:174
#6  0x00007f64bce5b0fc in Arena::grow (this=0x7f64b80581b0, x=4096, ;;;","2021-11-22 18:52;dholmes;Signal handling code should only be executing async-signal-safe code - pthread_mutex_lock is not async-signal-safe. :(;;;","2021-11-23 05:15;coleenp;I think they're using AsyncGetCallTrace wrong in this performance monitoring tool.  [~dcubed] can you comment?  Fixing rollback-to >= doesn't really help that much since there are multiple crashes in many other places, including in the compiler threads.  I don't think I should change this.;;;","2021-11-23 08:47;dcubed;If the AsyncGetCallTrace() signal handler is calling pthread_mutex_lock()
that's definitely not a ""good thing"" (TM). It has been a long time since I've
worked on this code, but I don't remember the code grabbing locks before.;;;","2021-11-23 09:46;coleenp;It doesn't grab locks explicitly that I can find but it resource allocation can grab the ThreadCritical pthread mutex.  Still can't explain why this crashes in the compiler thread either.;;;","2021-11-23 09:50;coleenp;I guess the question is, what determines whether it's safe to stop and take the sample?

Stack: [0x00007fc80c8bb000,0x00007fc80c9bc000],  sp=0x00007fc80c9b4e28,  free space=999k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libc.so.6+0x8fa10]  __memset_sse2+0xa0  <==== crash
V  [libjvm.so+0x310948]  ResourceMarkImpl::reset_to_mark() const+0x26
V  [libjvm.so+0x310904]  ResourceMarkImpl::~ResourceMarkImpl()+0x18
V  [libjvm.so+0x310ac2]  ResourceMark::~ResourceMark()+0x52
V  [libjvm.so+0xf5cc7c]  Method::bci_from(unsigned char*) const+0x10c
V  [libjvm.so+0xf5cd6c]  Method::validate_bci_from_bcp(unsigned char*) const+0xa2
V  [libjvm.so+0x6d98bf]  vframeStreamCommon::fill_from_interpreter_frame()+0x47
V  [libjvm.so+0x6d96f7]  vframeStreamCommon::fill_from_frame()+0x2d
V  [libjvm.so+0x98532b]  vframeStreamForte::forte_next()+0x109
V  [libjvm.so+0x985e0a]  forte_fill_call_trace_given_top(JavaThread*, ASGCT_CallTrace*, int, frame)+0x266
V  [libjvm.so+0x986023]  AsyncGetCallTrace+0x1e5
C  [libasyncProfiler.so+0x89b4]  Profiler::getJavaTraceAsync(void*, ASGCT_CallFrame*, int)+0xd4
C  [libasyncProfiler.so+0x9242]  Profiler::recordSample(void*, unsigned long long, int, Event*)+0xd2
C  [libasyncProfiler.so+0x34f2c]  PerfEvents::signalHandler(int, siginfo_t*, void*)+0x8c
C  [libpthread.so.0+0xf630]
V  [libjvm.so+0x5422ba]  unsigned long align_up<unsigned long, int, 0>(unsigned long, int)+0x19
V  [libjvm.so+0x551f26]  Chunk::aligned_overhead_size()+0x13
V  [libjvm.so+0x551f67]  Chunk::bottom() const+0x11
V  [libjvm.so+0x551f88]  Chunk::top() const+0x18
V  [libjvm.so+0x55169f]  Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum)+0xef
V  [libjvm.so+0x3d71cd]  Arena::internal_amalloc(unsigned long, AllocFailStrategy::AllocFailEnum)+0xcb
V  [libjvm.so+0x5421bf]  Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum)+0xb3
V  [libjvm.so+0x10aed2a]  ResourceArea::allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum)+0xb6
V  [libjvm.so+0x10c31b4]  resource_allocate_bytes(Thread*, unsigned long, AllocFailStrategy::AllocFailEnum)+0x34
V  [libjvm.so+0x7a1036]  ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, JavaThread*)+0xe18
V  [libjvm.so+0x7a2a13]  ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, JavaThread*)+0x26d
;;;","2021-11-23 11:14;never;Maybe the JFR path would provide some clarity about what safety checks are required?  There seem to be a lot more safety checks over in the JFR equivalent of this and those are probably required for any signal based use of AsyncGetCallTrace from JVMTI.;;;","2021-11-29 08:01;coleenp;I thought taking out the ResourceMark from Method::bci_from in an assert would be helpful and it does run longer, but now gets a crash here:

#  Internal Error (18rollback/src/hotspot/share/runtime/stackWatermarkSet.cpp:72), pid=38183, tid=40697
#  assert(state != _thread_in_native) failed: unsafe thread state

Stack: [0x00007f256e8e9000,0x00007f256e9ea000],  sp=0x00007f256e9e3790,  free space=1001k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x17dd83d]  verify_processing_context()+0xdd
V  [libjvm.so+0x17ddb05]  StackWatermarkSet::on_iteration(JavaThread*, frame const&)+0x35
V  [libjvm.so+0xc51815]  frame::sender(RegisterMap*) const+0x105
V  [libjvm.so+0xc46ba8]  frame::real_sender(RegisterMap*) const+0x18
V  [libjvm.so+0x19deeff]  vframe::sender() const+0xef
V  [libjvm.so+0x19df010]  vframe::java_sender() const+0x10
V  [libjvm.so+0x12384f0]  JvmtiEnvBase::get_stack_trace(JavaThread*, int, int, jvmtiFrameInfo*, int*)+0x420
C  [libasyncProfiler.so+0x85f9]  Profiler::getJavaTraceInternal(jvmtiFrameInfo*, ASGCT_CallFrame*, int)+0x79
C  [libasyncProfiler.so+0x8e61]  Profiler::getJavaTraceAsync(void*, ASGCT_CallFrame*, int)+0x581

This looks like a profiler or a JVMTI bug. (edit: JVMTI bug)

More edit: this must be what this command line option was about  -XX:SuppressErrorAt=/stackWatermarkSet.cpp:73;;;","2021-12-04 05:06;roboduke;Changeset: 267c024e
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-12-04 13:05:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/267c024eb52acd1611188dd5b1417b877ff3eafd
;;;","2021-12-13 07:11;zgu;Fix Request (17u)

A clean backport for parity with Oracle 17.0.3. ;;;","2021-12-17 13:33;zgu;Fix Request (11u)

Backport this patch for parity with Oracle 11.0.15.

The original patch does not apply cleanly, 11u patch has been reviewed.
;;;","2021-12-20 07:12;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/14
Date: 2021-12-20 15:07:01 +0000
;;;","2022-03-03 22:22;stuefe;https://bugs.openjdk.java.net/browse/JDK-8282405 attempts to solve this in a more general way. PR is open for review.;;;",,,,,,,
StackWatermarkSet being updated during AsyncGetCallTrace,JDK-8265148,5046815,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lmesnik,never,never,2021-04-13 11:04,2021-06-07 15:19,2023-10-01 09:57,2021-06-01 11:07,16,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"It looks like the fix for JDK-8253180 missed a couple RegisterMap constructors in forte.cpp.  Running sunflow with the async profiler from https://github.com/jvm-profiling-tools/async-profiler shows this.

V  [libjvm.dylib+0x11730ed]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6dd
V  [libjvm.dylib+0x117370b]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V  [libjvm.dylib+0x6177ef]  report_vm_error(char const*, int, char const*, char const*, ...)+0x13f
V  [libjvm.dylib+0xfcc0a0]  verify_processing_context()+0xf0
V  [libjvm.dylib+0xfcc4b6]  StackWatermarkSet::on_iteration(JavaThread*, frame const&)+0x26
V  [libjvm.dylib+0x7010da]  frame::sender(RegisterMap*) const+0x2a
V  [libjvm.dylib+0x6f9574]  forte_fill_call_trace_given_top(JavaThread*, ASGCT_CallTrace*, int, frame)+0x194
V  [libjvm.dylib+0x6f93b9]  AsyncGetCallTrace+0x249
C  [libasyncProfiler.so+0x116c7]  Profiler::getJavaTraceAsync(void*, ASGCT_CallFrame*, int)+0xc7
C  [libasyncProfiler.so+0x12379]  Profiler::recordSample(void*, unsigned long long, int, _jmethodID*, ThreadState)+0x379
C  [libasyncProfiler.so+0x1923e]  WallClock::signalHandler(int, __siginfo*, void*)+0x9e
C  [libsystem_platform.dylib+0x3d7d]  _sigtramp+0x1d

cc [~eosterlund]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8253180,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sdh7:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2021-04-13 11:57;dcubed;Moving from hotspot/jvmti -> hotspot/svc. 
AsyncGetCallTrace() is supported by the Serviceability team
and is not a JVM/TI API.;;;","2021-06-01 11:07;roboduke;Changeset: 2b338355
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2021-06-01 18:06:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2b3383557f71ede15d00bd87742a277c0c764d20
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Simplify DerUtils::checkAlg,JDK-8265138,5046797,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2021-04-13 07:24,2021-04-19 16:31,2023-10-01 09:57,2021-04-13 09:57,,,,,,,,,17,security-libs,,0,noreg-self,,,,,,,,,,,,,,,,,,,,,,"Besides ObjectIdentifier and KnownOIDs, the checkAlg() method also accepts a string as the expected OID argument. One might naïvely believe they can use something like ""1.2.3.4"" but it's actually meant to be a descriptive name like ""Ed25519"". A string can be anything and easily confuses users.

I suggest we do not accept string here. For the few use cases where an input looks like ""Ed25519"", the caller can pass in either `KnowOIDs.Ed25519` or `KnownOIDs.findMatch(""Ed25519"")` directly. I also don't intend to reinterpret the string as a raw OID string. In most cases, a literal OID string already has a ""known"" KnownOIDs value. Otherwise one can always use new `ObjectIdentifier(string)`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sdd7:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-04-13 09:57;roboduke;Changeset: 9cd5400d
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-04-13 16:56:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9cd5400d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
java.util.Random suddenly has new public methods nowhere documented,JDK-8265137,5046796,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlaskey,uschindler,uschindler,2021-04-13 07:12,2021-07-15 05:00,2023-10-01 09:57,2021-05-04 04:54,17,,,,,,,,17,core-libs,,0,17ea,apache-lucene-found,forbiddenapis-found,,,,,,,,,,,,,,,,,,,,"while investigating some  issues with build 17 of openJDK in combination with the forbiddenapis Maven/Gradle plugin I noticed that starting with JDK 17 b17 java.util.Random now extends some internal class of some jdk.internal package (jdk.internal.util.random.RandomSupport.AbstractSpliteratorGenerator). This is not really great, but shows what the module system can do. Tools owners (like forbiddenapis) have to work around that until full module system support is there.

But the extension of class jdk.internal.util.random.RandomSupport.AbstractSpliteratorGenerator brings some other problems: As the class is in another package, it implements some public methods (with some intro comment ""Required by AbstractSpliteratorGenerator"" - so implementor knows that's something strange): https://github.com/openjdk/jdk/blob/a0ec2cb289463969509fe508836e3faf789f46d8/src/java.base/share/classes/java/util/Random.java#L618-L626

Those methods are marked by the Javadoc tag @hidden. So they are nowhere documented and are implementation details. But those methods are still visible as public methods and also shown by IDE tools during autocomplete!

The following code compiles!!!:

import java.util.Random;

public class RandomTest { 
  public static void main(String... args) {
    new Random().makeLongsSpliterator(0L, 10L, 1L, 5L);
  } 
}

This should not be possible, as makeLongsSpliterator is nowhere documented, so code may accidentally use it.

I have not looked at the other implementations like SecureRandom and others, but I suspect they have the same problem.

IMHO, the code should not extend this internal abstract class and instead use a private implementation of the the abstract class and just delegate to it. It should also declare ""implements RandomGenerator"" directly. Reading the code is too confusing!

The current class design with extending classes hidden in other modules and implementing partially hiden methods is not a good thing, so please fix this!","openjdk version ""17-ea"" 2021-09-14
OpenJDK Runtime Environment (build 17-ea+17-1401)
OpenJDK 64-Bit Server VM (build 17-ea+17-1401, mixed mode, sharing)",,,,,,,,,,,,,,,,,,,,,,,,JDK-8265221,,,,,,,,,,,,JDK-8248862,JDK-8265276,JDK-8270547,,,,,,,,,,,,,,,,,,,,,generic,,,,,,b17,17,,generic,,,,,,"0|i2sdcz:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2021-04-13 07:24;uschindler;Why are makeLongsSpliterator() and others not declared ""protected"" in the abstract class. Their intention is to be just used by subclasses.

This would also fix the issue!;;;","2021-04-13 19:58;dholmes;This is ringing some CSR alarm bells for me. You can't just add protected methods to non-final public classes either, without recognising that this is an API change.;;;","2021-04-14 00:24;uschindler;Hi David,
this is right, but not different from the previous approach (public methods added to non-final class). The new PR looks like an improvement to me, so the visibility is reduced.
The main problem here is that the hidden superclass should be package private, but this does not work, because subclasses of Random and the RandomGenerator are in many different packages, so it is hard to find a good place.

But yes, I tried it out: You can subclass Random and override that method.

Solution: make the protected implementations final.;;;","2021-05-04 04:54;roboduke;Changeset: 05e60174
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-05-04 11:53:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/05e601748a35de02a33721199a00a3d6c335c6d9
;;;",,,,,,,,,,,,,,,,,,,,,,,,
"C2 compilation fails with assert ""missing precedence edge""",JDK-8265132,5046791,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jcm,thartmann,thartmann,2021-04-13 05:17,2021-08-05 22:46,2023-10-01 09:57,2021-07-01 21:27,11,16,17,18,8u281,,,,17,hotspot,,0,c2,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/jdk/open/src/hotspot/share/opto/gcm.cpp:830), pid=627780, tid=627848
#  assert(store->find_edge(load) != -1) failed: missing precedence edge

Current CompileTask:
C2:   1324  487       4       MainClass::e (37 bytes)

Stack: [0x00007f99917f8000,0x00007f99918f9000],  sp=0x00007f99918f4000,  free space=1008k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd250e8]  PhaseCFG::insert_anti_dependences(Block*, Node*, bool)+0x16c8
V  [libjvm.so+0x6c60e4]  PhaseCFG::verify() const+0x664
V  [libjvm.so+0xa1fc3f]  Compile::Code_Gen()+0x2af
V  [libjvm.so+0xa2ac5c]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x19dc
V  [libjvm.so+0x853f2a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa3a9d1]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xf21
V  [libjvm.so+0xa3b678]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1865bc1]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x186dd00]  Thread::call_run()+0x100
V  [libjvm.so+0x1559466]  thread_native_entry(Thread*)+0x116",,,,,,,,,,JDK-8269831,JDK-8270354,JDK-8269997,JDK-8270701,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261730,,,,,,"2021-04-13 05:18;thartmann;MainClass.java;https://bugs.openjdk.org/secure/attachment/94148/MainClass.java","2021-04-13 09:51;rcastanedalo;Reduced.java;https://bugs.openjdk.org/secure/attachment/94154/Reduced.java","2021-06-02 05:18;jcm;afterImplicitNullCheck;https://bugs.openjdk.org/secure/attachment/94978/afterImplicitNullCheck","2021-06-02 05:18;jcm;beforeImplicitNullCheck;https://bugs.openjdk.org/secure/attachment/94979/beforeImplicitNullCheck","2021-04-13 05:18;thartmann;hotspot_pid278043.log;https://bugs.openjdk.org/secure/attachment/94149/hotspot_pid278043.log","2021-04-13 05:18;thartmann;hotspot_pid278061.log;https://bugs.openjdk.org/secure/attachment/94150/hotspot_pid278061.log",,,,,,,,,,,,,,,,,,,,,"0|i2sdbv:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-04-13 05:17;thartmann;ILW = Assert during C2 compilation, reproducible with generated test, no known workaround but disable compilation of affected method = HMM = P2;;;","2021-04-13 05:18;thartmann;To reproduce run attached MainClass.
;;;","2021-04-13 05:32;thartmann;Might be similar/related to JDK-8261730.;;;","2021-04-13 09:52;rcastanedalo;Attached a further reduced reproducer, just run
$ java Reduced.java;;;","2021-05-20 09:26;jcm;Yes it is similar and related to JDK-8261730.;;;","2021-05-21 15:06;jcm;add similar checks for loads in null block at https://github.com/openjdk/jdk/commit/4cfecceb#diff-13dc4f80ba6ccaa27b0612318074e35200ffe9314405e30ace331807e56b5f60L813;;;","2021-06-02 05:23;jcm;you can clearly see [1] whose null check is already done being scheduled late in block 11. in null block for [2]. They are two different memory operation and doesn't require and anti-dependence edge.

[1] 64  addI_rReg_mem  ===  85  15  65  31  [[ 69  55 ]] 
[2]  74  storeImmI0  ===  87  15  62  [[ 73  89 ]] memory  Memory: @Reduced$Int+12 *, name=val, idx=7; !jvms: Reduced::foo @ bci:26 (line 8)#12/0x000000000000000c !jvms: Reduced::foo @ bci:16 (line 7);;;","2021-07-01 21:27;roboduke;Changeset: 5644c4f9
Author:    Jamsheed Mohammed C M <jcm@openjdk.org>
Date:      2021-07-02 04:26:09 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/5644c4f942d9280ecc2dd3fdcd1680db6621da27
;;;","2021-07-12 08:33;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.13-oracle. Applies almost cleanly. Review: https://github.com/openjdk/jdk11u-dev/pull/124;;;",,,,,,,,,,,,,,,,,,,
ZGC: Fix incorrect reporting of reclaimed memory,JDK-8265127,5046783,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pliden,pliden,pliden,2021-04-13 04:15,2021-05-03 20:16,2023-10-01 09:57,2021-04-26 04:54,16,17,,,,,,,17,hotspot,,0,zgc,,,,,,,,,,,,,,,,,,,,,,"When Java threads relocate objects, ZGC will over-report number of reclaimed bytes and under-report amount of garbage left after GC. This happens because the logic calculating the total number of reclaimed bytes assumes all objects where relocated by GC workers. The result is that the information printed in the GC log can be skewed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260646,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sda3:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-04-26 04:54;roboduke;Changeset: a9367dbd
Author:    Per Liden <pliden@openjdk.org>
Date:      2021-04-26 11:52:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a9367dbd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: cannot edit forms with NetBeans GUI builder,JDK-8265125,5046781,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rcastanedalo,rcastanedalo,rcastanedalo,2021-04-13 03:51,2022-08-16 23:39,2023-10-01 09:57,2021-04-13 10:08,17,,,,,,,,17,hotspot,,0,diagnostics,hs-comp-triaged,igv,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,"After JDK-8264795, it is no longer possible to edit IGV forms using the NetBeans GUI builder.

HOW TO REPRODUCE:

1. Open the IdealGraphVisualizer project on NetBeans 12.3, selecting ""Open Required Projects"" as well.
2. In the ""Projects"" window, Open Settings -> Source Packages -> com.sun.hotspot.igv.settings -> ViewPanel.java
3. We expect NetBeans to open ViewPanel.java in ""Design"" mode (see expected.png) but it opens instead the file in ""Source"" mode (see actual.png), without the possibility of switching to ""Design"".

POSSIBLE SOLUTION:

Move all .form files created by NetBeans to the same directory as their corresponding .java files.",,,,,,,,,,,,,,,,,,,,,,,JDK-8254145,,,,,,,,,,,,,,JDK-8264795,,,,,,,,,,,,"2021-04-13 03:51;rcastanedalo;actual.png;https://bugs.openjdk.org/secure/attachment/94146/actual.png","2021-04-13 03:51;rcastanedalo;expected.png;https://bugs.openjdk.org/secure/attachment/94145/expected.png",,,,,,,,,,,,,,,,,17,,,,,,,,"0|i2sd9n:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-13 04:00;thartmann;ILW = MLH = P4;;;","2021-04-13 10:08;roboduke;Changeset: 8df8512b
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2021-04-13 17:07:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8df8512b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
G1: update_remset_before_rebuild mixes liveness in words with liveness in bytes,JDK-8265119,5046775,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iwalulya,iwalulya,iwalulya,2021-04-13 02:26,2021-04-21 18:03,2023-10-01 09:57,2021-04-16 00:30,11.0.2,17,,,,,,,17,hotspot,,0,gc-g1,,,,,,,,,,,,,,,,,,,,,,"size_t const live_bytes = _cm->liveness(hr->hrm_index());
selected_for_rebuild = tracking_policy->update_before_rebuild(hr, live_bytes);

The code erroneously uses the liveness count (i.e. the amount of live words between bottom and nTAMS) instead of the liveness_in_bytes  for the selection of regions for remembered set rebuilding. The effect is that more regions will be selected for rebuild than necessary.

Fix and add a test for G1MixedGCLiveThresholdPercent",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8199407,,,,,,JDK-8205426,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sd8b:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-04-14 01:45;tschatzl;Maybe rename ConcurrentMark::liveness() to live_words() to make this clear; or change its return value to WordSize to completely avoid unintentional mixups in the future.;;;","2021-04-16 00:30;roboduke;Changeset: fc89fe64
Author:    Ivan Walulya <iwalulya@openjdk.org>
Date:      2021-04-16 07:29:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fc89fe64
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
ZGC: Steal local stacks instead of flushing them,JDK-8265116,5046770,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pliden,pliden,pliden,2021-04-13 01:09,2022-09-23 01:52,2023-10-01 09:57,2021-04-26 04:58,17,,,,,,,,17,hotspot,,0,zgc,,,,,,,,,,,,,,,,,,,,,,"As part of addressing the issue of excessive mark stack usage, it was observed that sometimes mark stack utilization can be very low. For example, casparcwang@tencent.com reported that when running Apache Zookeeper, mark stack utilization was ~10%.

The problem is that GC workers are a bit too eager to flush mark stacks. Currently, whenever a GC worker has drained its home stripe it will always flush all remaining mark stacks. This causes non-full mark stacks to be flushed. This in turn means that the GC worker who receives that non-full stack (small amount of work) tends to also produce non-full stacks (small amount of work) for other GC workers. This can lead to a vicious cycle, which results in excessive mark stack memory usage.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260267,,,,,,JDK-8262995,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sd77:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-04-26 04:58;roboduke;Changeset: 31abe68f
Author:    Per Liden <pliden@openjdk.org>
Date:      2021-04-26 11:57:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/31abe68f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix effect problems,JDK-8265107,5046760,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,whuang,whuang,whuang,2021-04-12 20:13,2021-04-14 02:36,2023-10-01 09:57,2021-04-14 02:36,repo-panama,,,,,,,,repo-panama,hotspot,,0,c2,huawei-interest,vectorapi,,,,,,,,,,,,,,,,,,,," In aarch64_sve.ad file, some effect(...) are set improperly. In this issue, I will fix them. 
 I will optimize some register allocation in ad file, too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,,"0|i2sd4z:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: Enforce en-US locale while parsing ideal graph,JDK-8265106,5046759,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yyang,yyang,yyang,2021-04-12 20:12,2022-08-16 23:39,2023-10-01 09:57,2021-04-20 23:37,17,,,,,,,,17,hotspot,,0,diagnostics,hs-comp-triaged,igv,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,Enforce en-US locale while parsing ideal graph so that users that using non-English locale settings can open an incomplete XML as well.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263790,,,,,,,,,,,,,,,,"2021-04-19 01:01;rcastanedalo;incomplete.zip;https://bugs.openjdk.org/secure/attachment/94215/incomplete.zip",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sd4r:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-13 01:37;rcastanedalo;Fix proposal: https://github.com/robcasloz/jdk/commit/702e763. The proposal could be completed with a test case that parses an incomplete XML document in `src/utils/IdealGraphVisualizer/Data/src/test/java/com/sun/hotspot/igv/data/serialization/ParserTest.java`.;;;","2021-04-19 01:02;rcastanedalo;Added an incomplete graph file to ease reproducing and testing.;;;","2021-04-20 23:37;roboduke;Changeset: b5c92ca3
Author:    Yi Yang <yyang@openjdk.org>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-04-21 06:36:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b5c92ca3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
gc/arguments/TestSelectDefaultGC.java fails when compiler1 is disabled,JDK-8265105,5046758,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,aoqi,aoqi,aoqi,2021-04-12 19:54,2021-08-05 10:21,2023-10-01 09:57,2021-04-22 11:07,17,,,,,,,,17,hotspot,,0,hs-comp-triaged,oraclejdk-na,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,,"Created on behalf of Sun Guoyun <sunguoyun@loongson.cn>:

gc/arguments/TestSelectDefaultGC.java hit assert(verify_level(level)) failed: Invalid highest compilation level when using --with-jvm-features=-compiler1:

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/compilationPolicy.cpp:582
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/gysun/jdk-ls-x64/src/hotspot/share/compiler/compilationPolicy.cpp:582), pid=20304, tid=20305
#  assert(verify_level(level)) failed: Invalid highest compilation level: 1
#
# JRE version:  (17.0) (fastdebug build )
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-adhoc.gysun.jdk-ls-x64, mixed mode, emulated-client, compressed oops, compressed class ptrs, serial gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x7e3dc0]  CompilationPolicy::highest_compile_level()+0xc0
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /home/gysun/jdk-ls-x64/JTwork/scratch/core.20304)
#
# An error report file with more information is saved as:
# /home/gysun/jdk-ls-x64/JTwork/scratch/hs_err_pid20304.log
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8251462,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sd4j:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-13 04:37;thartmann;ILW = Assert during compilation, build without C1, no workaround = HLH = P2 ;;;","2021-04-22 11:07;roboduke;Changeset: 31d8a19e
Author:    sunguoyun <sunguoyun@loongson.cn>
Committer: Igor Veresov <iveresov@openjdk.org>
Date:      2021-04-22 18:05:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/31d8a19e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
CpuLoad and SystemCpuLoad in OperatingSystem MXBean returns -1.0,JDK-8265104,5046755,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2021-04-12 18:57,2023-01-20 06:32,2023-10-01 09:57,2021-04-14 00:39,16,17,,,,,,,17,core-svc,,0,,,,,,,,,,,,,,,,,,,,,,,"I got -1.0 from both CpuLoad and SystemCpuLoad in OperatingSystem MXBean when I run the application on Fedora 33 x64 which is installed cgroups V2. Please see the attached image which I captured JConsole.

I do not run the application in the container, nor do not run with resource limitation on cgroups, so JMX should report CPU load on host value in this case.",,,,,,,,,,JDK-8300782,JDK-8300781,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-04-12 18:57;ysuenaga;jconsole-cpuload.png;https://bugs.openjdk.org/secure/attachment/94137/jconsole-cpuload.png",,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2sd3v:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2021-04-13 07:54;sgehwolf;The reason this is happening, is because containerMetrics in OperatingSystemImpl is non-null (a cgroups v2 instance), but containerMetrics.getCpuSetCpus() and containerMetrics.getEffectiveCpuSetCpus() return null as there are no CPU set restrictions in place.

RMI TCP Connection(4)-192.168.122.215[1] where
  [1] com.sun.management.internal.OperatingSystemImpl.getCpuLoad (OperatingSystemImpl.java:159)
  [2] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (native method)
  [3] jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:78)
  [4] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
  [5] java.lang.reflect.Method.invoke (Method.java:566)
  [6] sun.reflect.misc.Trampoline.invoke (MethodUtil.java:71)
  [7] jdk.internal.reflect.GeneratedMethodAccessor9.invoke (null)
  [8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
  [9] java.lang.reflect.Method.invoke (Method.java:566)
  [10] sun.reflect.misc.MethodUtil.invoke (MethodUtil.java:260)
  [11] com.sun.jmx.mbeanserver.ConvertingMethod.invokeWithOpenReturn (ConvertingMethod.java:193)
  [12] com.sun.jmx.mbeanserver.ConvertingMethod.invokeWithOpenReturn (ConvertingMethod.java:175)
  [13] com.sun.jmx.mbeanserver.MXBeanIntrospector.invokeM2 (MXBeanIntrospector.java:117)
  [14] com.sun.jmx.mbeanserver.MXBeanIntrospector.invokeM2 (MXBeanIntrospector.java:54)
  [15] com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM (MBeanIntrospector.java:237)
  [16] com.sun.jmx.mbeanserver.PerInterface.getAttribute (PerInterface.java:83)
  [17] com.sun.jmx.mbeanserver.MBeanSupport.getAttribute (MBeanSupport.java:206)
  [18] com.sun.jmx.mbeanserver.MBeanSupport.getAttributes (MBeanSupport.java:213)
  [19] javax.management.StandardMBean.getAttributes (StandardMBean.java:390)
  [20] com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttributes (DefaultMBeanServerInterceptor.java:701)
  [21] com.sun.jmx.mbeanserver.JmxMBeanServer.getAttributes (JmxMBeanServer.java:705)
  [22] javax.management.remote.rmi.RMIConnectionImpl.doOperation (RMIConnectionImpl.java:1,447)
  [23] javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run (RMIConnectionImpl.java:1,307)
  [24] javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation (RMIConnectionImpl.java:1,399)
  [25] javax.management.remote.rmi.RMIConnectionImpl.getAttributes (RMIConnectionImpl.java:673)
  [26] jdk.internal.reflect.GeneratedMethodAccessor20.invoke (null)
  [27] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
  [28] java.lang.reflect.Method.invoke (Method.java:566)
  [29] sun.rmi.server.UnicastServerRef.dispatch (UnicastServerRef.java:357)
  [30] sun.rmi.transport.Transport$1.run (Transport.java:200)
  [31] sun.rmi.transport.Transport$1.run (Transport.java:197)
  [32] java.security.AccessController.executePrivileged (AccessController.java:784)
  [33] java.security.AccessController.doPrivileged (AccessController.java:691)
  [34] sun.rmi.transport.Transport.serviceCall (Transport.java:196)
  [35] sun.rmi.transport.tcp.TCPTransport.handleMessages (TCPTransport.java:587)
  [36] sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0 (TCPTransport.java:828)
  [37] sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0 (TCPTransport.java:705)
  [38] sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$219/0x00000008012e1de0.run (null)
  [39] java.security.AccessController.executePrivileged (AccessController.java:753)
  [40] java.security.AccessController.doPrivileged (AccessController.java:391)
  [41] sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run (TCPTransport.java:704)
  [42] java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1,135)
  [43] java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:635)
  [44] java.lang.Thread.run (Thread.java:831)
RMI TCP Connection(4)-192.168.122.215[1] print containerMetrics.getEffectiveCpuSetCpus()
>  containerMetrics.getEffectiveCpuSetCpus() = null
RMI TCP Connection(4)-192.168.122.215[1] print containerMetrics.getCpuSetCpus()
>  containerMetrics.getCpuSetCpus() = null
RMI TCP Connection(4)-192.168.122.215[1] where
  [1] com.sun.management.internal.OperatingSystemImpl.getCpuLoad (OperatingSystemImpl.java:162)
  [2] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (native method)
  [3] jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:78)
  [4] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
  [5] java.lang.reflect.Method.invoke (Method.java:566)
  [6] sun.reflect.misc.Trampoline.invoke (MethodUtil.java:71)
  [7] jdk.internal.reflect.GeneratedMethodAccessor9.invoke (null)
  [8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
  [9] java.lang.reflect.Method.invoke (Method.java:566)
  [10] sun.reflect.misc.MethodUtil.invoke (MethodUtil.java:260)
  [11] com.sun.jmx.mbeanserver.ConvertingMethod.invokeWithOpenReturn (ConvertingMethod.java:193)
  [12] com.sun.jmx.mbeanserver.ConvertingMethod.invokeWithOpenReturn (ConvertingMethod.java:175)
  [13] com.sun.jmx.mbeanserver.MXBeanIntrospector.invokeM2 (MXBeanIntrospector.java:117)
  [14] com.sun.jmx.mbeanserver.MXBeanIntrospector.invokeM2 (MXBeanIntrospector.java:54)
  [15] com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM (MBeanIntrospector.java:237)
  [16] com.sun.jmx.mbeanserver.PerInterface.getAttribute (PerInterface.java:83)
  [17] com.sun.jmx.mbeanserver.MBeanSupport.getAttribute (MBeanSupport.java:206)
  [18] com.sun.jmx.mbeanserver.MBeanSupport.getAttributes (MBeanSupport.java:213)
  [19] javax.management.StandardMBean.getAttributes (StandardMBean.java:390)
  [20] com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttributes (DefaultMBeanServerInterceptor.java:701)
  [21] com.sun.jmx.mbeanserver.JmxMBeanServer.getAttributes (JmxMBeanServer.java:705)
  [22] javax.management.remote.rmi.RMIConnectionImpl.doOperation (RMIConnectionImpl.java:1,447)
  [23] javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run (RMIConnectionImpl.java:1,307)
  [24] javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation (RMIConnectionImpl.java:1,399)
  [25] javax.management.remote.rmi.RMIConnectionImpl.getAttributes (RMIConnectionImpl.java:673)
  [26] jdk.internal.reflect.GeneratedMethodAccessor20.invoke (null)
  [27] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
  [28] java.lang.reflect.Method.invoke (Method.java:566)
  [29] sun.rmi.server.UnicastServerRef.dispatch (UnicastServerRef.java:357)
  [30] sun.rmi.transport.Transport$1.run (Transport.java:200)
  [31] sun.rmi.transport.Transport$1.run (Transport.java:197)
  [32] java.security.AccessController.executePrivileged (AccessController.java:784)
  [33] java.security.AccessController.doPrivileged (AccessController.java:691)
  [34] sun.rmi.transport.Transport.serviceCall (Transport.java:196)
  [35] sun.rmi.transport.tcp.TCPTransport.handleMessages (TCPTransport.java:587)
  [36] sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0 (TCPTransport.java:828)
  [37] sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0 (TCPTransport.java:705)
  [38] sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$219/0x00000008012e1de0.run (null)
  [39] java.security.AccessController.executePrivileged (AccessController.java:753)
  [40] java.security.AccessController.doPrivileged (AccessController.java:391)
  [41] sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run (TCPTransport.java:704)
  [42] java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1,135)
  [43] java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:635)
  [44] java.lang.Thread.run (Thread.java:831)
RMI TCP Connection(4)-192.168.122.215[1] print containerMetrics
 containerMetrics = ""jdk.internal.platform.CgroupMetrics@447e9df1""
RMI TCP Connection(4)-192.168.122.215[1] print containerMetrics.getProvider()
 containerMetrics.getProvider() = ""cgroupv2""
;;;","2021-04-14 00:39;roboduke;Changeset: e2106d5a
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2021-04-14 07:38:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e2106d5a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) WindowsFileStore.hashCode() should read cached hash code once,JDK-8265100,5046747,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2021-04-12 15:27,2022-10-05 06:38,2023-10-01 09:57,2021-04-13 11:44,17,,,,,,,,17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-other,,,,,,,,,,,,,,,,,,,,"Following the comment [1] the hashCode() method should be updated to read cached hashCode value once.

[1] https://github.com/openjdk/jdk/pull/3279#discussion_r610932456",,,,,,,,,,JDK-8288879,JDK-8294855,JDK-8288096,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2sd23:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-04-12 15:28;bpb;noreg-other as code is covered by existing tests.;;;","2021-04-13 11:44;roboduke;Changeset: 3b576ed9
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-04-13 18:43:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3b576ed9
;;;","2022-06-15 01:24;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
Low risk, trivial change. Follow up to 8264400
Clean backport.SAP nighlty testing passed.;;;","2022-06-15 01:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1155
Date: 2022-06-15 08:23:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
Revert backport to 11u of 8236859: WebSocket over authenticating proxy fails with NPE,JDK-8265099,5046744,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,phh,phh,phh,2021-04-12 14:18,2021-06-23 02:38,2023-10-01 09:57,2021-04-12 15:32,11.0.12,,,,,,,,11.0.12,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,,,,"JDK-8264988, the backport of JDK-8236859 to 11.0.12, causes tier2 failures in  java/net/httpclient. Revert the backport for now.
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8236859,JDK-8264988,JDK-8268617,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,11.0.12,,linux,,,,,,"0|i2sd1f:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-04-12 14:27;phh;Fix Request (11u).

Reversion webrev https://cr.openjdk.java.net/~phh/8265099/webrev.11u.00/. Tests pass after reversion.

Review thread https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-April/005702.html
;;;","2021-04-12 15:32;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u-dev/rev/420cb1ce9b7d
User:  phh
Date:  2021-04-12 22:31:39 +0000
;;;","2021-05-05 05:13;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u/rev/420cb1ce9b7d
User:  goetz
Date:  2021-05-05 12:03:09 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
test/hotspot/jtreg/gc/g1/TestG1SkipCompaction.java fails validate-source,JDK-8265082,5046714,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,dcubed,dcubed,dcubed,2021-04-12 08:47,2021-07-15 10:19,2023-10-01 09:57,2021-04-12 09:14,17,,,,,,,,17,hotspot,,0,tier1,,,,,,,,,,,,,,,,,,,,,,"[2021-04-12T12:48:03,996Z] BAD COPYRIGHT: /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79885/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a3d2682f-432f-48ca-bb69-5a02d3a6f32e/runs/c969da7f-908e-4145-8104-73788d6f3b52/workspace/open/test/hotspot/jtreg/gc/g1/TestG1SkipCompaction.java
[2021-04-12T12:48:03,996Z] 1 header format error(s)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262068,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2scur:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-04-12 09:00;dcubed;Here's the context diffs for the proposed fix:

$ git diff
diff --git a/test/hotspot/jtreg/gc/g1/TestG1SkipCompaction.java b/test/hotspot/jtreg/gc/g1/TestG1SkipCompaction.java
index 054ec07c20b..7eee42f621d 100644
--- a/test/hotspot/jtreg/gc/g1/TestG1SkipCompaction.java
+++ b/test/hotspot/jtreg/gc/g1/TestG1SkipCompaction.java
@@ -4,19 +4,21 @@
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation. Alibaba designates this
- * particular file as subject to the ""Classpath"" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
+ * published by the Free Software Foundation.
  *
  * This code is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  * version 2 for more details (a copy is included in the LICENSE file that
  * accompanied this code).
  *
  * You should have received a copy of the GNU General Public License version
  * 2 along with this work; if not, write to the Free Software Foundation,
  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
  */

Changes:

- Removed the classpath exception since this is a test.
- Added the extra space before ""See the GNU General Public License"".
- Added the ""Please contact Oracle, ..."" blurb at the end.;;;","2021-04-12 09:14;roboduke;Changeset: f4794378
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-04-12 16:13:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f4794378
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
jpackage tests on Windows leave large temp files,JDK-8265078,5046709,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,herrick,ctornqvi,ctornqvi,2021-04-12 07:40,2021-04-21 18:01,2023-10-01 09:57,2021-04-14 12:57,17,,,,,,,,17,tools,,0,noreg-self,sn_91,test_sprint,testbug,,,,,,,,,,,,,,,,,,,"Some of the jpackage tests write to temp instead of the jtreg scratch file, these files aren't cleaned up after test execution and quickly fill up the disk. 

Each test seems to leave around 170MB in temp:

dir /s cygwin\tmp\jdk.jpackage13029007297622725429

...

     Total Files Listed:
             285 File(s)    176,786,554 bytes",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265152,,,,,,"2021-04-12 07:49;ctornqvi;jpackage.dir.txt;https://bugs.openjdk.org/secure/attachment/94135/jpackage.dir.txt",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sctn:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-04-12 08:05;asemenyuk;This is the output of jpackage command, not jtreg test. By some reason jpackage on Windows is not doing clean up.
I can't reproduce the problem locally. Probably the issue is caused by antivirus locking executable files in jpackage output directory which prevents deletion of the directory at jpackage exit. jpackage should write warnings to console if it fails to clean up its temp files.

We can use --temp CLI jpackage option in jtreg tests to force jpackage create temp directory in jtreg scratch file.
;;;","2021-04-12 09:05;erikj;Redirecting tmp output would be a good fix. ;;;","2021-04-12 09:53;herrick;Yes - I can reproduce locally, and is probably caused by antivirus opening msi and exe files as they are created, and not done with them by the time we delete them.
There are two things we can do:
1.) When doing a recursive directory delete (IOUTils.deleteRecursive()), when we get an IOException deleting a file, we stop traversing the files, so not only do we not delete that file but all the remaining files in the target are left.  We could continue deleting and still throw the first IOException.
2.) In this case (AbstractBundler.cleanup()), we could use multiple trys to delete everything, if the IOException returned is a files in use type Exception.;;;","2021-04-12 10:07;erikj;Making the application itself more resilient and able to clean up after itself is certainly good, but the main point of this bug is to make sure we avoid writing in any global temp dir (or any other global dir) at all when possible in any of our tests. So if we can redirect jpackage to write in a different ""temp"" dir from test code, that would be the ideal solution. From an infrastructure point of view, we want to be in control of, and able to clean up after any test, regardless of if the test failed or not.;;;","2021-04-12 10:16;kcr;It probably makes sense to use this bug to fix the tests. It might be worth filing a separate (not P2) bug to make the cleanup in jpackage itself more robust.;;;","2021-04-12 10:59;asemenyuk;[~herrick] I think combination of #1 and #2 would be the best solution.
[~erikj] I understand your perspective. On the other hand having this ""issue"" in jpackage tests helped to uncover issue in jpackage implementation.;;;","2021-04-12 12:06;herrick;(2) There is a problem with the msi file (that is created and wrapped in an exe) being left open. Even using multiple attempts  to delete it, and stalling n seconds between attempt n-1 and attempt n, It will fail with 15 attempts (that's 2 minutes). (no problem deleting the file immediately after jpackage exits)
(1) Continuing the recursive removing on IOException helps reduce the amount left behind to just the msi file.
(0) Next I need to find where we are opening the msi file without closing it. (the underlying problem).  This only happens when creating exe installers.
(3) finally we can modify the tests to always use the --temp jpackage argument to redirect output to dir within the jtreg output space. (except one new test to explicitly test that the default temp dir created by jpackage (based on Files.createTempDir()) is completely removed when running jpackage command).
;;;","2021-04-12 12:21;asemenyuk;[~herrick] If .msi get unlocked only when jpackage exits this is very likely because msi db was not closed properly in the process of building .exe installer. So #2 issue can be related to https://bugs.openjdk.java.net/browse/JDK-8264551.
#3 we cant test if temp directory is removed even if ""--temp"" is specified. Instead of creating the new test, we can update BasicTest.getTempDir() to add checks that temp directory doesn't contain transient jpackage output.;;;","2021-04-12 12:42;herrick;(0) I'm running with the fix to  https://bugs.openjdk.java.net/browse/JDK-8264551. and seeing the problem, so although it may be regression from  JDK-8263135 it is still there. so related to JDK-8264551, but not an instance of it.
(#3) not entirely sure I see what you mean here.  if ""--temp"" is specified we don't expect any jpackage artifacts to be removed.  without ""--temp"" specified we should be able to verify that  no new jpackage artifacts we added to the default temp dir by running jpackage. (Are you saying we should confirm this in all tests ?)
;;;","2021-04-12 12:48;asemenyuk;Ah, we don't clean contents of temp directory if --temp is specified indeed. So we really need a new test for the case --temp is not specified. Please disregard my comment on #3.
I'm wondering if running jpackage without JDK-8263135 fix and follow up regression patches would make any difference.
;;;","2021-04-13 07:59;herrick;The automation is running with System property java.io.tmpdir set to a per test unique dir within test_support (in my case: c:\ade\jdk-jdk\build\windows-x64\test-suppot\jtreg_open_test_jdk_tools_jpackage_share_SimplePackageTest_java\tmp), and that is fine when invoking jpackage using the ToolProvider interface, but when invoking the jpackage tool in a new process the value of java.io.tmpdir is back to default.
;;;","2021-04-13 08:49;asemenyuk;[~herrick] For windows we can tweak JPackageCommand.createExecutor() (https://github.com/openjdk/jdk/blob/642f45f9dcaea6675e0c3215f2d486356aacce49/test/jdk/tools/jpackage/helpers/jdk/jpackage/test/JPackageCommand.java#L637) by adding environment variable (TEMP or TMP) set to jtreg test temp directory. Right now there is no way to add environment variables in jdk.jpackage.test.Executor, but it is straightforward to add.;;;","2021-04-13 10:49;herrick;we have two fixes suggested to address this:
1.)  (#1 above) When doing a recursive directory delete (IOUTils.deleteRecursive()), when we get an IOException deleting a file, we stop traversing the files, so not only do we not delete that file but all the remaining files in the target are left. We could continue deleting and still throw the first IOException. 
2.) as stated above, when launching jpackage using ProcessBuilder set environmental variable ""TMP"" to value of system property ""java.io.tmpdir"" to get jpackage output into same place as rest of jtreg output.

The problem has become intermittent for me, so it is hard to find real fix, but these two changes will (1) lessen the impact of the problem, and (2) prevent the problem from applying to Mach5 testing.

We may want to put these two changes in and open follow-up issue to address the underlying problem.

 ;;;","2021-04-13 12:16;herrick;JDK-8265152 will track follow-up issue of fixing the underlying problem.;;;","2021-04-14 12:57;roboduke;Changeset: e1675778
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-04-14 19:56:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e1675778
;;;",,,,,,,,,,,,,
XML transformation and indentation when using xml:space,JDK-8265073,5044515,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,joehw,webbuggrp,webbuggrp,2021-03-15 01:09,2023-01-31 17:01,2023-10-01 09:57,2021-06-18 09:04,11,17,,,,,,,17,xml,,0,dcsaw,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Tested it on MacOSX (Open Adopt JDK) and windows 10 (https://jdk.java.net/ and Open Adopt JDK)

A DESCRIPTION OF THE PROBLEM :
When switching from Java 8 (Oracle) to Java 11 (AdoptOpenJDK) the indentation of our XML has been changed.
The indentation fails when a xml element is defined with an attribute xml:space=preserve. Everything after the xml element containing the attribute is no longer indented

REGRESSION : Last worked in version 8u281

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
With the below code the problem can be reproduced. The variable data must be a XML string, for instance
<?xml version=\""1.0\"" encoding=\""UTF-8\""?><a><b>650b4d21</b><c>If true</c><d xml:space=\""preserve\"">TRUE</d><e>test</e></a>
In this case the tags 'a','b','c','d' are indented, everything after tag 'd' will not be indented.

	Transformer transformer = TransformerFactory.newInstance(""com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl"", Test.class.getClassLoader());

	transformer.setOutputProperty(""{http://xml.apache.org/xslt}indent-amount"", ""4"");
	transformer.setOutputProperty(OutputKeys.CDATA_SECTION_ELEMENTS, ""body hyperlink"");
	transformer.setOutputProperty(OutputKeys.ENCODING, ""UTF-8"");
	transformer.setOutputProperty(OutputKeys.INDENT, ""yes"");
	transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, ""yes"");
	
	StringWriter writer = new StringWriter();

	StreamSource in = new StreamSource(new StringReader(data));
	transformer.transform(in, new StreamResult(writer));
	
	System.out.println(""-----"");
	System.out.println(writer.toString());
	System.out.println(""-----"");

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
<?xml version=\""1.0\"" encoding=\""UTF-8\""?>
    <a>
        <b>650b4d21</b>
        <c>If true</c>
        <d xml:space=\""preserve\"">TRUE</d>
        <e>test</e>
    </a>
ACTUAL -
<?xml version=\""1.0\"" encoding=\""UTF-8\""?>
    <a>
        <b>650b4d21</b>
        <c>If true</c>
        <d xml:space=\""preserve\"">TRUE</d><e>test</e></a>

FREQUENCY : always


",,,,,,,,,,JDK-8269060,JDK-8270599,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301568,,,,,,"2021-04-12 07:13;tongwan;XmlTest.java;https://bugs.openjdk.org/secure/attachment/94134/XmlTest.java",,,,,,,,,,,,,,,,,b01,11,,,,,,,,"0|i2rzn7:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@33088177,,,,,,,Not verified,,"2021-04-06 05:56;tongwan;Requested a simple and complete reproducer from the submitter.;;;","2021-04-12 06:00;tongwan;The observations on Windows 10:
JDK 1.8.0_281: Passed.
JDK 11ea+1: Failed, indentation fails
JDK 17ea+6: Failed.
;;;","2021-06-18 09:04;roboduke;Changeset: 7e03cf29
Author:    Joe Wang <joehw@openjdk.org>
Date:      2021-06-18 16:03:30 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/7e03cf2916a69f947c46ac85b222ee7a99f68ad8
;;;","2021-06-30 04:46;tongwan;Requested the submitter verify the fix with latest version of JDK 17 from https://jdk.java.net/17/;;;","2021-08-31 01:09;tongwan;Did not receive the response from the submitter.;;;","2023-01-30 16:31;cushon;FWIW this does seem to fix the repro provided by the submitter in the original report:

```
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import java.io.StringReader;
import java.io.StringWriter;

public class Test {

  public static void main(String[] args) throws Exception {

    String data =
        ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><a><b>650b4d21</b><c>If true</c><d xml:space=\""preserve\"">TRUE</d><e>test</e></a>"";

    Transformer transformer =
        TransformerFactory.newInstance(
            ""com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl"",
            Test.class.getClassLoader())
        .newTransformer();

    transformer.setOutputProperty(""{http://xml.apache.org/xslt}indent-amount"", ""4"");
    transformer.setOutputProperty(OutputKeys.CDATA_SECTION_ELEMENTS, ""body hyperlink"");
    transformer.setOutputProperty(OutputKeys.ENCODING, ""UTF-8"");
    transformer.setOutputProperty(OutputKeys.INDENT, ""yes"");
    transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, ""yes"");

    StringWriter writer = new StringWriter();

    StreamSource in = new StreamSource(new StringReader(data));
    transformer.transform(in, new StreamResult(writer));

    System.out.println(""-----"");
    System.out.println(writer);
    System.out.println(""-----"");
  }
}
```

JDK 11

ava Test
-----
<a>
    <b>650b4d21</b>
    <c>If true</c>
    <d xml:space=""preserve"">TRUE</d><e>test</e></a>

-----

JDK 17

java Test
-----
<a>
    <b>650b4d21</b>
    <c>If true</c>
    <d xml:space=""preserve"">TRUE</d>
    <e>test</e>
</a>

-----;;;",,,,,,,,,,,,,,,,,,,,,,
Use MemoryAddress instead of MemorySegment in CLinker::upcallStub,JDK-8265072,5046705,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-04-12 05:52,2021-04-12 08:13,2023-10-01 09:57,2021-04-12 07:30,repo-panama,,,,,,,,,tools,,0,foreign-abi,,,,,,,,,,,,,,,,,,,,,,"CLinker::upcallStub used to return a MemorySegment, mostly to allow deterministic closing. Now that deterministic closing is handled in the ResourceScope passed to upcallStub, we can just return a MemoryAddress, which is more correct from an API perspective (as the segment returned by upcallStub is not really for dereference).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2scsr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix javadoc for restricted methods,JDK-8265069,5046702,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,sundar,mcimadamore,mcimadamore,2021-04-12 05:05,2021-04-12 08:25,2023-10-01 09:57,2021-04-12 08:25,repo-panama,,,,,,,,,tools,,0,foreign-abi,foreign-memaccess,,,,,,,,,,,,,,,,,,,,,"Restricted methods have been annotated with the internal @NativeAccess annotation - this should have been used, in conjunction with javadoc to add some customary text to the method javadoc.

Since we're not changing javadoc for the time being, we should remove the annotation, and add the customary javadoc wherever @NativeAccess is present:

```
* This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
     * restricted methods, and use safe and supported functionalities, where possible.
```

In addition, since we moved from restricting access to the linker to (e.g. CLinker::getInstance) restricting single linker calls (CLinker::downcallHandle), we should remove @NativeAccess/javadoc from CLinker::getInstance.

Finally, it seems like LibraryLookup::lookup(String, MemoryLayout) is missing @NativeAccess/javadoc - this is an unsafe method and that should be documented.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2scs3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-04-12 07:16;sundar;CLinker.getInstance as restricted method may serve as defense-in-depth (as initalising CLinker subclasses need to be evaluated for safety). Other than that, will fix all.;;;","2021-04-12 07:39;sundar;Creating hyperlink to package level description on restricted methods;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock between JarFileFactory and ExtendedCharsets,JDK-8265065,5046665,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coffeys,webbuggrp,webbuggrp,2021-04-11 19:50,2022-05-05 08:31,2023-10-01 09:57,2022-04-25 07:06,8,,,,,,,,8u341,core-libs,,0,11-na,17-na,dcsaw,noreg-other,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS: Red Hat Enterprise Linux
System Locale: ja_JP.eucjp
Java Runtime: Java SE 8 Update 281

A DESCRIPTION OF THE PROBLEM :
When the openStream() method of an URL representing a resource in a jar file (such as jar:file:///example.jar!/com/example/Example.class) and the Charset.availableCharsets() method are called at the same time, a deadlock happens between sun.net.www.protocol.jar.JarFileFactory and sun.nio.cs.ext.ExtendedCharsets.

Maybe this bug is a duplicate of JDK-8143609, but JDK-8143609 is closed with Incomplete.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
(Use the source code for an executable test case)
$ javac DeadlockSample.java
$ for i in $(seq 1000); do LANG=ja_JP.eucjp java DeadlockSample; done


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
All commands are complete and nothing to print.
ACTUAL -
A command is not complete and print ""!!!!! found deadlock !!!!!""

$ for i in $(seq 1000); do LANG=ja_JP.eucjp java DeadlockSample; done
!!!!! found deadlock !!!!!
^Z  (Ctrl+Z)
[1]+  Stopped                 LANG=ja_JP.eucjp java DeadlockSample
$ bg
[1]+ LANG=ja_JP.eucjp java DeadlockSample &
$ jps
73652 Jps
73638 DeadlockSample
$ jstack 73638
2021-04-12 10:52:16
Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.281-b09 mixed mode):

""Attach Listener"" #10 daemon prio=9 os_prio=0 tid=0x00007fe6fc001000 nid=0x11fcd waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

""Thread-openJarURLConnectionStream"" #9 prio=5 os_prio=0 tid=0x00007fe7300fd800 nid=0x11fb3 waiting for monitor entry [0x00007fe7175ff000]
   java.lang.Thread.State: BLOCKED (on object monitor)
	at sun.nio.cs.AbstractCharsetProvider.charsetForName(AbstractCharsetProvider.java:160)
	- waiting to lock <0x00000000eb816a98> (a sun.nio.cs.ext.ExtendedCharsets)
	at java.nio.charset.Charset.lookupExtendedCharset(Charset.java:452)
	at java.nio.charset.Charset.lookup2(Charset.java:476)
	at java.nio.charset.Charset.lookup(Charset.java:464)
	at java.nio.charset.Charset.isSupported(Charset.java:505)
	at java.lang.StringCoding.lookupCharset(StringCoding.java:99)
	at java.lang.StringCoding.encode(StringCoding.java:336)
	at java.lang.String.getBytes(String.java:918)
	at java.io.UnixFileSystem.canonicalize0(Native Method)
	at java.io.UnixFileSystem.canonicalize(UnixFileSystem.java:172)
	at java.io.File.getCanonicalPath(File.java:618)
	at java.io.FilePermission$1.run(FilePermission.java:224)
	at java.io.FilePermission$1.run(FilePermission.java:212)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.io.FilePermission.init(FilePermission.java:212)
	at java.io.FilePermission.<init>(FilePermission.java:299)
	at sun.net.www.protocol.file.FileURLConnection.getPermission(FileURLConnection.java:225)
	at sun.net.www.protocol.jar.JarFileFactory.getPermission(JarFileFactory.java:225)
	at sun.net.www.protocol.jar.JarFileFactory.getCachedJarFile(JarFileFactory.java:195)
	at sun.net.www.protocol.jar.JarFileFactory.getOrCreate(JarFileFactory.java:103)
	- locked <0x00000000eb8a9390> (a sun.net.www.protocol.jar.JarFileFactory)
	at sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java:129)
	at sun.net.www.protocol.jar.JarURLConnection.getInputStream(JarURLConnection.java:172)
	at java.net.URL.openStream(URL.java:1067)
	at DeadlockSample.openJarURLConnectionStream(DeadlockSample.java:55)
	at DeadlockSample.access$100(DeadlockSample.java:6)
	at DeadlockSample$2.run(DeadlockSample.java:25)
	at java.lang.Thread.run(Thread.java:748)

""Thread-availableCharsets"" #8 prio=5 os_prio=0 tid=0x00007fe7300fc000 nid=0x11fb2 waiting for monitor entry [0x00007fe717700000]
   java.lang.Thread.State: BLOCKED (on object monitor)
	at sun.net.www.protocol.jar.JarFileFactory.getOrCreate(JarFileFactory.java:103)
	- waiting to lock <0x00000000eb8a9390> (a sun.net.www.protocol.jar.JarFileFactory)
	at sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java:129)
	at sun.net.www.protocol.jar.JarURLConnection.getInputStream(JarURLConnection.java:172)
	at java.net.URL.openStream(URL.java:1067)
	at java.lang.ClassLoader.getSystemResourceAsStream(ClassLoader.java:1324)
	at java.lang.Class.getResourceAsStream(Class.java:2221)
	at sun.nio.cs.ext.SJIS_0213$1.run(SJIS_0213.java:81)
	at sun.nio.cs.ext.SJIS_0213$1.run(SJIS_0213.java:79)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.nio.cs.ext.SJIS_0213.<clinit>(SJIS_0213.java:78)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:348)
	at sun.nio.cs.AbstractCharsetProvider.lookup(AbstractCharsetProvider.java:142)
	at sun.nio.cs.AbstractCharsetProvider.access$000(AbstractCharsetProvider.java:45)
	at sun.nio.cs.AbstractCharsetProvider$1.next(AbstractCharsetProvider.java:183)
	- locked <0x00000000eb816a98> (a sun.nio.cs.ext.ExtendedCharsets)
	at sun.nio.cs.AbstractCharsetProvider$1.next(AbstractCharsetProvider.java:173)
	at java.nio.charset.Charset.put(Charset.java:539)
	at java.nio.charset.Charset.access$200(Charset.java:271)
	at java.nio.charset.Charset$3.run(Charset.java:581)
	at java.nio.charset.Charset$3.run(Charset.java:573)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.nio.charset.Charset.availableCharsets(Charset.java:572)
	at DeadlockSample.availableCharsets(DeadlockSample.java:47)
	at DeadlockSample.access$000(DeadlockSample.java:6)
	at DeadlockSample$1.run(DeadlockSample.java:19)
	at java.lang.Thread.run(Thread.java:748)

""Service Thread"" #7 daemon prio=9 os_prio=0 tid=0x00007fe7300df800 nid=0x11fb0 runnable [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

""C1 CompilerThread1"" #6 daemon prio=9 os_prio=0 tid=0x00007fe7300da800 nid=0x11faf waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

""C2 CompilerThread0"" #5 daemon prio=9 os_prio=0 tid=0x00007fe7300d8000 nid=0x11fae waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

""Signal Dispatcher"" #4 daemon prio=9 os_prio=0 tid=0x00007fe7300cc800 nid=0x11fad runnable [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

""Finalizer"" #3 daemon prio=8 os_prio=0 tid=0x00007fe730082800 nid=0x11fac in Object.wait() [0x00007fe717dfc000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000eb808ee0> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)
	- locked <0x00000000eb808ee0> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)
	at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:216)

""Reference Handler"" #2 daemon prio=10 os_prio=0 tid=0x00007fe73007e000 nid=0x11fab in Object.wait() [0x00007fe717efd000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000eb806c00> (a java.lang.ref.Reference$Lock)
	at java.lang.Object.wait(Object.java:502)
	at java.lang.ref.Reference.tryHandlePending(Reference.java:191)
	- locked <0x00000000eb806c00> (a java.lang.ref.Reference$Lock)
	at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)

""main"" #1 prio=5 os_prio=0 tid=0x00007fe73000a800 nid=0x11fa7 in Object.wait() [0x00007fe7360ac000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000eb8fcb18> (a java.lang.Thread)
	at java.lang.Thread.join(Thread.java:1252)
	- locked <0x00000000eb8fcb18> (a java.lang.Thread)
	at java.lang.Thread.join(Thread.java:1326)
	at DeadlockSample.main(DeadlockSample.java:40)

""VM Thread"" os_prio=0 tid=0x00007fe730074000 nid=0x11faa runnable 

""GC task thread#0 (ParallelGC)"" os_prio=0 tid=0x00007fe73001f800 nid=0x11fa8 runnable 

""GC task thread#1 (ParallelGC)"" os_prio=0 tid=0x00007fe730021800 nid=0x11fa9 runnable 

""VM Periodic Task Thread"" os_prio=0 tid=0x00007fe7300e2000 nid=0x11fb1 waiting on condition 

JNI global references: 5


Found one Java-level deadlock:
=============================
""Thread-openJarURLConnectionStream"":
  waiting to lock monitor 0x00007fe704006568 (object 0x00000000eb816a98, a sun.nio.cs.ext.ExtendedCharsets),
  which is held by ""Thread-availableCharsets""
""Thread-availableCharsets"":
  waiting to lock monitor 0x00007fe6f00d8ba8 (object 0x00000000eb8a9390, a sun.net.www.protocol.jar.JarFileFactory),
  which is held by ""Thread-openJarURLConnectionStream""

Java stack information for the threads listed above:
===================================================
""Thread-openJarURLConnectionStream"":
	at sun.nio.cs.AbstractCharsetProvider.charsetForName(AbstractCharsetProvider.java:160)
	- waiting to lock <0x00000000eb816a98> (a sun.nio.cs.ext.ExtendedCharsets)
	at java.nio.charset.Charset.lookupExtendedCharset(Charset.java:452)
	at java.nio.charset.Charset.lookup2(Charset.java:476)
	at java.nio.charset.Charset.lookup(Charset.java:464)
	at java.nio.charset.Charset.isSupported(Charset.java:505)
	at java.lang.StringCoding.lookupCharset(StringCoding.java:99)
	at java.lang.StringCoding.encode(StringCoding.java:336)
	at java.lang.String.getBytes(String.java:918)
	at java.io.UnixFileSystem.canonicalize0(Native Method)
	at java.io.UnixFileSystem.canonicalize(UnixFileSystem.java:172)
	at java.io.File.getCanonicalPath(File.java:618)
	at java.io.FilePermission$1.run(FilePermission.java:224)
	at java.io.FilePermission$1.run(FilePermission.java:212)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.io.FilePermission.init(FilePermission.java:212)
	at java.io.FilePermission.<init>(FilePermission.java:299)
	at sun.net.www.protocol.file.FileURLConnection.getPermission(FileURLConnection.java:225)
	at sun.net.www.protocol.jar.JarFileFactory.getPermission(JarFileFactory.java:225)
	at sun.net.www.protocol.jar.JarFileFactory.getCachedJarFile(JarFileFactory.java:195)
	at sun.net.www.protocol.jar.JarFileFactory.getOrCreate(JarFileFactory.java:103)
	- locked <0x00000000eb8a9390> (a sun.net.www.protocol.jar.JarFileFactory)
	at sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java:129)
	at sun.net.www.protocol.jar.JarURLConnection.getInputStream(JarURLConnection.java:172)
	at java.net.URL.openStream(URL.java:1067)
	at DeadlockSample.openJarURLConnectionStream(DeadlockSample.java:55)
	at DeadlockSample.access$100(DeadlockSample.java:6)
	at DeadlockSample$2.run(DeadlockSample.java:25)
	at java.lang.Thread.run(Thread.java:748)
""Thread-availableCharsets"":
	at sun.net.www.protocol.jar.JarFileFactory.getOrCreate(JarFileFactory.java:103)
	- waiting to lock <0x00000000eb8a9390> (a sun.net.www.protocol.jar.JarFileFactory)
	at sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java:129)
	at sun.net.www.protocol.jar.JarURLConnection.getInputStream(JarURLConnection.java:172)
	at java.net.URL.openStream(URL.java:1067)
	at java.lang.ClassLoader.getSystemResourceAsStream(ClassLoader.java:1324)
	at java.lang.Class.getResourceAsStream(Class.java:2221)
	at sun.nio.cs.ext.SJIS_0213$1.run(SJIS_0213.java:81)
	at sun.nio.cs.ext.SJIS_0213$1.run(SJIS_0213.java:79)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.nio.cs.ext.SJIS_0213.<clinit>(SJIS_0213.java:78)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:348)
	at sun.nio.cs.AbstractCharsetProvider.lookup(AbstractCharsetProvider.java:142)
	at sun.nio.cs.AbstractCharsetProvider.access$000(AbstractCharsetProvider.java:45)
	at sun.nio.cs.AbstractCharsetProvider$1.next(AbstractCharsetProvider.java:183)
	- locked <0x00000000eb816a98> (a sun.nio.cs.ext.ExtendedCharsets)
	at sun.nio.cs.AbstractCharsetProvider$1.next(AbstractCharsetProvider.java:173)
	at java.nio.charset.Charset.put(Charset.java:539)
	at java.nio.charset.Charset.access$200(Charset.java:271)
	at java.nio.charset.Charset$3.run(Charset.java:581)
	at java.nio.charset.Charset$3.run(Charset.java:573)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.nio.charset.Charset.availableCharsets(Charset.java:572)
	at DeadlockSample.availableCharsets(DeadlockSample.java:47)
	at DeadlockSample.access$000(DeadlockSample.java:6)
	at DeadlockSample$1.run(DeadlockSample.java:19)
	at java.lang.Thread.run(Thread.java:748)

Found 1 deadlock.


---------- BEGIN SOURCE ----------
import java.io.File;
import java.lang.management.ManagementFactory;
import java.net.URL;
import java.nio.charset.Charset;

public class DeadlockSample {
    public static void main(String[] args) throws Exception {
        File jarFile = new File(System.getProperty(""java.home"") + File.separator + ""lib"" + File.separator + ""jsse.jar"");
        String resourceInJarFile = ""sun/security/provider/Sun.class"";

        final URL url = new URL(""jar:"" + jarFile.toURI().toURL() + ""!/"" + resourceInJarFile);
        //System.out.println(url);

        // put entry in JarFileFactory.fileCache
        url.openStream().close();

        Thread t1 = new Thread(new Runnable() {
            public void run() {
                availableCharsets();
            }
        }, ""Thread-availableCharsets"");

        Thread t2 = new Thread(new Runnable() {
            public void run() {
                openJarURLConnectionStream(url);
            }
        }, ""Thread-openJarURLConnectionStream"");

        t1.start();
        t2.start();

        t1.join(2000L);
        t2.join(2000L);

        if (t1.isAlive() && t2.isAlive()) {
            long[] deadlockedThreads = ManagementFactory.getThreadMXBean().findDeadlockedThreads();
            if (deadlockedThreads != null && deadlockedThreads.length > 0) {
                System.err.println(""!!!!! found deadlock !!!!!"");
            }
            t1.join();
            t2.join();
        }
    }

    private static void availableCharsets() {
        try {
            Charset.availableCharsets();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private static void openJarURLConnectionStream(URL url) {
        try {
           url.openStream();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}

---------- END SOURCE ----------

FREQUENCY : occasionally


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284520,,,,,,,,,,JDK-8143609,,,,,,"2021-04-12 04:16;tongwan;DeadlockSample.java;https://bugs.openjdk.org/secure/attachment/94133/DeadlockSample.java","2021-04-21 04:54;aefimov;DeadlockSampleModified.java;https://bugs.openjdk.org/secure/attachment/94334/DeadlockSampleModified.java","2022-04-25 04:03;coffeys;Foo.jar;https://bugs.openjdk.org/secure/attachment/98695/Foo.jar","2022-04-25 04:03;coffeys;deadlocktest.policy;https://bugs.openjdk.org/secure/attachment/98694/deadlocktest.policy",,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2scjv:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3962510e,,,,,,,,,"2021-04-12 04:16;tongwan;The observations on Windows 10:
JDK 8: Passed, repeated 1000 tests without deadlock
JDK 11: Not applicable.

On Ubuntu:
JDK 8: Passed.;;;","2021-04-13 21:26;pnarayanaswa;Additional Information from Submitter:
===========================
This deadlock does not occur on Windows OS.
The Windows OS handles native file paths in Unicode.
An Unix-like OS (such as Linux) handles native file paths in its platform encoding.
(UnixFileSystem.canonicalize0 calls String.getBytes, but WinNTFileSystem.canonicalize0 does not call String.getBytes.)

And this deadlock does not occur when the platform encoding is a standard charset (such as UTF-8, ASCII, ISO-8859-1, etc.) because UnixFileSystem.canonicalize0 does not call Charset.lookupExtendedCharset.

Please see the stacktrace below.

""Thread-openJarURLConnectionStream"":
	at sun.nio.cs.AbstractCharsetProvider.charsetForName(AbstractCharsetProvider.java:160)
	- waiting to lock <0x00000000eb816a98> (a sun.nio.cs.ext.ExtendedCharsets)
	at java.nio.charset.Charset.lookupExtendedCharset(Charset.java:452)
	at java.nio.charset.Charset.lookup2(Charset.java:476)
	at java.nio.charset.Charset.lookup(Charset.java:464)
	at java.nio.charset.Charset.isSupported(Charset.java:505)
	at java.lang.StringCoding.lookupCharset(StringCoding.java:99)
	at java.lang.StringCoding.encode(StringCoding.java:336)
	at java.lang.String.getBytes(String.java:918)
	at java.io.UnixFileSystem.canonicalize0(Native Method)

On Ubuntu, please use ja_JP.eucjp locale to reproduce this deadlock.
1. execute sudo locale-gen ja_JP.EUC-JP
2. call java DeadlockSample with LANG=ja_JP.eucjp;;;","2021-04-13 21:26;pnarayanaswa;Additional Information from Submitter:
=========================== 
I think that the lock range of sun.net.www.protocol.jar.JarFileFactory is not appropriate.
getPermission() should be called without JarFileFactory (instance) lock.
getPermission() should be called separately outside getCachedJarFile().
;;;","2021-04-13 23:16;tongwan;Still could not found the deadlock on Ubnutu.;;;","2021-04-13 23:45;alanb;It would be useful to test with JDK 16 and the JDK 17 EA builds to verify that the issue does not exist.;;;","2021-04-20 23:01;pnarayanaswa;Additional Information from Submitter:
===========================
I confirmed that the deadlock can be reproduced on Ubuntu by repeatedly executing Java processes using the original code of DeadlockSample.java written between '---------- BEGIN SOURCE ----------' and '---------- END SOURCE ----------'.
(As mentioned earlier, you also need to generate and use ja_JP.eucjp as the system locale.)

I think the reason why the deadlock can not be reproduced on Ubuntu is that there is a problem with the attached DeadlockSample.java.
The attached DeadlockSample.java has the following changes from the original code that I posted.
- Repeat tests using JUnit's @RepeatedTest
- Check for deadlock with assertTrue of JUnit
I think this first change is the problem.
Once Charset.availableCharsets() is complete (once the initialization of class sun.nio.cs.ext.SJIS_0213 is complete), this deadlock no longer occurs on the same Java process.
Therefore, using JUnit's @RepeatedTest to repeat within a single Java process will not reproduce this deadlock.
;;;","2021-04-21 04:53;aefimov;The deadlock is easily reproducible on JDK8 with a temporary tweaks applied to AbstractCharsetProvider and the reproducer (DeadlockSampleModified.java attached).
    --- a/sun/nio/cs/AbstractCharsetProvider.java
    +++ b/sun/nio/cs/AbstractCharsetProvider.java
    @@ -157,6 +157,7 @@
     
         public final Charset charsetForName(String charsetName) {
             synchronized (this) {
    +            try { Thread.sleep(1000L); } catch (InterruptedException ie) {}
                 init();
                 return lookup(canonicalize(charsetName));
             }

The following shell script was used to launch the modified test:
    export PATH=$JDK/bin:$PATH
    NUMBER_OF_ITERATIONS=10000
    TEST_NAME=DeadlockSampleModified

    rm -rf out
    mkdir -p out
    java -version
    javac -d out $TEST_NAME.java


    for i in $(seq $NUMBER_OF_ITERATIONS); do
        echo -n "".""
        LANG=ja_JP.eucjp java -cp out $TEST_NAME
    done

With these changes the issue is stably reproducible with 8u codebase (tested with Ubuntu O/S). It is not reproducible with JDK mainline. It could have been repaired in mainline by a fix (still to be identified) which altered the process of SJIS_0213 initialization.;;;","2022-04-25 04:02;coffeys;   noreg-other
   
   This test requires the presence of a locale which causes the JDK to load an encoding from the
   ""Extended Encoding Set"". See:
   https://docs.oracle.com/javase/8/docs/technotes/guides/intl/encoding.doc.html
   
   ja_JP.eucjp locale on a unix OS would be sufficient. Download the test jar file (Foo.jar) attached to bug along
   with the DeadlockSampleModified.java test source. Compile the source.
   
   Run the test in a loop without security manager - example:
   $ TESTJDK/bin/javac DeadlockSampleModified.java
   $ for i in $(seq 1000); do LANG=ja_JP.eucjp $TESTJDK/bin/java DeadlockSampleModified; done
   
   Run the test in a loop with security manager and policy file attached to bug report - example:
   $ for i in $(seq 1000); do LANG=ja_JP.eucjp $TESTJDK/bin/java  -Djava.security.manager -Djava.security.policy=deadlocktest.policy DeadlockSampleModified; done
   
   If the testing completes with no ""found deadlock"" error messages, consider test to have passed.;;;",,,,,,,,,,,,,,,,,,,,
Remove duplication constant MaxTextureSize,JDK-8265062,5046693,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dkonoplev,dkonoplev,dkonoplev,2021-04-12 03:42,2021-05-17 17:40,2023-10-01 09:57,2021-05-10 20:24,17,,,,,,,,17,client-libs,,0,lanai,,,,,,,,,,,,,,,,,,,,,,"There are two similar but different constants:
#define MaxTextureSize 16384
#define MTL_GPU_FAMILY_MAC_TXT_SIZE 16384

We should remove MaxTextureSize and replace its usages with MTL_GPU_FAMILY_MAC_TXT_SIZE",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2scq3:",9223372036854775807,b22,,,,,,,,,,,,"2021-05-10 20:24;roboduke;Changeset: 0e7bdae0
Author:    Denis Konoplev <dkonoplev@openjdk.org>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2021-05-11 03:24:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0e7bdae0f6d2824deaa8b17e15553e421e6dbc7f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
javadoc HTML files not generated for types nested in records,JDK-8265042,5046629,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jjg,webbuggrp,webbuggrp,2021-04-09 16:01,2021-05-24 22:20,2023-10-01 09:57,2021-05-07 07:52,16,,,,,,,,17,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
If a record declares a nested type, the javadoc tool won't generate the HTML file with the documentation for that nested type.

example/ExampleRecord.java:
```
package example;

public record ExampleRecord() {
  public record RecordInRecord() {}
  public static class ClassInRecord {}
  public enum EnumInRecord {}
  public interface InterfaceInRecord {}
}
```

example/ExampleClass.java:
(to demonstrate expected behavior)
```
package example;

public class ExampleClass {
  public record RecordInClass() {}
  public static class ClassInClass {}
  public enum EnumInClass {}
  public interface InterfaceInClass {}
}
```

$ javadoc example example/* -d out
```
Loading source file example\ExampleClass.java...
Loading source file example\ExampleRecord.java...
Loading source files for package example...
Constructing Javadoc information...
Creating destination directory: ""out\""
Building index for all the packages and classes...
Standard Doclet version 16+36-2231
Building tree for all the packages and classes...
Generating out\example\ExampleClass.html...
example\ExampleClass.java:3: warning: no comment
public class ExampleClass {
       ^
example\ExampleClass.java:5: warning: no comment
  public static class ClassInClass {}
                ^
example\ExampleClass.java:6: warning: no comment
  public enum EnumInClass {}
         ^
example\ExampleClass.java:7: warning: no comment
  public interface InterfaceInClass {}
         ^
example\ExampleClass.java:4: warning: no comment
  public record RecordInClass() {}
         ^
Generating out\example\ExampleClass.ClassInClass.html...
Generating out\example\ExampleClass.EnumInClass.html...
Generating out\example\ExampleClass.InterfaceInClass.html...
Generating out\example\ExampleClass.RecordInClass.html...
Generating out\example\ExampleRecord.html...
example\ExampleRecord.java:3: warning: no comment
public record ExampleRecord() {
       ^
example\ExampleRecord.java:5: warning: no comment
  public static class ClassInRecord {}
                ^
example\ExampleRecord.java:6: warning: no comment
  public enum EnumInRecord {}
         ^
example\ExampleRecord.java:7: warning: no comment
  public interface InterfaceInRecord {}
         ^
example\ExampleRecord.java:4: warning: no comment
  public record RecordInRecord() {}
         ^
Generating out\example\package-summary.html...
Generating out\example\package-tree.html...
Generating out\overview-tree.html...
Building index for all classes...
Generating out\allclasses-index.html...
Generating out\allpackages-index.html...
Generating out\index-all.html...
Generating out\index.html...
Generating out\help-doc.html...
10 warnings
```

$ ls out/example
```
ExampleClass.ClassInClass.html  ExampleClass.InterfaceInClass.html  package-summary.html
ExampleClass.EnumInClass.html   ExampleClass.RecordInClass.html     package-tree.html
ExampleClass.html               ExampleRecord.html
```

^ Notice there is no ExampleRecord.ClassInRecord.html, for example.

The ExampleRecord page contains broken links to the nested types.

The nested types are not included package-summary.html or package-tree.html.

The nested types *are* included in index-all.html, and they do get /class-use/ pages if you use the -use option.


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-04-11 21:51;adev;example.zip;https://bugs.openjdk.org/secure/attachment/94125/example.zip","2021-04-11 21:51;adev;out.zip;https://bugs.openjdk.org/secure/attachment/94124/out.zip",,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i2scbv:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,Not verified,,"2021-04-11 21:51;adev;The issue is reproducible using --enable-preview option with javadoc:
javadoc --enable-preview --release 16 -use example example/* -d out

1. There is no ExampleRecord.ClassInRecord.html
2. The ExampleRecord page contains broken links to the nested types.
3. The nested types are not included package-summary.html or package-tree.html.
4. The nested types *are* included in index-all.html, and they do get /class-use/ pages if you use the -use option. ;;;","2021-04-29 08:10;jjg;The behavior is specific to records;  nested classes and interfaces in classes, enums, and interfaces all work as expected.;;;","2021-04-29 08:15;jjg;Problem is missing code in Utils.getInnerClasses.;;;","2021-05-07 07:52;roboduke;Changeset: 947d69df
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-05-07 14:51:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/947d69df045fa97f56f4eeb5de7f338e169441fc
;;;","2021-05-11 07:29;adev;Requested the submitter to see if the bug is fixed in the latest build at https://jdk.java.net/17/ b22.;;;","2021-05-24 22:20;adev;There has been no response from the submitter after 14 days. Closing the bug.;;;",,,,,,,,,,,,,,,,,,,,,,
Change default macOS min version for x86_64 to 10.12 and aarch64 to 11.0,JDK-8265031,5046642,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-04-10 08:56,2023-05-15 10:34,2023-10-01 09:57,2021-04-14 08:30,jfx17,,,,,,,,jfx17,javafx,,0,noreg-build,sn_91,,,,,,,,,,,,,,,,,,,,,"The minimum macOS version on which JavaFX will run is currently set to 10.10:

https://github.com/openjdk/jfx/blob/8adbc673d095607e8a6109fbb951fa17b9d6caad/buildSrc/mac.gradle#L58

defineProperty(""MACOSX_MIN_VERSION"", ""10.10"");

macOS 10.10 is many years out of support, so we should update this minimum. Further, macOS / aarch64 (aka arm64) requires macOS 11.0 as a minimum in order to run.

The JDK recently updated their minimum for x86_64 to 10.12 and for aarch64 to 11.0. See:

https://github.com/openjdk/jdk/blob/627ad9fe22a153410c14d0b2061bb7dee2c300af/make/autoconf/flags.m4#L136

We should do the same for JavaFX.",,,,,,,,,,,,,,,,,,,,JDK-8264928,,,,,,JDK-8266554,,,,,,,,,,,JDK-8253795,JDK-8260518,JDK-8269968,JDK-8266743,JDK-8269967,,JDK-8308114,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2scer:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-04-10 09:02;kcr;I note that 10.12 is out of support too (and 10.13 will be soon if not already), so while we will build with something that will run on 10.12, it will not be a supported configuration.;;;","2021-04-14 08:30;roboduke;Changeset: e8689fef
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-04-14 15:29:47 +0000
URL:       https://git.openjdk.java.net/jfx/commit/e8689fef
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
tests must be updated for new TestNG module name,JDK-8265020,5046621,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chegar,jjg,jjg,2021-04-09 14:47,2023-05-15 05:50,2023-10-01 09:57,2021-06-02 14:21,17,,,,,,,,17,core-libs,,0,blocks-jtreg-6,jdk11u-fix-request,jdk11u-fix-yes,oracle-bake,,,,,,,,,,,,,,,,,,,"In recent versions of TestNG, an explicit module name has been set (org.testng) which is different from the previously-default value of just testng.

The follow files are affected and will need to be updated when updating to the new jtreg.


open/test/jdk/java/util/ServiceLoader/security/test/module-info.java:    requires testng;
open/test/jdk/java/lang/ModuleTests/addXXX/test/module-info.java:    requires testng;
open/test/jdk/java/lang/invoke/MethodHandles/privateLookupIn/test/module-info.java:   requires testng;
open/test/jdk/java/lang/invoke/modules/m1/module-info.java:    requires testng;
open/test/jdk/java/lang/invoke/modules/m3/module-info.java:    requires testng;
",,,,,,,,,,JDK-8291491,,,,,,,,,,,,,,,,,,,,,JDK-8256070,,JDK-8278944,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sca3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-04-09 14:47;jjg;These tests are softly-blocking the upgrade to the latest jtreg. They need to be fixed or put on the problem list.

If they are to be updated, that must be done in conjunction with the change to use jtreg 6.;;;","2021-05-31 03:12;chegar;Given that a module name change is needed for the `requires` directives in these tests, then (as Jon says) the test changes and update to testng needs to be co-ordinated. Changing the test during update of testng is fine, or adding the ProblemList.txt is fine too.;;;","2021-06-02 14:21;roboduke;Changeset: 3482cb87
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-06-02 21:20:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3482cb87fd94e6445ca243722851daa90c00a2c8
;;;","2022-07-19 02:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1241
Date: 2022-07-19 09:19:22 +0000;;;","2022-07-25 00:48;gdams;Fix Request (11u)

This is required to bump GitHub actions to jtreg 6. Backport applies cleanly except for one missing test file (only present in JDK16u+).

Thorough testing has been done across jtreg1-4 including headful tests and confirms that we are now ready to bump to jtreg6.;;;","2022-07-26 07:24;goetz;George, please add required information to fix request comment. See other issue. I'll remove the tag in the meantime. Also for the other unfinished issues.;;;",,,,,,,,,,,,,,,,,,,,,,
Update tests for additional TestNG test permissions,JDK-8265019,5046620,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lancea,jjg,jjg,2021-04-09 14:42,2022-07-09 01:20,2023-10-01 09:57,2021-04-14 08:43,17,,,,,,,,17,core-libs,,0,blocks-jtreg-6,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,,,,,"The following shows places in tests where permissions are being given to TestNG.

 grep -r 'PropertyPermission(""testng' open/test/jdk
open/test/jdk/java/lang/ProcessHandle/PermissionTest.java:        permissions.add(new PropertyPermission(""testng.show.stack.frames"",
open/test/jdk/java/sql/testng/util/TestPolicy.java:        permissions.add(new PropertyPermission(""testng.show.stack.frames"",

These classes are used in a number of tests, which fail when using the upcoming new TestNG version.  These tests should be updated to allow the newly-required additional properties.",,,,,,,,,,JDK-8266226,JDK-8266233,JDK-8274424,JDK-8266198,,,,,,,,,,,,,,,,,,,,JDK-8289994,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sc9v:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-04-09 14:43;jjg;These tests are softly-blocking the upgrade to the latest jtreg. They need to be fixed or put on the problem list.;;;","2021-04-14 08:43;roboduke;Changeset: ffb37718
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2021-04-14 15:42:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ffb37718
;;;","2021-09-26 02:38;goetz;Fix request [11u]

I downport this for parity with 11.0.13-oracle.
No risk, only a test change.
Clean except for copyright.
Nighttests passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Build issue with FileDispatcherImpl.c:31:10: fatal error: 'sys/mount.h' file not found (aix),JDK-8265018,5046619,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,mdoerr,mdoerr,mdoerr,2021-04-09 14:26,2021-04-14 17:28,2023-10-01 09:57,2021-04-12 02:04,17,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"AIX build is broken: FileDispatcherImpl.c:31:10: fatal error: 'sys/mount.h' file not found
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8232861,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,,"0|i2sc9n:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-04-12 02:04;roboduke;Changeset: cb2806db
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2021-04-12 09:03:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cb2806db
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/HiddenClasses/StressHiddenClasses.java timed out on Win* OCI,JDK-8265017,5046618,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,dcubed,dcubed,2021-04-09 13:58,2021-04-28 17:38,2023-10-01 09:57,2021-04-21 10:35,17,,,,,,,,17,hotspot,,0,intermittent,tier1,,,,,,,,,,,,,,,,,,,,,"The following test timed out in the JDK17 CI:

runtime/HiddenClasses/StressHiddenClasses.java

Here's a snippet from the log file:

#section:main
----------messages:(7/288)----------
command: main StressHiddenClasses
reason: User specified action: run main/othervm StressHiddenClasses 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.compiler
Timeout information:
--- Timeout information end.
elapsed time (seconds): 588.695
----------configuration:(3/43)----------
Boot Layer
  add modules: jdk.compiler

----------System.out:(1/27)----------
Timeout refired 480 times
----------System.err:(0/0)----------
----------rerun:(40/5719)*----------

<snip>

test result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-17+18-1437\windows-x64-debug.jdk\jdk-17\fastdebug\bin\java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 588692ms).

This is a Tier1 test task with no JVM args. Normally I would start
this bug as a P2, but this failure is intermittent. The build-ID in which
this sighting happened has just a closed ProblemList change that's
unrelated to this test at all.

I'm starting this bug in hotspot/runtime just because this is
a Runtime test.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265694,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2sc9f:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-13 11:07;mseledtsov;ILW = MLM = P4;;;","2021-04-21 10:35;roboduke;Changeset: f45d4609
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2021-04-21 17:34:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f45d4609
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Backout JDK-8264718,JDK-8265012,5046611,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2021-04-09 11:01,2021-04-19 16:27,2023-10-01 09:57,2021-04-12 05:49,17,,,,,,,,17,hotspot,,0,gc-shenandoah,redhat-interest,,,,,,,,,,,,,,,,,,,,,"It turns out that enquening string deduplication candidates during concurrent root scanning may result lock rank inversion between stack watermark lock and string dedup queue lock, if the scanning is triggered by stack watermark and dedup buffer happens to be full.

Backout  JDK-8264718 now, will retry after Kim's string deduplication refactoring.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sc7v:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-04-12 05:48;roboduke;Changeset: 125184e9
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-04-12 12:47:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/125184e9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
update jextract samples for flatter binding,JDK-8265002,5046598,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-04-09 08:41,2021-04-09 08:45,2023-10-01 09:57,2021-04-09 08:45,repo-panama,,,,,,,,repo-panama,tools,,0,,,,,,,,,,,,,,,,,,,,,,,update jextract samples for flatter binding see also JDK-8263515,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263515,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2sc4z:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-04-09 08:45;sundar;Fixed in samples repo.

https://github.com/sundararajana/panama-jextract-samples/commit/2c8de4db95b1957421b5dc0d1dfa9959a19cce3f;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
GeneralPath.lineTo() to itself produces jagged lines,JDK-8264999,5046349,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lbourges,webbuggrp,webbuggrp,2021-04-07 10:31,2022-07-25 14:05,2023-10-01 09:57,2022-07-20 04:37,11,15,16,8,,,,,20,client-libs,,0,dcspn,fossbug,PDFBox-found,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Microsoft Windows [Version 10.0.18363.1474]

java version ""16"" 2021-03-16
Java(TM) SE Runtime Environment (build 16+36-2231)
Java HotSpot(TM) 64-Bit Server VM (build 16+36-2231, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
In the produced image file, the red path looks good and the blue path looks weird. The difference between the two is that the blue path has double lineTo() calls. The effect is somehow related to the miter limit setting. I doubt that this is the correct behavior. I tried the same path with SVG and didn't get such an effect.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
run the attached code

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
two identical paths in different colors
ACTUAL -
blue path is different and jagged

---------- BEGIN SOURCE ----------
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.geom.GeneralPath;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;


public class JaggedLines
{
    public static void main(String[] args) throws IOException
    {
        BufferedImage bim = new BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = (Graphics2D) bim.getGraphics();
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.setBackground(Color.white);
        g.clearRect(0, 0, bim.getWidth(), bim.getHeight());
        GeneralPath path;

        AffineTransform at = g.getTransform();

        g.setColor(Color.red);
        g.transform(AffineTransform.getTranslateInstance(0, -1400));
        g.transform(AffineTransform.getScaleInstance(10, 10));
        path = new GeneralPath();
        path.moveTo(24.954517, 159);
        path.lineTo(21.097446, 157.5);
        path.lineTo(17.61364, 162);
        path.lineTo(13.756569, 163.5);
        path.lineTo(11.890244, 160.5);
        g.draw(path);

        g.setTransform(at);

        g.setColor(Color.blue);
        path = new GeneralPath();
        g.transform(AffineTransform.getTranslateInstance(0, -1300));
        g.transform(AffineTransform.getScaleInstance(10, 10));
        path.moveTo(24.954517, 159);
        path.lineTo(21.097446, 157.5);
        path.lineTo(21.097446, 157.5); // this repeats the previous one
        path.lineTo(17.61364, 162);
        path.lineTo(17.61364, 162); // this repeats the previous one
        path.lineTo(13.756569, 163.5);
        path.lineTo(13.756569, 163.5); // this repeats the previous one
        path.lineTo(11.890244, 160.5);
        g.draw(path);
        
        g.dispose();
		
        ImageIO.write(bim, ""png"", new File(""huhu.png""));
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
remembering whether the last path operation was a lineTo, and then comparing its coordinate, and ignoring it if it's the same. Checking the position with getCurrentPoint() isn't enough because in some cases, a moveTo and lineTo to the same position is used to produce a dot.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-04-09 08:23;pnarayanaswa;JaggedLines.java;https://bugs.openjdk.org/secure/attachment/94113/JaggedLines.java","2021-04-09 08:23;pnarayanaswa;huhu.png;https://bugs.openjdk.org/secure/attachment/94112/huhu.png",,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i2saxv:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-04-09 08:23;pnarayanaswa;Checked with attached testcase in Windows10, Issue is reproducible as stated, blue path is different and jagged.<attached PNG for reference>
Test Result:
=========
8: Fail
8u281: Fail
11: Fail
11.0.10: Fail
15: Fail
16: Fail
17ea: Fail
;;;","2021-04-13 15:41;prr;Does reproduce with (at least) JDK8 through 17. ;;;","2022-05-29 18:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8943
Date: 2022-05-30 01:15:01 +0000;;;","2022-05-31 01:09;lbourges;One more general comment on this bug: 
what is expected when lineTo() does not change the last point (same exact coordinates) after all other possible path operations ?
- lineTo, lineto (this bug)
- quadTo, lineto
- cubicTo, lineto
- moveto, lineto: point (ok)
- close, lineto(star: equiv to close, move start, lineto start: point start (ok ?)

If any drawing operation in progress (lineto, quadto, curveto), I think the expected behaviour consists in skipping the repeated end point.

Do the Java2D Specifications explicitely state this detailed use case ?;;;","2022-07-20 04:37;dukebot;Changeset: 4b4d3528
Author:    jeremy <jeremy.wood@mac.com>
Committer: Laurent Bourgès <lbourges@openjdk.org>
Date:      2022-07-20 11:34:48 +0000
URL:       https://git.openjdk.org/jdk/commit/4b4d35289ad7bfd2c5d9992b7c1fb8507d44a56d
;;;",,,,,,,,,,,,,,,,,,,,,,,
Empty Jars shouldn't have Automatic-Module-Name,JDK-8264998,5046595,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abagarwal,abagarwal,abagarwal,2021-04-09 08:20,2021-09-21 10:08,2023-10-01 09:57,2021-05-03 12:23,jfx11,jfx17,,,,,,,jfx17,javafx,,0,noreg-build,,,,,,,,,,,,,,,,,,,,,,"Automatic-Module-Name was introduced as a part of JDK-8209836 and the discussion is archived in openjfx-dev mailing list which spans over 2 months under the following threads:

* http://mail.openjdk.java.net/pipermail/openjfx-dev/2018-July/022145.html
* http://mail.openjdk.java.net/pipermail/openjfx-dev/2018-August/022285.html

The change was made to support Gradle projects in Eclipse IDE. 

Things to note
---------------------

1. Change was made before Gradle had any decent JPMS support
2. JavaFX plugins were not created for Maven and Gradle

Issue
--------
Automatic-Module-Name is not supported in jlink and it causes issue if we try to bundle a Maven project using maven-jlink-plugin. Maven adds empty jars as transitive dependency to the classpath. These empty jars have Automatic-Module-Name and are treated as modules and included in the module-path. However, jlink has no support for them and it fails.

Solution
-----------
Automatic-Module-Name in empty jars was added as a temporary solution. Since they no longer serve any real world purpose, they should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8209836,JDK-8274103,,,,,JDK-8273754,,,,,,,,,,,,,,,,,,,,,,,,jfx11,,,,,,,,"0|i2sc4b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-05-03 12:22;roboduke;Changeset: 02b078a8
Author:    Abhinay Agarwal <abhinay.agarwal@gluonhq.com>
Committer: Johan Vos <jvos@openjdk.org>
Date:      2021-05-03 19:21:43 +0000
URL:       https://git.openjdk.java.net/jfx/commit/02b078a8a00803e03f4d2b5f06552f88dd0d5c00
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
WebEngine crashes with segfault when not loaded through system classloader,JDK-8264990,5046337,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ajoseph,webbuggrp,webbuggrp,2021-04-07 09:47,2021-05-10 18:16,2023-10-01 09:57,2021-04-19 11:47,jfx11,,,,,,,,jfx17,javafx,,0,sn_91,webbug,,,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
As a followup to 8242361 I tried to load a normal webpage (https://netbeans.apache.org) with the WebEngine and observed a segfault. The segfault is reproducible and can be traced back into wrong assumptions when loading classes from native threads in the webkit integration.

The data from hs_err_pit*:
---------------  S U M M A R Y ------------

Command Line: -Djavafx.sdk.path=/home/matthias/src/jfx/build/sdk/lib eu.doppel_helix.dev.jdk.reproducecrash.TestBrowser

Host: AMD Ryzen 7 PRO 4750U with Radeon Graphics, 16 cores, 30G, Ubuntu 20.10
Time: Wed Apr  7 18:22:15 2021 CEST elapsed time: 1 seconds (0d 0h 0m 1s)

---------------  T H R E A D  ---------------

Current thread (0x00007fa400001000):  JavaThread ""Thread-3"" daemon [_thread_in_vm, id=204072, stack(0x00007fa40b801000,0x00007fa40c000000)]

Stack: [0x00007fa40b801000,0x00007fa40c000000],  sp=0x00007fa40bffe9c0,  free space=8182k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x91203a]  jni_CallStaticBooleanMethodV+0x7a
C  [libjfxwebkit.so+0x613a55]  JNIEnv_::CallStaticBooleanMethod(_jclass*, _jmethodID*, ...)+0x85
C  [libjfxwebkit.so+0x2b112ad]  WTF::FileSystemImpl::makeAllDirectories(WTF::String const&)+0x7d
C  [libjfxwebkit.so+0x56c957]  WebCore::StorageSyncManager::fullDatabaseFilename(WTF::String const&)+0x27
C  [libjfxwebkit.so+0x567a8a]  WebKit::StorageAreaSync::openDatabase(WebKit::StorageAreaSync::OpenDatabaseParamType)+0x3a
C  [libjfxwebkit.so+0x568af9]  WebKit::StorageAreaSync::performImport()+0x29
C  [libjfxwebkit.so+0x56d154]  WebCore::StorageThread::threadEntryPoint()+0xb4
C  [libjfxwebkit.so+0x2aabb53]  WTF::Thread::entryPoint(WTF::Thread::NewThreadContext*)+0x63
C  [libjfxwebkit.so+0x2b15f4d]  WTF::wtfThreadEntryPoint(void*)+0xd


siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000000

Register to memory mapping:

RAX=0x0 is NULL
RBX=0x00007fa400001000 is a thread
RCX=0x00007fa40bffea98 is pointing into the stack for thread: 0x00007fa400001000
RDX=0x00007fa400001958 points into unknown readable memory: 28 3e ea 33 06 00 00 00
RSP=0x00007fa40bffe9c0 is pointing into the stack for thread: 0x00007fa400001000
RBP=0x00007fa40bffea80 is pointing into the stack for thread: 0x00007fa400001000
RSI=0x00007fa400001000 is a thread
RDI=0x00007fa400001000 is a thread
R8 =0x0000000000000001 is an unknown value
R9 =0x00007fa400001000 is a thread
R10=0x00007fa6521a3060: <offset 0x00000000013f7060> in /home/matthias/bin/jdk-11/lib/server/libjvm.so at 0x00007fa650dac000
R11=0x0000000800000820 is a pointer to class: 
R12=0x0 is NULL
R13=0x0 is NULL
R14=0x00007fa40bffeb78 is pointing into the stack for thread: 0x00007fa400001000
R15=0x00007fa40bffea98 is pointing into the stack for thread: 0x00007fa400001000


Registers:
RAX=0x0000000000000000, RBX=0x00007fa400001000, RCX=0x00007fa40bffea98, RDX=0x00007fa400001958
RSP=0x00007fa40bffe9c0, RBP=0x00007fa40bffea80, RSI=0x00007fa400001000, RDI=0x00007fa400001000
R8 =0x0000000000000001, R9 =0x00007fa400001000, R10=0x00007fa6521a3060, R11=0x0000000800000820
R12=0x0000000000000000, R13=0x0000000000000000, R14=0x00007fa40bffeb78, R15=0x00007fa40bffea98
RIP=0x00007fa6516be03a, EFLAGS=0x0000000000010202, CSGSFS=0x002b000000000033, ERR=0x0000000000000004
  TRAPNO=0x000000000000000e

Top of Stack: (sp=0x00007fa40bffe9c0)
0x00007fa40bffe9c0:   00007fa40bffea00 00007fa400001340
0x00007fa40bffe9d0:   00007fa6520ffc18 00007fa400001000
0x00007fa40bffe9e0:   00007fa400001000 0000000800001808
0x00007fa40bffe9f0:   00007fa400001000 00007fa400001950 


I augemented the OpenJFX code and found the reason in modules/javafx.web/src/main/native/Source/WTF/wtf/java/FileSystemJava.cpp, #GetFileSystemClass. At that point FindClass for com.sun.webkit.FileSystem.

Together with the stacktrace above this leads to this assumption:

- webkit is initialized
- localstorage is accessed
- this causes a second native thread to spin up
- in that thread the local storage is initialized and calls back into the VM to load com.sun.webkit.FileSystem


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Sample code can be found here: https://github.com/matthiasblaesing/reproduce-openjfx-crash2/tree/7d6db9b843c17575bf03d3c18e857ad7aefa0a83 (at time of writing this that is master)

In addition to the sample code a build of OpenJFX is needed. The path to the build/sdk/lib folder needs to be set in pom.xml -> properties -> javafx.sdk.path.

After that the code can be build with ""mvn package"". And run with (javafx.sdk.path needs to point to build/sdk/lib folder):

java -Djavafx.sdk.path=/home/matthias/src/jfx/build/sdk/lib  -cp target/reproduce-openjfx-crash2.jar eu.doppel_helix.dev.jdk.reproducecrash.TestBrowser

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
An JavaFX stage should open and the text ""Done"" should be shown - no crash should happen
ACTUAL -
Crash as described above.

---------- BEGIN SOURCE ----------
See steps to reproduce
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
None known

FREQUENCY : always


",,,,,,,,,,JDK-8265588,JDK-8266864,,,,,,,,,,,,,,,,,,,,,,JDK-8264886,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sav7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2021-04-19 11:46;roboduke;Changeset: e02cee96
Author:    Matthias Bläsing <mblaesing@doppel-helix.eu>
Committer: Johan Vos <jvos@openjdk.org>
Date:      2021-04-19 18:46:13 +0000
URL:       https://git.openjdk.java.net/jfx/commit/e02cee96
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] A primitive class field by name val confuses javac,JDK-8264977,5046563,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-04-09 02:36,2021-04-09 04:48,2023-10-01 09:57,2021-04-09 04:48,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,,,,,,,,,,"Reported by Tobias.

The following program does not compile on lworld branch top:

public class X  {
static primitive class Test139Value {
        Object obj = null;
        MyValueEmpty empty = MyValueEmpty.default;
    }
    static primitive class Test139Wrapper {
        Test139Value val = Test139Value.default;
    }
    public MyValueEmpty test139() {
        Test139Wrapper w = new Test139Wrapper();
        return w.val.empty;
    }
}

primitive class MyValueEmpty {}


I get: 

X.java:11: error: unexpected type
        return w.val.empty;
               ^
  required: class,package
  found:    variable
X.java:11: error: cannot find symbol
        return w.val.empty;
                    ^
  symbol:   variable empty
  location: class Test139Wrapper
2 errors


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8244229,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2sbx7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minor numeric bug in AbstractSplittableWithBrineGenerator.makeSplitsSpliterator,JDK-8264976,5046561,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-04-09 02:32,2021-04-21 18:00,2023-10-01 09:57,2021-04-14 09:17,17,,,,,,,,17,core-libs,,0,sonarcloud-found,,,,,,,,,,,,,,,,,,,,,,"SonarCloud reports:
  Cast one of the operands of this subtraction operation to a ""long"".

Here:
        Spliterator<SplittableGenerator> makeSplitsSpliterator(long index, long fence, SplittableGenerator source) {
            ...
            long multiplier = (1 << SALT_SHIFT) - 1; // <---- here

The shift is integer, and the cast to long is too late. SALT_SHIFT is currently 4, so this is not the problem. But it would become a problem if SALT_SHIFT ever becomes 32 or larger. The shift operand should be 1L for safety. Observe:

jshell> Long.toHexString((1 << 31) - 1)
$2 ==> ""7fffffff""

jshell> Long.toHexString((1 << 32) - 1)
$3 ==> ""0""

jshell> Long.toHexString((1L << 32) - 1)
$4 ==> ""ffffffff""
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8248862,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sbwr:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2021-04-14 09:17;roboduke;Changeset: 94067446
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-04-14 16:16:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/94067446
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
java/net/DatagramSocket/DatagramSocketMulticasting.java fails infrequently,JDK-8264975,5046560,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2021-04-09 02:27,2021-07-26 05:34,2023-10-01 09:57,2021-06-03 01:59,17,,,,,,,,17,core-libs,,0,intermittent,noreg-self,tier2,ursqe-triaged,,,,,,,,,,,,,,,,,,,"The probable cause is that the network interface is being reconfigured while the test is running.

The line that fails is:

assertTrue(s.getOption(IP_MULTICAST_IF).equals(ni));

Comparing two instances of NetworkInterface for equality is problematic because NetworkInterface::equals also compare the addresses bound to the network interface, and each instance of NetworkInterface has a snapshot of the addresses taken at the time the instance is created.

The test should be improved to only compare NetworkInterface name/index.

java.lang.RuntimeException
	at DatagramSocketMulticasting.assertTrue(DatagramSocketMulticasting.java:363)
	at DatagramSocketMulticasting.testNetworkInterface(DatagramSocketMulticasting.java:242)
	at DatagramSocketMulticasting.test(DatagramSocketMulticasting.java:106)
	at DatagramSocketMulticasting.main(DatagramSocketMulticasting.java:88)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sbwj:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-06-03 01:59;roboduke;Changeset: 17834375
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2021-06-03 08:58:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/178343750f8ce51c191d475d2fca6cbe609fd61c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2 compilation fails with assert ""n is later than its clone""",JDK-8264958,5046540,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,thartmann,thartmann,2021-04-09 00:42,2021-04-22 02:20,2023-10-01 09:57,2021-04-16 04:35,11,13.0.4,14,16,17,,,,17,hotspot,,0,c2,c2-loopopts,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,,,,,,,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/jdk/open/src/hotspot/share/opto/loopopts.cpp:1501), pid=332405, tid=332418
#  assert(dom_depth(n_ctrl) <= dom_depth(x_ctrl)) failed: n is later than its clone


Current CompileTask:
C2:    596  393    b  4       MainClass::test (55 bytes)

Stack: [0x00007ff082238000,0x00007ff082339000],  sp=0x00007ff082333260,  free space=1004k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12ff474]  PhaseIdealLoop::split_if_with_blocks_post(Node*)+0xcf4
V  [libjvm.so+0x12ff9b1]  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)+0x201
V  [libjvm.so+0x12f3f9d]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x121d
V  [libjvm.so+0xa2a5fb]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x32b
V  [libjvm.so+0xa267d6]  Compile::Optimize()+0x586
V  [libjvm.so+0xa295b5]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1905
V  [libjvm.so+0x853a7a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa39401]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xf21
V  [libjvm.so+0xa3a0a8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1863181]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x186b2c0]  Thread::call_run()+0x100
V  [libjvm.so+0x1556df6]  thread_native_entry(Thread*)+0x116",,,,,,,,,,JDK-8265737,JDK-8265672,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8229483,,,,,,"2021-04-09 00:43;thartmann;MainClass.java;https://bugs.openjdk.org/secure/attachment/94104/MainClass.java","2021-04-09 01:00;thartmann;hs_err_pid332405.log;https://bugs.openjdk.org/secure/attachment/94105/hs_err_pid332405.log","2021-04-09 01:00;thartmann;replay_pid332405.log;https://bugs.openjdk.org/secure/attachment/94106/replay_pid332405.log",,,,,,,,,,,,,,,,,,,,,,,,"0|i2sbs3:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-09 00:45;thartmann;ILW = Assert during C2 compilation, reproducible with generated test, no workaround but disable loop opts = HLM = P3;;;","2021-04-09 00:51;thartmann;Looks like this has been introduced by JDK-8229483.;;;","2021-04-09 01:21;thartmann;(rr) print x_ctrl->dump(3)
 88  Bool  === _  87  [[ 89 ]] [le] !jvms: MainClass::test @ bci:18 (line 9)
 150  CountedLoop  ===  150  149  120  [[ 150  140  138  89  78 ]] stride: 1  strip mined !orig=[141],[75] !jvms: MainClass::test @ bci:8 (line 8)
 89  If  ===  150  88  [[ 90  91 ]] P=0,200098, C=16382,000000 !jvms: MainClass::test @ bci:18 (line 9)
 90  IfTrue  ===  89  [[ 94 ]] #1 !jvms: MainClass::test @ bci:18 (line 9)
 91  IfFalse  ===  89  [[ 94  97 ]] #0 !jvms: MainClass::test @ bci:18 (line 9)
 94  Region  ===  94  91  90  [[ 94  145  98  109 ]]  !orig=111 !jvms: MainClass::test @ bci:26 (line 12)

n_ctrl == x_head:

(rr) print x_head->dump(2)
 145  CountedLoopEnd  ===  94  144  [[ 146  120 ]] [lt] P=0,909101, C=16381,000000 !orig=[119] !jvms: MainClass::test @ bci:5 (line 7)
 148  IfTrue  ===  147  [[ 149 ]] #1
 70  IfTrue  ===  60  [[ 149 ]] #1 !jvms: MainClass::test @ bci:5 (line 7)
 120  IfTrue  ===  145  [[ 150 ]] #1 !jvms: MainClass::test @ bci:5 (line 7)
 149  OuterStripMinedLoop  ===  149  70  148  [[ 149  150 ]] 
 150  CountedLoop  ===  150  149  120  [[ 150  140  138  89  78 ]] stride: 1  strip mined !orig=[141],[75] !jvms: MainClass::test @ bci:8 (line 8)

Then the code introduced by JDK-8229483 sets x_ctrl to 

x_ctrl = x_head->as_Loop()->skip_strip_mined()->in(LoopNode::EntryControl) = 70  IfTrue 

Which violates:

assert(dom_depth(n_ctrl) <= dom_depth(x_ctrl), ""n is later than its clone"");;;;","2021-04-09 01:23;thartmann;Roland, could you please have a look?;;;","2021-04-16 04:35;roboduke;Changeset: 71373280
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-04-16 11:34:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/71373280
;;;","2021-04-21 08:24;shade;Fix Request (11u)

This fixes a compiler bug introduced by 11.0.6 backport and keeps codebases in sync (I see 11.0.11-oracle). Patch applies cleanly to 11u, passes tier{1,2}. New regression test fails without the product patch, and passes with it.;;;",,,,,,,,,,,,,,,,,,,,,,
[TestBug] Controls unit tests - ControlTest and SpinnerTest fail for non US Locale,JDK-8264952,5046529,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,aghaisas,aghaisas,2021-04-08 23:15,2021-04-27 11:24,2023-10-01 09:57,2021-04-23 06:54,jfx17,,,,,,,,jfx17,javafx,,0,sn_91,test_sprint,testbug,,,,,,,,,,,,,,,,,,,,"Below unit test fails with the latest build on my macBook pro with macOS 10.15.7 if non US locale is set : (I tested with German locale)

> Task :controls:test

test.javafx.scene.control.SpinnerTest > test_jdk_8150946_testCommit_valid FAILED
    junit.framework.AssertionFailedError: expected:<2.5> but was:<2.0>
        at junit.framework.Assert.fail(Assert.java:47)
        at junit.framework.Assert.failNotEquals(Assert.java:283)
        at junit.framework.Assert.assertEquals(Assert.java:64)
        at junit.framework.Assert.assertEquals(Assert.java:71)
        at test.javafx.scene.control.SpinnerTest.test_jdk_8150946_testCommit_valid(SpinnerTest.java:1319)

test.javafx.scene.control.SpinnerTest > dblSpinner_testToString_valueInRange FAILED
    junit.framework.ComparisonFailure: null expected:<0[.]3> but was:<0[,]3>
        at junit.framework.Assert.assertEquals(Assert.java:81)
        at junit.framework.Assert.assertEquals(Assert.java:87)
        at test.javafx.scene.control.SpinnerTest.dblSpinner_testToString_valueInRange(SpinnerTest.java:618)

test.javafx.scene.control.SpinnerTest > dblSpinner_testFromString_valueInRange FAILED
    junit.framework.AssertionFailedError: expected:<0.3> but was:<0.0>
        at junit.framework.Assert.fail(Assert.java:47)
        at junit.framework.Assert.failNotEquals(Assert.java:283)
        at junit.framework.Assert.assertEquals(Assert.java:64)
        at junit.framework.Assert.assertEquals(Assert.java:71)
        at test.javafx.scene.control.SpinnerTest.dblSpinner_testFromString_valueInRange(SpinnerTest.java:626)

test.javafx.scene.control.SpinnerTest > test_jdk_8150946_testCancel FAILED
    junit.framework.ComparisonFailure: null expected:<2[.]5> but was:<2[,]5>
        at junit.framework.Assert.assertEquals(Assert.java:81)
        at junit.framework.Assert.assertEquals(Assert.java:87)
        at test.javafx.scene.control.SpinnerTest.test_jdk_8150946_testCancel(SpinnerTest.java:1345)

test.javafx.scene.control.ControlTest > testRT18097 FAILED
    java.lang.AssertionError: javafx.scene.control.DatePicker -fx-show-week-numbers expected:<false> but was:<true>
        at org.junit.Assert.fail(Assert.java:91)
        at org.junit.Assert.failNotEquals(Assert.java:645)
        at org.junit.Assert.assertEquals(Assert.java:126)
        at test.javafx.scene.control.ControlTest.checkClass(ControlTest.java:1049)
        at test.javafx.scene.control.ControlTest.checkDirectory(ControlTest.java:1080)
        at test.javafx.scene.control.ControlTest.recursiveCheck(ControlTest.java:1092)
        at test.javafx.scene.control.ControlTest.recursiveCheck(ControlTest.java:1095)
        at test.javafx.scene.control.ControlTest.recursiveCheck(ControlTest.java:1095)
        at test.javafx.scene.control.ControlTest.testRT18097(ControlTest.java:1007)

7952 tests completed, 5 failed, 194 skipped
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-04-21 05:11;aghaisas;Locale_patch.txt;https://bugs.openjdk.org/secure/attachment/94335/Locale_patch.txt",,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2sbpn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-04-14 03:01;aghaisas;This test fails consistently on my macBook pro 13"" system with macOS 10.15.7
It passes consistently on my macBook pro 16"" system with macOS 11.1;;;","2021-04-14 04:46;kcr;Since this this is a headless test, it wouldn't be related to any rendering issue (so the usual things like color profile or retina display wouldn't come into play). Could it be a Locale issue?;;;","2021-04-20 03:53;aghaisas;This test fails with - English (UK) - Locale. Setting system Locale to - English (US) - solves the issue.

In the test, I tried setting the default locale, but it is of no help. I tried using - 

1) Locale.setDefault(Locale.US);
2) Locale.setDefault(Locale.forLanguageTag(""en-US""));;;;","2021-04-20 05:05;fastegal;maybe related test failure:

Local test failure of LocalDateTimeStringConverterTest.testChronologyConsistency, top of failure trace

org.junit.ComparisonFailure: expected:<...y, January 12, 60 Sh[ō]wa, 12:34:56 PM> but was:<...y, January 12, 60 Sh[o]wa, 12:34:56 PM>
    at org.junit.Assert.assertEquals(Assert.java:123)
    at org.junit.Assert.assertEquals(Assert.java:145)
    at test.javafx.util.converter.LocalDateTimeStringConverterTest.testChronologyConsistency(LocalDateTimeStringConverterTest.java:160)

looks like some problem with assumptions of Locale-dependent state (my default is German, obviously :). They are always a bit whacky, but am surprised to see it in gradle (which disturbs the final tests before every push now) - should I file a test bug? Or is there something to change locally? 

Added here as per Kevin's comment on the mailing list.;;;","2021-04-21 02:22;aghaisas;[~fastegal], I made ""Deutsch (Deutschland)"" as the primary language of my macBook under System Preferences -> ""Language and Region"" - restarted the system. After this, macBook UI is in German language.
I cleaned base and controls tests and ran ""gradle :base:test"" task. All tests passed. The reported failure is not seen. Whereas if I run the controls test with this setup, I see 5 failures (1 in ControlTest as reported in this bug) and 4 in SpinnerTest.


Any other suggestion to reproduce the :base:test failure that you are seeing?
I hope you are running the tests on latest code which has fix of JDK-8264061.;;;","2021-04-21 03:33;fastegal;no suggestion, and yes it's the current master, actually it started - or to be more precise: I've first seen it - with that fix :)

As to the spinner tests: for me they fail always in Eclipse (which I ignore), never when running from the command line (which I'm happy for) .. that's strange.;;;","2021-04-21 05:09;aghaisas;OK. Thanks for more information.

I am attaching a patch that fixes controls test failures on macBook with German language.
I have made similar change for base as well. (I cannot really test it as I don't see that failure). Can you please apply this patch and provide feedback on both base and controls unit tests?;;;","2021-04-21 05:45;fastegal;thanks, will do and come back with the result :);;;","2021-04-21 06:20;fastegal;hmm .. base test still failing - but don't quite understand it (would expect it to work when setting the default to something known). Maybe it's something (missing) on my machine (and not related to this cleanup task after all): looking at the failure message, it's a single char that's different. Clueless .. 

As to the SpinnerTest: with the change, it passes in Eclipse (it always passed when run from the command line).;;;","2021-04-22 00:30;aghaisas;Thanks for testing my patch.
Now, I have limited this bug to the controls test failures (SpinnerTest and ControlTest)

For :base:test failure, I have created JDK-8265727.;;;","2021-04-23 06:54;roboduke;Changeset: b50ce94c
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2021-04-23 13:53:41 +0000
URL:       https://git.openjdk.java.net/jfx/commit/b50ce94c
;;;",,,,,,,,,,,,,,,,,
Set opaque for JTooltip in config file of NimbusLookAndFeel,JDK-8264950,5046527,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,trebari,trebari,trebari,2021-04-08 22:57,2021-05-10 10:33,2023-10-01 09:57,2021-05-03 21:54,17,,,,,,,,17,client-libs,,0,sn_92,,,,,,,,,,,,,,,,,,,,,,"Set the opaque property for JToolTip in config file (skin.laf) of NimbusLookAndFeel instead of setting up in the SynthToolTipUI.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,"0|i2sbp7:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-05-03 21:54;roboduke;Changeset: 30ccd808
Author:    Tejpal Rebari <trebari@openjdk.org>
Date:      2021-05-04 04:53:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/30ccd8081b3b82c04203a72c59d12a8c0a24b0c0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Check for TLS extensions total length ,JDK-8264948,5046524,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2021-04-08 21:11,2021-04-14 17:28,2023-10-01 09:57,2021-04-09 20:49,,,,,,,,,17,security-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,,,,,,"To improve the readability, it would be nice to add a check of the TLS extensions total length while parsing, although there is no functional impact.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sboj:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-04-09 20:49;roboduke;Changeset: 5784f6b7
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2021-04-10 03:48:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5784f6b7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/lang/invoke/6998541/Test6998541.java failed ""guarantee(ik->is_initialized()) failed: java/lang/Byte$ByteCache must be initialized""",JDK-8264940,5046506,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,whuang,dcubed,dcubed,2021-04-08 14:22,2022-04-02 01:31,2023-10-01 09:57,2021-04-13 09:42,17,,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,huawei-interest,oracle-triage-11,oracle-triage-17,regression,tier6,tier8,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

java/lang/invoke/6998541/Test6998541.java

Here's a snippet from the log file:

#section:main
----------messages:(4/381)----------
command: main -Xbatch -XX:+UnlockDiagnosticVMOptions -XX:ScavengeRootsInCode=2 -DTest6998541.N=100000 -DTest6998541.KIND=normal Test6998541
reason: User specified action: run main/othervm -Xbatch -XX:+UnlockDiagnosticVMOptions -XX:ScavengeRootsInCode=2 -DTest6998541.N=100000 -DTest6998541.KIND=normal Test6998541 
Mode: othervm [/othervm specified]
elapsed time (seconds): 24.021
----------configuration:(0/0)----------
----------System.out:(22/1928)----------
KIND=normal DO_CASTS=false N=100000
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/deoptimization.cpp:910
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/e8f948fe-dc79-4c12-82c8-0e7ba4ac7993-S93/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/cf974995-aef4-43b1-ac70-66bbe2eae3c9/runs/fe5c3182-302b-4e64-aef8-5dc976cf2046/workspace/open/src/hotspot/share/runtime/deoptimization.cpp:910), pid=2277, tid=2320
#  guarantee(ik->is_initialized()) failed: java/lang/Byte$ByteCache must be initialized
#
# JRE version: Java(TM) SE Runtime Environment (17.0+17) (fastdebug build 17-ea+17-LTS-1401)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+17-LTS-1401, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xad15d6]  BoxCache<signed char, java_lang_Byte_ByteCache, java_lang_Byte>::BoxCache(Thread*)+0x156
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S154438/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/af709e53-1c9d-4e6a-a2a8-0afdeccc289c/runs/1b696b83-85d8-42fe-935c-e10541ebc67b/testoutput/test-support/jtreg_open_test_jdk_jdk_lang/scratch/1/core.2277)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S154438/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/af709e53-1c9d-4e6a-a2a8-0afdeccc289c/runs/1b696b83-85d8-42fe-935c-e10541ebc67b/testoutput/test-support/jtreg_open_test_jdk_jdk_lang/scratch/1/hs_err_pid2277.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(51/6245)*----------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f4f183708e0):  JavaThread ""MainThread"" [_thread_in_vm, id=2320, stack(0x00007f4efdbfb000,0x00007f4efdcfc000)]

Stack: [0x00007f4efdbfb000,0x00007f4efdcfc000],  sp=0x00007f4efdcf76e0,  free space=1009k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xad15d6]  BoxCache<signed char, java_lang_Byte_ByteCache, java_lang_Byte>::BoxCache(Thread*)+0x156
V  [libjvm.so+0xac4e18]  Deoptimization::get_cached_box(AutoBoxObjectValue*, frame*, RegisterMap*, Thread*)+0x758
V  [libjvm.so+0xac5587]  Deoptimization::realloc_objects(JavaThread*, frame*, RegisterMap*, GrowableArray<ScopeValue*>*, Thread*)+0x6b7
V  [libjvm.so+0xacab78]  rematerialize_objects(JavaThread*, int, CompiledMethod*, frame&, RegisterMap&, GrowableArray<compiledVFrame*>*, bool&)+0x4f8
V  [libjvm.so+0xacbe8e]  Deoptimization::fetch_unroll_info_helper(JavaThread*, int)+0x49e
V  [libjvm.so+0xacf1a8]  Deoptimization::uncommon_trap(JavaThread*, int, int)+0x48

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~UncommonTrapBlob
J 2922 c2 Test6998541.byte2prim(B)V (161 bytes) @ 0x00007f4f0ddfe3c0 [0x00007f4f0ddfe3a0+0x0000000000000020]
J 2921 c2 Test6998541.dobyte()V (32 bytes) @ 0x00007f4f0de00870 [0x00007f4f0de00840+0x0000000000000030]
j  Test6998541.main([Ljava/lang/String;)V+23
v  ~StubRoutines::call_stub
J 1432  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-ea (0 bytes) @ 0x00007f4f0db0c18b [0x00007f4f0db0c0e0+0x00000000000000ab]
J 1430 c2 jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-ea (150 bytes) @ 0x00007f4f0db345c0 [0x00007f4f0db344c0+0x0000000000000100]
J 1429 c2 jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-ea (10 bytes) @ 0x00007f4f0db2f0a8 [0x00007f4f0db2f040+0x0000000000000068]
J 1416 c2 java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-ea (65 bytes) @ 0x00007f4f0db289f0 [0x00007f4f0db28980+0x0000000000000070]
j  com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V+172
J 1386 c2 java.lang.Thread.run()V java.base@17-ea (17 bytes) @ 0x00007f4f0db1b02c [0x00007f4f0db1afc0+0x000000000000006c]
v  ~StubRoutines::call_stub

Looks like we crashed deoptimizing C2 stack frames so I'm
starting this off in hotspot/compiler for initial triage.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284198,,,,,,JDK-8261137,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2sbkj:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-04-08 14:44;kvn;Most likely related to JDK-8261137.;;;","2021-04-08 19:55;whuang;Thank you [~kvn]. I will check this bug. ;;;","2021-04-08 23:54;thartmann;ILW = Guarantee failure during deopt, with single test at tier6, disable scalar replacement = HMM = P2;;;","2021-04-09 00:02;whuang;Hi, [~kvn] and [~thartmann], can you reproduce this bug every time? In my aarch64 machine, I can not reproduce this problem from over 1000 times.
;;;","2021-04-09 01:09;whuang;I have reproduced this bug with option `-Xcomp -XX: -TieredCompilation`.  The main reason is that in this situation the BoxCache is not initialized before `uncommon_trap`. I will fix this bug by initializing the class as early as possible. Thank you all. [~dcubed] [~kvn]  [~thartmann];;;","2021-04-09 02:53;thartmann;The failure reproduces quite frequently in our testing with the following VM args:
-Xcomp -ea -esa -XX:CompileThreshold=100 -XX:-TieredCompilation;;;","2021-04-13 09:42;roboduke;Changeset: c7975113
Author:    Wang Huang <whuang@openjdk.org>
Committer: Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-04-13 16:41:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c7975113
;;;","2021-04-13 12:13;dcubed;This fix is in jdk-17+18-1476.;;;",,,,,,,,,,,,,,,,,,,,
Result of jextract is only working under OSX,JDK-8264931,5045588,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,,webbuggrp,webbuggrp,2021-03-27 06:35,2021-08-17 02:51,2023-10-01 09:57,2021-05-12 14:08,repo-panama,,,,,,,,repo-panama,tools,,0,dcs-nr,dcspn,foreign-jextract,reproducer-other,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
On all system Adoptopenjdk 16 + 36

A DESCRIPTION OF THE PROBLEM :
I have used the jextract tool to create an interface to the native lib libraw (libraw.org). Extraction worked on OSX and the resulting small app is working under OSX. 
On linux the native libs where not found (link error) and on windows I am always getting (Caused by: java.lang.IllegalArgumentException: Carrier size mismatch: long != b32(timestamp)[abi/kind=LONG,layout/name=timestamp]) from the same source.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Checkout the project https://github.com/lanthale/librawfx and specify in the main method the raw file to load. 

- OpenJDKA/Adoptopenjdk 16 or newer
- JavaFX 16
- SET JAVA_HOME variable
- Change inside of TestApp.java the argument to the raw file example to load
- Execute ""mvn clean compile package -f LibRawFX/pom.xml to compile
- To run the example execute ""mvn javafx:run@cli-default"" 

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The code created on OSX should also work on Windows and Linux. Especialy on Linux I would expect that the library lookup is working.
ACTUAL -
On Linux I am getting UnsatisfiedLinkage error which seems that the lib is not found. I am using the standard mechanism which is working on Windows and OSX.

On Windows: The linker is loading the lib but cannot pass any data to the lib because of the carrier mismatch java.lang.IllegalArgumentException: Carrier size mismatch: long != b32(timestamp)[abi/kind=LONG,layout/name=timestamp]

---------- BEGIN SOURCE ----------
https://github.com/lanthale/LibRawFX
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Linux: None
Windows: None

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903315,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2s68z:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-04-09 09:35;jvernee;This is working as expected.

The artifacts that jextract generates are platform specific. This is more or less a forced move since the parse tree that we get from libclang can look/looks different depending on the platform (that's a feature of the native header file format/compiler). e.g consider this example:

#ifdef IS_WINDOWS
    typedef __int64 my_type;
#else
    typedef long my_type;
#endif

There's not much we can do in those cases. It's not typically possible to mechanically figure out that this is a platform-based compiler switch (e.g. such as _WIN64), rather than switching because someone used -DIS_WINDOWS as compiler flag.

As such, a separate jextract artifact should be created for each platform, just like with JNI it is needed to compile the native code for each platform separately (again, this is just how C code works). It should be possible to cross-generate artifacts as well by passing the -target flag to clang (using jextract's -C option). A possibility we could investigate is adding a --platform option directly to jextract.

There's also the question of how to abstract over the bindings for different platforms, or how to minimize the artifacts by sharing some parts that are the same between platforms. Those last two are much more open problems still. It is not clear if it's possible or worth it to try and solve these problems in jextract. It should be possible for users to do that manually today already, for instance by using the right filter options.;;;","2021-04-09 14:00;mcimadamore;As for ""library not found"" on Linux, this can have many reasons, but the common one is that the library that you are trying to load is not in one of the folders that the Java runtime is looking for (e.g. /usr/lib). I'd suggest to specify -Djava.library.path=<path to folder which contains shared lib> to make the launcher more resilient.

Actually, looking more into it, I think this might be a problem with the usage; the jextract artifacts is using a certain LIBRARIES constant to look up symbols:

https://github.com/lanthale/LibRawFX/blob/4ee31bbd2bb8e489ebed5e15346b221c966aa083/LibRawFX/src/main/java/org/libraw/libraw_h_constants_0.java#L12

The code seems to ignore this fact, and proceeds to initialize its own set of native libraries:

https://github.com/lanthale/LibRawFX/blob/127ae60b53a3377a2966e40c068c3213280c69e8/LibRawFX/src/main/java/org/librawfx/LibrawImage.java#L89

(this uses the standard idiom of extracting libraries in temp folders and loading them from there).

So I don't think this can work as expected. When performing function lookups, the jextract artifacts will be looking into the LIBRARIES constant, which will be initialized to LibraryLookup.ofDefault() (and not to the expected set of libraries).

The fact that using ofDefault seems to work on OSX might be down to slightly different semantics of the ""RTLD_DEFAULT"" flag in the two systems. But I think it's fair to say that the bindings are working ""by accident"" on OSX.

To make it more robust, I think the call to loadLib static method should be performed when initializing the LIBRARIES constant, as follows:

static final LibraryLookup[] LIBRARIES;
static {
    LibrawImage.loadLibs();
   LIBRARIES = RuntimeHelper.libraries(LibrawImage.loadLibraryFromJar); 
}

Or something like that. I know that involves tweaking generated code, but the right set of LibraryLookup has to be injected in the right place for the bindings to work.;;;","2021-05-12 14:08;mcimadamore;We have made changes in our library lookup mechanism which should support the idiom used in your codebase - see:

https://mail.openjdk.java.net/pipermail/panama-dev/2021-May/013684.html

I'll close for now - if the issue persists, feel free to reopen.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Update to Xcode 12.4,JDK-8264928,5046438,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-04-08 06:31,2021-05-10 14:46,2023-10-01 09:57,2021-04-12 09:03,jfx17,,,,,,,,jfx17,javafx,,0,noreg-build,sn_90,sn_91,,,,,,,,,,,,,,,,,,,,"We currently use Xcode 11.3.1 to build JavaFX on macOS. We should upgrade to Xcode 12.4 to match JDK 17. See JDK-8264623.

This will require building on macOS 10.15.4 (Catalina) or later. The JavaFX binaries built on 10.15.x will still be able to run on earlier versions (e.g., macOS 10.13 High-Sierra).
",,,,,,,,,,JDK-8266492,JDK-8266853,,,,,,,,,JDK-8264623,,,JDK-8265031,,,,,,,,,,,,,,,,,,,,JDK-8266218,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2sbhf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-04-08 06:37;kcr;Note that this will not bump the minimum macOS version that we target, which remains at 10.10. I can file a separate bug to consider bumping the minimum macOS version that we target.;;;","2021-04-12 09:04;roboduke;Changeset: c8384a1b
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-04-12 16:03:43 +0000
URL:       https://git.openjdk.java.net/jfx/commit/c8384a1b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
PNGImageWriter.write_zTXt throws Exception with a typo,JDK-8264923,5046433,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-04-08 05:53,2021-04-28 04:31,2023-10-01 09:57,2021-04-08 23:25,17,,,,,,,,17,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,,,,"Noticed this when backporting JDK-8242557: there is a trivial copy-paste error in exception message. See:
 https://hg.openjdk.java.net/jdk/jdk/rev/645c71334acd#l1.58",,,,,,,,,,JDK-8264955,JDK-8266209,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8242557,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sbgb:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-04-08 23:25;roboduke;Changeset: 051c117b
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-04-09 06:24:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/051c117b
;;;","2021-04-08 23:28;shade;Fix Request (11u)

Trivial followup for JDK-8242557 backport. Applies cleanly to 11u, passes jdk/javax/imageio/plugins/png tests.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] getVtableIndexForInterfaceMethod doesn't check that type and method are related,JDK-8264918,5046428,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,vlivanov,vlivanov,2021-04-08 05:45,2021-06-03 02:55,2023-10-01 09:57,2021-04-09 03:46,11,16,17,,,,,,17,hotspot,,0,hs-comp-triaged,jdk11u-jvmci-defer,jvmci,oracle-triage-17,,,,,,,,,,,,,,,,,,,getVtableIndexForInterfaceMethod should reject the case when a resolved class doesn't implement the holder interface. ,,,,,,,,,,JDK-8265976,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264732,JDK-8265689,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sbf7:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-09 00:04;thartmann;I'm not sure what the exact implications of this on jvmci compiler code are.

Pre-ILW = HLM = P3;;;","2021-04-09 03:46;roboduke;Changeset: b3782ead
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2021-04-09 10:46:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b3782ead
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[TEST_BUG] Reduce the time ICMColorDataTest runs,JDK-8264901,5046406,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aivanov,aivanov,aivanov,2021-04-08 02:51,2021-04-28 01:36,2023-10-01 09:57,2021-04-21 07:27,8u181,,,,,,,,8u301,client-libs,,0,cssn21_04_01,cssn21_04_02,noreg-self,sustaining,testbug,,,,,,,,,,,,,,,,,,"The test has been problem-listed under JDK-8232634 for 11 and 15.

However, the test is useful for 32 bit Windows system. I propose to problem-list the test for all platforms but 32 bit Windows in Java 8 as well as to modify @requires tag to require 32 bit Windows.

I also suggest applying the initially proposed patch to the test which significantly reduces the time required for the test.

The running time is reduced by decreasing the number of iterations and detecting when image objects are disposed of by the Garbage Collector.",,,,,,,,,,JDK-8265963,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8232634,JDK-8233028,JDK-8201433,,,,,,,,,,,,,,,,,,,,,,,,,,,b05,8u181,,,,,,,,"0|i2sbab:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-04-09 12:56;aivanov;The initial proposal to optimise the test:
http://mail.openjdk.java.net/pipermail/2d-dev/2019-October/010358.html
http://cr.openjdk.java.net/~aivanov/8232634/webrev.00/;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
C1: -XX:AbortVMOnException does not work if all methods in the call stack are compiled with C1 and there are no exception handlers,JDK-8264899,5046403,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfenacci,chagedorn,chagedorn,2021-04-08 01:52,2023-07-12 13:22,2023-10-01 09:57,2023-06-21 05:28,11,12,13,14,15,16,17,8,22,hotspot,,0,c1,hs-comp-triaged,oracle-triage-17,,,,,,,,,,,,,,,,,,,,"The method foo() in the attached Test.java throws MyException. 

$ java -XX:AbortVMOnException=MyException Test.java
$ java -XX:AbortVMOnException=MyException -XX:-TieredCompilation Test.java

successfully results in the expected VM assertion failure:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/christian/jdk/open/src/hotspot/share/utilities/exceptions.cpp:544), pid=116514, tid=116515
#  fatal error: Saw MyException, aborting
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (slowdebug build 17-internal+0-LTS-2021-03-25-1609321.christian...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 17-internal+0-LTS-2021-03-25-1609321.christian..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x8f6906]  Exceptions::debug_check_abort(char const*, char const*)+0x8a

However, running it with -Xcomp and C1 only (TieredStopAtLevel) will not abort the VM:

$ java -XX:AbortVMOnException=MyException -Xcomp Test.java
$ java -XX:AbortVMOnException=MyException -Xcomp -XX:TieredStopAtLevel=1,2,3 Test.java

Exception in thread ""main"" MyException
	at Test.foo(Test.java:7)
	at Test.main(Test.java:3)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310919,,,,,,"2021-04-08 01:53;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/94011/Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sb9n:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-08 04:51;thartmann;ILW = Diagnostic flag does not work, with -Xcomp and C1, no workaround (but use C2) = MLM = P4;;;","2021-04-08 22:38;dholmes;It appears exception logging also does not work - not surprising as the code is co-located with the abort-check.;;;","2023-05-11 07:59;dfenacci;There seem to be a specific case, in which ""AbortVMOnException"" is not taken into account, i.e. when an exception is thrown from C1 compiled code, the whole call stack is also C1 compiled and there isn't any handler for the exception thrown.
In this case there is no call to ""Exceptions::debug_check_abort"" (which checks for a match between AbortVMOnException and the exception being thrown) anywhere while handling the exception.

In other cases the ""Exceptions::debug_check_abort"" method is called: in C1's ""exception_handler_for_pc_helper"" if a handler is present and from ""InterpreterRuntime::exception_handler_for_exception"" with the interpreter and C2 (which should deoptimise and run the interpreter code if an exception is thrown).

We could possibly check for AbortVMOnException earlier on e.g. when the exception is being thrown (for all cases?).;;;","2023-06-14 01:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14240
Date: 2023-05-31 07:06:27 +0000;;;","2023-06-21 05:28;dukebot;Changeset: 826dcb54
Author:    Damon Fenacci <dfenacci@openjdk.org>
Date:      2023-06-21 12:27:02 +0000
URL:       https://git.openjdk.org/jdk/commit/826dcb5424a931953ac1964e7893aec7ec839862
;;;",,,,,,,,,,,,,,,,,,,,,,,
[lworld] assert(!InstanceKlass::cast(receiver_klass)->is_not_initialized()) failed: receiver_klass must be initialized,JDK-8264895,5046398,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,chagedorn,chagedorn,2021-04-08 01:30,2021-04-12 06:09,2023-10-01 09:57,2021-04-12 06:09,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c1,lw3,lworld,,,,,,,,,,,,,,,,,,,,"The converted TestLWorld.java test fails with the new IR framework with the assertion below.

To reproduce:
- Checkout the latest state of the IR Framework: https://github.com/chhagedorn/valhalla/tree/TestingFramework, (current latest commit hash: 3def454dca0e8606a3a233dab4b9a55bd377acbd)
- Run: JTreg test compiler/valhalla/inlinetypes/TestLWorld.java with --javaoptions:""-DScenarios=0 -DFlipC1C2=true""

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/sharedRuntime.cpp:1230
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/28992c6d-c35d-42fa-8099-898223bf183b-S1635/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/311aa10e-9e8e-4203-8b08-898b01d85a36/runs/543bd0b9-4df0-43ed-bd21-f4ecfa089ad0/workspace/open/src/hotspot/share/runtime/sharedRuntime.cpp:1230), pid=111657, tid=111660
#  assert(!InstanceKlass::cast(receiver_klass)->is_not_initialized()) failed: receiver_klass must be initialized
#
# JRE version: Java(TM) SE Runtime Environment (17.0+1) (fastdebug build 17-valhalla+1-43)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-valhalla+1-43, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1784e0d]  SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&, Bytecodes::Code&, CallInfo&, Thread*)+0x4cd
............
Command Line: -Djava.library.path=. -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -DScenarios=0 -DFlipC1C2=true -XX:-UseACmpProfile -XX:+AlwaysIncrementalInline -XX:FlatArrayElementMaxOops=5 -XX:FlatArrayElementMaxSize=-1 -XX:-UseArrayLoadStoreProfile -XX:InlineFieldMaxFlatSize=-1 -XX:+InlineTypePassFieldsAsArgs -XX:+InlineTypeReturnedAsFields -XX:-BackgroundCompilation -XX:CompileCommand=quiet -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompileCommand=log,compiler.valhalla.inlinetypes.TestLWorld::* -XX:CompileCommand=option,compiler.valhalla.inlinetypes.TestLWorld::*,bool,PrintIdeal,true -XX:CompileCommand=option,compiler.valhalla.inlinetypes.TestLWorld::*,bool,PrintOptoAssembly,true -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -DWarmup=251 -Dir.framework.server.port=37737 jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution compiler.valhalla.inlinetypes.TestLWorld compiler.valhalla.inlinetypes.MyValue1 compiler.valhalla.inlinetypes.MyValue2 compiler.valhalla.inlinetypes.MyValue2Inline compiler.valhalla.inlinetypes.MyValue3 compiler.valhalla.inlinetypes.MyValue3Inline
.............
Stack: [0x00007fb48f4e9000,0x00007fb48f5ea000],  sp=0x00007fb48f5e3790,  free space=1001k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1784e0d]  SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&, Bytecodes::Code&, CallInfo&, Thread*)+0x4cd
V  [libjvm.so+0x17860eb]  SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, bool*, Thread*)+0x1ab
V  [libjvm.so+0x1786713]  SharedRuntime::resolve_helper(JavaThread*, bool, bool, bool*, Thread*)+0x53
V  [libjvm.so+0x178712e]  SharedRuntime::resolve_opt_virtual_call_C(JavaThread*)+0x12e
v  ~RuntimeStub::resolve_opt_virtual_call
J 1461 c1 compiler.valhalla.inlinetypes.TestLWorld.test72()I (9 bytes) @ 0x00007fb4793f729c [0x00007fb4793f7260+0x000000000000003c]
j  compiler.valhalla.inlinetypes.TestLWorld.test72_verifier()V+1
v  ~StubRoutines::call_stub
V  [libjvm.so+0xed2c09]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x4e9
V  [libjvm.so+0x17060e5]  invoke(InstanceKlass*, methodHandle const&, Handle, bool, objArrayHandle, BasicType, objArrayHandle, bool, Thread*) [clone .constprop.0]+0xf35
V  [libjvm.so+0x1707357]  Reflection::invoke_method(oop, Handle, objArrayHandle, Thread*)+0x237
V  [libjvm.so+0x1067ebc]  JVM_InvokeMethod+0x24c
J 1248  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-valhalla (0 bytes) @ 0x00007fb47935fa04 [0x00007fb47935f8e0+0x0000000000000124]
J 1247 c1 jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-valhalla (150 bytes) @ 0x00007fb472035ccc [0x00007fb472034e00+0x0000000000000ecc]
J 1191 c2 jdk.test.lib.hotspot.ir_framework.CustomRunTest.invokeTest()V (76 bytes) @ 0x00007fb47934a330 [0x00007fb47934a1c0+0x0000000000000170]
J 1402 c2 jdk.test.lib.hotspot.ir_framework.AbstractTest.run()V (45 bytes) @ 0x00007fb4793e25d4 [0x00007fb4793e2280+0x0000000000000354]
j  jdk.test.lib.hotspot.ir_framework.CustomRunTest.run()V+59
j  jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution.runTests()V+135
j  jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution.start()V+9
j  jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution.main([Ljava/lang/String;)V+38
v  ~StubRoutines::call_stub
V  [libjvm.so+0xed2c09]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x4e9
V  [libjvm.so+0x1010de9]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.1]+0x369
V  [libjvm.so+0x10153a5]  jni_CallStaticVoidMethod+0x1c5
C  [libjli.so+0x47d4]  JavaMain+0xd34
C  [libjli.so+0x7db9]  ThreadJavaMain+0x9

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~RuntimeStub::resolve_opt_virtual_call
J 1461 c1 compiler.valhalla.inlinetypes.TestLWorld.test72()I (9 bytes) @ 0x00007fb4793f729c [0x00007fb4793f7260+0x000000000000003c]
j  compiler.valhalla.inlinetypes.TestLWorld.test72_verifier()V+1
v  ~StubRoutines::call_stub
J 1248  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-valhalla (0 bytes) @ 0x00007fb47935f98b [0x00007fb47935f8e0+0x00000000000000ab]
J 1247 c1 jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-valhalla (150 bytes) @ 0x00007fb472035ccc [0x00007fb472034e00+0x0000000000000ecc]
J 1191 c2 jdk.test.lib.hotspot.ir_framework.CustomRunTest.invokeTest()V (76 bytes) @ 0x00007fb47934a330 [0x00007fb47934a1c0+0x0000000000000170]
J 1402 c2 jdk.test.lib.hotspot.ir_framework.AbstractTest.run()V (45 bytes) @ 0x00007fb4793e25d4 [0x00007fb4793e2280+0x0000000000000354]
j  jdk.test.lib.hotspot.ir_framework.CustomRunTest.run()V+59
j  jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution.runTests()V+135
j  jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution.start()V+9
j  jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution.main([Ljava/lang/String;)V+38
v  ~StubRoutines::call_stub",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265067,,,,,,"2021-04-08 01:32;chagedorn;hs_err_pid111657.log;https://bugs.openjdk.org/secure/attachment/94009/hs_err_pid111657.log",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sb8j:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-12 04:59;thartmann;There is also this slightly different failure mode with the same root cause:

#  Internal Error (/oracle/valhalla/open/src/hotspot/share/interpreter/linkResolver.cpp:1407), pid=376211, tid=376212
#  assert(resolved_method->method_holder()->is_linked()) failed: must be linked;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Implicit scope objects are used with resource try,JDK-8264887,5046390,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-04-08 00:57,2021-04-08 05:13,2023-10-01 09:57,2021-04-08 05:13,repo-panama,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"In two places, jextract code uses implicit scope objects with resource try",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2sb6r:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure without C2 on x86_32/aarch64/ppc/s390/arm,JDK-8264882,5046382,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,jiefu,jiefu,jiefu,2021-04-07 21:11,2021-04-12 17:08,2023-10-01 09:57,2021-04-12 17:08,repo-panama,,,,,,,,repo-panama,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,,"For example, on x86_32: configure --with-jvm-features=-compiler2 
```
* For target hotspot_variant-server_libjvm_objs_sharedRuntime_x86_32.o:
In file included from /home/panama/src/hotspot/share/utilities/globalDefinitions.hpp:29:0,
                 from /home/panama/src/hotspot/share/memory/allocation.hpp:29,
                 from /home/panama/src/hotspot/share/memory/arena.hpp:28,
                 from /home/panama/src/hotspot/share/runtime/handles.hpp:28,
                 from /home/panama/src/hotspot/share/code/oopRecorder.hpp:28,
                 from /home/panama/src/hotspot/share/asm/codeBuffer.hpp:28,
                 from /home/panama/src/hotspot/share/asm/assembler.hpp:28,
                 from /home/panama/src/hotspot/share/asm/macroAssembler.hpp:28,
                 from /home/panama/src/hotspot/cpu/x86/sharedRuntime_x86_32.cpp:26:
/home/panama/src/hotspot/cpu/x86/sharedRuntime_x86_32.cpp: In static member function 'static int SharedRuntime::vector_calling_convention(VMRegPair*, uint, uint)':
/home/panama/src/hotspot/cpu/x86/sharedRuntime_x86_32.cpp:1049:11: error: 'Matcher' has not been declared
   assert(!Matcher::supports_vector_calling_convention(), ""not implemented"");
           ^
/home/panama/src/hotspot/share/utilities/debug.hpp:56:9: note: in definition of macro 'vmassert'
   if (!(p)) {                                                                  \
   ... (rest of output omitted)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sb57:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multiple byte tag not supported by ASN.1 encoding,JDK-8264864,5046353,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2021-04-07 11:12,2021-04-14 17:26,2023-10-01 09:57,2021-04-08 14:26,,,,,,,,,17,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"When the tag number (without class or P/C flags) is bigger than 30, it cannot be encoded into a single byte. Java is not aware of multiple byte tags and treats it as a single byte encoding, and thus interprets the whole BER/DER encoding wrongly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sayr:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-04-08 14:26;roboduke;Changeset: 3d2b4cc5
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-04-08 21:26:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3d2b4cc5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] libjvm.dylib linker warning due to macOS version mismatch,JDK-8264848,5046329,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lucy,lucy,lucy,2021-04-07 08:43,2021-09-13 08:29,2023-10-01 09:57,2021-04-08 06:37,11,13,15,16,17,8,,,17,infrastructure,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,sap-interest,,,,,,,,,,,,,,,,,"Object files which flow into libjvm.dylib are created with -mmacosx-version-min=10.12.0. The same option is passed to the linker. Unfortunately, there is one assembler file (bsd_x86_64.s) which does not receive the option at assembly time. That leads to the linker warning 

ld: warning: object file (<buildRoot>/hotspot/variant-server/libjvm/objs/bsd_x86_64.o) was built for newer macOS version (10.15) than being linked (10.12)

when linking on a system with a MacOS version different from 10.12. n",,,,,,,,,,JDK-8265205,JDK-8273676,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272700,,,,,,,,,,,,,,,,,x86,,,,,,,,,os_x,,,,,,"0|i2satf:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-04-07 11:59;dcubed;Moving from hotspot/<no-subcat> to ""infrastructure/build"".;;;","2021-04-08 06:37;roboduke;Changeset: 04fa1ed4
Author:    Lutz Schmidt <lucy@openjdk.org>
Date:      2021-04-08 13:37:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/04fa1ed4
;;;","2021-04-13 13:00;lucy;Fix request (11u): 

This backport removes a linker warning which is also present in OpenJDK 11. The patch applied cleanly except for a copyright year mismatch. 

Test:
Local build as well as SAP's build and test farm. The warning is gone, no side effects observed. ;;;","2021-08-19 00:18;dholmes;This fix appears broken - see JDK-8272700;;;","2021-09-13 07:35;vkempik;Fix request ( 15u): same motivation as for 11u. Applies cleanly;;;",,,,,,,,,,,,,,,,,,,,,,,
Regression ~5% in J2dBench.bimg_misc  on Linux after JDK-8263142,JDK-8264846,5046323,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,ecaspole,ecaspole,2021-04-07 07:02,2021-06-01 06:27,2023-10-01 09:57,2021-05-13 16:42,17,,,,,,,,17,client-libs,,0,perf-regression,regression,regression_8263142,sn_92,sn_93,,,,,,,,,,,,,,,,,,JDK-8263142 appears to be just code deletion but somehow has caused this regression which has remained since b13. There was no such effect on Windows and was about 1% regression on aarch64.,,,,,,,,,,JDK-8266555,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263142,,,,,,,,,,,,"2021-05-04 14:27;serb;bimg_misc.opt;https://bugs.openjdk.org/secure/attachment/94508/bimg_misc.opt",,,,,,,,,,,,,,,,,b13,17,,linux,,,,,,"0|i2sas3:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-05-06 20:57;serb;The actual performance drop is occurred in b13 in this benchmark:

graphics.render.tests.fillOval:
b12: 1232524.41627 (var=1.27%) (100.0%)
************************************************************|
************************************************************|
************************************************************|
b13: 996718.38459 (var=1.61%) (80.87%)
*************************************************           |
************************************************            |
************************************************            |

Results are stable.;;;","2021-05-06 20:58;serb;To solve the problem it is enough to add this one line to the end of the ./src/java.desktop/unix/native/libawt/awt/awt_LoadLibrary.c
    void SomethingStrange(){}

Looks like some compiler optimizations glitch.;;;","2021-05-06 21:25;serb;-O3 optimisation level solve the problem, need to check what exact optimisation triggered the fix.;;;","2021-05-06 23:48;serb;Suggested fix:
--- a/make/modules/java.desktop/lib/Awt2dLibraries.gmk
+++ b/make/modules/java.desktop/lib/Awt2dLibraries.gmk
@@ -131,7 +131,9 @@ endif
 ifeq ($(TOOLCHAIN_TYPE), gcc)
   BUILD_LIBAWT_debug_mem.c_CFLAGS := -w
   # This option improves performance of MaskFill in Java2D by 20% for some gcc
   LIBAWT_CFLAGS += -fgcse-after-reload
+  # This option improves performance of fillOval in Java2D by 20% for some gcc
+  LIBAWT_CFLAGS += -ftree-loop-vectorize -fversion-loops-for-strides
 endif
;;;","2021-05-07 00:04;serb;Fix above vs -O3:
Summary:
  b12: 
    Number of tests:  1
    Overall average:  1239223.8084670957
    Best spread:      3.69% variance
    Worst spread:     3.69% variance
    (Basis for results comparison)

  fix: 
    Number of tests:  1
    Overall average:  1267411.4235279283
    Best spread:      1.87% variance
    Worst spread:     1.87% variance
    Comparison to basis:
      Best result:      102.27% of basis
      Worst result:     102.27% of basis
      Number of wins:   0
      Number of ties:   1
      Number of losses: 0

  o3: 
    Number of tests:  1
    Overall average:  1249482.8957836118
    Best spread:      3.14% variance
    Worst spread:     3.14% variance
    Comparison to basis:
      Best result:      100.83% of basis
      Worst result:     100.83% of basis
      Number of wins:   0
      Number of ties:   1
      Number of losses: 0
;;;","2021-05-12 15:06;serb;All tests from the bimg_misc block.

java -jar J2DBench/dist/J2DAnalyzer.jar -Graph -MidAvg 12.txt o3.txt fix.txt

Options common across all tests:
  text.opts.advopts.gvstyle=0
  text.opts.font.fname=Default
  text.opts.graphics.textaa=On
  global.dest=BufImg(IntXrgb)
  text.opts.graphics.tfm=false
  text.opts.data.tlength=32
  graphics.render.opts.paint=random
  graphics.opts.anim=2
  graphics.opts.renderhint=Default
  graphics.opts.sizes=100
  graphics.imaging.src.options.touchsrc=false
  graphics.opts.transform=ident
  graphics.render.opts.stroke=width1
  graphics.opts.clip=false
  text.opts.font.ftx=Identity
  text.opts.graphics.gtx=Identity
  text.opts.advopts.maptype=FONT
  text.opts.graphics.gaa=false
  graphics.opts.extraalpha=false
  text.opts.advopts.tlruns=1
  graphics.render.opts.alphacolor=false
  graphics.opts.alpharule=SrcOver
  text.opts.font.fsize=13.0
  text.opts.font.fstyle=0
  graphics.opts.xormode=false
  text.opts.data.tscript=english

graphics.imaging.tests.drawimage,graphics.imaging.src=IntArgb translucent:
b12: 364605.08701 (var=0.07%) (100.0%)
************************************************************|
o3: 361725.75250 (var=0.13%) (99.21%)
************************************************************|
fix: 354896.18218 (var=1.97%) (97.34%)
**********************************************************  |
graphics.imaging.tests.drawimage,graphics.imaging.src=IntXrgb opaque:
b12: 7798355.79514 (var=0.34%) (100.0%)
************************************************************|
o3: 7582319.72789 (var=0.88%) (97.23%)
**********************************************************  |
fix: 7412391.30434 (var=1.88%) (95.05%)
*********************************************************   |
graphics.imaging.tests.drawimagetxform,graphics.imaging.src=IntArgb translucent:
b12: 247866.62841 (var=3.22%) (100.0%)
************************************************************|
o3: 241868.02893 (var=0.0%) (97.58%)
**********************************************************  |
fix: 240504.59069 (var=0.07%) (97.03%)
**********************************************************  |
graphics.imaging.tests.drawimagetxform,graphics.imaging.src=IntXrgb opaque:
b12: 466315.16621 (var=0.27%) (100.0%)
**********************************************************|
o3: 481024.43443 (var=0.27%) (103.15%)
**********************************************************|*
fix: 452896.77137 (var=1.89%) (97.12%)
********************************************************  |
graphics.render.tests.drawLine,graphics.render.opts.antialias=false:
b12: 484968.01705 (var=0.64%) (100.0%)
*******************************************************|
o3: 529662.04819 (var=0.27%) (109.22%)
*******************************************************|****
fix: 506676.07526 (var=2.62%) (104.48%)
*******************************************************|*
graphics.render.tests.drawLine,graphics.render.opts.antialias=true:
b12: 18948.22266 (var=0.67%) (100.0%)
**********************************************************|
o3: 19460.25554 (var=0.27%) (102.7%)
**********************************************************|*
fix: 14641.14173 (var=7.08%) (77.27%)
*********************************************             |
graphics.render.tests.drawOval,graphics.render.opts.antialias=false:
b12: 136435.52147 (var=0.41%) (100.0%)
*******************************************************|
o3: 137060.79457 (var=0.41%) (100.46%)
*******************************************************|
fix: 145719.59919 (var=2.19%) (106.8%)
*******************************************************|***
graphics.render.tests.drawOval,graphics.render.opts.antialias=true:
b12: 5833.472365 (var=2.22%) (100.0%)
************************************************************|
o3: 5825.995735 (var=0.57%) (99.87%)
************************************************************|
fix: 5502.572280 (var=0.52%) (94.33%)
********************************************************    |
graphics.render.tests.fillOval,graphics.render.opts.antialias=false:
b12: 1237435.80949 (var=1.72%) (100.0%)
*********************************************************|
o3: 1279922.89381 (var=2.22%) (103.43%)
*********************************************************|*
fix: 1278050.76557 (var=1.63%) (103.28%)
*********************************************************|*
graphics.render.tests.fillOval,graphics.render.opts.antialias=true:
b12: 197069.41802 (var=0.31%) (100.0%)
*********************************************************|
o3: 209103.26803 (var=0.08%) (106.11%)
*********************************************************|**
fix: 205003.69364 (var=0.38%) (104.03%)
*********************************************************|*
graphics.render.tests.fillRect,graphics.render.opts.antialias=false:
b12: 2456842.46112 (var=2.26%) (100.0%)
*******************|
o3: 7718223.41857 (var=0.34%) (314.15%)
*******************|****************************************
fix: 7666635.45150 (var=0.54%) (312.05%)
*******************|****************************************
graphics.render.tests.fillRect,graphics.render.opts.antialias=true:
b12: 2460503.69375 (var=0.07%) (100.0%)
********************|
o3: 7313406.08465 (var=1.13%) (297.23%)
********************|***************************************
fix: 7335003.33555 (var=0.0%) (298.11%)
********************|***************************************
text.Rendering.tests.drawString:
b12: 11693.84719 (var=0.27%) (100.0%)
*******************************************************|
o3: 12712.32906 (var=0.41%) (108.71%)
*******************************************************|****
fix: 11951.02216 (var=0.61%) (102.2%)
*******************************************************|

Summary:
  b12: 
    Number of tests:  13
    Overall average:  1222067.1646119351
    Best spread:      0.07% variance
    Worst spread:     3.22% variance
    (Basis for results comparison)

  o3: 
    Number of tests:  13
    Overall average:  1991716.540920269
    Best spread:      0.0% variance
    Worst spread:     2.22% variance
    Comparison to basis:
      Best result:      314.15% of basis
      Worst result:     97.23% of basis
      Number of wins:   8
      Number of ties:   4
      Number of losses: 1

  fix: 
    Number of tests:  13
    Overall average:  1971528.6542701898
    Best spread:      0.0% variance
    Worst spread:     7.08% variance
    Comparison to basis:
      Best result:      312.05% of basis
      Worst result:     77.27% of basis
      Number of wins:   6
      Number of ties:   1
      Number of losses: 6


I think switch to the O3 is the right thing to do.;;;","2021-05-13 16:42;roboduke;Changeset: 40860813
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-05-13 23:41:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/408608130621b340151276dceeaf52cf6d037d53
;;;","2021-05-13 20:33;serb;[~ecaspole] please add a link to the perf data for the next jdk17 build to view the effect of this change.;;;","2021-05-14 06:51;ecaspole;Sure, J2DBench is part of the regular promo testing. AFAICT your fix will be in b23.;;;",,,,,,,,,,,,,,,,,,,
Javac crashes with NullPointerException when finding unencoded XML in <pre> tag,JDK-8264843,5046319,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,uschindler,uschindler,2021-04-07 06:22,2021-07-15 10:05,2023-10-01 09:57,2021-06-17 09:38,17,,,,,,,,17,tools,,0,17ea,apache-lucene,apache-lucene-found,regression,,,,,,,,,,,,,,,,,,,"When testing the Lucene/Solr builds with JDK 17 EA we figured out that javac fails when doclint is enabled. It produces the following error:

common.compile-test:
    [mkdir] Created dir: C:\Users\Uwe Schindler\Projects\lucene\lusolr\solr\build\contrib\solr-dataimporthandler\classes\test
    [javac] Compiling 48 source files to C:\Users\Uwe Schindler\Projects\lucene\lusolr\solr\build\contrib\solr-dataimporthandler\classes\test
    [javac] Note: Some input files use or override a deprecated API.
    [javac] Note: Recompile with -Xlint:deprecation for details.
    [javac] An exception has occurred in the compiler (17-ea). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
    [javac] com.sun.tools.javac.util.ClientCodeException: java.lang.NullPointerException: Cannot read field ""endKind"" because ""tag"" is null
    [javac]     at jdk.compiler/com.sun.tools.javac.api.ClientCodeWrapper$WrappedTaskListener.started(ClientCodeWrapper.java:857)
    [javac]     at jdk.compiler/com.sun.tools.javac.api.MultiTaskListener.started(MultiTaskListener.java:119)
    [javac]     at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1336)
    [javac]     at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:973)
    [javac]     at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
    [javac]     at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
    [javac]     at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
    [javac]     at jdk.internal.reflect.GeneratedMethodAccessor217.invoke(Unknown Source)
    [javac]     at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    [javac]     at java.base/java.lang.reflect.Method.invoke(Method.java:568)
    [javac]     at org.apache.tools.ant.taskdefs.compilers.Javac13.execute(Javac13.java:56)
    [javac]     at org.apache.tools.ant.taskdefs.Javac.compile(Javac.java:1153)
    [javac]     at org.apache.tools.ant.taskdefs.Javac.execute(Javac.java:930)
    [javac]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
    [javac]     at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
    [javac]     at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    [javac]     at java.base/java.lang.reflect.Method.invoke(Method.java:568)
    [javac]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
    [javac]     at org.apache.tools.ant.Task.perform(Task.java:348)
    [javac]     at org.apache.tools.ant.taskdefs.Sequential.execute(Sequential.java:68)
    [javac]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
    [javac]     at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
    [javac]     at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    [javac]     at java.base/java.lang.reflect.Method.invoke(Method.java:568)
    [javac]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
    [javac]     at org.apache.tools.ant.Task.perform(Task.java:348)
    [javac]     at org.apache.tools.ant.taskdefs.MacroInstance.execute(MacroInstance.java:398)
    [javac]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
    [javac]     at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
    [javac]     at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    [javac]     at java.base/java.lang.reflect.Method.invoke(Method.java:568)
    [javac]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
    [javac]     at org.apache.tools.ant.Task.perform(Task.java:348)
    [javac]     at org.apache.tools.ant.taskdefs.Sequential.execute(Sequential.java:68)
    [javac]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
    [javac]     at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
    [javac]     at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    [javac]     at java.base/java.lang.reflect.Method.invoke(Method.java:568)
    [javac]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
    [javac]     at org.apache.tools.ant.Task.perform(Task.java:348)
    [javac]     at org.apache.tools.ant.taskdefs.MacroInstance.execute(MacroInstance.java:398)
    [javac]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
    [javac]     at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
    [javac]     at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    [javac]     at java.base/java.lang.reflect.Method.invoke(Method.java:568)
    [javac]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
    [javac]     at org.apache.tools.ant.Task.perform(Task.java:348)
    [javac]     at org.apache.tools.ant.Target.execute(Target.java:392)
    [javac]     at org.apache.tools.ant.Target.performTasks(Target.java:413)
    [javac]     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
    [javac]     at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)
    [javac]     at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
    [javac]     at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:442)
    [javac]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
    [javac]     at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
    [javac]     at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    [javac]     at java.base/java.lang.reflect.Method.invoke(Method.java:568)
    [javac]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
    [javac]     at org.apache.tools.ant.Task.perform(Task.java:348)
    [javac]     at org.apache.tools.ant.Target.execute(Target.java:392)
    [javac]     at org.apache.tools.ant.Target.performTasks(Target.java:413)
    [javac]     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
    [javac]     at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)
    [javac]     at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
    [javac]     at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:442)
    [javac]     at org.apache.tools.ant.taskdefs.SubAnt.execute(SubAnt.java:303)
    [javac]     at org.apache.tools.ant.taskdefs.SubAnt.execute(SubAnt.java:221)
    [javac]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
    [javac]     at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
    [javac]     at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    [javac]     at java.base/java.lang.reflect.Method.invoke(Method.java:568)
    [javac]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
    [javac]     at org.apache.tools.ant.Task.perform(Task.java:348)
    [javac]     at org.apache.tools.ant.taskdefs.Sequential.execute(Sequential.java:68)
    [javac]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
    [javac]     at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
    [javac]     at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    [javac]     at java.base/java.lang.reflect.Method.invoke(Method.java:568)
    [javac]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
    [javac]     at org.apache.tools.ant.Task.perform(Task.java:348)
    [javac]     at org.apache.tools.ant.taskdefs.MacroInstance.execute(MacroInstance.java:398)
    [javac]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
    [javac]     at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
    [javac]     at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    [javac]     at java.base/java.lang.reflect.Method.invoke(Method.java:568)
    [javac]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
    [javac]     at org.apache.tools.ant.Task.perform(Task.java:348)
    [javac]     at org.apache.tools.ant.Target.execute(Target.java:392)
    [javac]     at org.apache.tools.ant.Target.performTasks(Target.java:413)
    [javac]     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
    [javac]     at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)
    [javac]     at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
    [javac]     at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:442)
    [javac]     at org.apache.tools.ant.taskdefs.SubAnt.execute(SubAnt.java:303)
    [javac]     at org.apache.tools.ant.taskdefs.SubAnt.execute(SubAnt.java:221)
    [javac]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
    [javac]     at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
    [javac]     at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    [javac]     at java.base/java.lang.reflect.Method.invoke(Method.java:568)
    [javac]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
    [javac]     at org.apache.tools.ant.Task.perform(Task.java:348)
    [javac]     at org.apache.tools.ant.Target.execute(Target.java:392)
    [javac]     at org.apache.tools.ant.Target.performTasks(Target.java:413)
    [javac]     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
    [javac]     at org.apache.tools.ant.Project.executeTarget(Project.java:1368)
    [javac]     at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
    [javac]     at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
    [javac]     at org.apache.tools.ant.Main.runBuild(Main.java:811)
    [javac]     at org.apache.tools.ant.Main.startAnt(Main.java:217)
    [javac]     at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
    [javac]     at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)
    [javac] Caused by: java.lang.NullPointerException: Cannot read field ""endKind"" because ""tag"" is null
    [javac]     at jdk.javadoc/jdk.javadoc.internal.doclint.Checker.isSelfClosingAllowed(Checker.java:432)
    [javac]     at jdk.javadoc/jdk.javadoc.internal.doclint.Checker.visitStartElement(Checker.java:389)
    [javac]     at jdk.javadoc/jdk.javadoc.internal.doclint.Checker.visitStartElement(Checker.java:106)
    [javac]     at jdk.compiler/com.sun.tools.javac.tree.DCTree$DCStartElement.accept(DCTree.java:862)
    [javac]     at jdk.compiler/com.sun.source.util.DocTreePathScanner.scan(DocTreePathScanner.java:76)
    [javac]     at jdk.compiler/com.sun.source.util.DocTreeScanner.scanAndReduce(DocTreeScanner.java:87)
    [javac]     at jdk.compiler/com.sun.source.util.DocTreeScanner.scan(DocTreeScanner.java:102)
    [javac]     at jdk.javadoc/jdk.javadoc.internal.doclint.Checker.visitDocComment(Checker.java:273)
    [javac]     at jdk.javadoc/jdk.javadoc.internal.doclint.Checker.visitDocComment(Checker.java:106)
    [javac]     at jdk.compiler/com.sun.tools.javac.tree.DCTree$DCDocComment.accept(DCTree.java:138)
    [javac]     at jdk.compiler/com.sun.source.util.DocTreePathScanner.scan(DocTreePathScanner.java:55)
    [javac]     at jdk.javadoc/jdk.javadoc.internal.doclint.Checker.scan(Checker.java:234)
    [javac]     at jdk.javadoc/jdk.javadoc.internal.doclint.DocLint$2.visitDecl(DocLint.java:291)
    [javac]     at jdk.javadoc/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitMethod(DocLint.java:405)
    [javac]     at jdk.javadoc/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitMethod(DocLint.java:382)
    [javac]     at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:933)
    [javac]     at jdk.compiler/com.sun.source.util.TreePathScanner.scan(TreePathScanner.java:86)
    [javac]     at jdk.compiler/com.sun.source.util.TreeScanner.scanAndReduce(TreeScanner.java:94)
    [javac]     at jdk.compiler/com.sun.source.util.TreeScanner.scan(TreeScanner.java:109)
    [javac]     at jdk.compiler/com.sun.source.util.TreeScanner.scanAndReduce(TreeScanner.java:117)
    [javac]     at jdk.compiler/com.sun.source.util.TreeScanner.visitClass(TreeScanner.java:194)
    [javac]     at jdk.javadoc/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitClass(DocLint.java:400)
    [javac]     at jdk.javadoc/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitClass(DocLint.java:382)
    [javac]     at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:840)
    [javac]     at jdk.compiler/com.sun.source.util.TreePathScanner.scan(TreePathScanner.java:86)
    [javac]     at jdk.compiler/com.sun.source.util.TreeScanner.scan(TreeScanner.java:109)
    [javac]     at jdk.compiler/com.sun.source.util.TreeScanner.scanAndReduce(TreeScanner.java:117)
    [javac]     at jdk.compiler/com.sun.source.util.TreeScanner.visitCompilationUnit(TreeScanner.java:148)
    [javac]     at jdk.javadoc/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitCompilationUnit(DocLint.java:426)
    [javac]     at jdk.javadoc/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitCompilationUnit(DocLint.java:382)
    [javac]     at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCCompilationUnit.accept(JCTree.java:611)
    [javac]     at jdk.compiler/com.sun.source.util.TreePathScanner.scan(TreePathScanner.java:86)
    [javac]     at jdk.javadoc/jdk.javadoc.internal.doclint.DocLint$3.started(DocLint.java:302)
    [javac]     at jdk.compiler/com.sun.tools.javac.api.ClientCodeWrapper$WrappedTaskListener.started(ClientCodeWrapper.java:853)
    [javac]     ... 110 more
    [javac] printing javac parameters to: C:\Users\Uwe Schindler\Projects\lucene\lusolr\javac.20210407_134918.args

The relevant command line args are:
-Xdoclint:all -Xdoclint:-missing -Xdoclint:-accessibility -Xdoclint:-html

It happens with the following (invalid) Javadoc comment:

  /**
   * Creates randomized configuration of a specified depth. Simple configuration example:
   * 
   * <pre>
   * 
   * &lt;dataConfig>
   *   <dataSource type=""MockDataSource"" />
   *   &lt;document>
   *     &lt;entity name=""parent"" query=""SELECT * FROM parent"">
   *       &lt;field column=""id"" />
   *       &lt;field column=""desc"" />
   *       &lt;field column=""type_s"" />
   *       &lt;entity child=""true"" name=""parentChild0"" query=""select * from parentChild0 where parentChild0_parent_id='${parent.id}'"">
   *         &lt;field column=""id"" />
   *         &lt;field column=""desc"" />
   *         &lt;field column=""type_s"" />
   *         &lt;entity child=""true"" name=""parentChild0Child0"" query=""select * from parentChild0Child0 where parentChild0Child0_parent_id='${parentChild0.id}'"">
   *           &lt;field column=""id"" />
   *           &lt;field column=""desc"" />
   *           &lt;field column=""type_s"" />
   *         &lt;/entity>
   *         &lt;entity child=""true"" name=""parentChild0Child1"" query=""select * from parentChild0Child1 where parentChild0Child1_parent_id='${parentChild0.id}'"">
   *           &lt;field column=""id"" />
   *           &lt;field column=""desc"" />
   *           &lt;field column=""type_s"" />
   *         &lt;/entity>
   *       &lt;/entity>
   *       &lt;entity child=""true"" name=""parentChild1"" query=""select * from parentChild1 where parentChild1_parent_id='${parent.id}'"">
   *         &lt;field column=""id"" />
   *         &lt;field column=""desc"" />
   *         &lt;field column=""type_s"" />
   *         &lt;entity child=""true"" name=""parentChild1Child0"" query=""select * from parentChild1Child0 where parentChild1Child0_parent_id='${parentChild1.id}'"">
   *           &lt;field column=""id"" />
   *           &lt;field column=""desc"" />
   *           &lt;field column=""type_s"" />
   *         &lt;/entity>
   *         &lt;entity child=""true"" name=""parentChild1Child1"" query=""select * from parentChild1Child1 where parentChild1Child1_parent_id='${parentChild1.id}'"">
   *           &lt;field column=""id"" />
   *           &lt;field column=""desc"" />
   *           &lt;field column=""type_s"" />
   *         &lt;/entity>
   *       &lt;/entity>
   *     &lt;/entity>
   *   &lt;/document>
   * &lt;/dataConfig>
   * 
   * </pre>
   * 
   * Internally configures MockDataSource.
   **/

Please take special care on the following line:

   *   <dataSource type=""MockDataSource"" />

If you escape the XML, it does not cause NPE.","openjdk version ""17-ea"" 2021-09-14
OpenJDK Runtime Environment (build 17-ea+16-1315)
OpenJDK 64-Bit Server VM (build 17-ea+16-1315, mixed mode, sharing)",,,,,,,,,JDK-8268993,JDK-8270576,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8258957,,,,,,"2021-04-07 06:36;uschindler;Test.java;https://bugs.openjdk.org/secure/attachment/94002/Test.java",,,,,,,,,,,generic,,,,,,b16,17,,generic,,,,,,"0|i2sar7:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-04-07 06:38;uschindler;I attached a test to reproduce. Use the given Test.java and pass it to javac as the following:

$ javac -encoding utf-8 -g -Xlint:-deprecation --release 8 -Xdoclint:all/protected -Xdoclint:-missing -Xdoclint:-accessibility -Xdoclint:-html -proc:none Test.java

;;;","2021-04-07 06:45;uschindler;Seems to be caused by: JDK-8258957;;;","2021-06-16 16:20;jjg;Unlikely caused by JDK-8258957.

The problem looks older than that, but made more likely by JDK-8247957
https://github.com/openjdk/jdk/commit/28e1f4d9#diff-ca46c54ccb3d67a4b73676fd0657229ace4ae93a8fcbbdc75850041f028b50b4R417
which removed support for HTML 4, and which thus made the failing check more likely to occur.;;;","2021-06-17 09:38;roboduke;Changeset: 0011b52e
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-06-17 16:37:35 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/0011b52ee81d88b023f771432abc079c64266578
;;;",,,,,,,,,,,,,,,,,,,,,,,,
IGV: different nodes sharing idx are treated as equal ,JDK-8264842,5046318,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rcastanedalo,rcastanedalo,rcastanedalo,2021-04-07 06:02,2022-08-16 23:39,2023-10-01 09:57,2021-04-23 00:30,17,,,,,,,,17,hotspot,,0,diagnostics,hs-comp-triaged,igv,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,"Nodes of different type, name, etc. which reuse the same idx are treated as equal when IGV compares graphs across the same group. This creates confusion e.g. in the graph snapshot bar, where a node can be shown as inserted twice, or when diffing two graphs.

STEPS TO REPRODUCE IT:

1. Build and run IGV
2. File -> Open -> select small.xml (attached as small.zip) -> OK 
3. In the ""Outline"" window group, expand ""static jint Factorial.fac(jint)"" and double-click on ""After Parsing""
4. Deselect toolbar option ""Show neighboring nodes of fully visible nodes semi-transparent""
5. Double-click on node (54 CallStaticJava)
6. In the ""Outline"" window group, double-click on ""Global code motion""
7. The highlighted node changes to (54 loadConI)",,,,,,,,,,,,,,,,,,,,,,,JDK-8254145,JDK-8265587,,,,,,,,,,,,,,,,,,,,,,,,,"2021-04-09 02:20;rcastanedalo;small.zip;https://bugs.openjdk.org/secure/attachment/94107/small.zip",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2saqz:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-08 04:49;thartmann;The small.xml attachment is missing.;;;","2021-04-08 04:49;thartmann;ILW = MLH = P4;;;","2021-04-09 02:21;rcastanedalo;Oups, thanks [~thartmann], attached now.;;;","2021-04-23 00:30;roboduke;Changeset: b3a319c8
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2021-04-23 07:29:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b3a319c8
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Large mapped buffer/segment crash the VM when calling isLoaded,JDK-8264827,5046298,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chegar,mcimadamore,mcimadamore,2021-04-07 03:04,2021-04-14 17:28,2023-10-01 09:57,2021-04-12 04:22,16,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"From panama-dev:

I've found a bug when calling `MappedMemorySegments::isLoaded`. With a large segment size this causes malloc in the native isLoaded0 method being called with an invalid size, crashing the JVM.

It's caused by a miss-scoped cast in java.nio.Bits::pageCount:

    static int pageCount(long size) {
        return (int)(size + (long)pageSize() - 1L) / pageSize();
    }

There should be parentheses around the whole statement before the (int) cast.


To reproduce:

    import jdk.incubator.foreign.MappedMemorySegments;
    import jdk.incubator.foreign.MemorySegment;

    import java.io.File;
    import java.io.IOException;
    import java.nio.channels.FileChannel;

    public class Main {

        public static final long SIZE_OK = 1024L * 1024 * 1024 * 2 - 4096;
        public static final long SIZE_OOM = SIZE_OK + 1;
        public static final long SIZE_CRASH = SIZE_OK * 2;

        public static void main(String[] args) throws IOException {
            File f = new File(""/tmp/is_loaded_test_file"");
            f.createNewFile();
            MemorySegment memorySegment = MemorySegment.mapFile(f.toPath(), 0,
                    SIZE_CRASH, FileChannel.MapMode.READ_WRITE);
System.out.println(MappedMemorySegments.isLoaded(memorySegment));
        }
    } 


This problem occurs for both memory segments AND byte buffers, since the issue is in common code used by both. Of course, since buffers can only range over int positions, you need a buffer between 2G and 4G to reproduce.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2samj:",9223372036854775807,b18,,,,,,,,,,,,"2021-04-12 04:22;roboduke;Changeset: 3c9858dd
Author:    Chris Hegarty <chegar@openjdk.org>
Date:      2021-04-12 11:21:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3c9858dd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
update libclang bindings after recent jextract changes,JDK-8264825,5046296,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,sundar,sundar,sundar,2021-04-07 03:01,2021-04-07 05:37,2023-10-01 09:57,2021-04-07 05:37,repo-panama,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,jextract has been changed to generate different bindings. pre-generated libclang bindings have to be updated to use the latest jextract.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2sam3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/net/Inet6Address/B6206527.java doesn't close ServerSocket properly,JDK-8264824,5046295,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccleary,dfuchs,dfuchs,2021-04-07 02:46,2021-09-27 02:21,2023-10-01 09:57,2021-04-15 07:06,,,,,,,,,17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,,,,,,This test creates ServerSockets but doesn't close them. It should be using try-with-resource to ensure sockets are closed when no longer needed.,,,,,,,,,,JDK-8266042,JDK-8274357,JDK-8266041,JDK-8266043,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2salv:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-04-12 07:50;ccleary;As suggested in the issue description, ServerSockets in the test will be opened in try-with-resource blocks to ensure that the sockets are properly closed.;;;","2021-04-15 07:06;roboduke;Changeset: 6293299d
Author:    Conor Cleary <ccleary@openjdk.org>
Committer: Aleksei Efimov <aefimov@openjdk.org>
Date:      2021-04-15 14:05:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6293299d
;;;","2021-09-26 04:49;goetz;Fix request [11u]

I downport this for parity with 11.0.13-oracle.
No risk, only a test change.
Clean backport.
Test passes.
Nighttests passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Update building.html document for Git in  jdk15u,JDK-8264823,5046294,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,yan,yan,yan,2021-04-07 02:39,2021-04-26 00:56,2023-10-01 09:57,2021-04-22 01:56,15,,,,,,,,15.0.4,infrastructure,,0,azul-interest,jdk15u-fix-request,jdk15u-fix-yes,,,,,,,,,,,,,,,,,,,,"After backporting building.md version of this document with JDK-8251549, we need to update HTML variant. There is JDK-8257224 doing this for jdk16, however pandoc-generated document in the corresponding fix has a prototype with too many changes not applicable to jdk15u. So we will do it here as a separate independent task.
Affected versions: 15.0.4 and later",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8251549,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2saln:",9223372036854775807,b01,,,,,,,,,,,,"2021-04-22 01:56;roboduke;Changeset: f35be844
Author:    Yuri Nesterenko <yan@openjdk.org>
Date:      2021-04-22 08:55:36 +0000
URL:       https://git.openjdk.java.net/jdk15u-dev/commit/f35be844
;;;","2021-04-26 00:56;roboduke;Changeset: f35be844
Author:    Yuri Nesterenko <yan@openjdk.org>
Date:      2021-04-22 08:55:36 +0000
URL:       https://git.openjdk.java.net/jdk15u/commit/f35be844
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
DirectIOTest fails on a system with large block size,JDK-8264821,5046292,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bpb,snazarki,snazarki,2021-04-07 02:09,2021-05-13 00:07,2023-10-01 09:57,2021-04-14 08:34,,,,,,,,,17,core-libs,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,noreg-self,,,,,,,,,,,,,,,"The test fails with following exception if 'alignment' returned by FileStore::getBlockSize exceeds  the test constant SIZE:

java.nio.BufferOverflowException
	at java.base/java.nio.Buffer.nextPutIndex(Buffer.java:
	at java.base/java.nio.DirectByteBuffer.put(DirectByteBuffer.java:
	at DirectIOTest.testWrite(DirectIOTest.java:
	at DirectIOTest.main(DirectIOTest.java:

This happens due to  ByteBuffer.allocateDirect(SIZE + alignment - 1)                                       .alignedSlice(alignment) returns zero-length  buffer. ",,,,,,,,,,JDK-8266481,JDK-8266486,JDK-8267090,JDK-8266151,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265231,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2sal7:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-04-07 03:57;michaelm;Would it be possible to get more information on how to reproduce this?;;;","2021-04-07 05:10;snazarki;The simple test would be
    private static void simpleTest() {
        final int size = 4096;
        final int alignment = 2 * size;
        ByteBuffer src = ByteBuffer.allocateDirect(size + alignment - 1)
            .alignedSlice(alignment);
        if (src.capacity() == 0) throw new RuntimeException(""Unexpected empty buffer"");
    }

To reproduce on real hardware it is necessary to create a mount point (i.e. NFS) with rsize=8192,wsize=8192 options, this sets alignment parameter  to 8k ;;;","2021-04-13 16:25;bpb;This can be reproduced in the original test by setting SIZE=2048.

What appears to be happening is that the buffer created by allocateDirect() is not large enough to guarantee that it contains two or more aligned bytes within the span of the buffer. In that case rounding results in out-of-bound values and the new buffer's capacity and limit are zero, hence the BufferOverflowException.;;;","2021-04-14 08:34;roboduke;Changeset: 7e4cd480
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-04-14 15:33:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7e4cd480
;;;","2021-04-28 03:14;snazarki;Review Request (13u)
The test failed on FS with rw block larger than 4k. The fix doesn't apply cleanly due to missed ""8244224: Implementation of JEP 381: Remove the Solaris and SPARC Ports"". 
Changes were made manually
 -  copyright year
 -  isDirectIOSupportedByFS remains in the code

Related backport of JDK-8265231 is not necessary since public method is not removed.;;;","2021-04-28 04:32;snazarki;Review Request (11u)
The change fixes failures on particular filesystems.  Doesn't apply cleanly due to JEP 381 was not ported to jdk11. 
Review https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-April/006005.html;;;","2021-05-12 08:19;snazarki;Fix Request (15u)
I'd like to backport this fix for parity with jdk17/13/11. The patch applies cleanly. tier1 passed;;;",,,,,,,,,,,,,,,,,,,,,
jdk/incubator/vector/FloatMaxVectorTests.java fails on AVX512 due to incorrect vector_exp_float512 entry,JDK-8264820,5046291,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jiefu,jiefu,jiefu,2021-04-07 01:38,2021-04-07 17:41,2023-10-01 09:57,2021-04-07 17:41,repo-panama,,,,,,,,repo-panama,hotspot,,0,tencent-interest,vectorapi,,,,,,,,,,,,,,,,,,,,,"jdk/incubator/vector/FloatMaxVectorTests.java fails on AVX512 machines after JDK-8264321.

```
test FloatMaxVectorTests.EXPFloatMaxVectorTests(float[i + 1]): failure
java.lang.AssertionError: at index #5, input = 6.0, actual = NaN, expected = 403.4288 expected [true] but found [false]
        at org.testng.Assert.fail(Assert.java:94)
        at org.testng.Assert.failNotEquals(Assert.java:496)
        at org.testng.Assert.assertTrue(Assert.java:42)
        at FloatMaxVectorTests.assertArraysEqualsWithinOneUlp(FloatMaxVectorTests.java:630)
        at FloatMaxVectorTests.EXPFloatMaxVectorTests(FloatMaxVectorTests.java:3609)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
        at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
        at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
        at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
        at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
        at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
        at org.testng.TestRunner.privateRun(TestRunner.java:773)
        at org.testng.TestRunner.run(TestRunner.java:623)
        at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
        at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
        at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
        at org.testng.SuiteRunner.run(SuiteRunner.java:259)
        at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
        at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
        at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
        at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
        at org.testng.TestNG.run(TestNG.java:1018)
        at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
        at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:831)

test FloatMaxVectorTests.EXPFloatMaxVectorTests(float[cornerCaseValue(i)]): failure
java.lang.AssertionError: at index #3, input = Infinity, actual = NaN, expected = Infinity expected [true] but found [false]
        at org.testng.Assert.fail(Assert.java:94)
        at org.testng.Assert.failNotEquals(Assert.java:496)
        at org.testng.Assert.assertTrue(Assert.java:42)
        at FloatMaxVectorTests.assertArraysEqualsWithinOneUlp(FloatMaxVectorTests.java:630)
        at FloatMaxVectorTests.EXPFloatMaxVectorTests(FloatMaxVectorTests.java:3609)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
        at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
        at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
        at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
        at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
        at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
        at org.testng.TestRunner.privateRun(TestRunner.java:773)
        at org.testng.TestRunner.run(TestRunner.java:623)
        at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
        at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
        at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
        at org.testng.SuiteRunner.run(SuiteRunner.java:259)
        at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
        at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
        at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
        at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
        at org.testng.TestNG.run(TestNG.java:1018)
        at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
        at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:831)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264321,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sakz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Weak handles leak causes GC to take longer,JDK-8264816,5046285,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ddong,ddong,ddong,2021-04-07 00:17,2021-05-04 13:21,2023-10-01 09:57,2021-04-26 17:55,8,,,,,,,,openjdk8u302,hotspot,,0,alibaba-interest,jdk8u-fix-request,jdk8u-fix-yes,sustaining,,,,,,,,,,,,,,,,,,,The implementation of MemberNameTable in 8u has weak handles leak problem,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8174749,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sajn:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-07 10:40;sgehwolf;Description of the problem:
https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-April/013618.html;;;","2021-04-23 20:20;ddong;Fix Request (8u)

8u RFR thread (acked by Zhengyu Gu):
https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-April/013704.html;;;","2021-04-26 05:10;sgehwolf;Fixed in later JDKs with JDK-8174749;;;","2021-04-26 08:06;sgehwolf;[~ddong] Please fix the typo before you push. See:
https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-April/013720.html;;;","2021-04-26 17:55;ddong;Fixed and pushed.

http://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/rev/85f20f6ec580

Thanks.;;;","2021-04-26 17:55;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/rev/85f20f6ec580
User:  ddong
Date:  2021-04-27 00:53:13 +0000
;;;","2021-05-04 13:19;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/rev/85f20f6ec580
User:  andrew
Date:  2021-05-04 20:08:45 +0000
;;;",,,,,,,,,,,,,,,,,,,,,
update jextract samples repo memory-abi API changes and --enable-native-access option,JDK-8264812,5046269,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-04-06 21:08,2021-04-06 21:29,2023-10-01 09:57,2021-04-06 21:29,repo-panama,,,,,,,,repo-panama,tools,,0,,,,,,,,,,,,,,,,,,,,,,,update jextract samples repo memory-abi API changes and --enable-native-access option,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2sag3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-04-06 21:29;sundar;Fixed in samples repo.

https://github.com/sundararajana/panama-jextract-samples/commit/d3c3736bad51044a6f794ddc585ebcdecccab40e;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix inconsistence of m4 and ad files after merge,JDK-8264811,5046267,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,njian,njian,njian,2021-04-06 20:48,2021-04-06 21:02,2023-10-01 09:57,2021-04-06 21:02,repo-panama,,,,,,,,repo-panama,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"The latest vectorIntrinsics merge [1] has some missing changes in aarch64_neon_ad.m4. 

[1] https://github.com/openjdk/panama-vector/pull/58",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i2safn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test-lib fails to build due to some warnings in ASN1Formatter and jfr,JDK-8264809,5046265,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-04-06 20:29,2021-04-14 17:25,2023-10-01 09:57,2021-04-07 17:25,17,,,,,,,,17,other-libs,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,,"Reproduce: make build-test-lib

```
* For target support_test_lib_test-lib_classes__the.BUILD_TEST_LIB_JAR_batch:
/jdk/test/lib/jdk/test/lib/hexdump/ASN1Formatter.java:250: warning: [fallthrough] possible fall-through into case
                case TAG_PrintableString:
                ^
error: warnings found and -Werror specified
/jdk/test/lib/jdk/test/lib/jfr/GCHelper.java:336: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal
                        openGcIds.push(new Integer(gcId));
                                       ^
/jdk/test/lib/jdk/test/lib/jfr/SimpleEventHelper.java:80: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal
            missingIds.remove(new Integer(id));
                              ^
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2saf7:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@79d0c3d2,,,,,,,,,"2021-04-07 17:25;roboduke;Changeset: 88eb2919
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-04-08 00:24:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/88eb2919
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
cleanup Threads_lock comments in JVM/TI function headers,JDK-8264800,5046243,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2021-04-06 11:56,2021-06-07 15:19,2023-10-01 09:57,2021-06-01 11:53,17,,,,,,,,17,hotspot,,0,Thread-SMR,,,,,,,,,,,,,,,,,,,,,,"JVM/TI files like  src/hotspot/share/prims/jvmtiEnv.cpp have
comments like these:

// Threads_lock NOT held, java_thread not protected by lock

These should have been taken care of by a follow up bug after
the Thread-SMR project, but it looks like I forgot to file the bug.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8167108,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2saab:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-06-01 11:53;roboduke;Changeset: 40e4171f
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-06-01 18:51:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/40e4171f562da2f6a507efc7ad359e298199ed71
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
The NumberFormat for locale sq_XK formats price incorrectly.,JDK-8264792,5045015,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2021-03-20 12:49,2022-08-01 01:38,2023-10-01 09:57,2021-08-09 09:26,11,15,16,17,,,,,18,core-libs,,0,dcsad,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,reproducer-yes,webbug,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
does not show as 2.15 €

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
2.15 €
ACTUAL -
 2,14 ¤

---------- BEGIN SOURCE ----------
 Locale localeAl = new Locale(""sq"", ""XK"");
        var language = localeAl.getLanguage();
        var country = localeAl.getDisplayCountry();
        System.out.println(""language = "" + language);
        System.out.println(""country = "" + country);
//        var locales = localeAl.getAvailableLocales();
//        for(var locale:locales){
//            System.out.println(""locale = "" + locale + "" | "" + locale.getDisplayCountry());
//        }
        NumberFormat formatter = NumberFormat.getCurrencyInstance(localeAl);
        String moneyString = formatter.format(price);
        System.out.println(""price = "" +moneyString);
---------- END SOURCE ----------

",,,,,,,,,,JDK-8291561,JDK-8290927,JDK-8291480,JDK-8291605,JDK-8290924,JDK-8291560,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-04-06 08:52;adev;Test.java;https://bugs.openjdk.org/secure/attachment/93985/Test.java",,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s2pv:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,Verified,,"2021-04-06 08:54;adev;The issue is reproducible.
The currency for the locale sq_XK [Albanian (Kosovo)] is €.
However following is printed for the test code:

Locale localeAl = new Locale(""sq"", ""XK"");
var language = localeAl.getLanguage();
var country = localeAl.getDisplayCountry();
NumberFormat formatter = NumberFormat.getCurrencyInstance(localeAl);
String moneyString = formatter.format(2.15);
System.out.println(""price = "" + moneyString);
====================
price = 2,15 ¤;;;","2021-08-05 14:23;naoto;The immediate cause for this issue is that Currency.getInstance() for 'sq-XK' locale throws an exception because there is no data for 'XK' (Kosovo) in ISO 4217 ( (https://simple.wikipedia.org/wiki/ISO_4217 does not list Kosovo for Euro currency, possibly because the independence is disputed by some country).
However, Kosovo has been using Euro currency since 2002 (https://simple.wikipedia.org/wiki/Kosovo) and since the country code 'XK' is considered self assigned country code (https://en.wikipedia.org/wiki/ISO_3166-2:RS), I believe it is fair to add the data for Kosovo using Euro in Currency class.;;;","2021-08-09 09:26;roboduke;Changeset: 41dc795d
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-08-09 16:22:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/41dc795d6c08af84aa6544cc5a5704dcf99386cf
;;;","2022-04-08 03:36;sqetools;verified;;;","2022-07-25 07:47;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Small fix, low risk.
Clean backport except for bugID in test
Tests pass and fails without the fix.  SAP nighlty testing passed.
;;;","2022-07-25 07:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/594
Date: 2022-07-25 14:50:19 +0000;;;","2022-07-28 07:02;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
Small fix, low risk.
Clean backport from 17.
Tests pass and fail without the fix.
SAP nightly testing passed.;;;","2022-07-28 07:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1279
Date: 2022-07-28 14:04:32 +0000;;;","2022-07-29 07:06;yan;Fix request (13u, 15u)
backporting for parity with major releases.
Tests for currency all pass after the fix.
A list of covered fixes in ValidateISO4217.java slightly differs in both cases, so it is not exactly clean backport.;;;","2022-07-29 07:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/248
Date: 2022-07-29 14:07:45 +0000;;;","2022-07-29 07:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/384
Date: 2022-07-29 14:17:48 +0000;;;",,,,,,,,,,,,,,,,,
"java/util/Random/RandomTestBsi1999.java failed ""java.security.SecureRandom nextFloat consecutive""",JDK-8264791,5046234,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlaskey,dcubed,dcubed,2021-04-06 08:51,2021-04-12 15:12,2023-10-01 09:57,2021-04-06 10:06,17,,,,,,,,17,core-libs,,0,intermittent,tier5,tier6,,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

java/util/Random/RandomTestBsi1999.java

Here's a snippet from the log file:

----------System.err:(15/919)----------
SecureRandom
  run test failure for java.security.SecureRandom nextFloat consecutive (10220 1-bits)
  testRngBsi1999Int glitchjava.lang.RuntimeException: 2 fails detected
	at RandomTestBsi1999.exceptionOnFail(RandomTestBsi1999.java:108)
	at RandomTestBsi1999.main(RandomTestBsi1999.java:451)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 2 fails detected

This is a new test recently added by:

JDK-8248862 Implement Enhanced Pseudo-Random Number Generators

There are no special JVM args for this test task.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8248862,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2sa8b:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2021-04-06 08:54;dcubed;[~jlaskey] - Can you take a look at this failure? It's a new test
that was added by JDK-8248862.;;;","2021-04-06 10:06;roboduke;Changeset: 0f13e227
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-04-06 17:05:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0f13e227
;;;","2021-04-07 07:06;dcubed;The fix for this bug is in jdk-17+17-1390.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
update jextract for foreign-memory-abi API changes and --enable-native-access option,JDK-8264787,5046230,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,sundar,sundar,sundar,2021-04-06 07:46,2021-04-06 21:04,2023-10-01 09:57,2021-04-06 21:04,repo-panama,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,update jextract for foreign-memory-abi API changes and --enable-native-access option,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2sa7f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macOS] All Swing/AWT apps cause Allow Notifications prompt to appear when app is launched,JDK-8264786,5045824,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,serb,webbuggrp,webbuggrp,2021-03-30 22:46,2021-06-28 10:24,2023-10-01 09:57,2021-05-03 13:54,10,11,13,15,16,17,,,17,client-libs,,0,11-bp,azul-interest,CPU21_07-critical-approved,CPU21_07-critical-SQE-OK,dcsnr,dcspn,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok,jdk16u-fix-yes,macos,noreg-other,regression,reproducer-yes,sn_90,sn_92,webbug,"ADDITIONAL SYSTEM INFORMATION :
MacOS 10.15.7
OpenJDK 11.0.9 and 16.0.0 (but not on 9.0.7.1).

A DESCRIPTION OF THE PROBLEM :
After the implementation of JDK-8187639, all Swing/AWT apps now cause the following prompt to appear on MacOS when the app is first launched:

""java"" Notifications
Notifications may include alerts, sounds, and icon badges.
Don't Allow/Allow?

The prompt confuses/annoys users, since our app should not be causing any notifications to happen.

The bug appears to have been introduced with JDK-8187639. I believe the permission popup appears in response to the following call in src/java.desktop/macosx/native/libosxapp/NSApplicationAWT.m:
[[NSUserNotificationCenter defaultUserNotificationCenter] setDelegate:self];

I managed to cause a similar permission popup to appear from a standalone Objective-C app that just performs the call above. So this seems likely to be the cause.

The suggested fix is to only call NSUserNotificationCenter.setDelegate if the TrayIcon facility is actually used, i.e. in src/java.desktop/macosx/native/libawt_lwawt/awt/CTrayIcon.m instead of always when the native Toolkit is being initialized.


REGRESSION : Last worked in version 8

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1) Open ""System Preferences"" and then the ""Notifications"" pane. If there is any entry or entries for ""java"" in the panel to the left, select each entry and press the Delete key (Fn+Backspace) to reset the notification prompt, to ensure that it pops up in the next step.
2) Run the attached trivial AWT app, which just calls Toolkit.getDefaultToolkit(). Any Swing or AWT action would work.


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The app should exit uneventfully, with no user-visible permission popup.
ACTUAL -
An OS-level prompt pops up, asking the user to permit notifications from ""java"".

---------- BEGIN SOURCE ----------
import java.awt.Toolkit;
 
public class SpuriousNotificationExhibit {
  public static final void main(String args[]) throws Exception {
    // Any Swing or AWT action which would cause the toolkit to be initialized would work here.
    Toolkit.getDefaultToolkit();
  }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
No workaround exists. Though obviously the user can click away the popup.

FREQUENCY : always


",,,,,,,,,,JDK-8266484,JDK-8266597,JDK-8267032,JDK-8266533,JDK-8269324,JDK-8268412,JDK-8268247,JDK-8266488,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8187639,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2s7p7:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,Verified,,"2021-04-06 08:48;prr;Seems to me every new app I run on macOS asks for this permission.
And I expect the submitter really means once for every JDK instance, not once for every Java app.;;;","2021-04-08 15:04;serb;Caused by the security enhancements in the new macOS.;;;","2021-04-08 20:57;pnarayanaswa;Additional Information from submitter:
===========================
Yes, the warning occurs once for every JDK instance (but for any kind of Swing or AWT app, as long as the toolkit gets initialized). In our case we bundle OpenJDK inside an "".app"" bundle, so we get a separate prompt from other Java apps.

I have now confirmed that the prompt appears even when the app bundle containing the bundled JDK is signed and ""notarized"" (per https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution ).

> Seems to me every new app I run on macOS asks for this permission.
Case-in-point, here's a Tweet from yesterday with someone making fun of an app for doing so: https://twitter.com/rsnous/status/1380001863345430531?s=20
(Not sure if that one was using Java in any way or not, though.)
;;;","2021-04-26 16:53;serb;We should move the code for notifications to the ""CTrayIcon.m"", but some additional checks will be needed since it could be possible that CTrayIcon will be used in an embedded mode where the main application will be different from NSApplicationAWT.;;;","2021-04-26 17:34;serb;Note that Apple recommends using UNUserNotificationCenter instead of NSUserNotificationCenter, 10.14+;;;","2021-04-26 18:11;serb;Testing is in progress;;;","2021-05-03 13:54;roboduke;Changeset: 020236cb
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-05-03 20:53:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/020236cb9825bf4fa91a495a179623e3fcdc0149
;;;","2021-05-04 02:27;vkempik;Fix Request (15u): The issue affects jdk15u as well, applies almost cleanly, only copyright year issue once.
After fix applied, request for notification permission doesn't appear anymore on simple awt app.;;;","2021-05-04 03:10;vkempik;Fix Request (13u): The issue affects jdk13u as well, applies almost cleanly, only copyright year issue once.
After fix applied, request for notification permission doesn't appear anymore on simple awt app.;;;","2021-05-04 06:31;vkempik;Fix Request (11u): The issue affects jdk11u as well, didn't apply cleanly mostly due to context code difference.
After fix applied, request for notification permission doesn't appear anymore on simple awt app.
Testing: tier1/tier2
Review thread - https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-May/006049.html;;;","2021-05-05 14:13;vkempik;looks like Sergey and Christoph just had race condition on updating labels, returning jdk16u-fix-request back to labels list;;;","2021-06-02 21:58;pnarayanaswa;Verified from submitter:
=================
I just tested the latest JDK 17 build (openjdk-17-ea+24_macos-x64_bin.tar.gz) on MacOS 10.15.7 and can confirm the bug is resolved. I tested running our Java application both outside and inside an application bundle (outside the bundle, the MacOS would previously ask for permissions for ""java"", while inside a bundle, MacOS would previously ask for permissions for name of our application. I switched between the 17-ea+24 version and an earlier OpenJDK build I had lying around (17-ea+20), and can confirm that the problem appeared on the older build and disappeared on the newer build. MacOS no longer asks permission to enable notifications. Very good!

Thank you for the very quick resolution to this issue!
;;;",,,,,,,,,,,,,,,,
ClhsdbFindPC still fails with java.lang.RuntimeException: 'In java stack' missing from stdout/stderr,JDK-8264775,5046215,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,cjplummer,dcubed,dcubed,2021-04-06 05:50,2021-07-15 10:09,2023-10-01 09:57,2021-06-18 13:28,17,18,,,,,,,17,hotspot,,0,intermittent,testbug,tier1,tier3,tier7,,,,,,,,,,,,,,,,,,"The following test failed in the JDK 17 CI:

serviceability/sa/ClhsdbFindPC.java#id3

Here's a snippet from the log file:

----------System.err:(35/1847)----------
java version ""17-ea"" 2021-09-14 LTS
Java(TM) SE Runtime Environment (fastdebug build 17-ea+17-LTS-1382)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 17-ea+17-LTS-1382, mixed mode)
 stdout: [ + findpc 0x000000fa6b5ff000
Address 0x000000fa6b5ff000: Is of type JavaCallWrapper
];
 stderr: [ + findpc 0x000000fa6b5ff000
Address 0x000000fa6b5ff000: Is of type JavaCallWrapper
]
 exitValue = -1

java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'In java stack' missing from stdout/stderr 

	at ClhsdbFindPC.testFindPC(ClhsdbFindPC.java:283)
	at ClhsdbFindPC.main(ClhsdbFindPC.java:305)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.RuntimeException: 'In java stack' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:325)
	at ClhsdbLauncher.runCmd(ClhsdbLauncher.java:166)
	at ClhsdbLauncher.runOnCore(ClhsdbLauncher.java:225)
	at ClhsdbFindPC.runTest(ClhsdbFindPC.java:295)
	at ClhsdbFindPC.testFindPC(ClhsdbFindPC.java:213)
	... 7 more

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'In java stack' missing from stdout/stderr ",,,,,,,,,,JDK-8270600,JDK-8269061,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261929,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2sa43:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-04-06 11:17;cjplummer;The test starts with a jstack dump. One of the earlier lines in the dump is something like:

""main"" #1 prio=5 tid=0x0000029128e75ad0 nid=0x60f4 runnable [0x000000fa6b5ff000]

The last address is the ""last java SP"", although for some reason SA always chooses to mask off the lower 12 bits. The test does a findpc on this address, expecting it to be ""in java stack"". However, not only is it in the java stack, but it also happens to be the address of a hotspot JavaCallWrapper object that is (or probably was) on the stack, thus the output of findpc is:

 Address 0x000000fa6b5ff000: Is of type JavaCallWrapper 

Part of the reason for this is that SA first checks to see if the address points hotspot object, and if not then checks if it is on the stack. However, I don't think we should change that order for the sake of this test. It's probably best that addresses of hotspot objects that are on the java stack are identified by their type, and not just as being on the java stack.

I'm not sure why this issue is suddenly happening. Possibly hotspot has changed a bit (either or directly or indirectly) where JavaCallWrapper objects might be found on the stack. In any regard, there is always some risk of a stack address being for a hotspot object, so the test should defend against this. It could do so by checking for ""Is of type"" in addition to ""In java stack"";;;","2021-06-17 12:40;dcubed;This failure mode has popped up in a Tier1 job set
so bumping from P4 -> P3.;;;","2021-06-17 15:36;dcubed;This failure has happened in three Tier1 job sets in a row
in the JDK18 CI so bumping this from P3 -> P2.;;;","2021-06-18 13:28;roboduke;Changeset: 8caeca00
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-06-18 20:27:30 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/8caeca003e621dd523eb27ef7e7fea0765ceacb6
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Implementation of Foreign Function and Memory API (Incubator),JDK-8264774,5046214,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-04-06 05:50,2021-07-27 10:52,2023-10-01 09:57,2021-06-02 03:53,17,,,,,,,,17,core-libs,,0,jacoco-interest,,,,,,,,,,,,,,,,,,,,,,Implement new iteration of Foreign Memory and Foreign Linker APIs.,,,,,,,,,,,,,,,,,,,,,,,JDK-8266077,,JDK-8264781,,,,,,,,JDK-8265228,,,,JDK-8265033,JDK-8269240,JDK-8268131,JDK-8266257,JDK-8268275,,JDK-8266383,JDK-8269040,JDK-8268641,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sa3v:",9223372036854775807,b25,,,,,,,,,,,,"2021-06-02 03:53;roboduke;Changeset: a223189b
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2021-06-02 10:53:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a223189b069a7cfe49511d49b5b09e7107cb3cab
;;;","2021-06-02 18:40;martin;Appears to break linux-arm raspberry pi build.

/usr/bin/ld: /home/martin/ws/jdk/build/linux-arm-server-release/hotspot/variant-server/libjvm/objs/foreign_globals.o: in function `ForeignGlobals::parse_call_regs(_jobject*)':
foreign_globals.cpp:(.text+0xb5c): undefined reference to `ForeignGlobals::parse_call_regs_impl(_jobject*) const'
/usr/bin/ld: /home/martin/ws/jdk/build/linux-arm-server-release/hotspot/variant-server/libjvm/objs/universalUpcallHandler.o: in function `PUH_SupportsOptimizedUpcalls':
universalUpcallHandler.cpp:(.text+0xa0): undefined reference to `ProgrammableUpcallHandler::supports_optimized_upcalls()'
/usr/bin/ld: /home/martin/ws/jdk/build/linux-arm-server-release/hotspot/variant-server/libjvm/objs/universalUpcallHandler.o: in function `PUH_AllocateOptimizedUpcallStub':
universalUpcallHandler.cpp:(.text+0x1030): undefined reference to `ProgrammableUpcallHandler::generate_optimized_upcall_stub(_jobject*, Method*, _jobject*, _jobject*)'
collect2: error: ld returned 1 exit status

Looking for definitions of supports_optimized_upcalls ... I see only:

./src/hotspot/cpu/x86/universalUpcallHandler_x86_64.cpp
./src/hotspot/cpu/x86/universalUpcallHandler_x86_32.cpp
./src/hotspot/cpu/aarch64/universalUpcallHandler_aarch64.cpp

so I expect the same failure on any architecture other than these 3.;;;","2021-06-03 02:42;mcimadamore;Hi [~martin], the failures you described were known, and have been addressed by this other PR:

https://github.com/openjdk/jdk/pull/4303

Which has just been integrated. Please let us know if you find other issues.;;;","2021-06-03 06:50;marchof;Hi, JaCoCo project here. The above PR fixed our arm32 builds again. Thx!;;;","2021-06-03 11:35;martin;Hey [~mcimadamore], thanks - yes I can confirm I can again build on raspberry pi OS 32-bit;;;",,,,,,,,,,,,,,,,,,,,,,,
BidirectionalBinding should use InvalidationListener to prevent boxing,JDK-8264770,5046175,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mstrauss,webbuggrp,webbuggrp,2021-04-05 15:23,2021-08-30 06:29,2023-10-01 09:57,2021-05-17 06:56,jfx17,,,,,,,,jfx17,javafx,,0,dcspn,performance,reproducer-no,webbug,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The internal BidirectionalBinding class implements bidirectional bindings for JavaFX properties. The design intent of this class is to provide specializations for primitive value types to prevent boxing conversions (cf. specializations of the Property class with a similar design intent).

However, the primitive BidirectionalBinding implementations do not meet the design goal of preventing boxing conversions, because they implement ChangeListener.

ChangeListener is a generic SAM interface, which makes it impossibe to invoke an implementation of ChangeListener::changed with a primitive value (i.e. any primitive value will be auto-boxed).

The boxing conversion happens, as with all ChangeListeners, at the invocation site (for example, in ExpressionHelper). Since the boxing conversion has already happened by the time any of the BidirectionalBinding implementations is invoked, there's no point in using primitive specializations of BidirectionalBinding after the fact.

This issue can be solved by having BidirectionalBinding implement InvalidationListener instead, which by itself does not incur a boxing conversion. Because bidirectional bindings are eagerly evaluated, the observable behavior remains the same.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273138,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s9v7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2021-04-07 06:00;kcr;The existing unit tests can be used to validate correct behavior after the fix.

See the following comment in the PR for a benchmark test case:

https://github.com/openjdk/jfx/pull/454#issuecomment-814211888
;;;","2021-05-17 06:56;roboduke;Changeset: 285a0b65
Author:    Michael Strauß <mstrauss@openjdk.org>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2021-05-17 12:54:26 +0000
URL:       https://git.openjdk.java.net/jfx/commit/285a0b65907e2cf5cd12dec1a88f729ba2c1c9ba
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
ClassCastException during template compilation (Variable cannot be cast to Param),JDK-8264766,5044883,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,joehw,webbuggrp,webbuggrp,2021-03-18 15:12,2021-06-21 18:51,2023-10-01 09:57,2021-06-08 17:35,11,17,8,,,,,,17,xml,,0,additional-information-received,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When compiling xslt template ClassCastException is thrown, which is unexpected. Example code below. If template is invalid TransformerConfigurationException should be thrown. 
Problem is in SymbolTable.java 

   public Param addParam(Param parameter) {
        if (_variables == null) _variables = new HashMap<>();
        final String name = parameter.getName().getStringRep();
        return (Param)_variables.put(name, parameter);
    }

_variables can contain Param and Variable objects, so this cast causes ClassCastException



STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the example code

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
No exception should be thrown.
ACTUAL -
java.lang.ClassCastException: class com.sun.org.apache.xalan.internal.xsltc.compiler.Variable cannot be cast to class com.sun.org.apache.xalan.internal.xsltc.compiler.Param (com.sun.org.apache.xalan.internal.xsltc.compiler.Variable and com.sun.org.apache.xalan.internal.xsltc.compiler.Param are in module java.xml of loader 'bootstrap')
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable.addParam(SymbolTable.java:104)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.Param.parseContents(Param.java:137)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet.parseOwnChildren(Stylesheet.java:587)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet.parseContents(Stylesheet.java:559)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.Parser.createAST(Parser.java:398)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC.compile(XSLTC.java:493)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC.compile(XSLTC.java:570)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTemplates(TransformerFactoryImpl.java:1018)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTransformer(TransformerFactoryImpl.java:817)
	at Scratch.main(scratch_1.java:23)
ERROR:  'Could not compile stylesheet'
FATAL ERROR:  'class com.sun.org.apache.xalan.internal.xsltc.compiler.Variable cannot be cast to class com.sun.org.apache.xalan.internal.xsltc.compiler.Param (com.sun.org.apache.xalan.internal.xsltc.compiler.Variable and com.sun.org.apache.xalan.internal.xsltc.compiler.Param are in module java.xml of loader 'bootstrap')'
           :class com.sun.org.apache.xalan.internal.xsltc.compiler.Variable cannot be cast to class com.sun.org.apache.xalan.internal.xsltc.compiler.Param (com.sun.org.apache.xalan.internal.xsltc.compiler.Variable and com.sun.org.apache.xalan.internal.xsltc.compiler.Param are in module java.xml of loader 'bootstrap')
Exception in thread ""main"" javax.xml.transform.TransformerConfigurationException: class com.sun.org.apache.xalan.internal.xsltc.compiler.Variable cannot be cast to class com.sun.org.apache.xalan.internal.xsltc.compiler.Param (com.sun.org.apache.xalan.internal.xsltc.compiler.Variable and com.sun.org.apache.xalan.internal.xsltc.compiler.Param are in module java.xml of loader 'bootstrap')
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTemplates(TransformerFactoryImpl.java:1059)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTransformer(TransformerFactoryImpl.java:817)
	at Scratch.main(scratch_1.java:23)
Caused by: java.lang.ClassCastException: class com.sun.org.apache.xalan.internal.xsltc.compiler.Variable cannot be cast to class com.sun.org.apache.xalan.internal.xsltc.compiler.Param (com.sun.org.apache.xalan.internal.xsltc.compiler.Variable and com.sun.org.apache.xalan.internal.xsltc.compiler.Param are in module java.xml of loader 'bootstrap')
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable.addParam(SymbolTable.java:104)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.Param.parseContents(Param.java:137)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet.parseOwnChildren(Stylesheet.java:587)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet.parseContents(Stylesheet.java:559)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.Parser.createAST(Parser.java:398)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC.compile(XSLTC.java:493)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC.compile(XSLTC.java:570)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTemplates(TransformerFactoryImpl.java:1018)
	... 2 more
---------
java.lang.ClassCastException: class com.sun.org.apache.xalan.internal.xsltc.compiler.Variable cannot be cast to class com.sun.org.apache.xalan.internal.xsltc.compiler.Param (com.sun.org.apache.xalan.internal.xsltc.compiler.Variable and com.sun.org.apache.xalan.internal.xsltc.compiler.Param are in module java.xml of loader 'bootstrap')
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable.addParam(SymbolTable.java:104)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.Param.parseContents(Param.java:137)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet.parseOwnChildren(Stylesheet.java:587)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet.parseContents(Stylesheet.java:559)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.Parser.createAST(Parser.java:398)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC.compile(XSLTC.java:493)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC.compile(XSLTC.java:570)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTemplates(TransformerFactoryImpl.java:1018)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTransformer(TransformerFactoryImpl.java:817)
	at Scratch.main(scratch_1.java:23)


---------- BEGIN SOURCE ----------

import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;
import java.io.StringReader;

class Scratch {

    public static void main(String[] args) throws Exception {
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        String stylesheet = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"" +
                ""<xsl:stylesheet xmlns:xsl=\""http://www.w3.org/1999/XSL/Transform\"" version=\""1.0\"">\n"" +
                ""  <xsl:variable   name=\""background-color\"">#f4f4f4</xsl:variable>\n"" +
                ""  <xsl:param name=\""background-color\"">pp</xsl:param>\n"" +
                ""  <xsl:template name=\""tName\""><xsl:param name=\""background-color\"">black</xsl:param>\n"" +
                ""                OK <xsl:value-of select=\""$background-color\""/>\n"" +
                ""   </xsl:template>\n"" +
                ""  <xsl:template match=\""/root\"">\n"" +
                ""    <xsl:call-template name=\""tName\"">\n"" +
                ""      <xsl:with-param name=\""background-color\"" select=\""$background-color\""/>\n"" +
                ""    </xsl:call-template>\n"" +
                ""  </xsl:template>\n"" +
                ""</xsl:stylesheet>\n"";
        transformerFactory.newTransformer(new StreamSource(new StringReader(stylesheet)));

    }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-04-06 04:22;tongwan;Scratch.java;https://bugs.openjdk.org/secure/attachment/93981/Scratch.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s1wj:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@33088177,,,,,,,Verified,,"2021-04-06 04:21;tongwan;The observations on Windows 10:
JDK 8: Failed, ClassCastException thrown
JDK 11: Failed.
JDK 17ea+6: Failed. ;;;","2021-06-08 17:35;roboduke;Changeset: 1c3932f3
Author:    Joe Wang <joehw@openjdk.org>
Date:      2021-06-09 00:34:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1c3932f3d5ec47678f55769cb6a9f657ace411c6
;;;","2021-06-18 04:19;tongwan;Requested the submitter verify the fix by downloading the latest version of JDK 17 from https://jdk.java.net/17/;;;","2021-06-21 18:51;tongwan;From the submitter:
I've checked with JDK-17 and no exception is thrown. Thank you for this fix. ;;;",,,,,,,,,,,,,,,,,,,,,,,,
BreakIterator sees bogus sentence boundary in parenthesized “i.e.” phrase,JDK-8264765,5046099,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2021-04-04 08:21,2021-05-10 04:48,2023-10-01 09:57,2021-04-09 11:12,11,17,8,,,,,,17,core-libs,,0,additional-information-not-received,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
java version ""1.8.0_112""
Java(TM) SE Runtime Environment (build 1.8.0_112-b16)
Java HotSpot(TM) 64-Bit Server VM (build 25.112-b16, mixed mode)

But this has also be reproduced on newer JDK versions e.g., 14.

A DESCRIPTION OF THE PROBLEM :
When a sentence contains text like ""blah blah (i.e., blah blah), blah blah"" the BreakIterator.getSentenceInstance() incorrectly detects a break after the ""i.e"" and before the ""., blah blah)"", but this is not actually a sentence boundary.

FWIW, Stack Overflow discussion here: https://stackoverflow.com/q/66933006/263801

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the test case program below.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
bi.preceding(30) returned -1
first sentence: ""Due to a problem (e.g., software bug), the server is down.""

ACTUAL -
bi.preceding(30) returned 21
first sentence: ""Due to a problem (e.g""

---------- BEGIN SOURCE ----------
import java.text.BreakIterator;
import java.util.Locale;
public class BreakIteratorTest {
    public static void main(String[] args) throws Exception {
        String text = ""Due to a problem (e.g., software bug), the server is down."";
        BreakIterator bi = BreakIterator.getSentenceInstance(Locale.US);
        bi.setText(text);
        int r = bi.preceding(30);
        System.out.println(""bi.preceding(30) returned "" + r);
        String sentence = r == BreakIterator.DONE ? text : text.substring(0, r);
        System.out.println(""first sentence: \"""" + sentence + ""\"""");
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
None known

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8232447,,,,,,"2021-04-06 04:09;tongwan;BreakIteratorTest.java;https://bugs.openjdk.org/secure/attachment/93980/BreakIteratorTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s9eb:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,Not verified,,"2021-04-06 04:07;tongwan;The observations on Windows 10:
JDK 8: Failed, bi.preceding(30) returned 21 
JDK 11: Failed.
JDK 17ea+6: Failed.;;;","2021-04-07 03:46;michaelm;Not sure if it's a bug, but BreakIterator claims to support abbreviations which might include symbols like i.e. and e.g.;;;","2021-04-07 15:34;naoto;It looks like the comma after the period is regarded as the start of a sentence.;;;","2021-04-08 14:46;naoto;BTW, the expected output should be:
```
bi.preceding(30) returned 0
first sentence: """"
```
because the first boundary is the start of the sentence, and the specified offset is not that (=30).;;;","2021-04-09 11:12;roboduke;Changeset: 9ebc497b
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-04-09 18:12:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9ebc497b
;;;","2021-04-19 19:30;tongwan;Request the submitter to verify the fix with the latest version of JDK at https://jdk.java.net/17/;;;","2021-05-10 04:48;tongwan;No verification from the submitter.;;;",,,,,,,,,,,,,,,,,,,,,
Add support for extended map modes in mapped segments,JDK-8264763,5046208,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-04-06 03:49,2021-04-08 06:47,2023-10-01 09:57,2021-04-08 06:47,15,16,repo-panama,,,,,,repo-panama,core-libs,,0,foreign-memaccess,,,,,,,,,,,,,,,,,,,,,,Mapped memory segments do not support (by accident) extended map modes introduced by JEP 352.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sa2j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ByteBuffer.byteOrder(BIG_ENDIAN).asXBuffer.put(Xarray) and ByteBuffer.byteOrder(nativeOrder()).asXBuffer.put(Xarray) are slow,JDK-8264762,5044489,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,webbuggrp,webbuggrp,2021-03-14 07:10,2021-05-06 19:13,2023-10-01 09:57,2021-04-29 08:35,17,,,,,,,,17,core-libs,,0,dcsswa,noreg-cleanup,performance,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Java 17-ea+13 (and Java 15+36), Windows 10 x64

A DESCRIPTION OF THE PROBLEM :
The task is to serialize an array of floats to a byte array as fast as possible (this time with byte order = BIG_ENDIAN), see https://www.reddit.com/r/java/comments/m4b9f6/ for the full context. The fastest available options are using a ByteBuffer and/or a VarHandle. However, one specific shape is unexpectedly slow:

```java
// Fast! Good!
@Benchmark
public byte[] byteBufferBigEndian() {
    ByteBuffer byteBuffer = ByteBuffer.allocate(byteSize);
    byteBuffer.asFloatBuffer().put(floats);
    return byteBuffer.array();
}

// Slow!
@Benchmark
public byte[] byteBufferBigEndianSwapMemoryCopy() {
    ByteBuffer byteBuffer = ByteBuffer.allocate(byteSize);
    // The wrap() forces usage of Unsafe.swapCopyMemory() which is twice as slow as the other variant:
    byteBuffer.asFloatBuffer().put(FloatBuffer.wrap(floats));
    return byteBuffer.array();
}
```

The problem is that even though the more natural approach to call `.put(Xarray)` is fast, an alternative `put(FloatBuffer.wrap(floats))` is much slower because the latter uses Unsafe.swapCopyMemory under the hood which, on my system, is much worse than the alternative even though the source is the exact same array of floats.

```java
// Unusable because it's a preview feature.
@Benchmark
public byte[] memorySegment() {
    try (MemorySegment segment = MemorySegment.ofArray(floats)) {
        return segment.toByteArray();
    }
}

// Slow!
@Benchmark
public byte[] byteBufferNativeOrder() {
    ByteBuffer byteBuffer = ByteBuffer.allocate(byteSize).order(ByteOrder.nativeOrder());
    byteBuffer.asFloatBuffer().put(floats);
    return byteBuffer.array();
}

// Fast!
@Benchmark
public byte[] byteBufferNativeOrderMemoryCopy() {
    ByteBuffer byteBuffer = ByteBuffer.allocate(byteSize).order(ByteOrder.nativeOrder());
    // The wrap() forces usage of Unsafe.copyMemory() which is twice as fast as the other variant:
    byteBuffer.asFloatBuffer().put(FloatBuffer.wrap(floats));
    return byteBuffer.array();
}
```

The problem is that the more natural approach to call `.put(Xarray)` is much slower than the less obvious alternative `put(FloatBuffer.wrap(floats))`. because the former is missing a bulk approach while the latter uses Unsafe.copyMemory under the hood.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run https://gitlab.com/janecekpetr/benchmarks/-/blob/master/src/main/java/com/gitlab/janecekpetr/benchmarks/FloatSerializationBenchmark.java
by
1. cloning the repo
2. mvn verify
3. java -jar target/benchmarks.jar FloatSerializationBenchmark

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
I expect byteBuffer.asFloatBuffer().put(FloatBuffer.wrap(floats)) to perform just as fast as byteBuffer.asFloatBuffer().put(floats).
ACTUAL -
Benchmark                          (size)   Mode  Cnt         Score        Error  Units
byteBufferBigEndian                  2048  thrpt    5    800522,219 ±  69499,093  ops/s
byteBufferBigEndianSwapMemoryCopy    2048  thrpt    5    371907,046 ±   9270,812  ops/s
byteBufferNativeOrder                2048  thrpt    5    756516,722 ±  33633,399  ops/s
byteBufferNativeOrderMemoryCopy      2048  thrpt    5   1208847,781 ±  67935,938  ops/s
dataOutputStream                     2048  thrpt    5     99949,822 ±  17233,752  ops/s
kryoLikeUnsafe                       2048  thrpt    5   1248879,311 ±  26843,663  ops/s
manualUnpacking                      2048  thrpt    5    181612,250 ±  21232,457  ops/s
objectOutputStream                   2048  thrpt    5    102348,095 ±   4135,803  ops/s
varHandleBigEndian                   2048  thrpt    5    726448,503 ±  13138,903  ops/s
varHandleNativeOrder                 2048  thrpt    5    698638,620 ±  20742,939  ops/s

---------- BEGIN SOURCE ----------
@Fork(1)
@Warmup(iterations = 3, time = 3, timeUnit = TimeUnit.SECONDS)
@Measurement(iterations = 5, time = 6, timeUnit = TimeUnit.SECONDS)
@State(Scope.Thread)
public class FloatSerializationBenchmark {

    @Param({/*""8"", ""32"", ""128"", ""512"",*/ ""2048""})
    private int size;
    private float[] floats;
    private int byteSize;

    @Setup
    public void setup() {
        floats = new float[size];
        ThreadLocalRandom random = ThreadLocalRandom.current();
        for (int i = 0; i < floats.length; i++) {
            floats[i] = random.nextFloat();
        }

        byteSize = size * Float.BYTES;
    }

    @Benchmark
    public byte[] byteBufferBigEndian() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(byteSize).order(ByteOrder.BIG_ENDIAN);
        byteBuffer.asFloatBuffer().put(floats);
        return byteBuffer.array();
    }
    
    @Benchmark
    public byte[] byteBufferBigEndianSwapMemoryCopy() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(byteSize).order(ByteOrder.BIG_ENDIAN);
        // The wrap() forces usage of Unsafe.swapCopyMemory() which is twice as slow as the other variant:
        byteBuffer.asFloatBuffer().put(FloatBuffer.wrap(floats));
        return byteBuffer.array();
    }

}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JI-9069482,,,,,,"2021-04-06 03:44;sswsharm;Main.java;https://bugs.openjdk.org/secure/attachment/93979/Main.java",,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i2rzhf:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-04-06 03:43;sswsharm;Issue is reproduced, based on the benchmark scores, byteBufferBigEndianSwapMemoryCopy() is slower than byteBufferBigEndian() and byteBufferNativeOrder() is slower than byteBufferNativeOrderMemoryCopy()

OS : Windows 10
JDK 17ea16: Fail

Output: 

Benchmark                               (size)   Mode  Cnt       Score       Error  Units
Main.byteBufferBigEndian                  2048  thrpt    5  659178.063 ± 14060.817  ops/s
Main.byteBufferBigEndianSwapMemoryCopy    2048  thrpt    5  363971.047 ±  5675.516  ops/s
Main.byteBufferNativeOrder                2048  thrpt    5  664326.086 ±  6632.182  ops/s
Main.byteBufferNativeOrderMemoryCopy      2048  thrpt    5  891679.690 ± 69444.108  ops/s
Main.dataOutputStream                     2048  thrpt    5   89982.575 ±  3565.156  ops/s
Main.kryoLikeUnsafe                       2048  thrpt    5  924942.508 ± 17798.983  ops/s
Main.manualUnpacking                      2048  thrpt    5  174852.005 ±  1615.295  ops/s
Main.objectOutputStream                   2048  thrpt    5   58199.461 ±   639.271  ops/s
Main.varHandleBigEndian                   2048  thrpt    5  692395.141 ± 19270.884  ops/s
Main.varHandleNativeOrder                 2048  thrpt    5  692172.985 ± 17666.060  ops/s

Moving it to dev team for further evaluation.;;;","2021-04-29 08:35;roboduke;Changeset: 6bb71d9e
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-04-29 15:34:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6bb71d9e25f04dbde13d010e2e6279c8059c2cdb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
JVM crashes when two threads encounter the same resolution error,JDK-8264760,5046204,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,whuang,whuang,whuang,2021-04-06 02:15,2021-05-12 17:32,2023-10-01 09:57,2021-05-07 06:24,17,,,,,,,,17,hotspot,,0,classloading,huawei-interest,nestmates,,,,,,,,,,,,,,,,,,,,"Reproduce: 
 javac Test.java
 java -jar asmtools.jar jcoder Host.jcod
 java Test

Then in most time (for it is a multithread bug) , we will get the crash :

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/wanghuang/repo/openjdk/jdk/src/hotspot/share/classfile/systemDictionary.cpp:1939), pid=89089, tid=87530
#  assert(entry->nest_host_error() == __null) failed: Nest host error message already set!
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.wanghuang.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-adhoc.wuyan.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x16b915c]  SystemDictionary::add_nest_host_error(constantPoolHandle const&, int, char const*)+0x114
#
# Core dump will be written. Default location: /home/wanghuang/bug/0406/core.%e.89089.%t
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

The main reason of this crash is this code:

``` java
void SystemDictionary::add_nest_host_error(const constantPoolHandle& pool,
                                           int which,
                                           const char* message) {
  unsigned int hash = resolution_errors()->compute_hash(pool, which);
  int index = resolution_errors()->hash_to_index(hash);
  {
    MutexLocker ml(Thread::current(), SystemDictionary_lock);
    ResolutionErrorEntry* entry = resolution_errors()->find_entry(index, hash, pool, which);
    if (entry != NULL) {
      assert(entry->nest_host_error() == NULL, ""Nest host error message already set!"");
      entry->set_nest_host_error(message);
    } else {
      resolution_errors()->add_entry(index, hash, pool, which, message);
    }
  }
}
```

This bug will reproduce in two interpret threads(In our case) or  compiler threads(if we resolve the classes from compiler thread without interpret thread) executing. Thread A get a `resolution_errors` and called  `add_entry`. Thread B will get `entry` from `find_entry` and trigger the assert. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-04-06 20:06;whuang;Host.java;https://bugs.openjdk.org/secure/attachment/93994/Host.java","2021-04-06 02:12;whuang;Host.jcod;https://bugs.openjdk.org/secure/attachment/93976/Host.jcod","2021-04-06 02:12;whuang;Test.java;https://bugs.openjdk.org/secure/attachment/93977/Test.java",,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2sa1n:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-06 02:46;dholmes;The MutexLocker for the SystemDictionary_lock should prevent the race you describe.;;;","2021-04-06 02:50;dholmes;What does the Host.jcod definition provide? i.e how does it different from the Java version of class Host?;;;","2021-04-06 11:28;mseledtsov;ILW = HLM = P3;;;","2021-04-06 13:40;hseigel;The java version of class Host has a NestMembers attribute with Host$Member listed as a nest member.

The jcod version of class Host has an empty NestMembers attribute.

Both the java and jcod versions of class Host$Member have class Host as their NestHost.;;;","2021-04-06 18:23;dholmes;Thanks for that analysis [~hseigel].;;;","2021-04-06 18:34;dholmes;The assertion is invalid and the logic is wrong in SystemDictionary::add_nest_host_error. In InstanceKlass::nest_host we can have two threads both resolving the nest-host and both discovering it is not valid and so they both call SystemDictionary::add_nest_host_error. Whomever is first should install the error information. The second thread should find the existing entry and do nothing:

    MutexLocker ml(Thread::current(), SystemDictionary_lock);
    ResolutionErrorEntry* entry = resolution_errors()->find_entry(index, hash, pool, which);
    if (entry == NULL) {
      resolution_errors()->add_entry(index, hash, pool, which, message);
    } 
    // else someone else beat us to installing the resolution error;;;","2021-04-06 18:43;dholmes;Actually I think there is a bigger bug here. We call:

 SystemDictionary::add_nest_host_error(cph, _nest_host_index, msg);

when we failed to establish that the class at _nest_host_index was our valid nest host. But that should be an error against the current class, not an error against the purported host class!

CORRECTION: there is no issue here. We are associating the error with the current class's constant-pool, in the resolution-error-table, so it is specific to the current class.;;;","2021-04-06 20:14;whuang;Thank you for your explanation [~hseigel]. The only difference between jcod and java file is the line 104 in jcod file. I make  an empty NestMember here. ;;;","2021-04-06 20:16;whuang;I agree with [~dholmes]'s comments here:

```c++
    MutexLocker ml(Thread::current(), SystemDictionary_lock);
    ResolutionErrorEntry* entry = resolution_errors()->find_entry(index, hash, pool, which);
    if (entry == NULL) {
      resolution_errors()->add_entry(index, hash, pool, which, message);
    }
    // else someone else beat us to installing the resolution error
```
In my opinion, this assert (and !NULL branch ) is useless here.;;;","2021-04-06 20:51;whuang;I have uploaded the other `Host.java` . In this java file, we have two methods : `foo` and `foo2`. (The original one has only one method.) Both of two methods will trigger the same resolution error, which can also trigger this bug. It can be also utlized as a test case for this bug.;;;","2021-04-07 17:01;dholmes;[~whuang] are you actually intending to provide the fix here, and if so just for the assert or for the bigger issue I outlined? If the former I will create a new bug for the bigger issue. Thanks.;;;","2021-04-07 18:48;whuang;[~dholmes] I will do the former for this issue to fix bug. Thank you for fixing the bigger one.;;;","2021-04-20 19:57;dholmes;Just to clarify, there is no actual bigger issue to address. See my edited comment above.;;;","2021-05-07 06:24;roboduke;Changeset: 9a19a0cc
Author:    Wang Huang <whuang@openjdk.org>
Committer: Harold Seigel <hseigel@openjdk.org>
Date:      2021-05-07 12:55:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9a19a0cc1087311b01c5c15432c4451f1ea24fad
;;;",,,,,,,,,,,,,,
x86_32 Minimal VM build failure after JDK-8262355,JDK-8264759,5046203,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,shade,shade,shade,2021-04-06 02:13,2021-07-15 10:01,2023-10-01 09:57,2021-04-06 11:15,17,,,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-build,oraclejdk-na,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,"* For target hotspot_variant-minimal_libjvm_objs_sharedRuntime_x86_32.o:
/home/shade/trunks/jdk/src/hotspot/cpu/x86/sharedRuntime_x86_32.cpp: In static member function 'static OopMap* RegisterSaver::save_live_registers(MacroAssembler*, int, int*, bool, bool)':
/home/shade/trunks/jdk/src/hotspot/cpu/x86/sharedRuntime_x86_32.cpp:234:22: error: 'opmask_state_bytes' was not declared in this scope
  234 |       __ subptr(rsp, opmask_state_bytes);
      |                      ^~~~~~~~~~~~~~~~~~

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262355,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,,"0|i2sa1f:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-06 11:15;roboduke;Changeset: a756d8d7
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-04-06 18:14:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a756d8d7
;;;","2021-04-07 02:28;thartmann;ILW = HMH = P1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
SIGFPE crash with option FlightRecorderOptions:threadbuffersize=30M,JDK-8264752,5046196,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hshi,hshi,hshi,2021-04-06 00:21,2023-08-15 08:35,2023-10-01 09:57,2021-04-27 08:45,11,17,8,,,,,,17,hotspot,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,tencent-interest,,,,,,,,,,,,,,,"build/linux-x86_64-server-release/images/jdk/bin/java  -XX:StartFlightRecording -XX:FlightRecorderOptions:threadbuffersize=30M Hello.java

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGFPE (0x8) at pc=0x00007f2f32a935a5, pid=30363, tid=30364

# Problematic frame:
# V  [libjvm.so+0x8825a5]  div_total_by_per_unit(unsigned long&, unsigned long&)+0xa5
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:StartFlightRecording -XX:FlightRecorderOptions:threadbuffersize=30M --add-modules=ALL-DEFAULT jdk.compiler/com.sun.tools.javac.launcher.Main Hello.java

Host: Intel(R) Xeon(R) Platinum 8255C CPU @ 2.50GHz, 96 cores, 250G, CentOS Linux release 7.2 (Final)
Time: Tue Apr  6 15:19:03 2021 CST elapsed time: 0.048142 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007f2f2c020870):  JavaThread ""main"" [_thread_in_vm, id=30364, stack(0x00007f2f3451a000,0x00007f2f3461b000)]

Stack: [0x00007f2f3451a000,0x00007f2f3461b000],  sp=0x00007f2f34619970,  free space=1022k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8825a5]  div_total_by_per_unit(unsigned long&, unsigned long&)+0xa5
V  [libjvm.so+0x882799]  JfrMemorySizer::adjust_options(JfrMemoryOptions*)+0x139
V  [libjvm.so+0x88b337]  JfrOptionSet::adjust_memory_options() [clone .part.20]+0xa7
V  [libjvm.so+0x88c3d5]  JfrOptionSet::initialize(Thread*)+0x355
V  [libjvm.so+0x89b2ab]  JfrRecorder::on_create_vm_2()+0xab
V  [libjvm.so+0x85aaa9]  Jfr::on_create_vm_2()+0x9
V  [libjvm.so+0xed30c4]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x724
V  [libjvm.so+0x8df9e2]  JNI_CreateJavaVM+0x52
C  [libjli.so+0x4e61]  JavaMain+0x91
C  [libjli.so+0x8b39]  ThreadJavaMain+0x9
",,,,,,,,,,JDK-8274650,JDK-8269109,JDK-8269430,,,,,,,,,,,,,,,,,,,JDK-8241887,,JDK-8241773,,,,,,,,,,JDK-8266206,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s9zv:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-04-06 00:25;hshi;This crash happens in release build.
Default memory size is 10M (default_memory_size). In JfrMemorySizer::adjust_options, as only thread buffer size is configured, it invokes thread_buffer_size(JfrMemoryOptions* options) and crash in following statement. Because memory size is smaller than buffer size.

options->buffer_count = div_total_by_per_unit(options->memory_size, options->global_buffer_size);;;;","2021-04-06 01:40;hshi;Also crash with -XX:StartFlightRecording -XX:FlightRecorderOptions:threadbuffersize=30M,memorysize=10M -version, current code doen't check thread buffer size should not larger than memory size. It only checks global buffer size and memory size.;;;","2021-04-13 18:32;hshi;JDK11& JDK8 also crash

[shihui@kalinshi ~/jdks/openjdk8/jdk8u-dev]$ ./build/linux-x86_64-normal-server-release/images/j2sdk-image/bin/java -XX:StartFlightRecording -XX:FlightRecorderOptions:threadbuffersize=30M,memorysize=10M -version
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGFPE (0x8) at pc=0x00007fa4a9f97a75, pid=22319, tid=0x00007fa4ab4d6700
#
# JRE version: OpenJDK Runtime Environment (8.0) (build 1.8.0-shihui_2021_03_23_14_06-b00)
# Java VM: OpenJDK 64-Bit Server VM (25.71-b00 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# V  [libjvm.so+0x67aa75]  JfrMemorySizer::adjust_options(JfrMemoryOptions*)+0x295
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /home/shihui/jdks/openjdk8/jdk8u-dev/hs_err_pid22319.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
Aborted

[shihui@kalinshi /data/shihui/codes/openjdk_11u/jdk11u-dev]$ ./build/linux-x86_64-normal-server-release/images/jdk/bin/java -XX:StartFlightRecording -XX:FlightRecorderOptions:threadbuffersize=30M -version
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGFPE (0x8) at pc=0x00007fb629d88835, pid=11486, tid=11487
#
# JRE version: OpenJDK Runtime Environment (11.0.12) (build 11.0.12-internal+0-adhoc.shihui.jdk11u-dev)
# Java VM: OpenJDK 64-Bit Server VM (11.0.12-internal+0-adhoc.shihui.jdk11u-dev, mixed mode, tiered, compressed oops, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x8d7835]  div_total_by_per_unit(unsigned long&, unsigned long&)+0xa5
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /data/shihui/codes/openjdk_11u/jdk11u-dev/hs_err_pid11486.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted;;;","2021-04-27 08:45;roboduke;Changeset: 377b3461
Author:    Hui Shi <hshi@openjdk.org>
Committer: Markus Grönlund <mgronlun@openjdk.org>
Date:      2021-04-27 15:44:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/377b3461
;;;","2021-05-10 13:52;clanger;[~hshi] Can you please add some fix request comment, e.g. whether the fix applies clean, what testing you did, risk assesment...;;;","2021-05-17 07:32;andrew;I see no fix request comment for 8u either, so it is not clear whether this needs to be reviewed or not for inclusion. I see no review thread on the 8u mailing list. I'm therefore removing the jdk8u-fix-request. Please request again when the patch is in 11u and an 8u backport has either been reviewed on the 8u mailing list or the patch is known to apply cleanly (with automated shuffling) to 8u.
;;;","2021-05-25 09:31;sgehwolf;Removing the jdk11u-fix-request label until a fix request comment is added.;;;","2021-06-22 03:52;hshi;sorry for adding  jdk11u-fix-request label too early.

Fix Request (OpenJDK 11u):

Please help approving backporting this JFR fix to OpenJDK 11u. It fixes release/debug build crash when running JFR with following options

-XX:FlightRecorderOptions:threadbuffersize=30M;
-XX:FlightRecorderOptions:threadbuffersize=30M,memorysize=10M;
-XX:FlightRecorderOptions:globalbuffersize=10G; 

backport PR also includes follow on build failure fix in JDK-8266206.

RFR: https://github.com/openjdk/jdk11u-dev/pull/52;;;","2021-06-27 22:49;hshi;This bug cause 8u crash with simple command line option -XX:StartFlightRecording -XX:FlightRecorderOptions:threadbuffersize=30M,memorysize=10M -version. 

Review mail thread is https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-June/014028.html 

backport webrev includes follow on build failure fix in JDK-8266206;;;","2021-06-28 19:25;hshi;8u backport is reviewd  https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-June/014038.html
;;;","2021-07-06 02:35;sgehwolf;[~hshi] Please use ""Fix Request (OpenJDK 8u)"" header for fix request comments next time. It's not 100% clear which comments are for 8u approval. Also it looks like the fix will include JDK-8266206. Please apply for approval there too. I'll then approve both. Thanks!;;;","2021-07-07 18:15;hshi;[~sgehwolf] Thanks for your instruments. JDK-8266206 has jdk8u-fix-request label and backport issue.;;;","2021-08-09 18:26;hshi;[~sgehwolf] Could you please help approve this backport for this bug and JDK-8266206;;;","2021-08-10 01:25;sgehwolf;[~hshi] Approved. Please mention both bugs, JDK-8266206 and this one, in the commit message when you push. Thanks!;;;","2021-10-01 07:16;evergizova;Fix Request (15u)
I'd like to backport this fix to 15u for parity with 11u.
The patch applies almost cleanly except for copyright years. Additionally the added test TestBadOptionValues.java was modified to pass successfully.
Tested with jdk/jfr tests, new test fails without the patch, passes with it.
Follow-up fix JDK-8266206 is planned to be backported as well.;;;",,,,,,,,,,,,,
Add forRemoval for deprecated classes and method in javax/swing/plaf/basic,JDK-8264743,5046186,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,trebari,trebari,2021-04-05 21:43,2022-02-28 16:39,2023-10-01 09:57,2022-02-17 01:37,19,,,,,,,,19,client-libs,,0,sn_110,sn_111,sn_112,,,,,,,,,,,,,,,,,,,,"Add forRemoval for classes and method those are getting deprecated under https://bugs.openjdk.java.net/browse/JDK-8049700.
Initial plan is to mark forRemoval  in JDK-19 and then remove these somewhere after JDK-22.",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280846,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,"0|i2s9xn:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-01-24 01:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7194
Date: 2022-01-24 09:38:09 +0000;;;","2022-01-27 10:21;kcr;This needs a CSR.;;;","2022-02-17 01:37;roboduke;Changeset: b4900b12
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-02-17 09:36:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b4900b1298e536c0ceaa77bc0ac0e8e6ccba6400
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JavaFX media stream stops playing after reconnecting via Remote Desktop,JDK-8264737,5046177,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,kcr,kcr,2021-04-05 16:11,2021-08-19 06:40,2023-10-01 09:57,2021-04-28 15:43,8,jfx11,jfx16,,,,,,jfx17,javafx,,0,sn_91,sn_92,,,,,,,,,,,,,,,,,,,,,"This is a follow-on bug to JDK-8239589.

To reproduce this:

1. Run any program that plays media (video and/or audio) on a Windows 10 remote desktop, for example, Ensemble8.
2. Disconnect from the remote desktop
3. Reconnect to the remote desktop

BUG: any media stream that was playing will no longer continue to play after reconnecting. 

Reloading the media stream works fine, as does playing a new media stream.

This bug happens even if the software pipeline is used, so is not in the graphics rendering code, and not directly related to JDK-8239589.",,,,,,,,,,JDK-8266599,JDK-8272721,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8239589,JDK-8267699,,,,,JDK-8267819,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2s9vn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2021-04-05 16:14;kcr;I suspect that something in DirectShow is causing this since: A) it happens with the software pipeline, which doesn't use any Direct3D rendering code; and B) it never happened when I was simulating the device removed events in the D3DPipeline, causing the code to go through all of the graphics pipeline reinitialization logic.
;;;","2021-04-16 20:40;almatvee;What is expected behavior here? Windows Media Player also stops playing video in this case and does not resume it after remote desktop is connected. Also, I cannot restart playing video in Windows Media Player using play/pause button.

As of JavaFX Media I am getting following error:
onError: MediaException: PLAYBACK_HALTED : IDirectSoundBuffer_GetStatus (NULL), IDirectSoundBuffer_GetCurrentPosition: (NULL), dwStatus: 5
Once halted we need to recreate media player. I will try investigate if it would be possible to pause and resume video if remote desktop is disconnected. If not possible I think it is not a bug which we will fix.;;;","2021-04-17 04:50;kcr;When you play a video in Firefox and then disconnect, it continues / resumes playing when you reconnect. That's an interesting finding about Windows Media Player.

If it isn't possible to pause and resume the stream, then would it be possible to recreate the underlying stream and then seek to the last known position, and play from there? If not, then it does seem possible that we won't be able to fix it.
;;;","2021-04-19 21:47;almatvee;I tested several Browser:
Firefox: Continues to play video, but no audio after reconnect.
Chrome: Continues to play video and audio works.
Edge: Same as Chrome.

I think first we should try to continue play video and audio after disconnect. It should be useful if app is used to play audio on headless system. If not possible, then pause/play. If play/pause not possible will resolve as won't fix.;;;","2021-04-28 15:43;roboduke;Changeset: 0a686130
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-04-28 22:42:18 +0000
URL:       https://git.openjdk.java.net/jfx/commit/0a6861304e142eed547f3c82b0d2e2a55f91b9b4
;;;",,,,,,,,,,,,,,,,,,,,,,,
Fix mistakes in FX API docs,JDK-8264736,5046174,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,nlisker,kcr,kcr,2021-04-05 15:03,2021-08-18 05:04,2023-10-01 09:57,2021-08-12 12:16,jfx16,,,,,,,,jfx17,javafx,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,"Issue for collecting API doc fixes for OpenJFX17:

1. Typo in cssref.html : ""horizontall""  --> ""horizontal""

2. MouseEvent: ""When mouse button is pressed"" --> ""a mouse""

3. Misplaced closing brace in link tag in TableRowSkinBase:
  modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableRowSkinBase.java:60: warning: nested tag: @link
   *           {@link javafx.scene.control.TableCell or {@link javafx.scene.control.TreeTableCell}}).
                                                        ^",,,,,,,,,,JDK-8272637,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s9uz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2021-08-12 12:16;roboduke;Changeset: 03b7215b
Author:    Nir Lisker <nlisker@openjdk.org>
Date:      2021-08-12 19:15:04 +0000
URL:       https://git.openjdk.java.net/jfx/commit/03b7215b68c22b73dbec4fd554c3edaccb0102b6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Document java-options limitations,JDK-8264730,5046166,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rgallard,herrick,herrick,2021-04-05 10:18,2021-06-28 13:34,2023-10-01 09:57,2021-06-28 13:34,16,17,,,,,,,17,docs,,0,,,,,,,,,,,,,,,,,,,,,,,"The ""--java-options"" jpackage option can be used to send any argument to the jli launcher, but some options conflict with the options automatically generated by jpackage.
The intent of this enhancement is to document those (possibly) conflicting options:
--module (or -m)
--module-path (or -p_
--class-path (or -classpath, or -cp, or -Djava.classpath=...)
-jar
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s9t7:",9223372036854775807,,,,,,,,,,,,,"2021-04-22 06:41;herrick;jpackage adds several arguments to jli java invocation, before those provided by the --java-options option.
 - For a class-path application:
Jpackage adds a default ""-Djava.class.path=<path to each jar in input dir>"" option.
If the --java-options value contains ""-cp"", ""-classpath"", or ""-Djava.class.path"" it will override this default , so you may need to include the default in your --java-options. for example, only one jar, ""foo.jar"" in input dir, but you also want to include classes from ""classes"" subdir, use ""-cp \$APPDIR/foo.jar:\$APPDIR/classes""
 - For a modular application 
Jpacakge will add a default --module-path $APPDIR\mods (which is where it will have put the app mods if not built into the runtime).
If you include a --module-path option in your --java-options option value, it will come after the default value, unlike classpath where one overrides the other, the composite module path is used, with the path you specify in --java-options searched first.
;;;","2021-04-22 06:44;herrick;something resembling the above should be added to Packaging Tool User's Guide, possibly in Section 3 under ""Set JVM Options""
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Random check-in failing header checks.,JDK-8264729,5046165,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,jlaskey,jlaskey,jlaskey,2021-04-05 10:03,2021-08-05 08:05,2023-10-01 09:57,2021-04-05 12:04,,,,,,,,,17,core-libs,,0,tier1,,,,,,,,,,,,,,,,,,,,,,"open/src/java.base/share/native/random/create_ziggurat_tables.c should not be in the sources.

The following had bad dates in copyright.

test/jdk/java/util/Random/RandomCanaryPi.java
test/jdk/java/util/Random/RandomTestBsi1999.java
test/jdk/java/util/Random/RandomTestChiSquared.java
test/jdk/java/util/Random/RandomTestCoverage.java
test/jdk/java/util/Random/RandomTestMoments.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s9sz:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2021-04-05 12:04;roboduke;Changeset: 92018991
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-04-05 19:03:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/92018991
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Multi-catch clause causes compiler exception because it uses the package-private supertype,JDK-8264696,5046070,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,vromero,webbuggrp,webbuggrp,2021-04-03 02:24,2023-04-05 04:12,2023-10-01 09:57,2021-04-08 14:36,11,14,15,16,17,8-pool,,,17,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
javac full version ""16+36-2231""

A DESCRIPTION OF THE PROBLEM :
The usage of a multi-catch clause may cause a compiler exception, whereas the equivalent code with separate catch clauses doesn't. Given 2 public exception classes which extend a package-private exception class in pkg2, when I have a multi-catch clause for both public exception classes in pkg1 and attempt to access a method such as `getMessage` inside it, then the compiler uses their package-private parent and gives a compiler error saying `getMessage` is in an inaccessible class.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
* create the 4 following files with the code as below:
src\pkg1\Test.java
src\pkg2\Child1Exception.java
src\pkg2\Child2Exception.java
src\pkg2\ParentException.java
* compile the files:
javac -d out --source-path src src\pkg1\Test.java src\pkg2\Child1Exception.java src\pkg2\Child2Exception.java src\pkg2\ParentException.java

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Compilation succeeds
ACTUAL -
src\pkg1\Test.java:22: error: Throwable.getMessage() is defined in an inaccessible class or interface
            e.getMessage();
             ^
1 error

---------- BEGIN SOURCE ----------
package pkg1;

import pkg2.Child1Exception;
import pkg2.Child2Exception;

class Test {

    void success() {
        try {
            foo();
        } catch (Child1Exception e) {
            e.getMessage();
        } catch (Child2Exception e) {
            e.getMessage();
        }
    }

    void fail() {
        try {
            foo();
        } catch (Child1Exception | Child2Exception e) {
            e.getMessage();
        }
    }

    void foo() throws Child1Exception, Child2Exception {
    }
}
====================================
package pkg2;

public class Child1Exception extends ParentException {
}
====================================
package pkg2;

public class Child2Exception extends ParentException {
}
====================================
package pkg2;

class ParentException extends Exception {
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Increase the accessibility of the parent class or use uni-catch clauses

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305649,JDK-8289975,,,,,JDK-6943289,,,,,,"2021-04-04 23:49;adev;src.zip;https://bugs.openjdk.org/secure/attachment/93945/src.zip",,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i2s97v:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2021-04-04 23:53;adev;Using a package-private parent gives a compiler error saying `getMessage` is in an inaccessible class when using multi catch statements. See attachment for the source code.
The child exception classes are public.

src\pkg1\Test.java:22: error: getMessage() in Throwable is defined in an inaccessible class or interface
            e.getMessage();;;;","2021-04-08 14:36;roboduke;Changeset: 57f1e7d9
Author:    Guoxiong Li <lgxbslgx@gmail.com>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2021-04-08 21:34:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/57f1e7d9
;;;","2021-05-11 10:07;adev;Requested the submitter to see if the bug is fixed in the latest build at https://jdk.java.net/17/ b21. ;;;","2021-05-11 10:17;adev;Reply received from the submitter
==============================
I’ve verified and the issue is indeed fixed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Incomplete comment in build.tools.generatecharacter.GenerateCharacter,JDK-8264678,5046083,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,redestad,asarkar,asarkar,2021-04-03 13:50,2021-05-06 19:11,2023-10-01 09:57,2021-04-28 12:51,17,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"The fix for JDK-8263677 added an incomplete comment in build.tools.generatecharacter.GenerateCharacter.

https://github.com/openjdk/jdk/blob/e152cc0312915d48efc67a133195b38ee9e45306/make/jdk/src/classes/build/tools/generatecharacter/GenerateCharacter.java#L412

The text ""(this property includes"" needs to be completed or removed.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263677,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b14,17,,,,,,,,"0|i2s9ar:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-04-05 23:39;michaelm;Assigning to Claes who was owner of JDK-8263677;;;","2021-04-28 12:51;roboduke;Changeset: 9df6cc7c
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2021-04-28 19:51:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9df6cc7cc2633e4231b9b69bed8a0f9e13ec74a7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"MemoryLeak: Progressindicator leaks, when treeShowing is false",JDK-8264677,5046081,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fkirmaier,fkirmaier,fkirmaier,2021-04-03 08:28,2021-04-27 11:24,2023-10-01 09:57,2021-04-27 04:12,jfx16,,,,,,,,jfx17,javafx,,0,,,,,,,,,,,,,,,,,,,,,,,"The ProgressIndicator leaks, when treeShowing is false.
PR with unit-test will follow.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s9ab:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-04-27 04:12;roboduke;Changeset: 483f171a
Author:    Florian Kirmaier <fkirmaier@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-04-27 11:11:29 +0000
URL:       https://git.openjdk.java.net/jfx/commit/483f171a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
AppContext.dispose uses obsolete ThreadGroup.stop,JDK-8264674,5046077,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alanb,alanb,alanb,2021-04-03 07:18,2021-10-31 02:12,2023-10-01 09:57,2021-10-31 02:12,repo-loom,,,,,,,,repo-loom,client-libs,,0,sn_92,,,,,,,,,,,,,,,,,,,,,,"ThreadGroup.stop is terminally degraded in the main line and degraded to throw UOE in the loom repo. This impacts AppContext.dispose which seems to use ThreadGroup::stop to ""stop"" all remaining threads in the group. This impacts a number of tests with exceptions like the following:

java.lang.UnsupportedOperationException
	at java.base/java.lang.ThreadGroup.stop(ThreadGroup.java:533)
	at java.desktop/sun.awt.AppContext.lambda$dispose$0(AppContext.java:504)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:312)
	at java.desktop/sun.awt.AppContext.dispose(AppContext.java:503)
	at bug6190373.main(bug6190373.java:66)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:97)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1502)

Tests that fail due to this are:

java/awt/AppContext/ApplicationThreadsStop/ApplicationThreadsStop.java 
sun/awt/AppContext/8012933/Test8012933.java 
javax/swing/system/6799345/TestShutdown.java 
javax/swing/plaf/metal/MetalUtils/bug6190373.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s99f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-04-09 02:25;alanb;If AppContext can be changed in the main line to refrain from using Thread/ThreadGroup.stop then that would be great. For now we have the failing tests excluded in the loom repo.;;;","2021-08-10 12:33;serb;I will take care of all thread group-based sandboxing in the JDK, the app context is one of such sandboxing. I plan to drop all of them in jdk18.;;;","2021-10-31 02:12;alanb;I've put a temporary fix into the loomrepo  to replace the use of ThreadGroup::stop with Thread::stop on all threads in the group. Thread.stop is also terminally deprecated so this is very temporary. We need the AppContext changed to drop all use of ThreadGroup/Thread.stop.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
runtime/ParallelLoad/ParallelSuperTest.java timed out,JDK-8264672,5046075,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,dcubed,dcubed,2021-04-03 06:02,2021-04-14 17:25,2023-10-01 09:57,2021-04-08 04:45,17,,,,,,,,17,hotspot,,0,intermittent,tier5,,,,,,,,,,,,,,,,,,,,,"The following test timed out in the JDK17 CI:

runtime/ParallelLoad/ParallelSuperTest.java

Here's a snippet from the log file:

#section:main
----------messages:(7/449)----------
command: main ParallelSuperTest -parallel -parallelCapable
reason: User specified action: run main/othervm ParallelSuperTest -parallel -parallelCapable 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
Timeout information:
--- Timeout information end.
elapsed time (seconds): 508.829
----------configuration:(5/205)----------
Boot Layer
  add modules: java.base                                
  add exports: java.base/jdk.internal.misc              ALL-UNNAMED
               java.base/jdk.internal.org.objectweb.asm ALL-UNNAMED

----------System.out:(15/513)----------
Thread 1 was started...
Loading Thread #1: Starting...
MainThread: t2 waits
Loading Thread #1: ClassInLoader
Loading Thread #1: CP1.foo()
Loading Thread #1: loading A extends B
Thread 2 was started...
Loading Thread #2: Starting...
Loading Thread #2: ClassInLoader
Loading Thread #2: CP2.foo()
Loading Thread #2: loading B extends A
Loading Thread #2: Exception is caught: java.lang.ClassCircularityError: B
Loading Thread #2: Finished
Loading Thread #1: t1 waits parallelCapable loader
Timeout refired 480 times
----------System.err:(3/186)----------
java version ""17-ea"" 2021-09-14 LTS
Java(TM) SE Runtime Environment (fastdebug build 17-ea+17-LTS-1348)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 17-ea+17-LTS-1348, mixed mode)
----------rerun:(40/6860)*----------

<snip>

result: Error. Program `/opt/mesos/jib-master/install/jdk-17+17-1348/macosx-x64-debug.jdk/jdk-17/fastdebug/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 508824ms).

This test task's JVM args are: -Xshare:off -showversion

This test runs three configurations:

 * @run main/othervm ParallelSuperTest
 * @run main/othervm ParallelSuperTest -parallel
 * @run main/othervm ParallelSuperTest -parallel -parallelCapable

in the same @test. Perhaps that's too much for one default
timeout value of 2 minutes (X default timeoutFactor of 4 for a
total timeout value of 8 minutes).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x_10.15,,,,,,"0|i2s98z:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-06 11:09;mseledtsov;ILW = MLM = P4;;;","2021-04-06 12:38;coleenp;Thread 2 sent a notify to Thread 1 before it locked the lock that it wanted to be notified of.

Loading Thread #2: loading B extends A
Loading Thread #2: Exception is caught: java.lang.ClassCircularityError: B
Loading Thread #2: Finished
Loading Thread #1: t1 waits parallelCapable loader;;;","2021-04-08 04:45;roboduke;Changeset: 255afbea
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-04-08 11:44:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/255afbea
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Change implementation of safeAdd/safeMult in the LCMSImageLayout class,JDK-8264666,5046061,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,serb,serb,2021-04-02 16:02,2022-12-02 00:42,2023-10-01 09:57,2022-04-28 22:55,11,17,8,,,,,,19,client-libs,,0,11-bp,17-bp,cssn22_07_01,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,The LCMSImageLayout class has its own implementation of methods similar to  Math.multiplyExact/addExact.,,,,,,,,,,JDK-8288095,JDK-8289789,JDK-8297136,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s95v:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-04-21 21:42;serb;After some investigation, I have found that implementations of safeAdd/safeMult in the LCMSImageLayout are wrong.;;;","2022-04-28 22:55;dukebot;Changeset: 40f19c01
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-04-29 05:53:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/40f19c014fed37b09db409cb9507f68f5011f139
;;;","2022-06-05 14:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/430
Date: 2022-06-03 21:27:41 +0000;;;","2022-06-06 20:08;serb;Fix request (17u)

- Justification: The data validation code is improved to prevent the jvm crash
- Risk Analysis: Low
- Testing: The added test failed before the fix and pass after. The :jdk_desktop tests are all green.
Review for jdk17u-dev: https://github.com/openjdk/jdk17u-dev/pull/430
Review for the mainline: https://github.com/openjdk/jdk/pull/3333;;;","2022-11-15 07:32;mbaesken;JDK11 backport request
I would like to have the patch in jdk11 as well, to prevent the crash shown by the reproducer test/jdk/sun/java2d/cmm/ColorConvertOp/UnexpectedSourceImageSize.java  .
The patch is low risk and almost clean (copyright header does not match nicely).;;;","2022-11-15 07:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1522
Date: 2022-11-15 15:27:33 +0000;;;","2022-11-17 07:15;mbaesken;The test case  test/jdk/sun/java2d/cmm/ColorConvertOp/UnexpectedSourceImageSize.java  crashes jdk8 as well, so adding 8. 
Also I wonder, why   public static LCMSImageLayout createImageLayout(Raster r)  does not call verify(), but  public static LCMSImageLayout createImageLayout(BufferedImage image)   does , at least on  some code path. Are we always sure that the verification is never needed when using createImageLayout(Raster r) ?
See https://github.com/openjdk/jdk/blob/master/src/java.desktop/share/classes/sun/java2d/cmm/lcms/LCMSImageLayout.java#L392

;;;","2022-12-02 00:42;serb;The createImageLayout(Raster r) has a typecheck for ByteComponentRaster which is our internal class with its own validation during construction.;;;",,,,,,,,,,,,,,,,,,,,
Update test SuspendWithCurrentThread.java to verify that suspend doesn't exit until resumed,JDK-8264663,5046057,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2021-04-02 13:21,2021-05-03 20:17,2023-10-01 09:57,2021-04-26 12:49,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"Test test/hotspot/jtreg/serviceability/jvmti/SuspendWithCurrentThread/SuspendWithCurrentThread.java

tries to suspend the thread list which includes the current thread. However, it suspends and resumes list under the same agent_monitor lock.

The test really should hang. See fix in loom:
https://github.com/openjdk/loom/commit/c088b36d0e94fe7527239f716754d395675d3e1e

The test should be updated in a similar way. Also, it should check that resume is actually called before test continue execution after suspend.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257831,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s94z:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-04-04 05:57;dholmes;[~rehn] also discovered this and has included a fix as part of JDK-8257831;;;","2021-04-05 15:26;lmesnik;The test fix in  JDK-8257831 just removes deadlock but doesn't verify that SuspendWithCurrentThread doesn't exit. So this issue is still actual. Currently, SuspendWithCurrentThread doesn't block the current thread. The thread is suspended only during leaving VM. So some native code might be still executed between these two points.  It still should be tested.

;;;","2021-04-26 12:49;roboduke;Changeset: b5c63513
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2021-04-26 19:48:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b5c63513
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
runtime/InternalApi/ThreadCpuTimesDeadlock.java crash in fastdebug C2 with -XX:-UseTLAB,JDK-8264649,5046037,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hshi,hshi,hshi,2021-04-02 04:57,2021-07-01 04:08,2023-10-01 09:57,2021-04-09 17:04,17,,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,,"#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/data/shihui/codes/shihui_jdk_master/jdk/src/hotspot/share/opto/compile.cpp:2376), pid=5319, tid=5335
#  fatal error: no reachable node should have no use


Current CompileTask:
C2:   1108  587 %     4       ThreadCpuTimesDeadlock$1::run @ 0 (11 bytes)

Stack: [0x00002ab8df703000,0x00002ab8df804000],  sp=0x00002ab8df7ff2f0,  free space=1008k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x9383b0]  Compile::check_no_dead_use() const+0x370
V  [libjvm.so+0x947969]  Compile::Optimize()+0x11c9
V  [libjvm.so+0x948d40]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1320
V  [libjvm.so+0x7ac566]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x116
V  [libjvm.so+0x956fb6]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc56
V  [libjvm.so+0x957aa8]  CompileBroker::compiler_thread_loop()+0x438
V  [libjvm.so+0x17bd153]  JavaThread::thread_main_inner()+0x283
V  [libjvm.so+0x17bd4e1]  JavaThread::run()+0x2e1
V  [libjvm.so+0x17c2638]  Thread::call_run()+0xf8
V  [libjvm.so+0x13a5816]  thread_native_entry(Thread*)+0x116",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263577,JDK-8265767,JDK-8269746,JDK-8268882,,,"2021-04-02 04:56;hshi;hs_err_pid5319.log;https://bugs.openjdk.org/secure/attachment/93930/hs_err_pid5319.log",,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s90j:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-02 05:15;hshi;Run with a simplified case

IO parm has no use in ThreadCpuTimesDeadlock$1::run after optimization and trigger fatal
 3  StartOSR  ===  3  0  [[ 3  5  6  7  8  9  10 ]]  #{0:control, 1:abIO, 2:memory, 3:rawptr:BotPTR, 4:return_address, 5:rawptr:BotPTR}
 6  Parm  ===  3  [[]] I_O !orig=[73] !jvms: ThreadCpuTimesDeadlock$1::run @ bci:0 (line 66)

The Node 6's last output is removed in PhaseIterGVN::subsume_node,  subsume old node 113 with node 6.
 113  Phi  ===  323  6  113  [[ 113 ]]  #abIO !jvms: Test$1::run @ bci:0 (line 7)  // only has one use to self
 6  Parm  ===  3  [[ 113 ]] I_O !orig=[73] !jvms: Test$1::run @ bci:0 (line 7)

After subsume_node, Node 113 is dead, node 6 has no use but not get removed.

#0  Node::del_out (this=0x7fffb8077298, n=0x7fffb8092760) at /mnt/d/codes/jdks/shihui-jdk-master/src/hotspot/share/opto/node.hpp:495
#1  0x00007ffffd422ea8 in Node::del_req (this=0x7fffb8092760, idx=0) at /mnt/d/codes/jdks/shihui-jdk-master/src/hotspot/share/opto/node.cpp:824
#2  0x00007ffffd4d2dc6 in PhaseIterGVN::subsume_node (this=0x7fffda65c600, old=0x7fffb807c808, nn=0x7fffb8077298) at /mnt/d/codes/jdks/shihui-jdk-master/src/hotspot/share/opto/phaseX.cpp:1483
#3  0x00007ffffd4d21b1 in PhaseIterGVN::transform_old (this=0x7fffda65c600, n=0x7fffb807c808) at /mnt/d/codes/jdks/shihui-jdk-master/src/hotspot/share/opto/phaseX.cpp:1322
#4  0x00007ffffd4d1b0f in PhaseIterGVN::optimize (this=0x7fffda65c600) at /mnt/d/codes/jdks/shihui-jdk-master/src/hotspot/share/opto/phaseX.cpp:1199
#5  0x00007ffffd2f4b86 in PhaseMacroExpand::expand_macro_nodes (this=0x7fffda65c580) at /mnt/d/codes/jdks/shihui-jdk-master/src/hotspot/share/opto/macro.cpp:2736
#6  0x00007ffffcc94661 in Compile::Optimize (this=0x7fffda65eb80) at /mnt/d/codes/jdks/shihui-jdk-master/src/hotspot/share/opto/compile.cpp:2314
#7  0x00007ffffcc8d4da in Compile::Compile (this=0x7fffda65eb80, ci_env=0x7fffda65f870, target=0x7ffff84e0f80, osr_bci=0, subsume_loads=true, do_escape_analysis=true, eliminate_boxing=true, install_code=true, directive=0x7ffff8252090)
    at /mnt/d/codes/jdks/shihui-jdk-master/src/hotspot/share/opto/compile.cpp:786
#8  0x00007ffffcb7c4f8 in C2Compiler::compile_method (this=0x7ffff82f77f0, env=0x7fffda65f870, target=0x7ffff84e0f80, entry_bci=0, install_code=true, directive=0x7ffff8252090)
    at /mnt/d/codes/jdks/shihui-jdk-master/src/hotspot/share/opto/c2compiler.cpp:103
#9  0x00007ffffccaa39b in CompileBroker::invoke_compiler_on_method (task=0x7fff9c000ec0) at /mnt/d/codes/jdks/shihui-jdk-master/src/hotspot/share/compiler/compileBroker.cpp:2310
#10 0x00007ffffcca8fbf in CompileBroker::compiler_thread_loop () at /mnt/d/codes/jdks/shihui-jdk-master/src/hotspot/share/compiler/compileBroker.cpp:1983
#11 0x00007ffffcccbc4f in CompilerThread::thread_entry (thread=0x7ffff8376f10, __the_thread__=0x7ffff8376f10) at /mnt/d/codes/jdks/shihui-jdk-master/src/hotspot/share/compiler/compilerThread.cpp:59
#12 0x00007ffffd72aedb in JavaThread::thread_main_inner (this=0x7ffff8376f10) at /mnt/d/codes/jdks/shihui-jdk-master/src/hotspot/share/runtime/thread.cpp:1463
#13 0x00007ffffd72ad84 in JavaThread::run (this=0x7ffff8376f10) at /mnt/d/codes/jdks/shihui-jdk-master/src/hotspot/share/runtime/thread.cpp:1446
#14 0x00007ffffd728386 in Thread::call_run (this=0x7ffff8376f10) at /mnt/d/codes/jdks/shihui-jdk-master/src/hotspot/share/runtime/thread.cpp:408
#15 0x00007ffffd474834 in thread_native_entry (thread=0x7ffff8376f10) at /mnt/d/codes/jdks/shihui-jdk-master/src/hotspot/os/linux/os_linux.cpp:714
#16 0x00007ffffe7976db in start_thread (arg=0x7fffda660700) at pthread_create.c:463
#17 0x00007ffffef0188f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

;;;","2021-04-02 05:19;hshi;This is the last IGVN in optimization, Node6 has no chance to get removed later. Proposed fix is checking if object has no output after subsume_node. If no use for nn, add nn into worklist.

diff --git a/src/hotspot/share/opto/phaseX.cpp b/src/hotspot/share/opto/phaseX.cpp
index 7a23f6c7b74..43321be69b6 100644
--- a/src/hotspot/share/opto/phaseX.cpp
+++ b/src/hotspot/share/opto/phaseX.cpp
@@ -1481,6 +1481,9 @@ void PhaseIterGVN::subsume_node( Node *old, Node *nn ) {
   temp->init_req(0,nn);     // Add a use to nn to prevent him from dying
   remove_dead_node( old );
   temp->del_req(0);         // Yank bogus edge
+  if (nn->outcnt() == 0) {
+    _worklist.push(nn);
+  }
 #ifndef PRODUCT
   if( VerifyIterativeGVN ) {
     for ( int i = 0; i < _verify_window_size; i++ ) {
;;;","2021-04-07 02:45;thartmann;Assert was added by JDK-8263577.

ILW = Assert during C2 compilation (harmless in product), reproducible with single test, no workaround = MMH = P3;;;","2021-04-09 17:04;roboduke;Changeset: 42f4d706
Author:    Hui Shi <hshi@openjdk.org>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-04-10 00:03:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/42f4d706
;;;",,,,,,,,,,,,,,,,,,,,,,,,
CMS ParScanClosure misses a barrier,JDK-8264640,5046026,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,akozlov,akozlov,akozlov,2021-04-02 01:29,2021-06-17 15:49,2023-10-01 09:57,2021-04-23 05:48,11,13,8,,,,,,13.0.8,hotspot,,0,gc-cms,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,oracle-gc-triage-seen,,,,,,,,,,,,,,,,,"During an investigation of a GC crash with the same stack trace as in JDK-8222798 I found there is a barrier missing in the code of ParScanClosure::do_oop_work. 

http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/91b61f678a19/src/share/vm/gc_implementation/parNew/parOopClosures.inline.hpp#l97

The comment states next lines are need to be ordered, but nothing prevents C compiler to reorder them. I spotted actual instances of this C code compiled by GCC 4.4.7 with the two reads reordered.

After adding a compiler barrier between reads, the rather frequent GC crash has gone.

Adding a root cause analysis from @JonhC

> We were seeing this as a crash when obtaining the size of an object to be copied. The klass was observed to be transiently NULL. We found that the object, reached through another reference path, had already been copied and the from-space oop placed on the task queue for subsequent reference field scanning. The task queue, however, had overflowed and the from-space oop was placed on the shared overflow queue where objects are chained together through their klass field. If the reads are ordered as they are in the code then everything is OK as per the comment at line 105 (in ParScanClosure::do_oop_work) but we found that gcc had reordered the reads in the non-compressed oops case. So the mark word is read and the object is observed to not forwarded (yet). Then, via another reference path, the object is copied, forwarded, and placed on the overflow task queue — over writing the from-space object’s klass. Then in the original path the klass is read and observed to be NULL or the next overflow entry — leading to the crash. When the from-space oop is dequeued, its klass is restored — which is what was observed in the core file.

https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-April/005662.html
",,,,,,,,,,JDK-8268983,JDK-8267107,JDK-8266046,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s8y3:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-04-09 05:30;roboduke;Changeset: efc81a3d
Author:    Anton Kozlov <akozlov@openjdk.org>
Date:      2021-04-09 12:30:04 +0000
URL:       https://git.openjdk.java.net/jdk13u-dev/commit/efc81a3d
;;;","2021-04-16 08:23;akozlov;Fix request 11u

CMS still can be enabled in 11. Due to low footprint and low risk of the change, it worth to have the fix even CMS is not used by default. Applies cleanly, no prerequisites. Tier1 tests pass (3 unrelated failures before and after the patch).;;;","2021-04-21 02:23;mdoerr;Performance remark
The fix looks correct, but maybe it's worth optimizing performance because the affected code is probably performance sensitive. OrderAccess::loadload inserts a dedicated memory barrier instruction on weak memory model platforms. Some platforms have a faster load_acquire implementation (aarch64, ppc64, ia64).
We could introduce and use klass_acquire() like klass_or_null_acquire().
I just wanted to mention this here. Not sure if somebody would like to change it in 13 before backporting.
;;;","2021-04-22 01:44;clanger;Approving for 11u. Please consider Martin's performance suggestion (e.g. do a follow up in 13u and backport it as well);;;","2021-04-23 05:15;roboduke;Changeset: efc81a3d
Author:    Anton Kozlov <akozlov@openjdk.org>
Date:      2021-04-09 12:30:04 +0000
URL:       https://git.openjdk.java.net/jdk13u/commit/efc81a3d
;;;","2021-04-27 04:33;akozlov;There is no such thing as klass_acquire in the mainline, but introducing it in the 13u does not look disruptive. This can be made. I'll think about this more.

I'm also not sure this code is such performance sensitive. I'm trying to think about when the barrier vs load-acquire difference will be visible at the most. The code copies objects (then barrier cost would be neglected) and fixes pointers. It should be many pointers to stress this code. And I assume the most of overhead comes from load-load semantic rather than the extra instruction, but it likely depends on the CPU.;;;","2021-04-27 07:32;akozlov;Fix request [8u]

CMS is usually selected by default in 8u. This change fixes a crash seen in production. The patch applies with a minor modifications. 

RFR: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-April/013743.html;;;",,,,,,,,,,,,,,,,,,,,,
CollectCLDClosure collects duplicated CLDs when dumping dynamic archive,JDK-8264634,5046017,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yyang,yyang,yyang,2021-04-01 21:36,2021-04-12 15:10,2023-10-01 09:57,2021-04-05 19:58,,,,,,,,,17,hotspot,,0,alibaba-interest,cds,dynamic-cds,,,,,,,,,,,,,,,,,,,,"[qingfeng.yy@e69e13043.et15sqa /home/qingfeng.yy/openjdk16_so_warning/jdk/build/linux-x86_64-server-slowdebug/images/jdk/bin]
$pwd
/home/qingfeng.yy/openjdk16_so_warning/jdk/build/linux-x86_64-server-slowdebug/images/jdk/bin

[qingfeng.yy@e69e13043.et15sqa /home/qingfeng.yy/openjdk16_so_warning/jdk/build/linux-x86_64-server-slowdebug/images/jdk/bin]
$./java -Dserver.port=11888 -XX:ArchiveClassesAtExit=fff.jsa -cp /home/qingfeng.yy/jar_index/demo/target/BOOT-INF/classes/Test.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/jackson-core-2.11.1.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/spring-boot-starter-2.3.2.RELEASE.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/tomcat-embed-websocket-9.0.37.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/spring-expression-5.2.8.RELEASE.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/spring-boot-starter-json-2.3.2.RELEASE.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/spring-web-5.2.8.RELEASE.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/logback-core-1.2.3.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/slf4j-api-1.7.30.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/jakarta.el-3.0.3.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/jackson-databind-2.11.1.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/spring-aop-5.2.8.RELEASE.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/spring-core-5.2.8.RELEASE.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/spring-boot-autoconfigure-2.3.2.RELEASE.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/spring-beans-5.2.8.RELEASE.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/spring-boot-2.3.2.RELEASE.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/logback-classic-1.2.3.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/jackson-datatype-jdk8-2.11.1.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/jackson-datatype-jsr310-2.11.1.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/jackson-module-parameter-names-2.11.1.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/jul-to-slf4j-1.7.30.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/log4j-api-2.13.3.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/spring-webmvc-5.2.8.RELEASE.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/log4j-to-slf4j-2.13.3.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/spring-jcl-5.2.8.RELEASE.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/spring-boot-starter-web-2.3.2.RELEASE.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/jakarta.annotation-api-1.3.5.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/jackson-annotations-2.11.1.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/spring-boot-starter-logging-2.3.2.RELEASE.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/tomcat-embed-core-9.0.37.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/spring-context-5.2.8.RELEASE.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/spring-boot-starter-tomcat-2.3.2.RELEASE.jar:/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/lib/snakeyaml-1.26.jar com.example.demo.DemoApplication

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.3.2.RELEASE)

2021-04-01 15:32:38.446  INFO 68929 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication on e69e13043.et15sqa with PID 68929 (/home/qingfeng.yy/jar_index/demo/target/BOOT-INF/classes/Test.jar started by qingfeng.yy in /home/qingfeng.yy/openjdk16_so_warning/jdk/build/linux-x86_64-server-slowdebug/images/jdk/bin)
2021-04-01 15:32:38.478  INFO 68929 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to default profiles: default
2021-04-01 15:32:49.025  INFO 68929 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 11888 (http)
2021-04-01 15:32:49.222  INFO 68929 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-01 15:32:49.223  INFO 68929 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2021-04-01 15:32:50.221  INFO 68929 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-01 15:32:50.222  INFO 68929 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 11259 ms
2021-04-01 15:32:52.407  INFO 68929 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-01 15:32:54.687  INFO 68929 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 11888 (http) with context path ''
2021-04-01 15:32:58.274  INFO 68929 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 21.23 seconds (JVM running for 30.526)
^C[38.901s][warning][cds] Preload Warning: Verification failed for org.springframework.web.multipart.commons.CommonsMultipartResolver
[38.901s][warning][cds] Preload Warning: Verification failed for org.springframework.web.multipart.commons.CommonsFileUploadSupport
[38.910s][warning][cds] Preload Warning: Verification failed for org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration
[38.912s][warning][cds] Preload Warning: Verification failed for org.springframework.boot.autoconfigure.cache.InfinispanCacheConfiguration
[39.073s][warning][cds] Preload Warning: Verification failed for org.springframework.boot.diagnostics.analyzer.ValidationExceptionFailureAnalyzer
[39.077s][warning][cds] Preload Warning: Verification failed for org.springframework.boot.autoconfigure.jdbc.HikariDriverConfigurationFailureAnalyzer
[40.039s][warning][cds] Preload Warning: Verification failed for org.springframework.web.servlet.view.tiles3.TilesView
2021-04-01 15:33:08.144  INFO 68929 --- [extShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/classLoaderData.cpp:316
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/qingfeng.yy/openjdk16_so_warning/jdk/src/hotspot/share/classfile/classLoaderData.cpp:316), pid=68929, tid=68930
#  assert(_keep_alive > 0) failed: Invalid keep alive decrement count
#
# JRE version: OpenJDK Runtime Environment (17.0) (slowdebug build 17-internal+0-adhoc.qingfengyy.jdk)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 17-internal+0-adhoc.qingfengyy.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x781087]  ClassLoaderData::dec_keep_alive()+0x31
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /home/qingfeng.yy/openjdk16_so_warning/jdk/build/linux-x86_64-server-slowdebug/images/jdk/bin/hs_err_pid68929.log
OpenJDK 64-Bit Server VM warning: outputStream::do_vsnprintf output truncated -- buffer length is 2000 bytes but 2797 bytes are needed.
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8251860,,,,,,"2021-04-01 21:37;yyang;hs_err_pid68929.log;https://bugs.openjdk.org/secure/attachment/93929/hs_err_pid68929.log",,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s8w3:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-01 22:00;yyang;JDK-8251860 collects CLD into an array, the problem is that there are some duplicated CLD items in this array, decrementing their _keep_alive value would hit the assertion.


Should we use inc_keep_alive/dec_keep_alive? It looks like they are used for CLD for anonymous/hidden classes.;;;","2021-04-05 19:58;roboduke;Changeset: 54b4070d
Author:    Yi Yang <yyang@openjdk.org>
Committer: Yumin Qi <minqi@openjdk.org>
Date:      2021-04-06 02:58:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/54b4070d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Add missing logging to PlatformRecording#stop,JDK-8264633,5046015,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ddong,ddong,ddong,2021-04-01 19:15,2021-04-14 17:25,2023-10-01 09:57,2021-04-08 01:12,,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,small fix to add logging to the catch block in PlatformRecording#stop,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s8vn:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-04-08 01:12;roboduke;Changeset: ec599da6
Author:    Denghui Dong <ddong@openjdk.org>
Committer: Erik Gahlin <egahlin@openjdk.org>
Date:      2021-04-08 08:11:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ec599da6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
C1 should be able to inline excluded methods,JDK-8264626,5046006,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,neliasso,neliasso,neliasso,2021-04-01 13:30,2021-06-03 02:52,2023-10-01 09:57,2021-04-05 23:47,11,17,8,,,,,,17,hotspot,,0,c1,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,redhat-interest,,,,,,,,,,,,,,,,,"I noticed a behavioral between c1 and c2. In c2 excluded methods can still be inlined, which is the desired behaviour. Inlining is controlled separately. I propose a small change to c1 inlining that make it work in the same way.",,,,,,,,,,JDK-8265736,JDK-8265674,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s8tn:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-05 23:47;roboduke;Changeset: ec7b0028
Author:    Nils Eliasson <neliasso@openjdk.org>
Date:      2021-04-06 06:47:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ec7b0028
;;;","2021-04-07 02:35;thartmann;ILW = Method not inlined by C1, excluded methods, no workaround = MLH = P4;;;","2021-04-21 08:23;shade;Fix Request (11u)

This fixes up a compiler oddity and keeps codebases in sync (I see 11.0.11-oracle). Patch applies cleanly to 11u, passes tier{1,2}.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
More comment for ECDH public key validation,JDK-8264606,5045982,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xuelei,xuelei,xuelei,2021-04-01 10:21,2021-04-07 18:01,2023-10-01 09:57,2021-04-02 08:23,,,,,,,,,17,security-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,"It would be nice to have more comment in the ECDH key agreement implementation, especially the reference to the specification and explains.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s8ob:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-04-02 08:23;roboduke;Changeset: 177bc84f
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2021-04-02 15:23:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/177bc84f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"vmTestbase/nsk/jvmti/SuspendThread/suspendthrd003/TestDescription.java failed with ""agent_tools.cpp, 471: (foundThread = (jthread) jni_env->NewGlobalRef(foundThread)) != NULL""",JDK-8264605,5045981,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,dcubed,dcubed,2021-04-01 09:48,2022-03-30 02:32,2023-10-01 09:57,2021-11-24 12:12,17,,,,,,,,18,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,tier5,,,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

vmTestbase/nsk/jvmti/SuspendThread/suspendthrd003/TestDescription.java

Here's a snippet from the log file:

[4.367s][debug][thread,smr] tid=5322: Threads::remove: new ThreadsList=0x00007f86e0000d80
[4.367s][debug][thread,smr] tid=5322: ThreadsSMRSupport::free_list: threads=0x00007f86e4000e60 is freed.
[4.367s][debug][thread,smr] tid=5322: ThreadsSMRSupport::smr_delete: thread=0x00007f86ec034f30 is deleted.
The following fake exception stacktrace is for failure analysis. 
nsk.share.Fake_Exception_for_RULE_Creation: (agent_tools.cpp:471) (foundThread = (jthread) jni_env->NewGlobalRef(foundThread)) != NULL
	at nsk_lvcomplain(nsk_tools.cpp:172)
# ERROR: agent_tools.cpp, 471: (foundThread = (jthread) jni_env->NewGlobalRef(foundThread)) != NULL
#   verified JNI assertion is FALSE
# ERROR: suspendthrd003.cpp, 60: (testedThread = nsk_jvmti_threadByName(THREAD_NAME)) != NULL
#   verified assertion is FALSE",,,,,,,,,,JDK-8283840,JDK-8283944,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266130,,,,,,,,,,,,"2021-05-05 13:51;dcubed;jdk-17+20_linux.8264605.zip;https://bugs.openjdk.org/secure/attachment/94520/jdk-17%2B20_linux.8264605.zip","2021-05-10 06:40;dcubed;jdk-17+21_linux.8264605.zip;https://bugs.openjdk.org/secure/attachment/94557/jdk-17%2B21_linux.8264605.zip",,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2s8o3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-05-05 13:51;dcubed;Spotted in my jdk-17+20 stress testing:

$ unzip -l jdk-17+20_linux.8264605.zip
Archive:  jdk-17+20_linux.8264605.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    15031  2021-05-01 12:39   jdk-17+20_1/failures.linux-x86_64/StressWrapper_suspendthrd003.jtr.release
    15303  2021-05-02 12:02   jdk-17+20_2/failures.linux-x86_64/StressWrapper_suspendthrd003.jtr.release
---------                     -------
    30334                     2 files;;;","2021-05-10 06:41;dcubed;Spotted in my jdk-17+21 stress testing:

$ unzip -l jdk-17+21_linux.8264605.zip
Archive:  jdk-17+21_linux.8264605.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    15500  2021-05-07 00:30   jdk-17+21_1/failures.linux-x86_64/TestDescription.jtr.slowdebug
    15496  2021-05-08 15:51   jdk-17+21_3/failures.linux-x86_64/TestDescription.jtr.fastdebug
---------                     -------
    30996                     2 files;;;","2021-06-10 12:11;dcubed;JDK-8266130 convert Thread-SMR stress tests from counter based to time based
is integrated in the jdk/jdk repo so the latest version of the test is now available
directly from the repo (instead of the PR).;;;","2021-11-24 12:12;roboduke;Changeset: 96fe1d0d
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2021-11-24 20:11:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/96fe1d0d4d95d87950ff2ecec570a927d831746e
;;;","2022-03-29 05:00;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Skara recognizes it as clean (Problem list has different context). Test has passed.;;;","2022-03-29 05:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/293
Date: 2022-03-29 11:56:06 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
[lworld] C2 compilation fails due to infinite loop in PhaseIterGVN::optimize,JDK-8264586,5045959,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2021-04-01 03:11,2021-04-26 06:12,2023-10-01 09:57,2021-04-06 07:32,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,,,,," 319  LoadI  === _  571  318  [[ 320 ]]  @compiler/valhalla/inlinetypes/MyValue4:exact+16 *, name=c, idx=6; #int !jvms: TestGenerated::test14 @ bci:26 (line 213)
 320  InlineTypePtr  === _  573  317  319  [[ 522 ]]  #compiler/valhalla/inlinetypes/MyValue4:NotNull:exact *  Oop:compiler/valhalla/inlinetypes/MyValue4:NotNull:exact * !orig=[322] !jvms: TestGenerated::test14 @ bci:26 (line 213)
 522  Phi  ===  214  320  573  [[ 573 ]]  #compiler/valhalla/inlinetypes/MyValue4:exact *  Oop:compiler/valhalla/inlinetypes/MyValue4:exact * !orig=[565],[141],[219] !jvms: TestGenerated::test14 @ bci:36 (line 216)
 573  Phi  ===  569  69  522  [[ 522  320  318  318  316  316 ]]  #compiler/valhalla/inlinetypes/MyValue4:exact *  Oop:compiler/valhalla/inlinetypes/MyValue4:exact * !orig=[141],[219] !jvms: TestGenerated::test14 @ bci:39 (line 216)
 318  AddP  === _  573  573  74  [[ 319 ]]   Oop:compiler/valhalla/inlinetypes/MyValue4:exact+16 * !jvms: TestGenerated::test14 @ bci:26 (line 213)
 316  AddP  === _  573  573  71  [[ 317 ]]   Oop:compiler/valhalla/inlinetypes/MyValue4:exact+12 * !jvms: TestGenerated::test14 @ bci:26 (line 213)
 317  LoadS  === _  571  316  [[ 320 ]]  @compiler/valhalla/inlinetypes/MyValue4:exact+12 *, name=b, idx=5; #short !jvms: TestGenerated::test14 @ bci:26 (line 213)
    0-->  317  LoadS  === _  571  316  [[ 320 ]]  @compiler/valhalla/inlinetypes/MyValue4:exact+12 *, name=b, idx=5; #short !jvms: TestGenerated::test14 @ bci:26 (line 213)
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/phaseX.cpp:1144
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla/open/src/hotspot/share/opto/phaseX.cpp:1144), pid=486042, tid=486057
#  assert(false) failed: infinite loop in PhaseIterGVN::optimize
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265973,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s8j7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-01 06:32;thartmann;The problem is an InlineTypePtrNode that becomes dead after CCP removes a redundant null check and then keeps several other nodes alive. Since we don't run any loop opts anymore after CCP, the dead subgraph is not removed and the dead nodes are also not re-processed by PhaseCCP::transform_once to update their bottom types. As a result, two LoadNodes only used by a ValueTypePtrNode end up with types that are inconsistent with their bottom types and are re-enqueued for IGVN indefinitely by this code:
https://github.com/openjdk/valhalla/blob/28a4ec0249fd86fe17f2b816c6f5f8eed31abfeb/src/hotspot/share/opto/memnode.cpp#L358;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
ForkJoinPool.getCommonPoolParallelism() reports always 1,JDK-8264572,5045878,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,dl,webbuggrp,webbuggrp,2021-03-31 09:20,2022-01-04 17:14,2023-10-01 09:57,2021-04-02 15:44,17,,,,,,,,17,core-libs,,0,additional-information-received,dcsaw,perf-regression,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Win10 20H2 (Build19042.868)
Java: 17-ea+11-835
CPU: i7-8700K

A DESCRIPTION OF THE PROBLEM :
A call to ForkJoinPool.getCommonPoolParallelism() will report ""1"" on my machine (JDK 16 = 11!)

If you think its a ""special"" problem on my machine - contact me.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Just run getCommonPoolParallelism() 

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Version: java.version: 16, OpenJDK 64-Bit Server VM, 16+36-2231
OS:      Windows 10 Version 10.0 (amd64) 
CPUs:    12
fjp:     11
ACTUAL -
Version: java.version: 17-ea, OpenJDK 64-Bit Server VM, 17-ea+11-835
OS:      Windows 10 Version 10.0 (amd64) 
CPUs:    12
fjp:     1

---------- BEGIN SOURCE ----------
public class TestFjp {

	public static void main(String[] args) {	
		System.out.println(""Version: "" + getJavaVersion());
		System.out.println(""OS:      "" + getOsInofrmation());
		System.out.println(""CPUs:    "" + Runtime.getRuntime().availableProcessors());
		System.out.println(""fjp:     "" + ForkJoinPool.getCommonPoolParallelism());
	}

	private static String getJavaVersion() {
		return ""java.version: "" //
				+ System.getProperty(""java.version"")//
				+ "", "" + System.getProperty(""java.vm.name"")//
				+ "", "" + System.getProperty(""java.runtime.version"");
	}
	
	private static String getOsInofrmation() {
		return System.getProperty(""os.name"") + "" Version ""
				+ System.getProperty(""os.version"") + "" ("" + System.getProperty(""os.arch"") + "") "";
	}	
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Using ""Runtime.getRuntime().availableProcessors())"" won't work on foreign software.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264542,,,,,,,,,,JDK-8259800,JDK-8279484,,,,,"2021-03-31 22:40;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/93921/Main.java",,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i2s817:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,Verified,,"2021-03-31 22:27;tongwan;The observations on Windows 10:
JDK 17ea+12: Passed, fjp: 7;;;","2021-03-31 23:09;dholmes;I have to suspect that JDK-8259800 has introduced this bug as it went into build b11 as reported.;;;","2021-03-31 23:25;dholmes;AFAICS JDK-8259800 skipped setting of this.mode in the common pool constructor, but that value is still used to set COMMON_PARALLELISM.

- int p = this.mode = Math.min(Math.max(parallelism, 0), MAX_CAP);
+ int p = Math.min(Math.max(parallelism, 0), MAX_CAP), size;

     common = AccessController.doPrivileged(new PrivilegedAction<>() {
            public ForkJoinPool run() {
                return new ForkJoinPool((byte)0); }});

        COMMON_PARALLELISM = Math.max(common.mode & SMASK, 1);

Stylistically declaring size on the same line as p is awful - sorry Doug.;;;","2021-04-01 03:33;dl;Sorry the assignment got dropped in JDK-8259800! I'll generate pull request tomorrow.;;;","2021-04-02 03:54;dl;After some fumbling, the one-line fix is at https://github.com/openjdk/jdk/pull/3324;;;","2021-04-02 15:44;roboduke;Changeset: cec66cf8
Author:    Doug Lea <dl@openjdk.org>
Date:      2021-04-02 22:44:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cec66cf8
;;;","2021-04-12 06:30;tongwan;Request the submitter to verify the fix with the latest version of JDK at https://jdk.java.net/17/;;;","2021-04-12 19:53;tongwan;From the submitter:
i could confirm that the problem is solved with jdk 17ea+17-1401.;;;",,,,,,,,,,,,,,,,,,,,
assert(verify_field_bit(1)) failed: Attempting to write an uninitialized event field: type,JDK-8264562,5045927,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fyang,fyang,fyang,2021-03-31 20:24,2021-05-04 13:22,2023-10-01 09:57,2021-04-07 07:12,openjdk8u282,,,,,,,,openjdk8u302,hotspot,,0,jdk8u-fix-request,jdk8u-fix-yes,jfr-jdk8u-backport,,,,,,,,,,,,,,,,,,,,"This issue can always reproduced by running the following two jtreg tests with 8u debug build:
    jdk/jfr/event/gc/collection/TestGCEventMixedWithG1ConcurrentMark.java
    jdk/jfr/event/gc/collection/TestGCEventMixedWithG1FullCollection.java

I think the reason is that we are not setting trace type for EventG1HeapRegionInformation event. 

Proposed 8u fix:
diff -r caca9fa8d833 src/share/vm/gc_implementation/g1/g1HeapRegionEventSender.cpp
--- a/src/share/vm/gc_implementation/g1/g1HeapRegionEventSender.cpp     Tue Sep 03 10:03:13 2019 +0200
+++ b/src/share/vm/gc_implementation/g1/g1HeapRegionEventSender.cpp     Thu Apr 01 10:51:58 2021 +0800
@@ -33,7 +33,7 @@
   bool doHeapRegion(HeapRegion* r) {
     EventG1HeapRegionInformation evt;
     evt.set_index(r->hrm_index());
-    // XXX TODO evt.set_type(r->get_trace_type());
+    evt.set_type(r->get_trace_type());
     evt.set_start((uintptr_t)r->bottom());
     evt.set_used(r->used());
     evt.commit();


$ jtreg -othervm jdk/test/jdk/jfr/event/gc/collection/TestGCEventMixedWithG1FullCollection.java

HotSpot JVM crash log:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (../generated/jfrfiles/jfrEventClasses.hpp:9049), pid=10113, tid=0x0000fffdda12f1f0
#  assert(verify_field_bit(1)) failed: Attempting to write an uninitialized event field: type
#
# JRE version: OpenJDK Runtime Environment (8.0) (build 1.8.0-internal-debug-yangfei_2021_04_01_09_48-b00)
# Java VM: OpenJDK 64-Bit Server VM (25.71-b00-debug mixed mode linux-aarch64 compressed oops)
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#

---------------  T H R E A D  ---------------

Current thread (0x0000ffff802b2800):  VMThread [stack: 0x0000fffdd9f30000,0x0000fffdda130000] [id=10214]

Stack: [0x0000fffdd9f30000,0x0000fffdda130000],  sp=0x0000fffdda12dec0,  free space=2039k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd00a64]  VMError::report_and_die()+0x4dc
V  [libjvm.so+0x5e7c2c]  report_vm_error(char const*, int, char const*, char const*)+0x84
V  [libjvm.so+0x6eb5d0]  EventG1HeapRegionInformation::verify() const+0xa0
V  [libjvm.so+0x6ebaa4]  JfrEvent<EventG1HeapRegionInformation>::assert_precondition()+0x14
V  [libjvm.so+0x6eb9d4]  JfrEvent<EventG1HeapRegionInformation>::write_event()+0x14
V  [libjvm.so+0x6eb8e8]  JfrEvent<EventG1HeapRegionInformation>::commit()+0xdc
V  [libjvm.so+0x6eb6f0]  DumpEventInfoClosure::doHeapRegion(HeapRegion*)+0x78
V  [libjvm.so+0x76a684]  HeapRegionManager::iterate(HeapRegionClosure*) const+0xf4
V  [libjvm.so+0x6c2c78]  G1CollectedHeap::heap_region_iterate(HeapRegionClosure*) const+0x20
V  [libjvm.so+0x6eb3b4]  G1HeapRegionEventSender::send_events()+0x28
V  [libjvm.so+0x83d9dc]  VM_G1SendHeapRegionInfoEvents::doit()+0x10
V  [libjvm.so+0xd359f8]  VM_Operation::evaluate()+0x68
V  [libjvm.so+0xd32a90]  VMThread::evaluate_operation(VM_Operation*)+0x3c
V  [libjvm.so+0xd3307c]  VMThread::loop()+0x508
V  [libjvm.so+0xd325d8]  VMThread::run()+0x124
V  [libjvm.so+0xb14ba8]  java_start(Thread*)+0x1a8
C  [libpthread.so.0+0x7088]  start_thread+0xb0

VM_Operation (0x0000fffd9abf41a0): HeapIterateOperation, mode: safepoint, requested by thread 0x0000ffff80418000",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s8c3:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-04-01 18:54;fyang;8u RFR thread: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-April/013620.html;;;","2021-04-03 17:03;fyang;Fix Request [8u]

8u fix reviewed by Paul Hohensee: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-April/013623.html;;;","2021-04-07 07:12;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/rev/32086319a1c6
User:  fyang
Date:  2021-04-07 14:08:18 +0000
;;;","2021-05-04 13:18;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/rev/32086319a1c6
User:  andrew
Date:  2021-05-04 20:08:45 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,
javap get NegativeArraySizeException on bad instruction,JDK-8264561,5045926,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asotona,jjiang,jjiang,2021-03-31 20:12,2021-05-24 16:39,2023-10-01 09:57,2021-05-17 08:23,17,,,,,,,,17,tools,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,,"javap -v FuzzJvm.class

Error: A serious internal error has occurred: java.lang.NegativeArraySizeException: -1296845643
Please file a bug report, and include the following information:
java.lang.NegativeArraySizeException: -1296845643
	at jdk.jdeps/com.sun.tools.classfile.Instruction.accept(Instruction.java:298)
	at jdk.jdeps/com.sun.tools.javap.CodeWriter.writeInstr(CodeWriter.java:126)
	at jdk.jdeps/com.sun.tools.javap.CodeWriter.writeInstrs(CodeWriter.java:108)
	at jdk.jdeps/com.sun.tools.javap.CodeWriter.write(CodeWriter.java:75)
	at jdk.jdeps/com.sun.tools.javap.AttributeWriter.visitCode(AttributeWriter.java:243)
	at jdk.jdeps/com.sun.tools.javap.AttributeWriter.visitCode(AttributeWriter.java:94)
	at jdk.jdeps/com.sun.tools.classfile.Code_attribute.accept(Code_attribute.java:102)
	at jdk.jdeps/com.sun.tools.javap.AttributeWriter.write(AttributeWriter.java:119)
	at jdk.jdeps/com.sun.tools.javap.ClassWriter.writeMethod(ClassWriter.java:589)
	at jdk.jdeps/com.sun.tools.javap.ClassWriter.writeMethods(ClassWriter.java:473)
	at jdk.jdeps/com.sun.tools.javap.ClassWriter.write(ClassWriter.java:271)
	at jdk.jdeps/com.sun.tools.javap.JavapTask.write(JavapTask.java:857)
	at jdk.jdeps/com.sun.tools.javap.JavapTask.writeClass(JavapTask.java:676)
	at jdk.jdeps/com.sun.tools.javap.JavapTask.run(JavapTask.java:614)
	at jdk.jdeps/com.sun.tools.javap.JavapTask.run(JavapTask.java:464)
	at jdk.jdeps/com.sun.tools.javap.Main.main(Main.java:47)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-31 20:13;jjiang;FuzzJvm.class;https://bugs.openjdk.org/secure/attachment/93920/FuzzJvm.class",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s8bv:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4bfdb002,,,,,,,,,"2021-03-31 20:14;jjiang;$ java FuzzJvm
Error: Unable to initialize main class FuzzJvm
Caused by: java.lang.VerifyError: Bad instruction
Exception Details:
  Location:
    FuzzJvm.main([Ljava/lang/String;)V @185: lookupswitch
  Reason:
    Error exists in the bytecode
  Bytecode:
    0000000: 0001 0203 0405 0607 0809 0a0b 0c0d 0e0f
    0000010: 1008 1147 0012 0413 0004 1400 0e15 1617
    0000020: 1819 1a1b 1c1d 1e1f 2021 2223 2425 2627
    0000030: 2829 2a2b 2c2d 2e2f 3031 3233 3435 3637
    0000040: 3839 3a3b 3c3d 3e14 000e 3f14 000e 4041
    0000050: 4243 4445 4647 4849 4a4b 4c4d 4e4f 5051
    0000060: 5253 5455 5657 5859 5a5b 5c5d 5e5f 6061
    0000070: 6263 6465 6667 6869 6a6b 6c6d 6e6f 7071
    0000080: 7273 7475 7677 7879 7a7b 7c7d 7e7f 8081
    0000090: 8283 8485 8687 8889 8a8b 8c8d 8e8f 9091
    00000a0: 9293 9495 9697 9899 9a9b 9c9d 9e9f a0a1
    00000b0: a2a3 a4a5 a6a7 a8a9 aaab acad aeaf b0b1
    00000c0: b2b3 b4b5 b6b7 b8b9 babb bcbd bebf c0c1
    00000d0: c2c3 c4c5 c6c7 c8c9 0001 ;;;","2021-05-17 06:27;asotona;Pull request with the fix: https://github.com/openjdk/jdk/pull/4061;;;","2021-05-17 08:23;roboduke;Changeset: cf97252f
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2021-05-17 15:23:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cf97252f3fd4e7bdb57271b92dd2866101d4a94b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect copyright year for test/micro/org/openjdk/bench/java/lang/MathBench.java after JDK-8264054,JDK-8264557,5045919,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jiefu,jiefu,jiefu,2021-03-31 18:48,2021-04-07 18:00,2023-10-01 09:57,2021-04-01 08:13,17,,,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-self,oracle-triage-17,tencent-interest,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264054,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s8ab:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-31 22:52;thartmann;ILW = LLL = P5;;;","2021-04-01 08:13;roboduke;Changeset: c04a743b
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-04-01 15:12:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c04a743b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
X509KeyManagerImpl calls getProtectionParameter with incorrect alias,JDK-8264554,5045749,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,xuelei,webbuggrp,webbuggrp,2021-03-30 05:34,2021-04-12 19:52,2023-10-01 09:57,2021-04-06 08:44,11,16,8,,,,,,17,security-libs,,0,additional-information-not-received,dcsaw,noreg-trivial,reproducer-other,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Presumably has been there since time immemorial but I didn't try to narrow it down.

A DESCRIPTION OF THE PROBLEM :
During code review I noted that the wrong alias is used in this call to getProtectionParameter:

https://github.com/openjdk/jdk/blob/ee5e00b05f5ae8410bc31e15381d068d09c53422/src/java.base/share/classes/sun/security/ssl/X509KeyManagerImpl.java#L272-L273

'alias' is a composite of three dot-separated parts, of which 'keyStoreAlias' is the third, and would be the correct argument for this call (as it is also the argument to getEntry in these lines).

It seems the implementations of getProtectionParameter included in the JDK do not make use of the alias (apart from a null check), so there is no effect in typical usages. However KeyStore.Builder is an open API so the bug potentially affects other implementations.


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s78j:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,Verified,,"2021-03-31 17:29;tongwan;The same code can be found at the following repo.:
https://hg.openjdk.java.net/jdk8/jdk8/jdk/file/00cd9dc3c2b5/src/share/classes/sun/security/ssl/X509KeyManagerImpl.java#l179
https://hg.openjdk.java.net/jdk/jdk11/file/68fa3d4026ea/src/java.base/share/classes/sun/security/ssl/X509KeyManagerImpl.java#l270;;;","2021-04-06 08:44;roboduke;Changeset: 2f516996
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2021-04-06 15:43:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2f516996
;;;","2021-04-12 06:25;tongwan;Requested the submitter to review the fix at https://git.openjdk.java.net/jdk/commit/2f516996 ;;;","2021-04-12 19:52;tongwan;From the submitter:
The fix looks good to me.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Unexpected warning when jpackage creates an exe,JDK-8264551,5045911,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,asemenyuk,asemenyuk,2021-03-31 15:12,2021-04-14 17:25,2023-10-01 09:57,2021-04-07 16:12,17,,,,,,,,17,tools,,0,regression,regression_8263135,,,,,,,,,,,,,,,,,,,,,"ever since (I think) fix to JDK-8263135, we get a warning whenever we create an exe:

> [2021/03/31 14:44:12.019, jpackage.dll (PID: 3700, TID: 15996), MsiUtils.cpp:192 (msi::closeMSIHANDLE)
> ]
>         WARNING: MsiCloseHandle(3174034504) failed with error=6

I don't get this when I create just an msi.

It is not fatal, exe is generated , so no test caught this.


/Andy
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263135,,,,,,JDK-8265152,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,,"0|i2s88j:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-03-31 15:15;asemenyuk;Looks like a regression of JDK-8263135 fix.
The problem is reproducible with exe installers only because the code reporting the warning runs only when exe installer is created.;;;","2021-04-07 16:12;roboduke;Changeset: a863ab69
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2021-04-07 23:11:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a863ab69
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Case-insensitive comparison issue with supplementary characters.,JDK-8264544,5045901,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2021-03-31 14:08,2022-08-04 21:05,2023-10-01 09:57,2021-04-02 09:33,,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"There are issues on negating the supplementary code points in StringUTF16.compareToCIImpl method as discussed in the core-libs ml.

---
On July 23, 2020 the first fix for the bug was committed. However, it
includes two simple bugs of its own. They're not much more than typos,
but they break some things nonetheless, as demonstrated by the unit
tests comprising part 2 of this contribution.

(Those two bugs: In ""StringUTF16.compareToCIImpl"", change statements
""cp1 -= cp1;"" and ""cp2 -= cp2;"" to, respectively, ""cp1 = -cp1;"" and
""cp2 = -cp2;"", and those bugs are history.)
---",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291938,,,,,,JDK-8248655,JDK-8264545,JDK-8291932,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s86b:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-04-02 09:33;roboduke;Changeset: 6c145c47
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-04-02 16:32:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6c145c47
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
WhiteBox.metaspaceReserveAlignment should return shared region alignment,JDK-8264540,5045895,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,minqi,minqi,minqi,2021-03-31 13:17,2021-04-12 15:10,2023-10-01 09:57,2021-04-05 11:32,,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"After JDK-8236847, the CDS shared regions are aligned with MetaspaceShared::core_region_alignment, but WhiteBox.metaspaxeReserveAlignment still return Metaspace::reserve_alignment which should use the new value.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s84z:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-05 11:32;roboduke;Changeset: d920f858
Author:    Yumin Qi <minqi@openjdk.org>
Date:      2021-04-05 18:31:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d920f858
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Building OpenJFX on Apple AARCH64 not possible,JDK-8264536,5045889,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jvos,jvos,jvos,2021-03-31 10:50,2023-01-12 10:43,2023-10-01 09:57,2021-03-31 11:40,,,,,,,,,jfx17,javafx,,0,noreg-build,,,,,,,,,,,,,,,,,,,,,,"The build.gradle file contains a hard check on the architecture in case we're compiling on and for mac. If the architecture is not equals to x86_64, the build fails.
All code currently compiles, so the check in build.gradle can be removed.",,,,,,,,,,JDK-8270031,JDK-8267333,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,other,,,,,,"0|i2s83n:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-03-31 11:40;roboduke;Changeset: eec2f394
Author:    Johan Vos <jvos@openjdk.org>
Date:      2021-03-31 18:40:05 +0000
URL:       https://git.openjdk.java.net/jfx/commit/eec2f394
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/swing/text/html/parser/Parser/8078268/bug8078268.java timeout,JDK-8264526,5045877,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-03-31 09:05,2023-01-16 07:10,2023-10-01 09:57,2021-04-02 01:25,11,16,17,9,,,,,17,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,tencent-interest,,,,,,,,,,,,,,,,,,,,"STDOUT:
STDERR:

ACTION: main -- Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Parsing takes too long.
REASON: User specified action: run main bug8078268
TIME:   6.275 seconds
messages:
command: main bug8078268
reason: User specified action: run main bug8078268
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 6.275
configuration:
Boot Layer
  add modules: java.desktop

STDOUT:
STDERR:
java.lang.RuntimeException: Parsing takes too long.
    at bug8078268.main(bug8078268.java:64)
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.base/java.lang.reflect.Method.invoke(Method.java:568)
    at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
    at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Parsing takes too long.
JavaTest Message: shutting down test",,,,,,,,,,JDK-8284998,JDK-8276912,JDK-8284410,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8078268,,,,,,JDK-8284884,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s80z:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-03-31 09:27;jiefu;PR: https://github.com/openjdk/jdk/pull/3287;;;","2021-04-02 01:25;roboduke;Changeset: da643cdb
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-04-02 08:25:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/da643cdb
;;;","2021-11-06 04:27;jiefu;Fix request

I'd like to backport this fix to jdk11u.
Only test timeout fix, no regression.
It can be applied cleanly.

Thanks.;;;","2023-01-10 07:08;mbaesken;We still run into timeouts in this test every few days (this was observed on Windows, Mac and Linux ppc64le).
Error output :
java.lang.RuntimeException: Parsing takes too long.
	at bug8078268.main(bug8078268.java:64)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

Maybe we need a larger timeout value ?;;;","2023-01-13 00:11;jiefu;How long did it take when timeout occurred?;;;","2023-01-13 05:28;mbaesken;> How long did it take when timeout occurred?
We observed the mentioned exception with the current default value of 10.000  ms , see 
https://github.com/openjdk/jdk/blob/master/test/jdk/javax/swing/text/html/parser/Parser/8078268/bug8078268.java#L41
I switched it locally to 20.000 ms . So far no new ""Parsing takes too long."" exceptions, but we just run for a few days so far with the higher value.;;;","2023-01-13 06:09;jiefu;The load of the machine is too heavy?
Maybe, it's fine to further increase the timeout threshold to 20 ~ 30s.
;;;","2023-01-13 07:46;mbaesken;>The load of the machine is too heavy?
Generally it seems to hit machines that face a high load in out nightly test runs.  But hard to answer in general.

>Maybe, it's fine to further increase the timeout threshold to 20 ~ 30s.
Let's see how well it works in the next few days with my adjusted timeout of 20s.;;;","2023-01-16 05:00;mbaesken;We could also multiply a default  (5.000 or 10.000 ?) by  timeoutFactor = Float.parseFloat(System.getProperty(""test.timeout.factor"", ""1.0""));  .
This would make the test behavior a bit more configurable.  What do you think about this ?
;;;","2023-01-16 05:32;jiefu;This seems a better solution than hard-coded timeout threshold.;;;","2023-01-16 07:10;mbaesken;I opened https://bugs.openjdk.org/browse/JDK-8300205 and created a PR .;;;",,,,,,,,,,,,,,,,,
jdk/internal/platform/docker/TestDockerMemoryMetrics.java fails due to swapping not working,JDK-8264524,5045875,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-03-31 08:45,2023-01-17 09:07,2023-10-01 09:57,2021-04-06 16:04,17,,,,,,,,17,hotspot,,0,containers,tencent-interest,,,,,,,,,,,,,,,,,,,,,"STDERR:
 stdout: [[failcount]
];
 stderr: []
 exitValue = 137

java.lang.RuntimeException: Expected to get exit value of [0]

    at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:474)
    at TestDockerMemoryMetrics.testMemoryFailCount(TestDockerMemoryMetrics.java:113)
    at TestDockerMemoryMetrics.main(TestDockerMemoryMetrics.java:80)
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.base/java.lang.reflect.Method.invoke(Method.java:568)
    at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
    at java.base/java.lang.Thread.run(Thread.java:831)",,,,,,,,,,JDK-8299005,JDK-8299039,,,,,,,,,,,,,,,,,,,,JDK-8298295,,,,,,,,,,,,JDK-8250984,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s80j:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-06 11:17;mseledtsov;ILW = MLM = P4;;;","2021-04-06 16:04;roboduke;Changeset: bfb034ab
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-04-06 23:03:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bfb034ab
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Rename static factory methods in the foreign API,JDK-8264515,5045866,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-03-31 07:01,2021-04-09 02:51,2023-10-01 09:57,2021-04-01 03:36,repo-panama,,,,,,,,,tools,,0,foreign-memaccess,,,,,,,,,,,,,,,,,,,,,,"As a result of the recent API changes - specifically, the removal of so called “default” overloads - you can no longer say:

```
MemorySegment.allocateNative(100); // scope missing here! What is the life cycle?
```

The ResourceScope class offers an implicit scope factory, so this can become:

```
MemorySegment.allocateNative(100, ResourceScope.ofImplicit()); // ok
```

Being this relatively verbose, it’s not out of the realm of possibilities to think that users will just statically import ResourceScope, which leads to less clear code:

```
MemorySegment.allocateNative(100, ofImplicit()); // ???
```

In other words, the ofXYZ factories do not cope well with static imports. This problem is not just for ResourceScope - memory layouts have a similar issue:

```
MemoryLayout layout = MemoryLayout.ofSequence(10,
                                  MemoryLayout.ofStruct(
                                             MemoryLayout.ofValueBits(4).withName(""x""),
                                             MemoryLayout.ofPadding(8),
                                             MemoryLayout.ofValueBits(4).withName(""y""),
                                  ));
```

That’s a lot of `MemoryLayout.` - but if we statically import:

```
MemoryLayout layout =ofSequence(10,
                                  ofStruct(
                                             ofValueBits(4).withName(""x""),
                                             ofPadding(8),
                                             ofValueBits(4).withName(""y""),
                                  ));
```

The resulting code is not clear. We need some kind of uniform naming strategy and apply that consistently throughout the API.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s7yj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HexFormat implementation tweaks,JDK-8264514,5045865,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,rriggs,rriggs,rriggs,2021-03-31 06:52,2021-04-28 17:38,2023-10-01 09:57,2021-04-22 06:55,17,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"Minor cleanup of the java.util.HexFormat implementation.

See:
https://mail.openjdk.java.net/pipermail/core-libs-dev/2021-March/075822.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s7yb:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2021-04-22 06:55;roboduke;Changeset: fa82d475
Author:    Raffaello Giulietti <raffaello.giulietti@gmail.com>
Committer: Roger Riggs <rriggs@openjdk.org>
Date:      2021-04-22 13:54:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fa82d475
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/test/jdk/java/util/prefs/ExportNode.java relies on default platform encoding,JDK-8264512,5045863,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bpb,dbessono,dbessono,2021-03-31 06:07,2023-02-17 02:17,2023-10-01 09:57,2021-04-05 09:43,,,,,,,,,17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,test-only,,,,,,,,,,,,,,,,,,,"https://github.com/openjdk/jdk/blob/master/test/jdk/java/util/prefs/ExportNode.java#L50

[from linked bug report]
This testcase creates a simple tree of two nodes N1 and N2, where N2 is the
descendant of N1, and adds a key-value pair each on both. N2 is then exported
to a ByteArrayOutputStream using the exportNode() method.

Now, the contract of the exportNode() method makes it clear that it ""Emits on
the specified output stream an XML document.... The UTF-8 character encoding
will be used.""

So, the ByteArrayOutputStream is going to hold the UTF-8 bytes of the XML
representation of the given node. We subsequently call toString() on it and
make some elementary searches. Here, ByteArrayOutputStream.toString() is
going to use the platforms default charset to wrap the bytes into a String.

On non-ASCII platforms, like z/OS, we'd end up building a String with a
non-UTF8 charset and UTF-8 bytes. This mismatch causes failure.

Proposed fix:
To make the test resilient to non-ASCII platforms as well, we'd suggest that
ByteArrayOutputStream be called with the charset name of ""UTF-8"" as in
exportStream.toString(""UTF-8"").",,,,,,,,,,JDK-8302724,JDK-8299647,,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7315846,JCK-7306766,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s7xv:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2021-04-02 12:09;bpb;I am a little confused here. There is no code inside the if-block at lines 50-51 in ExportNode.java. I assume there should be a RuntimeException thrown.;;;","2021-04-05 09:43;roboduke;Changeset: 104e925d
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-04-05 16:42:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/104e925d
;;;","2023-02-16 06:21;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2023-02-16 06:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1755
Date: 2023-02-16 14:23:22 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
jdk8u MacOS zipped debug symbols won't build,JDK-8264509,5045860,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aleonard,aleonard,aleonard,2021-03-31 06:04,2021-05-04 13:12,2023-10-01 09:57,2021-04-08 08:45,openjdk8u302,,,,,,,,openjdk8u302,infrastructure,,0,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,,,,,,,,"With the integration of https://bugs.openjdk.java.net/browse/JDK-8262730
to support MacOS debug symbols, if you build mac with default configure options then debug symbols is enabled with ""zipped"", but the following error will occur:
make[2]: *** No rule to make target `/Users/jenkins/workspace/build-scripts/jobs/jdk8u/jdk8u-mac-x64-hotspot/workspace/build/src/build/macosx-x86_64-normal-server-release/jdk/lib/libverify.diz', needed by `all'.  Stop.

The reason being because there is a missing copy rule for the .diz on MacOS.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262730,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2s7x7:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-04-07 10:03;aleonard;webrev: http://cr.openjdk.java.net/~aleonard/8264509/webrev.00/;;;","2021-04-08 01:03;aleonard;Fix Request With the integration of https://bugs.openjdk.java.net/browse/JDK-8262730
to support MacOS debug symbols, if you build mac with default configure options then debug symbols is enabled with ""zipped"", but the following error will occur:
make[2]: *** No rule to make target `/Users/jenkins/workspace/build-scripts/jobs/jdk8u/jdk8u-mac-x64-hotspot/workspace/build/src/build/macosx-x86_64-normal-server-release/jdk/lib/libverify.diz', needed by `all'. Stop.
This PR adds the missing .diz rule for MacOS. This PR has been fully built and tested on jdk8u Mac, Windows and xLinux at the AdoptOpenJDK CI jenkins.

webrev: http://cr.openjdk.java.net/~aleonard/8264509/webrev.00/
RFR: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-April/013632.html;;;","2021-04-08 08:45;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/rev/dd18dcfb07ba
User:  phh
Date:  2021-04-08 15:43:19 +0000
;;;","2021-05-04 13:12;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/rev/dd18dcfb07ba
User:  andrew
Date:  2021-05-04 20:07:54 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,
(fc) FileDispatcherImpl.setDirect0 might return uninitialized variable on some platforms,JDK-8264502,5045849,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cgo,cgo,cgo,2021-03-31 03:46,2021-04-07 18:01,2023-10-01 09:57,2021-04-02 02:20,11,17,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"The variable ""result"" in Java_sun_nio_ch_FileDispatcherImpl_setDirect0 might be uninitialized, if neither O_DIRECT, F_NOCACHE, or DIRECTIO_ON is defined, because the final #else block is not an assignment, but a comparison.

https://github.com/openjdk/jdk/blob/7e42642939c0c3b8b872d72890fbb5aab4c3e507/src/java.base/unix/native/libnio/ch/FileDispatcherImpl.c",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s7ur:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-03-31 04:01;alanb;Looks like a typo in the original implementation, curious which platform the submitter is building on to notice this.;;;","2021-03-31 04:09;cgo;I found this while playing around with a port to QNX. This has been found, because QNX requires an additional include to get the symbols, and I got the warning about result being uninitialized. I don't know of any, already supported platform which would run into this issue.;;;","2021-04-02 02:20;roboduke;Changeset: 4793557f
Author:    Christoph Göttschkes <cgo@openjdk.org>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2021-04-02 09:19:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4793557f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
UIWebView for iOS is deprecated,JDK-8264501,5045846,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpereda,jpereda,jpereda,2021-03-31 02:02,2021-04-05 13:43,2023-10-01 09:57,2021-03-31 05:43,jfx16,,,,,,,,jfx17,javafx,,0,,,,,,,,,,,,,,,,,,,,,,,"UIWebView, the native view used on iOS to embed web, has been deprecated. Apple warns that ""Apple will stop accepting submissions of apps that use UIWebView APIs"", and also recommends ""In apps that run in iOS 8 and later, use the WKWebView class instead of using UIWebView"". 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,iOS,,,,,,"0|i2s7u3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2021-03-31 05:42;roboduke;Changeset: d80b8ada
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2021-03-31 12:42:12 +0000
URL:       https://git.openjdk.java.net/jfx/commit/d80b8ada
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
build.tools.depend.Depend.toString(byte[]) creates malformed hex strings,JDK-8264485,5045596,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asotona,webbuggrp,webbuggrp,2021-03-27 10:50,2021-12-07 07:54,2023-10-01 09:57,2021-11-30 04:58,17,,,,,,,,18,tools,,0,17ea,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The code currently uses:
        for (byte b : digest) {
            result.append(String.format(""%X"", b));
        }
This will have incorrect results for byte values < 16 for which the pattern will only produce one hex char, so for example `1, 0` and `16` both would have the result `""10""`.
This should probably instead use the newly added java.util.HexFormat.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s6ar:",9223372036854775807,b26,,,,,,,,,,,,"2021-03-30 21:33;adev;The implementation of String toString(byte[] digest) at:
 make\jdk\src\classes\build\tools\depend\Depend.java 

for (byte b : digest) {
            result.append(String.format(""%X"", b));
        }

should use newly added java.util.HexFormat, as it will cause a discrepancy for the digest array [1,0] and [16].
;;;","2021-11-30 04:58;roboduke;Changeset: 69f56a0e
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2021-11-30 12:56:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/69f56a0ea0c2d551b660909deb89f0051540f9d0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
CopyArea ignores clip state in metal rendering pipeline,JDK-8264475,5045818,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2021-03-30 22:10,2021-04-07 18:02,2023-10-01 09:57,2021-04-04 22:29,17,,,,,,,,17,client-libs,,0,image,lanai,lanai-to-default,sn_90,,,,,,,,,,,,,,,,,,,"In MTLBlitLoops.copyArea() method we get blitEncoder from CommandBuffer to perform copy operation.But this standalone encoder has no information related to clip opcodes(Rect Clip and Shape Clip).

We need to query and use encoder from EncoderManager to get appropriate encoder with Clip states.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256029,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i2s7nv:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-30 22:21;jdv;Implemented code to query and use Render Encoder from EncoderManager.
Also we are using MTLTexturePool to get intermediate texture and we dont set MTLTextureUsage in MTLTexturePool. By default MTLTextureUsageShaderRead will be set(https://developer.apple.com/documentation/metal/mtltexturedescriptor/1515783-usage?language=objc ) and since we are using texture in copyArea as RenderTarget we need to set appropriate MTLTextureUsage parameters in MTLTexturePool. Otherwise we are seeing assertion failures only when Metal API validation is enabled.There is no performance impact with this change.

Sanity testing with J2DDemo, SwingSet2, Font2DTest and Netbeans everything looks fine.
Also CI testing of jtreg and JCK is fine.;;;","2021-03-30 22:23;jdv;Performance numbers :

RenderPerfTest :
Before change:
FlatOval : 40.71 FPS
FlatOvalAA : 9.61 FPS
ClipFlatOval : 9.72 FPS
ClipFlatOvalAA : 10.25 FPS
FlatBox : 81.94 FPS
FlatBoxAA : 57.25 FPS
ClipFlatBox : 93.94 FPS
ClipFlatBoxAA : 96.38 FPS
Image : 80.79 FPS
ImageAA : 79.89 FPS
RotatedBox : 77.52 FPS
RotatedBoxAA : 52.09 FPS
RotatedOval : 42.59 FPS
RotatedOvalAA : 11.15 FPS
LinGrad3RotatedOval : 33.76 FPS
LinGrad3RotatedOvalAA : 8.54 FPS
RadGrad3RotatedOval : 28.23 FPS
RadGrad3RotatedOvalAA : 7.94 FPS
LinGradRotatedOval : 35.46 FPS
LinGradRotatedOvalAA : 10.15 FPS
WiredBubbles : 25.42 FPS
WiredBubblesAA : 7.30 FPS
WiredBox : 89.09 FPS
Lines : 88.26 FPS
LinesAA : 80.37 FPS
FlatQuad : 31.82 FPS
FlatQuadAA : 5.45 FPS
WiredQuad : 30.93 FPS
WiredQuadAA : 8.32 FPS
TextNoAA : 31.61 FPS
TextLCD : 31.98 FPS
TextGray : 31.78 FPS
LargeTextNoAA : 1.28 FPS
LargeTextLCD : 1.27 FPS
LargeTextGray : 1.30 FPS
WhiteTextNoAA : 38.70 FPS
WhiteTextLCD : 39.07 FPS
WhiteTextGray : 39.05 FPS
ArgbSwBlitImage : 4.70 FPS
BgrSwBlitImage : 3.98 FPS
ArgbSurfaceBlitImageRenderer : 93.29 FPS
BgrSurfaceBlitImage : 89.64 FPS
FlatOval_XOR : 6.21 FPS
RotatedBox_XOR : 6.84 FPS
Lines_XOR : 7.15 FPS
Image_XOR : 0.61 FPS
TextNoAA_XOR : 2.28 FPS
TextLCD_XOR : 2.31 FPS

After change:
FlatOval : 41.18 FPS
FlatOvalAA : 10.24 FPS
ClipFlatOval : 11.42 FPS
ClipFlatOvalAA : 11.26 FPS
FlatBox : 84.60 FPS
FlatBoxAA : 57.44 FPS
ClipFlatBox : 95.21 FPS
ClipFlatBoxAA : 97.17 FPS
Image : 80.49 FPS
ImageAA : 80.36 FPS
RotatedBox : 80.20 FPS
RotatedBoxAA : 52.78 FPS
RotatedOval : 42.81 FPS
RotatedOvalAA : 11.66 FPS
LinGrad3RotatedOval : 33.62 FPS
LinGrad3RotatedOvalAA : 10.14 FPS
RadGrad3RotatedOval : 29.88 FPS
RadGrad3RotatedOvalAA : 8.98 FPS
LinGradRotatedOval : 40.16 FPS
LinGradRotatedOvalAA : 11.79 FPS
WiredBubbles : 26.78 FPS
WiredBubblesAA : 8.62 FPS
WiredBox : 88.06 FPS
Lines : 88.31 FPS
LinesAA : 80.17 FPS
FlatQuad : 31.95 FPS
FlatQuadAA : 5.93 FPS
WiredQuad : 29.44 FPS
WiredQuadAA : 8.53 FPS
TextNoAA : 33.12 FPS
TextLCD : 32.26 FPS
TextGray : 32.77 FPS
LargeTextNoAA : 1.31 FPS
LargeTextLCD : 1.29 FPS
LargeTextGray : 1.31 FPS
WhiteTextNoAA : 40.20 FPS
WhiteTextLCD : 40.88 FPS
WhiteTextGray : 40.20 FPS
ArgbSwBlitImage : 5.69 FPS
BgrSwBlitImage : 4.34 FPS
ArgbSurfaceBlitImageRenderer : 94.70 FPS
BgrSurfaceBlitImage : 94.31 FPS
FlatOval_XOR : 6.21 FPS
RotatedBox_XOR : 6.78 FPS
Lines_XOR : 6.93 FPS
Image_XOR : 0.67 FPS
TextNoAA_XOR : 2.31 FPS
TextLCD_XOR : 2.29 FPS

Swingmark:

Java/Metal LAF:

Before change:
Setting L&F to: javax.swing.plaf.metal.MetalLookAndFeel
Startup Time: 1312
Sub-Menus = 282   (Paint = 0)
TextArea = 1475   (Paint = 693)
Sliders = 1756   (Paint = 502)
Lists = 901   (Paint = 493)
Table Rows = 1309   (Paint = 213)
Tree = 3716   (Paint = 814)
Score: 10894

After change:
Setting L&F to: javax.swing.plaf.metal.MetalLookAndFeel
Startup Time: 1296
Sub-Menus = 282   (Paint = 0)
TextArea = 1473   (Paint = 693)
Sliders = 1716   (Paint = 502)
Lists = 865   (Paint = 493)
Table Rows = 1267   (Paint = 213)
Tree = 3079   (Paint = 814)
Score: 10119

Aqua LAF:

Before change:
Setting L&F to: com.apple.laf.AquaLookAndFeel
Startup Time: 1236
Sub-Menus = 288   (Paint = 0)
TextArea = 1332   (Paint = 693)
Sliders = 937   (Paint = 502)
Lists = 1144   (Paint = 494)
Table Rows = 937   (Paint = 214)
Tree = 3693   (Paint = 815)
Score: 9890

After change:
Setting L&F to: com.apple.laf.AquaLookAndFeel
Startup Time: 1304
Sub-Menus = 288   (Paint = 0)
TextArea = 1431   (Paint = 693)
Sliders = 963   (Paint = 502)
Lists = 1129   (Paint = 494)
Table Rows = 898   (Paint = 214)
Tree = 3310   (Paint = 815)
Score: 9636

Nimbus LAF:

Before change:
Setting L&F to: javax.swing.plaf.nimbus.NimbusLookAndFeel
Startup Time: 1266
Sub-Menus = 2660   (Paint = 0)
TextArea = 1455   (Paint = 602)
Sliders = 1852   (Paint = 502)
Lists = 826   (Paint = 493)
Table Rows = 1014   (Paint = 212)
Tree = 3221   (Paint = 814)
Score: 12510

After change:
Setting L&F to: javax.swing.plaf.nimbus.NimbusLookAndFeel
Startup Time: 1303
Sub-Menus = 2630   (Paint = 0)
TextArea = 1417   (Paint = 602)
Sliders = 1987   (Paint = 502)
Lists = 802   (Paint = 493)
Table Rows = 1031   (Paint = 212)
Tree = 2597   (Paint = 814)
Score: 11980

Motif LAF:

Before change:
Setting L&F to: com.sun.java.swing.plaf.motif.MotifLookAndFeel
Startup Time: 1207
Sub-Menus = 287   (Paint = 0)
TextArea = 1408   (Paint = 792)
Sliders = 548   (Paint = 502)
Lists = 692   (Paint = 493)
Table Rows = 825   (Paint = 213)
Tree = 2694   (Paint = 813)
Score: 7753

After change:
Setting L&F to: com.sun.java.swing.plaf.motif.MotifLookAndFeel
Startup Time: 1268
Sub-Menus = 278   (Paint = 0)
TextArea = 1403   (Paint = 792)
Sliders = 637   (Paint = 502)
Lists = 692   (Paint = 493)
Table Rows = 805   (Paint = 213)
Tree = 2041   (Paint = 813)
Score: 7220

I see little performance improvement in Swingmark numbers with this change.;;;","2021-03-31 03:47;aghaisas;Swingmark numbers on discrete graphics card (tested on macOS 11.1)

Without Fix :
--------------------------------------------------------------------------------------
Setting L&F to: javax.swing.plaf.metal.MetalLookAndFeel
Startup Time: 1115
Sub-Menus = 191   (Paint = 0)
TextArea = 603   (Paint = 693)
Sliders = 784   (Paint = 502)
Lists = 334   (Paint = 493)
Table Rows = 513   (Paint = 213)
Tree = 1007   (Paint = 814)
Score: 4641


Setting L&F to: javax.swing.plaf.nimbus.NimbusLookAndFeel
Startup Time: 1123
Sub-Menus = 1148   (Paint = 0)
TextArea = 613   (Paint = 602)
Sliders = 949   (Paint = 502)
Lists = 411   (Paint = 493)
Table Rows = 537   (Paint = 212)
Tree = 856   (Paint = 814)
Score: 5775


With Fix :
------------------------------------------------------------------------------------------------

Setting L&F to: javax.swing.plaf.metal.MetalLookAndFeel
Startup Time: 1206
Sub-Menus = 195   (Paint = 0)
TextArea = 657   (Paint = 693)
Sliders = 810   (Paint = 502)
Lists = 341   (Paint = 493)
Table Rows = 425   (Paint = 213)
Tree = 913   (Paint = 814)
Score: 4639


Setting L&F to: javax.swing.plaf.nimbus.NimbusLookAndFeel
Startup Time: 1147
Sub-Menus = 979   (Paint = 0)
TextArea = 517   (Paint = 602)
Sliders = 977   (Paint = 502)
Lists = 337   (Paint = 493)
Table Rows = 502   (Paint = 212)
Tree = 759   (Paint = 814)
Score: 5349;;;","2021-04-04 22:29;roboduke;Changeset: 0039c18e
Author:    Jayathirth D V <jdv@openjdk.org>
Date:      2021-04-05 05:28:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0039c18e
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Cut-paste error in InterfaceCalls JMH,JDK-8264466,5045801,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ecaspole,ecaspole,ecaspole,2021-03-30 14:19,2021-04-07 17:57,2023-10-01 09:57,2021-03-31 08:21,17,,,,,,,,17,hotspot,,0,benchmark,hs-comp-triaged,oracle-triage-11,oracle-triage-17,performance,,,,,,,,,,,,,,,,,,"I just noticed this, testCallPoly5 is only looping up to 3, so it is doing the same thing as testCallPoly3. I think this has always been there since it was written.

open/test/micro/org/openjdk/bench/vm/compiler/InterfaceCalls.java                                                                             


252     /** Interface call with three different receivers */
253     @Benchmark
254     public void testCallPoly3(Blackhole bh) {
255         for (int kk = 0; kk < 3; kk++) {
256             bh.consume(as[kk].getInt());
257         }
258     }
259 
260     /** Interface call with five different receivers. */
261     @Benchmark
262     public void testCallPoly5(Blackhole bh) {
263         for (int kk = 0; kk < 3; kk++) {
264             bh.consume(as[kk].getInt());
265         }
266     }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s7k3:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-30 23:16;thartmann;ILW = MLH = P4;;;","2021-03-31 08:21;roboduke;Changeset: 6225ae63
Author:    Eric Caspole <ecaspole@openjdk.org>
Date:      2021-03-31 15:20:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6225ae63
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Jaxp unit test from open jdk needs to be improved,JDK-8264454,5045780,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchhipa,mchhipa,mchhipa,2021-03-30 09:20,2021-04-14 17:26,2023-10-01 09:57,2021-04-08 14:22,,,,,,,,,17,xml,,0,,,,,,,,,,,,,,,,,,,,,,,"Need to make the following common improvements:
Should restore the environment at the end of test method to prevent impacting other test methods ot other tests
Should add singleThreaded=true if global state is changed in test
Need to close the resource e.g. file handle, XMLStreamReader, other Closeable and so on

use exact assert, keep detail info in assert
let the exception thrown from the test
Make better naming
try private as possible
reduce duplicate code 

jaxp/test/javax/xml/jaxp/unittest/javax/xml/common/Bug6350682.java
0. please use braces even for one-line block
> if (Bug6350682.class.getClassLoader() == null)
> System.out.println(""this class loader is NULL"");
> else
> System.out.println(""this class loader is NOT NULL"");
1. use the most specific in catch clause.
> } catch (Exception e) {
> e.printStackTrace();
> Assert.fail(""Exception occured: "" + e.getMessage());
> }

> } catch (Exception e) {
> e.printStackTrace();
> Assert.fail(""Exception occured: "" + e.getMessage());
> } catch (TransformerFactoryConfigurationError error) {
> error.printStackTrace();
> Assert.fail(error.toString());
> }

2. no sure about testNG in jtreg, but for regular jtreg tests it doesn't make sense to print stack trace if you rethrow exception or pass it as cause to another.
3. there is no needs to catch TransformerFactoryConfigurationError
4. you change the thread environment, shouldn't you recover it in the end?

jaxp/test/javax/xml/jaxp/unittest/javax/xml/common/Bug6723276Test.java
0. can you make up better names than test0/test1?
1. you change the global environment, shouldn't you recover it in the end?
2. e.getMessage().indexOf("""") > 0 sounds like contains 3. please introduce a string constant for ""org.apache.xerces.jaxp.SAXParserFactoryImpl not found""
4. these tests will pass, if any other exception are thrown. is it supposed?


jaxp/test/javax/xml/jaxp/unittest/javax/xml/common/Bug6979306Test.java
0. it's unclear that this test tests. please write more detailed summary

jaxp/test/javax/xml/jaxp/unittest/javax/xml/common/Bug7143711Test.java
0. SCHEMA_LANGUAGE,SCHEMA_SOURCE,ORACLE_FEATURE_SERVICE_MECHANISM should be private 1. ORACLE_FEATURE_SERVICE_MECHANISM should be static 2. lots of code duplication, the method which contains common part should be introduced 3. this test sounds very similar to Bug6979306Test. it's needed to extract common parts

jaxp/test/javax/xml/jaxp/unittest/javax/xml/datatype/Bug6320118.java
0. there is no needs to catch IllegalArgumentException in test{1,2,4} 1. this should be done in ctor or in ""setUp"" method
> try {
> df = DatatypeFactory.newInstance();
> } catch (DatatypeConfigurationException e) {
> Assert.fail(e.getMessage());
> }
2.
> if (!c1.equals(c2))
> Assert.fail(""hour 24 needs to be treated as equal to hour
> 0
of the next day"");
Assert.assertEquals
3. it's better to write this as two separate asserts
> if (c1.getYear() != 2000 && c1.getHour() != 0)
> Assert.fail(""hour 24 needs to be treated as equal to hour
> 0
of the next day"");

jaxp/test/javax/xml/jaxp/unittest/javax/xml/datatype/Bug6937964Test.java
0. 'fields' should be private static and upper cased 1. method test is a bad copy of testNewDurationYearMonthLexicalRepresentation
2. Assert.assertEquals(years, 21,
> Assert.assertTrue(years == 21,
3. why do you need testNewDurationYearMonthLexicalRepresentation1 to be final?
4. testNewDurationYearMonthLexicalRepresentation1 and
testNewDurationDayTime005 are in a really mess and have to be rewritten



*:
3. it'd be better to provide an informal error message in all asserts
4. it'd be better to pass exception to Assert.fail in order not to miss useful information about an error
5. you don't close XMLStreamReader (and maybe some other closeable objects)
IssueTracker24/Bug.java:
0. > Assert.assertTrue(r.getPrefix() == """"); why do you check string identity? I think you need to check equality.
AFAIR, testng provides assertEquals for that
 IssueTracker30/Bug.java
0. please introduce a method, which gets xsd schema-file name and do all the stuff, and use this method in both test methods.
1. I'd prefer to have 4 tests : {ok, error} x {occurs.xsd, occurs-optimize.xsd}
2.
> public void fatalError(SAXParseException e) throws SAXException {
> System.out.println(""Fatal error: "" + e.getMessage()); }
why do you think that it's ok to ignore fatal errors? I think we should fail the test if any.
3.
> public void error(SAXParseException e) throws SAXException {
> System.out.println(""Error: "" + e.getMessage());
> errorFound = true;
> }
is it possible to check that we get the error which we expect to get?

IssueTracker35/Bug.java
0. > Assert.assertTrue(e == XMLStreamConstants.DTD);
> Assert.assertTrue(reader.getLocalName().equals(""schema""));
Assert.assertEquals?
1.
> while ((e = reader.next()) == XMLStreamConstants.COMMENT)
> ;
please add brackets
2.
> XMLStreamReader reader =
xif.createXMLStreamReader(getClass().getResource(""XMLSchema.xsd"").getFile(
), getClass().getResourceAsStream(""XMLSchema.xsd""));
please introduce a local variable to store #getResource result

IssueTracker38/Bug.java
0.
> try {
> XMLEventReader xer = xIF.createXMLEventReader(source);
> } catch (UnsupportedOperationException e) {
> // e.printStackTrace();
> try {
> XMLStreamReader xsr = xIF.createXMLStreamReader(source);
> } catch (UnsupportedOperationException oe) {
> // e.printStackTrace();
> return;
> }
> }
> Assert.fail(""Expected UnsupportedOperationException not
thrown"");

I'd prefer
try {
   XMLEventReader xer = xIF.createXMLEventReader(source);
   Assert.fail(...);
} catch {
}
try {
   XMLStreamReader xsr = xIF.createXMLStreamReader(source);
   Assert.fail(...);
} catch {
}
1. please introduce a method which gets j.x.t.Source as an argument and does all checks and use this method in both tests.
2. I think it'd be better to have 4 tests {event,stream} x {dom, sax}

IssueTracker70/Bug.java
0. > File testFile = new
File(getClass().getResource(""test.xml"").getFile());
it should be private static final
1.
> public void testGetAttributeValueWithEmptyNs() throws Exception {
> File testFile = new
File(getClass().getResource(""test.xml"").getFile());
why don't you use testFile member here?
2.
> Assert.assertTrue(v != null);
Assert.assertNotNull
3. please introduce a method which does all stuff except the check and gets j.u.f.Consumer<XMLStreamReader> as an argument. then the tests will look like:
nullNs(XMLStreamReader xsr) {
   v = xsr.getAttributeValue(null, ""attribute2"");
   Asserts.assertTrue(v != null);
}
emptyNs(XMLStreamReader xsr) {
   v = xsr.getAttributeValue("""", ""attribute1"");
   Asserts.assertTrue(v != null);
}

testGetAttributeValueWithNullNs() {
   testGetAttributeValue(::nullNs);
}

testGetAttributeValueWitEmptyNs() {
   testGetAttributeValue(::emptyNs);
}

testGetAttributeValue(Consumer<XMLStreamReader> onStartElement) {
  ...
  xsr.next();
  if (xsr.isStartElement()) {
    onStartElement.accept(xsr);
  }
} ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s7ff:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,,,"2021-04-08 14:22;roboduke;Changeset: 308f6796
Author:    Mahendra Chhipa <mahendra.chhipa@oracle.com>
Committer: Joe Wang <joehw@openjdk.org>
Date:      2021-04-08 21:21:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/308f6796
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove ResourceScope-less overload from API,JDK-8264434,5045758,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-03-30 07:37,2021-03-30 11:11,2023-10-01 09:57,2021-03-30 11:11,repo-panama,,,,,,,,,tools,,0,foreign-memaccess,,,,,,,,,,,,,,,,,,,,,,"Overload methods which do not take a ResourceScope (hence, they use an implicit scope instead) create some opportunities for bugs to hide; consider;

try (ResourceScope scope = ResourceScope.ofConfined()) {
    MemorySegment str = CLinker.toCString(""hello"");
}

It is really hard for humans to see that the C string allocation does not use the outer scope (as the TWR block is visually very imposing, whereas implicit scope here is denoted by ""absence"").

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s7aj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test runtime/cds/appcds/VerifyWithDefaultArchive.java assumes OpenJDK build,JDK-8264429,5045751,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,yyang,dholmes,dholmes,2021-03-30 06:07,2021-07-08 16:37,2023-10-01 09:57,2021-03-30 07:46,17,,,,,,,,17,hotspot,,0,noreg-self,tier2,tier3,,,,,,,,,,,,,,,,,,,,"The test:

runtime/cds/appcds/VerifyWithDefaultArchive.java

added by JDK-8264337 checks for:

 out.shouldContain(""OpenJDK"");

but that will only work for an OpenJDK build not e.g. an Oracle JDK build.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264337,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,,,,,"0|i2s78z:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-30 07:03;yyang;Thanks for reporting this, I've created another PR to address this.

Curious: Should we support other JDK identities in OpenJDK?;;;","2021-03-30 07:46;roboduke;Changeset: b6521988
Author:    Yi Yang <yyang@openjdk.org>
Committer: Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-03-30 14:45:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b6521988
;;;","2021-03-30 15:38;dholmes;Tests should be specific about what they expect to see and not see. If you just test ""-version"" and get a zero exit code then also checking for specific version information is unnecessary (and you have to be sure you check for something guaranteed to be present in any implementation of OpenJDK). Testing for the presence or absence of specific logging statements is usually a better approach.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
StubRoutines::vectorizedMismatch is missing for C1 compiler after JDK-8264321,JDK-8264427,5045747,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-03-30 05:27,2021-04-01 13:25,2023-10-01 09:57,2021-04-01 13:25,repo-panama,,,,,,,,repo-panama,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,,"Reproduce: build minimal on x86

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000000000000000, pid=77522, tid=77529
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.jvm.panama)
# Java VM: OpenJDK 64-Bit Minimal VM (fastdebug 17-internal+0-adhoc.jvm.panama, mixed mode, emulated-client, compressed oops, compressed class ptrs, serial gc, linux-amd64)
# Problematic frame:
#",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264321,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,generic,,,,,,"0|i2s783:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SpliteratorTest fails after ResourceScope integration,JDK-8264422,5045740,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-03-30 03:29,2021-03-30 03:42,2023-10-01 09:57,2021-03-30 03:42,repo-panama,,,,,,,,,tools,,0,foreign-memaccess,,,,,,,,,,,,,,,,,,,,,,"SpiteratorTest uses TWR with a MemorySegment, and fails to compile.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s76j:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] [AArch64] TestBufferTearing.java fails with C1,JDK-8264414,5045732,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ngasson,ngasson,ngasson,2021-03-30 01:38,2021-07-26 04:51,2023-10-01 09:57,2021-04-14 23:27,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c1,lw3,lworld,valhalla,,,,,,,,,,,,,,,,,,,"For example:

java.lang.RuntimeException: Inconsistent field values: expected 0 to equal 675128
        at jdk.test.lib.Asserts.fail(Asserts.java:594)
        at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
        at jdk.test.lib.Asserts.assertEQ(Asserts.java:178)
        at compiler.valhalla.inlinetypes.MyValue.incrementAndCheck(TestBufferTearing.java:81)
        at compiler.valhalla.inlinetypes.TestBufferTearing$Runner.run(TestBufferTearing.java:124)
java.lang.RuntimeException: Inconsistent field values: expected 0 to equal 555238
        at jdk.test.lib.Asserts.fail(Asserts.java:594)
        at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
        at jdk.test.lib.Asserts.assertEQ(Asserts.java:178)
        at compiler.valhalla.inlinetypes.MyValue.incrementAndCheck(TestBufferTearing.java:81)
        at compiler.valhalla.inlinetypes.TestBufferTearing$Runner.run(TestBufferTearing.java:125)

I think the fix is to add a store-store barrier after the initialising stores in GraphBuilder::withfield(), so that those stores cannot be reordered with any store that publishes the object to another thread.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271280,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i2s74r:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Data is written to file header even if its CRC32 was calculated,JDK-8264413,5045731,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yyang,yyang,yyang,2021-03-30 01:36,2021-04-07 17:59,2023-10-01 09:57,2021-03-31 19:08,16,17,,,,,,,17,hotspot,,0,alibaba-interest,cds,,,,,,,,,,,,,,,,,,,,,"## Symptoms
Many tests under runtime/cds/appcds/dynamicArchive are crashed when turning on VerifySharedSpaces, it reports inconsistent crc32 between dumptime and runtime(See attachments for different header content).

## How to reproduce:
$ jtreg -vmoptions:""-XX:+VerifySharedSpaces"" -v:time -conc:64  -timeout:5 -jdk:/your/jdk/ test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/HelloDynamic.java

## JTreport
----------System.err:(38/2489)----------
 stdout: [[0.005s][info][class,load] opened: /home/qingfeng.yy/openjdk16_so_warning/jdk/build/linux-x86_64-server-slowdebug/images/jdk/lib/modules
[0.096s][info][cds       ] trying to map /home/qingfeng.yy/openjdk16_so_warning/jdk/build/linux-x86_64-server-slowdebug/images/jdk/lib/server/classes.jsa
[0.096s][info][cds       ] Opened archive /home/qingfeng.yy/openjdk16_so_warning/jdk/build/linux-x86_64-server-slowdebug/images/jdk/lib/server/classes.jsa.
[0.096s][info][cds       ] Archive was created with UseCompressedOops = 1, UseCompressedClassPointers = 1
[0.096s][info][cds       ] Core region alignment: 4096
[0.096s][info][cds       ] trying to map /home/qingfeng.yy/openjdk16_so_warning/jdk/JTwork/scratch/0/top-16h45m44s593.jsa
[0.096s][info][cds       ] Opened archive /home/qingfeng.yy/openjdk16_so_warning/jdk/JTwork/scratch/0/top-16h45m44s593.jsa.
[0.096s][info][cds       ] _crc expected: -557112516
[0.096s][info][cds       ]        actual: -1295249408
Error occurred during initialization of VM
Unable to use shared archive.
];
 stderr: [An error has occurred while processing the shared archive file.
Header checksum verification failed.
]
 exitValue = 1

java.lang.RuntimeException: 'Hello source: shared objects file' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:206)
	at HelloDynamic.lambda$doTest$1(HelloDynamic.java:77)
	at jdk.test.lib.cds.CDSTestUtils$Result.assertNormalExit(CDSTestUtils.java:145)
	at HelloDynamic.doTest(HelloDynamic.java:76)
	at HelloDynamic.testDefaultBase(HelloDynamic.java:48)
	at DynamicArchiveTestBase.runTest(DynamicArchiveTestBase.java:74)
	at HelloDynamic.main(HelloDynamic.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 'Hello source: shared objects file' missing from stdout/stderr 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-30 01:40;yyang;filemapinfo_dumptime.log;https://bugs.openjdk.org/secure/attachment/93900/filemapinfo_dumptime.log","2021-03-30 01:40;yyang;filemapinfo_runtime.log;https://bugs.openjdk.org/secure/attachment/93901/filemapinfo_runtime.log",,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s74j:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-30 11:23;mseledtsov;ILW = LMM = P4;;;","2021-03-31 19:08;roboduke;Changeset: de495df7
Author:    Yi Yang <yyang@openjdk.org>
Committer: Calvin Cheung <ccheung@openjdk.org>
Date:      2021-04-01 02:07:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/de495df7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/jvmti/HeapMonitor tests intermittently fail due to large TLAB size,JDK-8264411,5045728,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hshi,hshi,hshi,2021-03-30 00:40,2021-04-12 15:10,2023-10-01 09:57,2021-04-05 18:37,17,,,,,,,,17,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,,"test/hotspot/jtreg/serviceability/jvmti/HeapMonitor tests
Test with  'JTREG=JOBS=12;VM_OPTIONS=-XX:ActiveProcessorCount=1' on Linux X64 machine with 256G memory

serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitorArrayAllSampledTest.java        Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Could not set the sampler
serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitorInterpreterArrayTest.java       Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: No expected events were found: false, false
serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitorInterpreterObjectTest.java      Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Statistics should show about 1801.8018018018017 samples.
serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitorMultiArrayTest.java             Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Could not set the sampler
serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitorRecursiveTest.java              Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Could not set the sampler
serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitorVMEventsTest.java               Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Could not set the sampler

intermittently failure happens when use serial/parallel, when initial TLAB is bigger than about 20M, Heap Monitor test might fails. When using G1/ZGC region based GC, TLAB is less than region size and fine in most configuration.

It takes two steps to enable expected Object Sampling
1. consume current TLAB
   then allocation enters allocate_inside_tlab_slow and check
   JvmtiExport::should_post_sampled_object_alloc
2. consume initial ThreadHeapSampler::_bytes_until_sample
   then runtime invokes pick_next_sample and check sampleing interval
   and update _bytes_until_sample.
   initial _bytes_until_sample is geometric variable with the specified mean
   (512K by default), check ThreadHeapSampler::pick_next_geometric_sample()",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8225313,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s73v:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-03-30 00:59;hshi;https://bugs.openjdk.java.net/browse/JDK-8225313
serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitorStatArrayCorrectnessTest.java test fails with ParalleGC, might fail with same reason.


;;;","2021-03-30 07:17;dcubed;Moving from hotspot/svc -> hotspot/jvmti since HeapMonitor
is part of JVM/TI.;;;","2021-04-05 18:37;roboduke;Changeset: dc608fd0
Author:    Hui Shi <hshi@openjdk.org>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-04-06 01:36:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dc608fd0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[macos]: App names containing '.' characters results in an error message when launching,JDK-8264403,5045610,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,herrick,webbuggrp,webbuggrp,2021-03-28 11:18,2021-05-13 19:05,2023-10-01 09:57,2021-04-01 13:40,16,,,,,,,,17,tools,,0,dcsad,macos,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
macOS: 11.2.3
java: adoptopenjdk16+36, open jdk-17-ea

A DESCRIPTION OF THE PROBLEM :
Launching an application with a '.' character in the app name results in an error message. E.g using the name ""hello.world"" results in the following line when running the app ./hello.world.app/Contents/MacOS/hello.world:

    Error opening "".../hello.world.app/Contents/app/hello.cfg"" file: No such file or directory

Snooping around in the source code, the ""createJvmLauncher"" method in AppLauncher.cpp suggests that the cfg path is composed by _replacing_ any suffix in the launcher path with "".cfg"", when just appending it seems more appropriate.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Use a name with a '.' in the --name parameter when calling jpackage: 

    jpackage --type app-image --name hello.world ...

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Launching the resulting application should not result in error messages.
ACTUAL -
Launching the resulting application results in an error message:

    Error opening "".../hello.world.app/Contents/app/hello.cfg"" file: No such file or directory

CUSTOMER SUBMITTED WORKAROUND :
Refrain from using '.' characters in app names.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2s6dv:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,Verified,,"2021-03-29 21:12;adev;Using a name with a '.' in the --name parameter when calling jpackage throws error:
  Error opening "".../hello.world.app/Contents/app/hello.cfg"" file: No such file or directory 

I am really not sure if it is allowed. If not, then a proper message should be given.;;;","2021-03-30 08:07;herrick;Although I cannot reproduce on Windows it easily reproduces on macos (both using current JDK 17). ;;;","2021-03-30 08:59;herrick;is obvious from the code, cfg filename is obtained using FileUtils.replaceSufix(launcherName, "".cfg""),
on Windows this replaces "".exe"" with "".cfg"".
on linux or macos where there is no ""."" in the launcher filename, it will just append "".cfg"".
but on linux or macos where there is a ""."" in the filename it will replace the string following the last ""."" with ""cfg"".
We need p[latform specific code to translate from launcher filename to cfg filename.;;;","2021-04-01 13:40;roboduke;Changeset: 04f24fe9
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-04-01 20:39:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/04f24fe9
;;;","2021-05-11 10:18;adev;Requested the submitter to see if the bug is fixed in the latest build at https://jdk.java.net/17/ b21 and provide the feedback.;;;","2021-05-13 19:04;adev;Reply received from the submitter
=============================
I just tested with jdk17 ea 21, and I can confirm that the the problem is solved!;;;",,,,,,,,,,,,,,,,,,,,,,
"drop ""Restricted"" suffix for methods enabled by enable-native-access and add fine grained native-access for CLinker",JDK-8264402,5045715,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,sundar,sundar,sundar,2021-03-29 20:36,2021-03-30 05:26,2023-10-01 09:57,2021-03-30 05:26,repo-panama,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"drop ""Restricted"" suffix for methods enabled by enable-native-access 

* The method names should be ""asSegment"" instead of ""asSegmentRestricted:

and add fine grained native-access for CLinker

* Currently CLinker.getInstance is native access checked. Better to have fine-grained native-access-check for methods of CLinker.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s70z:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) WindowsFileStore equality depends on how the FileStore was constructed,JDK-8264400,5045576,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bpb,webbuggrp,webbuggrp,2021-03-26 15:34,2022-10-05 06:38,2023-10-01 09:57,2021-04-09 08:42,11,16,17,8,,,,,17,core-libs,,0,additional-information-not-received,dcsaw,jdk11u-fix-request,jdk11u-fix-yes,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10.

Tested using two different Java installations:

java -version yields:
java version ""16"" 2021-03-16, Java(TM) SE Runtime Environment (build 16+36-2231)

java -version yields:
openjdk version ""11.0.2"" 2019-01-15 OpenJDK Runtime Environment 18.9 (build 11.0.2+9)

A DESCRIPTION OF THE PROBLEM :
Windows file system roots are commonly identified by a letter and a colon.
The letter is case insensitive, e.g. c: and C: denote the same root.

The WindowsFileStore uses the root name to check for equality and compute a hashCode, which makes sense. However, it does so with case sensitivity. The equality of two different WindowsFileStore object therefore depends on how it was acquired.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Acquire two FileStore objects representing the same actual file store, but use paths with different case.

Compare them using equals().

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
FileStore objects representing the same actual file store should be equal, and return the same hashCode.
ACTUAL -
FileStore objects representing the same actual file store may or may not be equal, depending on how the FileStore object was acquired.

If equality is not supposed to work in this way (it's not documented), there should be a different official means of determining if two different FileStore objects represent the same underlying file store.

---------- BEGIN SOURCE ----------
import java.io.IOException;
import java.nio.file.*;

public class Repro {
    public static void main(String[] args) throws IOException {
        final FileSystem fs = FileSystems.getDefault();
        final FileStore upper = Files.getFileStore(fs.getPath(""C:\\""));
        final FileStore lower = Files.getFileStore(fs.getPath(""c:\\""));
        System.out.println(lower.equals(upper)); // false
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
- Convert the path to a given case before acquiring it. (I have not investigated how this inter-works with FileSystem.getFileStores().)  I don't know if this is a good workaround for other platforms.

- Use toString() to check for equality. This does not work on Windows if the user sets or changes the volume's label. I don't know if it works on other platforms.

- It may work to get the volume:vsn attribute, and use that for comparison. I bet that won't work for other platforms.

FREQUENCY : always


",,,,,,,,,,JDK-8288873,JDK-8294854,JDK-8287911,,,,,,,,,,,,,,,,,,,,,JDK-8219644,,,,,,,,,,JDK-8265100,JDK-8294441,,,,,"2021-03-29 19:40;tongwan;Repro.java;https://bugs.openjdk.org/secure/attachment/93898/Repro.java",,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i2s66b:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Not verified,,"2021-03-29 19:37;tongwan;The observations on Windows 10:
JDK 8: Failed, lower case is not equal to upper case when creating FileStore
JDK 11: Failed.
JDK 16: Failed.
JDK 17ea+6: Failed.
;;;","2021-03-30 00:47;alanb;I think we have another issue tracking this, just can't find it now.
The summary is that when a FileStore is for a local root directly then the drive letter should be checked for equality without regard to case. The UNC/remote case needs further investigation.;;;","2021-03-30 00:54;michaelm;I think it's a dup of https://bugs.openjdk.java.net/browse/JDK-8219644. This one might be a better description of the issue though.

I have closed JDK-8219644, but please refer to that report for a description of some of the UNC and other subtleties.;;;","2021-04-09 08:42;roboduke;Changeset: cc54de76
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-04-09 15:41:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cc54de76
;;;","2021-04-19 19:27;tongwan;Request the submitter to verify the fix with the latest version of JDK at https://jdk.java.net/17/;;;","2021-05-10 04:49;tongwan;No verification from the submitter.;;;","2022-06-09 04:31;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
Clean backport except for Copyright.
SAP nighlty testing passed.;;;","2022-06-09 04:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1137
Date: 2022-06-09 11:30:12 +0000;;;",,,,,,,,,,,,,,,,,,,,
"BevelBorderUIResource​(int, Color, Color) and BevelBoder(int, Color, Color) spec should clarify about usage of highlight and shadow color",JDK-8264398,5045703,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,dbessono,dbessono,2021-03-29 15:55,2021-05-10 10:36,2023-10-01 09:57,2021-05-04 23:20,15,16,17,,,,,,17,client-libs,,0,conformance,,,,,,,,,,,,,,,,,,,,,,"The current state of specification for 
https://docs.oracle.com/en/java/javase/15/docs/api/java.desktop/javax/swing/plaf/BorderUIResource.BevelBorderUIResource.html#%3Cinit%3E(int,java.awt.Color,java.awt.Color)

says

Parameters:
    highlight - the color to use for the bevel highlight
    shadow - the color to use for the bevel shadow 

In fact for OpenJDK implementation the passed colors are the ""inner highlight"" and ""outer shadow"" properties of BevelBorder",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264706,,,,,JDK-8263481,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s6yb:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-04-01 04:33;psadhukhan;BevelBorderUIResource uses BevelBorder which uses the same shadow color for inner/outer shadow and highlight color for inner/outer highlight but bit brighter for outer highlight and inner shadow.

https://github.com/openjdk/jdk/blob/master/src/java.desktop/share/classes/javax/swing/border/BevelBorder.java#L93-L115;;;","2021-04-01 04:41;dbessono;Exactly. And this behavior is equally seems unspecified. The request is to have 

""the same shadow color for inner/outer shadow and highlight color for inner/outer highlight but bit brighter for outer highlight and inner shadow.""

added to the spec.;;;","2021-04-01 05:11;psadhukhan;Dont think it's needed...it's intuitive...but if you insist...;;;","2021-04-01 23:22;serb;Are we sure that the below text is correct?
""In fact for OpenJDK implementation the passed colors are the ""inner highlight"" and ""outer shadow"" properties of BevelBorder""

Because the method in question does not pass the ""inner highlight"" and ""outer shadow"" properties of BevelBorder, it calls the ""super()"" method which has exactly the same parameters and spec, it does not call the overloaded method in the ""BevelBorderUIResource"" which take ""inner highlight"" and ""outer shadow"".

And looks like using "".brighter()"" is an implementation detail of the BevelBorder class, not BevelBorderUIResource​, no?;;;","2021-04-02 04:17;dbessono;Yes, this is correct, this constructor is being called:

    /**
     * Creates a bevel border with the specified type, highlight and
     * shadow colors.
     * @param bevelType the type of bevel for the border
     * @param highlight the color to use for the bevel highlight
     * @param shadow the color to use for the bevel shadow
     */
    public BevelBorder(int bevelType, Color highlight, Color shadow) {
        this(bevelType, highlight.brighter(), highlight, shadow, shadow.brighter());
    }

Does the spec of BevelBorder mention anywhere how the given highlight/shadow colors expected to transform to highlight inner, highlight outer, shadow inner, shadow outer? Or it's considered as an implementation detail and implementation is free to do whatever it wants, even ignoring the given colors?

;;;","2021-04-02 15:19;serb;The usage of ""brighter()/darker()"" is an implementation detail, this class usually names this operation like ""the color is derived from the specified xxx"". So we can say that highlightXXX will be derived from the highlight color, etc.
;;;","2021-04-04 22:14;psadhukhan;Will this be fine? If yes, I will update the PR
         /**
          * Constructs a {@code BevelBorderUIResource}.
-         * The shadow color is used for both inner and outer shadow and
-         * highlight color is used for both inner and outer highlight
-         * but brighter version of highlight color is used for outer highlight and
-         * brighter versoin of shadow color is used for inner shadow.
+         * highlightOuterColor and highlightInnerColor will be derived from
+         * specified highlight color and
+         * shadowOuterColor and shadowInnerColor  will be derived from
+         * specified shadow color.
          * @param bevelType the type of bevel for the border
          * @param highlight the color to use for the bevel highlight
          * @param shadow the color to use for the bevel shadow;;;","2021-04-05 00:11;psadhukhan;or maybe more simpler (as is done for BevelBorder constructor)
 + * Creates a {@code BevelBorderUIResource} with the specified type, highlight and
  +  * shadow colors.

I guess there's no need to specify inner/outer demarcation as those are implementation details.;;;","2021-04-05 04:06;psadhukhan;OK. I have updated the PR. Please check.;;;","2021-04-13 03:36;dbessono;Looks good, thank you.;;;","2021-05-04 23:20;roboduke;Changeset: b71f85ad
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-05-05 06:19:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b71f85ad9d5dbd59b1d279148bc65ac26309a942
;;;",,,,,,,,,,,,,,,,,
"WB_EnqueueInitializerForCompilation fails with ""method holder must be initialized"" when called for uninitialized class",JDK-8264395,5045692,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rraghavan,epavlova,epavlova,2021-03-29 13:55,2021-05-18 07:02,2023-10-01 09:57,2021-04-30 01:24,11,12,13,14,15,16,17,8,17,hotspot,,0,hs-comp-triaged,oracle-triage-11,oracle-triage-17,starter,,,,,,,,,,,,,,,,,,,"The attached JTreg test ""Test.java"" fails with the assertion below due to trying to compile <clinit> for the uninitialized class ""LongWrapper"". This seems like a special case related to the WhiteBox usage of WB_EnqueueInitializerForCompilation and should not happen otherwise.

-------------
Original report for Valhalla:

compiler/valhalla/inlinetypes/TestLWorldCrash.java ported to new IR framework started to crash with

lworld bits crash with 

#  Internal Error (/home/katya/work/JavaSE/Hotspot/ws/git/valhalla.chhagedorn/open/src/hotspot/share/compiler/compileBroker.cpp:1384), pid=30627, tid=30630
#  assert(!method->method_holder()->is_not_initialized()) failed: method holder must be initialized
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-lworld3ea+0-2021-03-16-2108446.katya...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-lworld3ea+0-2021-03-16-2108446.katya..., mixed mode, sharing, tiered, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xa5e484]  CompileBroker::compile_method(methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, DirectiveSet*, Thread*)+0x2d4
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /home/katya

---------------  S U M M A R Y ------------

Command Line: -Djava.library.path=/home/katya/work/JavaSE/Hotspot/ws/git/valhalla.chhagedorn/build/linux-x64/images/test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Djavatest.maxOutputSize=1000000 -XX:-UseACmpProfile -XX:-UseCompressedOops -XX:FlatArrayElementMaxOops=0 -XX:FlatArrayElementMaxSize=0 -XX:-UseArrayLoadStoreProfile -XX:InlineFieldMaxFlatSize=-1 -XX:+InlineTypePassFieldsAsArgs -XX:+InlineTypeReturnedAsFields -XX:+StressInlineTypeReturnedAsFields -DVerifyIR=false -XX:-BackgroundCompilation -XX:CompileCommand=quiet -DShouldDoIRVerification=false -DWarmup=251 jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution compiler.valhalla.inlinetypes.TestLWorldCrash compiler.valhalla.inlinetypes.MyValue1 compiler.valhalla.inlinetypes.MyValue2 compiler.valhalla.inlinetypes.MyValue2Inline compiler.valhalla.inlinetypes.MyValue3 compiler.valhalla.inlinetypes.MyValue3Inline

Host: olegbox, Intel(R) Xeon(R) CPU E5-2630 0 @ 2.30GHz, 24 cores, 15G, Ubuntu 16.04.6 LTS
Time: Mon Mar 29 13:14:04 2021 PDT elapsed time: 1.559626 seconds (0d 0h 0m 1s)

---------------  T H R E A D  ---------------

Current thread (0x00007fb044028f20):  JavaThread ""main"" [_thread_in_vm, id=30630, stack(0x00007fb04b2f9000,0x00007fb04b3fa000)]

Stack: [0x00007fb04b2f9000,0x00007fb04b3fa000],  sp=0x00007fb04b3f83d0,  free space=1020k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xa5e484]  CompileBroker::compile_method(methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, DirectiveSet*, Thread*)+0x2d4
V  [libjvm.so+0xa5eb12]  CompileBroker::compile_method(methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, Thread*)+0x82
V  [libjvm.so+0x1a7e834]  WhiteBox::compile_method(Method*, int, int, Thread*)+0xc4
V  [libjvm.so+0x1a7ef7f]  WB_EnqueueInitializerForCompilation+0x1bf
j  sun.hotspot.WhiteBox.enqueueInitializerForCompilation0(Ljava/lang/Class;I)Z+0
j  sun.hotspot.WhiteBox.enqueueInitializerForCompilation(Ljava/lang/Class;I)Z+8
j  jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution.applyClassAnnotations(Ljava/lang/Class;)V+71
j  jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution.processControlAnnotations(Ljava/lang/Class;)V+55
j  jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution.parseTests()V+51
j  jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution.start()V+1
j  jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution.main([Ljava/lang/String;)V+55
v  ~StubRoutines::call_stub
V  [libjvm.so+0xed2c09]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x4e9
V  [libjvm.so+0x1010de9]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.1]+0x369
V  [libjvm.so+0x10153a5]  jni_CallStaticVoidMethod+0x1c5
C  [libjli.so+0x47d4]  JavaMain+0xd34
C  [libjli.so+0x7db9]  ThreadJavaMain+0x9

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  sun.hotspot.WhiteBox.enqueueInitializerForCompilation0(Ljava/lang/Class;I)Z+0
j  sun.hotspot.WhiteBox.enqueueInitializerForCompilation(Ljava/lang/Class;I)Z+8
j  jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution.applyClassAnnotations(Ljava/lang/Class;)V+71
j  jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution.processControlAnnotations(Ljava/lang/Class;)V+55
j  jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution.parseTests()V+51
j  jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution.start()V+1
j  jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution.main([Ljava/lang/String;)V+55
v  ~StubRoutines::call_stub


To reproduce do:
> clone Cristian's branch: 
  https://github.com/openjdk/valhalla/compare/lworld...chhagedorn:TestingFramework

> put attached TestLWorldCrash.java under test/hotspot/jtreg/compiler/valhalla/inlinetypes

> run as any jtreg test (uoi can use JVM from master valhalla bits as well)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-30 02:32;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/93902/Test.java","2021-03-29 13:57;epavlova;TestLWorldCrash.java;https://bugs.openjdk.org/secure/attachment/93891/TestLWorldCrash.java","2021-03-30 02:32;chagedorn;hs_err_Test.log;https://bugs.openjdk.org/secure/attachment/93903/hs_err_Test.log","2021-03-29 13:58;epavlova;hs_err_bug8264395.log;https://bugs.openjdk.org/secure/attachment/93892/hs_err_bug8264395.log",,,,,,,,,,,,,,,,,,,,,,,"0|i2s6vv:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-29 14:02;epavlova;It looks like the crash is triggered by @ForceCompileClassInitializer.
The test passes if no @ForceCompileClassInitializer annotations are used.;;;","2021-03-30 02:35;chagedorn;This can also be reproduced with mainline with the additionally added Test.java JTreg test (can just be executed like that to trigger the assertion failure). I updated the bug accordingly.;;;","2021-03-30 02:45;thartmann;ILW = Assert during compilation triggered via Whitebox API, with Whitebox API method enqueueInitializerForCompilation0, make sure method holder is initialized = MLM = P4;;;","2021-03-30 08:08;chagedorn;I think we just need to update the WB method code to bail out if a class was not initialized, yet. Normally (without WB), the class initializer method should never be attempted to be compiled when the class is not yet initialized.;;;","2021-04-30 01:24;roboduke;Changeset: 3554dc29
Author:    Rahul Raghavan <rraghavan@openjdk.org>
Date:      2021-04-30 08:23:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3554dc299dd242ffea63be9c5958be7a08d53509
;;;",,,,,,,,,,,,,,,,,,,,,,,
JDK-8258284 introduced dangling TLH race,JDK-8264393,5045687,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dcubed,dcubed,dcubed,2021-03-29 12:31,2021-04-07 18:02,2023-10-01 09:57,2021-04-03 12:07,17,,,,,,,,17,hotspot,,1,Thread-SMR,,,,,,,,,,,,,,,,,,,,,,"I ported some 20 year old tests using JDK-8262881 in order to help
test [~rehn]'s fix for JDK-8257831. These tests in combination with
one piece of the fix from JDK-8257831 revealed a bug in my fix for
JDK-8258284 from back in Dec 2020.

The race revealed by the ported tests from JDK-8262881 happens
only with nested ThreadsListHandles. When TLH2 is destroyed, the
thread updates its threads_hazard_ptr from the TLH2-list to the
TLH1-list; I made this change back in 2020.12 using JDK-8258284.
The threads_hazard_ptr can be observed by a thread calling
ThreadsSMRSupport::free_list() as a stable ThreadsList at the same
time as the TLH1 destructor is decrementing the nested_handle_cnt
that permits the ThreadsList to be freed. So the thread calling
ThreadsSMRSupport::free_list() thinks it has a stable hazard ptr
(TLH1-list), but that hazard ptr can be freed and causes lots of
confusion.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257831,JDK-8262881,JDK-8258284,,,,,,,,,,"2021-03-29 14:18;dcubed;analysis.ThreadsList.for_JBS;https://bugs.openjdk.org/secure/attachment/93893/analysis.ThreadsList.for_JBS",,,,,,,,,,,generic,,,,,,b03,17,,generic,,,,,,"0|i2s6uz:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-29 14:13;dcubed;Wow, those ASCII art diagrams got seriously munged.

 Attaching as analysis.ThreadsList.for_JBS instead.;;;","2021-04-03 12:07;roboduke;Changeset: f259eeaf
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-04-03 19:06:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f259eeaf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
LibraryLookup should be more friendly with implicit unloading,JDK-8264386,5045673,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-03-29 08:32,2021-03-29 16:52,2023-10-01 09:57,2021-03-29 16:52,repo-panama,,,,,,,,,tools,,0,foreign-abi,foreign-memaccess,,,,,,,,,,,,,,,,,,,,,"Dereferencing a segment from a LibraryLookup is possible, in the following form:

LibraryLookup libLookup = ...
MemorySegment segment = libLookup.lookup(""foo"").asSegmentRestricted(....)

The above code has a problem: there is no link between the produced segment and the original library lookup - meaning that, in principle, it's possible for the library to be unloaded when dereference occurs.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s6rv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javac hangs when annotation is declared with sealed public modifier ,JDK-8264373,5045660,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,vromero,vkhatri,vkhatri,2021-03-29 06:50,2021-08-05 13:57,2023-10-01 09:57,2021-04-15 12:07,17,,,,,,,,17,tools,,0,conformance,javac-sealed,tck-red-17,,,,,,,,,,,,,,,,,,,,"javac hangs when annotation is declared with sealed public modifier 

Please refer the below code:

================================
// AnnotTest .java
public class AnnotTest  {

    @Annot
    public static void main(String argv[]) {
        System.out.println(""Test"");
    }
    
}

================================
// Annot.java
sealed public  @interface Annot { }
================================

The below command hangs:

javac --enable-preview -source 17 AnnotTest.java Annot.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-29 06:55;vkhatri;Annot.java;https://bugs.openjdk.org/secure/attachment/93882/Annot.java","2021-03-29 06:55;vkhatri;AnnotTest.java;https://bugs.openjdk.org/secure/attachment/93881/AnnotTest.java",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s6oz:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2021-03-30 06:19;vromero;it can be reproduced just with:

sealed public @interface Anno {}

this is not an issue related to sealed classes but discovered by sealed classes. It is an issue with an internal flag mask in javac;;;","2021-04-15 12:07;roboduke;Changeset: 0b1b5c8d
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2021-04-15 19:07:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0b1b5c8d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"Loop strip mining verification fails with ""should be on the backedge""",JDK-8264360,5045645,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,thartmann,thartmann,2021-03-29 05:06,2021-10-05 01:44,2023-10-01 09:57,2021-03-30 01:15,11,16,17,,,,,,17,hotspot,,0,c2,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,,,,,,,,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/jdk/open/src/hotspot/share/opto/loopnode.cpp:1810), pid=138754, tid=138772
#  assert(n->in(0) == be) failed: should be on the backedge

Current CompileTask:
C2:    258  273 %     4       MainClass::j @ 48 (198 bytes)

Stack: [0x00007f1655933000,0x00007f1655a34000],  sp=0x00007f1655a2f010,  free space=1008k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12b1af2]  LoopNode::verify_strip_mined(int) const+0xe82
V  [libjvm.so+0xa02b15]  Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&) [clone .part.0]+0x85
V  [libjvm.so+0xa03288]  Compile::final_graph_reshaping_walk(Node_Stack&, Node*, Final_Reshape_Counts&)+0x198
V  [libjvm.so+0xa04ff1]  Compile::final_graph_reshaping()+0x3d1
V  [libjvm.so+0xa10492]  Compile::Optimize()+0x1982
V  [libjvm.so+0xa11e75]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1905
V  [libjvm.so+0x83cefa]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa21c91]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xf21
V  [libjvm.so+0xa22938]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x183f261]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x1847360]  Thread::call_run()+0x100
V  [libjvm.so+0x1532c06]  thread_native_entry(Thread*)+0x116
",,,,,,,,,,JDK-8264479,JDK-8265515,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257575,,,,,,"2021-03-29 05:07;thartmann;MainClass.java;https://bugs.openjdk.org/secure/attachment/93877/MainClass.java","2021-03-29 05:07;thartmann;hs_err_pid138754.log;https://bugs.openjdk.org/secure/attachment/93878/hs_err_pid138754.log","2021-03-29 05:07;thartmann;replay_pid138754.log;https://bugs.openjdk.org/secure/attachment/93879/replay_pid138754.log",,,,,,,,,,,,,,,,,,,,,,,,"0|i2s6ln:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-29 05:06;thartmann;Assert was added by JDK-8257575.;;;","2021-03-29 05:07;thartmann;Roland, could you please have a look?;;;","2021-03-29 05:09;thartmann;ILW = Assert during C2 compilation, reproducible with generated test, disable loop strip mining = HLM = P3;;;","2021-03-30 01:15;roboduke;Changeset: d2a63f25
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-03-30 07:58:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d2a63f25
;;;","2021-04-19 08:51;mdoerr;Fix Request (11u)
Should get backported for parity with 11.0.12-oracle. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,
Compiler directives should enable DebugNonSafepoints when PrintAssembly is requested,JDK-8264359,5045644,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,neliasso,shade,shade,2021-03-29 04:59,2021-04-20 05:08,2023-10-01 09:57,2021-04-05 23:48,11,13,15,16,17,,,,17,hotspot,,0,compilercontrol,diagnostics,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,"Found this while working on jcstress support, see CODETOOLS-7902865. jcstress opts in to PrintAssembly for the particular method by using the compile directive:
 https://github.com/openjdk/jcstress/blob/master/jcstress-core/src/main/java/org/openjdk/jcstress/TestExecutor.java#L246-L248

When supplied on JVM command line, -XX:+PrintAssembly implicitly enables -XX:+DebugNonSafepoints:

jint Arguments::apply_ergo() {
  ...
  if (PrintAssembly && FLAG_IS_DEFAULT(DebugNonSafepoints)) {
    warning(""PrintAssembly is enabled; turning on DebugNonSafepoints to gain additional output"");
    DebugNonSafepoints = true;
  }
  ...
}

When -XX:CompileCommand=Print is used, it also opts in:

void compilerOracle_init() {
  ...
  if (has_command(CompileCommand::Print)) {
    if (PrintAssembly) {
      warning(""CompileCommand and/or %s file contains 'print' commands, but PrintAssembly is also enabled"", default_cc_file);
    } else if (FLAG_IS_DEFAULT(DebugNonSafepoints)) {
      warning(""printing of assembly code is enabled; turning on DebugNonSafepoints to gain additional output"");
      DebugNonSafepoints = true;
    }
  }
  ...

But CompilerDirectives do not seem to have the same heuristics.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7902865,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s6lf:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-29 07:17;thartmann;ILW = LLL = P5;;;","2021-04-05 23:48;roboduke;Changeset: 81325483
Author:    Nils Eliasson <neliasso@openjdk.org>
Date:      2021-04-06 06:47:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/81325483
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Outdated links in JavaComponentAccessibility.m,JDK-8264344,5045626,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kizune,kizune,kizune,2021-03-29 01:21,2021-04-05 16:13,2023-10-01 09:57,2021-03-29 10:04,,,,,,,,,17,client-libs,,0,noreg-other,,,,,,,,,,,,,,,,,,,,,,The links in the header of JavaComponentAccessibility.m file leads to either outdated or straight out missing information. The Barry A. Feigenbaum article on accessibility in JFC/Swing was removed from IBM site in 2005 and archives of Sun Accessibility Mailing List went down when java.sun.com site was discontinued. And the Java Accessibility documents are pointing to the document for Java 8 instead of latest LTS.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s6hf:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-03-29 10:04;roboduke;Changeset: fd45694c
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2021-03-29 17:03:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fd45694c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] [AArch64] TestLWorld.java assertion failure in OopFlow::build_oop_map,JDK-8264340,5045622,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ngasson,ngasson,ngasson,2021-03-29 00:39,2021-08-03 07:30,2023-10-01 09:57,2021-08-03 07:30,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,valhalla,,,,,,,,,,,,,,,,,,,"This happens reliably in TestLWorld::test9() scenario 0 on AArch64:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/mnt/nicgas01-pc/valhalla/src/hotspot/share/opto/buildOopMap.cpp:360), pid=8866, tid=8882
#  assert(false) failed: there should be a oop in OopMap instead of a live raw oop at safepoint
#",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-13 00:37;ngasson;SchedCrash.java;https://bugs.openjdk.org/secure/attachment/95478/SchedCrash.java","2021-03-29 00:39;ngasson;TestLWorld.jtr;https://bugs.openjdk.org/secure/attachment/93873/TestLWorld.jtr","2021-07-20 20:05;ngasson;checkcast-igv.png;https://bugs.openjdk.org/secure/attachment/95580/checkcast-igv.png","2021-03-29 00:31;ngasson;hs_err_pid177359.log;https://bugs.openjdk.org/secure/attachment/93874/hs_err_pid177359.log",,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i2s6gj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-30 23:42;ngasson;I think it's related to scheduling. This test will fail in the same way on x86 when run with -XX:+UseOptoScheduling.;;;","2021-07-12 01:59;ngasson;The problem seems to be that a CheckCastPP node whose input is a raw pointer gets scheduled after a Safepoint node, so that the raw pointer is live in a register over the safepoint. GCM's PhaseCFG::schedule_late() has a check for this and adding something similar to Scheduling::ComputeRegisterAntidependencies() fixes the crash for me.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
VM crashed when -XX:+VerifySharedSpaces,JDK-8264337,5045619,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yyang,yyang,yyang,2021-03-28 23:31,2021-04-05 16:13,2023-10-01 09:57,2021-03-30 01:15,16,17,,,,,,,17,hotspot,,0,alibaba-interest,cds,oracle-triage-17,,,,,,,,,,,,,,,,,,,,"VM crashed when turning on the VerifySharedSpaces.

---------------------------------------------
Reproduce:

$./java -XX:+VerifySharedSpaces -version
[0.113s][error][cds] relocation bitmap CRC error
[0.114s][error][cds] relocation bitmap CRC error
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/javaClasses.inline.hpp:215
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/qingfeng.yy/openjdk16_so_warning/jdk/src/hotspot/share/classfile/javaClasses.inline.hpp:215), pid=75241, tid=75242
#  assert(java_lang_Class::is_instance(java_class)) failed: must be a Class object
#
# JRE version:  (17.0) (slowdebug build )
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 17-internal+0-adhoc.qingfengyy.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x697d19]  java_lang_Class::as_Klass(oopDesc*)+0x29
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /home/qingfeng.yy/openjdk16_so_warning/jdk/build/linux-x86_64-server-slowdebug/images/jdk/bin/hs_err_pid75241.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264429,,,,,,"2021-03-29 14:55;iklam;hs_err_pid75241.log;https://bugs.openjdk.org/secure/attachment/93894/hs_err_pid75241.log",,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s6fv:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-29 14:56;iklam;I moved the hs_err to bug attachment so the Description is easier to read.;;;","2021-03-30 01:15;roboduke;Changeset: bcdf4694
Author:    Yi Yang <yyang@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2021-03-30 07:20:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bcdf4694
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Scene MouseHandler is referencing removed nodes,JDK-8264330,5045603,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jhendrikx,jhendrikx,jhendrikx,2021-03-28 05:41,2021-12-23 01:24,2023-10-01 09:57,2021-04-01 05:51,jfx16,,,,,,,,jfx17,javafx,,0,,,,,,,,,,,,,,,,,,,,,,,"The Scene$MouseHandler is holding on to a reference of nodes that have been removed from the Scene. This can cause issues when navigating through an application with the keyboard only (Nodes do not get garbage collected until a mouse click occurs).

Run the below example, and follow it carefully:

1) Click the *label* with the left mouse button
2) Select the button with the keyboard (press space)

Notice the the Button is removed from the Scene but is not being garbage collected.  This is because Scene$MouseHandler pdrEventTargets field still contains a reference to the button, which is not being cleaned up because pdrInProgress is false when the removal code (which is supposed to do the clean up) runs.

Sample code below:

    import java.lang.ref.WeakReference;
    
    import javafx.application.Application;
    import javafx.application.Platform;
    import javafx.scene.Scene;
    import javafx.scene.control.Button;
    import javafx.scene.control.Label;
    import javafx.scene.layout.HBox;
    import javafx.scene.layout.VBox;
    import javafx.stage.Stage;
    
    public class FrontEndRunner extends Application {
    
      public static void main(String[] args) {
        Application.launch(args);
      }
    
      @Override
      public void start(Stage stage) throws Exception {
        Button button = new Button(""(2) Select me with keyboard"");
        VBox box = new VBox(new HBox(button, new Label(""(1) Click here first!"")));
        WeakReference<Button> weakRef = new WeakReference<>(button);
    
        button.setOnAction(e -> {
          Label label = new Label(""Thanks, button reference should disappear"");
          box.getChildren().setAll(label);
    
          new Thread(() -> {
            for(;;) {
              try {
                Thread.sleep(1000);
                System.gc();
    
                Platform.runLater(() -> {
                  label.setText(""Button reference is: "" + weakRef.get());
                });
              }
              catch(InterruptedException e1) {
                e1.printStackTrace();
              }
            }
          }).start();
        });
    
        button = null;
    
        Scene scene = new Scene(box);
    
        stage.setWidth(1000);
        stage.setScene(scene);
        stage.show();
      }
    }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279214,,,,,,JDK-8265513,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s6cb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@18948797,,,,,,,,,"2021-03-28 06:23;jhendrikx;Think I also have a fix.  There is code in place that clears the press-drag-release values (clearPDRTargets) when MOUSE_RELEASED event comes in, but this code doesn't clear the pdrEventTargets list.  When the list is filled again (due to a MOUSE_PRESSED, done in fillHierarchy) there is an explicit list.clear() done there which cleans up the old references, but this should happen much earlier.

Suggestion therefore is to add one line to clearPDRTargets which also clears the pdrEventTargets list.;;;","2021-03-30 22:42;jhendrikx;Submitted solution + test in https://github.com/openjdk/jfx/pull/448;;;","2021-04-01 05:51;roboduke;Changeset: 015dad07
Author:    John Hendrikx <jhendrikx@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-04-01 12:49:39 +0000
URL:       https://git.openjdk.java.net/jfx/commit/015dad07
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Z cannot be 1 for Diffie-Hellman key agreement,JDK-8264329,5045602,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2021-03-27 20:29,2021-03-31 17:44,2023-10-01 09:57,2021-03-28 13:38,,,,,,,,,17,security-libs,,0,noreg-hard,,,,,,,,,,,,,,,,,,,,,,The Diffie-Hellman key agreement implementation does not check that the z cannot be 1 or (p-1).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8153510,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s6c3:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2021-03-28 13:38;roboduke;Changeset: c986457f
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2021-03-28 20:37:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c986457f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Broken license in javax/swing/JComboBox/8072767/bug8072767.java,JDK-8264328,5045600,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2021-03-27 16:21,2021-04-22 02:41,2023-10-01 09:57,2021-03-28 20:42,11,17,8,,,,,,17,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-other,,,,,,,,,,,,,,,,,,,,"This test has a broken license:
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 /*
 * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.",,,,,,,,,,JDK-8264458,JDK-8264338,JDK-8265745,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s6bn:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-03-28 20:42;roboduke;Changeset: 6678b01c
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-03-29 03:41:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6678b01c
;;;","2021-04-20 03:44;mdoerr;Fix Request (11u)
Should get backported for parity with 11.0.12-oracle. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"Add ""headful"" to javax/swing/JComboBox/8072767/bug8072767.java",JDK-8264327,5045599,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,serb,serb,2021-03-27 16:17,2021-04-14 01:45,2023-10-01 09:57,2021-03-29 18:25,8-pool,,,,,,,,8u301,client-libs,,0,11-na,noreg-self,,,,,,,,,,,,,,,,,,,,,"The test was recently backported to jdk8 w/o ""headful"" keyword.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8072767,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s6bf:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ShouldNotReachHere in Compile::print_inlining_move_to(),JDK-8264320,5045572,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,kvn,kvn,2021-03-26 14:13,2021-04-29 01:10,2023-10-01 09:57,2021-04-23 05:55,16,17,,,,,,,17,hotspot,,0,c2,c2-late-inline,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,"Jtreg test java/util/concurrent/tck/JSR166TestCase.java fails with flags ""-Xcomp -XX:+TieredCompilation -XX:CICompilerCount=2 -XX:+PrintCompilation -XX:+PrintInlining""

#  Internal Error (/workspace/open/src/hotspot/share/opto/compile.cpp:4283), pid=3426733, tid=3426749
#  Error: ShouldNotReachHere()
#
# JRE version: Java(TM) SE Runtime Environment (17.0+15) (fastdebug build 17-ea+15-LTS-1207)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+15-LTS-1207, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xa085f2]  Compile::print_inlining_move_to(CallGenerator*)+0x72
#

Current CompileTask:
C2:  86022 19727   !b  4       Collection8Test::testRemoveIf (911 bytes)

Stack: [0x00007f4a21f2f000,0x00007f4a22030000],  sp=0x00007f4a2202b300,  free space=1008k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xa085f2]  Compile::print_inlining_move_to(CallGenerator*)+0x72
V  [libjvm.so+0x8454c6]  CallGenerator::do_late_inline_helper()+0x986
V  [libjvm.so+0xa0e85d]  Compile::inline_incrementally_one()+0x33d
V  [libjvm.so+0xa0f147]  Compile::process_late_inline_calls_no_inline(PhaseIterGVN&)+0x117
V  [libjvm.so+0xa10b17]  Compile::Optimize()+0x18e7
V  [libjvm.so+0xa12545]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1905

JDK 16 also failed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257211,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s65f:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-26 14:38;kvn;Current suspect is JDK-8257211 which modified related code and was pushed into JDK-16-b28 because b27 passed test and b28 failed.;;;","2021-03-29 07:19;thartmann;ILW = Assert during C2 compilation, with PrintCompilation/Inlining, disable printing or compilation of affected method = HLM = P3;;;","2021-04-23 05:55;roboduke;Changeset: bfc1cd8e
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2021-04-23 12:53:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bfc1cd8e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Lanai: DrawHugeImageTest.java fails on apple M1,JDK-8264318,5045567,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dkonoplev,avu,avu,2021-03-26 12:19,2021-04-21 18:02,2023-10-01 09:57,2021-04-15 06:52,17,,,,,,,,17,client-libs,,0,lanai,,,,,,,,,,,,,,,,,,,,,,"~/jtreg/bin/jtreg -jdk:./build/macosx-aarch64-server-release/images/jdk -e:METAL_DEVICE_WRAPPER_TYPE=1,J2D_TRACE_LEVEL=5 -vmoption:-Dsun.java2d.metal=True   -a   test/jdk/java/awt/image/VolatileImage/DrawHugeImageTest.java
Test results: failed: 1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,17,,os_x,,,,,,"0|i2s64b:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-04-15 06:51;roboduke;Changeset: 0fee6eca
Author:    Denis Konoplev <dkonoplev@openjdk.org>
Committer: Jayathirth D V <jdv@openjdk.org>
Date:      2021-04-15 13:50:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0fee6eca
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Lanai: IncorrectUnmanagedImageRotatedClip.java fails on apple M1,JDK-8264317,5045566,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,avu,avu,avu,2021-03-26 12:17,2021-04-28 17:40,2023-10-01 09:57,2021-04-25 13:53,17,,,,,,,,17,client-libs,,0,lanai,,,,,,,,,,,,,,,,,,,,,,"~/jtreg/bin/jtreg -jdk:./build/macosx-aarch64-server-release/images/jdk -e:METAL_DEVICE_WRAPPER_TYPE=1,J2D_TRACE_LEVEL=5 -vmoption:-Dsun.java2d.metal=True   -a   test/jdk/java/awt/image/DrawImage/IncorrectUnmanagedImageRotatedClip.java
Test results: failed: 1
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-04-20 09:48;avu;bi.png;https://bugs.openjdk.org/secure/attachment/94317/bi.png","2021-04-20 09:48;avu;gold.png;https://bugs.openjdk.org/secure/attachment/94318/gold.png",,,,,,,,,,aarch64,,,,,,,17,,os_x,,,,,,"0|i2s643:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-04-25 13:52;roboduke;Changeset: 3bf4c904
Author:    Alexey Ushakov <avu@openjdk.org>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2021-04-25 20:52:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3bf4c904
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Non deterministic generation of java/lang/invoke/MemberName.class ,JDK-8264306,5045552,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,erikj,erikj,2021-03-26 09:56,2021-11-12 02:15,2023-10-01 09:57,2021-04-01 04:39,17,,,,,,,,17,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"We have started seeing failures in the cmp-baseline builds that look like this:

Differing files in ./lib/modules
/java.base/java/lang/invoke/MemberName.class

This looks like a new case of non deterministic behavior when generating classes. The first appearance in CI is build jdk-17+15-1221. The previous build that got to tier5 was 1209, but since this is an intermittent problem, we can't know for sure if that build was actually affected or not.

From what I can tell, this file is just compiled with javac and not subject to any further modification by any build tool.

Looking at javap output for two differing builds of this class, the difference looks to be benign from a functional perspective. (The value in the ""slot"" column for 2 and 3 have switched places)

Variant1:
    LocalVariableTable:
      Start  Length  Slot  Name   Signature
         38      12     1  type   Ljava/lang/Object;
         84       6     4   res   Ljava/lang/invoke/MethodType;
         74      19     3   sig   Ljava/lang/String;
        121      24     4 ptypes   [Ljava/lang/Class;
        129      16     5 rtype   Ljava/lang/Class;
        139       6     6   res   Ljava/lang/invoke/MethodType;
        113      32     2 typeInfo   [Ljava/lang/Object;
          0     211     0  this   Ljava/lang/invoke/MemberName;

Variant2:
    LocalVariableTable:
      Start  Length  Slot  Name   Signature
         38      12     1  type   Ljava/lang/Object;
         84       6     4   res   Ljava/lang/invoke/MethodType;
         74      19     2   sig   Ljava/lang/String;
        121      24     4 ptypes   [Ljava/lang/Class;
        129      16     5 rtype   Ljava/lang/Class;
        139       6     6   res   Ljava/lang/invoke/MethodType;
        113      32     3 typeInfo   [Ljava/lang/Object;
          0     211     0  this   Ljava/lang/invoke/MemberName;


While this will not have any functional effect on compiled java classes, we would like to continue having predictable and repeatable output from javac.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JI-9071923,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s60z:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-04-01 04:39;roboduke;Changeset: fdfa1dda
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-04-01 11:38:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fdfa1dda
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Performance issue with MethodHandle.asCollector,JDK-8264288,5045534,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jvernee,psandoz,psandoz,2021-03-26 09:17,2021-04-12 15:10,2023-10-01 09:57,2021-04-05 13:05,,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"See discussion here:

https://mail.openjdk.java.net/pipermail/mlvm-dev/2021-March/006895.html

MethodHandles.collectArguments with an appropriate filter function is faster than MethodHandle.asCollector, which appears to copy arrays under some circumstances.

The code of MethodHandles.collectArguments and MethodHandle.asCollector is very similar (unsurprisingly), perhaps indicating some localized adjustment to the latter may be possible to fix the issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s5wz:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2021-03-29 14:34;jvernee;PoC fix here: https://github.com/openjdk/jdk/compare/master...JornVernee:As_Collector;;;","2021-04-05 13:05;roboduke;Changeset: b7baca7f
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2021-04-05 20:05:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b7baca7f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Foreign linker should be more friendly with implicit scopes,JDK-8264280,5045523,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-03-26 07:57,2021-03-31 02:47,2023-10-01 09:57,2021-03-26 15:00,repo-panama,,,,,,,,,tools,,0,foreign-abi,,,,,,,,,,,,,,,,,,,,,,"When using implicit scopes together with the linker API, it is easy to run into cases where a memory is cleared before the native call is completed. This can happen at least in 2 cases:

* when a segment is passed by reference to a function (e.g. segment.address()) - this includes the important case of upcall segments

* when a valist is passed to a function

In such cases it's possible for the segment, or the valist not to be alive when the native function starts operating on it.

Of course solving this problem in general is not possible (the native call could hold on to the address for longer and refer to it on a subsequent call) - however, it feels that, for simple cases, this is something that should ""just"" work.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s5uj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Missing handshake after JDK-8263427,JDK-8264279,5045522,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2021-03-26 07:47,2021-04-05 16:13,2023-10-01 09:57,2021-03-30 04:44,17,,,,,,,,17,hotspot,,0,gc-shenandoah,redhat-interest,,,,,,,,,,,,,,,,,,,,,"The test failed on Mar. 25 nightly.

#  Internal Error (/home/jenkins/workspace/nightly/jdk-jdk/src/hotspot/share/classfile/javaClasses.cpp:745), pid=20943, tid=21063
#  assert(java_string->klass() == vmClasses::String_klass()) failed: must be java_string
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.jenkins.jdk-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-adhoc.jenkins.jdk-jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd7155e]  java_lang_String::equals(oop, unsigned short const*, int)+0x6e
#

Disassembly code:

push   %rbp
 mov    %rsp,%rbp
 push   %r15
 push   %r14
 push   %r13
 push   %r12
 mov    %rdi,%r14
 push   %rbx
 mov    %rsi,%r15
 sub    $0x48,%rsp
 mov    %edx,-0x58(%rbp)
 lea    0x142857b(%rip),%rdx        # 0x7ffff7182a8c <UseCompressedClassPointers>
 mov    (%rdi),%rax
 cmpb   $0x0,(%rdx)
 jne    0x7ffff5d5a700 <java_lang_String::equals(oop, unsigned short const*, int)+528>
 mov    0x8(%rax),%r12
 lea    0x1464b18(%rip),%rax        # 0x7ffff71bf040 <_ZN9vmClasses8_klassesE>
 mov    0x8(%rax),%rbx
 test   %rbx,%rbx
 je     0x7ffff5d5a729 <java_lang_String::equals(oop, unsigned short const*, int)+569>
 cmp    %r12,%rbx      <<==  java_string.klass == VMClasses::String_Klass()
 je     0x7ffff5d5a56d <java_lang_String::equals(oop, unsigned short const*, int)+125>
 lea    0x139bcc7(%rip),%rax        # 0x7ffff70f6208 <g_assert_poison>
 lea    0xd181ea(%rip),%rcx        # 0x7ffff6a72732
 lea    0xd28059(%rip),%rdx        # 0x7ffff6a825a8
 lea    0xd27d2a(%rip),%rdi        # 0x7ffff6a82280
 	mov    $0x2e9,%esi
 	mov    (%rax),%rax
 	movb   $0x58,(%rax)
 	xor    %eax,%eax


It looks like rax has corrupted oop",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-26 07:42;zgu;hs_err_pid20943.log;https://bugs.openjdk.org/secure/attachment/93855/hs_err_pid20943.log","2021-03-29 08:43;zgu;hs_err_pid3479428.log;https://bugs.openjdk.org/secure/attachment/93888/hs_err_pid3479428.log",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s5ub:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-03-29 08:48;zgu;Managed to reproduce locally with satb mode.

Apparently, dead oop was leaked:

#6  0x00007f50e241a9ef in java_lang_String::equals (str1=..., str2=...) at /home/zgu/ws/jdk/src/hotspot/share/classfile/javaClasses.cpp:771

gdb) p str2
$59 = {_o = 0xfc0112b0}
(gdb) x/32 0xfc0112b0
0xfc0112b0:	0xbaadbabe	0xbaadbabe	0xbaadbabe	0xbaadbabe
0xfc0112c0:	0xbaadbabe	0xbaadbabe	0xbaadbabe	0xbaadbabe

|    0|EC |BTE     fc000000,     fc000000,     fc040000|TAMS     fc000000|UWM     fc000000|U     0B|T     0B|G     0B|S     0B|L     0B|CP   0
;;;","2021-03-29 09:51;zgu;JDK-8263427 mistakenly removed handshake after concurrent weak roots, before early recycle of trash regions, that caused stale oops in thread roots.;;;","2021-03-30 04:44;roboduke;Changeset: ee5e00b0
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-03-30 11:43:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ee5e00b0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
java.xml.crypto module should be granted FilePermission and SocketPermission,JDK-8264277,5045520,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,mullan,mullan,2021-03-26 07:03,2021-04-26 13:13,2023-10-01 09:57,2021-04-19 09:12,,,,,,,,,17,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"When running under a Security Manager, validation and generation of XML Signatures may need to resolve References with file or http URLs. Thus, the module should be granted the appropriate permissions to access those resources. These calls should not be made privileged however (i.e. wrapped in AccessController.doPrivileged). The calling code (or all Protection Domains in the thread) would also need to be granted the appropriate permissions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265452,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s5tv:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ee0b2af,,,,,,,,,"2021-04-19 09:12;roboduke;Changeset: 8bec6fe6
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-04-19 16:11:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8bec6fe6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Block tags in overview.html are ignored,JDK-8264274,5045325,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,webbuggrp,webbuggrp,2021-03-24 06:23,2021-08-23 15:03,2023-10-01 09:57,2021-08-17 01:30,11,14,15,,,,,,18,tools,,0,additional-information-received,dcsad,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Fedora 33 / java version ""15.0.2"" 2021-01-19

Also does not work with latest Java-11

A DESCRIPTION OF THE PROBLEM :
Block tags in an overview file (such as ""-overview overview.html"") are not rendered.

REGRESSION : Last worked in version 8u281

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create a small project with at least two packages and an overview.html. Write some text in overview.html and at the end add e.g. '@see ""Somwhere else""'. Run javadoc.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Index.html should contain the information from the overview including a ""See also"" section.
ACTUAL -
The @see tag (and other block tags are dropped.



---------- BEGIN SOURCE ----------
I cannot insert the complete project tree here.
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
None.

The problem ""starts"" at jdk.javadoc.internal.doclets.formats.html.AbstractPackageIndexWriter.buildPackageIndexFile(String title, boolean includeScript) where (only) addOverviewComment ist called. While this might still add everything, it only adds the ""fullBody"".

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-26 05:04;adev;testfiles.zip;https://bugs.openjdk.org/secure/attachment/93852/testfiles.zip",,,,,,,,,,,generic,,,,,,,9,,generic,,,,,,"0|i2s4mj:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-03-26 04:03;adev;Complete project is not required. A simple test case is required for reproducing the issue. 
Requested submitter to provide a minimal test case.;;;","2021-03-26 05:08;adev;The issue can be reproduced using 
javadoc -d generated --source-path testfiles -subpackages test -overview testfiles/overview.html
The ""See also"" section gets missed in the generated overview-summary.html

This is a regression as:
JDK 8u281 : Pass
JDK 11 : Fail
JDK 14 : Fail
JDK 15 : Fail
JDK 16: Fail;;;","2021-08-17 01:30;roboduke;Changeset: 0e3fde6c
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-08-17 08:29:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0e3fde6c3c2f5c05777b79ff5eb1188014269b0f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
macOS: zero VM is broken due to no member named 'is_cpu_emulated' after JDK-8261966,JDK-8264273,5045510,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-03-26 05:02,2021-03-31 17:44,2023-10-01 09:57,2021-03-27 02:54,17,,,,,,,,17,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,,"
* For target hotspot_variant-zero_libjvm_objs_os.o:
/Users/fool/df/jdk/src/hotspot/share/runtime/os.cpp:1037:20: error: no member named 'is_cpu_emulated' in 'VM_Version'
   if (VM_Version::is_cpu_emulated()) {
       ~~~~~~~~~~~~^
1 error generated.
* For target hotspot_variant-zero_libjvm_objs_os_bsd.o:
/Users/fool/df/jdk/src/hotspot/os/bsd/os_bsd.cpp:1408:19: error: no member named 'is_cpu_emulated' in 'VM_Version'
  if (VM_Version::is_cpu_emulated()) {
      ~~~~~~~~~~~~^
1 error generated.

* All command lines available in /Users/fool/df/jdk/build/macosx-x86_64-zero-fastdebug/make-support/failure-logs.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261966,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,os_x,,,,,,"0|i2s5rn:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-27 02:54;roboduke;Changeset: 38e0a58f
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-03-27 09:54:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/38e0a58f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Unknown lookups in the java package give misleading compilation errors,JDK-8264258,5045502,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jespersm,jespersm,jespersm,2021-03-26 02:31,2021-05-03 20:16,2023-10-01 09:57,2021-04-26 04:54,11,16,,,,,,,17,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"During work on JDK-8263900 I discovered that the error produced when selecting .class on an unknown/misspelled type gave an odd error:

% javac -version
javac 16

% cat X.java 
public class X {
    void x() {
        Class c = java.lang.class;
    }
}

% javac X.java    
X.java:3: error: package java does not exist
        Class c = java.lang.class;
                      ^
1 error
I get the same confusing error with e.g. ""new java.lang()""

This bug goes back to at least Java 11, but Java 8 u232 appears to get it right, explaining that there's no java.lang class in those cases. I haven't bisected the exact cause, but I'm assuming that it may have been related to (or obscured by) access checkes introduced in module system.

I believe the problem is the same as in JDK-8264216 which is specific to Valhalla -- a PR with a fix is underway.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s5pv:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-04-11 04:12;jespersm;The problem only really occurs for the 'java' package, which is special according to the JLS, since it is always in scope (as per §6.3) and observable (as per §7.4.3). The special handling of unfound symbols in com.sun.tools.javac.comp.Resolve.SymbolNotFoundError.getDiagnostic explcitly handles the issues of unfound classes in unfound packages, and fails to differentiate 'java'.

Research shows that the error was introduced with Jigsaw, see commit 001ebb3a7279d9a193acebc389cbbee867fa5eb3 where the blessed output for TryWithResources/TwrForVariable3.out was changed from ""unknown class lang"" to ""unknown packages java"". 

PR underway.;;;","2021-04-26 04:54;roboduke;Changeset: 83364a4b
Author:    Jesper Steen Møller <jespersm@openjdk.org>
Committer: Srikanth Adayapalam <sadayapalam@openjdk.org>
Date:      2021-04-26 11:53:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/83364a4b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
CodeHeap::verify fails extra_hops assertion in fastdebug test,JDK-8264223,5045459,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hshi,hshi,hshi,2021-03-25 18:49,2021-04-25 23:19,2023-10-01 09:57,2021-04-01 03:44,11.0.12,14,16,17,,,,,17,hotspot,,0,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-11,oracle-triage-17,sap-interest,tencent-interest,,,,,,,,,,,,,,,,"When test with -XX:+VerifyCodeCache, many tests fail due to extra_hops assertion in CodeHeap::verify. hs_err is attached.

compiler/codegen/Test6875866.java
compiler/codegen/Test6935535.java
compiler/codegen/Test8005033.java  

#  Internal Error (/data/shihui/codes/shihui_jdk_master/src/hotspot/share/memory/heap.cpp:838), pid=1525697, tid=1525715
#  assert((count == 0) || (extra_hops < (16 + 2*count))) failed: CodeHeap: many extra hops due to optimization. blocks: 234, extra hops: 484.


Check discussion in https://mail.openjdk.java.net/pipermail/hotspot-compiler-dev/2019-October/035508.html but didn't find where assertion (extra_hops < (16 + 2*count) comes from.

for example, before CodeHeap free, segmap is following extrem case.
|0|0|0|0|0|0|0|0|0|0|
after release, it will be
|0|1|1|1|1|1|1|1|1|1|
and increase 9 unnecessary hop for 1 segment.



",,,,,,,,,,JDK-8265839,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8231460,,,,,,,,,,,,"2021-03-25 18:37;hshi;hs_err_pid1525697.log;https://bugs.openjdk.org/secure/attachment/93849/hs_err_pid1525697.log",,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s5gb:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-01 03:44;roboduke;Changeset: 011f6d13
Author:    Hui Shi <hshi@openjdk.org>
Committer: Lutz Schmidt <lucy@openjdk.org>
Date:      2021-04-01 10:43:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/011f6d13
;;;","2021-04-21 06:22;lucy;Fix request (11u): 

It is not helpful to have verification code with too strict assumptions. As the code is almost identical between OpenJDK head (jdk17) and jdk11u, it would be beneficial to have the fix downported.

The patch applies clean. 

Risk:
Assumed to be very low. The affected code is not-product only. It is executed only if verification is specifically requested via parameter -XX:+VerifyCodeCache.

Test: 
Local build as well as SAP's build and test farm. Tests revealed no issues. 
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/javadoc/doclet/testRelatedPackages/TestRelatedPackages.java fails to compile,JDK-8264220,5045451,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-03-25 16:22,2021-03-31 17:43,2023-10-01 09:57,2021-03-26 06:13,17,,,,,,,,17,tools,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,,"```
/data1/jiefu/docker/jdk/test/langtools/tools/lib/toolbox/JavacTask.java:46: error: package com.sun.tools.javac.api is not visible
import com.sun.tools.javac.api.JavacTaskImpl;
                          ^
  (package com.sun.tools.javac.api is declared in module jdk.compiler, which does not export it to the unnamed module)
/data1/jiefu/docker/jdk/test/langtools/tools/lib/toolbox/JavacTask.java:47: error: package com.sun.tools.javac.api is not visible
import com.sun.tools.javac.api.JavacTool;
                          ^
  (package com.sun.tools.javac.api is declared in module jdk.compiler, which does not export it to the unnamed module)
Note: /data1/jiefu/docker/jdk/test/langtools/tools/lib/toolbox/AbstractTask.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
2 errors

TEST RESULT: Failed. Compilation failed: Compilation failed


/data1/jiefu/docker/jdk/test/langtools/tools/lib/toolbox/JavacTask.java:365: error: Result.exitCode in package com.sun.tools.javac.main is not accessible
            return taskImpl.doCall().exitCode;
                                    ^
  (package com.sun.tools.javac.main is declared in module jdk.compiler, which does not export it to the unnamed module)
Note: /data1/jiefu/docker/jdk/test/langtools/tools/lib/toolbox/AbstractTask.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 error

TEST RESULT: Failed. Compilation failed: Compilation failed
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264202,,,,JDK-8260388,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s5ej:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-03-26 06:13;roboduke;Changeset: b8122d6e
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-03-26 13:12:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b8122d6e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
tools/scripts/build.ps1 is out of date and no longer works,JDK-8264219,5045449,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kcr,kcr,kcr,2021-03-25 15:51,2021-06-01 15:14,2023-10-01 09:57,2021-05-18 10:51,jfx17,,,,,,,,jfx17,javafx,,0,noreg-build,sn_93,tool,,,,,,,,,,,,,,,,,,,,"A comment was added to PR #212 [1], which was the review for JDK-8242508 to update the JavaFX build to use Visual Studio 2019 (from 2017), to the effect that the tools/scripts/build.ps1 script no longer works.

That script still attempts to install and use the VS 2017 tool chain, which may not work properly. We do not use or reference that script at all. It used to be used in our old sandbox repo when running AppVeyor builds on GItHub, and also some developers may be using it (at least the one who added the comment to the PR).

The comment lists three problems:

1. Build script located in tools/scripts needs to be updated [to use VS 2019]

2. Build fails with `FAIL: WINSDK_DIR not defined`

3. It's not possible to install Windows SDK 7.1 on Windows 10

The dependency on Windows SDK 7.1 has been eliminated, so that should just be removed from the script. Given the fix for JDK-8255713 it probably wouldn't be too hard for someone to update the script to use VS 2019 and get this working again.

[1] https://github.com/openjdk/jfx/pull/212#issuecomment-790105330",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8255713,JDK-8242508,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s5e3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-03-25 15:57;kcr;Given that we don't use this tool, and I don't have a good way to test it, I will leave it for someone in the community to do this.;;;","2021-04-14 09:07;kcr;[~jgneff] Can you file a new bug for the WebKit build issue? Getting that fixed seems like a good thing, and it isn't really related to tools/scripts/build.ps1 (which we are unlikely to fix).;;;","2021-04-14 09:10;jgneff;In addition to working around the WINSDK_DIR error, I had to patch the file 'modules/javafx.web/src/main/native/Tools/Scripts/webkitdirs.pm' to build WebKit on Windows with Visual Studio 2019. See the attached file 'webkitdirs.pm.patch' for my temporary fix.

My work-around for the WINSDK_DIR error is attached as the file 'windows_tools.properties' and an easier-to-read version called 'windows_tools.properties.txt'. The file must be moved to the location 'build/windows_tools.properties' before each build.
;;;","2021-05-01 08:47;jgneff;I created two separate bug reports for the issues in my previous comment:

JDK-8266396 - Fix Windows build error: WINSDK_DIR not defined
JDK-8266405 - Fix CMake Generator error building Windows WebKit

I'm unable to delete my attachments to this bug report, though. I get a Communications Breakdown error: ""The Jira server was contacted but has returned an error response. We are unsure of the result of this operation."" I'll keep trying.
;;;","2021-05-03 05:57;kcr;[~jgneff] The problem with not being able to delete attachments is a known issue. I can delete them if you would like. Is it your three attachments on this JBS issue (JDK-8264219) that you want me to delete?;;;","2021-05-03 14:40;jgneff;> Is it your three attachments on this JBS issue (JDK-8264219) that you want me to delete?

Yes, I already copied the files to the two new bug reports listed in my previous comment. They don't belong on this bug report anymore. Thank you, Kevin.
;;;","2021-05-03 15:04;kcr;The attachments were deleted per request.;;;","2021-05-07 00:42;jvos;Since the script does not seem to be working, but especially since it is not required (we don't use it to build), I believe it is better to remove it from the repository rather than trying to maintain it (now and then).
This still allows others in the wider community to create a repository with this and similar scripts.;;;","2021-05-07 06:26;kcr;I agree with this. Given that we don't use it, it isn't surprising that it has bit-rotted. The best solution for this bug is to remove the obsolete tools/scripts/build.ps1 script.;;;","2021-05-18 10:51;roboduke;Changeset: 485b242d
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-05-18 17:50:56 +0000
URL:       https://git.openjdk.java.net/jfx/commit/485b242d5993024e5e2b7dcf8d306e0a889ce07e
;;;",,,,,,,,,,,,,,,,,,
Public method javax.swing.JMenu.setComponentOrientation() has no spec,JDK-8264218,5045448,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,dbessono,dbessono,2021-03-25 15:39,2021-05-26 17:29,2023-10-01 09:57,2021-05-21 02:38,15,16,17,,,,,,17,client-libs,,0,sn_90,sn_92,sn_93,,,,,,,,,,,,,,,,,,,,"A public overriding method
JMenu.setComponentOrientation(java.awt.ComponentOrientation) 
that has no spec at all is currently accessible here
https://github.com/openjdk/jdk/blob/master/src/java.desktop/share/classes/javax/swing/JMenu.java#L1258
(also please see the attached screenshot.)

And the generated JavaDoc doesn't mention that this method declared in java.awt.Component's is overridden
https://docs.oracle.com/en/java/javase/15/docs/api/java.desktop/javax/swing/JMenu.html (same for JDK16 and so far JDK17)

Related bug v.s. javadoc - JDK-8264217

",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267383,,,,,,JDK-8264217,,,,,,JCK-7315823,,,,,,JDK-8264217,,,,,,"2021-03-25 15:40;dbessono;Screenshot 2021-03-25 at 22.31.57.png;https://bugs.openjdk.org/secure/attachment/93848/Screenshot+2021-03-25+at+22.31.57.png",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s5dv:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-05-21 02:38;roboduke;Changeset: e48d7d66
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-05-21 09:37:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e48d7d66582d9c9630d85e86ff344794656914fc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] unknown.Class.default gives misleading compilation error,JDK-8264216,5045444,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jespersm,jespersm,jespersm,2021-03-25 15:07,2021-04-11 10:45,2023-10-01 09:57,2021-04-01 01:28,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"In current lworld, this code:

Object d2 = y.Z.default;

Will give a strange error:

test/langtools/tools/javac/valhalla/lworld-values/UnknownTypeDefault.java:12: error: package y does not exist
		Object d2 = y.Z.default;
		             ^

This should work more like the error for 
		Object d1 = Y.default;

which is
test/langtools/tools/javac/valhalla/lworld-values/UnknownTypeDefault.java:11: error: cannot find symbol
		Object d1 = Y.default;
		            ^
  symbol:   class Y
  location: class UnknownTypeDefault
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,repo-valhalla,,,,,,,,"0|i2s5cz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-03-31 02:25;sadayapalam;More importantly, the following line of code:

Object d3 = java.lang.default;

triggers on current lworld the following message which is patently bogus:

X.java:13: error: package java does not exist
        Object d3 = java.lang.default;
                        ^
;;;","2021-04-11 10:45;jespersm;I think I might have contributed an overly complicated fix for this. Once https://github.com/openjdk/jdk/pull/3428 for JDK-8264258 is reviewed, I'll make a follow-up fix for this, which should be pretty much a git revert of this fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
CodeStrings does not honour fixed address assumption.,JDK-8264207,5045433,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,phedlin,phedlin,phedlin,2021-03-25 14:21,2022-05-12 11:49,2023-10-01 09:57,2021-09-06 07:45,16,17,,,,,,,18,hotspot,,0,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,,,"The changes introduced in the JDK-8255208 patch breaks the fixed address assumption made in the code generated with support for debug string printouts.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8259590,JDK-8274039,JDK-8286660,,,,JDK-8273539,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s5aj:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-06 07:45;roboduke;Changeset: 7bd4f496
Author:    Patric Hedlin <phedlin@openjdk.org>
Date:      2021-09-06 14:43:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7bd4f496b493b804990615f6ce2cb1b4abd29a86
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
java/nio/channels/DatagramChannel/SRTest.java fails intermittently,JDK-8264200,5045422,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccleary,dfuchs,dfuchs,2021-03-25 12:08,2023-09-26 21:48,2023-10-01 09:57,2021-04-13 07:06,11,8u401,,,,,,,17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,teststabilization,,,,,,,,,,,,,,,,,,,"This test has been observed failing intermittently in the CI.

It has several potential sources of instability:

- The test runs in AgentVM mode
- Receiver binds to the wildcard, sender sends to getLocalHost() 
  (using wildcard/localhost instead of loopback/loopback has been a source of instability in the past)
- Sockets are not closed properly if an exception happens
- Publication of instance variables is not always Multi Thread safe 
  (would require volatile or other means of synchronization)
- If the sender fails to send, the test will get wedged forever.
- Possibly better exception logging


",,,,,,,,,,JDK-8299638,JDK-8302725,,,,,,,,,,,,,,,,,,,,,,JDK-8180734,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s583:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-03-25 12:10;dfuchs;The test was observed failing waiting for the first ClassicReceiver to receive something:

""AgentVMThread"" #886 prio=5 os_prio=31 cpu=3.08ms elapsed=492.94s tid=0x00007fe848aeb800 nid=0x8d27 in Object.wait()  [0x000070000f1b8000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(java.base@11.0.12-ea/Native Method)
	- waiting on <0x00000007a0aac918> (a java.lang.Thread)
	at java.lang.Thread.join(java.base@11.0.12-ea/Thread.java:1305)
	- waiting to re-lock in wait() <0x00000007a0aac918> (a java.lang.Thread)
	at java.lang.Thread.join(java.base@11.0.12-ea/Thread.java:1379)
	at SRTest.invoke(SRTest.java:74)
	at SRTest.test(SRTest.java:53)
	at SRTest.main(SRTest.java:41)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(java.base@11.0.12-ea/Native Method)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(java.base@11.0.12-ea/NativeMethodAccessorImpl.java:62)
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(java.base@11.0.12-ea/DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(java.base@11.0.12-ea/Method.java:566)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.lang.Thread.run(java.base@11.0.12-ea/Thread.java:834)

""Thread-402"" #889 prio=5 os_prio=31 cpu=0.24ms elapsed=492.76s tid=0x00007fe84f046000 nid=0x3770b runnable  [0x0000700020afa000]
   java.lang.Thread.State: RUNNABLE
	at java.net.PlainDatagramSocketImpl.peekData(java.base@11.0.12-ea/Native Method)
	- locked <0x00000007a0ab8998> (a java.net.PlainDatagramSocketImpl)
	at java.net.DatagramSocket.receive(java.base@11.0.12-ea/DatagramSocket.java:745)
	- locked <0x00000007a0ab06d0> (a java.net.DatagramPacket)
	- locked <0x00000007a0ab06f8> (a java.net.DatagramSocket)
	at SRTest$ClassicReader.run(SRTest.java:165)
	at java.lang.Thread.run(java.base@11.0.12-ea/Thread.java:834)
;;;","2021-04-13 07:06;roboduke;Changeset: 784f1c1f
Author:    Conor Cleary <ccleary@openjdk.org>
Committer: Aleksei Efimov <aefimov@openjdk.org>
Date:      2021-04-13 14:06:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/784f1c1f
;;;","2023-02-16 07:07;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2023-02-16 07:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1756
Date: 2023-02-16 15:10:43 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
Change link_and_cleanup_shared_classes(CATCH) to CHECK,JDK-8264196,5045418,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,iklam,iklam,2021-03-25 10:56,2021-04-28 17:39,2023-10-01 09:57,2021-04-22 15:57,17,,,,,,,,17,hotspot,,0,cds,traps,,,,,,,,,,,,,,,,,,,,,"void MetaspaceShared::preload_and_dump_impl(TRAPS) {
   ...
     link_and_cleanup_shared_classes(CATCH);
  ...
}

But there's a valid reason for an exception to happen in this case:

link_and_cleanup_shared_classes
-> link_class_for_cds
  -> ik->constants()->resolve_class_constants(CHECK_(false)); // may throw OOM when interning strings.

We should propagate this exception back to MetaspaceShared::preload_and_dump, so it can be handled properly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261480,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s577:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-22 15:57;roboduke;Changeset: 7a559140
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2021-04-22 22:57:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7a559140
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc search is broken in Internet Explorer,JDK-8264191,5045413,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,hannesw,hannesw,2021-03-25 10:05,2021-04-05 16:14,2023-10-01 09:57,2021-03-30 05:23,,,,,,,,,17,tools,,0,noreg-hard,,,,,,,,,,,,,,,,,,,,,,"Since JDK-8244535 the javadoc search script uses the RegExp.prototype.flags property which is defined in ECMAScript 6. Unfortunately, this property is not supported in Internet Explorer and other older browsers, causing the search feature to not work on these platforms. 

Fortunately, there's a widely supported `ignoreCase` property that can be used as replacement.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,16,,generic,,,,,,"0|i2s563:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-03-30 05:23;roboduke;Changeset: af028835
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-03-30 12:21:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/af028835
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Harden TLS interop tests,JDK-8264190,5045411,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fguallini,fguallini,fguallini,2021-03-25 09:38,2021-05-18 05:16,2023-10-01 09:57,2021-04-12 14:04,11,17,8,,,,,,17,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,,,,,,"Occasional interop tests failures may occur when making use of the test/jdk/javax/net/ssl/TLSCommon/interop framework since there is no assurance the selected available port it is still free at the time a non JDK server starts, for example, by command line. To mitigate intermittent failures, the test/jdk/javax/net/ssl/TLSCommon/interop/BaseInteropTest.java should first validate the server is alive and if not, retry to create a valid server.

In addition, Utilities::isSessionResumed implementation is not correct, it is more accurate to compare creation time of first and second session instead of comparing the second session with a manually obtained current time, that could result in a misleading error.",,,,,,,,,,JDK-8266367,JDK-8266478,JDK-8266366,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8258574,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s55n:",9223372036854775807,b18,,,,,,,,,,,,"2021-04-12 14:04;roboduke;Changeset: f4e63957
Author:    Fernando Guallini <fguallini@openjdk.org>
Committer: Rajan Halade <rhalade@openjdk.org>
Date:      2021-04-12 21:04:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f4e63957
;;;","2021-05-03 01:12;shade;Fix Request (11u)

This stabilizes the tests and keeps codebases in sync (I see 11.0.13-oracle). Patch applies cleanly to 11u, javax/net tests still pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Improve handling of assembly files in the JDK,JDK-8264188,5045408,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2021-03-25 09:19,2021-05-03 20:16,2023-10-01 09:57,2021-04-26 05:57,17,,,,,,,,17,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,,"We have a handful of assembly files in the JDK. They have long been left aside, with a ""if it ain't broken, don't fix it"" attitude.

In the current panama-vector, there is a lot more assembly files incoming, including for the Windows platforrm, which has not existed for a long time in the JDK.

It is time to give assembly files some more love and care. This patch cleans up the handling in the build system, and it unifies between .s and .S files. 

For historical reasons, .s has been the suffix used in the posix world to signify assembly output as generated by a compiler, and .S to signify ""hand-written"" precious assembly. One effect of this is that gcc and clang will run the preprocessor on files named .S but not on files named .s.

All our files are ""hand-written"" in this sense, and should have the .S suffix. But not all had. On mac, it was even worse, where the files were named .s but the option `-x assembler-with-cpp` was used to force clang to treat them as .S files instead...

We also had inconsistent handling on dependencies. For preprocessed assembly files, it really makes sense to have dependency tracking, exactly as for C/C++ files. Now the dependency tracking in NativeCompilation is simplified, and applies to all files. (The sole exception is Windows assembly, since masm is unable to output dependency information, even though it is able to include files :-().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265982,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s54z:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-04-26 05:57;roboduke;Changeset: b9f66d93
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2021-04-26 12:57:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b9f66d93
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
javadoc tool Incorrect error message about malformed link,JDK-8264181,5045400,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,rriggs,rriggs,2021-03-25 08:24,2021-05-26 17:28,2023-10-01 09:57,2021-05-19 10:18,17,,,,,,,,17,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"The error message for this malformed javadoc comment is incorrect.

```/**
 * {@link foo().
 */
public class JavaDocBug {
}```

The messages are:
 % javadoc JavaDocBug.java
Loading source file JavaDocBug.java...
Constructing Javadoc information...
Building index for all the packages and classes...
Standard Doclet version 16+36-2231
Building tree for all the packages and classes...
JavaDocBug.java:2: error: ')' missing in reference
 * {@link foo().
   ^",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-25 08:23;rriggs;JavaDocBug.java;https://bugs.openjdk.org/secure/attachment/93821/JavaDocBug.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s537:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-05-19 10:18;roboduke;Changeset: 66ab6d86
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-05-19 17:17:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/66ab6d86d1f4d636aef697bc4c4443b901d2cb6b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] Some compiler tests fail when running without C2,JDK-8264179,5045398,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,chagedorn,chagedorn,2021-03-25 07:47,2022-05-18 03:46,2023-10-01 09:57,2021-03-29 01:04,11,12,13,14,15,16,17,,17,hotspot,,0,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,oracle-triage-17,,,,,,,,,,,,,,,,,,"When building HotSpot without C2

./configure --with-jvm-features=-compiler2

the following compiler tests fail due to unrecognized C2-specific VM options:

compiler/vectorization/TestVectorsNotSavedAtSafepoint.java
compiler/types/TestSubTypeCheckMacroNodeWrongMem.java
compiler/loopopts/superword/Vec_MulAddS2I.java
compiler/loopopts/TestUnswitchCloneSkeletonPredicates.java
compiler/loopopts/TestRangeCheckPredicatesControl.java

We should either add -XX:+IgnoreUnrecognizedVMOptions or specify @requires vm.compiler2.enabled.
",,,,,,,,,,JDK-8265419,JDK-8286954,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s52r:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-29 01:04;roboduke;Changeset: aefc1560
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-03-29 08:03:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/aefc1560
;;;","2022-05-16 05:35;goetz;Fix request [11u]

I backport this test-only change for parity with 11.0.17-oracle.
No risk, only a test change.
I had to do some obvious resolves.
Test passes. SAP nighlty testing passed.;;;","2022-05-16 06:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1091
Date: 2022-05-16 12:34:50 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
ResourceScope handles should keep parent scope reachable,JDK-8264176,5045392,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-03-25 06:06,2021-03-25 11:05,2023-10-01 09:57,2021-03-25 11:05,repo-panama,,,,,,,,,tools,,0,foreign-memaccess,,,,,,,,,,,,,,,,,,,,,,"When working with ""untrusted"" segments, the user might want to do this:

```
try (var handle = segment.scope().acquire()) {
   // operate on segment safely
} // ok now segment can be closed
```
While this works to protect against deterministic deallocation, it fails to protect against implicit deallocation. So, if the segment becomes unreachable inside the TWR, its scope could still be closed (which might cause issue if e.g. the user has taken a long address out of the segment and operating on it).

For these reasons, it would be preferrable if a scope handle would also help in keeping the scope reachable.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s51f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing aarch64 parts of JDK-8236179 (C1 register allocation failure with T_ADDRESS),JDK-8264171,5045384,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dongbohe,dongbohe,dongbohe,2021-03-25 02:22,2021-04-22 17:55,2023-10-01 09:57,2021-03-25 16:24,openjdk8u292,,,,,,,,openjdk8u292,hotspot,,0,c1,jdk8u-critical-request,jdk8u-critical-yes,,,,,,,,,,,,,,,,,,,,"Note that  JDK-8236179 got backported to OpenJDK 8u. Released with 8u252. Aarch64 port got integrated with 8u292 (JDK-8257192). Since  JDK-8236179 got backported earlier, the aarch64 code in 8u292 is missing the aarch64 part of https://bugs.openjdk.java.net/browse/JDK-8236179",,,,,,,,,,JDK-8265812,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8236179,JDK-8257192,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i2s4zn:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-25 04:22;dongbohe;Fix Request [8u]

Critical fix for jdk8u(aarch64). 8u RFR(acked by Aleksey Shipilev and Andrew Haley): https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-March/013585.html;;;","2021-03-25 09:42;sgehwolf;[~dongbohe] Approved for 8u292. Please push to jdk8u/jdk8u/hotspot directly. March 26 (tomorrow) is the last build promotion before freeze. Please get it in before that.;;;","2021-03-25 09:46;andrew;Can we please either commit this under JDK-8236179 or at least mention it in the description?
As it stands,this is not going to come up when someone searches for 8236179. It looks like an independent bug.;;;","2021-03-25 09:52;shade;Renamed again to match more or less the same format as other follow-up issues upstream. So commit message should be ""8264171: Missing aarch64 parts of JDK-8236179 (C1 register allocation failure with T_ADDRESS)"".;;;","2021-03-25 16:24;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/rev/655498b9a44d
User:  fyang
Date:  2021-03-25 23:20:54 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,
jpackage BasicTest fails after JDK-8220266: Check help text contains plaform specific parameters,JDK-8264165,5045378,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,asemenyuk,dholmes,dholmes,2021-03-25 00:06,2021-08-05 14:58,2023-10-01 09:57,2021-03-25 08:23,17,,,,,,,,17,tools,,0,sn_89,tier2,,,,,,,,,,,,,,,,,,,,,"[00:51:33.205] TRACE: assertStringListEquals(169, Platform dependent options for creating the application package:)
[00:51:33.205] TRACE: assertStringListEquals(170, {3})
[00:51:33.207] TRACE: Check parameters in help text
[00:51:33.211] ERROR: Unexpected [0] value: Check help text contains plaform specific parameters

Also note typo ""plaform""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8220266,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,17,,linux,,,,,,"0|i2s4yb:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,Verified,,"2021-03-25 05:42;asemenyuk;Single quote (') in ""URL of the application's home page"" substring (https://github.com/openjdk/jdk/commit/3d7f9122#diff-fdbc9dafd4c74819ea762d323c4b9a3e96466acff73a4147a721a68870e6e97bR170) of help text causes the problem that {3} placeholder (https://github.com/openjdk/jdk/blob/master/src/jdk.jpackage/share/classes/jdk/jpackage/internal/resources/HelpResources.properties#L197) is not substituted but printed as is and help output  looks as:
---
Platform dependent options for creating the application package:
{3}
---

Instead of 
---
Platform dependent options for creating the application package:
  --win-dir-chooser
          Adds a dialog to enable the user to choose a directory in which
          the product is installed
  --win-help-url <url>
          URL where user can obtain further information or technical support
  --win-menu
          Request to add a Start menu shortcut for this application
  --win-menu-group <menu group name>
          Start Menu group this application is placed in
  --win-per-user-install
          Request to perform an install on a per-user basis
  --win-shortcut
          Request to add desktop shortcut for this application
  --win-shortcut-prompt
          Adds a dialog to enable the user to choose if shortcuts
          will be created by installer
  --win-update-url <url>
          URL of available application update information
  --win-upgrade-uuid <id string>
          UUID associated with upgrades for this package
---;;;","2021-03-25 08:23;roboduke;Changeset: 8307aa6d
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2021-03-25 15:22:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8307aa6d
;;;","2021-08-05 14:58;asemenyuk;jtreg test is not failing after the fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
PickResult.toString() is missing the closing square bracket,JDK-8264162,5045025,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,kcr,webbuggrp,webbuggrp,2021-03-21 02:05,2021-05-11 14:22,2023-10-01 09:57,2021-03-31 05:56,8,jfx11,jfx15,jfx16,,,,,jfx17,javafx,,0,dcspn,reproducer-yes,sn_89,sn_90,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Any system, latest JFX 15 or 16

A DESCRIPTION OF THE PROBLEM :
String representation of javafx.scene.input.PickResult always gives incorrect result, because it lacks one closing square bracket(']') in the end of method. 

I found this bug implementing beautify(String) method, that was ""moving"" every new javafx.scene.input.MouseEvent on tab further. I couldn't find bug in my code, so i just counted amount of opening and closing square brackets: number of opening was one more than closing. I digged in source code of toString and MouseEvent's toString() looked ok to me, so i noticed that problem might be in PickResult.toString(). So there was. Comparison of toString methods and place of bug:
https://prnt.sc/10rh7dp
https://prnt.sc/10rh8bh

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create new JavaFx application, add MouseEvent handler to pane/scene and print it when MouseEvent occurs.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
  beautified:
  MouseEvent [
      source = javafx.scene.Scene@1fb3f629,
      target = Rectangle[
          x=0.0,
          y=0.0,
          width=101.0,
          height=101.0,
          fill=0x808080ff
      ],
      eventType = MOUSE_MOVED,
      consumed = false,
      x = 1203.0,
      y = 474.0,
      z = 0.0,
      button = NONE,
      pickResult = PickResult [
          node = Rectangle[
              x=0.0,
              y=0.0,
              width=101.0,
              height=101.0,
              fill=0x808080ff
          ],
          point = Point3D [
              x = 84.0,
              y = 38.0,
              z = 0.0
          ],
          distance = 2644.1579971625497
      ]
  ]
plain text:
MouseEvent [source = javafx.scene.Scene@874f0c1, target = Rectangle[x=0.0, y=0.0, width=101.0, height=101.0, fill=0x808080ff], eventType = MOUSE_MOVED, consumed = false, x = 1425.0, y = 358.0, z = 0.0, button = NONE, pickResult = PickResult [node = Rectangle[x=0.0, y=0.0, width=101.0, height=101.0, fill=0x808080ff], point = Point3D [x = 84.0, y = 33.0, z = 0.0], distance = 2644.1579971625497]]

ACTUAL -
  beautified:
  MouseEvent [
      source = javafx.scene.Scene@1fb3f629,
      target = Rectangle[
          x=0.0,
          y=0.0,
          width=101.0,
          height=101.0,
          fill=0x808080ff
      ],
      eventType = MOUSE_MOVED,
      consumed = false,
      x = 1203.0,
      y = 474.0,
      z = 0.0,
      button = NONE,
      pickResult = PickResult [
          node = Rectangle[
              x=0.0,
              y=0.0,
              width=101.0,
              height=101.0,
              fill=0x808080ff
          ],
          point = Point3D [
              x = 84.0,
              y = 38.0,
              z = 0.0
          ],
          distance = 2644.1579971625497
      ]
plain text:
MouseEvent [source = javafx.scene.Scene@874f0c1, target = Rectangle[x=0.0, y=0.0, width=101.0, height=101.0, fill=0x808080ff], eventType = MOUSE_MOVED, consumed = false, x = 1425.0, y = 358.0, z = 0.0, button = NONE, pickResult = PickResult [node = Rectangle[x=0.0, y=0.0, width=101.0, height=101.0, fill=0x808080ff], point = Point3D [x = 84.0, y = 33.0, z = 0.0], distance = 2644.1579971625497]

---------- BEGIN SOURCE ----------
import javafx.application.Application;
import javafx.event.Event;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class App extends Application {

    @Override
    public void start(Stage stage) {
        var javaVersion = SystemInfo.javaVersion();
        var javafxVersion = SystemInfo.javafxVersion();

        var label = new Label(""Hello, JavaFX "" + javafxVersion + "", running on Java "" + javaVersion + ""."");
        var pane = new StackPane(label);
        
        pane.addEventHandler(MouseEvent.ANY, this::handleMouse);
        
        var scene = new Scene(pane, 640, 480);
        stage.setScene(scene);
        stage.show();
    }

    private void handleMouse(MouseEvent t){
        System.out.println(beautify(t.toString()));
        //notice there is no closing bracket with zero tabs, that's the problem
        System.out.println();
        System.out.println(t.toString());
        System.exit(0);
    }
    public static String beautify(String startingString){
        final int tabLength = 4;
        int tabs = 0;
        StringBuilder sb = new StringBuilder(startingString.length());
        sb.append('\n');

        for(int i = 0; i < startingString.length(); i++){
            char c = startingString.charAt(i);
            if(c == '{' || c == '['){
                tabs++;
                sb.append(c);
                sb.append('\n');
                sb.append("" "".repeat(tabs*tabLength));
            }else if(c == '}' || c == ']'){
                tabs--;
                sb.append('\n');
                sb.append("" "".repeat(tabs*tabLength));
                sb.append(c);
            }else if(c == ','){
                sb.append(c);
                sb.append('\n');
                sb.append("" "".repeat(tabs*tabLength -1));
            }else
                sb.append(c);
        }
        return sb.toString();
    }

    public static void main(String[] args) {
        launch();
    }

}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
just add .append(']') in the end of PickResult.toString() method.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-24 23:34;pnarayanaswa;App.java;https://bugs.openjdk.org/secure/attachment/93815/App.java",,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s2s3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@18948797,,,,,,,,,"2021-03-24 23:34;pnarayanaswa;Checked with attached testcase in Windows 10, Observed Closing bracket is missing.
Test Result:
============
openjfx11: Fail
openjfx15: Fail
openjfx16: Fail
openjfx17ea: Fail;;;","2021-03-25 05:04;kcr;Trivial fix to add the closing bracket.;;;","2021-03-31 05:56;roboduke;Changeset: f3e27a08
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-03-31 12:56:03 +0000
URL:       https://git.openjdk.java.net/jfx/commit/f3e27a08
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
BigDecimal#stripTrailingZeros can throw undocumented ArithmeticException,JDK-8264161,5045297,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,darcy,webbuggrp,webbuggrp,2021-03-24 00:57,2021-05-25 20:39,2023-10-01 09:57,2021-03-25 13:42,11,17,8,,,,,,17,core-libs,,0,17ea,additional-information-received,dcsaw,noreg-doc,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
BigDecimal#stripTrailingZeros can throw an ArithmeticException when the scale overflows, but is not documented to do so.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Execute BigDecimal.valueOf(10, -2147483648).stripTrailingZeros(); (see source code below for a complete example)

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
No exception thrown as BigDecimal#stripTrailingZeros() is documented to not throw any exceptions (see https://github.com/openjdk/jdk/blob/45e1bab87ccebd498d4f927a008dd89a47dd177b/src/java.base/share/classes/java/math/BigDecimal.java#L3080).
ACTUAL -
Exception in thread ""main"" java.lang.ArithmeticException: Overflow
	at java.base/java.math.BigDecimal.checkScale(BigDecimal.java:4426)
	at java.base/java.math.BigDecimal.createAndStripZerosToMatchScale(BigDecimal.java:4872)
	at java.base/java.math.BigDecimal.stripTrailingZeros(BigDecimal.java:3034)
	at StripTrailingZeroes.main(StripTrailingZeros.java:5)

---------- BEGIN SOURCE ----------
import java.math.BigDecimal;
  
public class StripTrailingZeros {
    public static void main(String[] args) {
        BigDecimal.valueOf(10, -2147483648).stripTrailingZeros();
    }
}
---------- END SOURCE ----------

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-4903133,JDK-8265700,,,,,"2021-03-24 23:18;tongwan;StripTrailingZeros.java;https://bugs.openjdk.org/secure/attachment/93814/StripTrailingZeros.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s4gj:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28853e3d,,,,,,,Verified,,"2021-03-24 23:20;tongwan;The observations on Windows 10:
JDK 8: Failed, ArithmeticException thrown.
JDK 11: Failed.
JDK 17ea+6: Failed.;;;","2021-03-25 03:37;michaelm;Looks like a doc issue;;;","2021-03-25 09:59;darcy;I think this issue would be best addressed by a blanket statement in at the class level to the effect of ""scale overflow can lead to ArithmeticException."";;;","2021-03-25 13:42;roboduke;Changeset: 25931966
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2021-03-25 20:42:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/25931966
;;;","2021-04-06 19:36;tongwan;Send the fix https://git.openjdk.java.net/jdk/commit/25931966 to submitter to verify it.;;;","2021-04-08 21:50;tongwan;From the submitter:
the additional explanation looks good;;;",,,,,,,,,,,,,,,,,,,,,,
Regex \b is not consistent with \w without UNICODE_CHARACTER_CLASS,JDK-8264160,5045230,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,igraves,webbuggrp,webbuggrp,2021-03-23 09:09,2022-08-09 09:01,2023-10-01 09:57,2022-03-28 17:03,17,,,,,,,,19,core-libs,,0,additional-information-requested,dcsmi,release-note=yes,webbug,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10, although that is probably irrelevant.

Java 17 ea, but also reproducible on Java 8

> java -version
openjdk version ""17-ea"" 2021-09-14
OpenJDK Runtime Environment (build 17-ea+14-1110)
OpenJDK 64-Bit Server VM (build 17-ea+14-1110, mixed mode, sharing)

openjdk version ""1.8.0_222""
OpenJDK Runtime Environment (AdoptOpenJDK)(build 1.8.0_222-b10)
OpenJDK 64-Bit Server VM (AdoptOpenJDK)(build 25.222-b10, mixed mode)

The figures below are the ones obtained on JDK 17. Due to updates in the Unicode database, results differ between JDK versions, but the inconsistencies are always there.

A DESCRIPTION OF THE PROBLEM :
As already highlighted by https://bugs.openjdk.java.net/browse/JDK-6452709 and later https://bugs.openjdk.java.net/browse/JDK-8043727, the JavaDoc is too vague about the meaning of \b and \B in regular expressions. However, as the latter points out, it is usually understood that it should be consistent with \w and \W.

This is the case in Java regexes and the UNICODE_CHARACTER_CLASS flag is used, but is not consistent when it is not used. The set of characters considered as word characters by \b is also different with and without UNICODE_CHARACTER_CLASS, so this is not a case of always using Unicode definitions for \b.

The inconsistency means that using \b without UNICODE_CHARACTER_CLASS is basically impossible, because it does not follow any intuitive or broadly accepted definition, nor is it documented. Therefore, I am submitting this as a bug report, rather than just missing documentation like the above issues.

A workaround is to use the subpattern `(?:(?<=\\w)(?=\\W)|(?<=\\W)(?=\\w))` instead.

The attached reproduction highlights the inconsistencies. My expectation is that \b (and \B) should be consistent with \w and \W, in all cases.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Using the test file test/Test.java provided below:

$ javac -d bin test/Test.java
$ java -cp bin test.Test

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
1. total: 0

2. total: 0

3. total: 0

...
4. total: ??? (many)
ACTUAL -
...
1. 31347 false true
1. 31348 false true
1. 31349 false true
1. 3134a false true
1. total: 131829

2. total: 0

3. total: 0

4. 300 false true
4. 301 false true
4. 302 false true
...
4. total: 2672

---------- BEGIN SOURCE ----------
package test;

import java.util.regex.*;

public class Test {
  private static Pattern basicWordCharPattern = Pattern.compile(""\\w"");
  private static Pattern basicWordCharForBoundaryPattern = Pattern.compile("";\\b."", Pattern.DOTALL);

  private static Pattern basicWordCharForBoundaryWithWorkaroundPattern = Pattern.compile("";(?:(?<=\\w)(?=\\W)|(?<=\\W)(?=\\w))."", Pattern.DOTALL);

  private static Pattern unicodeWordCharPattern = Pattern.compile(""\\w"", Pattern.UNICODE_CHARACTER_CLASS);
  private static Pattern unicodeWordCharForBoundaryPattern = Pattern.compile("";\\b."", Pattern.UNICODE_CHARACTER_CLASS | Pattern.DOTALL);

  private static String cpToString(int cp) {
    if (Character.isBmpCodePoint(cp))
      return """" + ((char) cp);
    else
      return """" + Character.highSurrogate(cp) + Character.lowSurrogate(cp);
  }

  private static boolean isBasicWordChar(int cp) {
    return basicWordCharPattern.matcher(cpToString(cp)).matches();
  }

  private static boolean isBasicWordCharForBoundary(int cp) {
    return basicWordCharForBoundaryPattern.matcher("";"" + cpToString(cp)).matches();
  }

  private static boolean isBasicWordCharForBoundaryWithWorkaround(int cp) {
    return basicWordCharForBoundaryWithWorkaroundPattern.matcher("";"" + cpToString(cp)).matches();
  }

  private static boolean isUnicodeWordChar(int cp) {
    return unicodeWordCharPattern.matcher(cpToString(cp)).matches();
  }

  private static boolean isUnicodeWordCharForBoundary(int cp) {
    return unicodeWordCharForBoundaryPattern.matcher("";"" + cpToString(cp)).matches();
  }

  public static void main(String[] args) {
    // Print code points for which \b is not consistent with \w without UNICODE_CHARACTER_CLASS.
    int total = 0;
    for (int cp = 0; cp <= Character.MAX_CODE_POINT; cp++) {
      boolean basicWC = isBasicWordChar(cp);
      boolean basicBoundaryWC = isBasicWordCharForBoundary(cp);

      if (basicWC != basicBoundaryWC) {
        System.out.println(""1. "" + Integer.toHexString(cp) + "" "" + basicWC + "" "" + basicBoundaryWC);
        total++;
      }
    }
    System.out.println(""1. total: "" + total); // 131829, but should be 0

    System.out.println("""");

    // Print code points for which the workaround is not consistent with \w without UNICODE_CHARACTER_CLASS.
    total = 0;
    for (int cp = 0; cp <= Character.MAX_CODE_POINT; cp++) {
      boolean basicWC = isBasicWordChar(cp);
      boolean basicBoundaryWithWorkaroundWC = isBasicWordCharForBoundaryWithWorkaround(cp);

      if (basicWC != basicBoundaryWithWorkaroundWC) {
        System.out.println(""2. "" + Integer.toHexString(cp) + "" "" + basicWC + "" "" + basicBoundaryWithWorkaroundWC);
        total++;
      }
    }
    System.out.println(""2. total: "" + total); // 0

    System.out.println("""");

    // Print code points for which \b is not consistent with \w *with* UNICODE_CHARACTER_CLASS.
    total = 0;
    for (int cp = 0; cp <= Character.MAX_CODE_POINT; cp++) {
      boolean unicodeWC = isUnicodeWordChar(cp);
      boolean unicodeBoundaryWC = isUnicodeWordCharForBoundary(cp);

      if (unicodeWC != unicodeBoundaryWC) {
        System.out.println(""3. "" + Integer.toHexString(cp) + "" "" + unicodeWC + "" "" + unicodeBoundaryWC);
        total++;
      }
    }
    System.out.println(""3. total: "" + total); // 0 (correct; they are all consistent)

    System.out.println("""");

    /* Print code points for which \b without UNICODE_CHARACTER_CLASS is inconsistent
     * with \b *with* UNICODE_CHARACTER_CLASS.
     */
    total = 0;
    for (int cp = 0; cp <= Character.MAX_CODE_POINT; cp++) {
      boolean basicBoundaryWC = isBasicWordCharForBoundary(cp);
      boolean unicodeBoundaryWC = isUnicodeWordCharForBoundary(cp);

      if (basicBoundaryWC != unicodeBoundaryWC) {
        System.out.println(""4. "" + Integer.toHexString(cp) + "" "" + basicBoundaryWC + "" "" + unicodeBoundaryWC);
        total++;
      }
    }
    System.out.println(""4. total: "" + total); // 2672 (should be much higher)
  }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
A workaround is to use the subpattern `(?:(?<=\\w)(?=\\W)|(?<=\\W)(?=\\w))` instead.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282129,,,,,,,,JDK-8260221,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s41n:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@557d5cff,,,,,,,Verified,,"2021-04-29 14:28;igraves;Determined the source of this bug. The \b metaclass uses the `Character` class methods to determine if word members are letters or digits where the \w metaclass only checks if the range of characters for a word is [a-zA-Z0-9_] per the docs. We have two options for a fix: change the behavior, or update the documentation. The behavior change is easy (1 liner) but could introduce breakages. Perhaps clarifying the documentation is in order.;;;","2022-03-07 20:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7539
Date: 2022-02-18 19:47:09 +0000;;;","2022-03-28 17:03;dukebot;Changeset: f01cce23
Author:    Ian Graves <igraves@openjdk.org>
Date:      2022-03-29 00:01:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f01cce235b62e378e91a3bae32942e2f3dfc5c7e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Items of non-editable ComboBox cannot be selected using up/down keys,JDK-8264157,5044912,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,arapte,webbuggrp,webbuggrp,2021-03-18 22:44,2021-05-14 14:50,2023-10-01 09:57,2021-05-06 08:28,jfx16,,,,,,,,jfx17,javafx,,0,additional-information-requested,dcsmi,dcs-sup,regression,regression_8209788,reproducer-yes,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
this change broke selecting combobox items via up/down arrows: 
https://github.com/openjdk/jfx/commit/77a183e70b1a8a94f2525d235ed22f6bb1dff86d#diff-b7552c89404b578338100a9dec6ad6bc8ff7efb87e732417cc187c1a41aa691bL51
modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ComboBoxListViewBehavior.java


REGRESSION : Last worked in version 14

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
- Create a combobox with multiple items
- Focus it
- Press down


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
first item is selected
ACTUAL -
nothing happens

---------- BEGIN SOURCE ----------
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.scene.Scene;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.util.List;

public class App extends Application {

  @Override
  public void start(Stage primaryStage) throws Exception {
    var root = new StackPane();
    var scene = new Scene(root);
    primaryStage.setScene(scene);
    var box = new VBox();
    var text = new TextField();
    var comboBox = new ComboBox<String>();
    comboBox.itemsProperty().set(FXCollections.observableArrayList(List.of(""foo"", ""bar"")));
    box.getChildren().addAll(text, comboBox);
    root.getChildren().add(box);
    primaryStage.show();
  }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8209788,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s22z:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-03-25 04:20;kcr;[~pnarayanaswa] I just tried the test program, and this bug is reproducible. As noted, it is a regression introduced in JavaFX 16 by the fix for JDK-8209788. As such, I am reopening it.;;;","2021-04-01 06:07;fastegal;darn, my review of the issue introducing this regression wasn't .. a lucky one, to put it mildly ;) Didn't notice that there were no tests for arrow keys when the popup is hidden .. 

Looks like removing the up/down keyMappings in ComboBoxListViewBehavior introduced this - 

- duplicated ComboBoxTest.test_rt36280_nonEditable_arrowKeysChangeSelection
- removed lines showing the popup
- fails with the current ComboBoxListViewBehavior, passes with reverting ComboBoxListViewBehavior to pre-fix state
;;;","2021-05-06 08:28;roboduke;Changeset: 4b6c587f
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2021-05-06 15:28:16 +0000
URL:       https://git.openjdk.java.net/jfx/commit/4b6c587faacdc1f5f00df6e4bf5ad57c3a48723f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
javax/net/ssl/DTLS/RespondToRetransmit.java timed out,JDK-8264152,5045368,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fguallini,dcubed,dcubed,2021-03-24 16:49,2023-04-19 22:59,2023-10-01 09:57,2021-04-16 09:53,17,,,,,,,,17,security-libs,,0,intermittent,noreg-self,testbug,tier2,,,,,,,,,,,,,,,,,,,"The following test timed out in the JDK17 CI:

javax/net/ssl/DTLS/RespondToRetransmit.java

Here's a snippet from the log file:

#section:main
----------messages:(7/390)----------
command: main RespondToRetransmit client 15 certificate_verify
reason: User specified action: run main/othervm RespondToRetransmit client 15 certificate_verify 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/sun.security.util=ALL-UNNAMED
Timeout information:
--- Timeout information end.
elapsed time (seconds): 494.158
----------configuration:(4/111)----------
Boot Layer
  add modules: java.base                   
  add exports: java.base/sun.security.util ALL-UNNAMED

----------System.out:(1117/99388)*----------
Server: =======handshake(199, NEED_UNWRAP)=======
Server: Receive DTLS records, handshake status is NEED_UNWRAP
Client: =======handshake(199, NEED_WRAP)=======
Client: ----produce handshake packet(99, OK, NEED_UNWRAP)----
Client: Produced 1 packets
Client: =======handshake(198, NEED_UNWRAP)=======
Client: Receive DTLS records, handshake status is NEED_UNWRAP

<snip>

Server: =======handshake(12, NEED_WRAP)=======
Server: ----produce handshake packet(99, OK, NEED_UNWRAP)----
Server: Produced 1 packets
Server: =======handshake(11, NEED_UNWRAP)=======
Server: Receive DTLS records, handshake status is NEED_UNWRAP
----------System.err:(0/0)----------
----------rerun:(39/7250)*----------

<snip>

result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-17+15-1230/macosx-x64.jdk/jdk-17.jdk/Contents/Home/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 494153ms).
",,,,,,,,,,JDK-8300814,,,,,,,,,,,,,,,,,,,,,,,JDK-8247442,JDK-8202118,,,JDK-8297798,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x_10.15,,,,,,"0|i2s4w3:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-04-08 03:20;fguallini;Was able to reproduce this occasional failure only when executing the test multiple times in a host that is under a heavy CPU load. Cause is known:
The server side is binding to the wildcard address, that has been a source of instability in many networking bugs. See https://bugs.openjdk.java.net/browse/JDK-8230858.;;;","2021-04-16 09:53;roboduke;Changeset: 79adc16f
Author:    Fernando Guallini <fguallini@openjdk.org>
Committer: Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2021-04-16 16:51:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/79adc16f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
ciMethod::ensure_method_data() should return false is loading resulted in empty state,JDK-8264151,5045367,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iveresov,iveresov,iveresov,2021-03-24 16:41,2021-10-05 01:08,2023-10-01 09:57,2021-03-25 18:55,11,16,17,,,,,,17,hotspot,,0,ci-replay,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-11,oracle-triage-17,redhat-interest,,,,,,,,,,,,,,,,ciMethodData::load_data() can set the state of the MDO to empty (if it's replaying a compile). In this case we should return false from ensure_method_data().,,,,,,,,,,JDK-8264922,JDK-8264476,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8254106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s4vv:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-25 18:55;roboduke;Changeset: fe8ef322
Author:    Igor Veresov <iveresov@openjdk.org>
Date:      2021-03-26 01:54:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fe8ef322
;;;","2021-04-06 11:30;zgu;Fix Request (11u)

I would like to backport this patch to 11u for parity with Oracle 11.0.12-oracle.
The original patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
BreakpointInfo::set allocates metaspace object in VM thread,JDK-8264149,5045364,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,iklam,iklam,2021-03-24 15:23,2022-11-29 11:58,2023-10-01 09:57,2021-03-31 05:44,,,,,,,,,17,hotspot,,0,traps,,,,,,,,,,,,,,,,,,,,,,"When Metaspace::allocate fails, it throws an exception. Since the VM thread cannot throw exceptions, it cannot call this function:


We have an assert that's supposed to catch this, but it was coded incorrectly:

https://github.com/openjdk/jdk/blob/master/src/hotspot/share/memory/metaspace.cpp#L797
  assert(!(DumpSharedSpaces && THREAD->is_VM_thread()), ""sanity"");

Because DumpSharedSpaces is false when running the JVM regularly, this assert will always pass. Changing it to 

  assert(!THREAD->is_VM_thread(), ""can't allocate in VM thread because we cannot throw exception"");

will cause the following crash in test/com/sun/jdi/ModulesTest.java

Stack: [0x00007fc3738fa000,0x00007fc3739fa000],  sp=0x00007fc3739f87b0,  free space=1017k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x126a9c1]  Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*)+0x1e1
V  [libjvm.so+0x1295321]  MethodCounters::allocate(methodHandle const&, Thread*)+0x41
V  [libjvm.so+0x128b73e]  Method::build_method_counters(Method*, Thread*)+0x3e
V  [libjvm.so+0x128bd93]  BreakpointInfo::set(Method*)+0x123
V  [libjvm.so+0x106f066]  JvmtiBreakpoint::each_method_version_do(void (Method::*)(int))+0x56
V  [libjvm.so+0x173caf7]  VM_Operation::evaluate()+0x187
V  [libjvm.so+0x1760bdc]  VMThread::inner_execute(VM_Operation*)+0x30c
V  [libjvm.so+0x1761535]  VMThread::loop()+0x255
V  [libjvm.so+0x17617dc]  VMThread::run()+0xcc
V  [libjvm.so+0x166f066]  Thread::call_run()+0xf6
V  [libjvm.so+0x138a0f6]  thread_native_entry(Thread*)+0x116
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282172,,,,,,JDK-8214992,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s4v7:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-03-31 05:44;roboduke;Changeset: 40c32491
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-03-31 12:43:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/40c32491
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Lanai: RenderPerfTest.BgrSwBlitImage has artefacts on apple M1,JDK-8264143,5045357,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dkonoplev,avu,avu,2021-03-24 12:00,2021-04-21 18:04,2023-10-01 09:57,2021-04-16 23:08,17,,,,,,,,17,client-libs,,0,lanai,,,,,,,,,,,,,,,,,,,,,,"Current metal implementation incorrectly perform blitting (BgrSwBlitImage) on Apple M1. 
I've tested with the latest pull request of JEP 391: macOS/AArch64 Port [v29] ( https://git.openjdk.java.net/jdk/pull/2200 ) 

build/macosx-aarch64-server-release/images/jdk/bin/java -Dsun.java2d.metal=True -jar ./dist/RenderPerfTest.jar BgrSwBlitImage",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-24 12:00;avu;BgrSwBlitImage_m1.png;https://bugs.openjdk.org/secure/attachment/93808/BgrSwBlitImage_m1.png",,,,,,,,,,,aarch64,,,,,,,17,,os_x,,,,,,"0|i2s4tn:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-04-16 23:08;roboduke;Changeset: 926e3bc0
Author:    Denis Konoplev <dkonoplev@openjdk.org>
Committer: Jayathirth D V <jdv@openjdk.org>
Date:      2021-04-17 06:07:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/926e3bc0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Lanai: RenderPerfTest.ClipFlatOval has artefacts on apple M1,JDK-8264141,5045355,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,avu,avu,avu,2021-03-24 11:54,2021-05-04 05:33,2023-10-01 09:57,2021-05-04 05:33,17,,,,,,,,17,client-libs,,0,lanai,,,,,,,,,,,,,,,,,,,,,,"Current metal implementation incorrectly perform clipping (ClipFlatOval ClipFlatOvalAA)  on Apple M1.
I've tested with the latest pull request of JEP 391: macOS/AArch64 Port [v29] ( https://git.openjdk.java.net/jdk/pull/2200 )

build/macosx-aarch64-server-release/images/jdk/bin/java -Dsun.java2d.metal=True -jar ./dist/RenderPerfTest.jar ClipFlatOval ClipFlatOvalAA",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266040,,,,,,,,,,,,,,,,,,"2021-03-24 11:45;avu;apple_m1.png;https://bugs.openjdk.org/secure/attachment/93807/apple_m1.png",,,,,,,,,,,aarch64,,,,,,,17,,os_x,,,,,,"0|i2s4t7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-05-03 02:05;jdv;[~avu] Does JDK-8266040 fix resolves this issue?;;;","2021-05-04 05:29;avu;Yes, looks like so.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Add -Djava.security.manager=allow to JavaFX tests calling setSecurityManager,JDK-8264140,5045354,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-03-24 11:51,2022-07-20 07:21,2023-10-01 09:57,2021-05-24 05:08,jfx17,,,,,,,,jfx17,javafx,,0,noreg-self,sn_93,testbug,,,,,,,,,,,,,,,,,,,,"The security manager will be deprecated for removal in JDK 17 as part of JEP 411, JDK-8264713. Once this JEP is integrated, the JavaFX tests that set a security manager using System.setSecurityManager will fail when run using JDK 17 unless run with ""java -Djava.security.manager=allow"".

We will build JavaFX using JDK 16 until after JDK 17 ships (so we won't switch until JavaFX 18), but we need todo this for JavaFX 17 so we can test builds of JavaFX 17 using JDK 17 without having several of the tests fail.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264139,JDK-8267513,JDK-8234175,JDK-8267511,JDK-8267514,JDK-8290717,JDK-8264713,JDK-8265878,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s4sz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2021-05-24 05:08;roboduke;Changeset: 9507ea41
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-05-24 12:07:46 +0000
URL:       https://git.openjdk.java.net/jfx/commit/9507ea416a14639ed41e4cfdd87df7c12114078c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Suppress removal warnings for Security Manager methods,JDK-8264139,5045353,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kcr,kcr,kcr,2021-03-24 11:35,2021-06-26 05:15,2023-10-01 09:57,2021-06-15 05:51,jfx17,,,,,,,,jfx17,javafx,,0,noreg-cleanup,sn_94,sn_95,,,,,,,,,,,,,,,,,,,,"Many of the security manager methods will be deprecated for removal in JDK 17 as part of JEP 411, JDK-8264713. Once this JEP is integrated, anyone using JDK 17 to build JavaFX will see '[removal]' warnings from the compiler.

You can use ""gradle -PLINT=removal"" to generate a list of these warnings.

We will build JavaFX using JDK 16 until after JDK 17 ships (so we won't switch until JavaFX 18), so this isn't urgent, but we should consider doing this for JavaFX 17 so we can test later builds of JavaFX 17 with JDK 17 without seeing the warning.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264137,JDK-8264713,JDK-8264140,JDK-8269424,,,"2021-03-24 11:39;kcr;suppress-sm-removal.patch.txt;https://bugs.openjdk.org/secure/attachment/93806/suppress-sm-removal.patch.txt",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s4sr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2021-03-24 11:42;kcr;Attached a preliminary patch provided by [~weijun].;;;","2021-06-15 05:51;roboduke;Changeset: c81a7226
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-06-15 12:50:37 +0000
URL:       https://git.openjdk.java.net/jfx/commit/c81a722614e46844c285d4a4a623352ef227da87
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Replace uses of Class.newInstance,JDK-8264138,5045352,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,kcr,kcr,2021-03-24 11:25,2021-06-01 15:14,2023-10-01 09:57,2021-05-17 21:54,jfx16,,,,,,,,jfx17,javafx,,0,noreg-cleanup,sn_93,,,,,,,,,,,,,,,,,,,,,"The Class.newInstance() method is deprecated in favor of Contructor.newinstance(). According to the API docs for the former:

    clazz.newInstance()

can be replaced by

    clazz.getDeclaredConstructor().newInstance()
 
There are 12 calls to newInstance in JavaFX, 9 in javafx.graphics and 3 in javafx.fxml",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264137,JDK-8267534,,,,,"2021-03-24 11:26;kcr;newInstance.log;https://bugs.openjdk.org/secure/attachment/93805/newInstance.log",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s4sj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-03-24 11:27;kcr;See the attached log file.

This was generated by running:

gradle --info -PLINT=""deprecation""
;;;","2021-05-17 21:53;roboduke;Changeset: 4619cddf
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2021-05-18 04:52:48 +0000
URL:       https://git.openjdk.java.net/jfx/commit/4619cddfb961ab215cac10c91b828342d10299df
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Suppress deprecation and removal warnings of internal methods,JDK-8264137,5045351,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,kcr,kcr,2021-03-24 11:13,2021-07-08 08:56,2023-10-01 09:57,2021-06-23 06:33,jfx16,,,,,,,,jfx17,javafx,,0,noreg-cleanup,sn_96,,,,,,,,,,,,,,,,,,,,,"There are a few places in JavaFX where we use public JavaFX API that has been deprecated or deprecated for removal. Since there is no problem with using these methods internally, we should add the appropriate `@SuppressWarnings` annotation where needed to make the build less noisy.

I have attached a pair of log files generated by running:

gradle --info -PLINT=""deprecation,removal""

The first file is the list of [deprecation] warnings and the second is the list of [removal] warnings.

Note that included in the list of deprecation warnings is a use of the deprecated newInstance method from java.base. These will be addressed separately, by using a replacement API, rather than suppressing the warnings.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264139,JDK-8264138,,,,,,,,,,,"2021-03-24 11:13;kcr;deprecation.log;https://bugs.openjdk.org/secure/attachment/93804/deprecation.log","2021-03-24 11:13;kcr;removal.log;https://bugs.openjdk.org/secure/attachment/93803/removal.log",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s4sb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2021-03-24 11:15;kcr;Most of these are in controls, so assigning to Ajit.;;;","2021-03-24 11:29;kcr;I filed JDK-8264138 to track the replacement of Class.newInstance();;;","2021-06-23 06:33;roboduke;Changeset: 063bfe87
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2021-06-23 13:31:55 +0000
URL:       https://git.openjdk.java.net/jfx/commit/063bfe877555dea9e2060e651192f95e529db56d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
UnsafeGetStableArrayElement should account for different JIT implementation details,JDK-8264135,5045349,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dnsimon,dnsimon,2021-03-24 10:15,2023-05-30 05:25,2023-10-01 09:57,2021-03-26 03:12,17,,,,,,,,17,hotspot,,0,hs-comp-triaged,jdk11-graalvm,noreg-self,oracle-triage-17,,,,,,,,,,,,,,,,,,,"The UnsafeGetStableArrayElement jtreg tests fails on GraalVM because it asserts semantics implemented by C1 and C2 that are beyond the spec of @Stable. In particular, it asserts that the JIT will not constant fold an unsafe read of a stable array element if the type of the read does not match the type of the array element. For example:

@Stable static final byte[] STABLE_BYTE_ARRAY = {Byte.MAX_VALUE, 0, 0, 0};
@Stable static final int[] STABLE_INT_ARRAY = {Integer.MAX_VALUE, 0, 0, 0};

unsafe.getInt(STABLE_BYTE_ARRAY, ARRAY_BYTE_BASE_OFFSET);
unsafe.getByte(STABLE_INT_ARRAY, ARRAY_INT_BASE_OFFSET);

The Graal compiler will constant fold these reads where as C1 and C2 will not. Both implementations are permissible. There are no predictability guarantees about constant-folding provided by Stable and it's perfectly fine not to optimize stable fields/arrays at all.

The test should be modified to take into account the JIT being used when deciding what is to be asserted.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s4rv:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-26 03:12;roboduke;Changeset: 5a930c42
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2021-03-26 10:11:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5a930c42
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"ListCell editing status is true, when index changes while editing ",JDK-8264127,5045336,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fkirmaier,fkirmaier,fkirmaier,2021-03-24 07:54,2021-10-14 03:20,2023-10-01 09:57,2021-05-22 02:24,jfx16,,,,,,,,jfx17,javafx,,0,,,,,,,,,,,,,,,,,,,,,,,"ListCell editing status is true, when index changes while editing 
PR with unittest is on the way.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8150525,JDK-8171847,,,,,JDK-8265206,JDK-8265210,JDK-8272118,,,,"2021-04-14 04:28;fastegal;ListCellEditingTest.java;https://bugs.openjdk.org/secure/attachment/94165/ListCellEditingTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s4oz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-04-01 07:06;fastegal;.. and the other way round :) 

Cell's editing flag must be updated on re-use for both

    @Test
    public void testChangeIndexWhileEditing_jdk_8264127() {
        list.setEditable(true);
        cell.updateListView(list);
        cell.updateIndex(1);
        list.edit(1);
        assertTrue(cell.isEditing());
        cell.updateIndex(0);
        assertFalse(cell.isEditing());
    }
    
    @Test
    public void testChangeIndexWhileNotEditing_jdk_8264127() {
        list.setEditable(true);
        cell.updateListView(list);
        cell.updateIndex(0);
        list.edit(1);
        assertFalse(cell.isEditing());
        cell.updateIndex(1);
        assertTrue(cell.isEditing());
    }
    
Note that there are some bugs around firing editEvents (updated my summary with a https://github.com/kleopatra/swingempire-fx/wiki/CellEditEvents)
;;;","2021-04-14 04:33;fastegal;attached a full test (similar to the one I wrote for tableCell editing JDK-8265206): with your fix it passes nearly completely except for transitions involving cellIndex == -1. Weirdly in updating index from -1 to editingIndex, the cell is not switched to editing but a editStart seems to be fired. ;;;","2021-05-22 02:24;roboduke;Changeset: 240d28ff
Author:    Florian Kirmaier <fkirmaier@openjdk.org>
Committer: Jeanette Winzenburg <fastegal@openjdk.org>
Date:      2021-05-22 09:22:52 +0000
URL:       https://git.openjdk.java.net/jfx/commit/240d28ff4c73777f57fdf88250cceb601e5c18c1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Specification of Taskbar::getIconImage doesn't mention that the returned image might not be equal to the Taskbar::setIconImage one. (eg on Mac OS),JDK-8264125,5045334,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,azvegint,amadgundi,amadgundi,2021-03-24 07:47,2021-06-30 17:15,2023-10-01 09:57,2021-06-26 08:59,11,15,16,17,9,,,,18,client-libs,,0,conformance,sn_90,sn_92,sn_93,sn_94,sn_95,sn_96,,,,,,,,,,,,,,,,"Specification of Taskbar::getIconImage doesn't mention that the returned image might not be equal to the one passed to Taskbar::setIconImage method (eg on Mac OS)

Code Snap:
public void testSetGetIconImage() {
        Image originalImage = new BufferedImage(100, 100, TYPE_INT_RGB);
        Taskbar taskbar = Taskbar.getTaskbar();
        taskbar.setIconImage(originalImage);
        Image newImage = taskbar.getIconImage();
        if (originalImage.equals(newImage)) {
            System.out.println(""OK. GetIconImage returned image equal to set one"");
        } else {
            System.out.println(""FAILED: Expected equal to : ""+ originalImage + "", was given:""+ newImage);
        }
}

Output:
Expected equal to : ""BufferedImage@424c0bc4: type = 1 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 IntegerInterleavedRaster: width = 100 height = 100 #Bands = 3 xOff = 0 yOff = 0 dataOffset[0] 0"", was given: ""sun.awt.image.MultiResolutionCachedImage@66133adc""

If the following specs in fact don't assume that set/get methods must work in sync (getter is not required to return image that is equal to the one given to setter) - this needs to be mentioned explicitly.

public void setIconImage​(Image image)
""Changes this application's icon to the provided image.""
public Image getIconImage()
""Obtains an image of this application's icon.

",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266387,,,,,,,,,,,,JCK-7316298,,,,,,JCK-7315795,,,,,,"2021-04-08 08:19;azvegint;TaskbarGetIconImageTest.java;https://bugs.openjdk.org/secure/attachment/94016/TaskbarGetIconImageTest.java","2021-05-23 13:14;azvegint;TaskbarIconImageToBufferedImageTest.java;https://bugs.openjdk.org/secure/attachment/94741/TaskbarIconImageToBufferedImageTest.java","2021-03-30 10:23;azvegint;TaskbarIconTest.java;https://bugs.openjdk.org/secure/attachment/93906/TaskbarIconTest.java",,,,,,,,,,,,,,,,9,,,,,,,,"0|i2s4oj:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-03-25 01:27;psadhukhan;Related to JDK-8143227;;;","2021-03-25 08:36;serb;Please clarify what does it mean by ""the equal image"" in the bug description.;;;","2021-03-29 12:27;serb;Or the content of the image was chacked?;;;","2021-03-29 12:33;dbessono;That's the point - request for spec clarification that would inform all the clients of these methods about what could and what could not be assumed.;;;","2021-04-30 18:34;serb;I suggest just close this one and reopen if it will be found that the image returned by the get method is actually different by the content.;;;","2021-05-01 12:01;azvegint;Yet we still can change the doc.;;;","2021-05-01 20:46;serb;We can change spec, but if we write that result of the get may not equal to the set method, then it will not be possible to write any tests, since any random result of the ""get"" will work according to the specification.;;;","2021-05-04 09:53;azvegint;Not sure if [~dbessono] will be happy without changing the doc.

Probably we can change it in some ohter way:

----------------------------------------
* <p>
* The returned icon image may not be equal
* to an image set by {@link java.awt.Taskbar#setIconImage},
* however it should contain at least one visually similar image.
---------------------------------------- 


This also mitigates the case when an MRI image passed to #setIconImage with several variants and #getIconImage returns MRI with single variant.;;;","2021-05-13 09:31;azvegint;After an offline discussion it looks like that the best solution it to does not change the documentation or code and left it as it is.

Please see arguments for this decision below:

- We are considering current documentation as: #setIconImage() asks the System to set an image, #getIconImage returns an icon image from current system state.
- Doc changes(like ""image may not be equal..."") looks weird and ugly.
- Code changes: It is too hard to make it return a copy of passed image due to too wide type of 'java.awt.Image': see https://github.com/openjdk/jdk/pull/3250#issuecomment-835512930

So I am going to close this as ""not an issue"" soon.
[~dbessono]  Please share you thoughts or objections on that.;;;","2021-05-13 10:19;dbessono;Thanks for the summary. 
I'm sure there should be a way to reflect what's actually happening ( ""#setIconImage() asks the System to set an image"") in the spec.

Otherwise the current spec looks way too straightforward to allow any doubts that set/get methods could be ""not in sync"".
For now (see description of this issue) set/get operate with ""application's icon"" as a solid property that's being set very directly and in a straightforward manner.;;;","2021-05-18 12:04;azvegint;[~dbessono] Thanks for the feedback. Please see updated doc draft below:

---------------------------------------- 
    /**
     * Asks the system to change this application's icon to the provided {@code image}.
     *
     * @param image to change
     * @throws SecurityException if a security manager exists and it denies the
     * {@code RuntimePermission(""canProcessApplicationEvents"")} permission.
     * @throws UnsupportedOperationException if the current platform
     * does not support the {@link Taskbar.Feature#ICON_IMAGE} feature
     */
    public void setIconImage(final Image image) {
---------------------------------------- 
    /**
     * Obtains an image of this application's icon from the system.
     *
     * @return an image of this application's icon
     * @throws SecurityException if a security manager exists and it denies the
     * {@code RuntimePermission(""canProcessApplicationEvents"")} permission.
     * @throws UnsupportedOperationException if the current platform
     * does not support the {@link Taskbar.Feature#ICON_IMAGE} feature
     */
    public Image getIconImage() {
---------------------------------------- 
;;;","2021-05-18 12:31;dbessono;I'd probably prefer even softer variants: ""Suggests the system"", ""Proposes the system"" ...

The specific wording would likely be corrected and reviewed during CSR process.

;;;","2021-05-18 15:44;azvegint;OK, let's stop on this then:

----------------------------------------
    /**
     * Suggests the system to change this application's icon to the provided {@code image}.
     *
     * @param image to change
     * @throws SecurityException if a security manager exists and it denies the
     * {@code RuntimePermission(""canProcessApplicationEvents"")} permission.
     * @throws UnsupportedOperationException if the current platform
     * does not support the {@link Taskbar.Feature#ICON_IMAGE} feature
     */
    public void setIconImage(final Image image) {
----------------------------------------
    /**
     * Obtains an image of this application's icon from the system.
     *
     * @return an image of this application's icon
     * @throws SecurityException if a security manager exists and it denies the
     * {@code RuntimePermission(""canProcessApplicationEvents"")} permission.
     * @throws UnsupportedOperationException if the current platform
     * does not support the {@link Taskbar.Feature#ICON_IMAGE} feature
     */
    public Image getIconImage() {
---------------------------------------- ;;;","2021-05-18 15:56;serb;How does the new text ""Suggests the system to change this application's icon"" will solve the currently reported bug? I guess that the jck team will read it as an optional/platform-specific operation that cannot be tested per the spec, no?;;;","2021-05-19 10:47;dbessono;yes, we likely would be just calling setter and getter... BTW if we pass smth non-null to setter, could we expect at least that what's returned by getter is non-null, of same size... any other prop to check?;;;","2021-05-19 15:04;azvegint;> BTW if we pass smth non-null to setter, could we expect at least that what's returned by getter is non-null, of same size... any other prop to check? 
FYI currently on macOS it never returns null, even if you don't set any icon image it will return a default image(java cup icon).

> is non-null, of same size... any other prop to check? 
Basically it is the visually the same image but wrapped in different class. We already discussed it here:
https://bugs.openjdk.java.net/browse/JDK-8264125?focusedCommentId=14412103#comment-14412103

;;;","2021-05-19 15:11;dbessono;Thanks, I recall that discussion.

The question is - whether all the JavaSE implementations should return visually identical image?;;;","2021-05-19 16:56;azvegint;For current implementation(where only macOS is supported) the answer is yes.;;;","2021-05-20 08:40;azvegint;Actually it is more correct to say ""all the JavaSE implementations should return visually similar image"".;;;","2021-05-23 13:25;azvegint;OTOH we can compare such images by drawing them to a new BufferedImage.

Please see the attached TaskbarIconImageToBufferedImageTest#toBufferedImage for example of such conversion and comparison.

But it looks like even in this case we need to change the doc, because they are not equal in terms of class equality.

;;;","2021-05-26 10:47;azvegint;[~serb] [~dbessono] 
Let's finish this issue with following wording:

----------------------------------------
     * Obtains an image of this application's icon.
     * <p>
     * The returned icon image may not be equal
     * to an image set by {@link java.awt.Taskbar#setIconImage},
     * but should be visually similar.
...
    public Image getIconImage() {
----------------------------------------

This allows testing, an example of it is in attached TaskbarIconImageToBufferedImageTest.java

Any objections?

I've also updated the PR https://github.com/openjdk/jdk/pull/3250 
;;;","2021-05-27 18:10;serb;If the problem just is in the class of the object, like BufferedImage was set and some other class is returned then I suggest closing this. This is the same situation as was discussed here JCK-7301159, I think we have more than one place where the classes are different.

Is this issue is somehow different than JCK-7301159?;;;","2021-05-31 04:33;dbessono;[~azvegint] this looks good

     * Obtains an image of this application's icon.
     * <p>
     * The returned icon image may not be equal
     * to an image set by {@link java.awt.Taskbar#setIconImage}, 

together with

    * Suggests the system to change this application's icon to the provided {@code image}. 

[~serb] In JCK-7301159 the test was doing some downcasting of the returned result, expecting particular subtype while having no support from the spec. As an opposite here the current spec gives no doubt that set/get are expected to be in sync.

Would be great to clarify that it's allowed to be not always so.
;;;","2021-06-01 12:10;serb;[~dbessono] Right, that old test cast the returned result to the same type as passed as a parameter, and failed to do this. So the test should not expect that returned type will be the same as the type of the parameter. The same assumption is described in this bug, no?:

Expected equal to : ""BufferedImage@424c0bc4: type = 1 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 IntegerInterleavedRaster: width = 100 height = 100 #Bands = 3 xOff = 0 yOff = 0 dataOffset[0] 0"", was given: ""sun.awt.image.MultiResolutionCachedImage@66133adc"" 

;;;","2021-06-07 12:55;prr;> As an opposite here the current spec gives no doubt that set/get are expected to be in sync. 

What does ""in sync"" mean to you here ? 
;;;","2021-06-08 07:33;prr;So  you are essentially trying to say with words like ""no doubt"" that there's some incredibly clear words to support the assertion.
I don't see anything to support that assertion, certainly not anything you have quoted.
The word ""equals"" doesn't appear anywhere, even less, so does any notion of Java langugage or library equality.
The spec for getIconImage says only that it returns ""an image of this application's icon"".
That's AN image, not THE image that was set.  Even then .. 
;;;","2021-06-17 09:05;azvegint;I've updated the CSR and github PR.;;;","2021-06-26 08:59;roboduke;Changeset: 51a1299b
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2021-06-26 15:57:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/51a1299b68fb3a2e58de20209745c89f1d5f9ed3
;;;"
add ThreadsList.is_valid() support,JDK-8264123,5045328,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2021-03-24 06:42,2021-04-07 18:02,2023-10-01 09:57,2021-04-03 12:03,17,,,,,,,,17,hotspot,,0,Thread-SMR,,,,,,,,,,,,,,,,,,,,,,"ThreadsLists need an is_valid() function and checks in various
places to help catch bugs where a ThreadsList is dangling.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264624,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s4n7:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-03 12:03;roboduke;Changeset: 9b2232bc
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-04-03 19:03:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9b2232bc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[Test_Bug]: Manual test TestGASPHint.java need to be updated.,JDK-8264117,5045312,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mvs,mvs,mvs,2021-03-24 03:20,2021-09-24 01:57,2023-10-01 09:57,2021-04-11 22:02,11,16,17,,,,,,17,client-libs,,0,imt,imt-221,jdk11u-na,sqebug,sqe-manual,testbug,,,,,,,,,,,,,,,,,"Manual test TestGASPHint.java need to be updated as it fails in JDK 11 and above because of unavailability of Lucida Sans font. Details are given below. The test need to be updated to get the available font by iterating the system fonts.
Details:
Testsuite name: Regression manual
Test name(s): java/awt/font/TextLayout/TestGASPHint.html
Product(s) tested: JDK 11.0.11_b02(64bit)
OS/architecture: Windows x64/Jtreg4.2 b12

Instruction:
When I run this test, a short piece Devanagari text should appear without any artifacts.
In particular there should be no ""empty rectangles"" representing the missing
glyph.

Actual behavior:
1) The Devanagari text is not shown and a string of empty rectangles shown refer to Actual.jpg and Expected.jpg.
2) There is no such issue with JDK 7 or 8.

Analysis:
Java was not recognizing Devanagari script and not able to display Devanagari Unicode characters even though the windows machine has an already installed system font(Nirmala UI) which supports Devanagari. But when I added this system font which supports Devanagari(Nirmala UI) in $JDKHOME/conf/fonts/ fontconfig.properties, it displays those Unicode characters correctly. So when we use a logical font like 'DIALOG', Java is not recognizing any supported system fonts available if that font is not mentioned in the default fontconfig.properties supplied along with JDK. But when we create a user defined fontconfig.properties and add our system font there, it just works fine.",,,,,,,,,,JDK-8265054,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264023,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,,"0|i2s4jv:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
validate-headers fails in CI - BAD COPYRIGHT LINE,JDK-8264115,5045310,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ewhelan,vaibhav,vaibhav,2021-03-24 03:06,2021-09-24 01:57,2023-10-01 09:57,2021-03-24 03:44,11.0.12-oracle,,,,,,,,11.0.12-oracle,xml,,0,11u-tier1,jdk11u-na,regression,sqebug,,,,,,,,,,,,,,,,,,,"Impact Files :
com/sun/org/apache/bcel/internal/classfile/ConstantLong.java
com/sun/org/apache/bcel/internal/Const.java
com/sun/org/apache/bcel/internal/ExceptionConst.java



Log :  In the comment section.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s4jf:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Leaking NativeBuffers in case of errors during UnixUserDefinedFileAttributeView.read/write,JDK-8264111,5045305,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sstenzel,sstenzel,sstenzel,2021-03-24 02:16,2021-03-31 17:43,2023-10-01 09:57,2021-03-26 07:57,,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"In both `UnixUserDefinedFileAttributeView.read(...)` as well as `UnixUserDefinedFileAttributeView.write(...)`, NativeBuffers get allocated before the file handle is opened. If opening the file fails for whatever reason, an exception is thrown _before_ entering the try-finally block that would close/release the buffer again:

https://github.com/openjdk/jdk/blob/7e52a6e8b37412b43b0024ca067959100c14f508/src/java.base/unix/classes/sun/nio/fs/UnixUserDefinedFileAttributeView.java#L187
https://github.com/openjdk/jdk/blob/7e52a6e8b37412b43b0024ca067959100c14f508/src/java.base/unix/classes/sun/nio/fs/UnixUserDefinedFileAttributeView.java#L258

To fix these two edge cases, as well as to avoid future similar problems, we should use try-with-resource for all NativeBuffers within UnixUserDefinedFileAttributeView.",,,,,,,,,,,,,,,,,,,,,,,JDK-8264112,,,,,,,,,,,,,,,,,,,,JDK-8262958,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s4ib:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-03-24 03:27;sstenzel;Note that the NativeBuffers used during list() and copyExtendedAttributes() will be changed to try-with-resource statements in changes required for JDK-8262958.;;;","2021-03-26 07:57;roboduke;Changeset: 4e74de4b
Author:    Sebastian Stenzel <sebastian.stenzel@skymatic.de>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2021-03-26 14:56:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4e74de4b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
slowdebug jvm crashes when StrInflatedCopy match rule is not supported,JDK-8264096,5045281,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fyang,fyang,fyang,2021-03-23 19:24,2021-09-30 03:25,2023-10-01 09:57,2021-03-29 00:46,11,16,17,,,,,,17,hotspot,,0,c2,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,"$ cat Test.java
class Test {

    public static String concatStringConstU(String a) {
        return new StringBuilder().append(stringSmallU).append(a).append(stringU).toString();
    }

    static final String stringU = ""\u0f21\u0f22\u0f23\u0f24\u0f25\u0f26\u0f27\u0f28"";
    static final String stringSmallU = ""\u0f21\u0f22\u0f23"";

    public static void main(String args[]){
        String a = ""ABC"";
        Test t = new Test();
        for (int i = 0; i < 100_000; i++){
            t.concatStringConstU(a);
        }
    }

}

Disable StrInflatedCopy match rule support for x86 with following trivial change and build a slowdebug jdk on x86_64 Linux:

diff --git a/src/hotspot/cpu/x86/x86.ad b/src/hotspot/cpu/x86/x86.ad
index 7cf669f0e27..84d3e38125b 100644
--- a/src/hotspot/cpu/x86/x86.ad
+++ b/src/hotspot/cpu/x86/x86.ad
@@ -1461,6 +1461,8 @@ const bool Matcher::match_rule_supported(int opcode) {
         return false;
       }
       break;
+    case Op_StrInflatedCopy:
+      return false;
     case Op_OnSpinWait:
       if (VM_Version::supports_on_spin_wait() == false) {
         return false;


$ ~/github/jdk-upstream/build/linux-x86_64-server-slowdebug/jdk/bin/java -XX:-BackgroundCompilation -XX:CICompilerCount=2 Test

1. First JVM crash log
  1 #
  2 # A fatal error has been detected by the Java Runtime Environment:
  3 #
  4 #  Internal Error (/home/yangfei/github/jdk-upstream/src/hotspot/share/opto/graphKit.cpp:4215), pid=21009, tid=21104
  5 #  assert(Matcher::match_rule_supported(Op_StrInflatedCopy)) failed: Intrinsic not supported
  6 #
  7 # JRE version: OpenJDK Runtime Environment (17.0) (slowdebug build 17-internal+0-adhoc.yangfei.jdk-upstream)
  8 # Java VM: OpenJDK 64-Bit Server VM (slowdebug 17-internal+0-adhoc.yangfei.jdk-upstream, mixed mode, tiered, compressed oops, compressed class     ptrs, g1 gc, linux-amd64)
  9 # Problematic frame:
 10 # V  [libjvm.so+0xa6c41c]  GraphKit::inflate_string(Node*, Node*, TypeAryPtr const*, Node*)+0x3a
 11 #
 12 # Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /h    ome/yangfei/c2/core.21009)
 13 #
 14 # If you would like to submit a bug report, please visit:
 15 #   https://bugreport.java.com/bugreport/crash.jsp
 16 #
 17
 18 ---------------  S U M M A R Y ------------
 19
 20 Command Line: -XX:-BackgroundCompilation -XX:CICompilerCount=2 Test
 21
 22 Host: ubuntu18, Intel(R) Xeon(R) CPU E5-2690 v3 @ 2.60GHz, 48 cores, 377G, Ubuntu 18.04.2 LTS
 23 Time: Wed Mar 24 09:57:06 2021 CST elapsed time: 6.732316 seconds (0d 0h 0m 6s)
 24
 25 ---------------  T H R E A D  ---------------
 26
 27 Current thread (0x00007f7e1045efa0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=21104, stack(0x00007f7da9160000,0x00007f7d    a9261000)]
 28
 29
 30 Current CompileTask:
 31 C2:   6732  417    b  4       java.lang.AbstractStringBuilder::append (45 bytes)
 32
 33 Stack: [0x00007f7da9160000,0x00007f7da9261000],  sp=0x00007f7da925bc60,  free space=1007k
 34 Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
 35 V  [libjvm.so+0xa6c41c]  GraphKit::inflate_string(Node*, Node*, TypeAryPtr const*, Node*)+0x3a
 36 V  [libjvm.so+0xdb1000]  LibraryCallKit::inline_string_copy(bool)+0x552
 37 V  [libjvm.so+0xdac345]  LibraryCallKit::try_to_inline(int)+0x4c3
 38 V  [libjvm.so+0xdab236]  LibraryIntrinsic::generate(JVMState*)+0x188
 39 V  [libjvm.so+0x9026d8]  Parse::do_call()+0xb80
 40 V  [libjvm.so+0x10070c3]  Parse::do_one_bytecode()+0x45e1
 41 V  [libjvm.so+0xff5068]  Parse::do_one_block()+0x4dc
 42 V  [libjvm.so+0xff146f]  Parse::do_all_blocks()+0x3bd
 43 V  [libjvm.so+0xff0fb3]  Parse::Parse(JVMState*, ciMethod*, float)+0x100b
 44 V  [libjvm.so+0x6c75d4]  ParseGenerator::generate(JVMState*)+0x106
 ......

Proposed patch fixed the first crash by this change:

diff --git a/src/hotspot/share/opto/c2compiler.cpp b/src/hotspot/share/opto/c2compiler.cpp
index 89b0270ab72..f2b9e3ecd6d 100644
--- a/src/hotspot/share/opto/c2compiler.cpp
+++ b/src/hotspot/share/opto/c2compiler.cpp
@@ -179,11 +179,11 @@ bool C2Compiler::is_intrinsic_supported(const methodHandle& method, bool is_virt
   switch (id) {
   case vmIntrinsics::_compressStringC:
   case vmIntrinsics::_compressStringB:
-    if (!Matcher::has_match_rule(Op_StrCompressedCopy)) return false;
+    if (!Matcher::match_rule_supported(Op_StrCompressedCopy)) return false;
     break;
   case vmIntrinsics::_inflateStringC:
   case vmIntrinsics::_inflateStringB:
-    if (!Matcher::has_match_rule(Op_StrInflatedCopy)) return false;
+    if (!Matcher::match_rule_supported(Op_StrInflatedCopy)) return false;
     break;
   case vmIntrinsics::_compareToL:
   case vmIntrinsics::_compareToU:

2. Second jvm crash log
  1 #
  2 # A fatal error has been detected by the Java Runtime Environment:
  3 #
  4 #  Internal Error (/home/yangfei/github/jdk-upstream/src/hotspot/share/opto/loopnode.cpp:3790), pid=16853, tid=16868
  5 #  assert(_ltree_root->_child == __null || C->has_loops() || only_has_infinite_loops() || C->has_exception_backedge()) failed: parsing found no loops but there are some
  6 #
  7 # JRE version: OpenJDK Runtime Environment (17.0) (slowdebug build 17-internal+0-adhoc.yangfei.jdk-upstream)
  8 # Java VM: OpenJDK 64-Bit Server VM (slowdebug 17-internal+0-adhoc.yangfei.jdk-upstream, mixed mode, tiered, compressed oops, compressed class     ptrs, g1 gc, linux-amd64)
  9 # Problematic frame:
 10 # V  [libjvm.so+0xe14d0e]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x334
 11 #
 12 # Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /h    ome/yangfei/c2/core.16853)
 13 #
 14 # If you would like to submit a bug report, please visit:
 15 #   https://bugreport.java.com/bugreport/crash.jsp
 16 #
 17
 18 ---------------  S U M M A R Y ------------
 19
 20 Command Line: -XX:-BackgroundCompilation -XX:CICompilerCount=2 Test
 21
 22 Host: ubuntu18, Intel(R) Xeon(R) CPU E5-2690 v3 @ 2.60GHz, 48 cores, 377G, Ubuntu 18.04.2 LTS
 23 Time: Wed Mar 24 10:02:49 2021 CST elapsed time: 4.423882 seconds (0d 0h 0m 4s)
 24
 25 ---------------  T H R E A D  ---------------
 26
 27 Current thread (0x00007f39f445efa0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=16868, stack(0x00007f398ab5d000,0x00007f39    8ac5e000)]
 28
 29
 30 Current CompileTask:
 31 C2:   4423  421    b  4       Test::concatStringConstU (25 bytes)
 32
 33 Stack: [0x00007f398ab5d000,0x00007f398ac5e000],  sp=0x00007f398ac58120,  free space=1004k
 34 Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
 35 V  [libjvm.so+0xe14d0e]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x334
 36 V  [libjvm.so+0x7e9c96]  PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&, LoopOptsMode)+0x10e
 37 V  [libjvm.so+0x7e9eae]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x46
 38 V  [libjvm.so+0x7dcd79]  Compile::optimize_loops(PhaseIterGVN&, LoopOptsMode)+0xf7
 39 V  [libjvm.so+0x7ddc8c]  Compile::Optimize()+0xd6e
 40 V  [libjvm.so+0x7d6bd6]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x13e4
 41 V  [libjvm.so+0x6c563e]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x128
 42 V  [libjvm.so+0x7f3ac3]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x889
 43 V  [libjvm.so+0x7f26e7]  CompileBroker::compiler_thread_loop()+0x3dd
 44 V  [libjvm.so+0x815377]  CompilerThread::thread_entry(JavaThread*, Thread*)+0x69
 45 V  [libjvm.so+0x1273a9b]  JavaThread::thread_main_inner()+0x14f
 46 V  [libjvm.so+0x1273944]  JavaThread::run()+0x11e
 47 V  [libjvm.so+0x1270f72]  Thread::call_run()+0x180
 48 V  [libjvm.so+0xfbda2e]  thread_native_entry(Thread*)+0x1e4

Proposed patch fixed the second crash by this change:

diff --git a/src/hotspot/share/opto/graphKit.cpp b/src/hotspot/share/opto/graphKit.cpp
index 69e3c4fa9dd..22078bdbff4 100644
--- a/src/hotspot/share/opto/graphKit.cpp
+++ b/src/hotspot/share/opto/graphKit.cpp
@@ -4228,6 +4228,8 @@ void GraphKit::inflate_string_slow(Node* src, Node* dst, Node* start, Node* coun
    * }
    */
   add_empty_predicates();
+  C->set_has_loops(true);
+
   RegionNode* head = new RegionNode(3);
   head->init_req(1, control());
   gvn().set_type(head, Type::CONTROL);
",,,,,,,,,,JDK-8264477,JDK-8265502,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s4cz:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-29 00:46;roboduke;Changeset: 1f54ed07
Author:    Fei Yang <fyang@openjdk.org>
Date:      2021-03-29 07:45:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1f54ed07
;;;","2021-04-19 05:14;shade;Fix Request (11u)

This fixes a minor compiler trouble and keeps codebases in sync (I see 11.0.12-oracle). Patch applies cleanly to 11u, passes tier{1,2}.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] C2 compilation fails with assert ""inline type should be loaded""",JDK-8264085,5045269,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,epavlova,epavlova,2021-03-23 13:29,2021-04-07 08:17,2023-10-01 09:57,2021-04-07 08:17,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,,,,,"lworld bits crash with 

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/katya/work/JavaSE/Hotspot/ws/git/valhalla.chhagedorn/open/src/hotspot/share/opto/inlinetypenode.cpp:603), pid=20013, tid=20028
#  assert(vt->is_default(&gvn) || init_ctl != kit->control() || !gvn.type(oop)->is_inlinetypeptr() || oop->is_Con() || oop->Opcode() == Op_InlineTypePtr || AllocateNode::Ideal_allocation(oop, &gvn) != __null || vt->is_loaded(&gvn) == oop) failed: inline type should be loaded
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-lworld3ea+0-2021-03-16-2108446.katya...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-lworld3ea+0-2021-03-16-2108446.katya..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xe75db2]  InlineTypeNode::make_from_oop(GraphKit*, Node*, ciInlineKlass*)+0xb52
#

---------------  S U M M A R Y ------------

Command Line: -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Djavatest.maxOutputSize=1000000 -DVerifyIR=false -XX:+AlwaysIncrementalInline -XX:FlatArrayElementMaxOops=0 -XX:FlatArrayElementMaxSize=0 -XX:InlineFieldMaxFlatSize=0 -XX:+InlineTypePassFieldsAsArgs -XX:+InlineTypeReturnedAsFields -XX:FlatArrayElementMaxSize=0 -XX:-BackgroundCompilation -XX:CompileCommand=quiet -DShouldDoIRVerification=false -DWarmup=251 jdk.test.lib.hotspot.ir_framework.TestFrameworkExecution compiler.valhalla.inlinetypes.TestCallingConventionBug compiler.valhalla.inlinetypes.MyValue1 compiler.valhalla.inlinetypes.MyValue2 compiler.valhalla.inlinetypes.MyValue2Inline compiler.valhalla.inlinetypes.MyValue3 compiler.valhalla.inlinetypes.MyValue3Inline compiler.valhalla.inlinetypes.MyValue4

Host: olegbox, Intel(R) Xeon(R) CPU E5-2630 0 @ 2.30GHz, 24 cores, 15G, Ubuntu 16.04.6 LTS
Time: Tue Mar 23 12:39:43 2021 PDT elapsed time: 2.757883 seconds (0d 0h 0m 2s)

---------------  T H R E A D  ---------------

Current thread (0x00007fc8902a63f0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=20028, stack(0x00007fc8614fd000,0x00007fc8615fe000)]


Current CompileTask:
C2:   2758  643    b  4       compiler.valhalla.inlinetypes.TestCallingConventionBug::test44 (25 bytes)

Stack: [0x00007fc8614fd000,0x00007fc8615fe000],  sp=0x00007fc8615fa510,  free space=1013k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xe75db2]  InlineTypeNode::make_from_oop(GraphKit*, Node*, ciInlineKlass*)+0xb52
V  [libjvm.so+0xd8ec29]  GraphKit::cast_not_null(Node*, bool) [clone .part.0]+0x159
V  [libjvm.so+0xdaa38a]  GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.0]+0x57a
V  [libjvm.so+0xdaaa0a]  GraphKit::null_check_oop(Node*, Node**, bool, bool, bool)+0x14a
V  [libjvm.so+0xe75b11]  InlineTypeNode::make_from_oop(GraphKit*, Node*, ciInlineKlass*)+0x8b1
V  [libjvm.so+0xe7d21c]  InlineTypeNode::initialize_fields(GraphKit*, MultiNode*, unsigned int&, bool)+0x23c
V  [libjvm.so+0xe7db0a]  InlineTypeNode::make_from_multi(GraphKit*, MultiNode*, ciInlineKlass*, unsigned int&, bool)+0x4a
V  [libjvm.so+0xd9ea36]  GraphKit::set_results_for_java_call(CallJavaNode*, bool, bool)+0xe6
V  [libjvm.so+0x870889]  DirectCallGenerator::generate(JVMState*)+0x2d9
V  [libjvm.so+0xba0f21]  Parse::do_call()+0x391
V  [libjvm.so+0x164d768]  Parse::do_one_bytecode()+0x438
V  [libjvm.so+0x1634ea8]  Parse::do_one_block()+0x848
V  [libjvm.so+0x1635dd0]  Parse::do_all_blocks()+0x130
V  [libjvm.so+0x163adf3]  Parse::Parse(JVMState*, ciMethod*, float)+0xe33
V  [libjvm.so+0x8681e5]  ParseGenerator::generate(JVMState*)+0x115
V  [libjvm.so+0xa4fb1c]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x113c
V  [libjvm.so+0x8650e8]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f8
V  [libjvm.so+0xa60331]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xf21
V  [libjvm.so+0xa60fd8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1924a61]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x192c920]  Thread::call_run()+0x100
V  [libjvm.so+0x15eed66]  thread_native_entry(Thread*)+0x116




To reproduce the crash you need to run compiler/valhalla/inlinetypes/TestCallingConvention.java
from Cristian's branch: https://github.com/openjdk/valhalla/compare/lworld...chhagedorn:TestingFramework
TestCallingConvention.java is converted version of the same test from valhalla ws to new IR framework.

The unit test which crash jvm is actually test44, so I am attaching TestCallingConventionBug.java
which runs only test44 in one scenario.


Note, original version of TestCallingConvention.java doesn't fail.
So it could be nice to look why the test based on new IR framework crashes while the test based on old framework passes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-23 13:30;epavlova;TestCallingConventionBug.java;https://bugs.openjdk.org/secure/attachment/93789/TestCallingConventionBug.java","2021-03-23 13:30;epavlova;hs_err_bug8264085.log;https://bugs.openjdk.org/secure/attachment/93788/hs_err_bug8264085.log",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s4ab:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-23 13:30;epavlova;Assigning the bug to Christian for evaluation.;;;","2021-03-23 13:31;epavlova;Note, I tested with valhalla:lworld bits as well, not only with Christian's branch ;;;","2021-03-23 17:40;epavlova;The flag -XX:InlineFieldMaxFlatSize=0 (used to run the test) leads the test to crash.;;;","2021-04-06 08:11;thartmann;I've figured out why this is not triggered with the old framework:
MixedContainer in TestCallingConvention.java was changed from static primitive class to primitive class. As a result, the class contains an additional hidden field to refer to its enclosing class. 
In this case it's great that this caught a bug but in general it's very important to not change/refactor the test code. A seemingly harmless change like this can have a huge impact on what the JIT generates (an additional field leads to completely different code after scalarization) and in the worst case leads to the test not working anymore as intended (i.e. not covering the code path it's supposed to cover).;;;",,,,,,,,,,,,,,,,,,,,,,,,
LocalDateTimeStringConverterTest fails in Canada,JDK-8264061,5045242,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jgneff,jgneff,jgneff,2021-03-23 11:15,2021-04-22 23:35,2023-10-01 09:57,2021-03-23 15:55,jfx17,,,,,,,,jfx17,javafx,,0,noreg-self,testbug,,,,,,,,,,,,,,,,,,,,,"The LocalDateTimeStringConverterTest fails on a system with a Canadian locale or any other locale that uses the suffix ""p.m."" to denote the 12 hours from noon until midnight.

SYSTEM / OS / JAVA RUNTIME INFORMATION

Ubuntu 20.04.2 LTS
  $ uname -srm
  Linux 5.4.0-67-generic x86_64

macOS 11.2.3 (Big Sur)
  $ uname -srm
  Darwin 20.3.0 x86_64

Microsoft Windows 10 Pro Version 10.0.19042
  $ uname -srm
  CYGWIN_NT-10.0 3.1.7(0.340/5/3) x86_64

Oracle OpenJDK 15.0.2
  $ java --version
  openjdk 15.0.2 2021-01-19
  OpenJDK Runtime Environment (build 15.0.2+7-27)
  OpenJDK 64-Bit Server VM (build 15.0.2+7-27, mixed mode, sharing)

Apache Ant 1.10.9
  $ ant -version
  Apache Ant(TM) version 1.10.9 compiled on September 27 2020

STEPS TO REPRODUCE

Simulate a Canadian locale by running the tests with:

  $ bash gradlew -Duser.country=CA test -x :web:test

EXPECTED RESULTS

The tests should be successful regardless of the locale:

  $ bash gradlew test -x :web:test
  ...
  BUILD SUCCESSFUL in 4m 16s
  192 actionable tasks: 192 executed

ACTUAL RESULT

The tests fail on a system with a Canadian locale:

  $ bash gradlew test -x :web:test
  ...
  > Task :base:test

  test.javafx.util.converter.LocalDateTimeStringConverterTest
    > toString_to_fromString_testRoundtrip[0] FAILED
    java.time.format.DateTimeParseException:
    Text '1985-01-12, 12:34 p.m.' could not be parsed,
    unparsed text found at index 19
  ...
  5311 tests completed, 1 failed, 28 skipped

  > Task :base:test FAILED

  FAILURE: Build failed with an exception.

SOURCE CODE FOR AN EXECUTABLE TEST CASE

None.

WORKAROUND

To work around the problem, run the tests with a default U.S. locale:

  $ bash gradlew -Duser.country=US test -x :web:test
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8160039,JDK-8265828,JDK-8265727,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s44b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2021-03-23 15:55;roboduke;Changeset: 3bbcf977
Author:    John Neffenger <jgneff@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-03-23 22:55:00 +0000
URL:       https://git.openjdk.java.net/jfx/commit/3bbcf977
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[redo] JDK-8248904: Add support to jpackage for the Mac App Store.,JDK-8264057,5045235,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,herrick,herrick,herrick,2021-03-23 09:47,2021-03-29 11:45,2023-10-01 09:57,2021-03-24 08:40,17,,,,,,,,17,tools,,0,sn_89,,,,,,,,,,,,,,,,,,,,,,"The fix to JDK-8248904 is being removed with JDK-8264055 and we will restore it with this issue.
This is being done to include the contributor attribution for Erwin Morrhey .",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264055,,,,,,JDK-8248904,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s42r:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-03-24 05:21;herrick;PR: https://github.com/openjdk/jdk/pull/3172;;;","2021-03-24 08:40;roboduke;Changeset: deda80f0
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-03-24 15:39:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/deda80f0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
backout JDK-8248904 in order to resubmit with additional attribution.,JDK-8264055,5045232,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,herrick,herrick,herrick,2021-03-23 09:36,2021-03-29 11:44,2023-10-01 09:57,2021-03-23 14:46,17,,,,,,,,17,tools,,0,sn_89,,,,,,,,,,,,,,,,,,,,,,"The implementation of: ""JDK-8248904: Add support to jpackage for the Mac App Store "" was done with the help of Erwin Morrhey .  We wish to back this fix out and re-submit it in order to include the proper attribution.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8248904,,,,,,JDK-8264057,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s423:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-03-23 14:46;roboduke;Changeset: 15bcf6d9
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-03-23 21:45:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/15bcf6d9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Backout 8263832,JDK-8264052,5045227,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2021-03-23 08:43,2021-03-29 11:45,2023-10-01 09:57,2021-03-24 05:14,17,,,,,,,,17,hotspot,,0,gc-shenandoah,redhat-interest,,,,,,,,,,,,,,,,,,,,,"TestStringDedupStress test started to fail since JDK-8263832, it turns out that Threads::possibly_parallel_threads_do() only iterates Java and VM threads.

Another look of original code, it works correctly, JDK-8263832 should be backout.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263832,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s40z:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-03-24 05:14;roboduke;Changeset: 9ee0b9a1
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-03-24 12:14:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9ee0b9a1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix caching in Jar URL connections when an entry is missing,JDK-8264048,5045220,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aefimov,aefimov,aefimov,2021-03-23 07:53,2021-04-12 15:11,2023-10-01 09:57,2021-04-06 03:44,,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"When an URL connection is referencing an entry that doesn't exist in a Jar file the Jar file is cached before an exception is thrown, but the Jar file can't be obtained from the failed connection, which prevents the caller, for instance a URLClassLoader, from closing it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8132359,,,,,,,,,,BKLG-1512,JDK-8132359,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s3zf:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-04-06 03:44;roboduke;Changeset: a611c462
Author:    Aleksei Efimov <aefimov@openjdk.org>
Date:      2021-04-06 10:43:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a611c462
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Duplicate global variable 'jvm' in libjavajpeg and libawt,JDK-8264047,5045219,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2021-03-23 07:46,2021-05-12 07:35,2023-10-01 09:57,2021-04-06 02:44,11.0.11,16,17,,,,,,17,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok-next,jdk16u-fix-yes,,,,,,,,,,,,,,,,,,"This is mostly an issue with using experimental AWT support with Graal VM's native-image via the static OpenJDK libraries.

In libjavajpeg.so and libawt.so global variable of type JavaVM* 'jvm' is being used. When static libs are being produced for both on a GCC 10+ system (without -fcommon), libjavajpeg.a and libawt.a and subsequently used in a native image the link will fail due to duplicate variable 'jvm'. This can be reproduced by creating a native image from test/jdk/java/awt/font/Rotate/RotatedFontTest.java in the OpenJDK tree.

Example failure:
[...]
[font-rotate-test:500707]   (features):     870.20 ms,  3.26 GB
[font-rotate-test:500707]     analysis:  31,579.63 ms,  3.26 GB
[font-rotate-test:500707]     universe:     942.02 ms,  3.26 GB
[font-rotate-test:500707]      (parse):   5,563.07 ms,  3.26 GB
[font-rotate-test:500707]     (inline):   7,946.27 ms,  3.96 GB
[font-rotate-test:500707]    (compile):  27,494.46 ms,  5.17 GB
[font-rotate-test:500707]      compile:  42,411.52 ms,  5.17 GB
[font-rotate-test:500707]      dbginfo:   7,406.19 ms,  5.51 GB
[font-rotate-test:500707]        image:  10,666.92 ms,  5.51 GB
>> /usr/bin/gcc -z noexecstack -Wl,--gc-sections -Wl,--dynamic-list -Wl,/tmp/SVM-14433696000961709042/exported_symbols.list -Wl,--exclude-libs,ALL -Wl,-x -o /home/sgehwolf/Documents/mandrel/bugs/MANDREL-37/harfbuzz_repro/font-rotate-test font-rotate-test.o /disk/graal/upstream-sources/graal/mandrel-build/lib/libnet.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libjavajpeg.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libnio.a /disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64/liblibchelper.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libjava.a /disk/graal/upstream-sources/graal/mandrel-build/lib/liblcms.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libfontmanager.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libawt_headless.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libawt.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libharfbuzz.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libfdlibm.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libzip.a /disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64/libjvm.a -v -L/tmp/SVM-14433696000961709042 -L/disk/graal/upstream-sources/graal/mandrel-build/lib -L/disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64 -lstdc++ -lm -lfreetype -lpthread -ldl -lz -lrt
># Using built-in specs.
># COLLECT_GCC=/usr/bin/gcc
># COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/10/lto-wrapper
># OFFLOAD_TARGET_NAMES=nvptx-none
># OFFLOAD_TARGET_DEFAULT=1
># Target: x86_64-redhat-linux
># Configured with: ../configure --enable-bootstrap --enable-languages=c,c++,fortran,objc,obj-c++,ada,go,d,lto --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-shared --enable-threads=posix --enable-checking=release --enable-multilib --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-gcc-major-version-only --with-linker-hash-style=gnu --enable-plugin --enable-initfini-array --with-isl --enable-offload-targets=nvptx-none --without-cuda-driver --enable-gnu-indirect-function --enable-cet --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux
># Thread model: posix
># Supported LTO compression algorithms: zlib zstd
># gcc version 10.2.1 20201125 (Red Hat 10.2.1-9) (GCC) 
># COMPILER_PATH=/usr/libexec/gcc/x86_64-redhat-linux/10/:/usr/libexec/gcc/x86_64-redhat-linux/10/:/usr/libexec/gcc/x86_64-redhat-linux/:/usr/lib/gcc/x86_64-redhat-linux/10/:/usr/lib/gcc/x86_64-redhat-linux/
># LIBRARY_PATH=/usr/lib/gcc/x86_64-redhat-linux/10/:/usr/lib/gcc/x86_64-redhat-linux/10/../../../../lib64/:/lib/../lib64/:/usr/lib/../lib64/:/usr/lib/gcc/x86_64-redhat-linux/10/../../../:/lib/:/usr/lib/
># COLLECT_GCC_OPTIONS='-z' 'noexecstack' '-o' '/home/sgehwolf/Documents/mandrel/bugs/MANDREL-37/harfbuzz_repro/font-rotate-test' '-v' '-L/tmp/SVM-14433696000961709042' '-L/disk/graal/upstream-sources/graal/mandrel-build/lib' '-L/disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64' '-mtune=generic' '-march=x86-64'
>#  /usr/libexec/gcc/x86_64-redhat-linux/10/collect2 -plugin /usr/libexec/gcc/x86_64-redhat-linux/10/liblto_plugin.so -plugin-opt=/usr/libexec/gcc/x86_64-redhat-linux/10/lto-wrapper -plugin-opt=-fresolution=/tmp/ccnjZgKJ.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --build-id --no-add-needed --eh-frame-hdr --hash-style=gnu -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o /home/sgehwolf/Documents/mandrel/bugs/MANDREL-37/harfbuzz_repro/font-rotate-test -z noexecstack /usr/lib/gcc/x86_64-redhat-linux/10/../../../../lib64/crt1.o /usr/lib/gcc/x86_64-redhat-linux/10/../../../../lib64/crti.o /usr/lib/gcc/x86_64-redhat-linux/10/crtbegin.o -L/tmp/SVM-14433696000961709042 -L/disk/graal/upstream-sources/graal/mandrel-build/lib -L/disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64 -L/usr/lib/gcc/x86_64-redhat-linux/10 -L/usr/lib/gcc/x86_64-redhat-linux/10/../../../../lib64 -L/lib/../lib64 -L/usr/lib/../lib64 -L/usr/lib/gcc/x86_64-redhat-linux/10/../../.. --gc-sections --dynamic-list /tmp/SVM-14433696000961709042/exported_symbols.list --exclude-libs ALL -x font-rotate-test.o /disk/graal/upstream-sources/graal/mandrel-build/lib/libnet.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libjavajpeg.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libnio.a /disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64/liblibchelper.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libjava.a /disk/graal/upstream-sources/graal/mandrel-build/lib/liblcms.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libfontmanager.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libawt_headless.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libawt.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libharfbuzz.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libfdlibm.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libzip.a /disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64/libjvm.a -lstdc++ -lm -lfreetype -lpthread -ldl -lz -lrt -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-redhat-linux/10/crtend.o /usr/lib/gcc/x86_64-redhat-linux/10/../../../../lib64/crtn.o
># /usr/bin/ld: /disk/graal/upstream-sources/graal/mandrel-build/lib/libawt.a(awt_LoadLibrary.o):/disk/openjdk/upstream-sources/openjdk-11-dev/src/java.desktop/unix/native/libawt/awt/awt_LoadLibrary.c:52: multiple definition of `jvm'; /disk/graal/upstream-sources/graal/mandrel-build/lib/libjavajpeg.a(jpegdecoder.o):/disk/openjdk/upstream-sources/openjdk-11-dev/src/java.desktop/share/native/libjavajpeg/jpegdecoder.c:67: first defined here
># collect2: error: ld returned 1 exit status
[font-rotate-test:500707]        write:   1,876.08 ms,  5.51 GB
Fatal error:java.lang.RuntimeException: java.lang.RuntimeException: There was an error linking the native image: Linker command exited with 1

Linker command executed:
/usr/bin/gcc -z noexecstack -Wl,--gc-sections -Wl,--dynamic-list -Wl,/tmp/SVM-14433696000961709042/exported_symbols.list -Wl,--exclude-libs,ALL -Wl,-x -o /home/sgehwolf/Documents/mandrel/bugs/MANDREL-37/harfbuzz_repro/font-rotate-test font-rotate-test.o /disk/graal/upstream-sources/graal/mandrel-build/lib/libnet.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libjavajpeg.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libnio.a /disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64/liblibchelper.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libjava.a /disk/graal/upstream-sources/graal/mandrel-build/lib/liblcms.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libfontmanager.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libawt_headless.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libawt.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libharfbuzz.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libfdlibm.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libzip.a /disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64/libjvm.a -v -L/tmp/SVM-14433696000961709042 -L/disk/graal/upstream-sources/graal/mandrel-build/lib -L/disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64 -lstdc++ -lm -lfreetype -lpthread -ldl -lz -lrt

Linker command output:
Using built-in specs.
COLLECT_GCC=/usr/bin/gcc
COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/10/lto-wrapper
OFFLOAD_TARGET_NAMES=nvptx-none
OFFLOAD_TARGET_DEFAULT=1
Target: x86_64-redhat-linux
Configured with: ../configure --enable-bootstrap --enable-languages=c,c++,fortran,objc,obj-c++,ada,go,d,lto --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-shared --enable-threads=posix --enable-checking=release --enable-multilib --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-gcc-major-version-only --with-linker-hash-style=gnu --enable-plugin --enable-initfini-array --with-isl --enable-offload-targets=nvptx-none --without-cuda-driver --enable-gnu-indirect-function --enable-cet --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 10.2.1 20201125 (Red Hat 10.2.1-9) (GCC) 
COMPILER_PATH=/usr/libexec/gcc/x86_64-redhat-linux/10/:/usr/libexec/gcc/x86_64-redhat-linux/10/:/usr/libexec/gcc/x86_64-redhat-linux/:/usr/lib/gcc/x86_64-redhat-linux/10/:/usr/lib/gcc/x86_64-redhat-linux/
LIBRARY_PATH=/usr/lib/gcc/x86_64-redhat-linux/10/:/usr/lib/gcc/x86_64-redhat-linux/10/../../../../lib64/:/lib/../lib64/:/usr/lib/../lib64/:/usr/lib/gcc/x86_64-redhat-linux/10/../../../:/lib/:/usr/lib/
COLLECT_GCC_OPTIONS='-z' 'noexecstack' '-o' '/home/sgehwolf/Documents/mandrel/bugs/MANDREL-37/harfbuzz_repro/font-rotate-test' '-v' '-L/tmp/SVM-14433696000961709042' '-L/disk/graal/upstream-sources/graal/mandrel-build/lib' '-L/disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64' '-mtune=generic' '-march=x86-64'
 /usr/libexec/gcc/x86_64-redhat-linux/10/collect2 -plugin /usr/libexec/gcc/x86_64-redhat-linux/10/liblto_plugin.so -plugin-opt=/usr/libexec/gcc/x86_64-redhat-linux/10/lto-wrapper -plugin-opt=-fresolution=/tmp/ccnjZgKJ.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --build-id --no-add-needed --eh-frame-hdr --hash-style=gnu -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o /home/sgehwolf/Documents/mandrel/bugs/MANDREL-37/harfbuzz_repro/font-rotate-test -z noexecstack /usr/lib/gcc/x86_64-redhat-linux/10/../../../../lib64/crt1.o /usr/lib/gcc/x86_64-redhat-linux/10/../../../../lib64/crti.o /usr/lib/gcc/x86_64-redhat-linux/10/crtbegin.o -L/tmp/SVM-14433696000961709042 -L/disk/graal/upstream-sources/graal/mandrel-build/lib -L/disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64 -L/usr/lib/gcc/x86_64-redhat-linux/10 -L/usr/lib/gcc/x86_64-redhat-linux/10/../../../../lib64 -L/lib/../lib64 -L/usr/lib/../lib64 -L/usr/lib/gcc/x86_64-redhat-linux/10/../../.. --gc-sections --dynamic-list /tmp/SVM-14433696000961709042/exported_symbols.list --exclude-libs ALL -x font-rotate-test.o /disk/graal/upstream-sources/graal/mandrel-build/lib/libnet.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libjavajpeg.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libnio.a /disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64/liblibchelper.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libjava.a /disk/graal/upstream-sources/graal/mandrel-build/lib/liblcms.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libfontmanager.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libawt_headless.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libawt.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libharfbuzz.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libfdlibm.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libzip.a /disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64/libjvm.a -lstdc++ -lm -lfreetype -lpthread -ldl -lz -lrt -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-redhat-linux/10/crtend.o /usr/lib/gcc/x86_64-redhat-linux/10/../../../../lib64/crtn.o
/usr/bin/ld: /disk/graal/upstream-sources/graal/mandrel-build/lib/libawt.a(awt_LoadLibrary.o):/disk/openjdk/upstream-sources/openjdk-11-dev/src/java.desktop/unix/native/libawt/awt/awt_LoadLibrary.c:52: multiple definition of `jvm'; /disk/graal/upstream-sources/graal/mandrel-build/lib/libjavajpeg.a(jpegdecoder.o):/disk/openjdk/upstream-sources/openjdk-11-dev/src/java.desktop/share/native/libjavajpeg/jpegdecoder.c:67: first defined here
collect2: error: ld returned 1 exit status
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at java.base/java.util.concurrent.ForkJoinTask.getThrowableException(ForkJoinTask.java:600)
	at java.base/java.util.concurrent.ForkJoinTask.get(ForkJoinTask.java:1006)
	at com.oracle.svm.hosted.NativeImageGenerator.run(NativeImageGenerator.java:497)
	at com.oracle.svm.hosted.NativeImageGeneratorRunner.buildImage(NativeImageGeneratorRunner.java:370)
	at com.oracle.svm.hosted.NativeImageGeneratorRunner.build(NativeImageGeneratorRunner.java:531)
	at com.oracle.svm.hosted.NativeImageGeneratorRunner.main(NativeImageGeneratorRunner.java:119)
	at com.oracle.svm.hosted.NativeImageGeneratorRunner$JDK9Plus.main(NativeImageGeneratorRunner.java:568)
Caused by: java.lang.RuntimeException: There was an error linking the native image: Linker command exited with 1

Linker command executed:
/usr/bin/gcc -z noexecstack -Wl,--gc-sections -Wl,--dynamic-list -Wl,/tmp/SVM-14433696000961709042/exported_symbols.list -Wl,--exclude-libs,ALL -Wl,-x -o /home/sgehwolf/Documents/mandrel/bugs/MANDREL-37/harfbuzz_repro/font-rotate-test font-rotate-test.o /disk/graal/upstream-sources/graal/mandrel-build/lib/libnet.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libjavajpeg.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libnio.a /disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64/liblibchelper.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libjava.a /disk/graal/upstream-sources/graal/mandrel-build/lib/liblcms.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libfontmanager.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libawt_headless.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libawt.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libharfbuzz.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libfdlibm.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libzip.a /disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64/libjvm.a -v -L/tmp/SVM-14433696000961709042 -L/disk/graal/upstream-sources/graal/mandrel-build/lib -L/disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64 -lstdc++ -lm -lfreetype -lpthread -ldl -lz -lrt

Linker command output:
Using built-in specs.
COLLECT_GCC=/usr/bin/gcc
COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/10/lto-wrapper
OFFLOAD_TARGET_NAMES=nvptx-none
OFFLOAD_TARGET_DEFAULT=1
Target: x86_64-redhat-linux
Configured with: ../configure --enable-bootstrap --enable-languages=c,c++,fortran,objc,obj-c++,ada,go,d,lto --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-shared --enable-threads=posix --enable-checking=release --enable-multilib --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-gcc-major-version-only --with-linker-hash-style=gnu --enable-plugin --enable-initfini-array --with-isl --enable-offload-targets=nvptx-none --without-cuda-driver --enable-gnu-indirect-function --enable-cet --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 10.2.1 20201125 (Red Hat 10.2.1-9) (GCC) 
COMPILER_PATH=/usr/libexec/gcc/x86_64-redhat-linux/10/:/usr/libexec/gcc/x86_64-redhat-linux/10/:/usr/libexec/gcc/x86_64-redhat-linux/:/usr/lib/gcc/x86_64-redhat-linux/10/:/usr/lib/gcc/x86_64-redhat-linux/
LIBRARY_PATH=/usr/lib/gcc/x86_64-redhat-linux/10/:/usr/lib/gcc/x86_64-redhat-linux/10/../../../../lib64/:/lib/../lib64/:/usr/lib/../lib64/:/usr/lib/gcc/x86_64-redhat-linux/10/../../../:/lib/:/usr/lib/
COLLECT_GCC_OPTIONS='-z' 'noexecstack' '-o' '/home/sgehwolf/Documents/mandrel/bugs/MANDREL-37/harfbuzz_repro/font-rotate-test' '-v' '-L/tmp/SVM-14433696000961709042' '-L/disk/graal/upstream-sources/graal/mandrel-build/lib' '-L/disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64' '-mtune=generic' '-march=x86-64'
 /usr/libexec/gcc/x86_64-redhat-linux/10/collect2 -plugin /usr/libexec/gcc/x86_64-redhat-linux/10/liblto_plugin.so -plugin-opt=/usr/libexec/gcc/x86_64-redhat-linux/10/lto-wrapper -plugin-opt=-fresolution=/tmp/ccnjZgKJ.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --build-id --no-add-needed --eh-frame-hdr --hash-style=gnu -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o /home/sgehwolf/Documents/mandrel/bugs/MANDREL-37/harfbuzz_repro/font-rotate-test -z noexecstack /usr/lib/gcc/x86_64-redhat-linux/10/../../../../lib64/crt1.o /usr/lib/gcc/x86_64-redhat-linux/10/../../../../lib64/crti.o /usr/lib/gcc/x86_64-redhat-linux/10/crtbegin.o -L/tmp/SVM-14433696000961709042 -L/disk/graal/upstream-sources/graal/mandrel-build/lib -L/disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64 -L/usr/lib/gcc/x86_64-redhat-linux/10 -L/usr/lib/gcc/x86_64-redhat-linux/10/../../../../lib64 -L/lib/../lib64 -L/usr/lib/../lib64 -L/usr/lib/gcc/x86_64-redhat-linux/10/../../.. --gc-sections --dynamic-list /tmp/SVM-14433696000961709042/exported_symbols.list --exclude-libs ALL -x font-rotate-test.o /disk/graal/upstream-sources/graal/mandrel-build/lib/libnet.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libjavajpeg.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libnio.a /disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64/liblibchelper.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libjava.a /disk/graal/upstream-sources/graal/mandrel-build/lib/liblcms.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libfontmanager.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libawt_headless.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libawt.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libharfbuzz.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libfdlibm.a /disk/graal/upstream-sources/graal/mandrel-build/lib/libzip.a /disk/graal/upstream-sources/graal/mandrel-build/lib/svm/clibraries/linux-amd64/libjvm.a -lstdc++ -lm -lfreetype -lpthread -ldl -lz -lrt -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-redhat-linux/10/crtend.o /usr/lib/gcc/x86_64-redhat-linux/10/../../../../lib64/crtn.o
/usr/bin/ld: /disk/graal/upstream-sources/graal/mandrel-build/lib/libawt.a(awt_LoadLibrary.o):/disk/openjdk/upstream-sources/openjdk-11-dev/src/java.desktop/unix/native/libawt/awt/awt_LoadLibrary.c:52: multiple definition of `jvm'; /disk/graal/upstream-sources/graal/mandrel-build/lib/libjavajpeg.a(jpegdecoder.o):/disk/openjdk/upstream-sources/openjdk-11-dev/src/java.desktop/share/native/libjavajpeg/jpegdecoder.c:67: first defined here
collect2: error: ld returned 1 exit status
	at com.oracle.svm.hosted.image.NativeImageViaCC.handleLinkerFailure(NativeImageViaCC.java:513)
	at com.oracle.svm.hosted.image.NativeImageViaCC.write(NativeImageViaCC.java:460)
	at com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:708)
	at com.oracle.svm.hosted.NativeImageGenerator.lambda$run$2(NativeImageGenerator.java:493)
	at java.base/java.util.concurrent.ForkJoinTask$AdaptedRunnableAction.exec(ForkJoinTask.java:1407)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)
Error: Image build request failed with exit status 1",,,,,,,,,,JDK-8265141,JDK-8264981,JDK-8266207,JDK-8267010,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2s3z7:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-23 08:11;sgehwolf;The suggested fix is to rename the variable in one of the libraries.;;;","2021-04-06 02:44;roboduke;Changeset: eb6330e4
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2021-04-06 09:43:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/eb6330e4
;;;","2021-04-09 02:43;sgehwolf;Fix Request (OpenJDK 16u):
Please approve backporting this to 16u as we see this issue on OpenJDK builds in Fedora 33 (GCC 10+) and we don't build with -fcommon which is discouraged. This should be a no-op as far as functionality is concerned and should be low-risk. Patch applies clean.;;;","2021-04-09 04:42;sgehwolf;Fix Request (OpenJDK 11u):

Please approve this 11u backport. The JDK 17 patch applies clean. It's merely a rename of a variable so does not change any functionality. The issue is present on OpenJDK 11 builds with GCC 10+ (with static libs) and then trying to build a native image of an ImageIO app. Risk should be low.;;;",,,,,,,,,,,,,,,,,,,,,,,,
AArch64: NEON loadV2 and storeV2 addressing is wrong,JDK-8264018,5045174,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,njian,njian,njian,2021-03-22 23:39,2021-09-30 03:21,2023-10-01 09:57,2021-03-24 18:58,16,17,,,,,,,17,hotspot,,0,aarch64,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,,"c2 loadV2 and storeV2 are used for Vector API mask value load/store with
size of halfword. Their load/store immediate offset should be similar
to other vector load/store, e.g. loadV4/storeV4, valid only for
unscaled signed offset of imm9 or scaled unsigned offset of imm12:scale.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,,"0|i2s3p7:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-24 18:58;roboduke;Changeset: 3e18330a
Author:    Ningsheng Jian <njian@openjdk.org>
Date:      2021-03-25 01:57:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3e18330a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Add Gradle dependency verification,JDK-8264010,5045162,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jgneff,jgneff,jgneff,2021-03-22 22:05,2021-05-14 14:50,2023-10-01 09:57,2021-05-03 09:28,jfx17,,,,,,,,jfx17,javafx,,0,noreg-build,,,,,,,,,,,,,,,,,,,,,,"Add dependency verification to the Gradle builds of JavaFX on Linux, macOS, and Windows. The verification file documents the dependencies and guarantees the integrity of the JAR and POM files downloaded during the build.

SYSTEM / OS / JAVA RUNTIME INFORMATION

Ubuntu 20.04.2 LTS
  $ uname -srm
  Linux 5.4.0-67-generic x86_64

macOS 11.2.3 (Big Sur)
  $ uname -srm
  Darwin 20.3.0 x86_64

Microsoft Windows 10 Pro Version 10.0.19042
  $ uname -srm
  CYGWIN_NT-10.0 3.1.7(0.340/5/3) x86_64

Oracle OpenJDK 15.0.2
  $ java --version
  openjdk 15.0.2 2021-01-19
  OpenJDK Runtime Environment (build 15.0.2+7-27)
  OpenJDK 64-Bit Server VM (build 15.0.2+7-27, mixed mode, sharing)

STEPS TO REPRODUCE

Reproduce the problem in two steps:

1. Modify the JAR file of a dependency in the Gradle cache:
  $ strip-nondeterminism $(find ~/.gradle -name ST4-4.1.jar)

2. Build JavaFX:
  $ bash gradlew sdk jmods

I made a non-destructive change to the 'ST4-4.1.jar' file with the Linux 'strip-nondeterminism' command, which modifies the order and modification times of the files in the archive.

EXPECTED RESULTS

  $ bash gradlew sdk jmods
  ...
  > Task :graphics:generateGrammarSource FAILED

  FAILURE: Build failed with an exception.

  * What went wrong:
  Execution failed for task ':graphics:generateGrammarSource'.
  > Dependency verification failed for configuration ':graphics:antlr'
    One artifact failed verification: ST4-4.1.jar (org.antlr:ST4:4.1)
    from repository MavenRepo
    This can indicate that a dependency has been compromised.
    Please carefully verify the checksums.
  ...
  BUILD FAILED in 1s
  5 actionable tasks: 2 executed, 3 up-to-date

ACTUAL RESULT

  $ bash gradlew sdk jmods
  ...
  BUILD SUCCESSFUL in 1m 41s
  134 actionable tasks: 134 executed

SOURCE CODE FOR AN EXECUTABLE TEST CASE

None.

WORKAROUND

None.
",,,,,,,,,,,,,,,,,,,,JDK-8264725,,,,,,,,,,,,,,,,,JDK-8262236,JDK-8263204,,,,,JDK-8266919,,,,,,"2021-03-22 22:00;jgneff;Incorrect_checksum.png;https://bugs.openjdk.org/secure/attachment/93775/Incorrect_checksum.png","2021-03-22 22:00;jgneff;Verification_report.png;https://bugs.openjdk.org/secure/attachment/93776/Verification_report.png",,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s3mj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-05-03 09:28;roboduke;Changeset: a9f6035c
Author:    John Neffenger <jgneff@openjdk.org>
Date:      2021-05-03 16:28:16 +0000
URL:       https://git.openjdk.java.net/jfx/commit/a9f6035c9c1d4dc60aa960498d8dbb5e52827017
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect metaspace statistics after JEP 387 when UseCompressedClassPointers is off,JDK-8264008,5045161,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-03-22 20:40,2021-04-09 05:18,2023-10-01 09:57,2021-03-24 02:31,16,17,,,,,,,17,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,,"Reproduce:
 - run jdk/jfr/event/gc/heapsummary/TestHeapSummaryEventDefNewSerial.java with -XX:-UseCompressedClassPointers

For example, here is the incorrect metaspace statistics before the fix:
```
Event:jdk.MetaspaceSummary {
  startTime = 10:35:24.762
  gcId = 3
  when = ""Before GC""
  gcThreshold = 21.0 MB
  metaspace = {
    committed = 10.3 MB
    used = 10.2 MB
    reserved = 16.0 MB
  }
  dataSpace = {
    committed = 10.3 MB
    used = 10.2 MB
    reserved = 16.0 MB
  }
  classSpace = {
    committed = 10.3 MB
    used = 10.2 MB
    reserved = 16.0 MB
  }
}
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8251158,,,,,,JDK-8264983,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s3mb:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-24 02:31;roboduke;Changeset: 06d46d6c
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-03-24 09:30:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/06d46d6c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix AOT library loading on CPUs with 256-byte dcache line,JDK-8264006,5045157,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pli,pli,pli,2021-03-22 18:54,2021-09-30 03:20,2023-10-01 09:57,2021-03-28 18:10,17,,,,,,,,17,hotspot,,0,aot,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,,"Recently we tested OpenJDK on some CPUs with 256-byte dcache line. HotSpot AOT tests failed because the shared library compiled with the same VM options on the same machine cannot be loaded back to the VM.

Below command sequence shows a way to reproduce this issue.

$ getconf -a | grep LEVEL1_DCACHE_LINESIZE
LEVEL1_DCACHE_LINESIZE             256

$ jaotc --output a.so Hello.class

$ java -XX:+UnlockExperimentalVMOptions -XX:+UseAOT -XX:AOTLibrary=./a.so -XX:+PrintAOT Hello
Shared file ./a.so error: ContendedPaddingWidth has different value '256' from current '128'
      4    1     skipped ./a.so  aot library

",CPUs with 256-byte dcache line size,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s3lf:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-23 08:02;dcubed;Moving from hotspot/runtime -> hotspot/compiler.;;;","2021-03-28 18:10;roboduke;Changeset: 2fa6a3c4
Author:    Pengfei Li <pli@openjdk.org>
Date:      2021-03-29 01:09:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2fa6a3c4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Don't use TRAPS if no exceptions are thrown,JDK-8264004,5045154,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,coleenp,coleenp,2021-03-22 18:02,2021-03-29 11:45,2023-10-01 09:57,2021-03-24 05:16,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"Remove TRAPS declarations in functions that don't throw exceptions.  TRAPS was used because one of the constant pool functions called klass_at() when it really could call resolved_klass_at() which doesn't try to resolve the klass (since it's already resolved).
This removes a use of passing THREAD as the trailing argument and then not handling the exception.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s3kr:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-03-24 05:16;roboduke;Changeset: 5d7e93c8
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-03-24 12:15:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5d7e93c8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Delete outdated assumptions about ColorSpace initialization,JDK-8264002,5045150,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2021-03-22 17:08,2021-03-31 17:41,2023-10-01 09:57,2021-03-24 14:32,17,,,,,,,,17,client-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"Some codes have outdated assumptions about the initialization of ColorSpace class.
 - The ColorSpace.getInstance() will never throw an IllegalArgumentException for the builtin profiles
 - The ColorSpace.getInstance() will not trigger initialisation of the CMM classes",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s3jv:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-24 14:32;roboduke;Changeset: cfc9aa34
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-03-24 21:31:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cfc9aa34
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix build on 13u after JDK-8234779 backport,JDK-8263996,5045133,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,omikhaltcova,omikhaltcova,omikhaltcova,2021-03-22 11:39,2021-03-22 12:33,2023-10-01 09:57,2021-03-22 12:18,13,,,,,,,,13.0.7,hotspot,,0,jdk13u-critical-request,jdk13u-critical-yes,,,,,,,,,,,,,,,,,,,,,Removed restriction for copying objects from PlatformMonitor class due to the builds failure. This restriction will be added by backport of JDK-8228857.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8234779,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s3g3:",9223372036854775807,b04,,,,,,,,,,,,"2021-03-22 12:18;roboduke;Changeset: c37cdb32
Author:    Olga Mikhaltsova <omikhaltcova@openjdk.org>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2021-03-22 19:18:03 +0000
URL:       https://git.openjdk.java.net/jdk13u-dev/commit/c37cdb32
;;;","2021-03-22 12:33;roboduke;Changeset: c37cdb32
Author:    Olga Mikhaltsova <omikhaltcova@openjdk.org>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2021-03-22 19:18:03 +0000
URL:       https://git.openjdk.java.net/jdk13u/commit/c37cdb32
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect double-checked locking in Types.arraySuperType(),JDK-8263995,5045131,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-03-22 11:08,2023-02-06 08:07,2023-10-01 09:57,2021-03-23 10:48,11,13,15,16,17,8,,,17,tools,,0,redhat-interest,sonarcloud-found,,,,,,,,,,,,,,,,,,,,,"In Types.arraySuperType(), SonarCloud reports:
 Remove this dangerous instance of double-checked locking.

Indeed, the `arraySuperType` is not `volatile`, while `IntersectionClassType` has non-`final` fields (both in itself and in superclasses). This is an incorrect DCL.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8024317,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s3fn:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-03-23 10:48;roboduke;Changeset: c087f3ed
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-03-23 17:48:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c087f3ed
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalidate printServices when there are no printers,JDK-8263984,5045118,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aivanov,aivanov,aivanov,2021-03-22 09:12,2021-04-14 14:01,2023-10-01 09:57,2021-04-07 08:30,11,17,8,,,,,,17,client-libs,,0,cssn21_03_02,cssn21_04_01,noreg-hard,sustaining,,,,,,,,,,,,,,,,,,,"When getAllPrinterNames returns null in PrintServiceLookupProvider.refreshServices, the list of printServices is assigned a new empty array without invalidating old services which were in the array.

getAllPrinterNames returns null when an error occurred or when there are no printers in the system.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2s3cr:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-04-07 08:30;roboduke;Changeset: 9d650397
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2021-04-07 15:29:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9d650397
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Clarify why 0 argument is ignored in SecureRandom::setSeed,JDK-8263978,5045112,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2021-03-22 08:39,2021-03-29 11:44,2023-10-01 09:57,2021-03-23 15:24,,,,,,,,,17,security-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,"The comment there says ""as digest has not yet been initialized at that point"" but `digest` is not used anymore now. The current reason is that we call `super(0)` in all SecureRandom constructors and we don't want a SecureRandom object always seeded right at the beginning. For example, when `new SecureRandom()` is called.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s3bf:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-03-23 15:24;roboduke;Changeset: 0b2aa1b6
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-03-23 22:23:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0b2aa1b6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Update JDK 17 JavaDoc guide,JDK-8263975,5045109,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,schetan,schetan,schetan,2021-03-22 07:58,2021-08-30 07:56,2023-10-01 09:57,2021-08-30 07:56,17,,,,,,,,17,docs,,0,,,,,,,,,,,,,,,,,,,,,,,Need to update JavaDoc guide for JDK 17 release based on Engineering inputs.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s3ar:",9223372036854775807,,,,,,,,,,,,,"2021-08-30 07:56;schetan;JavaDoc guide is been updated for JDK 17 release.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: LoadVector/StoreVector type mismatch in MemNode::can_see_stored_value()  ,JDK-8263972,5045106,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,chagedorn,chagedorn,2021-03-22 06:59,2022-05-06 00:31,2023-10-01 09:57,2021-04-27 09:35,16,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,javafuzzer,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,"This is just a generic synopsis. Please change accordingly.

The attached fuzzer test produces a different result for C2 compared to C1/interpreter. It starts to fail after JDK-8223347 and thus seems unrelated to JDK-8261147.

To reproduce:
$ java -Xint Reduced.java > xint.log
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Reduced Reduced.java > c2.log

or

$ java -Xint Test.java > xint.log
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test Test.java > c2.log

$ diff xint.log c2.log (of Test.java)
4c4
< i21 i22 lArr = 1,-5,-3636660501855477640
---
> i21 i22 lArr = 1,-5,-8626774667594265033
14c14
< i21 i22 lArr = 1,-5,-3636660501855477640
---
> i21 i22 lArr = 1,-5,-8896789206094624590
24c24
< i21 i22 lArr = 1,-5,-3636660501855477640
---
> i21 i22 lArr = 1,-5,-8896789206094624590
34c34
< i21 i22 lArr = 1,-5,-3636660501855477640
---
> i21 i22 lArr = 1,-5,-8896789206094624590
44c44
< i21 i22 lArr = 1,-5,-3636660501855477640
---
> i21 i22 lArr = 1,-5,-8801448218637635204
54c54
< i21 i22 lArr = 1,-5,-3636660501855477640
---
> i21 i22 lArr = 1,-5,-8711634374960815033
64c64
< i21 i22 lArr = 1,-5,-3636660501855477640
---
> i21 i22 lArr = 1,-5,-8626774667594265033
74c74
< i21 i22 lArr = 1,-5,-3636660501855477640
---
> i21 i22 lArr = 1,-5,-8896789206094624590
84c84
< i21 i22 lArr = 1,-5,-3636660501855477640
---
> i21 i22 lArr = 1,-5,-8801448218637635204
94c94
< i21 i22 lArr = 1,-5,-3636660501855477640
---
> i21 i22 lArr = 1,-5,-8711634374960815033",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8223347,JDK-8266712,,,,,,,,,,,"2021-03-22 06:58;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/93760/FuzzerUtils.java","2021-03-22 06:58;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/93761/Reduced.java","2021-03-22 06:58;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/93762/Test.java",,,,,,,,,,,,,,,b21,16,,,,,,,,"0|i2s3a3:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-24 04:03;rraghavan;Hi [~vlivanov], request your help to check, assign this task. Thank you.;;;","2021-04-27 09:34;roboduke;Changeset: b2628d15
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2021-04-27 16:34:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b2628d15
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
C2 crashes with SIGFPE with -XX:+StressGCM and -XX:+StressIGVN,JDK-8263971,5045105,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,chagedorn,chagedorn,2021-03-22 06:48,2022-06-07 00:55,2023-10-01 09:57,2021-03-30 01:15,16,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,javafuzzer,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,"The attached fuzzer test starts to fail with SIGFPE after JDK-8256730:

To reproduce:
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test -XX:+StressGCM -XX:+StressIGVN -XX:StressSeed=886771365 Test.java
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Reduce -XX:+StressIGVN -XX:StressSeed=886771365 Reduce.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGFPE (0x8) at pc=0x00007fdbe49eddee, pid=21405, tid=21406
#
# JRE version: Java(TM) SE Runtime Environment (17.0+14) (fastdebug build 17-ea+14-LTS-1110)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+14-LTS-1110, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# J 3 c2 Test.mainTest([Ljava/lang/String;)V (497 bytes) @ 0x00007fdbe49eddee [0x00007fdbe49eda20+0x00000000000003ce]
............
Command Line: -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:StressSeed=886771365 Test
............
Current thread (0x00007fdbe00265c0):  JavaThread ""main"" [_thread_in_Java, id=21406, stack(0x00007fdbeac1a000,0x00007fdbead1b000)]

Stack: [0x00007fdbeac1a000,0x00007fdbead1b000],  sp=0x00007fdbead19900,  free space=1022k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
J 3 c2 Test.mainTest([Ljava/lang/String;)V (497 bytes) @ 0x00007fdbe49eddee [0x00007fdbe49eda20+0x00000000000003ce]
J 2 c2 Test.main([Ljava/lang/String;)V (45 bytes) @ 0x00007fdbe49ec798 [0x00007fdbe49ec5a0+0x00000000000001f8]
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe521d5]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x595
V  [libjvm.so+0xf83e85]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.1]+0x345
V  [libjvm.so+0xf87475]  jni_CallStaticVoidMethod+0x1c5
C  [libjli.so+0x47d4]  JavaMain+0xd34
C  [libjli.so+0x7db9]  ThreadJavaMain+0x9


siginfo: si_signo: 8 (SIGFPE), si_code: 1 (FPE_INTDIV), si_addr: 0x00007fdbe49eddee",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256730,JDK-8286305,,,,,,,,,,,"2021-03-22 06:47;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/93757/FuzzerUtils.java","2021-03-22 06:46;chagedorn;Reduce.java;https://bugs.openjdk.org/secure/attachment/93758/Reduce.java","2021-03-22 06:46;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/93759/Test.java","2021-03-22 06:47;chagedorn;hs_err_pid21405.log;https://bugs.openjdk.org/secure/attachment/93756/hs_err_pid21405.log",,,,,,,,,,,,,,b28,16,,,,,,,,"0|i2s39v:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-24 03:58;rraghavan;Hi [~roland], request your help to check this task. Thank you.;;;","2021-03-30 01:15;roboduke;Changeset: 8100a20e
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-03-30 07:40:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8100a20e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Manual test javax/swing/JTextField/JapaneseReadingAttributes/JapaneseReadingAttributes.java failed,JDK-8263970,5045103,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,mvs,mvs,2021-03-22 06:33,2023-06-27 07:49,2023-10-01 09:57,2021-04-14 06:12,11,16,17,7,8,,,,17,client-libs,,0,client-test-sprint-9,imt,imt-301,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,sn_91,sqebug,sqe-manual,test_sprint,,,,,,,,,,,,,"Test ""javax/swing/JTextField/JapaneseReadingAttributes/JapaneseReadingAttributes.java"" failed in Windows platform(this is a windows only manual test).

Steps to reproduce:
Run steps of testcase's instruction

Result:
Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Test Failed : Reading attribute from Pass 1 <ベシンゾウ> != Reading attribute from Pass 2 <アベシンゾウ>
Please see attached video and logs.
",,,,,,,,,,JDK-8304821,JDK-8310962,JDK-8304799,JDK-8305032,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-22 06:31;mvs;JapaneseReadingAttributes.jtr;https://bugs.openjdk.org/secure/attachment/93752/JapaneseReadingAttributes.jtr","2021-03-22 06:31;mvs;JapaneseReadingAttributes.mp4;https://bugs.openjdk.org/secure/attachment/93753/JapaneseReadingAttributes.mp4",,,,,,,,,,generic,,,,,,,,,windows,,,,,,"0|i2s39f:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-04-14 06:12;roboduke;Changeset: 75b039a4
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-04-14 13:11:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/75b039a4
;;;","2023-06-22 07:24;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle.
No risk, only a test change.
Clean backport. SAP nighlty testing passed;;;","2023-06-22 07:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1988
Date: 2023-06-22 14:24:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
CDS: java/lang/ModuleLayer.EMPTY_LAYER should be singleton,JDK-8263968,5045096,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,avoitylov,avoitylov,avoitylov,2021-03-22 05:54,2021-07-08 16:33,2023-10-01 09:57,2021-03-24 09:33,16,17,,,,,,,17,hotspot,,0,cds,CPU21_04-critical-approved,CPU21_04-critical-SQE-OK,jck,jdk16u-fix-request,jdk16u-fix-SQE-ok,jdk16u-fix-yes,oracle-triage-17,tck-red-16.0.1,,,,,,,,,,,,,,"with CDS and G1, JCK test api/java_lang/ModuleLayer/Boot.html fails in JDK 16:

Testcase ""parent"" failed with message: Expected same as : """", was given: """"
	at com.sun.tck.lib.Assert.fail(Assert.java:494)
	at com.sun.tck.lib.Assert.assertSame(Assert.java:439)
	at com.sun.tck.lib.Assert.assertSame(Assert.java:426)
	at javasoft.sqe.tests.api.java.lang.ModuleLayer.Boot.parent(Boot.java:108)
Testcase ""parent"" is based on the following statements: 
 - ""Its parent is the empty layer""
 -- from source: ""ModuleLayer.boot()""
parent: Failed. Expected same as : """", was given: """"

Bisecting has indicated this started failing since JDK-8253081 integration.

The root cause of the problem is that after unpacking the CDS archive there appear to be two instances of empty layer (another one comes from CDS archive). Because of that there is a mismatch between ModuleLayer.empty() (which returns java/lang/ModuleLayer.EMPTY_LAYER) and ModuleLayer.boot().parents().get(0) (which with CDS returns the CDS instance). The spec says [1] that boot() parent for java.base must return THE empty layer, with a link to empty() method.

One solution is to make  java/lang/ModuleLayer.EMPTY_LAYER a singleton similar to java/lang/module/Configuration.EMPTY_CONFIGURATION and initialize this field from CDS archive if CDS is on.

[1] https://download.java.net/java/early_access/jdk16/docs/api/java.base/java/lang/ModuleLayer.html#boot()",,,,,,,,,,JDK-8264312,JDK-8264276,JDK-8267019,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8253081,,,,,,,,,,,,"2021-03-22 05:57;avoitylov;bootLayers_v2.diff;https://bugs.openjdk.org/secure/attachment/93750/bootLayers_v2.diff",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s37v:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2021-03-22 05:57;avoitylov;tentative fix being tested attached.;;;","2021-03-22 05:58;avoitylov;ILW = conformance, high, do not use CDS => P2.;;;","2021-03-23 11:16;avoitylov;I'm waiting for a 24h timeout for the review process to integrate the fix. 

I suspect there should be sufficient interest from the community to expedite a critical backport to 16.0.1 and if so, if anyone besides myself can report any successful test results for such a backport. The patch from the review applies cleanly to 16u. That would allow to reduce the possible lead time before requesting the backport.;;;","2021-03-24 09:33;roboduke;Changeset: 133a63b4
Author:    Aleksei Voitylov <avoitylov@openjdk.org>
Committer: Claes Redestad <redestad@openjdk.org>
Date:      2021-03-24 16:32:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/133a63b4
;;;","2021-03-25 05:13;avoitylov;Fix request (16u)

I would like to backport this to jdk16u to avoid the described problems. Applies cleanly. Tested with JCK and jtreg.

Note I have not seen the 16u [1] wiki populated yet with timelines and process guidelines, but I'll assume for now that the backport process should be similar to other releases.

[1] https://wiki.openjdk.java.net/display/JDKUpdates/JDK+16u;;;","2021-03-26 06:58;alexsch;Is it possible to backport the fix to jdk 16.0.1?
I can't find the jdk16u schedule on JDK 16u wiki page [1] so it is not clear for me is 16.0.1 still open for backports?

If backports to 16.0.1 are possible, what is the right procedure to make a  backport?

[1] https://wiki.openjdk.java.net/display/JDKUpdates/JDK+16u;;;","2021-03-26 07:41;robm;Yep - working on a 16.0.1 backport now.;;;",,,,,,,,,,,,,,,,,,,,,
NPE when creating default file system when default file system provider is packaged as JAR file on class path,JDK-8263940,5045064,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,lancea,alanb,alanb,2021-03-22 01:32,2022-04-08 03:33,2023-10-01 09:57,2021-08-13 09:12,17,9,,,,,,,18,core-libs,,0,regression,,,,,,,,,,,,,,,,,,,,,,"If the system property java.nio.file.spi.DefaultFileSystemProvider is set to the name of a class in a JAR file on the class path then it leads to an NPE in the ZipFile code. This is a bootstrapping/initialization issue (and a regression since JDK 9) due to the ZipFile code needing to use the default file system provider. We may have to change ZipFile to use the built-in file system provider, at least for the class path case.


$ java -cp classes:provider.jar -Djava.nio.file.spi.DefaultFileSystemProvider=TestProvider org.test.Test

Exception in thread ""main"" java.lang.Error: java.lang.NullPointerException: Cannot invoke ""java.nio.file.FileSystem.getPath(String, String[])"" because the return value of ""java.nio.file.FileSystems.getDefault()"" is null
	at java.base/java.nio.file.FileSystems$DefaultFileSystemHolder.getDefaultProvider(FileSystems.java:133)
	at java.base/java.nio.file.FileSystems$DefaultFileSystemHolder$1.run(FileSystems.java:102)
	at java.base/java.nio.file.FileSystems$DefaultFileSystemHolder$1.run(FileSystems.java:100)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:312)
	at java.base/java.nio.file.FileSystems$DefaultFileSystemHolder.defaultFileSystem(FileSystems.java:100)
	at java.base/java.nio.file.FileSystems$DefaultFileSystemHolder.<clinit>(FileSystems.java:94)
	at java.base/java.nio.file.FileSystems.getDefault(FileSystems.java:182)
	at org.test.Test.main(Test.java:7)
Caused by: java.lang.NullPointerException: Cannot invoke ""java.nio.file.FileSystem.getPath(String, String[])"" because the return value of ""java.nio.file.FileSystems.getDefault()"" is null
	at java.base/java.io.File.toPath(File.java:2318)
	at java.base/java.util.zip.ZipFile$Source.get(ZipFile.java:1246)
	at java.base/java.util.zip.ZipFile$CleanableResource.<init>(ZipFile.java:707)
	at java.base/java.util.zip.ZipFile.<init>(ZipFile.java:241)
	at java.base/java.util.zip.ZipFile.<init>(ZipFile.java:172)
	at java.base/java.util.jar.JarFile.<init>(JarFile.java:349)
	at java.base/jdk.internal.loader.URLClassPath$JarLoader.getJarFile(URLClassPath.java:816)
	at java.base/jdk.internal.loader.URLClassPath$JarLoader$1.run(URLClassPath.java:761)
	at java.base/jdk.internal.loader.URLClassPath$JarLoader$1.run(URLClassPath.java:754)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:691)
	at java.base/jdk.internal.loader.URLClassPath$JarLoader.ensureOpen(URLClassPath.java:753)
	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:496)
	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:691)
	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:447)
	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:316)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:750)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:676)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:634)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:182)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:519)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:466)
	at java.base/java.nio.file.FileSystems$DefaultFileSystemHolder.getDefaultProvider(FileSystems.java:123)
	... 7 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271740,,,,,,,,,,,,"2021-03-26 14:24;lancea;testFileSystemProvider.zip;https://bugs.openjdk.org/secure/attachment/93859/testFileSystemProvider.zip","2021-03-22 12:42;lancea;testfsp.zip;https://bugs.openjdk.org/secure/attachment/93767/testfsp.zip",,,,,,,,,,,,,,,,,9,,,,,,,,"0|i2s30r:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2021-03-22 01:47;alanb;test/jdk/java/nio/file/spi/SetDefaultProvider.java tests overriding the default file system provider where the provider is exploded on the class path, deployed as an exploded module, as a modular JAR and where it patched combinations. The issue slipped through because the test doesn't exercise the case where the provider is in a JAR file on the class path.;;;","2021-03-22 12:43;lancea;The attached test case can be run after unzipping testfsp.zip via:

java -cp .:test.jar -Djava.nio.file.spi.DefaultFileSystemProvider=TestProvider;;;","2021-03-26 14:26;lancea;The testFileSystemProvider.zip includes a  test case which can be run via sh runnit.sh.;;;","2021-08-13 09:12;roboduke;Changeset: 717792c3
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2021-08-13 16:11:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/717792c3b728584413572e7aede83290779be2a2
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Add JAWT test files for mac,JDK-8263928,5045051,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2021-03-22 00:01,2021-06-09 12:43,2023-10-01 09:57,2021-03-26 04:30,,,,,,,,,17,client-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"JAWT has testcase for windows and linux but no testcase is provided for mac.
We need to have a JAWT based testcase for mac, in similar lines to windows and linux.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268481,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i2s2xv:",9223372036854775807,b16,,,,,,,,,,,,"2021-03-26 04:30;roboduke;Changeset: f3eed052
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-03-26 11:30:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f3eed052
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Backout of 8049202 in 8u,JDK-8263917,5045046,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysatowse,ysatowse,ysatowse,2021-03-21 19:59,2021-04-14 01:44,2023-10-01 09:57,2021-03-21 20:58,,,,,,,,,8u301,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,The backport doesn't include the correct changes.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263919,,,,,,JDK-8049202,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s2wr:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50807e59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/cds/appcds/MismatchedPathTriggerMemoryRelease.java fails when UseCompressedClassPointers is off,JDK-8263915,5045043,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-03-21 18:37,2021-03-29 11:43,2023-10-01 09:57,2021-03-23 00:52,17,,,,,,,,17,hotspot,,0,cds,noreg-self,tencent-interest,,,,,,,,,,,,,,,,,,,,"java.lang.RuntimeException: 'Released shared space\s(\(archive\s*\+\s*class\) | ?)0(x|X)[0-9a-fA-F]+$' missing from stdout/stderr

        at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:325)
        at MismatchedPathTriggerMemoryRelease.main(MismatchedPathTriggerMemoryRelease.java:66)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
        at java.base/java.lang.Thread.run(Thread.java:831)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8255917,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s2w3:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-23 00:52;roboduke;Changeset: 7b81f8e3
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-03-23 07:51:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7b81f8e3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS fails to find the default shared archive on x86_32,JDK-8263914,5045042,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-03-21 18:24,2021-03-29 11:43,2023-10-01 09:57,2021-03-22 18:19,17,,,,,,,,17,hotspot,,0,cds,tencent-interest,,,,,,,,,,,,,,,,,,,,,"Reproduce: java -Xshare:on -version on x86_32
```
An error has occurred while processing the shared archive file.
Specified shared archive not found (/home/jdk/build/linux-x86-server-fastdebug/images/jdk/lib/server/classes_nocoops.jsa).
Error occurred during initialization of VM
Unable to use shared archive.
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s2vv:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-22 18:19;roboduke;Changeset: b23228d1
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-03-23 01:18:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b23228d1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Build fails due to initialize_static_field_for_dump defined but not used after JDK-8263771,JDK-8263908,5045028,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-03-21 06:34,2021-03-24 19:02,2023-10-01 09:57,2021-03-21 16:07,17,,,,,,,,17,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,,"Reproduce:
 - Build without cds or g1gc; or on x86_32

Symptom
```
* For target hotspot_variant-server_libjvm_objs_javaClasses.o:
/home/jdk/src/hotspot/share/classfile/javaClasses.cpp:903:13: error: 'void initialize_static_field_for_dump(fieldDescriptor*, Handle)' defined but not used [-Werror=unused-function]
 static void initialize_static_field_for_dump(fieldDescriptor* fd, Handle mirror) {
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* For target hotspot_variant-server_libjvm_objs_javaClasses.o:
./src/hotspot/share/classfile/javaClasses.cpp:844:13: error: 'void initialize_static_string_field_for_dump(fieldDescriptor*, Handle)' defined but not used [-Werror=unused-function]
 static void initialize_static_string_field_for_dump(fieldDescriptor* fd, Handle mirror) {
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263771,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s2sr:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-21 16:07;roboduke;Changeset: 35cd9456
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-03-21 23:07:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/35cd9456
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Specification of CellRendererPane::paintComponent(..Rectangle) should clearly mention which method it delegates the call to,JDK-8263907,5045027,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,dbessono,dbessono,2021-03-21 06:14,2021-04-14 17:25,2023-10-01 09:57,2021-04-07 21:45,15,16,17,,,,,,17,client-libs,,0,conformance,sn_90,,,,,,,,,,,,,,,,,,,,,"Specification for method
https://docs.oracle.com/en/java/javase/15/docs/api/java.desktop/javax/swing/CellRendererPane.html#paintComponent(java.awt.Graphics,java.awt.Component,java.awt.Container,java.awt.Rectangle)
is the following

  ""Calls this.paintComponent() with the rectangles x,y,width,height fields.""

It is not perfectly clear which method the call is delegated to.

It should better be similar to 
https://docs.oracle.com/en/java/javase/15/docs/api/java.desktop/javax/swing/CellRendererPane.html#paintComponent(java.awt.Graphics,java.awt.Component,java.awt.Container,int,int,int,int)
that tells

  ""Calls this.paintComponent(g, c, p, x, y, w, h, false).""

So the proposed spec should simply declare:

  ""Calls this.paintComponent(g, c, p, x, y, w, h).""
",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264169,,,,,JDK-8263472,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s2sj:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-04-07 21:45;roboduke;Changeset: 016db40c
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-04-08 04:41:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/016db40c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/intrinsics/bmi/verifycode/BzhiTestI2L.java fails on x86_32,JDK-8263904,5045019,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-03-20 17:20,2021-09-30 03:18,2023-10-01 09:57,2021-03-22 16:14,17,,,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-self,oracle-triage-17,tencent-interest,,,,,,,,,,,,,,,,,,,"STDERR:
java.lang.AssertionError: public long compiler.intrinsics.bmi.TestBzhiI2L$BzhiI2LExpr.intToLongExpr(int) CPU instructions expected not found in nativeCode: 3B 41 04 0F 85 57 BE 62 F8 90 90 90 89 84 24 00 70 FF FF 55 83 EC 08 8B DA 83 E3 01 8B EA 83 E5 03 8B CB C1 FB 1F 8B FD C1 FF 1F 33 CD 33 DF 8B EA 83 E5 07 8B C2 83 E0 0F 8B FD C1 FF 1F 33 CD 33 DF 8B E8 8B F8 C1 FF 1F 33 CD 33 DF 8B EA 83 E5 1F 8B C2 83 E0 3F 8B FD C1 FF 1F 33 CD 33 DF 8B E8 8B F8 C1 FF 1F 33 CD 33 DF 8B EA 83 E5 7F 8B C2 81 E0 FF 00 00 00 8B FD C1 FF 1F 33 CD 33 DF 8B E8 8B F8 C1 FF 1F 33 CD 33 DF 8B EA 81 E5 FF 01 00 00 8B C2 81 E0 FF 03 00 00 8B FD C1 FF 1F 33 CD 33 DF 8B E8 8B F8 C1 FF 1F 33 CD 33 DF 8B EA 81 E5 FF 07 00 00 8B C2 81 E0 FF 0F 00 00 8B FD C1 FF 1F 33 CD 33 DF 8B E8 8B F8 C1 FF 1F 33 CD 33 DF 8B EA 81 E5 FF 1F 00 00 8B C2 81 E0 FF 3F 00 00 8B FD C1 FF 1F 33 CD 33 DF 8B E8 8B F8 C1 FF 1F 33 CD 33 DF 8B EA 81 E5 FF 7F 00 00 81 E2 FF FF 00 00 8B FD C1 FF 1F 33 CD 33 DF 8B EA 8B FA C1 FF 1F 33 CD 33 DF 8B C1 8B D3 83 C4 08 5D 50 52 51 E8 E6 00 92 08 59 5A 8B D8 58 3B A3 E4 00 00 00 0F 87 01 00 00 00 C3 51 52 B9 4F 72 02 EE 50 52 51 E8 C5 00 92 08 59 5A 8B D0 58 89 8A 90 02 00 00 5A 59 E9 83 D0 62 F8 F4 F4 F4 ---- Expected instrPattern: C4 62 A8 F5
        at compiler.intrinsics.bmi.verifycode.BmiIntrinsicBase.checkEmittedCode(BmiIntrinsicBase.java:116)
        at compiler.intrinsics.bmi.verifycode.BmiIntrinsicBase.compileAtLevelAndCheck(BmiIntrinsicBase.java:98)
        at compiler.intrinsics.bmi.verifycode.BmiIntrinsicBase.test(BmiIntrinsicBase.java:91)
        at compiler.intrinsics.bmi.verifycode.BmiIntrinsicBase.verifyTestCase(BmiIntrinsicBase.java:48)
        at compiler.intrinsics.bmi.verifycode.BzhiTestI2L.main(BzhiTestI2L.java:78)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:831)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261671,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,,"0|i2s2qr:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-22 16:14;roboduke;Changeset: a5e7a890
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-03-22 23:14:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a5e7a890
;;;","2021-03-22 23:51;roboduke;Changeset: 7b6efd3b
Author:    Marcus G K Williams <marcus.williams@intel.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-03-23 06:51:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7b6efd3b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
HttpClient throws NPE in AuthenticationFilter when parsing www-authenticate head,JDK-8263899,5044858,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,michaelm,webbuggrp,webbuggrp,2021-03-18 09:05,2022-03-30 03:29,2023-10-01 09:57,2021-05-17 19:18,11,17,,,,,,,17,core-libs,,0,additional-information-received,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When java.net.HttpClient receives the 401 response which contains an empty www-authenticate header, it breaks in an unrecoverable way (NPE is thrown). Instead, it should ignore such invalid header (treat it the same way as any unsupported authentication scheme) and let the client code handle it.

In theory, the 401 response should contain the www-authenticate header, and this header value should contain the suggested authentication method. However, we happened to be talking to a service which was buggy and suddenly returned the www-authenticate response header with empty value. This is not a valid header value, but we should be able to recover from it, and be able to parse response data in the client code. Currently the HttpClient just throws exception and we are not able to recover.
Also, we have not found any workaround, becasue it is an internal code.

The exception is thrown by the line 276 injdk.internal.net.http.AuthenticationFilter :
if (!scheme.equalsIgnoreCase(""Basic"")) {

In this case, the ""scheme"" is null, whicih cases NPE.

The java code is only able to handle ""Basic"" authentication type, all other values are ignored anyway, so empty value should also be ignored.

The fix is trivial, either flip the comparision order, to this:
if (!""Basic"".equalsIgnoreCase(scheme)) { return null; }

Or add null check:
if (scheme == null || !scheme.equalsIgnoreCase(""Basic"")) { return null; }


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Send the http request to an endpoint, using this code:
HttpClient.newHttpClient().send(request)
The endpoint should return the response with status 401 and with empty ""www-authenticate"" header (header with empty value). This will cause NPE inside AuthenticationFilter 

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The invalid response header should be ignored (i.e., treated that same way as any other unsupported authentication scheme)
ACTUAL -
The header causes the NPE, later wrapped inside IOException. Client is not able to recover nor access the response data.

CUSTOMER SUBMITTED WORKAROUND :
Did not found any workaround for this issue. 

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-20 00:30;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/93723/Main.java",,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s1r7:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-03-18 21:59;tongwan;Requested a simple reproducer from the submitter.;;;","2021-03-20 00:07;tongwan;Reproducer from the submitter:
import com.sun.net.httpserver.HttpServer;
import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

public class Main {

    public static void main(String[] args) throws IOException, URISyntaxException, InterruptedException {
        int port = 8000;
        
        //start server:
        HttpServer server = HttpServer.create(new InetSocketAddress(port), 0);
        server.createContext(""/"", exchange -> {
            String response = ""test body"";
            exchange.getResponseHeaders().add(""www-authenticate"", """"); //this empty header will make the HttpClient crash
            exchange.sendResponseHeaders(401, response.length());
            OutputStream os = exchange.getResponseBody();
            os.write(response.getBytes());
            os.close();
        });
        server.start();

        //run client:
        try {
            HttpClient httpClient = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest.newBuilder(new URI(""http://localhost:"" + port + ""/"")).GET().build();
            //this line will throw NPE (wrapped by IOException) when parsing empty www-authenticate response header in AuthenticationFilter:
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            System.out.println(""HttpClient correctly handled invalid response header and received response body: "" + response.body());
        } catch (IOException e) {
            System.out.println(""HttpClient crashed on invalid response header"");
            e.printStackTrace();
        }
    }
}
;;;","2021-03-20 00:36;tongwan;The observations on Windows 10:
JDK 11: Failed, NullPointerException thrown.
JDK 17ea+6: Failed.;;;","2021-03-24 05:00;roboduke;Changeset: e55aa41f
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2021-03-24 11:59:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e55aa41f
;;;","2021-03-26 01:55;tongwan;Requested the submitter to verify the fix with the latest version of JDK at https://jdk.java.net/17/;;;","2021-04-12 19:51;tongwan;Did not receive the response from the submitter.;;;","2021-05-17 19:18;tongwan;Verification from the submitter:
 I confirm the fix works fine with the latest build of JDK 17.;;;",,,,,,,,,,,,,,,,,,,,,
"(fs) Files.newOutputStream on the ""NUL"" special device throws FileSystemException: ""nul: Incorrect function"" (win)",JDK-8263898,5045005,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,jpai,jpai,2021-03-20 00:10,2021-04-05 16:14,2023-10-01 09:57,2021-03-30 11:19,11,16,8,,,,,,17,core-libs,,0,17ea,apache-ant-found,,,,,,,,,,,,,,,,,,,,,"
Consider the following trivial Java code:

import java.io.*;
import java.nio.file.*;

public class FileTest {
	public static void main(final String[] args) throws Exception {
		System.getProperties().list(System.out);
		final File f = new File(""nul"");
		try (final OutputStream os = Files.newOutputStream(f.toPath())) {
			os.write(0x02);
			System.out.println(""Files.newOutputStream(Path) - wrote a byte to "" + f);
		}
	}
}

Compiling and runnning this code on Windows OS throws the following exception:

Exception in thread ""main"" java.nio.file.FileSystemException: nul: Incorrect function
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:236)
	at java.base/java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:478)
	at java.base/java.nio.file.Files.newOutputStream(Files.java:224)
	at FileTest.main(FileTest.java:9)


The usage of Files.newOutputStream(f.toPath()) for a file which represents null device on Windows throws this exception.


Replacing  Files.newOutputStream(f.toPath()) with either of the following works fine and the output stream is opened and data is written out without errors:

new FileOutputStream(f)
Files.newOutputStream(f.toPath(), StandardOpenOption.WRITE)
Files.newOutputStream(f.toPath(), StandardOpenOption.APPEND)
Files.newOutputStream(f.toPath(), StandardOpenOption.CREATE, StandardOpenOption.WRITE)

The javadoc of Files.newOutputStream(Path) states[1] that:

""If no options are present then this method works as if the CREATE, TRUNCATE_EXISTING, and WRITE options are present"".

So it looks like the (default usage) of StandardOpenOption.TRUNCATE_EXISTING is what triggers this exception. In fact, replacing Files.newOutputStream(f.toPath()) with Files.newOutputStream(f.toPath(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE) does indeed reproduce the same exception.

This is reproducible with Java 8, 11 and even latest released Java 16. I was able to reproduce this on Windows Server 2016, but others have reproduced this on even Windows 10 (Professional 20H2).

Please note that this only happens on Windows OS against the null device. Using ""/dev/null"" on Linux in place of ""nul"" in the above program doesn't cause any issues and the program successfully opens the output stream and writes out the data.

[1] https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#newOutputStream(java.nio.file.Path,java.nio.file.OpenOption...)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-20 00:10;jpai;FileTest.java;https://bugs.openjdk.org/secure/attachment/93722/FileTest.java",,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2s2nn:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-03-20 02:50;alanb;TRUNCATE_EXISTING requires truncating an existing file, this is problematic for some special devices that don't support setting the size to 0. Workarounds for these off-piste scenarios are messy on Windows, in this case it probably means we have to check the file size when SetEndOfFile fails and if it's 0 then ignore the error.;;;","2021-03-30 11:19;roboduke;Changeset: 353807c5
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-03-30 18:18:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/353807c5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"compiler/c2/aarch64/TestVolatilesSerial.java failed with ""java.lang.RuntimeException: Wrong method""",JDK-8263897,5044999,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kvn,dcubed,dcubed,2021-03-19 18:42,2021-10-06 00:36,2023-10-01 09:57,2021-03-22 10:03,17,,,,,,,,17,hotspot,,0,11u-tier1,hs-comp-triaged,intermittent,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,testbug,tier2,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

compiler/c2/aarch64/TestVolatilesSerial.java

Here's a snippet from the log file:

	at compiler.c2.aarch64.TestVolatiles.checkCompile(TestVolatiles.java:196)
	at compiler.c2.aarch64.TestVolatiles.checkstore(TestVolatiles.java:255)
	at compiler.c2.aarch64.TestVolatiles.checkoutput(TestVolatiles.java:565)
	at compiler.c2.aarch64.TestVolatiles.runtest(TestVolatiles.java:144)
	at compiler.c2.aarch64.TestVolatiles.runtest(TestVolatiles.java:123)
	at compiler.c2.aarch64.TestVolatilesSerial.main(TestVolatilesSerial.java:76)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Wrong method - name: 'testObj'! -- expecting testInt CompileCommand: compileonly compiler/c2/aarch64/TestVolatileStore.test* bool compileonly = true ============================= C2-compiled nmethod ============================== ----------------------- MetaData before Compile_id = 13 ------------------------ {method} - this oop: 0x0000fffca8101560 - method holder: 'compiler/c2/aarch64/TestVolatileStore' - constants: 0x0000fffca8101040 constant pool [51] {0x0000fffca8101040} for 'compiler/c2/aarch64/TestVolatileStore' cache=0x0000fffca81015c8 - access: 0x81000001 public - name: 'testObj' - signature: '(Ljava/lang/Integer;)V' - max stack: 3 - max locals: 2 - size of params: 2 - method size: 13 - vtable index: 6 - i2i entry: 0x0000fffca9798f00 - adapters: AHE@0x0000fffcb4223410: 0xbb000000 i2c: 0x0000fffca97b9fc0 c2i: 0x0000fffca97ba00c c2iUV: 0x0000fffca97b9fd4 c2iNCI: 0x0000fffca97ba048 - compiled entry 0x0000fffca97ba00c - code size: 6 - code start: 0x0000fffca8101550 - code end (excl): 0x0000fffca8101556 - checked ex length: 0 - linenumber start: 0x0000fffca8101556 - localvar length: 0 ------------------------ OptoAssembly for Compile_id = 13 ----------------------- # # void ( compiler/c2/aarch64/TestVolatileStore:NotNull *, java/lang/Integer:exact * ) # #r020 c_rarg1:c_rarg1 : parm 0: compiler/c2/aarch64/TestVolatileStore:NotNull * #r022 c_rarg2:c_rarg2 : parm 1: java/lang/Integer:exact * # -- Old sp -- Framesize: 32 -- #r351 sp+28: in_preserve #r350 sp+24: return address #r349 sp+20: in_preserve #r348 sp+16: saved fp register #r347 sp+12: pad2, stack alignment #r346 sp+ 8: pad2, stack alignment #r345 sp+ 4: Fixed slot 1 #r344 sp+ 0: Fixed slot 0 # 000 N29: # out( B1 ) <- BLOCK HEAD IS JUNK Freq: 1 000 # MachUEPNode ldrw rscratch1, j_rarg0 + oopDesc::klass_offset_in_bytes()] # compressed klass cmp r0, rscratch1 # Inline cache check bne, SharedRuntime::_ic_miss_stub nop # 2 bytes pad for loops and calls 020 B1: # out( N29 ) <- BLOCK HEAD IS JUNK Freq: 1 020 # stack bang size=32 sub sp, sp, #32 stp rfp, lr, [sp, #16] 050 membar_release (elided) 050 + encode_heap_oop R12, R2 054 add R10, R1, #16 # ptr 058 stlrw R12, [R10] # compressed ptr ! Field: volatile compiler/c2/aarch64/TestVolatileStore.f_obj 05c + lsr R10, p2x(R1), (#9 & 0x3f) 060 + adr R11, 0x0000fffcb5780000 # Byte Map Base 068 + strb rscractch2, R11, R10 # byte 06c + membar_volatile (elided) 06c + # pop frame 32 ldp lr, rfp, [sp,#16] add sp, sp, #32 # test polling word ldr rscratch1, [rthread],#288 cmp sp, rscratch1 bhi #slow_path 080 + ret // return register -------------------------------------------------------------------------------- ============================= C2-compiled nmethod ============================== ----------------------- MetaData before Compile_id = 12 ------------------------ {method} - this oop: 0x0000fffca81014b8 - method holder: 'compiler/c2/aarch64/TestVolatileStore' - constants: 0x0000fffca8101040 constant pool [51] {0x0000fffca8101040} for 'compiler/c2/aarch64/TestVolatileStore' cache=0x0000fffca81015c8 - access: 0x81000001 public - name: 'testInt' - signature: '(I)V' - max stack: 3 - max locals: 2 - size of params: 2 - method size: 13 - vtable index: 5 - i2i entry: 0x0000fffca9798f00 - adapters: AHE@0x0000fffcb4223578: 0xba000000 i2c: 0x0000fffca97b90c0 c2i: 0x0000fffca97b910c c2iUV: 0x0000fffca97b90d4 c2iNCI: 0x0000fffca97b9148 - compiled entry 0x0000fffca97b910c - code size: 6 - code start: 0x0000fffca81014a8 - code end (excl): 0x0000fffca81014ae - checked ex length: 0 - linenumber start: 0x0000fffca81014ae - localvar length: 0 ------------------------ OptoAssembly for Compile_id = 12 ----------------------- # # void ( compiler/c2/aarch64/TestVolatileStore:NotNull *, int ) # #r020 c_rarg1:c_rarg1 : parm 0: compiler/c2/aarch64/TestVolatileStore:NotNull * #r022 c_rarg2 : parm 1: int # -- Old sp -- Framesize: 32 -- #r351 sp+28: in_preserve #r350 sp+24: return address #r349 sp+20: in_preserve #r348 sp+16: saved fp register #r347 sp+12: pad2, stack alignment #r346 sp+ 8: pad2, stack alignment #r345 sp+ 4: Fixed slot 1 #r344 sp+ 0: Fixed slot 0 # 000 N24: # out( B1 ) <- BLOCK HEAD IS JUNK Freq: 1 000 # MachUEPNode ldrw rscratch1, j_rarg0 + oopDesc::klass_offset_in_bytes()] # compressed klass cmp r0, rscratch1 # Inline cache check bne, SharedRuntime::_ic_miss_stub nop # 2 bytes pad for loops and calls 020 B1: # out( N24 ) <- BLOCK HEAD IS JUNK Freq: 1 020 # stack bang size=32 sub sp, sp, #32 stp rfp, lr, [sp, #16] 050 membar_release (elided) 050 + add R10, R1, #12 # ptr 054 stlrw R2, [R10] # int ! Field: volatile compiler/c2/aarch64/TestVolatileStore.f_int 058 + membar_volatile (elided) 058 + # pop frame 32 ldp lr, rfp, [sp,#16] add sp, sp, #32 # test polling word ldr rscratch1, [rthread],#288 cmp sp, rscratch1 bhi #slow_path 06c + ret // return register --------------------------------------------------------------------------------",,,,,,,,,,JDK-8273061,JDK-8274819,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i2s2mb:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-20 09:47;kvn;It is test bug. The test assumes that testInt() method's compilation information will be first in output.
But these tests did not run with -Xbatch or -XX:CICompilerCount=1 flag. They only use  `-XX:-TieredCompilation` which does not guarantee which method is compiled first.
In failing case I see:

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 13 ------------------------
{method}
 - this oop:          0x0000fffca8101560
 - method holder:     'compiler/c2/aarch64/TestVolatileStore'
 - constants:         0x0000fffca8101040 constant pool [51] {0x0000fffca8101040} for 'compiler/c2/aarch64/TestVolatileStore' cache=0x0000fffca81015c8
 - access:            0x81000001  public 
 - name:              'testObj'


============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 12 ------------------------
{method}
 - this oop:          0x0000fffca81014b8
 - method holder:     'compiler/c2/aarch64/TestVolatileStore'
 - constants:         0x0000fffca8101040 constant pool [51] {0x0000fffca8101040} for 'compiler/c2/aarch64/TestVolatileStore' cache=0x0000fffca81015c8
 - access:            0x81000001  public 
 - name:              'testInt'

testInt() was first to be put on compile queue ( Compile_id = 12) but it was compiled second after testObj() (Compile_id = 13).

The fix is simple - use -Xbatch (or the same -XX:-BackgroundCompilation) flag to make sure all test methods compiled in expected order.

;;;","2021-03-22 10:03;roboduke;Changeset: f84b52b8
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-03-22 17:03:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f84b52b8
;;;","2021-10-05 02:52;goetz;Fix request [11u]

I backport this for parity with 11.0.14-oracle.
No risk, only a test change.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Test nsk/jvmti/GetThreadGroupChildren/getthrdgrpchld001/getthrdgrpchld001.cpp uses incorrect indices,JDK-8263895,5044995,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2021-03-19 15:16,2021-03-29 11:43,2023-10-01 09:57,2021-03-22 10:57,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,The  'i' uses instead 'j'  getthrdgrpchld001.cpp.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s2lf:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-03-22 10:57;roboduke;Changeset: f62b1008
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2021-03-22 17:56:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f62b1008
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Convert defaultPrinter and printers fields to local variables,JDK-8263894,5044982,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2021-03-19 12:28,2021-03-29 11:42,2023-10-01 09:57,2021-03-22 08:55,11,17,8,,,,,,17,client-libs,,0,cssn21_03_02,noreg-cleanup,sustaining,,,,,,,,,,,,,,,,,,,,PrintServiceLookupProvider has defaultPrinter and printers fields but they are used only in getDefaultPrintService() and refreshServices() correspondingly. Thus these two fields can be converted to local variables in the corresponding methods.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2s2ij:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-22 08:55;roboduke;Changeset: 840ab7bf
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2021-03-22 15:54:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/840ab7bf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Changes for 8076985 missed the fix.,JDK-8263891,5044979,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kvn,kvn,kvn,2021-03-19 11:04,2021-09-30 01:42,2023-10-01 09:57,2021-03-22 09:17,16,17,,,,,,,17,hotspot,,0,c2,c2-cg,hs-comp-triaged,oracle-triage-11,oracle-triage-17,performance,,,,,,,,,,,,,,,,,"The fix for JDK-8076985 was supposed to be this:

https://cr.openjdk.java.net/~kvn/8076985/webrev.00/src/hotspot/cpu/x86/x86_64.ad.udiff.html

But the final push had only Comment change:

https://hg.openjdk.java.net/jdk/jdk/rev/4d1c4400c75d
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8076985,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s2hv:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-22 09:17;roboduke;Changeset: f08bf4b9
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-03-22 16:16:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f08bf4b9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Broken links to Unicode.org,JDK-8263890,5044977,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2021-03-19 10:13,2021-03-24 19:02,2023-10-01 09:57,2021-03-19 14:49,,,,,,,,,17,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,"There are some broken hyperlinks to Unicode.org in java.nio.charset.Charset class description, and several other classes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s2hf:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3962510e,,,,,,,,,"2021-03-19 14:49;roboduke;Changeset: 96e5c3f1
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-03-19 21:48:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/96e5c3f1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Re-create default icons,JDK-8263887,5044974,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,herrick,dcubed,dcubed,2021-03-19 09:45,2021-08-09 07:57,2023-10-01 09:57,2021-03-24 09:34,17,,,,,,,,17,tools,,0,sn_89,tier2,,,,,,,,,,,,,,,,,,,,,"The following tests are failing in Tier2 after JDK-8261826 was integrated:

tools/jpackage/share/MultiLauncherTwoPhaseTest.java
tools/jpackage/share/IconTest.java
tools/jpackage/share/AddLauncherTest.java#id1

Looks like we're going to end up with 3 failures per platform so 12 failures in Tier2.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263889,JDK-8261826,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s2gr:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,Verified,,"2021-03-19 10:35;dcubed;[~herrick] - I renamed this to a [REDO] bug so you have a vehicle to use to
[REDO] your changes for:

    JDK-8261826 re-create default icons;;;","2021-03-24 09:34;roboduke;Changeset: 70d34017
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-03-24 16:34:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/70d34017
;;;","2021-08-09 07:57;herrick;tests no longer fail - verified;;;",,,,,,,,,,,,,,,,,,,,,,,,,
On sem_destroy() failing we should assert,JDK-8263871,5044951,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2021-03-19 07:01,2022-10-11 04:00,2023-10-01 09:57,2021-03-19 22:52,11,16,17,,,,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,,,,"We use anonymous Posix semaphores for some synchronization in hotspot. 

sem_destroy() can fail on some platforms with EBUSY if the semaphore has still threads waiting on it. The glibc does not care and will happily report success, but other Unices care (eg BSD, AIX) and refuse to close the semaphore, leaving the sem_t structure untouched.

It then happened for us that a new semaphore was created at the exact location of the old, still unclosed semaphore, and the unchanged sem_t structure was fed to sem_init(), which would fail with the same EBUSY error and trigger a guarantee.

One simple thing we should do is to assert success after closing a semaphore, as we do on all other semaphore operations. Granted, we won't see anything on Linux with glibc, but maybe shake loose errors on other platforms.

",,,,,,,,,,JDK-8295129,JDK-8292727,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s2bn:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-19 22:51;roboduke;Changeset: 5b8233ba
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-03-20 05:51:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5b8233ba
;;;","2022-10-10 05:00;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
Low risk, simple fix.
Clean backport.
SAP nighlty testing passed.;;;","2022-10-10 05:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1429
Date: 2022-10-10 12:06:06 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Bad JNI lookup getFocusOwner in accessibility code on macOS,JDK-8263846,5044908,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kizune,kizune,kizune,2021-03-18 22:01,2022-01-03 09:20,2023-10-01 09:57,2021-03-20 10:59,15,16,17,,,,,,17,client-libs,,0,11-bp,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jnf,noreg-hard,sn_89,,,,,,,,,,,,Sometimes correctly working Swing application gets error Bad JNI lookup getFocusOwner in the output and some a11y functionality does not work. The reason is that in the JavaComponentAccessibility in function accessibilityFocusedUIElement before using sjc_CAccessibility instance we do not ensure that it exists and initialized. Sometimes it is not. ,,,,,,,,,,JDK-8264902,JDK-8265645,JDK-8265644,JDK-8267498,JDK-8275500,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,os_x,,,,,,"0|i2s223:",9223372036854775807,b15,,,,,,,,,,,,"2021-03-18 22:01;kizune;Need to initialize sjc_CAccessibility before using it.;;;","2021-03-20 10:59;roboduke;Changeset: 118a49fc
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2021-03-20 17:58:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/118a49fc
;;;","2021-04-20 11:30;omikhaltcova;Fix request (13u). 

I'd like to backport this fix to jdk13u for parity with jdk11u. 
It's reasonable to add the reference check before using it.
;;;","2021-04-20 11:54;omikhaltcova;Fix request (15u). 

I'd like to backport this fix to jdk15u for parity with jdk11u. 
It's reasonable to add the reference check before using it. ;;;","2021-05-18 05:40;vkempik;Fix request (11u)
This is the part bugfixes for removing JNF dependency from jdk11u. Applies cleanly.
Also needed for parity with oracle.
;;;",,,,,,,,,,,,,,,,,,,,,,,
Stop disabling warnings for sunFont.c with gcc,JDK-8263833,5044877,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2021-03-18 13:50,2021-03-24 19:01,2023-10-01 09:57,2021-03-18 14:52,,,,,,,,,17,client-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"In Awt2dLibraries.gmk we have
ifeq ($(TOOLCHAIN_TYPE), gcc)
  # Turn off all warnings for sunFont.c. This is needed because the specific warning
  # about discarding 'const' qualifier cannot be turned off individually.
  BUILD_LIBFONTMANAGER_sunFont.c_CFLAGS := -w
endif

It appears this was done over 5 years ago in JDK 9 days

https://mail.openjdk.java.net/pipermail/build-dev/2016-February/016535.html
https://bugs.openjdk.java.net/browse/JDK-8148629

The logic disables it for GCC but the bug report only has a log of a warning for this with the Solaris compiler and the bug report says it is about Solaris

However the linked bug https://bugs.openjdk.java.net/browse/JDK-8079977
shows the error and the claim it can't be disabled :
We get rid of all warnings but one, which cannot be silenced: 
/localhome/hg/jdk9-dev-ALT/jdk/src/java.desktop/share/native/libfontmanager/sunFont.c: In function 'freeLayoutTableCache': 
/localhome/hg/jdk9-dev-ALT/jdk/src/java.desktop/share/native/libfontmanager/sunFont.c:361:37: error: passing argument 1 of 'free' discards 'const' qualifier from pointer target type [-Werror] 
       if(ltc->entries[i].ptr) free (ltc->entries[i].ptr);


However the code that causes this was removed well over a year ago :
https://bugs.openjdk.java.net/browse/JDK-8220231
http://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-November/002116.html

So I think we can safely dispense with disabling warnings on this file - and it does indeed build fine
with whatever gcc we use today.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s1v7:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-18 14:52;roboduke;Changeset: ed1e25d5
Author:    Phil Race <prr@openjdk.org>
Date:      2021-03-18 21:52:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ed1e25d5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Fixing parallel thread iteration in final mark task,JDK-8263832,5044872,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2021-03-18 11:26,2021-03-24 19:01,2023-10-01 09:57,2021-03-18 17:21,16,17,,,,,,,17,hotspot,,0,gc-shenandoah,redhat-interest,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264052,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s1ub:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-03-18 17:20;roboduke;Changeset: d185655c
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-03-19 00:20:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d185655c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Suspend ""missing"" javadoc doclint checks for smartcardio",JDK-8263827,5044865,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,wetmore,wetmore,wetmore,2021-03-18 10:26,2021-03-24 19:01,2023-10-01 09:57,2021-03-18 15:31,,,,,,,,,17,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"Follow on to JDK-8252833, which is a subtask of JDK-8251202.

Disable the remaining doclint warnings (i.e. ""missing"") for the java.smartcardio packages.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252833,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s1sr:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@21bb4914,,,,,,,,,"2021-03-18 15:31;roboduke;Changeset: 6aa28b3b
Author:    Bradford Wetmore <wetmore@openjdk.org>
Date:      2021-03-18 22:31:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6aa28b3b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove unused and commented out member from NTLMException,JDK-8263825,5044863,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,redestad,redestad,redestad,2021-03-18 10:15,2021-03-24 19:02,2023-10-01 09:57,2021-03-19 14:07,,,,,,,,,17,security-libs,,0,cleanup,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,"Remove commented out constant DOMAIN_UNMATCH, which overlaps with USER_UNKNOWN",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s1sb:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5c1d831a,,,,,,,,,"2021-03-19 14:07;roboduke;Changeset: 6fa6557d
Author:    Alex Blewitt <alex.blewitt@gmail.com>
Committer: Claes Redestad <redestad@openjdk.org>
Date:      2021-03-19 21:07:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6fa6557d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Release JNI local references in get/set-InetXXAddress-member helper functions of net_util.c,JDK-8263818,5044853,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chegar,chegar,chegar,2021-03-18 07:21,2021-04-12 06:40,2023-10-01 09:57,2021-03-19 03:46,17,,,,,,,,17,core-libs,,0,noreg-hard,,,,,,,,,,,,,,,,,,,,,,"As per the Java Native Interface Specification: ""All Java objects returned by JNI functions are local references."" [1]. 

The get/set-InetXXAddress-member helper functions in net_util.c retrieve a local reference to the internal `holder` before operating on the InetAddress object. These functions are used in many places by the native code, and should release any local references before returning.

[1] https://docs.oracle.com/en/java/javase/16/docs/specs/jni/design.html#global-and-local-references",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261719,,,,,,JDK-8187450,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s1q3:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-03-18 08:10;alanb;It's usually not necessary to explicitly delete local refs, at least not in simple JNI functions. There are cases where local refs are created in a loop where it make be necessary to explicitly delete to avoid the local refs table getting too large.  Is there a specific issue/bug here?;;;","2021-03-18 08:18;chegar;It has been observed that there are > 130 local references being created for a ""standard"" network configuration on macOS. A separate issue is tackling some of these, specific to the native network interface code, but that only partially addresses the issue - reduces the number of local refs to approx 60-70 on the same system.

While there is no ""hard"" failure resulting from the excessive usage of local refs, it would be best to just avoid unnecessarily expanding the table in the first place. ;;;","2021-03-19 03:46;roboduke;Changeset: 4d51a82b
Author:    Chris Hegarty <chegar@openjdk.org>
Date:      2021-03-19 10:46:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4d51a82b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
java.util.MissingResourceException if add cert with GOST key in cacerts,JDK-8263817,5044810,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coffeys,webbuggrp,webbuggrp,2021-03-18 01:05,2021-04-14 01:29,2023-10-01 09:57,2021-03-26 09:57,7u281,8u271,,,,,,,7u311,security-libs,,0,17-na,additional-information-received,dcsaw,noreg-trivial,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Operating System: KDE neon 5.21(Ubuntu 20.04)
KDE Plasma Version: 5.21.2
KDE Frameworks Version: 5.80.0
Qt Version: 5.15.2
Kernel Version: 5.4.0-67-generic
OS Type: 64-bit
Graphics Platform: X11

failed on:
java version ""1.8.0_281""
Java(TM) SE Runtime Environment (build 1.8.0_281-b09)
Java HotSpot(TM) 64-Bit Server VM (build 25.281-b09, mixed mode)

success on:
java version ""1.8.0_192""
Java(TM) SE Runtime Environment (build 1.8.0_192-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.192-b12, mixed mode)

A DESCRIPTION OF THE PROBLEM :
Try add trust cert(GOST key, keyalg: 1.2.643.7.1.1.3.2) in cacerts, but got error. If add TLS cert all ok. 

REGRESSION : Last worked in version 8

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
keytool -import -trustcacerts -alias gostcryptopro -keystore /etc/ssl/certs/java/cacerts -file gostcryptopro.crt

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
cert added to cacerts
ACTUAL -
keytool error: java.util.MissingResourceException: Can't find resource for bundle sun.security.tools.keytool.Resources, key unknown.size.1

---------- BEGIN SOURCE ----------
source gostcryptopro.crt:

-----BEGIN CERTIFICATE-----
MIIIqzCCCFigAwIBAgIQR0KOAIur3r1PmMlzl4Lf4jAKBggqhQMHAQEDAjCCASMx
HzAdBgkqhkiG9w0BCQEWEHFjYUBjcnlwdG9wcm8ucnUxGDAWBgUqhQNkARINMTAz
NzcwMDA4NTQ0NDEaMBgGCCqFAwOBAwEBEgwwMDc3MTcxMDc5OTExCzAJBgNVBAYT
AlJVMRgwFgYDVQQIDA83NyDQnNC+0YHQutCy0LAxGTAXBgNVBAcMENCzLiDQnNC+
0YHQutCy0LAxOjA4BgNVBAkMMdGD0LsuINCY0LHRgNCw0LPQuNC80L7QstCwLCDQ
tC4gMzEsINC+0YTQuNGBIDMw0JExJTAjBgNVBAoMHNCe0J7QniAi0JrQoNCY0J/Q
otCeLdCf0KDQniIxJTAjBgNVBAMMHNCe0J7QniAi0JrQoNCY0J/QotCeLdCf0KDQ
niIwHhcNMjAwMzI3MDgyNzU3WhcNMjEwMzI3MDgzNzU3WjCCARcxGDAWBgUqhQNk
ARINMTAzNzcwMDA4NTQ0NDEaMBgGCCqFAwOBAwEBEgwwMDc3MTcxMDc5OTExKjAo
BgNVBAkMIdCh0YPRidC10LLRgdC60LjQuSDQktCw0LssINC0LiAxODEjMCEGCSqG
SIb3DQEJARYUc3VwcG9ydEBjcnlwdG9wcm8ucnUxCzAJBgNVBAYTAlJVMRwwGgYD
VQQIDBM3NyDQsy4g0JzQvtGB0LrQstCwMRUwEwYDVQQHDAzQnNC+0YHQutCy0LAx
JTAjBgNVBAoMHNCe0J7QniAi0JrQoNCY0J/QotCeLdCf0KDQniIxJTAjBgNVBAMM
HNCe0J7QniAi0JrQoNCY0J/QotCeLdCf0KDQniIwZjAfBggqhQMHAQEBATATBgcq
hQMCAiQABggqhQMHAQECAgNDAARAPARWCPkJACV6ElbZaDF/W87c0fvkA0JZLnng
9QUToOz0Ei8YaaQKEx+wEpXV5CnxZkMewaC8K666p9VENWUwO6OCBWcwggVjMA4G
A1UdDwEB/wQEAwID+DAdBgNVHQ4EFgQUb3CqwSZcU/hn22Y22ae616hyCC8wNQYJ
KwYBBAGCNxUHBCgwJgYeKoUDAgIyAQmC45hdguivR4XNiRuG3dhDgccFgs04AgEB
AgEAMBMGA1UdJQQMMAoGCCsGAQUFBwMBMBsGCSsGAQQBgjcVCgQOMAwwCgYIKwYB
BQUHAwEwgfQGCCsGAQUFBwEBBIHnMIHkMDMGCCsGAQUFBzABhidodHRwOi8vcXMu
Y3J5cHRvcHJvLnJ1L29jc3BrYzMvb2NzcC5zcmYwVwYIKwYBBQUHMAKGS2h0dHA6
Ly9jZHAuY3J5cHRvcHJvLnJ1L3JhL2FpYS9hMzBiOWFhMDJiZDYwZTUwYTJiM2E4
MDZjOGQxNWNlMTk1MDM0ZGIzLmNydDBUBggrBgEFBQcwAoZIaHR0cDovL3EyMC5j
cnlwdG9wcm8ucnUvYWlhL2EzMGI5YWEwMmJkNjBlNTBhMmIzYTgwNmM4ZDE1Y2Ux
OTUwMzRkYjMuY3J0MB0GA1UdIAQWMBQwCAYGKoUDZHEBMAgGBiqFA2RxAjAnBgNV
HREEIDAegg4qLmNyeXB0b3Byby5ydYIMY3J5cHRvcHJvLnJ1MCsGA1UdEAQkMCKA
DzIwMjAwMzI3MDgyNzU3WoEPMjAyMTAzMjcwODI3NTdaMIIBGAYFKoUDZHAEggEN
MIIBCQwy0J/QkNCa0JwgItCa0YDQuNC/0YLQvtCf0YDQviBIU00iINCy0LXRgNGB
0LjRjyAyLjAMMdCf0JDQmiAi0JrRgNC40L/RgtC+0J/RgNC+INCj0KYiINCy0LXR
gNGB0LjQuCAyLjAMT9Ch0LXRgNGC0LjRhNC40LrQsNGCINGB0L7QvtGC0LLQtdGC
0YHRgtCy0LjRjyDihJYg0KHQpC8xMjQtMzQ3NSDQvtGCIDEwLjA4LjIwMTgMT9Ch
0LXRgNGC0LjRhNC40LrQsNGCINGB0L7QvtGC0LLQtdGC0YHRgtCy0LjRjyDihJYg
0KHQpC8xMjgtMzU5MyDQvtGCIDE3LjEwLjIwMTgwLAYFKoUDZG8EIwwh0KHQmtCX
0JggItCa0YDQuNC/0YLQvtCf0YDQviBDU1AiMIGuBgNVHR8EgaYwgaMwUaBPoE2G
S2h0dHA6Ly9jZHAuY3J5cHRvcHJvLnJ1L3JhL2NkcC9hMzBiOWFhMDJiZDYwZTUw
YTJiM2E4MDZjOGQxNWNlMTk1MDM0ZGIzLmNybDBOoEygSoZIaHR0cDovL3EyMC5j
cnlwdG9wcm8ucnUvY2RwL2EzMGI5YWEwMmJkNjBlNTBhMmIzYTgwNmM4ZDE1Y2Ux
OTUwMzRkYjMuY3JsMIIBYAYDVR0jBIIBVzCCAVOAFKMLmqAr1g5QorOoBsjRXOGV
A02zoYIBLKSCASgwggEkMR4wHAYJKoZIhvcNAQkBFg9kaXRAbWluc3Z5YXoucnUx
CzAJBgNVBAYTAlJVMRgwFgYDVQQIDA83NyDQnNC+0YHQutCy0LAxGTAXBgNVBAcM
ENCzLiDQnNC+0YHQutCy0LAxLjAsBgNVBAkMJdGD0LvQuNGG0LAg0KLQstC10YDR
gdC60LDRjywg0LTQvtC8IDcxLDAqBgNVBAoMI9Cc0LjQvdC60L7QvNGB0LLRj9C3
0Ywg0KDQvtGB0YHQuNC4MRgwFgYFKoUDZAESDTEwNDc3MDIwMjY3MDExGjAYBggq
hQMDgQMBARIMMDA3NzEwNDc0Mzc1MSwwKgYDVQQDDCPQnNC40L3QutC+0LzRgdCy
0Y/Qt9GMINCg0L7RgdGB0LjQuIILAOl5/vUAAAAAAdcwCgYIKoUDBwEBAwIDQQCm
NQzbXzWSf/UJ545v0KJjU+SqpQco6yaDjZemcLB0kDIIi5+spmX8wlntu0+6pajR
7eXTMQI0MOR3u5Ob4mpb
-----END CERTIFICATE-----

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8264307,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8172404,,,,,,"2021-03-18 06:54;tongwan;gostcryptopro.crt;https://bugs.openjdk.org/secure/attachment/93713/gostcryptopro.crt",,,,,,,,,,,,,,,,,b01,8u271,,,,,,,,"0|i2s1gj:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-03-18 05:27;tongwan;Requested gostcryptopro.crt file from the submitter.;;;","2021-03-18 07:02;tongwan;The observations on Windows 10:
JDK 8u261+91: Passed.
JDK 8u271+1: Failed, MissingResourceException thrown.
JDK 11.0.10: Passed.
JDK 17ea+6: Passed.;;;","2021-03-25 15:18;coffeys;Looks like an earlier bug fix in JDK 11 introduced that resource bundle key. JDK-8195119 

I'll port the same to JDK 7u/8u;;;","2021-03-26 07:29;coffeys;Actually - I was a JDK 10 fix that introduced the resource key initially. (JDK-8185934) In any case, I'll just backport the resource entry to JDK 8u/7u.;;;",,,,,,,,,,,,,,,,,,,,,,,,
"Button types of a DialogPane are set twice, returns a wrong button",JDK-8263807,5044580,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,aghaisas,webbuggrp,webbuggrp,2021-03-15 18:07,2021-11-05 08:28,2023-10-01 09:57,2021-04-08 08:17,8,jfx11,jfx15,jfx16,,,,,jfx17,javafx,,0,dcspn,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10
Jdk-11.0.2 with newest JavaFX sources
Jdk1.8.0_241

A DESCRIPTION OF THE PROBLEM :
When the button types of a DialogPane are set twice, DialogPane#lookupButton does return a wrong button.

This is due DialogPane adding two list change listeners to 'buttons' (#getButtonTypes). They have the wrong order, which will result in the button bar not changing at all, but the buttonNodes list will have a new button added to it, which will not be displayed.

I will file a PR showing (via testcase) and fixing the described bug.


---------- BEGIN SOURCE ----------
public class Test extends Application {

    @Override
    public void start(Stage primaryStage) {
        Scene scene = new Scene(new BorderPane());
        primaryStage.setScene(scene);

        primaryStage.show();

        Dialog dialog = new Dialog();
        dialog.getDialogPane().getButtonTypes().setAll(ButtonType.OK);
        dialog.getDialogPane().getButtonTypes().setAll(ButtonType.OK);

        Button node = (Button) dialog.getDialogPane().lookupButton(ButtonType.OK);
        node.setText(""TEST"");

        dialog.showAndWait();
        // The OK button won't show 'TEST'
    }

}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8267648,JDK-8276739,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273082,,,,,,,,,,,,"2021-03-18 05:43;pnarayanaswa;Test.java;https://bugs.openjdk.org/secure/attachment/93711/Test.java",,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s01n:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-03-18 05:44;pnarayanaswa;Checked with attached testcase in Windows 10, issue is reproducible
Test Result:
=========
8u281: Fail
openjfx11: Fail
openjfx15: Fail
openjfx16: Fail
openjfx17ea: Fail;;;","2021-04-08 08:17;roboduke;Changeset: 28475cb2
Author:    Marius Hanl <mariushanl@web.de>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-04-08 15:16:42 +0000
URL:       https://git.openjdk.java.net/jfx/commit/28475cb2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
JavaFX application freezes completely after some time when using the WebView,JDK-8263788,5044720,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,ajoseph,webbuggrp,webbuggrp,2021-03-17 05:15,2022-11-23 02:24,2023-10-01 09:57,2021-04-20 12:47,8,jfx11,jfx16,,,,,,jfx17,javafx,,0,8bpr-critical-approved,additional-information-not-received,bugdb_32579576,bugdb_32695998,dcspn,intermittent,reproducer-no,sn_90,sn_91,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10
Java 11.0.10

This thread dump was created using:
Open JFX7: master branch +  pull/417 (https://github.com/openjdk/jfx/pull/417)

But freeze happens also in previous versions of JavaFX.

A DESCRIPTION OF THE PROBLEM :
Java(FX) application (with WebView) will completely freeze after using it for a while. Even attaching JVisualVM to debug it further doesn't work.

Reportedly this was already pointed out by more developers (see JDK-8260238) but the ticket was closed due to inability to reproduce it. Note that we also tried out the example provided in JDK-8260238 and we couldn't reproduce it.

We understand that it's hard to fix something if you can't reproduce it, but note that this happens only on one of our machines (few of our customers reported it) + we weren't able to identify what exactly is causing it. With that in mind there is no way to come up with the reproducible example. What we know for sure is that it is caused by WebKit as freeze is gone as soon as we exclude any WebKit components from our application.

So instead of trying to came up with reproducible example we tried to prepare a native debug build of WebKit and reproduce it with our application. After doing this, the application started to crash (due to ASSERTIONS) instead of freezing so we weren't able to gather additional information that way. More info about this can be found in ""OpenJFX custom build - Java application crash (semi-related to 8262276)"" OpenJfx mailing list thread.

At the end we prepared a production build (as suggested in the above mailing list thread) which actually (on our surprise) also produced jfxwebkit.pdb. We used that to generate a thread dump at the time when application freezes.

Side note:
If there is any additional information we can provide you with, please just let us know instead of closing this ticket as ""not reproducible"".

Not Flagged	>	2688	0	Main Thread	Main Thread	jli.dll!ContinueInNewThread0
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jli.dll!ContinueInNewThread0(int(*)(void *) continuation=0x00007ff85db550f8, __int64 stack_size=0, void * args=0x0000006f5431f8a0) Line 776
 	 	 	 	 	 	jli.dll!ContinueInNewThread(InvocationFunctions * ifn=0x0000006f5431f990, __int64 threadStackSize=0, int argc=4, char * * argv=0x0000023ae64d7af8, int mode=1, char * what=0x0000023ae64d76c0, int ret=0) Line 2354
 	 	 	 	 	 	jli.dll!JLI_Launch(int argc=4, char * * argv=0x0000023ae64d7af8, int jargc=0, const char * * jargv=0x00007ff68ab83008, int appclassc=0, const char * * appclassv=0x0000000000000000, const char * fullversion=0x00007ff68ab822a0, const char * dotversion=0x00007ff68ab8229c, const char * pname=0x00007ff68ab82230, const char * lname=0x00007ff68ab82240, unsigned char javaargs='\0', unsigned char cpwildcard='\x1', unsigned char javaw='\0', long ergo=0) Line 342
 	 	 	 	 	 	java.exe!00007ff68ab81139()
 	 	 	 	 	 	java.exe!00007ff68ab813b0()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		6156	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x0000023aff190390, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023aee0ff062()
 	 	 	 	 	 	0000023a00000005()
 	 	 	 	 	 	0000023aff190390()
 	 	 	 	 	 	0000023aee0fa001()
 	 	 	 	 	 	0000023aee0fed6f()
 	 	 	 	 	 	0000023ae8686000()
 	 	 	 	 	 	0000023aff190390()
 	 	 	 	 	 	0000006f548fd0a0()
 	 	 	 	 	 	00000000ffffffff()
 	 	 	 	 	 	0000023aee0fed16()
 	 	 	 	 	 	0000006f548fd058()
 	 	 	 	 	 	0000023aff190388()
 	 	 	 	 	 	0000006f548fd0d8()
 	 	 	 	 	 	0000023aff1cbf00()

Not Flagged		5728	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::IWait(Thread * Self=0x0000023ae869f000, __int64 timo=0) Line 774
 	 	 	 	 	 	jvm.dll!Monitor::wait(bool no_safepoint_check, long timeout, bool as_suspend_equivalent) Line 1097
 	 	 	 	 	 	jvm.dll!GCTaskManager::get_task(unsigned int which=0) Line 674
 	 	 	 	 	 	jvm.dll!GCTaskThread::run() Line 142
 	 	 	 	 	 	jvm.dll!Thread::call_run() Line 390
 	 	 	 	 	 	jvm.dll!thread_native_entry(Thread * thread=0x0000023ae869f000) Line 460
 	 	 	 	 	 	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		9636	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!SafepointSynchronize::begin
 	 	 	 	 	 	ntdll.dll!NtDelayExecution()
 	 	 	 	 	 	KERNELBASE.dll!SleepEx()
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::begin() Line 399
 	 	 	 	 	 	jvm.dll!VMThread::loop() Line 505
 	 	 	 	 	 	jvm.dll!VMThread::run() Line 315
 	 	 	 	 	 	jvm.dll!Thread::call_run() Line 390
 	 	 	 	 	 	jvm.dll!thread_native_entry(Thread * thread=0x0000023affa67800) Line 460
 	 	 	 	 	 	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		5836	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::IWait(Thread * Self=0x0000023aff9d6000, __int64 timo=0) Line 774
 	 	 	 	 	 	jvm.dll!Monitor::wait(bool no_safepoint_check, long timeout, bool as_suspend_equivalent) Line 1112
 	 	 	 	 	 	[Inline Frame] jvm.dll!MonitorLockerEx::wait(bool) Line 266
 	 	 	 	 	 	jvm.dll!JVM_WaitForReferencePendingList(JNIEnv_ * env) Line 3323
 	 	 	 	 	 	0000023aee0ff062()
 	 	 	 	 	 	0000023aff9d6000()
 	 	 	 	 	 	0000023aff11d390()
 	 	 	 	 	 	0000023ad9f28298()

Not Flagged		6216	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	jvm.dll!ObjectMonitor::wait(__int64 millis=0, bool interruptible, Thread * __the_thread__=0x0000023affa70000) Line 1508
 	 	 	 	 	 	jvm.dll!ObjectSynchronizer::wait(Handle obj={...}, __int64 millis=0, Thread * __the_thread__=0x0000023affa70000) Line 500
 	 	 	 	 	 	jvm.dll!JVM_MonitorWait(JNIEnv_ * env, _jobject * handle, __int64 ms=0) Line 626
 	 	 	 	 	 	0000023af5ceb914()
 	 	 	 	 	 	0000023affa70000()
 	 	 	 	 	 	00000000c07abc90()
 	 	 	 	 	 	0000006f54cff030()
 	 	 	 	 	 	0000023a8d953db0()
 	 	 	 	 	 	00000000c07abc90()
 	 	 	 	 	 	0000006f54cff160()
 	 	 	 	 	 	0000000000008b10()
 	 	 	 	 	 	0000023aee1e3529()
 	 	 	 	 	 	0000023affa70000()
 	 	 	 	 	 	0000006f54cff180()
 	 	 	 	 	 	0000006f54cff108()

Not Flagged		1196	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	[Inline Frame] jvm.dll!Semaphore::wait
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	[Inline Frame] jvm.dll!Semaphore::wait() Line 55
 	 	 	 	 	 	[Inline Frame] jvm.dll!check_pending_signals() Line 2112
 	 	 	 	 	 	jvm.dll!os::signal_wait() Line 2130
 	 	 	 	 	 	jvm.dll!signal_thread_entry(JavaThread * thread, Thread * __the_thread__=0x0000023affa83800) Line 353
 	 	 	 	 	 	[Inline Frame] jvm.dll!JavaThread::thread_main_inner() Line 1859
 	 	 	 	 	 	jvm.dll!JavaThread::run() Line 1839
 	 	 	 	 	 	jvm.dll!Thread::call_run() Line 390
 	 	 	 	 	 	jvm.dll!thread_native_entry(Thread * thread=0x0000023affa83800) Line 460
 	 	 	 	 	 	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		5748	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::IWait(Thread * Self=0x0000023affa86000, __int64 timo=0) Line 774
 	 	 	 	 	 	jvm.dll!Monitor::wait(bool no_safepoint_check, long timeout, bool as_suspend_equivalent) Line 1097
 	 	 	 	 	 	jvm.dll!ServiceThread::service_thread_entry(JavaThread * jt=0x0000023affa86000, Thread * __the_thread__=0x0000023affa86000) Line 112
 	 	 	 	 	 	[Inline Frame] jvm.dll!JavaThread::thread_main_inner() Line 1859
 	 	 	 	 	 	jvm.dll!JavaThread::run() Line 1839
 	 	 	 	 	 	jvm.dll!Thread::call_run() Line 390
 	 	 	 	 	 	jvm.dll!thread_native_entry(Thread * thread=0x0000023affa86000) Line 460
 	 	 	 	 	 	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		7340	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023affa87000) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023affa87000) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested(JavaThread *) Line 73
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition_and_fence(JavaThread * thread=0x0000023affa87000, JavaThreadState) Line 142
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::trans_and_fence(JavaThreadState from, JavaThreadState to=_thread_in_vm) Line 180
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadBlockInVM::{dtor}() Line 304
 	 	 	 	 	 	jvm.dll!Monitor::wait(bool no_safepoint_check, long timeout, bool as_suspend_equivalent) Line 1126
 	 	 	 	 	 	jvm.dll!CompileQueue::get() Line 451
 	 	 	 	 	 	jvm.dll!CompileBroker::compiler_thread_loop() Line 1840
 	 	 	 	 	 	[Inline Frame] jvm.dll!JavaThread::thread_main_inner() Line 1859
 	 	 	 	 	 	jvm.dll!JavaThread::run() Line 1839
 	 	 	 	 	 	jvm.dll!Thread::call_run() Line 390
 	 	 	 	 	 	jvm.dll!thread_native_entry(Thread * thread=0x0000023affa87000) Line 460
 	 	 	 	 	 	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		9356	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023affa8a000) Line 465
 	 	 	 	 	 	jvm.dll!Monitor::IWait(Thread * Self=0x0000023affa8a000, __int64 timo) Line 819
 	 	 	 	 	 	jvm.dll!Monitor::wait(bool no_safepoint_check, long timeout, bool as_suspend_equivalent) Line 1112
 	 	 	 	 	 	jvm.dll!CompileQueue::get() Line 451
 	 	 	 	 	 	jvm.dll!CompileBroker::compiler_thread_loop() Line 1840
 	 	 	 	 	 	[Inline Frame] jvm.dll!JavaThread::thread_main_inner() Line 1859
 	 	 	 	 	 	jvm.dll!JavaThread::run() Line 1839
 	 	 	 	 	 	jvm.dll!Thread::call_run() Line 390
 	 	 	 	 	 	jvm.dll!thread_native_entry(Thread * thread=0x0000023affa8a000) Line 460
 	 	 	 	 	 	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		3344	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park(__int64 Millis=86400000) Line 5193
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 406
 	 	 	 	 	 	jvm.dll!Monitor::IWait(Thread * Self=0x0000023affa8e800, __int64 timo=86400000) Line 775
 	 	 	 	 	 	jvm.dll!Monitor::wait(bool no_safepoint_check, long timeout, bool as_suspend_equivalent) Line 1097
 	 	 	 	 	 	jvm.dll!NMethodSweeper::sweeper_loop() Line 274
 	 	 	 	 	 	[Inline Frame] jvm.dll!JavaThread::thread_main_inner() Line 1859
 	 	 	 	 	 	jvm.dll!JavaThread::run() Line 1839
 	 	 	 	 	 	jvm.dll!Thread::call_run() Line 390
 	 	 	 	 	 	jvm.dll!thread_native_entry(Thread * thread=0x0000023affa8e800) Line 460
 	 	 	 	 	 	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		6864	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023a80746000) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023a80746000) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested(JavaThread *) Line 73
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition_and_fence(JavaThread * thread=0x0000023a80746000, JavaThreadState) Line 142
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::trans_and_fence(JavaThreadState from, JavaThreadState to=_thread_in_vm) Line 180
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadBlockInVM::{dtor}() Line 304
 	 	 	 	 	 	jvm.dll!ObjectMonitor::wait(__int64 millis=60000, bool interruptible, Thread * __the_thread__=0x0000023a80746000) Line 1536
 	 	 	 	 	 	jvm.dll!ObjectSynchronizer::wait(Handle obj={...}, __int64 millis=60000, Thread * __the_thread__=0x0000023a80746000) Line 500
 	 	 	 	 	 	jvm.dll!JVM_MonitorWait(JNIEnv_ * env, _jobject * handle, __int64 ms=60000) Line 626
 	 	 	 	 	 	0000023af5ceb914()
 	 	 	 	 	 	0000023a80746000()
 	 	 	 	 	 	00000000c1ac4718()
 	 	 	 	 	 	0000006f552ff1c0()
 	 	 	 	 	 	0000023ae7a20000()
 	 	 	 	 	 	00000000c1ac4718()
 	 	 	 	 	 	0000023aeea6662c()

Not Flagged		4408	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park(__int64 Millis=50) Line 5193
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 406
 	 	 	 	 	 	jvm.dll!Monitor::IWait(Thread * Self=0x0000023a807a4800, __int64 timo=50) Line 775
 	 	 	 	 	 	jvm.dll!Monitor::wait(bool no_safepoint_check, long timeout, bool as_suspend_equivalent) Line 1097
 	 	 	 	 	 	[Inline Frame] jvm.dll!WatcherThread::sleep() Line 1412
 	 	 	 	 	 	jvm.dll!WatcherThread::run() Line 1458
 	 	 	 	 	 	jvm.dll!Thread::call_run() Line 390
 	 	 	 	 	 	jvm.dll!thread_native_entry(Thread * thread=0x0000023a807a4800) Line 460
 	 	 	 	 	 	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		2988	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::IWait(Thread * Self=0x0000023a809c7000, __int64 timo=0) Line 774
 	 	 	 	 	 	jvm.dll!Monitor::wait(bool no_safepoint_check, long timeout, bool as_suspend_equivalent) Line 1097
 	 	 	 	 	 	jvm.dll!GCTaskManager::get_task(unsigned int which=1) Line 674
 	 	 	 	 	 	jvm.dll!GCTaskThread::run() Line 142
 	 	 	 	 	 	jvm.dll!Thread::call_run() Line 390
 	 	 	 	 	 	jvm.dll!thread_native_entry(Thread * thread=0x0000023a809c7000) Line 460
 	 	 	 	 	 	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		5852	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	jvm.dll!ObjectMonitor::wait(__int64 millis=0, bool interruptible, Thread * __the_thread__=0x0000023a81259800) Line 1508
 	 	 	 	 	 	jvm.dll!ObjectSynchronizer::wait(Handle obj={...}, __int64 millis=0, Thread * __the_thread__=0x0000023a81259800) Line 500
 	 	 	 	 	 	jvm.dll!JVM_MonitorWait(JNIEnv_ * env, _jobject * handle, __int64 ms=0) Line 626
 	 	 	 	 	 	0000023aee0ff062()
 	 	 	 	 	 	0000023a81259800()
 	 	 	 	 	 	0000023aff0f0c10()
 	 	 	 	 	 	0000006f555ff288()
 	 	 	 	 	 	0000006f555ff930()
 	 	 	 	 	 	0000023a83960a8b()
 	 	 	 	 	 	0000023a000000b6()
 	 	 	 	 	 	0000023a83960ac8()

Not Flagged		6092	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	win32u.dll!NtUserWaitMessage
 	 	 	 	 	 	win32u.dll!NtUserWaitMessage()
 	 	 	 	 	 	awt.dll!AwtToolkit::PrimaryIdleFunc() Line 1687
 	 	 	 	 	 	awt.dll!AwtToolkit::MessageLoop(void(*)() lpIdleFunc=0x00007ff83f04d830, int(*)(tagMSG &) lpPeekMessageFunc=0x00007ff83f04bf90) Line 1542
 	 	 	 	 	 	awt.dll!Java_sun_awt_windows_WToolkit_eventLoop(JNIEnv_ * env=0x0000023a8211f000, _jobject * self=0x0000023a8386d9e0) Line 2596
 	 	 	 	 	 	0000023aee0ff062()
 	 	 	 	 	 	0000023a8211f000()
 	 	 	 	 	 	0000023a8386d9e0()
 	 	 	 	 	 	0000006f557ff1e8()
 	 	 	 	 	 	0000023a8391e080()
 	 	 	 	 	 	0000006f557ff5c0()
 	 	 	 	 	 	0000023aee0fed16()
 	 	 	 	 	 	0000006f557ff1a0()
 	 	 	 	 	 	0000023a8386d9e0()
 	 	 	 	 	 	0000006f557ff208()
 	 	 	 	 	 	0000023a8387e1b0()

Not Flagged		6068	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x0000023ae7a20000, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000000000000005()
 	 	 	 	 	 	0000023ae7a20000()
 	 	 	 	 	 	00000000ecec1701()
 	 	 	 	 	 	0000006f558fe928()
 	 	 	 	 	 	00000000c1ac0a38()

Not Flagged		5692	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023a8213e800) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023a8213e800) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	jvm.dll!SafepointMechanism::block_if_requested(JavaThread * thread=0x0000023a8213e800) Line 73
 	 	 	 	 	 	jvm.dll!JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread * thread=0x0000023a8213e800) Line 2507
 	 	 	 	 	 	jvm.dll!JavaThread::check_special_condition_for_native_trans(JavaThread * thread=0x0000023a8213e800) Line 2535
 	 	 	 	 	 	0000023af5e2dc7a()
 	 	 	 	 	 	0000023a00000000()

Not Flagged		9452	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023a82111000) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023a82111000) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested(JavaThread *) Line 73
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition_and_fence(JavaThread * thread=0x0000023a82111000, JavaThreadState) Line 142
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::trans_and_fence(JavaThreadState from, JavaThreadState to=_thread_in_vm) Line 180
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadBlockInVM::{dtor}() Line 304
 	 	 	 	 	 	jvm.dll!ObjectMonitor::wait(__int64 millis=0, bool interruptible, Thread * __the_thread__=0x0000023a82111000) Line 1536
 	 	 	 	 	 	jvm.dll!ObjectSynchronizer::wait(Handle obj={...}, __int64 millis=0, Thread * __the_thread__=0x0000023a82111000) Line 500
 	 	 	 	 	 	jvm.dll!JVM_MonitorWait(JNIEnv_ * env, _jobject * handle, __int64 ms=0) Line 626
 	 	 	 	 	 	0000023af5ceb914()
 	 	 	 	 	 	0000023a82111000()
 	 	 	 	 	 	0000006f55aff620()
 	 	 	 	 	 	0000006f55aff5b0()
 	 	 	 	 	 	000000010021a840()
 	 	 	 	 	 	00000000c2196ea8()
 	 	 	 	 	 	00000000ed0dd950()
 	 	 	 	 	 	00000000c2196e58()
 	 	 	 	 	 	0000023aee1e1726()
 	 	 	 	 	 	0000023a82111000()
 	 	 	 	 	 	00000000ece8b368()
 	 	 	 	 	 	0000000100230840()

Not Flagged		9448	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023a82112000) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023a82112000) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	jvm.dll!SafepointMechanism::block_if_requested(JavaThread * thread=0x0000023a82112000) Line 73
 	 	 	 	 	 	jvm.dll!JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread * thread=0x0000023a82112000) Line 2507
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::transition_from_native(JavaThread * thread=0x0000023a82112000, JavaThreadState to=_thread_in_vm) Line 175
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::trans_from_native(JavaThreadState) Line 179
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadInVMfromNative::{ctor}(JavaThread *) Line 267
 	 	 	 	 	 	jvm.dll!jni_CallVoidMethodV(JNIEnv_ * env=0x0000023a82112348, _jobject * obj=0x0000023a8ff98bb0, _jmethodID * methodID=0x0000023a81d52fc0, char * args=0x0000006f55bfeaf8) Line 1574
 	 	 	 	 	 	glass.dll!00007ff8575a50cc()
 	 	 	 	 	 	glass.dll!00007ff8575c0cdc()
 	 	 	 	 	 	glass.dll!00007ff8575bc7d6()
 	 	 	 	 	 	glass.dll!00007ff8575a17bb()
 	 	 	 	 	 	user32.dll!UserCallWinProcCheckWow()
 	 	 	 	 	 	user32.dll!DispatchMessageWorker()
 	 	 	 	 	 	glass.dll!00007ff8575aa80d()
 	 	 	 	 	 	0000023aee0ff062()
 	 	 	 	 	 	0000023a8432d490()
 	 	 	 	 	 	0000006f55bff5e0()
 	 	 	 	 	 	0000006f55bfeff8()
 	 	 	 	 	 	0000006f55bff5e0()
 	 	 	 	 	 	0000006f55bff5e0()
 	 	 	 	 	 	0000023aee0fed16()
 	 	 	 	 	 	0000006f55bfefb0()
 	 	 	 	 	 	0000023a8432d490()
 	 	 	 	 	 	0000006f55bff020()
 	 	 	 	 	 	0000023a84330040()

Not Flagged		9460	0	Worker Thread	d3d9.dll!CBatchFilterI::LHBatchWorkerThread()	d3d9.dll!CBatchFilterI::LHBatchWorkerThread
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	d3d9.dll!CBatchFilterI::LHBatchWorkerThread(void *)
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		6196	0	Worker Thread	ntdll.dll!TppWorkerThread	ntdll.dll!NtWaitForWorkViaWorkerFactory
 	 	 	 	 	 	ntdll.dll!NtWaitForWorkViaWorkerFactory()
 	 	 	 	 	 	ntdll.dll!TppWorkerThread()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		5372	0	Worker Thread	winmm.dll!timeThread	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023a81e00800) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023a81e00800) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	jvm.dll!SafepointMechanism::block_if_requested(JavaThread * thread=0x0000023a81e00800) Line 73
 	 	 	 	 	 	jvm.dll!JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread * thread=0x0000023a81e00800) Line 2507
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::transition_from_native(JavaThread * thread=0x0000023a81e00800, JavaThreadState to=_thread_in_vm) Line 175
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::trans_from_native(JavaThreadState) Line 179
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadInVMfromNative::{ctor}(JavaThread *) Line 267
 	 	 	 	 	 	jvm.dll!jni_CallVoidMethodV(JNIEnv_ * env=0x0000023a81e00b48, _jobject * obj=0x0000023affa73748, _jmethodID * methodID=0x0000023a81c7aa58, char * args=0x0000006f55eff5b8) Line 1574
 	 	 	 	 	 	glass.dll!00007ff8575a50cc()
 	 	 	 	 	 	glass.dll!00007ff8575bf400()
 	 	 	 	 	 	winmm.dll!timeThread()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		7000	0	Worker Thread	ntdll.dll!TppWorkerThread	ntdll.dll!NtWaitForWorkViaWorkerFactory
 	 	 	 	 	 	ntdll.dll!NtWaitForWorkViaWorkerFactory()
 	 	 	 	 	 	ntdll.dll!TppWorkerThread()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		7540	0	Worker Thread	ntdll.dll!TppWorkerThread	ntdll.dll!NtWaitForWorkViaWorkerFactory
 	 	 	 	 	 	ntdll.dll!NtWaitForWorkViaWorkerFactory()
 	 	 	 	 	 	ntdll.dll!TppWorkerThread()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		7808	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023a80baf800) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023a80baf800) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested(JavaThread *) Line 73
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition_and_fence(JavaThread * thread=0x0000023a80baf800, JavaThreadState) Line 142
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::trans_and_fence(JavaThreadState from, JavaThreadState to=_thread_in_vm) Line 180
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadBlockInVM::{dtor}() Line 304
 	 	 	 	 	 	jvm.dll!ObjectMonitor::wait(__int64 millis=60000, bool interruptible, Thread * __the_thread__=0x0000023a80baf800) Line 1536
 	 	 	 	 	 	jvm.dll!ObjectSynchronizer::wait(Handle obj={...}, __int64 millis=60000, Thread * __the_thread__=0x0000023a80baf800) Line 500
 	 	 	 	 	 	jvm.dll!JVM_MonitorWait(JNIEnv_ * env, _jobject * handle, __int64 ms=60000) Line 626
 	 	 	 	 	 	0000023af5ceb914()
 	 	 	 	 	 	0000023a80baf800()
 	 	 	 	 	 	00000000c29a8838()
 	 	 	 	 	 	0000006f562fef90()
 	 	 	 	 	 	0000023ae7a20000()
 	 	 	 	 	 	00000000c29a8838()
 	 	 	 	 	 	0000006f562fef80()

Not Flagged		6776	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	jvm.dll!ObjectMonitor::wait(__int64 millis=0, bool interruptible, Thread * __the_thread__=0x0000023a82018000) Line 1508
 	 	 	 	 	 	jvm.dll!ObjectSynchronizer::wait(Handle obj={...}, __int64 millis=0, Thread * __the_thread__=0x0000023a82018000) Line 500
 	 	 	 	 	 	jvm.dll!JVM_MonitorWait(JNIEnv_ * env, _jobject * handle, __int64 ms=0) Line 626
 	 	 	 	 	 	0000023aee0ff062()
 	 	 	 	 	 	0000023a82018000()
 	 	 	 	 	 	0000023aff0f0c10()
 	 	 	 	 	 	0000006f563fef08()
 	 	 	 	 	 	0000006f563ff570()
 	 	 	 	 	 	3ff0000000000000()
 	 	 	 	 	 	[Inline Frame] jvm.dll!OrderAccess::fence() Line 63
 	 	 	 	 	 	[Inline Frame] jvm.dll!InterfaceSupport::serialize_thread_state_internal(JavaThread *) Line 85
 	 	 	 	 	 	[Inline Frame] jvm.dll!InterfaceSupport::serialize_thread_state(JavaThread *) Line 76
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition(JavaThread * thread=0x0000023aff0f0c10, JavaThreadState) Line 120
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::trans(JavaThreadState from, JavaThreadState to=1) Line 177
 	 	 	 	 	 	0000023aff1cabc8()

Not Flagged		6208	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park(__int64 Millis=599963) Line 5193
 	 	 	 	 	 	jvm.dll!ObjectMonitor::wait(__int64 millis=599963, bool interruptible, Thread * __the_thread__=0x0000023a82b64800) Line 1509
 	 	 	 	 	 	jvm.dll!ObjectSynchronizer::wait(Handle obj={...}, __int64 millis=599963, Thread * __the_thread__=0x0000023a82b64800) Line 500
 	 	 	 	 	 	jvm.dll!JVM_MonitorWait(JNIEnv_ * env, _jobject * handle, __int64 ms=599963) Line 626
 	 	 	 	 	 	0000023af5ceb914()
 	 	 	 	 	 	0000023a82b64800()
 	 	 	 	 	 	0000023aff0f0c10()
 	 	 	 	 	 	0000006f56aff3c0()
 	 	 	 	 	 	0000023a8c2672c0()
 	 	 	 	 	 	00000000c29f7680()
 	 	 	 	 	 	00000000f097fa88()
 	 	 	 	 	 	0000006f56aff390()
 	 	 	 	 	 	0000023a8bf78250()
 	 	 	 	 	 	0000006f56aff3e8()
 	 	 	 	 	 	0000023a8bf789e0()

Not Flagged		7968	0	Worker Thread	hasp_windows_x64_88087.dll thread	mswsock.dll!SockWaitForSingleObject
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	mswsock.dll!SockWaitForSingleObject()
 	 	 	 	 	 	mswsock.dll!WSPSelect()
 	 	 	 	 	 	ws2_32.dll!select()
 	 	 	 	 	 	[Frames may be missing, no binary loaded for hasp_windows_x64_88087.dll]
 	 	 	 	 	 	hasp_windows_x64_88087.dll!0000000002212745()

Not Flagged		7692	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x0000023ae7a20000, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000023a00000005()
 	 	 	 	 	 	0000023ae7a20000()
 	 	 	 	 	 	0000006f564fee01()
 	 	 	 	 	 	0000023a82b65000()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	0000023a82b65000()
 	 	 	 	 	 	00000000f8af7780()
 	 	 	 	 	 	00000000c21a8fe0()
 	 	 	 	 	 	0000006f564fee98()
 	 	 	 	 	 	0000023aeea0ecb4()
 	 	 	 	 	 	0000006f564fee88()
 	 	 	 	 	 	0000023aee10cd8b()
 	 	 	 	 	 	0000006f564fef60()
 	 	 	 	 	 	0000023aeec61174()
 	 	 	 	 	 	0000006f564fee98()
 	 	 	 	 	 	0000023aee0f9890()
 	 	 	 	 	 	0000006f564fee98()
 	 	 	 	 	 	0000023aee0f9890()
 	 	 	 	 	 	0000000000000001()
 	 	 	 	 	 	00000000f8af7780()
 	 	 	 	 	 	0000006f564fee50()
 	 	 	 	 	 	0000023aff61d758()
 	 	 	 	 	 	0000006f564feeb0()
 	 	 	 	 	 	0000023aff61ee50()

Not Flagged		9684	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	msvcp140.dll!__crtSleepConditionVariableSRW
 	 	 	 	 	 	ntdll.dll!NtWaitForAlertByThreadId()
 	 	 	 	 	 	ntdll.dll!RtlSleepConditionVariableSRW()
 	 	 	 	 	 	KERNELBASE.dll!SleepConditionVariableSRW()
 	 	 	 	 	 	msvcp140.dll!__crtSleepConditionVariableSRW(_RTL_CONDITION_VARIABLE * pCond, _RTL_SRWLOCK * pLock, unsigned long dwMs, unsigned long flags) Line 659
 	 	 	 	 	 	[Inline Frame] msvcp140.dll!Concurrency::details::stl_condition_variable_win7::wait_for(Concurrency::details::stl_critical_section_interface *) Line 216
 	 	 	 	 	 	msvcp140.dll!Concurrency::details::stl_condition_variable_win7::wait(Concurrency::details::stl_critical_section_interface * lock) Line 210
 	 	 	 	 	 	msvcp140.dll!do_wait(_Cnd_internal_imp_t * cond=0x0000023a82cb1bd8, _Mtx_internal_imp_t * mtx=0x0000023a82cb1b88, const xtime * target=0x0000000000000000) Line 77
 	 	 	 	 	 	[Frames may be missing, no binary loaded for rocksdbjni-win64.dll]
 	 	 	 	 	 	rocksdbjni-win64.dll!00007ff8330ecf80()

Not Flagged		716	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	msvcp140.dll!__crtSleepConditionVariableSRW
 	 	 	 	 	 	ntdll.dll!NtWaitForAlertByThreadId()
 	 	 	 	 	 	ntdll.dll!RtlSleepConditionVariableSRW()
 	 	 	 	 	 	KERNELBASE.dll!SleepConditionVariableSRW()
 	 	 	 	 	 	msvcp140.dll!__crtSleepConditionVariableSRW(_RTL_CONDITION_VARIABLE * pCond, _RTL_SRWLOCK * pLock, unsigned long dwMs, unsigned long flags) Line 659
 	 	 	 	 	 	[Inline Frame] msvcp140.dll!Concurrency::details::stl_condition_variable_win7::wait_for(Concurrency::details::stl_critical_section_interface *) Line 216
 	 	 	 	 	 	msvcp140.dll!Concurrency::details::stl_condition_variable_win7::wait(Concurrency::details::stl_critical_section_interface * lock) Line 210
 	 	 	 	 	 	msvcp140.dll!do_wait(_Cnd_internal_imp_t * cond=0x0000023a82cb1bd8, _Mtx_internal_imp_t * mtx=0x0000023a82cb1b88, const xtime * target=0x0000000000000000) Line 77
 	 	 	 	 	 	[Frames may be missing, no binary loaded for rocksdbjni-win64.dll]
 	 	 	 	 	 	rocksdbjni-win64.dll!00007ff8330ecf80()

Not Flagged		4064	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023a82b6a000) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023a82b6a000) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested(JavaThread *) Line 73
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition_and_fence(JavaThread * thread=0x0000023a82b6a000, JavaThreadState) Line 142
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::trans_and_fence(JavaThreadState from, JavaThreadState to=_thread_in_vm) Line 180
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadBlockInVM::{dtor}() Line 304
 	 	 	 	 	 	jvm.dll!ObjectMonitor::wait(__int64 millis=10000, bool interruptible, Thread * __the_thread__=0x0000023a82b6a000) Line 1536
 	 	 	 	 	 	jvm.dll!ObjectSynchronizer::wait(Handle obj={...}, __int64 millis=10000, Thread * __the_thread__=0x0000023a82b6a000) Line 500
 	 	 	 	 	 	jvm.dll!JVM_MonitorWait(JNIEnv_ * env, _jobject * handle, __int64 ms=10000) Line 626
 	 	 	 	 	 	0000023af5ceb914()
 	 	 	 	 	 	0000023a82b6a000()
 	 	 	 	 	 	0000023aff0f0c10()
 	 	 	 	 	 	0000006f567fef10()
 	 	 	 	 	 	0000000000001318()
 	 	 	 	 	 	00000000c7746da0()
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadInVMfromJavaNoAsyncException::{dtor}() Line 322
 	 	 	 	 	 	jvm.dll!InterpreterRuntime::monitorenter(JavaThread * thread=0x0000023aff0f0c10, BasicObjectLock * elem) Line 770
 	 	 	 	 	 	0000023aee10e951()
 	 	 	 	 	 	0000006f567fefa8()
 	 	 	 	 	 	0000023aee0fa0c3()
 	 	 	 	 	 	0000023aee0fa0c3()
 	 	 	 	 	 	0000000000002710()

Not Flagged		8116	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023a82b6b000) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023a82b6b000) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	jvm.dll!SafepointMechanism::block_if_requested(JavaThread * thread=0x0000023a82b6b000) Line 73
 	 	 	 	 	 	jvm.dll!JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread * thread=0x0000023a82b6b000) Line 2507
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::transition_from_native(JavaThread * thread=0x0000023a82b6b000, JavaThreadState to=_thread_in_vm) Line 175
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::trans_from_native(JavaThreadState) Line 179
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadInVMfromNative::{ctor}(JavaThread *) Line 267
 	 	 	 	 	 	jvm.dll!jni_SetFloatArrayRegion(JNIEnv_ * env, _jfloatArray * array=0x0000006f56bfec00, long start, long len, const float * buf=0x0000006f56bfdb50) Line 2914
 	 	 	 	 	 	nio.dll!Java_sun_nio_ch_WindowsSelectorImpl_00024SubSelector_poll0(const JNINativeInterface_ * * env=0x0000023a82b6b348, _jobject * this=0x00000000c77458d0, __int64 pollAddress=2450525720576, long numfds, _jobject * returnReadFds=0x0000006f56bfec00, _jobject * returnWriteFds=0x0000006f56bfec08, _jobject * returnExceptFds=0x0000006f56bfec10, __int64 timeout=1000, __int64 fdsBuffer=2450293750352) Line 177
 	 	 	 	 	 	0000023af5c43b78()
 	 	 	 	 	 	00000000c7747350()
 	 	 	 	 	 	00000000c77458d0()
 	 	 	 	 	 	00000000c77448b8()
 	 	 	 	 	 	00000000c77438a0()
 	 	 	 	 	 	0000006f56bfec00()
 	 	 	 	 	 	0000006f56bfec08()
 	 	 	 	 	 	0000006f56bfec10()
 	 	 	 	 	 	00000000000003e8()
 	 	 	 	 	 	0000023a80e37a50()
 	 	 	 	 	 	00000000c7743878()
 	 	 	 	 	 	0000006f56bfef18()
 	 	 	 	 	 	0000023aee68ea7c()
 	 	 	 	 	 	00000000c77438a0()
 	 	 	 	 	 	00000000c77448b8()
 	 	 	 	 	 	00000000c77458d0()
 	 	 	 	 	 	0000023af05dd344()
 	 	 	 	 	 	0000006f56bfef18()
 	 	 	 	 	 	0000023aee6894a4()
 	 	 	 	 	 	00000000000003e8()
 	 	 	 	 	 	0000023a80e37a50()
 	 	 	 	 	 	00000000c77469d8()
 	 	 	 	 	 	0000023af5c6d290()
 	 	 	 	 	 	0000023a82b6b000()
 	 	 	 	 	 	0000023adb3bc350()
 	 	 	 	 	 	0000006f56bfecb0()
 	 	 	 	 	 	0000000000000011()
 	 	 	 	 	 	00000000c77469d8()
 	 	 	 	 	 	00000000c7742fd8()

Not Flagged		4252	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023a82b66800) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023a82b66800) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	jvm.dll!SafepointMechanism::block_if_requested(JavaThread * thread=0x0000023a82b66800) Line 73
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition_and_fence(JavaThread *) Line 142
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::trans_and_fence(JavaThreadState) Line 180
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadBlockInVM::{dtor}() Line 304
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=994) Line 5310
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x00000000c8679b98, unsigned char isAbsolute, __int64 time=994960200) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000000000000005()
 	 	 	 	 	 	00000000c8679b98()
 	 	 	 	 	 	00000000c8679b01()
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadInVMfromNative::{dtor}() Line 270
 	 	 	 	 	 	jvm.dll!JVM_IsInterrupted(JNIEnv_ * env, _jobject * jthread=0x0000000000000000, unsigned char clear_interrupted) Line 3196
 	 	 	 	 	 	000000003b4de348()
 	 	 	 	 	 	00000000c86798f0()
 	 	 	 	 	 	00000371e938cb0c()
 	 	 	 	 	 	00000000eb703278()
 	 	 	 	 	 	00000001eb703278()
 	 	 	 	 	 	00000000c86798f0()
 	 	 	 	 	 	00000000c8679778()
 	 	 	 	 	 	00000000c8679b98()
 	 	 	 	 	 	jvm.dll!os::javaTimeNanos() Line 941
 	 	 	 	 	 	0000023aeeb2784c()
 	 	 	 	 	 	00000008d1196381()
 	 	 	 	 	 	00000000c8679b98()
 	 	 	 	 	 	00000000c8679980()
 	 	 	 	 	 	00000000c8679c08()
 	 	 	 	 	 	00000000c86799a0()
 	 	 	 	 	 	0000023af0563234()
 	 	 	 	 	 	00000000c86798f0()
 	 	 	 	 	 	0000000100580bf8()
 	 	 	 	 	 	000000000000054f()
 	 	 	 	 	 	0000023addf73a98()
 	 	 	 	 	 	00000001006a7710()
 	 	 	 	 	 	0000023aee9ae9fc()
 	 	 	 	 	 	0000006f56cff688()
 	 	 	 	 	 	0000023aee9aeb2c()
 	 	 	 	 	 	00000000c8679b98()
 	 	 	 	 	 	00000000c8679980()
 	 	 	 	 	 	00000000c86799a0()
 	 	 	 	 	 	00000371e938c1ac()
 	 	 	 	 	 	00000000c8679c08()
 	 	 	 	 	 	00000000c8679778()
 	 	 	 	 	 	0000023aee0fa0c3()
 	 	 	 	 	 	00000000c8679c08()
 	 	 	 	 	 	0000006f56cff688()
 	 	 	 	 	 	0000023aef2e2364()
 	 	 	 	 	 	0000006f56cff5c0()
 	 	 	 	 	 	00000000eb7030b0()
 	 	 	 	 	 	00000000eb703150()
 	 	 	 	 	 	00000000c89076c8()
 	 	 	 	 	 	000000007fffffff()
 	 	 	 	 	 	0000023af5f59320()
 	 	 	 	 	 	00000000c86799b0()
 	 	 	 	 	 	00000000c86799b0()
 	 	 	 	 	 	0000037100000000()
 	 	 	 	 	 	00000000c8793f50()
 	 	 	 	 	 	0000006f56cff688()
 	 	 	 	 	 	0000023aeea8649c()
 	 	 	 	 	 	0000006f56cff688()
 	 	 	 	 	 	0000023aef3060c0()
 	 	 	 	 	 	ffffffffffffffff()
 	 	 	 	 	 	0000023a83b145d8()
 	 	 	 	 	 	0000006f56cff638()
 	 	 	 	 	 	0000023a90abbf80()

Not Flagged		4296	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023a82b67800) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023a82b67800) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	jvm.dll!SafepointMechanism::block_if_requested(JavaThread * thread=0x0000023a82b67800) Line 73
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition_and_fence(JavaThread *) Line 142
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::trans_and_fence(JavaThreadState) Line 180
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadBlockInVM::{dtor}() Line 304
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=59999) Line 5310
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x00000000c867a130, unsigned char isAbsolute, __int64 time=59999986700) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000000100000005()
 	 	 	 	 	 	00000000c867a130()
 	 	 	 	 	 	0000023a82b67801()
 	 	 	 	 	 	00000000c8679d78()
 	 	 	 	 	 	00000000c1ac0a38()

Not Flagged		6312	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023a900f1000) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023a900f1000) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested(JavaThread *) Line 73
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition_and_fence(JavaThread * thread=0x0000023a900f1000, JavaThreadState) Line 142
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::trans_and_fence(JavaThreadState from, JavaThreadState to=_thread_in_vm) Line 180
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadBlockInVM::{dtor}() Line 304
 	 	 	 	 	 	jvm.dll!ObjectMonitor::wait(__int64 millis=5000, bool interruptible, Thread * __the_thread__=0x0000023a900f1000) Line 1536
 	 	 	 	 	 	jvm.dll!ObjectSynchronizer::wait(Handle obj={...}, __int64 millis=5000, Thread * __the_thread__=0x0000023a900f1000) Line 500
 	 	 	 	 	 	jvm.dll!JVM_MonitorWait(JNIEnv_ * env, _jobject * handle, __int64 ms=5000) Line 626
 	 	 	 	 	 	0000023af5ceb914()
 	 	 	 	 	 	0000023a900f1000()
 	 	 	 	 	 	0000023aff0f0c10()
 	 	 	 	 	 	0000006f571fed00()
 	 	 	 	 	 	00000000000013a8()
 	 	 	 	 	 	00000000c85c4580()
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadInVMfromJavaNoAsyncException::{dtor}() Line 322
 	 	 	 	 	 	jvm.dll!InterpreterRuntime::monitorenter(JavaThread * thread=0x0000023aff0f0c10, BasicObjectLock * elem) Line 770
 	 	 	 	 	 	0000023aee10e951()
 	 	 	 	 	 	0000006f571fed98()
 	 	 	 	 	 	0000023aee0fa0c3()
 	 	 	 	 	 	0000023aee0fa0c3()
 	 	 	 	 	 	0000000000001388()

Not Flagged		2552	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	jvm.dll!ObjectMonitor::wait(__int64 millis=0, bool interruptible, Thread * __the_thread__=0x0000023a900f0800) Line 1508
 	 	 	 	 	 	jvm.dll!ObjectSynchronizer::wait(Handle obj={...}, __int64 millis=0, Thread * __the_thread__=0x0000023a900f0800) Line 500
 	 	 	 	 	 	jvm.dll!JVM_MonitorWait(JNIEnv_ * env, _jobject * handle, __int64 ms=0) Line 626
 	 	 	 	 	 	0000023af5ceb914()
 	 	 	 	 	 	0000023a900f0800()
 	 	 	 	 	 	00000000c83346d8()
 	 	 	 	 	 	0000006f572ff390()
 	 	 	 	 	 	0000023a8d953db0()
 	 	 	 	 	 	00000000c83346d8()
 	 	 	 	 	 	0000006f572ff380()
 	 	 	 	 	 	0000023aff20e650()
 	 	 	 	 	 	00000000f8fa5380()
 	 	 	 	 	 	20111338820632e0()
 	 	 	 	 	 	0000023af5bd94c0()
 	 	 	 	 	 	0000023a900f0800()
 	 	 	 	 	 	0000000000000246()

Not Flagged		2084	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x0000023ae7a20000, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000023a00000005()
 	 	 	 	 	 	0000023ae7a20000()
 	 	 	 	 	 	0000006f573ff301()
 	 	 	 	 	 	0000023a900f2000()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	0000023aef40c664()
 	 	 	 	 	 	00000000c87ed510()
 	 	 	 	 	 	0000006f573ff2e8()
 	 	 	 	 	 	0000023a843492c8()
 	 	 	 	 	 	0000006f573ff340()
 	 	 	 	 	 	00000000c87ed4f0()
 	 	 	 	 	 	0000023a8c288aa0()
 	 	 	 	 	 	0000006f573ff458()
 	 	 	 	 	 	0000023aeec61174()
 	 	 	 	 	 	0000006f573ff390()
 	 	 	 	 	 	0000023aee0f9890()
 	 	 	 	 	 	0000023aee0f9890()
 	 	 	 	 	 	0000000000000001()
 	 	 	 	 	 	00000000c87ed4f0()
 	 	 	 	 	 	0000006f573ff348()
 	 	 	 	 	 	0000023aff61d758()
 	 	 	 	 	 	0000006f573ff3a8()
 	 	 	 	 	 	0000023aff61ee50()

Not Flagged		6388	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023a900ef800) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!attach_current_thread(JavaVM_ * vm=0x0000023a8fe45f60, void * * penv=0x0000006f568ff770, void * _args=0x0000000000000000, bool daemon) Line 4193
 	 	 	 	 	 	[Inline Frame] jfxwebkit.dll!JavaVM_::AttachCurrentThreadAsDaemon(void * *) Line 1949
 	 	 	 	 	 	[Inline Frame] jfxwebkit.dll!WTF::AttachThreadToJavaEnv<1>::{ctor}() Line 89
 	 	 	 	 	 	[Inline Frame] jfxwebkit.dll!WTF::WorkQueue::dispatchAfter::__l2::<lambda_8cf5f7628d6dccfa366f0d6bcb780222>::operator()() Line 90
 	 	 	 	 	 	jfxwebkit.dll!WTF::Detail::CallableWrapper<<lambda_8cf5f7628d6dccfa366f0d6bcb780222>,void>::call() Line 52
 	 	 	 	 	 	[Inline Frame] jfxwebkit.dll!WTF::Function<void __cdecl(void)>::operator()() Line 83
 	 	 	 	 	 	[Inline Frame] jfxwebkit.dll!WTF::RunLoop::dispatchAfter::__l2::<lambda_341de0c59d9194a12b1af6299dc28787>::operator()() Line 166
 	 	 	 	 	 	jfxwebkit.dll!WTF::Detail::CallableWrapper<<lambda_341de0c59d9194a12b1af6299dc28787>,void>::call() Line 52
 	 	 	 	 	 	[Inline Frame] jfxwebkit.dll!WTF::RunLoop::TimerBase::timerFired() Line 160
 	 	 	 	 	 	[Inline Frame] jfxwebkit.dll!WTF::RunLoop::wndProc(HWND__ *) Line 59
 	 	 	 	 	 	jfxwebkit.dll!WTF::RunLoop::RunLoopWndProc(HWND__ * hWnd, unsigned int message, unsigned __int64 wParam=2450545467232, __int64 lParam=0) Line 39
 	 	 	 	 	 	user32.dll!UserCallWinProcCheckWow()
 	 	 	 	 	 	user32.dll!DispatchMessageWorker()
 	 	 	 	 	 	jfxwebkit.dll!WTF::RunLoop::run() Line 73
 	 	 	 	 	 	[Inline Frame] jfxwebkit.dll!WTF::Function<void __cdecl(void)>::operator()() Line 83
 	 	 	 	 	 	jfxwebkit.dll!WTF::Thread::entryPoint(WTF::Thread::NewThreadContext * newThreadContext=0x0000023a82d0c840) Line 178
 	 	 	 	 	 	jfxwebkit.dll!WTF::wtfThreadEntryPoint(void * data) Line 153
 	 	 	 	 	 	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		8352	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	jvm.dll!ObjectMonitor::wait(__int64 millis=0, bool interruptible, Thread * __the_thread__=0x0000023a900f3000) Line 1508
 	 	 	 	 	 	jvm.dll!ObjectSynchronizer::wait(Handle obj={...}, __int64 millis=0, Thread * __the_thread__=0x0000023a900f3000) Line 500
 	 	 	 	 	 	jvm.dll!JVM_MonitorWait(JNIEnv_ * env, _jobject * handle, __int64 ms=0) Line 626
 	 	 	 	 	 	0000023af5ceb914()
 	 	 	 	 	 	0000023a900f3000()
 	 	 	 	 	 	00000000c9d53950()
 	 	 	 	 	 	0000006f56eff400()
 	 	 	 	 	 	0000023a8d953db0()
 	 	 	 	 	 	00000000c9d53950()
 	 	 	 	 	 	0000006f56eff3e0()
 	 	 	 	 	 	0000006f56eff448()
 	 	 	 	 	 	0000023aee0fa0c3()
 	 	 	 	 	 	00000000cd40eb40()
 	 	 	 	 	 	00000000cd40eb58()
 	 	 	 	 	 	0000000000000051()

Not Flagged		10152	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023a900ef000) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023a900ef000) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	jvm.dll!SafepointMechanism::block_if_requested(JavaThread * thread=0x0000023a900ef000) Line 73
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition_and_fence(JavaThread *) Line 142
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::trans_and_fence(JavaThreadState) Line 180
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadBlockInVM::{dtor}() Line 304
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4999) Line 5310
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x00000000c7a06ec8, unsigned char isAbsolute, __int64 time=4999906000) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000000100000005()
 	 	 	 	 	 	00000000c7a06ec8()
 	 	 	 	 	 	00000000c7a06e01()
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadInVMfromNative::{dtor}() Line 270
 	 	 	 	 	 	jvm.dll!JVM_IsInterrupted(JNIEnv_ * env, _jobject * jthread=0x0000000000000000, unsigned char clear_interrupted) Line 3196
 	 	 	 	 	 	000000012a0482d0()
 	 	 	 	 	 	00000000c7a06ee8()
 	 	 	 	 	 	000003722e5d59a0()
 	 	 	 	 	 	00000000eb787a00()
 	 	 	 	 	 	00000001eb787a00()
 	 	 	 	 	 	00000000c7a06ee8()
 	 	 	 	 	 	00000000c9e95328()
 	 	 	 	 	 	00000000c7a06ec8()
 	 	 	 	 	 	jvm.dll!os::javaTimeNanos() Line 941
 	 	 	 	 	 	0000023aeeb2784c()
 	 	 	 	 	 	00000008cf6749cd()
 	 	 	 	 	 	00000000c8793c50()
 	 	 	 	 	 	00000000c7b0e290()

Not Flagged		8012	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x0000023ae7a20000, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000023a00000005()
 	 	 	 	 	 	0000023ae7a20000()
 	 	 	 	 	 	0000006f579fef01()
 	 	 	 	 	 	0000023a900f9800()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	0000023aef40c664()
 	 	 	 	 	 	00000000ee3cda50()
 	 	 	 	 	 	0000006f579feee8()
 	 	 	 	 	 	0000023a843492c8()
 	 	 	 	 	 	0000006f579fef40()
 	 	 	 	 	 	00000000ee3cda30()
 	 	 	 	 	 	0000023a8c288aa0()
 	 	 	 	 	 	0000006f579ff058()
 	 	 	 	 	 	0000023aeec61174()
 	 	 	 	 	 	0000006f579fef90()
 	 	 	 	 	 	0000023aee0f9890()
 	 	 	 	 	 	0000023aee0f9890()
 	 	 	 	 	 	0000000000000001()
 	 	 	 	 	 	00000000ee3cda30()
 	 	 	 	 	 	0000006f579fef48()
 	 	 	 	 	 	0000023aff61d758()
 	 	 	 	 	 	0000006f579fefa8()
 	 	 	 	 	 	0000023aff61ee50()

Not Flagged		10212	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x00000000ca2ed230, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000000000000005()
 	 	 	 	 	 	00000000ca2ed230()
 	 	 	 	 	 	0000000000325001()
 	 	 	 	 	 	0000000000000010()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	0000000100726c40()
 	 	 	 	 	 	0000006f57dfef28()
 	 	 	 	 	 	0000023af5ce79c3()
 	 	 	 	 	 	0000023af07fe4c0()
 	 	 	 	 	 	jvm.dll!00007ff833d0eff0()
 	 	 	 	 	 	00000000eb6da758()
 	 	 	 	 	 	00000000eb6da1d8()
 	 	 	 	 	 	00000000ca2ed284()
 	 	 	 	 	 	0000023af5e55f7c()
 	 	 	 	 	 	00000000ca2ed230()
 	 	 	 	 	 	00000000c28a9ad8()
 	 	 	 	 	 	00000000eba28678()
 	 	 	 	 	 	00000001eba28660()
 	 	 	 	 	 	00000000eba28660()
 	 	 	 	 	 	00000000c28a9ad8()
 	 	 	 	 	 	0000006f57dfef78()
 	 	 	 	 	 	0000023af07fe8dc()

Not Flagged		796	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x0000023ae7a20000, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000023a00000005()
 	 	 	 	 	 	0000023ae7a20000()
 	 	 	 	 	 	0000006f583fec01()
 	 	 	 	 	 	0000023a900fc800()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	0000023aef40c664()
 	 	 	 	 	 	00000000eb7b0cb8()
 	 	 	 	 	 	[Inline Frame] jvm.dll!OrderAccess::fence() Line 63
 	 	 	 	 	 	[Inline Frame] jvm.dll!InterfaceSupport::serialize_thread_state_internal(JavaThread *) Line 85
 	 	 	 	 	 	[Inline Frame] jvm.dll!InterfaceSupport::serialize_thread_state(JavaThread *) Line 76
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition(JavaThread * thread=0x0000023ae7a20000, JavaThreadState) Line 120
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::trans(JavaThreadState from, JavaThreadState to=84) Line 177
 	 	 	 	 	 	0000023aeec61174()
 	 	 	 	 	 	0000006f583fecd0()
 	 	 	 	 	 	0000023aee0f9890()
 	 	 	 	 	 	0000023aee0f9890()
 	 	 	 	 	 	0000000000000001()
 	 	 	 	 	 	00000000eb7b0c98()
 	 	 	 	 	 	0000006f583fec88()
 	 	 	 	 	 	0000023aff61d758()
 	 	 	 	 	 	0000006f583fece8()
 	 	 	 	 	 	0000023aff61ee50()

Not Flagged		8884	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x0000023ae7a20000, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000023a00000005()
 	 	 	 	 	 	0000023ae7a20000()
 	 	 	 	 	 	0000006f584fed01()
 	 	 	 	 	 	0000023a90044000()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	0000023aef40c664()
 	 	 	 	 	 	00000000ed6c0c60()
 	 	 	 	 	 	[Inline Frame] jvm.dll!OrderAccess::fence() Line 63
 	 	 	 	 	 	[Inline Frame] jvm.dll!InterfaceSupport::serialize_thread_state_internal(JavaThread *) Line 85
 	 	 	 	 	 	[Inline Frame] jvm.dll!InterfaceSupport::serialize_thread_state(JavaThread *) Line 76
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition(JavaThread * thread=0x0000023ae7a20000, JavaThreadState) Line 120
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::trans(JavaThreadState from, JavaThreadState to=84) Line 177
 	 	 	 	 	 	0000023aeec61174()
 	 	 	 	 	 	0000006f584fee40()
 	 	 	 	 	 	0000023aee0f9890()
 	 	 	 	 	 	0000023aee0f9890()
 	 	 	 	 	 	0000000000000001()
 	 	 	 	 	 	00000000ed6c0c40()
 	 	 	 	 	 	0000006f584fedf8()
 	 	 	 	 	 	0000023aff61d758()
 	 	 	 	 	 	0000006f584fee58()
 	 	 	 	 	 	0000023aff61ee50()

Not Flagged		7688	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x0000023ae7a20000, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000023a00000005()
 	 	 	 	 	 	0000023ae7a20000()
 	 	 	 	 	 	0000006f585ff101()
 	 	 	 	 	 	0000023a90046000()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	0000023aef40c664()
 	 	 	 	 	 	00000000eed6ecf0()
 	 	 	 	 	 	[Inline Frame] jvm.dll!OrderAccess::fence() Line 63
 	 	 	 	 	 	[Inline Frame] jvm.dll!InterfaceSupport::serialize_thread_state_internal(JavaThread *) Line 85
 	 	 	 	 	 	[Inline Frame] jvm.dll!InterfaceSupport::serialize_thread_state(JavaThread *) Line 76
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition(JavaThread * thread=0x0000023ae7a20000, JavaThreadState) Line 120
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::trans(JavaThreadState from, JavaThreadState to=84) Line 177
 	 	 	 	 	 	0000023aeec61174()
 	 	 	 	 	 	0000006f585ff1c0()
 	 	 	 	 	 	0000023aee0f9890()
 	 	 	 	 	 	0000023aee0f9890()
 	 	 	 	 	 	0000000000000001()
 	 	 	 	 	 	00000000eed6ecd0()
 	 	 	 	 	 	0000006f585ff178()
 	 	 	 	 	 	0000023aff61d758()
 	 	 	 	 	 	0000006f585ff1d8()
 	 	 	 	 	 	0000023aff61ee50()

Not Flagged		7720	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x00000000cd428a88, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000000100000005()
 	 	 	 	 	 	00000000cd428a88()
 	 	 	 	 	 	0000000000325301()
 	 	 	 	 	 	0000000000000010()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	0000000100726c40()
 	 	 	 	 	 	0000006f57eff4a8()
 	 	 	 	 	 	0000023af5ce79c3()
 	 	 	 	 	 	0000023af07fe4c0()
 	 	 	 	 	 	jvm.dll!00007ff833d0eff0()
 	 	 	 	 	 	00000000eb6db960()
 	 	 	 	 	 	00000000eb6db2e8()
 	 	 	 	 	 	00000000cd428adc()
 	 	 	 	 	 	0000023af5e55f7c()
 	 	 	 	 	 	00000000cd428a88()
 	 	 	 	 	 	00000000c9cd2fe8()
 	 	 	 	 	 	00000000eb796988()
 	 	 	 	 	 	00000001eb796970()
 	 	 	 	 	 	00000000eb796970()
 	 	 	 	 	 	00000000c9cd2fe8()
 	 	 	 	 	 	0000006f57eff4f8()
 	 	 	 	 	 	0000023af07fe8dc()

Not Flagged		7784	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023a9004b800) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023a9004b800) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	jvm.dll!SafepointMechanism::block_if_requested(JavaThread * thread=0x0000023a9004b800) Line 73
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition_and_fence(JavaThread *) Line 142
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::trans_and_fence(JavaThreadState) Line 180
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadBlockInVM::{dtor}() Line 304
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4999) Line 5310
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x00000000c7e300b8, unsigned char isAbsolute, __int64 time=4999844700) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000000100000005()
 	 	 	 	 	 	00000000c7e300b8()
 	 	 	 	 	 	00000000c7e30001()
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadInVMfromNative::{dtor}() Line 270
 	 	 	 	 	 	jvm.dll!JVM_IsInterrupted(JNIEnv_ * env, _jobject * jthread=0x0000000000000000, unsigned char clear_interrupted) Line 3196
 	 	 	 	 	 	000000012a03935c()
 	 	 	 	 	 	00000000c7e300d8()
 	 	 	 	 	 	000003722e5e2844()
 	 	 	 	 	 	00000000eb788600()
 	 	 	 	 	 	00000001eb788600()
 	 	 	 	 	 	00000000c7e300d8()
 	 	 	 	 	 	00000000cd0626e8()
 	 	 	 	 	 	00000000c7e300b8()
 	 	 	 	 	 	jvm.dll!os::javaTimeNanos() Line 941
 	 	 	 	 	 	0000023aeeb2784c()
 	 	 	 	 	 	00000008cf674e44()
 	 	 	 	 	 	0000006f57ffed68()
 	 	 	 	 	 	0000006f57ffed20()

Not Flagged		6288	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jfxwebkit.dll!WTF::ThreadCondition::timedWait
 	 	 	 	 	 	ntdll.dll!NtWaitForAlertByThreadId()
 	 	 	 	 	 	ntdll.dll!RtlSleepConditionVariableSRW()
 	 	 	 	 	 	KERNELBASE.dll!SleepConditionVariableSRW()
 	 	 	 	 	 	jfxwebkit.dll!WTF::ThreadCondition::timedWait(WTF::Mutex & mutex, WTF::WallTime absoluteTime) Line 391
 	 	 	 	 	 	jfxwebkit.dll!WTF::ParkingLot::parkConditionallyImpl(const void * address=0x0000023a8fdfe9a1, const WTF::ScopedLambda<bool __cdecl(void)> & validation, const WTF::ScopedLambda<void __cdecl(void)> & beforeSleep, const WTF::TimeWithDynamicClockType & timeout={...}) Line 602
 	 	 	 	 	 	[Inline Frame] jfxwebkit.dll!WTF::ParkingLot::parkConditionally(const void *) Line 82
 	 	 	 	 	 	[Inline Frame] jfxwebkit.dll!WTF::Condition::waitUntil(WTF::Lock &) Line 76
 	 	 	 	 	 	jfxwebkit.dll!WTF::MessageQueue<WTF::Function<void __cdecl(void)>>::waitForMessageFilteredWithTimeout<<lambda_b0d672860517f167f63e86807385db92>>(WTF::MessageQueueWaitResult & result=MessageQueueMessageReceived, WTF::MessageQueue<WTF::Function<void __cdecl(void)>>::waitForMessage::__l2::<lambda_b0d672860517f167f63e86807385db92> && predicate, WTF::Seconds relativeTimeout={...}) Line 154
 	 	 	 	 	 	[Inline Frame] jfxwebkit.dll!WTF::MessageQueue<WTF::Function<void __cdecl(void)>>::waitForMessage() Line 132
 	 	 	 	 	 	jfxwebkit.dll!WebCore::StorageThread::threadEntryPoint() Line 83
 	 	 	 	 	 	[Inline Frame] jfxwebkit.dll!WTF::Function<void __cdecl(void)>::operator()() Line 83
 	 	 	 	 	 	jfxwebkit.dll!WTF::Thread::entryPoint(WTF::Thread::NewThreadContext * newThreadContext=0x0000023a8fe44160) Line 178
 	 	 	 	 	 	jfxwebkit.dll!WTF::wtfThreadEntryPoint(void * data) Line 153
 	 	 	 	 	 	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		5032	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x00000000cd4708c0, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000000100000005()
 	 	 	 	 	 	00000000cd4708c0()
 	 	 	 	 	 	0000000000325501()
 	 	 	 	 	 	0000000000000010()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	0000000100726c40()
 	 	 	 	 	 	0000006f587ff2f8()
 	 	 	 	 	 	0000023af5ce79c3()
 	 	 	 	 	 	0000023af07fe4c0()
 	 	 	 	 	 	jvm.dll!00007ff833d0eff0()
 	 	 	 	 	 	00000000eb6dc1a8()
 	 	 	 	 	 	00000000eb6dbb30()
 	 	 	 	 	 	00000000cd470914()
 	 	 	 	 	 	0000023af5e55f7c()
 	 	 	 	 	 	00000000cd4708c0()
 	 	 	 	 	 	00000000c9f986f8()
 	 	 	 	 	 	00000000eb9d00b8()
 	 	 	 	 	 	00000001eb9d00a0()
 	 	 	 	 	 	00000000eb9d00a0()
 	 	 	 	 	 	00000000c9f986f8()
 	 	 	 	 	 	0000006f587ff348()
 	 	 	 	 	 	0000023af07fe8dc()

Not Flagged		1028	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x00000000cbea18a8, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000000000000005()
 	 	 	 	 	 	00000000cbea18a8()
 	 	 	 	 	 	0000000000308b01()
 	 	 	 	 	 	0000000000000010()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	0000000100726c40()
 	 	 	 	 	 	0000006f588fed18()
 	 	 	 	 	 	0000023af5ce79c3()
 	 	 	 	 	 	0000023af07fe4c0()
 	 	 	 	 	 	jvm.dll!00007ff833d0eff0()
 	 	 	 	 	 	00000000f11a6660()
 	 	 	 	 	 	00000000f11a60e0()
 	 	 	 	 	 	00000000cbea18fc()
 	 	 	 	 	 	0000023af5e55f7c()
 	 	 	 	 	 	00000000cbea18a8()
 	 	 	 	 	 	00000000c28a9ad8()
 	 	 	 	 	 	00000000f92ed3b0()
 	 	 	 	 	 	00000001f92ed398()
 	 	 	 	 	 	00000000f92ed398()
 	 	 	 	 	 	00000000c28a9ad8()
 	 	 	 	 	 	0000006f588fed68()
 	 	 	 	 	 	0000023af07fe8dc()

Not Flagged		8104	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x00000000cd428820, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000000100000005()
 	 	 	 	 	 	00000000cd428820()
 	 	 	 	 	 	000000000032a201()
 	 	 	 	 	 	0000000000000010()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	0000000100726c40()
 	 	 	 	 	 	0000006f591ff558()
 	 	 	 	 	 	0000023af5ce79c3()
 	 	 	 	 	 	0000023af07fe4c0()
 	 	 	 	 	 	jvm.dll!00007ff833d0eff0()
 	 	 	 	 	 	00000000eb6e2388()
 	 	 	 	 	 	00000000eb6e1c80()
 	 	 	 	 	 	00000000cd428874()
 	 	 	 	 	 	0000023af5e55f7c()
 	 	 	 	 	 	00000000cd428820()
 	 	 	 	 	 	00000000c9cd2fe8()
 	 	 	 	 	 	00000000ebb582c0()
 	 	 	 	 	 	00000001ebb582a8()
 	 	 	 	 	 	00000000ebb582a8()
 	 	 	 	 	 	00000000c9cd2fe8()
 	 	 	 	 	 	0000006f591ff5a8()
 	 	 	 	 	 	0000023af07fe8dc()

Not Flagged		7660	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x00000000cd470658, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000000100000005()
 	 	 	 	 	 	00000000cd470658()
 	 	 	 	 	 	000000000032a301()
 	 	 	 	 	 	0000000000000010()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	0000000100726c40()
 	 	 	 	 	 	0000006f592ff4b8()
 	 	 	 	 	 	0000023af5ce79c3()
 	 	 	 	 	 	0000023af07fe4c0()
 	 	 	 	 	 	jvm.dll!00007ff833d0eff0()
 	 	 	 	 	 	00000000eb6fe3c0()
 	 	 	 	 	 	00000000eb6fdcb8()
 	 	 	 	 	 	00000000cd4706ac()
 	 	 	 	 	 	0000023af5e55f7c()
 	 	 	 	 	 	00000000cd470658()
 	 	 	 	 	 	00000000c9f986f8()
 	 	 	 	 	 	00000000ebb69470()
 	 	 	 	 	 	00000001ebb69458()
 	 	 	 	 	 	00000000ebb69458()
 	 	 	 	 	 	00000000c9f986f8()
 	 	 	 	 	 	0000006f592ff508()
 	 	 	 	 	 	0000023af07fe8dc()

Not Flagged		5484	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x0000023ae7a20000, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000023a00000005()
 	 	 	 	 	 	0000023ae7a20000()
 	 	 	 	 	 	0000006f59aff201()
 	 	 	 	 	 	0000023ad9231800()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	00000000c2330100()
 	 	 	 	 	 	00000000c78389d8()
 	 	 	 	 	 	00000000c784cb38()
 	 	 	 	 	 	00000000ec063f00()
 	 	 	 	 	 	00000000ec063518()

Not Flagged		1488	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	win32u.dll!NtUserGetMessage
 	 	 	 	 	 	win32u.dll!NtUserGetMessage()
 	 	 	 	 	 	user32.dll!GetMessageW()
 	 	 	 	 	 	jfxwebkit.dll!WTF::RunLoop::run() Line 73
 	 	 	 	 	 	[Inline Frame] jfxwebkit.dll!WTF::Function<void __cdecl(void)>::operator()() Line 83
 	 	 	 	 	 	jfxwebkit.dll!WTF::Thread::entryPoint(WTF::Thread::NewThreadContext * newThreadContext=0x0000023ad6a63240) Line 178
 	 	 	 	 	 	jfxwebkit.dll!WTF::wtfThreadEntryPoint(void * data) Line 153
 	 	 	 	 	 	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		2440	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x0000023ae7a20000, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000023a00000005()
 	 	 	 	 	 	0000023ae7a20000()
 	 	 	 	 	 	0000006f561fe501()
 	 	 	 	 	 	0000023a90045000()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	00000000c2307098()
 	 	 	 	 	 	0000023aff5ef3e0()

Not Flagged		7672	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023a90043800) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023a90043800) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested(JavaThread *) Line 73
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition_and_fence(JavaThread * thread=0x0000023a90043800, JavaThreadState) Line 142
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::trans_and_fence(JavaThreadState from, JavaThreadState to=_thread_in_vm) Line 180
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadBlockInVM::{dtor}() Line 304
 	 	 	 	 	 	jvm.dll!ObjectMonitor::wait(__int64 millis=1000, bool interruptible, Thread * __the_thread__=0x0000023a90043800) Line 1536
 	 	 	 	 	 	jvm.dll!ObjectSynchronizer::wait(Handle obj={...}, __int64 millis=1000, Thread * __the_thread__=0x0000023a90043800) Line 500
 	 	 	 	 	 	jvm.dll!JVM_MonitorWait(JNIEnv_ * env, _jobject * handle, __int64 ms=1000) Line 626
 	 	 	 	 	 	0000023af5ceb914()
 	 	 	 	 	 	0000023a90043800()
 	 	 	 	 	 	0000023aff0f0c10()
 	 	 	 	 	 	0000006f56fff170()
 	 	 	 	 	 	0000000000001398()
 	 	 	 	 	 	00000000cf901060()
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadInVMfromJavaNoAsyncException::{dtor}() Line 322
 	 	 	 	 	 	jvm.dll!InterpreterRuntime::monitorenter(JavaThread * thread=0x0000023aff0f0c10, BasicObjectLock * elem) Line 770
 	 	 	 	 	 	0000023aee10e951()
 	 	 	 	 	 	0000006f56fff208()
 	 	 	 	 	 	0000023aee0fa0c3()
 	 	 	 	 	 	0000023aee0fa0c3()
 	 	 	 	 	 	00000000000003e8()

Not Flagged		10192	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x00000000ce443f68, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000006f00000005()
 	 	 	 	 	 	00000000ce443f68()
 	 	 	 	 	 	00000000002ced01()
 	 	 	 	 	 	0000000000000010()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	0000000100726c40()
 	 	 	 	 	 	0000006f575ff178()
 	 	 	 	 	 	0000023af5ce79c3()
 	 	 	 	 	 	0000023af07fe4c0()
 	 	 	 	 	 	jvm.dll!00007ff833d0eff0()
 	 	 	 	 	 	00000000ee1e68e8()
 	 	 	 	 	 	00000000ee1e6368()
 	 	 	 	 	 	00000000ce443fbc()
 	 	 	 	 	 	0000023af5e55f7c()
 	 	 	 	 	 	00000000ce443f68()
 	 	 	 	 	 	00000000c28a9ad8()
 	 	 	 	 	 	00000000f92ed370()
 	 	 	 	 	 	00000001f92ed358()
 	 	 	 	 	 	00000000f92ed358()
 	 	 	 	 	 	00000000c28a9ad8()
 	 	 	 	 	 	0000006f575ff1c8()
 	 	 	 	 	 	0000023af07fe8dc()

Not Flagged		6868	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x00000000ce444768, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000006f00000005()
 	 	 	 	 	 	00000000ce444768()
 	 	 	 	 	 	00000000002ece01()
 	 	 	 	 	 	0000000000000010()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	0000000100726c40()
 	 	 	 	 	 	0000006f556ff178()
 	 	 	 	 	 	0000023af5ce79c3()
 	 	 	 	 	 	0000023af07fe4c0()
 	 	 	 	 	 	jvm.dll!00007ff833d0eff0()
 	 	 	 	 	 	00000000ef816e88()
 	 	 	 	 	 	00000000ef816908()
 	 	 	 	 	 	00000000ce4447bc()
 	 	 	 	 	 	0000023af5e55f7c()
 	 	 	 	 	 	00000000ce444768()
 	 	 	 	 	 	00000000c28a9ad8()
 	 	 	 	 	 	00000000f92ed390()
 	 	 	 	 	 	00000001f92ed378()
 	 	 	 	 	 	00000000f92ed378()
 	 	 	 	 	 	00000000c28a9ad8()
 	 	 	 	 	 	0000006f556ff1c8()
 	 	 	 	 	 	0000023af07fe8dc()

Not Flagged		7988	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023ad9237000) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023ad9237000) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	jvm.dll!SafepointMechanism::block_if_requested(JavaThread * thread=0x0000023ad9237000) Line 73
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition_and_fence(JavaThread *) Line 142
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::trans_and_fence(JavaThreadState) Line 180
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadBlockInVM::{dtor}() Line 304
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=59983) Line 5310
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x00000000ce49b758, unsigned char isAbsolute, __int64 time=59983634500) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000000100000005()
 	 	 	 	 	 	00000000ce49b758()
 	 	 	 	 	 	00000000ce49b701()
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadInVMfromNative::{dtor}() Line 270
 	 	 	 	 	 	jvm.dll!JVM_IsInterrupted(JNIEnv_ * env, _jobject * jthread=0x0000000000000000, unsigned char clear_interrupted) Line 3196
 	 	 	 	 	 	0000000df74da044()
 	 	 	 	 	 	00000000ce49bc88()
 	 	 	 	 	 	0000037e84286fd0()
 	 	 	 	 	 	00000000eb335f28()
 	 	 	 	 	 	00000001eb335f28()
 	 	 	 	 	 	00000000ce49bc88()
 	 	 	 	 	 	00000000ce49b798()
 	 	 	 	 	 	00000000ce49b758()
 	 	 	 	 	 	jvm.dll!os::javaTimeNanos() Line 941
 	 	 	 	 	 	0000023aeeb2784c()
 	 	 	 	 	 	00000008ce356355()
 	 	 	 	 	 	00000000ce49b758()
 	 	 	 	 	 	00000000ce49b668()
 	 	 	 	 	 	00000000ce49b578()
 	 	 	 	 	 	00000000ce49b748()
 	 	 	 	 	 	0000023adde19760()
 	 	 	 	 	 	00000000ce49b608()
 	 	 	 	 	 	jvm.dll!os::javaTimeNanos() Line 941
 	 	 	 	 	 	0000023aee9aeb2c()
 	 	 	 	 	 	00000000ce49b758()
 	 	 	 	 	 	00000000ce49b668()
 	 	 	 	 	 	00000000ce49b748()
 	 	 	 	 	 	0000037e84286d78()
 	 	 	 	 	 	00000000ce49b6d8()
 	 	 	 	 	 	00000000ce49b798()
 	 	 	 	 	 	0000023adde1cab0()

Not Flagged		10204	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!Parker::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=4294967295) Line 5304
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x0000023ae7a20000, unsigned char isAbsolute, __int64 time=0) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000023a00000005()
 	 	 	 	 	 	0000023ae7a20000()
 	 	 	 	 	 	0000006f547fea01()
 	 	 	 	 	 	0000023ad9232000()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	0000023a00000000()
 	 	 	 	 	 	0000006f547fec50()
 	 	 	 	 	 	0000006f547fec00()
 	 	 	 	 	 	00000000f18d3c68()
 	 	 	 	 	 	[Inline Frame] jvm.dll!OrderAccess::fence() Line 63
 	 	 	 	 	 	[Inline Frame] jvm.dll!InterfaceSupport::serialize_thread_state_internal(JavaThread *) Line 85
 	 	 	 	 	 	[Inline Frame] jvm.dll!InterfaceSupport::serialize_thread_state(JavaThread *) Line 76
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition(JavaThread * thread=0x0000023ae7a20000, JavaThreadState) Line 120
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::trans(JavaThreadState from, JavaThreadState to=84) Line 177
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadInVMfromJava::{dtor}() Line 231
 	 	 	 	 	 	jvm.dll!InterpreterRuntime::resolve_from_cache(JavaThread * thread=0x0000023ad9232000, Bytecodes::Code bytecode) Line 1011
 	 	 	 	 	 	00000000c8753a30()
 	 	 	 	 	 	0000023a83e2f3b0()
 	 	 	 	 	 	0000006f547feb98()
 	 	 	 	 	 	0000006f547fec00()
 	 	 	 	 	 	0000006f547fec50()
 	 	 	 	 	 	0000023aee0fa0c3()

Not Flagged		4264	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023ad9238000) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023ad9238000) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	jvm.dll!SafepointMechanism::block_if_requested(JavaThread * thread=0x0000023ad9238000) Line 73
 	 	 	 	 	 	jvm.dll!JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread * thread=0x0000023ad9238000) Line 2507
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::transition_from_native(JavaThread * thread=0x0000023ad9238000, JavaThreadState to=_thread_in_vm) Line 175
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::trans_from_native(JavaThreadState) Line 179
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadInVMfromNative::{ctor}(JavaThread *) Line 267
 	 	 	 	 	 	jvm.dll!jni_SetByteArrayRegion(JNIEnv_ * env, _jbyteArray * array=0x0000006f577feb40, long start, long len, const char * buf=0x0000006f577fca70) Line 2896
 	 	 	 	 	 	java.dll!readBytes(const JNINativeInterface_ * * env=0x0000023ad9238348, _jobject * this=0x0000006f577feb38, _jobject * bytes=0x0000006f577feb40, long off=0, long len, _jfieldID * fid=0x0000000000000042) Line 111
 	 	 	 	 	 	java.dll!Java_java_io_FileInputStream_readBytes(const JNINativeInterface_ * * env, _jobject * this, _jobject * bytes, long off, long len=8192) Line 73
 	 	 	 	 	 	0000023af6094131()

Not Flagged		7624	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	java.dll!handleRead
 	 	 	 	 	 	ntdll.dll!NtReadFile()
 	 	 	 	 	 	KERNELBASE.dll!ReadFile()
 	 	 	 	 	 	java.dll!handleRead(__int64 fd, void * buf, long len) Line 492
 	 	 	 	 	 	java.dll!readBytes(const JNINativeInterface_ * * env=0x0000023ad9236b48, _jobject * this=0x0000006f578feeb8, _jobject * bytes=0x0000006f578feec0, long off=0, long len, _jfieldID * fid=0x0000000000000042) Line 109
 	 	 	 	 	 	java.dll!Java_java_io_FileInputStream_readBytes(const JNINativeInterface_ * * env, _jobject * this, _jobject * bytes, long off, long len=8192) Line 73
 	 	 	 	 	 	0000023af6094131()
 	 	 	 	 	 	0000006f578fee80()
 	 	 	 	 	 	0000023a8251c948()
 	 	 	 	 	 	0000006f578ff438()
 	 	 	 	 	 	0000023aef56abf9()
 	 	 	 	 	 	0000000000002000()
 	 	 	 	 	 	00000000cea75030()
 	 	 	 	 	 	00000000cf903c58()
 	 	 	 	 	 	0000023aef56ac24()
 	 	 	 	 	 	0000006f578fef10()
 	 	 	 	 	 	00000000f19b5c68()
 	 	 	 	 	 	0000023aeef1d534()

Not Flagged		1852	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023ad9238800) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023ad9238800) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested(JavaThread *) Line 73
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition_and_fence(JavaThread * thread=0x0000023ad9238800, JavaThreadState) Line 142
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::trans_and_fence(JavaThreadState from, JavaThreadState to=_thread_in_vm) Line 180
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadBlockInVM::{dtor}() Line 304
 	 	 	 	 	 	jvm.dll!ObjectMonitor::wait(__int64 millis=300000, bool interruptible, Thread * __the_thread__=0x0000023ad9238800) Line 1536
 	 	 	 	 	 	jvm.dll!ObjectSynchronizer::wait(Handle obj={...}, __int64 millis=300000, Thread * __the_thread__=0x0000023ad9238800) Line 500
 	 	 	 	 	 	jvm.dll!JVM_MonitorWait(JNIEnv_ * env, _jobject * handle, __int64 ms=300000) Line 626
 	 	 	 	 	 	0000023af5ceb914()
 	 	 	 	 	 	0000023ad9238800()
 	 	 	 	 	 	0000023aff0f0c10()
 	 	 	 	 	 	0000006f570ff510()
 	 	 	 	 	 	0000023a8e1c50d0()
 	 	 	 	 	 	00000000cea6e6d0()
 	 	 	 	 	 	0000023ad9fd7587()
 	 	 	 	 	 	0000006f570ff980()
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadInVMfromJavaNoAsyncException::{dtor}() Line 322
 	 	 	 	 	 	jvm.dll!InterpreterRuntime::monitorenter(JavaThread * thread=0x0000023aff0f0c10, BasicObjectLock * elem) Line 770
 	 	 	 	 	 	0000023aee0fa0c3()
 	 	 	 	 	 	0000023ad9238800()
 	 	 	 	 	 	0000023aee0fa0c3()
 	 	 	 	 	 	00000000000493e0()

Not Flagged		10040	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023ad9233000) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023ad9233000) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	jvm.dll!SafepointMechanism::block_if_requested(JavaThread * thread=0x0000023ad9233000) Line 73
 	 	 	 	 	 	jvm.dll!JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread * thread=0x0000023ad9233000) Line 2507
 	 	 	 	 	 	jvm.dll!ThreadStateTransition::transition_from_native(JavaThread * thread=0x0000023ad9233000, JavaThreadState to=_thread_in_vm) Line 175
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::trans_from_native(JavaThreadState) Line 179
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadInVMfromNative::{ctor}(JavaThread *) Line 267
 	 	 	 	 	 	jvm.dll!jni_SetByteArrayRegion(JNIEnv_ * env, _jbyteArray * array=0x0000006f576febf8, long start, long len, const char * buf=0x0000023a8cb6b180) Line 2896
 	 	 	 	 	 	net.dll!Java_java_net_SocketInputStream_socketRead0(const JNINativeInterface_ * * env=0x0000023ad9233348, _jobject * this=0x0000006f576fec90, _jobject * fdObj=0x0000006f576febf0, _jobject * data=0x0000006f576febf8, long off=0, long len=8192, long timeout=0) Line 123
 	 	 	 	 	 	0000023af66e94cf()
 	 	 	 	 	 	0000023ad9233000()
 	 	 	 	 	 	0000006f576fec90()

Not Flagged		1456	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023ad9239800) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023ad9239800) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	jvm.dll!SafepointMechanism::block_if_requested(JavaThread * thread=0x0000023ad9239800) Line 73
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition_and_fence(JavaThread *) Line 142
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::trans_and_fence(JavaThreadState) Line 180
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadBlockInVM::{dtor}() Line 304
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=15000) Line 5310
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x00000000cea6c170, unsigned char isAbsolute, __int64 time=15000000000) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000000000000005()
 	 	 	 	 	 	00000000cea6c170()
 	 	 	 	 	 	0000000000002001()
 	 	 	 	 	 	0000023af603c08c()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	00000000cea6c458()
 	 	 	 	 	 	000000037e11d600()
 	 	 	 	 	 	jvm.dll!os::javaTimeNanos() Line 941
 	 	 	 	 	 	0000023af61eb744()
 	 	 	 	 	 	00000008d186b880()
 	 	 	 	 	 	00000000ed1fec10()
 	 	 	 	 	 	0000006f57afef00()
 	 	 	 	 	 	0000023aefa835cc()
 	 	 	 	 	 	00000000ed14f190()
 	 	 	 	 	 	000000037e11d600()
 	 	 	 	 	 	00000000cea6c1b0()
 	 	 	 	 	 	0000037556b1e800()
 	 	 	 	 	 	00000000ed14f178()
 	 	 	 	 	 	00000001ed14f178()
 	 	 	 	 	 	00000000cea6c1b0()
 	 	 	 	 	 	00000000cea6c1e8()
 	 	 	 	 	 	00000000cea6c170()
 	 	 	 	 	 	0000000000000246()
 	 	 	 	 	 	00000000cf911ea0()
 	 	 	 	 	 	0000023af632ffc4()
 	 	 	 	 	 	0000006f57afee50()
 	 	 	 	 	 	0000006f57afee50()
 	 	 	 	 	 	00000000cea6c1b0()
 	 	 	 	 	 	0000023af62bf57c()
 	 	 	 	 	 	00000000cea6c108()
 	 	 	 	 	 	cea6c138cea6c160()
 	 	 	 	 	 	00000000cea6c160()
 	 	 	 	 	 	00000000cea6c138()
 	 	 	 	 	 	00000000cf914310()
 	 	 	 	 	 	00000000cf913f30()
 	 	 	 	 	 	00000000cf911840()
 	 	 	 	 	 	00000000cf911808()
 	 	 	 	 	 	0000006f57afef00()
 	 	 	 	 	 	0000023aee0f9e40()
 	 	 	 	 	 	0000023aee0f9e40()
 	 	 	 	 	 	00000000c0504ae0()
 	 	 	 	 	 	0000000000003a98()

Not Flagged		3960	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023ad923a800) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023ad923a800) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	jvm.dll!SafepointMechanism::block_if_requested(JavaThread * thread=0x0000023ad923a800) Line 73
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition_and_fence(JavaThread *) Line 142
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::trans_and_fence(JavaThreadState) Line 180
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadBlockInVM::{dtor}() Line 304
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=59999) Line 5310
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x00000000cea6e82c, unsigned char isAbsolute, __int64 time=59999994200) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000023a00000005()
 	 	 	 	 	 	00000000cea6e82c()
 	 	 	 	 	 	00000000c1ac0a01()
 	 	 	 	 	 	00000000cea6c1e8()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	00000000ed1e0e28()

Not Flagged		4180	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023ad9234800) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023ad9234800) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	jvm.dll!SafepointMechanism::block_if_requested(JavaThread * thread=0x0000023ad9234800) Line 73
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition_and_fence(JavaThread *) Line 142
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::trans_and_fence(JavaThreadState) Line 180
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadBlockInVM::{dtor}() Line 304
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=59999) Line 5310
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x00000000c6fc171c, unsigned char isAbsolute, __int64 time=59999994000) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000000000000005()
 	 	 	 	 	 	00000000c6fc171c()
 	 	 	 	 	 	00000000ceaa1201()
 	 	 	 	 	 	00000000ceaa0ff0()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	0000023a84349558()

Not Flagged		6380	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023ad9235800) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!SafepointSynchronize::block(JavaThread * thread=0x0000023ad9235800) Line 939
 	 	 	 	 	 	[Inline Frame] jvm.dll!SafepointMechanism::block_if_requested_local_poll(JavaThread *) Line 63
 	 	 	 	 	 	jvm.dll!SafepointMechanism::block_if_requested(JavaThread * thread=0x0000023ad9235800) Line 73
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::transition_and_fence(JavaThread *) Line 142
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadStateTransition::trans_and_fence(JavaThreadState) Line 180
 	 	 	 	 	 	[Inline Frame] jvm.dll!ThreadBlockInVM::{dtor}() Line 304
 	 	 	 	 	 	jvm.dll!Parker::park(bool isAbsolute, __int64 time=59999) Line 5310
 	 	 	 	 	 	jvm.dll!Unsafe_Park(JNIEnv_ * env, _jobject * unsafe=0x00000000cea6e82c, unsigned char isAbsolute, __int64 time=59999994100) Line 945
 	 	 	 	 	 	0000023af5ceae18()
 	 	 	 	 	 	0000000000000005()
 	 	 	 	 	 	00000000cea6e82c()
 	 	 	 	 	 	00000000f1bbf001()
 	 	 	 	 	 	00000000cea75258()
 	 	 	 	 	 	00000000c1ac0a38()
 	 	 	 	 	 	00000000f1f1e6b0()

Not Flagged		7600	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	ucrtbase.dll!common_end_thread
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	ntdll.dll!LdrpDrainWorkQueue()
 	 	 	 	 	 	ntdll.dll!LdrShutdownThread()
 	 	 	 	 	 	ntdll.dll!RtlExitUserThread()
 	 	 	 	 	 	KERNELBASE.dll!FreeLibraryAndExitThread()
 	 	 	 	 	 	ucrtbase.dll!common_end_thread()
 	 	 	 	 	 	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		9140	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	jvm.dll!os::PlatformEvent::park
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	KERNELBASE.dll!WaitForSingleObjectEx()
 	 	 	 	 	 	jvm.dll!os::PlatformEvent::park() Line 5229
 	 	 	 	 	 	[Inline Frame] jvm.dll!ParkCommon(ParkEvent *) Line 404
 	 	 	 	 	 	jvm.dll!Monitor::ILock(Thread * Self=0x0000023a900f5800) Line 465
 	 	 	 	 	 	[Inline Frame] jvm.dll!Monitor::lock_without_safepoint_check(Thread *) Line 938
 	 	 	 	 	 	jvm.dll!Monitor::lock_without_safepoint_check() Line 944
 	 	 	 	 	 	jvm.dll!attach_current_thread(JavaVM_ * vm=0x0000000000000000, void * * penv=0x0000006f586ff770, void * _args=0x0000000000000000, bool daemon) Line 4193
 	 	 	 	 	 	[Inline Frame] jfxwebkit.dll!JavaVM_::AttachCurrentThread(void * *) Line 1939
 	 	 	 	 	 	[Inline Frame] jfxwebkit.dll!WTF::AttachThreadToJavaEnv<0>::{ctor}() Line 91
 	 	 	 	 	 	jfxwebkit.dll!WTF::isMainThread() Line 100
 	 	 	 	 	 	[Inline Frame] jfxwebkit.dll!WTF::shouldRemoveThreadFromThreadGroup() Line 230
 	 	 	 	 	 	jfxwebkit.dll!WTF::Thread::didExit() Line 244
 	 	 	 	 	 	[Inline Frame] jfxwebkit.dll!WTF::Thread::ThreadHolder::{dtor}() Line 280
 	 	 	 	 	 	jfxwebkit.dll!WTF::`dynamic atexit destructor for 's_threadHolder''()
 	 	 	 	 	 	jfxwebkit.dll!__dyn_tls_dtor(void * __formal=0x000000007ffe0385, const unsigned long dwReason, void * __formal) Line 119
 	 	 	 	 	 	ntdll.dll!LdrpCallInitRoutine()
 	 	 	 	 	 	ntdll.dll!LdrpCallTlsInitializers()
 	 	 	 	 	 	ntdll.dll!LdrShutdownThread()
 	 	 	 	 	 	ntdll.dll!RtlExitUserThread()
 	 	 	 	 	 	KERNELBASE.dll!FreeLibraryAndExitThread()
 	 	 	 	 	 	ucrtbase.dll!common_end_thread()
 	 	 	 	 	 	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>()
 	 	 	 	 	 	kernel32.dll!BaseThreadInitThunk()
 	 	 	 	 	 	ntdll.dll!RtlUserThreadStart()

Not Flagged		9712	0	Worker Thread	ucrtbase.dll!thread_start<unsigned int (__cdecl*)(void *),1>	ntdll.dll!NtWaitForSingleObject
 	 	 	 	 	 	ntdll.dll!NtWaitForSingleObject()
 	 	 	 	 	 	ntdll.dll!LdrpDrainWorkQueue()
 	 	 	 	 	 	ntdll.dll!LdrpInitializeThread()
 	 	 	 	 	 	ntdll.dll!_LdrpInitialize()
 	 	 	 	 	 	ntdll.dll!LdrpInitialize()
 	 	 	 	 	 	ntdll.dll!LdrInitializeThunk()

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
This issue is unfortunately reproducible only on one of our machines (with production application). It happens always after a certain period of application usage (usually 2-3 minutes). 

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The application should not freeze. 
ACTUAL -
Application completely freezes. 

---------- BEGIN SOURCE ----------
Unfortunately we can't provide you with the source code as this is happening in the production code. Also we've tried to came up with SSCCE but we couldn't as we can't identify what exactly is causing this freeze.

So if you can point us to what is causing it - we can try to prepare a simple example program and check whether we can reproduce it on this single machine.
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
There is no workaround at the time of writing this.

FREQUENCY : always


",,,,,,,,,,JDK-8265626,JDK-8265957,JDK-8266865,,,,,,,,,,,JDK-8262276,,,,,,,,,,JDK-8266228,JDK-8262931,,,JDK-8262931,JDK-8297500,,,,,JDK-8260238,JDK-8265847,,,,,"2021-04-04 20:57;pnarayanaswa;Additional_information_from_submitter.txt;https://bugs.openjdk.org/secure/attachment/93942/Additional_information_from_submitter.txt",,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i2s0wr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,Not verified,,"2021-04-04 20:57;pnarayanaswa;Additional information from submitter:
===========================
I am sending another thread dump. This time a native debug build with assertions disabled was used as suggested by OpenJfx team in ""OpenJFX custom build - Java application crash (semi-related to JDK-8262276)"" mailing list thread:
<PLEASE><SEE><ATTACHMENTS>;;;","2021-04-20 12:47;roboduke;Changeset: 49d2126e
Author:    Arun Joseph <ajoseph@openjdk.org>
Date:      2021-04-20 19:46:42 +0000
URL:       https://git.openjdk.java.net/jfx/commit/49d2126e
;;;","2021-05-11 14:17;pnarayanaswa;Mail to submitter:
=============
The issue has been resolved in Java FX 17 [1].
Please share your feedback checking in early-access builds.

[1] https://gluonhq.com/products/javafx/;;;",,,,,,,,,,,,,,,,,,,,,,,,,
SSLEngine reports NEED_WRAP continuously without producing any further output,JDK-8263779,5042579,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,xuelei,webbuggrp,webbuggrp,2021-02-22 07:58,2021-09-23 07:01,2023-10-01 09:57,2021-04-27 20:22,11,17,8,,,,,,17,security-libs,,0,additional-information-not-received,dcsaw,noreg-external,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Ubuntu 20.04, AdoptOpenJDK 11.0.10 and 1.8.0_282

A DESCRIPTION OF THE PROBLEM :
By connecting the SSLEngine with a misbehaving peer SSL implementation, it can get into a state where it calling `wrap` reports getStatus == OK, getHandshakeStatus === NEED_WRAP but still doesn't produce any further output.

If not explicitly guarded against this scenario, this situation can make the driving code run into a spin loop, because it expects the SSLEngine to eventually make progress.

This is also a potential DoS vector against servers.

See https://bugs.openjdk.java.net/browse/JDK-8240071 for a similar bug (the linked duplicate is not publicly accessible so I cannot say if or how it was resolved).

I stepped through the JDK 11.0.10 code and found this:

    * engine.getHandshakeStatus() returns NEED_WRAP if !outputRecord.isEmpty (i.e. there's output ready to be sent, that's the case here)
    * on the other hand outputRecord.isClosed is also true, which prevents the SSLEngine from actually producing any further output

From what I can see, the problem happens when the server SSLEngine consumes an ""unexpected message"" alert from the client.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
See https://github.com/akka/akka/issues/29922 for the initial bug report against Akka. It contains a reproducer that emulates a broken SSL implementation on the peer by randomly throwing packets away.

This runs into the described spin loop after a few iterations a few seconds after the start.

The exact conditions leading to the condition are unclear.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
SSLEngine should fail eagerly instead of reaching invalid states. (E.g. OutputRecord should guard against being non empty and closed at the same time).
ACTUAL -
wrap does not produce any output.

---------- BEGIN SOURCE ----------
https://github.com/maxcom/akka-http-tls-stress
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Check invariant that if status == OK, handshakeStatus == NEED_WRAP, wrap must have produced some output or fail otherwise.

FREQUENCY : rarely


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ro1n:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,Not verified,,"2021-02-23 03:07;tongwan;Requested the detailed steps/commands of running the test case from the submitter.;;;","2021-03-01 17:58;xuelei;[~tongwan] could this reproduced in JDK 16?;;;","2021-03-11 17:57;tongwan;Additional inform the submitter:
I created a fork of the original reproducer I mentioned in the ticket and added more information about how to build a binary jar with it. See https://github.com/jrudolph/akka-http-tls-stress. It's not really stand-alone but it exhibits the issue. Let me know if that suffices or if you need a more minimized form.;;;","2021-03-11 21:02;tongwan;Requested the submitter to provide more details of the server into the state where it doesn't fail but also doesn't produce any further output.;;;","2021-03-30 23:29;tongwan;Requested the submitter to verify the patch.;;;","2021-04-22 08:39;xuelei;No new regression test.   Checked with the test case provided by the submitter: https://github.com/maxcom/akka-http-tls-stress 
;;;","2021-04-27 20:22;roboduke;Changeset: 1a37bce5
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2021-04-28 03:21:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1a37bce5afc55ad13d1406a989dbf58992746204
;;;","2021-05-10 05:09;tongwan;Request the submitter to verify the fix with the latest version of JDK at https://jdk.java.net/17/;;;","2021-09-23 07:01;tongwan;No response from the submitter.;;;",,,,,,,,,,,,,,,,,,,
Fix monocle JNI signatures for instance methods,JDK-8263778,5044807,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jvos,jvos,jvos,2021-03-18 00:29,2021-09-07 05:08,2023-10-01 09:57,2021-03-20 09:36,jfx17,,,,,,,,jfx17,javafx,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,,"A number of Monocle methods have a wrong JNI signature, where we use a `jclass` instead of `jobject` type as the second parameter on instance methods.
See https://github.com/openjdk/jfx/pull/426 where this is mentioned. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s1fv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-03-18 09:58;kcr;One thing that might help detect and avoid similar problems in the future is to include the javac-generated .h files in the native source files that contain the JNI functions. Among other things, it will ensure that the signatures match. We do that already in many places, but not all.;;;","2021-03-19 03:50;jvos;I tried that, but there is no warning generated for this.

In <jni.h> we have

`typedef jobject jclass`

hence the compiler doesn't care (with -Wall -Werror)
It would still be better to use the correct name (jobject OR jclass) but I doubt this can be checked by the compiler when we include the generated header file?;;;","2021-03-19 04:41;kcr;Oh, I hadn't tried it, but you're right in that it doesn't help for this case. In any event, this isn't a high priority issue.;;;","2021-03-20 09:36;roboduke;Changeset: d4d57fb1
Author:    Johan Vos <jvos@openjdk.org>
Date:      2021-03-20 16:36:10 +0000
URL:       https://git.openjdk.java.net/jfx/commit/d4d57fb1
;;;",,,,,,,,,,,,,,,,,,,,,,,,
C2: igv_print() crash unexpectedly when called from debugger,JDK-8263775,5044803,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yyang,yyang,yyang,2021-03-17 22:23,2021-09-30 01:41,2023-10-01 09:57,2021-03-18 06:08,15,16,17,,,,,,17,hotspot,,0,alibaba-interest,c2,diagnostics,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,"#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/qingfeng.yy/openjdk16_so_warning/jdk/src/hotspot/share/opto/idealGraphPrinter.cpp:771), pid=69202, tid=69299
#  fatal error: Couldn't connect to visualizer at 127.0.0.1:4444
#
# JRE version: OpenJDK Runtime Environment (17.0) (slowdebug build 17-internal+0-adhoc.qingfengyy.jdk)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 17-internal+0-adhoc.qingfengyy.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xaaaf59]  IdealGraphPrinter::init_network_stream()+0x107
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Dapplication.home=/home/qingfeng.yy/openjdk16_so_warning/jdk/build/linux-x86_64-server-slowdebug/images/jdk --add-modules=ALL-DEFAULT -Xms8m -XX:-OptoRemoveUseless -Dtest.vm.opts=-XX:-OptoRemoveUseless -Dtest.tool.vm.opts=-J-XX:-OptoRemoveUseless -Dtest.compiler.opts= -Dtest.java.opts= -Dtest.jdk=/home/qingfeng.yy/openjdk16_so_warning/jdk/build/linux-x86_64-server-slowdebug/images/jdk -Dcompile.jdk=/home/qingfeng.yy/openjdk16_so_warning/jdk/build/linux-x86_64-server-slowdebug/images/jdk -Dtest.timeout.factor=5.0 -Dtest.root=/home/qingfeng.yy/openjdk16_so_warning/jdk/test/hotspot/jtreg -Dtest.name=compiler/c2/Test7179138_1.java -Dtest.file=/home/qingfeng.yy/openjdk16_so_warning/jdk/test/hotspot/jtreg/compiler/c2/Test7179138_1.java -Dtest.src=/home/qingfeng.yy/openjdk16_so_warning/jdk/test/hotspot/jtreg/compiler/c2 -Dtest.src.path=/home/qingfeng.yy/openjdk16_so_warning/jdk/test/hotspot/jtreg/compiler/c2 -Dtest.classes=/home/qingfeng.yy/openjdk16_so_warning/jdk/JTwork/classes/0/compiler/c2/Test7179138_1.d -Dtest.class.path=/home/qingfeng.yy/openjdk16_so_warning/jdk/JTwork/classes/0/compiler/c2/Test7179138_1.d -Djdk.module.main=jdk.compiler jdk.compiler/com.sun.tools.javac.Main -d /home/qingfeng.yy/openjdk16_so_warning/jdk/JTwork/classes/0/compiler/c2/Test7179138_1.d -sourcepath /home/qingfeng.yy/openjdk16_so_warning/jdk/test/hotspot/jtreg/compiler/c2 -classpath /home/qingfeng.yy/openjdk16_so_warning/jdk/test/hotspot/jtreg/compiler/c2:/home/qingfeng.yy/openjdk16_so_warning/jdk/JTwork/classes/0/compiler/c2/Test7179138_1.d /home/qingfeng.yy/openjdk16_so_warning/jdk/test/hotspot/jtreg/compiler/c2/Test7179138_1.java

Host: e69e13043.et15sqa, Intel(R) Xeon(R) Platinum 8163 CPU @ 2.50GHz, 96 cores, 503G, Alibaba Group Enterprise Linux Server release 7.2 (Paladin)
Time: Thu Mar 18 13:17:57 2021 CST elapsed time: 25.978210 seconds (0d 0h 0m 25s)

---------------  T H R E A D  ---------------

Current thread (0x00007ffff02bfb70):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=69299, stack(0x00007fff79afb000,0x00007fff79bfc000)]


Current CompileTask:
C2:  25978   16       4       java.lang.Object::<init> (1 bytes)

Stack: [0x00007fff79afb000,0x00007fff79bfc000],  sp=0x00007fff79bf8d10,  free space=1015k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xaaaf59]  IdealGraphPrinter::init_network_stream()+0x107
V  [libjvm.so+0xaa8001]  IdealGraphPrinter::init(char const*, bool, bool)+0x93
V  [libjvm.so+0xaa7e8c]  IdealGraphPrinter::IdealGraphPrinter()+0x46
V  [libjvm.so+0xaa7d0a]  IdealGraphPrinter::printer()+0x84
V  [libjvm.so+0x7dd5b2]  Compile::should_print(int)+0x68
V  [libjvm.so+0xaaa6eb]  IdealGraphPrinter::print_method(char const*, int)+0x2b
V  [libjvm.so+0x7dc118]  Compile::igv_print_method_to_file(char const*, bool)+0xf0
V  [libjvm.so+0x7dbef8]  igv_print()+0x1d
C  0x00007fff79bf8ebf",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8244207,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s1ez:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-18 01:34;thartmann;ILW = C2 IR printing from debugger asserts, when calling igv_print from a debugger, use PrintIdealGraph via the command line = MLM = P4;;;","2021-03-18 06:08;roboduke;Changeset: 3f31a6ba
Author:    Yi Yang <yyang@openjdk.org>
Committer: Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-03-18 13:07:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3f31a6ba
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in @implnote in java/awt/TrayIcon.java,JDK-8263772,5044797,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,,psadhukhan,psadhukhan,2021-03-17 21:25,2021-03-17 21:32,2023-10-01 09:57,2021-03-17 21:32,,,,,,,,,,client-libs,,0,,,,,,,,,,,,,,,,,,,,,,,@implNote tag is used to show Implementation Note but @implnote tag is used instead which does not show the corresponding sentence in javadoc.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,"0|i2s1dn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFormattedTextField.AbstractFormatter.getDocumentFilter()/getNavigationFilter() spec doesn't mention what the default impls return and what does it mean,JDK-8263768,5044791,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,dbessono,dbessono,2021-03-17 18:09,2021-03-31 17:41,2023-10-01 09:57,2021-03-24 21:08,15,16,17,,,,,,17,client-libs,,0,conformance,sn_89,,,,,,,,,,,,,,,,,,,,,"The current state of specification for 
https://download.java.net/java/early_access/jdk17/docs/api/java.desktop/javax/swing/JFormattedTextField.AbstractFormatter.html#getDocumentFilter()
https://download.java.net/java/early_access/jdk17/docs/api/java.desktop/javax/swing/JFormattedTextField.AbstractFormatter.html#getNavigationFilter()
is the following
===============
protected DocumentFilter getDocumentFilter()
Subclass and override if you wish to provide a DocumentFilter to restrict what can be input. install will install the returned value onto the JFormattedTextField.
Returns:
    DocumentFilter to restrict edits 

protected NavigationFilter getNavigationFilter()
Subclass and override if you wish to provide a filter to restrict where the user can navigate to. install will install the returned value onto the JFormattedTextField.

Returns:
    NavigationFilter to restrict navigation 
===============

Actually as per OpenJDK - null is returned by both ""default"" implementations and it means ""no filtering"", as other places in the code indicate
",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263922,,,,,JDK-8263472,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s1cb:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-03-24 21:08;roboduke;Changeset: 3fcb499c
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-03-25 04:08:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3fcb499c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Confusing specification of JEditorPaneAccessibleHypertextSupport constructor,JDK-8263766,5044785,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,dbessono,dbessono,2021-03-17 17:42,2021-03-29 11:44,2023-10-01 09:57,2021-03-23 05:15,15,16,17,,,,,,17,client-libs,,0,conformance,sn_89,,,,,,,,,,,,,,,,,,,,,"The following specification is confusing
https://docs.oracle.com/en/java/javase/15/docs/api/java.desktop/javax/swing/JEditorPane.JEditorPaneAccessibleHypertextSupport.html#%3Cinit%3E()
and looks like an error:

======================================
Constructor Details

    JEditorPaneAccessibleHypertextSupport
    public JEditorPaneAccessibleHypertextSupport()

    Make one of these puppies
======================================

",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264100,,,,,JDK-8263472,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s1az:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-03-23 05:15;roboduke;Changeset: 8c1ab38e
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-03-23 12:15:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8c1ab38e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Synthetic constructor parameters of enum are not considered for annotation indices,JDK-8263763,5044775,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,winterhalter,winterhalter,winterhalter,2021-03-17 14:37,2022-04-05 02:30,2023-10-01 09:57,2021-04-12 14:02,,,,,,,,,17,core-libs,,0,17ea,byte-buddy-found,,,,,,,,,,,,,,,,,,,,,"javac places annotations for an enum on the wrong index. Considering:

enum SampleEnum {
  INSTANCE(""foo"");
  SampleEnum(@SampleAnnotation String value) { }
}

@Retention(RetentionPolicy.RUNTIME)
@interface SampleAnnotation { }

the following code yields an exception:

Constructor<?> c = SampleAnnotation.class.getDeclaredConstructors()[0];
c.getParameters()[2].getAnnotations(); // throws IndexOutOfBoundsException",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8246586,,,,JDK-8284333,,,,,,JDK-8180892,JDK-8262807,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s18r:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2021-04-09 14:22;darcy;Reopening to support active code review; will close out the other bug.;;;","2021-04-12 14:02;roboduke;Changeset: 9dd96257
Author:    Rafael Winterhalter <winterhalter@openjdk.org>
Committer: Joe Darcy <darcy@openjdk.org>
Date:      2021-04-12 21:01:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9dd96257
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Update boot JDK to 16.0.1,JDK-8263761,5044773,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-03-17 14:35,2021-07-20 11:11,2023-10-01 09:57,2021-05-24 05:07,jfx17,,,,,,,,jfx17,javafx,,0,noreg-build,sn_93,,,,,,,,,,,,,,,,,,,,,"Now what JDK 16 has released we should consider updating the boot JDK for JavaFX to use JDK 16. This will require updating gradle to gradle 7.
",,,,,,,,,,,,,,,,,,,,JDK-8263760,JDK-8267121,JDK-8267071,,,,,,,,,,,,,,,,,,,,,JDK-8263759,JDK-8270959,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s18b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-05-24 05:07;roboduke;Changeset: 2fd5092a
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-05-24 12:06:56 +0000
URL:       https://git.openjdk.java.net/jfx/commit/2fd5092accded6f40eb866e5e228aa913dd02463
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Update gradle to version 7.0.1,JDK-8263760,5044772,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-03-17 14:31,2021-10-13 13:19,2023-10-01 09:57,2021-05-19 09:15,8,jfx11,jfx17,,,,,,jfx17,javafx,,0,3rdparty,noreg-build,sn_92,sn_93,,,,,,,,,,,,,,,,,,,"Now that gradle 7.0.1 is released, we should update the JavaFX build to use it. This is required in order to allow using JDK 16 as the boot JDK.
",,,,,,,,,,JDK-8268385,JDK-8272839,,,,,,,,,JDK-8240336,,,JDK-8263761,,,,,,,,,,,,,,JDK-8267071,JDK-8275246,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s183:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-03-17 14:33;kcr;We currently get a few deprecation warnings pointing out changes that will be needed in our build scripts to allow building with gradle 7. Those will either need to be fixed at the same time as updating to gradle 7 or else fixed with a separate blocking bug.;;;","2021-04-10 15:13;nlisker;Gradle 7 has been released.;;;","2021-05-11 15:57;kcr;gradle 7.0.1 was released on May 10, 2021.;;;","2021-05-19 09:15;roboduke;Changeset: 111bac41
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-05-19 16:14:40 +0000
URL:       https://git.openjdk.java.net/jfx/commit/111bac4180a646662a81223bdbb56880789d5a90
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Update boot JDK to 15.0.2,JDK-8263759,5044771,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-03-17 14:22,2021-04-05 13:43,2023-10-01 09:57,2021-03-18 08:05,jfx17,,,,,,,,jfx17,javafx,,0,noreg-build,sn_89,,,,,,,,,,,,,,,,,,,,,"JDK 15.0.2 has released, superseding JDK 15.0.1. We should switch to using 15.0.2 as our boot JDK.

Note that until JDK-8255712 is implemented, we need to update both `build.properties` and `.github/workflows/submit.yml`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8255714,JDK-8263761,,,,,JDK-8255712,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s17v:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-03-18 08:05;roboduke;Changeset: e23a2feb
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-03-18 15:05:04 +0000
URL:       https://git.openjdk.java.net/jfx/commit/e23a2feb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove serviceability/sa/ClhsdClasses.java from ZGC problem list,JDK-8263757,5044768,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2021-03-17 12:39,2021-03-24 18:59,2023-10-01 09:57,2021-03-17 16:25,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"The serviceability/sa/ClhsdClasses.java entry in the ZGC problem list has a typo. It should be serviceability/sa/ClhsdbClasses.java, so the entry is referencing a non-existent test. Given that serviceability/sa/ClhsdbClasses.java has therefore been running with ZGC testing with no issue, this entry actually isn't even needed and should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s177:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-03-17 16:25;roboduke;Changeset: 5d5813a5
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-03-17 23:25:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5d5813a5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix ZGC ProblemList entry for serviceability/sa/ClhsdbSymbol.java,JDK-8263756,5044767,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2021-03-17 12:27,2021-03-24 18:59,2023-10-01 09:57,2021-03-17 15:04,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,There was a new bug filed for the new serviceability/sa/ClhsdbSymbol.java test failing on ZGC. See JDK-8263730. The bug shouldn't have been filed and instead the existing JDK-8220624 bug should have been used. This CR will correct the ProblemList entry and then afterwards JDK-8263730 will be closed as a dup of JDK-8220624,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263730,JDK-8220624,JDK-8263732,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s16z:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-03-17 15:04;roboduke;Changeset: 50ff0d4d
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-03-17 22:03:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/50ff0d4d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
HexFormat 'fromHex' methods should be static,JDK-8263754,5044760,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2021-03-17 11:12,2021-04-05 16:13,2023-10-01 09:57,2021-03-29 13:38,17,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"A number of HexFormat methods converting from strings to numbers do not use delimiter, prefix, suffix, and uppercase parameters and would be more convenient if the methods were static.

   public boolean isHexDigit(int);
   public int fromHexDigit(int);
   public int fromHexDigits(java.lang.CharSequence);
   public int fromHexDigits(java.lang.CharSequence, int, int);
   public long fromHexDigitsToLong(java.lang.CharSequence);
   public long fromHexDigitsToLong(java.lang.CharSequence, int, int); 

",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263755,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s15n:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2021-03-29 13:38;roboduke;Changeset: 8cf1c62c
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2021-03-29 20:38:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8cf1c62c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"two new tests from JDK-8261671 fail with ""Error. can not find ClassFileInstaller in test directory or libraries""",JDK-8263753,5044759,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,kvn,dcubed,dcubed,2021-03-17 10:44,2021-11-06 00:56,2023-10-01 09:57,2021-03-17 13:01,17,,,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-self,oracle-triage-17,tier2,tier3,,,,,,,,,,,,,,,,,,"The following tests fail in the JDK17 CI:

compiler/intrinsics/bmi/TestBzhiI2L.java
compiler/intrinsics/bmi/verifycode/BzhiTestI2L.java

Here's a snippet from the TestBzhiI2L.java log file:

#section:build
----------messages:(2/73)----------
command: build ClassFileInstaller
reason: Named class compiled on demand
result: Not run. Test running...


test result: Error. can't find ClassFileInstaller in test directory or libraries


Here's a snippet from the verifycode/BzhiTestI2L.java log file:

#section:build
----------messages:(2/73)----------
command: build ClassFileInstaller
reason: Named class compiled on demand
result: Not run. Test running...


test result: Error. can't find ClassFileInstaller in test directory or libraries
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261671,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2s15f:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-17 10:48;dcubed;See these recent bug fixes:

    JDK-8263412 ClassFileInstaller can't be used by classes outside of default package
    JDK-8263549 8263412 can cause jtreg testlibrary split 

I think these new tests just need to catch up with the ClassFileInstaller changes.;;;","2021-03-17 12:32;dcubed;[~kvn] - Not sure why you changed the synopsis. It was a direct cut-n-paste
from the error log itself... :-);;;","2021-03-17 13:01;roboduke;Changeset: 83a49ef8
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-03-17 20:00:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/83a49ef8
;;;","2021-03-17 13:05;kvn;About synopsis change - nothing mysterious. 
' in synopsis word ""can't"" interfere with how I create commit: git commit -m 'synopsis'. And """" was used too. Yes I could have changed PR's synopsis after I created it - will do next time.;;;","2021-03-17 13:27;dcubed;The fix for this bug is in jdk-17+14-1109.;;;","2021-03-18 01:39;thartmann;ILW = MHH = P2;;;",,,,,,,,,,,,,,,,,,,,,,
redundant lock in SSLSocketImpl,JDK-8263743,5044748,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2021-03-17 09:54,2021-03-31 17:41,2023-10-01 09:57,2021-03-24 22:17,,,,,,,,,17,security-libs,,0,noreg-hard,,,,,,,,,,,,,,,,,,,,,,"In the SSLSocketImpl, there is a socket level lock while reading application data (see readApplicationRecord).

                socketLock.lock();
                try {
                    plainText = decode(buffer);
                } finally {
                    socketLock.unlock();
                }

If an application data read is in progress, other calling to SSLSocket APIs (for example getUseClientMode()) could be blocked if socket level locks are used.

This is not an easy to reproduce bug because readApplicationRecord() will try to read the TLS header at first, and then lock the socket.  Normally, a TLS record could be delivered in one package, and thus the socket level lock in readApplicationRecord() does not block.  But if the TLS record is delivered in multiple packages, the socket level lock may take a while and thus could block other APIs.

The decode() method is used in two places.  One for the initial handshaking, and one for application data reading.  The application data reading does not start before the initial handshaking completed. So it is not necessary to have  a lock to synchronize the initial handshaking and application data reading.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s12z:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-03-24 22:17;roboduke;Changeset: a678a38d
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2021-03-25 05:16:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a678a38d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
(bf) MappedByteBuffer.force() should use the capacity as its upper bound,JDK-8263742,5044747,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bpb,bpb,bpb,2021-03-17 09:28,2021-03-24 19:01,2023-10-01 09:57,2021-03-18 14:13,15,16,,,,,,,17,core-libs,,0,noreg-other,,,,,,,,,,,,,,,,,,,,,,"The fix for JDK-8221696 added MappedByteBuffer(int index, int length) to allow specifying a range to write back to storage. The no-arg MappedByteBuffer at this time and before wrote back the entire buffer content, i.e., the half-open range [0,capacity()). The new force(int,int) checked its parameters using Objects.checkFromIndexSize(index, length, limit()), i.e., with the limit instead of the capacity as upper bound. In JDK-8243491 the no-arg force() was changed as

@@ -293,8 +227,7 @@ public abstract class MappedByteBuffer
             return force(0, limit());
         }
         if ((address != 0) && (capacity() != 0)) {
-            long offset = mappingOffset();
-            force0(fd, mappingAddress(offset), mappingLength(offset));
+            return force(0, capacity());
         }
         return this;
     }

to call the new force(int,int). This inadvertently changed the upper bound of the no-arg force() from capacity() to limit() thereby provoking JDK-8246729. The upper bound of force() should be the capacity.",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263826,,,,,,,,,,,,JDK-8246729,JDK-4833719,JDK-8221696,JDK-8243491,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s12r:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-03-17 09:35;bpb;noreg-other: Change is covered by existing tests.;;;","2021-03-18 14:13;roboduke;Changeset: fa0f1614
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-03-18 21:12:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fa0f1614
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
divideToIntegralValue typo on BigDecimal documentation,JDK-8263726,5044208,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,webbuggrp,webbuggrp,2021-03-10 01:52,2021-03-22 13:12,2023-10-01 09:57,2021-03-17 10:21,11,,,,,,,,17,core-libs,,0,dcsswa,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
In the Java 11 official BigDecimal documentation, as well as previous/higher versions of the same document, the typo divideToIntgralValue (i.e. should be divideToIntegralValue) is to be found on several lines throughout this doc.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-4904082,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rxr7:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28853e3d,,,,,,,,,"2021-03-17 04:50;sswsharm;There is a Typo error for  ""this.divideToIntgralValue(divisor)"" at method divideAndRemainder and Remainder

https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html#divideAndRemainder(java.math.BigDecimal,java.math.MathContext);;;","2021-03-17 09:53;darcy;(Typo introduced as part of JDK-4904082.);;;","2021-03-17 10:21;roboduke;Changeset: 24afa36d
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2021-03-17 16:58:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/24afa36d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[BACKOUT] MoveAndUpdateClosure::do_addr calls function with side-effects in an assert,JDK-8263723,5044712,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ayang,ayang,ayang,2021-03-17 01:42,2021-03-22 13:12,2023-10-01 09:57,2021-03-17 06:19,17,,,,,,,,17,hotspot,,0,gc-parallel,,,,,,,,,,,,,,,,,,,,,,"Large perf regression observed for vmTestbase/gc/gctests/BigChains/BigChains.java in debug build, as reported in JDK-8263687

Before JDK-8245025:
527.89user 12.63system 3:44.40elapsed 240%CPU (0avgtext+0avgdata 972888maxresident)k
After JDK-8245025:
6213.88user 13.82system 12:09.57elapsed 853%CPU (0avgtext+0avgdata 1077724maxresident)k
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263687,,,,JDK-8245025,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s0uz:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-03-17 06:19;roboduke;Changeset: a707fcb5
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2021-03-17 13:19:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a707fcb5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
unused-result warning happens at os_linux.cpp,JDK-8263718,5044705,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2021-03-16 23:29,2022-05-02 05:34,2023-10-01 09:57,2021-04-19 22:07,11,17,,,,,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,,,,"I tried to build OpenJDK with g++-10.2.1_pre1-r3 on Alpine Linux 3.13.2, but I saw following warning:

/home/jdk/github-forked/jdk/src/hotspot/os/linux/os_linux.cpp:668:9: error: ignoring return value of 'void* __builtin_alloca(long unsigned int)' declared with attribute 'warn_unused_result' [-Werror=unused-result]
  668 |   alloca(((pid ^ counter++) & 7) * 128);
      |         ^
cc1plus: all warnings being treated as errors",,,,,,,,,,JDK-8285694,JDK-8285996,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267908,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2s0tf:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-29 22:50;ysuenaga;This code is for randomize the cache line index of hot stack frames. It helps when threads of the same stack traces evict each other's cache lines. It exists in all platform dependent sources (os_aix, os_bsd, os_linux, os_windows), however it `alloca()` call (or equivalent stack operations) does not exist in machine code in JDK 16 from jdk.java.net.

- macOS (BSD): does not exist
- Linux (x86_64, glibc): does not exist
- Linux (x86_64, musl): does not exist
- Windows (x86_64): exist

Other platforms are unknown.

We did not see any performance degradation if `alloca()` is removed on Mac, Linux (glibc), and Windows. So we remove it from them.

Please see review thread on GitHub PR for more details.;;;","2021-04-19 22:07;roboduke;Changeset: f1d4ae6c
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2021-04-20 05:06:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f1d4ae6c
;;;","2022-04-22 01:06;mbaesken;JDK11 backport request
I would like to have the patch in JDK11 as well, because the issue is present there too. The patch applies cleanly.;;;","2022-04-22 01:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1039
Date: 2022-04-22 08:00:54 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
Two shenandoah tests fail due to can't find ClassFileInstaller,JDK-8263705,5044694,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-03-16 16:46,2021-03-22 13:11,2023-10-01 09:57,2021-03-16 18:54,17,,,,,,,,17,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,,"==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR
   jtreg:test/hotspot/jtreg/gc/shenandoah/TestReferenceRefersToShenandoah.java
>>                                                       4     2     0     2 <<
   jtreg:test/hotspot/jtreg/gc/shenandoah/TestReferenceShortcutCycle.java
>>                                                       2     0     0     2 <<
==============================
TEST FAILURE


ACTION: build -- Not run. Test running...
REASON: Named class compiled on demand
TIME:   eInstaller seconds
messages:
command: build ClassFileInstaller
reason: Named class compiled on demand

TEST RESULT: Error. can't find ClassFileInstaller in test directory or libraries",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263427,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s0qz:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-03-16 18:54;roboduke;Changeset: dd6c9114
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-03-17 01:54:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dd6c9114
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Coordinate equals, hashCode and compareTo of JavacFileManager.PathAndContainer",JDK-8263688,5044667,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2021-03-16 09:22,2021-03-22 13:11,2023-10-01 09:57,2021-03-17 03:33,17,,,,,,,,17,tools,,0,noreg-trivial,,,,,,,,,,,,,,,,,,,,,,"A drive-by find (kudos to IntelliJ IDEA):

diff --git a/src/jdk.compiler/share/classes/com/sun/tools/javac/file/JavacFileManager.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/file/JavacFileManager.java
index c7b95b80437..46e93f5365c 100644
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/file/JavacFileManager.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/file/JavacFileManager.java
@@ -1106,7 +1106,7 @@ public class JavacFileManager extends BaseFileManager implements StandardJavaFil
           PathAndContainer that = (PathAndContainer) o;
           return path.equals(that.path)
               && container.equals(that.container)
-              && index == this.index;
+              && index == that.index;
         }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s0kz:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-03-16 09:24;prappo;Found by accident while reviewing JDK-8002152.;;;","2021-03-17 03:33;roboduke;Changeset: 23fc2a4d
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2021-03-17 10:32:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/23fc2a4d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid wrapping into BufferedWriter twice,JDK-8263684,5044658,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,prappo,prappo,2021-03-16 07:41,2021-05-26 17:28,2023-10-01 09:57,2021-05-19 11:30,17,,,,,,,,17,tools,,0,noreg-trivial,,,,,,,,,,,,,,,,,,,,,,A writer wrapped into a BufferedWriter in jdk.javadoc.internal.doclets.toolkit.util.ElementListWriter#generateElementListFile is already a BufferedWriter (see jdk.javadoc.internal.doclets.toolkit.util.StandardDocFileFactory.StandardDocFile#openWriter).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s0iz:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-05-19 11:29;roboduke;Changeset: 74f30ad3
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-05-19 18:29:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/74f30ad38baecc0f7e9b64124fa9a6b801c280a3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: one potential bug in C1 LIRGenerator::generate_address(),JDK-8263676,5044646,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fyang,fyang,fyang,2021-03-16 05:28,2021-09-30 01:29,2023-10-01 09:57,2021-03-17 19:27,11,16,17,,,,,,17,hotspot,,0,aarch64-related,c1,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,oracle-triage-17,,,,,,,,,,,,,,,"Noticed this issue when I am trying to backport: https://bugs.openjdk.java.net/browse/JDK-8263425

Around line 180 we have:

         __ add(index, LIR_OprFact::intptrConst(large_disp), tmp);
         index = tmp;
       } else {
         __ move(tmp, LIR_OprFact::intptrConst(large_disp));      <========
         __ add(tmp, index, tmp);
         index = tmp;
       }

This is supposed to be calculating ""tmp = large_disp"" but it actually does ""large_disp = tmp"".
Looks like this is missed by JDK-8263425.

Proposed patch:
diff --git a/src/hotspot/cpu/aarch64/c1_LIRGenerator_aarch64.cpp b/src/hotspot/cpu/aarch64/c1_LIRGenerator_aarch64.cpp
index 0056e4c7d36..a6c6dbe856f 100644
--- a/src/hotspot/cpu/aarch64/c1_LIRGenerator_aarch64.cpp
+++ b/src/hotspot/cpu/aarch64/c1_LIRGenerator_aarch64.cpp
@@ -177,7 +177,7 @@ LIR_Address* LIRGenerator::generate_address(LIR_Opr base, LIR_Opr index,
         __ add(index, LIR_OprFact::intptrConst(large_disp), tmp);
         index = tmp;
       } else {
-        __ move(tmp, LIR_OprFact::intptrConst(large_disp));
+        __ move(LIR_OprFact::intptrConst(large_disp), tmp);
         __ add(tmp, index, tmp);
         index = tmp;
       }
",,,,,,,,,,JDK-8264432,JDK-8264630,JDK-8266893,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,,"0|i2s0gb:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-17 01:37;thartmann;ILW = Same as JDK-8263425 = P3;;;","2021-03-17 19:27;roboduke;Changeset: 81ba5784
Author:    Fei Yang <fyang@openjdk.org>
Date:      2021-03-18 02:26:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/81ba5784
;;;","2021-03-30 18:09;fyang;Fix Request (11u)

Should get backported for parity with 11.0.12-oracle.
Applies cleanly to 11u-dev. Tested tier1 with -XX:TieredStopAtLevel=1 on AArch64 Linux.;;;","2021-05-11 01:39;snazarki;Fix Request (13u)

Mmall fix of obvious mistake. Applies cleanly. Tested tier1 on aarch64.;;;",,,,,,,,,,,,,,,,,,,,,,,,
fatal error: no reachable node should have no use,JDK-8263672,5044641,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,dholmes,dholmes,2021-03-16 04:59,2021-09-30 01:03,2023-10-01 09:57,2021-03-17 01:53,17,,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,intermittent,oracle-triage-11,oracle-triage-17,tier2,,,,,,,,,,,,,,,,,"Test crash in tier2 after JDK-8263577 was integrated.

vmTestbase/vm/compiler/optimizations/partialpeel/WhileWhile/TestDescription.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S77104/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d34bbfd9-1328-4da3-aa3c-d383e2bd5904/runs/ef2cab74-82b9-4801-a2d2-1fe99bb93ee1/workspace/open/src/hotspot/share/opto/compile.cpp:2376), pid=304, tid=319
#  fatal error: no reachable node should have no use
#
# JRE version: Java(TM) SE Runtime Environment (17.0+14) (fastdebug build 17-ea+14-LTS-1072)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+14-LTS-1072, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x9fc0d0]  Compile::check_no_dead_use() const+0x680
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/e8f948fe-dc79-4c12-82c8-0e7ba4ac7993-S35/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/225be941-bdfc-4c38-a549-7177da46b50b/runs/e68e2361-e5ac-420d-9860-03c172685517/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_compiler/scratch/0/core.304)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Dtest.vm.opts=-XX:MaxRAMPercentage=6 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/e8f948fe-dc79-4c12-82c8-0e7ba4ac7993-S35/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/225be941-bdfc-4c38-a549-7177da46b50b/runs/e68e2361-e5ac-420d-9860-03c172685517/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_compiler/tmp -Dtest.tool.vm.opts=-J-XX:MaxRAMPercentage=6 -J-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/e8f948fe-dc79-4c12-82c8-0e7ba4ac7993-S35/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/225be941-bdfc-4c38-a549-7177da46b50b/runs/e68e2361-e5ac-420d-9860-03c172685517/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_compiler/tmp -Dtest.compiler.opts= -Dtest.java.opts=-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -Dtest.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+14-1072/linux-x64-debug.jdk/jdk-17/fastdebug -Dcompile.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+14-1072/linux-x64-debug.jdk/jdk-17/fastdebug -Dtest.timeout.factor=4.0 -Dtest.nativepath=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+14-1072/linux-x64-debug.test/hotspot/jtreg/native -Dtest.root=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+14-1072/src.full/open/test/hotspot/jtreg -Dtest.name=vmTestbase/vm/compiler/optimizations/partialpeel/WhileWhile/TestDescription.java -Dtest.file=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+14-1072/src.full/open/test/hotspot/jtreg/vmTestbase/vm/compiler/optimizations/partialpeel/WhileWhile/TestDescription.java -Dtest.src=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+14-1072/src.full/open/test/hotspot/jtreg/vmTestbase/vm/compiler/optimizations/partialpeel/WhileWhile -Dtest.src.path=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+14-1072/src.full/open/test/hotspot/jtreg/vmTestbase/vm/compiler/optimizations/partialpeel/WhileWhile:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+14-1072/src.full/open/test/hotspot/jtreg/vmTestbase:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+14-1072/src.full/open/test/lib -Dtest.classes=/opt/mach5/mesos/work_dir/slaves/e8f948fe-dc79-4c12-82c8-0e7ba4ac7993-S35/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/225be941-bdfc-4c38-a549-7177da46b50b/runs/e68e2361-e5ac-420d-9860-03c172685517/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_compiler/classes/3/vmTestbase/vm/compiler/optimizations/partialpeel/WhileWhile/TestDescription.d -Dtest.class.path=/opt/mach5/mesos/work_dir/slaves/e8f948fe-dc79-4c12-82c8-0e7ba4ac7993-S35/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/225be941-bdfc-4c38-a549-7177da46b50b/runs/e68e2361-e5ac-420d-9860-03c172685517/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_compiler/classes/3/vmTestbase/vm/compiler/optimizations/partialpeel/WhileWhile/TestDescription.d:/opt/mach5/mesos/work_dir/slaves/e8f948fe-dc79-4c12-82c8-0e7ba4ac7993-S35/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/225be941-bdfc-4c38-a549-7177da46b50b/runs/e68e2361-e5ac-420d-9860-03c172685517/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_compiler/classes/3/vmTestbase:/opt/mach5/mesos/work_dir/slaves/e8f948fe-dc79-4c12-82c8-0e7ba4ac7993-S35/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/225be941-bdfc-4c38-a549-7177da46b50b/runs/e68e2361-e5ac-420d-9860-03c172685517/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_compiler/classes/3/test/lib -Dtest.class.path.prefix=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+14-1072/src.full/open/test/hotspot/jtreg/vmTestbase/vm/compiler/optimizations/partialpeel/WhileWhile:/opt/mach5/mesos/work_dir/slaves/e8f948fe-dc79-4c12-82c8-0e7ba4ac7993-S35/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/225be941-bdfc-4c38-a549-7177da46b50b/runs/e68e2361-e5ac-420d-9860-03c172685517/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_compiler/classes/3/vmTestbase:/opt/mach5/mesos/work_dir/slaves/e8f948fe-dc79-4c12-82c8-0e7ba4ac7993-S35/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/225be941-bdfc-4c38-a549-7177da46b50b/runs/e68e2361-e5ac-420d-9860-03c172685517/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_compiler/classes/3/test/lib -XX:MaxRAMPercentage=6 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/e8f948fe-dc79-4c12-82c8-0e7ba4ac7993-S35/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/225be941-bdfc-4c38-a549-7177da46b50b/runs/e68e2361-e5ac-420d-9860-03c172685517/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_compiler/tmp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -XX:-TieredCompilation -Djava.library.path=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+14-1072/linux-x64-debug.test/hotspot/jtreg/native com.sun.javatest.regtest.agent.MainWrapper /opt/mach5/mesos/work_dir/slaves/e8f948fe-dc79-4c12-82c8-0e7ba4ac7993-S35/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/225be941-bdfc-4c38-a549-7177da46b50b/runs/e68e2361-e5ac-420d-9860-03c172685517/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_compiler/vmTestbase/vm/compiler/optimizations/partialpeel/WhileWhile/TestDescription.d/main.0.jta

---------------  T H R E A D  ---------------

Current thread (0x00007f7f4c3217a0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=319, stack(0x00007f7f3c3fc000,0x00007f7f3c4fd000)]


Current CompileTask:
C2:   1456  355             vm.compiler.optimizations.partialpeel.WhileWhile$4::execute (141 bytes)

Stack: [0x00007f7f3c3fc000,0x00007f7f3c4fd000],  sp=0x00007f7f3c4f83b0,  free space=1008k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x9fc0d0]  Compile::check_no_dead_use() const+0x680
V  [libjvm.so+0xa0f0ef]  Compile::Optimize()+0x18ff
V  [libjvm.so+0xa10b05]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1905
V  [libjvm.so+0x83bd6a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa20931]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xf21
V  [libjvm.so+0xa215d8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1842bd1]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x184ada0]  Thread::call_run()+0x100
V  [libjvm.so+0x1535c56]  thread_native_entry(Thread*)+0x116
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263577,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,,,,,"0|i2s0f7:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-17 01:36;thartmann;ILW = Assert during C2 compilation (harmless in product), intermittent at tier 2, no workaround = MMH = P3;;;","2021-03-17 01:52;roboduke;Changeset: d1baed67
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-03-17 08:52:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d1baed67
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
pmap and pstack in jhsdb do not work on debug server,JDK-8263670,5044638,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2021-03-16 04:34,2021-04-04 18:38,2023-10-01 09:57,2021-03-27 04:15,11,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"jhsdb supports pmap (jhsdb jmap) and pstack (jhsdb jstack --mixed), and they work fine if they attach to live process or to coredump, however they do not work on debug server as following:

```
$ jhsdb jmap --connect localhost
Attaching to remote server localhost, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 11.0.10+9
remote configuration is not yet implemented
```

pmap and pstack depend on CDebugger in SA, however it would not be set in case of remote debugger client. We can avoid it if we can delegate the process to debug server.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264686,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s0ej:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-03-27 04:15;roboduke;Changeset: a209ed01
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2021-03-27 11:15:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a209ed01
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
javac emits duplicate checkcast for first bound of intersection type in cast,JDK-8263642,5044497,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,gli,webbuggrp,webbuggrp,2021-03-14 14:38,2021-06-21 11:55,2023-10-01 09:57,2021-06-02 10:18,15,,,,,,,,17,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
It appears `javac` emits a duplicate `checkcast` for the first bound of an intersection type as part of a cast expression.

Possibly related to JDK-8011392

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Compile the class IntersectionTypeTest provided below
2. Decompile the class file with `javap -v`
3. Look at the byte code for method `test2`

ACTUAL -
         1: checkcast     #9                  // class IntersectionTypeTest$C1
         4: checkcast     #7                  // class IntersectionTypeTest$I1
         7: checkcast     #9                  // class IntersectionTypeTest$C1

---------- BEGIN SOURCE ----------
class IntersectionTypeTest {
    interface I1 { }
    static class C1 { }
    
    static Object test(Object o) {
        // As expected: Single checkcast I1
        return (I1) o;
    }
    
    static Object test2(Object o) {
        // Unexpected: Duplicate checkcast C1
        return (C1 & I1) o;
    }
}
---------- END SOURCE ----------

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268885,,,,,,JDK-8011392,,,,,,"2021-03-15 20:49;adev;IntersectionTypeTest.java;https://bugs.openjdk.org/secure/attachment/93656/IntersectionTypeTest.java",,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rzj7:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2021-03-15 20:49;adev;Duplicate checkcast for the first bound of the intersection type can be seen when using javap. Following is the output of the test2 method of the reproducer code:

static java.lang.Object test2(java.lang.Object);

    descriptor: (Ljava/lang/Object;)Ljava/lang/Object;
    flags: (0x0008) ACC_STATIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: checkcast     #9                  // class IntersectionTypeTest$C1
         4: checkcast     #7                  // class IntersectionTypeTest$I1
         7: checkcast     #9                  // class IntersectionTypeTest$C1
        10: areturn
      LineNumberTable:
        line 12: 0
};;;","2021-06-02 10:18;roboduke;Changeset: b7ac705d
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2021-06-02 17:17:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b7ac705dd625c5fb2df714e2faec8d0ffac7301a
;;;","2021-06-07 03:05;adev;Requested the submitter to check if the fix solves the problem. The latest JDK 17 can be downloaded from https://jdk.java.net/17/;;;","2021-06-21 11:55;adev;The submitter confirmed that the issue is fixed.;;;",,,,,,,,,,,,,,,,,,,,,,,,
"The java.awt.color.ICC_Profile#setData invert the order of bytes for the ""head"" tag",JDK-8263622,5044574,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,serb,serb,2021-03-15 15:07,2021-03-24 19:00,2023-10-01 09:57,2021-03-18 13:50,11,17,,,,,,,17,client-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"If the user tries to set the header tag of the color profile, part of the data will use invalid order of bytes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6523398,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s00b:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-18 13:50;roboduke;Changeset: 01ddf3d2
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-03-18 20:07:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/01ddf3d2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
'Deprecatd' typo in src/hotspot/share/classfile/classFileParser.cpp,JDK-8263616,5044566,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,coleenp,dcubed,dcubed,2021-03-15 13:20,2021-03-22 13:09,2023-10-01 09:57,2021-03-15 14:20,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"https://mail.openjdk.java.net/pipermail/jdk-dev/2021-March/005184.html

On 3/15/21 2:33 PM, x4e_x4e wrote:
> Hi,
>
> I have noticed a spelling mistake in classfileparser.cpp: https://github.com/openjdk/jdk/blob/4f1cda4fd744ca159782c09e9c8098f3aa196e72/src/hotspot/share/classfile/classFileParser.cpp#L3769.
>
> It is only in a comment so not very critical.
> I do not have Committer rights, so this is the only way I know to raise the error.
>
> Please let me know if it is not worthwhile to report spelling mistakes, or if there is a better place to do so.
>
> Thanks
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rzyj:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-15 13:47;coleenp;> > Please let me know if it is not worthwhile to report spelling mistakes, or if there is a better place to do so.

It's not really worthwhile to report spelling mistakes in comments as individual bugs. If there were a series of mistakes, maybe, or if the mistake is in an error message, definitely.;;;","2021-03-15 14:20;roboduke;Changeset: 4d1c08ca
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-03-15 21:19:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4d1c08ca
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Cleanup tightly_coupled_allocation,JDK-8263615,5044565,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,neliasso,neliasso,neliasso,2021-03-15 13:18,2021-09-30 01:02,2023-10-01 09:57,2021-03-30 02:24,17,,,,,,,,17,hotspot,,0,c2,cleanup,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,"During the review of JDK-8263361 an issue with tightly_coupled_allocation perhaps not working as intended was raised.

In JDK-8263361 tightly_coupled_allocation failed because the slow_path wasn't initialized yet. In that bug the call wasn't needed. 

But looking at the implementation - there is a slow path handling but it isn't used from any context.

Verify that tightly_coupled_allocation is working in all contexts and remove slow_region parameter and code if it is broken or unused.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263361,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rzyb:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-16 03:58;thartmann;ILW = Tightly coupled allocation optimization in C2 might be broken (affects performance), never observed as an issue, no workaround = MLH = P4;;;","2021-03-30 02:24;roboduke;Changeset: 4ffa41c3
Author:    Nils Eliasson <neliasso@openjdk.org>
Date:      2021-03-30 09:22:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4ffa41c3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
javac allows local variables to be accessed from a static context,JDK-8263614,5044564,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vromero,mtrudeau,mtrudeau,2021-03-15 12:53,2021-05-24 16:39,2023-10-01 09:57,2021-05-17 08:04,16,,,,,,,,17,tools,,0,javac-record,,,,,,,,,,,,,,,,,,,,,,"Compiling the following fragment with JDK 16 yields a NPE.

public class LocalClasses {
    public static void main(String[] args) {
        int i = 5;
        class Local {
            static void m() {
                System.out.println(""Value of i = "" + i);
            }
        }
        Local.m();
    }
}

NPE--
An exception has occurred in the compiler (16-ea). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.NullPointerException: Cannot read field ""sym"" because ""this.lvar[0]"" is null
	at jdk.compiler/com.sun.tools.javac.jvm.Code.emitop0(Code.java:568)
	at jdk.compiler/com.sun.tools.javac.jvm.Items$SelfItem.load(Items.java:369)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitIdent(Gen.java:2257)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCIdent.accept(JCTree.java:2407)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:864)
	at jdk.compiler/com.sun.tools.javac.jvm.StringConcat$IndyConstants.emit(StringConcat.java:444)
	at jdk.compiler/com.sun.tools.javac.jvm.StringConcat$Indy.makeConcat(StringConcat.java:275)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitBinary(Gen.java:2122)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBinary.accept(JCTree.java:2104)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:864)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genArgs(Gen.java:889)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitApply(Gen.java:1855)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1745)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:864)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitExec(Gen.java:1723)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCExpressionStatement.accept(JCTree.java:1532)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:597)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:632)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:618)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:669)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitBlock(Gen.java:1084)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1047)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:597)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:632)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genMethod(Gen.java:954)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitMethodDef(Gen.java:917)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:893)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:597)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genClass(Gen.java:2395)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:756)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1644)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1612)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:973)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
	at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)

The compiler should fail with a compilation error as local variable `i` is being accessed from a static context",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rzy3:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-05-17 08:04;roboduke;Changeset: b8856b1c
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2021-05-17 15:03:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b8856b1c47895eae0a5563ee1a8ac454863ee0a6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix multiple typos in hsdis README,JDK-8263593,5044537,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,hseigel,robilad,robilad,2021-03-15 05:50,2021-09-29 02:12,2023-10-01 09:57,2021-03-22 06:00,17,,,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-doc,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,,"A contributor has found multiple typos in the hsdis README and proposed a pull request to address them. 

The pull request can be found at https://github.com/openjdk/jdk/pull/2685",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rzs3:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-17 01:34;thartmann;ILW = LLL = P5;;;","2021-03-22 06:00;roboduke;Changeset: 6f1bcb05
Author:    Henri Tremblay <Henri.Tremblay@tradingscreen.com>
Committer: Harold Seigel <hseigel@openjdk.org>
Date:      2021-03-22 12:59:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6f1bcb05
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"Two C2 compiler phases with the name ""after matching""",JDK-8263591,5044533,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,thartmann,thartmann,thartmann,2021-03-15 04:41,2021-09-29 02:12,2023-10-01 09:57,2021-03-29 05:42,16,17,,,,,,,17,hotspot,,0,c2,diagnostics,hs-comp-triaged,oracle-triage-11,oracle-triage-17,starter,,,,,,,,,,,,,,,,,"After integration of JDK-8223347, we have two ""After matching"" phases in the IGV:

      case PHASE_AFTER_MATCHING:             return ""After Matching"";
[...]
      case PHASE_MATCHING:                   return ""After matching"";

This is confusing and should be renamed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8223347,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rzr7:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-16 03:55;thartmann;ILW = LLL = P5;;;","2021-03-29 05:42;roboduke;Changeset: 3516c265
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-03-29 12:41:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3516c265
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Rawtypes warnings should be produced for pattern matching in instanceof,JDK-8263590,5044532,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-03-15 04:36,2021-03-24 19:00,2023-10-01 09:57,2021-03-18 05:38,16,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"Based on:
https://github.com/openjdk/jdk/pull/2913/files/f7924d278d3faf6b7a13a14898e22419bf6bcc04#r594176266

Consider code like:
```
        Object o = null;
        boolean b = o instanceof List l;
```

This should produce a rawtype warning for List, but it does not.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rzqz:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-03-18 05:38;roboduke;Changeset: 9cd21b68
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-03-18 12:37:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9cd21b68
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: JVMS not cloned when needs_clone_jvms() is true,JDK-8263587,5044528,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mdoerr,mdoerr,mdoerr,2021-03-15 03:42,2021-10-06 00:05,2023-10-01 09:57,2021-03-16 03:18,16,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,jdk16u-fix-request,jdk16u-fix-SQE-ok-next,jdk16u-fix-yes,oraclejdk-na,oracle-triage-17,,,,,,,,,,,,,,,,"We have observed assertions and crashes on PPC64 when running compiler/c2/Test6603011.java:
assert((mcall == __null) || (mcall->jvms() == __null) || (mcall->jvms()->debug_start() + mcall->_jvmadj == mcall->tf()->domain()->cnt())) failed
Or SIGSEGV in product build:
# V  [libjvm.so+0x5a5bc4]  OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*)+0x494

JDK-8257211 has introduced new clone_jvms functions which miss needs_clone_jvms() checks.

The crashes occur on PPC64, because Call nodes like MachCallDynamicJava require the ConstantTableBase as additional input edge at mach_constant_base_node_input(). The different input edge layout requires JVMS cloning which is indicated by needs_clone_jvms().",,,,,,,,,,JDK-8263962,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257211,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,,"0|i2rzq3:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-16 03:18;roboduke;Changeset: 9c50b8e6
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2021-03-16 10:17:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9c50b8e6
;;;","2021-03-16 03:51;thartmann;ILW = HMM = P2;;;","2021-03-17 03:50;mdoerr;Fix Request (16u)
Crashes were observed on PPC64. Problem was introduced by JDK-8257211 in JDK16. Fix is simple and applies cleanly:
https://github.com/openjdk/jdk16u/pull/86
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
WB_IsMethodCompilable ignores compiler directives,JDK-8263582,5044525,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,chagedorn,chagedorn,2021-03-15 02:51,2023-03-21 23:19,2023-10-01 09:57,2021-03-30 23:34,11,12,13,14,15,16,17,8,17,hotspot,,0,diagnostics,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,,"Calling WB::isMethodCompilable(m) for a method m that cannot be compiled by either C1 or C2 due to a compiler directive (compileonly not including m, or excluding m) should return false. This, however, is not always the case since the ExcludeOption compiler directive is only evaluated lazily upon a compilation attempt. If m was not attempted to be compiled by C1 and/or C2, Method::is_not_compilable() returns false and thus WB::isMethodCompilable(m) returns true. 

This should be fixed by making WB_IsMethodCompilable aware of the ExcludeOption compiler directive.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304683,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rzpf:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-15 06:20;chagedorn;ILW = Ignoring compiler directives results in unexpected result, in whitebox API code, no workaround = MLH = P4;;;","2021-03-30 23:34;roboduke;Changeset: ab6faa60
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-03-31 06:33:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ab6faa60
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
ZGC: Concurrent mark hangs with debug loglevel,JDK-8263579,5044523,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hshi,hshi,hshi,2021-03-15 02:36,2021-03-24 19:02,2023-10-01 09:57,2021-03-21 19:19,16,17,,,,,,,17,hotspot,,0,zgc,,,,,,,,,,,,,,,,,,,,,,"create this issue on hehalf Chao Wang (casparcwang@tencent.com).

The jvm process will hang if using zgc with gc debug level log opened. The hang happened in our production environment, and can be reproduced by the following SPECjbb commands:
java -XX:+UnlockExperimentalVMOptions -Xmx100g -XX:ZCollectionInterval=10 -XX:ParallelGCThreads=80 -XX:ConcGCThreads=70 -Xlog:gc*=debug:file=gc.log:time,level,tags:filesize=1g -XX:+UseZGC -jar ./specjbb2015.jar -m COMPOSITE

Root cause of the hang is that the idle time is too short compared to the lock acquiring time of the debug logging, which make the gc threads never reach synchronized in zgc terminate stage 1. There are always some threads not in stage1 enter state and blocking on lock for logging.

Following is the backtrace of gc workers when the hang happens:

(gdb) bt
#0  0x00007ffa2836ab3b in do_futex_wait.constprop.1 () from /lib64/libpthread.so.0
#1  0x00007ffa2836abcf in __new_sem_wait_slow.constprop.0 () from /lib64/libpthread.so.0
#2  0x00007ffa2836ac6b in sem_wait@@GLIBC_2.2.5 () from /lib64/libpthread.so.0
#3  0x00007ffa2751cd32 in PosixSemaphore::wait (this=this@entry=0x7ffa20001c60) at /data/openjdk/jdk_dev/src/hotspot/os/posix/semaphore_posix.cpp:64
#4  0x00007ffa272ee083 in wait (this=0x7ffa20001c60) at /data/openjdk/jdk_dev/src/hotspot/share/runtime/semaphore.hpp:55
#5  write (msg=0x7ffa04df07f0 ""GC(0) Concurrent Mark Try Terminate (ZWorker#68) 1.471ms"", decorations=..., this=0x7ffa20001b90) at /data/openjdk/jdk_dev/src/hotspot/share/logging/logFileOutput.cpp:293
#6  LogFileOutput::write (this=0x7ffa20001b90, decorations=..., msg=0x7ffa04df07f0 ""GC(0) Concurrent Mark Try Terminate (ZWorker#68) 1.471ms"") at /data/openjdk/jdk_dev/src/hotspot/share/logging/logFileOutput.cpp:287
#7  0x00007ffa272f41f8 in log (msg=0x7ffa04df07f0 ""GC(0) Concurrent Mark Try Terminate (ZWorker#68) 1.471ms"", level=<optimized out>, this=<optimized out>) at /data/openjdk/jdk_dev/src/hotspot/share/logging/logOutputList.hpp:123
#8  LogTagSet::vwrite (this=<optimized out>, level=<optimized out>, fmt=<optimized out>, args=0x7ffa04df0a48) at /data/openjdk/jdk_dev/src/hotspot/share/logging/logTagSet.cpp:139
#9  0x00007ffa26fcdfbb in LogTargetHandle::print (this=this@entry=0x7ffa04df0b40, fmt=fmt@entry=0x7ffa2786db05 ""%s (%s) %.3fms"") at /data/openjdk/jdk_dev/src/hotspot/share/logging/logHandle.hpp:95
#10 0x00007ffa2778bc9c in ZStatPhase::log_end (this=this@entry=0x7ffa27d88860 <ZSubPhaseConcurrentMarkTryTerminate>, log=..., duration=..., thread=thread@entry=true) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zStat.cpp:625
#11 0x00007ffa2778c0a4 in ZStatSubPhase::register_end (this=0x7ffa27d88860 <ZSubPhaseConcurrentMarkTryTerminate>, start=..., end=...) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zStat.cpp:738
#12 0x00007ffa277600e4 in ~ZStatTimer (this=0x7ffa04df0c30, __in_chrg=<optimized out>) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zStat.hpp:316
#13 ZStatTimer::~ZStatTimer (this=0x7ffa04df0c30, __in_chrg=<optimized out>) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zStat.hpp:313
#14 0x00007ffa2776a036 in ZMark::try_terminate (this=this@entry=0x7ffa20036610) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zMarkTerminate.inline.hpp:46
#15 0x00007ffa2776a478 in ZMark::work_without_timeout (this=this@entry=0x7ffa20036610, cache=cache@entry=0x7ffa04df0dc0, stripe=stripe@entry=0x7ffa20036810, stacks=stacks@entry=0x7ffa200a2378) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zMark.cpp:512
#16 0x00007ffa2776b144 in ZMark::work (this=0x7ffa20036610, timeout_in_micros=0) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zMark.cpp:583
#17 0x00007ffa2779038c in ZTask::GangTask::work (this=0x7ff8bddfaaf8, worker_id=<optimized out>) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zTask.cpp:34
#18 0x00007ffa2774e75f in run_task (this=0x7ffa200a2350, data=...) at /data/openjdk/jdk_dev/src/hotspot/share/gc/shared/workgroup.cpp:280
#19 GangWorker::loop (this=0x7ffa200a2350) at /data/openjdk/jdk_dev/src/hotspot/share/gc/shared/workgroup.cpp:290
#20 0x00007ffa276a45e6 in Thread::call_run (this=0x7ffa200a2350) at /data/openjdk/jdk_dev/src/hotspot/share/runtime/thread.cpp:402
#21 0x00007ffa2746c4d7 in thread_native_entry (thread=0x7ffa200a2350) at /data/openjdk/jdk_dev/src/hotspot/os/linux/os_linux.cpp:712
#22 0x00007ffa28364ea5 in start_thread () from /lib64/libpthread.so.0
#23 0x00007ffa27e898dd in clone () from /lib64/libc.so.6

(gdb) bt
#0  0x00007ffa27e7aa1d in write () from /lib64/libc.so.6
#1  0x00007ffa27e05263 in _IO_new_file_write () from /lib64/libc.so.6
#2  0x00007ffa27e06a7e in __GI__IO_do_write () from /lib64/libc.so.6
#3  0x00007ffa27e048b8 in __GI__IO_file_sync () from /lib64/libc.so.6
#4  0x00007ffa27df96b3 in fflush () from /lib64/libc.so.6
#5  0x00007ffa272eed0e in flush (this=0x7ffa20001b90) at /data/openjdk/jdk_dev/src/hotspot/share/logging/logFileStreamOutput.cpp:130
#6  LogFileStreamOutput::write (this=this@entry=0x7ffa20001b90, decorations=..., msg=msg@entry=0x7ffa06f327f0 ""GC(0) Concurrent Mark Idle (ZWorker#35) 1.066ms"") at /data/openjdk/jdk_dev/src/hotspot/share/logging/logFileStreamOutput.cpp:130
#7  0x00007ffa272ee091 in write (msg=0x7ffa06f327f0 ""GC(0) Concurrent Mark Idle (ZWorker#35) 1.066ms"", decorations=..., this=0x7ffa20001b90) at /data/openjdk/jdk_dev/src/hotspot/share/logging/logFileOutput.cpp:294
#8  LogFileOutput::write (this=0x7ffa20001b90, decorations=..., msg=0x7ffa06f327f0 ""GC(0) Concurrent Mark Idle (ZWorker#35) 1.066ms"") at /data/openjdk/jdk_dev/src/hotspot/share/logging/logFileOutput.cpp:287
#9  0x00007ffa272f41f8 in log (msg=0x7ffa06f327f0 ""GC(0) Concurrent Mark Idle (ZWorker#35) 1.066ms"", level=<optimized out>, this=<optimized out>) at /data/openjdk/jdk_dev/src/hotspot/share/logging/logOutputList.hpp:123
#10 LogTagSet::vwrite (this=<optimized out>, level=<optimized out>, fmt=<optimized out>, args=0x7ffa06f32a48) at /data/openjdk/jdk_dev/src/hotspot/share/logging/logTagSet.cpp:139
#11 0x00007ffa26fcdfbb in LogTargetHandle::print (this=this@entry=0x7ffa06f32b40, fmt=fmt@entry=0x7ffa2786db05 ""%s (%s) %.3fms"") at /data/openjdk/jdk_dev/src/hotspot/share/logging/logHandle.hpp:95
#12 0x00007ffa2778bc9c in ZStatPhase::log_end (this=this@entry=0x7ffa27d888a0 <ZSubPhaseConcurrentMarkIdle>, log=..., duration=..., thread=thread@entry=true) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zStat.cpp:625
#13 0x00007ffa2778c0a4 in ZStatSubPhase::register_end (this=0x7ffa27d888a0 <ZSubPhaseConcurrentMarkIdle>, start=..., end=...) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zStat.cpp:738
#14 0x00007ffa277600e4 in ~ZStatTimer (this=0x7ffa06f32c70, __in_chrg=<optimized out>) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zStat.hpp:316
#15 ZStatTimer::~ZStatTimer (this=0x7ffa06f32c70, __in_chrg=<optimized out>) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zStat.hpp:313
#16 0x00007ffa2776a001 in idle (this=0x7ffa20036610) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zMark.cpp:382
#17 ZMark::try_terminate (this=this@entry=0x7ffa20036610) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zMark.cpp:474
#18 0x00007ffa2776a478 in ZMark::work_without_timeout (this=this@entry=0x7ffa20036610, cache=cache@entry=0x7ffa06f32dc0, stripe=stripe@entry=0x7ffa20036b10, stacks=stacks@entry=0x7ffa200802f8) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zMark.cpp:512
#19 0x00007ffa2776b144 in ZMark::work (this=0x7ffa20036610, timeout_in_micros=0) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zMark.cpp:583
#20 0x00007ffa2779038c in ZTask::GangTask::work (this=0x7ff8bddfaaf8, worker_id=<optimized out>) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zTask.cpp:34
#21 0x00007ffa2774e75f in run_task (this=0x7ffa200802d0, data=...) at /data/openjdk/jdk_dev/src/hotspot/share/gc/shared/workgroup.cpp:280
#22 GangWorker::loop (this=0x7ffa200802d0) at /data/openjdk/jdk_dev/src/hotspot/share/gc/shared/workgroup.cpp:290
#23 0x00007ffa276a45e6 in Thread::call_run (this=0x7ffa200802d0) at /data/openjdk/jdk_dev/src/hotspot/share/runtime/thread.cpp:402
#24 0x00007ffa2746c4d7 in thread_native_entry (thread=0x7ffa200802d0) at /data/openjdk/jdk_dev/src/hotspot/os/linux/os_linux.cpp:712
#25 0x00007ffa28364ea5 in start_thread () from /lib64/libpthread.so.0
#26 0x00007ffa27e898dd in clone () from /lib64/libc.so.6

(gdb) bt
#0  0x00007ffa2836ab3b in do_futex_wait.constprop.1 () from /lib64/libpthread.so.0
#1  0x00007ffa2836abcf in __new_sem_wait_slow.constprop.0 () from /lib64/libpthread.so.0
#2  0x00007ffa2836ac6b in sem_wait@@GLIBC_2.2.5 () from /lib64/libpthread.so.0
#3  0x00007ffa2751cd32 in PosixSemaphore::wait (this=this@entry=0x7ffa20001c60) at /data/openjdk/jdk_dev/src/hotspot/os/posix/semaphore_posix.cpp:64
#4  0x00007ffa272ee083 in wait (this=0x7ffa20001c60) at /data/openjdk/jdk_dev/src/hotspot/share/runtime/semaphore.hpp:55
#5  write (msg=0x7ffa243ff7f0 ""GC(0) Concurrent Mark Idle (ZWorker#20) 1.081ms"", decorations=..., this=0x7ffa20001b90) at /data/openjdk/jdk_dev/src/hotspot/share/logging/logFileOutput.cpp:293
#6  LogFileOutput::write (this=0x7ffa20001b90, decorations=..., msg=0x7ffa243ff7f0 ""GC(0) Concurrent Mark Idle (ZWorker#20) 1.081ms"") at /data/openjdk/jdk_dev/src/hotspot/share/logging/logFileOutput.cpp:287
#7  0x00007ffa272f41f8 in log (msg=0x7ffa243ff7f0 ""GC(0) Concurrent Mark Idle (ZWorker#20) 1.081ms"", level=<optimized out>, this=<optimized out>) at /data/openjdk/jdk_dev/src/hotspot/share/logging/logOutputList.hpp:123
#8  LogTagSet::vwrite (this=<optimized out>, level=<optimized out>, fmt=<optimized out>, args=0x7ffa243ffa48) at /data/openjdk/jdk_dev/src/hotspot/share/logging/logTagSet.cpp:139
#9  0x00007ffa26fcdfbb in LogTargetHandle::print (this=this@entry=0x7ffa243ffb40, fmt=fmt@entry=0x7ffa2786db05 ""%s (%s) %.3fms"") at /data/openjdk/jdk_dev/src/hotspot/share/logging/logHandle.hpp:95
#10 0x00007ffa2778bc9c in ZStatPhase::log_end (this=this@entry=0x7ffa27d888a0 <ZSubPhaseConcurrentMarkIdle>, log=..., duration=..., thread=thread@entry=true) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zStat.cpp:625
#11 0x00007ffa2778c0a4 in ZStatSubPhase::register_end (this=0x7ffa27d888a0 <ZSubPhaseConcurrentMarkIdle>, start=..., end=...) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zStat.cpp:738
#12 0x00007ffa277600e4 in ~ZStatTimer (this=0x7ffa243ffc70, __in_chrg=<optimized out>) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zStat.hpp:316
#13 ZStatTimer::~ZStatTimer (this=0x7ffa243ffc70, __in_chrg=<optimized out>) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zStat.hpp:313
#14 0x00007ffa2776a001 in idle (this=0x7ffa20036610) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zMark.cpp:382
#15 ZMark::try_terminate (this=this@entry=0x7ffa20036610) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zMark.cpp:474
#16 0x00007ffa2776a478 in ZMark::work_without_timeout (this=this@entry=0x7ffa20036610, cache=cache@entry=0x7ffa243ffdc0, stripe=stripe@entry=0x7ffa20036e90, stacks=stacks@entry=0x7ffa20070b78) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zMark.cpp:512
#17 0x00007ffa2776b144 in ZMark::work (this=0x7ffa20036610, timeout_in_micros=0) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zMark.cpp:583
#18 0x00007ffa2779038c in ZTask::GangTask::work (this=0x7ff8bddfaaf8, worker_id=<optimized out>) at /data/openjdk/jdk_dev/src/hotspot/share/gc/z/zTask.cpp:34
#19 0x00007ffa2774e75f in run_task (this=0x7ffa20070b50, data=...) at /data/openjdk/jdk_dev/src/hotspot/share/gc/shared/workgroup.cpp:280
#20 GangWorker::loop (this=0x7ffa20070b50) at /data/openjdk/jdk_dev/src/hotspot/share/gc/shared/workgroup.cpp:290
#21 0x00007ffa276a45e6 in Thread::call_run (this=0x7ffa20070b50) at /data/openjdk/jdk_dev/src/hotspot/share/runtime/thread.cpp:402
#22 0x00007ffa2746c4d7 in thread_native_entry (thread=0x7ffa20070b50) at /data/openjdk/jdk_dev/src/hotspot/os/linux/os_linux.cpp:712
#23 0x00007ffa28364ea5 in start_thread () from /lib64/libpthread.so.0
#24 0x00007ffa27e898dd in clone () from /lib64/libc.so.6",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rzoz:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-03-21 19:19;roboduke;Changeset: 5a7f22ab
Author:    casparcwang <casparcwang@tencent.com>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-03-22 02:18:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5a7f22ab
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: reachable nodes shouldn't have dead uses at the end of optimizations,JDK-8263577,5044521,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,roland,roland,2021-03-15 01:59,2023-07-20 02:08,2023-10-01 09:57,2021-03-16 01:21,11,17,8,,,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,,"It's not uncommon for c2 to leave dead uses hanging from reachable nodes. It's usually harmless but can cause confusion (such as in 
valhalla JDK-8262289, not reproducible with non valhalla code AFAICT).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262289,JDK-8307522,JDK-8312438,JDK-8293413,JDK-8264649,JDK-8267212,,,,,JDK-8263672,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rzoj:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-16 01:21;roboduke;Changeset: 20297a1b
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-03-16 08:20:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/20297a1b
;;;","2021-03-16 03:54;thartmann;ILW = MLH = P4;;;","2021-08-31 18:04;hshi;Start backport this bug to jdk11u-dev, detail discuss in JDK-8272131.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Output from jstack mixed mode is misaligned,JDK-8263572,5044512,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,ksakata,ksakata,ksakata,2021-03-14 23:28,2021-03-29 11:44,2023-10-01 09:57,2021-03-23 14:13,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"When running jstack with mixed option,  the output of the lines that doesn't have an address are misaligned as followings. It will improve readability to align the indentation.

$ sudo jhsdb jstack --mixed --pid 5905
----------------- 5955 -----------------
""event-handler"" #20 daemon prio=5 tid=0x00007f133079a970 nid=0x1743 in Object.wait() [0x00007f1308bfe000]
   java.lang.Thread.State: WAITING (on object monitor)
   JavaThread state: _thread_blocked
0x00007f133a85b9f3      __pthread_cond_wait + 0x243
0x00007f133940b75b      os::PlatformEvent::park() + 0x8b
0x00007f13393b7b2d      ObjectMonitor::wait(long, bool, Thread*) + 0xf4d
0x00007f13397f0b95      ObjectSynchronizer::wait(Handle, long, Thread*) + 0x85
0x00007f1338e85961      JVM_MonitorWait + 0x241
0x00007f1328b264b7      java.lang.Object.wait(long) + 0xd7 (Native method)
0x00007f132177b3c4      * java.lang.Object.wait() bci:2 line:338 (Compiled frame)
* com.sun.tools.jdi.EventQueueImpl.removeUnfiltered(long) bci:64 line:190 (Compiled frame)
* com.sun.tools.jdi.EventQueueImpl.remove(long) bci:18 line:97 (Interpreted frame)
0x00007f1321009543      * com.sun.tools.jdi.EventQueueImpl.remove() bci:2 line:83 (Interpreted frame)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,,,,,"0|i2rzmj:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-03-23 14:13;roboduke;Changeset: 91d86e6a
Author:    Koichi Sakata <ksakata@openjdk.org>
Committer: Chris Plummer <cjplummer@openjdk.org>
Date:      2021-03-23 21:12:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/91d86e6a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Fix residual reference to 'value',JDK-8263568,5044508,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yyang,yyang,yyang,2021-03-14 19:28,2021-03-24 00:02,2023-10-01 09:57,2021-03-24 00:02,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,,,,,,,,,,"javap tool is still outputting primitive type class modifiers as `value` class, it looks like we should tweak this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rzln:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gtests don't terminate the VM safely,JDK-8263567,5044507,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,dholmes,dholmes,2021-03-14 19:27,2022-01-15 06:02,2023-10-01 09:57,2021-08-09 14:01,11,17,,,,,,,18,hotspot,,0,gtest,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,redhat-interest,,,,,,,,,,,,,,,,,,"When a non-asserting gtest loads and initializes the JVM via JNI_CreateJavaVM, there is no corresponding clean shutdown via JNI_DestroyJavaVM. Instead the gtest wrapper macros just call ::exit to terminate the process. This can lead to problems if the atexit actions (including global destructors) trigger failures in concurrently executing threads in the JVM. A clean JVM exit will brings the system to a safepoint before performing shutdown actions, and then finally any atexit related actions.

We should look at providing a safe/safer termination process, either by using JNI_DestroyJavaVM, or more crudely (but perhaps expeditiously) calling _exit() instead of exit() so that we get a more immediate termination of the process without executing atexit hooks etc.",,,,,,,,,,JDK-8279670,JDK-8280050,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261916,JDK-8271080,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rzlf:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-18 23:11;dholmes;I originally filed this under ""test"" but it appears to have gone unnoticed there.;;;","2021-08-03 16:03;dholmes;I instrumented the gtest logic to see what code was being executed in what processes to understand when VMs are created and when they can be destroyed.

other_vm and vm_assert tests are run in their own processes to get their own JVM. We can destroy the other_vm VM via the TEST_OTHER_VM macro before it calls exit().

same_vm tests all run in the initial process and we create the JVM via the event handler when the first same_vm test runs; we can then destroy it after all tests have completed.

Here's sample logging showing the processes and VMs:

XXX: runUnitTestsInner (level 1, pid: 440f) for: *
XXX: Installing TestEventListener - JVMInitializerListener (pid: 440f)
[==========] Running 857 tests from 151 test cases.
[----------] Global test environment set-up.
[----------] 3 tests from AltHashingTest
[ RUN      ] AltHashingTest.halfsiphash_test_ByteArray
[       OK ] AltHashingTest.halfsiphash_test_ByteArray (1 ms)
[ RUN      ] AltHashingTest.halfsiphash_test_CharArray
[       OK ] AltHashingTest.halfsiphash_test_CharArray (0 ms)
[ RUN      ] AltHashingTest.halfsiphash_test_FromReference
[       OK ] AltHashingTest.halfsiphash_test_FromReference (0 ms)
[----------] 3 tests from AltHashingTest (1 ms total)

[----------] 1 test from ThreadsListHandle
[ RUN      ] ThreadsListHandle.sanity_vm
XXX: Creating VM for same_vm tests (pid: 440f)
XXX: JNI_CreateJavaVM succeeded: 152b65e7e9e0 (pid: 440f)
[       OK ] ThreadsListHandle.sanity_vm (0 ms)
[----------] 1 test from ThreadsListHandle (228 ms total)

[----------] 1 test from Align
[ RUN      ] Align.alignments
[       OK ] Align.alignments (34 ms)
[----------] 1 test from Align (34 ms total)

[----------] 117 tests from metaspace
[ RUN      ] metaspace.test_overwriter_vm_assert
XXX: runUnitTestsInner (level 1, pid: 4426) for: metaspace.test_overwriter_vm_assert
XXX: Creating VM for vm_assert_test (pid: 4426)
XXX: JNI_CreateJavaVM succeeded: 14cd5c4d39e0 (pid: 4426)
[       OK ] metaspace.test_overwriter_vm_assert (251 ms)
[ RUN      ] metaspace.arena_growth_policy_ReflectionMetaspaceType_true_vm
[       OK ] metaspace.arena_growth_policy_ReflectionMetaspaceType_true_vm (0 ms)
...
[----------] 4 tests from CollectorPolicy
[ RUN      ] CollectorPolicy.young_min_ergo_vm
[       OK ] CollectorPolicy.young_min_ergo_vm (0 ms)
[ RUN      ] CollectorPolicy.young_scaled_initial_ergo_vm
[       OK ] CollectorPolicy.young_scaled_initial_ergo_vm (0 ms)
[ RUN      ] CollectorPolicy.young_cmd_other_vm
XXX: runUnitTestsInner (level 1, pid: 444f) for: CollectorPolicy.young_cmd_other_vm
XXX: Creating VM for othervm_test (pid: 444f)
XXX: JNI_CreateJavaVM succeeded: 150a9d7d99e0 (pid: 444f)
XXX: DestroyJavaVM for: 150a9d7d99e0 (pid: 444f)
[       OK ] CollectorPolicy.young_cmd_other_vm (279 ms)
[ RUN      ] CollectorPolicy.old_cmd_other_vm
XXX: runUnitTestsInner (level 1, pid: 4463) for: CollectorPolicy.old_cmd_other_vm
XXX: Creating VM for othervm_test (pid: 4463)
XXX: JNI_CreateJavaVM succeeded: 1528039359e0 (pid: 4463)
[0.220s][warning][gc,ergo] Inconsistency between maximum heap size and maximum generation sizes: using maximum heap = 16819159040, -XX:OldSize flag is being ignored
[0.220s][warning][gc,ergo] Inconsistency between generation sizes and heap size, resizing the generations to fit the heap.
XXX: DestroyJavaVM for: 1528039359e0 (pid: 4463)
[       OK ] CollectorPolicy.old_cmd_other_vm (260 ms)
[----------] 4 tests from CollectorPolicy (539 ms total)

[----------] 1 test from CommittedVirtualMemoryTracker
[ RUN      ] CommittedVirtualMemoryTracker.test_committed_virtualmemory_region_vm
[       OK ] CommittedVirtualMemoryTracker.test_committed_virtualmemory_region_vm (2 ms)
[----------] 1 test from CommittedVirtualMemoryTracker (2 ms total)
...
[----------] 1 test from LogConfiguration
[ RUN      ] LogConfiguration.output_reconfigured_other_vm
XXX: runUnitTestsInner (level 1, pid: 45d2) for: LogConfiguration.output_reconfigured_other_vm
XXX: Creating VM for othervm_test (pid: 45d2)
XXX: JNI_CreateJavaVM succeeded: 14c060ec39e0 (pid: 45d2)
XXX: DestroyJavaVM for: 14c060ec39e0 (pid: 45d2)
[       OK ] LogConfiguration.output_reconfigured_other_vm (266 ms)
[----------] 1 test from LogConfiguration (266 ms total)
...
[----------] 4 tests from SafepointLockAssertTest
[ RUN      ] SafepointLockAssertTest.always_check_vm_assert
XXX: runUnitTestsInner (level 1, pid: 472d) for: SafepointLockAssertTest.always_check_vm_assert
XXX: Creating VM for vm_assert_test (pid: 472d)
XXX: JNI_CreateJavaVM succeeded: 1469a87829e0 (pid: 472d)
[       OK ] SafepointLockAssertTest.always_check_vm_assert (243 ms)
[ RUN      ] SafepointLockAssertTest.never_check_vm_assert
XXX: runUnitTestsInner (level 1, pid: 4741) for: SafepointLockAssertTest.never_check_vm_assert
XXX: Creating VM for vm_assert_test (pid: 4741)
XXX: JNI_CreateJavaVM succeeded: 15125e39e9e0 (pid: 4741)
[       OK ] SafepointLockAssertTest.never_check_vm_assert (245 ms)
[ RUN      ] SafepointLockAssertTest.special_locks_vm_assert
XXX: runUnitTestsInner (level 1, pid: 4755) for: SafepointLockAssertTest.special_locks_vm_assert
XXX: Creating VM for vm_assert_test (pid: 4755)
XXX: JNI_CreateJavaVM succeeded: 14be435489e0 (pid: 4755)
[       OK ] SafepointLockAssertTest.special_locks_vm_assert (242 ms)
[ RUN      ] SafepointLockAssertTest.possible_safepoint_lock_vm_assert
XXX: runUnitTestsInner (level 1, pid: 4769) for: SafepointLockAssertTest.possible_safepoint_lock_vm_assert
XXX: Creating VM for vm_assert_test (pid: 4769)
   JavaThread state: _thread_in_vm
 Locks owned:
Mutex: [0x000055dcb8d4a3b0] SpecialTest_lock - owner: 0x000055dcb893c610 allow_vm_block safepoint_check_never
XXX: JNI_CreateJavaVM succeeded: 150caaea39e0 (pid: 4769)
[       OK ] SafepointLockAssertTest.possible_safepoint_lock_vm_assert (242 ms)
[----------] 4 tests from SafepointLockAssertTest (972 ms total)
...
[----------] Global test environment tear-down
[==========] 857 tests from 151 test cases ran. (65447 ms total)
[  PASSED  ] 857 tests.

  YOU HAVE 8 DISABLED TESTS

XXX: JVMInitializerListener: DestroyJavaVM for: 152b65e7e9e0 (pid: 440f)
XXX: RUN_ALL_TESTS (level 1) has completed (pid: 440f)

;;;","2021-08-09 14:01;roboduke;Changeset: 843943c2
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-08-09 20:59:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/843943c204f6e8ca046919eae4e727bef6e3326c
;;;","2022-01-13 06:23;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
No risk, only a test change.
Clean backport.
SAP nightly testing passed.;;;","2022-01-13 06:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/90
Date: 2022-01-13 14:22:46 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
NPE was thrown when sun.jvm.hotspot.rmi.serverNamePrefix was set,JDK-8263565,5044504,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2021-03-14 18:49,2021-04-12 15:10,2023-10-01 09:57,2021-04-05 17:09,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"NPE was thrown when I set server name prefix for debugd as following:

```
$ jhsdb -J-Dsun.jvm.hotspot.rmi.serverNamePrefix=test debugd --pid 781
Attaching to process ID 781 and starting RMI services, please wait...
Error attaching to process or starting server: sun.jvm.hotspot.debugger.DebuggerException: java.lang.NullPointerException: Cannot invoke ""String.length()"" because ""this.input"" is null
        at jdk.hotspot.agent/sun.jvm.hotspot.RMIHelper.rebind(RMIHelper.java:78)
        at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.setupDebugger(HotSpotAgent.java:379)
        at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.go(HotSpotAgent.java:329)
        at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.startServer(HotSpotAgent.java:215)
        at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runDEBUGD(SALauncher.java:431)
        at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:493)
Caused by: java.lang.NullPointerException: Cannot invoke ""String.length()"" because ""this.input"" is null
        at java.base/java.net.URI$Parser.parse(URI.java:3166)
        at java.base/java.net.URI.<init>(URI.java:623)
        at java.rmi/java.rmi.Naming.intParseURL(Naming.java:273)
        at java.rmi/java.rmi.Naming.parseURL(Naming.java:237)
        at java.rmi/java.rmi.Naming.rebind(Naming.java:171)
        at jdk.hotspot.agent/sun.jvm.hotspot.RMIHelper.rebind(RMIHelper.java:64)
        ... 5 more
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rzkr:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-04-05 17:09;roboduke;Changeset: b1a225e1
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2021-04-06 00:09:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b1a225e1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Checking if proxy_klass_head is still lambda_proxy_is_available,JDK-8263562,5044487,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yyang,yyang,yyang,2021-03-14 05:59,2021-04-05 23:59,2023-10-01 09:57,2021-03-16 11:49,17,,,,,,,,17,hotspot,,0,alibaba-interest,cds,,,,,,,,,,,,,,,,,,,,,"The `Shared Lambda Dictionary` section in the result of SharedLambdaDictionaryPrinter will mix normal klasses with lambda proxy klasses. Using the following commands can reproduce it:

Proc1: `./jshell`     Proc2: `jcmd <proc1> VM.systemdictionary -verbose`

When all archived lambda proxy classes are used, proxy_klass_head(in RunTimeLambdaProxyClassInfo) is still referring to an instance klass that is no longer lambda_proxy_is_available, and its next_link will be set by classloader to link another normal class. Simply checking if proxy_klass_head is lambda_proxy_is_available can solve this problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rzgz:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-16 11:49;roboduke;Changeset: 0d2f87e4
Author:    Yi Yang <yyang@openjdk.org>
Committer: Ioi Lam <iklam@openjdk.org>
Date:      2021-03-16 18:48:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0d2f87e4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Add missing initializers to VM_PopulateDumpSharedSpace,JDK-8263559,5044481,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2021-03-13 22:23,2021-03-22 13:09,2023-10-01 09:57,2021-03-15 22:48,17,,,,,,,,17,hotspot,,0,sonarcloud-found,,,,,,,,,,,,,,,,,,,,,,"Sonarcloud reports missing initializers in VM_PopulateDumpSharedSpace. I don't see how this could lead to an error, since these members are initialized later, but for cleanliness sake lets initialize them.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rzfn:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-15 22:48;roboduke;Changeset: ba35193c
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-03-16 05:47:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ba35193c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Possible NULL dereference in fast path arena free if ZapResourceArea is true,JDK-8263558,5044480,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2021-03-13 22:02,2021-05-12 07:31,2023-10-01 09:57,2021-03-20 02:35,11,16,17,8,,,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok-next,jdk16u-fix-yes,redhat-interest,sonarcloud-found,,,,,,,,,,,,,,,,"Sonarcloud reports a possible NULL dereference when zapping the to-be-freed area in fast-path arena free. Possible call stack for this to happen originates in Node::destruct(PhaseValues* phase).
",,,,,,,,,,JDK-8264916,JDK-8264784,JDK-8264394,JDK-8267003,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rzff:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-16 11:17;mseledtsov;ILW = MLM = P4;;;","2021-03-20 02:35;roboduke;Changeset: d2c137d4
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-03-20 09:06:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d2c137d4
;;;","2021-03-30 06:51;hseigel;Fix Request (16u)

Backporting this small low-risk fix prevents this issue from occurring in JDK-16u. The original bug fix patch applied cleanly. After applying the patch to a JDK-16u repo, the fix was regression tested by running Mach5 tiers 1 and 2 on Linux, Windows, and Mac OS and Mach5 tiers 3-5 on Linux x64.;;;","2021-04-06 11:02;zgu;11u code review thread:  https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-April/005604.html;;;","2021-04-07 05:14;zgu;Fix Request (11u)

I would like to backport this patch to 11u for parity with Oracle 11.0.12-oracle.
The original patch does not apply cleanly due to method signature change that is not backported.

11u change has been reviewed.
;;;",,,,,,,,,,,,,,,,,,,,,,,
Possible NULL dereference in Arena::destruct_contents(),JDK-8263557,5044479,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2021-03-13 21:48,2021-03-23 05:54,2023-10-01 09:57,2021-03-15 22:49,11,16,17,8,,,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok-next,jdk16u-fix-yes,sonarcloud-found,,,,,,,,,,,,,,,,,"Sonarcloud reports a possible access to a NULL C++ object in Arena::destruct_contents():

```
_first->chop();
```

I have found no code path where this could happen but _first could conceivably be NULL after a call to Arena::reset(). Lets fix that.
",,,,,,,,,,JDK-8263872,JDK-8264035,JDK-8263685,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rzf7:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-15 22:49;roboduke;Changeset: c484d890
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-03-16 05:49:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c484d890
;;;","2021-03-17 05:38;hseigel;Fix Request (16u)

Backporting this small low-risk fix prevents this issue from occurring in JDK-16u. The original bug fix patch applied cleanly. After applying the patch to a JDK-16u repo, the fix was regression tested by running Mach5 tiers 1 and 2 on Linux, Windows, and Mac OS.;;;","2021-03-22 07:51;zgu;Fix Request (11u)

I would like to backport this patch to 11u for parity with Oracle 11.0.12.

The original patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
 8263412 can cause jtreg testlibrary split,JDK-8263549,5044459,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,iignatyev,iignatyev,iignatyev,2021-03-12 19:06,2021-11-04 11:01,2023-10-01 09:57,2021-03-13 06:52,17,,,,,,,,17,hotspot,,0,intermittent,noreg-self,tier3,tier4,,,,,,,,,,,,,,,,,,,"after JDK-8263412, we might (again) encounter NCDFE b/c parts of testlibraries aren't on the classpath. this happens when jtreg builds `jdk.test.lib.helpers.ClassFileInstaller` as a part of test-specific code, but `ClassFileInstaller` as part of shared testibrary directory in one test, when in the following test, jtreg sees `ClassFileInstaller` in the shared directory, hence javac won't recompile it/its dependencies, but in runtime `jdk.test.lib.helpers.ClassFileInstaller` is nowhere to be found, hence we get NCDFE.
TEST: runtime/cds/appcds/customLoader/HelloCustom_JFR.java
...
[2021-03-13T02:00:07,610Z]         ClassFileInstaller -jar hello.jar HelloUnload jdk.test.lib.classloader.ClassUnloadCommon 'jdk.test.lib.classloader.ClassUnloadCommon$1' 'jdk.test.lib.classloader.ClassUnloadCommon$TestFailure'
[2021-03-13T02:00:07,610Z] STDERR:
[2021-03-13T02:00:07,610Z] java.lang.NoClassDefFoundError: jdk/test/lib/helpers/ClassFileInstaller
[2021-03-13T02:00:07,610Z] 	at ClassFileInstaller.main(ClassFileInstaller.java:63)
[2021-03-13T02:00:07,610Z] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[2021-03-13T02:00:07,610Z] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
[2021-03-13T02:00:07,610Z] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[2021-03-13T02:00:07,610Z] 	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
[2021-03-13T02:00:07,610Z] 	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
[2021-03-13T02:00:07,610Z] 	at java.base/java.lang.Thread.run(Thread.java:831)
[2021-03-13T02:00:07,610Z] Caused by: java.lang.ClassNotFoundException: jdk.test.lib.helpers.ClassFileInstaller
[2021-03-13T02:00:07,610Z] 	at java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:432)
[2021-03-13T02:00:07,610Z] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:586)
[2021-03-13T02:00:07,610Z] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:519)
[2021-03-13T02:00:07,610Z] 	... 7 more
[2021-03-13T02:00:07,610Z] 
[2021-03-13T02:00:07,610Z] JavaTest Message: Test threw exception: java.lang.NoClassDefFoundError
[2021-03-13T02:00:07,610Z] JavaTest Message: shutting down test",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263704,JDK-8263715,JDK-8263412,,,,CODETOOLS-7902847,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rzar:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2021-03-12 19:09;iignatyev;it's worth noting that a) the failure is intermittent and depends on the test execution order; b) the ""split"" is caused not by the failing tests, but rather by some test executed before them. ;;;","2021-03-12 19:12;iignatyev;one way to solve that would be to replace all usages of `ClassFileInstaller` w/ `jdk.test.lib.helpers.ClassFileInstaller`, this effectively would restore the behavior as it was before JDK-8263412, however that means 800+ tests will have to be updated.;;;","2021-03-12 20:13;dcubed;Bumped to a P2 since this causes a huge number of failures in the CI starting with Tier3.;;;","2021-03-13 06:52;roboduke;Changeset: a7aba2b6
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-03-13 14:51:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a7aba2b6
;;;","2021-11-04 11:01;iklam;The underlying cause is CODETOOLS-7902847 . See this bug for an analysis and a simple reproducer.;;;",,,,,,,,,,,,,,,,,,,,,,,
runtime/cds/appcds/SharedRegionAlignmentTest.java fails to compile after JDK-8263412,JDK-8263548,5044458,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,iignatyev,dcubed,dcubed,2021-03-12 17:16,2021-03-17 21:58,2023-10-01 09:57,2021-03-12 17:33,17,,,,,,,,17,hotspot,,0,tier2,,,,,,,,,,,,,,,,,,,,,,"The following test fails to compile in the JDK17 CI:

runtime/cds/appcds/SharedRegionAlignmentTest.java

Here's a snippet from the log file:

----------direct:(8/612)----------
/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+14-1040/src.full/open/test/hotspot/jtreg/runtime/cds/appcds/SharedRegionAlignmentTest.java:42: error: cannot find symbol
    static String appJar = ClassFileInstaller.getJarPath(""hello.jar"");
                                             ^
  symbol:   method getJarPath(String)
  location: class ClassFileInstaller
Note: /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+14-1040/src.full/open/test/hotspot/jtreg/runtime/cds/appcds/SharedRegionAlignmentTest.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
1 error
result: Failed. Compilation failed: Compilation failed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263412,,,,,,JDK-8236847,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rzaj:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2021-03-12 17:28;dcubed;Looks like runtime/cds/appcds/SharedRegionAlignmentTest.java is a new
test that was added yesterday by JDK-8236847;;;","2021-03-12 17:33;roboduke;Changeset: 0b68ced0
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-03-13 01:33:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0b68ced0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"Add ""findsym"" command to clhsdb.html help file",JDK-8263546,5044456,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2021-03-12 16:12,2021-03-24 19:01,2023-10-01 09:57,2021-03-19 12:17,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"JDK-8261098 added the clhsdb ""findsym"" command, but src/jdk.hotspot.agent/doc/clhsdb.html was never updated to include the new command.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261098,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rza3:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-03-19 12:17;roboduke;Changeset: 30da9bc3
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-03-19 19:16:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/30da9bc3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Unused argument in ConstantPoolCacheEntry::set_field(),JDK-8263544,5044452,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fparain,fparain,fparain,2021-03-12 13:22,2021-03-22 13:08,2023-10-01 09:57,2021-03-15 05:58,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,The root_klass argument in method ConstantPoolCacheEntry::set_field() is unused and should be removed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rz97:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-15 05:58;roboduke;Changeset: 80cdf788
Author:    Frederic Parain <fparain@openjdk.org>
Date:      2021-03-15 12:57:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/80cdf788
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove unused buffer int,JDK-8263531,5044434,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,ryadav,ryadav,2021-03-12 08:06,2021-07-19 14:17,2023-10-01 09:57,2021-07-13 09:56,11,17,18,,,,,,18,core-libs,,0,httpclient,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-cleanup,,,,,,,,,,,,,,,,,"jdk.internal.net.http.Http2Connection.java has an unused integer named BUFFER

Remove the int as it is of no use.",,,,,,,,,,JDK-8270905,JDK-8270899,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rz57:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-07-13 09:56;roboduke;Changeset: ca806ef3
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2021-07-13 16:55:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ca806ef31970e2d020e631d55b44cfe30e11c5ca
;;;","2021-07-14 00:07;clanger;Fix request (11u, 17u)
Request to backport this small cleanup in the aftermath of the April CPU update. It's just a removal of an unused variable. Patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
sun.awt.X11.ListHelper.removeAll() should use clear(),JDK-8263530,5044433,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-03-12 07:42,2021-03-22 13:08,2023-10-01 09:57,2021-03-15 02:51,11,13,15,16,17,8,,,17,client-libs,,0,redhat-interest,sonarcloud-found,,,,,,,,,,,,,,,,,,,,,"SonarCloud reports:
  Remove or correct this ""removeAll"" call.

    void removeAll() {
        items.removeAll(items); // <--- here
        updateScrollbars();
    }

Calling removeAll with the same collection risks concurrent modification exceptions. clear() would be correct and more efficient.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rz4z:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-03-15 02:51;roboduke;Changeset: 7b4aefe9
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-03-15 09:50:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7b4aefe9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Make static page ids safe from collision with language elements,JDK-8263528,5044430,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,hannesw,hannesw,2021-03-12 07:15,2021-05-10 03:26,2023-10-01 09:57,2021-03-25 01:57,16,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"Javadoc pages use ""search"" and ""reset"" as ids for the search input and reset button. These ids are valid Java identifiers and would conflict with fields with the same name. Static elements in javadoc pages should use ids that are not valid Java identifiers.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266808,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rz4b:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-03-25 01:57;roboduke;Changeset: d82464f8
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-03-25 08:56:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d82464f8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Generate flatter bindings,JDK-8263515,5044416,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-03-12 06:20,2021-04-09 08:41,2023-10-01 09:57,2021-04-09 08:03,repo-panama,,,,,,,,,tools,,0,foreign-jextract,,,,,,,,,,,,,,,,,,,,,,"Jextract generates all bindings in the same class; that means that structs and functional interfaces are nested inside the main header file. This is convenient, as this allows a client to import everything in a single shot (with a single toplevel static import).

But it has drawbacks as well:

* Some of the binary names generated for the bindings are not stable, and can change depending on filtering - this is because, when header splitting kicks in, a struct class can end up in any of the splitted headers, depending on how much stuff has been extracted before that point

* IDEs have an hard limit when it comes to file indexing; nesting everything in the same source file can, in extreme cases, generate a sourcefile so big that the IDE gives up on indexing

* generated classfiles contain a lot of boilerplate associated with InnerClass and nestmate attributes; while the overhead associated with those attributes is small (most of it affecting classfile parsing), it can add up, and it contributes to increasing the compiled size of the generated bindings.

* javadoc - in a world where each generated binding gets its own javadoc comment, having nested entities can make browsing the javadoc harder (as all the entities are presented as ""nested"" in the javadoc output).

For these reasons, it might be worthwhile to consider as to whether jextract should just emit toplevel classes instead of nested ones. This doesn't change the usability of the generated bindings much - but it does require at least an extra import statement, to import all classes in the extracted package.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265002,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rz17:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-03-12 06:22;mcimadamore;Some preliminary work here:

https://github.com/mcimadamore/panama-foreign/tree/non-nested;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Minor issue in JavacFileManager.SortFiles.REVERSE,JDK-8263514,5044415,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,shade,shade,shade,2021-03-12 05:51,2021-03-22 13:08,2023-10-01 09:57,2021-03-15 11:26,17,,,,,,,,17,tools,,0,noreg-hard,sonarcloud-found,,,,,,,,,,,,,,,,,,,,,"SonarCloud reports the problem in  JavacFileManager.SortFiles.REVERSE definition:
 Neither ""Math.abs"" nor negation should be used on numbers that could be ""MIN_VALUE""

        REVERSE {
            @Override
            public int compare(Path f1, Path f2) {
                return -f1.getFileName().compareTo(f2.getFileName());
            }
        }

Since compareTo can technically return MIN_VALUE, we cannot simply negate it. Luckily, we can just swap the f1 and f2 comparison order to achieve the same effect without exposing us to this corner case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rz0z:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-03-15 11:26;roboduke;Changeset: 5ab52448
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-03-15 17:38:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5ab52448
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos_aarch64] issues with calling va_args functions from invoke_native,JDK-8263512,5044413,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ngasson,vkempik,vkempik,2021-03-12 05:46,2021-06-10 17:54,2023-10-01 09:57,2021-06-04 17:38,17,,,,,,,,17,hotspot,,0,azul-interest,foreign-abi,,,,,,,,,,,,,,,,,,,,,"Testing https://github.com/openjdk/jdk/pull/2200 reveals this crash in java/foreign/StdLibTest.java
java/foreign/TestVarArgs.java
java/foreign/valist/VaListTest.java
The root cause of all three crashes is the same

snipets of stack traces:

StdLibTest.java

Current thread (0x000000012d009200):  JavaThread ""MainThread"" [_thread_in_native, id=24579, stack(0x000000016e190000,0x000000016e393000)]

Stack: [0x000000016e190000,0x000000016e393000],  sp=0x000000016e390480,  free space=2049k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libsystem_platform.dylib+0xfa4]  _platform_strlen+0x4
C  [libsystem_c.dylib+0x6796c]  __v2printf+0x194
C  [libsystem_c.dylib+0x42c4c]  vfprintf_l+0x44
C  [libsystem_c.dylib+0x411b8]  printf+0x54
C  0x047c80011209f27c
V  [libjvm.dylib+0x974590]  ProgrammableInvoker::invoke_native(void (*)(unsigned char*), unsigned char*, JavaThread*)+0xb8
V  [libjvm.dylib+0x97473c]  PI_invokeNative+0x104

printf is va_arg function as we all know.

VaListTest.java

Current thread (0x000000015c04dc00):  JavaThread ""MainThread"" [_thread_in_native, id=39939, stack(0x0000000171644000,0x0000000171847000)]

Stack: [0x0000000171644000,0x0000000171847000],  sp=0x0000000171844830,  free space=2050k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libVaList.dylib+0x3ac4]  sumHugeStruct+0x4
V  [libjvm.dylib+0x974590]  ProgrammableInvoker::invoke_native(void (*)(unsigned char*), unsigned char*, JavaThread*)+0xb8
V  [libjvm.dylib+0x97473c]  PI_invokeNative+0x104
j  jdk.internal.foreign.abi.ProgrammableInvoker.invokeNative(JJ)V+0 jdk.incubator.foreign@17-internal

where sumHugeStruct is va_arg function:

EXPORT long long sumHugeStruct(va_list list) {
    HugePoint point = va_arg(list, HugePoint);
    return point.x + point.y + point.z;
}



va_args work diferently on macos_aarch64 then on intel
fixed part is passed in regs/on stack
variable part is passed on stack always

https://developer.apple.com/documentation/apple-silicon/addressing-architectural-differences-in-your-macos-code

""On arm64, the compiler always places variadic parameters on the stack, regardless of whether registers are available. If you implement a function with fixed parameters, but redeclare it with variadic parameters, the mismatch causes unexpected behavior at runtime.""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8249755,JDK-8265182,JDK-8265183,JDK-8263606,JDK-8265292,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i2rz0j:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-16 11:18;mseledtsov;ILW = HLM = P3;;;","2021-03-16 12:20;vkempik;These new apis were introduced by JEP-389;;;","2021-04-15 01:15;ngasson;I think we need to extend jdk.internal.foreign.abi.aarch64.CallArranger to know about the differences between Apple's ABI and the standard AArch64 ABI. Towards the end of this page there's a summary of points where the ABI differs:

https://developer.apple.com/documentation/xcode/writing_arm64_code_for_apple_platforms

@Anton are you planning to work on this? I'm happy to do it if you like as I ported the panama-foreign APIs to AArch64 originally.;;;","2021-04-15 07:55;akozlov;The root cause looks the same for me (wrong calling convention in Foreign API implementation), but I had no chance to look closer. @Nick, then I'm happily assigning this to you :) Feel free to ping us, if you'd see something interesting compared to Apple ABI in the interpreter. E.g. it does not need to support va_args, in contrast with the Foreign API.;;;","2021-04-19 10:12;mcimadamore;Thanks for filing this - so, it seems like ARM64/MacOs is using similar way to pass variadic arguments as Windows? E.g. everything passed on the stack, and va_list decays to a char* ? If that's the case we need a different VaList implementation, as well as different CallArranger classification - note that CLinker exposes a method ""asVarArg"" which takes a layout and returns a layout augmented with a variadic attribute, so that classification can occur correctly. Seems like similar thing is needed here.

More generally, right now the implementation assumes that Aarch64 == Aarch64/Linux. I think we need to break up the implementation to have different packages - windows, linux, macos - to support slightly different calling conventions on these OSs.;;;","2021-04-19 10:33;vkempik;yeah, variadic args are always on stack, fixed args follow the usual calling convention;;;","2021-04-20 03:34;ngasson;Maurizio, do you think we should introduce a completely separate MacAArch64 CABI enum value or just add a ""flavor"" argument to the existing AArch64Linker? The Linux AArch64 CallArranger works mostly as-is except for some differences in how < 8-byte types are packed on the stack. The va_list implementation is different - I have that working now using a slightly modified WinVaList.

I don't have an Arm64 Windows environment to test at moment, but from the document below, it also appears to use the same simplified va_list structure as macOS:

https://docs.microsoft.com/en-us/cpp/build/arm64-windows-abi-conventions
;;;","2021-04-20 06:01;mcimadamore;I believe we should introduce a new enum constant, yes. That is the more robust solution going forward. Internally, the linkers can find ways to reuse code as required - but they are different linkers. I believe, for instance, that two different linkers on ARM64 might be able to use the same call arranger with different flavors - but the enum constant is needed anyway to:

* get the right CLinker instance
* get the right layout types (e.g. ARM64/Windows will still have C_LONG be 32 bits I think?)
* implement right flavor of VaList
* ...

So, yes we need an enum constant for Arm64/MacOs, and, I think another one for Arm64/Windows.;;;","2021-05-18 12:52;mbeckwit;+1 to @Maurizio.
Also @Nick, we can enable the Arm64 + Windows (and Linux and macOS) testing at our end.;;;","2021-05-18 18:57;ngasson;@Monica OK sure. There's a work-in-progress PR here to split up the AArch64 ABI backend into per-OS variants, but it's paused until the latest Panama JEP is integrated: https://github.com/openjdk/jdk/pull/3617;;;","2021-06-02 06:09;mcimadamore;We have integrated https://git.openjdk.java.net/jdk/pull/3699 (JEP-412);;;","2021-06-04 17:38;roboduke;Changeset: 76b54a19
Author:    Nick Gasson <ngasson@openjdk.org>
Date:      2021-06-04 23:55:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/76b54a19955cd93f071cf1fb45c6d01bb57b84eb
;;;",,,,,,,,,,,,,,,,
LdapSchemaParser.readNextTag checks array length incorrectly,JDK-8263509,5044410,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,shade,shade,shade,2021-03-12 05:22,2021-03-22 13:10,2023-10-01 09:57,2021-03-16 03:54,17,,,,,,,,17,core-libs,,0,sonarcloud-found,,,,,,,,,,,,,,,,,,,,,,"SonarCloud rightfully says:
  The length of ""values"" is always "">=0"", so update this test to either ""==0"" or "">0"".

        // make sure at least one value was returned
        if(values.length < 0) { // <--- here
            throw new InvalidAttributeValueException(""no values for "" +
                                                     ""attribute \"""" +
                                                     tagName + ""\"""");
        }

There is a subsequent access to values[0], which means the failure would throw AIOOB, not InvalidAttributeValueException.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ryzv:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@226ed983,,,,,,,,,"2021-03-16 03:54;roboduke;Changeset: 83a9a029
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-03-16 10:54:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/83a9a029
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Make sun.net.httpserver.UnmodifiableHeaders unmodifiable,JDK-8263506,5044407,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jboes,jboes,jboes,2021-03-12 04:54,2021-04-14 17:25,2023-10-01 09:57,2021-04-08 06:10,,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,The map field in sun.net.httpserver.UnmodifiableHeaders should be unmodifiable.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ryz7:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-04-08 06:10;roboduke;Changeset: 214d6e21
Author:    Julia Boes <jboes@openjdk.org>
Date:      2021-04-08 13:09:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/214d6e21
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Some OutputMachOpcodes fields are uninitialized,JDK-8263504,5044406,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-03-12 04:52,2021-09-29 02:08,2023-10-01 09:57,2021-03-14 23:25,11,13,15,16,17,8,,,17,hotspot,,0,c2,cleanup,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,oracle-triage-17,redhat-interest,sonarcloud-found,,,,,,,,,,,,,"SonarCloud reports:
  2 uninitialized fields at the end of the constructor calls

class OutputMachOpcodes : public OutputMap {
  int begin_inst_chain_rule;
  int end_inst_chain_rule;
  int begin_rematerialize;
  int end_rematerialize;
  int end_instructions;
public:
  OutputMachOpcodes(FILE *hpp, FILE *cpp, FormDict &globals, ArchDesc &AD)
    : OutputMap(hpp, cpp, globals, AD, ""MachOpcodes""),
      begin_inst_chain_rule(-1), end_inst_chain_rule(-1), end_instructions(-1)

They are written on all paths that I can see, but they should be initialized anyway, at least for proper checks in closing().",,,,,,,,,,JDK-8264351,JDK-8263741,JDK-8265637,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ryyz:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-14 23:25;roboduke;Changeset: b371f90f
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-03-15 06:25:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b371f90f
;;;","2021-03-15 02:23;thartmann;ILW = Uninitialized fields, not an issue in current code, no workaround = MLH = P4;;;","2021-03-26 06:06;mdoerr;Fix Request (11u)
Should get backported for parity with 11.0.12-oracle. Applies cleanly.;;;","2021-04-19 05:36;shade;Fix Request (8u)

Same reason as for 11u. Patch applies cleanly (with usual reshufflings), passes tier1.;;;",,,,,,,,,,,,,,,,,,,,,,,,
compiler/oracle/TestInvalidCompileCommand.java fails with release VMs,JDK-8263501,5044404,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2021-03-12 03:52,2021-09-29 02:07,2023-10-01 09:57,2021-03-12 14:57,17,,,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-self,oracle-triage-17,tencent-interest,tier6,,,,,,,,,,,,,,,,,,"STDERR:
 stdout: [CompileCommand: An error occurred during parsing
Error: Unrecognized option 'TestOptionDouble'
Line: 'option,Test::test,TestOptionDouble,3.14'

Usage: '-XX:CompileCommand=<option>,<method pattern>' - to set boolean option to true
Usage: '-XX:CompileCommand=<option>,<method pattern>,<value>'
Use:   '-XX:CompileCommand=help' for more information and to list all option.

The test should be fixed for the release VMs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263353,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ryyj:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-12 09:25;dcubed;There are two sightings of this failure mode in Tier6 starting with jdk-17+14-1022-tier6.
The failures occur on both Linux-X64 and Windows-X64 using 'release' bits.;;;","2021-03-12 14:57;roboduke;Changeset: bf9b5fa7
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-03-12 22:56:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bf9b5fa7
;;;","2021-03-13 06:34;dcubed;This fix for this bug is in jdk-17+14-1039.;;;","2021-03-15 02:24;thartmann;ILW = Test fails (test bug), with release VM, no workaround = MMH = P3;;;",,,,,,,,,,,,,,,,,,,,,,,,
[macos] Crash occurs on JPasswordField with activated InputMethod,JDK-8263490,5044389,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tnakamura,tnakamura,tnakamura,2021-03-11 22:53,2021-10-19 03:50,2023-10-01 09:57,2021-03-15 02:21,11,16,17,,,,,,17,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jnf,noreg-hard,,,,,,,,,,,,,,,,,,,"FULL PRODUCT VERSION :
openjdk version ""17-ea"" 2021-09-14
OpenJDK Runtime Environment (build 17-ea+13-1000)
OpenJDK 64-Bit Server VM (build 17-ea+13-1000, mixed mode, sharing)

ADDITIONAL OS VERSION INFORMATION :
macOS Catalina or BigSur Japanese

A DESCRIPTION OF THE PROBLEM :
If Input Method is activated on JPasswordField, unexpected behaviors occur intermittently.
- Crash
- Exception was thrown
    ""Apple AWT Internal Exception: java.lang.NullPointerException""

This scenario is unusual, but I'd like to avoid crash.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
0. Add Japanese Input Method to OS
1. Launch sample JPasswordField dialog
2. Activate Japanese Input Method
3. Type some keys

EXPECTED VERSUS ACTUAL BEHAVIOR :
Expected:
Typed keys were input.

Actual:
Crash or exception thrown or normal(keys were input)

REPRODUCIBILITY :
Intermittent

---------- BEGIN SOURCE ----------
import javax.swing.*;
public class JPasswordFieldTest {
    public static void main(String[] args) {
        JFrame frame = new JFrame(""Swing JPasswordField component"");
        JPasswordField passwordField = new JPasswordField();
        frame.add(passwordField);
        frame.setSize(200, 50);
        frame.setVisible(true);
    }
}
---------- END SOURCE ----------",macOS Catalina or BigSur Japanese,,,,,,,,,JDK-8273079,JDK-8273055,JDK-8275501,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-11 22:51;tnakamura;hs_err_pid2568.log;https://bugs.openjdk.org/secure/attachment/93631/hs_err_pid2568.log",,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2ryv7:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@54799779,,,,,,,,,"2021-03-15 02:21;roboduke;Changeset: 32c7fcc6
Author:    Toshio Nakamura <tnakamura@openjdk.org>
Committer: Dmitry Markov <dmarkov@openjdk.org>
Date:      2021-03-15 09:20:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/32c7fcc6
;;;","2021-08-26 01:07;tnakamura;Fix Request

Backporting this patch eliminates the crush issue with Input Method operations of GUI on macOS.
The patch only requires adjustment copyright year, and pull request has been reviewed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Verify CWarningWindow works with metal rendering pipeline,JDK-8263488,5044384,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aghaisas,aghaisas,aghaisas,2021-03-11 21:15,2021-03-24 19:02,2023-10-01 09:57,2021-03-21 19:45,17,,,,,,,,17,client-libs,,0,code-review,lanai,lanai-to-default,sn_89,,,,,,,,,,,,,,,,,,,"Verify CWarningWindow works with metal rendering pipeline

This bug is to address a TODO identified in code review - 
https://github.com/openjdk/jdk/pull/2403",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261630,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2ryu3:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-21 19:45;roboduke;Changeset: 42104e55
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2021-03-22 02:44:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/42104e55
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Clean up MTLSurfaceDataBase.h,JDK-8263486,5044382,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,aghaisas,aghaisas,2021-03-11 20:14,2021-06-07 15:07,2023-10-01 09:57,2021-05-21 20:16,17,,,,,,,,17,client-libs,,0,code-review,lanai,sn_92,sn_93,sn_94,,,,,,,,,,,,,,,,,,"MTLSurfaceDataBase.h file contains BMTLSDOps struct. Some cleanup is needed in this file.
This was brought up during code review - https://github.com/openjdk/jdk/pull/2403#discussion_r592840260

1) Verify that all fields in this structure are needed. If unused, remove them. Note that a clean build will be needed for testing if this structure is modified.

2) The comments describing this structure has some invalid reference to WindowsXP etc. Review and clean up the description as well.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2rytn:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-05-13 04:56;aghaisas;Found some much needed cleanup in MTLSurfaceData.m as well.
Also, there are some OpenGL references in MTLPipelineStatesStorage.m & MTLRenderQueue.m which can be removed.;;;","2021-05-21 20:16;roboduke;Changeset: 72c9567b
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2021-05-22 03:16:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/72c9567b4663fc816e4b85b46ea49b20ea78bd72
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Specification of JComponent::setDefaultLocale doesn't mention that passing 'null' restores VM's default locale,JDK-8263481,5044375,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,dbessono,dbessono,2021-03-11 15:51,2021-03-29 15:55,2023-10-01 09:57,2021-03-18 21:29,15,16,17,,,,,,17,client-libs,,0,conformance,sn_89,,,,,,,,,,,,,,,,,,,,,"The current state of specification for 
https://docs.oracle.com/en/java/javase/15/docs/api/java.desktop/javax/swing/JComponent.html#setDefaultLocale(java.util.Locale)
doesn't mention anything about passing 'null' as a new default locale.

In fact for OpenJDK implementation passing 'null' restores the default VM's locale for newly created JComponents.",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264398,,,,JDK-8263472,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rys3:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-03-18 21:29;roboduke;Changeset: d24e4cfe
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-03-19 04:28:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d24e4cfe
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/sa/ClhsdbDumpheap.java timed out,JDK-8263477,5044371,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,dcubed,dcubed,2021-03-11 13:42,2021-03-17 21:59,2023-10-01 09:57,2021-03-13 14:52,17,,,,,,,,17,hotspot,,0,intermittent,tier7,tier8,,,,,,,,,,,,,,,,,,,,"The following test timed out in the JDK17 CI:

serviceability/sa/ClhsdbDumpheap.java

Here's a snippet from the log file:

HprofReader.getStack() output:
Dump file created Thu Mar 11 21:13:08 GMT 2021
SerialNo 8
  java.lang.Object.wait(J)V (Object.java:(native method))
  java.lang.ref.ReferenceQueue.remove(J)Ljava/lang/ref/Reference; (ReferenceQueue.java:155)
  jdk.internal.ref.CleanerImpl.run()V (CleanerImpl.java:140)
  java.lang.Thread.run()V (Thread.java:831)
  jdk.internal.misc.InnocuousThread.run()V (InnocuousThread.java:161)
SerialNo 7
SerialNo 6
SerialNo 5
SerialNo 4
  java.lang.Object.wait(J)V (Object.java:(native method))
  java.lang.ref.ReferenceQueue.remove(J)Ljava/lang/ref/Reference; (ReferenceQueue.java:155)
  java.lang.ref.ReferenceQueue.remove()Ljava/lang/ref/Reference; (ReferenceQueue.java:176)
  java.lang.ref.Finalizer$FinalizerThread.run()V (Finalizer.java:171)
SerialNo 3
  java.lang.ref.Reference.waitForReferencePendingList()V (Reference.java:(native method))
  java.lang.ref.Reference.processPendingReferences()V (Reference.java:253)
  java.lang.ref.Reference$ReferenceHandler.run()V (Reference.java:215)
SerialNo 2
  java.lang.Thread.sleep(J)V (Thread.java:(native method))
  jdk.test.lib.apps.LingeredApp.main([Ljava/lang/String;)V (LingeredApp.java:534)
SerialNo 1

Starting clhsdb against 10972
[2021-03-11T21:13:49.533352200Z] Gathering output for process 17136
----------System.err:(0/0)----------
----------rerun:(49/6053)*----------

<snip>

result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-17+13-995\windows-x64-debug.jdk\jdk-17\fastdebug\bin\java' timed out (timeout set to 1200000ms, elapsed time including timeout handling was 1393437ms).

This test task has the following JVM args:

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:+DeoptimizeALot
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257234,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2ryr7:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-03-11 15:22;dcubed;The second sighting in jdk-17+13-995-tier7 had this log file snippet:

serviceability/sa/ClhsdbDumpheap.java 

with these JVM args;

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:+VerifyOops

Attaching to process 14432, please wait...
hsdb> hsdb> + verbose true
hsdb> + dumpheap gz=1gz=2
Usage: dumpheap [gz=<1-9>] [filename]
hsdb> + quit
Exactly one argument is expected for option ""gz""

 LingeredApp stdout: [];
 LingeredApp stderr: []
 LingeredApp exitValue = 0
Test PASSED
----------System.err:(1/16)----------
STATUS:Passed.
----------rerun:(49/6013)*----------

so the test timed out, but passed while the timeout handler was running.;;;","2021-03-11 23:11;cjplummer;For the failure immediately above, a bit more output helps tell the story:

Starting clhsdb against 14432
[2021-03-11T21:15:57.381396600Z] Gathering output for process 48780
Timeout refired 1200 times
[2021-03-11T21:17:17.715831800Z] Waiting for completion for process 48780
[2021-03-11T21:17:17.716812700Z] Waiting for completion finished for process 48780
Output: 
[51.728s][error][attach] could not open (2) pipe \\\\.\\pipe\\javatool116556254 to send result of operation jcmd
Attaching to process 14432, please wait...
hsdb> hsdb> + verbose true
hsdb> + dumpheap gz=1gz=2
Usage: dumpheap [gz=<1-9>] [filename]
hsdb> + quit
Exactly one argument is expected for option ""gz""

This test runs a lot of subtests. The timestamp of the first one is:

Starting clhsdb against 14432
[2021-03-11T20:57:36.416008300Z] Gathering output for process 37884
[2021-03-11T20:59:06.716939Z] Waiting for completion for process 37884
[2021-03-11T20:59:06.844598200Z] Waiting for completion finished for process 37884

That's about 20 minutes from the start of testing to the point where the ""Timeout refired 1200 times"" message appears. I think this test just needs a longer timeout than 20 minutes. This test doesn't specify a timeout value. The timeout factor for this run is 10x, so I assume the default timeout value is 120s. Probably doubling it to 240s is good enough.

In our testing results I see the top 300 slowest runs are all 11 to 19 minutes and on all platforms. They are all dated Feb 27th or later, which is when JDK-8257234 was pushed, which added a bunch more testing to this test.;;;","2021-03-13 14:52;roboduke;Changeset: 8e562d26
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-03-13 22:52:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8e562d26
;;;","2021-03-13 19:44;dcubed;This bug fix is in jdk-17+14-1047.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Specification of JComponent::updateUI should document that the default implementation does nothing,JDK-8263472,5044365,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,dbessono,dbessono,2021-03-11 12:37,2021-03-31 17:43,2023-10-01 09:57,2021-03-26 04:30,15,16,17,,,,,,17,client-libs,,0,conformance,sn_89,,,,,,,,,,,,,,,,,,,,,"The current state of specification for 
https://docs.oracle.com/en/java/javase/15/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()
is the following
===============
Resets the UI property to a value from the current look and feel. JComponent subclasses must override this method like this:

   public void updateUI() {
      setUI((SliderUI)UIManager.getUI(this);
   }
===============

It's unclear from the spec that the original implementation of the method does nothing. This deserves to be mentioned explicitly.
",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263845,JDK-8263907,JDK-8263481,JDK-8263766,JDK-8263768,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rypv:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-03-26 04:30;roboduke;Changeset: 4fbb7c24
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-03-26 11:29:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4fbb7c24
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8236847 causes tier1 build failure on linux-aarch64,JDK-8263465,5044348,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,minqi,dcubed,dcubed,2021-03-11 09:00,2021-03-17 21:56,2023-10-01 09:57,2021-03-11 10:55,17,,,,,,,,17,hotspot,,0,noreg-build,tier1,,,,,,,,,,,,,,,,,,,,,"[2021-03-11T16:56:26,505Z] checking if compatible cds region alignment enabled... enabled, from command line
[2021-03-11T16:56:26,505Z] configure: error: Option --enable-compatible-cds-alignment is not available
[2021-03-11T16:56:26,604Z] configure exiting with result code 1
[2021-03-11T16:56:26,674Z][INFO][pool-3-thread-1][c.o.j.s.e.SparkyExecutorBase] JIB configure finished in 15902 ms
[2021-03-11T16:56:26,677Z][INFO][pool-3-thread-1][c.o.j.s.e.j.JdkBuilder] Build failed: Error while running 'jib configure', return value: 1
com.oracle.java.sparky.executor.utils.BuildFailedException: Error while running 'jib configure', return value: 1
	at com.oracle.java.sparky.executor.jdkbuilder.JdkBuilder.configure(JdkBuilder.java:142)
	at com.oracle.java.sparky.executor.jdkbuilder.JdkBuilder.execute(JdkBuilder.java:75)
	at com.oracle.java.sparky.executor.SparkyExecutorRunner.lambda$run$2(SparkyExecutorRunner.java:108)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8236847,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i2rym3:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-11 09:51;iklam;The error is in this part of the log file:

[2021-03-11T16:59:32,438Z] checking if CDS archive is available... no (not possible with cross compilation)
[2021-03-11T16:59:32,439Z] checking if a default CDS archive should be generated... disabled, from default 'auto'
[2021-03-11T16:59:32,439Z] checking if CDS archive is available... no (CDS is disabled)
[2021-03-11T16:59:32,439Z] checking if compatible cds region alignment enabled... enabled, from command line
[2021-03-11T16:59:32,439Z] configure: error: Option --enable-compatible-cds-alignment is not available
[2021-03-11T16:59:32,526Z] configure exiting with result code 1

This part of make/autoconf/jdk-options.m4 is wrong:

      CHECK_AVAILABLE: [
        AC_MSG_CHECKING([if CDS archive is available])
        if test ""x$BUILD_CDS_ARCHIVE"" = ""xfalse""; then   <<<<<<<<<<<<<
          AVAILABLE=false
          AC_MSG_RESULT([no (CDS is disabled)])
        else
          AVAILABLE=true
          AC_MSG_RESULT([yes])
        fi

$BUILD_CDS_ARCHIVE means ""should we generate the default CDS archive during the build?"" 

It should be changed to

        if test ""x$ENABLE_CDS"" = ""xfalse""; then
          AC_MSG_RESULT([no (CDS is disabled)]);;;","2021-03-11 10:55;roboduke;Changeset: 15daccac
Author:    Yumin Qi <minqi@openjdk.org>
Date:      2021-03-11 18:54:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/15daccac
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/event/gc/detailed/TestEvacuationFailedEvent.java uses wrong mechanism to cause evacuation failure,JDK-8263461,5044344,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,dcubed,dcubed,2021-03-11 08:47,2022-03-10 04:40,2023-10-01 09:57,2021-06-30 01:06,17,18,,,,,,,18,hotspot,,0,gc-pending-review,intermittent,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,tier5,tier6,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

jdk/jfr/event/gc/detailed/TestEvacuationFailedEvent.java

Here's a snippet from the log file:

----------System.err:(15/931)----------
java.lang.RuntimeException: No events: expected false, was true
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertFalse(Asserts.java:461)
	at jdk.test.lib.jfr.Events.hasEvents(Events.java:161)
	at jdk.jfr.event.gc.detailed.TestEvacuationFailedEvent.main(TestEvacuationFailedEvent.java:66)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: No events: expected false, was true",,,,,,,,,,JDK-8281047,JDK-8282955,,,,,,,,,,,,,,,,,,,,,,JDK-8267135,,,,JDK-8270443,,,,,,,,,,,,"2021-06-15 07:42;dcubed;jdk-17+26_linux.8263461.zip;https://bugs.openjdk.org/secure/attachment/95142/jdk-17%2B26_linux.8263461.zip",,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2ryl7:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-03-15 02:17;tschatzl;The test tries to cause an evacuation failure by allocating until OOM. This procedure does not guarantee an allocation failure though. A better approach would probably be using the debug-level options to induce allocation failures instead.;;;","2021-06-15 07:42;dcubed;Here's the log from my jdk-17+26 stress run sighting:

$ unzip -l jdk-17+26_linux.8263461.zip
Archive:  jdk-17+26_linux.8263461.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    95100  2021-06-12 11:02   jdk-17+26_2/failures.linux-x86_64/TestEvacuationFailedEvent.jtr.release
---------                     -------
    95100                     1 file;;;","2021-06-30 01:06;roboduke;Changeset: ee0247f0
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-06-30 08:05:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ee0247f056daea7a0afdd572d13fb30f5164e889
;;;","2022-03-09 06:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/211
Date: 2022-03-09 14:02:48 +0000;;;","2022-03-09 06:10;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
Resolved ProblemList.
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,
DynamicArchiveRelocationTest.java fails in product VM,JDK-8263460,5044343,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,dcubed,dcubed,2021-03-11 08:40,2021-03-17 21:57,2023-10-01 09:57,2021-03-12 13:45,17,,,,,,,,17,hotspot,,0,aslr,cds,noreg-self,testbug,tier6,tier8,,,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

runtime/cds/appcds/dynamicArchive/DynamicArchiveRelocationTest.java

In this sighting there is a Win-X64 and a Linux-X64 sighting.

Here's a snippet from the failing test's log file for Linux-X64:

----------System.err:(23/1893)----------
java.lang.RuntimeException: The line/pattern '.*Unmapping region #1 at base 0x.*' until where the output should match can not be found: expected -1 > 7
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertGreaterThan(Asserts.java:343)
	at jdk.test.lib.process.OutputAnalyzer.shouldMatchByLine(OutputAnalyzer.java:719)
	at jdk.test.lib.process.OutputAnalyzer.shouldMatchByLine(OutputAnalyzer.java:685)
	at DynamicArchiveRelocationTest.lambda$doTest$1(DynamicArchiveRelocationTest.java:136)
	at jdk.test.lib.cds.CDSTestUtils$Result.assertNormalExit(CDSTestUtils.java:145)
	at DynamicArchiveRelocationTest.doTest(DynamicArchiveRelocationTest.java:121)
	at DynamicArchiveTestBase.runTest(DynamicArchiveTestBase.java:73)
	at DynamicArchiveRelocationTest.testInner(DynamicArchiveRelocationTest.java:67)
	at DynamicArchiveRelocationTest.testOuter(DynamicArchiveRelocationTest.java:55)
	at DynamicArchiveRelocationTest.main(DynamicArchiveRelocationTest.java:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException: The line/pattern '.*Unmapping region #1 at base 0x.*' until where the output should match can not be found: expected -1 > 7",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rykz:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-11 08:55;iklam;This failure happens only with product mode VM:

The handling of -XX:ArchiveRelocationMode=1 is different between fastdebug and product builds:

fastdebug: for testing purpose -- we always map at the default location, and then unmap, then map again at a random location.

product mode: (for fast performance) -- don't attempt to map at the default location. Just map at random location

Therefore, the ""unmap"" message is not available in product mode.
;;;","2021-03-12 13:45;roboduke;Changeset: 0c8350ed
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2021-03-12 21:45:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0c8350ed
;;;","2021-03-13 06:37;dcubed;The fix for this bug is in jdk-17+14-1038.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Add better support for restricted methods,JDK-8263459,5044342,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,sundar,mcimadamore,mcimadamore,2021-03-11 08:34,2021-03-29 08:03,2023-10-01 09:57,2021-03-29 08:03,repo-panama,,,,,,,,,tools,,0,foreign-abi,foreign-memaccess,,,,,,,,,,,,,,,,,,,,,"Right now, restricted methods are enabled/disabled globally, using a JDK runtime property.

Moving forward, we should make this approach more robust, by having a new, dedicated flag:

--enable-native-access=<module1>,<module2>,<moduleN>

That is, the command line flag is used to grant native access to a specific module that wants to perform restricted Panama operations. If a restricted method is executed from a module which hasn't been granted the permission on the command line, an error should occur.

To help detect configuration issues, we could have a Jlink plugin which marks a module as ""native"" (by using a custom annotation on the module info classfile). Then, when building the module graph, we could fail-fast if we detect that any ""native"" module 
doesn't have the corresponding command line flag set.

Finally, to support execution on the classpath, we should allow for:

--enable-native-access=ALL-UNNAMED
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rykr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make memory access and linker API preview APIs,JDK-8263457,5044340,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,,mcimadamore,mcimadamore,2021-03-11 08:28,2023-03-06 12:35,2023-10-01 09:57,2023-03-06 12:35,repo-panama,,,,,,,,tbd_major,tools,,0,foreign-abi,foreign-memaccess,,,,,,,,,,,,,,,,,,,,,"We should start planning for moving the foreign API from incubating modules back to java.base and mark it as preview.

Some initial considerations about where bits should go:

* create new package: java.foreign - and put most of the stuff there
* MemoryLayouts should disappear - Java layout constants should be moved in wrapper classes - other constants should be part of MemoryLayout
* MemoryHandles -> move to MethodHandles
* MemoryAccess -> consider renaming to MemorySegments",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rykb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NMT: assert on registering a region which completely engulfs an existing region,JDK-8263455,5044337,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stuefe,stuefe,stuefe,2021-03-11 08:13,2021-07-31 20:56,2023-10-01 09:57,2021-03-17 21:48,11,16,17,,,,,,17,hotspot,,0,nmt,sap-interest,,,,,,,,,,,,,,,,,,,,,"I am testing a prototype for JDK-8256844 which makes NMT late initializable. 

It works, and one of the benefits is that we now can run gtests with NMT enabled. 

Which exercises NMT in new ways. We promptly crash in the metaspace tests, which do a lot of arbitrary, random, but entirely valid range commits as part of the VirtualSpaceNode stress tests:

```
[ RUN      ] metaspace.virtual_space_node_test_5_vm
# To suppress the following error report, specify this argument                                                                                                                                                                                                                      
# after -XX: or in .hotspotrc:  SuppressErrorAt=/virtualMemoryTracker.hpp:243
assert failed: assert(rgn.base() >= end()) failed: Sanity#
# A fatal error has been detected by the Java Runtime Environment:                                                                                                                                                                                                                   
#                                                                                                                                                                                                                                                                                    
#  Internal Error (/shared/projects/openjdk/jdk-jdk/source/src/hotspot/share/services/virtualMemoryTracker.hpp:243), pid=183572, tid=183572                                                                                                                                          
#  assert(rgn.base() >= end()) failed: Sanity
#                                                                                                                                                                                                                                                                                    
```
Stack:
```
(gdb) bt                                                  
#0  0x00007ffff5b36cca in VirtualMemoryRegion::compare (this=0x555555b02278, rgn=...) at /shared/projects/openjdk/jdk-jdk/source/src/hotspot/share/services/virtualMemoryTracker.hpp:243                                                                                             
#1  0x00007ffff6cf6823 in compare_committed_region (r1=..., r2=...) at /shared/projects/openjdk/jdk-jdk/source/src/hotspot/share/services/virtualMemoryTracker.cpp:55                                                                                                                
#2  0x00007ffff5b39ee3 in SortedLinkedList<CommittedMemoryRegion, &(compare_committed_region(CommittedMemoryRegion const&, CommittedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MEMFLAGS)11, (AllocFailStrategy::AllocFailEnum)1>::add (this=0x555555b020b8,            
    node=0x555555b02300) at /shared/projects/openjdk/jdk-jdk/source/src/hotspot/share/utilities/linkedlist.hpp:389
#3  0x00007ffff5b39346 in LinkedListImpl<CommittedMemoryRegion, (ResourceObj::allocation_type)2, (MEMFLAGS)11, (AllocFailStrategy::AllocFailEnum)1>::add (this=0x555555b020b8, e=...) at /shared/projects/openjdk/jdk-jdk/source/src/hotspot/share/utilities/linkedlist.hpp:167      
#4  0x00007ffff5b39157 in SortedLinkedList<CommittedMemoryRegion, &(compare_committed_region(CommittedMemoryRegion const&, CommittedMemoryRegion const&)), (ResourceObj::allocation_type)2, (MEMFLAGS)11, (AllocFailStrategy::AllocFailEnum)1>::add (this=0x555555b020b8, e=...)     
    at /shared/projects/openjdk/jdk-jdk/source/src/hotspot/share/utilities/linkedlist.hpp:370                                                                                                                                                                                        
#5  0x00007ffff6cfa07b in ReservedMemoryRegion::add_committed_region (this=0x555555b020a8, rgn=...) at /shared/projects/openjdk/jdk-jdk/source/src/hotspot/share/services/virtualMemoryTracker.hpp:355                                                                               
...
(gdb) p *this         
$1 = {_base_address = 0x7fffb24c0000 """", _size = 1179648}      
(gdb) p rgn                                                                                                                                                                                                                                                                          
$2 = (const VirtualMemoryRegion &) @0x555555b02318: {_base_address = 0x7fffb2460000 """", _size = 2424832}
```
As we can see, the new committed to-be-registered region [0x7fffb2460000...7FFFB26B0000) completely engulfs an existing region [0x7fffb24c0000...0x7FFFB25E0000).

This triggers an assert in VirtualMemoryRegion:

```
  inline int compare(const VirtualMemoryRegion& rgn) const {
    if (overlap_region(rgn.base(), rgn.size())) {
      return 0;
    } else if (base() >= rgn.end()) {
      return 1;
    } else {
      assert(rgn.base() >= end(), ""Sanity"");   <<<
      return -1;
    }
  }
```
which calls 
```
  inline bool overlap_region(address addr, size_t sz) const {
    assert(sz > 0, ""Invalid size"");
    assert(size() > 0, ""Invalid size"");
    return contain_address(addr) ||
           contain_address(addr + sz - 1);
  }
```

but VirtualMemoryRegion::overlap_region does not handle the engulfing case correctly.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8243535,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ryjn:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-16 11:39;mseledtsov;ILW = HLM = P3;;;","2021-03-17 21:48;roboduke;Changeset: 444a80b9
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-03-18 04:47:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/444a80b9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
com.apple.laf.AquaFileChooserUI ignores the result of String.trim(),JDK-8263454,5044335,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,shade,shade,2021-03-11 08:09,2021-03-31 17:42,2023-10-01 09:57,2021-03-25 06:51,17,,,,,,,,17,client-libs,,0,noreg-hard,sn_89,sonarcloud-found,,,,,,,,,,,,,,,,,,,,"SonarCloud complains:
  The return value of ""trim"" must be used.

        // Try to get the custom text.  If none, use the fallback
        String getApproveButtonText(final JFileChooser fc, final String fallbackText) {
            final String buttonText = fc.getApproveButtonText();
            if (buttonText != null) {
                buttonText.trim(); // <--- here
                if (!buttonText.isEmpty()) return buttonText;
            }
            return fallbackText;
        }

        String getApproveButtonToolTipText(final JFileChooser fc, final String fallbackText) {
            final String tooltipText = fc.getApproveButtonToolTipText();
            if (tooltipText != null) {
                tooltipText.trim(); // <--- here
                if (!tooltipText.isEmpty()) return tooltipText;
            }
            return fallbackText;
        }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ryj7:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-03-25 06:51;roboduke;Changeset: c037e1ed
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2021-03-25 13:49:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c037e1ed
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Javac slow compilation due to algorithmic complexity ,JDK-8263452,5044332,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,mschoene,mschoene,2021-03-11 07:38,2021-05-17 17:40,2023-10-01 09:57,2021-05-11 03:07,15.0.2,,,,,,,,17,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"When compiling nested inner classes, there is a certain threshold where compilation times with become exponential with each additional nesting level. This can become a problem in learning environments where the Java Compiler API could be used to compile students scripts in a contained scenario. 

The following source can be created with the attached generator class GenOuterJava . The generator expects an outer class name and a maximum nesting level. It then generates a source file with all the nested classes. 

java GenOuterLevel JavacStalls 20 

The resulting JavacStalls.java can then be processed with Javac or the Compiler API. 

Levels from 30 above expose notable compilation times, especially for the relatively small file size of the originating (generated)  source file.   


public class JavacStalls {
        public JavacStalls() {};

   private void outerPrivate(String z) {
   }
class aa_ extends java.util.ArrayList<Void> {
        @Deprecated
        public aa_() {};
class ab_ extends aa_ {
        @Deprecated
        public ab_() {};
class ac_ extends ab_ {
        @Deprecated
        public ac_() {};

[..] 
class as_ extends ar_ {
        @Deprecated
        public as_() {};
class at_ extends as_ {
        @Deprecated
        public at_() {};
class Inner {
        //A a;
        public void innerPublic() {
        outerPrivate(Inner.class.toString());
        }
}
}}}}}}}}}}}}}}}}}}}}    public void outerPublic() {
                        System.out.println();
        }

};",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-11 07:57;mschoene;Bla.java;https://bugs.openjdk.org/secure/attachment/93625/Bla.java","2021-03-11 07:39;mschoene;GenOuterJava.java;https://bugs.openjdk.org/secure/attachment/93624/GenOuterJava.java",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ryij:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-03-11 07:46;mschoene;The most counted heap objects are:

jmap -histo:all  10491
No dump file specified
 num     #instances         #bytes  class name (module)
-------------------------------------------------------
   1:        156276        3750624  com.sun.tools.javac.util.List (jdk.compiler@15.0.2)
   2:          1778        1856936  [I (java.base@15.0.2)
   3:         20117        1637016  [B (java.base@15.0.2)
   4:         19626         471024  java.lang.String (java.base@15.0.2)
   5:          2813         339296  java.lang.Class (java.base@15.0.2)
   6:         10049         321568  java.util.HashMap$Node (java.base@15.0.2)
   7:          2463         275840  [Ljava.util.HashMap$Node; (java.base@15.0.2)
   8:          2019         206856  [Ljava.lang.Object; (java.base@15.0.2)
   9:          4687         187480  java.util.LinkedHashMap$Entry (java.base@15.0.2)
  10:          2304         185032  [J (java.base@15.0.2)
 ;;;","2021-03-11 07:53;mschoene;The observed stack is as follows

""main"" #1 prio=5 os_prio=31 cpu=66702.15ms elapsed=68.39s tid=0x00007fd6a5800600 nid=0x2303 runnable  [0x000070000aa0a000]
   java.lang.Thread.State: RUNNABLE
	at com.sun.tools.javac.file.PathFileObject.hashCode(jdk.compiler@15.0.2/PathFileObject.java:540)
	at java.util.HashMap.hash(java.base@15.0.2/HashMap.java:340)
	at java.util.HashMap.getNode(java.base@15.0.2/HashMap.java:570)
	at java.util.HashMap.get(java.base@15.0.2/HashMap.java:558)
	at com.sun.tools.javac.util.AbstractLog.getSource(jdk.compiler@15.0.2/AbstractLog.java:79)
	at com.sun.tools.javac.util.AbstractLog.useSource(jdk.compiler@15.0.2/AbstractLog.java:72)
	at com.sun.tools.javac.comp.Check$CycleChecker.checkSymbol(jdk.compiler@15.0.2/Check.java:2258)
	at com.sun.tools.javac.comp.Check$CycleChecker.checkClass(jdk.compiler@15.0.2/Check.java:2335)
	at com.sun.tools.javac.comp.Check$CycleChecker.visitClassDef(jdk.compiler@15.0.2/Check.java:2305)
	at com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(jdk.compiler@15.0.2/JCTree.java:790)
	at com.sun.tools.javac.tree.TreeScanner.scan(jdk.compiler@15.0.2/TreeScanner.java:49)
[...]
	at com.sun.tools.javac.main.JavaCompiler.compile(jdk.compiler@15.0.2/JavaCompiler.java:936)
	at com.sun.tools.javac.main.Main.compile(jdk.compiler@15.0.2/Main.java:317)
	at com.sun.tools.javac.main.Main.compile(jdk.compiler@15.0.2/Main.java:176)
	at com.sun.tools.javac.Main.compile(jdk.compiler@15.0.2/Main.java:59)
	at com.sun.tools.javac.Main.main(jdk.compiler@15.0.2/Main.java:45)
;;;","2021-05-11 03:07;roboduke;Changeset: 8468001f
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-05-11 10:06:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8468001f8885c0cb2e7db2254eacca857eff2378
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
CTW: fatal error: meet not symmetric,JDK-8263448,5044327,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kvn,shade,shade,2021-03-11 06:19,2021-04-22 02:19,2023-10-01 09:57,2021-04-01 10:03,11,16,17,,,,,,17,hotspot,,0,c2,ctw,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,,,,,,,,,,,,,,,,,"$ cd test/hotspot/jtreg/testlibrary/ctw
$ make
$ cd dist
$ wget https://cr.openjdk.java.net/~shade/8263448/test.jar
$ JAVA_OPTIONS=""-XX:+StressCCP"" ./ctw.sh ./test.jar

=== Meet Not Symmetric ===
t   =                   java/lang/reflect/Constructor:TopPTR:exact * (inline_depth=InlineDepthTop)
this=                   java/lang/reflect/Executable:TopPTR * (inline_depth=InlineDepthTop)
mt=(t meet this)=       java/lang/reflect/Constructor:TopPTR:exact * (inline_depth=InlineDepthTop)
t_dual=                 java/lang/reflect/Constructor:exact *,iid=top
this_dual=              java/lang/reflect/Executable *,iid=top
mt_dual=                java/lang/reflect/Constructor:exact *,iid=top
mt_dual meet t_dual=    java/lang/reflect/Constructor:exact *,iid=top
mt_dual meet this_dual= java/lang/reflect/Executable *

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/opto/type.cpp:850), pid=4108526, tid=4108566
#  fatal error: meet not symmetric

Run multiple times, because I think it does not fail every time. The actual JAR that fails is https://repo1.maven.org/maven2/com/groupdocs/groupdocs-assembly/18.5/groupdocs-assembly-18.5.jar, but it is far too long to compile. I dissected the part of it that fails more reliably.",,,,,,,,,,JDK-8265675,JDK-8265735,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-11 06:21;shade;hs_err_pid4108526.log;https://bugs.openjdk.org/secure/attachment/93622/hs_err_pid4108526.log","2021-03-11 06:21;shade;replay_pid4108526.log;https://bugs.openjdk.org/secure/attachment/93623/replay_pid4108526.log",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ryhf:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-11 06:23;thartmann;ILW = Assert during C2 compilation, intermittent with CTW and -XX:+StressCCP, no known workaround but disable compilation of affected method = HLM = P3;;;","2021-03-30 08:36;thartmann;To reproduce run:
java -XX:+ReplayIgnoreInitErrors -XX:+ReplayCompiles -XX:ReplayDataFile=replay_pid4108526.log -cp groupdocs-assembly-18.5.jar -XX:+StressCCP -XX:RepeatCompilation=1000
;;;","2021-03-30 09:25;thartmann;The problem is that the instance_id = top information is lost during this meet:
(java/lang/reflect/Constructor:exact *,iid=top) meet (java/lang/reflect/Executable *,iid=top) = java/lang/reflect/Executable *

The instance id is set to bottom here:
https://github.com/openjdk/jdk/blob/7603278164721bfbd4b70d316b62df5c9b334515/src/hotspot/share/opto/type.cpp#L4057;;;","2021-03-30 09:28;thartmann;[~kvn], you added that code with JDK-6723160, do you think the top case should be handled explicitly?;;;","2021-03-30 09:57;kvn;[~thartmann] It was fix for JDK-6723160. There was also JDK-6820514. We need to figure out what we should use here to satisfy all cases. Let me think.
;;;","2021-03-30 18:48;kvn;Note: Constructor subclass of abstract class Executable:
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/reflect/Constructor.java#L64
;;;","2021-03-30 20:07;kvn;The issue is in different places:
https://github.com/openjdk/jdk/blob/master/src/hotspot/share/opto/type.cpp#L3819
https://github.com/openjdk/jdk/blob/master/src/hotspot/share/opto/type.cpp#L3963

instance_id should be changed to InstanceBot only if it is real idx (Constant to type lattice). Otherwise we incorrectly change InstanceTop to InstanceBot.
In short, we should follow PTR transformation in this code.
;;;","2021-03-31 09:49;kvn;testing initial version of fix hit next issue running some of CTW testing:

=== Meet Not Commutative ===
t           = stable:int:127..-128:www[int:max..0]:TopPTR:exact *,iid=top (inline_depth=InlineDepthTop)
this        = java/lang/String:exact *,iid=top (inline_depth=InlineDepthTop)
t meet this = java/lang/Object:NotNull * (inline_depth=InlineDepthTop)
this meet t = java/lang/Object:NotNull *,iid=top (inline_depth=InlineDepthTop)
;;;","2021-03-31 12:41;kvn;I missed similar code in TypeAryPtr::xmeet_helper().;;;","2021-04-01 10:03;roboduke;Changeset: 6e0da996
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-04-01 17:03:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6e0da996
;;;","2021-04-21 08:23;shade;Fix Request (11u)

This fixes the compiler bug and keeps codebases in sync (I see 11.0.11-oracle). Patch applies cleanly to 11u, passes tier{1,2}.;;;",,,,,,,,,,,,,,,,,
Avoid unary minus over unsigned type in ObjectSynchronizer::dec_in_use_list_ceiling,JDK-8263446,5044322,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-03-11 05:06,2021-03-17 21:59,2023-10-01 09:57,2021-03-14 23:26,17,,,,,,,,17,hotspot,,0,sonarcloud-found,,,,,,,,,,,,,,,,,,,,,,"SonarCloud complains:
  Unary minus should not be applied to an unsigned expression

Here:

void ObjectSynchronizer::dec_in_use_list_ceiling() {
  Atomic::add(&_in_use_list_ceiling, -AvgMonitorsPerThreadEstimate);
}

We can instead use Atomic::sub.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8259349,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rygb:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-14 23:26;roboduke;Changeset: ba22e6f6
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-03-15 06:25:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ba22e6f6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Duplicate key compiler.err.expected.module in compiler.properties,JDK-8263445,5044321,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asotona,prappo,prappo,2021-03-11 04:53,2021-06-07 15:12,2023-10-01 09:57,2021-05-25 08:59,17,,,,,,,,17,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties

L2200:

## The following are related in form, but do not easily fit the above paradigm.
compiler.err.expected.module=\
    ''module'' expected

L3238:

###
# errors related to modules
compiler.err.expected.module=\
    expected ''module''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8255204,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ryg3:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-05-25 06:35;asotona;Pull request: https://github.com/openjdk/jdk/pull/4186;;;","2021-05-25 08:59;roboduke;Changeset: 2ef2450a
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2021-05-25 15:58:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2ef2450aa6f560a0bcf6ab687b83c2f1d9e3c87e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Potential bug in jdk.internal.net.http.common.Utils.CONTEXT_RESTRICTED,JDK-8263442,5044318,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,michaelm,shade,shade,2021-03-11 04:04,2021-03-29 11:44,2023-10-01 09:57,2021-03-23 06:26,,,,,,,,,17,core-libs,,0,httpclient,sonarcloud-found,,,,,,,,,,,,,,,,,,,,,"SonarCloud reports:
  Ensure this ""Optional"" could never be null and remove this null-check.

Here:
 
    public static final BiPredicate<String, String> CONTEXT_RESTRICTED(HttpClient client) {
        return (k, v) -> client.authenticator() == null ||  // <---- here
                ! (k.equalsIgnoreCase(""Authorization"")
                        && k.equalsIgnoreCase(""Proxy-Authorization""));
    }

client.authenticator() returns Optional<Authenticator>, so maybe client.authenticator().isPresent() was intended?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8213189,,,,,,,,,,,,"2021-03-11 08:57;michaelm;AuthTest.java;https://bugs.openjdk.org/secure/attachment/93626/AuthTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ryff:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-03-11 06:46;dfuchs;This would need investigation: I am not sure we even need to restrict these headers when an authenticator is present. So maybe we should consider changing this BiPredicate to always return true (which is what it does today since the returned optional is never null). Some reading of the AutheticationFilter and some testing are probably required before attempting a fix. ;;;","2021-03-11 08:23;michaelm;I don't understand the report. What is the ""optional"" referred to? However, there is a bug in the predicate.

It should be:

    public static final BiPredicate<String, String> CONTEXT_RESTRICTED(HttpClient client) {
        return (k, v) -> !client.authenticator().isPresent() ||
                (!k.equalsIgnoreCase(""Authorization"")
                        && !k.equalsIgnoreCase(""Proxy-Authorization""));
    }


This predicate should return true if there is no authenticator set, or if there is an authenticator but so long as the header is not one of the ""authorization"" headers.

I guess Sonarcloud is detecting the erroneous !(x==A && x==B) which can never return false;;;","2021-03-11 08:27;shade;client.authenticator() is Optional<Authenticator>. Comparing `client.authenticator() == null` is probably incorrect, and needs to be `client.authenticator().isPresent()`?
Updated the report to make it clear.;;;","2021-03-11 08:46;dfuchs;Yes - that's probaly why the other bug (&& instead of ||) went unnoticed.
Anyway as I said this might not be a ""simple"" bug. We don't want to suddenly break code that might have taken the opportunity to supply preemptive authorization headers even in the presence of an authenticator (if that works). So the first step would be to verify if that could work. If it can't maybe we can experiment with a fix. If it can, then maybe we should simply have this predicate always return 'true'. ;;;","2021-03-11 09:00;michaelm;It's clearly a bug. I've attached a test case which demonstrates the issue. 200 OK is returned with the suggested fix above, and 500 with the current JDK. It's extremely unlikely that anyone was setting an authenticator AND setting the authorization header.

And you're right the Optional test is required as well. It shouldn't be testing for null. Should be !isPresent(). Will adjust the suggested fix.;;;","2021-03-11 09:36;shade;Cool. So we can drop ""Potential"" from the synopsis. Feel free :);;;","2021-03-23 06:26;roboduke;Changeset: bd7a184b
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2021-03-23 13:25:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bd7a184b
;;;",,,,,,,,,,,,,,,,,,,,,
[lworld] TestUnloadedInlineTypeField fails due to unexpected compilation level,JDK-8263441,5044317,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,dsimms,dsimms,2021-03-11 04:01,2021-03-30 07:15,2023-10-01 09:57,2021-03-30 07:15,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,noreg-self,,,,,,,,,,,,,,,,,,,,"Merge of jdk-17+13 creates a test failure with compiler/valhalla/inlinetypes/TestUnloadedInlineTypeField.java:

 stderr: [Exception in thread ""main"" java.lang.RuntimeException: Unexpected compilation level for public java.lang.Object compiler.valhalla.inlinetypes.TestUnloadedInlineTypeField.test16(boolean): expected 1 to equal 4
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.Asserts.assertEQ(Asserts.java:178)
	at compiler.valhalla.inlinetypes.InlineTypeTest.run(InlineTypeTest.java:755)
	at compiler.valhalla.inlinetypes.InlineTypeTest.run(InlineTypeTest.java:440)
	at compiler.valhalla.inlinetypes.TestUnloadedInlineTypeField.main(TestUnloadedInlineTypeField.java:50)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ryf7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] C2 compilation fails with ""Error mixing types: byte and inlinetype[1]:{byte}""",JDK-8263440,5044316,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,dsimms,dsimms,2021-03-11 03:57,2021-03-12 07:52,2023-10-01 09:57,2021-03-12 07:52,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,,,,,"After merging in  jdk-17+13,  runtime/valhalla/inlinetypes/InlineTypeDensity.java with Xcomp crashes...

Error mixing types: byte and inlinetype[1]:{byte}

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/type.cpp:1266
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla/open/src/hotspot/share/opto/type.cpp:1266), pid=726473, tid=726481
#  Error: ShouldNotReachHere()
#

Current CompileTask:
C2:  29815 5253    b  4       java.lang.Object::toString (56 bytes)

Stack: [0x00007fa3f0bfc000,0x00007fa3f0cfd000],  sp=0x00007fa3f0cf8120,  free space=1008k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x194fd19]  Type::typerr(Type const*) const+0x79
V  [libjvm.so+0x1950f88]  TypeInt::xmeet(Type const*) const+0xa8
V  [libjvm.so+0x1957cb3]  Type::meet_helper(Type const*, bool) const+0x73
V  [libjvm.so+0x195935c]  TypeAry::xmeet(Type const*) const+0xec
V  [libjvm.so+0x1957cb3]  Type::meet_helper(Type const*, bool) const+0x73
V  [libjvm.so+0x1960e78]  TypeAryPtr::xmeet_helper(Type const*) const+0x2f8
V  [libjvm.so+0x1948b86]  TypePtr::xmeet(Type const*) const+0x16
V  [libjvm.so+0x1957cb3]  Type::meet_helper(Type const*, bool) const+0x73
V  [libjvm.so+0x8a650c]  ConstraintCastNode::dominating_cast(PhaseGVN*, PhaseTransform*) const+0x21c
V  [libjvm.so+0x8a6efe]  CheckCastPPNode::Identity(PhaseGVN*)+0x10e
V  [libjvm.so+0x167b922]  PhaseIterGVN::transform_old(Node*)+0x4c2
V  [libjvm.so+0x1673b8e]  PhaseIterGVN::optimize()+0x7e
V  [libjvm.so+0xa4c1f6]  Compile::Optimize()+0x216
V  [libjvm.so+0xa4f523]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1a53
V  [libjvm.so+0x863da8]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f8
V  [libjvm.so+0xa5f421]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xf21
V  [libjvm.so+0xa600c8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1922d91]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x192b050]  Thread::call_run()+0x100
V  [libjvm.so+0x15eca26]  thread_native_entry(Thread*)+0x116",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ryez:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
getSupportedAttributeValues() throws NPE for Finishings attribute,JDK-8263439,5044315,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,mbollapragad,mbollapragad,2021-03-11 03:35,2021-03-24 19:00,2023-10-01 09:57,2021-03-18 13:00,11,17,7,8,,,,,17,client-libs,,0,imt,oel8,sn_89,sqebug,sqe-manual,,,,,,,,,,,,,,,,,,"Regression Manual Test which checks Printer Supported Attributes Fails.
Testsuite Name : Regression manual
Test Name(s) : javax/print/attribute/AllSupportedValues/PrintValues.java
Product Tested : JDK-17+9
Platform Tested : OEL 8.3
Is it regression : No
Reproducible: Always

JDK 16.0.1+7 on OEL 8.3 : FAILED
JDK 11.0.11+7 on OEL 8.3 : FAILED
JDK 11.0.10+8 (GAC) on OEL 8.3 : FAILED

JDK 8u291b08 on OEL 8.3 : FAILED
JDK 8u281b09 (GAC) on OEL 8.3 : FAILED

JDK 7u301b07 on OEL 8.3 : FAILED
JDK 7u291b09 (GAC) on OEL 8.3 : FAILED

Is it Platform specific : YES , Passed on Windows10 with JDK-17+9  (With same printer configured)

Exception/Error from Log: Attached Failure case jtr File

When running the PrintValues.java , javax.print.attribute.standard.Finishings supported returns TRUE , but querying the sun.print.IPPPrintService.getSupportedAttributeValues API passing Finishings  leads to Null Pointer Exception.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2ryer:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-16 13:07;prr;The exception is :
java.lang.NullPointerException: Cannot invoke ""javax.print.attribute.standard.Finishings.getValue()"" because ""fAll[j]"" is null
	at java.desktop/sun.print.IPPPrintService.getSupportedAttributeValues(IPPPrintService.java:572)
	at PrintValues.<init>(PrintValues.java:25)
	at PrintValues.main(PrintValues.java:42)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

The problem is in this block of code :-
           AttributeClass attribClass = (getAttMap != null) ?
                getAttMap.get(""finishings-supported"")
                : null;
            if (attribClass != null) {
                int[] finArray = attribClass.getArrayOfIntValues();
                if ((finArray != null) && (finArray.length > 0)) {
                    Finishings[] finSup = new Finishings[finArray.length];
                    for (int i=0; i<finArray.length; i++) {
                        finSup[i] = Finishings.NONE;
                        Finishings[] fAll = (Finishings[])
                            (new ExtFinishing(100)).getAll();
                        for (int j=0; j<fAll.length; j++) {
                            if (finArray[i] == fAll[j].getValue()) {.   /// <<<=== NPE here
                                finSup[i] = fAll[j];
                                break;
                            }
                        }
                    }
                    return finSup;
                }
            }

The ExtFinishing class is used just to get access to the predefined Finishing values so that for any that have the same ID as one reported by the printer we can  use the pre-defined value.
So it iterates over all of the predefined values looking for a match.
The problem is that the Enum is allowed to be sparse and in fact is.
So needs ""if (fAll[j] == null) continue;"" before de-referencing it.

I guess no one hit this code ever because you'd need a printer that reported supported values for the Finishings attribute. So I wonder what printer was used here ?

;;;","2021-03-17 11:40;prr;Printer used was a Ricoh MP 5054SP.
The PPD downloaded directly from here https://www.openprinting.org/printer/Ricoh/Ricoh-MP_5054
reports finishings of staple-top-left and staple-top-right when installed on Ubuntu 2010 and so I was able to verify the bug and the fix. ;;;","2021-03-18 13:00;roboduke;Changeset: 2173fedd
Author:    Phil Race <prr@openjdk.org>
Date:      2021-03-18 20:00:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2173fedd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Dangling references after MethodComparator::methods_EMCP ,JDK-8263434,5044309,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-03-11 02:27,2021-03-22 13:12,2023-10-01 09:57,2021-03-17 03:59,11,13,15,16,17,8,,,17,hotspot,,0,redhat-interest,sonarcloud-found,,,,,,,,,,,,,,,,,,,,,"SonarCloud reports the following problem in MethodComparator::methods_EMCP:
 ""Address of stack memory associated with local variable 's_new' is still referred to by the global variable '_s_new' upon returning to the caller. This will be a dangling reference""

Code inspection reveals the assignment to static variables is only needed to pass them to helper methods. So, while this is not a detectable bug (yet), it is still cleaner not to expose stack variables in globals.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rydf:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-03-11 07:20;dcubed;MethodComparator::methods_EMCP() is strongly tied
to JVM/TI RedefineClasses(). I'm moving this bug from
hotspot/runtime -> hotspot/jvmti.;;;","2021-03-17 03:59;roboduke;Changeset: f9f2eef9
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-03-17 10:58:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f9f2eef9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Don't expect forwarded objects in set_concurrent_mark_in_progress(),JDK-8263433,5044308,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,rkennke,rkennke,2021-03-11 02:11,2021-03-17 21:56,2023-10-01 09:57,2021-03-11 12:12,17,,,,,,,,17,hotspot,,0,gc-shenandoah,redhat-interest,,,,,,,,,,,,,,,,,,,,,Probably a left-over?,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2ryd7:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-03-11 12:12;roboduke;Changeset: b92abac2
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-03-11 20:11:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b92abac2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
javac may report an invalid package/class clash on case insensitive filesystems,JDK-8263432,5044307,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-03-11 01:53,2021-08-05 01:56,2023-10-01 09:57,2021-04-27 01:56,11,17,,,,,,,17,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,,,,"Based on:
https://twitter.com/headius/status/1369375537756536834

javac may report a non-existing package/class clash on case insensitive filesystems. Please see the attached diff showing a testcase.

The internal cause is roughly as follows. To implement the package/class clash check as per JLS 7.1, javac creates ""phantom"" packages with the same names as the classes and checks if these packages exist (this is not completely correct, as it checks if javac has seen any files inside the given directory before, but does not itself list the directory). Overall, javac was prepared for the phantom packages, so things were mostly working. But, for modules, an extension happened: every package created (phantom or not) gets registered to its enclosing ModuleSymbol, and when ModuleSymbol.getEnclosedElements() is called, the package is completed (i.e. its directory is listed) and if it contains any class, it is returned. The order of events, per my understanding so far, is this: the phantom package for the org.jruby.runtime.CallSite package is created, the package/class clash check is performed and passes. Then annotation processing calls ModuleSymbol.getEnclosedElements(), the phantom package is listed from the filesystem, and contains some source files, so appears non-empty/existing (due to the case insensitive filesystem, a different directory is listed in fact). Then another round of annotation processing happens, and the package/class clash check is performed again. This time, the package appears to exist, and hence the check fails.",,,,,,,,,,JDK-8271929,JDK-8269801,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-11 01:49;jlahoda;package-class-phantom-clash.diff;https://bugs.openjdk.org/secure/attachment/93617/package-class-phantom-clash.diff",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rycz:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-04-27 01:56;roboduke;Changeset: 0a4c3382
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-04-27 08:55:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0a4c3382
;;;","2021-05-17 17:48;headius;Is there any workaround possible on JDKs earlier than Java 17? In order to finish the modularization of JRuby, we need a way to compile without changing these packages/classes and 17 is not even released yet.;;;","2021-07-28 18:41;darcy;[~headius], Jan backported this change to Oracle's 11.0.13. The external 11u project may choose to apply the fix as well. HTH;;;","2021-07-29 08:57;headius;[~darcy] thanks for the update!;;;","2021-08-03 12:08;mdoerr;Fix Request (11u):
Yes, the external 11u project should get the fix as well. It should get backported for parity with 11.0.13-oracle. Doesn't apply cleanly. Review: https://github.com/openjdk/jdk11u-dev/pull/184;;;",,,,,,,,,,,,,,,,,,,,,,,
Uninitialized Method* variables after JDK-8233913,JDK-8263430,5044305,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-03-11 01:39,2021-03-19 07:18,2023-10-01 09:57,2021-03-11 23:41,14,15,16,17,,,,,17,hotspot,,0,jdk16u-fix-request,jdk16u-fix-SQE-ok-next,jdk16u-fix-yes,redhat-interest,sonarcloud-found,,,,,,,,,,,,,,,,,,"SonarCloud instance reports problems like: 
 The left operand of '==' is a garbage value

C2V_VMENTRY_NULL(jobject, getResolvedJavaMethod, (JNIEnv* env, jobject, jobject base, jlong offset))
  Method* method;
 ...
  if (method == NULL) { // <--- here
    JVMCI_THROW_MSG_NULL(IllegalArgumentException, err_msg(""Unexpected type: %s"", JVMCIENV->klass_name(base_object)));
  }

I believe this is caused by refactoring in JDK-8233913 that replaced `methodHandle` with naked `Method*`. `methodHandle` is implicitly initialized to null, while naked variable is not. After reading the original changeset, I found two other places where the same thing happens.",,,,,,,,,,JDK-8263874,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8233913,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rycj:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-11 23:41;roboduke;Changeset: e25ad730
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-03-12 07:40:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e25ad730
;;;","2021-03-12 10:38;hseigel;Fix Request [16u]

Requesting backport of this small low risk change to properly initialize a few uninitialized variables.  The patch applied cleanly to JDK-16u and was tested with Mach5 tiers 1 and 2 on Linux, Mac OS, and Windows.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Trigger weak-LRB even when heap is stable,JDK-8263427,5044303,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rkennke,rkennke,rkennke,2021-03-11 01:20,2021-05-06 07:50,2023-10-01 09:57,2021-03-16 07:13,16,17,,,,,,,17,hotspot,,0,gc-shenandoah,redhat-interest,,,,,,,,,,,,,,,,,,,,,"We currently guard all LRBs, including weak-LRB, by a test for heap-stable and only enter the LRB when heap is unstable (e.g. evacuation or update-refs in progress). However, the weak LRB must also be entered when heap is stable and concurrent refs is in progress, otherwise we may accidentally resurrect otherwise unreachable weak referents. This can happen when we take the shortcut cycle and skip evac&update-refs.

I believe this might be the root cause for JDK-8262852.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262852,,,,JDK-8262852,JDK-8266440,,,,,JDK-8263861,JDK-8263705,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2ryc3:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-03-16 07:13;roboduke;Changeset: 75ef6f58
Author:    Roman Kennke <rkennke@openjdk.org>
Date:      2021-03-16 14:12:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/75ef6f58
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: two potential bugs in C1 LIRGenerator::generate_address(),JDK-8263425,5044301,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ngasson,ngasson,ngasson,2021-03-11 00:41,2021-09-29 02:06,2023-10-01 09:57,2021-03-14 22:21,11,16,17,,,,,,17,hotspot,,0,aarch64-related,azul-interest,c1,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,oracle-triage-17,,,,,,,,,,,,,,"Around line 177 we have:

LIR_Opr tmp = new_pointer_register();
      if (Assembler::operand_valid_for_add_sub_immediate(large_disp)) {
        __ add(tmp, tmp, LIR_OprFact::intptrConst(large_disp));  <---
        index = tmp;
      } else {

This is supposed to be calculating ""tmp = index + large_disp"" but it actually does ""large_disp = tmp + tmp"".

On line 157 if index is a constant we add it to large_disp and set index to LIR_OprFact::illegalOpr. Then on line 194:

  // at this point we either have base + index or base + displacement
  if (large_disp == 0) {
    return new LIR_Address(base, index, type);   <----
  } else {

If the displacement and constant index sum to zero we end up passing an illegal value into LIR_Address, triggering an assert.",,,,,,,,,,JDK-8263873,JDK-8263739,JDK-8263780,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i2rybn:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-11 00:42;ngasson;These can be triggered on the lworld branch, not mainline JDK as far as I'm aware.;;;","2021-03-14 22:21;roboduke;Changeset: f7e0a098
Author:    Nick Gasson <ngasson@openjdk.org>
Date:      2021-03-15 05:20:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f7e0a098
;;;","2021-03-15 02:27;thartmann;ILW = Incorrect address computation in C1, not a problem with current code, no workaround but disable C1 compilation of affected method = HLM = P3;;;","2021-03-17 08:35;snazarki;Fix request (13u):

I'd like to port this issue to 13u.  The patch applies cleanly. Pass basic tests;;;","2021-03-17 19:39;fyang;Fix Request (11u)

Should get backported for parity with 11.0.12-oracle. 
Applies cleanly to 11u-dev. Tested tier1 with -XX:TieredStopAtLevel=1 on AArch64 Linux.;;;",,,,,,,,,,,,,,,,,,,,,,,
Incorrect function name in NSAccessibilityStaticText native peer implementation,JDK-8263420,5044296,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pbansal,pbansal,pbansal,2021-03-10 23:46,2023-08-07 13:59,2023-10-01 09:57,2021-03-15 21:57,11,17,,,,,,,17,client-libs,,0,a11y,accessibility,amazon-interest,jdk11u-a11y-defer,jdk11u-fix-request,jdk11u-fix-yes,sn_88,sn_89,,,,,,,,,,,,,,,"The implementation of NSAccessibilityStaticText has an incorrect function name which results in the function not being called by Voice Over at all. The Voice Over output is same before and after this change in all the Labels test cases which were tested while implementing the NSAccessibilityStaticText (https://docs.oracle.com/javase/tutorial/uiswing/examples/components/LabelDemoProject/src/components/LabelDemo.java). So though it seems like it is not causing any issue, this may create problem. So this should be corrected.",,,,,,,,,,JDK-8286700,JDK-8287956,JDK-8304373,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256111,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ryaj:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2021-03-15 21:57;roboduke;Changeset: d896246a
Author:    Pankaj Bansal <pbansal@openjdk.org>
Date:      2021-03-16 04:57:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d896246a
;;;","2023-03-15 11:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1806
Date: 2023-03-15 18:36:58 +0000;;;","2023-03-16 12:25;phh;Fix Request (11u).

On behalf of Autumn Capasso autumcap@amazon.com

Eleven in a series of 29 (was 28 until I had to add this one) Mac accessibility backports for Oracle compatibility. Corrects a name type. Clean backport, manually tested the UI with Accessibility functions. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,
ListModel javadoc refers to non-existent interface,JDK-8263410,5044284,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2021-03-10 20:27,2021-03-22 13:11,2023-10-01 09:57,2021-03-17 00:55,,,,,,,,,17,client-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"ListModel class javadoc says ""This interface defines the methods components like JList use
 * to get the value of each cell in a list and the length of the list.
 * Logically the model is a vector, indices vary from 0 to
 * ListDataModel.getSize() - 1.""
but there is no ListDataModel interface. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,"0|i2ry83:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-03-17 00:55;roboduke;Changeset: ec95a5c6
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-03-17 07:54:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ec95a5c6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
SPARC64 detection fails on Athena (SPARC64-X),JDK-8263407,5044280,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,dbuck,dbuck,dbuck,2021-03-10 17:20,2021-07-09 07:42,2023-10-01 09:57,2021-03-16 18:02,11,,,,,,,,11.0.12-oracle,hotspot,,0,11bpr-critical-approved,jdk11u-fix-request,jdk11u-fix-yes,noreg-hard,regression,sustaining,,,,,,,,,,,,,,,,,"In platform_features() (vm_version_solaris_sparc.cpp), we assume all Fujitsu SPARC64 CPUs are either pre-sun4v, or have support for either Athena+ or Athena++ instructions. But the original SPARC64-X (Athena without any pluses) is also a sun4v chip, so it gets mistakenly treated like a non-Fujitsu CPU, leading to crashes when several Oracle-specific ""derived/synthetic features"", like BIS support, are enabled.",,,,,,,,,,JDK-8264602,JDK-8270178,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8172231,JDK-8264376,,,,,,,,,,,,,,,,sparc_64,,,,,,,,,solaris,,,,,,"0|i2ry77:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Not verified,,"2021-03-12 00:37;dbuck;This is a regression that was very likely introduced with JDK-8172231.
;;;","2021-03-12 03:43;dbuck;It should be pretty easy to add code to detect first generation Athena:

===
$ grep FJATH /usr/include/sys/auxv_SPARC.h
#define AV_SPARC_B_FJATHHPC     12      /* Fujitsu HPC (Athena) instrs */
#define AV_SPARC_FJATHHPC       (1U << AV_SPARC_B_FJATHHPC)     /* 0x00001000 */
#define AV2_SPARC_B_FJATHPLUS   0       /* Fujitsu Athena+ */
#define AV2_SPARC_FJATHPLUS     (1U << AV2_SPARC_B_FJATHPLUS)   /* 0x00000001 */
#define AV2_SPARC_B_FJATHPLUS2  17      /* FJ Athena++ */
#define AV2_SPARC_FJATHPLUS2    (1U << AV2_SPARC_B_FJATHPLUS2)  /* 0x00020000 */
$
===;;;","2021-07-07 05:21;inakonechnyy;I'd like to backport this fix to OpenJDK 11, implementation is described in the thread:
https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-April/005999.html
Changes were tested on solaris machine with tier-1 tests. 

;;;",,,,,,,,,,,,,,,,,,,,,,,,,
RsaPrivateKeySpec is always recognized as RSAPrivateCrtKeySpec in RSAKeyFactory.engineGetKeySpec,JDK-8263404,5044277,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,luoziyi,luoziyi,luoziyi,2021-03-10 15:29,2023-08-07 14:52,2023-10-01 09:57,2021-03-29 13:15,11,11.0.17-oracle,17,8,8u351,,,,17,security-libs,,0,amazon-interest,conformance,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,regression,tck-red-11.0.17-oracle,tck-red-17,tck-red-8u351,,,,,,,,,,,,,"This is a regression introduced by JDK-8254717. @kganapureddy reported this bug.

In RSAKeyFactory.engineGetKeySpec, when the input key is a private key, the method tries to cast the key to RSAPrivateCrtKey when the keySpec class is RSAPrivateCrtKeySpec or its subclasses. 

JDK-8254717 fixes all isAssignableFrom checks in engineGetKeySpec. But it introduces the regression that RSAKeyFactory.engineGetKeySpec tries to cast the private key when the keySpec is RSAPrivateCrtKeySpec or its **superclasses** (i.e., RSAPrivateKeySpec). This caused the following exception when the input key is only a RSAPrivateKey:
java.security.spec.InvalidKeySpecException: RSAPrivateCrtKeySpec can only be used with CRT keys.",,,,,,,,,,JDK-8267052,JDK-8290991,JDK-8306378,JDK-8305974,JDK-8290955,,,,,,,,,,,,,,,,,JCK-7315717,,JDK-8290925,,,,JDK-8254717,JDK-8268558,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ry6j:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2021-03-29 13:15;roboduke;Changeset: a5d7de23
Author:    Ziyi Luo <luoziyi@openjdk.org>
Committer: Valerie Peng <valeriep@openjdk.org>
Date:      2021-03-29 20:14:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a5d7de23
;;;","2021-03-31 13:54;phh;Co-developed by Ziyi Luo and Greg Rubin (rubin@amazon.com).
;;;","2021-05-10 14:14;phh;Fix Request (11u).

Review/Approval thread: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-May/006096.html
;;;","2021-06-10 09:23;fguallini;Verified with build 22;;;","2022-12-16 11:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/214
Date: 2022-12-16 19:04:50 +0000;;;","2023-04-12 16:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/302
Date: 2023-04-12 23:20:36 +0000;;;","2023-04-13 05:06;phh;Fix Request (8u).

Required follow-on to the 8u JDK-8254717 to fix a tck test failure and for Oracle compatibility. Identical to 11u backport, net of a hunk that does not apply because the changed code is not present in 8u, and a test library name adjustment. Has been in 11u since 11.0.12, so well tested.;;;","2023-04-13 05:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u/pull/41
Date: 2023-04-13 12:29:17 +0000;;;",,,,,,,,,,,,,,,,,,,,
[JVMCI] output written to tty via HotSpotJVMCIRuntime can be garbled,JDK-8263403,5044271,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,dnsimon,dnsimon,2021-03-10 15:12,2022-03-16 07:25,2023-10-01 09:57,2021-03-11 12:57,11,16,17,,,,,,17,hotspot,,0,hs-comp-triaged,jdk11-graalvm,jdk11u-jvmci-defer,jdk16-graalvm,jvmci,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,The HotSpotJVMCIRuntime.writeDebugOutput0 method introduced in JDK-8262011 uses the HotSpot value of Unsafe.ARRAY_BYTE_BASE_OFFSET which is incorrect in the context of libgraal where the SVM value should be used instead. This results in garbled output being written to tty.,,,,,,,,,,JDK-8280884,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262011,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ry57:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-11 06:29;thartmann;ILW = Garbled debug output, with Libgraal, no workaround = MMH = P3;;;","2021-03-11 12:57;roboduke;Changeset: f3bd801a
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2021-03-11 20:56:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f3bd801a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
MemoryLeak: Node hardreferences it's previous Parent after csslayout and getting removed from the scene,JDK-8263402,5044269,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fkirmaier,fkirmaier,fkirmaier,2021-03-10 14:16,2021-04-27 11:24,2023-10-01 09:57,2021-04-27 04:34,jfx16,,,,,,,,jfx17,javafx,,0,,,,,,,,,,,,,,,,,,,,,,,"Node hard references its previous Parent after CSS layout and getting removed from the scene
An example will be shown in the PR",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ry4r:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-04-27 04:34;roboduke;Changeset: 33bbf3f8
Author:    Florian Kirmaier <fkirmaier@openjdk.org>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2021-04-27 11:33:42 +0000
URL:       https://git.openjdk.java.net/jfx/commit/33bbf3f8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Atomic::CmpxchgByteUsingInt::set_byte_in_int needs an explicit cast,JDK-8263396,5044258,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,avoitylov,shade,shade,2021-03-10 11:09,2021-05-06 19:14,2023-10-01 09:57,2021-04-30 05:35,13,,,,,,,,17,hotspot,,0,sonarcloud-found,,,,,,,,,,,,,,,,,,,,,,"JDK-8231612 added Atomic::CmpxchgByteUsingInt::set_byte_in_int, and SonarCloud instance reports a problem there: ""Add an explicit cast to the result of the ""<<"" operator.""

inline uint32_t Atomic::CmpxchgByteUsingInt::set_byte_in_int(uint32_t n,
                                                             uint8_t b,
                                                             uint32_t idx) {
  int bitsIdx = BitsPerByte * idx;
  return (n & ~(0xff << bitsIdx)) | (b << bitsIdx); // <--- at ""b << bitsIdx""
}

I think when ""b << bitsIdx"" is done, ""b"" is promoted to int first. Probably casting to uint32_t first is safer.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8231612,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ry2b:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-16 11:41;mseledtsov;ILW = MLM = P4;;;","2021-04-30 05:35;roboduke;Changeset: eb8db12c
Author:    Aleksei Voitylov <avoitylov@openjdk.org>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2021-04-30 12:34:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/eb8db12ce67b10957fa94fbf61d9a30db34ec01a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect use of Objects.nonNull,JDK-8263395,5044257,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,rriggs,rriggs,2021-03-10 10:48,2021-04-21 18:03,2023-10-01 09:57,2021-04-16 12:51,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"Several JFR classes incorrectly use Objects.nonNull where Objects.requireNonNull is intended.

jdk.jfr.internal.consumer.AbstractEventStream#setStartTime
jdk.jfr.consumer.EventStream#openRepository(java.nio.file.Path)
jdk.jfr.Recording#setFlushInterval

Ref: https://github.com/openjdk/jdk/pull/2914#issuecomment-795853969",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ry23:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-04-16 12:51;roboduke;Changeset: 4413dbfb
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2021-04-16 19:51:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4413dbfb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: Zooming changes the point that is currently centered,JDK-8263389,5044251,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cslucas,rrich,rrich,2021-03-10 09:52,2022-08-16 23:54,2023-10-01 09:57,2021-07-05 03:01,17,18,,,,,,,18,hotspot,,0,diagnostics,hs-comp-triaged,igv,oracle-triage-11,oracle-triage-17,starter,,,,,,,,,,,,,,,,,"Zooming can change the part of the graph that is currently centered but it should not.

Steps to reproduce:

* Open attachment zoom_bug.xml in IGV

* Open graph ""After Parsing""

* Click on ""Show satellite view of the whole graph"" on the toolbar

* The grey rectangle shows the currently viewed part of the graph

* Move rectangle to top right

* Use the toolbar to zoom in (magnifying glass with a +)

* Rectangle disappears (also a bug)

* Zoom out (magnifying glass with a -)

* Rectangle reappears

* Zoom in (+)

* Rectangle jumps to the left. It should not change the part of the graph that is centered when zooming.

",,,,,,,,,,,,,,,,,,,,,,,JDK-8254145,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-10 23:56;rrich;zoom_bug.xml;https://bugs.openjdk.org/secure/attachment/93611/zoom_bug.xml",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ry0r:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-05 03:00;roboduke;Changeset: 164eff8c
Author:    James Fuller <t-jfuller@microsoft.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-07-05 09:59:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/164eff8c8a8f96efc5bfb659d8b02de420b8416b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: Graph is not opened in the window that has focus.,JDK-8263385,5044246,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ksakata,rrich,rrich,2021-03-10 09:15,2022-08-16 23:54,2023-10-01 09:57,2021-07-18 22:47,17,18,,,,,,,18,hotspot,,0,diagnostics,hs-comp-triaged,igv,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,"Steps to reproduce:

* Open a graph: open context menu in outline and click ""Open""

* Open clone: open context menu in outline and click ""Open clone""

* Select another graph in the outline and open it. Now IGV changes the window back to the window opened in the first step. That is unexpected.
",,,,,,,,,,,,,,,,,,,,,,,JDK-8254145,,,,,,,,,,,,,,,,,,,,JDK-8288480,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rxzn:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-18 22:47;roboduke;Changeset: edff5560
Author:    Koichi Sakata <ksakata@openjdk.org>
Committer: Yi Yang <yyang@openjdk.org>
Date:      2021-07-19 05:46:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/edff55607b9bc47bc1a5d9de7ad1a5d622be9736
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/util/logging/ParentLoggersTest.java failed with ""checkLoggers: getLoggerNames() returned unexpected loggers""",JDK-8263382,5044242,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dcubed,dcubed,2021-03-10 07:50,2021-08-19 05:58,2023-10-01 09:57,2021-05-13 01:54,17,,,,,,,,17,core-libs,,0,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,redhat-interest,tier7,,,,,,,,,,,,,,,,"The following test failed in an Adhoc Mach5 job:

java/util/logging/ParentLoggersTest.java

Here's a snippet from the log file:

----------System.out:(18/569)----------

[, abc.xyz.foo, global, myParentLogger.myLogger, abc.xyz.foo.myBar.myLogger]

# checkLoggers: getLoggerNames() returned unexpected loggers
# expected logger names (6):
 expNames[0] = 
 expNames[1] = global
 expNames[2] = myParentLogger
 expNames[3] = myParentLogger.myLogger
 expNames[4] = abc.xyz.foo
 expNames[5] = abc.xyz.foo.myBar.myLogger
# returned logger names (5):
  retNames[0] = 
  retNames[1] = abc.xyz.foo
  retNames[2] = global
  retNames[3] = myParentLogger.myLogger
  retNames[4] = abc.xyz.foo.myBar.myLogger
ParentLoggersTest: failed
----------System.err:(12/719)----------
java.lang.Exception: ParentLoggersTest: failed
	at ParentLoggersTest.main(ParentLoggersTest.java:92)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.Exception: ParentLoggersTest: failed

My Adhoc Mach5 job only contain new tests in another area.
See JDK-8262881 for details.

The repo that I'm using has the tip/HEAD at:

commit b7f0b3fc8b556b352fd7593ca674ab8e562c709a
Author: Harold Seigel <hseigel@openjdk.org>
Date:   Tue Mar 9 13:15:39 2021 +0000

    8252173: Use handles instead of jobjects in modules.cpp
    
    Reviewed-by: lfoltan, coleenp

so it's a very recent repo instead of my usual last snapshot style.

The JVM args for the test task are: -XX:-UseCompressedOops",,,,,,,,,,JDK-8272719,JDK-8267199,JDK-8268661,JDK-8269183,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8031068,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2rxyr:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3cc899dc,,,,,,,,,"2021-03-10 07:52;dcubed;Looks like a similar failure mode was fixed before:

    JDK-8031068 java/util/logging/ParentLoggersTest.java: checkLoggers: getLoggerNames() returned unexpected loggers;;;","2021-03-10 08:11;dfuchs;This test should better be run in /otherVM mode.

1. It sets the java.util.logging.config.file property  - there could be a race condition if another test in the same VM runs concurrently and sets the  java.util.logging.config.file property concurrently (not sure whether that's a possible scenario)
2. if another test that ran in the same VM has set the java.util.logging.config.class property then this test will fail because the LogManager will not read java.util.logging.config.file if  java.util.logging.config.class is set

Of course it could be something else too - but the above would be my first suspicion. We should change the test to use /othervm in order to eliminate these possible scenarios.;;;","2021-05-13 01:54;roboduke;Changeset: 08a5a5c6
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2021-05-13 08:54:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/08a5a5c6d64db51700d058954d115aa89dbe73be
;;;","2021-06-22 07:13;zgu;Fix Request (8u)

I would like to backport this patch openjdk8u for parity with Oracle 8u311.

The original patch applies cleanly and test passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Unintended use of Objects.nonNull in VarHandles,JDK-8263380,5044240,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,redestad,redestad,redestad,2021-03-10 07:32,2021-03-17 21:55,2023-10-01 09:57,2021-03-10 09:04,,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"VarHandles uses Objects.nonNull(foo) like this in various places:

    public static VarHandle insertCoordinates(VarHandle target, int pos, Object... values) {
        Objects.nonNull(target);
        Objects.nonNull(values);

nonNull is a boolean predicate (return arg != null;). It appears likely the intent was to call Objects.requireNonNull as a precondition check here.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rxyb:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2021-03-10 09:04;roboduke;Changeset: 7e52a6e8
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2021-03-10 17:03:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7e52a6e8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
CTW (Shenandoah): assert(mems <= 1) failed: No node right after call if multiple mem projections,JDK-8263376,5044234,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,shade,shade,2021-03-10 05:40,2021-09-23 05:40,2023-10-01 09:57,2021-03-26 09:50,17,,,,,,,,17,hotspot,,0,c2,ctw,gc-shenandoah,hs-comp-triaged,oracle-triage-11,oracle-triage-17,redhat-interest,,,,,,,,,,,,,,,,"$ cd test/hotspot/jtreg/testlibrary/ctw
$ make
$ cd dist
$ wget https://repo1.maven.org/maven2/org/vraptor/vraptor/2.6.2/vraptor-2.6.2.jar
$ JAVA_OPTIONS=""-XX:+UseShenandoahGC"" ./ctw.sh vraptor-2.6.2.jar

#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/gc/shenandoah/c2/shenandoahSupport.cpp:2479), pid=604910, tid=604921
#  assert(mems <= 1) failed: No node right after call if multiple mem projections
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.shade.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-adhoc.shade.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x184795b]  MemoryGraphFixer::find_mem(Node*, Node*) const+0x8bb

Current CompileTask:
C2:   1979 1696   !b  4       org.vraptor.introspector.ExpressionEvaluator::invokeGetter (151 bytes)

Stack: [0x00007f5d4c47b000,0x00007f5d4c57c000],  sp=0x00007f5d4c575dc0,  free space=1003k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x184795b]  MemoryGraphFixer::find_mem(Node*, Node*) const+0x8bb
V  [libjvm.so+0x184e092]  MemoryGraphFixer::fix_mem(Node*, Node*, Node*, Node*, Node*, Unique_Node_List&)+0xb12
V  [libjvm.so+0x18514f0]  ShenandoahBarrierC2Support::pin_and_expand(PhaseIdealLoop*)+0x2390
V  [libjvm.so+0x17440b4]  ShenandoahBarrierSetC2::optimize_loops(PhaseIdealLoop*, LoopOptsMode, VectorSet&, Node_Stack&, Node_List&) const+0x44
V  [libjvm.so+0x12f6584]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x11c4
V  [libjvm.so+0xa4decf]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x32f
V  [libjvm.so+0x18455d0]  ShenandoahBarrierC2Support::expand(Compile*, PhaseIterGVN&)+0x70
V  [libjvm.so+0x1743f83]  ShenandoahBarrierSetC2::expand_barriers(Compile*, PhaseIterGVN&) const+0x13
V  [libjvm.so+0xa4b4b5]  Compile::Optimize()+0x1055
V  [libjvm.so+0xa4d066]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1936
V  [libjvm.so+0x8809be]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ee
V  [libjvm.so+0xa5e6c9]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xf39
V  [libjvm.so+0xa5f3b8]  CompileBroker::compiler_thread_loop()+0x5b8
V  [libjvm.so+0x19c7341]  JavaThread::thread_main_inner()+0x281
V  [libjvm.so+0x19cf3b4]  Thread::call_run()+0x104
V  [libjvm.so+0x1569ece]  thread_native_entry(Thread*)+0x11e

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-10 05:41;shade;hs_err_pid604910.log;https://bugs.openjdk.org/secure/attachment/93605/hs_err_pid604910.log","2021-03-10 05:41;shade;replay_pid604910.log;https://bugs.openjdk.org/secure/attachment/93606/replay_pid604910.log",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rxwz:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-26 09:50;roboduke;Changeset: 33c94ffc
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-03-26 16:49:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/33c94ffc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
sun/net/www/http/KeepAliveStream/KeepAliveStreamCloseWithWrongContentLength.java wedged in getInputStream,JDK-8263364,5044222,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,isipka,dfuchs,dfuchs,2021-03-10 04:01,2022-03-20 12:35,2023-10-01 09:57,2021-09-07 02:48,,,,,,,,,18,core-libs,,0,7-wnf,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,,"The test was observed failing in timeout once. The thread dump reveals that there's no server thread (indicating that it has either never started, or already completed), but the client (MainThread) is still blocked in `getInputStream` waiting for the headers to arrive.

""MainThread"" #16 prio=5 os_prio=0 cpu=62.50ms elapsed=133.79s allocated=521K defined_classes=112 tid=0x000001cf072fc060 nid=0xbbf0 runnable  [0x0000008cf34fe000]
   java.lang.Thread.State: RUNNABLE
	at sun.nio.ch.SocketDispatcher.read0(java.base@17-ea/Native Method)
	at sun.nio.ch.SocketDispatcher.read(java.base@17-ea/SocketDispatcher.java:46)
	at sun.nio.ch.NioSocketImpl.tryRead(java.base@17-ea/NioSocketImpl.java:261)
	at sun.nio.ch.NioSocketImpl.implRead(java.base@17-ea/NioSocketImpl.java:312)
	at sun.nio.ch.NioSocketImpl.read(java.base@17-ea/NioSocketImpl.java:350)
	at sun.nio.ch.NioSocketImpl$1.read(java.base@17-ea/NioSocketImpl.java:803)
	at java.net.Socket$SocketInputStream.read(java.base@17-ea/Socket.java:962)
	at java.io.BufferedInputStream.fill(java.base@17-ea/BufferedInputStream.java:244)
	at java.io.BufferedInputStream.read1(java.base@17-ea/BufferedInputStream.java:284)
	at java.io.BufferedInputStream.read(java.base@17-ea/BufferedInputStream.java:343)
	- locked <0x00000000e2500028> (a java.io.BufferedInputStream)
	at sun.net.www.http.HttpClient.parseHTTPHeader(java.base@17-ea/HttpClient.java:788)
	at sun.net.www.http.HttpClient.parseHTTP(java.base@17-ea/HttpClient.java:723)
	at sun.net.www.http.HttpClient.parseHTTP(java.base@17-ea/HttpClient.java:747)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(java.base@17-ea/HttpURLConnection.java:1676)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(java.base@17-ea/HttpURLConnection.java:1577)
	at KeepAliveStreamCloseWithWrongContentLength.main(KeepAliveStreamCloseWithWrongContentLength.java:94)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(java.base@17-ea/Native Method)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(java.base@17-ea/NativeMethodAccessorImpl.java:78)
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(java.base@17-ea/DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(java.base@17-ea/Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.lang.Thread.run(java.base@17-ea/Thread.java:831)

",,,,,,,,,,JDK-8283432,JDK-8278295,JDK-8275121,JDK-8275119,JDK-8281541,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8008228,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rxub:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-03-10 04:06;dfuchs;A first step could be to add some logging (println) in the server thread to figure out what has happened there.;;;","2021-03-10 04:10;dfuchs;Possibly another occurrence of JDK-8008228 which was closed as Cannot Reproduce. ;;;","2021-03-10 05:12;jpai;Just a few observations about this test case and the stacktraces presented here.

1. The test is run with the following jtreg action:

@run main/othervm/timeout=30 KeepAliveStreamCloseWithWrongContentLength

so there's an explicit 30 second timeout specified for this whole test case. However, looking at the thread dump (and what's described in this issue):

""MainThread"" #16 prio=5 os_prio=0 cpu=62.50ms elapsed=133.79s .....

Elapsed time of 133.79 seconds is far higher than what the test case is configured for. So it looks like, for some reason, the timeout isn't being honoured or perhaps jtreg isn't able to terminate this test after 30 seconds for some reason.


2. The ""server"" in this test case has this code:


static class XServer extends Thread {
...
        XServer (ServerSocket s) {
            srv = s;
        }

        public void run() {
            try {
                s = srv.accept ();
                // read HTTP request from client
                InputStream is = s.getInputStream();
                // read the first ten bytes
                for (int i=0; i<10; i++) {
                    is.read();
                }
            ...
            } catch (Exception e) {
            } finally {
                try {if (os != null) { os.close(); }} catch (IOException e) {}
            }

        

So it's swallowing and not reporting any exceptions that might happen during its processing of an incoming request. At minimum, I think we should at least print out this exception so as to get any interesting clues when this issue happens again. I can open a PR with this exception logging change, but I don't know if I will have to create a separate JBS issue for that (so that closing/merging that PR won't close this issue).

3. IMO, the most interesting bit. The thread dump shows:


allocated=521K defined_classes=112 tid=0x000001cf072fc060 nid=0xbbf0 runnable [0x0000008cf34fe000]
   java.lang.Thread.State: RUNNABLE
....
at sun.net.www.http.HttpClient.parseHTTPHeader(java.base@17-ea/HttpClient.java:788)
at sun.net.www.http.HttpClient.parseHTTP(java.base@17-ea/HttpClient.java:723)
at sun.net.www.http.HttpClient.parseHTTP(java.base@17-ea/HttpClient.java:747)
at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(java.base@17-ea/HttpURLConnection.java:1676) 


The interesting bit in that stacktrace is the presence of line number 747 of sun.net.www.http.HttpClient. That line number happens to be in a catch(IOException) block in which it first closes the server and then opens a new server socket and then tries to read back the headers from that request that is being retried. The fact that this seems to be happening from within a catch block which has caught some IOException is a sign that there was some issue with processing the headers in first place (on line 723) and maybe printing out the exception on that test server might help understand what this IOException cause is. In a successful test execution case of this test case, I have verified that it doesn't enter this catch block.
;;;","2021-03-10 05:58;jpai;Unless I'm reading this wrong, there's some more interesting bit. The test server is implemented to ""accept"" only 1 connection and process it. So looking at that stacktrace, the catch(IOException) block of the sun.net.www.http.HttpClient was able to successfully reopen a socket connection (s.connect(...)) to the host/port combination and even write out a request, before getting to this line for parsing the response headers. Who ""accepted"" this (re)connection?;;;","2021-03-10 06:36;dfuchs;Hi Jaikiran, excellent sleuthing. I had similar thoughts about adding logging to the server thread. What is probably happening here is that server received a connect() attempt from another (test? process?) on the host machine. We had to harden some tests against that in the past. A fix might attempt to make the client send a unique URL - and have the server read bytes until it finds the first \r or \n, and ignore any connection that doesn't send him the expected URL. Though that might block the server thread if the rogue client is not HTTP or send nothing. Or the server thread could be made a deamon thread and just just loop endlessly over accept until the client closes the socketServer.;;;","2021-03-10 06:43;dfuchs;WRT timeout I believe this is normal: AFAIK jtreg also has a scaling factor. IIRC the default scaling factor is 4 in our CI - so 4 x 30 = 120 would be consistent with what you observed.;;;","2021-03-11 01:41;michaelm;Yes, it looks like someone connects to the server before the client part of the test gets to run. The server thread has completed but the ServerSocket is still open and the OS accepts the connection from the client. But there is nobody to process the accepted connection so the client times out. I'd agree with the suggestion above. Client/Server should agree a fixed URL and the server ignores any requests that don't include this URL. I don't think it needs to be unique per test. The combination of unique port plus test specific URL should be enough.;;;","2021-03-11 19:10;jpai;> WRT timeout I believe this is normal: AFAIK jtreg also has a scaling factor. IIRC the default scaling factor is 4 in our CI - so 4 x 30 = 120 would be consistent with what you observed. 

Hello Daniel, thank you for that detail. I wasn't aware of the scaling factor in jtreg.

;;;","2021-09-07 02:48;roboduke;Changeset: 5caa77b0
Author:    Ivan Šipka <isipka@openjdk.org>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2021-09-07 09:46:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5caa77b043ae490c3d7d56d181d0e07e6b859b9e
;;;","2021-10-18 02:04;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
As this is a testbug, I think we can push 11.0.15 changes to 11.0.14.
No risk, only a test change.
I had to adapt the test.
Test passes.

The patch includes the cleanup from predecessor change JDK-8229486. ;;;","2021-10-27 23:50;clanger;[~goetz], I think the patch is sensible to do. However, it is not yet backported to JDK17. Looking at the Oracle backport item for 17, it indicates 17.0.3 and is not yet resolved. So, even if Oracle backports this, it'll only be in their 17.0.3 version. We have to take care that it also goes into OpenJDK 17u. May I ask you to do this (before approving 11u)? Thanks.;;;","2021-11-18 02:24;ewhelan;Fix Request(17u);

This is a test-only fix which will increase stability in the KeepAliveStream/KeepAliveStreamCloseWithWrongContentLength.java test.
There is no regression risk as this is a test-only fix.
Backport applies cleanly;;;","2021-11-24 04:36;ewhelan;Hi [~clanger],

I opened a PR for this for 17.0.2, was able to get it in before the repo closes at the end of this week.

-Evan;;;","2022-03-18 06:47;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
No risk, only a test change.
I had to remove Java 17 constructs from the test.
Test passes.;;;","2022-03-18 06:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/918
Date: 2022-03-18 13:45:21 +0000;;;",,,,,,,,,,,,,
Minor cleanup of Lanai code - unused code removal and comments correction,JDK-8263363,5044221,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,aghaisas,aghaisas,2021-03-10 03:46,2021-05-06 19:14,2023-10-01 09:57,2021-05-02 21:38,17,,,,,,,,17,client-libs,,0,code-review,lanai,sn_90,sn_92,,,,,,,,,,,,,,,,,,,"1) Remove unused NSRect and NSWindow from MTLGraphicsConfig.m _getMTLConfigInfo() method 
2) MTLGraphicsConfig.java has a comment that indicates ""getMTLConfigInfo() creates and destroys temporary surfaces/contexts,""  - it is not valid as we only create MTLContext in that method. This comment needs to be corrected.
3) Description comment of the abstract method - createSurfaceData() in CGraphicsConfig.java needs to specify both CGLLayer/MTLLayer as now we are implementing this method in both pipeline.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2rxu3:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-04-27 22:15;jdv;Verified Multi monitor behaviour of SwingSet2 with latest patch(Removing InvalidateCurrentContext) and it works fine.;;;","2021-05-02 21:38;roboduke;Changeset: 8fa50ebd
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2021-05-03 04:37:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8fa50ebdf2c0e44316d8e4b64b3e8ef90a2cc1bb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid division by 0 in  java/awt/font/TextJustifier.java justify,JDK-8263362,5044220,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2021-03-10 03:36,2021-10-08 11:46,2023-10-01 09:57,2021-05-06 04:58,17,,,,,,,,17,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,,,,"In java/awt/font/TextJustifier.java justify  there is a potential code path where divison by zero might happen , see also the Sonar finding :

https://sonarcloud.io/project/issues?id=shipilev_jdk&open=AXcqMwpm8sPJZZzONu1k&resolved=false&severities=CRITICAL&types=BUG


            boolean hitLimit = (weight == 0) || (!lastPass && ((delta < 0) == (delta < gslimit)));
            boolean absorbing = hitLimit && absorbweight > 0;
            // predivide delta by weight
            float weightedDelta = delta / weight; // not used if weight == 0

In case of (weight == 0)  the division should not be done because the value  of weightedDelta is unused in this case anyway.",,,,,,,,,,JDK-8274984,JDK-8273226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rxtv:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-05-06 04:58;roboduke;Changeset: ea30bd66
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-05-06 11:57:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ea30bd6684fa3003889062a129a5aee1bc9b0024
;;;","2021-08-31 01:05;mbaesken;jdk11 backport request
I would like the have the patch in jdk11u-dev, because the issue is present there too. The patch applies cleanly.
Backport PR created from github is https://github.com/openjdk/jdk11u-dev/pull/303;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect arraycopy stub selected by C2 for SATB collectors,JDK-8263361,5044219,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,neliasso,eosterlund,eosterlund,2021-03-10 03:32,2021-09-23 05:25,2023-10-01 09:57,2021-08-12 13:18,11,16,17,,,,,,17,hotspot,,0,c2,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,"The following test fails:
make test JTREG=""VERBOSE=all;JAVA_OPTIONS=-XX:-UseCompressedOops -XX:+UseG1GC -XX:InitiatingHeapOccupancyPercent=0  -Xmn1m -XX:G1HeapRegionSize=1m -Xmx10m -Xlog:gc -XX:-ReduceInitialCardMarks"" TEST=compiler/arraycopy/TestEliminateArrayCopy.java

The following crash report is generated rather deterministically:
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/compressedOops.inline.hpp:81
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/scratch/eosterlu/oracle/jdk/jdk-jdk.git/open/src/hotspot/share/oops/compressedOops.inline.hpp:81), pid=15191, tid=15213
#  assert(Universe::is_in_heap(v)) failed: object not in heap 0xbaadbabebaadbabe
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (slowdebug build 17-internal+0-LTS-2021-02-22-0951114.eosterlu...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 17-internal+0-LTS-2021-02-22-0951114.eosterlu..., mixed mode, sharing, tiered, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x58664b]  CompressedOops::decode_not_null(oopDesc*)+0x29
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /scratch/eosterlu/oracle/jdk/jdk-jdk.git/build/slowdebug/test-support/jtreg_open_test_hotspot_jtreg
_compiler_arraycopy_TestEliminateArrayCopy_java/scratch/0/core.15191)
#
# An error report file with more information is saved as:
# /scratch/eosterlu/oracle/jdk/jdk-jdk.git/build/slowdebug/test-support/jtreg_open_test_hotspot_jtreg_compiler_arraycopy_TestEliminateArrayCopy_java/scratch/0/hs_err_pid15191.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

The problem seemingly occurs when cloning an object array. The operation entails allocating a new array, and copying the source array contents into the destination array.
In the path that fails, array_copy_requires_gc_barriers() returns false when ReduceInitialCardMarks is true. This will perform a raw copy, which is fine. However, when ReduceInitialCardMarks is false, we enter a code path where we have to select the right arraycopy stub. In particular, we have to calculate correctly if the destination is uninitialized. Something goes wrong here, and the compiler picks the arraycopy stub that assumes the destination is initialized, while in fact it is not. That causes G1 to fail rather deterministically.
It might however be a problem for SATB collectors in general, that the incorrect annotation of whether the destination is initialized or not, causes reading of uninitialized memory in GC barriers.",,,,,,,,,,JDK-8265344,JDK-8264430,JDK-8271394,JDK-8267868,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263615,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b14,,,,,,,,,"0|i2rxtn:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-03-12 14:18;neliasso;This bug has only been reproduced with -XX:+StressReflectiveCode and -XX:-ReduceInitialCardMarks.  If StressReflectiveCode is necessary isn't obvious.

When running with ReduceInitialCardMarks enabled the stubroutines for int- or long-arraycopy will be used for arraycopies to newly allocated arrays (like when cloning). With ReduceInitialCardMarks disabled the oop-version will be used with barriers.

The generate_arraycopy method in PhaseMacroExpand have a bool dest_uninitialized field - but that field denotes that we have proven that no zeroing is necessary (since all fields will be written anyway). Clones are already complete - so they will never hit the code path that sets dest_uninitialized. (I will have to investigate that in a separate bug.)

To fix this bug generate_unchecked_arraycopy with the param dest_uninitialized will need to be appended with a check for object-copies when ReduceInitialCardMarks is disabled.
;;;","2021-03-17 09:03;roboduke;Changeset: 5d87a219
Author:    Nils Eliasson <neliasso@openjdk.org>
Date:      2021-03-17 16:02:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5d87a219
;;;","2021-04-16 00:53;roland;11u Fix Request
 
Backporting this patch fixes a hotspot crash and is also required for parity. Patch does not apply cleanly to 11u and requires adjustments. 
11u RFR: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-April/005772.html;;;","2021-05-26 09:59;snazarki;Fix Request (15u)
I'd like to backport this patch that fixes hotspot debug builds crash. The patch doesn't apply cleanly due to miss of 8252848. The manual fix is required for macroArrayCopy.cpp:553: rename dest_uninitialized to acopy_to_uninitialized;;;","2021-07-28 02:54;snazarki;Fix Request (13u)
I'd like to backport this patch that fixes hotspot debug builds crash. The patch is required for further activity to keep backports clean.  The changes are taken from jdk15 and requires some manual intervention at src/hotspot/share/opto/library_call.cpp due to missed 8235653 (it removes line with obj = access_resolve(obj, ACCESS_READ);). 

I've not touched 8235653 because its low priority and  dependency on a set of other commits;;;","2021-08-13 04:02;enikitin;Verified using existing regression test (compiler/arraycopy/TestEliminateArrayCopy.java).;;;",,,,,,,,,,,,,,,,,,,,,,
"assert(CompilerOracle::option_matches_type(option, value)) failed: Value must match option type",JDK-8263353,5044207,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-03-10 01:23,2021-09-22 02:24,2023-10-01 09:57,2021-03-11 18:22,17,,,,,,,,17,hotspot,,0,compilercontrol,hs-comp-triaged,oracle-triage-11,oracle-triage-17,tencent-interest,,,,,,,,,,,,,,,,,,"Reproduce: java -XX:CompileCommand=option,Test::test,TestOptionDouble,3.14 -version

Symptom:
```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jvm/jdk/src/hotspot/share/compiler/compilerOracle.cpp:288), pid=9522, tid=9523
#  assert(CompilerOracle::option_matches_type(option, value)) failed: Value must match option type
#


Stack: [0x00007f2d7f481000,0x00007f2d7f582000],  sp=0x00007f2d7f57ff50,  free space=1019k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x9afef4]  void register_command<bool>(TypedMethodOptionMatcher*, CompileCommand, bool)+0xb4
V  [libjvm.so+0x9b2667]  CompilerOracle::parse_from_line(char*)+0x6e7
V  [libjvm.so+0x9b3f13]  compilerOracle_init()+0xa3
V  [libjvm.so+0xd4b083]  init_globals()+0x93
V  [libjvm.so+0x17d8874]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x284
V  [libjvm.so+0xec5149]  JNI_CreateJavaVM+0x99
C  [libjli.so+0x3eaa]  JavaMain+0x8a
C  [libjli.so+0x77f9]  ThreadJavaMain+0x9
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263501,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rxqz:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-11 18:22;roboduke;Changeset: ad1f6054
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-03-12 02:22:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ad1f6054
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(use == polladr) failed: the use should be a safepoint polling,JDK-8263352,5044205,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,whuang,whuang,whuang,2021-03-10 01:10,2021-09-22 02:22,2023-10-01 09:57,2021-03-23 23:31,17,,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,huawei-interest,intermittent,oracle-triage-11,oracle-triage-17,tier2,,,,,,,,,,,,,,,,"It is a bug generated by JDK-8260637. It can be repoducted on both X86 and aarch64 with -XX:+OptimizeFill .

This bug is the same one which is reported by Vladimir Kozlov in JDK-8261137 [ https://bugs.openjdk.java.net/secure/attachment/93466/hs_err_modules_java_desktop_0_305808.log ]

reproduct: 

 make run-test CONF=fast JTREG=""JAVA_OPTIONS=-ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -Djava.awt.headless=true -Xbatch -XX:+OptimizeFill"" TEST=""javax/imageio/plugins/shared/RepeatingWriteTest.java""


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/wanghuang/repo/jvm/openjdk/tmp/jdk/src/hotspot/share/opto/loopTransform.cpp:3711), pid=92006, tid=92112
#  assert(use == polladr) failed: the use should be a safepoint polling
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.wanghuang.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-adhoc.wanghuang.jdk, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x1116eec]  PhaseIdealLoop::match_fill_loop(IdealLoopTree*, Node*&, Node*&, Node*&, Node*&)+0xb04
#
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  T H R E A D  ---------------

Current thread :  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=92112]


Current CompileTask:
C2:  39170 2134   !b        com.sun.imageio.plugins.tiff.TIFFImageReader::initializeFromMetadata (885 bytes)

Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1116eec]  PhaseIdealLoop::match_fill_loop(IdealLoopTree*, Node*&, Node*&, Node*&, Node*&)+0xb04
V  [libjvm.so+0x111715c]  PhaseIdealLoop::intrinsify_fill(IdealLoopTree*) [clone .part.181]+0xb4
V  [libjvm.so+0x1117e40]  PhaseIdealLoop::do_intrinsify_fill()+0x288
V  [libjvm.so+0x1144db0]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0xda0
V  [libjvm.so+0x93a2f4]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x1cc
V  [libjvm.so+0x937b2c]  Compile::Optimize()+0xd64
V  [libjvm.so+0x938d8c]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0xfb4
V  [libjvm.so+0x7a1d50]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xf8
V  [libjvm.so+0x946070]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x848
V  [libjvm.so+0x946d18]  CompileBroker::compiler_thread_loop()+0x478
V  [libjvm.so+0x17044a0]  JavaThread::thread_main_inner()+0x290
V  [libjvm.so+0x1704780]  JavaThread::run()+0x260
V  [libjvm.so+0x1709fa0]  Thread::call_run()+0x100
V  [libjvm.so+0x1331144]  thread_native_entry(Thread*)+0x11c
C  [libpthread.so.0+0x78bc]  start_thread+0x19c",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263408,,,,,,,,,,JDK-8247307,JDK-8260637,,,,,"2021-03-17 19:41;whuang;Test8263352.java;https://bugs.openjdk.org/secure/attachment/93688/Test8263352.java",,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rxqj:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-23 23:31;roboduke;Changeset: 6e3a158a
Author:    Wang Huang <whuang@openjdk.org>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-03-24 06:30:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6e3a158a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove ReceiverTypeData check from serviceability/sa/TestPrintMdo.java,JDK-8263326,5044119,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2021-03-09 18:06,2022-10-10 01:25,2023-10-01 09:57,2021-03-12 13:05,17,,,,,,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,,,,,,"The tests assumes that the clhsdb ""printmdo -a"" command will include ReceiverTypeData somewhere in the output. Normally it is from the following in the output:

MethodData 0x00007f097141b430 for method java/util/concurrent/ConcurrentHashMap.tabAt([Ljava/util/concurrent/ConcurrentHashMap$Node;I)Ljava/util/concurrent/ConcurrentHashMap$Node;@0x0000000800448820
0 bci: 15 VirtualCallData 	count(48) entries(0)
	argument types	0: stack(1) ObjArrayKlass for InstanceKlass for java/util/concurrent/ConcurrentHashMap$Node
80 bci: 18 ReceiverTypeData 	flags(1) count(0) entries(1)
	InstanceKlass for java/util/concurrent/ConcurrentHashMap$Node(3)

Sinced LingeredApp is used as the debuggee, the output of ""printmdo -a"" is very much subjected to the code executed by LingeredApp on startup, including any library code it calls. It is also subjected to how the VM is launched. Therefore there is no guarantee that the above mention of ReceiverTypeData will be present. We have had other issues like this in the past, thus the restrictions currently in place when running TestPrintMdo.java:

* @requires vm.flavor == ""server"" & !vm.emulatedClient & !(vm.opt.TieredStopAtLevel == 1)

And the LingeredApp is launched with:

app = LingeredApp.startApp(""-XX:+ProfileInterpreter"", ""-XX:CompileThreshold=100"");

I started running into problems with ReceiverTypeData not appearing in the output about 1% of the time while working on changes for JDK-8243455, which impacts code executed by LingeredApp on startup.

Rather than trying to make it so somehow we can (hopefully) guarantee that ReceiverTypeData is always present, which I'm not even sure we can do, I think it's best to just no longer rely on its presence, and not have to worry about this failure cropping up again.",,,,,,,,,,JDK-8294202,JDK-8295047,,,,,,,,,,,,JDK-8243455,,,,,,,,JDK-8258649,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rxjn:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-03-12 13:05;roboduke;Changeset: ecfa712c
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-03-12 21:05:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ecfa712c
;;;","2022-10-07 13:11;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
No risk, only a test change.
Clean backport except for Copyright.
Test passes. SAP nighlty testing passed.;;;","2022-10-07 13:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1403
Date: 2022-10-07 20:10:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Lanai: clean RenderPerfTest/build.xml ,JDK-8263325,5044114,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,avu,avu,avu,2021-03-09 14:15,2021-03-10 00:25,2023-10-01 09:57,2021-03-10 00:25,internal,,,,,,,,internal,client-libs,,0,code-review,lanai,Lanai,,,,,,,,,,,,,,,,,,,,Some copy/paste errors in comments should be fixed,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rxij:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Lanai: use the PtrPixelsRow instead of multiplication,JDK-8263324,5044113,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,avu,avu,avu,2021-03-09 13:57,2021-03-11 08:07,2023-10-01 09:57,2021-03-10 15:07,internal,,,,,,,,internal,client-libs,,0,code-review,critical,lanai,Lanai,,,,,,,,,,,,,,,,,,,Use PtrPixelsRow in MTLBlitLoops.m,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,internal,,,,,,,,"0|i2rxib:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-10 08:40;prr;We should examine and replace all use of direct multiplication.
The review comment cited line 1 below but said we should replace all similar uses of multiplication,.
For example also we have line 2 and perhaps others

            pDst = PtrAddBytes(pDst, dstx * dstInfo.pixelStride);    //line 1
            pDst = PtrPixelsRow(pDst, dsty, dstInfo.scanStride);

            // Metal texture is (0,0) at left-top
            srcx = srcOps->xOffset + srcx;
            srcy = srcOps->yOffset + srcy;
            const int byteLength = width * height * 4; // NOTE: assume that src format is MTLPixelFormatBGRA8Unorm // line 2;;;","2021-03-10 12:32;avu;[~prr] I've looked through similar cases and added appropriate checks, please have a look. Though the checks are not so important taking into account that MTLBuffers cannot exceed 512MB on macOS.
https://webrevs.openjdk.java.net/?repo=lanai&pr=214&range=00;;;","2021-03-10 13:24;prr;LGTM. I am not sure how the limit on the buffer size relates since overflow would just point to outside it ..;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Debug Agent help output includes invalid URL,JDK-8263323,5044112,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,cjplummer,cjplummer,cjplummer,2021-03-09 13:57,2021-06-10 18:00,2023-10-01 09:57,2021-06-09 12:03,17,,,,,,,,17,core-svc,,0,doc,,,,,,,,,,,,,,,,,,,,,,"If you run java with the debug agent, and ask for help output, the output contains an invalid URL:

----------------------
bin/java -agentlib:jdwp=help

               Java Debugger JDWP Agent Library
               --------------------------------

  (see http://java.sun.com/products/jpda for more information)

jdwp usage: java -agentlib:jdwp=[help]|[<option>=<value>, ...]
...

----------------------
The latest published docs, which are for JDK 15, do have the following jpda page:

https://docs.oracle.com/en/java/javase/15/docs/specs/jpda/architecture.html

Although it references jdwp and its specs, it does not seem to get you to any page that explains the options that can be used (the ones that you would see in the -agentlib:jdwp=help output above if I didn't truncate it). The page that does this is:

https://docs.oracle.com/en/java/javase/15/docs/specs/jpda/conninv.html#oracle-vm-invocation-options ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268370,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rxi3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2021-05-18 23:19;alanb;The text for the usage output is in debugInit.c, I think the simplest is to just drop the URL from the message as its location could change at any time.;;;","2021-05-19 17:40;cjplummer;JDK-8263203 is a similar doc link issue, but with jconsole. This bad link with jconsole is the one referenced by the Help -> ""Online User Guide"" menu item. So if we are to apply the ""drop the URL"" fix to it, that would mean removing the menu item. On the other hand, if we can fix the link in jconsole, we should also be able to fix the link in the jdwp agent help output too.;;;","2021-06-03 13:38;cjplummer;I'm going to include the following rather than a URL:

   (See the ""Oracle VM Invocation Options"" section of the JPDA ""Connection and Invocation Details"" document for more information.)
;;;","2021-06-03 14:03;cjplummer;$ ./java -agentlib:jdwp=help
               Java Debugger JDWP Agent Library
               --------------------------------

  (See the ""VM Invocation Options"" section of the JPDA
   ""Connection and Invocation Details"" document for more information.)

jdwp usage: java -agentlib:jdwp=[help]|[<option>=<value>, ...]
...;;;","2021-06-09 12:03;roboduke;Changeset: 33d34c6b
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-06-09 19:03:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/33d34c6b670e83778479a2a11ae23229bf959752
;;;",,,,,,,,,,,,,,,,,,,,,,,
"Calling Application.launch on FX thread should throw IllegalStateException, but causes deadlock",JDK-8263322,5044111,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fkirmaier,fkirmaier,fkirmaier,2021-03-09 13:36,2021-04-22 07:29,2023-10-01 09:57,2021-04-07 04:25,jfx16,,,,,,,,jfx17,javafx,,0,,,,,,,,,,,,,,,,,,,,,,,"The new Platform.startup method can create a deadlock, when afterwards Application.launch is called from the JavaFX thread.
Simple fix with PR is on the way.",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263401,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rxhv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d9a38b8,,,,,,,,,"2021-03-09 13:42;kcr;An Application should never call Application.launch from the JavaFX thread. The fix should be to reject that with an exception. This might need a CSR (I'll let you know during the review).;;;","2021-04-07 04:25;roboduke;Changeset: 9796a83f
Author:    Florian Kirmaier <fkirmaier@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-04-07 11:25:12 +0000
URL:       https://git.openjdk.java.net/jfx/commit/9796a83f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Regression 8% in javadoc-steady in 17-b11,JDK-8263321,5044110,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,ecaspole,ecaspole,2021-03-09 13:24,2021-06-17 07:35,2023-10-01 09:57,2021-06-15 08:57,17,,,,,,,,17,tools,,0,benchmark,noreg-perf,perf-regression,,,,,,,,,,,,,,,,,,,,"AFAICT this is due to https://bugs.openjdk.java.net/browse/JDK-8260223
JDK-8260223  
",,,,,,,,,,JDK-8268844,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260223,JDK-8268622,,,,,,,,,,,,,,,,,,,,,,,,,,,,b11,17,,,,,,,,"0|i2rxhn:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-06-11 03:13;hannesw;This is a fascinating bug. JDK-8260223 is a seemingly innocuous change where use of `Utils#getPackageName` is replaced with use of `HtmlDocletWriter#getLocalizedPackageName`. The two methods are *almost* identical, the biggest difference being that the new method's return type is `Content` rather than `String` and therefore the package name is wrapped in a `html.markup.StringContent` (now renamed to `Text`). 

The old use of `Utils#getPackageName` would also create a `StringContent` wrapper around the returned string, so that doesn't explain the regression. However, the StringContent/Text constructor takes a `CharSequence` as argument, and the new method takes advantage of this by directly passing the `com.sun.tools.javac.util.Name` instance it got back from `PackageElement.getQualifiedName()`. Of course, the StringContent/Text constructor loops over the characters of the CharSequence using `charAt(int)`, which turns out to be implemented as `toString().charAt(index)` in said class, triggering a utf2string conversion of the whole byte array for each character. ;;;","2021-06-15 08:57;roboduke;Changeset: 76cad4b1
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-06-15 15:56:28 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/76cad4b1ae76c6cc854f7a901736bf108639f8f2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Watch registry changes for remote printers update instead of polling,JDK-8263311,5044099,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aivanov,aivanov,aivanov,2021-03-09 12:15,2023-04-06 08:35,2023-10-01 09:57,2021-03-18 06:26,11,7u241,8u231,,,,,,17,client-libs,,0,cssn21_03_01,cssn21_03_02,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok-next,jdk16u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,sustaining,,,,,,,,,,,,,"JDK-8153732 implemented polling for remote printers.
That bug description also mentions watching the registry for changes and links to the article which describes the method yet it does so in terms of WMI. Using WMI is not necessary to watch for the registry updates.

It is possible to replace polling mechanism with registry change notifications. If the registry at HKCU\Printers\Connections is updated, refresh the list of print services.",,,,,,,,,,JDK-8263810,JDK-8263811,JDK-8265743,JDK-8263808,JDK-8263809,JDK-8266999,JDK-8268445,,,,,,,,,,,,,,,,,,,,,JDK-8241829,,,,,,JDK-8153732,,,,,,,,,,,,,,,,,,,,,,,b20,11,,windows,,,,,,"0|i2rxf7:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-18 06:26;roboduke;Changeset: a85dc557
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2021-03-18 13:26:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a85dc557
;;;","2021-03-22 12:14;aivanov;Fix Request (16u)

- Justification: Improved handling of remote printers
- Risk Analysis: Low, uses Windows registry notification functions instead of polling for changes
- Testing: Manual test case, RemotePrinterStatusRefresh.java

The patch from jdk-dev (17) applies cleanly to 16u.;;;","2021-04-20 06:44;mdoerr;Fix Request (11u)
Should get backported for parity with 11.0.12-oracle. Applies cleanly.;;;","2021-06-09 10:02;akasko;Fix Request(8u):

Backport to 8u requested because it is a part of 8u301-oracle. Patch does not apply cleanly, review approval:

https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-June/013982.html;;;",,,,,,,,,,,,,,,,,,,,,,,,
C2 compilation fails with assert(found_sfpt) failed: no node in loop that's not input to safepoint,JDK-8263303,5044084,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,vaibhav,vaibhav,2021-03-09 10:03,2022-07-22 02:36,2023-10-01 09:57,2021-06-09 23:57,11,17,,,,,,,17,hotspot,,0,11u-tier3,c2,hs-comp-triaged,intermittent,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,"Test case : applications/runthese/RunThese30M.java
Test suite : JTREG
OS: History shows only one failure on Linux debug build
VM Flag used : -XX:+UnlockExperimentalVMOptions -XX:+UseZGC

VM Crash Trace :

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S77136/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/099122e7-097d-4fad-991d-3cace0bd203d/runs/b626b1ce-a46a-4335-ab60-bb9fe12885bd/workspace/open/src/hotspot/share/opto/loopnode.cpp:1000), pid=31609, tid=31634
#  assert(found_sfpt) failed: no node in loop that's not input to safepoint
#
# JRE version: Java(TM) SE Runtime Environment 18.9 (11.0.12+1) (fastdebug build 11.0.12-ea+1-LTS-82)
# Java VM: Java HotSpot(TM) 64-Bit Server VM 18.9 (fastdebug 11.0.12-ea+1-LTS-82, mixed mode, tiered, z gc, linux-amd64)
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S14664/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a5b74640-a2f6-42b4-998e-c1eec7d92889/runs/c5bf8e3b-4ad2-446b-a53a-5cee6d096c4c/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java/scratch/0/core.31609)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#


Stack :


Current CompileTask:
C2:
[error occurred during error reporting (printing current compile task), id 0xe0000000, Internal Error (/opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S77136/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/099122e7-097d-4fad-991d-3cace0bd203d/runs/b626b1ce-a46a-4335-ab60-bb9fe12885bd/workspace/open/src/hotspot/share/runtime/timer.cpp:112)]

Stack: [0x00007f596dbee000,0x00007f596dcef000],  sp=0x00007f596dce6fa0,  free space=995k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x18e5463]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x353
V  [libjvm.so+0x18e62af]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x2f
V  [libjvm.so+0xb1f070]  report_vm_error(char const*, int, char const*, char const*, ...)+0x100
V  [libjvm.so+0x183f5d7]  TimeStamp::milliseconds() const+0x87
V  [libjvm.so+0xa55371]  CompileTask::print_line_on_error(outputStream*, char*, int)+0x81
V  [libjvm.so+0x18e1b1d]  VMError::report(outputStream*, bool)+0x135d
V  [libjvm.so+0x18e5463]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x353
V  [libjvm.so+0x18e62af]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x2f
V  [libjvm.so+0xb1f070]  report_vm_error(char const*, int, char const*, char const*, ...)+0x100
V  [libjvm.so+0xdce68b]  HandleArea::allocate_handle(oop)+0x14b
V  [libjvm.so+0x8290dc]  Handle::Handle(Thread*, oop)+0xac
V  [libjvm.so+0x98937b]  ClassLoaderDataGraph::classes_do(void (*)(Klass*))+0x7b
V  [libjvm.so+0xf65f58]  JfrTypeSet::write_klass_constants(JfrCheckpointWriter*, JfrCheckpointWriter*)+0x2a8
V  [libjvm.so+0xf6bd2f]  JfrTypeSet::serialize(JfrCheckpointWriter*, JfrCheckpointWriter*, bool)+0x14f
V  [libjvm.so+0xf6069c]  TypeSet::serialize(JfrCheckpointWriter&)+0x8c
V  [libjvm.so+0xf6396b]  JfrTypeManager::write_type_set()+0x8b
V  [libjvm.so+0xf29589]  JfrRecorderService::finalize_current_chunk_on_vm_error()+0x39
V  [libjvm.so+0xf296ee]  JfrRecorderService::rotate(int)+0x7e
V  [libjvm.so+0xed6958]  JfrEmergencyDump::on_vm_shutdown(bool)+0x278
V  [libjvm.so+0x18e5774]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x664
V  [libjvm.so+0x18e62af]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x2f
V  [libjvm.so+0xb1f070]  report_vm_error(char const*, int, char const*, char const*, ...)+0x100
V  [libjvm.so+0x12cab43]  LoopNode::verify_strip_mined(int) const+0x653
V  [libjvm.so+0x12cb5a7]  CountedLoopNode::skip_strip_mined(int)+0x47
V  [libjvm.so+0x12a410c]  PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.101]+0xfc
V  [libjvm.so+0x12a4f2c]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x13c
V  [libjvm.so+0x12a4f55]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x165
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f55]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x165
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12a4f40]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x150
V  [libjvm.so+0x12e290e]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x100e
V  [libjvm.so+0xa4021a]  Compile::Optimize()+0xada
V  [libjvm.so+0xa41584]  Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*)+0xf84
V  [libjvm.so+0x840fd1]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)+0xe1
V  [libjvm.so+0xa4ebb4]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x3f4
V  [libjvm.so+0xa4ff48]  CompileBroker::compiler_thread_loop()+0x568
V  [libjvm.so+0x1822cc7]  JavaThread::thread_main_inner()+0x2c7
V  [libjvm.so+0x1822fdb]  JavaThread::run()+0x20b
V  [libjvm.so+0x181e5ea]  Thread::call_run()+0x19a
V  [libjvm.so+0x1528556]  thread_native_entry(Thread*)+0x106
",,,,,,,,,,JDK-8272716,JDK-8273791,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290781,,,,,,JDK-8260420,JDK-8268672,,,,,"2021-05-31 06:21;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/94932/FuzzerUtils.java","2021-05-24 23:31;thartmann;MainClass.java;https://bugs.openjdk.org/secure/attachment/94780/MainClass.java","2021-05-31 06:21;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/94930/Test.java","2021-05-31 07:43;chagedorn;Test_8252372.java;https://bugs.openjdk.org/secure/attachment/94936/Test_8252372.java","2021-05-31 07:43;chagedorn;hs_err_8252372.log;https://bugs.openjdk.org/secure/attachment/94937/hs_err_8252372.log","2021-05-24 23:31;thartmann;hs_err_pid2611321.log;https://bugs.openjdk.org/secure/attachment/94782/hs_err_pid2611321.log","2021-05-31 06:21;chagedorn;hs_err_pid27470.log;https://bugs.openjdk.org/secure/attachment/94931/hs_err_pid27470.log","2021-03-09 10:11;vaibhav;hs_err_pid31609.log;https://bugs.openjdk.org/secure/attachment/93544/hs_err_pid31609.log","2021-05-24 23:31;thartmann;replay_pid2611321.log;https://bugs.openjdk.org/secure/attachment/94781/replay_pid2611321.log","2021-03-11 01:19;thartmann;replay_pid31609.log;https://bugs.openjdk.org/secure/attachment/93612/replay_pid31609.log",,,,,,,,,,,,,,,,,"0|i2rxbv:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-03-09 10:06;vaibhav;A similar fix has went few days ago : JDK-8262395. Requesting [~thartmann] to please assess.;;;","2021-03-11 01:15;thartmann;This is a very generic failure mode and since the fix for JDK-8260420 has been backported, I don't think this failure is related.;;;","2021-03-11 01:19;thartmann;The issue can be reproduced with attached replay file:
java -XX:+ReplayIgnoreInitErrors -XX:+ReplayCompiles -XX:ReplayDataFile=replay_pid31609.log  -XX:+UnlockExperimentalVMOptions -XX:+UseZGC

I've verified that it's unrelated to JDK-8260420.;;;","2021-03-11 03:55;thartmann;Offending node is a CastPP:
 4538	AddP	=== _  2053  2053  1332  [[ 7452  3283  8645  7489  6000  7462  7776 ]]   Oop:java/util/Formatter$FormatSpecifier:NotNull:exact+32 * !jvms: StringUTF16::indexOf @ bci:31 String::indexOf @ bci:25 String::indexOf @ bci:3 AbstractValidatingLambdaMetafactory::<init> @ bci:344
 6000	LoadP	=== _  3413  4538  [[ 7462  7489  8645 ]]  @java/util/Formatter$FormatSpecifier+32 *, name=f, idx=98; #java/util/Formatter$Flags *  Oop:java/util/Formatter$Flags * !orig=[17513] !jvms: Matcher::reset @ bci:26 Matcher::<init> @ bci:90 Pattern::matcher @ bci:38 Formatter::parse @ bci:12 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401
 3482	Proj	===  4804  [[ 11761  11785  8072  4845  2412  6059  5556  5564  7525  2409  6945  4816  8073  2415  2412  4845  7524  7303  4824  2421  2417  6059  2421  6940  2409  7524  3491  8645  2417  2415  6943 ]] #2  Memory: @rawptr:BotPTR, idx=Raw; !orig=[17463],[17470] !jvms: StringUTF16::indexOf @ bci:6 String::indexOf @ bci:25 String::indexOf @ bci:3 AbstractValidatingLambdaMetafactory::<init> @ bci:326
 3483	Proj	===  4804  [[ 2403  8645 ]] #0 !orig=[4805] !jvms: StringUTF16::indexOf @ bci:6 String::indexOf @ bci:25 String::indexOf @ bci:3 AbstractValidatingLambdaMetafactory::<init> @ bci:326
 8413	Bool	=== _  8412  [[ 8414 ]] [lt] !orig=[6942] !jvms: String::length @ bci:6 Matcher::getTextLength @ bci:4 Matcher::reset @ bci:110 Matcher::find @ bci:25 Formatter::parse @ bci:35 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401
 7523	IfTrue	===  6952  [[ 8414 ]] #1 !orig=[21524] !jvms: Matcher::reset @ bci:23 Matcher::find @ bci:25 Formatter::parse @ bci:35 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401
 8645	LoadBarrier	===  3483  3482  6000  4538  1  [[ 8646  8647 ]]  !orig=4821 !jvms: Matcher::search @ bci:51 Matcher::find @ bci:31 Formatter::parse @ bci:35 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401
 8414	CountedLoopEnd	===  7523  8413  [[ 8415  4811 ]] [lt] P=0,844259, C=29958,000000 !orig=[6046] !jvms: Matcher::getTextLength @ bci:4 Matcher::reset @ bci:110 Matcher::find @ bci:25 Formatter::parse @ bci:35 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401
 8647	Proj	===  8645  [[ 6946  2418  13248  13247 ]] #2  Oop:java/util/Formatter$Flags * !orig=[3494],[17517] !jvms: Matcher::search @ bci:51 Matcher::find @ bci:31 Formatter::parse @ bci:35 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401
 8415	IfFalse	===  8414  [[ 7525  13248  8420 ]] #0 !orig=8018 !jvms: Matcher::reset @ bci:70 Matcher::find @ bci:25 Formatter::parse @ bci:35 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401

 13248	CastPP	===  8415  8647  [[ 3509 ]]  #java/util/Formatter$Flags:NotNull * carry dependency  Oop:java/util/Formatter$Flags:NotNull * !orig=[11902] !jvms: Formatter$FormatSpecifier::flags @ bci:4 Formatter$FormatSpecifier::<init> @ bci:54 Formatter::parse @ bci:88 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401

 3509	CallStaticJava	===  7540  2401  4845  374  1 ( 13248  2353  1208  1220  1229  1321  1212  1235  1214  1215  1216  1217  1  1  1  1  1041  1041  1526  1527  1533  1526  1527  1533  1546  1526  1527  1256  1256  1  1  1  1  1  1533  1526  1579  1589  1672  1664  1579  2053  2053  1533  1526  1589  2275  2053 ) [[ 6965  2442  2443  6966 ]] # Static  java.util.Formatter$Flags::contains bool ( java/util/Formatter$Flags:NotNull *, java/util/Formatter$Flags * ) Formatter$FormatSpecifier::checkCharacter @ bci:80 Formatter$FormatSpecifier::<init> @ bci:186 Formatter::parse @ bci:88 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401 !jvms: StringUTF16::indexOf @ bci:24 String::indexOf @ bci:25 String::indexOf @ bci:3 AbstractValidatingLambdaMetafactory::<init> @ bci:326

[~roland], does that ring a bell?;;;","2021-03-11 06:19;thartmann;Traced this back a bit further. The CastPP is added here:

#0  Node::set_req (n=<optimized out>, i=<optimized out>, this=<optimized out>) at /oracle/jdk11u-cpu/open/src/hotspot/share/opto/node.hpp:419
#1  ConstraintCastNode::make_cast (opcode=<optimized out>, c=0x7f50c10ea328, n=<optimized out>, t=<optimized out>, carry_dependency=<optimized out>) at /oracle/jdk11u-cpu/open/src/hotspot/share/opto/castnode.cpp:101
#2  0x00007f50e759b9e8 in PhiNode::Ideal (this=0x7f50c10ee5c0, phase=0x7f50ba5f6660, can_reshape=true) at /oracle/jdk11u-cpu/open/src/hotspot/share/opto/cfgnode.cpp:1773

For this Phi:

 8414	CountedLoopEnd	===  7523  8413  [[ 8415  4811 ]] [lt] P=0,844259, C=29958,000000 !orig=[6046] !jvms: Matcher::getTextLength @ bci:4 Matcher::reset @ bci:110 Matcher::find @ bci:25 Formatter::parse @ bci:35 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401
 11794	CountedLoopEnd	===  11793  2054  [[ 11795  11804 ]]  P=0,844259, C=29958,000000 !orig=8414,[6046] !jvms: Formatter$Flags::parse @ bci:39 Formatter$FormatSpecifier::flags @ bci:4 Formatter$FormatSpecifier::<init> @ bci:54 Formatter::parse @ bci:88 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401
 8647	Proj	===  8645  [[ 6946  2418  11788  13247  13248 ]] #2  Oop:java/util/Formatter$Flags * !orig=[3494],[17517] !jvms: Matcher::search @ bci:51 Matcher::find @ bci:31 Formatter::parse @ bci:35 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401
 11789	IfTrue	===  11787  [[ 11788  11790  2418 ]] #1 !orig=[3493] !jvms: Formatter$Flags::parse @ bci:39 Formatter$FormatSpecifier::flags @ bci:4 Formatter$FormatSpecifier::<init> @ bci:54 Formatter::parse @ bci:88 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401
 8415	IfFalse	===  8414  [[ 11805 ]] #0 !orig=8018 !jvms: Matcher::reset @ bci:70 Matcher::find @ bci:25 Formatter::parse @ bci:35 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401
 11804	IfFalse	===  11794  [[ 11805 ]] #0 !orig=8415,8018 !jvms: Formatter$Flags::parse @ bci:58 Formatter$FormatSpecifier::flags @ bci:4 Formatter$FormatSpecifier::<init> @ bci:54 Formatter::parse @ bci:88 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401
 2418	CastPP	===  11789  8647  [[ 11902  3495  3495 ]]  #java/util/Formatter$Flags:NotNull *  Oop:java/util/Formatter$Flags:NotNull * !orig=[4846] !jvms: StringLatin1::indexOf @ bci:38 String::indexOf @ bci:13 String::indexOf @ bci:3 AbstractValidatingLambdaMetafactory::<init> @ bci:308
 11788	CastPP	===  11789  8647  [[ 11769  11769  11902 ]]  #java/util/Formatter$Flags:NotNull *  Oop:java/util/Formatter$Flags:NotNull * !orig=2418,[4846] !jvms: Formatter$Flags::parse @ bci:-1 Formatter$FormatSpecifier::flags @ bci:4 Formatter$FormatSpecifier::<init> @ bci:54 Formatter::parse @ bci:88 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401
 11805	Region	===  11805  11804  8415  [[ 11805  8420  11811  11895  11902  7525  13248 ]]  !jvms: Formatter$Flags::parse @ bci:58 Formatter$FormatSpecifier::flags @ bci:4 Formatter$FormatSpecifier::<init> @ bci:54 Formatter::parse @ bci:88 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401
 11902	Phi	===  11805  11788  2418  [[ 3509 ]]  #java/util/Formatter$Flags:NotNull *  Oop:java/util/Formatter$Flags:NotNull * !jvms: Formatter$FormatSpecifier::flags @ bci:4 Formatter$FormatSpecifier::<init> @ bci:54 Formatter::parse @ bci:88 Formatter::format @ bci:12 Formatter::format @ bci:7 String::format @ bci:9 AbstractValidatingLambdaMetafactory::<init> @ bci:401
$50 = void;;;","2021-03-11 06:30;thartmann;ILW = Assert during C2 compilation because unexpected node is in outer strip mined loop, only showed up once, disable loop strip mining = HLM = P3;;;","2021-05-24 23:32;thartmann;I can reproduce this with JDK 17 as well with attached MainClass.java (simply run 'java MainClass'), see hs_err_pid2611321.log;;;","2021-05-24 23:32;thartmann;Roland, could you please have a look?;;;","2021-05-31 06:24;chagedorn;I've also attached a failing fuzzer test (Test.java, hs_err_pid27470.log) that starts to fail after JDK-8267754 (seems unrelated though) with the same assertion.;;;","2021-05-31 07:43;chagedorn;Attached another failing fuzzer test (Test_8252372.java, hs_err_8252372.log) that starts to fail after JDK-8252372 with the same assertion. Not sure if it is related to this bug or if it happens to be a separate issue. If so, please file a new bug for it.;;;","2021-05-31 23:14;thartmann;Raising priority because this shows up a lot.;;;","2021-06-01 02:03;roland;I checked that the failures with Test.java and Test_8252372.java no longer reproduce with the proposed fix.;;;","2021-06-09 23:57;roboduke;Changeset: d4377afb
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-06-10 06:56:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d4377afb999f4f03d384ded97771c83ea1c1f513
;;;","2021-08-09 14:19;epavlova;The regression test compiler/loopstripmining/TestPinnedUseInOuterLSMUnusedBySfpt.java passed in JDK17 ATR;;;","2021-09-13 13:02;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies almost cleanly (only whitespace diff in removed hunk): https://github.com/openjdk/jdk11u-dev/pull/339
Needs to get backported together with JDK-8268672.;;;",,,,,,,,,,,,,
serviceability/sa/ClhsdbFindPC.java cannot find MaxJNILocalCapacity with ASLR,JDK-8263242,5044006,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,shade,shade,2021-03-09 03:43,2021-05-24 16:42,2023-10-01 09:57,2021-05-18 14:28,17,,,,,,,,17,hotspot,,0,testbug,,,,,,,,,,,,,,,,,,,,,,"The test case was added recently with JDK-8261098. On some machines, it fails with:

$ CONF=linux-x86_64-server-fastdebug make run-test TEST=serviceability/sa/ClhsdbFindPC.java

Starting clhsdb against corefile core and exe /home/shade/jdk/build/linux-x86_64-server-fastdebug/images/jdk/bin/java
[2021-03-09T11:37:01.497454082Z] Gathering output for process 79218
[2021-03-09T11:37:02.344227826Z] Waiting for completion for process 79218
[2021-03-09T11:37:02.344444425Z] Waiting for completion finished for process 79218
Output: 
Opening core file, please wait...
hsdb> hsdb> + verbose true
hsdb> + findsym MaxJNILocalCapacity
0x00007fb919044688
hsdb> + quit

Starting clhsdb against corefile core and exe /home/shade/jdk/build/linux-x86_64-server-fastdebug/images/jdk/bin/java
[2021-03-09T11:37:02.347413091Z] Gathering output for process 79281
[2021-03-09T11:37:03.335273729Z] Waiting for completion for process 79281
[2021-03-09T11:37:03.335473657Z] Waiting for completion finished for process 79281
Output: 
Opening core file, please wait...
hsdb> hsdb> + verbose true
hsdb> + findpc 0x00007fb919044688
Address 0x00007fb919044688: In unknown location
hsdb> + quit

STDERR:
 stdout: [ + findpc 0x00007fb919044688
Address 0x00007fb919044688: In unknown location
];
 stderr: [ + findpc 0x00007fb919044688
Address 0x00007fb919044688: In unknown location
]
 exitValue = -1

java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'Address 0x00007fb919044688: .*MaxJNILocalCapacity' missing from stdout/stderr 

Note that the prior invocation of hsdb found the symbol at the same address 0x00007fb919044688, but the subsequent invocation missed it.

This issue goes away after disabling ASLR on target machine:
 $ echo 0 | sudo tee /proc/sys/kernel/randomize_va_space

...and remanifests when ASLR is enabled back:
 $ echo 2 | sudo tee /proc/sys/kernel/randomize_va_space",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261098,,,,,,JDK-8261710,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2rwuj:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-03-11 09:30;cjplummer;The test first successfully finds the address of the MaxJNILocalCapacity symbol:

hsdb> + findsym MaxJNILocalCapacity
0x00007fb919044688

But it then fails to do the reverse and map the address to the symbol:

hsdb> + findpc 0x00007fb919044688
Address 0x00007fb919044688: In unknown location 

I know in general this type of reverse lookup is working because otherwise SA would quickly fail due to the inability to map a vtable address to its symbol. The code that does the address -> symbol lookup is in PointerFinder.java

    JVMDebugger dbg = VM.getVM().getDebugger();
    CDebugger cdbg = dbg.getCDebugger();
    if (cdbg != null) {
        loc.loadObject = cdbg.loadObjectContainingPC(a);
        if (loc.loadObject != null) {
            loc.nativeSymbol = loc.loadObject.closestSymbolToPC(a);
            return loc;
        }
    }

From the output I can tell that the loadObjectContainingPC(a) returned null. I changed the code to instead just always use the first LoadObject in the global list:

-        loc.loadObject = cdbg.loadObjectContainingPC(a);
+        java.util.List<LoadObject> objs = cdbg.getLoadObjectList();
+        loc.loadObject = objs.get(0);

Although this is not the LoadObject that the symbol is in, it turns out that doesn't matter since loadObject.closestSymbolToPC(a) ends up searching every dso no matter which LoadObject was used to call it.

With this code in place, the lookup was successful and the test passed. So that is evidence that loadObjectContainingPC(a) is not working properly. All it does it check that the address is in range of the LoadObject by looking at the start address and the size. The failure to find the proper LoadObject is an indication that the size for the LoadObject is too small.

I then modified ClhsdbFindPC.java to execute the clhsdb ""pmap"" command before the above failed ""findpc"" command. The following is part of the output:

hsdb> + pmap
...
0x00007f6eff54f000	33476K	/home/shade/jdk/build/linux-x86_64-server-fastdebug/images/jdk/lib/server/libjvm.so
0x00007f6f01736000	4904K	/lib/x86_64-linux-gnu/libc-2.24.so
...

hsdb> + findsym MaxJNILocalCapacity
0x00007f6f01665688

And some simple math show the MaxJNILocalCapacity address is a ways beyond what SA thinks is the end of libjvm.so:

(gdb) p /x 0x00007f6eff54f000 + 33476*1024
$7 = 0x7f6f01600000
(gdb) p /x 0x00007f6f01665688 - $7
$8 = 0x65688
(gdb) p $8
$9 = 415368

So the libjvm.so size is too small by at least 415368 bytes.
;;;","2021-03-11 18:34;cjplummer;In the review for JDK-8261710, Yasumasa mentioned that the size calculation may not be perfect and could use some future improvements.

https://github.com/openjdk/jdk/pull/2563#issuecomment-780344032;;;","2021-03-23 15:15;cjplummer;The issue is that the size of the .so is not properly being calculated, and is too small. The problem can be more readily reproduced by changing the symbol that is searched for from MaxJNILocalCapacity to something near the end of the .bss section. I changed it to _ZL16ZCounterUncommit, and now it reproduces every time. [Just a warning if you try this change after applying the fix below. The test will still fail, but that's because the ""findpc <addr>"" output unmangles the symbol, so it displays ZCounterUncommit instead of _ZL16ZCounterUncommit, so the test complains.]

The issue is that when calculating the size (range) of the .so, the p_filesz field is used instead of p_memsz.

+++ b/src/jdk.hotspot.agent/linux/native/libsaproc/libproc_impl.c
@@ -188,11 +188,11 @@ static bool fill_addr_info(lib_info* lib) {
   for (ph = phbuf, cnt = 0; cnt < ehdr.e_phnum; cnt++, ph++) {
     if (ph->p_type == PT_LOAD) {
       uintptr_t aligned_start = align_down(lib->base + ph->p_vaddr, ph->p_align);
-      uintptr_t aligned_end = align_up(aligned_start + ph->p_filesz, ph->p_align);
+      uintptr_t aligned_end = align_up(aligned_start + ph->p_memsz, ph->p_align);

p_memsz is larger because it includes .bss, which is not included in p_filesz. However, at the time this code was written, initially p_memsz was used, but it was thought that it produced an address that was beyond the end of the .so memory, so p_filesz was used instead. The confusion was due to not understanding how .bss is handled. If you look at the maps for libjvm.so, you will see something like:

7efee9393000-7efee93b5000 r-xp 00000000 08:02 23470983                   /ws/jdk/build/linux-x86_64-server-fastdebug/images/jdk/lib/libjava.so
7efee93b5000-7efee95b5000 ---p 00022000 08:02 23470983                   /ws/jdk/build/linux-x86_64-server-fastdebug/images/jdk/lib/libjava.so
7efee95b5000-7efee95b6000 r--p 00022000 08:02 23470983                   /ws/jdk/build/linux-x86_64-server-fastdebug/images/jdk/lib/libjava.so
7efee95b6000-7efee95b7000 rw-p 00023000 08:02 23470983                   /ws/jdk/build/linux-x86_64-server-fastdebug/images/jdk/lib/libjava.so
7efee95b7000-7efee95b8000 rw-p 00000000 00:00 0 

It was thought, in the above example, that the .so ended at 7efee95b7000. However, you also need to include the anonymous map that follows, because it represents the .bss section. When you look at this address instead (7efee95b8000), then using p_memsz computes the correct end of the .so memory.

However, after the above fix I found that the computed end was coming up a page short. Here's an example with output from various sources:

#libproc_impl.c fill_addr_info() printf:
libjvm.so [1] 0x15055854d000-0x15055a3b8000: base = 0x15055854d000, vaddr = 0x0, memsz = 0x1e6aa70
libjvm.so [2] 0x15055a3b8000-0x15055a565000: base = 0x15055854d000, vaddr = 0x1e6bde0, memsz = 0x1acbc0

# /proc/<pid>/maps
15055854d000-15055a3b8000 r-xp 00000000 08:10 4745273214                 /libjvm.so
15055a3b8000-15055a492000 r--p 01e6a000 08:10 4745273214                 /libjvm.so
15055a492000-15055a4c8000 rw-p 01f44000 08:10 4745273214                 /libjvm.so
15055a4c8000-15055a566000 rw-p 00000000 00:00 0 

# clhsdb pmap output:
0x000015055854d000	32864K	/libjvm.so

# computed end of .so based on clhsdb pmap output
(gdb) p /x 0x000015055854d000 + 32864*1024
$11 = 0x15055a565000

So the end result here is that the calculated ending address, 0x15055a565000, is one page short of what the maps file shows is the ending address, which is 15055a566000. This issue is due to the align_down that is done on the starting address of the segment:

      uintptr_t aligned_start = align_down(lib->base + ph->p_vaddr, ph->p_align);
      uintptr_t aligned_end = align_up(aligned_start + ph->p_filesz, ph->p_align);

This does seem to compute the correct start of the segment, which is 0x15055a3b8000, but also results in coming up a page short in computing the overall size. I think the solution is to use the unaligned start of the library when computing the ending address, which seems to be working

-      uintptr_t aligned_start = align_down(lib->base + ph->p_vaddr, ph->p_align);
-      uintptr_t aligned_end = align_up(aligned_start + ph->p_filesz, ph->p_align);
+      uintptr_t unaligned_start = lib->base + ph->p_vaddr;
+      uintptr_t aligned_start = align_down(unaligned_start, ph->p_align);
+      uintptr_t aligned_end = align_up(unaligned_start + ph->p_memsz, ph->p_align);
;;;","2021-04-08 16:41;hshi;Also notice random failure when running test/hotspot/jtreg/serviceability/sa/ClhsdbFindPC.java

serviceability/sa/ClhsdbFindPC.java#id0  Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'Address 0x00002b995a089408: .*MaxJNILocalCapacity' missing from stdout/stderr
serviceability/sa/ClhsdbFindPC.java#id2  Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'Address 0x00002ab060e05408: .*MaxJNILocalCapacity' missing from stdout/stderr

Checking above patch and fixed. ;;;","2021-05-17 04:17;hshi;Hi Chris,

Recently added test ""test/hotspot/jtreg/serviceability/sa/sadebugd/RunCommandOnServerTest.java"" fail due to same reason. It is annoying to have these intermittent failures.
Do you have plan to submit PR for this bug recently?

Tested with following patch and no more  reproduce for RunCommandOnServerTest and test/hotspot/jtreg/serviceability/sa/ClhsdbFindPC.java

--- a/src/jdk.hotspot.agent/linux/native/libsaproc/libproc_impl.c
+++ b/src/jdk.hotspot.agent/linux/native/libsaproc/libproc_impl.c
@@ -187,8 +187,9 @@ static bool fill_addr_info(lib_info* lib) {
   lib->exec_end = (uintptr_t)-1L;
   for (ph = phbuf, cnt = 0; cnt < ehdr.e_phnum; cnt++, ph++) {
     if (ph->p_type == PT_LOAD) {
-      uintptr_t aligned_start = align_down(lib->base + ph->p_vaddr, ph->p_align);
-      uintptr_t aligned_end = align_up(aligned_start + ph->p_filesz, ph->p_align);
+      uintptr_t unaligned_start = lib->base + ph->p_vaddr;
+      uintptr_t aligned_start = align_down(unaligned_start, ph->p_align);
+      uintptr_t aligned_end = align_up(unaligned_start + ph->p_filesz, ph->p_align);
       if ((lib->end == (uintptr_t)-1L) || (lib->end < aligned_end)) {
         lib->end = aligned_end;
       };;;","2021-05-17 10:22;cjplummer;I wasn't giving this bug much attention since no one else was reporting the issue. I can make it a higher priority. I delayed sending out a PR for the above fix because there were a couple of other things I wanted to clarify first. I'll try to get back to it.;;;","2021-05-17 18:42;hshi;Thanks Chris!
These two tests failure can reproduce constantly in our Linux X64 environement with 3.10.107 kernel.;;;","2021-05-17 20:40;cjplummer;It's out for review now.;;;","2021-05-18 14:28;roboduke;Changeset: 10236e7a
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-05-18 21:26:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/10236e7a52a2dd117c3639d020cfe294797f57af
;;;",,,,,,,,,,,,,,,,,,,
runtime/os/TestTracePageSizes.java fails on old kernels,JDK-8263236,5043999,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-03-09 02:44,2021-05-14 03:31,2023-10-01 09:57,2021-05-06 13:35,17,,,,,,,,17,hotspot,,0,os,testbug,,,,,,,,,,,,,,,,,,,,,"After JDK-8262188 added the new test, I am seeing the failures on some (older) kernels like these:

Added range: [ffffffffff600000, ffffffffff601000) pageSize=4KB isTHP=false isHUGETLB=false, vmFlags = rd ex 
From logfile: [0.003s][info][pagesize] CodeHeap 'non-nmethods':  min=4M max=8M base=0x00007f1b57c00000 page_size=2M size=8M
From smaps: [7f1b57c00000, 7f1b58000000) pageSize=4KB isTHP=false isHUGETLB=false, vmFlags = rd wr ex mr mw me ac 
Failure: 4 != 2048
STDERR:
java.lang.AssertionError: Page sizes mismatch: 4 != 2048
	at TestTracePageSizes.main(TestTracePageSizes.java:149)

...while on other (newer?) kernels it passes with:

Added range: [ffffffffff600000, ffffffffff601000) pageSize=4KB isTHP=false isHUGETLB=false, vmFlags=ex 
From logfile: [0.002s][info][pagesize] CodeHeap 'non-nmethods':  min=4M max=10M base=0x00007f7b50000000 page_size=2M size=10M
From smaps: [7f7b50000000, 7f7b50400000) pageSize=4KB isTHP=true isHUGETLB=false, vmFlags=rd wr ex mr mw me ac sd hg 
Success: 2048 > 4 and THP enabled

It seems as if ""hg"" flag that is supposed to show that VMA block was madvised for THP is missing on some kernels. Both machines above have THP on:

$ cat /sys/kernel/mm/transparent_hugepage/{enabled,defrag}
always [madvise] never
always defer [madvise] never

Every test configuration with -XX:+UseTransparentHugePages seems to fail.

Test passes on machine with:
Linux ... 5.4.0-65-generic #73-Ubuntu SMP Mon Jan 18 17:25:17 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux

...and fails on machine with:
Linux ... 4.9.0-14-amd64 #1 SMP Debian 4.9.246-2 (2020-12-17) x86_64 GNU/Linux",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262188,JDK-8267155,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rwsz:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-23 20:25;pli;I also see this failure appears on 64K page systems. 

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.AssertionError: Page sizes mismatch: 64 != 524288;;;","2021-04-09 04:01;shade;I suspect this kernel fix is in newer kernels, while old kernels still miss the VmFlag the test wants.

Reading https://www.kernel.org/doc/Documentation/vm/transhuge.txt, I think we can try an look at AnonHugePages as additional hint:

""The number of anonymous transparent huge pages currently used by the
system is available by reading the AnonHugePages field in /proc/meminfo.
To identify what applications are using anonymous transparent huge pages,
it is necessary to read /proc/PID/smaps and count the AnonHugePages fields
for each mapping."";;;","2021-04-09 06:10;shade;I have a candidate fix for it, please see linked PR.;;;","2021-05-06 13:35;roboduke;Changeset: 36e5ad61
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-05-06 20:34:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/36e5ad61e63e2f1da9cf565c607db28f23622ea9
;;;","2021-05-14 03:31;stuefe;Pattern matching may be a bit too expensive for this test: https://bugs.openjdk.java.net/browse/JDK-8267155;;;",,,,,,,,,,,,,,,,,,,,,,,
sanity/client/SwingSet/src/ColorChooserDemoTest.java failed throwing java.lang.NoClassDefFoundError,JDK-8263235,5043998,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amrsahu,aghaisas,aghaisas,2021-03-09 02:15,2021-04-07 17:59,2023-10-01 09:57,2021-03-31 13:34,17,,,,,,,,17,client-libs,,0,tier3,,,,,,,,,,,,,,,,,,,,,,"sanity/client/SwingSet/src/ColorChooserDemoTest.java test failed with below error -

----------------------------------------
java.lang.NoClassDefFoundError: Could not initialize class org.jemmy2ext.JemmyExt
	at org.jtregext.GuiTestListener.onTestFailure(GuiTestListener.java:52)
	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1699)
	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1683)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1186)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.NoClassDefFoundError: Could not initialize class org.jemmy2ext.JemmyExt
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.NoClassDefFoundError: Could not initialize class org.jemmy2ext.JemmyExt
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8253542,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2rwsr:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-03-09 04:55;akolarkunnu;""@build org.jemmy2ext.JemmyExt"" is missing in this test.;;;","2021-03-31 13:34;roboduke;Changeset: cb70ab0c
Author:    Your Name <you@example.com>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2021-03-31 20:33:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cb70ab0c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
C2: inconsistent spilling due to dead nodes in exception block,JDK-8263227,5043986,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rcastanedalo,shade,shade,2021-03-09 00:30,2021-08-12 23:02,2023-10-01 09:57,2021-04-20 03:07,11,17,,,,,,,17,hotspot,,0,c2,ctw,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,,,,,,,,,,,,,,,,,"FAILURE:

The attached program Test.java (reduced from the original report, see below) triggers an assertion failure when compiled by C2 as follows:

$ java -Xbatch -XX:+StressGCM -XX:StressSeed=0 -XX:CompileCommand=dontinline,java.lang.Integer::* Test.java
(...)
#  Internal Error (../../src/hotspot/share/opto/buildOopMap.cpp:240), pid=19789, tid=19802
#  assert(def) failed: since live better have reaching def
(...)

ANALYSIS:

The failure is caused by an unfortunate interaction between global code motion, call-catch cleanup, and live-range splitting:

1. Global code motion (on stress mode) places some users of a call result in between the call and its corresponding catch node.

2. After local scheduling, call-catch cleanup (PhaseCFG::call_catch_cleanup()) sinks the call result users to the call's fall-through and exception blocks, failing to remove the dead cloned users in the exception block.

 - 3. During register allocation, the call result value is selected for spilling. When its live range is split (PhaseChaitin::split_DEF()), PhaseChaitin::insert_proj() places the spill in the call's fall-through block (on the assumption that call results are only used in their fall-through paths), but marks the spilled value as reaching the exception path as well.

 - 4. When visiting the exception block, live-range splitting replaces uses of the call result by the value spilled in the fall-through path, following the inaccurate reaching definitions information. This leads to an inconsistent program form in which the spill in the fall-through block does not dominate its use in the exception block. This inconsistency manifests itself late in PhaseOutput::Output(), when reaching definitions are re-computed.

The attached PDF illustrates the failure for Test.java. After global and local code motion (page 1), the users 29,30-35,40 of the result value 36 from call 12 are placed in between the call (12) and the catch node (10). After call-catch cleanup (page 2), the users are sunk into the fall-through block (67-74) and the exception block (75-82), despite 75-82 being dead. Finally, after register allocation (page 3), the call value 36 is spilled in the fall-through block (89), and the spilled value is used by 84 and 98 in the non-dominated exception block.

The current frequency-based global code motion heuristics prevent this failure, as they never hoist call result users to the call block. Hence, the failure can only happen on stress mode (StressGCM), and possibly for irreducible control-flow graphs where execution frequency information can be inaccurate (JDK-8255763, JDK-8258895).

Potential solutions include: ensuring dead code cloned by PhaseCFG::call_catch_cleanup() is always removed, forbidding global code motion to place call result users in the call block, and extending live-range splitting to introduce spills in exception blocks as well.

ORIGINAL REPORT:

$ cd test/hotspot/jtreg/testlibrary/ctw
$ make
$ cd dist
$ wget https://repo1.maven.org/maven2/com/flagstone/transform/3.0/transform-3.0.jar
$ JAVA_OPTIONS=""-XX:+StressGCM"" ./ctw.sh transform-3.0.jar

#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/opto/buildOopMap.cpp:240), pid=2468897, tid=2469076
#  assert(def) failed: since live better have reaching def
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.shade.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-adhoc.shade.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x70ab0c][279]	com.flagstone.transform.video.VideoFrame
  OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*)+0x63c
#

Note: this issue seems intermittent and dependent on randomness for stress options? Run multiple times to get the failure. The CTW on full JAR takes about 10 seconds.",,,,,,,,,,JDK-8269317,JDK-8266344,,,,,,,,,,,,JDK-8257146,,,,,,,,,,,,,,JDK-8265726,JDK-8270090,JDK-8266480,JDK-8265784,,,,,,,,,"2021-03-18 03:21;rcastanedalo;Test.java;https://bugs.openjdk.org/secure/attachment/93690/Test.java","2021-03-31 02:26;rcastanedalo;failure-example.pdf;https://bugs.openjdk.org/secure/attachment/93913/failure-example.pdf","2021-03-09 00:31;shade;hs_err_pid2471501.log;https://bugs.openjdk.org/secure/attachment/93520/hs_err_pid2471501.log","2021-03-09 00:31;shade;replay_pid2471501.log;https://bugs.openjdk.org/secure/attachment/93521/replay_pid2471501.log",,,,,,,,,,,,,,,,,,,,,,,"0|i2rwq3:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-20 03:07;roboduke;Changeset: d81b0461
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2021-04-20 10:06:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d81b0461
;;;","2021-06-23 09:49;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.13-oracle. Doesn't apply cleanly, but resolution is trivial. disconnect_inputs in lcm.cpp needs an additional parameter for the feature to count edged which is not used here.
PR: https://github.com/openjdk/jdk11u-dev/pull/60;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
assert(*error_msg != '\0') failed: Must have error_message while parsing -XX:CompileCommand=unknown,JDK-8263206,5043952,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-03-08 15:15,2021-09-22 02:16,2023-10-01 09:57,2021-03-09 15:33,17,,,,,,,,17,hotspot,,0,diagnostics,hs-comp-triaged,oracle-triage-11,oracle-triage-17,tencent-interest,,,,,,,,,,,,,,,,,,"
Reproduce: java -XX:CompileCommand=unknown -version

```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jvm/jdk/src/hotspot/share/compiler/compilerOracle.cpp:688), pid=76463, tid=76464
#  assert(*error_msg != '\0') failed: Must have error_message
#
# JRE version:  (17.0) (fastdebug build )
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-adhoc.jvm.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x9b1f5c]  CompilerOracle::print_parse_error(char*, char*)+0xdc
#


Stack: [0x00007f0ba15d7000,0x00007f0ba16d8000],  sp=0x00007f0ba16d5f60,  free space=1019k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x9b1f5c]  CompilerOracle::print_parse_error(char*, char*)+0xdc
V  [libjvm.so+0x9b2890]  CompilerOracle::parse_from_line(char*)+0x920
V  [libjvm.so+0x9b3eb3]  compilerOracle_init()+0xa3
V  [libjvm.so+0xd4b003]  init_globals()+0x93
V  [libjvm.so+0x17d83a4]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x284
V  [libjvm.so+0xec50c9]  JNI_CreateJavaVM+0x99
C  [libjli.so+0x3eaa]  JavaMain+0x8a
C  [libjli.so+0x77f9]  ThreadJavaMain+0x9
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rwij:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-09 15:33;roboduke;Changeset: e5ce97b1
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-03-09 23:32:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e5ce97b1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Add Gradle Wrapper Validation Action,JDK-8263204,5043947,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jgneff,jgneff,jgneff,2021-03-08 12:20,2021-04-05 13:43,2023-10-01 09:57,2021-03-09 09:31,jfx17,,,,,,,,jfx17,javafx,,0,noreg-build,,,,,,,,,,,,,,,,,,,,,,"Any system that builds an OpenJFX pull request can be compromised by malicious code hidden inside the Gradle Wrapper JAR file. See the following page for details:

Gradle Wrapper Validation Action
https://github.com/gradle/wrapper-validation-action

SYSTEM / OS / JAVA RUNTIME INFORMATION

My particular system is Ubuntu 20.04 LTS with OpenJDK 11.

------------------------------------------------------------------------
$ uname -srm
Linux 5.4.0-66-generic x86_64

$ getconf GNU_LIBC_VERSION
glibc 2.31

$ java --version
openjdk 11.0.10 2021-01-19
OpenJDK Runtime Environment (build 11.0.10+9-Ubuntu-0ubuntu1.20.04)
OpenJDK 64-Bit Server VM (build 11.0.10+9-Ubuntu-0ubuntu1.20.04, mixed mode, sharing)
------------------------------------------------------------------------

STEPS TO REPRODUCE

Create a pull request with a tampered Gradle Wrapper.

EXPECTED RESULTS

The tampered Gradle Wrapper is detected and the JavaFX pre-submit tests on GitHub fail.

ACTUAL RESULT

The tampered Gradle Wrapper goes undetected.

SOURCE CODE FOR AN EXECUTABLE TEST CASE

I modified the current Gradle Wrapper JAR file with the command:

------------------------------------------------------------------------
$ strip-nondeterminism -v gradle-wrapper.jar
strip-nondeterminism: Not using a canonical time
strip-nondeterminism: Using normalizers:
  bflt cpio gettext gzip jar javadoc javaproperties jmod png uimage zip
Normalizing gradle-wrapper.jar
------------------------------------------------------------------------

WORKAROUND

The workaround is to check every pull request for the file 'gradle/wrapper/gradle-wrapper.jar' and manually verify its checksum before building the branch. The checksums are listed on the following page:

Gradle distribution and wrapper JAR checksum reference
https://gradle.org/release-checksums/
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262236,,,,,,JDK-8264010,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rwhf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-03-09 09:31;roboduke;Changeset: 75b4c15c
Author:    John Neffenger <john@status6.com>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-03-09 17:31:23 +0000
URL:       https://git.openjdk.java.net/jfx/commit/75b4c15c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
jconsole Online User Guide has wrong URL,JDK-8263203,5043942,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2021-03-08 10:25,2021-06-10 18:00,2023-10-01 09:57,2021-06-09 12:05,12,13,14,15,16,17,,,17,docs,,0,doc,jconsole,,,,,,,,,,,,,,,,,,,,,"Starting with JDK 12, the location of the jconsole Online User Guide has moved. It used to be located at:

https://docs.oracle.com/javase/<version>/docs/technotes/guides/management/jconsole.html

Starting with JDK 12 it is located at:

https://docs.oracle.com/en/java/javase/<version>/docs/specs/man/jconsole.html

The jconsole Help -> ""Online User Guide"" menu item is suppose to take you to this URL, but currently points to the old style location, which doesn't work. The following update is needed:

diff --git a/src/jdk.jconsole/share/classes/sun/tools/jconsole/resources/messages.properties b/src/jdk.jconsole/share/classes/sun/tools/jconsole/resources/messages.properties
index 24c2209ad0d..8af36f5d148 100644
--- a/src/jdk.jconsole/share/classes/sun/tools/jconsole/resources/messages.properties
+++ b/src/jdk.jconsole/share/classes/sun/tools/jconsole/resources/messages.properties
@@ -129,7 +129,7 @@ HELP_ABOUT_DIALOG_JAVA_VERSION=Java VM version:<br>{0}
 HELP_ABOUT_DIALOG_MASTHEAD_ACCESSIBLE_NAME=Masthead Graphic
 HELP_ABOUT_DIALOG_MASTHEAD_TITLE=About JConsole
 HELP_ABOUT_DIALOG_TITLE=JConsole: About
-HELP_ABOUT_DIALOG_USER_GUIDE_LINK_URL=http://docs.oracle.com/javase/{0}/docs/technotes/guides/management/jconsole.html
+HELP_ABOUT_DIALOG_USER_GUIDE_LINK_URL=https://docs.oracle.com/en/java/javase/{0}/docs/specs/man/jconsole.html
 HELP_MENU_ABOUT_TITLE=&About JConsole
 HELP_MENU_USER_GUIDE_TITLE=Online &User Guide
 HELP_MENU_TITLE=&Help
diff --git a/src/jdk.jconsole/share/classes/sun/tools/jconsole/resources/messages_ja.properties b/src/jdk.jconsole/share/classes/sun/tools/jconsole/resources/messages_ja.properties
index 2847da2e0a2..1ec346a36a5 100644
--- a/src/jdk.jconsole/share/classes/sun/tools/jconsole/resources/messages_ja.properties
+++ b/src/jdk.jconsole/share/classes/sun/tools/jconsole/resources/messages_ja.properties
@@ -130,6 +130,7 @@ HELP_ABOUT_DIALOG_MASTHEAD_ACCESSIBLE_NAME=\u30DE\u30B9\u30C8\u30D8\u30C3\u30C9\
 HELP_ABOUT_DIALOG_MASTHEAD_TITLE=JConsole\u306B\u3064\u3044\u3066
 HELP_ABOUT_DIALOG_TITLE=JConsole: \u8A73\u7D30
 HELP_ABOUT_DIALOG_USER_GUIDE_LINK_URL=http://docs.oracle.com/javase/{0}/docs/technotes/guides/management/jconsole.html
+HELP_ABOUT_DIALOG_USER_GUIDE_LINK_URL=https://docs.oracle.com/en/java/javase/{0}/docs/specs/man/jconsole.html
 HELP_MENU_ABOUT_TITLE=JConsole\u306B\u3064\u3044\u3066(&A)
 HELP_MENU_USER_GUIDE_TITLE=\u30AA\u30F3\u30E9\u30A4\u30F3\u30FB\u30E6\u30FC\u30B6\u30FC\u30FB\u30AC\u30A4\u30C9(&U)
 HELP_MENU_TITLE=\u30D8\u30EB\u30D7(&H)
diff --git a/src/jdk.jconsole/share/classes/sun/tools/jconsole/resources/messages_zh_CN.properties b/src/jdk.jconsole/share/classes/sun/tools/jconsole/resources/messages_zh_CN.properties
index 1541bf99968..57943d5f007 100644
--- a/src/jdk.jconsole/share/classes/sun/tools/jconsole/resources/messages_zh_CN.properties
+++ b/src/jdk.jconsole/share/classes/sun/tools/jconsole/resources/messages_zh_CN.properties
@@ -129,7 +129,7 @@ HELP_ABOUT_DIALOG_JAVA_VERSION=Java VM \u7248\u672C:<br>{0}
 HELP_ABOUT_DIALOG_MASTHEAD_ACCESSIBLE_NAME=\u62A5\u5934\u56FE
 HELP_ABOUT_DIALOG_MASTHEAD_TITLE=\u5173\u4E8E JConsole
 HELP_ABOUT_DIALOG_TITLE=JConsole: \u5173\u4E8E
-HELP_ABOUT_DIALOG_USER_GUIDE_LINK_URL=http://docs.oracle.com/javase/{0}/docs/technotes/guides/management/jconsole.html
+HELP_ABOUT_DIALOG_USER_GUIDE_LINK_URL=https://docs.oracle.com/en/java/javase/{0}/docs/specs/man/jconsole.html
 HELP_MENU_ABOUT_TITLE=\u5173\u4E8E JConsole(&A)
 HELP_MENU_USER_GUIDE_TITLE=\u8054\u673A\u7528\u6237\u6307\u5357(&U)
 HELP_MENU_TITLE=\u5E2E\u52A9(&H)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268351,,,,,,,,,,,,,,,,,,,,,,,,12,,,,,,,,"0|i2rwgb:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1163d29f,,,,,,,,,"2021-03-08 10:25;cjplummer;See http://mail.openjdk.java.net/pipermail/serviceability-dev/2021-March/036193.html for original report of this issue.;;;","2021-03-08 10:30;cjplummer;I tried the suggested fix in the current jdk source, but the URL for 17 does not exist yet (nor even 16 at this point), so it still results in an invalid URL. However, replacing ""17"" in the link with ""15"" does take you to the correct URL for the 15 docs.

We could just (blindly) fix this in 17 and then backport to 15 and 16, but I'm uncertain how to make sure the docs for 16 and 17 will actually end up in this location. We only know for sure that this fix works with versions 12, 13, 14 and 15.;;;","2021-03-08 12:20;rriggs;Hardcoding a URL in the man page is very fragile and bit-rots quickly.
Its better to soften the reference so it can be found with a search query instead of a link.
Or consult with the doc folks for a more durable link.;;;","2021-03-08 12:24;cjplummer;Just to clarify, this link is embedded in a GUI app menu item, but I think your man page guidance probably still applies.

Do you have any examples of using a search query?;;;","2021-05-18 20:54;rgallard;Hi [~cjplummer],

Hi Chris,

Regarding JDK-8263203 jconsole Online User Guide has wrong URL

The page to the JDK 17 jconsole man page won’t exist until JDK 17 is released.

The EA version of this page is available here:

https://download.java.net/java/early_access/jdk17/docs/specs/man/jconsole.html

If you want a more stable link, you could use this:

http://www.oracle.com/pls/topic/lookup?ctx=javase17&id=jconsole_tool_reference

Change 17 to the release you want.

Still, this link (with ctx=javase17) won’t work until JDK 17 is released.

It works for 16:

http://www.oracle.com/pls/topic/lookup?ctx=javase16&id=jconsole_tool_reference

If you have any additional questions about linking, contact Cliff Wayne, [~cwayne].

Thanks,
--Raymond
;;;","2021-05-19 17:45;cjplummer;[~rgallard], are  you suggesting that:

http://www.oracle.com/pls/topic/lookup?ctx=javase17&id=jconsole_tool_reference

Will be more stable than:

https://docs.oracle.com/en/java/javase/17/docs/specs/man/jconsole.html

Even though the first link just takes you to the 2nd. And if ""17"" is always replaced with the current version, can we expect this link to work for future releases also?;;;","2021-06-03 15:21;cjplummer;The URL will need a && instead of & due to how jconsole processes the string:

HELP_ABOUT_DIALOG_USER_GUIDE_LINK_URL=http://www.oracle.com/pls/topic/lookup?ctx=javase{0}&&id=jconsole_tool_reference

Single ampersands get removed by the call to removeMnemonicAmpersand(message) unless they are quoted by using &&.;;;","2021-06-07 12:25;cjplummer;Note I've filed JDK-8268351 for getting rid of the URL, but for now I'd rather just fix it since this is much simpler and I'd like to get this into 17,;;;","2021-06-07 14:08;cjplummer;[~rgallard] It has been pointed out that the URL we really want is https://docs.oracle.com/en/java/javase/17/management/using-jconsole.html, not https://docs.oracle.com/en/java/javase/17/docs/specs/man/jconsole.html. How can I get to this URL using the ""lookup"" syntax you gave above, which is using id=jconsole_tool_reference.;;;","2021-06-07 14:46;cjplummer;Nevermind. id=using_jconsole seems to work.;;;","2021-06-09 12:05;roboduke;Changeset: bbd0313a
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-06-09 19:04:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bbd0313ac12c062f02400342a87c283b7578062a
;;;",,,,,,,,,,,,,,,,,
C2: assert(!had_error) failed: bad dominance,JDK-8263189,5043924,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,chagedorn,chagedorn,2021-03-08 06:47,2021-09-22 02:15,2023-10-01 09:57,2021-03-23 01:16,16,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,javafuzzer,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,"The attached fuzzer test fails starts to fail after JDK-8256655 with the following assertion:

To reproduce:
java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test Test.java
java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Reduced Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/28992c6d-c35d-42fa-8099-898223bf183b-S1640/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7a42df58-80a3-4376-b469-ed090a308636/runs/e3e50449-b968-490c-9564-c40c69f04761/workspace/open/src/hotspot/share/opto/loopnode.cpp:4916), pid=8886, tid=8899
#  assert(!had_error) failed: bad dominance
#
# JRE version: Java(TM) SE Runtime Environment (17.0+12) (fastdebug build 17-ea+12-LTS-906)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+12-LTS-906, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12c9bb2]  PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool)+0x6e2
..........
Command Line: -Xmx1G -Xcomp -Xbatch -XX:-TieredCompilation -XX:CompileOnly=Test -XX:CompileCommand=quiet Test
..........
Current thread (0x00007fd3f0492fa0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=8899, stack(0x00007fd3cb4fd000,0x00007fd3cb5fe000)]


Current CompileTask:
C2:    504    4    b        Test::vMeth (266 bytes)

Stack: [0x00007fd3cb4fd000,0x00007fd3cb5fe000],  sp=0x00007fd3cb5f81c0,  free space=1004k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12c9bb2]  PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool)+0x6e2
V  [libjvm.so+0x12ca5d0]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x1d0
V  [libjvm.so+0x12cabaa]  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)+0xba
V  [libjvm.so+0x12d14a7]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x507
V  [libjvm.so+0xa13421]  PhaseIdealLoop::verify(PhaseIterGVN&)+0x341
V  [libjvm.so+0xa0561f]  Compile::process_for_post_loop_opts_igvn(PhaseIterGVN&)+0x1f
V  [libjvm.so+0xa0f7a0]  Compile::Optimize()+0x15f0
V  [libjvm.so+0xa114b5]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1905
V  [libjvm.so+0x83ceca]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa212d1]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xf21
V  [libjvm.so+0xa21f78]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1843131]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x184afa0]  Thread::call_run()+0x100
V  [libjvm.so+0x1536a06]  thread_native_entry(Thread*)+0x116
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256655,,,,,,,,,,,,"2021-03-08 06:46;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/93507/FuzzerUtils.java","2021-03-08 07:16;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/93510/Reduced.java","2021-03-08 06:46;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/93509/Test.java","2021-03-08 06:46;chagedorn;hs_err_pid8886.log;https://bugs.openjdk.org/secure/attachment/93508/hs_err_pid8886.log",,,,,,,,,,,,,,b27,16,,,,,,,,"0|i2rwcb:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-03-08 07:00;thartmann;Roland, could you please have a look?;;;","2021-03-08 07:01;thartmann;ILW = Assert during C2 compilation, reproducible with Fuzzer generated test, no known workaround but disable compilation of affected method = HMM = P2;;;","2021-03-23 01:16;roboduke;Changeset: fd3a33a8
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-03-23 08:15:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fd3a33a8
;;;","2021-08-09 14:21;epavlova;The regression test compiler/longcountedloops/TestDeadLongPhi.java passed in JDK17 ATR;;;",,,,,,,,,,,,,,,,,,,,,,,,
JSSE should fail fast if there isn't supported signature algorithm,JDK-8263188,5043923,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2021-03-08 06:40,2021-03-31 17:44,2023-10-01 09:57,2021-03-28 22:53,16,17,,,,,,,17,security-libs,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,,"signature_algorithms extension is present, but the algorithms are unreconginzed or unsupported, JSSE peers should send fatal alert immediately.
For example, in this case, it's unnecssary to try to produce ServerHello, Certificate and ServerKeyExchange messages.

javax.net.ssl|ERROR|10|main|2021-03-08 22:36:08.645 CST|TransportContext.java:361|Fatal (INTERNAL_ERROR): No supported signature algorithm for RSA  key (
""throwable"" : {
  javax.net.ssl.SSLException: No supported signature algorithm for RSA  key
  	at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:133)
  	at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:117)
  	at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:356)
  	at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:312)
  	at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:303)
  	at java.base/sun.security.ssl.DHServerKeyExchange$DHServerKeyExchangeMessage.<init>(DHServerKeyExchange.java:137)
  	at java.base/sun.security.ssl.DHServerKeyExchange$DHServerKeyExchangeProducer.produce(DHServerKeyExchange.java:481)
  	at java.base/sun.security.ssl.ClientHello$T12ClientHelloConsumer.consume(ClientHello.java:1120)
  	at java.base/sun.security.ssl.ClientHello$ClientHelloConsumer.onClientHello(ClientHello.java:853)
  	at java.base/sun.security.ssl.ClientHello$ClientHelloConsumer.consume(ClientHello.java:812)
  	at java.base/sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:396)
  	at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:480)
  	at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:458)
  	at java.base/sun.security.ssl.TransportContext.dispatch(TransportContext.java:199)
  	at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:172)
  	at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1501)
  	at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1415)
  	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:450)
  	at java.base/sun.security.ssl.SSLSocketImpl.ensureNegotiated(SSLSocketImpl.java:915)
  	at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:1006)
  	at java.base/java.io.InputStream.read(InputStream.java:218)
  	at com.tencent.tls.Utils.readIn(Utils.java:166)
  	at com.tencent.tls.JdkServer.acceptNoEx(JdkServer.java:107)
  	at com.tencent.tls.TlsServer.main(TlsServer.java:74)}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8242141,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rwc3:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-03-08 15:22;jnimeh;While it may be difficult to write regression tests for all the cases here, I believe it should be possible to write them to cover:
* TLS 1.2 and 1.3 client hellos where the server receives signature_algorithms with all unknown/unsupported algorithms, expect to see Alert
* TLS 1.2 and 1.3 client hellos with multiple unknown/unsupported algorithms and exactly one supported algorithm, expect to see the handshake progress beyond the server hello (you may not need to run the whole handshake to verify you're getting past the CH consumer checks).

A possible CR test for 1.2 is tougher, but again it could be accomplished.  A TLS 1.3 CR test is really hard to do given the test tools we have within jtreg right now.

But I think we could do at least partial verification of the fix and remove the noreg-hard label.  Let me know if you want to discuss approaches in detail.;;;","2021-03-08 17:42;jjiang;@jnimeh
I just removed label noreg-hard, and will develop the test cases that you suggested.
I may consult you for the test details.;;;","2021-03-28 22:53;roboduke;Changeset: 99b4bab3
Author:    John Jiang <jjiang@openjdk.org>
Date:      2021-03-29 05:53:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/99b4bab3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
ComboBoxModel documentation refers to a nonexistent type,JDK-8263170,5043526,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,webbuggrp,webbuggrp,2021-03-02 11:28,2021-04-21 06:50,2023-10-01 09:57,2021-03-10 00:31,15,,,,,,,,17,client-libs,,0,dcspn,noreg-doc,webbug,,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Documentation issue only.

A DESCRIPTION OF THE PROBLEM :
The class (interface) javadoc comment for javax.swing.ComboBoxModel uses the sentence ""This interface extends ListDataModel and adds [...]""

There is no such ListDataModel interface.  There are ListDataEvent and ListDataListener types, and in prose we speak of a ""list data model"", but a formal type of that name is not part of Swing.  The actual parent interface is ListModel (no ""Data"").


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1.  Read the ComboBoxModel class documentation.

2.  Become momentarily confused.

3.  Realize it's a minor historical artifact that never got cleaned up.


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263218,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rtw3:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-03-10 00:30;roboduke;Changeset: 3fe8a466
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-03-10 06:39:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3fe8a466
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[macOS] JavaFX windows open as tabs when system preference for documents is set,JDK-8263169,5043867,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,kcr,webbuggrp,webbuggrp,2021-03-07 08:19,2021-07-06 15:27,2023-10-01 09:57,2021-04-06 05:10,jfx15,,,,,,,,jfx17,javafx,,0,additional-information-not-received,dcspn,macos,reproducer-yes,sn_89,sn_90,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
If the MacOS system setting for opening documents as tabs is selected, then all JavaFX windows including Dialogs are openned as tabs

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. MacOS System Preferences -> General -> Open All Documents as Tabs
2. Create a Hello World JavaFX application with a Stage and a button. Clicking that button opens a Dialog. 

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Dialog opens as window
ACTUAL -
it opens as tab

FREQUENCY : always


",,,,,,,,,,JDK-8264870,JDK-8266633,,,,,,,,,,,,,,,,,,,,,,JDK-8243149,,,,JDK-8256465,JDK-8266743,,,,,,,,,,,"2021-03-08 01:50;pnarayanaswa;Capture.PNG;https://bugs.openjdk.org/secure/attachment/93496/Capture.PNG","2021-03-08 01:42;pnarayanaswa;HelloWorld.java;https://bugs.openjdk.org/secure/attachment/93495/HelloWorld.java",,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2rvzn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,Not verified,,"2021-03-08 01:50;pnarayanaswa;Checked with attached testcase in macOS Mojave version 10.14.6, upon changing the system settings, In Dock of System Preferences, setting to Prefer tabs when opening documents to Always
Test Result:
=========
openjfx11:Fail
openjfx15:Fail
openjfx16:Fail

attached screenshot for reference
;;;","2021-03-08 01:52;pnarayanaswa;more discussion here:
https://stackoverflow.com/questions/52713897/javafx-alert-doesnt-open-in-new-window-but-in-a-new-tab
https://github.com/openjfx/openjfx-docs/issues/168;;;","2021-03-18 14:53;kcr;I can confirm that this happens with new top level windows, meaning a Stage or other Window without an owner. Popups, such as those used by Tooltip, ComboBox, etc., still show up as separate windows. Dialogs with the owner set to the stage that created them also are shown as separate windows.
;;;","2021-03-18 15:35;kcr;This is a real problem for certain types of dialogs, such as APPLICATION_MODAL dialogs, regardless of whether the app uses show(), or uses showAndWait() to spin up a nested event loop.

Also, if the dialog is of a different size that the main window, it will resize itself (which is visually jarring), and will not be sized correctly.

Even for ordinary stages, it doesn't seem like the desired behavior. Setting the JavaFX application to disallow opening in tabs is probably the best solution.;;;","2021-03-18 15:37;kcr;WORKAROUND: Applications can set the owner of the dialog prior to the first time they show it as follows:

    dialog.initOwner(stage);;;;","2021-04-06 05:10;roboduke;Changeset: 58988582
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-04-06 12:10:15 +0000
URL:       https://git.openjdk.java.net/jfx/commit/58988582
;;;","2021-05-11 14:11;pnarayanaswa;Mail to submitter:
=============
The issue has been resolved in Java FX 17 [1].
Please share your feedback checking in early-access builds.

[1] https://gluonhq.com/products/javafx/;;;",,,,,,,,,,,,,,,,,,,,,
"IGV: build fails with ""taskdef AutoUpdate cannot be found""",JDK-8263167,5043900,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rcastanedalo,rcastanedalo,rcastanedalo,2021-03-08 00:16,2022-08-16 23:39,2023-10-01 09:57,2021-03-09 02:15,11,17,,,,,,,17,hotspot,,0,diagnostics,hs-comp-triaged,igv,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,"Building IGV fails with the following error message:

---
src/utils/IdealGraphVisualizer$ ant build

Buildfile: src/utils/IdealGraphVisualizer/build.xml

download:
     [echo] Downloading clusters ide|platform
      [get] Getting: http://bits.netbeans.org/dev/nbms-and-javadoc/lastSuccessfulBuild/artifact/nbbuild/netbeans/harness/tasks.jar
      [get] To: /tmp/tasks.jar
      [get] http://bits.netbeans.org/dev/nbms-and-javadoc/lastSuccessfulBuild/artifact/nbbuild/netbeans/harness/tasks.jar moved to https://netbeans.apache.org/about/oracle-transition.html
      [get] .
      [get] last modified = Fri Mar 05 06:41:47 CET 2021

BUILD FAILED
src/utils/IdealGraphVisualizer/build.xml:7: The following error occurred while executing this line:
src/utils/IdealGraphVisualizer/nbproject/build-impl.xml:41: The following error occurred while executing this line:
src/utils/IdealGraphVisualizer/nbproject/platform.xml:28: taskdef class org.netbeans.nbbuild.AutoUpdate cannot be found
 using the classloader AntClassLoader[/tmp/tasks.jar]
---

The failure is due to the recent transition of the NetBeans project to the Apache fundation.

WORKAROUND
Remove the temporary file that has been downloaded (e.g. /tmp/tasks.jar in the above message) and run:

src/utils/IdealGraphVisualizer$ ant -Dbootstrap.url=https://repo1.maven.org/maven2/org/codehaus/mojo/nbm-maven-harness/7.4/nbm-maven-harness-7.4.jar build",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8191868,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rw6z:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-08 00:18;rcastanedalo;ILW = IGV does not build due to broken link, when building IGV manually, workaround exists (see above) = MHL = P3;;;","2021-03-09 02:15;roboduke;Changeset: 3022baa9
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2021-03-09 10:14:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3022baa9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
assert(_base >= VectorA && _base <= VectorZ) failed: Not a Vector while calling StoreVectorNode::memory_size(),JDK-8263164,5043894,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2021-03-07 22:18,2021-09-22 02:08,2023-10-01 09:57,2021-03-16 16:27,17,,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,intermittent,oracle-triage-11,oracle-triage-17,tencent-interest,vectorapi,,,,,,,,,,,,,,,,"Several Vector API tests failed intermittently due to this assert.

```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jvm/jdk/src/hotspot/share/opto/type.hpp:1686), pid=10561, tid=10577
#  assert(_base >= VectorA && _base <= VectorZ) failed: Not a Vector
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc..jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-adhoc..jdk, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x918f44]  StoreVectorNode::memory_size() const+0xb4
#


Current CompileTask:
C2:  38126 6620 %  b        Float64VectorLoadStoreTests::loadStoreByteBuffer @ 67 (170 bytes)

Stack: [0x00007f3dcb4fd000,0x00007f3dcb5fe000],  sp=0x00007f3dcb5f8640,  free space=1005k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x918f44]  StoreVectorNode::memory_size() const+0xb4
V  [libjvm.so+0x128da73]  InitializeNode::can_capture_store(StoreNode*, PhaseGVN*, bool) [clone .part.208]+0x113
V  [libjvm.so+0x1296da6]  StoreNode::Ideal(PhaseGVN*, bool)+0x506
V  [libjvm.so+0x144448a]  PhaseIterGVN::transform_old(Node*)+0xba
V  [libjvm.so+0x143e56d]  PhaseIterGVN::optimize()+0x7d
V  [libjvm.so+0x97c142]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x362
V  [libjvm.so+0x978cae]  Compile::Optimize()+0xc8e
V  [libjvm.so+0x97ab24]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1864
V  [libjvm.so+0x7e186a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x10a
V  [libjvm.so+0x988e46]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xbf6
V  [libjvm.so+0x9899d8]  CompileBroker::compiler_thread_loop()+0x4b8
V  [libjvm.so+0x17cfd2a]  JavaThread::thread_main_inner()+0x2fa
V  [libjvm.so+0x17d0047]  JavaThread::run()+0x2b7
V  [libjvm.so+0x17d4b08]  Thread::call_run()+0xf8
V  [libjvm.so+0x13c34ce]  thread_native_entry(Thread*)+0x10e

```

This can be reproduced by repeatly running the following tests with -ea -esa -Xcomp -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -XX:+DeoptimizeALot. 
```
jdk/incubator/vector/Float64VectorLoadStoreTests.java
jdk/incubator/vector/Int64VectorLoadStoreTests.java
jdk/incubator/vector/Double128VectorLoadStoreTests.java
jdk/incubator/vector/Short64VectorLoadStoreTests.java
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rw5n:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-16 16:27;roboduke;Changeset: 50697965
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-03-16 23:27:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/50697965
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Cleanup code based on review comments,JDK-8263159,5043889,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2021-03-07 22:06,2021-03-07 22:13,2023-10-01 09:57,2021-03-07 22:13,internal,,,,,,,,internal,client-libs,,0,code-review,lanai,,,,,,,,,,,,,,,,,,,,,"This bug handles below cleanup comments in PR https://github.com/openjdk/jdk/pull/2403 :

https://github.com/openjdk/jdk/pull/2403#discussion_r589097446
https://github.com/openjdk/jdk/pull/2403#discussion_r589097753
https://github.com/openjdk/jdk/pull/2403#discussion_r589098894
https://github.com/openjdk/jdk/pull/2403#discussion_r589099394
https://github.com/openjdk/jdk/pull/2403#discussion_r589100546
https://github.com/openjdk/jdk/pull/2403#discussion_r589102263",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i2rw4j:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos]: java.library.path is being set incorrectly,JDK-8263157,5043662,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,almatvee,webbuggrp,webbuggrp,2021-03-03 17:58,2021-07-22 11:35,2023-10-01 09:57,2021-04-13 14:37,15,16,17,,,,,,17,tools,,0,additional-information-received,dcsad,macos,regression,regression_8242302,reproducer-yes,sn_88,sn_90,sn_91,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
macOS Catalina 10.15.7

openjdk version ""15.0.2"" 2021-01-19
OpenJDK Runtime Environment (build 15.0.2+7-27)
OpenJDK 64-Bit Server VM (build 15.0.2+7-27, mixed mode, sharing)

WARNING: Using incubator modules: jdk.incubator.jpackage
15.0.2

A DESCRIPTION OF THE PROBLEM :
Previously on OS X java.library.path would include paths internal to the application. 
some.app/Contents/MacOS and some.app/Contents/app
MacOS could probably be eliminated as 'app' is the jpackage supported way to include user files.
However, these paths no longer appear included and instead external paths are.


REGRESSION : Last worked in version 14

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Start an application with needed dylib's in the input directory to go to the app directory.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The native library will successfully load based on the java.library.path setting.
ACTUAL -
Exception in thread ""main"" java.lang.UnsatisfiedLinkError: no hp in java.library.path: /opt/ooRexx/lib/ooRexx:/Users/mjh/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.
	at java.base/java.lang.ClassLoader.loadLibrary(Unknown Source)
	at java.base/java.lang.Runtime.loadLibrary0(Unknown Source)
	at java.base/java.lang.System.loadLibrary(Unknown Source)
	at us.hall.osx.LogOut.<clinit>(LogOut.java:9)
	at us.hall.hp.common.LoaderLaunchStub.main(LoaderLaunchStub.java:59)

The load fails because java.library.path no longer seems to include the internal 'app' directory.

CUSTOMER SUBMITTED WORKAROUND :
Setting the java.library.path as a startup option like...
-Djava.library.path=$APPDIR

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8242302,JDK-8267598,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2ruq3:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,Verified,,"2021-03-04 20:35;adev;Requested for a simple reproducer from the submitter ;;;","2021-03-07 21:55;adev;Reply  received from the submitter
===============================
public class Test {

	public static void main(String[] args) {
		System.out.println(System.getProperty(""java.library.path""));
	}
}

javac Test.java
 jar -cvf test.jar Test.class
mkdir input
mv test.jar input/test./jar
jpackage --type app-image --input input --main-jar test.jar --main-class Test
Test.app/Contents/MacOS/Test
/opt/ooRexx/lib/ooRexx:/Users/mjh/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.

That was with jdk-15.0.2
Falling back to 14 took a little effort but when done.

/usr/libexec/java_home -v 14 --exec jpackage --type app-image --input input --main-jar test.jar --main-class Test
Test.app/Contents/MacOS/Test
/Users/mjh/Documents/TestApp/Test.app/Contents/app:/Users/mjh/Documents/TestApp/Test.app/Contents/MacOS

Note the paths difference.

;;;","2021-04-09 20:25;almatvee;Regression from JDK-8242302.;;;","2021-04-13 14:37;roboduke;Changeset: 55d56495
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-04-13 21:36:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/55d56495
;;;","2021-05-11 10:04;adev;Requested the submitter to see if the bug is fixed in the latest build at https://jdk.java.net/17/ b21. ;;;","2021-05-11 11:23;adev;Reply from the submitter
=========================
It appears to work correctly at this version.

Override removed from jpackage invocation

	--java-options '-Xmx1024m -XX:+UseG1GC -XX:MaxGCPauseMillis=50 -Djava.security.policy=$APPDIR/all.policy -Dapple.laf.useScreenMenuBar=true -Dcom.apple.mrj.application.apple.menu.about.name=HalfPipe -Dapple.awt.application.name=HalfPipe -Dconsole=pane' \

From the application…

versions
System.in:3:java.version=17-ea
System.in:5:java.version.date=2021-09-14
System.in:14:java.class.version=61.0
System.in:15:java.vm.specification.version=17
System.in:18:java.vm.version=17-ea+21-1866
System.in:21:java.runtime.version=17-ea+21-1866
System.in:24:java.specification.version=17
set java.library.path
java.library.path=/Users/mjh/HalfPipe/HalfPipe_jpkg/outputdir/HalfPipe.app/Contents/app:/Users/mjh/HalfPipe/HalfPipe_jpkg/outputdir/HalfPipe.app/Contents/MacOS:/Users/mjh/wekafiles/native

The app directory is included. Given that jpackage doesn’t use it the MacOS directory could still probably be removed. I’m not seeing how compatibility would be a concern.
But yes, a fix.

;;;",,,,,,,,,,,,,,,,,,,,,,
[macos] DMG builds have finder errors,JDK-8263154,5043665,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,almatvee,webbuggrp,webbuggrp,2021-03-03 18:54,2021-05-24 22:06,2023-10-01 09:57,2021-04-19 11:18,15,,,,,,,,17,tools,,0,additional-information-received,dcsad,macos,reproducer-no,sn_88,sn_90,sn_91,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
macOS Catalina 10.15.7

openjdk version ""15.0.2"" 2021-01-19
OpenJDK Runtime Environment (build 15.0.2+7-27)
OpenJDK 64-Bit Server VM (build 15.0.2+7-27, mixed mode, sharing)

WARNING: Using incubator modules: jdk.incubator.jpackage
15.0.2

A DESCRIPTION OF THE PROBLEM :
An AppleScript is included to put an alias to the Application folder in the DMG which errors. The osascript error ends up an IOException and shows in the build as that. The resulting DMG is missing the Application folder icon and alias. So there is an application icon and a arrow icon indicating 'drag to' but no application folder icon/alias to perform the drag.
This is a nice jpackage touch, making for a typical Mac application appearing install DMG. It would be good to have it working correctly.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
See...
https://bugs.openjdk.java.net/browse/JDK-8226542
https://bugs.openjdk.java.net/browse/JDK-8250615
Pretty much seems to happen on all DMG builds right now.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The osascript runs and creates a Application folder alias and the mounted DMG image shows an Application folder icon to drag the user application icon to. 
ACTUAL -
This error in a verbose jpackage dmg build...

Running [osascript, /var/folders/dh/91wmrk0n6lzfmr4tjhjmcfp40000gn/T/jdk.incubator.jpackage17385828093712223986/config/SundaySudokuSolver-dmg-setup.scpt]
/var/folders/dh/91wmrk0n6lzfmr4tjhjmcfp40000gn/T/jdk.incubator.jpackage17385828093712223986/config/SundaySudokuSolver-dmg-setup.scpt:1108:1330: execution error: Finder got an error: Can’t make class alias file. (-2710)
java.io.IOException: Command [osascript, /var/folders/dh/91wmrk0n6lzfmr4tjhjmcfp40000gn/T/jdk.incubator.jpackage17385828093712223986/config/SundaySudokuSolver-dmg-setup.scpt] exited with 1 code
	at jdk.incubator.jpackage/jdk.incubator.jpackage.internal.Executor.executeExpectSuccess(Executor.java:75)
	at jdk.incubator.jpackage/jdk.incubator.jpackage.internal.IOUtils.exec(IOUtils.java:167)
	at jdk.incubator.jpackage/jdk.incubator.jpackage.internal.IOUtils.exec(IOUtils.java:135)
	at jdk.incubator.jpackage/jdk.incubator.jpackage.internal.MacDmgBundler.buildDMG(MacDmgBundler.java:393)
	at jdk.incubator.jpackage/jdk.incubator.jpackage.internal.MacDmgBundler.bundle(MacDmgBundler.java:91)
	at jdk.incubator.jpackage/jdk.incubator.jpackage.internal.MacDmgBundler.execute(MacDmgBundler.java:535)
	at jdk.incubator.jpackage/jdk.incubator.jpackage.internal.Arguments.generateBundle(Arguments.java:680)
	at jdk.incubator.jpackage/jdk.incubator.jpackage.internal.Arguments.processArguments(Arguments.java:549)
	at jdk.incubator.jpackage/jdk.incubator.jpackage.main.Main.execute(Main.java:98)
	at jdk.incubator.jpackage/jdk.incubator.jpackage.main.Main.main(Main.java:52)

and an icon for the Applications folder is missing in the mounted dmg image.

From an email I sent to core-libs-dev...

It seems it could possibly be the path for the Applications folder. Say if you want something nice to get a name without a forward slash.
Based on DMGSetup.scpt…

tell application ""Finder""
	set DEPLOY_VOLUME_PATH to ""/Volumes/TestImage/""
	set DEPLOY_INSTALL_LOCATION to ""Applications""
	set DEPLOY_INSTALL_NAME to ""Applications""
	make new alias file at POSIX file DEPLOY_VOLUME_PATH to POSIX file DEPLOY_INSTALL_LOCATION with properties {name:DEPLOY_INSTALL_LOCATION}
end tell

tell application ""Finder""
	make new alias file at file ""TestImage:"" to file "":Applications"" with properties {name:""Applications""}
Result:
error ""Finder got an error: Can’t make class alias file."" number -2710 from alias file to class

You get the same error. Note INSTALL_LOCATION is used for both destination and name.

If you make that a correct path with forward slash but have a separate name variable without forward slash for the name.

tell application ""Finder""
	make new alias file at file ""TestImage:"" to file ""Macintosh HD:Applications:"" with properties {name:""Applications""}
end tell
Result:
alias file ""Applications"" of disk ""TestImage"" of application “Finder”

It works. I’m not sure unless something changed why that would suddenly be broke but it does seem to be for DMG’s. 

<end of email>

CUSTOMER SUBMITTED WORKAROUND :
From an email I sent to core-libs-dev...

It seems it could possibly be the path for the Applications folder. Say if you want something nice to get a name without a forward slash.
Based on DMGSetup.scpt…

tell application ""Finder""
	set DEPLOY_VOLUME_PATH to ""/Volumes/TestImage/""
	set DEPLOY_INSTALL_LOCATION to ""Applications""
	set DEPLOY_INSTALL_NAME to ""Applications""
	make new alias file at POSIX file DEPLOY_VOLUME_PATH to POSIX file DEPLOY_INSTALL_LOCATION with properties {name:DEPLOY_INSTALL_LOCATION}
end tell

tell application ""Finder""
	make new alias file at file ""TestImage:"" to file "":Applications"" with properties {name:""Applications""}
Result:
error ""Finder got an error: Can’t make class alias file."" number -2710 from alias file to class

You get the same error. Note INSTALL_LOCATION is used for both destination and name.

If you make that a correct path with forward slash but have a separate name variable without forward slash for the name.

tell application ""Finder""
	make new alias file at file ""TestImage:"" to file ""Macintosh HD:Applications:"" with properties {name:""Applications""}
end tell
Result:
alias file ""Applications"" of disk ""TestImage"" of application “Finder”

It works. I’m not sure unless something changed why that would suddenly be broke but it does seem to be for DMG’s. 

<end of email>

So basically you would need to pass the osascript (AppleScript) both a Applications folder path and a separate name parameter that being ""Application"" and change the one line in the script to something like...
make new alias file at POSIX file DEPLOY_VOLUME_PATH to POSIX file DEPLOY_INSTALL_LOCATION with properties {name:DEPLOY_INSTALL_NAME}
with the new additional parameter of DEPLOY_INSTALL_NAME = ""Applications"" it should work as expected.
I'm not sure how this might be done as a workaround though.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8226542,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2ruqr:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,Not verified,,"2021-03-04 23:33;adev;The issue is related to this:
https://bugs.openjdk.java.net/browse/JDK-8226542
However a simple reproducer is required to reproduce the issue. Requested submitter to provide one.;;;","2021-03-07 21:26;adev;Reply received from the submitter
===========================
I believe this now happens anytime you create an OS X DMG, disk image, installer. It occurs for the following…

${PACKAGER} \
	--verbose \
	--input ../HalfPipe12.app/Contents/Java \
	--icon GenericApp.icns \
	--install-dir outputdir \
	--resource-dir resources \
	--name HalfPipe \
	--main-jar halfpipe.jar \
	--main-class us.hall.hp.common.LoaderLaunchStub \
	--add-modules java.compiler,java.desktop,java.logging,java.management,java.prefs,java.se,java.rmi,java.scripting,java.sql,java.xml,jdk.attach,jdk.jshell,jdk.crypto.ec,jdk.incubator.jpackage \
	--java-options '--add-modules jdk.incubator.jpackage -Xmx1024m -XX:+UseG1GC -XX:MaxGCPauseMillis=50 -Djava.library.path=$APPDIR -Djava.security.policy=$APPDIR/all.policy -Dapple.laf.useScreenMenuBar=true -Dcom.apple.mrj.application.apple.menu.about.name=HalfPipe -Dapple.awt.application.name=HalfPipe -Dconsole=pane' \
	--mac-package-identifier ""org.mik3hall.halfpipe"" \
	--mac-sign \
	--mac-signing-key-user-name ""Michael Hall”
I have had the same result for a couple other applications as well. As indicated in the issue I think this is a bug in the DMGsetup.scpt script used by jpackage for dmg builds. I also indicate a fix.  
It should happen for everyone, all the time when these are done now as near as I can tell.
;;;","2021-03-07 21:26;adev;Additional information received from the submitter
=========================================
Looking at this a little more I believe the problem line in the osascript again is…

  make new alias file at POSIX file ""DEPLOY_VOLUME_PATH"" to POSIX file ""DEPLOY_INSTALL_LOCATION"" with properties {name:""DEPLOY_INSTALL_LOCATION”}

Looking at MacDmgBundler.java line 127

data.put(""DEPLOY_APPLICATION_NAME"", APP_NAME.fetchFrom(params));

I think the problem is that somehow this parameter is not the one being used for the name. So the above script line should be…
 
  make new alias file at POSIX file ""DEPLOY_VOLUME_PATH"" to POSIX file ""DEPLOY_INSTALL_LOCATION"" with properties {name:DEPLOY_APPLICATION_NAME}

This should be the correct fix.;;;","2021-03-09 06:45;herrick;We have seen this (or similar problems in dmg's) on several systems then not been able to reproduce on other systems.
This report may be providing the additional info required to resolve this issus.
;;;","2021-03-09 11:58;herrick;First of all, in order to run osascript with either the default or app supplied setup.scpt, you need to set the 
System preferences/Security and Privacy/Automation to allow ""Finder"" and ""System Events"" to control other apps.
This should probably be mentioned in the doc under DMG section.

I tried variations on the suggestion to make the NAME different from the LOCATION in scpt line that makes alias :
""make new alias at POSIX file ""DEPLOY_VOLUME_PATH"" to POSIX file ""DEPLOY_INSTALL_LOCATION"" with properties {name: ""DEPLOY_INSTSTALL_NAME""]
and that helped get a little further, but we still cannot generally run this scpt without error.
now getting :
""Finder got an error: Can't make class alias file""
Then dmg window shows background tiff (big Arrow) but no destination Icon to drop app on.

This was mainly because, once a dmg for a particular app name (or possibly mac-package-identifier) has it's dmg-setup.scpt run, making changes and then running again may remember at least some of the settings from the original.
To accurately test, we must use a new app-name each time.

With the original code, and permission to allow Finder and System Events to control other apps I can no longer see any problem.
;;;","2021-03-16 12:14;herrick;reverting all code to original now works fine ?

It seems the original problem was only the environmental problem of not allowing System Events and Finder to control other apps in 
System Preferences/Security & Privacy/Automation

Looking into if we can test for this in the script ?;;;","2021-03-22 08:41;herrick;I cannot reproduce the original reported problem where apple script fails with:
...dmg-setup.scpt:1108:1330: execution error: Finder got an error: Can’t make class alias file. (-2710)

If I set automation permission off in security preferences I can get a similar problem with apple script error:
...dmg-setup.scpt:301:343; execution error: Not authorized to send Apple events to Finder. (-1743)
this was red-herring unrelated to the original customers problem.

A failure running this dmg-setup.scpt script is intentionally non-fatal because:
1.) the automated tests may run on headless systems for which this will fail.
2.) the dmg image is still created (just without convenient way to drop image in appropriate install-dir

Basically I cannot reproduce the original problem.

;;;","2021-03-22 08:46;vdyakov;[~almatvee] can you please try to reproduce the issue?;;;","2021-04-13 17:05;almatvee;I was able to reproduce issue. Simplified command line which I used:
jpackage --type dmg -i input -n Test --main-class components.DynamicTreeDemo --main-jar DynamicTreeDemo.jar --verbose --install-dir outputdir
If --install-dir is not specified issue is not reproducible.;;;","2021-04-14 08:19;herrick;Try a fully specified path to outputdir (relative path makes no sense to an installer ?)
I now get the problem (I upgraded to BigSur) if I say just ""--install-dir LocalApplications"", but it works fine if I say ""--install-dir ~/LocalApplications""
;;;","2021-04-14 15:33;almatvee;Yes, issue is only reproducible when relative path or some dummy path is specified. If it is valid path, then it works fine.;;;","2021-04-19 11:18;roboduke;Changeset: 5b43b39e
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-04-19 18:17:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5b43b39e
;;;","2021-05-11 10:09;adev;Requested the submitter to see if the bug is fixed in the latest build at https://jdk.java.net/17/ b21 and provide the feedback.;;;","2021-05-24 22:05;adev;There has been no response from the submitter after 14 days. Closing the bug.;;;",,,,,,,,,,,,,,
Delete unused entry points in libawt/libawt_xawt/libawt_headless,JDK-8263142,5043870,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2021-03-07 14:10,2023-02-14 18:25,2023-10-01 09:57,2021-03-09 13:23,11,17,,,,,,,17,client-libs,,0,google-interest,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,"During the review of:
   8254024: Enhance native libs for AWT and Swing to work with GraalVM Native Image

I have found that some of the entry points in our libraries are never used, and can be removed,  we do not need to update the code to make it work in static_build.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299260,,,,,,JDK-8254024,JDK-4976517,JDK-8264846,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,"0|i2rw0b:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-03-09 13:23;roboduke;Changeset: 86fac952
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-03-09 21:22:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/86fac952
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Japanese chars garble in console window in HSDB,JDK-8263140,5043861,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2021-03-06 23:26,2021-03-15 23:47,2023-10-01 09:57,2021-03-09 15:43,11,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"We can command line debugger via ""Windows"" -> ""Console"" menu on HSDB. If the command shows error message in localized string (e.g. Japanese), it might garble. (see garbled.png on this issue)

Command line debugger and Debugger Console (WinDbg on Windows) will use Courier font on their console, but it does not show Japanese chars. I guess it would happen on CJK chars because monospaced font for Chinese, Japanese, Korean are different from Courier.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-06 23:16;ysuenaga;garbled.png;https://bugs.openjdk.org/secure/attachment/93487/garbled.png",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rvyb:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-03-09 15:43;roboduke;Changeset: d0c1aec2
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2021-03-09 23:43:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d0c1aec2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Initialization of sun.font.SunFontManager.platformFontMap is not thread safe,JDK-8263138,5043857,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2021-03-06 19:30,2021-03-24 19:02,2023-10-01 09:57,2021-03-20 00:45,11,17,,,,,,,17,client-libs,,0,noreg-hard,,,,,,,,,,,,,,,,,,,,,,"The sun.font.SunFontManager.platformFontMap is a static HashMap that is initialized without proper synchronization.
Initially reported here:
https://github.com/openjdk/jdk/pull/2762",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rvxf:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-20 00:45;roboduke;Changeset: ab66d699
Author:    Andrey Turbanov <turbanoff@gmail.com>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2021-03-20 07:45:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ab66d699
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Typos in sun.security.ssl.RenegoInfoExtension,JDK-8263137,5043856,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2021-03-06 19:16,2021-03-10 16:34,2023-10-01 09:57,2021-03-07 14:46,16,17,,,,,,,17,security-libs,,0,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,,,,,,,"Two typos on SCSV ""signgling"", which should be ""signaling"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rvx7:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-03-07 14:46;roboduke;Changeset: 22a3117d
Author:    John Jiang <jjiang@openjdk.org>
Date:      2021-03-07 22:46:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/22a3117d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
C4530 was reported from VS 2019 at access bridge,JDK-8263136,5043855,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2021-03-06 19:09,2021-08-24 05:43,2023-10-01 09:57,2021-03-13 01:42,16,17,,,,,,,17,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok-next,jdk16u-fix-yes,vs2019,,,,,,,,,,,,,,,,,"I saw C4530 with VS 2019 (16.9.0) as following (on Japanese locale):

```
AccessBridgeDebug.cpp
メモ: インクルード ファイル:  d:\github-forked\jdk\src\jdk.accessibility\windows\native\common\AccessBridgeDebug.h

    :

c:\progra~2\micros~2\2019\commun~1\vc\tools\msvc\1428~1.299\include\ostream(611): error C2220: 次の警
告はエラーとして処理されます
c:\progra~2\micros~2\2019\commun~1\vc\tools\msvc\1428~1.299\include\ostream(611): warning C4530: C++
例外処理を使っていますが、アンワインド セマンティクスは有効にはなりません。/EHsc を指定してください。
メモ: インクルード ファイル:    c:\progra~2\micros~2\2019\commun~1\vc\tools\msvc\1428~1.299\include\string
```

`/EHsc` has been already passed in other makefiles, and also AccessBridgeDebug.cpp uses some STL classes (e.g. `chrono` namespace). So `/EHsc` is a solution for this problem.",,,,,,,,,,JDK-8263932,JDK-8271095,JDK-8272864,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2rvwz:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2021-03-07 08:18;prr;translate.google.com says the error in (almost) English is :
c: \ program ~ 2 \ micros ~ 2 \ 2019 \ commun ~ 1 \ vc \ tools \ msvc \ 1428 ~ 1.299 \ include \ ostream (611): warning C4530: C ++
I'm using exception handling, but unwind semantics aren't enabled. Please specify / EHsc.;;;","2021-03-13 01:42;roboduke;Changeset: d339320e
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2021-03-13 09:41:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d339320e
;;;","2021-03-16 04:06;shade;Fix Request (16u)

Seeing a similar failure in GH actions in jdk16u. Patch applies cleanly to 16u.;;;","2021-08-23 09:13;phh;Fix Request (11u).

Clean backport.
;;;",,,,,,,,,,,,,,,,,,,,,,,,
unique_ptr should not be used for types that are not pointers,JDK-8263135,5043853,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2021-03-06 18:57,2021-04-13 12:15,2023-10-01 09:57,2021-03-08 16:58,17,,,,,,,,17,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"I saw error during jpackage compilation with VS 2019 (16.9.0) as following (on Japanese locale):

```
c:\progra~2\micros~2\2019\commun~1\vc\tools\msvc\1428~1.299\include\utility(604): error C2440: '=': '_Other' から '_Ty' に変換できません。
        with
        [
            _Other=nullptr
        ]
        and
        [
            _Ty=unsigned long
        ]
c:\progra~2\micros~2\2019\commun~1\vc\tools\msvc\1428~1.299\include\utility(604): note: ネイティブの nullptr はブールに変換するか、または reinterpret_cast を使用して整数型に変換することのみが可能です
c:\progra~2\micros~2\2019\commun~1\vc\tools\msvc\1428~1.299\include\memory(3423): note: コンパイル対象の関数 テンプレート インスタンス化 '_Ty std::exchange<_Ty2,nullptr>(_Ty &,_Other &&) noexcept(false)' のリファレンスを確認してください
        with
        [
            _Ty=unsigned long,
            _Ty2=unsigned long,
            _Other=nullptr
        ]
c:\progra~2\micros~2\2019\commun~1\vc\tools\msvc\1428~1.299\include\memory(3422): note: クラス テンプ レート メンバー関数 'unsigned long std::unique_ptr<MSIHANDLE,msi::MsiHandleDeleter>::release(void) noexcept' のコンパイル中
d:\github-forked\jdk\src\jdk.jpackage\windows\native\common\MsiDb.cpp(237): note: コンパイル対象の関数 テンプレート インスタンス化 'unsigned long std::unique_ptr<MSIHANDLE,msi::MsiHandleDeleter>::release(void) noexcept' のリファレンスを確認してください
d:\github-forked\jdk\src\jdk.jpackage\windows\native\common\MsiDb.h(119): note: コンパイル対象の クラ ス テンプレート インスタンス化 'std::unique_ptr<MSIHANDLE,msi::MsiHandleDeleter>' のリファレンスを確認してください
```

`UniqueMSIHANDLE` is declared in MsiUtils.h as `unique_ptr` for `MSIHANDLE`. `MSIHANDLE` seems to be declared as synonym for `unsigned long`, not a pointer type.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264551,JDK-8265152,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2rvwj:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-03-08 16:58;roboduke;Changeset: 4e947607
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2021-03-09 00:57:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4e947607
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
During deoptimization vectors should reassign scalarized payload after all objects are reallocated.,JDK-8263125,5043838,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kvn,kvn,kvn,2021-03-05 21:34,2022-01-04 00:26,2023-10-01 09:57,2021-03-12 09:00,16,17,,,,,,,17,hotspot,,0,c2,c2-vector,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,"Currently during deoptimization Vector's `payload` field values are restored during Vector reallocation:
https://github.com/openjdk/jdk/blob/master/src/hotspot/share/prims/vectorSupport.cpp#L155
Bat for scalar-replaced values (objects) this is not correct because that object could be re-allocated after allocation of this vector.

Scalar-replaced `payload` should be restored during regular fields reassignment.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8223347,JDK-8265317,,,,,,,,,,,,,,,,,,,,,,,,,,,,,16,,,,,,,,"0|i2rvt7:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-12 09:00;roboduke;Changeset: a6e056fd
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-03-12 16:59:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a6e056fd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Missed initialization of baselineY in sun.font.StrikeMetrics,JDK-8263124,5043835,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2021-03-05 18:40,2021-05-10 10:35,2023-10-01 09:57,2021-05-04 11:04,15,16,17,,,,,,17,client-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,,"Raised here : https://mail.openjdk.java.net/pipermail/swing-dev/2021-January/011513.html

git diff StrikeMetrics.java
diff --git a/src/java.desktop/share/classes/sun/font/StrikeMetrics.java b/src/java.desktop/share/classes/sun/font/StrikeMetrics.java
index ca561fb99e8..f6c791572d3 100644
--- a/src/java.desktop/share/classes/sun/font/StrikeMetrics.java
+++ b/src/java.desktop/share/classes/sun/font/StrikeMetrics.java
@@ -88,7 +88,7 @@ public final class StrikeMetrics {
     StrikeMetrics() {
         ascentX = ascentY = Integer.MAX_VALUE;
         descentX = descentY = leadingX = leadingY = Integer.MIN_VALUE;
-        baselineX = baselineX = maxAdvanceX = maxAdvanceY = Integer.MIN_VALUE;
+        baselineX = baselineY = maxAdvanceX = maxAdvanceY = Integer.MIN_VALUE;
     }
 
     StrikeMetrics(float ax, float ay, float dx, float dy, float bx, float by,
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rvsj:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-05-03 16:08;prr;This will be zero in any case due to the ultimate source in freetype.c setting it to zero. So just clean up;;;","2021-05-04 11:04;roboduke;Changeset: 9c4efddb
Author:    Phil Race <prr@openjdk.org>
Date:      2021-05-04 18:03:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9c4efddb4aa724d9297947423320f1a7bbe15dd0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Class initialization deadlock in java.lang.constant,JDK-8263108,5043815,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,cwimmer,cwimmer,2021-03-05 13:06,2021-03-24 18:59,2023-10-01 09:57,2021-03-17 18:45,15.0.2,16,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"The various classes in the java.lang.constant package have cyclic dependencies. This can lead to deadlocks when multiple threads initialize classes from these packages concurrently.

The attached reproducer class deadlocks very reliably for me.

The cycle is between ConstantDescs.<clinit> and DynamicConstantDesc.<clinit>",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-05 12:58;cwimmer;Deadlock.java;https://bugs.openjdk.org/secure/attachment/93480/Deadlock.java",,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rvo3:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-03-08 01:03;michaelm;Seems to reproduce with JDK mainline easily;;;","2021-03-09 05:55;jpai;For easy reference, here's the thread dump of one such deadlock reproduced from the attached code:

Threads class SMR info:
_java_thread_list=0x00007ff88ad45ec0, length=14, elements={
0x00007ff88b8dca00, 0x00007ff88b00c200, 0x00007ff88b8de400, 0x00007ff88d02b000,
0x00007ff88d02c800, 0x00007ff88d038200, 0x00007ff88d038800, 0x00007ff88d029000,
0x00007ff88e01a200, 0x00007ff88b8e1a00, 0x00007ff88e01ca00, 0x00007ff88b936a00,
0x00007ff88e01d000, 0x00007ff88b937000
}

""Reference Handler"" #2 daemon prio=10 os_prio=31 cpu=0.11ms elapsed=8.33s tid=0x00007ff88b8dca00 nid=0x3a03 waiting on condition  [0x000070000989f000]
   java.lang.Thread.State: RUNNABLE
	at java.lang.ref.Reference.waitForReferencePendingList(java.base@16-ea/Native Method)
	at java.lang.ref.Reference.processPendingReferences(java.base@16-ea/Reference.java:243)
	at java.lang.ref.Reference$ReferenceHandler.run(java.base@16-ea/Reference.java:215)

""Finalizer"" #3 daemon prio=8 os_prio=31 cpu=0.30ms elapsed=8.33s tid=0x00007ff88b00c200 nid=0x4003 in Object.wait()  [0x00007000099a2000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(java.base@16-ea/Native Method)
	- waiting on <0x000000070fe02ef8> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(java.base@16-ea/ReferenceQueue.java:155)
	- locked <0x000000070fe02ef8> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(java.base@16-ea/ReferenceQueue.java:176)
	at java.lang.ref.Finalizer$FinalizerThread.run(java.base@16-ea/Finalizer.java:171)

""Signal Dispatcher"" #4 daemon prio=9 os_prio=31 cpu=0.32ms elapsed=8.32s tid=0x00007ff88b8de400 nid=0x5903 runnable  [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

""Service Thread"" #5 daemon prio=9 os_prio=31 cpu=0.05ms elapsed=8.32s tid=0x00007ff88d02b000 nid=0xa703 runnable  [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

""Monitor Deflation Thread"" #6 daemon prio=9 os_prio=31 cpu=0.34ms elapsed=8.32s tid=0x00007ff88d02c800 nid=0xa503 runnable  [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

""C2 CompilerThread0"" #7 daemon prio=9 os_prio=31 cpu=5.92ms elapsed=8.32s tid=0x00007ff88d038200 nid=0xa303 waiting on condition  [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE
   No compile task

""C1 CompilerThread0"" #10 daemon prio=9 os_prio=31 cpu=8.20ms elapsed=8.32s tid=0x00007ff88d038800 nid=0x5b03 waiting on condition  [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE
   No compile task

""Sweeper thread"" #11 daemon prio=9 os_prio=31 cpu=0.03ms elapsed=8.32s tid=0x00007ff88d029000 nid=0x5c03 runnable  [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

""Notification Thread"" #12 daemon prio=9 os_prio=31 cpu=0.05ms elapsed=8.32s tid=0x00007ff88e01a200 nid=0x9f03 runnable  [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

""Common-Cleaner"" #13 daemon prio=8 os_prio=31 cpu=0.13ms elapsed=8.31s tid=0x00007ff88b8e1a00 nid=0x9e03 in Object.wait()  [0x000070000a3c3000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
	at java.lang.Object.wait(java.base@16-ea/Native Method)
	- waiting on <0x000000070fe18850> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(java.base@16-ea/ReferenceQueue.java:155)
	- locked <0x000000070fe18850> (a java.lang.ref.ReferenceQueue$Lock)
	at jdk.internal.ref.CleanerImpl.run(java.base@16-ea/CleanerImpl.java:140)
	at java.lang.Thread.run(java.base@16-ea/Thread.java:831)
	at jdk.internal.misc.InnocuousThread.run(java.base@16-ea/InnocuousThread.java:134)

""Thread A"" #14 prio=5 os_prio=31 cpu=101.45ms elapsed=8.30s tid=0x00007ff88e01ca00 nid=0x6003 in Object.wait()  [0x000070000a4c6000]
   java.lang.Thread.State: RUNNABLE
	at java.lang.constant.DynamicConstantDesc.<clinit>(java.base@16-ea/DynamicConstantDesc.java:67)
	- waiting on the Class initialization monitor for java.lang.constant.ConstantDescs
	at Deadlock.threadA(Deadlock.java:14)
	at Deadlock$$Lambda$1/0x0000000800c00a08.run(Unknown Source)
	at java.lang.Thread.run(java.base@16-ea/Thread.java:831)

""Thread B"" #15 prio=5 os_prio=31 cpu=103.15ms elapsed=8.30s tid=0x00007ff88b936a00 nid=0x9b03 in Object.wait()  [0x000070000a5c9000]
   java.lang.Thread.State: RUNNABLE
	at java.lang.constant.ClassDesc.ofDescriptor(java.base@16-ea/ClassDesc.java:145)
	- waiting on the Class initialization monitor for java.lang.constant.DynamicConstantDesc
	at java.lang.constant.ConstantDescs.<clinit>(java.base@16-ea/ConstantDescs.java:239)
	at Deadlock.threadB(Deadlock.java:24)
	at Deadlock$$Lambda$2/0x0000000800c00c28.run(Unknown Source)
	at java.lang.Thread.run(java.base@16-ea/Thread.java:831)

""DestroyJavaVM"" #16 prio=5 os_prio=31 cpu=47.17ms elapsed=8.10s tid=0x00007ff88e01d000 nid=0x2103 waiting on condition  [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

""Attach Listener"" #17 daemon prio=9 os_prio=31 cpu=0.69ms elapsed=0.20s tid=0x00007ff88b937000 nid=0x570b waiting on condition  [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

""VM Thread"" os_prio=31 cpu=1.25ms elapsed=8.33s tid=0x00007ff88ac1d5d0 nid=0x4303 runnable  

""GC Thread#0"" os_prio=31 cpu=0.17ms elapsed=8.34s tid=0x00007ff88ad163b0 nid=0x4f03 runnable  

""G1 Main Marker"" os_prio=31 cpu=0.06ms elapsed=8.34s tid=0x00007ff88ad17340 nid=0x4e03 runnable  

""G1 Conc#0"" os_prio=31 cpu=0.04ms elapsed=8.34s tid=0x00007ff88ad18210 nid=0x4c03 runnable  

""G1 Refine#0"" os_prio=31 cpu=0.05ms elapsed=8.34s tid=0x00007ff88ad34bf0 nid=0x3703 runnable  

""G1 Service"" os_prio=31 cpu=2.02ms elapsed=8.34s tid=0x00007ff88ad35ac0 nid=0x4903 runnable  

""VM Periodic Task Thread"" os_prio=31 cpu=8.02ms elapsed=8.32s tid=0x00007ff88d90a860 nid=0x5e03 waiting on condition  

JNI global refs: 6, weak refs: 0;;;","2021-03-17 18:45;roboduke;Changeset: 9225a230
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2021-03-18 01:45:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9225a230
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
PSPromotionManager::copy_and_push_safe_barrier needs acquire memory barrier,JDK-8263107,5043813,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,kbarrett,kbarrett,kbarrett,2021-03-05 10:51,2021-08-25 07:50,2023-10-01 09:57,2021-06-10 00:29,17,,,,,,,,17,hotspot,,0,gc-parallel,gc-pending-review,noreg-hard,,,,,,,,,,,,,,,,,,,,"In PSPromotionManager::copy_and_push_safe_barrier we have this:

oop new_obj = o->is_forwarded()
? o->forwardee()
: copy_to_survivor_space<promote_immediately>(o);

o->forwardee() should be o->forwardee_acquire().

This is needed for the same reasons as copy_to_survivor_space uses forwardee_acquire in similar places (see discussion of JDK-8154736). The forwardee was created and initialized before being installed and made visible to other threads via a CAS.  But other threads must cooperate by using acquire to get the forwardee.

PSScavengeFromCLDClosure appearls to have the same problem.  Anywhere that tries to avoid a call to copy_to_survivor_space by first checking for forwarding and then getting the forwardee needs to deal with this.  Note that neither of these is a consequence of the weakening of the CAS by JDK-8154736; these places were problematic even with a full barrier CAS.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8154736,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rvnn:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-03-08 00:56;tschatzl;Also look at other uses of forwardee() for issues.;;;","2021-06-10 00:29;roboduke;Changeset: 5a666282
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2021-06-10 07:27:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5a666282a9e5b5748d85f4c012b36e5c8f7eab56
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
security-libs doclint cleanup,JDK-8263105,5043811,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,wetmore,wetmore,wetmore,2021-03-05 10:26,2021-11-15 06:43,2023-10-01 09:57,2021-03-10 16:26,,,,,,,,,17,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"Fix various things pointed out by [~jjg]'s most recent doclint run.  

http://cr.openjdk.java.net/~jjg/doc-reports/jdk-17%2b12/doclint/",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263207,,,,,,,,,,,,JDK-8252833,JDK-4337793,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rvn7:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-03-10 16:26;roboduke;Changeset: 32cbd193
Author:    Bradford Wetmore <wetmore@openjdk.org>
Date:      2021-03-11 00:26:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/32cbd193
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
fix warnings for empty paragraphs,JDK-8263104,5043809,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2021-03-05 10:08,2021-03-10 16:34,2023-10-01 09:57,2021-03-06 07:07,17,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"open/src/java.management/share/classes/javax/management/package.html:391: warning: empty <p> tag
        <p id=""spec"">
        ^
open/src/java.management/share/classes/javax/management/loading/package.html:69: warning: empty <p> tag
    <p id=""spec"">
    ^
open/src/java.management/share/classes/javax/management/monitor/package.html:186: warning: empty <p> tag
    <p id=""spec"">
    ^
open/src/java.base/share/classes/javax/crypto/CryptoAllPermission.java:35: warning: empty <p> tag
 * <p>
   ^
open/src/java.base/share/classes/javax/crypto/CryptoPermission.java:42: warning: empty <p> tag
 * restrictions in certain environments. <p>
                                         ^
5 warnings
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rvmr:",9223372036854775807,b13,,,,,,,,,,,,"2021-03-06 07:07;roboduke;Changeset: 71829850
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-03-06 15:06:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/71829850
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[TEST] ATR  failures due to -nativepath not passed as jtreg cmdline arg,JDK-8263093,5043797,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,isipka,isipka,isipka,2021-03-05 07:05,2023-07-12 04:44,2023-10-01 09:57,2023-07-12 04:44,18,,,,,,,,tbd,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"Following tests failed due to missing nativepath binaries location:

java/nio/channels/spi/SelectorProvider/inheritedChannel/InheritedChannelTest.java
java/nio/channels/FileChannel/directio/DirectIOTest.java
java/net/Socket/SocketReadInterruptTest.java
java/net/Socket/SocketAcceptInterruptTest.java
java/nio/channels/spi/SelectorProvider/inheritedChannel/InheritedChannelTest.java
java/nio/channels/FileChannel/directio/DirectIOTest.java
java/net/Socket/SocketReadInterruptTest.java
java/net/Socket/SocketAcceptInterruptTest.java
java/net/Socket/SocketReadInterruptTest.java
java/net/Socket/SocketAcceptInterruptTest.java
java/nio/channels/spi/SelectorProvider/inheritedChannel/InheritedChannelTest.java
java/nio/channels/FileChannel/directio/DirectIOTest.java
tools/launcher/JliLaunchTest.java
jdk/internal/loader/NativeLibraries/Main.java
java/lang/String/nativeEncoding/StringPlatformChars.java
java/lang/reflect/exeCallerAccessTest/CallerAccessTest.java
java/lang/ClassLoader/nativeLibrary/NativeLibraryTest.java
tools/launcher/JliLaunchTest.java
jdk/internal/loader/NativeLibraries/Main.java
java/lang/String/nativeEncoding/StringPlatformChars.java
java/lang/reflect/exeCallerAccessTest/CallerAccessTest.java
java/lang/ClassLoader/nativeLibrary/NativeLibraryTest.java

Attached command to rerun them with jtreg report and work directories
",Ubuntu 20.10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279880,,,,,,,,,,,,"2021-03-05 07:06;isipka;nativepath-err-rerun.txt;https://bugs.openjdk.org/secure/attachment/93476/nativepath-err-rerun.txt","2021-03-05 07:06;isipka;nativepath.zip;https://bugs.openjdk.org/secure/attachment/93475/nativepath.zip",,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2rvk3:",9223372036854775807,,,,,,,,,,,,,"2021-03-05 07:52;michaelm;When I run these tests on 16u, the only ones that fail are:

tools/launcher/JliLaunchTest.java 
java/lang/reflect/exeCallerAccessTest/CallerAccessTest.java 

and it does seem to be because the generated executables are in the wrong place.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Obsolete relationship in MulticastSocket API documentation. ,JDK-8263080,5043782,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2021-03-05 02:03,2021-06-14 01:46,2023-10-01 09:57,2021-03-23 03:40,17,,,,,,,,17,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,"Now that DatagramSocket has been updated by JDK-8237352 to support joining multicast group, this sentence in the API class level documentation of MulticastSocket is obsolete and should be removed:

""A MulticastSocket is a (UDP) DatagramSocket, with additional capabilities for
 joining ""groups"" of other multicast hosts on the internet.""",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263671,,,,,,,,JDK-8268662,,,,JDK-8237352,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rvgr:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-03-23 03:40;roboduke;Changeset: 9dad857e
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2021-03-23 10:39:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9dad857e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Exclude some failing tests from security/infra/java/security/cert/CertPathValidator,JDK-8263069,5043771,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2021-03-04 23:58,2021-06-03 09:54,2023-10-01 09:57,2021-03-11 02:45,11,16,17,,,,,,17,security-libs,,0,jdk11u-critical-request,jdk11u-critical-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok-next,jdk16u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,,,"The following CertPathValidator tests are failing in an environment that is connected to the internet, due to revoked certificates:
security/infra/java/security/cert/CertPathValidator/certification/BuypassCA.java
security/infra/java/security/cert/CertPathValidator/certification/QuoVadisCA.java
security/infra/java/security/cert/CertPathValidator/certification/ComodoCA.java

We should exclude them until the issues are resolved.",,,,,,,,,,JDK-8263956,JDK-8264494,JDK-8264310,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8248899,JDK-8263059,JDK-8243543,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rveb:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-03-11 02:45;roboduke;Changeset: a9b4f033
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2021-03-11 10:44:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a9b4f033
;;;","2021-03-11 07:57;clanger;Fix request (16u)
These test exclusions also apply to 16 as the same certificates are used there. Risk is low, only exclusion of potentially failing tests.;;;","2021-03-24 01:35;clanger;Fix request (11u)
I'm requesting to add these test exclusions for 11.0.11. The issues are time based (expired certificates) so we're encountering the test failures in the 11.0.11 validation tests. Patch applies cleanly. Risk is low, only test exclusions.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
copy wrong unpack200.diz to bin directory on linux after 8252395,JDK-8263061,5043763,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hshi,hshi,hshi,2021-03-04 22:38,2021-05-04 13:15,2023-10-01 09:57,2021-03-10 03:15,openjdk8u282,,,,,,,,openjdk8u302,infrastructure,,0,build-infra,jdk8u-fix-request,jdk8u-fix-yes,tencent-interest,,,,,,,,,,,,,,,,,,,"With --with-native-debug-symbols=external|zipped after 8u282, debuginfo of unpack binary is copied into bin directory. However, it copies the wrong file. For the *.debuginfo or *.diz files it takes the unpack excutable as source and copies it to the build image as *.diz or *.debuginfo:

$ build/linux-x86_64-normal-server-release/images/j2sdk-image/bin/unpack200.debuginfo -h
Usage:  unpack200.debuginfo [-opt... | --option=value]... x.pack[.gz] y.jar

Unpacking Options
  -H{h}, --deflate-hint={h}     override transmitted deflate hint: true, false, or keep (default)
  -r, --remove-pack-file        remove input file after unpacking
  -v, --verbose                 increase program verbosity
  -q, --quiet                   set verbosity to lowest level
  -l{F}, --log-file={F}         output to the given log file, or '-' for standard output (default)
  -?, -h, --help                print this message
  -V, --version                 print program version
  -J{X}                         Java VM argument (ignored)
$ build/linux-x86_64-normal-server-release/images/j2sdk-image/bin/java.debuginfo -h
bash: build/linux-x86_64-normal-server-release/images/j2sdk-image/bin/java.debuginfo: cannot execute binary file: Exec format error

jdk8u-dev/build/linux-x86_64-normal-server-release/images/j2sdk-image/bin]$ ls -l -rt unpack200*
-rwxr-xr-x 1 shihui shihui 187202 Mar  5 14:37 unpack200.diz
-rwxr-xr-x 1 shihui shihui 187202 Mar  5 14:37 unpack200

jdk8u-dev/build/linux-x86_64-normal-server-release/jdk/bin]$ ls -l -rt unpack200*
-rwxrwxr-x 1 shihui shihui 805924 Mar  5 14:36 unpack200.diz
-rwxrwxr-x 1 shihui shihui 805924 Mar  5 14:36 unpack200

This is not correct debug info and will cause tools/launcher/VersionCheck.java fail with --with-native-debug-symbols=external configure, as it iterate executable in bin directory and invoke -version.

CompileLaunchers.gmk, set same prerequisite for executable and debuginfo file. install-file function will copy first prerequisite, which is executable.

$(JDK_OUTPUTDIR)/bin$(OUTPUT_SUBDIR)/unpack200$(EXE_SUFFIX): $(BUILD_UNPACKEXE)
    $(call install-file)

$(JDK_OUTPUTDIR)/bin$(OUTPUT_SUBDIR)/unpack200$(DEBUGINFO_EXT): $(BUILD_UNPACKEXE)
    $(call install-file)

# makefile (from `CompileLaunchers.gmk', line 510)
BUILD_UNPACKEXE := /home/shihui/jdks/openjdk8/jdk8u-dev/build/linux-x86_64-normal-server-release/jdk/objs/unpackexe/unpack200 /home/shihui/jdks/openjdk8/jdk8u-dev/build/linux-x86_64-normal-server-release/jdk/objs/unpackexe/unpack200.diz

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252395,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,openjdk8u282,,linux,,,,,,"0|i2rvcj:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-03-04 22:47;hshi;This is 8u only problem;;;","2021-03-04 23:15;hshi;Fix is move prerequisite with DEBUGINFO_EXT suffix to first prerequisite

diff -r e4f39f4e0d3a make/CompileLaunchers.gmk
--- a/make/CompileLaunchers.gmk Wed Mar 03 10:55:56 2021 +0100
+++ b/make/CompileLaunchers.gmk Fri Mar 05 15:06:36 2021 +0800
@@ -555,7 +555,10 @@
 $(JDK_OUTPUTDIR)/bin$(OUTPUT_SUBDIR)/unpack200$(EXE_SUFFIX): $(BUILD_UNPACKEXE)
        $(call install-file)
 
-$(JDK_OUTPUTDIR)/bin$(OUTPUT_SUBDIR)/unpack200$(DEBUGINFO_EXT): $(BUILD_UNPACKEXE)
+# move dependency with DEBUGINFO_EXT suffix to first words
+BUILD_UNPACK_DEBUGINFO := $(filter %$(DEBUGINFO_EXT), $(BUILD_UNPACKEXE))
+BUILD_UNPACK_DEBUGINFO += $(filter-out %$(DEBUGINFO_EXT), $(BUILD_UNPACKEXE))
+$(JDK_OUTPUTDIR)/bin$(OUTPUT_SUBDIR)/unpack200$(DEBUGINFO_EXT): $(BUILD_UNPACK_DEBUGINFO)
        $(call install-file)
 
 BUILD_LAUNCHERS += $(JDK_OUTPUTDIR)/bin$(OUTPUT_SUBDIR)/unpack200$(EXE_SUFFIX)

before fix:

/home/shihui/jdks/openjdk8/jdk8u-dev/build/linux-x86_64-normal-server-release/jdk/bin/unpack200.diz: /home/shihui/jdks/openjdk8/jdk8u-dev/build/linux-x86_64-normal-server-release/jdk/objs/unpackexe/unpack200 /home/shihui/jdks/openjdk8/jdk8u-dev/build/linux-x86_64-normal-server-release/jdk/objs/unpackexe/unpack200.diz /home/shihui/jdks/openjdk8/jdk8u-dev/jdk/make/CompileLaunchers.gmk

after fix: diz at first prerequisite
/home/shihui/jdks/openjdk8/jdk8u-dev/build/linux-x86_64-normal-server-release/jdk/bin/unpack200.diz: /home/shihui/jdks/openjdk8/jdk8u-dev/build/linux-x86_64-normal-server-release/jdk/objs/unpackexe/unpack200.diz /home/shihui/jdks/openjdk8/jdk8u-dev/build/linux-x86_64-normal-server-release/jdk/objs/unpackexe/unpack200 /home/shihui/jdks/openjdk8/jdk8u-dev/jdk/make/CompileLaunchers.gmk
;;;","2021-03-04 23:50;hshi;RFR send https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-March/013512.html;;;","2021-03-05 01:36;sgehwolf;[~hshi] With --with-native-debug-symbols=external no *diz* files should be created at all on Linux (only *.debuginfo files - uncompressed). In order to reproduce this shouldn't the bug say configured with '--with-native-debug-symbols=zipped'?;;;","2021-03-05 03:25;hshi;Yes, thanks correcting this. I actaully configured with --with-native-debug-symbols=zipped;;;","2021-03-08 02:31;hshi;RFR is reviewed https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-March/013520.html;;;","2021-03-10 03:15;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/jdk/rev/ab84f55eb881
User:  sgehwolf
Date:  2021-03-10 11:11:16 +0000
;;;","2021-05-04 13:13;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/ab84f55eb881
User:  andrew
Date:  2021-05-04 20:08:37 +0000
;;;",,,,,,,,,,,,,,,,,,,,
security/infra/java/security/cert/CertPathValidator/certification/ComodoCA.java fails due to revoked cert,JDK-8263059,5043762,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rhalade,clanger,clanger,2021-03-04 22:12,2023-04-04 09:20,2023-10-01 09:57,2021-07-30 13:29,11,16,17,,,,,,18,security-libs,,0,cac-issue,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,redhat-interest,testbug,,,,,,,,,,,,"Test security/infra/java/security/cert/CertPathValidator/certification/ComodoCA.java fails since 21/03/02 due to a revoked certificate:

Received exception: java.security.cert.CertPathValidatorException: Certificate has been revoked, reason: UNSPECIFIED, revocation date: Tue Mar 02 11:51:39 CET 2021, authority: CN=COMODO RSA Extended Validation Secure Server CA, O=COMODO CA Limited, L=Salford, ST=Greater Manchester, C=GB, extension OIDs: []",,,,,,,,,,JDK-8277327,JDK-8277217,JDK-8277297,JDK-8305585,,,,,,,,,,,,,,,,,,,,,,,,JDK-8239119,JDK-8263069,,,,,JDK-8231887,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rvcb:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-03-04 22:14;clanger;I'm wondering if we should file an exclusion for the time being?;;;","2021-07-30 13:29;roboduke;Changeset: 4bc9b049
Author:    Rajan Halade <rhalade@openjdk.org>
Date:      2021-07-30 20:29:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4bc9b049846bd59f5c41bd62a59b567b52c9efc5
;;;","2021-11-16 00:54;shade;Fix Request (17u)

Improves CA certificates and tests. Applies cleanly. Tests pass.;;;","2021-11-16 01:04;shade;Fix Request (11u)

Same reason as for 17u.;;;","2023-03-03 10:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/276
Date: 2023-03-03 18:06:57 +0000;;;","2023-03-27 08:07;andrew;Fix Request [8u]

Changes apply cleanly bar the ProblemList.txt removal as JDK-8243543 was never backported, and has been reviewed by Severin Gehwolf. This brings the certificate tests in sync with later JDK versions.
;;;",,,,,,,,,,,,,,,,,,,,,,
[testbug] SharedArchiveConsistency.java reuses jsa files,JDK-8263054,5043756,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,iklam,iklam,2021-03-04 18:16,2021-03-10 16:33,2023-10-01 09:57,2021-03-06 00:56,,,,,,,,,17,hotspot,,0,cds,oracle-triage-17,testbug,,,,,,,,,,,,,,,,,,,,"When running test/hotspot/jtreg/runtime/cds/appcds/SharedArchiveConsistency.java on Windows, sometimes I get this error:

java.io.FileNotFoundException: T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime\\scratch\\5\\appcds-08h46m47s719.jsa (The requested operation cannot be performed on a file with a user-mapped section open)
	at java.base/java.io.FileOutputStream.open0(Native Method)
	at java.base/java.io.FileOutputStream.open(FileOutputStream.java:291)
	at java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:234)
	at java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:184)
	at SharedArchiveConsistency.copyFile(SharedArchiveConsistency.java:294)
	at SharedArchiveConsistency.main(SharedArchiveConsistency.java:462)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263002,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2rvaz:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-04 18:32;iklam;The reason is SharedArchiveConsistency.java runs a child process with a JSA file. Then, it modifies the JSA file, and then tries to reuse this same JSA file to run another child process.

However, on Windows, it seems like after first child process has exited, some sort of file lock is still held on the JSA file, so when we try to modify the JSA file for the second process, we get the ""The requested operation cannot be performed on a file with a user-mapped section open"" error

This seems to have been a long standing bug, but it became more reproducible when I am testing my fix for JDK-8263002. So I'll fix it before pushing JDK-8263002.

The fix is to always create a new JSA file for every new test case, and never modify/reuse the JSA files. (We have been following this rule for other CDS tests).
;;;","2021-03-06 00:56;roboduke;Changeset: 75a5be8a
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2021-03-06 08:55:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/75a5be8a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Modernize the code in the java.awt.color package,JDK-8263051,5043751,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,serb,serb,serb,2021-03-04 15:02,2021-03-15 23:46,2023-10-01 09:57,2021-03-08 22:11,11,17,,,,,,,17,client-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,,"Some methods in this package use odd spacing and formatting, we could align it to the rest code in the package. Also, we can reuse some new language features like switch expression, etc.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rv9v:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-08 22:11;roboduke;Changeset: 5bfc5fd3
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-03-09 06:11:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5bfc5fd3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/jvm/TestDumpOnCrash.java timed out,JDK-8263044,5043740,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,dcubed,dcubed,2021-03-04 10:55,2023-06-21 01:35,2023-10-01 09:57,2022-10-12 04:45,17,20,,,,,,,20,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,tier5,tier6,,,,,,,,,,,,,,,,,,"The following test timed out in the JDK17 CI:

jdk/jfr/jvm/TestDumpOnCrash.java

Here's a snippet from the log file:

#section:main
----------messages:(7/488)----------
command: main --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED jdk.jfr.jvm.TestDumpOnCrash
reason: User specified action: run main/othervm --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED jdk.jfr.jvm.TestDumpOnCrash 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,java.management,jdk.jfr --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
Timeout information:
--- Timeout information end.
elapsed time (seconds): 1234.787
----------configuration:(4/121)----------
Boot Layer
  add modules: java.base java.management jdk.jfr 
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(79/7724)*----------
Test case for crasher jdk.jfr.jvm.TestDumpOnCrash$CrasherIllegalAccess
Command line: [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+12-905\\windows-x64-debug.jdk\\jdk-17\\fastdebug\\bin\\java.exe -cp T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\classes\\1\\jdk\\jfr\\jvm\\TestDumpOnCrash.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+12-905\\src.full\\open\\test\\jdk\\jdk\\jfr\\jvm;T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\classes\\1\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+12-905\\src.full\\open\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\5.1\\b01\\bundles\\jtreg_bin-5.1.zip\\jtreg\\lib\\javatest.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\5.1\\b01\\bundles\\jtreg_bin-5.1.zip\\jtreg\\lib\\jtreg.jar -Xmx512m -XX:MaxRAMPercentage=4 -Djava.io.tmpdir=t:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\tmp -ea -esa -XX:NativeMemoryTracking=detail -Xmx64m -XX:-CreateCoredumpOnCrash --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED -XX:StartFlightRecording=dumponexit=true,disk=true jdk.jfr.jvm.TestDumpOnCrash$CrasherIllegalAccess  ]
[2021-03-03T08:40:00.022982900Z] Gathering output for process 44028
========== Crasher process output:
Started recording 1. No limit specified, using maxsize=250MB as default.

Use jcmd 44028 JFR.dump name=1 filename=FILEPATH to copy recording data to file.
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007ffcc167dafb, pid=44028, tid=20624
#
# JRE version: Java(TM) SE Runtime Environment (17.0+12) (fastdebug build 17-ea+12-LTS-905)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+12-LTS-905, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Problematic frame:
# V  [jvm.dll+0xc8dafb]  Unsafe_PutInt+0x17b
#
# CreateCoredumpOnCrash turned off, no core file dumped
#
# JFR recording file will be written. Location: T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\scratch\\0\\hs_err_pid44028.jfr
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\scratch\\0\\hs_err_pid44028.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

==================================
File size=165681
Found event jdk.NativeMethodSample
Test case for crasher jdk.jfr.jvm.TestDumpOnCrash$CrasherIllegalAccess
Command line: [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+12-905\\windows-x64-debug.jdk\\jdk-17\\fastdebug\\bin\\java.exe -cp T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\classes\\1\\jdk\\jfr\\jvm\\TestDumpOnCrash.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+12-905\\src.full\\open\\test\\jdk\\jdk\\jfr\\jvm;T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\classes\\1\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+12-905\\src.full\\open\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\5.1\\b01\\bundles\\jtreg_bin-5.1.zip\\jtreg\\lib\\javatest.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\5.1\\b01\\bundles\\jtreg_bin-5.1.zip\\jtreg\\lib\\jtreg.jar -Xmx512m -XX:MaxRAMPercentage=4 -Djava.io.tmpdir=t:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\tmp -ea -esa -XX:NativeMemoryTracking=detail -Xmx64m -XX:-CreateCoredumpOnCrash --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED -XX:StartFlightRecording=dumponexit=true,disk=false jdk.jfr.jvm.TestDumpOnCrash$CrasherIllegalAccess  ]
[2021-03-03T08:40:03.983964600Z] Gathering output for process 55592
========== Crasher process output:
Started recording 1.

Use jcmd 55592 JFR.dump name=1 filename=FILEPATH to copy recording data to file.
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007ffcc167dafb, pid=55592, tid=21636
#
# JRE version: Java(TM) SE Runtime Environment (17.0+12) (fastdebug build 17-ea+12-LTS-905)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+12-LTS-905, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Problematic frame:
# V  [jvm.dll+0xc8dafb]  Unsafe_PutInt+0x17b
#
# CreateCoredumpOnCrash turned off, no core file dumped
#
# JFR recording file will be written. Location: T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\scratch\\0\\hs_err_pid55592.jfr
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\scratch\\0\\hs_err_pid55592.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

==================================
File size=165697
Found event jdk.JavaMonitorWait
Test case for crasher jdk.jfr.jvm.TestDumpOnCrash$CrasherHalt
Command line: [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+12-905\\windows-x64-debug.jdk\\jdk-17\\fastdebug\\bin\\java.exe -cp T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\classes\\1\\jdk\\jfr\\jvm\\TestDumpOnCrash.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+12-905\\src.full\\open\\test\\jdk\\jdk\\jfr\\jvm;T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\classes\\1\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+12-905\\src.full\\open\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\5.1\\b01\\bundles\\jtreg_bin-5.1.zip\\jtreg\\lib\\javatest.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\5.1\\b01\\bundles\\jtreg_bin-5.1.zip\\jtreg\\lib\\jtreg.jar -Xmx512m -XX:MaxRAMPercentage=4 -Djava.io.tmpdir=t:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\tmp -ea -esa -XX:NativeMemoryTracking=detail -Xmx64m -XX:-CreateCoredumpOnCrash --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED -XX:StartFlightRecording=dumponexit=true,disk=true jdk.jfr.jvm.TestDumpOnCrash$CrasherHalt  ]
[2021-03-03T08:40:07.122968500Z] Gathering output for process 67224
========== Crasher process output:
Started recording 1. No limit specified, using maxsize=250MB as default.

Use jcmd 67224 JFR.dump name=1 filename=FILEPATH to copy recording data to file.
Running Runtime.getRuntime.halt

==================================
File size=165109
Found event jdk.ThreadStart
Test case for crasher jdk.jfr.jvm.TestDumpOnCrash$CrasherHalt
Command line: [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+12-905\\windows-x64-debug.jdk\\jdk-17\\fastdebug\\bin\\java.exe -cp T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\classes\\1\\jdk\\jfr\\jvm\\TestDumpOnCrash.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+12-905\\src.full\\open\\test\\jdk\\jdk\\jfr\\jvm;T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\classes\\1\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+12-905\\src.full\\open\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\5.1\\b01\\bundles\\jtreg_bin-5.1.zip\\jtreg\\lib\\javatest.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\5.1\\b01\\bundles\\jtreg_bin-5.1.zip\\jtreg\\lib\\jtreg.jar -Xmx512m -XX:MaxRAMPercentage=4 -Djava.io.tmpdir=t:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\tmp -ea -esa -XX:NativeMemoryTracking=detail -Xmx64m -XX:-CreateCoredumpOnCrash --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED -XX:StartFlightRecording=dumponexit=true,disk=false jdk.jfr.jvm.TestDumpOnCrash$CrasherHalt  ]
[2021-03-03T08:40:11.932979500Z] Gathering output for process 4344
========== Crasher process output:
Timeout refired 1200 times
----------System.err:(0/0)----------
----------rerun:(46/5511)*----------

<snip>

result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-17+12-905\windows-x64-debug.jdk\jdk-17\fastdebug\bin\java' timed out (timeout set to 1200000ms, elapsed time including timeout handling was 1234769ms).


The crashes shown in the test log are intentionally induced
as part of the test.

Here's the JVM args for the test task:

-XX:NativeMemoryTracking=detail

It looks like the test limits the Java heap via '-Xmx512m'
and '-Xmx64m' so this should not be a case of the test
taking too long to generate a dump due to a large Java heap.",,,,,,,,,,JDK-8307809,JDK-8310522,JDK-8308066,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,windows,,,,,"0|i2rv7f:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-10-10 05:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10629
Date: 2022-10-10 09:32:45 +0000;;;","2022-10-12 04:45;dukebot;Changeset: 94ec729f
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-10-12 11:42:47 +0000
URL:       https://git.openjdk.org/jdk/commit/94ec729faae7b45fcfe0a94dd42a90e4d08fd1ec
;;;","2023-06-20 07:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1476
Date: 2023-06-20 14:28:38 +0000;;;","2023-06-20 07:59;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.9-oracle. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,
fix for JDK-8262122 fails validate-source,JDK-8263040,5043735,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,dcubed,dcubed,dcubed,2021-03-04 09:57,2021-07-15 10:20,2023-10-01 09:57,2021-03-04 10:08,17,,,,,,,,17,hotspot,,0,tier1,,,,,,,,,,,,,,,,,,,,,,"[2021-03-04T17:14:06,113Z] BAD COPYRIGHT LINE: /opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S14645/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3b57b746-4b3c-4716-85c4-c2d0d0e09970/runs/cb9b40e1-c2b6-45a4-94d0-1dc74dfbaf66/workspace/open/test/hotspot/jtreg/gc/shenandoah/TestReferenceRefersToShenandoah.java
[2021-03-04T17:14:06,113Z] 1 header format error(s).
[2021-03-04T17:14:06,119Z] HandleGplSource.gmk:146: recipe for target '/opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S14645/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3b57b746-4b3c-4716-85c4-c2d0d0e09970/runs/cb9b40e1-c2b6-45a4-94d0-1dc74dfbaf66/workspace/build/validate-source/support/header_validated/_test_hotspot_validated' failed
[2021-03-04T17:14:06,119Z] make[3]: *** [/opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S14645/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3b57b746-4b3c-4716-85c4-c2d0d0e09970/runs/cb9b40e1-c2b6-45a4-94d0-1dc74dfbaf66/workspace/build/validate-source/support/header_validated/_test_hotspot_validated] Error 1
[2021-03-04T17:14:06,119Z] make[3]: *** Waiting for unfinished jobs....
[2021-03-04T17:14:07,460Z] /opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S14645/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3b57b746-4b3c-4716-85c4-c2d0d0e09970/runs/cb9b40e1-c2b6-45a4-94d0-1dc74dfbaf66/workspace/closed/make/Main.gmk:67: recipe for target 'validate-headers' failed
[2021-03-04T17:14:07,460Z] make[2]: *** [validate-headers] Error 2
[2021-03-04T17:14:07,460Z] make[2]: *** Waiting for unfinished jobs....",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262122,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rv6b:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-03-04 10:00;dcubed;Here's the proposed context diff for the fix:

$ git diff
diff --git a/test/hotspot/jtreg/gc/shenandoah/TestReferenceRefersToShenandoah.java b/test/hotspot/jtreg/gc/shenandoah/TestReferenceRefersToShenandoah.java
index 5343b95e6cd..bc6d80e6611 100644
--- a/test/hotspot/jtreg/gc/shenandoah/TestReferenceRefersToShenandoah.java
+++ b/test/hotspot/jtreg/gc/shenandoah/TestReferenceRefersToShenandoah.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it;;;","2021-03-04 10:08;roboduke;Changeset: bd1a8062
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-03-04 18:08:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bd1a8062
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
HttpClient throws Exception if it receives a Push Promise that is too large,JDK-8263031,5043486,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,ccleary,webbuggrp,webbuggrp,2021-03-02 05:20,2022-08-09 09:02,2023-10-01 09:57,2022-04-07 01:44,11,17,,,,,,,19,core-libs,,0,additional-information-received,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Version: openjdk 11.0.9.1 2020-11-04

A DESCRIPTION OF THE PROBLEM :
Whenever HttpClient.send() sends a request to a Webservice that returns a Push Promise that exceeds the size of a single Push Promise Frame (Push Promise Frame + Continuation frames, for example because it adds a lot of headers to the Push Promise) the following Exception is thrown by the HttpClient (even if handling of Push Promises is not enabled): 

java.io.IOException: no statuscode in response
	at java.net.http/jdk.internal.net.http.HttpClientImpl.send(HttpClientImpl.java:565)
	at java.net.http/jdk.internal.net.http.HttpClientFacade.send(HttpClientFacade.java:119)
	at matthias.test.MinimalTest.clientTest(MinimalTest.java:237)
	at matthias.test.MinimalTest.httpClientFailsWhenTooManyHeadersInPushPromise(MinimalTest.java:252)
	at matthias.test.MinimalTest.main(MinimalTest.java:276)
Caused by: java.io.IOException: no statuscode in response
	at java.net.http/jdk.internal.net.http.Stream.lambda$handleResponse$4(Stream.java:442)
	at java.base/java.util.OptionalLong.orElseThrow(OptionalLong.java:271)
	at java.net.http/jdk.internal.net.http.Stream.handleResponse(Stream.java:442)
	at java.net.http/jdk.internal.net.http.Stream.incoming(Stream.java:402)
	at java.net.http/jdk.internal.net.http.Http2Connection.processFrame(Http2Connection.java:785)
	at java.net.http/jdk.internal.net.http.frame.FramesDecoder.decode(FramesDecoder.java:155)
	at java.net.http/jdk.internal.net.http.Http2Connection$FramesController.processReceivedData(Http2Connection.java:232)
	at java.net.http/jdk.internal.net.http.Http2Connection.asyncReceive(Http2Connection.java:649)
	at java.net.http/jdk.internal.net.http.Http2Connection$Http2TubeSubscriber.processQueue(Http2Connection.java:1275)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SynchronizedRestartableTask.run(SequentialScheduler.java:175)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:147)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:198)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:271)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:224)
	at java.net.http/jdk.internal.net.http.Http2Connection$Http2TubeSubscriber.runOrSchedule(Http2Connection.java:1293)
	at java.net.http/jdk.internal.net.http.Http2Connection$Http2TubeSubscriber.onNext(Http2Connection.java:1319)
	at java.net.http/jdk.internal.net.http.Http2Connection$Http2TubeSubscriber.onNext(Http2Connection.java:1253)
	at java.net.http/jdk.internal.net.http.common.SSLTube$DelegateWrapper.onNext(SSLTube.java:202)
	at java.net.http/jdk.internal.net.http.common.SSLTube$SSLSubscriberWrapper.onNext(SSLTube.java:484)
	at java.net.http/jdk.internal.net.http.common.SSLTube$SSLSubscriberWrapper.onNext(SSLTube.java:287)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper$DownstreamPusher.run1(SubscriberWrapper.java:318)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper$DownstreamPusher.run(SubscriberWrapper.java:261)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SynchronizedRestartableTask.run(SequentialScheduler.java:175)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:147)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:198)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:271)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:224)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper.outgoing(SubscriberWrapper.java:234)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper.outgoing(SubscriberWrapper.java:200)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Reader.processData(SSLFlowDelegate.java:403)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Reader$ReaderDownstreamPusher.run(SSLFlowDelegate.java:264)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SynchronizedRestartableTask.run(SequentialScheduler.java:175)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:147)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:198)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Use HttpClient to send a request to a Webservice that returns a large push promise. 

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
A HttpResponse is received.
ACTUAL -
'java.io.IOException: no statuscode in response' is thrown

---------- BEGIN SOURCE ----------
A simple Servlet running on Tomcat9: 

@WebServlet(""/serverpush1"")
public class Http2TestServlet extends HttpServlet {
	@Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        PushBuilder pushBuilder = req.newPushBuilder();
       
        for(int i=0; i<=100; i++) {
        	pushBuilder.addHeader(""x-additionalHeader""+i, ""headervalue""+i);
        }
        
        
        pushBuilder
        		.path(""resources/images/tile-0.png"")
                .push();
        
        try(PrintWriter respWriter = resp.getWriter();){
            respWriter.write(""<html>"" +
                    ""<img src='resources/images/tile-0.png'>"" + 
                    ""</html>"");
        }
    }
}

A simple client that connects to it: 

URI target = URI.create(""https://localhost:9443/serverpush1"");
		HttpRequest httpRequest = HttpRequest.newBuilder().uri(target).build();
		HttpClient httpClient = HttpClient.newBuilder().version(Version.HTTP_2).build();
		try {
			HttpResponse<String> response = httpClient.send(httpRequest, BodyHandlers.ofString());
			System.out.println(response.body());
		} catch(IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch(InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-04 06:05;tongwan;HttpClientTest.java;https://bugs.openjdk.org/secure/attachment/93457/HttpClientTest.java","2021-03-04 06:05;tongwan;ServerPushTestServlet.java;https://bugs.openjdk.org/secure/attachment/93458/ServerPushTestServlet.java","2021-03-04 06:06;tongwan;keystore.jks;https://bugs.openjdk.org/secure/attachment/93459/keystore.jks","2021-03-04 06:06;tongwan;server.xml;https://bugs.openjdk.org/secure/attachment/93461/server.xml","2021-03-04 06:06;tongwan;truststore.jks;https://bugs.openjdk.org/secure/attachment/93460/truststore.jks","2021-03-04 06:07;tongwan;web.xml;https://bugs.openjdk.org/secure/attachment/93462/web.xml",,,,,,,,,,,,,,,,,,,,,"0|i2rtn7:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2021-03-03 00:23;tongwan;Requested more details about the reproducer from the submitter.;;;","2021-03-04 05:57;tongwan;Additional information from the submitter:
I will gladly outline the steps I took to reproduce the issue.

On Serverside:
1.	Set up a Tomcat 9 Application Server and configure it to enable HTTP/2 by defining a Connector in server.xml like so (of course with your own keystore/truststore):
<Connector SSLEnabled=""true"" clientAuth=""want"" keystoreFile=""path/to/keystore "" keystorePass=""keystorepass"" keystoreType=""PKCS12"" maxHttpHeaderSize=""65536"" maxThreads=""5"" port=""9443"" protocol=""HTTP/1.1"" scheme=""https"" secure=""true"" sslProtocol=""TLS"" truststoreFile=""path/to/truststore"" truststorePass=""truststorepass"" truststoreType=""JKS"">
             <UpgradeProtocol className=""org.apache.coyote.http2.Http2Protocol""/>
       </Connector>
2.	Deploy a simple Servlet, that creates a PushPromise with many Headers (see ServerPushTestServlet.java in Attachments)

On Clientside:
1.	Make a Request to the Servlet from above, using HttpClient. (See HttpClientTest.java in Attachments for a minimal working example)
a.	We are running HttpClientTest.java with the following VM-Arguments (Configuring the same truststore as for the Tomcat Server, and disabling hostname verification):
-Djavax.net.ssl.trustStorePassword=truststorepass
-Djavax.net.ssl.trustStore=path/to/trusttstore
-Djavax.net.ssl.trustStoreType=JKS 
-Djdk.internal.httpclient.disableHostnameVerification
;;;","2021-03-04 06:08;tongwan;The observations on Windows 10:
JDK 11: Failed, threw IOException: no statuscode in response.
JDK 17ea+6: Failed.;;;","2022-02-28 03:19;ccleary;The error is caused by no status code being included in the Continuation frame. This throws an IOException when http.Stream.handleResponse() method is called and before a Response object is made. The HTTP2 specification is unclear as to whether or not a status code is required to be included with a continuation frame. A work around to this would be to include whichever status code was sent with the original push promise in the corresponding continuation.

While the specification doesnt highlight the need for a status code header, a push promise and its continuation/s should on a high level be considered a part of the same frame (even if it was transmitted in two or more parts) and so the fix should probably take this into consideration.;;;","2022-02-28 03:52;dfuchs;Actually - what happens here is that the code didn't detect that the PushPromise frame didn't carry the END_HEADERS flag and assumed that the continuation frame is the first HeaderFrame of the response, and thus looks for the response's status that should be carried in the :status header.

So what we need to do is to modify Stream and PushPromiseStream to cooperate in order to handle this case - that is: recognize that the PushPromise frame doesn't carry the END_HEADERS flag and expect a continuation frame (which is the continuation of the request, and not a response header) in that case. ;;;","2022-03-04 06:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7696
Date: 2022-03-04 14:42:40 +0000;;;","2022-04-07 01:44;dukebot;Changeset: 4d2cd26a
Author:    Conor Cleary <ccleary@openjdk.org>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-04-07 08:42:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4d2cd26ab5092ad0a169e4239164a869a4255bd3
;;;",,,,,,,,,,,,,,,,,,,,,
Remove Shenandoah leftovers from ReferenceProcessor,JDK-8263030,5043725,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2021-03-04 05:54,2021-03-22 01:31,2023-10-01 09:57,2021-03-04 09:05,16,17,,,,,,,17,hotspot,,0,gc-shenandoah,jdk16u-fix-request,jdk16u-fix-SQE-ok-next,jdk16u-fix-yes,redhat-interest,,,,,,,,,,,,,,,,,,Shenandoah is no longer using the shared ReferenceProcessor. We can remove remaining Shenandoah leftovers there.,,,,,,,,,,JDK-8263937,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8254315,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rv43:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-03-04 09:05;roboduke;Changeset: ef5e13d2
Author:    Roman Kennke <rkennke@openjdk.org>
Date:      2021-03-04 17:04:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ef5e13d2
;;;","2021-03-15 04:05;shade;Fix Request (16u)

Cleans up the code and strengthens the assert, which is useful for testing. Patch applies cleanly to 16u, passes hotspot_gc_shenandoah.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
libclang binding has to be refreshed after recent jextract update,JDK-8263019,5043714,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-03-04 04:23,2021-03-04 04:50,2023-10-01 09:57,2021-03-04 04:50,repo-panama,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,libclang binding has to be refreshed after recent jextract update,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rv1n:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Read barriers are missing in nmethod printing code ,JDK-8263017,5043712,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,vlivanov,vlivanov,2021-03-04 04:16,2021-09-22 02:03,2023-10-01 09:57,2021-03-12 09:30,17,,,,,,,,17,hotspot,,0,hs-comp-triaged,intermittent,oracle-triage-11,oracle-triage-17,tier3,tier6,zgc,,,,,,,,,,,,,,,,"#  SIGSEGV (0xb) at pc=0x00007f5c5d7b6630, pid=23724, tid=23755

# Problematic frame:
# V  [libjvm.so+0x1503630]  oopDesc::print_value_on(outputStream*) const+0xc0

Current CompileTask:
C2:   3263  398             compiler.vectorapi.TestVectorShiftImm::shift_with_op_and_add (167 bytes)

Stack: [0x00007f5a2c9f6000,0x00007f5a2caf7000],  sp=0x00007f5a2caf5440,  free space=1021k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1503630]  oopDesc::print_value_on(outputStream*) const+0xc0
V  [libjvm.so+0x14b76a6]  nmethod::reloc_string_for(unsigned char*, unsigned char*)+0x626
V  [libjvm.so+0x14b8952]  nmethod::decode2(outputStream*) const+0x642
V  [libjvm.so+0x14b8d35]  nmethod::print_nmethod(bool)+0x3c5
V  [libjvm.so+0xa20d36]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x7e6
V  [libjvm.so+0xa22118]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1844891]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x184cae0]  Thread::call_run()+0x100
V  [libjvm.so+0x1537036]  thread_native_entry(Thread*)+0x116


siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000140",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261142,,,,,,"2021-03-04 04:18;vlivanov;hs_err_pid23724.log;https://bugs.openjdk.org/secure/attachment/93455/hs_err_pid23724.log",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rv17:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-04 04:18;vlivanov;compiler/vectorapi/TestVectorShiftImm.java is a newly introduced test (as part of JDK-8261142).;;;","2021-03-09 06:19;dcubed;Here's a snippet from the log file for the jdk-17+13-978-tier3 sighting:

compiler/vectorapi/TestVectorShiftImm.java 

  0x0000029ceba9b3f8: ;   {oop(a 'java/lang/Class'{0x000008001b2006f0} = 'jdk/incubator/vector/Int128Vector')}
  0x0000029ceba9b3f8: 418b d349 | b8f0 0620 | 1b00 0800 # To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\javaClasses.cpp:1612
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\\workspace\\open\\src\\hotspot\\share\\classfile\\javaClasses.cpp:1612), pid=52656, tid=5264
#  assert(Universe::java_mirror(type) == java_class) failed: must be consistent
#
# JRE version: Java(TM) SE Runtime Environment (17.0+13) (fastdebug build 17-ea+13-LTS-978)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+13-LTS-978, mixed mode, sharing, compressed class ptrs, z gc, windows-amd64)
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs\\scratch\\2\\hs_err_pid52656.mdmp
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs\\scratch\\2\\hs_err_pid52656.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(2/194)----------
Java HotSpot(TM) 64-Bit Server VM warning: printing of assembly code is enabled; turning on DebugNonSafepoints to gain additional output
WARNING: Using incubator modules: jdk.incubator.vector
----------rerun:(46/5603)*----------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000029cdc48a500):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_vm, id=5264, stack(0x000000ae73b00000,0x000000ae73c00000)]


Current CompileTask:
C2:   4862  416             compiler.vectorapi.TestVectorShiftImm::shift_with_op_and_add (163 bytes)

Stack: [0x000000ae73b00000,0x000000ae73c00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xab3431]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xcd2ff7]  VMError::report+0xfc7  (vmError.cpp:738)
V  [jvm.dll+0xcd494e]  VMError::report_and_die+0x7ce  (vmError.cpp:1535)
V  [jvm.dll+0xcd5064]  VMError::report_and_die+0x64  (vmError.cpp:1329)
V  [jvm.dll+0x4bc147]  report_vm_error+0xb7  (debug.cpp:284)
V  [jvm.dll+0x6a816b]  java_lang_Class::primitive_type+0x1ab  (javaClasses.cpp:1612)
V  [jvm.dll+0x679901]  InstanceKlass::oop_print_value_on+0x1e1  (instanceKlass.cpp:3596)
V  [jvm.dll+0xa76032]  nmethod::reloc_string_for+0x272  (nmethod.cpp:3083)
V  [jvm.dll+0xa6e3ea]  nmethod::decode2+0x25a  (nmethod.cpp:2941)
V  [jvm.dll+0xa747a4]  nmethod::print_nmethod+0x134  (nmethod.cpp:961)
V  [jvm.dll+0x48aa64]  CompileBroker::invoke_compiler_on_method+0xd44  (compileBroker.cpp:2370)
V  [jvm.dll+0x487cba]  CompileBroker::compiler_thread_loop+0x2ba  (compileBroker.cpp:1985)
V  [jvm.dll+0xc64aa7]  JavaThread::thread_main_inner+0x1f7  (thread.cpp:1455)
V  [jvm.dll+0xc5b7a4]  Thread::call_run+0x1b4  (thread.cpp:407)
V  [jvm.dll+0xab1d7e]  thread_native_entry+0x10e  (os_windows.cpp:562)
C  [ucrtbase.dll+0x2268a]
C  [KERNEL32.DLL+0x17974]
C  [ntdll.dll+0x5a0b1];;;","2021-03-10 04:35;vlivanov;All the failures observed so far happened with -XX:+UseZGC.;;;","2021-03-12 09:30;roboduke;Changeset: 0b10c6b4
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2021-03-12 17:29:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0b10c6b4
;;;","2021-03-12 12:44;dcubed;The fix for this bug is in jdk-17+14-1032.;;;",,,,,,,,,,,,,,,,,,,,,,,
AARCH64: Add debug info for libsaproc.so,JDK-8263008,5043686,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dongbohe,dongbohe,dongbohe,2021-03-04 01:36,2021-04-22 17:55,2023-10-01 09:57,2021-03-08 04:01,openjdk8u,,,,,,,,openjdk8u292,hotspot,,0,jdk8u-critical-request,jdk8u-critical-yes,,,,,,,,,,,,,,,,,,,,,"x86:
$ ls jre/lib/amd64/libsaproc*
jre/lib/amd64/libsaproc.diz  jre/lib/amd64/libsaproc.so

aarch64:
$ ls jre/lib/aarch64/libsaproc*
jre/lib/aarch64/libsaproc.so

Proposed fix:
diff -r a5795acea814 make/linux/makefiles/defs.make
--- a/make/linux/makefiles/defs.make    Mon Mar 01 20:02:58 2021 +0000
+++ b/make/linux/makefiles/defs.make    Thu Mar 04 18:19:05 2021 +0800
@@ -316,9 +316,11 @@
     ifeq ($(ZIP_DEBUGINFO_FILES),1)
       ADD_SA_BINARIES/x86   += $(EXPORT_JRE_LIB_ARCH_DIR)/libsaproc.diz
       ADD_SA_BINARIES/sparc += $(EXPORT_JRE_LIB_ARCH_DIR)/libsaproc.diz
+      ADD_SA_BINARIES/aarch64 += $(EXPORT_JRE_LIB_ARCH_DIR)/libsaproc.diz
     else
       ADD_SA_BINARIES/x86   += $(EXPORT_JRE_LIB_ARCH_DIR)/libsaproc.debuginfo
       ADD_SA_BINARIES/sparc += $(EXPORT_JRE_LIB_ARCH_DIR)/libsaproc.debuginfo
+      ADD_SA_BINARIES/aarch64 += $(EXPORT_JRE_LIB_ARCH_DIR)/libsaproc.debuginfo
     endif
   endif
 endif
",,,,,,,,,,JDK-8265810,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i2ruvf:",9223372036854775807,b07,,,,,,,,,,,,"2021-03-04 03:01;dongbohe;Fix Request [8u]

https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-March/013509.html;;;","2021-03-05 11:46;andrew;Looks like a longstanding omission from the AArch64 port's 8u HotSpot build (9u and up use a different build system).

With the AArch64 port being introduced in upstream 8u in 8u292, it would be good to fix this in that release. Could you make this a jdk8u-critical-request instead? It would then be committed to https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot instead of 8u-dev.
;;;","2021-03-05 19:02;dongbohe;jdk8u-critical-request has been added;;;","2021-03-08 04:01;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/rev/a04fea0a0dc0
User:  fyang
Date:  2021-03-08 11:57:32 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,
SPARC CodeBuffer overflow in generate_satb_log_enqueue,JDK-8263004,5043681,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,dbuck,shadowbug,shadowbug,2021-03-03 23:58,2021-09-24 00:05,2023-10-01 09:57,2021-03-10 15:55,11.0.10,,,,,,,,11.0.12-oracle,hotspot,,0,11bpr-critical-approved,bugdb_32523767,jdk11u-solaris-sparc-defer,noreg-hard,regression,sustaining,,,,,,,,,,,,,,,,,"The hard-coded size for the CodeBuffer used in generate_satb_log_enqueue is too small; we can overrun the buffer under certain rare conditions. Specifically, we have seen a case where CBCond was not supported (older Fujitsu hardware) and libjvm.so was loaded far enough away from the code cache that PC-relative addressing could not be used. This case resulted in an overrun of 8 bytes (2 instructions).

The fix for JDK-8166317 appears to have been the ""straw that broke the camel's back"". The with_frame version of satb_log_enqueue is a few instructions longer than the frameless version, making this issue a regression in practice.
",,,,,,,,,,JDK-8264600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8166317,JDK-8264376,,,,,,,,,,,,,,,,sparc_64,,,,,,,,,solaris,,,,,,"0|i2ruub:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Not verified,,"2021-03-10 01:05;dbuck;Here is an example taken from a core file where cbcond was disabled (not supported by hardware) and libjvm.so was loaded very far away:

(dbx) dis 0xffffffff68405800, 0xffffffff68405888
0xffffffff68405800:     save     %sp, -176, %sp
0xffffffff68405804:     ldx      [%g2 + 56], %l0
0xffffffff68405808:     cmp      %l0, %g0
0xffffffff6840580c:     be,pn    %xcc,0xffffffff6840582c        ! 0xffffffff6840582c
0xffffffff68405810:     nop
0xffffffff68405814:     ldx      [%g2 + 72], %l1
0xffffffff68405818:     dec      8, %l0
0xffffffff6840581c:     stx      %i0, [%l1 + %l0]
0xffffffff68405820:     stx      %l0, [%g2 + 56]
0xffffffff68405824:     ret
0xffffffff68405828:     restore
0xffffffff6840582c:     mov      %g1, %l0
0xffffffff68405830:     mov      %g3, %l1
0xffffffff68405834:     mov      %g4, %l2
0xffffffff68405838:     mov      %o0, %l3
0xffffffff6840583c:     mov      %o7, %l4
0xffffffff68405840:     mov      %g2, %o0
0xffffffff68405844:     mov      %g2, %l5
0xffffffff68405848:     sethi    %hi(0x7c00), %o7
0xffffffff6840584c:     bset     0x00000000000003ff, %o7        ! 0x7fff
0xffffffff68405850:     sllx     %o7, 12, %o7
0xffffffff68405854:     bset     4017, %o7
0xffffffff68405858:     sllx     %o7, 10, %o7
0xffffffff6840585c:     bset     16, %o7
0xffffffff68405860:     sllx     %o7, 10, %o7
0xffffffff68405864:     call     %o7 + 112
0xffffffff68405868:     nop
0xffffffff6840586c:     mov      %l5, %g2
0xffffffff68405870:     mov      %l0, %g1
0xffffffff68405874:     mov      %l1, %g3
0xffffffff68405878:     mov      %l2, %g4
0xffffffff6840587c:     mov      %l3, %o0
0xffffffff68405880:     ba,pt    %icc,0xffffffff68405804        ! 0xffffffff68405804
0xffffffff68405884:     mov      %l4, %o7
0xffffffff68405888:     illtrap  0x0

Notice the setup needed for the call into handle_zero_index_for_thread (libjvm.so) at 0xffffffff68405864.;;;","2021-03-10 01:16;dbuck;The seemingly obvious fix is to simply double EnqueueCodeSize, making it 256 bytes (and remove the *2 when we create the CodeBuffer in generate_dirty_card_log_enqueue).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Vector API intrinsincs should not modify IR when bailing out,JDK-8262998,5043666,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-03-03 21:02,2021-09-22 02:02,2023-10-01 09:57,2021-03-04 21:58,16,17,,,,,,,17,hotspot,,0,hs-comp-triaged,oracle-triage-11,oracle-triage-17,tencent-interest,vectorapi,,,,,,,,,,,,,,,,,,"* Symptom
```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jvm/jdk/src/hotspot/share/opto/library_call.cpp:137), pid=95497, tid=95511
#  assert(ctrl == kit.control()) failed: Control flow was added although the intrinsic bailed out
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.jvm.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-adhoc.jvm.jdk, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x111f975]  LibraryIntrinsic::generate(JVMState*)+0x315
#

Current CompileTask:
C2:   1094  219    b        jdk.internal.vm.vector.VectorSupport::convert (39 bytes)

Stack: [0x00007f50290f8000,0x00007f50291f9000],  sp=0x00007f50291f3c70,  free space=1007k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x111f975]  LibraryIntrinsic::generate(JVMState*)+0x315
V  [libjvm.so+0x7ea14e]  CallGenerator::do_late_inline_helper()+0xabe
V  [libjvm.so+0x978395]  Compile::inline_incrementally_one()+0x255
V  [libjvm.so+0x978817]  Compile::inline_incrementally(PhaseIterGVN&)+0x197
V  [libjvm.so+0x9791bb]  Compile::Optimize()+0x34b
V  [libjvm.so+0x97b974]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1864
V  [libjvm.so+0x7e23ba]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x10a
V  [libjvm.so+0x989d66]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xbf6
V  [libjvm.so+0x98a8f8]  CompileBroker::compiler_thread_loop()+0x4b8
V  [libjvm.so+0x17d066a]  JavaThread::thread_main_inner()+0x2fa
V  [libjvm.so+0x17d0987]  JavaThread::run()+0x2b7
V  [libjvm.so+0x17d5448]  Thread::call_run()+0xf8
V  [libjvm.so+0x13c45fe]  thread_native_entry(Thread*)+0x10e
```

* Reproducer
Run with -XX:UseAVX=1
```
import jdk.incubator.vector.*;
import java.nio.ByteOrder;

public class Test {
  static final VectorSpecies<Double> SPECIES256 = DoubleVector.SPECIES_256;
  static byte[] a = new byte[512];
  static byte[] r = new byte[512];

  static void test() {
    DoubleVector av = DoubleVector.fromByteArray(SPECIES256, a, 0, ByteOrder.BIG_ENDIAN);
    av.intoByteArray(r, 0, ByteOrder.BIG_ENDIAN);
  }

  public static void main(String[] args) {
    for (int i = 0; i < 10000; i++) {
      test();
    }
    System.out.println(r[0]);
  }
}
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262256,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ruqz:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-04 21:58;roboduke;Changeset: d91550ef
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-03-05 05:57:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d91550ef
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Refactor String.split to help method inlining,JDK-8262994,5043659,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cwimmer,cwimmer,cwimmer,2021-03-03 15:43,2023-02-06 10:40,2023-10-01 09:57,2023-01-30 15:34,,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"The method String.split contains a fast-path when the regular expression parameter is not really a regular expression, but just a single split character.
This fast path vs. slow path check can be constant folded when the regular expression parameter is a literal constant - a quite frequent pattern (for example, all usages of String.split have a constant expression parameter). But method inlining in JIT and AOT compilers can usually not inline String.split because the method body is too large. Factoring out the actual fast-path splitting logic into a separate method solves this problem: the JIT or AOT compiler can inline String.split, constant-fold the fast/slow path check, and then only the invoke of either the fast path or the slow path remains.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rupf:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-12-27 12:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11791
Date: 2022-12-27 20:12:51 +0000;;;","2023-01-30 15:34;dukebot;Changeset: 622b6594
Author:    Christian Wimmer <cwimmer@openjdk.org>
Committer: Peter Levart <plevart@openjdk.org>
Date:      2023-01-30 23:33:11 +0000
URL:       https://git.openjdk.org/jdk/commit/622b6594d1435e8773ec16d00d48e1f582065bd8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Fail fast in UnixFileStore.isExtendedAttributesEnabled,JDK-8262957,5043613,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sstenzel,alanb,alanb,2021-03-03 08:50,2021-09-30 04:10,2023-10-01 09:57,2021-04-14 02:56,,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"Created on behalf of Sebastian Stenzel to address the first issue in this mail:

https://mail.openjdk.java.net/pipermail/nio-dev/2021-March/008335.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274562,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ruff:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-04-14 02:56;roboduke;Changeset: 27dd88bf
Author:    Sebastian Stenzel <sebastian.stenzel@skymatic.de>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2021-04-14 09:55:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/27dd88bf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Unify os::fork_and_exec() across Posix platforms,JDK-8262955,5043610,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2021-03-03 08:06,2021-03-15 23:46,2023-10-01 09:57,2021-03-08 22:01,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"os::fork_and_exec() can be used from within the hotspot to start a child process.

The variants for AIX, Linux, Bsd are almost completely identical. So, this function can be unified under posix. In addition, some small issues can be fixed.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ruer:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-08 22:01;roboduke;Changeset: 5b9b170d
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-03-09 06:00:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5b9b170d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos_aarch64] os::commit_memory failure,JDK-8262952,5043605,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gziemski,gziemski,gziemski,2021-03-03 07:15,2021-05-24 16:41,2023-10-01 09:57,2021-05-18 07:45,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"Testing https://github.com/openjdk/jdk/pull/2200 reveals this failure in gtest/GTestWrapper.java: 

open/test/hotspot/gtest/runtime/test_os.cpp:376: Failure
Value of: os::commit_memory((char*)q, stripe_len, executable)
  Actual: false
Expected: true
open/test/hotspot/gtest/runtime/test_os.cpp:376: Failure
Value of: os::commit_memory((char*)q, stripe_len, executable)
  Actual: false
Expected: true

----------System.err:(12/801)----------
java.lang.AssertionError: gtest execution failed; exit code = 2. the failed tests: [os::release_multi_mappings_vm, os::release_multi_mappings_vm]
	at GTestWrapper.main(GTestWrapper.java:97)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:831)


[2021-02-28T17:15:34,593Z] [ RUN      ] os.release_multi_mappings_vm
[2021-02-28T17:15:34,593Z] open/test/hotspot/gtest/runtime/test_os.cpp:376: Failure
[2021-02-28T17:15:34,593Z] Value of: os::commit_memory((char*)q, stripe_len, executable)
[2021-02-28T17:15:34,593Z]   Actual: false
[2021-02-28T17:15:34,593Z] Expected: true
[2021-02-28T17:15:34,593Z] open/test/hotspot/gtest/runtime/test_os.cpp:376: Failure
[2021-02-28T17:15:34,593Z] Value of: os::commit_memory((char*)q, stripe_len, executable)
[2021-02-28T17:15:34,593Z]   Actual: false
[2021-02-28T17:15:34,593Z] Expected: true
[2021-02-28T17:15:34,593Z] A
[2021-02-28T17:15:34,593Z] B
[2021-02-28T17:15:34,593Z] C
[2021-02-28T17:15:34,593Z] [  FAILED  ] os.release_multi_mappings_vm (0 ms)
[2021-02-28T17:15:34,593Z] [ RUN      ] os.release_one_mapping_multi_commits_vm
[2021-02-28T17:15:34,593Z] A
[2021-02-28T17:15:34,593Z] B
[2021-02-28T17:15:34,593Z] C
[2021-02-28T17:15:34,593Z] D
[2021-02-28T17:15:34,593Z] [       OK ] os.release_one_mapping_multi_commits_vm (0 ms)
[2021-02-28T17:15:34,593Z] [ RUN      ] os.show_mappings_small_range_vm
[2021-02-28T17:15:34,593Z] [       OK ] os.show_mappings_small_range_vm (1 ms)
[2021-02-28T17:15:34,593Z] [ RUN      ] os.show_mappings_full_range_vm
[2021-02-28T17:15:34,593Z] [       OK ] os.show_mappings_full_range_vm (0 ms)
[2021-02-28T17:15:34,593Z] [ RUN      ] os.os_pagesizes_vm
[2021-02-28T17:15:34,593Z] 16k",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257041,JDK-8267341,,,,,JDK-8234930,JDK-8266564,JDK-8266566,JDK-8267339,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i2rudn:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-18 07:45;roboduke;Changeset: fadf5804
Author:    Gerard Ziemski <gziemski@openjdk.org>
Date:      2021-05-18 14:44:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fadf58043c10e4fd98dfdb35256f5efc6d3cd366
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Restructure compiler/intrinsics/TestRotate.java for easier compilation,JDK-8262950,5043601,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-03-03 06:39,2021-07-15 03:03,2023-10-01 09:57,2021-03-03 23:42,17,,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-17,testbug,,,,,,,,,,,,,,,,,,,"It seems that after JDK-8256438 this test is very slow. See JDK-8262465 for more evidence of this. 
I believe the underlying cause is that main() is way too busy with test cases, so this eventually happens:

$ javac test/hotspot/jtreg/compiler/intrinsics/TestRotate.java
$ java -XX:-TieredCompilation -XX:CompileThreshold=1000 -Xbatch -XX:+PrintCompilation -cp test/hotspot/jtreg compiler.intrinsics.TestRotate
 ...
   6112  112 % !b        compiler.intrinsics.TestRotate::main @ 1494 (3008 bytes)   COMPILE SKIPPED: out of nodes during split (retry at different tier)

So, while the test is intended to test rotate intrinsics, I think it never gets there because compilation bails. And this also makes the test slow. This is tier1 test, and so its performance is somewhat important for developer experience.

This improvement restructures the test to be easier to JIT compile. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262465,JDK-8256438,JDK-8252776,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rucr:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-03 23:42;roboduke;Changeset: 7915a1fc
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-03-04 07:41:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7915a1fc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Regression Manual Test for Key Events Fails,JDK-8262945,5043596,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,achung,mbollapragad,mbollapragad,2021-03-03 05:47,2023-09-05 07:43,2023-10-01 09:57,2021-11-01 15:30,11.0.10-oracle,15,16,17,8,,,,18,client-libs,,0,imt,macos,sn_101,sn_102,sn_103,sn_105,sqebug,sqe-manual,,,,,,,,,,,,,,,"Testsuite Name : Regression manual
Test Name(s)   : java/awt/event/KeyEvent/AcceleratorTest/AcceleratorTest.html

Product Tested : JDK11.0.11+5
Platform Tested : MAC OSX 10.14
Is it regression : No
Reproducible: Always

JDK11.0.11+4 on MAC OSX 10.14 : Failed
JDK11.0.10+8 (GAC) on MAC OSX 10.14 : Failed
JDK17+9 on MAC OSX 10.14 : Failed
JDK8u291b05 on MAC OSX 10.14.3 : Failed 

Is it Platform specific : No , Passed on Windows10 with JDK11.0.11+5  

Exception/Error from Log: N/A

Steps to reproduce: Run the Test , As per instructions 
"" Ensure you have Russian keyboard layout as a currently active."",
            ""(1) Press Ctrl+\u0411 (a key with "",<"" on it) "",
            ""(2) Find a . (period) in this layout (perhaps ""/?"" or ""7&"" key)."",
            ""Press Ctrl+."",
            ""(3) Press Crtl+ regular English . (period) key (on "".>"" )"",
            ""(4) Press Ctrl+ key with English N."",
            ""(5) Press Alt+\u042E (key with "".>"")"",
            ""(6) Press Alt+\u0436 (key with "";:"")"",
            ""If all expected commands will be fired, look for message"",
            ""\""All tests passed\""""

Actual behavior: User pressed these keys on the key board but all expected commands are not fired ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315701,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2rubn:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-09-20 15:09;achung;Seems like the bug is caused by Java expecting a different keycode for characters in different languages, but macos ignoring active keyboard layout for keycodes.

For example, 'б' keycode=16778289, but when pressed, a keyEvent with keycode=44 is generated. The equivalent key in English layout is ',' which has keycode=44, and when pressed also generates a keyEvent with keycode=44.;;;","2021-11-01 15:30;roboduke;Changeset: 47e7a425
Author:    Alisen Chung <alisen.chung@oracle.com>
Committer: Alexander Zuev <kizune@openjdk.org>
Date:      2021-11-01 22:29:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/47e7a42594f1c36f71cdf4d383080bf8d616b7e7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Add missing logging to sun.net.httpserver.ServerImpl,JDK-8262935,5043585,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jboes,jboes,jboes,2021-03-03 02:30,2021-03-10 16:32,2023-10-01 09:57,2021-03-04 04:04,,,,,,,,,17,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,,Small fix to add logging to catch blocks where it was previously missing.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ru97:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-03-04 04:04;roboduke;Changeset: b8178553
Author:    Julia Boes <jboes@openjdk.org>
Date:      2021-03-04 12:04:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b8178553
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Commit commandbuffer and gracefully override MTLContext,JDK-8262928,5043579,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2021-03-02 23:36,2021-03-03 02:29,2023-10-01 09:57,2021-03-03 02:26,internal,,,,,,,,internal,client-libs,,0,code-review,common,lanai,sn_88,,,,,,,,,,,,,,,,,,,"As part of followup for JDK-8262750 i went through all the places in OpenGL pipeline where we use glFlush() to gracefully override OGLContext/just flush the GPU queue. We have these graceful overrides/flush in SET_SCRATCH_SURFACE, MASKFILL, DRAWPOLY, DRAWGLYPHLIST, SET_SURFACES and in OGLRenderQueue.

We need to replicate same thing in Metal to maintain appropriate state. I am not seeing any active bug related to this, it is just adding tighter checks in logic.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262750,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i2ru7v:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-02 23:51;jdv;Apart from SET_SURFACES we have graceful exit/flush at all other places in Metal.
So i added code to commit commandbuffer in SET_SURFACES before we override MTLContext and tested sanity with J2DDemo, SwingSet2 and Fon2DTest. ;;;","2021-03-02 23:55;jdv;RenderPerfTest numbers:

Before change :
FlatOval : 41.79 FPS
FlatOvalAA : 10.04 FPS
ClipFlatOval : 11.35 FPS
ClipFlatOvalAA : 11.18 FPS
FlatBox : 87.28 FPS
FlatBoxAA : 61.23 FPS
ClipFlatBox : 95.87 FPS
ClipFlatBoxAA : 93.62 FPS
Image : 84.91 FPS
ImageAA : 85.14 FPS
RotatedBox : 83.58 FPS
RotatedBoxAA : 53.84 FPS
RotatedOval : 45.21 FPS
RotatedOvalAA : 12.25 FPS
LinGrad3RotatedOval : 34.88 FPS
LinGrad3RotatedOvalAA : 10.68 FPS
RadGrad3RotatedOval : 31.45 FPS
RadGrad3RotatedOvalAA : 8.88 FPS
LinGradRotatedOval : 41.53 FPS
LinGradRotatedOvalAA : 12.16 FPS
WiredBubbles : 28.06 FPS
WiredBubblesAA : 8.88 FPS
WiredBox : 91.55 FPS
Lines : 93.33 FPS
LinesAA : 86.13 FPS
FlatQuad : 34.83 FPS
FlatQuadAA : 6.48 FPS
WiredQuad : 31.80 FPS
WiredQuadAA : 8.51 FPS
TextNoAA : 35.37 FPS
TextLCD : 35.44 FPS
TextGray : 35.24 FPS
LargeTextNoAA : 1.36 FPS
LargeTextLCD : 1.37 FPS
LargeTextGray : 1.36 FPS
WhiteTextNoAA : 42.60 FPS
WhiteTextLCD : 42.28 FPS
WhiteTextGray : 42.16 FPS
ArgbSwBlitImage : 5.27 FPS
BgrSwBlitImage : 4.30 FPS
ArgbSurfaceBlitImageRenderer : 94.16 FPS
BgrSurfaceBlitImage : 93.08 FPS

After change :
FlatOval : 41.79 FPS
FlatOvalAA : 9.43 FPS
ClipFlatOval : 11.14 FPS
ClipFlatOvalAA : 11.49 FPS
FlatBox : 86.00 FPS
FlatBoxAA : 60.61 FPS
ClipFlatBox : 93.55 FPS
ClipFlatBoxAA : 96.01 FPS
Image : 83.65 FPS
ImageAA : 84.00 FPS
RotatedBox : 82.68 FPS
RotatedBoxAA : 52.12 FPS
RotatedOval : 43.33 FPS
RotatedOvalAA : 11.62 FPS
LinGrad3RotatedOval : 34.90 FPS
LinGrad3RotatedOvalAA : 10.82 FPS
RadGrad3RotatedOval : 31.08 FPS
RadGrad3RotatedOvalAA : 10.41 FPS
LinGradRotatedOval : 42.50 FPS
LinGradRotatedOvalAA : 12.66 FPS
WiredBubbles : 27.55 FPS
WiredBubblesAA : 9.20 FPS
WiredBox : 88.35 FPS
Lines : 90.67 FPS
LinesAA : 84.64 FPS
FlatQuad : 33.10 FPS
FlatQuadAA : 6.20 FPS
WiredQuad : 30.15 FPS
WiredQuadAA : 8.86 FPS
TextNoAA : 35.53 FPS
TextLCD : 35.05 FPS
TextGray : 35.64 FPS
LargeTextNoAA : 1.35 FPS
LargeTextLCD : 1.36 FPS
LargeTextGray : 1.37 FPS
WhiteTextNoAA : 42.69 FPS
WhiteTextLCD : 43.04 FPS
WhiteTextGray : 44.09 FPS
ArgbSwBlitImage : 5.75 FPS
BgrSwBlitImage : 4.66 FPS
ArgbSurfaceBlitImageRenderer : 93.48 FPS
BgrSurfaceBlitImage : 93.57 FPS;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8260966 broke AIX build,JDK-8262926,5043576,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,clanger,stuefe,stuefe,2021-03-02 22:49,2021-03-10 16:31,2023-10-01 09:57,2021-03-03 04:19,17,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"Hi,

JDK-8260966 broke the AIX build:

' ' ' 
jdk/src/java.base/aix/classes/sun/nio/fs/AixFileStore.java:93: error: isExtendedAttributesEnabled(UnixPath) in AixFileStore cannot override isExtendedAttributesEnabled(UnixPath) in UnixFileStore
private boolean isExtendedAttributesEnabled(UnixPath path) {
^
attempting to assign weaker access privileges; was protected
' ' ' ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260966,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ru77:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-03-03 04:19;roboduke;Changeset: bf90e857
Author:    Sebastian Stenzel <sebastian.stenzel@skymatic.de>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2021-03-03 12:19:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bf90e857
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
java.awt.color.ColorSpace.getName() is not thread-safe,JDK-8262915,5043563,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2021-03-02 19:44,2021-03-10 16:31,2023-10-01 09:57,2021-03-03 12:27,11,17,,,,,,,17,client-libs,,0,noreg-hard,,,,,,,,,,,,,,,,,,,,,,The method does not use any kind of synchronization to properly initialize and use the static cache for the color components names.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2ru4b:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-03 12:27;roboduke;Changeset: b397472e
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-03-03 20:27:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b397472e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
ciReplay: replay does not simulate unresolved classes,JDK-8262912,5043559,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,dlong,dlong,2021-03-02 19:26,2021-11-09 16:18,2023-10-01 09:57,2021-10-15 00:40,17,18,,,,,,,18,hotspot,,0,ci-replay,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,,"If a class was unresolved in the replay file, but resolved at replay time, replay simply outputs the warning:
""Warning: entry was unresolved in the replay data""

Instead, it should simulate the class still being unresolved.",,,,,,,,,,,,,,,,,,,,,,,JDK-8254110,JDK-8254106,,,,,,,,,,,,,JDK-8276902,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ru3f:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-09 14:14;dlong;This may be hard to reproduce currently, since replay happens before most classes are loaded, but it should be needed in order to implement JDK-8254110.;;;","2021-10-15 00:40;roboduke;Changeset: 4cb7124c
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-10-15 07:38:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4cb7124c1e9c5fd1d3a82fd8933cc63fefde9531
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[macos_aarch64] Thread::current() called on detached thread,JDK-8262903,5043547,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,akozlov,gziemski,gziemski,2021-03-02 14:55,2022-09-21 20:44,2023-10-01 09:57,2021-03-25 11:12,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"Testing https://github.com/openjdk/jdk/pull/2200 reveals this crash in runtime/signal/TestSigsegv.java, runtime/signal/TestSigill.java, runtime/signal/TestSigfpe.java, runtime/signal/TestSigbus.java:

 stdout: [SIGSEGV: start testing: signal_num=11,  mode=sigset, scenario=prepost
SIGSEGV: signal handler using function 'sigset' has been set
initVM: numOptions = 1
	vm_args.options[0].optionString = -XX:MaxRAMPercentage=6
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/thread.hpp:835
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/28992c6d-c35d-42fa-8099-898223bf183b-S10503/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/cf98c971-6e53-4a95-8508-c73a6e6600ff/runs/d61d15dc-f02e-4443-939e-406ee4965726/workspace/open/src/hotspot/share/runtime/thread.hpp:835), pid=3917, tid=771
#  assert(current != __null) failed: Thread::current() called on detached thread
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-internal+0-LTS-2021-02-27-1954067.mikael.vidstedt.jdk-macosjib)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-internal+0-LTS-2021-02-27-1954067.mikael.vidstedt.jdk-macosjib, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Core dump will be written. Default location: core.3917

",,,,,,,,,,JDK-8281691,JDK-8281839,JDK-8294169,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i2ru0r:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-02 15:22;dholmes;bool PosixSignals::pd_hotspot_signal_handler(int sig, siginfo_t* info,
                                             ucontext_t* uc, JavaThread* thread) {
  // Enable WXWrite: this function is called by the signal handler at arbitrary
  // point of execution.
  ThreadWXEnable wx(WXWrite, thread);

""thread"" will be NULL when the current thread is not attached. If we then perform:

`ThreadWXEnable(WXMode new_mode, Thread* thread = NULL) :
    _thread(thread ? thread : Thread::current()),`

we call Thread::current() on a non-attached thread and that will assert/crash if we get NULL. Either avoid using WX when the thread is NULL, or else change to use Thread::current_or_null_safe() and ensure all uses have a NULL check.

I added a comment to the PR.;;;","2021-03-09 22:31;dholmes;This will be be fixed as part of the macOS-Aarch64 port, so assigning to Anton.;;;","2021-03-11 12:40;akozlov;Will be resolved as a part of JDK-8253795 https://github.com/openjdk/jdk/pull/2200/commits/f6fb01b24f525e578692a1c6f2ff0a55b8233576;;;","2021-03-25 11:12;roboduke;Changeset: dbc9e4b5
Author:    Anton Kozlov <akozlov@openjdk.org>
Committer: Vladimir Kempik <vkempik@openjdk.org>
Date:      2021-03-25 18:10:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dbc9e4b5
;;;","2021-12-18 00:44;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk11u-dev/pull/715
Date: 2021-12-13 20:11:31 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,
[macos_aarch64] NativeCallTest expected:<-3.8194101E18> but was:<3.02668882E10>,JDK-8262901,5043545,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,omikhaltcova,gziemski,gziemski,2021-03-02 14:51,2022-12-14 01:19,2023-10-01 09:57,2022-11-10 13:08,17,18,,,,,,,20,hotspot,,0,hs-comp-triaged,jvmci,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,,"Testing https://github.com/openjdk/jdk/pull/2200 reveals in compiler/jvmci/jdk.vm.ci.code.test/src/jdk/vm/ci/code/test/NativeCallTest.java: 

java.lang.AssertionError: expected:<-3.8194101E18> but was:<3.02668882E10>
	at org.junit.Assert.fail(Assert.java:93)
	at org.junit.Assert.failNotEquals(Assert.java:647)
	at org.junit.Assert.assertEquals(Assert.java:128)
	at org.junit.Assert.assertEquals(Assert.java:147)
	at jdk.vm.ci.code.test.CodeInstallationTest.test(CodeInstallationTest.java:112)
	at jdk.vm.ci.code.test.NativeCallTest.test(NativeCallTest.java:130)
	at jdk.vm.ci.code.test.NativeCallTest.testI32SDILDS(NativeCallTest.java:125)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:24)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:136)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:127)
	at org.junit.runner.JUnitCore.runClasses(JUnitCore.java:76)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:76)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:43)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
JavaTest Message: JUnit Failure: testI32SDILDS(jdk.vm.ci.code.test.NativeCallTest): expected:<-3.8194101E18> but was:<3.02668882E10>",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296821,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i2ru0b:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-23 17:35;gziemski;The ""corresponding"" C code for the test case below:

#include <stdio.h>
#include <stdlib.h>
#include <errno.h>

#define JNICALL
#define jfloat float
#define jdouble double
#define jlong long
#define jint int

jfloat JNICALL I32SDILDS(jint i00, jint i01, jint i02, jint i03, jint i04, jint i05, jint i06, jint i07,
                         jint i08, jint i09, jint i0a, jint i0b, jint i0c, jint i0d, jint i0e, jint i0f,
                         jint i10, jint i11, jint i12, jint i13, jint i14, jint i15, jint i16, jint i17,
                         jint i18, jint i19, jint i1a, jint i1b, jint i1c, jint i1d, jint i1e, jint i1f,
                         jfloat a, jdouble b, jint c, jlong d, jdouble e, jfloat f) {
  return (jfloat)(i00 + i01 + i02 + i03 + i04 + i05 + i06 + i07 +
                  i08 + i09 + i0a + i0b + i0c + i0d + i0e + i0f +
                  i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 +
                  i18 + i19 + i1a + i1b + i1c + i1d + i1e + i1f +
                  a +   b +   c +   d +   e + f);
}

int main(int argc, const char * argv[])
{
  fprintf(stderr, ""I32SDILDS(): %f\n"", I32SDILDS( 0, 1, 2, 3, 4, 5, 6,7,
                                                  8, 9,10,11,12,13,14,15,
                                                 16,17,18,19,20,21,22,23,
                                                 24,25,26,27,28,29,30,31,
                                                 1.2345678f, 3.212434, 43921652,
                                                 -3819410105021120785L, 0.31212333, 8.765432));
  return 0;
}

on x86_64 produces -3819410100167114752, which is equal to the expected value of -3.8194101E18 (-3819410100000000000), after some rounding.

Will test this code on aarch64 next.;;;","2021-03-24 11:45;gziemski;The same test on arrch64 macOS returns -3819410100167114752

So it's not mathematical issue, must be something wrong with the the way we are packing/passing the arguments from Java to native C?;;;","2021-03-25 06:25;akozlov;AFAIR the problem is indeed in JVMCI calling convention implementation. JVMCI has been disabled in Autoconf scripts but it was enabled too early. I promised to look at this some time ago, but it slipped out of my queue and I did not work on this issue, sorry.;;;","2021-03-25 08:54;gziemski;If you don't mind, I will assign it to you then, since you understand the issue. If you do need help here, however, I can take it back and take this as an opportunity to learn a new part of Hotspot.;;;","2021-03-28 23:59;akozlov;I'm not sure about timing, but it would be interesting for me to look into it. If someone else would like to look at the issue, please don't hesitate to ping me in this issue. Thanks!;;;","2021-06-08 13:22;dlong;ILW = bad result in single test, single platform, only with JVMCI, no workaround = MLH = P4;;;","2021-06-09 19:03;dlong;The native function as called by JVMCI:

frame #0: 0x00000001007df45c libNativeCallTest.dylib`I32SDILDS(i00=0, i01=1, i02=2, i03=3, i04=4, i05=5, i06=6, i07=7, i08=8, i09=1, i0a=9, i0b=1, i0c=10, i0d=8, i0e=11, i0f=7, i10=12, i11=1, i12=13, i13=1, i14=14, i15=7, i16=15, i17=1, i18=16, i19=0, i1a=17, i1b=0, i1c=18, i1d=1, i1e=19, i1f=1, a=1.23456776, b=3.212434, c=20, d=4294967317, e=0.31212332999999998, f=8.76543235) at libNativeCallTest.c:131:19

It looks like JVMCI is packing 32-bit integer args into 64-bit stack slots, while the native function expects 32-bit stack slots:

->  0x1007df45c: 0xb940cfed   ldr    w13, [sp, #0xcc]
    0x1007df460: 0xb940cbee   ldr    w14, [sp, #0xc8]
    0x1007df464: 0x0b0e01ad   add    w13, w13, w14
    0x1007df468: 0xb940c7ee   ldr    w14, [sp, #0xc4]
    0x1007df46c: 0x0b0e01ad   add    w13, w13, w14
    0x1007df470: 0xb940c3ee   ldr    w14, [sp, #0xc0]
    0x1007df474: 0x0b0e01ad   add    w13, w13, w14
    0x1007df478: 0xb940bfee   ldr    w14, [sp, #0xbc]
    0x1007df47c: 0x0b0e01ad   add    w13, w13, w14
    0x1007df480: 0xb940bbee   ldr    w14, [sp, #0xb8]
    0x1007df484: 0x0b0e01ad   add    w13, w13, w14
    0x1007df488: 0xb940b7ee   ldr    w14, [sp, #0xb4]
    0x1007df48c: 0x0b0e01ad   add    w13, w13, w14
    0x1007df490: 0xb940b3ee   ldr    w14, [sp, #0xb0]
    0x1007df494: 0x0b0e01ad   add    w13, w13, w14
    0x1007df498: 0xb940afee   ldr    w14, [sp, #0xac]
    0x1007df49c: 0x0b0e01ad   add    w13, w13, w14
    0x1007df4a0: 0xb940abee   ldr    w14, [sp, #0xa8]
    0x1007df4a4: 0x0b0e01ad   add    w13, w13, w14
;;;","2021-11-16 07:01;chagedorn;Hi [~akozlov], as the fork's soon coming up in early December, are you planning to get this fixed in 18? Otherwise, it needs to be deferred to 19 once RDP 1 starts (because it's a P4).
;;;","2021-11-16 23:38;akozlov;Thanks. We'll try to do anything with this, and in the unlucky case will have to defer to 19. I'll update the bug closer to the RDP1;;;","2021-11-17 00:13;chagedorn;Thanks Anton for your update! There's still some time left and if you think the bug is more critical, we can still think about raising its priority to P3 (then you'll have time to fix it until RDP 2).;;;","2021-11-30 08:21;chagedorn;Hi Anton, do you already have an update for this bug? I've just wanted to let you know that RDP 1 starts next Thursday. If you want to bring this fix into 18 it needs to go in before the fork. Please also make sure to plan enough time for a review if the fix is not trivial and/or might raise some questions.;;;","2021-12-01 05:46;akozlov;I've asked a colleague to look at this. The fix is almost ready, but has not been sent out for review for now. I'll set the fixVersion to 19 for now, and if we'll be able to integrate the fix before RDP1, I hope the robot will set the correct version.;;;","2021-12-01 06:55;chagedorn;Thanks for the update! We need to be careful when an explicit fix version (not tbd) is set that does not match. It will then create a backport. I'll set it to tbd for now. If the fix is gonna make it into 18, then you can either leave it at tbd (will be updated automatically) or set it again to 18. After the fork, you can leave it at tbd or set it to 19.;;;","2021-12-01 07:53;akozlov;Oh, got it. Thanks!;;;","2022-09-12 08:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10238
Date: 2022-09-12 14:35:30 +0000;;;","2022-11-10 13:08;dukebot;Changeset: 6b456f7a
Author:    Olga Mikhaltsova <omikhaltcova@openjdk.org>
Committer: Anton Kozlov <akozlov@openjdk.org>
Date:      2022-11-10 21:06:15 +0000
URL:       https://git.openjdk.org/jdk/commit/6b456f7a9b6344506033dfdc5a59c0f3e95c4b2a
;;;",,,,,,,,,,,,
ToolBasicTest fails to access HTTP server it starts,JDK-8262900,5043544,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,gziemski,gziemski,2021-03-02 14:45,2021-05-10 06:09,2023-10-01 09:57,2021-04-15 08:16,17,,,,,,,,17,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,,,,,,,,,,,,,,,,,,,,"Testing https://github.com/openjdk/jdk/pull/2200 reveals this failure in jdk/jshell/ToolBasicTest.java:

----------System.err:(213/15736)----------
/System/Volumes/Data/mesos/work_dir/slaves/28992c6d-c35d-42fa-8099-898223bf183b-S10499/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8f4099ce-c667-4314-acdc-992ea5b3e30e/runs/605b7012-61dc-4fc5-bc67-c87d0e9c541a/testoutput/test-support/jtreg_open_test_langtools_tier2/classes/3/jdk/jshell/ToolBasicTest.d/testClasspathJar/test.jar(/pkg/A.java):1: error: unmappable character (0xC2) for encoding US-ASCII
package pkg; /** ?? */public class A { public String toString() { return ""A""; } }
                 ^
/System/Volumes/Data/mesos/work_dir/slaves/28992c6d-c35d-42fa-8099-898223bf183b-S10499/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8f4099ce-c667-4314-acdc-992ea5b3e30e/runs/605b7012-61dc-4fc5-bc67-c87d0e9c541a/testoutput/test-support/jtreg_open_test_langtools_tier2/classes/3/jdk/jshell/ToolBasicTest.d/testClasspathJar/test.jar(/pkg/A.java):1: error: unmappable character (0x86) for encoding US-ASCII
package pkg; /** ?? */public class A { public String toString() { return ""A""; } }
                  ^
/System/Volumes/Data/mesos/work_dir/slaves/28992c6d-c35d-42fa-8099-898223bf183b-S10499/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8f4099ce-c667-4314-acdc-992ea5b3e30e/runs/605b7012-61dc-4fc5-bc67-c87d0e9c541a/testoutput/test-support/jtreg_open_test_langtools_tier2/classes/3/jdk/jshell/ToolBasicTest.d/testClasspathJar/test.jar(/pkg/A.java):1: error: unmappable character (0xC2) for encoding US-ASCII
package pkg; /** ?? */public class A { public String toString() { return ""A""; } }
                 ^
/System/Volumes/Data/mesos/work_dir/slaves/28992c6d-c35d-42fa-8099-898223bf183b-S10499/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8f4099ce-c667-4314-acdc-992ea5b3e30e/runs/605b7012-61dc-4fc5-bc67-c87d0e9c541a/testoutput/test-support/jtreg_open_test_langtools_tier2/classes/3/jdk/jshell/ToolBasicTest.d/testClasspathJar/test.jar(/pkg/A.java):1: error: unmappable character (0x86) for encoding US-ASCII
package pkg; /** ?? */public class A { public String toString() { return ""A""; } }
                  ^
java.io.EOFException
	at java.base/java.io.DataInputStream.readInt(DataInputStream.java:398)
	at java.base/java.io.ObjectInputStream$BlockDataInputStream.readInt(ObjectInputStream.java:3398)
	at java.base/java.io.ObjectInputStream.readInt(ObjectInputStream.java:1114)
	at jdk.jshell/jdk.jshell.execution.StreamingExecutionControl.readAndReportExecutionResult(StreamingExecutionControl.java:277)
	at jdk.jshell/jdk.jshell.execution.StreamingExecutionControl.invoke(StreamingExecutionControl.java:99)
	at jdk.jshell/jdk.jshell.execution.JdiDefaultExecutionControl.invoke(JdiDefaultExecutionControl.java:160)
	at jdk.jshell/jdk.jshell.Eval.declare(Eval.java:943)
	at jdk.jshell/jdk.jshell.Eval.eval(Eval.java:139)
	at jdk.jshell/jdk.jshell.JShell.eval(JShell.java:493)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processSource(JShellTool.java:3609)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processSourceCatchingReset(JShellTool.java:1330)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processInput(JShellTool.java:1228)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.run(JShellTool.java:1201)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.start(JShellTool.java:991)
	at jdk.jshell/jdk.internal.jshell.tool.JShellToolBuilder.run(JShellToolBuilder.java:240)
	at ReplToolTesting.testRawRun(ReplToolTesting.java:313)
	at ReplToolTesting.testRaw(ReplToolTesting.java:296)
	at ReplToolTesting.test(ReplToolTesting.java:249)
	at ReplToolTesting.test(ReplToolTesting.java:233)
	at ReplToolTesting.test(ReplToolTesting.java:229)
	at ReplToolTesting.test(ReplToolTesting.java:225)
	at ToolBasicTest.testRemoteExit(ToolBasicTest.java:680)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:831)
",,,,,,,,,,JDK-8266214,JDK-8266378,,,,,,,,,,,,,,,,,,,,,,JDK-8263803,,,,JDK-8215202,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i2ru03:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2021-03-17 02:12;thartmann;Moving to tools/jshell.;;;","2021-03-23 05:09;jlahoda;So, from the log, there appears to be two failures:
|  File 'http://<redacted>:<redacted>/script' for '/open' threw exception: java.io.IOException: Server returned HTTP response code: 502 for URL: http://<redacted>:<redacted>/script

This is for a HTTP server started by the thread. It is unclear to me why accessing an HTTP server on the same machine should report response code 502?

Failure (crash or unexpected finishing) of the JShell agent VM:
State engine terminated.

unclear why that would happen.
;;;","2021-04-15 08:16;roboduke;Changeset: e43aee58
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-04-15 15:16:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e43aee58
;;;","2021-04-29 08:44;mdoerr;Fix Request (11u)
Should get backported for parity with 11.0.12-oracle. Applies cleanly.
;;;",,,,,,,,,,,,,,,,,,,,,,,,
TestRedirectLinks fails,JDK-8262899,5043543,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jjg,gziemski,gziemski,2021-03-02 14:38,2021-08-10 08:48,2023-10-01 09:57,2021-03-29 09:13,16.0.2,17,,,,,,,17,tools,,0,16u-tier1,intermittent,jdk16u-fix-request,jdk16u-fix-SQE-ok,jdk16u-fix-yes,tier1,,,,,,,,,,,,,,,,,"Testing https://github.com/openjdk/jdk/pull/2200 reveals this failure in jdk/javadoc/doclet/testLinkOption/TestRedirectLinks.java: 

Starting subtest 1.1: check exit code
FAILED: return code 1; expected OK(0)
        at javadoc.tester.JavadocTester.checkExit(JavadocTester.java:450)
        at TestRedirectLinks.testRedirects(TestRedirectLinks.java:123)

Starting subtest 1.2: checkOutput
FAILED: outRedirect/pkg/B.html: following text not found:
FAILED: outRedirect/pkg/C.html: following text not found:
FAILED: OUT: following text not found:
FAILED: api/mC/p5/C5.html: following text not found:
FAILED: api/mC/p6/C6.html: following text not found:

java.lang.Error: 6 of 8 subtests failed, in 3 runs of javadoc
	at javadoc.tester.JavadocTester.printSummary(JavadocTester.java:915)
	at javadoc.tester.JavadocTester.runTests(JavadocTester.java:283)
	at javadoc.tester.JavadocTester.runTests(JavadocTester.java:259)
	at TestRedirectLinks.main(TestRedirectLinks.java:73)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:831)
",,,,,,,,,,JDK-8267026,JDK-8266659,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8217773,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2rtzv:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,Verified,,"2021-03-11 13:35;dcubed;This test failure has happened in Tier1 so I'm bumping this
bug from P4 -> P2.;;;","2021-03-19 12:22;dcubed;Here's a snippet from the log file for the jdk-17+15-1153-tier1 sighting:

Generating outRedirect/help-doc.html...
1 error
2 warnings

Starting subtest 1.1: check exit code
FAILED: return code 1; expected OK(0)
        at javadoc.tester.JavadocTester.checkExit(JavadocTester.java:455)
        at TestRedirectLinks.testRedirects(TestRedirectLinks.java:123)

Starting subtest 1.2: checkOutput
FAILED: outRedirect/pkg/B.html: following text not found:
<a href=""http://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html"" title=""class or interface in java.lang"" class=""external-link"">Link-Plain to String Class</a>
found ;;;","2021-03-22 14:07;jjg;General notes:

1. There are two internal subtests to be investigated:  
       the first tries to use a URL on docs.oracle.com
       the second tries to use temporary local servers

2. There are 3 ""environmental"" variations possible
        direct internet access
        behind firewall with no proxy set
        behind firewall with proxy set
;;;","2021-03-22 14:14;jjg;Separately, I note that the .jtr file is incomplete (jtreg bug) since it does not include the necessary `--add-exports` options.  Sigh, but easy to work around.;;;","2021-03-22 14:33;jjg;Testing ...

direct internet access:
   first subtest runs (not skipped) and passes
   second subtest passes
   bottom line: OK

behind firewall with no proxy set
    first subtest  setup failed (so skipped)
    second subtest passes
    bottom line: OK

behind firewall with proxy set
    first subtest runs (not skipped) and passes
    second subtest FAILS;;;","2021-03-22 14:40;jjg;The second subtest runs temporary servers on ""the local host"" but using an explicit IP (not ""localhost"" or ""127.0.0.1"").  If the jtreg ""rerun command is reconfigured to set `http.nonProxyHosts` to include that explicit IP address, the test passes.

Seems like the fix is either to try and use ""localhost"" or ""127.0.0.1"" and hope that it is configured as a nonProxyHost, or else try and detect if a proxy is in use. There are two cases for the latter: an OS-level proxy, or a JVM-specific proxy.

I note the test code currently uses `InetAddress.getLocalHost()` to get the local host for the temporary servers.

;;;","2021-03-22 14:55;jjg;The test works if 
    InetAddress.getLocalHost()
is replaced by 
    InetAddress.getByAddress(""localhost"", new byte[] { 127, 0, 0, 1});;;","2021-03-22 15:16;jjg;Fix tested in the 3 environments:

direct internet access (direct execution by jtreg)
behind firewall, no proxy  (first subtest is skipped)  (direct execution by jtreg)
behind firewall, proxy (using modified rerun script);;;","2021-03-24 07:49;jjg;[~dcubed] We have been investigating this and think we have a resolution, coming shortly.
Along with [~prappo] (thanks!), we have identified two issues: one we can fix, the other we will have to work around.

1. The test was using `getLocalHost` instead of `getLoopbackAddress`.  Fixed.
2. We believe we have identified a specific Mac host in Mach5 for which this test fails, because that host cannot access `docs.oracle.com`.

To work around 2, we will make that part of the test conditional, to be run ""on demand"" only, typically by javadoc developers, and not run by default, including in standard CI test runs on Mach5.;;;","2021-03-24 09:52;dcubed;[~jjg] - Thanks for the status update. I'm looking forward to these intermittent
Tier1 failures going away.;;;","2021-03-29 09:13;roboduke;Changeset: f17ea9e6
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-03-29 16:12:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f17ea9e6
;;;","2021-08-10 08:48;hannesw;Test used to verify the fix:
test/langtools/jdk/javadoc/doclet/testLinkOption/TestRedirectLinks.java 
Platform: Mac OS X

JDK 17 b35:
Ran test in diffferent network configurations:
 - direct network access
 - with firewall/VPN, no proxy configured
 - with firewall/VPN, proxy configured

The test passed in all configurations.;;;",,,,,,,,,,,,,,,,
com/sun/net/httpserver/bugs/8199849/ParamTest.java times out,JDK-8262898,5043542,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,michaelm,gziemski,gziemski,2021-03-02 14:34,2021-04-12 15:12,2023-10-01 09:57,2021-04-06 09:02,,,,,,,,,17,core-libs,,0,intermittent,noreg-self,tier2,,,,,,,,,,,,,,,,,,,,"Testing https://github.com/openjdk/jdk/pull/2200 reveals this failure in com/sun/net/httpserver/bugs/8199849/ParamTest.java:

client 1
Server 1: accept
accepted
Server 2: accept
Auth called
accepted
reading
HelloWorld
finished reading
Client: waiting for notify
Server 1: accept
Client: continue
accepted
Server 2: accept
accepted
reading
HelloWorld
finished reading
Client: waiting for notify
Server 1: accept
Client: continue
accepted
Server 2: accept
accepted
reading
HelloWorld
finished reading
Client: waiting for notify
Server 1: accept
Client: continue
accepted
Server 2: accept
accepted
reading
HelloWorld
finished reading
Client: waiting for notify
Server 1: accept
Client: continue
New Client: waiting for notify
Timeout refired 480 times
----------System.err:(5/178)----------
check: correct auth string received
check: correct auth string received
check: correct auth string received
check: correct auth string received
Error new client (502) iteration
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,os_x,,,,,,"0|i2rtzn:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-03-16 15:34;dcubed;This failure mode has shown up a couple of times
in the JDK17 CI in Tier2 so I'm bumping the priority
from P4 -> P3.;;;","2021-03-18 02:40;dfuchs;The error occurs on Mac OS 10.15.7 only, with IPv6. The client receive an error 502 bad gateway. I believe the issue here is that the client should be configured to use NO_PROXY. On mac, the default proxy is used by default, and for some reason ::1 is not configured in the machine's no-proxy host list.;;;","2021-04-06 09:02;roboduke;Changeset: 4bb80f37
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2021-04-06 16:01:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4bb80f37
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[macos_aarch64] Crash in jni_fast_GetLongField,JDK-8262896,5043540,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,akozlov,gziemski,gziemski,2021-03-02 14:22,2023-06-14 08:40,2023-10-01 09:57,2021-04-13 15:35,11,17,8,,,,,,17,hotspot,,0,amazon-interest,azul-interest,macos-aarch64-11u,macos-aarch64-8u,tck-red-8u371,,,,,,,,,,,,,,,,,,"Testing https://github.com/openjdk/jdk/pull/2200 reveals this crash in java/util/logging/TestLoggerWeakRefLeak.java:

Test for WeakReference leak in Logger object
call count = 1000
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGBUS (0xa) at pc=0x0000000111d0c400, pid=27992, tid=23043
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (build 17-internal+0-LTS-2021-02-27-1954067.mikael.vidstedt.jdk-macosjib)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17-internal+0-LTS-2021-02-27-1954067.mikael.vidstedt.jdk-macosjib, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Problematic frame:
# v  ~BufferBlob::jni_fast_GetLongField
#
# Core dump will be written. Default location: core.27992
#

instance count: 1002
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#
",,,,,,,,,,JDK-8281840,JDK-8271577,JDK-8284571,JDK-8298904,,,,,,,,,,,,,,,,,,JDK-8262897,,JDK-8263606,JDK-8299794,JDK-8299802,JDK-8299792,JDK-8244644,JDK-8262897,,,,,,,,,,,"2021-03-03 09:27;gziemski;hs_err_pid27992.log;https://bugs.openjdk.org/secure/attachment/93447/hs_err_pid27992.log",,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i2rtz7:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-09 22:39;dholmes;This will be be fixed as part of the macOS-Aarch64 port, so assigning to Anton.
;;;","2021-03-12 04:12;akozlov;Interesting, thanks! The root cause looks clear, but I cannot reproduce the issue, probably it needs to run in some specific batch. I need some time to get a stable reproducer to very any possible fix. 

I'm thinking about adding more code to target this specific issue. The problem is that a JNI interface function is called from the libjvm.so, but the function is substituted with an optimized generated version. We miss a W^X transition in this case. For robustness, we need a W^X transition on the callee side, so the jni_fast_xxx generator needs to be changed.;;;","2021-03-12 05:45;vkempik;The issue is caused by missing W->X transition in Perf_Detach;;;","2021-04-07 08:18;mikael;Also spotted in com/sun/jdi/SourceNameFilterTest.java but I'm guessing this is a race condition of sorts and can happen in pretty much any test.;;;","2021-04-13 15:35;roboduke;Changeset: 283d64f8
Author:    Anton Kozlov <akozlov@openjdk.org>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2021-04-13 22:34:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/283d64f8
;;;","2021-12-18 00:44;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk11u-dev/pull/715
Date: 2021-12-13 20:11:31 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,
[macos_aarch64] runtime/CompressedOops/CompressedClassPointers.java fails with 'Narrow klass base: 0x0000000000000000' missing from stdout/stderr,JDK-8262895,5043539,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,matsaave,gziemski,gziemski,2021-03-02 14:14,2023-03-06 11:41,2023-10-01 09:57,2023-02-27 07:54,17,,,,,,,,21,hotspot,,0,memory,noreg-self,starter,,,,,,,,,,,,,,,,,,,,"Testing https://github.com/openjdk/jdk/pull/2200 reveals this failure in runtime/CompressedOops/CompressedClassPointers.java:

 stdout: [[0.011s][info][gc,metaspace] Compressed class space mapped at: 0x0000007000000000-0x0000007040000000, reserved size: 1073741824
[0.011s][info][gc,metaspace] Narrow klass base: 0x0000007000000000, Narrow klass shift: 0, Narrow klass range: 0x40000000
];
 stderr: [Java HotSpot(TM) 64-Bit Server VM warning: Shared spaces are not supported in this VM
java version ""17-internal"" 2021-09-14 LTS
Java(TM) SE Runtime Environment (fastdebug build 17-internal+0-LTS-2021-02-27-1954067.mikael.vidstedt.jdk-macosjib)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 17-internal+0-LTS-2021-02-27-1954067.mikael.vidstedt.jdk-macosjib, mixed mode)
]
 exitValue = 0

java.lang.RuntimeException: 'Narrow klass base: 0x0000000000000000' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:206)
	at CompressedClassPointers.largeHeapAbove32GTest(CompressedClassPointers.java:128)
	at CompressedClassPointers.main(CompressedClassPointers.java:324)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:831)
",,,,,,,,,,,,,,,,,,,,,,,JDK-8301347,,,,,,,,,,,,,,JDK-8234058,,,,,,JDK-8258576,JDK-8258756,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i2rtyz:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-03 10:14;vkempik;That test should probably be disabled on mac_aarch64 same way it was disabled on windows ( https://bugs.openjdk.java.net/browse/JDK-8234058 ) due to ASLR;;;","2021-03-04 06:12;vkempik;so it fails only in one subtest , rest of subtests are working fine

at CompressedClassPointers.largeHeapAbove32GTest(CompressedClassPointers.java:128)

this subtest was added as part of JDK-8258576 just recently;;;","2021-03-05 07:10;rrich;There seems to be an issue with mapping the heap at preferred addresses[1] on macos_aarch64.

With additional tracing and setting -XX:HeapSearchSteps=40 we see that the vm
fails to map the heap at one of the preferred addresses (thanks Vladimir for
doing the test):

images/jdk/bin/java -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx31g -XX:-UseAOT -Xlog:gc+metaspace=trace,cds=trace,heap+gc+exit=info,gc+heap+coops=trace -Xshare:off -XX:+VerifyBeforeGC -XX:HeapSearchSteps=40 -version
OpenJDK 64-Bit Server VM warning: Shared spaces are not supported in this VM
[0.005s][trace][gc,heap,coops] Trying to allocate at address 0x0000001000000000 heap of size 0x7c1000000
[0.005s][trace][gc,heap,coops] Trying to allocate at address 0x0000001800000000 heap of size 0x7c1000000
[0.005s][trace][gc,heap,coops] Trying to allocate at address 0x0000002000000000 heap of size 0x7c1000000
[0.005s][trace][gc,heap,coops] Trying to allocate at address 0x0000004000000000 heap of size 0x7c1000000
[0.005s][trace][gc,heap,coops] Trying to allocate at address 0x0000005000000000 heap of size 0x7c1000000
[0.005s][trace][gc,heap,coops] Trying to allocate at address 0x0008000000000000 heap of size 0x7c1000000
[0.005s][trace][gc,heap,coops] Trying to allocate at address 0x0010000000000000 heap of size 0x7c1000000
[0.006s][trace][gc,heap,coops] Trying to allocate at address 0x0018000000000000 heap of size 0x7c1000000
[0.006s][trace][gc,heap,coops] Trying to allocate at address 0x0020000000000000 heap of size 0x7c1000000
[0.006s][trace][gc,heap,coops] Trying to allocate at address 0x0080000000000000 heap of size 0x7c1000000
[0.006s][trace][gc,heap,coops] Trying to allocate at address 0x0100000000000000 heap of size 0x7c1000000
[0.006s][trace][gc,heap,coops] Trying to allocate at address 0x0110000000000000 heap of size 0x7c1000000
[0.006s][trace][gc,heap,coops] Trying to allocate at address NULL heap of size 0x7c1000000
[0.006s][debug][gc,heap,coops] Protected page at the reserved heap base: 0x0000000280000000 / 16777216 bytes
[0.006s][debug][gc,heap,coops] Heap address: 0x0000000281000000, size: 31744 MB, Compressed Oops mode: Non-zero based: 0x0000000280000000, Oop shift amount: 3
[0.007s][info ][gc,metaspace ] Compressed class space mapped at: 0x0000007000000000-0x0000007040000000, reserved size: 1073741824
[0.007s][info ][gc,metaspace ] Narrow klass base: 0x0000007000000000, Narrow klass shift: 0, Narrow klass range: 0x40000000
openjdk version ""17-internal"" 2021-09-14
OpenJDK Runtime Environment (build 17-internal+0-adhoc.tester.jdk)
OpenJDK 64-Bit Server VM (build 17-internal+0-adhoc.tester.jdk, mixed mode)
[0,044s][info ][gc,heap,exit ] Heap
[0,044s][info ][gc,heap,exit ] garbage-first heap total 262144K, used 1647K [0x0000000281000000, 0x0000000a41000000)
[0,044s][info ][gc,heap,exit ] region size 16384K, 1 young (16384K), 0 survivors (0K)
[0,044s][info ][gc,heap,exit ] Metaspace used 3401K, committed 3456K, reserved 1056768K
[0,044s][info ][gc,heap,exit ] class space used 267K, committed 320K, reserved 1048576K

Finally it is mapped at 10GB (0x0000000281000000), leaving hardly room for a 4GB aligned[2] compressed class space below 32G. And indeed we get a compressed class space with an encoding base that is not zero and largeHeapAbove32GTest fails then.


[1] get_attach_addresses_for_disjoint_mode(): https://github.com/openjdk/jdk/blob/8d3de4b1bdb5dc13bb7724596dc2123ba05bbb81/src/hotspot/share/memory/virtualspace.cpp#L477

[2] On aarch64 the encoding base has to be 4GB aligned. Unfortunately the 4GB alignment is enforced to strictly on the start address of the compressed class space instead of enforcing it on the encoding base. See JDK-8258756.
;;;","2021-03-09 04:55;vkempik;Thanks for analysis Richard, we will disable the subtest on mac_aarch64 for now;;;","2021-03-12 06:03;akozlov;For the bookkeeping, the change https://github.com/openjdk/jdk/pull/2200/commits/d1783762d9a9b29e9fdf6784a911d6dfb31b0479;;;","2021-06-04 11:26;gziemski;I get the same failure even on x86_64 mac (after running many processes for a while). Rebooting the machine makes it work for an undermined period of time, till the OS VM space gets fragmented enough (?) again.;;;","2021-06-08 08:38;gziemski;The test seems unreliable on macOS in general, regardless of the underlaying hardware architecture, i.e. x86_64 or aarch64

Not sure how useful it is on macOS because of that, but also in a big picture kind of way, why do we have such test in the first place. Thomas Stuffe said this in his review of a related issue https://github.com/openjdk/jdk/pull/3865#discussion_r630171134:

""Arguably we may even completely exclude the test, like I do for AIX already. Its important for Windows, somewhat less important for Linux, and covers other platforms only for completeness sake.""

So the question is: is it the case here as well that the test is of a less significance on macOS compared to Linux/Windows?

Moving out of JDK17.;;;","2023-01-27 12:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12234
Date: 2023-01-26 20:34:32 +0000;;;","2023-02-27 07:54;dukebot;Changeset: f5a12768
Author:    Matias Saavedra Silva <matsaave@openjdk.org>
Committer: Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-02-27 15:53:33 +0000
URL:       https://git.openjdk.org/jdk/commit/f5a12768fba4a6508fb0359aedd608fd9d6d9024
;;;",,,,,,,,,,,,,,,,,,,
[macos_aarch64] SIGBUS in Assembler::ld_st2,JDK-8262894,5043538,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,akozlov,gziemski,gziemski,2021-03-02 14:07,2022-05-29 23:01,2023-10-01 09:57,2021-03-31 02:35,11,17,,,,,,,17,hotspot,,0,azul-interest,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,"Testing https://github.com/openjdk/jdk/pull/2200 shows a crash in compiler/debug/VerifyAdapterSharing.java:

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGBUS (0xa) at pc=0x00000001098d6d08, pid=52606, tid=9731
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-internal+0-LTS-2021-02-27-1954067.mikael.vidstedt.jdk-macosjib)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-internal+0-LTS-2021-02-27-1954067.mikael.vidstedt.jdk-macosjib, compiled mode, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Problematic frame:
# V  [libjvm.dylib+0xd6d08]  Assembler::ld_st2(RegisterImpl*, Address const&, int, int, int)+0x254
#
# Core dump will be written. Default location: core.52606
#
# An error report file with more information is saved as:
# /System/Volumes/Data/mesos/work_dir/slaves/28992c6d-c35d-42fa-8099-898223bf183b-S11309/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/eda33d5b-1dda-4d91-8950-bd14dcc0ad66/runs/d5b4c242-6c0b-4944-b6a3-149ef19e75ae/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler/scratch/0/hs_err_pid52606.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#",,,,,,,,,,JDK-8281960,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8235385,JDK-8264240,JDK-8287508,,,,JDK-8253795,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i2rtyr:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-12 07:28;akozlov;The issue is caused by a missing transition to WXWrite, triggered by combination of flags -Xcomp -XX:+VerifyAdapterSharing. The issue will also appear when a code is generated as preparation for shutdownHooks during execution of JNI DestroyJavaVM.;;;","2021-03-26 07:43;mikael;Potential fix:

diff --git a/src/hotspot/share/prims/jni.cpp b/src/hotspot/share/prims/jni.cpp
index e2e7799c26c..0d619157c46 100644
--- a/src/hotspot/share/prims/jni.cpp
+++ b/src/hotspot/share/prims/jni.cpp
@@ -3723,6 +3723,7 @@ static jint JNICALL jni_DestroyJavaVM_inner(JavaVM *vm) {

   // Since this is not a JVM_ENTRY we have to set the thread state manually before entering.
   JavaThread* thread = JavaThread::current();
+  MACOS_AARCH64_ONLY(thread->enable_wx(WXWrite));
   ThreadStateTransition::transition_from_native(thread, _thread_in_vm);
   if (Threads::destroy_vm()) {
     // Should not change thread state, VM is gone


With that patch the CDS tests pass (when explicitly including CDS in the build).;;;","2021-03-26 10:00;gziemski;The pattern I see most used in the code for WXWrite is:

 MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thread));
;;;","2021-03-26 10:04;mikael;I tried that first, and that specific code doesn't work because the ThreadWXEnable destructor depends on the thread still being attached, but it gets called after the thread is detached (when the __wx variable goes out of scope). There may be other ways of expressing/solving it though.;;;","2021-03-29 12:35;gziemski;Yes, I can see that now. It looks like ""MACOS_AARCH64_ONLY(thread->enable_wx(WXExec));"" might be missing here as well:

  // Since this is not a JVM_ENTRY we have to set the thread state manually before entering.
  JavaThread* thread = JavaThread::current();
  MACOS_AARCH64_ONLY(thread->enable_wx(WXWrite));
  ThreadStateTransition::transition_from_native(thread, _thread_in_vm);
  if (Threads::destroy_vm()) {
    // Should not change thread state, VM is gone
    vm_created = 0;
    res = JNI_OK;
    return res;
  } else {
    ThreadStateTransition::transition(thread, _thread_in_vm, _thread_in_native);
    MACOS_AARCH64_ONLY(thread->enable_wx(WXExec));
    res = JNI_ERR;
    return res;
  }

;;;","2021-03-29 22:33;iklam;Here's the stack trace from the specific crash in the bug description (hs_err_pid52606.log)

Stack: [0x000000016ae98000,0x000000016b09b000],  sp=0x000000016b099bc0,  free space=2054k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0xd6d08]  Assembler::ld_st2(RegisterImpl*, Address const&, int, int, int)+0x254
V  [libjvm.dylib+0xd842f0]  SharedRuntime::gen_i2c_adapter(MacroAssembler*, int, int, BasicType const*, VMRegPair const*)+0x110
V  [libjvm.dylib+0xd84a58]  SharedRuntime::generate_i2c2i_adapters(MacroAssembler*, int, int, BasicType const*, VMRegPair const*, AdapterFingerPrint*)+0x40
V  [libjvm.dylib+0xd7b43c]  AdapterHandlerLibrary::get_adapter0(methodHandle const&)+0x3e0
V  [libjvm.dylib+0xd7ad6c]  AdapterHandlerLibrary::get_adapter(methodHandle const&)+0x24
V  [libjvm.dylib+0xbe2348]  Method::make_adapters(methodHandle const&, Thread*)+0x20
V  [libjvm.dylib+0x764750]  InstanceKlass::link_methods(Thread*)+0x7c
V  [libjvm.dylib+0x76366c]  InstanceKlass::link_class_impl(Thread*)+0x344
V  [libjvm.dylib+0x763a6c]  InstanceKlass::initialize_impl(Thread*)+0x98
V  [libjvm.dylib+0xabc544]  LinkResolver::resolve_static_call(CallInfo&, LinkInfo const&, bool, Thread*)+0x7c
V  [libjvm.dylib+0x795db8]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*)+0x90
V  [libjvm.dylib+0x795eec]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, Thread*)+0x58
V  [libjvm.dylib+0xe920dc]  JavaThread::invoke_shutdown_hooks()+0x80
V  [libjvm.dylib+0xe922ec]  Threads::destroy_vm()+0x1e8
V  [libjvm.dylib+0x867408]  jni_DestroyJavaVM+0xdc
C  [libjli.dylib+0x54a0]  JavaMain+0xc5c
C  [libjli.dylib+0x7500]  ThreadJavaMain+0xc
C  [libsystem_pthread.dylib+0x706c]  _pthread_start+0x140
;;;","2021-03-30 00:28;akozlov;(Oops, I have not clicked ""Add"" the comment yesterday)

Thanks for looking at this! I extended the fix with the handling of the unsuccessful destroy_vm call and a fix for a similar case in DetachCurrentThread. Although it turned out destroy_vm does not fail.;;;","2021-03-31 02:35;roboduke;Changeset: 8a4a9117
Author:    Anton Kozlov <akozlov@openjdk.org>
Committer: Vladimir Kempik <vkempik@openjdk.org>
Date:      2021-03-31 09:34:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8a4a9117
;;;","2022-02-09 13:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/816
Date: 2022-02-09 21:35:38 +0000;;;","2022-02-15 06:56;vkempik;Fix Request(11u): This fixes a small issue with jep-391 backport. Applies almost clean.
Macos-aarch64 only change, so pretty safe.;;;",,,,,,,,,,,,,,,,,,
minor typo in implSpec comment,JDK-8262892,5043536,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2021-03-02 13:55,2021-03-10 16:30,2023-10-01 09:57,2021-03-02 14:53,,,,,,,,,17,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,"Missing ""are""

open/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Addressable.java: * Implementations of this interface <a href=""{@docRoot}/java.base/java/lang/doc-files/ValueBased.html"">value-based</a>.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rtyb:",9223372036854775807,b13,,,,,,,,,,,,"2021-03-02 14:53;roboduke;Changeset: 93ffe6a6
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-03-02 22:53:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/93ffe6a6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
javadoc generates broken links with {@inheritDoc},JDK-8262886,5043530,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,jjg,jjg,2021-03-02 13:21,2021-07-15 10:25,2023-10-01 09:57,2021-07-01 00:26,16,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"doccheck found these:

api/jdk.incubator.foreign/jdk/incubator/foreign/ValueLayout.html:525: id not found: api/jdk.incubator.foreign/jdk/incubator/foreign/ValueLayout.html#layout-align
api/jdk.incubator.foreign/jdk/incubator/foreign/GroupLayout.html:540: id not found: api/jdk.incubator.foreign/jdk/incubator/foreign/GroupLayout.html#layout-align
api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryAddress.html:290: id not found: api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryAddress.html#access-modes
api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryAddress.html:328: id not found: api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryAddress.html#access-modes
api/jdk.incubator.foreign/jdk/incubator/foreign/SequenceLayout.html:639: id not found: api/jdk.incubator.foreign/jdk/incubator/foreign/SequenceLayout.html#layout-align

At least for the layout-align ones, it looks like javadoc is not fixing up links when `{@inheritDoc}` is used. 

",,,,,,,,,,JDK-8270691,JDK-8269779,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rtwz:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-03-02 13:30;jjg;Note that in other contexts, such as copying the first sentence of a doc comment to use in a summary file, it *does* try and fix up links.  See HtmlDocletWriter.redirectRelativeLinks.;;;","2021-05-26 01:16;hannesw;HtmlDocletWriter.redirectRelativeLinks is invoked for above links, but it returns the unprocessed link, and the link returned by the current implementation would be broken.;;;","2021-07-01 00:26;roboduke;Changeset: 962f1c1a
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-07-01 07:25:39 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/962f1c1a9b5b38d28cdf8580389641525fff1b4a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
doccheck: Broken links in java.base,JDK-8262883,5043527,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,michaelm,jjg,jjg,2021-03-02 11:46,2021-04-21 17:59,2023-10-01 09:57,2021-04-14 08:00,,,,,,,,,17,core-libs,,0,doccheck,noreg-doc,,,,,,,,,,,,,,,,,,,,,"DocCheck reports:

api/java.base/java/net/class-use/SocketAddress.html:248: id not found: api/java.base/java/net/package-summary.html#unixdomain
api/java.base/java/net/package-summary.html:404: id not found: api/java.base/java/net/package-summary.html#unixdomain
api/java.base/java/net/package-use.html:683: id not found: api/java.base/java/net/package-summary.html#unixdomain
api/java.base/java/net/UnixDomainSocketAddress.html:98: id not found: api/java.base/java/net/package-summary.html#unixdomain
api/java.base/java/io/class-use/Serializable.html:3852: id not found: api/java.base/java/net/package-summary.html#unixdomain
api/java.base/java/lang/class-use/Object.html:11241: id not found: api/java.base/java/net/package-summary.html#unixdomain

Missing files: (2)
api/java.base/java/java/net/UnixDomainSocketAddress.html
    in api/java.base/java/nio/channels/SocketChannel.html
api/java.base/java/lang/ref/package.html
    in api/java.base/java/lang/invoke/MethodHandles.Lookup.ClassOption.html
    in api/java.base/java/lang/invoke/MethodHandles.Lookup.html


The missing ids seem to be cause by these two source lines:

open/src/java.base/share/classes/java/net/UnixDomainSocketAddress.java: * A <a href=""package-summary.html#unixdomain"">Unix domain</a> socket address.
open/src/java.base/share/classes/java/nio/channels/DatagramChannel.java:     * @apiNote <a href=""package-summary.html#unixdomain"">Unix domain</a> sockets

The references to UnixDomainSocketAddress in SocketChannel is probably the result of this line that needs an extra ""../""

open/src/java.base/share/classes/java/nio/channels/SocketChannel.java:     * <a href=""../../java/net/UnixDomainSocketAddress.html#unnamed"">unnamed</a>

The references to package.html are probably the result of these lines:

open/src/java.base/share/classes/java/lang/invoke/MethodHandles.java:             * <a href=""../ref/package.html#reachability"">reachable</a>.
open/src/java.base/share/classes/java/lang/invoke/MethodHandles.java:         * <a href=""../ref/package.html#reachability"">reachable</a>.

Note that the generated package description file is `package-summary.html` (not `package.html`).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rtwb:",9223372036854775807,b19,,,,,,,,,,,,"2021-03-02 12:27;jjg;I'm not at expert in this area, but it seems to me that a plausible candidate for those #unixdomain links is this recently added definition of Unixdomain:

open/src/java.base/share/classes/java/net/doc-files/net-properties.html:<a id=""Unixdomain""></a>

(Note the different capitalization)
;;;","2021-04-14 06:40;michaelm;Older version of API had an overview at that location.

Will fix the MethodHandles links also;;;","2021-04-14 08:00;roboduke;Changeset: 46616909
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2021-04-14 15:00:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/46616909
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Lanai: NetBeans crashes often when switching between dual and single screen,JDK-8262882,5043524,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,aghaisas,kcr,kcr,2021-03-02 11:26,2021-03-09 01:02,2023-10-01 09:57,2021-03-09 01:02,internal,,,,,,,,internal,client-libs,,0,code-review,crash,critical,lanai,sn_88,,,,,,,,,,,,,,,,,,"This was uncovered when testing the latest lanai repo, up to this commit:

https://github.com/openjdk/lanai/commit/478286d5470bf7bb933f87d5842c42eb16252dd8

and including the fixes for JDK-8262750, JDK-8262729, and JDK-8262496.

I reproduced this as follows:

1. Enable the discrete graphics card (so there would be no graphics card switch, although it doesn't matter to this bug)
2. Run NetBeans without metal API validation
3. Plug in external monitor
4. Unplug external monitor
5. Repeat steps 3-4 until it crashes",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262496,JDK-8261714,JDK-8262254,,,,,,,,,,"2021-03-02 11:26;kcr;crash-report-nb-bad-addr.txt;https://bugs.openjdk.org/secure/attachment/93432/crash-report-nb-bad-addr.txt","2021-03-02 11:26;kcr;hs_err_pid22552.log;https://bugs.openjdk.org/secure/attachment/93433/hs_err_pid22552.log",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rtvn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-02 11:29;kcr;I filed this as P1, since it is a serious regression. I'll try to narrow down the fix that caused the regression.;;;","2021-03-02 13:36;kcr;I backed out the last three changes and it still crashes, so this might not be a recent regression.
;;;","2021-03-02 15:39;kcr;More information: I tried this with EA 9 and was able to make it crash there, too. I suspect I had not done this level of stress testing before. It crashes most easily when I am scrolling text with the trackpad while plugging or unplugging the external monitor.

I think the priority can be lowered since it is definitely not a recent regression -- and likely not a regression at all.;;;","2021-03-02 15:43;kcr;With EA 9, or with the latest build, I can make it happen with SwingSet2 as well. Very odd, since I'm reasonably certain that was tested.;;;","2021-03-02 17:09;prr;We need to be a bit careful with the ""regression"" label. It has been removed from this bug already but if it were still there and we decided this was serious but a corner case and integrated into JDK, then what would ""regression"" mean ?
It certainly would not be a JDK 17 regression w.r.t JDK 16 or earlier ... ;;;","2021-03-03 00:36;aghaisas;I cannot connect my macBook pro 16"" to external monitor as the USB-C to HDMI adapter that I have ordered has not yet arrived.

I think, this bug is peculiar to discrete graphics card.
I tried the same steps with macBook pro 13"" that has only integrated graphics card. Netbeans never crashed with multiple plug-in/plug-out of external monitor.;;;","2021-03-03 03:51;jdv;This is not reproducible in my 13inch Macbook pro also. Performed continuous text/tree scrolling while plugging/unplugging multiple times.
Recently we had fix for similar plug/unplug scenario under JDK-8262750 in integrated SoC. Today i did follow up code verification task under JDK-8262928 and added commandbuffer flush logic for setSurfaces also which was missing.

[~kcr] Please verify if there is any change in reproducibility of this issue in latest code.;;;","2021-03-03 06:21;kcr;It still happens with the latest changes (a local build that includes the fix for JDK-8262936). When it does crash, it is more often when I unplug the monitor -- so going from dual to single screen -- although I just got a crash from SwingSet2 going from single to dual.

To Ajit's point, it does seem likely that it is related to using the discrete graphics card.;;;","2021-03-04 02:47;aghaisas;There is an indication in debug logs that the crash is in cleaning up MTLContext.

[I] MTLGC_DestroyMTLGraphicsConfig
[I] MTLContext.dealloc 

Not sure why are we not hitting this point without the scenario that [~kcr] has mentioned.
Inability to reproduce this issue is hampering any intermediate fix testing.

It is not a favored option, but a quick fix would be to allow old MTLContext object to leak - and fix the leak separately later on.;;;","2021-03-04 09:45;kcr;The patch you sent me to comment out the call to MTLGC_DestroyMTLGraphicsConfig avoids the crash. I ran several times using a build with that call commented out, and it runs fine. I then did a local build reverting your temporary patch, thus restoring the call to MTLGC_DestroyMTLGraphicsConfig (and no other changes) and it crashes easily.
;;;","2021-03-04 22:41;aghaisas;[~kcr] Thanks for the confirmation.;;;",,,,,,,,,,,,,,,,,
"doccheck: empty paragraphs, etc in java.base module",JDK-8262875,5043514,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-03-02 09:34,2021-03-10 16:30,2023-10-01 09:57,2021-03-02 12:36,17,,,,,,,,17,core-libs,,0,doccheck,noreg-doc,,,,,,,,,,,,,,,,,,,,,"build/macosx-x64/images/docs/api/java.base/java/util/Comparator.html:347:59: Warning: trimming empty <p>
build/macosx-x64/images/docs/api/java.base/java/util/Comparator.html:354:55: Warning: trimming empty <p>
build/macosx-x64/images/docs/api/java.base/java/lang/Integer.html:846:2: Warning: trimming empty <p>
build/macosx-x64/images/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html:1667:2: Warning: trimming empty <p>
build/macosx-x64/images/docs/api/java.base/java/lang/Long.html:841:2: Warning: trimming empty <p>
build/macosx-x64/images/docs/api/java.base/javax/net/ssl/SSLSessionContext.html:203:2: Warning: trimming empty <p>

The following are the result of a recent javadoc cleanup to standardize id naming, such that `package.description` is now `package-description`.
api/java.base/java/util/jar/package-summary.html:75: id not found: api/java.base/java/util/zip/package-summary.html#package.description
api/java.base/java/util/zip/Deflater.html:117: id not found: api/java.base/java/util/zip/package-summary.html#package.description
api/java.base/java/util/zip/Inflater.html:105: id not found: api/java.base/java/util/zip/package-summary.html#package.description",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rttf:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-03-02 12:36;roboduke;Changeset: 20b9ba53
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-03-02 20:35:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/20b9ba53
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
No debug symbols in image for Windows --with-native-debug-symbols=external,JDK-8262864,5043501,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aleonard,aleonard,aleonard,2021-03-02 07:12,2021-05-04 13:15,2023-10-01 09:57,2021-03-25 11:21,8u281,,,,,,,,openjdk8u302,infrastructure,,0,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,,,,,,,,"For jdk8u building Windows --with-native-debug-symbols=external is missing
debug symbol files in the debug image.
Also, on other platforms the image jre/bin folder contains .debuginfo files for executables that are not in jre/bin.

https://bugs.openjdk.java.net/browse/JDK-8252395 fixed the other platforms, however the change did not fix
the Windows path, it also did not remove the non-jre/bin debug files correctly.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2rtqj:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-03-02 10:46;aleonard;webrev: https://cr.openjdk.java.net/~aleonard/8262864/webrev.00/;;;","2021-03-10 07:20;aleonard;Fix Request
This fix correctly enables external debug symbols support for Windows in jdk8u. The fix has been verified correctly at AdoptOpenJDK, and I have also verified before and after images to ensure just the .pdb files are now correctly added.
RFR: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-March/013533.html
webrev: https://cr.openjdk.java.net/~aleonard/8262864/webrev.00/
 ;;;","2021-03-12 05:16;stooke;From a comment on [1] by Magnus Ihse Bursie [2], I believe the PR deleting the following lines to be in error:

-  # for executables. ""java"" is both a library and executable.
-  ALL_BIN_EXEC_FILES := $(filter-out java.exe, $(notdir $(filter %.exe, $(ALL_BIN_LIST)))) 

These lines ensure that the debug info from java.dll is copied, not from java.exe.

[1] https://bugs.openjdk.java.net/browse/JDK-8263356
[2] https://bugs.openjdk.java.net/browse/JDK-8263356?focusedCommentId=14406720&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14406720;;;","2021-03-12 05:50;aleonard;Hi Simon,
The lines I deleted I believe don't achieve what Magnus mentions, as they basically currently ensure that no pdb files whatsoever are copied...
  ALL_BIN_EXEC_FILES := $(filter-out java.exe, $(notdir $(filter %.exe, $(ALL_BIN_LIST))))
==> list of all .exe files in bin dir except java.exe
  ALL_BIN_DEBUG_FILTER := $(addprefix %, $(patsubst %.exe, %.debuginfo, $(ALL_BIN_EXEC_FILES)) \
      $(patsubst %.exe, %.diz, $(ALL_BIN_EXEC_FILES))) %.pdb
==> list of all <exebasename_except_java>.debuginfo <exebasename_except_java>.diz %.pdb
  ALL_BIN_LIST := $(filter-out $(ALL_BIN_DEBUG_FILTER), $(ALL_BIN_LIST))
==> remove from ALL_BIN_LIST all .pdb files, and all .debuginfo(irrelevant for Windows?) (except java.debuginfo), and all .diz (except java.diz)

So you can see the end result is to remove all *.pdb files, include java.pdb (which ever one it is exe/dll)

Anyway, I will rework to ensure both issues are fixed, and I will double check that the resulting java.pdb is from the java.dll.
cheers
Andrew
;;;","2021-03-15 05:51;sgehwolf;[~aleonard] So is this still ready for approval or will be reworked? If the latter, please remove the jdk8u-fix-request label and add it back once ready. Thanks!;;;","2021-03-15 09:15;aleonard;Thanks Severin, removed.;;;","2021-03-18 03:29;aleonard;[~sgehwolf][~stooke]
Hi,
I've spent quite a bit of time debugging the windows jdk8u images build with external debug, and I am now confident my original patch is good. I shall explain:
The situation for handling the Windows java.dll/exe debug file(.pdb) overwrite issue is actually handled where the launchers get built. The launcher recipe for java.exe is done in a special way on Windows, so that the launcher output dir is not the same as used to build java.dll, hence it does not overwrite java.dll output. This then means an extra rule is created to copy the java.exe to the final output/bin. This is all done here: https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/8c34226ce118/make/CompileLaunchers.gmk#l221
SetupLauncher,java uses Param9 to specify a different output dir: $(JDK_OUTPUTDIR)/objs/java_objs
The $(JDK_OUTPUTDIR)/bin$(OUTPUT_SUBDIR)/java$(EXE_SUFFIX): $(BUILD_LAUNCHER_java) rule then copies this java.exe to the required output dir bin.
The debuginfo copy rule for java program https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/8c34226ce118/make/CompileLaunchers.gmk#l253 is only setup for ifneq ($(POST_STRIP_CMD),  ie.when POST_STRIP_CMD is not empty. Windows is empty, hence java.pdb is not copied for java.exe on Windows.

The code i've removed from Images.gmk I believe is old redundent code, just like what was removed for the Linux platforms.

Let me know what you think?
So i've re-added jdk8u-fix-request.
Thanks
Andrew
 ;;;","2021-03-23 10:39;sgehwolf;[~aleonard] I agree. Approved.;;;","2021-03-25 11:21;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/jdk/rev/ce0fb3b3283a
User:  phh
Date:  2021-03-25 18:20:08 +0000
;;;","2021-05-04 13:13;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/ce0fb3b3283a
User:  andrew
Date:  2021-05-04 20:08:37 +0000
;;;",,,,,,,,,,,,,,,,,,
Harden tests sun/security/x509/URICertStore/ExtensionsWithLDAP.java and krb5/canonicalize/Test.java,JDK-8262862,5043499,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fguallini,fguallini,fguallini,2021-03-02 07:06,2021-08-15 04:54,2023-10-01 09:57,2021-03-05 08:26,11,17,8,,,,,,17,security-libs,,0,intermittent,investigate-UT,jdk11u-fix-request,jdk11u-fix-yes,redhat-interest,testbug,,,,,,,,,,,,,,,,,"Certain JVM tools may access InetAddress and initialise its static members during start-up resulting in a NameService configuration being already set to the default PlatformNameService, causing issues in the following tests which expects the use of HostsFileNameService instead:
sun/security/krb5/canonicalize/Test.java and sun/security/x509/URICertStore/ExtensionsWithLDAP.java


ExtensionsWithLDAP.java log file snippet:

----------System.err:(13/936)----------
java.lang.RuntimeException: The ldap.host.for.crldp from CRLDP extension is not requested
at ExtensionsWithLDAP.main(ExtensionsWithLDAP.java:174)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.base/java.lang.Thread.run(Thread.java:831)

-------------------------


canonicalize/Test.java log file snippet:

----------System.err:(14/816)----------
java.lang.Exception: Output is host/c1@THIS.REALM
at Test.check(Test.java:65)
at Test.main(Test.java:44)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.Exception: Output is host/c1@THIS.REALM
-------------------------
",,,,,,,,,,JDK-8269071,JDK-8268106,JDK-8272484,,,,,,,,,,,,,,,,,,,JDK-8261915,,,,,,JDK-8261915,,,,,,JDK-8262195,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rtq3:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-03-05 08:26;roboduke;Changeset: e1cad970
Author:    Fernando Guallini <fguallini@openjdk.org>
Committer: Aleksei Efimov <aefimov@openjdk.org>
Date:      2021-03-05 16:26:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e1cad970
;;;","2021-08-13 07:42;shade;Fix Request (11u)

Improves testing and matches 11.0.13-oracle. Patch applies cleanly, affected testing still pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"jextract crashes with ""Cannot compute size of a layout which is, or depends on a sequence layout with unspecified size""",JDK-8262851,5043487,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sundar,sundar,sundar,2021-03-02 05:24,2021-03-04 07:07,2023-10-01 09:57,2021-03-04 07:07,repo-panama,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"jextract crashes on linux-libc-dev's bcache.h

WARNING: Using incubator modules: jdk.incubator.jextract, jdk.incubator.foreign
WARNING: Layout size not available for ptr
WARNING: Layout size not available for uuid_bucket
WARNING: Layout size not available for btree_root
java.lang.UnsupportedOperationException: Cannot compute size of a layout which is, or depends on a sequence layout with unspecified size
	at jdk.incubator.foreign/jdk.incubator.foreign.AbstractLayout.badSizeException(AbstractLayout.java:138)
	at java.base/java.util.OptionalLong.orElseThrow(OptionalLong.java:273)
	at jdk.incubator.foreign/jdk.incubator.foreign.AbstractLayout.bitSize(AbstractLayout.java:130)
	at jdk.incubator.foreign/jdk.incubator.foreign.GroupLayout.bitSize(GroupLayout.java:61)
	at jdk.incubator.foreign/jdk.internal.foreign.LayoutPath.groupElement(LayoutPath.java:142)
	at jdk.incubator.foreign/jdk.incubator.foreign.MemoryLayout$PathElement.lambda$groupElement$0(MemoryLayout.java:584)
	at jdk.incubator.foreign/jdk.internal.foreign.LayoutPath$PathElementImpl.apply(LayoutPath.java:331)
	at jdk.incubator.foreign/jdk.incubator.foreign.MemoryLayout.computePathOp(MemoryLayout.java:536)
	at jdk.incubator.foreign/jdk.incubator.foreign.MemoryLayout.bitOffset(MemoryLayout.java:364)
	at jdk.incubator.foreign/jdk.incubator.foreign.MemoryLayout.byteOffset(MemoryLayout.java:415)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.StructBuilder.emitSegmentGetter(StructBuilder.java:193)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.StructBuilder.addVar(StructBuilder.java:136)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.visitVariable(OutputFactory.java:457)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.visitVariable(OutputFactory.java:55)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.DeclarationImpl$VariableImpl.accept(DeclarationImpl.java:174)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.lambda$visitScoped$0(OutputFactory.java:185)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.visitScoped(OutputFactory.java:185)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.visitScoped(OutputFactory.java:55)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.DeclarationImpl$ScopedImpl.accept(DeclarationImpl.java:294)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.lambda$visitScoped$0(OutputFactory.java:185)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.visitScoped(OutputFactory.java:185)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.visitScoped(OutputFactory.java:55)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.DeclarationImpl$ScopedImpl.accept(DeclarationImpl.java:294)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.generateDecl(OutputFactory.java:136)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.generate(OutputFactory.java:109)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.generateWrapped(OutputFactory.java:96)
	at jdk.incubator.jextract/jdk.incubator.jextract.JextractTool.generate(JextractTool.java:121)
	at jdk.incubator.jextract/jdk.incubator.jextract.JextractTool.run(JextractTool.java:256)
	at jdk.incubator.jextract/jdk.incubator.jextract.JextractTool.main(JextractTool.java:157)
WARNING: Layout size not available for data
WARNING: Layout size not available for start
In memory compilation failed: bcache_h.java:1470: error: illegal start of expression
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(                public static long sizeof() { return $LAYOUT().byteSize(); }
                                                                                                ^
warning: using incubating module(s): jdk.incubator.foreign
1 error
1 warning",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rtnf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-03-02 05:28;sundar;[~mcimadamore] reduced this to a simple test:

File: x.h

struct Odd {
   struct {
    int size;
    char data[];
   } before;
   struct {
     int a; int b;
   } after;
};

jextract x.h 
WARNING: Using incubator modules: jdk.incubator.jextract, jdk.incubator.foreign
WARNING: Layout size not available for data
WARNING: Layout size not available for before
java.lang.UnsupportedOperationException: Cannot compute size of a layout which is, or depends on a sequence layout with unspecified size
	at jdk.incubator.foreign/jdk.incubator.foreign.AbstractLayout.badSizeException(AbstractLayout.java:138)
	at java.base/java.util.OptionalLong.orElseThrow(OptionalLong.java:273)
	at jdk.incubator.foreign/jdk.incubator.foreign.AbstractLayout.bitSize(AbstractLayout.java:130)
	at jdk.incubator.foreign/jdk.incubator.foreign.GroupLayout.bitSize(GroupLayout.java:61)
	at jdk.incubator.foreign/jdk.internal.foreign.LayoutPath.groupElement(LayoutPath.java:142)
	at jdk.incubator.foreign/jdk.incubator.foreign.MemoryLayout$PathElement.lambda$groupElement$0(MemoryLayout.java:584)
	at jdk.incubator.foreign/jdk.internal.foreign.LayoutPath$PathElementImpl.apply(LayoutPath.java:331)
	at jdk.incubator.foreign/jdk.incubator.foreign.MemoryLayout.computePathOp(MemoryLayout.java:536)
	at jdk.incubator.foreign/jdk.incubator.foreign.MemoryLayout.bitOffset(MemoryLayout.java:364)
	at jdk.incubator.foreign/jdk.incubator.foreign.MemoryLayout.byteOffset(MemoryLayout.java:415)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.StructBuilder.emitSegmentGetter(StructBuilder.java:203)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.StructBuilder.addVar(StructBuilder.java:140)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.visitVariable(OutputFactory.java:457)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.visitVariable(OutputFactory.java:55)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.DeclarationImpl$VariableImpl.accept(DeclarationImpl.java:174)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.lambda$visitScoped$0(OutputFactory.java:185)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.visitScoped(OutputFactory.java:185)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.visitScoped(OutputFactory.java:55)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.DeclarationImpl$ScopedImpl.accept(DeclarationImpl.java:294)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.generateDecl(OutputFactory.java:136)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.generate(OutputFactory.java:109)
	at jdk.incubator.jextract/jdk.internal.jextract.impl.OutputFactory.generateWrapped(OutputFactory.java:96)
	at jdk.incubator.jextract/jdk.incubator.jextract.JextractTool.generate(JextractTool.java:121)
	at jdk.incubator.jextract/jdk.incubator.jextract.JextractTool.run(JextractTool.java:256)
	at jdk.incubator.jextract/jdk.incubator.jextract.JextractTool.main(JextractTool.java:157)
In memory compilation failed: x_h.java:127: error: illegal start of expression
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(                public static long sizeof() { return $LAYOUT().byteSize(); }
                                                                                                ^
warning: using incubating module(s): jdk.incubator.foreign
1 error
1 warning;;;","2021-03-02 05:29;sundar;[~mcimadamore] suggests the following fix:

diff --git a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java
index 91df57e8e8e..ac7b2a16e53 100644
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java
@@ -132,6 +132,12 @@ class StructBuilder extends ConstantBuilder {
     @Override
     public void addVar(String javaName, String nativeName, MemoryLayout layout, Class<?> type) {
+        try {
+            structLayout.byteOffset(elementPaths(nativeName));
+        } catch (UnsupportedOperationException uoe) {
+            // bad layout - do nothing
+            return;
+        }
         if (type.equals(MemorySegment.class)) {
             emitSegmentGetter(javaName, nativeName, layout);
         } else {;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) FileStore.supportsFileAttributeView might return false negative in case of ext3,JDK-8262844,5043476,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azeller,azeller,azeller,2021-03-02 03:04,2021-12-06 12:17,2023-10-01 09:57,2021-03-05 03:02,11,16,17,,,,,,17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok-next,jdk16u-fix-yes,noreg-hard,,,,,,,,,,,,,,,,,"On several of our Suse Linux Enterprise Server 12 and 15 machines I can see that FileStore.supportsFileAttributeView on an ext3 mount returns false but in reality the FS supports extended file attributes and it is possible to write them from Java.
I attached a short program to check this. Here is an example output:

># bin/java TestUDFAV /priv/
FileSystemProvider: sun.nio.fs.LinuxFileSystemProvider@764c12b6
FileStore.supportsFileAttributeView says: false
UserDefinedFileAttributeView: sun.nio.fs.LinuxUserDefinedFileAttributeView@33909752
UserDefinedFileAttributeView.list() returned []
UserDefinedFileAttributeView.write(""user.test"", ...)
UserDefinedFileAttributeView.list() returned [user.test]


># cat /proc/mounts
...
/dev/mapper/vg_a-lv_prod /prod ext3 rw,relatime,data=ordered 0 0
...


The behavior was already adjusted to some corner cases several times. I am not sure why there is a special handling for ext3/4 to not call the real check isExtendedAttributesEnabled(dir) for these two file systems. I guess it is for performance reasons, but on the other hand this might not be called with high frequency and it seems to be cached.

I would suggest to skip the special handling for ext3 in LinuxFileStore.java and probe to be sure what is really enabled.
",,,,,,,,,,JDK-8263957,JDK-8276090,JDK-8278202,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8206448,JDK-8009632,,,,,"2021-03-02 06:26;azeller;TestUDFAV.java;https://bugs.openjdk.org/secure/attachment/93428/TestUDFAV.java",,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2rtkz:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-03-02 06:30;alanb;History on this in JDK-8206448, JDK-8009632 and other issues. It would be useful to know if SuSE is enabling extended attributes unconditionally or whether the systems observed have been mounted with to explicitly enable them (the options that the original code used to detect if they are enabled changed at some point).;;;","2021-03-02 06:49;azeller;The mounts in this case are mounted with default options. Sorry I forgot to add the fstab part:
#> cat /etc/fstab
...
/dev/mapper/vg_a-lv_prod /prod               ext3       defaults        1 2
...

It seems to be enabled by default.;;;","2021-03-02 06:51;azeller;Why do we not always just probe the fs by calling isExtendedAttributesEnabled? 
I guess this would be the safest way. Is it for performance reasons?;;;","2021-03-02 07:15;alanb;The probe can be problematic when it is the mount point (FileSystem::getFileStores).;;;","2021-03-02 08:32;azeller;I am sorry, but I do not understand. As far as I understand the code isExtendedAttributesEnabled(UnixPath) is always called on the mount point.Isn't entry().dir the mount point that retrieved from parsing /proc/mounts?

                UnixPath dir = new UnixPath(file().getFileSystem(), entry().dir());
                xattrEnabled = isExtendedAttributesEnabled(dir);

Why is it problematic - I had no issues while testing, but I used only ext3 and ext4 mounts and of course only on small number of systems :-).
;;;","2021-03-02 08:45;alanb;The probing has historically been problematic on some configurations as it requires opening the mount point. Maybe historical now but I think will require wide testing to see if anything comes out of the woodwork. It would be useful to know if there other distributions where ext3 mounts are supporting extended attributes by default.;;;","2021-03-02 13:24;bpb;Apparently as of version 11-SP3, the default file system of SLES was changed to Ext3 [1]. In [2] it is stated that

""The default inode size of ext3 file systems has been increased from 128 bytes to 256 bytes on SLES11, because of extended attributes / ACLs.""

From this it may be inferred that extended attributes are enabled by default from SLES 11. One may therefore suppose that the kernel was built with configuration item CONFIG_EXT3_FS_XATTR set to Y [3].

[1] https://www.suse.com/releasenotes/x86_64/SUSE-SLES/11-SP3/, section 6.8
[2] https://www.suse.com/support/kb/doc/?id=000017683
[3] https://cateee.net/lkddb/web-lkddb/EXT3_FS_XATTR.html;;;","2021-03-03 03:21;clanger;Thanks, [~bpb] for coming up with that information. I think Arno is also digging a bit further into this. But, after all, I believe we could only improve the guessing here unless we really rely on probing. [~azeller], could you try out a patch that always does the probing in our test landscape? I think we have a certain diversity there, include quite a few older OS releases.

On another note, but related, we also figured out that there can be a disconnect between LinuxFileStore::supportsFileAttributeView and LinuxFileSystemProvider::getFileAttributeView. You'll always get a UserDefinedFileAttributeView, even in case the answer of LinuxFileStore::supportsFileAttributeView is false. But I guess that should be reported in a different item.;;;","2021-03-03 03:36;alanb;[~clanger] Just on the your second note, this is expected behavior. The Linux file system provider supports UserDefinedFileAttributeView so getFileAttributeView should always succeed. You have no idea which underlying file system will be used until you go to access the file. If they aren't supported by the underlying file system (FileStore in the API) then it will just fail at access time.;;;","2021-03-05 03:02;roboduke;Changeset: 8d3de4b1
Author:    Arno Zeller <azeller@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2021-03-05 11:02:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8d3de4b1
;;;","2021-03-11 08:00;clanger;Fix request (16u):
This issue applies to JDK16u as well when using certain ext3 Filesystems.;;;","2021-10-27 23:24;goetz;Fix request [11u]

I want to backport this fix for the ext3/4 file systems.
The workaround removed in the fix is overcome. SLES 11.3 is
already out-of-maintenance, so the issue arises basically 
on all supported SLES systems.
The fix has been used for a while, this should account for the
'wide testing' Alan requires above. 
Therefore I rate the risk as low.

Applies clean. Nightly testing passed.;;;",,,,,,,,,,,,,,,,
Clarify the behavior of PhantomReference::refersTo,JDK-8262841,5043060,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,webbuggrp,webbuggrp,2021-02-26 15:37,2022-04-06 22:04,2023-10-01 09:57,2021-06-30 15:44,16,,,,,,,,17,core-libs,,0,dcsad,noreg-doc,webbug,,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When JDK-8188055 added Reference.refersTo, there were some concerns regarding how PhantomReference should behave. In the end it appears PhantomReference.refersTo got the functionality to check whether the reference still refers to an object (at least latest jdk.java.net builds do):
```
Object o = new Object();
PhantomReference<Object> ref = new PhantomReference<>(o, null);
ref.refersTo(null); // false
ref.refersTo(o); // true
```

However the current documentation for PhantomReference does not make this obvious, especially since the documentation for `Reference.get()` says that instead of `get() == ...` one should use `refersTo(...)`, but `PhantomReference.get()` is documented as always returning `null`.

Therefore it would be good to adjust the PhantomReference documentation in the following ways:
- Class documentation section with ""The {@code get} method of a phantom reference always returns {@code null}"" should mention that `refersTo` can be used.
- Constructor documentation should be rephrased. It might now be a legit use-case to use `null` as queue and call `refersTo` (at least it is not ""completely useless"" anymore)
- `refersTo` should be overridden to allow mentioning in documentation that this method works for PhantomReference






",,,,,,,,,,JDK-8270688,JDK-8269721,,,,,,,,,,,,,,JDK-8269688,,,,,,,,,,,,,,,,,,JDK-8188055,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rr0j:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-03-02 01:30;adev;PhantomReference  documentation https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/ref/PhantomReference.html needs some tweaking as follows:
- Class documentation section with ""The {@code get} method of a phantom reference always returns {@code null}"" should mention that `refersTo` can be used.
- Constructor documentation should be rephrased. It might now be a legit use-case to use `null` as queue and call `refersTo` (at least it is not ""completely useless"" anymore)
- `refersTo` should be overridden to allow mentioning in documentation that this method works for PhantomReference ;;;","2021-06-30 09:40;mchung;`refersTo` behaves the same for the soft, weak, and phantom references whereas `PhantomReference::get` always returns `null` which is different than soft and weak references.    Clarification in the spec of PhantomReference that `refersTo` can be used would help.;;;","2021-06-30 15:44;roboduke;Changeset: 9ac63a6e
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2021-06-30 22:43:23 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/9ac63a6e08c18ed99b97fe0abcc0ac51b96a563e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
handle split_USE correctly,JDK-8262837,5043468,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jzhu,jzhu,jzhu,2021-03-02 00:50,2021-07-15 03:01,2023-10-01 09:57,2021-03-04 10:21,11,16,17,,,,,,17,hotspot,,0,c2,c2-regalloc,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,openjdk,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,There's a potential issue in reg split. This function of split_USE does not generate spill copy in some cases. But the caller always assume it will create new spill copy. So the caller may skip some instruction.,,,,,,,,,,JDK-8263737,JDK-8264122,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rtj7:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-04 10:21;roboduke;Changeset: f56c9186
Author:    Kuai Wei <kuaiwei.kw@alibaba-inc.com>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-03-04 18:20:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f56c9186
;;;","2021-03-24 01:19;roland;11u Fix Request
 
Backporting this patch fixes a bug in the c2 register allocator. While I don't think this is known to have caused issues, bugs in the register allocator could be hard to diagnose so pro-actively fixing that bug seems reasonable. This is also required for parity. Patch applies cleanly to 11u. tier1 tests pass with the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] C2 compilation fails with assert ""should be addp but is Phi""",JDK-8262831,5043461,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,yyang,thartmann,thartmann,2021-03-02 00:08,2023-09-20 01:47,2023-10-01 09:57,2021-03-29 22:43,22,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla/open/src/hotspot/share/opto/memnode.cpp:3913), pid=171603, tid=171616
#  assert(base->is_AddP()) failed: should be addp but is Phi

Current CompileTask:
C2:    277   25 %     4       MainClass::test @ 10 (88 bytes)

Stack: [0x00007f6758436000,0x00007f6758537000],  sp=0x00007f67585316b0,  free space=1005k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x149f150]  InitializeNode::can_capture_store(StoreNode*, PhaseGVN*, bool) [clone .part.0]+0x420
V  [libjvm.so+0x14aa43e]  StoreNode::Ideal(PhaseGVN*, bool)+0x5de
V  [libjvm.so+0x167afdd]  PhaseIterGVN::transform_old(Node*)+0xed
V  [libjvm.so+0x16734ce]  PhaseIterGVN::optimize()+0x7e
V  [libjvm.so+0xa4da4a]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x6da
V  [libjvm.so+0xa49a8b]  Compile::Optimize()+0xb3b
V  [libjvm.so+0xa4c493]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1a53
V  [libjvm.so+0x861c98]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f8
V  [libjvm.so+0xa5c471]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xea1
V  [libjvm.so+0xa5d0f8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1921ba6]  JavaThread::thread_main_inner()+0x256
V  [libjvm.so+0x1928030]  Thread::call_run()+0x100
V  [libjvm.so+0x15eaea6]  thread_native_entry(Thread*)+0x116


primitive class MyValue {
    int b = 2;
}

class MainClass {

    int iField;
    MyValue c;
    MyValue t;
  
    void test(MyValue[] array) {
        for (int i = 0; i < 10; ++i) {
            for (int j = 0; j < 10; ++j) {
                iField = 6;
            }
            for (int j = 0; j < 2; ++j) {
                iField += array[0].b;
            }
            MyValue[] array2 = {new MyValue()};
            c = array[0];
            array2[0] = t;
        }
    }

    public static void main(String[] args) {
        MainClass q = new MainClass();
        MyValue[] array = {new MyValue()};
        for (int i = 0; i < 50_000; ++i) {
            q.test(array);
        }
    }
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rthn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-10 22:34;yyang;Hi Tobias,

Can I request a try to fix this problem if you are not working on it? I am a c2 newbie with only hobbies and no experience. Here are some of my investigations, I'm not sure they are all correct..

```code
Line19: MyValue[] array2 = {new MyValue()};
Line20: c = array[0];                       // LoadI other_adr,
                                    		   // StoreI c=LoadI
Line21: array2[0] = t;                      // StoreI adr=val
```

In the [source code](https://github.com/openjdk/valhalla/blob/lworld/src/hotspot/share/opto/memnode.cpp#L3906), other_adr is the input of LoadI other_adr(Line20) which represents array[0], adr is the input of StoreI(Line21) which represents array2[0].

InitializeNode::can_capture_store check if there are any usage of array2[0] between its allocation and assignment. The guts of this problem are that while the alias index of other_adr and adr are equal, can_capture_store thinks they are both AddP nodes. In fact, other_adr is a Phi node, thus hitting the assertion. I believe this is an upstream JDK bug, the condition should be:
```memnode.cpp#line3906
              if (other_alias_idx == alias_idx && other_adr->is_AddP())
```
I'm not sure if I've explained it clearly and correctly. Please feel free to add more comments.

Cheers,
Yang;;;","2021-03-15 00:19;thartmann;Hi Yang,

sorry for the late reply. Thanks a lot for putting some effort into investigating this one. Your analysis seems reasonable to me but I'm wondering why we never hit this in upstream JDK. It would be great if we could come up with a test that triggers this with the latest upstream JDK.

Thanks,
Tobias;;;","2021-03-15 00:35;yyang;Hi Tobias,

Thanks for your reply! Your concern makes sense, I can try to investigate further to see if this bug can be triggered in upstream JDK(which is equivalent to verifying whether it is an upstream bug).

Thanks!
Yang;;;","2021-03-15 02:03;thartmann;Sounds good, thank you!;;;","2021-03-19 09:22;yyang;Hi Tobias,

With more investigation, I found more...

Let me summarize them: C2 wants to check whether there are other mem nodes between line19 and line21 that read or write the array2, because it hopes to merge line19 and line21 into an InitializeNode. If it finds that there are any reads or writes, such as LoadI in line20, then its adr must be an AddP. But in fact, it may be a Phi, so an assertion is hit.

Why does Phi appear on line20 as the input of LoadI? Because the loop unrolling (PhaseIdealLoop::do_unroll) occurred in lines 13-15, it produced a cloned node of the parameter array(not as straightforward as I said, actually it's a CastPP Node which produced via extra steps), and then the parameter array and the cloned nodes were merged, thus a Phi node appeared.

To prove this, you can delete line 13-15, eliminate loop unrolling, and the program can work normally. I failed to write a test case in the upstream JDK to reproduce this problem, but I think this is an upstream bug, i.e. checking if it's a Phi node rather than putting an assert there.

Best Regards,
Yang;;;","2021-03-23 02:18;thartmann;Hi Yang,

thanks for the details, your analysis looks correct to me. I would assume it's not reproducible in mainline because we can't perform such aggressive scalarization for non-inline types. It therefore probably makes sense to only fix this in Valhalla code for now. Do you want to take care of the fix?

Best regards,
Tobias;;;","2021-03-23 04:09;yyang;Yes, I'm glad to try fixing it in Valhalla.

Thank you for taking your time to discuss this with me!;;;","2021-03-23 08:51;thartmann;Great, thanks!;;;","2023-09-20 01:47;mdoerr;We have seen ""assert(base->is_AddP()) failed: should be addp but is Phi"" (memnode.cpp:3891) while running ""tools/javac/patterns/PatternDesugaring"" (only once) in mainline. JDK 22 is affected.;;;",,,,,,,,,,,,,,,,,,,
Native crash in Win32PrintServiceLookup.getAllPrinterNames(),JDK-8262829,5043459,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aivanov,shadowbug,shadowbug,2021-03-01 23:48,2021-06-21 07:59,2023-10-01 09:57,2021-03-09 03:37,11,7,8,8u271,,,,,17,client-libs,,0,11-bp,7-bp,8-bp,8bpr-critical-approved,azul-interest,bugdb_32573344,cssn21_03_01,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok-next,jdk16u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-hard,redhat-interest,sustaining,,"Java native crash in Win32PrintServiceLookup.getAllPrinterNames()

The crash happens when the JVM tries to refresh the printers from the OS. The class sun.print.Win32PrintServiceLookup defines a native method 'getAllPrinterNames()' and the crash happens inside that method.",,,,,,,,,,JDK-8263020,JDK-8263022,JDK-8263023,JDK-8264015,JDK-8263021,JDK-8263816,JDK-8264719,JDK-8268112,JDK-8267369,JDK-8267367,,,,,,,,,,,,,,JDK-6996051,JDK-8182683,,,,,,,,,JDK-8263943,JDK-8240518,JDK-8241829,,,,"2021-03-04 13:06;aivanov;PrinterRename.ps1;https://bugs.openjdk.org/secure/attachment/93468/PrinterRename.ps1",,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2rth7:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-04 04:25;aivanov;This bug reports the crash which is also reported in JDK-6996051 and JDK-8182683.;;;","2021-03-04 12:44;aivanov;Stack trace from hs_err*.log file:

Stack: [0x455c0000,0x45610000],  sp=0x4560f10c,  free space=316k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [ucrtbase.dll+0x42e67]
C  [awt.dll+0x72030]
C  [awt.dll+0x70cde]
j  sun.print.Win32PrintServiceLookup.refreshServices()V+2
j  sun.print.Win32PrintServiceLookup.access$200(Lsun/print/Win32PrintServiceLookup;)V+1
j  sun.print.Win32PrintServiceLookup$PrinterChangeListener.run()V+29
j  java.lang.Thread.run()V+11
v  ~StubRoutines::call_stub
V  [jvm.dll+0x165e44]
V  [jvm.dll+0x236b5b]
V  [jvm.dll+0x1665f7]
V  [jvm.dll+0x166536]
V  [jvm.dll+0x101c0b]
V  [jvm.dll+0x18a624]
V  [jvm.dll+0x1cfa9b]
C  [ucrtbase.dll+0x407af]
C  [KERNEL32.DLL+0x162c4]
C  [ntdll.dll+0x60779]
C  [ntdll.dll+0x60744]
C  0x00000000

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  sun.print.Win32PrintServiceLookup.getAllPrinterNames()[Ljava/lang/String;+0
j  sun.print.Win32PrintServiceLookup.refreshServices()V+2
j  sun.print.Win32PrintServiceLookup.access$200(Lsun/print/Win32PrintServiceLookup;)V+1
j  sun.print.Win32PrintServiceLookup$PrinterChangeListener.run()V+29
j  java.lang.Thread.run()V+11
v  ~StubRoutines::call_stub;;;","2021-03-04 13:02;aivanov;Root cause:

getPrinterNames() has two calls to ::EnumPrinters. The first call is to get the required buffer size to contain the structures and any strings. The second call is to get the list of printers.

Yet the list of printers or the names of printers can change between the two calls. If it happens, the second call to EnumPrinters fails but it is not checked.

I couldn't reproduce the crash myself. However, I reproduced the failure in the second call to ::EnumPrinters by adding ::Sleep(500) and by renaming the printers so that the data doesn't fit into the allocated buffer:

1: bResult: 0, cbNeeded: 504, cReturned: 0
2: bResult: 0, cbNeeded: 512, cReturned: 0
    !!! error

During my testing, cReturned has always been zero whenever EnumPrinters fails.

The crash dumps show that cReturned is non-zero but the pPrinterEnum buffer doesn't contain valid data. Reading info4->pPrinterName at the line
        utf_str = JNU_NewStringPlatform(env, info4->pPrinterName);
raises Access Violation exception.;;;","2021-03-09 03:37;roboduke;Changeset: a6e34b3d
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2021-03-09 11:36:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a6e34b3d
;;;","2021-03-09 04:32;aivanov;Fix Request (16u)

- Justification: Prevent a crash in native code when updating the list of printers
- Risk Analysis: Low, check return value of EnumPrinters function
- Testing: No specific testing; tests which use printers on Windows use this code path

The patch from jdk-dev (17) applies cleanly to 16u.;;;","2021-03-16 04:34;mdoerr;Fix Request (11u)
Should get backported for parity with 11.0.12-oracle. Applies cleanly.;;;","2021-03-16 05:59;aivanov;JDK-8240518 and JDK-8241829 were also backported with this fix to make printer handling code up-to-date across Java release families.;;;","2021-05-19 00:06;yan;Fix request (13u)
I'd like to port it to jdk13u, too. The regular nightly testing runs OK. Applies clean.;;;","2021-05-19 00:54;yan;Fix request (15u):
this fix should be ported here, too. Applies cleanly.;;;","2021-06-02 07:42;akasko;Fix Request (8u):

Backport to 8u requested because it is a part of 8u301-oracle. Patch applies cleanly after paths changes. Testing: jtreg:javax/print, jck:api/javax_print. Exported 8u changeset:

https://cr.openjdk.java.net/~akasko/jdk8u/8262829/8262829_8u.patch;;;",,,,,,,,,,,,,,,,,,
jextract crashes when Java type names like String are used as identifiers in C header,JDK-8262825,5043455,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-03-01 21:56,2021-03-02 03:14,2023-10-01 09:57,2021-03-02 03:14,repo-panama,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"jextract crashes with libhttrack-dev's htsstrings.h 
jextract -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include htsstrings.h 
WARNING: Using incubator modules: jdk.incubator.jextract, jdk.incubator.foreign
In memory compilation failed: warning: using incubating module(s): jdk.incubator.foreign
htsstrings_h.java:2705: error: method libraries in class RuntimeHelper cannot be applied to given types;
    static final LibraryLookup[] LIBRARIES = RuntimeHelper.libraries(new String[] {
                                                          ^
  required: java.lang.String[]
  found:    htsstrings_h.String[]
  reason: varargs mismatch; htsstrings_h.String[] cannot be converted to java.lang.String
1 error
1 warning

Smaller test is as follows:

File:  x.h

typedef long long size_t;
  
struct String {
  char *buffer_;
  size_t length_;
  size_t capacity_;
};

jextract x.h 
WARNING: Using incubator modules: jdk.incubator.jextract, jdk.incubator.foreign
In memory compilation failed: warning: using incubating module(s): jdk.incubator.foreign
x_h.java:89: error: method libraries in class RuntimeHelper cannot be applied to given types;
    static final LibraryLookup[] LIBRARIES = RuntimeHelper.libraries(new String[] {
                                                          ^
  required: java.lang.String[]
  found:    x_h.String[]
  reason: varargs mismatch; x_h.String[] cannot be converted to java.lang.String
1 error
1 warning",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rtgb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gc/shenandoah/compiler/TestLinkToNativeRBP.java fails with release VMs,JDK-8262819,5043444,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-03-01 18:40,2021-07-15 03:01,2023-10-01 09:57,2021-03-02 01:30,17,,,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-self,oracle-triage-17,tencent-interest,,,,,,,,,,,,,,,,,,,"
STDOUT:
Error occurred during initialization of VM
Heuristics ""Aggressive"" is diagnostic, and must be enabled via -XX:+UnlockDiagnosticVMOptions.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262849,,,,JDK-8259937,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rtdv:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-02 01:30;roboduke;Changeset: 0f6122b9
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-03-02 09:30:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0f6122b9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong context origin coordinates when using EGL and HiDPI,JDK-8262802,5043424,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpereda,jpereda,jpereda,2021-03-01 12:10,2021-03-05 00:41,2023-10-01 09:57,2021-03-05 00:41,,,,,,,,,jfx17,javafx,,0,,,,,,,,,,,,,,,,,,,,,,,"When using EGL, com.sun.prism.es2.ES2SwapChain calculates the context origin coordinates (contextX, contentY), based on the screen coordinates, mixing up values with different scales: for instance screenHeight is in logical pixels while ouputHeight is in physical pixels.

While this works for regular embedded devices with no HiDPI (scale is 1.0), that is not the case on Android, which has HiDPI support and output scale is greater than 1.0.

Since the context coordinates are in physical pixels, all magnitudes should be scaled accordingly.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-03 14:25;jpereda;es2swapchain_egl_hidpi.png;https://bugs.openjdk.org/secure/attachment/93450/es2swapchain_egl_hidpi.png",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rt9f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-03-03 14:24;jpereda;The attached drawing tries to show the issue, when showing a popup on an Android device with output scales X/Y 3.5, and using EGL.

While ES2 context is in physical pixels, the JavaFX screen dimensions are in logical pixels. 

The presentable state needs ContextWidth and ContextHeight, which are correctly calculated, based on outputWidth and outputHeight.

However, [ContextX][contextx] and [ContextY][contexty] mixes wrong values when output scales are > 1.0 (using HiDPI), as can be seen from the drawing.  

[contextx]: https://github.com/openjdk/jfx/blob/master/modules/javafx.graphics/src/main/java/com/sun/prism/es2/ES2SwapChain.java#L263
[contexty]: https://github.com/openjdk/jfx/blob/master/modules/javafx.graphics/src/main/java/com/sun/prism/es2/ES2SwapChain.java#L274
;;;","2021-03-05 00:41;roboduke;Changeset: e394b0a6
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2021-03-05 08:40:39 +0000
URL:       https://git.openjdk.java.net/jfx/commit/e394b0a6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
RenderPipelineState assertion error in J2DDemo,JDK-8262751,5043367,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,avu,jdv,jdv,2021-03-01 05:51,2021-09-01 18:46,2023-10-01 09:57,2021-08-26 00:30,17,,,,,,,,18,client-libs,,0,code-review,lanai,macos,,,,,,,,,,,,,,,,,,,,"Enable Metal API validation and set default display as External monitor. Run J2DDemo->Transforms tab -> Perform multiple plug/unplug of external monitor

We get error :
[V] MTLRenderQueue_flushBuffer: opcode=51, rem=1404
[I] MTLContext.setClipRect: 0,0 - 1118,440
[I] MTLClip.setClipRect: x=0 y=0 w=1118 h=440
[V] MTLRenderQueue_flushBuffer: opcode=101, rem=1384
[I] MTLContext.setColorPaint: pixel=ff000000 [r=0 g=0 b=0 a=255]
[V] MTLRenderQueue_flushBuffer: opcode=22, rem=1376
[I] MTLRenderer_FillParallelogram(x=  0.25 y=  0.25 dx1=1118.00 dy1=  0.00 dx2=  0.00 dy2=440.00 dst tex=0x7ff38bdebbb0)
[V] MTLRenderQueue_flushBuffer: opcode=90, rem=1348
[V] MTLRenderQueue_flushBuffer: opcode=70, rem=1344
[V] MTLContext_SetSurfaces: bsrc=0x7ff38d2e0110 (tex=0x7ff38cfbe4f0 type=5), bdst=0x7ff38d2e0110 (tex=0x7ff38cfbe4f0 type=5)
[V] MTLRenderQueue_flushBuffer: opcode=51, rem=1324
[I] MTLContext.setClipRect: 0,0 - 850,600
[I] MTLClip.setClipRect: x=0 y=0 w=850 h=600
[V] MTLRenderQueue_flushBuffer: opcode=20, rem=1304
[I] MTLRenderer_FillRect
[I] MTLRenderer_FillRect (x=0 y=0 w=850 h=600), dst tex=0x7ff38cfbe4f0
[V] MTLContext : commandBuffer is NULL
-[MTLDebugRenderCommandEncoder validateCommonDrawErrors:instanceCount:baseInstance:maxVertexID:]:3889: failed assertion `renderPipelineState must be set.'
Abort trap: 6",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262936,,,,,,"2021-08-11 13:22;avu;RenderPipelineState.patch;https://bugs.openjdk.org/secure/attachment/95982/RenderPipelineState.patch",,,,,,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i2rswr:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-01 05:53;jdv;Since this is not a crash and happens only after multiple plug/unplug i have not added critical label.;;;","2021-03-02 00:54;jdv;Observation :
Added additional logs and saw that in this particular scenario we are reaching common MTLPaint.setPipelineState() where we set PipelineState only for textures. So we return without setting pipelineState and it is causing this assertion error.;;;","2021-04-23 04:35;avu;Could you provide some details on the hardware that was used to reproduce this problem? I'm unable to do it on MBP15 2019 with a discrete card. ;;;","2021-05-03 02:12;jdv;[~avu]This was tested using MacBook Pro 13 inch early 2015 model having Intel integrated SoC with Intel Iris Graphics 6100 1536 MB;;;","2021-07-08 14:23;vdyakov;- no resources to fix in JDK 17
- not a critical  / stopper and since we are approaching JDK 17 RDP2, it is better do not jeopardize stabilization / testing and re-target to 18.;;;","2021-07-19 06:14;jdv;I ws able to reproduce the issue on latest code and noticed that we hit reset_paint call, which actually moves MTLPaint state to UNDEFINED.
And after that we are drawing primitive without setting any paint state, which is making it to pick MTLPaint.setRenderPipelineState() which supports only texture based operations.

[I] MTLContext_ResetTransform
[V] MTLRenderQueue_flushBuffer: opcode=58, rem=160
[V] MTLContext_ResetComposite
[V] MTLRenderQueue_flushBuffer: opcode=55, rem=156
[I] MTLContext.resetClip
[V] MTLRenderQueue_flushBuffer: opcode=100, rem=152
[V] MTLRenderQueue_CheckPreviousOp: new op=3
[I] MTLContext.resetPaint
[V] MTLRenderQueue_flushBuffer: opcode=90, rem=148
[V] MTLRenderQueue_flushBuffer: opcode=70, rem=144
[V] MTLRenderQueue_CheckPreviousOp: new op=7
[V] MTLContext_SetSurfaces: bsrc=0x7fe23d4add60 (tex=0x7fe2392b6090 type=5), bdst=0x7fe23d4add60 (tex=0x7fe2392b6090 type=5)
[V] MTLRenderQueue_flushBuffer: opcode=51, rem=124
[I] MTLContext.setClipRect: 0,0 - 1700,1200
[I] MTLClip.setClipRect: x=0 y=0 w=1700 h=1200
[V] MTLRenderQueue_flushBuffer: opcode=22, rem=104
[I] MTLRenderer_FillParallelogram(x=  0.25 y=  0.25 dx1=1700.00 dy1=  0.00 dx2=  0.00 dy2=1200.00 dst tex=0x7fe2392b6090)
[V] MTLContext : commandBuffer is NULL
-[MTLDebugRenderCommandEncoder validateCommonDrawErrors:instanceCount:baseInstance:maxVertexID:]:3889: failed assertion `renderPipelineState must be set.'
Abort trap: 6

With continuous plug/unplug we are hitting wrong state which is causing this issue.;;;","2021-08-05 07:25;vdyakov;Jay doesn’t have access to external monitor,;;;","2021-08-11 13:22;avu;I'm unable to reproduce this failure on MBP16 with discrete video card. I've created the patch according to the evaluation above. So, could you please try it on the machine where it is reproducible.;;;","2021-08-17 03:25;jdv;Tested with the patch and it resolves this issue since we are setting MTLColorPaint default state with no color when we hit default setPipelineState() with no texture.

[~avu] i think we should add similar render pipeline state in default setXorModePipelineState() when texture is not available.;;;","2021-08-23 12:31;avu;[~jdv] Could you look at the latest version of the fix https://github.com/openjdk/jdk/pull/5227;;;","2021-08-26 00:30;roboduke;Changeset: 49b2789a
Author:    Alexey Ushakov <avu@openjdk.org>
Date:      2021-08-26 07:28:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/49b2789a49e4e476dfcdf0a65e061a40264a4683
;;;",,,,,,,,,,,,,,,,,
Crash in J2DDemo after multiple plug/unplug of monitor,JDK-8262750,5043364,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2021-03-01 05:39,2021-03-02 23:36,2023-10-01 09:57,2021-03-01 09:36,internal,,,,,,,,internal,client-libs,,0,code-review,critical,lanai,sn_88,,,,,,,,,,,,,,,,,,,"Enable Metal API validation -> Run J2DDemo -> Move to Arc Curves tab(Any tab will do) -> Keep on plugging and unplugging external monitor connection.

At some point we crash and throw below error :

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fff590f1d3c, pid=28300, tid=57359
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.jdv.open)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-internal+0-adhoc.jdv.open, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Problematic frame:
# C  [MetalTools+0x9d3c]  -[MTLToolsCommandBuffer commit]+0x5d
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262928,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i2rsw3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-01 05:55;jdv;This issue happens everytime we hit SET_SCRATCH_SURFACE opcode.

[V] MTLRenderQueue_flushBuffer: opcode=90, rem=28
[V] MTLRenderQueue_flushBuffer: opcode=71, rem=24
[V] MTLRenderQueue_CheckPreviousOp: new op=7
[V] MTLRenderQueue_flushBuffer: opcode=90, rem=12
[V] MTLRenderQueue_flushBuffer: opcode=73, rem=8
[V] MTLSD_Delete: type=0 0x7fa5da3bbf40 [tex=0x0]
[I] MTLRenderQueue_flushBuffer: limit=16
[V] MTLRenderQueue_flushBuffer: opcode=90, rem=12
[V] MTLRenderQueue_flushBuffer: opcode=71, rem=8
[V] MTLRenderQueue_CheckPreviousOp: new op=7
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fff590f1d3c, pid=76744, tid=56851
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.jdv.open)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-internal+0-adhoc.jdv.open, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Problematic frame:
# C  [MetalTools+0x9d3c]  -[MTLToolsCommandBuffer commit]+0x5d

Added log and observed that this happens only when we try override active MTLContext with new MTLContext in SET_SCRATCH_SURFACE.;;;","2021-03-01 06:30;jdv;We need flush the commandQueue before we set new MTLContext when we already have active MTLContext. Even in OpenGL before we override the context we call glFlush() to maintain appropriate state.

Made the change and did sanity with J2DDemo, SwingSet2 and Font2DTest.
It resolves this particular crash and there are no regressions noticed.;;;","2021-03-01 06:30;jdv;RenderPerfTest :

Before change:
FlatOval : 39.90 FPS
FlatOvalAA : 9.60 FPS
ClipFlatOval : 10.32 FPS
ClipFlatOvalAA : 9.68 FPS
FlatBox : 84.92 FPS
FlatBoxAA : 58.47 FPS
ClipFlatBox : 96.14 FPS
ClipFlatBoxAA : 93.82 FPS
Image : 83.87 FPS
ImageAA : 83.59 FPS
RotatedBox : 79.36 FPS
RotatedBoxAA : 53.53 FPS
RotatedOval : 43.92 FPS
RotatedOvalAA : 11.64 FPS
LinGrad3RotatedOval : 34.64 FPS
LinGrad3RotatedOvalAA : 10.90 FPS
RadGrad3RotatedOval : 31.06 FPS
RadGrad3RotatedOvalAA : 10.41 FPS
LinGradRotatedOval : 43.53 FPS
LinGradRotatedOvalAA : 12.44 FPS
WiredBubbles : 27.37 FPS
WiredBubblesAA : 9.04 FPS
WiredBox : 89.69 FPS
Lines : 93.21 FPS
LinesAA : 82.95 FPS
FlatQuad : 33.39 FPS
FlatQuadAA : 5.98 FPS
WiredQuad : 30.37 FPS
WiredQuadAA : 8.89 FPS
TextNoAA : 34.54 FPS
TextLCD : 34.68 FPS
TextGray : 32.14 FPS
LargeTextNoAA : 1.32 FPS
LargeTextLCD : 1.34 FPS
LargeTextGray : 1.34 FPS
WhiteTextNoAA : 41.31 FPS
WhiteTextLCD : 41.20 FPS
WhiteTextGray : 41.56 FPS
ArgbSwBlitImage : 5.68 FPS
BgrSwBlitImage : 4.80 FPS
ArgbSurfaceBlitImageRenderer : 93.28 FPS
BgrSurfaceBlitImage : 93.64 FPS

After change :
FlatOval : 40.39 FPS
FlatOvalAA : 9.96 FPS
ClipFlatOval : 10.95 FPS
ClipFlatOvalAA : 10.72 FPS
FlatBox : 83.56 FPS
FlatBoxAA : 60.17 FPS
ClipFlatBox : 95.11 FPS
ClipFlatBoxAA : 95.76 FPS
Image : 82.66 FPS
ImageAA : 83.47 FPS
RotatedBox : 78.83 FPS
RotatedBoxAA : 52.77 FPS
RotatedOval : 43.36 FPS
RotatedOvalAA : 11.11 FPS
LinGrad3RotatedOval : 34.83 FPS
LinGrad3RotatedOvalAA : 10.66 FPS
RadGrad3RotatedOval : 31.52 FPS
RadGrad3RotatedOvalAA : 10.81 FPS
LinGradRotatedOval : 42.86 FPS
LinGradRotatedOvalAA : 12.71 FPS
WiredBubbles : 27.64 FPS
WiredBubblesAA : 9.14 FPS
WiredBox : 90.01 FPS
Lines : 90.86 FPS
LinesAA : 83.24 FPS
FlatQuad : 32.54 FPS
FlatQuadAA : 5.96 FPS
WiredQuad : 30.41 FPS
WiredQuadAA : 8.71 FPS
TextNoAA : 32.50 FPS
TextLCD : 32.90 FPS
TextGray : 32.53 FPS
LargeTextNoAA : 1.32 FPS
LargeTextLCD : 1.30 FPS
LargeTextGray : 1.32 FPS
WhiteTextNoAA : 40.19 FPS
WhiteTextLCD : 41.97 FPS
WhiteTextGray : 40.92 FPS
ArgbSwBlitImage : 5.71 FPS
BgrSwBlitImage : 4.76 FPS
ArgbSurfaceBlitImageRenderer : 90.85 FPS
BgrSurfaceBlitImage : 91.88 FPS;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] print out reason information for Deoptimize instruction,JDK-8262748,5043362,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2021-03-01 04:48,2021-03-02 05:31,2023-10-01 09:57,2021-03-02 05:31,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,,,,,,"The instruction printer only tells that there is a deoptimization instruction, but not indicates they are deoptimized due to which class is not loaded.

Java
----
static void test1(Object[] arr) {
	TestValue v = TestValue.default;
	arr[0] = v;
}
HIR(OLD)
---
. 0    2    a2     deoptimize
. 5    1    i3     0
. 7    0    a4     a1[i3] := a2 (L) [rc] What's the type of a2?
. 8    0    v5     return
HIR(NEW)
---
. 0    2    a2     deoptimize [unloaded=Test$TestValue]
. 5    1    i3     0
. 7    0    a4     a1[i3] := a2 (L) [rc]
. 8    0    v5     return",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rsvn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] C1 compilation fails when PinAllInstructions is turned on,JDK-8262747,5043361,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2021-03-01 04:47,2021-03-02 05:31,2023-10-01 09:57,2021-03-02 05:31,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c1,lw3,lworld,,,,,,,,,,,,,,,,,,,,"When turning on the -XX:+PinAllInstructions, C1 hits the following assertion:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/qingfeng.yy/valhalla/src/hotspot/share/c1/c1_LIRGenerator.cpp:1524), pid=81974, tid=81994
#  assert(!x->is_pinned()) failed: only for unpinned constants
...
Stack: [0x00007fc0771fa000,0x00007fc0772fb000],  sp=0x00007fc0772f89f0,  free space=1018k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x65de6c]  LIRGenerator::load_constant(Constant*)+0x2a
V  [libjvm.so+0x65ee4b]  LIRGenerator::access_sub_element(LIRItem&, LIRItem&, LIR_OprDesc*&, ciField*, int)+0x319
V  [libjvm.so+0x66209c]  LIRGenerator::do_LoadIndexed(LoadIndexed*)+0x846
V  [libjvm.so+0x6277c4]  LoadIndexed::visit(InstructionVisitor*)+0x2e
V  [libjvm.so+0x6586ae]  LIRGenerator::do_root(Instruction*)+0xfc
V  [libjvm.so+0x65856e]  LIRGenerator::block_do(BlockBegin*)+0x7c
V  [libjvm.so+0x62696d]  BlockList::iterate_forward(BlockClosure*)+0x5d
V  [libjvm.so+0x61ee24]  IR::iterate_linear_scan_order(BlockClosure*)+0x2e
V  [libjvm.so+0x5ee90b]  Compilation::emit_lir()+0x95
V  [libjvm.so+0x5ef140]  Compilation::compile_java_method()+0x21e
V  [libjvm.so+0x5ef4af]  Compilation::compile_method()+0x107
V  [libjvm.so+0x5efd05]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x3bb
V  [libjvm.so+0x5f3baf]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xd9
V  [libjvm.so+0x81a938]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x88a
V  [libjvm.so+0x81956b]  CompileBroker::compiler_thread_loop()+0x3df
V  [libjvm.so+0x83bef1]  CompilerThread::thread_entry(JavaThread*, Thread*)+0x69
V  [libjvm.so+0x12fd598]  JavaThread::thread_main_inner()+0x14c
V  [libjvm.so+0x12fd444]  JavaThread::run()+0x11e
V  [libjvm.so+0x12fa630]  Thread::call_run()+0x180
V  [libjvm.so+0x1028936]  thread_native_entry(Thread*)+0x1e4",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rsvf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] jcmd VM.class_print_layout crash due to NULL cld name,JDK-8262746,5043360,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fparain,thartmann,thartmann,2021-03-01 04:46,2021-03-02 07:16,2023-10-01 09:57,2021-03-02 07:16,repo-valhalla,,,,,,,,,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,,,,,,"jcmd VM.class_print_layout crashes when printing classes which loaded by bootstrap loader since these classes has NULL class_loder_data()->name().

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rsv7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Formatter '%g' conversion uses wrong format for BigDecimal rounding up to limits,JDK-8262744,5043097,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,igraves,webbuggrp,webbuggrp,2021-02-28 04:45,2021-05-10 05:34,2023-10-01 09:57,2021-04-16 13:06,11,17,8,,,,,,17,core-libs,,0,17ea,additional-information-received,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10, although the OS is probably irrelevant.

Reproduced both with Java 8 and 17ea:

openjdk version ""1.8.0_222""
OpenJDK Runtime Environment (AdoptOpenJDK)(build 1.8.0_222-b10)
OpenJDK 64-Bit Server VM (AdoptOpenJDK)(build 25.222-b10, mixed mode)

openjdk version ""17-ea"" 2021-09-14
OpenJDK Runtime Environment (build 17-ea+5-266)
OpenJDK 64-Bit Server VM (build 17-ea+5-266, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
When all the following apply:

* using the '%g' conversion with a BigDecimal, 
* the value of the BigDecimal is < 10^-4 (resp. 10^precision)
* the *rounded* value to the specified precision = 10^-4 (resp. 10^precision)

Then, Formatter will format the value with scientific notation instead of fixed notation (resp. fixed instead of scientific).

Note that the JavaDoc clearly specifies that:

> After rounding for the precision, the formatting of the resulting magnitude m depends on its value.

Since the value is rounded up to 10^4 (resp. 10^precision), it should be displayed with fixed (resp. scientific) precision.

Floats and Doubles are correctly displayed depending on their value after rounding.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Using the test file test/Test.java provided below:

$ javac -d bin test/Test.java
$ java -cp bin test.Test

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
0.000100000
0.000100000
0.000100000

1.00000000e+14
1.000e+04
1.00000000e+14
ACTUAL -
0.000100000
0.000100000
1.00000e-04

1.00000000e+14
1.000e+04
1000000000

---------- BEGIN SOURCE ----------
package test;

import java.math.BigDecimal;

public class Test {
  public static void main(String[] args) {
    // Rounding to 10^-4
    System.out.println(String.format(""%g"", 0.00009999999999999995));
    System.out.println(String.format(""%g"", 0.00009999999f));
    System.out.println(String.format(""%g"", new BigDecimal(""0.00009999999999999999995""))); // !!
    
    System.out.println("""");

    // Rounding to 10^precision
    System.out.println(String.format(""%.9g"", 999999.9999994322e+8));
    System.out.println(String.format(""%.4g"", 999.961e1f));
    System.out.println(String.format(""%.9g"", new BigDecimal(""999999.999999432168754e+3""))); // !!
  }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-01 04:15;tongwan;Test.java;https://bugs.openjdk.org/secure/attachment/93417/Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rr8r:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2021-03-01 04:14;tongwan;The observations on Windows 10:
JDK 8: Failed, returned unexpected format.
JDK 11: Failed.
JDK 17ea+6: Failed.;;;","2021-03-29 17:09;smarks;[~igraves] Reassigning for evaluation.;;;","2021-04-05 13:40;igraves;It seems as though rounding isn't applied in the correct spot when determining if the BigDecimal is within the correct range to print. Further evaluation should result in a PR.;;;","2021-04-16 13:06;roboduke;Changeset: 0bdc3e7a
Author:    Ian Graves <igraves@openjdk.org>
Committer: Roger Riggs <rriggs@openjdk.org>
Date:      2021-04-16 20:05:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0bdc3e7a
;;;","2021-05-10 05:04;tongwan;Request the submitter to verify the fix with the latest version of JDK at https://jdk.java.net/17/;;;","2021-05-10 05:34;tongwan;From the submitter:
Yes, I can confirm that the latest version fixes the issue.
Thank you for the fix!
;;;",,,,,,,,,,,,,,,,,,,,,,
String inflation C2 intrinsic prevents insertion of anti-dependencies,JDK-8262739,5042940,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,thartmann,webbuggrp,webbuggrp,2021-02-25 11:44,2021-05-25 00:15,2023-10-01 09:57,2021-03-29 05:41,11,15,16,17,9,,,,17,hotspot,,0,additional-information-received,c2,dcsaw,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,redhat-interest,regression,reproducer-yes,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Reproduced on Mac OS with both Java 11 and Java 15

A DESCRIPTION OF THE PROBLEM :
We observed that the reverse() method of the org.apache.commons.lang.StringUtils class contained in Apache commons-lang version 2.6 started returning incorrect results after thousands of iterations.

The reason we suspect an issue with compact strings and the optimizer is because:

1. The bug only reproduces with strings which can be represented compactly (all code points < 256)
2. The bug only reproduces after calling the method in a loop for an indeterminate number of times (the range we've seen is from a minimum of around 50K iterations to a maximum of around 135K iterations).
3. The bug does not reproduce when compact strings are disabled via -XX:-CompactStrings
4. The bug does not reproduce when the optimizer is disabled via -Djava.compiler=NONE

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the attached source code.  A couple of ways you can reproduce it:

1. Clone the repository I created at https://github.com/jyemin/compact-strings-bug and execute ""./gradlew run"".
2. Manually download commons-lang jar file from https://repo1.maven.org/maven2/commons-lang/commons-lang/2.6/ and compile the attached source code with this jar in your classpath

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Expected that the following would be printed:

  Original string: 123456
  Expected reversed string: 654321

  Completed normally.  Exiting.
ACTUAL -
Instead, the following is printed:

  Original string: 123456
  Expected reversed string: 654321

  Iteration: 118306
  Actual: 654326

  Iteration: 118307
  Actual: 654326

  Iteration: 118308
  Actual: 654326

  Iteration: 118309
  Actual: 654326

  Iteration: 118310
  Actual: 654326

  Exiting after 5 failures

A few additional observations:

1. The number of iterations before it starts returning incorrect results varies, but once it starts behaving incorrectly, every subsequent call behaves incorrectly, in exactly the same way
2. It also seems to be the case that there is a single incorrect character in the reversed string.  It's always the last character, and instead of being the expected first character from the original string, it's the last character from the original string.


---------- BEGIN SOURCE ----------
import org.apache.commons.lang.StringUtils;

public class CompactStringBug {

    protected static final int MAX_FAILURES = 5;

    public static void main(String[] args) {
        final String id = ""123456"";
        final String expectedReversedId = ""654321"";

        /*
          The bug does not reproduce if you include a multibyte character in the string
        */
//        final String id = ""12345\u1234"";
//        final String expectedReversedId = ""\u123454321"";

        System.out.println(""Original string: "" + id);
        System.out.println(""Expected reversed string: "" + expectedReversedId);
        System.out.println();

        int failures = 0;
        for (int i = 0; i < Integer.MAX_VALUE; i++) {
            String reversedId = StringUtils.reverse(id);
            if (!expectedReversedId.equals(reversedId)) {
                failures++;
                System.out.println(""Iteration: "" + i);
                System.out.println(""Actual: "" + reversedId);
                System.out.println();
                if (failures == MAX_FAILURES) {
                    System.out.println(""Exiting after "" + MAX_FAILURES + "" failures"");
                    System.exit(1);
                }
            }
        }
        System.out.println(""Completed normally.  Exiting."");
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
We've found a number of workarounds.  The most straightforward is to replace use of commons-lang StringUtils with java.lang.StringBuilder#reverse.  

These are some other ways we've worked around the bug during analysis, but only the first is practicable in production:

1. Disable compact strings, e.g. by starting java with -XX:-CompactStrings
2. Disable the optimizer, e.g. by starting java with -Djava.compiler=NONE
3. Ensure that at least one character in the string is multibyte (i.e. code point > 255)


FREQUENCY : always


",,,,,,,,,,JDK-8264478,JDK-8264913,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8141132,,,,,,"2021-02-26 07:24;tongwan;CompactStringBug.java;https://bugs.openjdk.org/secure/attachment/93396/CompactStringBug.java",,,,,,,,,,,,,,,,,b93,9,,,,,,,,"0|i2rq9v:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-02-26 03:23;tongwan;Requested more details from the submitter to compile the reproducer.;;;","2021-02-26 07:23;tongwan;Additional information from the submitter:
1. Clone the repository at https://github.com/jyemin/compact-strings-bug, and use Gradle to download it by running the command ""./gradlew run"".  Gradle is self-installing so that should be all you have to do.  You just need the JDK in your path.
2. Download it manually from https://repo1.maven.org/maven2/commons-lang/commons-lang/2.6/commons-lang-2.6.jar  and compile the test program with ""javac -cp ..."".

A couple of other observations that I've made since submitting the bug report:

1. The common-lang-2.6 jar file was compiled back in 2011 and has a class file version of 47.
2. If I grab the source code for the StringUtils.reverse method recompile it, the bug no longer reproduces.
;;;","2021-02-26 07:25;tongwan;The observations on Windows 10:
JDK 8: Passed.
JDK 11: Failed, exiting after 5 failures
JDK 15: Failed.
JDK 17ea+6: Failed.;;;","2021-03-01 03:42;alanb;[~tongwan] Can you run with -Xint, also -XX:TieredStopAtLevel=1 to see it duplicates? ;;;","2021-03-01 04:49;tongwan;I tried the following command:
java -XX:TieredStopAtLevel=1 -cp .;commons-lang-2.6.jar CompactStringBug
and the test completed normally.;;;","2021-03-04 16:44;bchristi;Here's a clue:
-XX:+PrintIntrinsics indicates the following intrinsics are used during the test:
java.lang.StringUTF16::compress
java.lang.StringLatin1::equals
java.lang.StringLatin1::inflate

Running with -XX:DisableIntrinsic=_inflateStringC causes the problem to disappear.
;;;","2021-03-15 00:14;thartmann;ILW = Incorrect execution of compiled code, with customer application and small reproducer, disable _inflateStringC C2 intrinsic = HMM = P2;;;","2021-03-16 03:07;thartmann;The problem is indeed related to the String inflation intrinsic in C2. It block correct insertion of anti-dependencies between loads/stores from/to a char[], leading to incorrect ordering of instructions after scheduling and therefore incorrect results.;;;","2021-03-29 05:41;roboduke;Changeset: 3caea470
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-03-29 12:40:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3caea470
;;;","2021-04-06 12:54;zgu;11u code review thread: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-April/005608.html;;;","2021-04-06 19:39;tongwan;Request the submitter to verify the fix with the latest version of JDK at https://jdk.java.net/17/;;;","2021-04-07 06:36;zgu;Fix Request (11u)

I would like to backport this patch to 11u for parity with Oracle 11.0.12-oracle.

The original patch does not apply cleanly, 11u change has been reviewed.;;;","2021-04-08 18:42;tongwan;Confirmed:

$ java -version
openjdk version ""17-ea"" 2021-09-14
OpenJDK Runtime Environment (build 17-ea+16-1315)
OpenJDK 64-Bit Server VM (build 17-ea+16-1315, mixed mode, sharing)
$ java -cp build/classes/java/main:commons-lang-2.6.jar CompactStringBug
Original string: 123456
Expected reversed string: 654321
Completed normally.  Exiting.
;;;",,,,,,,,,,,,,,,
jextract generates clashing names which results in compilation error with javac,JDK-8262733,5043350,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-03-01 02:11,2021-03-01 08:35,2023-10-01 09:57,2021-03-01 08:35,repo-panama,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"jextract crashes libbam-dev's sam.h

jextract -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include sam.h 
WARNING: Using incubator modules: jdk.incubator.jextract, jdk.incubator.foreign
WARNING: skipping strtold because of unsupported type usage: long double
WARNING: Layout size not available for sys_errlist
WARNING: Layout size not available for bam_nt16_nt4_table
In memory compilation failed: warning: using incubating module(s): jdk.incubator.foreign
sam_h.java:22182: error: cannot find symbol
                x.tamr$VH.set(seg, x);
                 ^
  symbol:   variable tamr$VH
  location: variable x of type MemoryAddress
sam_h.java:22188: error: cannot find symbol
                x.tamr$VH.set(seg.asSlice(index*sizeof()), x);
                 ^
  symbol:   variable tamr$VH
  location: variable x of type MemoryAddress
sam_h.java:22198: error: cannot find symbol
                x.bam$VH.set(seg, x);
                 ^
  symbol:   variable bam$VH
  location: variable x of type MemoryAddress
sam_h.java:22204: error: cannot find symbol
                x.bam$VH.set(seg.asSlice(index*sizeof()), x);
                 ^


With source generation, the problem looks as follows:

public static class x {

            static final MemoryLayout samfile_t$x$union$LAYOUT = MemoryLayout.ofUnion(
                C_POINTER.withName(""tamr""),
                C_POINTER.withName(""bam""),
                C_POINTER.withName(""tamw"")
            );
            public static MemoryLayout $LAYOUT() {
                return x.samfile_t$x$union$LAYOUT;
            }
            static final VarHandle tamr$VH = MemoryHandles.asAddressVarHandle(samfile_t$x$union$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(""tamr"")));
            public static VarHandle tamr$VH() {
                return x.tamr$VH;
            }
            public static MemoryAddress tamr$get(MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)x.tamr$VH.get(seg);
            }
            public static void tamr$set( MemorySegment seg, MemoryAddress x) {
                x.tamr$VH.set(seg, x);
            }

In the            

 public static void tamr$set( MemorySegment seg, MemoryAddress x) 

method, jextract generates second parameter name as ""x"" which clashes with the class name ""x""

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rssz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-03-01 02:22;sundar;All setters and indexed setters are generated with value argument ""x"". While ""x"" is unlikely to be used in C header (that's why it didn't show up with samples, tests), it can be used in C header and it has been!

diff --git a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/HeaderFileBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/HeaderFileBuilder.java
index 09bed9670e0..3a658b139ee 100644
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/HeaderFileBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/HeaderFileBuilder.java
@@ -256,7 +256,7 @@ abstract class HeaderFileBuilder extends JavaSourceBuilder {
     private void emitGlobalSetter(Constant segmentConstant, Constant vhConstant, String javaName, String nativeName, Class<?> type) {
         incrAlign();
         indent();
-        append(MEMBER_MODS + "" void "" + javaName + ""$set("" + "" "" + type.getSimpleName() + "" x) {\n"");
+        append(MEMBER_MODS + "" void "" + javaName + ""$set("" + "" "" + type.getSimpleName() + "" $x) {\n"");
         incrAlign();
         indent();
         append(vhConstant.accessExpression());
@@ -264,7 +264,7 @@ abstract class HeaderFileBuilder extends JavaSourceBuilder {
         append(segmentConstant.accessExpression());
         append("", \"""");
         append(nativeName);
-        append(""\""), x);\n"");
+        append(""\""), $x);\n"");
         decrAlign();
         indent();
         append(""}\n"");
diff --git a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java
index 91df57e8e8e..8218e0ffbd2 100644
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructBuilder.java
@@ -162,10 +162,10 @@ class StructBuilder extends ConstantBuilder {
         incrAlign();
         indent();
         String param = MemorySegment.class.getSimpleName() + "" seg"";
-        append(MEMBER_MODS + "" void "" + javaName + ""$set( "" + param + "", "" + type.getSimpleName() + "" x) {\n"");
+        append(MEMBER_MODS + "" void "" + javaName + ""$set( "" + param + "", "" + type.getSimpleName() + "" $x) {\n"");
         incrAlign();
         indent();
-        append(vhConstant.accessExpression() + "".set(seg, x);\n"");
+        append(vhConstant.accessExpression() + "".set(seg, $x);\n"");
         decrAlign();
         indent();
         append(""}\n"");
@@ -307,12 +307,12 @@ class StructBuilder extends ConstantBuilder {
     private void emitIndexedFieldSetter(Constant vhConstant, String javaName, Class<?> type) {
         incrAlign();
         indent();
-        String params = MemorySegment.class.getSimpleName() + "" seg, long index, "" + type.getSimpleName() + "" x"";
+        String params = MemorySegment.class.getSimpleName() + "" seg, long index, "" + type.getSimpleName() + "" $x"";
         append(MEMBER_MODS + "" void "" + javaName + ""$set("" + params + "") {\n"");
         incrAlign();
         indent();
         append(vhConstant.accessExpression() +
-                "".set(seg.asSlice(index*sizeof()), x);\n"");
+                "".set(seg.asSlice(index*sizeof()), $x);\n"");
         decrAlign();
         indent();
         append(""}\n"");

Had a discussion (offline) on always ""$"" being ugly/punitive (this will eventually show up in javadoc of jextract generated sources). 

We could use ""x$"" only when needed (i.e., when there is name clash). ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"[macOS] Exception from ""Printable.print"" is swallowed during ""PrinterJob.print""",JDK-8262731,5043347,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alitvinov,shadowbug,shadowbug,2021-03-01 01:58,2023-01-18 01:41,2023-10-01 09:57,2021-06-14 06:29,11.0.6,15,16,17,,,,,18,client-libs,,0,bugdb_32563139,cssn21_03_01,cssn21_03_02,cssn21_04_01,cssn21_04_02,cssn21_05_01,cssn21_05_02,cssn21_06_01,cssn21_06_02,Internal,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,jdk8u-jdowland,macos,sustaining,,,"ADDITIONAL OS VERSION INFORMATION :
macOS 10.15.7

A DESCRIPTION OF THE PROBLEM :
If the method ""java.awt.print.Printable.print​(Graphics, PageFormat, int)"" throws ""java.lang.RuntimeException"" or ""java.awt.print.PrinterException"" during the call ""java.awt.print.PrinterJob.print()"", then the exception is swallowed by JDK and a user cannot learn that printing failed and what caused failure of printing, because ""PrinterJob.print()"" method does not throw ""PrinterException"" or the occurred exception is not reported by JDK through the error stream.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1.  Compile and run the attached to this bug test case ""ExceptionFromPrintableIsIgnored.java"".
2.  In the shown window of the test case select a type of an exception that should be thrown from ""java.awt.print.Printable.print"" method and select on which thread the method ""java.awt.print.PrinterJob.print"" should be executed.
3. Click ""Run Test"" button, in the shown dialog select printer and initiate printing.

The bug is reproduced, if no exception is displayed in the text area ""Test Results:"" and no exception is reported in the console at the same time.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED - A printed out stack trace or a thrown exception to indicate to the developer where the problem lies or at least why printing cannot complete normally.
ACTUAL - The exception is swallowed.",,,,,,,,,,JDK-8270895,JDK-8273687,JDK-8273354,JDK-8268970,JDK-8268905,,,,,,,,,,,,,,,,,,,,,,,JDK-8296920,,,,,,JDK-8268675,,,,,,"2021-04-22 05:49;alitvinov;ExceptionFromPrintableIsIgnored.java;https://bugs.openjdk.org/secure/attachment/94341/ExceptionFromPrintableIsIgnored.java",,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2rssb:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-04-14 08:55;prr;This is not a bug. The exception should not propagate. State may need to be cleaned up.
If you do anything you would make it the init cause of the PrinterException.;;;","2021-04-15 10:44;alitvinov;Hello Phil [~prr]. Thank you for looking at this issue and providing your conclusion about it. Until today I have thought that it is a bug, because by the Java SE API Specification ""java.awt.print.Printable.print​(Graphics, PageFormat, int)"" and ""java.awt.print.PrinterJob.print()"" methods can throw ""java.awt.print.PrinterException"" and it seemed incorrect that JDK on macOS does not throw ""PrinterException"" from ""PrinterJob.print()"" method during execution of which ""Printable.print​(Graphics, PageFormat, int)"" method fails by throwing ""PrinterException"". I checked and see that in JDK 17 on MS Windows OS, if ""Printable.print​(Graphics, PageFormat, int) throws ""PrinterException"", then ""PrinterJob.print()"" also fails by throwing ""PrinterException"".

Until today I have been trying to define a proper way of propagation of the exception from the place, where it is currently swallowed in the method ""sun.lwawt.macosx.CPrinterJob.printAndGetPageFormatArea(final Printable, final Graphics, final PageFormat, final int)"" up to the the method ""PrinterJob.print()"", but propagation of this exception seems rather hard, because this path involves execution of code on different threads, going from Java code <--> JNI <--> Java code and in fact it involves callbacks in JDK from AppKit framework like the involved method ""- (NSRect)rectForPage:(NSInteger)page"" of ""NSView"" interface which is implemented by ""PrinterView"" class in ""src/java.desktop/macosx/native/libawt_lwawt/awt/PrinterView.h"".

Phil, can you please answer my next questions?

1) In your comment, did you mean that, if such a propagation of the ""PrinterException"" is implemented as a solution, then it should be implemented in way in which only the original ""PrinterException"" should be thrown from ""PrinterJob.print()"" and chaining of various exceptions on its path should be avoided?

2) It seems that JDK code involved in this issue was designed not assuming propagation of the exception, would it be sufficient if JDK just printed out the exception stack trace to the error stream in the place, where it is currently swallowed?;;;","2021-04-15 13:01;prr;

Hmm. The bug description speaks of throwing RTE. But above you speak of throwing PrinterException.

I don't think we can today claim a reliable way for the app to ensure it sees the exception it on
the thread that started this. Nor have we promised one.

FWIW I tested this on Windows with 8u and JDK 17 and if I throw RTE from the Printable.print *nothing* catches it.
This surprised me - I expected the code inside the PrinterJob implementation that calls the app-supplied
Printable.print to simply catch this and wrap it.
Whereas on macOS it is apparently being swallowed.
We should also test Linux but I did not do so yet.

Our Windows and Linux implementation will call you back on the same thread but that is not specified.
The thread on which the print call back runs is often the same one on which the app called print
but there is no guarantee of that and someone who tested on windows might be surprised on mac.

And it is a bad idea as a result to call printing on the EDT because you can't assume one way or another
and you don't want to block that

So yes, there *maybe* multiple threads involved here.
Hard to say exactly how many depending on which thread you started with and what on macos
needs to run on the appkit thread. 

But that effect where the call back runs on some other unknown thread is partly why I expected us to catch it
because the app might think it is throwing an exception back up to itself but it isn't.

Also we may have called (eg) the windows native startDoc .. and we really don't want an app exception
to make us fail to close that doc.

I haven't looked and can't remember without doing so, but perhaps we do have code to handle that

So we need to check what is happening today on the different platforms and decide if it is the best
and also decide if there is anyway to be better. The  case of what happens in this macOS case is
just one specific.
;;;","2021-04-22 10:56;alitvinov;The test case was developed and attached to the bug record as the file ""ExceptionFromPrintableIsIgnored.java"".

Accomplished experiments using the created test case on different OS versions. Experiments showed that on MS Windows OS and Linux OS the thrown exception was propagated to the code calling ""PrinterJob.print"" method. The results are following:

TEST SCENARIOS EXECUTED ON macOS 10.15.7 WITH JDK 17+19:
1. ""Printable.print"" throws ""PrinterException"", ""PrinterJob.print"" is called on the EDT --> Result: No exception is thrown from ""PrinterJob.print"", no exception is reported in the console.
2. ""Printable.print"" throws ""PrinterException"", ""PrinterJob.print"" is called on the main thread --> Result: No exception is thrown from ""PrinterJob.print"", no exception is reported in the console.
3. ""Printable.print"" throws ""PrinterException"", ""PrinterJob.print"" is called on the new thread --> Result: No exception is thrown from ""PrinterJob.print"", no exception is reported in the console.
4. ""Printable.print"" throws ""RuntimeException"", ""PrinterJob.print"" is called on the EDT --> Result: No exception is thrown from ""PrinterJob.print"", no exception is reported in the console.
5. ""Printable.print"" throws ""RuntimeException"", ""PrinterJob.print"" is called on the main thread --> Result: No exception is thrown from ""PrinterJob.print"", no exception is reported in the console.
6. ""Printable.print"" throws ""RuntimeException"", ""PrinterJob.print"" is called on the new thread --> Result: No exception is thrown from ""PrinterJob.print"", no exception is reported in the console.

TEST SCENARIOS EXECUTED ON MS Windows 10 OS WITH JDK 17+19:
1. ""Printable.print"" throws ""PrinterException"", ""PrinterJob.print"" is called on the EDT --> Result: That ""PrinterException"" was thrown from ""PrinterJob.print"", no exception is reported in the console.
2. ""Printable.print"" throws ""PrinterException"", ""PrinterJob.print"" is called on the main thread --> Result: That ""PrinterException"" was thrown from ""PrinterJob.print"", no exception is reported in the console.
3. ""Printable.print"" throws ""PrinterException"", ""PrinterJob.print"" is called on the new thread --> Result: That ""PrinterException"" was thrown from ""PrinterJob.print"", no exception is reported in the console.
4. ""Printable.print"" throws ""RuntimeException"", ""PrinterJob.print"" is called on the EDT --> Result: That ""RuntimeException"" was thrown from ""PrinterJob.print"", no exception is reported in the console.
5. ""Printable.print"" throws ""RuntimeException"", ""PrinterJob.print"" is called on the main thread --> Result: That ""RuntimeException"" was thrown from ""PrinterJob.print"", no exception is reported in the console.
6. ""Printable.print"" throws ""RuntimeException"", ""PrinterJob.print"" is called on the new thread --> Result: That ""RuntimeException"" was thrown from ""PrinterJob.print"", no exception is reported in the console.

TEST SCENARIOS EXECUTED ON CentOS Linux 8 OS WITH JDK 17+19:
1. ""Printable.print"" throws ""PrinterException"", ""PrinterJob.print"" is called on the EDT --> Result: That ""PrinterException"" was thrown from ""PrinterJob.print"", no exception is reported in the console.
2. ""Printable.print"" throws ""PrinterException"", ""PrinterJob.print"" is called on the main thread --> Result: That ""PrinterException"" was thrown from ""PrinterJob.print"", no exception is reported in the console.
3. ""Printable.print"" throws ""PrinterException"", ""PrinterJob.print"" is called on the new thread --> Result: That ""PrinterException"" was thrown from ""PrinterJob.print"", no exception is reported in the console.
4. ""Printable.print"" throws ""RuntimeException"", ""PrinterJob.print"" is called on the EDT --> Result: That ""RuntimeException"" was thrown from ""PrinterJob.print"", no exception is reported in the console.
5. ""Printable.print"" throws ""RuntimeException"", ""PrinterJob.print"" is called on the main thread --> Result: That ""RuntimeException"" was thrown from ""PrinterJob.print"", no exception is reported in the console.
6. ""Printable.print"" throws ""RuntimeException"", ""PrinterJob.print"" is called on the new thread --> Result: That ""RuntimeException"" was thrown from ""PrinterJob.print"", no exception is reported in the console.;;;","2021-05-25 05:24;alitvinov;On (05/20/2021) I accomplished series of tests of the bug using the test case ""ExceptionFromPrintableIsIgnored.java"" attached to the bug and using various versions of JDK 8. The results of the tests are following:

01.  MS Windows 10 + JDK 8u291 b10 + EDT + ""PrinterException"" --> Passed (""PrinterJob.print"" threw PE)
02.  MS Windows 10 + JDK 8u291 b10 + EDT + ""RuntimeException"" --> Passed (""PrinterJob.print"" threw RE)
03.  MS Windows 10 + JDK 8u291 b10 + main thread + ""PrinterException"" --> Passed (""PrinterJob.print"" threw PE)
04.  MS Windows 10 + JDK 8u291 b10 + main thread + ""RuntimeException"" --> Passed (""PrinterJob.print"" threw RE)

05.  MS Windows 10 + JDK 8 b132 + EDT + ""PrinterException"" --> Passed (""PrinterJob.print"" threw PE)
06.  MS Windows 10 + JDK 8 b132 + EDT + ""RuntimeException"" --> Passed (""PrinterJob.print"" threw RE)
07.  MS Windows 10 + JDK 8 b132 + main thread + ""PrinterException"" --> Passed (""PrinterJob.print"" threw PE)
08.  MS Windows 10 + JDK 8 b132 + main thread + ""RuntimeException"" --> Passed (""PrinterJob.print"" threw RE)

09.  CentOS Linux 8 + JDK 8u291 b10 + EDT + ""PrinterException"" --> Passed (""PrinterJob.print"" threw PE)
10.  CentOS Linux 8 + JDK 8u291 b10 + EDT + ""RuntimeException"" --> Passed (""PrinterJob.print"" threw RE)
11.  CentOS Linux 8 + JDK 8u291 b10 + main thread + ""PrinterException"" --> Passed (""PrinterJob.print"" threw PE)
12.  CentOS Linux 8 + JDK 8u291 b10 + main thread + ""RuntimeException"" --> Passed (""PrinterJob.print"" threw RE)

13.  CentOS Linux 8 + JDK 8 b132 + EDT + ""PrinterException"" --> Passed (""PrinterJob.print"" threw PE)
14.  CentOS Linux 8 + JDK 8 b132 + EDT + ""RuntimeException"" --> Passed (""PrinterJob.print"" threw RE)
15.  CentOS Linux 8 + JDK 8 b132 + main thread + ""PrinterException"" --> Passed (""PrinterJob.print"" threw PE)
16.  CentOS Linux 8 + JDK 8 b132 + main thread + ""RuntimeException"" --> Passed (""PrinterJob.print"" threw RE);;;","2021-06-14 06:29;roboduke;Changeset: c0b4407d
Author:    Anton Litvinov <alitvinov@openjdk.org>
Date:      2021-06-14 13:27:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c0b4407d09a7bf9f15553dc5344b1e354b150d57
;;;","2021-06-23 05:45;alitvinov;Fix Request
This is a request for push approval to ""jdk17u"" repository. The fix is needed in ""jdk17u"", because the bug is present there and because the fix is already in JDK 18, JDK 11, JDK 8, without this fix behavior of JDK 17 release family will be inconsistent with behavior of other existing JDK release families. The risk of the fix is low, it affects only JDK for macOS. The original patch from the JDK Project applies cleanly to ""jdk17u"" repository.;;;","2021-07-16 15:06;jdowland;Fix Request (11u)

Please consider this for jdk11u-dev. The patch applies cleanly to the current jdk11u-dev. The four tests introduced fail on jdk11u-dev before and pass after applying the rest. Built and tested on macOS Mojave 10.14.6 (18G8022).;;;","2021-07-19 02:57;clanger;[~jdowland] Thanks for doing this backport. Maybe, for future backports it would be nice if you could open the GitHub PR before or at the same time you're requesting backport approval. If there's already a PR it makes assesing the backport request more easy.;;;","2021-07-19 06:17;jdowland;[~clanger] no problem, I didn't realise 11u was now on GitHub, I will happily go via PR in future.;;;","2021-07-19 07:44;jdowland;Fix Request (8u)

Please consider this for jdk8u-dev for Oracle jdk8 parity. Once unshuffled (with an updated jdk9 unshuffler, see https://github.com/gnu-andrew/jdk/pull/1) the patch applies without changes to the current jdk8u-dev. The four tests introduced fail on jdk8u-dev before and pass after applying the rest. Built and tested on macOS Mojave 10.14.6 (18G8022). ;;;",,,,,,,,,,,,,,,,,
Enable jdk8u MacOS external debug symbols,JDK-8262730,5043346,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aleonard,aleonard,aleonard,2021-03-01 01:50,2021-05-04 13:12,2023-10-01 09:57,2021-03-07 22:07,8u281,,,,,,,,openjdk8u302,infrastructure,,0,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,,,,,,,,jdk8u does not currently support producing MacOS external debug symbols. This issue is to provide additions to the NativeCompilation make file to enable support for MacOS.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264509,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2rss3:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-03-02 05:54;aleonard;webrev: https://cr.openjdk.java.net/~aleonard/8262730/webrev.00/;;;","2021-03-05 00:43;aleonard;Fix Request
RFR: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-March/013506.html
This fix enables external debug symbol support for MacOS in line with the other platforms. The implementation is different in jdk8 from jdk11+, but the fix extends the existing jdk8 other platform support based on the MacOS dsymutil format. The patch has been live at AdoptOpenJDK for 2 weeks now with no issues.;;;","2021-03-07 22:07;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/rev/af65dfd2bea4
User:  andrew
Date:  2021-03-08 06:02:56 +0000
;;;","2021-05-04 13:12;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/rev/af65dfd2bea4
User:  andrew
Date:  2021-05-04 20:07:54 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Cleanup OpenGL references from Metal implementation,JDK-8262729,5043345,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,aghaisas,aghaisas,2021-03-01 01:49,2021-03-01 02:05,2023-10-01 09:57,2021-03-01 02:05,internal,,,,,,,,internal,client-libs,,0,lanai,sn_88,,,,,,,,,,,,,,,,,,,,,This is a follow up issue to JDK-8245256 to clean up remaining OpenGL references in variable names/logs etc.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8245256,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2rsrv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: C1 StubAssembler::call_RT can corrupt stack,JDK-8262726,5043338,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ngasson,ngasson,ngasson,2021-03-01 01:39,2021-07-14 02:02,2023-10-01 09:57,2021-03-02 01:56,11,17,8u281,,,,,,17,hotspot,,0,aarch64-related,c1,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,"StubAssembler::call_RT() has some code to shuffle arguments using the stack as temporary storage:

  // if there is any conflict use the stack
  if (arg1 == c_rarg2 || arg1 == c_rarg3 ||
      arg2 == c_rarg1 || arg2 == c_rarg3 ||
      arg3 == c_rarg1 || arg3 == c_rarg2) {
    stp(arg3, arg2, Address(pre(sp, 2 * wordSize)));
    stp(arg1, zr, Address(pre(sp, -2 * wordSize)));
    ldp(c_rarg1, zr, Address(post(sp, 2 * wordSize)));
    ldp(c_rarg3, c_rarg2, Address(post(sp, 2 * wordSize)));

Unfortunately there's a typo: the first pre(sp, 2 * wordSize) should be pre(sp, -2 * wordSize) otherwise the pushes and pops are unbalanced.

I think this was exposed by JDK-8259619 which fixed the conflict check but AFAIK it only causes a problem on the Valhalla lworld branch and is not used otherwise.",,,,,,,,,,JDK-8263052,JDK-8263053,JDK-8263498,JDK-8263240,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i2rsqb:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-02 01:56;roboduke;Changeset: be67aaab
Author:    Nick Gasson <ngasson@openjdk.org>
Date:      2021-03-02 09:56:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/be67aaab
;;;","2021-03-02 04:56;fyang;Fix Request (11u)

This fixes an obvious bug. Patch applies cleanly to 11u, passes tier1 on Linux aarch64.;;;","2021-03-12 00:32;snazarki;Fix Request (13u)

This fixes an obvious bug, need for parity with 11u.  Patch applies cleanly, passes tier1 on Linux aarch64. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,
IGV: crash when removing all graphs in a group,JDK-8262725,5043333,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rcastanedalo,rcastanedalo,rcastanedalo,2021-03-01 00:59,2022-08-16 23:39,2023-10-01 09:57,2021-04-20 00:59,17,,,,,,,,17,hotspot,,0,diagnostics,hs-comp-triaged,igv,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,"Ideal Graph Visualizer throws the following exception error when a graph is displayed and all graphs in its group (including the displayed one) are removed (see screenshot attached):

java.lang.ArrayIndexOutOfBoundsException: -1
	at java.util.ArrayList.elementData(ArrayList.java:424)
	at java.util.ArrayList.get(ArrayList.java:437)
	at com.sun.hotspot.igv.view.DiagramViewModel.getFirstGraph(DiagramViewModel.java:378)
	at com.sun.hotspot.igv.view.DiagramViewModel.getGraphToView(DiagramViewModel.java:421)
	at com.sun.hotspot.igv.view.DiagramViewModel.getDiagramToView(DiagramViewModel.java:404)
	at com.sun.hotspot.igv.view.DiagramScene.update(DiagramScene.java:516)
	at com.sun.hotspot.igv.view.DiagramScene.access$900(DiagramScene.java:70)
	at com.sun.hotspot.igv.view.DiagramScene$9.changed(DiagramScene.java:1250)
	at com.sun.hotspot.igv.view.DiagramScene$9.changed(DiagramScene.java:1245)
	at com.sun.hotspot.igv.data.ChangedEvent.fire(ChangedEvent.java:44)
	at com.sun.hotspot.igv.data.ChangedEvent.fire(ChangedEvent.java:31)
	at com.sun.hotspot.igv.data.Event.fire(Event.java:60)
	at com.sun.hotspot.igv.view.DiagramViewModel.diagramChanged(DiagramViewModel.java:343)
	at com.sun.hotspot.igv.view.DiagramViewModel.changed(DiagramViewModel.java:434)
	at com.sun.hotspot.igv.view.DiagramViewModel.changed(DiagramViewModel.java:42)
	at com.sun.hotspot.igv.data.ChangedEvent.fire(ChangedEvent.java:44)
	at com.sun.hotspot.igv.data.ChangedEvent.fire(ChangedEvent.java:31)
	at com.sun.hotspot.igv.data.Event.fire(Event.java:60)
	at com.sun.hotspot.igv.util.RangeSliderModel.setPositions(RangeSliderModel.java:81)
	at com.sun.hotspot.igv.view.DiagramViewModel.filterGraphs(DiagramViewModel.java:373)
	at com.sun.hotspot.igv.view.DiagramViewModel.access$300(DiagramViewModel.java:42)
	at com.sun.hotspot.igv.view.DiagramViewModel$3.changed(DiagramViewModel.java:209)
	at com.sun.hotspot.igv.view.DiagramViewModel$3.changed(DiagramViewModel.java:204)
	at com.sun.hotspot.igv.data.ChangedEvent.fire(ChangedEvent.java:44)
	at com.sun.hotspot.igv.data.ChangedEvent.fire(ChangedEvent.java:31)
	at com.sun.hotspot.igv.data.Event.fire(Event.java:60)
	at com.sun.hotspot.igv.data.Group.removeElement(Group.java:168)
	at com.sun.hotspot.igv.coordinator.actions.GraphRemoveCookie.remove(GraphRemoveCookie.java:37)
	at com.sun.hotspot.igv.coordinator.actions.RemoveAction.performAction(RemoveAction.java:44)
	at org.openide.util.actions.NodeAction.performAction(NodeAction.java:295)
	at org.openide.util.actions.CallableSystemAction$1.run(CallableSystemAction.java:129)
	at org.openide.util.actions.ActionInvoker$1.run(ActionInvoker.java:95)
	at org.openide.util.actions.ActionInvoker.doPerformAction(ActionInvoker.java:116)
	at org.openide.util.actions.ActionInvoker.invokeAction(ActionInvoker.java:99)
	at org.openide.util.actions.CallableSystemAction.actionPerformed(CallableSystemAction.java:126)
	at org.openide.util.actions.NodeAction.actionPerformed(NodeAction.java:283)
	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2348)
	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
	at javax.swing.AbstractButton.doClick(AbstractButton.java:376)
	at javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:842)
	at javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:886)
	at java.awt.Component.processMouseEvent(Component.java:6539)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
	at java.awt.Component.processEvent(Component.java:6304)
	at java.awt.Container.processEvent(Container.java:2239)
	at java.awt.Component.dispatchEventImpl(Component.java:4889)
	at java.awt.Container.dispatchEventImpl(Container.java:2297)
	at java.awt.Component.dispatchEvent(Component.java:4711)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4904)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4535)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4476)
	at java.awt.Container.dispatchEventImpl(Container.java:2283)
	at java.awt.Window.dispatchEventImpl(Window.java:2746)
	at java.awt.Component.dispatchEvent(Component.java:4711)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:760)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:74)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:84)
	at java.awt.EventQueue$4.run(EventQueue.java:733)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:74)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:730)
	at org.netbeans.core.TimableEventQueue.dispatchEvent(TimableEventQueue.java:159)
[catch] at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:205)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

STEPS TO REPRODUCE IT:

1. $ cd src/utils/IdealGraphVisualizer
2. $ mvn install
3. $ sh igv.sh
4. $ java -XX:PrintIdealGraphLevel=1
5. In the ""Outline"" window group, expand group ""virtual void java.lang.Object.<init>()"" and double-click on ""After Parsing""
6. In the ""Outline"" window group, select all graphs from the expanded group ""virtual void java.lang.Object.<init>()""
7. Go to File -> Remove selected graphs and groups
8. The exception is triggered",,,,,,,,,,,,,,,,,,,,JDK-8262462,,,JDK-8254145,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-03-01 00:57;rcastanedalo;crash-screenshot.png;https://bugs.openjdk.org/secure/attachment/93412/crash-screenshot.png",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rsp7:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-20 00:59;roboduke;Changeset: 51366439
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2021-04-20 07:58:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/51366439
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"SwingNode.setContent does not close previous content, resulting in memory leak",JDK-8262518,5042831,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,webbuggrp,webbuggrp,2021-02-24 10:16,2023-08-31 17:02,2023-10-01 09:57,2023-08-28 20:51,jfx16,,,,,,,,jfx22,javafx,,0,dcspn,reproducer-yes,sn_151,webbug,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS Windows 10

Tested on:
* OpenJDK/OpenJFX 8.0.271-b08
* Liberica JDK/JFX combined build 15.0.1+b01
* OpenJDK JDK 17 early access build 10 with OpenJFX 16 build 7

A DESCRIPTION OF THE PROBLEM :
When setting the content of a SwingNode, the old content is not garbage collected.

There are some other bugs that appear related, but are marked as resolved and this is definitely not resolved. I'm not sure if this is truly a separate bug, or if one of those bugs should be reopened. Here are the related bugs:
* https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8093738
* https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8241972
* https://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8218124

So far my debugging (using JDK 1.8.0.271) has shown the references to old content are kept alive in a static list of windows in the GlassStage class. The should be removed when close() is called on the JComponent, but this doesn't seem to be called via SwingNode.setContent().

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the following program listed in the ""source code for an executable test case"" section.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Should print that there are 1 or 2 panels in memory. Possibly a few more but the number should not trend upward over time.
ACTUAL -
Prints:

Panels in memory: 0
Panels in memory: 1
Panels in memory: 2
Panels in memory: 3
Panels in memory: 4
Panels in memory: 5
Panels in memory: 6
Panels in memory: 7
Panels in memory: 8
...

And goes on forever (or I suppose until it runs out of memory, but I didn't wait that long).

---------- BEGIN SOURCE ----------
import java.lang.ref.WeakReference;
import java.util.Collection;
import java.util.concurrent.CopyOnWriteArrayList;

import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import javafx.application.Application;
import javafx.embed.swing.SwingNode;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;


public class LeakDemo extends Application {

    //Keep week references to all panels that we've ever generated to see if any
    //of them get collected.
    private Collection<WeakReference<JPanel>> panels = new CopyOnWriteArrayList<>();
    
    @Override
    public void start(Stage primaryStage) throws Exception {
        
        SwingNode node = new SwingNode();
        
        Pane root = new Pane();
        root.getChildren().add(node);
        
        //Kick off a thread that repeatedly creates new JPanels and resets the swing node's content
        new Thread(() -> {
            
            while(true) {
                
                //Lets throw in a little sleep so we can read the output
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                
                SwingUtilities.invokeLater(() -> {
                    JPanel panel = new JPanel();
                    panels.add(new WeakReference<>(panel));
                    node.setContent(panel);
                });
                
                System.out.println(""Panels in memory: "" + panels.stream().filter(ref -> ref.get() != null).count());
                
                //I know this doesn't guarantee anything, but prompting a GC gives me more confidence that this
                //truly is a bug.
                System.gc();
            }
            
        }).start();
        
        primaryStage.setScene(new Scene(root, 100, 100));
        
        primaryStage.show();
        
    }
    
    public static void main(String[] args) {
        launch(args);
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
If you place a JComponent (such as a JPanel) as the content of the swing node, and then update the content of that JComponent rather than setting the SwingNode's content directly, it will collect the old content appropriately. See https://stackoverflow.com/questions/66270491/content-of-swingnode-not-garbage-collected-when-content-changed

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284352,,,,,,,,,,JDK-8241972,JDK-8218124,JDK-8093738,,,,"2021-02-28 23:12;pnarayanaswa;LeakDemo.java;https://bugs.openjdk.org/secure/attachment/93410/LeakDemo.java",,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i2rpln:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@368b4b86,,,,,,,,,"2021-02-28 23:17;pnarayanaswa;Checked with attached testcase in Windows 10, Issue is reproducible
Test Result:
=========
8u281: Fail
Openjfx 11: Fail
Openjfx 15: Fail
Openjfx 16: Fail;;;","2021-02-28 23:20;pnarayanaswa;More Discussion here: https://stackoverflow.com/questions/66270491/content-of-swingnode-not-garbage-collected-when-content-changed;;;","2023-08-22 03:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1219
Date: 2023-08-22 09:54:11 +0000;;;","2023-08-28 20:50;dukebot;Changeset: beca88c1
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-08-29 03:48:43 +0000
URL:       https://git.openjdk.org/jfx/commit/beca88c16fa0942ce7ed32530c411ed9671ad925
;;;",,,,,,,,,,,,,,,,,,,,,,,,
JSSE Server should check the legacy version in TLSv1.3 ClientHello,JDK-8262509,5043112,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2021-02-28 18:15,2021-03-08 10:54,2023-10-01 09:57,2021-03-01 14:26,16,17,,,,,,,17,security-libs,,0,noreg-hard,tencent-interest,,,,,,,,,,,,,,,,,,,,,"Per RFC 8446, section 4.1.2, the legacy_version field in ClientHello message MUST be set to 0x0303, which is the version number for TLS 1.2.
T13ClientHelloConsumer should do this check like that T13ServerHelloConsumer does.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rrc3:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-03-01 14:26;roboduke;Changeset: 353416ff
Author:    John Jiang <jjiang@openjdk.org>
Date:      2021-03-01 22:26:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/353416ff
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Vector API's ergonomics is incorrect,JDK-8262508,5043111,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-02-28 18:04,2021-03-10 16:32,2023-10-01 09:57,2021-03-04 15:05,16,17,,,,,,,17,hotspot,,0,oracle-triage-11,oracle-triage-17,tencent-interest,vectorapi,,,,,,,,,,,,,,,,,,,"
* Reproduce
```
java  \
  --add-modules=jdk.incubator.vector \
  -XX:+UnlockExperimentalVMOptions \
  -XX:+EnableVectorReboxing \
  -Xlog:compilation \
  -version
```

* The output will be:
```
OpenJDK 64-Bit Server VM warning: Disabling EnableVectorReboxing since EnableVectorSupport is turned off.
[0.222s][info][compilation] EnableVectorSupport=true
[0.222s][info][compilation] EnableVectorReboxing=false
[0.223s][info][compilation] EnableVectorAggressiveReboxing=false
```

So EnableVectorReboxing is actually set fasle, which is unexpected.
It's also incorrect for EnableVectorAggressiveReboxing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rrbv:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-04 15:04;roboduke;Changeset: 351889f1
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-03-04 23:04:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/351889f1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Some CLHSDB command cannot know they run on remote debugger,JDK-8262504,5043099,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2021-02-28 05:11,2021-03-22 13:09,2023-10-01 09:57,2021-03-15 22:46,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"`pmap` and `pstack` CLHSDB command do not work on remote debugger, we can see following error message:

```
hsdb> pmap
not yet implemented (debugger does not support CDebugger)!
```

However, SA has different message for this purpose:

```
          if (getDebugeeType() == DEBUGEE_REMOTE) {
              out.println(""remote configuration is not yet implemented"");
          } else {
              out.println(""not yet implemented (debugger does not support CDebugger)!"");
          }
```

SA should show ""remote configuration is not yet implemented"" when it works on remote debugger.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rr97:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-03-15 22:46;roboduke;Changeset: e03a5948
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2021-03-16 05:46:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e03a5948
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk17 libjvm link failure with --as-needed and clock_gettime in librt,JDK-8262501,5043093,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,doko,doko,2021-02-28 04:03,2021-04-21 18:01,2023-10-01 09:57,2021-04-15 06:00,17,,,,,,,,17,hotspot,,0,time,,,,,,,,,,,,,,,,,,,,,,"The fix from JDK-8246112 breaks the build with old (but according to comments still supported) glibc versions, when ld defaults to the --as-needed behavior.

The reason for that is the passing of a library (-lrt) in a LDFLAGS macro, not in a LIBS macro.

A quick workaround is

--- a/make/autoconf/flags-ldflags.m4
+++ b/make/autoconf/flags-ldflags.m4
@@ -113,7 +113,7 @@
       # But once our supported minimum build and runtime platform
       # has glibc 2.17, this can be removed as the functions are
       # in libc.
-      OS_LDFLAGS_JVM_ONLY=""-lrt""
+      OS_LDFLAGS_JVM_ONLY=""-Wl,--no-as-needed -lrt""
     fi
   fi

So -lrt should be passed in the macros which are used to pass -ldl -lpthread ...
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8246112,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,"0|i2rr7v:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-22 04:17;doko;this seems to be the correct approach. maybe you also want to guard this with a version check on glibc

--- a/make/autoconf/flags-ldflags.m4
+++ b/make/autoconf/flags-ldflags.m4
@@ -108,14 +108,6 @@ AC_DEFUN([FLAGS_SETUP_LDFLAGS_HELPER],
       OS_LDFLAGS_JVM_ONLY=""-Wl,-rpath,@loader_path/. -Wl,-rpath,@loader_path/..""
       OS_LDFLAGS=""-mmacosx-version-min=$MACOSX_VERSION_MIN""
     fi
-    if test ""x$OPENJDK_TARGET_OS"" = xlinux; then
-      # Hotspot needs to link librt to get the clock_* functions.
-      # But once our supported minimum build and runtime platform
-      # has glibc 2.17, this can be removed as the functions are
-      # in libc.
-      OS_LDFLAGS_JVM_ONLY=""-lrt""
-    fi
-  fi
 
   # Setup debug level-dependent LDFLAGS
   if test ""x$TOOLCHAIN_TYPE"" = xgcc; then
--- a/make/autoconf/libraries.m4
+++ b/make/autoconf/libraries.m4
@@ -124,6 +124,14 @@ AC_DEFUN_ONCE([LIB_SETUP_LIBRARIES],
     BASIC_JVM_LIBS=""$BASIC_JVM_LIBS -lpthread""
   fi
 
+  if test ""x$OPENJDK_TARGET_OS"" = xlinux; then
+    # Hotspot needs to link librt to get the clock_* functions.
+    # But once our supported minimum build and runtime platform
+    # has glibc 2.17, this can be removed as the functions are
+    # in libc.
+    BASIC_JVM_LIBS==""$BASIC_JVM_LIBS -lrt""
+  fi
+
   # Atomic library
   # 32-bit platforms needs fallback library for 8-byte atomic ops on Zero
   if HOTSPOT_CHECK_JVM_VARIANT(zero); then
;;;","2021-04-13 11:36;mseledtsov;ILW = MLM = P4;;;","2021-04-14 06:28;dholmes;[~doko] Can you please elaborate what the actual error is. And what version of glibc. Thanks.;;;","2021-04-14 08:37;doko;I don't have the build log anymore. If needed, I can re-run it.
The link step for libjvm.so fails, because the link line looks like
  ld --as-needed -lrt <object files> $BASIC_JVM_LIBS -lpthread
with the error that clock_gettime is not found in any of the libraries, because librt isn't need at this position of the command line,

This is Ubuntu 12.04 LTS, using (e)glibc-2.15

The current local patch is
https://salsa.debian.org/openjdk-team/openjdk/-/blob/master/debian/patches/8262501.diff
;;;","2021-04-14 16:05;dholmes;Thanks [~doko]. I clearly see the problem. I had expected the -lrt to be with the other libraries. I was not aware of BASIC_JVM_LIBS and the build reviewers did not spot this either.

I will fix using your patch - thanks.;;;","2021-04-14 16:24;dholmes;New linking command-line:

g++ -Wl,-z,defs -Wl,-z,relro -Wl,-z,now -Wl,-z,noexecstack -Wl,-O1 -Wl,--hash-style=gnu -m64 -static-libstdc++ -static-libgcc -shared -m64 -Wl,-version-script=mapfile -Wl,-soname=libjvm.so --sysroot=/var/tmp/devkit-linux_x64/gcc10.2.0-OL6.4+1.0/devkit-linux_x64-gcc10.2.0-OL6.4+1.0.tar.gz/x86_64-linux-gnu-to-x86_64-linux-gnu/x86_64-linux-gnu/sysroot -o build/linux-x64-debug-8262501/support/modules_libs/java.base/server/libjvm.so @build/linux-x64-debug-8262501/hotspot/variant-server/libjvm/objs/_BUILD_LIBJVM_objectfilenames.txt -lm -ldl -lpthread -lrt
;;;","2021-04-15 06:00;roboduke;Changeset: 81877f7d
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-04-15 12:59:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/81877f7d
;;;",,,,,,,,,,,,,,,,,,,,,
HostName entry in VM.info should be a new line,JDK-8262500,5043087,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2021-02-27 19:16,2021-03-08 10:54,2023-10-01 09:57,2021-03-01 19:03,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"We can get host name from VM.info dcmd (and also hs_err log) on fastdebug build as below:

```
---------------  S Y S T E M  ---------------

HostName: Xelvis OS:
 Windows 10 , 64 bit Build 19041 (10.0.19041.804)
OS uptime: 1 days 1:33 hours
Hyper-V role detected
```

`OS` label is available within HostName entry. It should be in a new line.
It affects Windows only.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2rr6j:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-01 19:03;roboduke;Changeset: c3eb80e1
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2021-03-02 03:02:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c3eb80e1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
More than 50% performance degradation of pow operator due to call with svml intrinsic after JDK-8261267,JDK-8262498,5043079,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-02-27 05:25,2021-03-04 15:35,2023-10-01 09:57,2021-03-04 15:35,repo-panama,,,,,,,,repo-panama,hotspot,,0,tencent-interest,vectorapi,,,,,,,,,,,,,,,,,,,,,"

The following micro benchmarks show that performance of vector api's pow operator drops more than 50% after JDK-8261267.

Double128Vector.POW
Double256Vector.POW
DoubleMaxVector.POW
DoubleScalar.POW
Float128Vector.POW
Float256Vector.POW
FloatMaxVector.POW",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261267,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,linux,,,,,,"0|i2rr4r:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Delete unused utility methods in ICC_Profile class,JDK-8262497,5043073,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,serb,serb,serb,2021-02-26 22:35,2021-03-08 10:54,2023-10-01 09:57,2021-03-01 11:31,11,17,,,,,,,17,client-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,,"Some of the methods in this class are unused since 1997, I think we can delete them.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rr3f:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-01 11:31;roboduke;Changeset: 682e1202
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-03-01 19:31:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/682e1202
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Lanai: Do not use resources of off-line MTLDevice,JDK-8262496,5043072,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,avu,avu,avu,2021-02-26 21:39,2021-03-04 08:50,2023-10-01 09:57,2021-02-27 11:57,internal,,,,,,,,internal,client-libs,,0,lanai,,,,,,,,,,,,,,,,,,,,,,"We should check our resources (textures, buffers) before the actual usage if they belong to the correct device",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261714,JDK-8262254,,,JDK-8262254,JDK-8261714,,,,,JDK-8262882,,,,,,,,,,,,,,,,,,,,,,,,internal,,os_x,,,,,,"0|i2rr37:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add filter to speed up CompileCommand lookup,JDK-8262476,5043045,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,neliasso,ecaspole,ecaspole,2021-02-26 12:07,2021-03-30 01:48,2023-10-01 09:57,2021-03-19 02:10,16,17,,,,,,,17,hotspot,,0,oracle-triage-11,oracle-triage-17,perf-regression,,,,,,,,,,,,,,,,,,,,"While working on things related to JDK-8246402, I wrote a JMH that constantly loads new classes and creates a few instances of them in each iteration.
On my WS

16-b26:   451.955 ± 1.864  ops/s
16-b27:   394.893 ± 5.071  ops/s

Using perf top, I can see from b27 the test spends 5-7% of its time in CompilerOracle::has_option_value<double>
 even when the compilation has quieted down after the first few seconds of running.
I think this is related to https://bugs.openjdk.java.net/browse/JDK-8256508

   9.11%  [kernel]                 [k] read_hpet
   6.96%  libjvm.so                [.] CompilerOracle::has_option_value<double>
   4.01%  libjvm.so                [.] steal_work
   2.93%  [kernel]                 [k] do_syscall_64
   2.31%  libc-2.23.so             [.] vfprintf


The micro is here:

https://github.com/ericcaspole/jmh-jdk-microbenchmarks/blob/dyn-load-and-new/micros-jdk8/src/main/java/org/openjdk/bench/java/lang/DynamicLoading.java

Run it like:
$ numactl --membind=1 --cpunodebind=1 /opt/jdk-16-b27/bin/java -jar target/micros-jdk8-1.0-SNAPSHOT.jar DynamicLoading.loadAndSeveralNewInstance  -f 1 -i 8  -p instances=25 -p numberOfClasses=10  -jvmArgs ""-XX:+PrintCompilation -XX:+UseParallelGC""

All that being said I dont know if other benchmarks see any regression from tihs one.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256508,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b27,16,,,,,,,,"0|i2rqx7:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-02 08:18;thartmann;ILW = Performance regression due to slow CompilerOracle::has_option_value, with microbenchmark, no known workaround = MMH = P3;;;","2021-03-02 08:19;thartmann;Nils, could you please have a look?;;;","2021-03-15 14:55;neliasso;There are 1216 option-matchers being traversed - most of them probably inlining related. They are all in the same list after the change. CompilerOracle::has_option_value would only have gone through the option ones before.

I'll think about how to split them up.;;;","2021-03-17 13:34;neliasso;JMH adds a lot of inlining compilecommands. This causes a lot of extra time for the lookup of all the other commands that might not even have been added. Since the most common case is that no compilecommand is added - I will add a filter that can be quickly checked for a command type.;;;","2021-03-19 02:10;roboduke;Changeset: 701fd9da
Author:    Nils Eliasson <neliasso@openjdk.org>
Date:      2021-03-19 09:10:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/701fd9da
;;;",,,,,,,,,,,,,,,,,,,,,,,
Buffer overflow in UNICODE::as_utf8 for zero length output buffer,JDK-8262472,5043036,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2021-02-26 09:43,2021-03-08 10:55,2023-10-01 09:57,2021-03-01 20:29,11,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"There is a buffer overflow in both variants of UNICODE::as_utf8, where in case of truncation due to a zero length output buffer the terminating zero still gets written.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rqv7:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-01 20:29;roboduke;Changeset: f5ab7f68
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-03-02 04:28:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f5ab7f68
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Printed GlyphVector outline with low DPI has bad quality on Windows,JDK-8262470,5043034,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alexsch,alexsch,alexsch,2021-02-26 09:19,2022-03-10 22:03,2023-10-01 09:57,2021-03-31 23:46,11,15,16,,,,,,17,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,,,,"Printing text using GlyphVector outline has bad quality on printers with low DPI on Windows OS.
The GDI system used for text printing on Windows accepts only integer path coordinates.
Rounding GlyphVector outline coordinates leads to distorted printed text. 

The issue had been reported as JDK-8256264 but was reverted because of the regression JDK-8259007 ""This test printed a blank page"".

The regression is in the code WPathGraphics.deviceDrawLine() method which uses wPrinterJob.moveTo() and wPrinterJob.lineTo() methods without wPrinterJob.beginPath() and wPrinterJob.endPath() methods.

The fix JDK-8256264  used wPrinterJob.beginPath()/endPath() methods to scale transform down and wPrinterJob.moveTo()/lineTo() to scale coordinates up.

Using wPrinterJob.beginPath()/endPath()  in WPathGraphics.deviceDrawLine() method leads that a line is not drawn at all (probably GDI treat it as an empty path).

The proposed solution is to scale coordinates up and transform down only for WPathGraphics.convertToWPath() method which draws a general path.
",,,,,,,,,,JDK-8275663,JDK-8271511,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256264,JDK-8259007,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,,"0|i2rqur:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-03-31 23:46;roboduke;Changeset: 02287349
Author:    Alexander Scherbatiy <alexsch@openjdk.org>
Date:      2021-04-01 06:45:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/02287349
;;;","2021-07-01 12:16;alexsch;Fix request (11u)

This is the request to backport the fix to jdk11u.

The original patch https://github.com/openjdk/jdk/commit/02287349.patch
has only one conflict with copyright year (2018 vs 2015) in src/java.desktop/windows/classes/sun/awt/windows/WPrinterJob.java file comparing with jdk11u-dev repository.

The java/awt/print and java/awt/PrintJob automated and manual tests were run with the fix.

The automated tests pass.
The following manual tests fail with and without the fix:

Parse Exception: Arguments to manual option not supported: yesno:
java/awt/print/Dialog/DialogOrient.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/Dialog/DialogType.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/ImagePrinting/ClippedImages.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/ImagePrinting/ImageTypes.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/ImagePrinting/PrintARGBImage.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/PageDialogTest.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/PageRanges.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/PageRangesDlgTest.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/PrintGlyphVectorTest.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/PrintLatinCJKTest.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/PrintTextTest.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/SwingUIText.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/PrintJob/ConstrainedPrintingTest/ConstrainedPrintingTest.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/PrintJob/PageSetupDlgBlockingTest/PageSetupDlgBlockingTest.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/PrintJob/SaveDialogTitleTest.java Error. Parse Exception: Arguments to `manual' option not supported: yesno

Cannot access a member of class:
java/awt/print/Dialog/PrintDlgApp.java Error. java.lang.IllegalAccessException: class com.sun.javatest.regtest.agent.MainWrapper$MainThread cannot access a member of class PrintDlgApp with modifiers ""public static""
java/awt/print/Dialog/PrintDlgPageable.java Error. java.lang.IllegalAccessException: class com.sun.javatest.regtest.agent.MainWrapper$MainThread cannot access a member of class PrintDlgPageable with modifiers ""public static""

Can't find HTML file:
java/awt/PrintJob/PrintCheckboxTest/PrintCheckboxManualTest.java Error. Can't find HTML file: C:\Development\github\alexsch\jdk11u-dev-print\test\jdk\java\awt\PrintJob\PrintCheckboxTest\PrintCheckboxManualTest.html

Does not have buttons on test dialog (pass, fail, ...)
java/awt/print/PrinterJob/SecurityDialogTest.java ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
linux libsaproc/DwarfParser.cpp delete DwarfParser object in early return,JDK-8262466,5043029,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2021-02-26 07:30,2021-03-10 16:30,2023-10-01 09:57,2021-03-02 23:41,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"there is an early return in Java_sun_jvm_hotspot_debugger_linux_amd64_DwarfParser_createDwarfContext  that  misses to delete the non-parsable  parser object.
see also the Sonar finding :
https://sonarcloud.io/project/issues?id=shipilev_jdk&languages=cpp&open=AXck8Ca-BBG2CXpcnimn&resolved=false&severities=BLOCKER&types=BUG
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,"0|i2rqtn:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-03-02 23:41;roboduke;Changeset: 0265ab63
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-03-03 07:41:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0265ab63
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Very long compilation times and high memory consumption in C2 debug builds,JDK-8262465,5043027,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,neliasso,cgo,cgo,2021-02-26 06:48,2021-04-08 05:46,2023-10-01 09:57,2021-03-23 00:46,11,16,17,,,,,,17,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,performance,,,,,,,,,,,,,,,,,,"This has been observed with the latest changes to the JTreg test case  test/hotspot/jtreg/compiler/intrinsics/TestRotate.java.
Make sure to use the following version of this test case, as it has been changed with JDK-8256438:
https://github.com/openjdk/jdk/blob/382e38dd246596ec94a1f1ce0e0f9e87f53366c7/test/hotspot/jtreg/compiler/intrinsics/TestRotate.java

I don't believe the problem has been introduced with this change, but the change to the test triggers this behavior.

JIT compilation of the main method of this JTreg test consumes an unusual amount of memory and takes a very long time.
Judging from NMT, C2 consumes up to 2978MB of memory (on x86_64 linux):

Total: reserved=12595MB, committed=3576MB
-                 Java Heap (reserved=7952MB, committed=500MB)
                            (mmap: reserved=7952MB, committed=500MB) 
 
-                    Thread (reserved=30MB, committed=1MB)
                            (thread #30)
                            (stack: reserved=30MB, committed=1MB)
 
-                      Code (reserved=242MB, committed=8MB)
                            (mmap: reserved=242MB, committed=7MB) 
 
-                        GC (reserved=355MB, committed=79MB)
                            (malloc=27MB #851) 
                            (mmap: reserved=328MB, committed=51MB) 
 
-                  Compiler (reserved=2978MB, committed=2978MB)
                            (arena=2978MB #13)
 
-                    Symbol (reserved=2MB, committed=2MB)
                            (malloc=1MB #24825) 
                            (arena=1MB #1)
 
-    Native Memory Tracking (reserved=2MB, committed=2MB)
                            (tracking overhead=1MB)
 
-               Arena Chunk (reserved=1MB, committed=1MB)
                            (malloc=1MB) 
 
-                 Metaspace (reserved=8MB, committed=4MB)
                            (mmap: reserved=8MB, committed=4MB) 
 
-                   Unknown (reserved=1024MB, committed=0MB)
                            (mmap: reserved=1024MB, committed=0MB) 

Judging from the compilation log, compilation of the main method takes a huge amount of time (if compilation is restricted to this main method, using -XX:CompileCommand):
<task compile_id=""41"" compile_kind=""osr"" method=""compiler.intrinsics.TestRotate main ([Ljava/lang/String;)V"" bytes=""1568"" count=""1"" backedge_count=""101377"" iicount=""1"" osr_bci=""774"" stamp=""18.349"">
<task_done success=""1"" nmsize=""719360"" count=""1"" backedge_count=""1093588"" inlined_bytes=""59937"" stamp=""194.437""/>

You can compile and run the test case directly, without JTreg:
$ javac test/hotspot/jtreg/compiler/intrinsics/TestRotate.java
$ java -cp test/hotspot/jtreg compiler.intrinsics.TestRotate

Compilation can be limited to only the main methoid using -XX:CompileCommand='compileonly compiler.intrinsics.TestRotate::main'
",,,,,,,,,,JDK-8264919,JDK-8264433,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262950,,,,,,"2021-02-26 06:47;cgo;compilation.xml;https://bugs.openjdk.org/secure/attachment/93395/compilation.xml",,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rqt7:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-02 08:21;thartmann;ILW = Slow compilation and high memory consumption with C2, only observed with single jtreg test, disable C2 compilation of affected method = MMM = P3;;;","2021-03-03 07:01;shade;Note I am fixing the test in JDK-8262950. If anyone wants to follow up on C2 behavior, revert that patch to get the test shape back.;;;","2021-03-18 13:43;neliasso;80% of time is spent in RegAlloc and 50% of RegAlloc is spent in Split.

C2 Compile Time:       49,808 s
       Parse:                 0,029 s
       Optimize:              8,418 s
         Escape Analysis:       0,023 s
           Conn Graph:            0,009 s
           Macro Eliminate:       0,085 s
         GVN 1:                 0,014 s
         Incremental Inline:    0,354 s
           IdealLoop:             0,000 s
           IGVN:                  0,125 s
           Inline:                0,182 s
           Prune Useless:         0,047 s
           Other:                 0,000 s
         Renumber Live:         0,013 s
         Vector:                0,000 s
           Box elimination:     0,000 s
             IGVN:              0,000 s
             Prune Useless:     0,000 s
         IdealLoop:             7,397 s
         IdealLoop Verify:      0,000 s
         Cond Const Prop:       0,005 s
         GVN 2:                 0,003 s
         Macro Expand:          0,269 s
         Barrier Expand:        0,000 s
         Graph Reshape:         0,008 s
         Other:                 0,333 s
       Matcher:                    0,406 s
         Post Selection Cleanup:   0,000 s
       Scheduler:                  0,336 s
       Regalloc:             40,482 s
         Ctor Chaitin:          0,001 s
         Build IFG (virt):      0,052 s
         Build IFG (phys):      1,869 s
         Compute Liveness:      1,532 s
         Regalloc Split:       21,119 s
         Postalloc Copy Rem:    0,380 s
         Merge multidefs:       0,017 s
         Fixup Spills:          0,003 s
         Compact:               0,003 s
         Coalesce 1:            0,836 s
         Coalesce 2:            0,113 s
         Coalesce 3:            0,183 s
         Cache LRG:             0,013 s
         Simplify:              9,648 s
         Select:                3,500 s
         Other:                 1,213 s
       Block Ordering:        0,013 s
       Peephole:              0,003 s
       Code Emission:           0,117 s
         Insn Scheduling:       0,000 s
         Build OOP maps:        0,055 s
       Code Installation:     0,006 s
;;;","2021-03-18 13:43;neliasso;Accumulated IndexSet usage statistics:
--------------------------------------
  Iteration:
    blocks visited: 189405589674
    blocks empty: 98,62%
    bit density (bits/used blocks): 12,57
    bit density (bits/all blocks): 0,17
  Allocation:
    blocks allocated: 7952700
    blocks used/reused: 10224658
    
;;;","2021-03-19 03:14;neliasso;Increasing the block size improves the IndexSet stats but give no obvious improvement in compile time:

Accumulated IndexSet usage statistics:
--------------------------------------
  Iteration:
    blocks visited: 915862035
    blocks empty: 28,08%
    bit density (bits/used blocks): 49,73
    bit density (bits/all blocks): 35,77
  Allocation:
    blocks allocated: 2071700
    blocks used/reused: 2764537;;;","2021-03-22 05:12;neliasso;A small bit of debug code cause a huge overhead

Product

       C2 Compile Time:       17,885 s
       Parse:                 0,046 s
       Optimize:              5,417 s
         Escape Analysis:       0,024 s
           Conn Graph:            0,006 s
           Macro Eliminate:       0,053 s
         GVN 1:                 0,013 s
         Incremental Inline:    0,238 s
           IdealLoop:             0,000 s
           IGVN:                  0,096 s
           Inline:                0,115 s
           Prune Useless:         0,026 s
           Other:                 0,000 s
         Renumber Live:         0,007 s
         Vector:                0,000 s
           Box elimination:     0,000 s
             IGVN:              0,000 s
             Prune Useless:     0,000 s
         IdealLoop:             4,728 s
         IdealLoop Verify:      0,000 s
         Cond Const Prop:       0,004 s
         GVN 2:                 0,003 s
         Macro Expand:          0,181 s
         Barrier Expand:        0,000 s
         Graph Reshape:         0,006 s
         Other:                 0,214 s
       Matcher:                    0,224 s
         Post Selection Cleanup:   0,000 s
       Scheduler:                  0,244 s
       Regalloc:             11,836 s
         Ctor Chaitin:          0,001 s
         Build IFG (virt):      0,034 s
         Build IFG (phys):      0,592 s
         Compute Liveness:      0,705 s
         Regalloc Split:        6,572 s
         Postalloc Copy Rem:    0,189 s
         Merge multidefs:       0,014 s
         Fixup Spills:          0,003 s
         Compact:               0,002 s
         Coalesce 1:            0,579 s
         Coalesce 2:            0,106 s
         Coalesce 3:            0,046 s
         Cache LRG:             0,006 s
         Simplify:              1,975 s
         Select:                0,767 s
         Other:                 0,244 s
       Block Ordering:        0,015 s
       Peephole:              0,003 s
       Code Emission:           0,093 s
         Insn Scheduling:       0,000 s
         Build OOP maps:        0,041 s
       Code Installation:     0,009 s

  Total compiled methods    :      695 methods
    Standard compilation    :      691 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :   155130 bytes
    Standard compilation    :    52719 bytes
    On stack replacement    :   102411 bytes
  Average compilation speed :     8508 bytes/s

  nmethod code size         :  2697456 bytes
  nmethod total size        :  2014496 bytes


Debug

    C2 Compile Time:      294,300 s
       Parse:                 0,161 s
       Optimize:              9,156 s
         Escape Analysis:       0,077 s
           Conn Graph:            0,013 s
           Macro Eliminate:       0,137 s
         GVN 1:                 0,031 s
         Incremental Inline:    0,507 s
           IdealLoop:             0,000 s
           IGVN:                  0,118 s
           Inline:                0,360 s
           Prune Useless:         0,029 s
           Other:                 0,000 s
         Renumber Live:         0,012 s
         Vector:                0,000 s
           Box elimination:     0,000 s
             IGVN:              0,000 s
             Prune Useless:     0,000 s
         IdealLoop:             7,458 s
         IdealLoop Verify:      0,194 s
         Cond Const Prop:       0,007 s
         GVN 2:                 0,008 s
         Macro Expand:          0,315 s
         Barrier Expand:        0,000 s
         Graph Reshape:         0,014 s
         Other:                 0,532 s
       Matcher:                    0,601 s
         Post Selection Cleanup:   0,007 s
       Scheduler:                  0,501 s
       Regalloc:            283,185 s
         Ctor Chaitin:          0,001 s
         Build IFG (virt):      0,142 s
         Build IFG (phys):      6,320 s
         Compute Liveness:      1,732 s
         Regalloc Split:      255,514 s
         Postalloc Copy Rem:    0,478 s
         Merge multidefs:       0,021 s
         Fixup Spills:          0,005 s
         Compact:               0,005 s
         Coalesce 1:            1,019 s
         Coalesce 2:            0,185 s
         Coalesce 3:            0,431 s
         Cache LRG:             0,014 s
         Simplify:             10,267 s
         Select:                5,905 s
         Other:                 1,145 s
       Block Ordering:        0,015 s
       Peephole:              0,003 s
       Code Emission:           0,661 s
         Insn Scheduling:       0,000 s
         Build OOP maps:        0,095 s
       Code Installation:     0,064 s

Debug with fix

    C2 Compile Time:       64,324 s
       Parse:                 0,183 s
       Optimize:              9,435 s
         Escape Analysis:       0,084 s
           Conn Graph:            0,014 s
           Macro Eliminate:       0,195 s
         GVN 1:                 0,038 s
         Incremental Inline:    0,568 s
           IdealLoop:             0,000 s
           IGVN:                  0,137 s
           Inline:                0,400 s
           Prune Useless:         0,031 s
           Other:                 0,000 s
         Renumber Live:         0,014 s
         Vector:                0,000 s
           Box elimination:     0,000 s
             IGVN:              0,000 s
             Prune Useless:     0,000 s
         IdealLoop:             7,606 s
         IdealLoop Verify:      0,182 s
         Cond Const Prop:       0,007 s
         GVN 2:                 0,008 s
         Macro Expand:          0,316 s
         Barrier Expand:        0,000 s
         Graph Reshape:         0,014 s
         Other:                 0,599 s
       Matcher:                    0,573 s
         Post Selection Cleanup:   0,007 s
       Scheduler:                  0,495 s
       Regalloc:             52,948 s
         Ctor Chaitin:          0,001 s
         Build IFG (virt):      0,144 s
         Build IFG (phys):      6,386 s
         Compute Liveness:      1,697 s
         Regalloc Split:       25,477 s
         Postalloc Copy Rem:    0,497 s
         Merge multidefs:       0,022 s
         Fixup Spills:          0,005 s
         Compact:               0,005 s
         Coalesce 1:            0,992 s
         Coalesce 2:            0,189 s
         Coalesce 3:            0,434 s
         Cache LRG:             0,014 s
         Simplify:             10,083 s
         Select:                5,852 s
         Other:                 1,149 s
       Block Ordering:        0,018 s
       Peephole:              0,004 s
       Code Emission:           0,653 s
         Insn Scheduling:       0,000 s
         Build OOP maps:        0,096 s
       Code Installation:     0,059 s

;;;","2021-03-23 00:46;roboduke;Changeset: 2da882c0
Author:    Nils Eliasson <neliasso@openjdk.org>
Date:      2021-03-23 07:45:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2da882c0
;;;","2021-04-06 04:05;shade;Fix Request (11u)

This improves the pathological cases with debug builds by guarding the costly verification step with a compiler flag. Patch does not apply cleanly to 11u due to different context.  11u RFR (acked by phh): https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-April/005595.html;;;",,,,,,,,,,,,,,,,,,,,
IGV: cannot remove specific groups imported via network,JDK-8262462,5043024,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rcastanedalo,rcastanedalo,rcastanedalo,2021-02-26 05:56,2022-08-16 23:39,2023-10-01 09:57,2021-04-16 04:50,17,,,,,,,,17,hotspot,,0,diagnostics,hs-comp-triaged,igv,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,"Specific groups (methods) listed in the Outline window cannot be removed when they have been imported via network.

STEPS TO REPRODUCE IT:

1. $ cd src/utils/IdealGraphVisualizer
2. $ mvn install
3. $ sh igv.sh
4. $ java -XX:PrintIdealGraphLevel=3
5. In the ""Outline"" window group, select any group (e.g. ""virtual void java.lang.Object.<init>()"").
6. Go to File -> Remove selected graphs and groups
7. The selected group is not removed

WORKAROUND:

Save all groups into an XML file, remove all graphs and groups, open the XML file, and remove the desired groups (removing specific groups works as expected when they are imported from a file).

(Thanks to [~neliasso] for the original report).",,,,,,,,,,,,,,,,,,,,,,,JDK-8254145,JDK-8262725,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rqsj:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-02-26 06:27;thartmann;ILW = MLM = P4;;;","2021-04-15 05:33;rcastanedalo;JDK-8262725 cannot be implemented properly for graphs imported over the network until this issue is solved.;;;","2021-04-16 04:50;roboduke;Changeset: 10ec38f8
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2021-04-16 11:49:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/10ec38f8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
handle wcstombsdmp return value correctly in unix awt_InputMethod.c,JDK-8262461,5043022,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2021-02-26 05:14,2021-03-26 04:39,2023-10-01 09:57,2021-03-02 00:01,11,15,16,17,,,,,17,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,sap-interest,,,,,,,,,,,,,,,,,,,,"The function wcstombsdmp  is called at a few places in  awt_InputMethod.c.
This function needs checking of a NULL return value and freeing of the memory alloced by this function. However this is missing at one place in the file.
",,,,,,,,,,JDK-8264042,JDK-8264269,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rqs3:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-03-02 00:01;roboduke;Changeset: dd33a8ea
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-03-02 08:00:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dd33a8ea
;;;","2021-03-19 06:36;mbaesken;jdk11 backport request
I would like to have the patch in jdk11 as well, because the issue is present there too. Except the copyright year comment,  the patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
DragAndDrop hangs on Windows,JDK-8262446,5042621,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dmarkov,webbuggrp,webbuggrp,2021-02-22 22:01,2023-04-03 06:54,2023-10-01 09:57,2021-03-08 09:25,11.0.10,15.0.2,16,8u281,,,,,17,client-libs,,0,cssn21_03_01,cssn21_03_02,dcspn,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok-next,jdk16u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-hard,regression,reproducer-yes,sustaining,webbug,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows x64

A DESCRIPTION OF THE PROBLEM :
Dragging files from Windows Explorer to a Java application hangs. Not each time but very often.
I have implemented a DroppableDesktopPane (see source code) and dropping a file on that DesktopPane sometimes hangs (very often).
This issue is new with JDK 15.0.2 and JDK 11.0.10. It is working fine with the previous release JDK 15.0.1 and JDK 11.0.9.

REGRESSION : Last worked in version 15.0.1, 11.0.9

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Drag a file on the DroppableDesktopPane.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
No hanging
ACTUAL -
Application hangs. Stack trace:
UPSEClient15 [Java Application]	
	StartUpFrame at localhost:64016 (Suspended)	
		Thread [Timer-0] (Suspended)	
			waiting for: TaskQueue  (id=40)	
			Object.wait(long) line: not available [native method]	
			TaskQueue(Object).wait() line: 321	
			TimerThread.mainLoop() line: 527	
			TimerThread.run() line: 506	
		Thread [AWT-EventQueue-0] (Suspended)	
			WInputMethod.openCandidateWindow(WComponentPeer, int, int) line: not available [native method]	
			WInputMethod$1.run() line: 622	
			InvocationEvent.dispatch() line: 316	
			EventQueue.dispatchEventImpl(AWTEvent, Object) line: 770	
			EventQueue$4.run() line: 721	
			EventQueue$4.run() line: 715	
			AccessController.executePrivileged(PrivilegedAction<T>, AccessControlContext, Class<?>) line: 753	
			AccessController.doPrivileged(PrivilegedAction<T>, AccessControlContext) line: 391	
			ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(PrivilegedAction<T>, AccessControlContext, AccessControlContext) line: 85	
			ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(PrivilegedAction<T>, AccessControlContext) line: 95	
			EventQueue$5.run() line: 745	
			EventQueue$5.run() line: 743	
			AccessController.executePrivileged(PrivilegedAction<T>, AccessControlContext, Class<?>) line: 753	
			AccessController.doPrivileged(PrivilegedAction<T>, AccessControlContext) line: 391	
			ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(PrivilegedAction<T>, AccessControlContext, AccessControlContext) line: 85	
			EventQueue.dispatchEvent(AWTEvent) line: 742	
			EventDispatchThread.pumpOneEventForFilters(int) line: 203	
			EventDispatchThread.pumpEventsForFilter(int, Conditional, EventFilter) line: 124	
			EventDispatchThread.pumpEventsForHierarchy(int, Conditional, Component) line: 113	
			EventDispatchThread.pumpEvents(int, Conditional) line: 109	
			EventDispatchThread.pumpEvents(Conditional) line: 101	
			EventDispatchThread.run() line: 90	
		Thread [DestroyJavaVM] (Suspended)	
		Daemon Thread [mysql-cj-abandoned-connection-cleanup] (Suspended)	
			waiting for: ReferenceQueue$Lock  (id=38)	
			Object.wait(long) line: not available [native method]	
			ReferenceQueue<T>.remove(long) line: 155	
			AbandonedConnectionCleanupThread.run() line: 91	
			ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker) line: 1130	
			ThreadPoolExecutor$Worker.run() line: 630	
			Thread.run() line: 832	
		Thread [Thread-2] (Suspended)	
			owns: BufferedInputStream  (id=39)	
			SocketDispatcher.read0(FileDescriptor, long, int) line: not available [native method]	
			SocketDispatcher.read(FileDescriptor, long, int) line: 46	
			NioSocketImpl.tryRead(FileDescriptor, byte[], int, int) line: 261	
			NioSocketImpl.implRead(byte[], int, int) line: 312	
			NioSocketImpl.read(byte[], int, int) line: 350	
			NioSocketImpl$1.read(byte[], int, int) line: 803	
			Socket$SocketInputStream.read(byte[], int, int) line: 981	
			BufferedInputStream.fill() line: 244	
			BufferedInputStream.read() line: 263	
			DataInputStream.readInt() line: 391	
			TCPThread.run() line: 311	
		Daemon System Thread [Reference Handler] (Suspended)	
			Reference<T>.waitForReferencePendingList() line: not available [native method]	
			Reference<T>.processPendingReferences() line: 241	
			Reference$ReferenceHandler.run() line: 213	
		Daemon System Thread [Finalizer] (Suspended)	
			waiting for: ReferenceQueue$Lock  (id=41)	
			Object.wait(long) line: not available [native method]	
			ReferenceQueue<T>.remove(long) line: 155	
			ReferenceQueue<T>.remove() line: 176	
			Finalizer$FinalizerThread.run() line: 170	
		Daemon System Thread [Signal Dispatcher] (Suspended)	
		Daemon System Thread [Attach Listener] (Suspended)	
		Daemon System Thread [Common-Cleaner] (Suspended)	
			waiting for: ReferenceQueue$Lock  (id=42)	
			Object.wait(long) line: not available [native method]	
			ReferenceQueue<T>.remove(long) line: 155	
			CleanerImpl.run() line: 148	
			InnocuousThread(Thread).run() line: 832	
			InnocuousThread.run() line: 134	
		Daemon System Thread [Notification Thread] (Suspended)	
		Daemon System Thread [Java2D Disposer] (Suspended)	
			waiting for: ReferenceQueue$Lock  (id=43)	
			Object.wait(long) line: not available [native method]	
			ReferenceQueue<T>.remove(long) line: 155	
			ReferenceQueue<T>.remove() line: 176	
			Disposer.run() line: 144	
			Thread.run() line: 832	
		System Thread [AWT-Shutdown] (Suspended)	
			waiting for: Object  (id=44)	
			Object.wait(long) line: not available [native method]	
			Object.wait() line: 321	
			AWTAutoShutdown.run() line: 291	
			Thread.run() line: 832	
		Daemon System Thread [AWT-Windows] (Suspended)	
			WToolkitThreadBlockedHandler.startSecondaryEventLoop() line: not available [native method]	
			WToolkitThreadBlockedHandler.enter() line: 508	
			WDropTargetContextPeer(SunDropTargetContextPeer).postDropTargetEvent(Component, int, int, int, int, long[], long, int, boolean) line: 593	
			WDropTargetContextPeer(SunDropTargetContextPeer).handleEnterMessage(Component, int, int, int, int, long[], long) line: 302	
			WToolkit.eventLoop() line: not available [native method]	
			WToolkit.run() line: 361	
			Thread.run() line: 832	
		Daemon System Thread [TimerQueue] (Suspended)	
			Unsafe.park(boolean, long) line: not available [native method]	
			LockSupport.park() line: 341	
			AbstractQueuedSynchronizer$ConditionNode.block() line: 505	
			ForkJoinPool.managedBlock(ForkJoinPool$ManagedBlocker) line: 3137	
			AbstractQueuedSynchronizer$ConditionObject.await() line: 1614	
			DelayQueue<E>.take() line: 217	
			TimerQueue.run() line: 171	
			Thread.run() line: 832	
	C:\Program Files\Java\jdk-15.0.2\bin\javaw.exe (23 Feb 2021, 06:27:09)	


---------- BEGIN SOURCE ----------
/*
		A JDesktopPane which support Drag&Drop.
*/

import java.io.*;
import java.awt.dnd.*;
import java.awt.datatransfer.*;
import java.util.*;


public class DroppableDesktopPane extends javax.swing.JDesktopPane implements DropTargetListener
{
	private static final long serialVersionUID = 1L;
	
	DropTarget  dropTarget;
    MainFrame   mFrame;

    public DroppableDesktopPane(MainFrame mf)
    {
        super();
        mFrame = mf;
        dropTarget = new DropTarget(this, this);
    }


    public void dragEnter(DropTargetDragEvent e)
	{
	    e.acceptDrag(DnDConstants.ACTION_COPY);
	}

	public void dragExit(DropTargetEvent e)
	{

	}

	public void dragOver(DropTargetDragEvent e)
	{
	    e.acceptDrag(DnDConstants.ACTION_COPY);
	}

	public void dropActionChanged(DropTargetDragEvent e)
	{
	    e.acceptDrag(DnDConstants.ACTION_COPY);
	}

	public synchronized void drop(DropTargetDropEvent e)
	{
	    try
	    {
			DataFlavor uriListFlavor = new DataFlavor(""text/uri-list;class=java.lang.String"");
	        Transferable tr = e.getTransferable();

	        if (tr.isDataFlavorSupported(DataFlavor.javaFileListFlavor))
	        {
	            e.acceptDrop(DnDConstants.ACTION_COPY);
	            java.util.List<?> fileList = (java.util.List<?>)tr.getTransferData(DataFlavor.javaFileListFlavor);

	            Iterator<?> it = fileList.iterator();
	            while (it.hasNext())
	            {
	                File file = (File)it.next();
	                if (file != null)
	                    mFrame.doOpen(file);
	            }
	            e.getDropTargetContext().dropComplete(true);
	        }
			else if (tr.isDataFlavorSupported(uriListFlavor))  // Linux java bug 4899516: drop doesn't give a list of file
			{
				e.acceptDrop(DnDConstants.ACTION_COPY);
				String data = (String)tr.getTransferData(uriListFlavor);
				java.util.List<?> fileList = textURIListToFileList(data);

				Iterator<?> it = fileList.iterator();
				while (it.hasNext())
				{
					File file = (File)it.next();
					// open the file
				}
				e.getDropTargetContext().dropComplete(true);
			}
	        else
	            e.rejectDrop();
	    }
	    catch (IOException exio)
	    {
	        e.rejectDrop();
	    }
	    catch (UnsupportedFlavorException ex)
	    {
	        e.rejectDrop();
	    }
		catch (ClassNotFoundException ex2)
		{
			e.rejectDrop();
		}
	}


	private static java.util.List<File> textURIListToFileList(String data)
	{
		java.util.List<File> list = new java.util.ArrayList<File>(1);
		for (java.util.StringTokenizer st = new java.util.StringTokenizer(data, ""\r\n""); st.hasMoreTokens();)
		{
			String s = st.nextToken();
			if (s.startsWith(""#""))
			{
				// the line is a comment (as per the RFC 2483)
				continue;
			}
			try
			{
				java.net.URI uri = new java.net.URI(s);
				java.io.File file = new java.io.File(uri);
				list.add(file);
			} catch (java.net.URISyntaxException e)
			{
				// malformed URI
			} catch (IllegalArgumentException e)
			{
				// the URI is not a valid 'file:' URI
			}
		}
		return list;
	}

}

---------- END SOURCE ----------

FREQUENCY : often


",,,,,,,,,,JDK-8263815,JDK-8263374,JDK-8264761,JDK-8263239,JDK-8263598,JDK-8267266,,,,,,,,,,,,,,,,JDK-8267512,,JDK-8275039,,,,JDK-8269283,JDK-8274751,JDK-8290995,JDK-8305479,JDK-8305194,,JDK-8232114,JDK-8261231,,,,,"2021-02-26 00:34;pnarayanaswa;TopLevelTransferHandlerDemo.java;https://bugs.openjdk.org/secure/attachment/93392/TopLevelTransferHandlerDemo.java",,,,,,,,,,,x86_64,,,,,,b01,15.0.2,,windows,,,,,,"0|i2roaz:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-02-26 00:47;pnarayanaswa;Checked with attached testcase in Windows 10, Issue is reproducible, test app hangs and observed regression in 8u281, 11.0.10, 15.0.2.
Test Result:
=========
JDK 8u271: Pass
JDK 8u281, b01: Fail

JDK 11.0.9: Pass
JDK 11.0.10, b01: Fail 

JDK 15.0.1: Pass
JDK 15.0.2, b01: Fail

JDK 16ea: Fail;;;","2021-02-26 14:08;serb;Looks like a duplicate of JDK-8261231;;;","2021-03-01 02:59;dmarkov;I could not reproduce the issue on Windows 10 using JDK 8u281-b01, 11.0.10-b08, 16-b30 and 17. 

I used the following procedure:
1. Run TopLevelTransferHandlerDemo app attached to the bug
2. Drag a text file from the FileExplorer to the app

I repeated the steps above many times but the app kept woking, no hang observed.

[~pnarayanaswa] Could you provide me with the details steps to replicate the problem, please? ;;;","2021-03-04 01:45;dmarkov;It looks like the failure is triggered by JDK-8232114;;;","2021-03-04 02:26;dmarkov;The IME functions and the DND operation must be executed on the toolkit thread. If the DND operation is in progress, the IME API is invoked via SendMessage() call inside InvokeInputMethodFunction() to avoid a hang. The flag isInDoDragDropLoop indicates whether the DND takes place or not. The flag works properly if the DND is performed between two Java windows. However if anything is dragged from native app, (e.g. Windows FileExplorer) to Java the flag is NOT set. That’s the root cause of the hang.

Fix:
Introduce a new flag to indicate DND operation between Java and native app. 
;;;","2021-03-08 09:25;roboduke;Changeset: bf9b74d1
Author:    Dmitry Markov <dmarkov@openjdk.org>
Date:      2021-03-08 16:38:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bf9b74d1
;;;","2021-03-09 05:48;dmarkov;Fix Request (16u) 

- Justification: The changes fix the regression introduced by JDK-8232114
- Risk Analysis: Low, small changes in awt_DnDDT.cpp 
- Testing: The fix may be verified using the test attached to the bug (see steps to reproduce above) 

The patch from jdk-dev (17) applies cleanly to 16u.;;;","2021-03-16 04:30;mdoerr;Fix Request (11u)
Should get backported for parity with 11.0.12-oracle. Applies cleanly except Copyright year change.;;;","2021-04-06 02:53;yan;Fix request (15u):
backporting as follow-up to 8232114. Applies clean.;;;","2021-05-05 08:12;akasko;Fix Request (8u):

Backport to 8u requested because it is a part of 8u301-oracle. 11u patch applies cleanly after the path change. 8u exported commit:

https://cr.openjdk.java.net/~akasko/jdk8u/8262446/8262446_8u.changeset

Testing: checked that attached TopLevelTransferHandlerDemo.java hangs without the patch and doesn't hang with patch applied.;;;",,,,,,,,,,,,,,,,,,
(windows) Use all proxy configuration sources when java.net.useSystemProxies=true,JDK-8262442,5042801,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,webbuggrp,webbuggrp,2021-02-24 05:46,2022-08-02 06:30,2023-10-01 09:57,2022-01-13 06:43,11,17,8,,,,,,19,core-libs,,0,dcsaw,release-note=yes,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Tested with Windows 10, but behavior should be the same in all Windows versions.

A DESCRIPTION OF THE PROBLEM :
When multiple Windows proxy configuration options are selected (automatic detection, setup script address, manual proxy setup), proxy selector only attempts one, and ignores all others.

Proxy selector should try automatic script first, but fall back to configured script and eventually to manual configuration if earlier methods fail. See Microsoft's example: https://support.microsoft.com/en-us/topic/how-the-windows-update-client-determines-which-proxy-server-to-use-to-connect-to-the-windows-update-web-site-08612ae5-3722-886c-f1e1-d012516c22a1

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Pick a machine with no automatic proxy configuration (WPAD) available
In proxy configuration select ""Automatically detect settings"" and ""Use a proxy server""; set any proxy server address (I used 127.0.0.1:8192)
[1] Run attached code with -Djava.net.useSystemProxies=true
Deselect ""Automatically detect settings""
[2] Run attached code again

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Both runs return configured proxy
ACTUAL -
First run returns [DIRECT], second run returns configured proxy

---------- BEGIN SOURCE ----------
import java.net.ProxySelector;
import java.net.URI;
import java.net.URISyntaxException;

public class ProxySel {
    public static void main(String[] args) throws URISyntaxException {
        ProxySelector sel = ProxySelector.getDefault();
        System.out.println(sel.select(new URI(""http://example.com"")).toString());
    }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8240701,JDK-8259529,,,JCK-7317404,JDK-8289514,,,,,,,,,,,"2021-02-26 00:14;tongwan;ProxySel.java;https://bugs.openjdk.org/secure/attachment/93385/ProxySel.java",,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2rpez:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-02-26 00:13;tongwan;The observations on Windows 10:
JDK 8: Failed, First run with Automatically detect settings returns [DIRECT]
JDK 11: Failed.
JDK 17ea+6: Failed.;;;","2021-04-14 09:09;michaelm;The getSystemProxies native code on Windows queries either a WPAD entry for the destination, a PAC file or a hard coded hostname in that order, but only one of these is used, at most.

To implement the desired behavior would mean following all three options if set, and requires potentially two calls to WinHttpGetProxyForUrl for the first two options, and then if a hardcoded name configured that could be included as well.;;;","2022-01-13 06:43;roboduke;Changeset: 6fcaa322
Author:    Daniel Jelinski <daniel.jelinski@oracle.com>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-01-13 14:41:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6fcaa322d90f06ba79a8fc30ebe314aa9ea8e959
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"sun/security/ssl/SSLLogger/LoggingFormatConsistency.java failed with ""SocketException: Socket is closed""",JDK-8262438,5042992,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ewhelan,dcubed,dcubed,2021-02-25 19:44,2021-10-06 00:38,2023-10-01 09:57,2021-03-10 07:16,17,,,,,,,,17,security-libs,,0,intermittent,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,testbug,tier2,,,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

sun/security/ssl/SSLLogger/LoggingFormatConsistency.java

Here's a snippet from the log file:

javax.net.ssl|WARNING|10|main|2021-02-26 02:17:32.853 GMT|SSLSocketImpl.java:590|SSLSocket duplex close failed ( ""throwable"" : { java.net.SocketException: Socket is closed at java.base/java.net.Socket.shutdownInput(Socket.java:1597) at java.base/sun.security.ssl.BaseSSLSocketImpl.shutdownInput(BaseSSLSocketImpl.java:217) at java.base/sun.security.ssl.SSLSocketImpl.shutdownInput(SSLSocketImpl.java:843) at

The log file is a mess for this failure.",,,,,,,,,,JDK-8274822,JDK-8271851,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rqlf:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-03-08 11:21;rhalade;Remove platform specific information (CPU/OS) from bug metadata as the failure is seen on other platforms as well and doesn't seem to be platform specific.;;;","2021-03-10 07:16;roboduke;Changeset: b2a2ddff
Author:    Evan Whelan <ewhelan@openjdk.org>
Committer: Rob McKenna <robm@openjdk.org>
Date:      2021-03-10 15:15:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b2a2ddff
;;;","2021-10-04 23:39;goetz;Fix request [11u]

I backport this for parity with 11.0.14-oracle.
No risk, only a test change.
Clean backport.
Test passes.  Nighttests pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Clarify the behavior of a few inherited ZipInputStream methods,JDK-8262435,5042989,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,jpai,jpai,2021-02-25 18:11,2022-11-28 14:44,2023-10-01 09:57,2022-11-15 08:47,,,,,,,,,20,core-libs,,0,17ea,noreg-doc,,,,,,,,,,,,,,,,,,,,,"The javadoc of InputStream#readAllBytes() states[1] that it reads all the remaining bytes of the stream. The java.util.zip.ZipInputStream doesn't override this method and thus ""inherits"" this javadoc. The implementation of InputStream#readAllBytes() ultimately ends up calling ZipInputStream#read()[2], so the implementation correctly reads only till the end of the current ZipEntry and not the entire ZipInputStream. However, because the javadoc gets inherited, reading any code like the following doesn't make it clear that it's only reading till the end of the current entry:

zis = ... // ZipInputStream
while ((e = zis.getNextEntry()) != null) {
    String name = e.getName();
    zis.readAllBytes(); // gives an impression that all bytes of the stream are read
    ...
}

Adding javadoc to the readAllBytes and readNBytes methods in ZipInputStream should help avoid any confusion in behaviour of these methods.


[1] https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/io/InputStream.html#readAllBytes()
[2] https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/util/zip/ZipInputStream.html#read(byte%5B%5D,int,int)


(Discussed in core-libs-dev mailing list https://mail.openjdk.java.net/pipermail/core-libs-dev/2021-February/074651.html)",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296813,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rqkr:",9223372036854775807,b24,,,,,,,,,,,,"2022-11-10 10:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10995
Date: 2022-11-04 18:13:23 +0000;;;","2022-11-15 08:47;dukebot;Changeset: 6aef3a4a
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2022-11-15 16:44:14 +0000
URL:       https://git.openjdk.org/jdk/commit/6aef3a4a3d41116cb4f3783a83c91d5340ef4698
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
doclint: reference error in module jdk.incubator.foreign,JDK-8262433,5042987,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-02-25 16:30,2021-03-02 17:40,2023-10-01 09:57,2021-02-25 16:52,17,,,,,,,,17,core-libs,,0,doclint,noreg-doc,,,,,,,,,,,,,,,,,,,,,"open/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java:53: error: reference not found
 * programmers should treat instances that are {@linkplain #equals(Object) equal} as interchangeable and should not
                                                           ^
1 error",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rqkb:",9223372036854775807,b12,,,,,,,,,,,,"2021-02-25 16:52;roboduke;Changeset: fce57656
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-02-26 00:51:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fce57656
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
doclint warnings in java.base module,JDK-8262430,5042977,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-02-25 14:46,2021-03-02 17:41,2023-10-01 09:57,2021-02-26 07:13,17,,,,,,,,17,core-libs,,0,doclint,noreg-doc,,,,,,,,,,,,,,,,,,,,,"open/src/java.base/share/classes/java/nio/channels/ServerSocketChannel.java:356: error: reference not found
     *          channel is bound to an {@link InetSocketAddress}
                                              ^
1 error


open/src/java.base/share/classes/java/net/doc-files/net-properties.html:258: warning: empty <p> tag
<p>
^
1 warning",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rqi3:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-02-26 07:13;roboduke;Changeset: 3088e1e6
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-02-26 15:12:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3088e1e6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
doclint warnings in java.xml module,JDK-8262428,5042975,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-02-25 14:34,2021-03-02 17:40,2023-10-01 09:57,2021-02-25 15:40,17,,,,,,,,17,core-libs,,0,doclint,noreg-doc,,,,,,,,,,,,,,,,,,,,,"open/src/java.xml/share/classes/module-info.java:44: warning: empty <p> tag
 * <p>
   ^
open/src/java.xml/share/classes/module-info.java:60: warning: empty <p> tag
 * <p>
   ^
open/src/java.xml/share/classes/module-info.java:117: warning: empty <p> tag
 * <p>
   ^
open/src/java.xml/share/classes/module-info.java:122: warning: empty <p> tag
 * <p>
   ^
open/src/java.xml/share/classes/module-info.java:168: error: unexpected end tag: </tr>
 * </tr>
   ^
open/src/java.xml/share/classes/module-info.java:196: warning: empty <p> tag
 * <p>
   ^
open/src/java.xml/share/classes/module-info.java:200: warning: empty <p> tag
 * <p>
   ^
1 error
6 warnings",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rqhn:",9223372036854775807,b12,,,,,,,,,,,,"2021-02-25 15:40;roboduke;Changeset: 059ede0d
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-02-25 23:39:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/059ede0d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
doclint warnings in jdk.compiler module,JDK-8262421,5042966,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-02-25 13:05,2021-03-02 17:40,2023-10-01 09:57,2021-02-25 14:28,,,,,,,,,17,tools,,0,doclint,noreg-doc,,,,,,,,,,,,,,,,,,,,,"open/src/jdk.compiler/share/classes/com/sun/source/util/DocTrees.java:237: warning: no @param for tree
    public abstract String getCharacters(EntityTree tree);
                           ^
open/src/jdk.compiler/share/classes/com/sun/source/util/DocTreeFactory.java:281: warning: no @param for isInline
    default ReturnTree newReturnTree(boolean isInline, List<? extends DocTree> description) {
                       ^
2 warnings",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rqfn:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-02-25 14:28;roboduke;Changeset: 82565170
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-02-25 22:28:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/82565170
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
typo: @implnote in java.desktop module,JDK-8262420,5042959,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-02-25 12:57,2021-03-02 17:41,2023-10-01 09:57,2021-02-26 07:11,17,,,,,,,,17,client-libs,,0,doclint,noreg-doc,,,,,,,,,,,,,,,,,,,,,"open/src/java.desktop/share/classes/java/awt/TrayIcon.java:75: error: unknown tag: implnote
 * @implnote
   ^
1 error

There are other issues as well.  Here is the comment:

 * <p>If a SecurityManager is installed, the AWTPermission
 * {@code accessSystemTray} must be granted in order to create
 * a {@code TrayIcon}. Otherwise the constructor will throw a
 * SecurityException.
 *
 * <p>
 * @implnote
 * When the {@systemProperty apple.awt.enableTemplateImages} property is
 * set, all images associated with instances of this class are treated
 * as template images by the native desktop system. This means all color
 * information is discarded, and the image is adapted automatically to
 * be visible when desktop theme and/or colors change. This property
 * only affects MacOSX.
 *
 * <p> See the {@link SystemTray} class overview for an example on how
 * to use the {@code TrayIcon} API.
 *
 * @since 1.6
 * @see SystemTray#add
 * @see java.awt.event.ComponentEvent#getComponent
 * @see java.util.EventObject#getSource
 *
 * @author Bino George
 * @author Denis Mikhalkin
 * @author Sharon Zakhour
 * @author Anton Tarasov
 */

1. (minor)  `<p>` before a block tag is redundant, and will give a warning.

2. (Probable) @implNote is a block tag.  As such, it will consume all content until either the beginning of the next block tag (@since) or the end of the comment.  In this case, the paragraph after the @implNote, beginning `<p> See the {@link SystemTray} class, is probably misplaced.  Probably, that short paragraph should be moved up, ahead of the @implNote.  The fault in the current version is more obvious when you look at the generated docs, and see that the ""See the ..."" paragraph is part of the impl note.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rqe3:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-02-25 13:27;prr;>  MacOSX.
I think these days we write ""macOS"";;;","2021-02-26 07:11;roboduke;Changeset: 67b9e5a6
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-02-26 15:11:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/67b9e5a6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"sun/security/ssl/SSLSocketImpl/SSLSocketImplThrowsWrongExceptions. SSL test failures caused by java failed with ""Server reported the wrong exception""",JDK-8262409,5042947,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fguallini,dcubed,dcubed,2021-02-25 11:48,2021-10-22 03:47,2023-10-01 09:57,2021-06-03 09:08,17,,,,,,,,17,security-libs,,0,intermittent,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,testbug,tier2,,,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

sun/security/ssl/SSLSocketImpl/SSLSocketImplThrowsWrongExceptions.java

Here's a snippet from the log file:

#section:main
----------messages:(4/198)----------
command: main SSLSocketImplThrowsWrongExceptions
reason: User specified action: run main/othervm SSLSocketImplThrowsWrongExceptions 
Mode: othervm [/othervm specified]
elapsed time (seconds): 0.392
----------configuration:(0/0)----------
----------System.out:(10/440)----------
starting Server
    Client starting
got server socket
Server socket accepting...
        Client creating socket
Server starting handshake
        Client starting handshake
       Client reported correct exception
       javax.net.ssl.SSLHandshakeException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
Server reported the wrong exception
----------System.err:(31/2280)----------
Server died...
java.net.SocketException: Broken pipe
	at java.base/sun.nio.ch.NioSocketImpl.implWrite(NioSocketImpl.java:420)
	at java.base/sun.nio.ch.NioSocketImpl.write(NioSocketImpl.java:440)
	at java.base/sun.nio.ch.NioSocketImpl$2.write(NioSocketImpl.java:826)
	at java.base/java.net.Socket$SocketOutputStream.write(Socket.java:1031)
	at java.base/sun.security.ssl.SSLSocketOutputRecord.flush(SSLSocketOutputRecord.java:266)
	at java.base/sun.security.ssl.HandshakeOutStream.flush(HandshakeOutStream.java:89)
	at java.base/sun.security.ssl.Finished$T13FinishedProducer.onProduceFinished(Finished.java:787)
	at java.base/sun.security.ssl.Finished$T13FinishedProducer.produce(Finished.java:675)
	at java.base/sun.security.ssl.SSLHandshake.produce(SSLHandshake.java:440)
	at java.base/sun.security.ssl.ClientHello$T13ClientHelloConsumer.goServerHello(ClientHello.java:1252)
	at java.base/sun.security.ssl.ClientHello$T13ClientHelloConsumer.consume(ClientHello.java:1188)
	at java.base/sun.security.ssl.ClientHello$ClientHelloConsumer.onClientHello(ClientHello.java:851)
	at java.base/sun.security.ssl.ClientHello$ClientHelloConsumer.consume(ClientHello.java:812)
	at java.base/sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:396)
	at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:480)
	at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:458)
	at java.base/sun.security.ssl.TransportContext.dispatch(TransportContext.java:199)
	at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:172)
	at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1501)
	at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1415)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:450)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:421)
	at SSLSocketImplThrowsWrongExceptions.doServerSide(SSLSocketImplThrowsWrongExceptions.java:96)
	at SSLSocketImplThrowsWrongExceptions$1.run(SSLSocketImplThrowsWrongExceptions.java:266)

JavaTest Message: Test threw exception: java.net.SocketException: Broken pipe
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.net.SocketException: Broken pipe
----------rerun:(36/5839)*----------",,,,,,,,,,JDK-8274869,JDK-8271618,JDK-8269740,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262436,,,,,,JDK-8259662,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2rqbf:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-02-25 11:56;rhalade;This test failure looks to be related JDK-8259662. We should run these ssl tests in a loop to find intermittent failures.;;;","2021-02-25 12:05;rhalade;Tests from following groups should be evaluated:

sun/security/ssl
sun/security/util
sun/net/www/protocol/https
javax/net/ssl
java/net/httpclient
com/sun/jndi/ldap/LdapCBPropertiesTest.java
;;;","2021-02-25 12:08;rhalade;This would require a larger effort to evaluate all these tests so I will file a separate bug and create tasks from it to address.;;;","2021-03-23 15:29;cverghese;The exception mentioned here seems to be related to JDK-8259516. ;;;","2021-06-02 03:12;fguallini;As mentioned above, this test failure is related to JDK-8259662. ;;;","2021-06-03 09:08;roboduke;Changeset: 3aa7062c
Author:    Fernando Guallini <fguallini@openjdk.org>
Committer: Rajan Halade <rhalade@openjdk.org>
Date:      2021-06-03 16:06:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3aa7062c3dd41e06df67b46473ee2ef5a9671cf9
;;;","2021-07-01 00:06;clanger;Fix request (11u):
Request for backporting this testfix to JDK11u. After JDK-8259662 was backported we run into this test issue intermittently. Testfix applied clean, problem list entry did not exist in 11 though.;;;",,,,,,,,,,,,,,,,,,,,,
runtime/exceptionMsgs/AbstractMethodError/AbstractMethodErrorTest.java fails in test_ame5_compiled_vtable_stub with wrapper ,JDK-8262400,5042937,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,lmesnik,lmesnik,2021-02-25 11:17,2022-03-02 17:19,2023-10-01 09:57,2022-02-24 05:00,repo-loom,,,,,,,,19,hotspot,,0,wrapper,,,,,,,,,,,,,,,,,,,,,,"Test runtime/exceptionMsgs/AbstractMethodError/AbstractMethodErrorTest.java 
fails when running with the wrapper. Failure is intermittent, failing ~10 times from 500 runs on my local VM.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rq97:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-02-25 11:17;lmesnik;log:

----------System.out:(13/1368)----------
warmup:
B.ma() C.ma() D.ma() E.ma() C.mc() D.mc() E.mc() C.mc() D.mc() E.mc() C.mc() D.mc() E.mc() 
B.ma() C.ma() D.ma() E.ma() C.mc() D.mc() E.mc() C.mc() D.mc() E.mc() C.mc() D.mc() E.mc() 
warmup done.
Passed with message: Receiver class AME1_E does not define or inherit an implementation of the resolved method 'abstract java.lang.String aFunctionOfMyInterface()' of interface AME1_C.
Passed with message: Receiver class AME3_C does not define or inherit an implementation of the resolved method 'void ma()' of class AME3_A. Selected method is 'abstract void AME3_B.ma()'.
Passed with message: Receiver class AME3_C does not define or inherit an implementation of the resolved method 'abstract void ma()' of abstract class AME3_B.
C.ma() D.ma() C.ma() D.ma() C.ma() D.ma() C.ma() D.ma() C.ma() 
Passed with message: Missing implementation of resolved method 'abstract void ma()' of abstract class AME4_B.
B.ma() C.ma() D.ma() E.ma() C.mc() D.mc() E.mc() C.mc() D.mc() E.mc() C.mc() D.mc() E.mc() 
Expected: Receiver class AME5_B does not define or inherit an implementation of the resolved method 'abstract void mc()' of abstract class AME5_A.
but got:  Missing implementation of resolved method 'abstract void mc()' of abstract class AME5_A.
java.lang.AbstractMethodError: Missing implementation of resolved method 'abstract void mc()' of abstract class AME5_A.
----------System.err:(17/1241)----------
java.lang.RuntimeException: Wrong error message of AbstractMethodError.
	at AbstractMethodErrorTest.test_ame5_compiled_vtable_stub(AbstractMethodErrorTest.java:394)
	at AbstractMethodErrorTest.main(AbstractMethodErrorTest.java:491)
	at java.base/jdk.internal.reflect.NewAccessorImplFactory$1.invoke(NewAccessorImplFactory.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:94)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:136)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:295)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:171)
	at java.base/java.lang.Continuation.enter0(Continuation.java:396)
	at java.base/java.lang.Continuation.enter(Continuation.java:389)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Wrong error message of AbstractMethodError.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Wrong error message of AbstractMethodError.;;;","2021-02-25 11:18;lmesnik;link to failure:
https://mach5.us.oracle.com/mdash/jobs/mach5-one-jdk-17-loom+3-121-tier3-20210225-0028-18637214/tasks/mach5-one-jdk-17-loom+3-121-tier3-20210225-0028-18637214-open_test_hotspot_jtreg_tier1-linux-x64-debug-4/results?search=status%3Afailed%20AND%20-state%3Ainvalid;;;","2021-02-25 11:40;lmesnik;The incorrect message is selected in the following code in linkResover.cpp  because recv is NULL:

 // Selected method is abstract.
void LinkResolver::throw_abstract_method_error(const methodHandle& resolved_method,
                                               const methodHandle& selected_method,
                                               Klass *recv_klass, TRAPS) {
  Klass *resolved_klass = resolved_method->method_holder();
  ResourceMark rm(THREAD);
  stringStream ss;

  if (recv_klass != NULL) {
    ss.print(""Receiver class %s does not define or inherit an ""
             ""implementation of the"",
             recv_klass->external_name());
  } else {
    ss.print(""Missing implementation of"");
  }
;;;","2021-12-18 09:23;alanb;A lot of code has changed since this bug was created. I've run the test 100 times with the wrapper on 4 platforms with release + fast debug builds (800 runs in total) and no sighting. ;;;","2022-02-23 08:39;coleenp;The wrong AME exception message comes from the interpreter.  I did reproduce this the other day but I can't anymore, now that I've added logging for deoptimization.  The test failure is with -XX:+DeoptimizeALot so the function test_ame5_compiled_vtable_stub likely was deoptimized.;;;","2022-02-23 08:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7596
Date: 2022-02-23 16:50:38 +0000;;;","2022-02-24 05:00;dukebot;Changeset: f4486a19
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-02-24 12:59:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f4486a190e38c57b7c10e6cff4622bd1b716a724
;;;",,,,,,,,,,,,,,,,,,,,,
Update Mesa 3-D Headers to version 21.0.3,JDK-8262396,5042932,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-02-25 10:57,2023-01-10 10:42,2023-10-01 09:57,2021-05-06 08:32,8,jfx11,jfx17,,,,,,jfx17,javafx,,0,3rdparty,sn_92,,,,,,,,,,,,,,,,,,,,,"We currently use Mesa 3-D Headers version 19.2.1.

GL/gl.h
GL/glx.h
GL/glext.h 
GL/glxext.h 
GL/wglext.h 
KHR/khrplatform.h 

Need to update to the latest 21.0.3 version  https://www.mesa3d.org",,,,,,,,,,JDK-8266652,JDK-8272534,,,,,,,,,JDK-8262392,,,,,,,,,,,,,,,,,JDK-8232210,JDK-8214015,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rq83:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-05-06 08:32;roboduke;Changeset: ab7c1515
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-05-06 15:31:58 +0000
URL:       https://git.openjdk.java.net/jfx/commit/ab7c15159d840377e6ceb9a80dd62e074aa80301
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Update Mesa 3-D Headers to version 21.0.3,JDK-8262392,5042928,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,vdyakov,vdyakov,2021-02-25 10:25,2023-01-10 10:43,2023-10-01 09:57,2021-05-05 12:39,11,17,7,8,,,,,17,client-libs,,0,11-bp,3rdparty,7-bp,8-bp,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,sn_92,,,,,,,,,,,,"We currently use Mesa 3-D Headers 

GL/gl.h
GL/glx.h
GL/glext.h 
GL/glxext.h 
GL/wglext.h 
KHR/khrplatform.h 

Need to update to the latest 21.0.3 version released on 2021-04-21 https://www.mesa3d.org",,,,,,,,,,JDK-8266762,JDK-8273994,JDK-8266767,JDK-8273995,JDK-8266588,JDK-8268462,,,,,,,,JDK-8262396,JDK-8214015,,,,,,JDK-8232154,,,,,,,JDK-8214015,JDK-8280786,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rq77:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-02-25 14:05;prr;Current latest : https://docs.mesa3d.org/relnotes/20.3.4.html;;;","2021-05-05 12:39;roboduke;Changeset: 138d573c
Author:    Phil Race <prr@openjdk.org>
Date:      2021-05-05 19:39:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/138d573c3567e9a51b1ac2b1de89b41c4b51ae93
;;;","2021-09-20 06:54;bae;Fix request (15u, 13u):
 I would like to backport this change to 15u and 13u  in order to keep Mesa 3-D headers in sync with upstream and 11u.
 Patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Use permitted_enctypes if default_tkt_enctypes or default_tgs_enctypes is not present,JDK-8262389,5042925,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2021-02-25 10:11,2021-11-16 10:13,2023-10-01 09:57,2021-04-06 16:59,,,,,,,,,17,security-libs,,0,release-note=yes,,,,,,,,,,,,,,,,,,,,,,"Starting in MIT krb5 release 1.18, permitted_enctypes also acts as the default for default_tkt_enctypes and default_tgs_enctypes. We can do the same.",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262391,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rq6j:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7a7b7e03,,,,,,,,,"2021-04-06 16:59;roboduke;Changeset: eb5c097b
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-04-06 23:58:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/eb5c097b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
resourcehogs/serviceability/sa/TestHeapDumpForLargeArray.java timed out,JDK-8262386,5042922,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lzang,dcubed,dcubed,2021-02-25 10:04,2022-12-27 01:05,2023-10-01 09:57,2021-08-27 02:03,17,,,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,tencent-interest,tier3,tier4,tier5,,,,,,,,,,,,,,,,,"The following test timed out in the JDK17 CI:

resourcehogs/serviceability/sa/TestHeapDumpForLargeArray.java

Here's a log file snippet for one of the failures:

----------System.err:(26/1305)----------
 stdout: [Attaching to process ID 13151, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 17-ea+12-LTS-842
];
 stderr: [WARNING: Cannot dump array of type int with length 1073741823; truncating to length 1073717270
]
 exitValue = 134

java.lang.RuntimeException: Expected to get exit value of [0]

	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:474)
	at TestHeapDumpForLargeArray.attachAndDump(TestHeapDumpForLargeArray.java:67)
	at TestHeapDumpForLargeArray.main(TestHeapDumpForLargeArray.java:96)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Expected to get exit value of [0]

JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0]
----------rerun:(44/7874)*----------

The test task for the above failing snippet has the following JVM args:

-XX:+CreateCoredumpOnCrash -XX:+UseParallelGC -XX:+UseNUMA",,,,,,,,,,JDK-8296078,JDK-8299357,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262416,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rq5v:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-02-25 10:15;dcubed;The jdk-17+12-842-tier3 build-ID contains a couple of SA related changes that might be related:

JDK-8257234 Add gz option to SA jmap to write a gzipped heap dump

JDK-8261131 jcmd jmap dump should not accept gz option with no value;;;","2021-02-25 11:23;cjplummer;There is a timeout after two hours. This seems to be the stuck thread (note it has allocated 11,540G):

""main"" #1 prio=5 os_prio=0 cpu=5627547.68ms elapsed=7216.28s allocated=11540G defined_classes=506 tid=0x00007f2958027240 nid=0xcae runnable  [0x00007f295f336000]
   java.lang.Thread.State: RUNNABLE
Thread: 0x00007f2958027240  [0xcae] State: _at_safepoint _at_poll_safepoint 0
   JavaThread state: _thread_blocked
	at java.io.DataOutputStream.writeInt(java.base@17-ea/DataOutputStream.java:208)
	at sun.jvm.hotspot.utilities.HeapHprofBinWriter.writeIntArray(jdk.hotspot.agent@17-ea/HeapHprofBinWriter.java:928)
	at sun.jvm.hotspot.utilities.HeapHprofBinWriter.writePrimitiveArray(jdk.hotspot.agent@17-ea/HeapHprofBinWriter.java:893)
	at sun.jvm.hotspot.utilities.AbstractHeapGraphWriter$1.doObj(jdk.hotspot.agent@17-ea/AbstractHeapGraphWriter.java:64)
	at sun.jvm.hotspot.oops.ObjectHeap.iterateLiveRegions(jdk.hotspot.agent@17-ea/ObjectHeap.java:252)
	at sun.jvm.hotspot.oops.ObjectHeap.iterate(jdk.hotspot.agent@17-ea/ObjectHeap.java:101)
	at sun.jvm.hotspot.utilities.AbstractHeapGraphWriter.write(jdk.hotspot.agent@17-ea/AbstractHeapGraphWriter.java:51)
	at sun.jvm.hotspot.utilities.HeapHprofBinWriter.write(jdk.hotspot.agent@17-ea/HeapHprofBinWriter.java:469)
	- locked <0x000000060e8c2220> (a sun.jvm.hotspot.utilities.HeapHprofBinWriter)
	at sun.jvm.hotspot.tools.JMap.writeHeapHprofBin(jdk.hotspot.agent@17-ea/JMap.java:216)
	at sun.jvm.hotspot.tools.JMap.run(jdk.hotspot.agent@17-ea/JMap.java:103)
	at sun.jvm.hotspot.tools.Tool.startInternal(jdk.hotspot.agent@17-ea/Tool.java:262)
	at sun.jvm.hotspot.tools.Tool.start(jdk.hotspot.agent@17-ea/Tool.java:225)
	at sun.jvm.hotspot.tools.Tool.execute(jdk.hotspot.agent@17-ea/Tool.java:118)
	at sun.jvm.hotspot.tools.JMap.main(jdk.hotspot.agent@17-ea/JMap.java:202)
	at sun.jvm.hotspot.SALauncher.runJMAP(jdk.hotspot.agent@17-ea/SALauncher.java:339)
	at sun.jvm.hotspot.SALauncher$$Lambda$4/0x0000000801002000.accept(jdk.hotspot.agent@17-ea/Unknown Source)
	at sun.jvm.hotspot.SALauncher.main(jdk.hotspot.agent@17-ea/SALauncher.java:491);;;","2021-02-25 15:53;lzang;Start to investigate , will add comments ASAP, Thanks!;;;","2021-02-25 16:28;cjplummer;Thanks. The test is already problem listed, so it's not urgent, but should be addressed in the near term.;;;","2021-03-01 04:15;lzang;Hi Chris, 
I can not reproduce it on my linux machine (16GB, 12 cores). 
Does this test worked on a machine with large RAM and many cores from your side? 
One thing I guess from the stack trace is that the memory consumption is large and may cause a full gc, which cause the process no response. 
I can start my investigation from that point but would like to confirm first whether OOM or Full gc is the cause.

Thanks!
Lin ;;;","2021-03-01 11:24;cjplummer;[~lzang] From what I can see it failed on every run with every platform (linux-x64, linux-aarch64, windows, macosx) and with every GC configuration (serial, parallel, default of G1). It looks like all the testing was with debug builds (no product build runs). Other than specifying the GC, no other VM args of importance are specified.

We have a wide variety of host configurations. I looked at one from each of the 4 platforms, and they ranged from 4-12 cores and 12-48gb of memory.

BTW, the test won't run any a host with less than 8gb:

 * @requires vm.hasSA & (vm.bits == ""64"" & os.maxMemory > 8g)
;;;","2021-03-01 12:22;cjplummer;I'm running now locally and am seeing the same issue. The top of the stack is always the following, except sometimes one of the top 2 frames is not there, and HeapHprofBinWriter.writeIntArray() is the top of the stack. Seems to be burning 100% of CPU the whole time.

	at sun.jvm.hotspot.utilities.HeapHprofBinWriter$SegmentedOutputStream.write(jdk.hotspot.agent@17-internal/HeapHprofBinWriter.java:1392)
	- locked <0x000000008200e388> (a sun.jvm.hotspot.utilities.HeapHprofBinWriter$SegmentedOutputStream)
	at java.io.DataOutputStream.writeInt(java.base@17-internal/DataOutputStream.java:208)
	at sun.jvm.hotspot.utilities.HeapHprofBinWriter.writeIntArray(jdk.hotspot.agent@17-internal/HeapHprofBinWriter.java:928)
	at sun.jvm.hotspot.utilities.HeapHprofBinWriter.writePrimitiveArray(jdk.hotspot.agent@17-internal/HeapHprofBinWriter.java:893)
	at sun.jvm.hotspot.utilities.AbstractHeapGraphWriter$1.doObj(jdk.hotspot.agent@17-internal/AbstractHeapGraphWriter.java:64)
	at sun.jvm.hotspot.oops.ObjectHeap.iterateLiveRegions(jdk.hotspot.agent@17-internal/ObjectHeap.java:252)
	at sun.jvm.hotspot.oops.ObjectHeap.iterate(jdk.hotspot.agent@17-internal/ObjectHeap.java:101)
	at sun.jvm.hotspot.utilities.AbstractHeapGraphWriter.write(jdk.hotspot.agent@17-internal/AbstractHeapGraphWriter.java:51)
	at sun.jvm.hotspot.utilities.HeapHprofBinWriter.write(jdk.hotspot.agent@17-internal/HeapHprofBinWriter.java:469)
	- locked <0x000000008200e538> (a sun.jvm.hotspot.utilities.HeapHprofBinWriter)
	at sun.jvm.hotspot.tools.JMap.writeHeapHprofBin(jdk.hotspot.agent@17-internal/JMap.java:216)
;;;","2021-03-01 18:54;lzang;Hi Chris,
I can reproduce this issue with slowdebug build. (previously tried on release build.)
Thanks a lot for the info. 
Investigating the root cause and will update today.

Thanks,
Lin;;;","2021-03-02 03:05;lzang;Root caused this issue is caused by segmented heap dump impl, working on the fix;;;","2021-03-02 23:23;lzang;The root cause is that for huge array, array length is wrongly calculated because of the segmented heap dump support. 
The fix has been submitted https://github.com/openjdk/jdk/pull/2803
;;;","2021-03-03 19:22;lzang;Some detailed info about the root cause:
- The issue comes from the combination of 2 bugs:  segmented heap dump and huge array.

The segmented heap dump defines a SegmentedOutputStream which internally maintains a buffer. The dumped data would first saved in this internal buffer, and *when* the segmented data can be written to file,  flush() would be triggered and internal buffer data would be written to underlying output stream. 

The time that the internal buffer could be written to file is when writeHeapRecordEpilogue() method is called. That is  -  when an object or array data are all save into the buffer.

And the dumped data for an object/array has a header that contains an U4 slot which indicates the size of the dumped data in segment. The current implementation cannot know the size of the object/array to be dumped at the beginning.  The size is calculated when the whole object/array data are saved, and then the size is filled into the size-slot of the segment header.  

The reason for having internal buffer is that When it comes to compression, we can not write the partial segmented data in to the file because the size-slot in the header is not filled, and it is hard to be filled when compressed. So the segmentedOutputStream works as following:
 - write data into the internal buffer. (predefined segment buffer size = 1MB)
 - when the buffer is full, create a larger one and copy exist one's data into it.
 - when the whole data is ready (where writeHeapRecordEpilogue() is called), filled the size slot and do flush().

Note that the segmented heap dump is used not only when generating compressed heap dump, but also when heap used size is huge to avoid the size-slot overflow (There is a size slot in the dump file even when segmented heap dump is not enabled.).

So in this case, there is a nearly 4GB huge array, which cause the huge heap used size. And hence enabled segmented heap dump.  
When dumping the huge array, the internal buffer is not enough, so it keeps extending with memory copying, GC and cause the problem.

And Also there is other issue at calculateArrayMaxLength(), where the underlying file's fos is used wrongly when segment dump enabled, because there can be segmented data not flushed so the truncated array size is wrongly calculated.

Since it can be known the size of the dumped data from calculateArrayMaxLength(),  there is no need to save the data into the internal buffer firstly, and hence the data could be write to underlying outputstream directly.  So I introduce the writeThrough mode, which could avoid the internal buffer copying, save the memory and hence fix this issue.

Please note that the current implementation of ""creating and copying"" has potential risk of memory consumption when the object is large, an ideal way would be to calculate all object/array size before real data dumping, and fill the header's size-slot at beginning. Then we could avoid the whole internal buffer mechanism.  But that optimization would require huge change in current implementation. I would like to file a separate bug that tracking it.

Thanks 
Lin;;;","2021-03-05 03:07;lzang;Also some update copied from github PR:

Update a new patch that reduce the memory consumption issue.
As mentioned in the CR, there is internal buffer used for segmented heap dump. The dumped object data firstly write into this buffer and then flush() when the size is known. when the internal buffer is full, the current implementation do:

new a larger buffer, copy data from old buffer into the new one, and then use it as the internal buffer.
This could cause large memory consumption because the old buffer data are copied, and also the old buffer can not be ""free"" until next GC.

For example, if the internel buffer's length is 1MB, when it is full, a new 2MB buffer is allocated so there is actually 3MB memory taken (old buffer + new buffer). And in this case, for the ~4GB large array, it keeps generating new buffers and do copying, which takes both CPU and memory intensively and cause the timeout issue.

This patch optimize it by creating a array list of byte[]. when old buffer is full, it saved into the list and the new one is created and used as the internal buffer. In this case, the above example takes 2MB（1MB for old， saved in the list; and 1MB for the new buffer)

Together with the ""write through"" mode introduced in this PR, by which all arrays are write through to underlying stream and hence no extra buffer requried. The PR could help fix the LargeArray issue and also save memory.

Thanks!
Lin;;;","2021-03-05 03:12;lzang;With the fix, all array data could be write-through. And the memory consumption could be reduced.

I think one furthur optimization could be ""calculate segment size at the begining"" as mentioned above. In this way there is no need to use the internal buffer mechanism which could save memory and improve the heap dump performance. But I prefer to create a new bug for it because the code change could be large and it is more like an optimization rathan than bug IMO.

Thanks,
Lin;;;","2021-03-08 20:09;cjplummer;[~lzang]Since you added writeThrough mode, I'm not sure I understand the need to also have the array list of byte[] to avoid copying an ever growing byte[]. If you are not buffering the output (because you're in writeThrough mode), why is the byte[] list needed. Is the byte[] list for when you are not using writeThrough mode? From what you said earlier, it sounds like writeThrough fixed this specific bug. Is the byte[] list just addressing a performance issue when not using writeThrough, and it not really related to the CR. If that is the case, it should probably be handled under a separate CR.;;;","2021-03-08 22:39;lzang;Hi Chris, 
I agree, the byte[] list is much more like an optimization for memory consumption. I will create a separate CR.

BRs,
Lin;;;","2021-08-27 02:03;roboduke;Changeset: 46684a4e
Author:    Lin Zang <lzang@openjdk.org>
Committer: Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2021-08-27 09:02:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/46684a4efa165d97c0ef8f56248ee82003acdb7b
;;;","2021-09-27 20:00;roboduke;Changeset: 8876eae4
Author:    Lin Zang <lzang@openjdk.org>
Date:      2021-09-28 02:59:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8876eae42993d4425ba9886dde94b08f6101a257
;;;","2022-12-21 03:01;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Low risk, changes servicability agent.
Clean backport.
SAP nightly testing passed.;;;","2022-12-21 03:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/962
Date: 2022-12-21 11:01:04 +0000;;;",,,,,,,,,
Add regression test for JDK-8257746,JDK-8262379,5042910,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,sgehwolf,sgehwolf,2021-02-25 07:39,2023-06-29 06:31,2023-10-01 09:57,2021-03-01 07:15,,,,,,,,,17,core-svc,,0,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,"With JDK-8254001 integrated, relevant infrastructure should be in place so as to be able to create a simple regression test for the NPE problem described in JDK-8257746",,,,,,,,,,JDK-8285998,JDK-8298934,JDK-8302410,JDK-8302053,JDK-8302834,,,,,,,,,,,,,,,,,,,,,,,JDK-8257746,,,,,,JDK-8254001,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2rq37:",9223372036854775807,b12,,,,,,,,,,,,"2021-02-25 08:08;sgehwolf;Proposed test fails prior JDK-8257746 with:

JavaTest Message: JUnit Failure: testCgroupv1CpuControllerOnly(TestCgroupSubsystemFactory): Cannot invoke ""jdk.internal.platform.cgroupv1.CgroupV1MemorySubSystemController.isSwapEnabled()"" because ""this.memory"" is null
java.lang.NullPointerException: Cannot invoke ""jdk.internal.platform.cgroupv1.CgroupV1MemorySubSystemController.isSwapEnabled()"" because ""this.memory"" is null
        at java.base/jdk.internal.platform.cgroupv1.CgroupV1Subsystem.getMemoryAndSwapLimit(CgroupV1Subsystem.java:357)
        at TestCgroupSubsystemFactory.testCgroupv1CpuControllerOnly(TestCgroupSubsystemFactory.java:275)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
        at org.junit.runners.Suite.runChild(Suite.java:128)
        at org.junit.runners.Suite.runChild(Suite.java:24)
        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
        at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
        at org.junit.runner.JUnitCore.run(JUnitCore.java:136)
        at org.junit.runner.JUnitCore.run(JUnitCore.java:127)
        at org.junit.runner.JUnitCore.runClasses(JUnitCore.java:76)
        at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:76)
        at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:43)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:831)


... and passes after.;;;","2021-03-01 07:15;roboduke;Changeset: 4c9adce2
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2021-03-01 15:14:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4c9adce2
;;;","2022-04-29 08:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1066
Date: 2022-04-29 15:16:35 +0000;;;","2022-04-29 08:34;jdowland;Fix Request (11u)

Please consider this backport for 11u as part of supporting cgroups v2. It depends upon
8254001. It's a clean, test-only change which passes.;;;","2022-11-14 03:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/171
Date: 2022-11-14 11:26:26 +0000;;;","2022-12-16 02:17;jdowland;Fix Request (8u)

Please consider for 8u as part of cgroups v2 support. Test-only change. Not clean: fix ups include adjusting Files.writeString to Files.write. Thanks;;;",,,,,,,,,,,,,,,,,,,,,,
Parallel class resolution loses constant pool error,JDK-8262377,5042906,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,coleenp,coleenp,2021-02-25 07:26,2021-03-17 21:55,2023-10-01 09:57,2021-03-10 12:59,17,,,,,,,,17,hotspot,,0,classloading,,,,,,,,,,,,,,,,,,,,,,"When resolving classes through the constant pool, we need to return the same error as a previous resolution because of JVMS 5.4.3:

""If an error occurs during resolution of the symbolic reference, then it is either (i) an instance of IncompatibleClassChangeError (or a subclass); (ii) an instance of Error (or a subclass) that arose from resolution or invocation of a bootstrap method; or (iii) an instance of LinkageError (or a subclass) that arose because class loading failed or a loader constraint was violated. The error must be thrown at a point in the program that (directly or indirectly) uses the symbolic reference.

Subsequent attempts to resolve the symbolic reference always fail with the same error that was thrown as a result of the initial resolution attempt. If the symbolic reference is to a dynamically-computed constant, the bootstrap method is not re-executed for these subsequent attempts.""

When loading classes in parallel, if a class loader changes the class bytes so that the second attempt succeeds, the constant pool entry that records the first failure can be overwritten and succeed.  Which due to timing, violates this rule.

Before permgen elimination, the constant pool was locked for the update at the end of loading, but it was changed to be unlocked, which could cause this stomp.

Old code used to recheck for error before updating the constant pool entry:
    } else {
      ObjectLocker ol (this_oop, THREAD);
      // Only updated constant pool - if it is resolved.
      do_resolve = this_oop->tag_at(which).is_unresolved_klass();
      if (do_resolve) {
        this_oop->klass_at_put(which, k());
      }
    }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rq2b:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-03-02 11:10;mseledtsov;ILW = MLM = P4;;;","2021-03-10 12:59;roboduke;Changeset: 57f16f9f
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-03-10 20:58:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/57f16f9f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
ReplaceCriticalClassesForSubgraphs.java fails if --with-build-jdk is used,JDK-8262376,5042905,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,cgo,cgo,2021-02-25 07:24,2021-05-06 19:13,2023-10-01 09:57,2021-04-29 16:23,17,,,,,,,,17,hotspot,,0,cds,oracle-triage-17,,,,,,,,,,,,,,,,,,,,,"The test case runtime/cds/serviceability/ReplaceCriticalClassesForSubgraphs.java fails, if an external build JDK is provided using the configure flag --with-build-jdk:

$ bash configure --with-jtreg=../jtreg/build/images/jtreg --with-conf-name=internal-buildjdk
$ make CONF=internal-buildjdk product-images test-image
$ bash configure --with-jtreg=../jtreg/build/images/jtreg --with-build-jdk=$(pwd)/build/internal-buildjdk/images/jdk/ --with-conf-name=external-buildjdk
$ make CONF=external-buildjdk product-images test-image

$ make CONF=internal-buildjdk TEST=test/hotspot/jtreg/runtime/cds/serviceability/ReplaceCriticalClassesForSubgraphs.java test
Test results: passed: 1
$ make CONF=external-buildjdk TEST=test/hotspot/jtreg/runtime/cds/serviceability/ReplaceCriticalClassesForSubgraphs.java test
Test results: failed: 1

It looks like the reason the test is failing is, that a different classlist file is generated:
$ bash -c 'diff <( sort ./build/internal-buildjdk/images/jdk/lib/classlist ) <( sort ./build/external-buildjdk/images/jdk/lib/classlist )'
544a545
> java/util/Collections$UnmodifiableMap
988a990
> jdk/internal/module/ModuleHashes$Builder
1006a1009
> jdk/internal/module/SystemModuleFinders$3
1286a1290
> sun/net/www/protocol/jrt/Handler
1393a1398
> sun/util/resources/cldr/provider/CLDRLocaleDataMetaInfo

The ordering in the classlists is also slightly different.

Copying the classlist from the CONF=internal-buildjdk to CONF=external-buildjdk makes the test pass.

Excerpt of the log of the failing test:
Test case[6] = ""-nowhitebox -subgraph java/lang/Module jdk.internal.module.ArchivedBootLayer""
Command line: [/home/cgo/dev/openjdk/jdk/build/external-buildjdk/images/jdk/bin/java -cp /home/cgo/dev/openjdk/jdk/build/external-buildjdk/test-support/jtreg_test_hotspot_jtreg_runtime_cds_serviceability_ReplaceCriticalClassesForSubgraphs_java/classes/0/runtime/cds/serviceability/ReplaceCriticalClassesForSubgraphs.d:/home/cgo/dev/openjdk/jdk/test/hotspot/jtreg/runtime/cds/serviceability:/home/cgo/dev/openjdk/jdk/build/external-buildjdk/test-support/jtreg_test_hotspot_jtreg_runtime_cds_serviceability_ReplaceCriticalClassesForSubgraphs_java/classes/0/test/lib:/home/cgo/dev/openjdk/jdk/test/lib:/home/cgo/dev/openjdk/jtreg/build/images/jtreg/lib/javatest.jar:/home/cgo/dev/openjdk/jtreg/build/images/jtreg/lib/jtreg.jar -XX:MaxRAMPercentage=3 -Djava.io.tmpdir=/home/cgo/dev/openjdk/jdk/build/external-buildjdk/test-support/jtreg_test_hotspot_jtreg_runtime_cds_serviceability_ReplaceCriticalClassesForSubgraphs_java/tmp -Xshare:auto -Dtest.timeout.factor=4.0 -XX:SharedArchiveFile=ReplaceCriticalClasses.jsa -showversion -Xlog:cds -XX:+UnlockDiagnosticVMOptions -agentlib:SimpleClassFileLoadHook=java/lang/Module,XXX,XXX -Xlog:cds,cds+heap ReplaceCriticalClasses child -shared java/lang/Module ]
[2021-02-25T15:21:00.807647643Z] Gathering output for process 2046385
[ELAPSED: 21 ms]
[logging stdout to /home/cgo/dev/openjdk/jdk/build/external-buildjdk/test-support/jtreg_test_hotspot_jtreg_runtime_cds_serviceability_ReplaceCriticalClassesForSubgraphs_java/scratch/0/runtime.cds.serviceability.ReplaceCriticalClassesForSubgraphs.java-0007-exec.stdout]
[logging stderr to /home/cgo/dev/openjdk/jdk/build/external-buildjdk/test-support/jtreg_test_hotspot_jtreg_runtime_cds_serviceability_ReplaceCriticalClassesForSubgraphs_java/scratch/0/runtime.cds.serviceability.ReplaceCriticalClassesForSubgraphs.java-0007-exec.stderr]
[STDERR]
Agent library loaded with options = java/lang/Module,XXX,XXX
CLASS_NAME = java/lang/Module, FROM = XXX, TO = XXX

[2021-02-25T15:21:00.827342352Z] Waiting for completion for process 2046385
[2021-02-25T15:21:00.827394728Z] Waiting for completion finished for process 2046385
[2021-02-25T15:21:00.827471242Z] Waiting for completion for process 2046385
[2021-02-25T15:21:00.827507596Z] Waiting for completion finished for process 2046385
[2021-02-25T15:21:00.827567508Z] Waiting for completion for process 2046385
[2021-02-25T15:21:00.827602746Z] Waiting for completion finished for process 2046385
STDERR:
 stdout: [[0.005s][info][cds] trying to map ReplaceCriticalClasses.jsa
[0.005s][info][cds] Opened archive ReplaceCriticalClasses.jsa.
[0.005s][info][cds] Archive was created with UseCompressedOops = 1, UseCompressedClassPointers = 1
[0.005s][info][cds] Mapped static  region #0 at base 0x0000000800000000 top 0x0000000800003000 (MiscCode)
[0.005s][info][cds] Mapped static  region #1 at base 0x0000000800003000 top 0x0000000800442000 (ReadWrite)
[0.005s][info][cds] Mapped static  region #2 at base 0x0000000800442000 top 0x0000000800c0a000 (ReadOnly)
[0.005s][info][cds] CDS archive was created with max heap size = 956M, and the following configuration:
[0.005s][info][cds]     narrow_klass_base = 0x0000000800000000, narrow_klass_shift = 3
[0.005s][info][cds]     narrow_oop_mode = 0, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 0
[0.005s][info][cds] The current max heap size = 956M, HeapRegion::GrainBytes = 1048576
[0.005s][info][cds]     narrow_klass_base = 0x0000000800000000, narrow_klass_shift = 3
[0.005s][info][cds]     narrow_oop_mode = 0, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 0
[0.005s][info][cds] CDS heap data relocation delta = 0 bytes
[0.005s][info][cds] Trying to map heap data: region[4] at 0x00000000fff00000, size =   565248 bytes
[0.005s][info][cds] Trying to map heap data: region[6] at 0x00000000ffe00000, size =   483328 bytes
[0.005s][info][cds] optimized module handling: enabled
[0.005s][info][cds] full module graph: enabled
[0.005s][info][cds] use_full_module_graph = true; java.base = 0x000000080043bcf8
[0.007s][info][cds,heap] subgraph sun.util.locale.BaseLocale cannot be used because JVMTI ClassFileLoadHook is enabled
[0.007s][info][cds,heap] subgraph jdk.internal.math.FDBigInteger cannot be used because JVMTI ClassFileLoadHook is enabled
[0.007s][info][cds,heap] subgraph jdk.internal.loader.ArchivedClassLoaders cannot be used because JVMTI ClassFileLoadHook is enabled
[0.007s][info][cds,heap] subgraph jdk.internal.module.ArchivedBootLayer cannot be used because JVMTI ClassFileLoadHook is enabled
[0.009s][info][cds,heap] initialize_from_archived_subgraph java.lang.Module$ArchivedData 0x0000000800175f20 (early)
[0.009s][info][cds,heap] initialize_from_archived_subgraph java.util.ImmutableCollections 0x0000000800075e48 (early)
[0.011s][info][cds,heap] initialize_from_archived_subgraph java.lang.Integer$IntegerCache 0x0000000800044140 (early)
[0.013s][info][cds,heap] subgraph jdk.internal.module.ArchivedBootLayer cannot be used because JVMTI ClassFileLoadHook is enabled
[0.013s][info][cds,heap] initialize_from_archived_subgraph java.lang.module.Configuration 0x0000000800165bf0 (early)
[0.013s][info][cds,heap] subgraph jdk.internal.loader.ArchivedClassLoaders cannot be used because JVMTI ClassFileLoadHook is enabled
[0.014s][info][cds,heap] initialize_from_archived_subgraph jdk.internal.module.ArchivedModuleGraph 0x0000000800169078 (early)
Error occurred during initialization of boot layer
java.lang.LayerInstantiationException: Module jdk.nio.mapmode is already defined
];
 stderr: [Agent library loaded with options = java/lang/Module,XXX,XXX
CLASS_NAME = java/lang/Module, FROM = XXX, TO = XXX
]
 exitValue = 1

java.lang.RuntimeException: 'initialize_from_archived_subgraph jdk.internal.module.ArchivedBootLayer' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:206)
	at ReplaceCriticalClasses.lambda$launchChild$0(ReplaceCriticalClasses.java:192)
	at jdk.test.lib.cds.CDSTestUtils$Result.assertNormalExit(CDSTestUtils.java:145)
	at ReplaceCriticalClasses.launchChild(ReplaceCriticalClasses.java:184)
	at ReplaceCriticalClasses.launchChildProcesses(ReplaceCriticalClasses.java:111)
	at ReplaceCriticalClasses.process(ReplaceCriticalClasses.java:60)
	at ReplaceCriticalClassesForSubgraphs.main(ReplaceCriticalClassesForSubgraphs.java:38)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 'initialize_from_archived_subgraph jdk.internal.module.ArchivedBootLayer' missing from stdout/stderr 

JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: 'initialize_from_archived_subgraph jdk.internal.module.ArchivedBootLayer' missing from stdout/stderr
rerun:
cd /home/cgo/dev/openjdk/jdk/build/external-buildjdk/test-support/jtreg_test_hotspot_jtreg_runtime_cds_serviceability_ReplaceCriticalClassesForSubgraphs_java/scratch/0 && \
DISPLAY=:0.0 \
HOME=/home/cgo \
JDK8_HOME=/opt/toolchains/openjdk15-amd64 \
LANG=en_US.UTF-8 \
LC_ALL=C \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/cgo/dev/openjdk/jdk/build/external-buildjdk/images/test \
TEST_IMAGE_GRAAL_DIR=/home/cgo/dev/openjdk/jdk/build/external-buildjdk/images/test/hotspot/jtreg/graal \
XMODIFIERS=@im=ibus \
LD_LIBRARY_PATH=/home/cgo/dev/openjdk/jdk/build/external-buildjdk/images/test/hotspot/jtreg/native \
CLASSPATH=/home/cgo/dev/openjdk/jdk/build/external-buildjdk/test-support/jtreg_test_hotspot_jtreg_runtime_cds_serviceability_ReplaceCriticalClassesForSubgraphs_java/classes/0/runtime/cds/serviceability/ReplaceCriticalClassesForSubgraphs.d:/home/cgo/dev/openjdk/jdk/test/hotspot/jtreg/runtime/cds/serviceability:/home/cgo/dev/openjdk/jdk/build/external-buildjdk/test-support/jtreg_test_hotspot_jtreg_runtime_cds_serviceability_ReplaceCriticalClassesForSubgraphs_java/classes/0/test/lib:/home/cgo/dev/openjdk/jdk/test/lib:/home/cgo/dev/openjdk/jtreg/build/images/jtreg/lib/javatest.jar:/home/cgo/dev/openjdk/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/cgo/dev/openjdk/jdk/build/external-buildjdk/images/jdk/bin/java \
        -Dtest.vm.opts='-XX:MaxRAMPercentage=3 -Djava.io.tmpdir=/home/cgo/dev/openjdk/jdk/build/external-buildjdk/test-support/jtreg_test_hotspot_jtreg_runtime_cds_serviceability_ReplaceCriticalClassesForSubgraphs_java/tmp' \
        -Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=3 -J-Djava.io.tmpdir=/home/cgo/dev/openjdk/jdk/build/external-buildjdk/test-support/jtreg_test_hotspot_jtreg_runtime_cds_serviceability_ReplaceCriticalClassesForSubgraphs_java/tmp' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts= \
        -Dtest.jdk=/home/cgo/dev/openjdk/jdk/build/external-buildjdk/images/jdk \
        -Dcompile.jdk=/home/cgo/dev/openjdk/jdk/build/external-buildjdk/images/jdk \
        -Dtest.timeout.factor=4.0 \
        -Dtest.nativepath=/home/cgo/dev/openjdk/jdk/build/external-buildjdk/images/test/hotspot/jtreg/native \
        -Dtest.root=/home/cgo/dev/openjdk/jdk/test/hotspot/jtreg \
        -Dtest.name=runtime/cds/serviceability/ReplaceCriticalClassesForSubgraphs.java \
        -Dtest.file=/home/cgo/dev/openjdk/jdk/test/hotspot/jtreg/runtime/cds/serviceability/ReplaceCriticalClassesForSubgraphs.java \
        -Dtest.src=/home/cgo/dev/openjdk/jdk/test/hotspot/jtreg/runtime/cds/serviceability \
        -Dtest.src.path=/home/cgo/dev/openjdk/jdk/test/hotspot/jtreg/runtime/cds/serviceability:/home/cgo/dev/openjdk/jdk/test/lib \
        -Dtest.classes=/home/cgo/dev/openjdk/jdk/build/external-buildjdk/test-support/jtreg_test_hotspot_jtreg_runtime_cds_serviceability_ReplaceCriticalClassesForSubgraphs_java/classes/0/runtime/cds/serviceability/ReplaceCriticalClassesForSubgraphs.d \
        -Dtest.class.path=/home/cgo/dev/openjdk/jdk/build/external-buildjdk/test-support/jtreg_test_hotspot_jtreg_runtime_cds_serviceability_ReplaceCriticalClassesForSubgraphs_java/classes/0/runtime/cds/serviceability/ReplaceCriticalClassesForSubgraphs.d:/home/cgo/dev/openjdk/jdk/build/external-buildjdk/test-support/jtreg_test_hotspot_jtreg_runtime_cds_serviceability_ReplaceCriticalClassesForSubgraphs_java/classes/0/test/lib \
        -Dtest.class.path.prefix=/home/cgo/dev/openjdk/jdk/build/external-buildjdk/test-support/jtreg_test_hotspot_jtreg_runtime_cds_serviceability_ReplaceCriticalClassesForSubgraphs_java/classes/0/runtime/cds/serviceability/ReplaceCriticalClassesForSubgraphs.d:/home/cgo/dev/openjdk/jdk/test/hotspot/jtreg/runtime/cds/serviceability:/home/cgo/dev/openjdk/jdk/build/external-buildjdk/test-support/jtreg_test_hotspot_jtreg_runtime_cds_serviceability_ReplaceCriticalClassesForSubgraphs_java/classes/0/test/lib \
        -XX:MaxRAMPercentage=3 \
        -Djava.io.tmpdir=/home/cgo/dev/openjdk/jdk/build/external-buildjdk/test-support/jtreg_test_hotspot_jtreg_runtime_cds_serviceability_ReplaceCriticalClassesForSubgraphs_java/tmp \
        -Djava.library.path=/home/cgo/dev/openjdk/jdk/build/external-buildjdk/images/test/hotspot/jtreg/native \
        com.sun.javatest.regtest.agent.MainWrapper /home/cgo/dev/openjdk/jdk/build/external-buildjdk/test-support/jtreg_test_hotspot_jtreg_runtime_cds_serviceability_ReplaceCriticalClassesForSubgraphs_java/runtime/cds/serviceability/ReplaceCriticalClassesForSubgraphs.d/main.0.jta

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 'initialize_from_archived_subgraph jdk.internal.module.ArchivedBootLayer' missing from stdout/stderr

I am not sure, if the real problem is
a) that the build system creates a different classlist file
b) something in the CDS system
c) both",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-02-26 23:54;cgo;ReplaceCriticalClassesForSubgraphs.jtr;https://bugs.openjdk.org/secure/attachment/93402/ReplaceCriticalClassesForSubgraphs.jtr","2021-02-26 23:53;cgo;failed_classlist;https://bugs.openjdk.org/secure/attachment/93401/failed_classlist","2021-02-26 23:53;cgo;passed_classlist;https://bugs.openjdk.org/secure/attachment/93400/passed_classlist",,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2rq23:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-06 10:59;iklam;[~cgo] could you elaborate what $(pwd)/build/internal-buildjdk/images/jdk/ is? Is it built from the same JDK repo? If so, could you provide the exact steps for reproducing this error? Thanks.;;;","2021-04-06 23:42;cgo;All the commands shown above are executed in the given order in the same working directory, which is the root directory of the OpenJDK source tree. So in this case, $(pwd) could be replaced with a dot.
Basically, we first create a build configuration, named ""internal-buildjdk"", which uses an internal build jdk. Then we build the product images for this build configuration.
After that, we create a new build configuration, named ""external-buildjdk"", which uses an external build jdk by providing the flag ""--with-build-jdk"". The external build JDK is the one previously created using the build configuration ""internal-buildjdk"".
So both JDKs are built from the same source repo using the same source revision. No other commands have been executed in between those shown, and all commands have been executed in the given order.;;;","2021-04-26 21:23;minqi;I use the exact commands above, but could not reproduce the result on current repo:
$bash configure --with-jtreg=../../tests/jtreg --with-conf-name=internal-buildjdk --with-boot-jdk=$PWD/old-build/internal-buildjdk/images/jdk  // the old-internal is build first then used again here.
$make CONF=internal-buildjdk product-images test-image
$bash configure --with-jtreg=../../tests/jtreg --with-conf-name=external-buildjdk --with-boot-jdk=$PWD/build/internal-buildjdk/images/jdk
$make CONF=external-buildjdk product-images test-image
$make CONF=internal-buildjdk TEST=test/hotspot/jtreg/runtime/cds/serviceability/ReplaceCriticalClassesForSubgraphs.java test
Test results: passed: 1.  // other line removed, same below
make CONF=external-buildjdk TEST=test/hotspot/jtreg/runtime/cds/serviceability/ReplaceCriticalClassesForSubgraphs.java test
Test results: passed: 1;;;","2021-04-27 00:19;cgo;This is very strange, for me it still fails. I am building on a Debian testing:
$ cat /etc/os-release 
PRETTY_NAME=""Debian GNU/Linux bullseye/sid""
NAME=""Debian GNU/Linux""
ID=debian
HOME_URL=""https://www.debian.org/""
SUPPORT_URL=""https://www.debian.org/support""
BUG_REPORT_URL=""https://bugs.debian.org/""
$ uname -a
Linux hw2425 5.10.0-6-amd64 #1 SMP Debian 5.10.28-1 (2021-04-09) x86_64 GNU/Linux
$ gcc --version
gcc (Debian 10.2.1-6) 10.2.1 20210110
Copyright (C) 2020 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
$ make --version
GNU Make 4.3
Built for x86_64-pc-linux-gnu
Copyright (C) 1988-2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
$ git describe
jdk-17+19-97-g4785e112ae1

Can you reproduce it with the provided classlist files? For me, I can also reproduce it, if I don't provide a build JDK and use the ""failed_classlist"" file. The ""failed_classlist"" file is the classlist created by the build system, if I provide an external build JDK.

$ bash configure --with-jtreg=../jtreg/build/images/jtreg --with-conf-name=internal-buildjdk
$ make CONF=internal-buildjdk product-images test-image
$ cp -f failed_classlist build/internal-buildjdk/images/jdk/lib/classlist
$ make CONF=internal-buildjdk TEST=test/hotspot/jtreg/runtime/cds/serviceability/ReplaceCriticalClassesForSubgraphs.java test;;;","2021-04-27 11:11;minqi;With your failed_classlist to replace the original classlist, the test passed. The test is on Ubuntu:
Linux 4.4.0-138-generic #164-Ubuntu SMP Tue Oct 2 17:16:02 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux;;;","2021-04-27 11:49;minqi;Even randomly rearrange the lines in classlist still passed.;;;","2021-04-27 22:57;iklam;I can reproduce the problem by manually editing $JAVA_HOME/lib/classlist:

(good)

images/jdk$ ./bin/java -Xshare:dump -Xlog:cds+heap | grep non-early
[1.892s][info][cds,heap] non-early: sun.util.locale.BaseLocale
[1.909s][info][cds,heap] non-early: jdk.internal.math.FDBigInteger
[1.937s][info][cds,heap] Subgraph of klass jdk.internal.math.FDBigInteger has non-early klasses and cannot be used when JVMTI ClassFileLoadHook is enabled
[1.938s][info][cds,heap] Subgraph of klass sun.util.locale.BaseLocale has non-early klasses and cannot be used when JVMTI ClassFileLoadHook is enabled

(bad) -- add the difference between passed_classlist and failed_classlist from the attachments of this bug report:

images/jdk$ cat >> lib/classlist
java/util/Collections$UnmodifiableMap
jdk/internal/module/ModuleHashes$Builder
jdk/internal/module/SystemModuleFinders$3
sun/net/www/protocol/jrt/Handler
sun/util/resources/cldr/provider/CLDRLocaleDataMetaInfo
^D

images/jdk$ ./bin/java -Xshare:dump -Xlog:cds+heap | grep non-early
[1.891s][info][cds,heap] non-early: sun.util.locale.BaseLocale
[1.909s][info][cds,heap] non-early: jdk.internal.math.FDBigInteger
[1.915s][info][cds,heap] non-early: jdk.internal.module.SystemModuleFinders$SystemModuleReader
[1.921s][info][cds,heap] non-early: sun.net.www.protocol.jrt.Handler
[1.926s][info][cds,heap] non-early: jdk.internal.module.SystemModuleFinders$SystemModuleReader
[1.941s][info][cds,heap] Subgraph of klass jdk.internal.module.ArchivedBootLayer has non-early klasses and cannot be used when JVMTI ClassFileLoadHook is enabled
[1.941s][info][cds,heap] Subgraph of klass jdk.internal.math.FDBigInteger has non-early klasses and cannot be used when JVMTI ClassFileLoadHook is enabled
[1.941s][info][cds,heap] Subgraph of klass sun.util.locale.BaseLocale has non-early klasses and cannot be used when JVMTI ClassFileLoadHook is enabled
[1.941s][info][cds,heap] Subgraph of klass jdk.internal.loader.ArchivedClassLoaders has non-early klasses and cannot be used when JVMTI ClassFileLoadHook is enabled

By adding these classes into the classlist, we made the full-module-graph unuseable when ClassFileLoadHook.

;;;","2021-04-27 22:58;iklam;Minimal test case:

images/jdk$ cat >> lib/classlist
sun/util/resources/cldr/provider/CLDRLocaleDataMetaInfo
^D
;;;","2021-04-27 23:16;iklam;Suggested fix. [~cgo] could you try if this fixes the problem for you?

$ git diff
diff --git a/src/hotspot/share/memory/heapShared.cpp b/src/hotspot/share/memory/heapShared.cpp
index ed4b66712cf..f67cfbb5986 100644
--- a/src/hotspot/share/memory/heapShared.cpp
+++ b/src/hotspot/share/memory/heapShared.cpp
@@ -561,7 +561,14 @@ void ArchivedKlassSubGraphInfoRecord::init(KlassSubGraphInfo* info) {
   _entry_field_records = NULL;
   _subgraph_object_klasses = NULL;
   _is_full_module_graph = info->is_full_module_graph();
-  _has_non_early_klasses = info->has_non_early_klasses();
+  if (_is_full_module_graph) {
+    // Consider all classes referenced by the full module graph as early -- we will be
+    // allocating objects of these classes during JVMTI early phase, so they cannot
+    // be processed by (non-early) JVMTI ClassFileLoadHook
+    _has_non_early_klasses = false;
+  } else {
+    _has_non_early_klasses = info->has_non_early_klasses();
+  }
;;;","2021-04-28 01:57;cgo;Thanks for keep digging into this. Your patch didn't apply, because of JDK-8265696, but wasn't a big deal to fix. For completeness, here is the patch I applied and the git revision I am working on:

$ git diff
diff --git a/src/hotspot/share/cds/heapShared.cpp b/src/hotspot/share/cds/heapShared.cpp
index 22b80ce9d35..558c47b68c9 100644
--- a/src/hotspot/share/cds/heapShared.cpp
+++ b/src/hotspot/share/cds/heapShared.cpp
@@ -561,7 +561,15 @@ void ArchivedKlassSubGraphInfoRecord::init(KlassSubGraphInfo* info) {
   _entry_field_records = NULL;
   _subgraph_object_klasses = NULL;
   _is_full_module_graph = info->is_full_module_graph();
-  _has_non_early_klasses = info->has_non_early_klasses();
+
+  if (_is_full_module_graph) {
+    // Consider all classes referenced by the full module graph as early -- we will be
+    // allocating objects of these classes during JVMTI early phase, so they cannot
+    // be processed by (non-early) JVMTI ClassFileLoadHook
+    _has_non_early_klasses = false;
+  } else {
+    _has_non_early_klasses = info->has_non_early_klasses();
+  }
 
   if (_has_non_early_klasses) {
     ResourceMark rm;
$ git describe
jdk-17+19-136-g164454feebc

I am able to reproduce your minimal example on an unpatched VM, and your patch fixes the problem for me. The test case now passes.
I am still wondering why it only happens to me (on every build machine available to me) and why the classlist file is different if an external build JDK is used. But maybe it's not worth looking into this.;;;","2021-04-28 16:51;iklam;[~cgo] I found the problem. --with-build-jdk=XXX must be used. 

$ bash configure --with-conf-name=internal-buildjdk --with-devkit=/home/iklam/devkit/latest --with-boot-jdk=${LATEST_BOOT_JDK}
$ cd build/internal-buildjdk; make jdk-image; cd ../..
$ bash configure --with-conf-name=external-buildjdk --with-devkit=/home/iklam/devkit/latest --with-boot-jdk=${LATEST_BOOT_JDK} \
   --with-build-jdk=$PWD/build/internal-buildjdk/images/jdk
$ cd build/external-buildjdk; make jdk-image; cd ../..
$ cd build
$ find . -name classlist | grep images | xargs ls -l 
-rw-r--r-- 1 iklam dba 71604 Apr 28 15:35 ./external-buildjdk/images/jdk/lib/classlist
-rw-r--r-- 1 iklam dba 71394 Apr 28 14:36 ./internal-buildjdk/images/jdk/lib/classlist

When --with-build-jdk=XXX is set, we come to here:

https://github.com/openjdk/jdk/blob/794cefe8f92ab0c9d5c7c5265232518e8ffb166a/make/GenerateLinkOptData.gmk#L56

# If an external buildjdk has been supplied, we don't build a separate interim
# image, so just use the external build jdk instead.
ifeq ($(EXTERNAL_BUILDJDK), true)
  INTERIM_IMAGE_DIR := $(BUILD_JDK)
endif

During the JDK build, the classlist is generated by HelloClasslist.java

https://github.com/openjdk/jdk/blob/794cefe8f92ab0c9d5c7c5265232518e8ffb166a/make/jdk/src/classes/build/tools/classlist/HelloClasslist.java#L112

which has the following code dealing with the locale:

        String oldDate = String.format(""%s%n"",
                DateFormat.getDateInstance(DateFormat.DEFAULT, Locale.ROOT)
                        .format(new Date()));

With the ""external JDK"", the above code will trigger the loading of CLDRLocaleDataMetaInfo. As a result, this class appears in the classlist.

By default, --with-build-jdk=XXX is not set, so we will use the ""interim image"" to generate the classlist. The interim image contains only the java.base and java.logging module. Thus, it doesn't contain the sun.util.resources.cldr.provider.CLDRLocaleDataMetaInfo class, which is part of the jdk.localedata module. As a result, the classlist generated by the ""interim image"".

;;;","2021-04-28 17:27;iklam;Explanation of the fix:

When CDS tries to load CLDRLocaleDataMetaInfo from the classlist, the VM has already finished the ""early"" bootup phase. To load this class, the module system tries to create an instance of jdk.internal.module.SystemModuleFinders$SystemModuleReader and store that into the ArchivedBootLayer. However, the SystemModuleReader class is also not yet loaded, so the VM loads it on demand. As a result, SystemModuleReader is treated as a ""non-early class"".

The problem is now ArchivedBootLayer refers to a non-early class. At runtime, if JVMTI ClassLoadHook is enabled, HeapShared will refuse to load ArchivedBootLayer from the archived heap. The reason is explained by this in heapShared.cpp:

// Note: if a ArchivedKlassSubGraphInfoRecord contains non-early classes, and JVMTI
// ClassFileLoadHook is enabled, it's possible for this class to be dynamically replaced. In
// this case, we will not load the ArchivedKlassSubGraphInfoRecord and will clear its roots.

However, this doesn't make sense for ArchivedBootLayer -- it's loaded in the early phase at runtime, so any classes referenced by ArchivedBootLayer will also be loaded in the early phase. This means JVMTI ClassLoadHook cannot replace SystemModuleReader.

Hence, the fix is simple -- for any classes referenced by the 3 ""full-module-graph"" subgraphs, we always treat them as ""early"" classes, regardless of when they are loaded during dump time.

    // Entry fields for subgraphs archived in the open archive heap region (full module graph).
    static ArchivableStaticFieldInfo fmg_open_archive_subgraph_entry_fields[] = {
      {""jdk/internal/loader/ArchivedClassLoaders"",    ""archivedClassLoaders""},
      {""jdk/internal/module/ArchivedBootLayer"",       ""archivedBootLayer""},
      {""java/lang/Module$ArchivedData"",               ""archivedData""},
    };

;;;","2021-04-29 16:23;roboduke;Changeset: 2c381e0f
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2021-04-29 23:22:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2c381e0f8d5777d289a6eb410d66d8221c7d9d1b
;;;",,,,,,,,,,,,,,,
wrong verifier message for bogus return type,JDK-8262368,5042891,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,hseigel,hseigel,2021-02-25 05:27,2021-03-10 16:31,2023-10-01 09:57,2021-03-03 05:19,17,,,,,,,,17,hotspot,,0,verifier,,,,,,,,,,,,,,,,,,,,,,"x4e_x4e wrote:
There is a typo in an error message in verifier.cpp on line 1678, It should probably read ""Method does not expect a  return  value"" instead of  ""Method expects a return value"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rpyz:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-02-25 08:47;hseigel;Here's the code in question:

void ClassVerifier::verify_return_value(
    VerificationType return_type, VerificationType type, u2 bci,
    StackMapFrame* current_frame, TRAPS) {
  if (return_type == VerificationType::bogus_type()) {
    verify_error(ErrorContext::bad_type(bci,
        current_frame->stack_top_ctx(), TypeOrigin::signature(return_type)),
        ""Method expects a return value"");
    return;
  }
     ...
}

Method verify_return_value() gets called when verifying the ireturn, lreturn, freturn, dreturn, and areturn bytecodes.  So, I think the message is correct as is.;;;","2021-02-25 13:48;dholmes;[~hseigel] that isn't the code in question, it is this:

 case Bytecodes::_return :
          if (return_type != VerificationType::bogus_type()) {
            verify_error(ErrorContext::bad_code(bci),
                         ""Method expects a return value"");
            return;
          }

The return_type is not bogus, indicating a real return value, which is an error, but the message says ""expects a return value"" rather than ""does not expect a return value"".;;;","2021-02-25 13:54;hseigel;Thanks [~dholmes] for pointing that out!;;;","2021-03-02 11:11;mseledtsov;ILW = MLM = P4;;;","2021-03-02 19:57;dholmes;I see now where I was reading things in an inverted sense:

1675: case Bytecodes::_return :
1676:      if (return_type != VerificationType::bogus_type()) {
1677:        verify_error(ErrorContext::bad_code(bci),
1678:                     ""Method expects a return value"");
1679:        return;
1680:      } 

Here we have a plain ""return"" in a method but the method's return-type is not-void, so it is an error to have the plain ""return"" because the ""Method expects a return value"". So the actual initial bug report was in fact wrong.

As Harold discovered the true problem is with the other piece of code.;;;","2021-03-03 05:19;roboduke;Changeset: 3d3eb5c8
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2021-03-03 13:18:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3d3eb5c8
;;;",,,,,,,,,,,,,,,,,,,,,,
Update Glib to version 2.66.7,JDK-8262366,5042889,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,almatvee,kcr,kcr,2021-02-25 04:53,2022-03-18 14:45,2023-10-01 09:57,2021-04-05 16:32,8u301,jfx11,jfx17,,,,,,jfx17,javafx,,0,3rdparty,sn_88,sn_89,sn_90,,,,,,,,,,,,,,,,,,,Update glib to the latest version 2.66.7. ,,,,,,,,,,JDK-8264807,JDK-8266568,,,,,,,,,,,,JDK-8275177,,,,,,,,,,,,,,JDK-8262975,JDK-8267992,,,,,JDK-8262365,JDK-8283403,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rpyj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2021-04-05 16:32;roboduke;Changeset: e63931e6
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-04-05 23:31:47 +0000
URL:       https://git.openjdk.java.net/jfx/commit/e63931e6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Update GStreamer to version 1.18.3,JDK-8262365,5042888,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,almatvee,kcr,kcr,2021-02-25 04:50,2022-03-15 16:09,2023-10-01 09:57,2021-04-05 16:32,8u301,jfx11,jfx17,,,,,,jfx17,javafx,,0,3rdparty,sn_88,sn_89,sn_90,,,,,,,,,,,,,,,,,,,Update GStreamer to the latest version 1.18.3.,,,,,,,,,,JDK-8264808,JDK-8266569,,,,,,,,,,,,JDK-8275178,,,,,,,,,,,,,,JDK-8262366,JDK-8267992,JDK-8268152,JDK-8268219,JDK-8269147,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rpyb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2021-04-05 16:32;roboduke;Changeset: e63931e6
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-04-05 23:31:47 +0000
URL:       https://git.openjdk.java.net/jfx/commit/e63931e6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Broken Tutorial Example: Parsing an XML file using SAX,JDK-8262363,5042886,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bhoran,bhoran,bhoran,2021-02-25 04:21,2021-05-04 03:05,2023-10-01 09:57,2021-05-04 03:05,,,,,,,,,,docs,,0,,,,,,,,,,,,,,,,,,,,,,,"The page

https://docs.oracle.com/javase/tutorial/jaxp/sax/parsing.html

refers to a JAXP sample ""SAXLocalNameCount"" that is no longer present in the Xerces2 samples directory. 

Replace this sample with new one, or with an existing sample from Xerces.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8180396,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rpxv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@69527b4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extra '0' in java.util.Formatter for '%012a' conversion with a sign character,JDK-8262351,5042832,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,igraves,webbuggrp,webbuggrp,2021-02-24 10:23,2021-05-25 00:12,2023-10-01 09:57,2021-03-10 14:47,11,17,8,,,,,,17,core-libs,,0,17ea,additional-information-received,dcsaw,release-note=yes,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Reproduced on Windows 10, but I do not expect the OS to be relevant.

Reproduced with Java 1.8.0_222 and ""17-ea"" 2021-09-14:

>java -version
openjdk version ""1.8.0_222""
OpenJDK Runtime Environment (AdoptOpenJDK)(build 1.8.0_222-b10)
OpenJDK 64-Bit Server VM (AdoptOpenJDK)(build 25.222-b10, mixed mode)

>java -version
openjdk version ""17-ea"" 2021-09-14
OpenJDK Runtime Environment (build 17-ea+5-266)
OpenJDK 64-Bit Server VM (build 17-ea+5-266, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
When the following conditions meet:

* Use a `%a` conversion with the `0` flag and a width (e.g., `""%012a""`)
* When the result has a sign character (`-`, or `+` or ` ` (space) with the respective flags)

then 1 too many padding '0's is inserted, resulting in a formatted string 1 char longer than the specified width.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Using the provided test file `test/Test.java` below:

$ javac -d bin test/Test.java
$ java -cp bin test.Test

Observe that the right-most `|` do not all align, even though they should (in each block). Every line marked with a `// !!` comment in the source code emits one character '0' too many in the padding.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
|0x000000000000000000000000.0p0|
| 0x00000000000000000000000.0p0|
|+0x00000000000000000000000.0p0|
|-0x00000000000000000000000.0p0|
|-0x00000000000000000000000.0p0|
|-0x00000000000000000000000.0p0|
|-0x1.0p1                      |
| 0x1.0p1                      |
|0x000000000000000000000001.0p1|
|-0x00000000000000000000001.0p1|
| 0x00000000000000000000001.0p1|
|+0x00000000000000000000001.0p1|
|-0x1.26580b480ca46p30         |
| 0x1.26580b480ca46p30         |
|0x00000000001.26580b480ca46p30|
|-0x0000000001.26580b480ca46p30|
| 0x0000000001.26580b480ca46p30|
|+0x0000000001.26580b480ca46p30|

|0x000000.0p0|
| 0x00000.0p0|
|+0x00000.0p0|
|-0x00000.0p0|
|-0x00000.0p0|
|-0x00000.0p0|
|-0x1.0p1    |
| 0x1.0p1    |
|0x000001.0p1|
|-0x00001.0p1|
| 0x00001.0p1|
|+0x00001.0p1|
|-0x1.2p30   |
| 0x1.2p30   |
|0x00001.2p30|
|-0x0001.2p30|
| 0x0001.2p30|
|+0x0001.2p30|

ACTUAL -
|0x000000000000000000000000.0p0|
| 0x000000000000000000000000.0p0|
|+0x000000000000000000000000.0p0|
|-0x000000000000000000000000.0p0|
|-0x000000000000000000000000.0p0|
|-0x000000000000000000000000.0p0|
|-0x1.0p1                      |
| 0x1.0p1                      |
|0x000000000000000000000001.0p1|
|-0x000000000000000000000001.0p1|
| 0x000000000000000000000001.0p1|
|+0x000000000000000000000001.0p1|
|-0x1.26580b480ca46p30         |
| 0x1.26580b480ca46p30         |
|0x00000000001.26580b480ca46p30|
|-0x00000000001.26580b480ca46p30|
| 0x00000000001.26580b480ca46p30|
|+0x00000000001.26580b480ca46p30|

|0x000000.0p0|
| 0x000000.0p0|
|+0x000000.0p0|
|-0x000000.0p0|
|-0x000000.0p0|
|-0x000000.0p0|
|-0x1.0p1    |
| 0x1.0p1    |
|0x000001.0p1|
|-0x000001.0p1|
| 0x000001.0p1|
|+0x000001.0p1|
|-0x1.2p30   |
| 0x1.2p30   |
|0x00001.2p30|
|-0x00001.2p30|
| 0x00001.2p30|
|+0x00001.2p30|


---------- BEGIN SOURCE ----------
package test;

public class Test {
  public static void main(String[] args) {
    System.out.println(String.format(""|%030a|"", 0.0));
    System.out.println(String.format(""|% 030a|"", 0.0)); // !!
    System.out.println(String.format(""|%+030a|"", 0.0)); // !!
    System.out.println(String.format(""|%030a|"", -0.0)); // !!
    System.out.println(String.format(""|% 030a|"", -0.0)); // !!
    System.out.println(String.format(""|%+030a|"", -0.0)); // !!

    System.out.println(String.format(""|%- 30a|"", -2.0));
    System.out.println(String.format(""|%- 30a|"", 2.0));
    System.out.println(String.format(""|%030a|"", 2.0));
    System.out.println(String.format(""|%030a|"", -2.0)); // !!
    System.out.println(String.format(""|% 030a|"", 2.0)); // !!
    System.out.println(String.format(""|%+030a|"", 2.0)); // !!

    System.out.println(String.format(""|%- 30a|"", -1234567890.012345678));
    System.out.println(String.format(""|%- 30a|"", 1234567890.012345678));
    System.out.println(String.format(""|%030a|"", 1234567890.012345678));
    System.out.println(String.format(""|%030a|"", -1234567890.012345678)); // !!
    System.out.println(String.format(""|% 030a|"", 1234567890.012345678)); // !!
    System.out.println(String.format(""|%+030a|"", 1234567890.012345678)); // !!
    
    System.out.println("""");

    System.out.println(String.format(""|%012.0a|"", 0.0));
    System.out.println(String.format(""|% 012.0a|"", 0.0)); // !!
    System.out.println(String.format(""|%+012.0a|"", 0.0)); // !!
    System.out.println(String.format(""|%012.0a|"", -0.0)); // !!
    System.out.println(String.format(""|% 012.0a|"", -0.0)); // !!
    System.out.println(String.format(""|%+012.0a|"", -0.0)); // !!

    System.out.println(String.format(""|%- 12.0a|"", -2.0));
    System.out.println(String.format(""|%- 12.0a|"", 2.0));
    System.out.println(String.format(""|%012.0a|"", 2.0));
    System.out.println(String.format(""|%012.0a|"", -2.0)); // !!
    System.out.println(String.format(""|% 012.0a|"", 2.0)); // !!
    System.out.println(String.format(""|%+012.0a|"", 2.0)); // !!

    System.out.println(String.format(""|%- 12.0a|"", -1234567890.012345678));
    System.out.println(String.format(""|%- 12.0a|"", 1234567890.012345678));
    System.out.println(String.format(""|%012.0a|"", 1234567890.012345678));
    System.out.println(String.format(""|%012.0a|"", -1234567890.012345678)); // !!
    System.out.println(String.format(""|% 012.0a|"", 1234567890.012345678)); // !!
    System.out.println(String.format(""|%+012.0a|"", 1234567890.012345678)); // !!
  }
}


---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263390,,,,,,,,,,,,,,,,,,,,,,,,"2021-02-24 22:11;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/93360/Main.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rplv:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2021-02-24 22:09;tongwan;The observations on Windows10:
JDK 8: Failed, incorrect formatted string observed.
JDK 11: Failed.
JDK 17ea+6: Failed.;;;","2021-03-08 14:26;igraves;Zero-padding for hex floats isn't aware of the sign field. Only knows to pad 2 characters less to account for the `0x` put a fix up on Github for this.;;;","2021-03-10 14:47;roboduke;Changeset: 6971c23a
Author:    Ian Graves <igraves@openjdk.org>
Committer: Brent Christian <bchristi@openjdk.org>
Date:      2021-03-10 22:46:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6971c23a
;;;","2021-03-22 05:42;tongwan;Requested the submitter to verify the fix with the latest version of JDK at https://jdk.java.net/17/;;;","2021-03-23 22:12;tongwan;From the submitter:
I can confirm that the new JDK 17 build fixes the issue.;;;",,,,,,,,,,,,,,,,,,,,,,,
serviceability/sa/ClhsdbJhisto.java fails with Test ERROR java.lang.RuntimeException: 'ParselTongue' missing from stdout/stderr ,JDK-8262332,5042851,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2021-02-24 14:03,2021-03-02 17:41,2023-10-01 09:57,2021-02-26 08:35,17,,,,,,,,17,hotspot,,0,testbug,,,,,,,,,,,,,,,,,,,,,,"The test should ensure that ParselTongue variable ""lang"" is reachable while class stat is gathered.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rpq3:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-02-24 14:09;lmesnik;The failure happens in the loom repo. However, it is easy to reproduce it in jdk/jdk forcing GC between ""lang"" creation and ""main(..)"" in LingeredAppWithInterface.java;;;","2021-02-24 14:14;cjplummer;        ParselTongue lang = new ParselTongue();
        ...
        System.out.println(lang.getNbrOfWords() + muggleSpeak.getNbrOfWords());
        ...
        LingeredApp.main(args);

""lang"" is the only ParselTongue reference, and nothing is keeping it alive after the println(), so if you force a GC there I think it would be expected that ""ParcelTongue"" would no longer be in the jhisto output. Therefore this looks like a test bug. Perhaps the test should assign ""lang"" to a static field of LingeredAppWithInterface.;;;","2021-02-24 15:04;cjplummer;BTW, this is the kind of test that also might fail in loom due to JDK-8261848 (and we need a good test for JDK-8261848). If the vthread is not mounted, then its thread stack references are not scanned. In fact my guess is this is why you are seeing this in loom, and the proposed fixes, although correct, will also hide JDK-8261848. If you want fix the general issue of the ParselTongue object not being kept alive, but also not work around JDK-8261848 at the same time, then create a stack reference to ""lang"" that occurs after the LingeredApp.main(args) call. This will keep ParselTongue object live, but it still won't be seen when JDK-8261848 happens.

You could also create 2 versions of this test, one that fixes the problem as you poposed with Reference.reachabilityFence(), and and another that fixes it with a thread stack reference. If the later still reproduces the problem, then this is due to JDK-8261848, and now we would have a test for it.;;;","2021-02-25 11:12;lmesnik;We discussed loom issue privately with [~cjplummer]. Here is the summary:
1) Seems that Reference.reachabilityFence(lang) just left lang on the stack. 
2) The stack processing might have been changed so 'lang' is removed from the stack when it is not used. However, it is the only suppose.

We need to implement another test which reproduces JDK-8261848  reliably.;;;","2021-02-26 08:35;roboduke;Changeset: 2515c42b
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2021-02-26 16:35:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2515c42b
;;;",,,,,,,,,,,,,,,,,,,,,,,
Fix JFR parser exception messages,JDK-8262329,5042843,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2021-02-24 12:36,2021-03-02 17:41,2023-10-01 09:57,2021-02-26 11:13,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,I've been irritated by unreasonable large constant pool offsets in ChunkParser excepion messages. It turns out that lastCP + size concatenates the two numbers as strings instead of adding them.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rpob:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-02-26 11:13;roboduke;Changeset: 65a245e2
Author:    Roman Kennke <rkennke@openjdk.org>
Date:      2021-02-26 19:12:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/65a245e2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Reducing locks in RSA Blinding,JDK-8262316,5042821,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ascarpino,ascarpino,ascarpino,2021-02-24 09:10,2022-03-22 09:45,2023-10-01 09:57,2021-04-07 10:30,,,,,,,,,17,security-libs,,0,jdk11u-fix-no,jdk11u-fix-request,jdk15u-fix-request,jdk15u-fix-yes,noreg-perf,performance,,,,,,,,,,,,,,,,,"SPECjvm2008 crypto.rsa shows poor scalability with multiple threads.  The blinding classes have many synchronized sections that cause performance blocks.  WeakHashMap is not thread safe, but using it along with a concurrent queue, which allow multiple blinding objects to be used frees up the code.

When setting up the queue, overwriting is not a big issue.  It may costing a few extra CPU cycles by creating two queues and an extra blinding object.  But once that queue is established the queue is much faster not having a synchronize block. ",,,,,,,,,,JDK-8277655,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8080273,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rpjf:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2021-04-07 10:30;roboduke;Changeset: 7a99a987
Author:    Anthony Scarpino <ascarpino@openjdk.org>
Date:      2021-04-07 17:29:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7a99a987
;;;","2021-10-05 07:57;eastigeevich;Fix request (11u)

Backporting the patch improves RSA Blinding performance when multiple thread are used. The patch applies cleanly to 11u. Tier1 and tier2 tests pass with the patch.;;;","2021-10-05 23:47;goetz;Hi Evgeny
What is the risk of downporting this change?
As 17 is released, we want to downport less Enhancements 
to 11 to assure maximum stability.
;;;","2021-10-07 09:43;eastigeevich;Hi Goetz,

> What is the risk of downporting this change? 

There might be the risk of performance regression for single-threaded application because of a concurrent queue creation.
There is no risk of stability assuming the implementations of `ConcurrentLinkedQueue` and `ReentrantLock` are correct.
The patch fixes serialisation of concurrent accesses to the cache. Without the fix there is a synchronised block where long math operations are performed.

The performance issue happens in multi-threaded applications heavily using SSL connections.;;;","2021-10-12 00:11;goetz;Hi Evgeny, 
thanks for your elaborate explanation. 
We have discussed about this change. 
As stated before, we want to reduce downports of Enhancements since
17 is available now and decided not to admit this change to 11u.
Please either use 17, or bring the change to your own downstream project. 
Best regards,
  Goetz.;;;","2021-11-23 05:53;phh;Fix Request (15u).

See above 11u request. Reviewed by dcherepanov.
;;;",,,,,,,,,,,,,,,,,,,,,,
"missing ';' in generated entities",JDK-8262315,5042820,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-02-24 09:09,2021-03-01 16:41,2023-10-01 09:57,2021-02-24 10:08,17,,,,,,,,17,tools,,0,doccheck,,,,,,,,,,,,,,,,,,,,,,"The @jls tag is missing ';' in the replacement string for the entity for '>'

            private String escape(String s) {
                return s.replace(""&"", ""&amp;"").replace(""<"", ""&lt;"").replace("">"", ""&gt"");
            }

This shows up in doccheck/tidy reports.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rpj7:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-02-24 10:08;roboduke;Changeset: 65492129
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-02-24 18:07:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/65492129
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Override stencilAttachmentPixelFormat to maintain appropriate state,JDK-8262313,5042817,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2021-02-24 08:32,2021-02-24 08:43,2023-10-01 09:57,2021-02-24 08:43,internal,,,,,,,,internal,client-libs,,0,code-review,lanai,sn_87,,,,,,,,,,,,,,,,,,,,"We dont end the encoder in EncoderManager when we move from stencil based opcodes to other opcodes because doing so might decrease the performance. Also for stencil based opcodes we set stencilAttachmentPixelFormat in updatePipelineState.

But this might cause issues when we enable Metal API validation and hit non stencil based opcodes after stencil operation in same encoder. Override the stencilAttachmentPixelFormat to maintain appropriate state until we end the encoder.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261967,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i2rpij:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-02-24 08:39;jdv;Ran J2DDemo, SwingSet2, Font2DTest, RenderPerfTest, Netbeans there are no issues with the change.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Various small C2 fixes for bugs found by stress testing,JDK-8262308,5042806,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2021-02-24 06:27,2021-02-25 02:15,2023-10-01 09:57,2021-02-25 02:15,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,,,,,"Running TestLWorld and other inline type tests with -XX:+VerifyIterativeGVN fails:

#  Internal Error (/oracle/valhalla/open/src/hotspot/share/opto/node.hpp:441), pid=444684, tid=444700
#  assert(i == 0 && this == n || ((n) == __null || !VerifyIterativeGVN || !((n)->is_dead()))) failed: can not use dead node

Current CompileTask:
C2:   2090  264    b  4       compiler.valhalla.inlinetypes.TestLWorld::test119 (95 bytes)

Stack: [0x00007f7a9313b000,0x00007f7a9323c000],  sp=0x00007f7a93237330,  free space=1008k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x16745aa]  PhaseIterGVN::subsume_node(Node*, Node*)+0x100a
V  [libjvm.so+0x167ae4f]  PhaseIterGVN::transform_old(Node*)+0x4ff
V  [libjvm.so+0x1672f2e]  PhaseIterGVN::optimize()+0x7e
V  [libjvm.so+0xa49b36]  Compile::Optimize()+0xbe6
V  [libjvm.so+0xa4c493]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1a53
V  [libjvm.so+0x861c98]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f8
V  [libjvm.so+0xa5c471]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xea1
V  [libjvm.so+0xa5d0f8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1921606]  JavaThread::thread_main_inner()+0x256
V  [libjvm.so+0x1927a90]  Thread::call_run()+0x100
V  [libjvm.so+0x15ea906]  thread_native_entry(Thread*)+0x116


Running TestBasicFunctionality with ""-DPreferCommandLineFlags=true -DVerifyIR=false -XX:+AlwaysIncrementalInline -XX:+MonomorphicArrayCheck -XX:+UncommonNullCast"" fails:

#  Internal Error (/oracle/valhalla/open/src/hotspot/share/gc/g1/c2/g1BarrierSetC2.cpp:668), pid=465189, tid=465205
#  assert(node->Opcode() == Op_CastP2X) failed: ConvP2XNode required

Current CompileTask:
C2:  32284  313    b  4       compiler.valhalla.inlinetypes.TestBasicFunctionality::test40 (49 bytes)

Stack: [0x00007f26d3dfe000,0x00007f26d3eff000],  sp=0x00007f26d3efa1c0,  free space=1008k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xc3423b]  G1BarrierSetC2::eliminate_gc_barrier(PhaseIterGVN*, Node*) const+0x4b
V  [libjvm.so+0x1388ed0]  PhaseMacroExpand::process_users_of_allocation(CallNode*, bool)+0x700
V  [libjvm.so+0x139b76e]  PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) [clone .part.0]+0x3fe
V  [libjvm.so+0x139b9e3]  PhaseMacroExpand::eliminate_macro_nodes()+0x133
V  [libjvm.so+0xa4a1f5]  Compile::Optimize()+0x12a5
V  [libjvm.so+0xa4c493]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1a53
V  [libjvm.so+0x861c98]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f8
V  [libjvm.so+0xa5c471]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xea1
V  [libjvm.so+0xa5d0f8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1921606]  JavaThread::thread_main_inner()+0x256
V  [libjvm.so+0x1927a90]  Thread::call_run()+0x100
V  [libjvm.so+0x15ea906]  thread_native_entry(Thread*)+0x116


Running TestLWorldProfiling with ""-XX:+IgnoreUnrecognizedVMOptions -XX:-TieredCompilation -XX:-DoEscapeAnalysis -XX:+AlwaysIncrementalInline -DVerifyIR=false"" fails:

#  Internal Error (/oracle/valhalla/open/src/hotspot/share/opto/compile.cpp:1992), pid=478235, tid=478243
#  assert(vt->fast_out(i)->is_InlineTypeBase()) failed: Unexpected inline type user

Current CompileTask:
C2:   3962  124    b        compiler.valhalla.inlinetypes.TestLWorldProfiling::test8 (11 bytes)

Stack: [0x00007fc76a236000,0x00007fc76a337000],  sp=0x00007fc76a332380,  free space=1008k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xa2aed6]  Compile::process_inline_types(PhaseIterGVN&, bool) [clone .part.0]+0x3e6
V  [libjvm.so+0xa4a721]  Compile::Optimize()+0x17d1
V  [libjvm.so+0xa4c493]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1a53
V  [libjvm.so+0x861c98]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f8
V  [libjvm.so+0xa5c471]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xea1
V  [libjvm.so+0xa5d0f8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1921b86]  JavaThread::thread_main_inner()+0x256
V  [libjvm.so+0x1928010]  Thread::call_run()+0x100
V  [libjvm.so+0x15eae86]  thread_native_entry(Thread*)+0x116
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rpg3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jpackage app-launcher fails on linux when using JDK11 based runtime,JDK-8262300,5042794,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,asemenyuk,abagarwal,abagarwal,2021-02-24 04:08,2021-08-05 14:55,2023-10-01 09:57,2021-03-04 16:18,16,17,,,,,,,17,tools,,1,sn_87,sn_88,,,,,,,,,,,,,,,,,,,,,"This issue is similar to JDK-8251988

JDK11 has libjli.so in the directory `lib/jli` instead of `lib`. However, the resulting app-launcher from jpackage looks for the file in `lib` directory and therefore fails.

Fix
----
The fix is very similar to JDK-8251988 where we also look for the file in the old directory structure.

Workaround
-----------------
Once a JDK 11 runtime is created using jlink, manually copy `libjli.so` from `lib/jli` into `lib` directory. Then pass this runtime to jpackage. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268000,,,,,,JDK-8251988,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2rpdf:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,Verified,,"2021-02-24 10:05;asemenyuk;I'd assume the same issue exists on Linux too. So the fix should be similar to what has been done in JDK-8251988 and applied to Windows and Linux.;;;","2021-02-24 18:11;abagarwal;Your assumption is correct. I would like to point out that the problem doesn't occur in Windows.;;;","2021-02-25 09:39;asemenyuk;Sorry for the confusion. I misread the synopsis (and the description) and thought the problem was found on Windows.;;;","2021-03-04 16:18;roboduke;Changeset: ee09bada
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2021-03-05 00:17:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ee09bada
;;;","2021-08-05 14:55;asemenyuk;Fix verified by reproducing use case from the description.;;;",,,,,,,,,,,,,,,,,,,,,,,
"C2 compilation fails with ""modified node was not processed by IGVN.transform_old()""",JDK-8262299,5042793,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2021-02-24 04:01,2021-03-02 17:39,2023-10-01 09:57,2021-02-25 00:54,16,17,,,,,,,17,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,,,"compiler/arraycopy/TestInstanceCloneAsLoadsStores.java triggers the following assert when executed with -XX:-ReduceInitialCardMarks -XX:-ReduceBulkZeroing -XX:-ReduceFieldZeroing:

CompileCommand: dontinline compiler/arraycopy/TestInstanceCloneAsLoadsStores.m* bool dontinline = true
 164  MergeMem  === _  1  49  96  96  1  96  169  174  179  184  189  [[]]  { N96:rawptr:BotPTR N96:java/lang/Object+8 * [narrowklass] - N96:java/lang/Object * N169:compiler/arraycopy/TestInstanceCloneUtils$D:exact+12 * N174:compiler/arraycopy/TestInstanceCloneUtils$D:exact+16 * N179:compiler/arraycopy/TestInstanceCloneUtils$D:exact+24 * N184:compiler/arraycopy/TestInstanceCloneUtils$D:exact+28 * N189:compiler/arraycopy/TestInstanceCloneUtils$D:exact+30 * }  Memory: @BotPTR *+bot, idx=Bot;
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/phaseX.cpp:1103
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S14904/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/768c53e6-1238-4a69-aabb-67088d091392/runs/92dc5626-aaeb-42f5-bba5-36b6e98bdb2b/workspace/open/src/hotspot/share/opto/phaseX.cpp:1103), pid=2608, tid=2623
#  fatal error: modified node was not processed by IGVN.transform_old()

Current CompileTask:
C2:   1078  168    b        compiler.arraycopy.TestInstanceCloneAsLoadsStores::m1 (5 bytes)

Stack: [0x00007f9d40efb000,0x00007f9d40ffc000],  sp=0x00007f9d40ff74f0,  free space=1009k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x15ac3ee]  PhaseIterGVN::verify_PhaseIterGVN()+0xde
V  [libjvm.so+0xa0adc6]  Compile::Optimize()+0x216
V  [libjvm.so+0xa0deb5]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1905
V  [libjvm.so+0x83a09a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa1dd81]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xea1
V  [libjvm.so+0xa1ea08]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1840986]  JavaThread::thread_main_inner()+0x256
V  [libjvm.so+0x1846e00]  Thread::call_run()+0x100
V  [libjvm.so+0x1532fb6]  thread_native_entry(Thread*)+0x116
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8255665,,,,,,"2021-02-24 04:03;thartmann;test-support_jtreg_open_test_hotspot_jtreg_tier1_compiler_1_compiler_arraycopy_TestInstanceCloneAsLoadsStores_hs_err_pid2608.log;https://bugs.openjdk.org/secure/attachment/93350/test-support_jtreg_open_test_hotspot_jtreg_tier1_compiler_1_compiler_arraycopy_TestInstanceCloneAsLoadsStores_hs_err_pid2608.log","2021-02-24 04:03;thartmann;test-support_jtreg_open_test_hotspot_jtreg_tier1_compiler_1_compiler_arraycopy_TestInstanceCloneAsLoadsStores_replay_pid2608.log;https://bugs.openjdk.org/secure/attachment/93349/test-support_jtreg_open_test_hotspot_jtreg_tier1_compiler_1_compiler_arraycopy_TestInstanceCloneAsLoadsStores_replay_pid2608.log",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rpd7:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-02-24 04:02;thartmann;ILW = Assert during C2 compilation (does not affect product), single test with non-default flags, disable compilation of affected method = MLM = P4;;;","2021-02-25 00:54;roboduke;Changeset: a83e802b
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-02-25 08:53:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a83e802b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"G1BarrierSetC2::step_over_gc_barrier fails with assert ""bad barrier shape""",JDK-8262298,5042792,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,neliasso,thartmann,thartmann,2021-02-24 03:51,2021-07-22 07:22,2023-10-01 09:57,2021-03-17 09:32,11,16,17,,,,,,17,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,"Running applications/ctw/modules/java_desktop_2.java with -XX:-ReduceInitialCardMarks -XX:-ReduceBulkZeroing -XX:-ReduceFieldZeroing triggers the following error:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\workspace\open\src\hotspot\share\gc\g1\c2\g1BarrierSetC2.cpp:771), pid=71860, tid=5508
#  assert(call->in(0) == 0LL || call->in(0)->in(0) == 0LL || call->in(0)->in(0)->in(0) == 0LL || call->in(0)->in(0)->in(0)->in(0) == 0LL || call->in(0)->in(0)->in(0)->in(0)->in(0) == 0LL || c == call->in(0)->in(0)->in(0)->in(0)->in(0)) failed: bad barrier shape

Current CompileTask:
C2: 193313 53064    b  4       javax.swing.tree.DefaultTreeSelectionModel::clone (105 bytes)

Stack: [0x0000009256800000,0x0000009256900000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xab2fb1]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xcd25f7]  VMError::report+0xfc7  (vmError.cpp:736)
V  [jvm.dll+0xcd3f4e]  VMError::report_and_die+0x7ce  (vmError.cpp:1533)
V  [jvm.dll+0xcd4664]  VMError::report_and_die+0x64  (vmError.cpp:1327)
V  [jvm.dll+0x4bab87]  report_vm_error+0xb7  (debug.cpp:284)
V  [jvm.dll+0x57a98f]  G1BarrierSetC2::step_over_gc_barrier+0xa0f  (g1BarrierSetC2.cpp:766)
V  [jvm.dll+0x22c678]  ArrayCopyNode::may_modify+0xa8  (arraycopynode.cpp:665)
V  [jvm.dll+0xa15c5c]  MemNode::optimize_memory_chain+0x32c  (memnode.cpp:209)
V  [jvm.dll+0x3c7d96]  PhiNode::Ideal+0x2cc6  (cfgnode.cpp:2318)
V  [jvm.dll+0xaf5abf]  PhaseIterGVN::transform_old+0xcf  (phaseX.cpp:1234)
V  [jvm.dll+0xaf30c2]  PhaseIterGVN::optimize+0x2d2  (phaseX.cpp:1181)
V  [jvm.dll+0x472fc2]  Compile::Optimize+0x9e2  (compile.cpp:2234)
V  [jvm.dll+0x470591]  Compile::Compile+0x1421  (compile.cpp:787)
V  [jvm.dll+0x3a5c8c]  C2Compiler::compile_method+0x10c  (c2compiler.cpp:106)
V  [jvm.dll+0x48910e]  CompileBroker::invoke_compiler_on_method+0x94e  (compileBroker.cpp:2306)
V  [jvm.dll+0x48680a]  CompileBroker::compiler_thread_loop+0x2ba  (compileBroker.cpp:1980)
V  [jvm.dll+0xc635e6]  JavaThread::thread_main_inner+0x226  (thread.cpp:1498)
V  [jvm.dll+0xc59e44]  Thread::call_run+0x1b4  (thread.cpp:407)
V  [jvm.dll+0xab18fe]  thread_native_entry+0x10e  (os_windows.cpp:560)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]
",,,,,,,,,,JDK-8264431,JDK-8265516,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-02-24 03:53;thartmann;hs_err_modules_java_desktop_2650_71860.log;https://bugs.openjdk.org/secure/attachment/93348/hs_err_modules_java_desktop_2650_71860.log","2021-02-24 03:53;thartmann;replay_modules_java_desktop_2650_71860.log;https://bugs.openjdk.org/secure/attachment/93347/replay_modules_java_desktop_2650_71860.log",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rpcz:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-02-24 03:52;thartmann;ILW = Assert during C2 compilation, with non-default flag combinations, use different GC or disable compilation of affected method = HLM = P3;;;","2021-02-24 04:23;thartmann;I think the problem is that the barrier has been removed by G1BarrierSetC2::eliminate_gc_barrier but the nodes with top input haven't been processed by IGVN yet.;;;","2021-03-16 04:52;neliasso;An allocation and arraycopy was removed during eliminate_macro_nodes - the barrier stays. During the subsequent igvn the compilation may fail depending on what order the nodes are transformed. If the entry to the barrier code shape is reduced first - the barrier will hang of top-ctrl and the step-over-gc-barrier will fail.;;;","2021-03-17 09:31;roboduke;Changeset: cdf78e47
Author:    Nils Eliasson <neliasso@openjdk.org>
Date:      2021-03-17 16:31:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cdf78e47
;;;","2021-04-19 08:45;mdoerr;Fix Request (11u)
Should get backported for parity with 11.0.12-oracle. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,
ImageIO.write() method will throw IndexOutOfBoundsException ,JDK-8262297,5042487,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,webbuggrp,webbuggrp,2021-02-20 07:09,2021-12-07 07:56,2023-10-01 09:57,2021-12-01 08:59,11,15,16,8,,,,,18,client-libs,,0,dcspn,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows x64 19042.804 OpenJDK Runtime Environment AdoptOpenJDK (build 15.0.2+7)
WSL Kail Linux OpenJDK Runtime Environment (build 11.0.10+9-post-Debian-1)

A DESCRIPTION OF THE PROBLEM :
With some specific images, ImageIO.write() method will throw IndexOutOfBoundsException which isn't declared to be thrown.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
My source code ""MyChange.java"" was pasted below.
And I uploaded the input image to https://i.ibb.co/Js518Zx/image.png.


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
throw IOException or declare this method maybe throw IndexOutOfBoundsException
ACTUAL -
Exception in thread ""main"" java.lang.IndexOutOfBoundsException
        at java.base/java.io.RandomAccessFile.writeBytes(Native Method)
        at java.base/java.io.RandomAccessFile.write(RandomAccessFile.java:561)
        at java.desktop/javax.imageio.stream.FileImageOutputStream.write(FileImageOutputStream.java:124)
        at java.desktop/com.sun.imageio.plugins.bmp.BMPImageWriter.write(BMPImageWriter.java:654)
        at java.desktop/javax.imageio.ImageWriter.write(ImageWriter.java:613)
        at java.desktop/javax.imageio.ImageIO.doWrite(ImageIO.java:1628)
        at java.desktop/javax.imageio.ImageIO.write(ImageIO.java:1554)
        at test.MyChange.main(MyChange.java:16)

---------- BEGIN SOURCE ----------

package test;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

import javax.imageio.ImageIO;

public class MyChange {
    public static void main(String[] args) {
        File inputFile = new File(""0.png"");
        try (InputStream is = new FileInputStream(inputFile)) {
            BufferedImage image = ImageIO.read(is);
            ImageIO.write(image, ""bmp"", new File(""0.bmp""));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278086,,,,,,,,,,,JDK-8278047,,,,,,,,,,,,"2021-02-24 20:41;pnarayanaswa;0.png;https://bugs.openjdk.org/secure/attachment/93359/0.png","2021-03-08 22:27;pnarayanaswa;MyChange.java;https://bugs.openjdk.org/secure/attachment/93517/MyChange.java",,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rnh7:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@377c353d,,,,,,,,,"2021-02-24 03:44;pnarayanaswa;Checked with attached testcase in Windows 10, Issue is not reproducible,
Test Result:
=========
8u281: Pass
JDK11.0.10: Pass
JDK 15: Pass
JDK 16ea : Pass

;;;","2021-02-24 20:41;pnarayanaswa;Additional Information from submitter:
===========================
Exception in thread ""main"" java.lang.IndexOutOfBoundsException
        at java.base/java.io.RandomAccessFile.writeBytes(Native Method)
        at java.base/java.io.RandomAccessFile.write(RandomAccessFile.java:561)
        at java.desktop/javax.imageio.stream.FileImageOutputStream.write(FileImageOutputStream.java:124)
        at java.desktop/com.sun.imageio.plugins.bmp.BMPImageWriter.write(BMPImageWriter.java:654)
        at java.desktop/javax.imageio.ImageWriter.write(ImageWriter.java:613)
        at java.desktop/javax.imageio.ImageIO.doWrite(ImageIO.java:1628)
        at java.desktop/javax.imageio.ImageIO.write(ImageIO.java:1554)
        at test.MyChange.main(MyChange.java:16)

Above is the stack trace.
When I debug step by step I find that in FileImageOutputStream.write there is a byte array called b of length 70, but the value of a  variable called len is 140. That's abnormal.

The full step to reproduce the bug:
1. Make a package called test
2. Make a file in the test package called MyChange.java
3. Modify the file content to the source code I provided
4. Get the image I provide and rename to ""0.png"" outside the package
5. Run java

I also found that this error will occur when the bit depth of the image is 2 bit. When the bit depth of the image is 1bit, 4 bit or 8 bit, there is no error occurred and the result is as expected.

Attached input image.;;;","2021-03-08 22:27;pnarayanaswa;Re-checked with testcase and provided(0.png)image, 
Test Result:
=========
jdk 8 : Fail
jdk 8u281: Fail
jdk 11: Fail
jdk 11.0.10: Fail
jdk 15 : Fail
jdk 16ea: Fail
jdk 17ea: Fail;;;","2021-03-18 22:51;jdv;I used attached reproducer & image and ran the test in JDK17, 11.0.10 and 8u291. I dont see any exception or failure.;;;","2021-04-07 00:44;jdv;If i use 0.png attached to the JBS i dont see the exception. But if i download image from https://i.ibb.co/Js518Zx/image.png mentioned in the description i am able to reproduce the issue.;;;","2021-11-30 22:19;roboduke;Changeset: c7331935
Author:    Masanori Yano <myano@openjdk.org>
Committer: Jayathirth D V <jdv@openjdk.org>
Date:      2021-12-01 06:18:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c73319354399596ab2b9aab0a7f62e8fa0ab9365
;;;","2021-12-01 02:27;jdv;Reopening this bug as the fix under https://github.com/openjdk/jdk/pull/6151 caused regression : https://bugs.openjdk.java.net/browse/JDK-8278047

This needs more analysis.;;;","2021-12-01 08:58;vdyakov;We are filing new bug for REDO, so this one shouldn't be re-open as we are not pushing the new changeset by the same bugID.;;;",,,,,,,,,,,,,,,,,,,,
C2: Out-of-Bounds Array Load from Clone Source,JDK-8262295,5042789,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,rrich,rrich,rrich,2021-02-24 02:42,2021-08-17 02:11,2023-10-01 09:57,2021-03-25 00:44,11,12,13,14,15,16,17,,17,hotspot,,0,c2,hotspot,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok-next,jdk16u-fix-yes,oracle-triage-17,sap-interest,,,,,,,,,,,,,,"C2 can generate out-of-bounds array loads. If executed, such a load can crash
the VM, e.g. during GC, as the attached TEST.java demonstrates.

TEST.java can be executed with the following command-line:

java -Xms128m -Xmx128m -XX:+UseSerialGC -Xbatch -XX:CompileCommand=dontinline,*::*_dontinline test.misc.TEST

In the OptoAssembly for the method TEST.testMethod_dontinline (attachment TEST_OptoAssembly.s) we see

- Offset 0a7: Array load L of the 4th element of src without preceeding range
              check. After warm-up the test calls testMethod_dontinline() with
              an empty src array and allocates an array of 5 -1L long values
              after src.  In that case L will be out-of-bounds. Its result will
              likely be 0xffffffff interpreted as NarrowOop.

- Offset 0ab: spilling the result of L to rsp + #4

- B11: slow path for allocation at TEST.java:43

- Offset 1b7: runtime call with an OopMap that indicates that there's a
              NarrowOop at rsp + #4

The VM crashes if L was out-of-bounds and the runtime call at offset 1b7
triggers a gc because the result of L (0xffffffff) isn't a valid NarrowOop.

Analysis:
=========

Debugging the C2 compilation and analyzing the intermediate graphs (attachment
igv.xml) with the IdealGraphVisualizer the following is observed.

Graph ""Incremental Boxing Inline""
--------------------------------

There's a node ""205 LoadN"" that corresponds to the expression ""clone[4]"" at line
45. There's a control dependency to ""229 RangeCheck"".

Graph ""Iter GVN after EA""
-------------------------

This is the graph after ""Incremental Boxing Inline"". Node 205 isn't in that
graph. It has been replaced with ""233 LoadN"". Node 233 loads directly from
parameter ""src"" instead of loading from the cloned array. Also it is not
dependent on a range check.

Debugging showed that this transformation is done in
LoadNode::can_see_arraycopy_value(). The method returns a clone of the current
node if it loads from the result of an Object.clone() call on an array. It
changes the original control dependency even if it is a range check. The cloned
load can be out-of-bounds because of this.

Note that the result of the out-of-bounds load cannot escape because ""210 StoreN""
remains dependent on the range check for the original load.

GC Dependency
============

The issue can be reproduced with -XX:+UseSerialGC, -XX:+UseParallelGC,
-XX:+UseShenandoahGC.

With -XX:+UseG1GC and -XX:+UseZGC C2 does not generate the out-of-bounds load
(different graphs because of different gc barriers?)

Original Issue
==============

Test.testMethod_dontinline() was derived from org.springframework.beans.BeanUtils.instantiateClass()[1]
after analysis of sporadic GC crashes where always a compiled frame
of that method at line 194 was scanned. It was found that this was due to
out-of-bound loads from ctor.parameterTypes.
Note that the parameterTypes array of a default constructor is empty.

[1] https://github.com/spring-projects/spring-framework/blob/107f88a7e442f7cfd99ae4c4b0d8ce1eb67ece2e/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java#L184
",,,,,,,,,,JDK-8265194,JDK-8265838,JDK-8264571,JDK-8267011,,,,,,,,,,,,,,,,,,,,JDK-8266428,,,,JDK-8259590,,,,,,,,,,,,"2021-02-24 02:41;rrich;TEST.java;https://bugs.openjdk.org/secure/attachment/93343/TEST.java","2021-02-24 02:42;rrich;TEST_OptoAssembly.s;https://bugs.openjdk.org/secure/attachment/93342/TEST_OptoAssembly.s","2021-02-24 02:42;rrich;igv.xml;https://bugs.openjdk.org/secure/attachment/93341/igv.xml",,,,,,,,,,,,,,,,,,,,,,,,"0|i2rpcb:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-03-25 00:44;roboduke;Changeset: 9689863a
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2021-03-25 06:52:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9689863a
;;;","2021-04-08 01:02;rrich;Fix request (16u)

I would like to backport this to jdk16u.
The fix applies cleanly. The regression test required a trivial adaptation (remove package from ClassFileInstaller)
PR: https://github.com/openjdk/jdk16u/pull/101;;;","2021-04-20 07:18;rrich;Fix request (11u)

I would like to backport this to jdk11u.
The fix applies cleanly.
The test required trivial adaptation: I had to remove the package from the class ClassFileInstaller.

RFR: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-April/005835.html;;;","2021-08-09 14:23;epavlova;The regression test compiler/arraycopy/TestOutOfBoundsArrayLoad.java passed in JDK17 ATR;;;",,,,,,,,,,,,,,,,,,,,,,,,
java/net/httpclient/ProxyAuthDisabledSchemes.java fails with HTTP/1.1 parser received no bytes,JDK-8262294,5042788,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,djelinski,dfuchs,dfuchs,2021-02-24 02:35,2023-07-21 07:35,2023-10-01 09:57,2023-03-29 22:17,11,18,21,,,,,,21,core-libs,,0,httpclient,intermittent,tier2,,,,,,,,,,,,,,,,,,,,"Extract from the log:

...

FINE [Feb 24, 8:57:20.620455000] sun.net.httpserver.ServerImpl$Exchange run: Exchange request line: POST /foo/ HTTP/1.1
FINE [Feb 24, 8:57:20.622015000] sun.net.httpserver.ServerImpl logReply: POST /foo/ HTTP/1.1 [200  OK] ()
FINE [Feb 24, 8:57:20.630632000] sun.net.httpserver.ServerImpl$Exchange run: Exchange request line: POST /foo/ HTTP/1.1
FINE [Feb 24, 8:57:20.632156000] sun.net.httpserver.ServerImpl logReply: POST /foo/ HTTP/1.1 [200  OK] ()
FINE [Feb 24, 8:57:20.639300000] sun.net.httpserver.ServerImpl$Exchange run: no request line: closing
java.lang.RuntimeException: Unexpected exception: java.io.IOException: HTTP/1.1 header parser received no bytes
	at DigestEchoClient.testBasic(DigestEchoClient.java:455)
	at DigestEchoClient.main(DigestEchoClient.java:281)
	at ProxyAuthDisabledSchemes.main(ProxyAuthDisabledSchemes.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.io.IOException: HTTP/1.1 header parser received no bytes
	at java.net.http/jdk.internal.net.http.common.Utils.wrapWithExtraDetail(Utils.java:304)
	at java.net.http/jdk.internal.net.http.Http1Response$HeadersReader.onReadError(Http1Response.java:665)
	at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.checkForErrors(Http1AsyncReceiver.java:297)
	at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.flush(Http1AsyncReceiver.java:263)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SynchronizedRestartableTask.run(SequentialScheduler.java:175)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:147)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:198)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	... 1 more
Caused by: java.io.IOException: connection closed locally
	at java.net.http/jdk.internal.net.http.SocketTube.signalClosed(SocketTube.java:157)
	at java.net.http/jdk.internal.net.http.PlainHttpConnection.close(PlainHttpConnection.java:277)
	at java.net.http/jdk.internal.net.http.ConnectionPool.cleanup(ConnectionPool.java:479)
	at java.net.http/jdk.internal.net.http.ConnectionPool$CleanupTrigger.triggerCleanup(ConnectionPool.java:502)
	at java.net.http/jdk.internal.net.http.ConnectionPool$CleanupTrigger.onNext(ConnectionPool.java:518)
	at java.net.http/jdk.internal.net.http.ConnectionPool$CleanupTrigger.onNext(ConnectionPool.java:487)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.read(SocketTube.java:844)
	at java.net.http/jdk.internal.net.http.SocketTube$SocketFlowTask.run(SocketTube.java:175)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:198)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:271)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:224)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.handleSubscribeEvent(SocketTube.java:690)
	at java.net.http/jdk.internal.net.http.AsyncTriggerEvent.handle(AsyncTriggerEvent.java:54)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.run(HttpClientImpl.java:815)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262027,JDK-8295275,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rpc3:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-01-25 13:43;dcubed;Here's a log file snippet for the jdk-21+7-475-tier2 sighting:

java/net/httpclient/ProxyAuthDisabledSchemes.java

TestServer(1): finished
java.lang.RuntimeException: Unexpected exception: java.io.IOException: HTTP/1.1 header parser received no bytes
	at DigestEchoClient.testBasic(DigestEchoClient.java:453)
	at DigestEchoClient.main(DigestEchoClient.java:277)
	at ProxyAuthDisabledSchemes.main(ProxyAuthDisabledSchemes.java:48)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.io.IOException: HTTP/1.1 header parser received no bytes
	at java.net.http/jdk.internal.net.http.HttpClientImpl.send(HttpClientImpl.java:909)
	at java.net.http/jdk.internal.net.http.HttpClientFacade.send(HttpClientFacade.java:133)
	at DigestEchoClient.testBasic(DigestEchoClient.java:438)
	... 6 more
Caused by: java.io.IOException: HTTP/1.1 header parser received no bytes
	at java.net.http/jdk.internal.net.http.common.Utils.wrapWithExtraDetail(Utils.java:351)
	at java.net.http/jdk.internal.net.http.Http1Response$HeadersReader.onReadError(Http1Response.java:574)
	at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.checkForErrors(Http1AsyncReceiver.java:302)
	at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.flush(Http1AsyncReceiver.java:268)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	... 1 more
Caused by: java.io.IOException: An established connection was aborted by the software in your host machine
	at java.base/sun.nio.ch.SocketDispatcher.read0(Native Method)
	at java.base/sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:46)
	at java.base/sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:340)
	at java.base/sun.nio.ch.IOUtil.read(IOUtil.java:306)
	at java.base/sun.nio.ch.IOUtil.read(IOUtil.java:269)
	at java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:425)
	at java.net.http/jdk.internal.net.http.SocketTube.readAvailable(SocketTube.java:1178)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.read(SocketTube.java:841)
	at java.net.http/jdk.internal.net.http.SocketTube$SocketFlowTask.run(SocketTube.java:181)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:303)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:256)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.signalReadable(SocketTube.java:782)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadEvent.signalEvent(SocketTube.java:965)
	at java.net.http/jdk.internal.net.http.SocketTube$SocketFlowEvent.handle(SocketTube.java:253)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.handleEvent(HttpClientImpl.java:1390)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.lambda$run$3(HttpClientImpl.java:1335)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.run(HttpClientImpl.java:1335)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Unexpected exception: java.io.IOException: HTTP/1.1 header parser received no bytes
JavaTest Message: shutting down test;;;","2023-03-28 07:34;djelinski;Last sighting was caused by:

[NoAuth Server Filter]:DigestEchoServer[PID=128,PORT=57243]:HTTP_1_1:http:SERVER:BASICSERVER: Unexpected exception while handling request: java.io.IOException: Expect:  [100-Continue, 100-Continue]
java.io.IOException: Expect:  [100-Continue, 100-Continue]
	at DigestEchoServer$AbstractHttpFilter.doFilter(DigestEchoServer.java:762)
	at jdk.httpclient.test.lib.common.HttpServerAdapters$HttpTestFilter$1.doFilter(HttpServerAdapters.java:495)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:101)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:835)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:204)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:567)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:533)
	at java.base/java.lang.Thread.run(Thread.java:1623)

Not sure yet how expect header could be added twice.

We could modify the httpclient to set ""Expect: 100-continue"" using setSystemHeader instead of addSystemHeader, but that would only mask the issue.;;;","2023-03-29 04:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13224
Date: 2023-03-29 10:45:22 +0000;;;","2023-03-29 22:17;dukebot;Changeset: 2d607c9c
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-03-30 05:15:19 +0000
URL:       https://git.openjdk.org/jdk/commit/2d607c9cd19bec5d4a90cb4760fba3cf83bcf982
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Remove redundant end of encoder for AAShader rendering,JDK-8262293,5042786,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,avu,avu,avu,2021-02-24 02:33,2021-02-24 08:15,2023-10-01 09:57,2021-02-24 08:15,,,,,,,,,,client-libs,,0,lanai,Lanai,,,,,,,,,,,,,,,,,,,,,"src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/EncoderManager.m line 370:

368:   if (_encoder != nil) {
369:     if (_destination != dest || renderOptions->isAA != _encoderStates.aa ||
370:             renderOptions->isAAShader != _encoderStates.aaShader) {

We don’t need to end the encoder here - the appropriate state will be recovered later in the code (by updatePipelineState method).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,internal,,,,,,,,"0|i2rpbn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] C2 compilation fails with assert ""should have been removed from the graph""",JDK-8262287,5042780,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,thartmann,thartmann,2021-02-24 00:05,2021-03-12 06:50,2023-10-01 09:57,2021-03-12 06:50,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,,,,,"primitive class a {
  short b = 2;
  int c = 8;
}
class MainClass {
  a[] d = {new a()};
  a e;
  byte f;
  byte g(int h) {
    a i = new a();
    for (int j = 0; j < 6; ++j) {
      a[] k = {};
      if (i.b < 0101)
        i = e;
      for (int l = 0; l < 9; ++l) {
        a m = new a();
        i = m;
      }
    }
    if (d[0].c > 1)
      for (int n = 0; n < 7; ++n)
        ;
    return f;
  }
  public static void main(String[] args) {
    MainClass o = new MainClass();
    for (int p = 0;;)
      o.g(p);
  }
}


# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla/open/src/hotspot/share/opto/compile.cpp:2282), pid=308339, tid=308352
#  assert(n->adr_type() != TypeAryPtr::INLINES) failed: should have been removed from the graph
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-lworld3ea+0-2021-01-20-1042597.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-lworld3ea+0-2021-01-20-1042597.tobias..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xa3375b]  Compile::adjust_flattened_array_access_aliases(PhaseIterGVN&) [clone .part.0]+0xf4b

Current CompileTask:
C2:    244  259 %     4       MainClass::g @ 35 (94 bytes)

Stack: [0x00007f778c537000,0x00007f778c638000],  sp=0x00007f778c6331f0,  free space=1008k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xa3375b]  Compile::adjust_flattened_array_access_aliases(PhaseIterGVN&) [clone .part.0]+0xf4b
V  [libjvm.so+0xa494c8]  Compile::Optimize()+0x578
V  [libjvm.so+0xa4c493]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1a53
V  [libjvm.so+0x861c98]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f8
V  [libjvm.so+0xa5c471]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xea1
V  [libjvm.so+0xa5d0f8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1921766]  JavaThread::thread_main_inner()+0x256
V  [libjvm.so+0x1927bf0]  Thread::call_run()+0x100
V  [libjvm.so+0x15eaa66]  thread_native_entry(Thread*)+0x116",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260363,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rpab:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-02-24 00:09;thartmann;Roland, could you please have a look?;;;","2021-02-24 00:09;thartmann;Code was introduced by JDK-8260363.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect exception handling for VMThread in class redefinition,JDK-8262280,5042772,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,dholmes,dholmes,2021-02-23 21:23,2021-04-07 18:01,2023-10-01 09:57,2021-04-02 06:06,17,,,,,,,,17,hotspot,,0,traps,,,,,,,,,,,,,,,,,,,,,,"In redefine_single_class we have:

 // Initialize the vtable and interface table after
  // methods have been rewritten
  // no exception should happen here since we explicitly
  // do not check loader constraints.
  // compare_and_normalize_class_versions has already checked:
  //  - classloaders unchanged, signatures unchanged
  //  - all instanceKlasses for redefined classes reused & contents updated
  the_class->vtable().initialize_vtable(false, THREAD);
  the_class->itable().initialize_itable(false, THREAD);
  assert(!HAS_PENDING_EXCEPTION || (THREAD->pending_exception()->is_a(vmClasses::ThreadDeath_klass())), ""redefine exception"");

This code has been present since Java 6, where we introduced the ""false"" flag to not check constraints as we mustn't get an exception due to loader constraint violations. But this code is executed by the VMThread so ThreadDeath is not possible. What is possible, but not accounted for is OutOfMemoryError. But again this is the VMThread and so we should not be throwing exceptions in any case as they can never be processed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252685,JDK-8264150,JDK-4964657,,,,JDK-8264051,,,,,,,,,,,,,,,,,,,,,,,,6,,,,,,,,"0|i2rp8j:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-03-24 15:50;dholmes;It looks like JDK-8264051 may have fixed at least part of the problem here by clarifying one code path can't actually throw an exception in klassItable::initialize_itable_for_interface;;;","2021-03-29 13:40;coleenp;I'm working on a fix for JDK-8264150 that will fix this too.;;;","2021-04-01 08:35;coleenp;There are more TRAPS/THREAD in redefine_single_class, only the vtable initialization is fixed.;;;","2021-04-02 06:06;roboduke;Changeset: 885916ed
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-04-02 13:05:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/885916ed
;;;",,,,,,,,,,,,,,,,,,,,,,,,
URLClassLoader.getResource throws undocumented IllegalArgumentException,JDK-8262277,5042490,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bchristi,webbuggrp,webbuggrp,2021-02-20 11:21,2021-05-25 00:09,2023-10-01 09:57,2021-03-15 11:35,11,15,17,8,,,,,17,core-libs,,0,additional-information-not-received,dcsaw,release-note=yes,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Happens on all platforms.

A DESCRIPTION OF THE PROBLEM :
Please note that I've submitted a PR addressing this issue to OpenJDK at https://github.com/openjdk/jdk/pull/2662

java.net.URLClassLoader.getResource can throw an undocumented IllegalArgumentException.

According to the javadoc for the getResource and findResource methods, neither should be throwing IllegalArgumentException - they should return null if the resource can't be resolved.

Quoting https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLClassLoader.html#findResource(java.lang.String)
Returns:
    a URL for the resource, or null if the resource could not be found, or if the loader is closed.

And quoting https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ClassLoader.html#getResource(java.lang.String)
Returns:
    URL object for reading the resource; null if the resource could not be found, a URL could not be constructed to locate the resource, the resource is in a package that is not opened unconditionally, or access to the resource is denied by the security manager.

Neither mentions throwing IllegalArgumentException and both are clear that when URL can't be constructed, null should be returned.

Here's a stack trace:
java.lang.IllegalArgumentException: name
        at java.base/jdk.internal.loader.URLClassPath$Loader.findResource(URLClassPath.java:600)
        at java.base/jdk.internal.loader.URLClassPath.findResource(URLClassPath.java:291)
        at java.base/java.net.URLClassLoader$2.run(URLClassLoader.java:655)
        at java.base/java.net.URLClassLoader$2.run(URLClassLoader.java:653)
        at java.base/java.security.AccessController.doPrivileged(Native Method)
        at java.base/java.net.URLClassLoader.findResource(URLClassLoader.java:652)

Looking at URLClassPath.findResource as seen at https://github.com/openjdk/jdk/blob/2b00367e1154feb2c05b84a11d62fb5750e46acf/src/java.base/share/classes/jdk/internal/loader/URLClassPath.java#L603
        URL findResource(final String name, boolean check) {
            URL url;
            try {
                url = new URL(base, ParseUtil.encodePath(name, false));
            } catch (MalformedURLException e) {
                throw new IllegalArgumentException(""name"");
            }

Instead of throwing IllegalArgumentException, that line should simply return null.

A similar issue exists at URLClassPath.getResource as seen at https://github.com/openjdk/jdk/blob/2b00367e1154feb2c05b84a11d62fb5750e46acf/src/java.base/share/classes/jdk/internal/loader/URLClassPath.java#L639
        URL findResource(final String name, boolean check) {
            URL url;
            try {
                url = new URL(base, ParseUtil.encodePath(name, false));
            } catch (MalformedURLException e) {
                throw new IllegalArgumentException(""name"");
            }

Instead of throwing IllegalArgumentException, that line should simply return null.


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263116,,,,,,,,,,,,,,,,,,,,,,,,"2021-02-23 20:05;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/93335/Main.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rnhv:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ae6d091,,,,,,,Not verified,,"2021-02-21 00:26;alanb;This issue may date back to early JDK releases but was not noticed. It would be useful to know if the submitter encountered this in the wild or by code inspection.;;;","2021-02-22 00:38;tongwan;Requested the information about above question from the submitter.;;;","2021-02-22 21:16;tongwan;Additional information from the submitter:
I am seeing this in the wild. I was working on the issue ""PathEditor does not handle absolute path on Windows"" [1] in Spring Framework. After much debugging, I narrowed it down to this issue in the JDK. I've submitted a pull request with a workaround to Spring Framework [2].

In terms of a reproducer, this one liner will reproduce this issue (you can easily use jshell to run it and see the problem):
```
new java.net.URLClassLoader(new java.net.URL[]{new java.net.URL(""https://urldefense.com/v3/__https://repo1.maven.org/anything-that-ends-with-slash/*22)*7D).findResource(*22c:/windows__;JSUl!!GqivPVa7Brio!Imu6M4R0Gpmlflrfo31RIE3A8a09BuMAY7BkuhziFf6TpdDUKCOKbh8lpKI_x4oFi0Qj$ ""); ```

The key parts to reproduce the issue are:

1. The URLClassLoader URL must not start with file: or jar: and must end in /. See URLClassPath.java:493

2. The string passed to findResource must not be a valid URL component. 
Windows paths (which include a : making them invalid URL components) are a common and easy way to see this error.

I've also added this information to the pull request I submitted to OpenJDK [4].

[1] https://urldefense.com/v3/__https://github.com/spring-projects/spring-framework/issues/22511__;!!GqivPVa7Brio!Imu6M4R0Gpmlflrfo31RIE3A8a09BuMAY7BkuhziFf6TpdDUKCOKbh8lpKI_x0g8U3_3$
[2] https://urldefense.com/v3/__https://github.com/spring-projects/spring-framework/pull/26574__;!!GqivPVa7Brio!Imu6M4R0Gpmlflrfo31RIE3A8a09BuMAY7BkuhziFf6TpdDUKCOKbh8lpKI_x7Cm4mez$
[3]
https://urldefense.com/v3/__https://github.com/openjdk/jdk/blob/2b00367e1154feb2c05b84a11d62fb5750e46acf/src/java.base/share/classes/jdk/internal/loader/URLClassPath.java*L493__;Iw!!GqivPVa7Brio!Imu6M4R0Gpmlflrfo31RIE3A8a09BuMAY7BkuhziFf6TpdDUKCOKbh8lpKI_xwzBAf_j$
[4] https://urldefense.com/v3/__https://github.com/openjdk/jdk/pull/2662__;!!GqivPVa7Brio!Imu6M4R0Gpmlflrfo31RIE3A8a09BuMAY7BkuhziFf6TpdDUKCOKbh8lpKI_x-WWmYB1$ 
;;;","2021-02-22 21:39;tongwan;Still can not reproduce the incident and requested more details from the submitter.;;;","2021-02-23 19:48;tongwan;Additional information from the submitter:
please see my comment at
https://urldefense.com/v3/__https://github.com/openjdk/jdk/pull/2662*issuecomment-783691760__;Iw!!GqivPVa7Brio!OekfkbfHKYecWh80As7f-KdcAyDnorxbzGGJtrdUEY_JwQiMbgY0LT6NQtjSZftcslVF$  
and get the line of code
new java.net.URLClassLoader(new java.net.URL[]{new java.net.URL(""https://repo1.maven.org/anything-that-ends-with-slash/"")}).findResource(""c:/windows"");

I ran that line in jshell on Java 15 and Java 11 on both Windows and Linux and it reproduces the issue.;;;","2021-02-23 19:55;tongwan;The observations on Windows 10:
JDK 8: Failed, IllegalArgumentException thrown
JDK 11: Failed.
JDK 15: Failed.
JDK 17: Failed.

The related API document can be found at:
https://docs.oracle.com/javase/8/docs/api/java/lang/ClassLoader.html#getResource-java.lang.String-
https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ClassLoader.html#getResource(java.lang.String)
https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/ClassLoader.html#getResource(java.lang.String);;;","2021-03-01 16:51;bchristi;As a point of interest, this also manifests in the getResources()/findResources() methods which return an Enumeration.  The hasMoreElements() method will throw an IllegalArgumentException instead of returning true or false.
;;;","2021-03-15 11:35;roboduke;Changeset: 0c718ab2
Author:    Craig Andrews <candrews@integralblue.com>
Committer: Brent Christian <bchristi@openjdk.org>
Date:      2021-03-15 18:35:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0c718ab2
;;;","2021-03-22 05:47;tongwan;Requested the submitter to verify the fix with the latest version of JDK at https://jdk.java.net/17/;;;","2021-04-06 03:02;tongwan;Did not receive the response from the submitter.;;;",,,,,,,,,,,,,,,,,,
Debug build of WebKit fails,JDK-8262276,5042664,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,ajoseph,webbuggrp,webbuggrp,2021-02-23 05:02,2021-09-03 10:12,2023-10-01 09:57,2021-04-24 07:38,jfx15,,,,,,,,jfx17,javafx,,0,additional-information-not-received,dcspn,noreg-build,reproducer-other,sn_90,sn_91,test_sprint,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
- Windows 10
- Javafx - tag 15+9 (checked out from https://github.com/openjdk/jfx/tree/15%2B9)
- Java 15 (installed on Windows)
- Ant 1.10.5 (installed on Windows)
- CMake 3.19.5 (installed on Windows)
- Visual Studio 2017 community edition 
- CygWin (installed on Windows) with the following packages:
  - bison 3.0.4-1
  - flex 2.6.4-2
  - gcc-g++ 10.2.0-1
  - git 2.30.0-1
  - gperf 3.1-1
  - make 4.3-1
  - makedepend 1.0.6-1
  - openssh 8.4p1-2
  - perl 5.32.1-1
  - python27 2.7.18-4
  - ruby 2.6.4-1
  - unzip 6.0-17
  - zip 3.0-12

A DESCRIPTION OF THE PROBLEM :
I've followed all of the steps on:
https://wiki.openjdk.java.net/display/OpenJFX/Building+OpenJFX

Following libraries were used:
- Javafx - tag 15+9 (checked out from https://github.com/openjdk/jfx/tree/15%2B9)
- Java 15 (installed on Windows)
- Ant 1.10.5 (installed on Windows)
- CMake 3.19.5 (installed on Windows)
- Visual Studio 2017 community edition 
- CygWin (installed on Windows) with the following packages:
  - bison 3.0.4-1
  - flex 2.6.4-2
  - gcc-g++ 10.2.0-1
  - git 2.30.0-1
  - gperf 3.1-1
  - make 4.3-1
  - makedepend 1.0.6-1
  - openssh 8.4p1-2
  - perl 5.32.1-1
  - python27 2.7.18-4
  - ruby 2.6.4-1
  - unzip 6.0-17
  - zip 3.0-12
  
Environment variables are set properly:
JAVA_HOME=""C:\\Program Files\\jdk-15\\""
MSVC_VER=""14.16.27023""
VS150COMNTOOLS=""C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build""

JFX/build/windows_tools.properties was successfully created.

Following properties in gradle.properties are set like:
COMPILE_WEBKIT = true
CONF = DebugNative

After everything is setup I try to run:
./gradlew --info --console=plain --stacktrace

Instead of successful build I see:
Successfully started process 'command 'perl''
+  cmake --build C:/jfx/modules/javafx.web/build/win/Debug --config Debug --
[0/3018] Generate bindings (WebCoreBindings)
[1/3018] Linking CXX executable bin\LLIntOffsetsExtractor.exe
FAILED: bin/LLIntOffsetsExtractor.exe
cmd.exe /C ""cd . && ""C:\Program Files\CMake\bin\cmake.exe"" -E vs_link_exe --intdir=Source\JavaScriptCore\CMakeFiles\LLIntOffsetsExtract
or.dir --rc=""C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\rc.exe"" --mt=""C:\Program Files (x86)\Windows Kits\10\bin\10.0.
17763.0\x64\mt.exe"" --manifests  -- ""C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\bin\Hostx6
4\x64\link.exe"" /nologo Source\JavaScriptCore\CMakeFiles\LLIntOffsetsExtractor.dir\llint\LLIntOffsetsExtractor.cpp.obj  /out:bin\LLIntO
ffsetsExtractor.exe /implib:lib\LLIntOffsetsExtractor.lib /pdb:bin\LLIntOffsetsExtractor.pdb /version:0.0 /machine:x64 /DEBUG /OPT:ICF
/OPT:REF /OPT:NOREF /OPT:NOICF /INCREMENTAL:NO /debug /INCREMENTAL /INCREMENTAL:NO /subsystem:console  lib\WTF.lib  lib\icudata.lib  li
b\icui18n.lib  lib\icuuc.lib  ""C:\Program Files\jdk-15\lib\jvm.lib""  winmm.lib  dbghelp.lib  kernel32.lib user32.lib gdi32.lib winspool
.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib && cd .""
LINK Pass 1: command ""C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\bin\Hostx64\x64\link.exe
/nologo Source\JavaScriptCore\CMakeFiles\LLIntOffsetsExtractor.dir\llint\LLIntOffsetsExtractor.cpp.obj /out:bin\LLIntOffsetsExtractor.e
xe /implib:lib\LLIntOffsetsExtractor.lib /pdb:bin\LLIntOffsetsExtractor.pdb /version:0.0 /machine:x64 /DEBUG /OPT:ICF /OPT:REF /OPT:NOR
EF /OPT:NOICF /INCREMENTAL:NO /debug /INCREMENTAL /INCREMENTAL:NO /subsystem:console lib\WTF.lib lib\icudata.lib lib\icui18n.lib lib\ic
uuc.lib C:\Program Files\jdk-15\lib\jvm.lib winmm.lib dbghelp.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib
oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:Source\JavaScriptCore\CMakeFiles\LLIntOffsetsExtractor.dir/inte
rmediate.manifest Source\JavaScriptCore\CMakeFiles\LLIntOffsetsExtractor.dir/manifest.res"" failed (exit code 1120) with the following o
utput:
   Creating library lib\LLIntOffsetsExtractor.lib and object lib\LLIntOffsetsExtractor.exp
LLIntOffsetsExtractor.cpp.obj : error LNK2019: unresolved external symbol ""bool __cdecl WTF::isMainThreadInitialized(void)"" (?isMainThr
eadInitialized@WTF@@YA_NXZ) referenced in function ""protected: __cdecl WTF::RefCountedBase::RefCountedBase(void)"" (??0RefCountedBase@WT
F@@IEAA@XZ)
WTF.lib(JSONValues.cpp.obj) : error LNK2001: unresolved external symbol ""bool __cdecl WTF::isMainThreadInitialized(void)"" (?isMainThrea
dInitialized@WTF@@YA_NXZ)
WTF.lib(MediaTime.cpp.obj) : error LNK2001: unresolved external symbol ""bool __cdecl WTF::isMainThreadInitialized(void)"" (?isMainThread
Initialized@WTF@@YA_NXZ)
WTF.lib(CString.cpp.obj) : error LNK2001: unresolved external symbol ""bool __cdecl WTF::isMainThreadInitialized(void)"" (?isMainThreadIn
itialized@WTF@@YA_NXZ)
bin\LLIntOffsetsExtractor.exe : fatal error LNK1120: 1 unresolved externals
ninja: build stopped: subcommand failed.

> Task :web:compileNativeWin FAILED
:web:compileNativeWin (Thread[Execution worker for ':' Thread 11,5,main]) completed. Took 5.27 secs.

FAILURE: Build failed with an exception.

* Where:
Build file 'C:\jfx\build.gradle' line: 3445

* What went wrong:
Execution failed for task ':web:compileNativeWin'.
> Process 'command 'perl'' finished with non-zero exit value 1

* Try:
Run with --debug option to get more log output. Run with --scan to get full insights.

* Exception is:
org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':web:compileNativeWin'.
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.lambda$executeIfValid$1(ExecuteActionsTaskExecuter.java:2
05)
        at org.gradle.internal.Try$Failure.ifSuccessfulOrElse(Try.java:263)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeIfValid(ExecuteActionsTaskExecuter.java:203)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:184)
        at org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute(CleanupStaleOutputsExecuter.java:114)
        at org.gradle.api.internal.tasks.execution.FinalizePropertiesTaskExecuter.execute(FinalizePropertiesTaskExecuter.java:46)
        at org.gradle.api.internal.tasks.execution.ResolveTaskExecutionModeExecuter.execute(ResolveTaskExecutionModeExecuter.java:62)
        at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:57)
        at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:56)
        at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:36)
        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.executeTask(EventFiringTaskExecuter.java:77)
        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:55)
        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:52)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecu
tor.java:416)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecu
tor.java:406)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:102)
        at org.gradle.internal.operations.DelegatingBuildOperationExecutor.call(DelegatingBuildOperationExecutor.java:36)
        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter.execute(EventFiringTaskExecuter.java:52)
        at org.gradle.execution.plan.LocalTaskNodeExecutor.execute(LocalTaskNodeExecutor.java:41)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:37
2)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:35
9)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGrap
h.java:352)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGrap
h.java:338)
        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.lambda$run$0(DefaultPlanExecutor.java:127)
        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.execute(DefaultPlanExecutor.java:191)
        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.executeNextNode(DefaultPlanExecutor.java:182)
        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.run(DefaultPlanExecutor.java:124)
        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)
        at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)
        at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)
Caused by: org.gradle.process.internal.ExecException: Process 'command 'perl'' finished with non-zero exit value 1
        at org.gradle.process.internal.DefaultExecHandle$ExecResultImpl.assertNormalExitValue(DefaultExecHandle.java:417)
        at org.gradle.process.internal.DefaultExecAction.execute(DefaultExecAction.java:38)
        at org.gradle.process.internal.DefaultExecActionFactory.exec(DefaultExecActionFactory.java:156)
        at org.gradle.groovy.scripts.DefaultScript.exec(DefaultScript.java:249)
        at jdk.internal.reflect.GeneratedMethodAccessor402.invoke(Unknown Source)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at org.gradle.internal.metaobject.BeanDynamicObject$GroovyObjectAdapter.invokeOpaqueMethod(BeanDynamicObject.java:583)
        at org.gradle.internal.metaobject.BeanDynamicObject$MetaClassAdapter.invokeMethod(BeanDynamicObject.java:510)
        at org.gradle.internal.metaobject.BeanDynamicObject.tryInvokeMethod(BeanDynamicObject.java:195)
        at org.gradle.internal.metaobject.ConfigureDelegate.invokeMethod(ConfigureDelegate.java:77)
        at build_4rsf6oo4eh8rcq3x9l8zfk58w$_run_closure22$_closure269$_closure277$_closure282.doCall(C:\jfx\build.gradle:3445)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at org.gradle.api.internal.AbstractTask$ClosureTaskAction.execute(AbstractTask.java:670)
        at org.gradle.api.internal.AbstractTask$ClosureTaskAction.execute(AbstractTask.java:643)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$3.run(ExecuteActionsTaskExecuter.java:568)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecu
tor.java:402)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecu
tor.java:394)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:92)
        at org.gradle.internal.operations.DelegatingBuildOperationExecutor.run(DelegatingBuildOperationExecutor.java:31)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:553)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:536)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.access$300(ExecuteActionsTaskExecuter.java:109)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$TaskExecution.executeWithPreviousOutputFiles(ExecuteActio
nsTaskExecuter.java:276)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$TaskExecution.execute(ExecuteActionsTaskExecuter.java:265
)
        at org.gradle.internal.execution.steps.ExecuteStep.lambda$execute$1(ExecuteStep.java:33)
        at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:33)
        at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:26)
        at org.gradle.internal.execution.steps.CleanupOutputsStep.execute(CleanupOutputsStep.java:67)
        at org.gradle.internal.execution.steps.CleanupOutputsStep.execute(CleanupOutputsStep.java:36)
        at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:49)
        at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:34)
        at org.gradle.internal.execution.steps.CancelExecutionStep.execute(CancelExecutionStep.java:43)
        at org.gradle.internal.execution.steps.TimeoutStep.executeWithoutTimeout(TimeoutStep.java:73)
        at org.gradle.internal.execution.steps.TimeoutStep.execute(TimeoutStep.java:54)
        at org.gradle.internal.execution.steps.CatchExceptionStep.execute(CatchExceptionStep.java:34)
        at org.gradle.internal.execution.steps.CreateOutputsStep.execute(CreateOutputsStep.java:44)
        at org.gradle.internal.execution.steps.SnapshotOutputsStep.execute(SnapshotOutputsStep.java:54)
        at org.gradle.internal.execution.steps.SnapshotOutputsStep.execute(SnapshotOutputsStep.java:38)
        at org.gradle.internal.execution.steps.BroadcastChangingOutputsStep.execute(BroadcastChangingOutputsStep.java:49)
        at org.gradle.internal.execution.steps.CacheStep.executeWithoutCache(CacheStep.java:159)
        at org.gradle.internal.execution.steps.CacheStep.execute(CacheStep.java:72)
        at org.gradle.internal.execution.steps.CacheStep.execute(CacheStep.java:43)
        at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:44)
        at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:33)
        at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:38)
        at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:24)
        at org.gradle.internal.execution.steps.SkipUpToDateStep.executeBecause(SkipUpToDateStep.java:92)
        at org.gradle.internal.execution.steps.SkipUpToDateStep.lambda$execute$0(SkipUpToDateStep.java:85)
        at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:55)
        at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:39)
        at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:76)
        at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:37)
        at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.jav
a:36)
        at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.jav
a:26)
        at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:94)
        at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:49)
        at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:79)
        at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:53)
        at org.gradle.internal.execution.steps.ValidateStep.execute(ValidateStep.java:74)
        at org.gradle.internal.execution.steps.SkipEmptyWorkStep.lambda$execute$2(SkipEmptyWorkStep.java:78)
        at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:78)
        at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:34)
        at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsStartedStep.execute(MarkSnapshottingInputsStartedStep.java:
39)
        at org.gradle.internal.execution.steps.LoadExecutionStateStep.execute(LoadExecutionStateStep.java:40)
        at org.gradle.internal.execution.steps.LoadExecutionStateStep.execute(LoadExecutionStateStep.java:28)
        at org.gradle.internal.execution.impl.DefaultWorkExecutor.execute(DefaultWorkExecutor.java:33)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeIfValid(ExecuteActionsTaskExecuter.java:192)
        ... 30 more


* Get more help at https://help.gradle.org

Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.
Use '--warning-mode all' to show the individual deprecation warnings.
See https://docs.gradle.org/6.3/userguide/command_line_interface.html#sec:command_line_warnings

BUILD FAILED in 8s
57 actionable tasks: 10 executed, 47 up-to-date

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Just setup the environment as described in description and run a build.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Successful build.
ACTUAL -
Failed build.

CUSTOMER SUBMITTED WORKAROUND :
No workaround has been found.

FREQUENCY : always


",,,,,,,,,,JDK-8265936,JDK-8266866,,,,,,,,,JDK-8263788,,,JDK-8262364,,,,,,,,,,,,,,JDK-8262123,,,,,,SKARA-995,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i2rokj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,Not verified,,"2021-02-23 19:42;pnarayanaswa;Duplicate of JDK-8262123;;;","2021-02-24 04:46;kcr;This is a link error and not a problem running ""cygpath"", so it doesn't look like a duplicate of JDK-8262123.;;;","2021-02-24 04:49;kcr;I haven't seen this error before. One thing for the reporter to try is using VS 2019 rather than VS 2017, although I don't know whether than would make a difference.;;;","2021-02-24 05:36;ajoseph;The Debug build of WebKit seems to be broken. It fails in Mac and Linux as well. I'll update the bug title.;;;","2021-02-24 05:39;kcr;Ah, I had missed that they were building with `CONF=DebugNative`. Thanks.;;;","2021-02-24 20:24;pnarayanaswa;Additional Information from submitter:
===========================
I am attaching a complete output of running ./gradlew (for the second time) just in case this information will help with investigating this:

$ ./gradlew
Starting a Gradle Daemon (subsequent builds will be faster)
> Task :buildSrc:compileJava NO-SOURCE
> Task :buildSrc:compileGroovy UP-TO-DATE
> Task :buildSrc:processResources NO-SOURCE
> Task :buildSrc:classes UP-TO-DATE
> Task :buildSrc:jar UP-TO-DATE
> Task :buildSrc:assemble UP-TO-DATE
> Task :buildSrc:compileTestJava NO-SOURCE
> Task :buildSrc:compileTestGroovy NO-SOURCE
> Task :buildSrc:processTestResources NO-SOURCE
> Task :buildSrc:testClasses UP-TO-DATE
> Task :buildSrc:test NO-SOURCE
> Task :buildSrc:check UP-TO-DATE
> Task :buildSrc:build UP-TO-DATE

> Configure project :
gradle.gradleVersion: 6.3
OS_NAME: windows 10
OS_ARCH: amd64
JAVA_HOME: C:/Program Files/jdk-15/
JDK_HOME: C:/Program Files/jdk-15/
java.runtime.version: 15+36-1562
java version: 15
java build number: 36
jdk.runtime.version: 15+36-1562
jdk version: 15
jdk build number: 36
minimum jdk version: 11
minimum jdk build number: 28
MSVC version: VS2019-16.5.3+1.0
cmake version: 3.13.3
ninja version: 1.8.2
ant version: 1.10.5
HAS_JAVAFX_MODULES: false
STUB_RUNTIME: C:/Program Files/jdk-15/
CONF: DebugNative
NUM_COMPILE_THREADS: 12
COMPILE_TARGETS: win
COMPILE_FLAGS_FILES: buildSrc/win.gradle
HUDSON_JOB_NAME: not_hudson
HUDSON_BUILD_NUMBER: 0000
PROMOTED_BUILD_NUMBER: 0
PRODUCT_NAME: OpenJFX
RELEASE_VERSION: 15.0.1
RELEASE_SUFFIX: -internal
RELEASE_VERSION_SHORT: 15.0.1-internal
RELEASE_VERSION_LONG: 15.0.1-internal+0-2021-02-24-065747
RELEASE_VERSION_PADDED: 15.0.1.0
MAVEN_VERSION: 15.0.1-internal+0-2021-02-24-065747
UPDATE_STUB_CACHE: false
Building Webkit configuration /Debug/ into C:/jfx/modules/javafx.web/build/win
module: project ':apps' (buildModule=NO)
module: project ':base' (buildModule=YES)
module: project ':controls' (buildModule=YES)
module: project ':fxml' (buildModule=YES)
module: project ':graphics' (buildModule=YES)
module: project ':media' (buildModule=YES)
module: project ':swing' (buildModule=YES)
module: project ':swt' (buildModule=NO)
module: project ':systemTests' (buildModule=NO)
module: project ':web' (buildModule=YES)

> Task :verifyJava
> Task :base:processVersionInfo UP-TO-DATE
> Task :base:compileJava UP-TO-DATE
> Task :base:processResources NO-SOURCE
> Task :base:classes UP-TO-DATE
> Task :base:jar SKIPPED
> Task :base:assemble UP-TO-DATE
> Task :buildModuleBaseWin UP-TO-DATE
> Task :graphics:generateGrammarSource UP-TO-DATE
> Task :graphics:compileJslcJava UP-TO-DATE
> Task :graphics:compileJava UP-TO-DATE
> Task :graphics:compileDecoraCompilers UP-TO-DATE
> Task :graphics:generateDecoraShaders UP-TO-DATE
> Task :graphics:compileDecoraHLSLShaders
> Task :graphics:processDecoraShaders UP-TO-DATE
> Task :graphics:compilePrismCompilers UP-TO-DATE
> Task :graphics:generatePrismShaders UP-TO-DATE
> Task :graphics:compilePrismHLSLShaders
> Task :graphics:processPrismShaders UP-TO-DATE
> Task :graphics:processShaders UP-TO-DATE
> Task :graphics:compileShadersJava NO-SOURCE
> Task :graphics:processShadersResources NO-SOURCE
> Task :graphics:shadersClasses UP-TO-DATE
> Task :graphics:compileFullJava UP-TO-DATE
> Task :graphics:processResources UP-TO-DATE
> Task :graphics:classes
> Task :graphics:jar SKIPPED
> Task :graphics:compileDecoraNativeShadersWin
> Task :graphics:rcDecoraNativeShadersWin UP-TO-DATE
> Task :graphics:linkDecoraNativeShadersWin UP-TO-DATE
> Task :graphics:nativeDecora
> Task :graphics:ccWinFont UP-TO-DATE
> Task :graphics:rcFont UP-TO-DATE
> Task :graphics:linkWinFont UP-TO-DATE
> Task :graphics:nativeFont UP-TO-DATE
> Task :graphics:ccWinGlass UP-TO-DATE
> Task :graphics:rcGlass UP-TO-DATE
> Task :graphics:linkWinGlass UP-TO-DATE
> Task :graphics:nativeGlass UP-TO-DATE
> Task :graphics:ccWinIio UP-TO-DATE
> Task :graphics:rcIio UP-TO-DATE
> Task :graphics:linkWinIio UP-TO-DATE
> Task :graphics:nativeIio UP-TO-DATE
> Task :graphics:ccWinPrism UP-TO-DATE
> Task :graphics:rcPrism UP-TO-DATE
> Task :graphics:linkWinPrism UP-TO-DATE
> Task :graphics:nativePrism
> Task :graphics:generateD3DHeaders UP-TO-DATE
> Task :graphics:ccWinPrismD3D UP-TO-DATE
> Task :graphics:rcPrismD3D UP-TO-DATE
> Task :graphics:linkWinPrismD3D UP-TO-DATE
> Task :graphics:nativePrismD3D UP-TO-DATE
> Task :graphics:ccWinPrismES2 UP-TO-DATE
> Task :graphics:rcPrismES2 UP-TO-DATE
> Task :graphics:linkWinPrismES2 UP-TO-DATE
> Task :graphics:nativePrismES2 UP-TO-DATE
> Task :graphics:ccWinPrismSW UP-TO-DATE
> Task :graphics:rcPrismSW UP-TO-DATE
> Task :graphics:linkWinPrismSW UP-TO-DATE
> Task :graphics:nativePrismSW UP-TO-DATE
> Task :graphics:assemble
> Task :buildModuleGraphicsWin UP-TO-DATE
> Task :prepOpenJfxStubs SKIPPED
> Task :updateCacheIfNeeded UP-TO-DATE
> Task :media:compileJava UP-TO-DATE
> Task :media:processResources UP-TO-DATE
> Task :media:classes UP-TO-DATE
> Task :media:jar SKIPPED
> Task :media:assemble UP-TO-DATE
> Task :buildModuleMediaWin NO-SOURCE
> Task :swt:compileJava UP-TO-DATE
> Task :swt:processResources NO-SOURCE
> Task :swt:classes
> Task :javafxSwtWin
> Task :javafxSwtIndexWin
> Task :buildModuleSWTWin
> Task :controls:compileJava UP-TO-DATE
> Task :controls:processResources UP-TO-DATE
> Task :controls:classes UP-TO-DATE
> Task :controls:jar SKIPPED
> Task :web:copyPreGeneratedWrappers UP-TO-DATE
> Task :web:compileJava UP-TO-DATE
> Task :web:rcWin UP-TO-DATE

> Task :web:compileNativeWin
+  cmake --build C:/jfx/modules/javafx.web/build/win/Debug --config Debug --
ninja: error: 'WebCore/obj/version.res', needed by 'version.res.stamp.cpp', missing and no known rule to make it

> Task :web:compileNativeWin FAILED

FAILURE: Build failed with an exception.

* Where:
Build file 'C:\jfx\build.gradle' line: 3445

* What went wrong:
Execution failed for task ':web:compileNativeWin'.
> Process 'command 'perl'' finished with non-zero exit value 1

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Get more help at https://help.gradle.org

Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.
Use '--warning-mode all' to show the individual deprecation warnings.
See https://docs.gradle.org/6.3/userguide/command_line_interface.html#sec:command_line_warnings

BUILD FAILED in 18s
57 actionable tasks: 10 executed, 47 up-to-date;;;","2021-02-28 20:33;pnarayanaswa;Additional Information from submitter:
===========================
Note that build fails for me with the exactly same error even when I set:
COMPILE_WEBKIT = true
CONF = Release
in gradle.properties.

So it looks like this is not related just to DebugNative build configuration.

JavaFX build works fine for me when I set COMPILE_WEBKITE to false though but that's not what we want. We need native debug symbols for WebKit as we would like to troubleshoot whole JavaFX application freeze caused by it.

What could help us is that someone who is able to build WebKit successfully would provide us with the exact versions of Windows/CygWin libraries they are using.

Side note:
1. I will monitor this ticket and provide any further information if needed. So please just let me know in the comments in case anything else is needed.
2. Is there any other channel I could communicate directly with the JavaFX community?;;;","2021-03-01 05:41;kcr;You can communicate with the JavaFX developers by subscribing to the openjfx-dev mailing list here:
http://mail.openjdk.java.net/mailman/listinfo/openjfx-dev;;;","2021-04-14 23:20;ajoseph;The remaining debug build issues (unit test failures and crash while exit) are fixed in https://github.com/openjdk/jfx/pull/461;;;","2021-04-24 06:28;kcr;The Skara bot hasn't resolved this bug, so I filed SKARA-995 to track it (although it might just be a stuck bot that needs to be restarted).;;;","2021-04-24 07:38;roboduke;Changeset: ed080c82
Author:    Arun Joseph <ajoseph@openjdk.org>
Date:      2021-04-24 02:31:39 +0000
URL:       https://git.openjdk.java.net/jfx/commit/ed080c82
;;;",,,,,,,,,,,,,,,,,
Math vector stubs are not called for double64 vectors,JDK-8262275,5042769,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-02-23 19:43,2021-03-04 15:36,2023-10-01 09:57,2021-03-04 15:36,repo-panama,,,,,,,,repo-panama,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,,"
This is a follow-up of JDK-8261267.

For Double64Vector, the svml math vector stubs intrinsification is failing and they are not being called from jitted code.
But we do have svml double64 vectors.
So it would be beeter to call the svml math double64 vector stubs where available.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261267,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,,"0|i2rp7v:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javadoc test TestGeneratedClasses.java fails on Windows,JDK-8262269,5042761,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-02-23 15:22,2021-07-26 06:39,2023-10-01 09:57,2021-02-23 19:50,17,,,,,,,,17,tools,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,,,,,,"The new test TestGeneratedClasses.java because it does not take platform file separators into account.

Starting subtest 1.4: checkOutput
FAILED: OUT: following text not found:
Building tree for all the packages and classes...
Generating testClasses/out/m/p/C.html...
Generating testClasses/out/m/p/package-summary.html...
found 
Constructing Javadoc information...

Creating destination directory: ""testClasses\out\""

Building index for all the packages and classes...

Standard Doclet version 17-ea+11-LTS-821

Building tree for all the packages and classes...

Generating testClasses\out\m\p\C.html...

Generating testClasses\out\m\p\package-summary.html...

Generating testClasses\out\m\p\package-tree.html...

Generating testClasses\out\m\module-summary.html...

Generating testClasses\out\overview-tree.html...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262260,,,,,,,,,,,,JDK-8262265,JDK-8223355,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rp63:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-02-23 19:50;roboduke;Changeset: fac37bf5
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-02-24 03:50:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fac37bf5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8262049 fails validate-source,JDK-8262266,5042756,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,dcubed,dcubed,dcubed,2021-02-23 13:54,2021-07-15 10:19,2023-10-01 09:57,2021-02-23 14:55,17,,,,,,,,17,hotspot,,0,tier1,,,,,,,,,,,,,,,,,,,,,,"[2021-02-23T21:50:23,170Z] BAD COPYRIGHT LINE: /opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S154441/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3cca1e1d-e257-473c-b880-41f3854dd65f/runs/bb4905ac-d9d6-4b0a-ac0d-0cc8780751a0/workspace/open/test/hotspot/jtreg/gc/TestReferenceRefersTo.java
[2021-02-23T21:50:23,170Z] BAD COPYRIGHT LINE: /opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S154441/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3cca1e1d-e257-473c-b880-41f3854dd65f/runs/bb4905ac-d9d6-4b0a-ac0d-0cc8780751a0/workspace/open/test/hotspot/jtreg/gc/TestReferenceRefersToDuringConcMark.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262049,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rp4z:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-02-23 13:55;dholmes;Missing commas after second copyright year.;;;","2021-02-23 14:01;dcubed;Here's the proposed context diffs:

$ git diff
diff --git a/test/hotspot/jtreg/gc/TestReferenceRefersTo.java b/test/hotspot/jtreg/gc/TestReferenceRefersTo.java
index f4315d83517..383012ae63c 100644
--- a/test/hotspot/jtreg/gc/TestReferenceRefersTo.java
+++ b/test/hotspot/jtreg/gc/TestReferenceRefersTo.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
diff --git a/test/hotspot/jtreg/gc/TestReferenceRefersToDuringConcMark.java b/test/hotspot/jtreg/gc/TestReferenceRefersToDuringConcMark.java
index e6e3f19c256..eee57d7c31a 100644
--- a/test/hotspot/jtreg/gc/TestReferenceRefersToDuringConcMark.java
+++ b/test/hotspot/jtreg/gc/TestReferenceRefersToDuringConcMark.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it

Verifying with ""make CONF=macosx-x86_64-normal-server-release validate-headers"" now.;;;","2021-02-23 14:55;roboduke;Changeset: c769388d
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-02-23 22:08:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c769388d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
BadBitfieldTest fails on Windows,JDK-8262263,5042752,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2021-02-23 12:58,2021-02-23 14:55,2023-10-01 09:57,2021-02-23 14:55,repo-panama,,,,,,,,,tools,,0,foreign-jextract,,,,,,,,,,,,,,,,,,,,,,"BadBitfieldTest was recently enabled on Windows as well, but it is failing because of a clang error.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rp43:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2 intrinsincs should not modify IR when bailing out,JDK-8262256,5042739,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2021-02-23 10:03,2022-04-10 23:04,2023-10-01 09:57,2021-03-03 03:31,11,16,17,,,,,,17,hotspot,,0,c2,c2-intrinsic,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,,"The following assert triggers when running test/hotspot/jtreg/compiler/unsafe/OpaqueAccesses.java

--- a/src/hotspot/share/opto/library_call.cpp
+++ b/src/hotspot/share/opto/library_call.cpp
@@ -108,7 +108,9 @@ JVMState* LibraryIntrinsic::generate(JVMState* jvms) {
 #endif
   ciMethod* callee = kit.callee();
   const int bci    = kit.bci();
-
+#ifdef ASSERT
+  Node* ctrl = kit.control();
+#endif
   // Try to inline the intrinsic.
   if ((CheckIntrinsics ? callee->intrinsic_candidate() : true) &&
       kit.try_to_inline(_last_predicate)) {
@@ -132,6 +134,7 @@ JVMState* LibraryIntrinsic::generate(JVMState* jvms) {
   }
 
   // The intrinsic bailed out
+  assert(ctrl == kit.control(), ""Control flow was added although we bailed out"");
   if (jvms->has_method()) {
     // Not a root compile.
     const char* msg;
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262231,JDK-8284635,,,,,JDK-8262998,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rp17:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-02-23 10:20;thartmann;ILW = C2 emits intrinsic code even when bailing out (could lead to failures like JDK-8262231), with unsafe accesses, disable affected intrinsic = MLM = P4;;;","2021-02-26 04:21;thartmann;The problem is that LibraryCallKit::make_unsafe_address adds control flow when the caller might still bail out from intrinsification. Code was added by JDK-8181211 and JDK-8176506.;;;","2021-03-03 03:31;roboduke;Changeset: 54dfd79c
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-03-03 11:30:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/54dfd79c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Configure Gradle checksum verification,JDK-8262236,5042718,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jgneff,jgneff,jgneff,2021-02-23 09:16,2021-08-23 06:30,2023-10-01 09:57,2021-02-23 11:36,jfx17,,,,,,,,jfx17,javafx,,0,noreg-build,,,,,,,,,,,,,,,,,,,,,,"The Gradle Wrapper can verify the downloaded distribution with a SHA-256 hash sum comparison, but the Wrapper in the OpenJFX repository is not configured to do so. See the section ""Verification of downloaded Gradle distributions"" at:

The Gradle Wrapper
https://docs.gradle.org/current/userguide/gradle_wrapper.html

SYSTEM / OS / JAVA RUNTIME INFORMATION

My particular system is Ubuntu 20.04.2 LTS with OpenJDK 11.

------------------------------------------------------------------------
$ uname -srm
Linux 5.4.0-65-generic x86_64

$ getconf GNU_LIBC_VERSION
glibc 2.31

$ java --version
openjdk 11.0.10 2021-01-19
OpenJDK Runtime Environment (build 11.0.10+9-Ubuntu-0ubuntu1.20.04)
OpenJDK 64-Bit Server VM (build 11.0.10+9-Ubuntu-0ubuntu1.20.04, mixed mode, sharing)
------------------------------------------------------------------------

STEPS TO REPRODUCE

Simulate a tampered Gradle distribution by modifying the 'gradle-6.3-bin.zip' file. Force the Gradle Wrapper to check the downloaded file by removing the 'gradle-6.3-bin.zip.ok' file.

These files are found under my home directory in the locations shown below:

------------------------------------------------------------------------
$ find .gradle -name ""gradle-6.3-bin.zip*"" | sort
.gradle/wrapper/dists/gradle-6.3-bin/8tpu6egwsccjzp10c1jckl0rx/gradle-6.3-bin.zip
.gradle/wrapper/dists/gradle-6.3-bin/8tpu6egwsccjzp10c1jckl0rx/gradle-6.3-bin.zip.lck
.gradle/wrapper/dists/gradle-6.3-bin/8tpu6egwsccjzp10c1jckl0rx/gradle-6.3-bin.zip.ok
------------------------------------------------------------------------

I modified the JAR file without corrupting its archive by changing the sixth byte from '0x00' to '0x01' with the 'hexedit' program as follows:

------------------------------------------------------------------------
Before:  50 4B 03 04  0A 00 00 08  ...
 After:  50 4B 03 04  0A 01 00 08  ...
------------------------------------------------------------------------

EXPECTED RESULTS

A tampered Gradle 6.3 distribution is detected:

------------------------------------------------------------------------
$ bash gradlew --version
Deleting directory /home/ubuntu/.gradle/wrapper/dists/gradle-6.3-bin/
  8tpu6egwsccjzp10c1jckl0rx/gradle-6.3
Verification of Gradle distribution failed!

Your Gradle distribution may have been tampered with.
Confirm that the 'distributionSha256Sum' property in your gradle-wrapper.properties
  file is correct and you are downloading the wrapper from a trusted source.

 Distribution Url: https://services.gradle.org/distributions/gradle-6.3-bin.zip
Download Location: /home/ubuntu/.gradle/wrapper/dists/gradle-6.3-bin/8tpu6egwsccjzp10c1jckl0rx/gradle-6.3-bin.zip
Expected checksum: '038794feef1f4745c6347107b6726279d1c824f3fc634b60f86ace1e9fbd1768'
  Actual checksum: '74a13e00995b49b2e7b1888818c24cd79f333dc12b21e07952796fc8b18e070f'
------------------------------------------------------------------------

ACTUAL RESULT

A tampered Gradle 6.3 distribution is not detected:

------------------------------------------------------------------------
$ bash gradlew --version
Deleting directory /home/ubuntu/.gradle/wrapper/dists/gradle-6.3-bin/
  8tpu6egwsccjzp10c1jckl0rx/gradle-6.3

------------------------------------------------------------
Gradle 6.3
------------------------------------------------------------

Build time:   2020-03-24 19:52:07 UTC
Revision:     bacd40b727b0130eeac8855ae3f9fd9a0b207c60

Kotlin:       1.3.70
Groovy:       2.5.10
Ant:          Apache Ant(TM) version 1.10.7 compiled on September 1 2019
JVM:          11.0.10 (Ubuntu 11.0.10+9-Ubuntu-0ubuntu1.20.04)
OS:           Linux 5.4.0-65-generic amd64
------------------------------------------------------------------------

SOURCE CODE FOR AN EXECUTABLE TEST CASE

None.

WORKAROUND

To work around the problem, you could download the Gradle 6.3 distribution, verify its checksum manually, and use that instead of the Gradle Wrapper.

You could also manually verify the distribution archive that was downloaded by the Gradle Wrapper, but that may be after it has already extracted and run the distribution.
",,,,,,,,,,JDK-8272841,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264010,JDK-8263204,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rowj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-02-23 11:36;roboduke;Changeset: dc342d33
Author:    John Neffenger <john@status6.com>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-02-23 19:35:57 +0000
URL:       https://git.openjdk.java.net/jfx/commit/dc342d33
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] C2 compilation fails with assert ""user must call transfer_exceptions_into_jvms""",JDK-8262231,5042712,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2021-02-23 08:19,2021-02-23 22:42,2023-10-01 09:57,2021-02-23 22:42,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,,,,,"Happens with -XX:PerMethodSpecTrapLimit=0 -XX:PerMethodTrapLimit=0:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/open/src/hotspot/share/opto/graphKit.hpp:89), pid=17351, tid=17364
#  assert(!has_exceptions()) failed: user must call transfer_exceptions_into_jvms
#

Current CompileTask:
C2:  34902 3362    b        java.lang.invoke.LambdaForm$MH/0x0000000801013400::invoke (47 bytes)

Stack: [0x00007facf98f2000,0x00007facf99f3000],  sp=0x00007facf99ef3f0,  free space=1012k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x600731]  GraphKit::~GraphKit()+0x41
V  [libjvm.so+0x12e3664]  LibraryIntrinsic::generate(JVMState*)+0x3e4
V  [libjvm.so+0xb9c041]  Parse::do_call()+0x391
V  [libjvm.so+0x1648698]  Parse::do_one_bytecode()+0x438
V  [libjvm.so+0x162fe68]  Parse::do_one_block()+0x848
V  [libjvm.so+0x1630d90]  Parse::do_all_blocks()+0x130
V  [libjvm.so+0x1635db3]  Parse::Parse(JVMState*, ciMethod*, float)+0xe33
V  [libjvm.so+0x864205]  ParseGenerator::generate(JVMState*)+0x115
V  [libjvm.so+0xa4acf1]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1131
V  [libjvm.so+0x861128]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f8
V  [libjvm.so+0xa5b641]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xea1
V  [libjvm.so+0xa5c2c8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1921166]  JavaThread::thread_main_inner()+0x256
V  [libjvm.so+0x19275e0]  Thread::call_run()+0x100
V  [libjvm.so+0x15ea086]  thread_native_entry(Thread*)+0x116
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262256,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rov7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[type-restrictions] RestrictedMethodTest failed to compile,JDK-8262202,5042669,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2021-02-23 05:34,2021-02-23 05:41,2023-10-01 09:57,2021-02-23 05:41,repo-valhalla,,,,,,,,,hotspot,,0,type-restrictions,,,,,,,,,,,,,,,,,,,,,,"Test RestrictedMethodTest fails to compile with:

test/hotspot/jtreg/runtime/valhalla/TypeRestrictions/RestrictedMethodTest.java:44: error: <identifier> expected
  static inline class Point {
               ^
1 error

Test source code must use new syntax ""static primitive class Point"".
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2roln:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
issue in jli args.c,JDK-8262199,5042667,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2021-02-23 05:22,2021-03-02 17:40,2023-10-01 09:57,2021-02-26 03:21,17,,,,,,,,17,core-libs,,0,noreg-sqe,,,,,,,,,,,,,,,,,,,,,,"Sonar reports a finding where a stat  performs a check on file, and later fopen is called on file .

The coding could be slightly rewritten so that the issue is removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rol7:",9223372036854775807,b12,,,,,,,,,,,,"2021-02-26 03:21;roboduke;Changeset: d7efb4cc
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-02-26 11:21:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d7efb4cc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Overhaul bitfield parsing logic,JDK-8262198,5042666,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-02-23 05:18,2021-02-23 10:23,2023-10-01 09:57,2021-02-23 10:23,repo-panama,,,,,,,,,tools,,0,foreign-jextract,,,,,,,,,,,,,,,,,,,,,,"The bitfieeld processing logic in jextract has proven to be too fragile. The main issue is that the code has to ""guess"" as to what the bitfield ""container"" size might be, since clang doesn't give us that information. While we can enhance that logic (and we have tried to do so in the past), there are always cases which cannot be supported in full - or which would require us to re-implement libclang struct field allocation. We need to find a more robust solution.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rokz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8242032 uses wrong contains_reference() in assertion code ,JDK-8262197,5042665,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,tschatzl,tschatzl,2021-02-23 05:06,2021-07-15 10:19,2023-10-01 09:57,2021-02-23 07:55,17,,,,,,,,17,hotspot,,0,gc-g1,tier4,tier5,,,,,,,,,,,,,,,,,,,,"JDK-8242032 added the following code under lock:

    // Rechecking if the region is coarsened, while holding the lock.
    if (is_region_coarsened(from_hrm_ind)) {
      assert(contains_reference(from), ""We just found "" PTR_FORMAT "" in the Coarse table"", p2i(from));
      return;
    }

The problem is the contains_reference() call, that tries to lock the same Mutex while already holding that same lock. Actually the comment above that ""if"" says that we're holding the lock....

So Mutex code correctly asserts with

  assert(owner() != self) failed: invariant

The fix is to call contains_reference_locked() instead.

The original author of JDK-8242032 already mentioned that he could not reproduce the situation - now we have evidence that there is such a problem. :)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8242032,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rokr:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-02-23 07:55;roboduke;Changeset: 67762de6
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-02-23 15:55:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/67762de6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Harden tests that use the HostsFileNameService (jdk.net.hosts.file property),JDK-8262195,5042661,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccleary,ccleary,ccleary,2021-02-23 04:50,2021-03-02 17:41,2023-10-01 09:58,2021-03-01 02:18,,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"Intermittent failures have been observed across java.net that are related to use of System.setproperty(""jdk.net.hosts.file"") to configure the use of the HostsFileNameService. This is causing issues as it is possible for certain JVM tools to access InetAddress and initialise it's static members (such as nameService and impl) during start-up resulting in a Name Service configuration being already set to the default PlatformNameService by the the time a test run is commenced.

These intermittent failures can be resolved by setting the relevant system property (jdk.net.hosts.file) in the run tag of the jtreg test arguments. This provides certainty that the correct system properties will be set by the time the test is run.  

The following tests are concerned with this issue:
java/net/Inet4Address/textToNumericFormat.java
java/net/InetAddress/InternalNameServiceWithNoHostsFileTest.java
java/net/InetAddress/InternalNameServiceWithHostsFileTest.java
java/net/InetAddress/InternalNameServiceTest.java
java/net/URLPermission/nstest/LookupTest.java
sun/net/InetAddress/nameservice/simple/DefaultCaching.java
sun/net/InetAddress/nameservice/simple/CacheTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261895,,,,,,JDK-8262862,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,os_x,windows,,,,"0|i2rojv:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-03-01 02:18;roboduke;Changeset: 8bc8542e
Author:    Conor Cleary <ccleary@openjdk.org>
Committer: Aleksei Efimov <aefimov@openjdk.org>
Date:      2021-03-01 10:18:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8bc8542e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Call X509KeyManager.chooseClientAlias once for all key types,JDK-8262186,5042272,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,weijun,webbuggrp,webbuggrp,2021-02-17 09:45,2023-07-23 23:31,2023-10-01 09:58,2021-08-31 13:09,11,15,17,8,,,,,18,security-libs,,0,additional-information-received,additional-information-requested,amazon-interest,dcsaw,redhat-interest,regression,release-note=yes,reproducer-yes,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Not OS-specific

A DESCRIPTION OF THE PROBLEM :
e are creating a HTTPS connection to a server using client authentication. While connecting, the client explicitly chooses to present one specific entry in the client keystore by implementing X509KeyManager's chooseClientAlias callback method. However, the way this method is called by SSL code has changed over time:
- In jdk 15.0.2 and TLS 1.2, the method is called several times, presenting one key type per call only. 
- In jdk 15.0.2 and TLS 1.1, the method is called only once, and all possible key types are presented in that single call.
- In jdk 1.8.0_192 and TLS 1.2, the method is called only once, and all possible key types are presented in that single call.
- In jdk 1.8.0_192 and TLS 1.1, the method is called only once, and all possible key types are presented in that single call.

The javadoc of the method [1] says:
String[] keyType - the key algorithm type name(s), ordered with the most-preferred key type first.

The parameter type and description kind of suggests, though it does not explicitly say so, that all possible key types are passed to this method when it is called, which was the case in the past, and is also still the case for TLS 1.1.

I was at least very surprised by the above change, and would not think that anybody reading the javadoc would expect such a call semantics.
Is ist a bug? I do not know. But in my opinion, it is certainly an unwanted situation. So I see possible ways to improve this:
- only call the method once with all possible key types, as it was in the past
- change the javadoc to indicate that the method might be called several times during a single key resolution, and that not all possible key types may be presented in a single call.

In our application, it would be more convenient to get all possible key types in a singe call, as then one can treat a mismatch as an error and notify the user accordingly. If the method is called several times, key type mismatch cannot be treated as error, as the next call could be the one with the matching key type.

REGRESSION : Last worked in version 8

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1 ) From the supplied source code, extract the two files HttpsServer.java and HttpsClient.java. 
2 ) Create a JKS keystore with a RSA private key (can be self-siged) and a JKS truststore trusting the key (I'd attach my truststore and keystore, but there is no upload field available here :-( ). Use 'changeit' as password. Put them in the classpath as localhost.jks and truststore.jks.
3) Run HttpsServer.java, which will start a simple Https Server on port 9061
4) Run HttpsClient.java, which will connect to the Https Server using client authentication and print the calls to the chooseClientAlias method.

Changing to TLS v1.1 can be done by changing line 49 in the client to 
    SSLContext sslContext = SSLContext.getInstance(""TLSv1.1"");

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
For the earlier call semantics, the output of the client would be
testSSL start
Opening client connection...
Initializing client key store...
Initializing client trust store...
Initializing client ssl context...
Creating client ssl socket factory...
client connecting...
passed key types : [RSA, DSA, EC]
Successfully received Data

ACTUAL -
For the changed call semantics, the output would be
testSSL start
Opening client connection...
Initializing client key store...
Initializing client trust store...
Initializing client ssl context...
Creating client ssl socket factory...
client connecting...
passed key types : [EC]
passed key types : [RSA]
Successfully received Data

---------- BEGIN SOURCE ----------
---------- HttpsClient.java
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.Socket;
import java.net.URL;
import java.security.KeyStore;
import java.security.Principal;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import java.util.Arrays;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.KeyManager;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509KeyManager;

public class HttpsClient
{
  private static final KeyStore keyStore;
  private static final KeyStore trustStore;
  private static final String STORE_PASSWORD = ""changeit"";

  static
  {
    keyStore = readKeystore(""localhost.jks"");
    trustStore = readKeystore(""truststore.jks"");
  }

  public static void main(String[] argv) throws Exception
  {
    System.out.println(""testSSL start"");
    // System.setProperty(""javax.net.debug"", ""all"");
    String serverUrl = ""https://localhost:"" + HttpsServer.PORT + ""/hello"";

    System.out.println(""Opening client connection..."");
    HttpsURLConnection conn = (HttpsURLConnection) new URL(serverUrl).openConnection();

    System.out.println(""Initializing client key store..."");
    KeyManagerFactory kmf = KeyManagerFactory.getInstance(""SunX509"");
    kmf.init(keyStore, STORE_PASSWORD.toCharArray());

    System.out.println(""Initializing client trust store..."");
    TrustManagerFactory tm = TrustManagerFactory.getInstance(""SunX509"");
    tm.init(trustStore);

    SSLContext sslContext = SSLContext.getInstance(""SSL"");
    System.out.println(""Initializing client ssl context..."");
    sslContext.init(Arrays.stream(kmf.getKeyManagers())
            .map(k -> {if (k instanceof X509KeyManager)
                          {return new KeyManagerDelegate((X509KeyManager) k); }
                        else
                          {return k; }})
            .toArray(KeyManager[]::new),
        tm.getTrustManagers(),
        null);

    System.out.println(""Creating client ssl socket factory..."");
    SSLSocketFactory sslsocketfactory = sslContext.getSocketFactory();
    conn.setSSLSocketFactory(sslsocketfactory);
    System.out.println(""client connecting..."");
    conn.connect();

    try (BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(conn.getInputStream())))
    {
      String result = bufferedreader.readLine();
      if (!""This is the response"".equals(result))
      {
        throw new RuntimeException(""Test failed, result is "" + result);
      }
      else
      {
        System.out.println(""Successfully received Data"");
      }
    }
  }

  public static class KeyManagerDelegate implements X509KeyManager
  {
    private X509KeyManager delegate;

    public KeyManagerDelegate(X509KeyManager delegate)
    {
      this.delegate = delegate;
    }

    @Override
    public String[] getClientAliases(String s, Principal[] principals)
    {
      return delegate.getClientAliases(s, principals);
    }

    @Override
    public String chooseClientAlias(String[] strings, Principal[] principals, Socket socket)
    {
      System.out.println(""passed key types : "" + Arrays.toString(strings));
      return delegate.chooseClientAlias(strings, principals, socket);
    }

    @Override
    public String[] getServerAliases(String s, Principal[] principals)
    {
      return delegate.getServerAliases(s, principals);
    }

    @Override
    public String chooseServerAlias(String s, Principal[] principals, Socket socket)
    {
      return delegate.chooseServerAlias(s, principals, socket);
    }

    @Override
    public X509Certificate[] getCertificateChain(String s)
    {
      return delegate.getCertificateChain(s);
    }

    @Override
    public PrivateKey getPrivateKey(String s)
    {
      return delegate.getPrivateKey(s);
    }
  }

  private static KeyStore readKeystore(String name)
  {
    try (InputStream resource = HttpsClient.class.getClassLoader().getResourceAsStream(name))
    {
      KeyStore keystore = KeyStore.getInstance(""JKS"");
      keystore.load(resource, ""changeit"".toCharArray());
      return keystore;
    }
    catch (Exception e)
    {
      throw new RuntimeException(e);
    }
  }
}
----- HttpsServer.java
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.nio.charset.StandardCharsets;
import java.security.KeyStore;

import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLEngine;
import javax.net.ssl.SSLParameters;
import javax.net.ssl.TrustManagerFactory;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpsConfigurator;

public class HttpsServer
{
  private static final KeyStore keyStore;
  private static final KeyStore trustStore;
  private static final String STORE_PASSWORD = ""changeit"";
  public static int PORT = 9061;

  static
  {
    keyStore = readKeystore(getResourceAsStream(""localhost.jks""));
    trustStore = readKeystore(getResourceAsStream(""truststore.jks""));
  }

  public static void main(String[] argv) throws Exception
  {
    System.out.println(""starting SSL server..."");
    System.setProperty(""javax.net.debug"", ""all"");
    com.sun.net.httpserver.HttpsServer httpsServer = null;
    try
    {
      httpsServer = createHttpsServer();
      Thread.sleep(3600000L);
    }
    finally
    {
      System.out.println(""stopping SSL Server"");
      if (httpsServer != null)
      {
        httpsServer.stop(0);
      }
    }
  }

  private static com.sun.net.httpserver.HttpsServer createHttpsServer() throws Exception
  {
    InetSocketAddress address = new InetSocketAddress(PORT);

    com.sun.net.httpserver.HttpsServer httpsServer = com.sun.net.httpserver.HttpsServer.create(address, 0);

    httpsServer.setHttpsConfigurator(new MyHttpsConfigurator());
    httpsServer.setExecutor(null);
    httpsServer.start();
    System.out.println(""Server started."");


    httpsServer.createContext(""/hello"", new MyHttpHandler());
    System.out.println(""hello context created."");
    return httpsServer;
  }

  private static class MyHttpsConfigurator extends HttpsConfigurator
  {

    public MyHttpsConfigurator() throws Exception
    {
      super(createSslContext());
    }

    private static SSLContext createSslContext() throws Exception
    {
      System.out.println(""getting instance of sslContext...."");
      SSLContext sslContext = SSLContext.getInstance(""TLS"");

      System.out.println(""Initializing server Keystore...."");

      KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""SunX509"");
      keyManagerFactory.init(keyStore, STORE_PASSWORD.toCharArray());

      System.out.println(""Initializing server Truststore...."");
      TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(""SunX509"");
      trustManagerFactory.init(trustStore);

      System.out.println(""Initializing sslContext...."");
      sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);

      return sslContext;
    }

    @Override
    public void configure(com.sun.net.httpserver.HttpsParameters params)
    {
      try
      {
        SSLContext c = SSLContext.getDefault();
        SSLEngine engine = c.createSSLEngine();
        params.setCipherSuites(engine.getEnabledCipherSuites());
        params.setProtocols(engine.getEnabledProtocols());

        SSLParameters defaultSSLParameters = c.getDefaultSSLParameters();
        defaultSSLParameters.setNeedClientAuth(true);
        params.setNeedClientAuth(true);
        params.setSSLParameters(defaultSSLParameters);
      }
      catch (Exception e)
      {
        throw new RuntimeException(e);
      }
    }
  }

  private static class MyHttpHandler implements com.sun.net.httpserver.HttpHandler
  {
    @Override
    public void handle(HttpExchange t) throws IOException
    {
      System.out.println(""handler was called"");
      String response = ""This is the response"";
      t.getResponseHeaders().add(""Content-Type"", ""text/plain; charset=utf-8"");
      t.sendResponseHeaders(200, response.length());
      OutputStream os = t.getResponseBody();
      os.write(response.getBytes(StandardCharsets.UTF_8));
      os.close();
    }
  }

  private static InputStream getResourceAsStream(String s)
  {
    return HttpsServer.class.getClassLoader().getResourceAsStream(s);
  }

  private static KeyStore readKeystore(InputStream resource)
  {
    try
    {
      KeyStore keystore = KeyStore.getInstance(""JKS"");
      keystore.load(resource, ""changeit"".toCharArray());
      return keystore;
    }
    catch (Exception e)
    {
      throw new RuntimeException(e);
    }
  }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
ignore that the method is called several times and always return null if there is no match

FREQUENCY : always


",,,,,,,,,,JDK-8307322,JDK-8307321,JDK-8307320,,,,,,,,,,,,,JDK-8273149,,,,,,JDK-8261624,,JDK-8271266,,,,,,,,,,JDK-8278560,JDK-8241479,JDK-8252789,,,,"2021-02-23 01:47;tongwan;HttpsClient.java;https://bugs.openjdk.org/secure/attachment/93315/HttpsClient.java","2021-02-23 01:47;tongwan;HttpsServer.java;https://bugs.openjdk.org/secure/attachment/93316/HttpsServer.java","2021-02-23 01:47;tongwan;localhost.jks;https://bugs.openjdk.org/secure/attachment/93317/localhost.jks","2021-02-23 01:47;tongwan;truststore.jks;https://bugs.openjdk.org/secure/attachment/93318/truststore.jks",,,,,,,,generic,,,,,,b05,8u261,,generic,,,,,,"0|i2rm5f:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,Verified,,"2021-02-21 21:36;tongwan;Requested the truststore and keystore used in the reproducer from the submitter.;;;","2021-02-23 02:52;tongwan;The observations on Windows 10:
JDK 1.8.0_261-ea-b04: Passed.
JDK 1.8.0_261-b05: Failed, the method is called several times.
JDK 11.0.6: Failed.
JDK 15: Failed.
JDK 17: Failed.;;;","2021-08-31 13:09;roboduke;Changeset: 3d657eb0
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-08-31 20:07:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3d657eb0a626e33995af5d5ddf12b26d06317962
;;;","2021-09-23 02:56;tongwan;Requested the submitter verify the fix by downloading the latest version of JDK 18 from https://jdk.java.net/18/;;;",,,,,,,,,,,,,,,,,,,,,,,,
"compiler/uncommontrap/TestDeoptOOM.java failed with ""guarantee(false) failed: wrong number of expression stack elements during deopt""",JDK-8262134,5042576,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dlong,dcubed,dcubed,2021-02-22 07:06,2022-12-07 06:58,2023-10-01 09:58,2021-12-13 19:16,11,17,18,,,,,,18,hotspot,,0,hs-comp-triaged,intermittent,investigate-UT,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,tier7,,,,,,,,,"The following test failed in the JDK17 CI:

compiler/uncommontrap/TestDeoptOOM.java

Here's a snippet from the log file:

#section:main
----------messages:(4/643)----------
command: main -XX:-BackgroundCompilation -Xmx128M -XX:+IgnoreUnrecognizedVMOptions -XX:+VerifyStack -XX:CompileCommand=exclude,compiler.uncommontrap.TestDeoptOOM::main -XX:CompileCommand=exclude,compiler.uncommontrap.TestDeoptOOM::m9_1 compiler.uncommontrap.TestDeoptOOM
reason: User specified action: run main/othervm -XX:-BackgroundCompilation -Xmx128M -XX:+IgnoreUnrecognizedVMOptions -XX:+VerifyStack -XX:CompileCommand=exclude,compiler.uncommontrap.TestDeoptOOM::main -XX:CompileCommand=exclude,compiler.uncommontrap.TestDeoptOOM::m9_1 compiler.uncommontrap.TestDeoptOOM 
Mode: othervm [/othervm specified]
elapsed time (seconds): 25.999
----------configuration:(0/0)----------
----------System.out:(45/3101)----------
CompileCommand: exclude compiler/uncommontrap/TestDeoptOOM.main bool exclude = true
CompileCommand: exclude compiler/uncommontrap/TestDeoptOOM.m9_1 bool exclude = true
OOM caught in m1
Wrong number of expression stack elements during deoptimization
  Error occurred while verifying frame 0 (0..0, 0 is topmost)
  Fabricated interpreter frame had 1 expression stack elements
  Interpreter oop map had 0 expression stack elements
  try_next_mask = 0
  next_mask_expression_stack_size = -1
  callee_size_of_parameters = 0
  callee_max_locals = 0
  top_frame_expression_stack_adjustment = 0
  exec_mode = 1
  cur_invoke_parameter_size = 1
  Thread = 0x00007f370020f940, thread ID = 19928
  Interpreted frames:
    sun.util.cldr.CLDRLocaleProviderAdapter.getTimeZoneNameProvider()Ljava/util/spi/TimeZoneNameProvider; (bci 8)
 - sp: 0x00007f36e94c61f0
 - thread: ""UsageTracker"" #14 daemon prio=5 os_prio=0 cpu=1185.46ms elapsed=16.42s tid=0x00007f370020f940 nid=0x4dd8 runnable  [0x00007f36e94c5000]
   java.lang.Thread.State: RUNNABLE
Thread: 0x00007f370020f940  [0x4dd8] State: _running _at_poll_safepoint 0
   JavaThread state: _thread_in_Java
 - frame size: 26
 - interpreter_frame -> sp: 0x00007f36e94c6248
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/deoptimization.cpp:853
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S14826/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/9f825512-2738-4ffb-b585-2f7496ecee27/runs/d564efbd-a26d-4f69-8df4-100ba92994c6/workspace/open/src/hotspot/share/runtime/deoptimization.cpp:853), pid=19879, tid=19928
#  guarantee(false) failed: wrong number of expression stack elements during deopt
#
# JRE version: Java(TM) SE Runtime Environment (17.0+11) (fastdebug build 17-ea+11-LTS-782)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+11-LTS-782, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xab228f]  Deoptimization::unpack_frames(JavaThread*, int)+0xa7f
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S206/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/bc5bc38e-d5fa-4270-98b5-37f826bef99f/runs/a4f23d3b-7a11-4690-bde6-a97d6a9d5749/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_compiler_3/scratch/2/core.19879)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S206/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/bc5bc38e-d5fa-4270-98b5-37f826bef99f/runs/a4f23d3b-7a11-4690-bde6-a97d6a9d5749/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_compiler_3/scratch/2/hs_err_pid19879.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(50/6485)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f370020f940):  JavaThread ""UsageTracker"" daemon [_thread_in_Java, id=19928, stack(0x00007f36e93c7000,0x00007f36e94c8000)]

Stack: [0x00007f36e93c7000,0x00007f36e94c8000],  sp=0x00007f36e94c41b0,  free space=1012k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xab228f]  Deoptimization::unpack_frames(JavaThread*, int)+0xa7f
v  ~DeoptimizationBlob
j  sun.util.cldr.CLDRLocaleProviderAdapter.getTimeZoneNameProvider()Ljava/util/spi/TimeZoneNameProvider;+8 java.base@17-ea
j  sun.util.locale.provider.JRELocaleProviderAdapter.getLocaleServiceProvider(Ljava/lang/Class;)Ljava/util/spi/LocaleServiceProvider;+417 java.base@17-ea
j  sun.util.locale.provider.LocaleServiceProviderPool.findProviders(Ljava/util/Locale;Z)Ljava/util/List;+68 java.base@17-ea
j  sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObjectImpl(Lsun/util/locale/provider/LocaleServiceProviderPool$LocalizedObjectGetter;Ljava/util/Locale;ZLjava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object;+53 java.base@17-ea
J 1018 c1 sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObject(Lsun/util/locale/provider/LocaleServiceProviderPool$LocalizedObjectGetter;Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-ea (11 bytes) @ 0x00007f36e9fbaee4 [0x00007f36e9fbae40+0x00000000000000a4]
j  sun.util.locale.provider.TimeZoneNameUtility.retrieveDisplayNamesImpl(Ljava/lang/String;Ljava/util/Locale;)[Ljava/lang/String;+140 java.base@17-ea
J 997 c1 sun.util.locale.provider.TimeZoneNameUtility.retrieveDisplayName(Ljava/lang/String;ZILjava/util/Locale;)Ljava/lang/String; java.base@17-ea (32 bytes) @ 0x00007f36e9fae4fc [0x00007f36e9fae4a0+0x000000000000005c]
J 990 c1 java.util.TimeZone.getDisplayName(ZILjava/util/Locale;)Ljava/lang/String; java.base@17-ea (129 bytes) @ 0x00007f36e9fab004 [0x00007f36e9faae40+0x00000000000001c4]
j  java.util.Date.toString()Ljava/lang/String;+150 java.base@17-ea
j  sun.usagetracker.UsageTrackerClient$UsageTrackerRunnable.buildMessage(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;+55 java.base@17-ea
J 713 c1 sun.usagetracker.UsageTrackerClient$UsageTrackerRunnable.run()V java.base@17-ea (131 bytes) @ 0x00007f36e9ecaec4 [0x00007f36e9eca7e0+0x00000000000006e4]
J 712 c1 java.lang.Thread.run()V java.base@17-ea (17 bytes) @ 0x00007f36e9eca17c [0x00007f36e9eca0e0+0x000000000000009c]
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe4f405]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x595
V  [libjvm.so+0xe4fc85]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*)+0x4c5
V  [libjvm.so+0xe5013c]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Thread*)+0xac
V  [libjvm.so+0xfbfb9b]  thread_entry(JavaThread*, Thread*)+0x12b
V  [libjvm.so+0x1844616]  JavaThread::thread_main_inner()+0x256
V  [libjvm.so+0x184a980]  Thread::call_run()+0x100
V  [libjvm.so+0x1536b36]  thread_native_entry(Thread*)+0x116

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~DeoptimizationBlob
j  sun.util.cldr.CLDRLocaleProviderAdapter.getTimeZoneNameProvider()Ljava/util/spi/TimeZoneNameProvider;+8 java.base@17-ea
j  sun.util.locale.provider.JRELocaleProviderAdapter.getLocaleServiceProvider(Ljava/lang/Class;)Ljava/util/spi/LocaleServiceProvider;+417 java.base@17-ea
j  sun.util.locale.provider.LocaleServiceProviderPool.findProviders(Ljava/util/Locale;Z)Ljava/util/List;+68 java.base@17-ea
j  sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObjectImpl(Lsun/util/locale/provider/LocaleServiceProviderPool$LocalizedObjectGetter;Ljava/util/Locale;ZLjava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object;+53 java.base@17-ea
J 1018 c1 sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObject(Lsun/util/locale/provider/LocaleServiceProviderPool$LocalizedObjectGetter;Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-ea (11 bytes) @ 0x00007f36e9fbaee4 [0x00007f36e9fbae40+0x00000000000000a4]
j  sun.util.locale.provider.TimeZoneNameUtility.retrieveDisplayNamesImpl(Ljava/lang/String;Ljava/util/Locale;)[Ljava/lang/String;+140 java.base@17-ea
J 997 c1 sun.util.locale.provider.TimeZoneNameUtility.retrieveDisplayName(Ljava/lang/String;ZILjava/util/Locale;)Ljava/lang/String; java.base@17-ea (32 bytes) @ 0x00007f36e9fae4fc [0x00007f36e9fae4a0+0x000000000000005c]
J 990 c1 java.util.TimeZone.getDisplayName(ZILjava/util/Locale;)Ljava/lang/String; java.base@17-ea (129 bytes) @ 0x00007f36e9fab004 [0x00007f36e9faae40+0x00000000000001c4]
j  java.util.Date.toString()Ljava/lang/String;+150 java.base@17-ea
j  sun.usagetracker.UsageTrackerClient$UsageTrackerRunnable.buildMessage(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;+55 java.base@17-ea
J 713 c1 sun.usagetracker.UsageTrackerClient$UsageTrackerRunnable.run()V java.base@17-ea (131 bytes) @ 0x00007f36e9ecaec4 [0x00007f36e9eca7e0+0x00000000000006e4]
J 712 c1 java.lang.Thread.run()V java.base@17-ea (17 bytes) @ 0x00007f36e9eca17c [0x00007f36e9eca0e0+0x000000000000009c]
v  ~StubRoutines::call_stub",,,,,,,,,,JDK-8279553,JDK-8279447,JDK-8280092,JDK-8279850,JDK-8278875,JDK-8290378,JDK-8290386,,,,,,,,,,,,,,,,,,,,,JDK-8270795,JDK-8298273,,,,,JDK-8049252,JDK-8278758,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2ro0z:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-02-22 23:51;thartmann;ILW = Assert during deoptimization, intermittent with single test, no workaround but disable compilation of affected method = HLM = P3;;;","2021-07-07 17:40;dlong;exec_mode = 1 means Unpack_exception
sun.util.cldr.CLDRLocaleProviderAdapter.getTimeZoneNameProvider()Ljava/util/spi/TimeZoneNameProvider; at bci 8 is an invokedynamic.

This could be a flaw in the -XX:+VerifyStack logic.  Or maybe we don't handle correctly an exception and deopt when resolving the invokedynamic and calling the BSM.;;;","2021-07-08 18:52;dlong;I can reproduce this in gdb.  In a C1-compiled method that performs an invokedynamic, I force SystemDictionary::invoke_bootstrap_method to throw an InternalError, then force the caller frame to be deoptimized when returning from the C1 load_appendix_patching patching stub.

I don't see how the getTimeZoneNameProvider frame got deoptimized in the reported failure, however.;;;","2021-12-13 19:16;roboduke;Changeset: 32139c1a
Author:    Dean Long <dlong@openjdk.org>
Date:      2021-12-14 03:16:17 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/32139c1a8aae51c0869f41be57580ff4463913d2
;;;","2022-01-10 06:00;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
Risk: a C2 change we should take. 
Clean backport.
Test passes. SAP nightly tests passed.;;;","2022-01-10 06:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/73
Date: 2022-01-10 14:00:21 +0000;;;","2022-01-14 04:50;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
A fix we should have, too.
I had to do a trivial resolve.
Test passes. SAP nightly testing passed.;;;","2022-01-14 05:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/763
Date: 2022-01-14 12:49:52 +0000;;;","2022-07-15 07:29;yan;Fix request (15u, 13u):

clean backport for parity with major releases. 
With debug builds, hotspot/jtreg/runtime all pass.
Requiring a follow-up for the test in the release build.
;;;","2022-07-15 07:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/233
Date: 2022-07-15 14:31:28 +0000;;;","2022-07-15 08:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/370
Date: 2022-07-15 15:11:07 +0000;;;",,,,,,,,,,,,,,,,,
"[lworld] C2 compilation fails with assert ""can not use dead node""",JDK-8262129,5042567,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2021-02-22 05:22,2021-02-23 00:04,2023-10-01 09:58,2021-02-23 00:04,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S15055/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/726f12e0-d56e-495e-8a11-5aa0a469f28b/runs/9bc52041-a4ab-4507-90a5-24dfa44b8c82/workspace/open/src/hotspot/share/opto/node.cpp:373), pid=10927, tid=10942
#  assert(((n0) == __null || !VerifyIterativeGVN || !((n0)->is_dead()))) failed: can not use dead node

Current CompileTask:
C2:  38961 2545    b  4       java.lang.invoke.Invokers$Holder::invokeExact_MT (32 bytes)

Stack: [0x00007f43d7eff000,0x00007f43d8000000],  sp=0x00007f43d7ffb330,  free space=1008k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x156b6b4]  Node::Node(Node*, Node*)+0x2b4
V  [libjvm.so+0x1390c51]  PhaseMacroExpand::expand_mh_intrinsic_return(CallStaticJavaNode*)+0x1f1
V  [libjvm.so+0x139ce24]  PhaseMacroExpand::expand_macro_nodes()+0xdd4
V  [libjvm.so+0xa4a65f]  Compile::Optimize()+0x171f
V  [libjvm.so+0xa4c483]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1a53
V  [libjvm.so+0x861c88]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f8
V  [libjvm.so+0xa5c461]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xea1
V  [libjvm.so+0xa5d0e8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x19216d6]  JavaThread::thread_main_inner()+0x256
V  [libjvm.so+0x1927b60]  Thread::call_run()+0x100
V  [libjvm.so+0x15ea9d6]  thread_native_entry(Thread*)+0x116
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rnyz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] C1's ValueNumbering optimization does not correctly handle delayed accesses,JDK-8262128,5042566,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2021-02-22 05:09,2021-02-22 22:56,2023-10-01 09:58,2021-02-22 22:56,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c1,lw3,lworld,,,,,,,,,,,,,,,,,,,,"#  Internal Error (/oracle/valhalla/open/src/hotspot/cpu/x86/macroAssembler_x86.cpp:879), pid=74018, tid=74019
#  fatal error: DEBUG MESSAGE: exact klass and actual klass differ

Current thread (0x00007fc4a80262f0):  JavaThread ""main"" [_thread_in_Java, id=74019, stack(0x00007fc4aee1e000,0x00007fc4aef1f000)]

Stack: [0x00007fc4aee1e000,0x00007fc4aef1f000],  sp=0x00007fc4aef1d7e0,  free space=1021k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x13af480]  MacroAssembler::debug64(char*, long, long*)+0x40
J 259 c1 MainClass.method3(I)I (59 bytes) @ 0x00007fc49960084c [0x00007fc499600420+0x000000000000042c]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262136,,,,,,JDK-8253113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rnyr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] Shenandoah-specific variant of TestReferenceRefersTo,JDK-8262122,5042556,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2021-02-22 03:45,2021-03-10 16:32,2023-10-01 09:58,2021-03-04 09:04,17,,,,,,,,17,hotspot,,0,gc-shenandoah,redhat-interest,,,,,,,,,,,,,,,,,,,,,"Before JDK-8262049, the test TestReferenceRefersTo.java has been failing with I-U mode, because it asserted that weak references would not be cleared when accessed during mark. JDK-8262049 split up the test into a generic part that removed the offending test, and a non-Shenandoah part that contains the test.
I think it would be useful to add the full test with Shenandoah runners under gc/shenandoah to include it in hotspot_gc_shenandoah runs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262049,JDK-8261473,,,,,JDK-8263040,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rnwj:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-03-04 09:04;roboduke;Changeset: 222a17ef
Author:    Roman Kennke <rkennke@openjdk.org>
Date:      2021-03-04 17:03:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/222a17ef
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[11u] Redo 8244287: JFR: Methods samples have line number 0,JDK-8262121,5042554,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbachorik,goetz,goetz,2021-02-22 03:32,2023-08-04 15:34,2023-10-01 09:58,2021-03-18 04:12,,,,,,,,,11.0.12,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,,,,"The downport of 8244287 to 11 was backed out after it caused crashes.

Redo the change, also adding a constructor that takes method and lineno.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8253813,JDK-8244287,,,,,JDK-8313802,,,,,,,,,,,,,,,,,,,,,,,,11.0.9,,,,,,,,"0|i2rnw3:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-03-09 08:57;goetz;Hi Jaroslav,

I already sent a webrev to fix this. 
Unfortunately, the test fails on some platforms. I did not have the time to look into
that, that's why it is stalled.
http://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-February/005079.html

jdk/jfr/event/sampling/TestStackFrameLineNumbers.java
java.lang.Exception: No line number information found
	at jdk.jfr.event.sampling.TestStackFrameLineNumbers.main(TestStackFrameLineNumbers.java:82)

It happens on all platforms, but only quite sporadic, maybe every other 20th run.

Feel free to take over ...;;;","2021-03-10 03:37;jbachorik;Hi Goetz,

I checked the test and the failure is caused by missing execution samples. Parking for ~1s (even with short intermediary steps) might not generated enough 'load' to produce any execution samples. When I added a busy dummy code instead of parking (doing some random iterations of random numbers accumulation) the test started passing 100% (so far 100 consequent test runs without a failure). 

While looking at the test failure cause I came to wonder why JfrStackTrace::record_safe() is not using the same 'best effort' to retrieve the line number info. It seems that in the worst case the information will not be available and we end up without line number info - but at least we would have consistent data between those two methods capturing stack traces. 

EDIT: Got a response from ~mgronlun 
{block}
Line number information is kept outside of the hash and calculated lazyily for the synchronous case because method->line_number_from_bci() is very slow. We try to avoid calculating it as long as possible; you can see JfrStackTraceRepository::add() reject a new trace if lineno info is not available, and only at this time will it be resolved.
{block}

So, my suggestion is invalid and the change is good as it is.;;;","2021-03-18 04:12;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u-dev/rev/a75d92bcfbf3
User:  goetz
Date:  2021-03-18 11:07:48 +0000
;;;","2021-05-05 05:09;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u/rev/a75d92bcfbf3
User:  goetz
Date:  2021-05-05 12:03:09 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,
"jextract crashes with javac compilation error ""class u is already defined""",JDK-8262117,5042545,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-02-22 03:09,2021-02-23 03:44,2023-10-01 09:58,2021-02-23 03:44,repo-panama,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"Many corpus tests involving X11 headers, result in jextract crash with error message ""class u is already defined"" 

libx11-dev's /usr/include/X11/Xlibint.h

WARNING: Using incubator modules: jdk.incubator.foreign, jdk.incubator.jextract
WARNING: skipping .__clang_max_align_nonce2 because of unsupported type usage: long double
WARNING: skipping strtold because of unsupported type usage: long double
WARNING: skipping qecvt because of unsupported type usage: long double
WARNING: skipping qfcvt because of unsupported type usage: long double
WARNING: skipping qgcvt because of unsupported type usage: long double
WARNING: skipping qecvt_r because of unsupported type usage: long double
WARNING: skipping qfcvt_r because of unsupported type usage: long double
In memory compilation failed: warning: using incubating module(s): jdk.incubator.foreign
Xlibint_h.java:9: error: cannot find symbol
public final class Xlibint_h extends Xlibint_h_1 {
                                     ^
  symbol: class Xlibint_h_1
Xlibint_h.java:27778: error: class u is already defined in class _xEvent$6
            public static class u {
                          ^
Xlibint_h.java:31209: error: class u is already defined in class _xEvent$6
                public static class u {
                              ^
3 errors
1 warning


libafterimage-dev's 

/usr/include/libAfterImage/afterimage.h
WARNING: Using incubator modules: jdk.incubator.jextract, jdk.incubator.foreign
WARNING: skipping .__clang_max_align_nonce2 because of unsupported type usage: long double
WARNING: Layout size not available for sys_errlist
WARNING: varargs in callbacks is not supported: stream_func
In memory compilation failed: warning: using incubating module(s): jdk.incubator.foreign
afterimage_h.java:9: error: cannot find symbol
public final class afterimage_h extends afterimage_h_5 {
                                        ^
  symbol: class afterimage_h_5
afterimage_h.java:28732: error: class u is already defined in class _xEvent$6
            public static class u {
                          ^
afterimage_h.java:32163: error: class u is already defined in class _xEvent$6
                public static class u {
                              ^
3 errors
1 warning

/usr/include/libAfterImage/asim_afterbase.h


WARNING: Using incubator modules: jdk.incubator.foreign, jdk.incubator.jextract
WARNING: skipping .__clang_max_align_nonce2 because of unsupported type usage: long double
WARNING: Layout size not available for sys_errlist
WARNING: varargs in callbacks is not supported: stream_func
In memory compilation failed: warning: using incubating module(s): jdk.incubator.foreign
afterbase_h.java:9: error: cannot find symbol
public final class afterbase_h extends afterbase_h_4 {
                                       ^
  symbol: class afterbase_h_4
afterbase_h.java:28732: error: class u is already defined in class _xEvent$6
            public static class u {
                          ^
afterbase_h.java:32163: error: class u is already defined in class _xEvent$6
                public static class u {
                              ^
3 errors
1 warning


/usr/include/libAfterImage/xwrap.h

WARNING: Using incubator modules: jdk.incubator.jextract, jdk.incubator.foreign
WARNING: skipping .__clang_max_align_nonce2 because of unsupported type usage: long double
In memory compilation failed: warning: using incubating module(s): jdk.incubator.foreign
xwrap_h.java:9: error: cannot find symbol
public final class xwrap_h extends xwrap_h_3 {
                                   ^
  symbol: class xwrap_h_3
xwrap_h.java:28732: error: class u is already defined in class _xEvent$6
            public static class u {
                          ^
xwrap_h.java:32163: error: class u is already defined in class _xEvent$6
                public static class u {
                              ^
3 errors
1 warning

/usr/include/libAfterImage/afterbase.h

WARNING: Using incubator modules: jdk.incubator.foreign, jdk.incubator.jextract
WARNING: skipping .__clang_max_align_nonce2 because of unsupported type usage: long double
WARNING: Layout size not available for sys_errlist
WARNING: varargs in callbacks is not supported: stream_func
In memory compilation failed: warning: using incubating module(s): jdk.incubator.foreign
afterbase_h.java:9: error: cannot find symbol
public final class afterbase_h extends afterbase_h_4 {
                                       ^
  symbol: class afterbase_h_4
afterbase_h.java:28732: error: class u is already defined in class _xEvent$6
            public static class u {
                          ^
afterbase_h.java:32163: error: class u is already defined in class _xEvent$6
                public static class u {
                              ^
3 errors
1 warning

/usr/include/libAfterBase/audit.h

WARNING: Using incubator modules: jdk.incubator.foreign, jdk.incubator.jextract
WARNING: Layout size not available for sys_errlist
WARNING: skipping .__clang_max_align_nonce2 because of unsupported type usage: long double
In memory compilation failed: warning: using incubating module(s): jdk.incubator.foreign
audit_h.java:9: error: cannot find symbol
public final class audit_h extends audit_h_3 {
                                   ^
  symbol: class audit_h_3
audit_h.java:29483: error: class u is already defined in class _xEvent$6
            public static class u {
                          ^
audit_h.java:32914: error: class u is already defined in class _xEvent$6
                public static class u {
                              ^
3 errors
1 warning

/usr/include/libAfterBase/ashash.h

WARNING: Using incubator modules: jdk.incubator.jextract, jdk.incubator.foreign
WARNING: skipping .__clang_max_align_nonce2 because of unsupported type usage: long double
In memory compilation failed: warning: using incubating module(s): jdk.incubator.foreign
ashash_h.java:9: error: cannot find symbol
public final class ashash_h extends ashash_h_3 {
                                    ^
  symbol: class ashash_h_3
ashash_h.java:28732: error: class u is already defined in class _xEvent$6
            public static class u {
                          ^
ashash_h.java:32163: error: class u is already defined in class _xEvent$6
                public static class u {
                              ^
3 errors
1 warning

/usr/include/libAfterBase/xwrap.h

WARNING: Using incubator modules: jdk.incubator.jextract, jdk.incubator.foreign
WARNING: skipping .__clang_max_align_nonce2 because of unsupported type usage: long double
In memory compilation failed: warning: using incubating module(s): jdk.incubator.foreign
xwrap_h.java:9: error: cannot find symbol
public final class xwrap_h extends xwrap_h_2 {
                                   ^
  symbol: class xwrap_h_2
xwrap_h.java:28732: error: class u is already defined in class _xEvent$6
            public static class u {
                          ^
xwrap_h.java:32163: error: class u is already defined in class _xEvent$6
                public static class u {
                              ^
3 errors
1 warning
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,linux,,,,,,"0|i2rnu3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-02-22 03:26;mcimadamore;This code reproduces the issue

union {
   struct {
      union {
         struct { int x; } inner;
      } u;
   } outer;
} u;;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Crash on graphics card switch when Metal API validation enabled,JDK-8262115,5042543,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,aghaisas,aghaisas,aghaisas,2021-02-22 02:54,2021-02-23 09:41,2023-10-01 09:58,2021-02-22 03:08,,,,,,,,,internal,client-libs,,0,code-review,critical,lanai,sn_87,,,,,,,,,,,,,,,,,,,This bug fixes first 3 errors observed during testing of JDK-8261714.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261714,JDK-8262254,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,internal,,os_x,,,,,,"0|i2rntn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DST starts from incorrect time in 2038,JDK-8262110,5042533,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,naoto,shadowbug,shadowbug,2021-02-22 01:58,2021-05-12 07:34,2023-10-01 09:58,2021-03-26 10:14,17,8,,,,,,,17,core-libs,,0,bugdb_32536986,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok-next,jdk16u-fix-yes,licbug,sustaining,,,,,,,,,,,"The customer reports that in 2038, DST should start from 2038/03/14 AM 2:00.  However, all JDK versions seem to have 2038/03/14 AM 4:00 as the starting time for the year 2038 and later.

Reproducer:

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;

public class DSTTest {

       public static void main(String[] args) {
               try {
                       TimeZone timeZone =
TimeZone.getTimeZone(""America/New_York"");
                       SimpleDateFormat sdf = new
SimpleDateFormat(""yyyy/MM/dd HH:mm:ss:SSS"");
                       Long time = 0L;

                       sdf.setTimeZone(timeZone);
                       time = sdf.parse(""2037/3/8 01:30:00:000"").getTime();
                       System.out.println(sdf.format(new Date(time)));
                       time = sdf.parse(""2037/3/8 02:30:00:000"").getTime();
                       System.out.println(sdf.format(new Date(time)));
                       time = sdf.parse(""2037/3/8 03:30:00:000"").getTime();
                       System.out.println(sdf.format(new Date(time)));
                       time = sdf.parse(""2037/3/8 04:30:00:000"").getTime();
                       System.out.println(sdf.format(new Date(time)));

                       time = sdf.parse(""2038/3/14 01:30:00:000"").getTime();
                       System.out.println(sdf.format(new Date(time)));
                       time = sdf.parse(""2038/3/14 02:30:00:000"").getTime();
                       System.out.println(sdf.format(new Date(time)));
                       time = sdf.parse(""2038/3/14 03:30:00:000"").getTime();
                       System.out.println(sdf.format(new Date(time)));
                       time = sdf.parse(""2038/3/14 04:30:00:000"").getTime();
                       System.out.println(sdf.format(new Date(time)));

               } catch(ParseException e) {
                       System.err.println(e.getMessage());
               }
       }
}


Expected:
2037/03/08 01:30:00:000
2037/03/08 03:30:00:000
2037/03/08 03:30:00:000
2037/03/08 04:30:00:000
2038/03/14 01:30:00:000
2038/03/14 03:30:00:000
2038/03/14 03:30:00:000
2038/03/14 04:30:00:000

Actual:
2037/03/08 01:30:00:000
2037/03/08 03:30:00:000
2037/03/08 03:30:00:000
2037/03/08 04:30:00:000
2038/03/14 01:30:00:000
2038/03/14 02:30:00:000
2038/03/14 02:30:00:000
2038/03/14 04:30:00:000
",,,,,,,,,,JDK-8264904,JDK-8264906,JDK-8264979,JDK-8264905,JDK-8265193,JDK-8265664,JDK-8265731,JDK-8267007,JDK-8265289,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8073446,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rnrf:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2021-03-01 10:06;naoto;Not observed with java.time:
```
jshell> ZonedDateTime.of(2038, 3, 14, 1, 30, 0, 0, z)
$59 ==> 2038-03-14T01:30-05:00[America/New_York]
jshell> ZonedDateTime.of(2038, 3, 14, 2, 30, 0, 0, z)
$60 ==> 2038-03-14T03:30-04:00[America/New_York]
```;;;","2021-03-23 20:52;naoto;STD->DST transition logic (beyond year 2037) is incorrect.;;;","2021-03-26 10:14;roboduke;Changeset: 7284f013
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-03-26 17:13:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7284f013
;;;","2021-04-08 03:39;kravikumar;Fix Request(16u):

Please approve pushing the change to JDK 16u. This is a long-standing issue in the Calendar API where the DST transition logic beyond the year 2037 was incorrect. The fix is simple and the impact is low. Passed regression;;;","2021-04-14 00:30;yan;Fix request (15u):

the patch applies seamlessly. ;;;","2021-04-14 05:17;zgu;Fix Request (11u)

I would like to backport this patch to 11u for parity with Oracle 11.0.12.

11u changes have been reviewed here: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-April/005718.html;;;","2021-04-15 07:45;yan;Fix request (13u):

old copyright year differs in 13u code! Other than that, no surprises.;;;",,,,,,,,,,,,,,,,,,,,,
SimpleDateFormat formatting broken for sq_MK Locale,JDK-8262108,5042511,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jpai,webbuggrp,webbuggrp,2021-02-21 08:57,2021-09-23 07:05,2023-10-01 09:58,2021-04-15 23:46,16,17,,,,,,,17,core-libs,,0,16ea,additional-information-not-received,apache-commons-found,dcsaw,fossbug,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Microsoft Windows [Version 10.0.19041.746]

openjdk version ""16"" 2021-03-16
OpenJDK Runtime Environment (build 16+36-2231)
OpenJDK 64-Bit Server VM (build 16+36-2231, mixed mode, sharing)

Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)
Maven home: C:\Java\apache-maven-3.6.3\bin\..
Java version: 16, vendor: Oracle Corporation, runtime: C:\Program Files\Java\openjdk\jdk-16
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows 10"", version: ""10.0"", arch: ""amd64"", family: ""windows""

A DESCRIPTION OF THE PROBLEM :
Trying to format and parse back a Date using SimpleDateFormat and the sq_MK Locale creates the wrong Date.


REGRESSION : Last worked in version 15.0.2

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
git clone https://github.com/apache/commons-lang.git
mvn clean test -Dtest=FastDateParserTest -V


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Not a unit test failure.
ACTUAL -
[ERROR] Failures:
[ERROR]   FastDateParserTest.testParses:529->validateSdfFormatFdpParseEquality:696 Locale: 'sq_MK', parse: 'mb.K./2000/shkurt/0010/0012/0000/00/e paradites/e enjte', format: 'GGGG/yyyy/MMMM/dddd/hhhh/mmmm/ss/aaaa/EEEE', time zone: 'America/New_York' ==> expected: <Thu Feb 10 00:00:00 EST 2000> but was: <Sat Feb 12 12:00:00 EST 2000>


---------- BEGIN SOURCE ----------
Class: https://github.com/apache/commons-lang.git
https://github.com/apache/commons-lang/blob/master/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java
Git repo: https://github.com/apache/commons-lang.git
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
None.


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8247781,,,,,,,,,,,,,,,,,,,,,,,b25,16,,,,,,,,"0|i2rnmj:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,Not verified,,"2021-02-22 00:54;tongwan;The observations on Windows 10:
JDK 11: Passed.
JDK 16ea+24: Passed.
JDK 16ea+25: Failed, expected: <Thu Feb 10 13:00:00 CST 2000> but was: <Sun Feb 13 01:00:00 CST 2000>
JDK 17ea+6: Failed.;;;","2021-02-22 15:02;naoto;Looks like this test case is failing from JDK16 b25, in which the day periods are supported (JDK-8247781). I briefly looked at the test case, and the reason the test is failing is that the method FastDateParser.parse() seems to return an incorrect date. Since the method is in the user's library, asking for more info as to why parsing is failing.;;;","2021-02-23 03:13;tongwan;Requested the information for above question from the submitter.;;;","2021-04-13 04:24;jpai;Reopening this since I now have additional details that helps reproduce this issue. 

I looked into this issue in the commons-lang project which still fails against the Java 16 GA version (as well as upstream OpenJDK master branch).

I have now been able to narrow this down to a simple (jtreg) testcase which reproduces the problem. Based on what I have been able to understand, looking at the code in the commons-lang project (specifically the FastDateParser class), IMO it exposes a bug in the implementation of java.util.Calendar.getDisplayNames(...) in the JDK:

public Map<String, Integer> getDisplayNames(int field, int style, Locale locale)


The introduction of day period support in recent versions of Java as part of https://bugs.openjdk.java.net/browse/JDK-8247781 seems to have introduced this bug. The Calendar.getDisplayNames() when passed a field of the Calendar is expected to return a Map which contains the display name as the key and a (valid) field value corresponding to that field. However, what's happening is that this method is now returning invalid (integer) values for the Calendar.AM_PM field where day period data is present. The result of this is that, code of the following form in the commons-lang library, results in setting incorrect value in the calendar instance for the AM_PM field:

	// find display names for AM_PM field
	final Map<String, Integer> displayNames = calendar.getDisplayNames(Calendar.AM_PM, Calendar.ALL_STYLES, locale);
	....
	String n = // choose one of the display names from that returned map, essentially when parsing a string to a date
	int fieldVal = displayNames.get(n);
	// set the AM_PM field value on the calendar
	calendar.set(Calendar.AM_PM, fieldVal);

In the specific test in commons-lang where this is failing, the locale is ""sq"" and the display name is ""e paradites"". This should have translated into a field value == Calendar.AM == 0, instead the integer returned by the Calendar.getDisplayNames for this combination is 5 (which is an invalid value for the Calendar.AM_PM field; only 0 and 1 are valid values for this field). Once the calendar is set with this incorrect AM_PM field value, a subsequent Calendar.getTime() call in that library code ends up returning the incorrect/wrong/unexpected date which is what causes the test failure.

A simple jtreg test which reproduces this issue with Calendar.getDisplayNames(...) for Calendar.AM_PM field is follows:

import org.testng.Assert;
import org.testng.annotations.Test;

import java.util.Calendar;
import java.util.Locale;
import java.util.Map;

/**
 * @test
 * @bug 8262108
 * @summary Verify the results returned by Calendar.getDisplayNames() API
 * @comment Locale providers: COMPAT,SPI
 * @run testng/othervm -Djava.locale.providers=COMPAT,SPI CalendarDisplayNamesTest
 * @comment Locale providers: CLDR
 * @run testng/othervm -Djava.locale.providers=CLDR CalendarDisplayNamesTest
 */
public class CalendarDisplayNamesTest {

    @Test
    public void testAM_PMDisplayNameValues() {
        final int[] styles = new int[]{Calendar.ALL_STYLES, Calendar.SHORT_FORMAT, Calendar.LONG_FORMAT,
                Calendar.SHORT_STANDALONE, Calendar.LONG_STANDALONE, Calendar.SHORT, Calendar.LONG};
        for (final Locale locale : Locale.getAvailableLocales()) {
            for (final int style : styles) {
                final Calendar cal = Calendar.getInstance();
                cal.setLenient(false);
                final Map<String, Integer> names = cal.getDisplayNames(Calendar.AM_PM, style, locale);
                if (names == null) {
                    continue;
                }
                for (final Integer fieldValue : names.values()) {
                    Assert.assertTrue(fieldValue == Calendar.AM || fieldValue == Calendar.PM,
                            ""Invalid field value "" + fieldValue + "" for calendar field AM_PM, in locale ""
                                    + locale + "" with style "" + style);
                }
            }
        }
    }
}

I've a potential fix for this issue which I've verified locally against the commons-lang project as well as some existing Calendar testcases in the OpenJDK upstream repo. I'll open a PR shortly with the necessary details.
;;;","2021-04-15 23:46;roboduke;Changeset: 64e21307
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2021-04-16 06:45:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/64e21307
;;;","2021-09-23 07:05;tongwan;No response from the submitter.;;;",,,,,,,,,,,,,,,,,,,,,,
[lworld] Runtime should automagically have primitive classes implement PrimitiveObject,JDK-8262104,5042530,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dsimms,sadayapalam,sadayapalam,2021-02-21 22:51,2021-02-24 21:35,2023-10-01 09:58,2021-02-24 21:35,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,,,,,,"Through JDK-8261782, javac has added support for PrimitiveObject  top type during compile time. 

The specification is available here:
https://openjdk.java.net/jeps/8251554

This ticket is for VM/runtime to implicitly have primitive classes implement PrimitiveObject interface.

Please note: when such support is added, the langtools test:
test/langtools/tools/javac/valhalla/lworld-values/InstanceOfTopTypeTest.java

will start failing. Suitable amend the test.  ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261782,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rnqr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jcmd VM.metaspace should report unlimited size if MaxMetaspaceSize isn't specified,JDK-8262099,5042524,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,ddong,ddong,2021-02-21 19:16,2021-08-11 23:17,2023-10-01 09:58,2021-02-24 18:09,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"When MaxMetaspaceSize is not specified, it would set to max_uintx, jcmd VM.metaspace reports metaspace summary information as follows:

$ ./jcmd <pid> VM.metaspace | grep MaxMetaspaceSize
MaxMetaspaceSize: 17179869184.00 GB

Actually this is a bug, the expected output should be:

MaxMetaspaceSize: unlimited

The root cause of the problem is that the MaxMetaspaceSize rounding performed during arguments parsing is inconsistent with the rounding check in print_settings(metaspaceRerporter.cpp).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262326,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rnpf:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-02-24 18:09;roboduke;Changeset: 3a0d6a64
Author:    Yang Yi <qingfeng.yy@alibaba-inc.com>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2021-02-25 02:08:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3a0d6a64
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve CompilerConfig ergonomics to fix a VM crash after JDK-8261229,JDK-8262097,5042519,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-02-21 15:13,2021-03-01 16:38,2023-10-01 09:58,2021-02-22 15:44,17,,,,,,,,17,hotspot,,0,oracle-triage-11,oracle-triage-17,tencent-interest,,,,,,,,,,,,,,,,,,,,"
* Reproduce

1. Build JVM without C2: bash configure --with-jvm-features=-compiler2; make images
2. java -XX:-TieredCompilation -version


* Symptom
```
   #
   # A fatal error has been detected by the Java Runtime Environment:
   #
   #  Internal Error (/home/jvm/jdk/src/hotspot/share/compiler/compileBroker.cpp:1360), pid=22265, tid=22266
   #  assert(comp != __null) failed: Ensure we have a compiler
   #
  

   Current thread (0x00007f6fa4024640):  JavaThread ""main"" [_thread_in_vm, id=22266, stack(0x00007f6fabc7e000,0x00007f6fabd7f000)]
  
   Stack: [0x00007f6fabc7e000,0x00007f6fabd7f000],  sp=0x00007f6fabd7a720,  free space=1009k
   Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
   V  [libjvm.so+0x44fb14]  CompileBroker::compile_method(methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, Thread*)+0xc4
   V  [libjvm.so+0x4409eb]  CompilationPolicy::compile(methodHandle const&, int, CompLevel, Thread*)+0x18b
   V  [libjvm.so+0x442fde]  CompilationPolicy::event(methodHandle const&, methodHandle const&, int, int, CompLevel, CompiledMethod*, Thread*)+0x3ce
   V  [libjvm.so+0x315bbb]  Runtime1::counter_overflow(JavaThread*, int, Method*)+0x20b
   v  ~RuntimeStub::counter_overflow Runtime1 stub
   J 2 c1 java.lang.Object.<init>()V java.base (1 bytes) @ 0x00007f6f995eb803 [0x00007f6f995eb780+0x0000000000000083]
   j  java.util.HashMap$Node.<init>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)V+1 java.base
   j  java.util.HashMap.newNode(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$Node;+9 java.base
   j  java.util.HashMap.putVal(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;+56 java.base
   j  java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+9 java.base
   j  jdk.internal.module.ModuleHashes$Builder.hashForModule(Ljava/lang/String;[B)Ljdk/internal/module/ModuleHashes$Builder;+6 java.base
   j  jdk.internal.module.SystemModules$default.moduleHashes()[Ljdk/internal/module/ModuleHashes;+7918 java.base
   j  jdk.internal.module.SystemModuleFinders.of(Ljdk/internal/module/SystemModules;)Ljava/lang/module/ModuleFinder;+15 java.base
   j  jdk.internal.module.ModuleBootstrap.boot2()Ljava/lang/ModuleLayer;+252 java.base
   j  jdk.internal.module.ModuleBootstrap.boot()Ljava/lang/ModuleLayer;+64 java.base
   j  java.lang.System.initPhase2(ZZ)I+0 java.base
   v  ~StubRoutines::call_stub
   V  [libjvm.so+0x743c7f]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x57f
   V  [libjvm.so+0x745bbc]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*)+0x19c
   V  [libjvm.so+0xf885e5]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x775
   V  [libjvm.so+0x876749]  JNI_CreateJavaVM+0x99
   C  [libjli.so+0x3e1a]  JavaMain+0x8a
   C  [libjli.so+0x7769]  ThreadJavaMain+0x9
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261229,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rnob:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-02-22 15:44;roboduke;Changeset: f2bde05e
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-02-22 23:43:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f2bde05e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Vector API fails to work due to VectorShape initialization exception,JDK-8262096,5042517,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-02-21 15:07,2021-03-10 16:30,2023-10-01 09:58,2021-03-02 15:30,16,17,,,,,,,17,hotspot,,0,oracle-triage-11,oracle-triage-17,tencent-interest,vectorapi,,,,,,,,,,,,,,,,,,,"* Symptom
```
Exception in thread ""main"" java.lang.ExceptionInInitializerError
        at Test.<clinit>(Test.java:4)
Caused by: java.lang.UnsupportedOperationException: shape unavailable for lane type: double
        at jdk.incubator.vector/jdk.incubator.vector.VectorShape.computePreferredShape(VectorShape.java:252)
        at jdk.incubator.vector/jdk.incubator.vector.VectorShape.preferredShape(VectorShape.java:240)
        at jdk.incubator.vector/jdk.incubator.vector.VectorSpecies.ofPreferred(VectorSpecies.java:368)
        at jdk.incubator.vector/jdk.incubator.vector.DoubleVector.<clinit>(DoubleVector.java:3662)
        ... 1 more
```

* Reproduce
Run:
  java -XX:MaxVectorSize=8 -ea -esa --add-modules=jdk.incubator.vector Test
```
   import jdk.incubator.vector.*;
  
   public class Test {
       static final VectorSpecies<Double> SPECIES = DoubleVector.SPECIES_64;
       static double[] a = new double[64];
       static double[] r = new double[64];
  
       static void test() {
       }
  
       public static void main(String[] args) {
           DoubleVector av = DoubleVector.fromArray(SPECIES, a, 0);
           av.lanewise(VectorOperators.ABS).intoArray(r, 0);
       }
   }
```

It also fails to work if C2 is disabled.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rnnv:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-03-02 15:30;roboduke;Changeset: 40bdf52e
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-03-02 23:29:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/40bdf52e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in Flow$FlowAnalyzer.visitApply: Cannot invoke getThrownTypes because tree.meth.type is null,JDK-8262095,5042513,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vromero,cushon,cushon,2021-02-21 12:04,2022-02-20 22:39,2023-10-01 09:58,2021-08-31 08:41,13,15,16,17,,,,,18,tools,,0,azul-interest,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,regression,,,,,,,,,,,,,,,,,,"There have been a handful of other bugs involving NPEs in Flow$FlowAnalyzer.visitApply, but this appears to be a distinct issue that still reproduces with the latest JDK 16 EA:

```
import static java.util.Map.Entry.comparingByKey;

import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

public class T {

  void f(Stream<Map.Entry<Long, List<String>>> stream) {
    stream
        .sorted(
            comparingByKey()
                .thenComparing((Map.Entry<Long, List<String>> e) -> e.getValue().hashCode()))
        .count();
  }
}
```

```
javac -fullversion T.java
javac full version ""16-ea+34-2216""
An exception has occurred in the compiler (16-ea). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.NullPointerException: Cannot invoke ""com.sun.tools.javac.code.Type.getThrownTypes()"" because ""tree.meth.type"" is null
        at jdk.compiler/com.sun.tools.javac.comp.Flow$FlowAnalyzer.visitApply(Flow.java:1383)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1745)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:440)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.visitSelect(TreeScanner.java:316)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCFieldAccess.accept(JCTree.java:2273)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:440)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$FlowAnalyzer.visitApply(Flow.java:1381)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1745)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:440)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.visitExec(TreeScanner.java:219)
```",,,,,,,,,,JDK-8274904,,,,,,,,,,,,,,,,,,,,,JDK-8267439,JDK-8278038,JDK-8273863,JDK-8274626,,,JDK-8282161,,,,,,JDK-8205418,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rnmz:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-11 04:00;sadayapalam;See another report with a similar stack trace here: 
https://mail.openjdk.java.net/pipermail/compiler-dev/2021-June/017227.html;;;","2021-06-15 12:50;vromero;similar to JDK-8233655;;;","2021-08-24 13:12;vromero;this code works:

import static java.util.Map.Entry.comparingByKey;

import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

public class Test_8262095 {
  void f(Stream<Map.Entry<Long, List<String>>> stream) {
    stream
        .sorted(
            Map.Entry.<Long, List<String>>comparingByKey()
                .thenComparing((Map.Entry<Long, List<String>> e) -> e.getValue().hashCode()))
        .count();
  }
}

so here javac basically don't have enough info to determine the bounds for type variable `V` in Map.Entry, this is because comparingByKey() needs to be attributed as a standalone expression. Still javac should fail nicely with a compiler error.;;;","2021-08-24 13:46;vromero;javac was able to issue an error in 8-pool, 9, 10, 11;;;","2021-08-24 22:29;vromero;this issue seems to have been caused by the fix for: JDK-8205418;;;","2021-08-31 08:41;roboduke;Changeset: 75d987a0
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2021-08-31 15:40:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/75d987a0dd6f8cc41808f7ba566e914817e465dc
;;;","2021-10-05 03:03;evergizova;Fix Request (17u)
I'd like to backport this fix to 17u. It prevents NPE in javac.
The patch applies cleanly.
Tested with langtools tests, new test fails without the patch, passes with it.;;;",,,,,,,,,,,,,,,,,,,,,
Handshake timeout scaled wrong,JDK-8262094,5042512,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rehn,rehn,rehn,2021-02-21 10:31,2021-03-01 16:39,2023-10-01 09:58,2021-02-23 04:56,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"Parameter HandshakeTimeout is in milliseconds.
Internally we use nanoseconds.
HandshakeTimeout must be scaled to nanoseconds.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rnmr:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-02-23 04:56;roboduke;Changeset: 9d9bedd0
Author:    Robbin Ehn <rehn@openjdk.org>
Date:      2021-02-23 12:55:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9d9bedd0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/util/concurrent/tck/JSR166TestCase.java failed ""assert(false) failed: unexpected node""",JDK-8262093,5042510,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,kvn,dcubed,dcubed,2021-02-21 08:27,2021-08-06 08:41,2023-10-01 09:58,2021-03-30 18:16,11,16,17,,,,,,17,hotspot,,0,c2,intermittent,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,tier8,,,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

java/util/concurrent/tck/JSR166TestCase.java

Here's a snippet from the log file:

----------System.out:(21/1149)*----------
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\macro.cpp:555
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\\workspace\\open\\src\\hotspot\\share\\opto\\macro.cpp:555), pid=49908, tid=13776
#  assert(false) failed: unexpected node
#
# JRE version: Java(TM) SE Runtime Environment (17.0+10) (fastdebug build 17-ea+10-LTS-728)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+10-LTS-728, compiled mode, sharing, tiered, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_util\\scratch\\0\\hs_err_pid49908.mdmp
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_util\\scratch\\0\\hs_err_pid49908.log
#
# Compiler replay data is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_util\\scratch\\0\\replay_pid49908.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000021df0733430):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=13776, stack(0x000000584d100000,0x000000584d200000)]


Current CompileTask:
C2:  48605 10545   !b  4       AbstractQueuedSynchronizerTest::testSignalAll_IMSE (26 bytes)

Stack: [0x000000584d100000,0x000000584d200000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xab2b81]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xcd2367]  VMError::report+0xfc7  (vmError.cpp:737)
V  [jvm.dll+0xcd3cbe]  VMError::report_and_die+0x7ce  (vmError.cpp:1534)
V  [jvm.dll+0xcd43d4]  VMError::report_and_die+0x64  (vmError.cpp:1328)
V  [jvm.dll+0x4bab87]  report_vm_error+0xb7  (debug.cpp:284)
V  [jvm.dll+0x96e621]  PhaseMacroExpand::value_from_mem+0x3c1  (macro.cpp:555)
V  [jvm.dll+0x96d002]  PhaseMacroExpand::scalar_replacement+0x892  (macro.cpp:817)
V  [jvm.dll+0x96100d]  PhaseMacroExpand::eliminate_allocate_node+0x1bd  (macro.cpp:1095)
V  [jvm.dll+0x961b08]  PhaseMacroExpand::eliminate_macro_nodes+0x288  (macro.cpp:2589)
V  [jvm.dll+0x472faf]  Compile::Optimize+0x9cf  (compile.cpp:2233)
V  [jvm.dll+0x470591]  Compile::Compile+0x1421  (compile.cpp:787)
V  [jvm.dll+0x3a5c3c]  C2Compiler::compile_method+0x10c  (c2compiler.cpp:106)
V  [jvm.dll+0x48910e]  CompileBroker::invoke_compiler_on_method+0x94e  (compileBroker.cpp:2307)
V  [jvm.dll+0x48680a]  CompileBroker::compiler_thread_loop+0x2ba  (compileBroker.cpp:1981)
V  [jvm.dll+0xc63196]  JavaThread::thread_main_inner+0x226  (thread.cpp:1498)
V  [jvm.dll+0xc599f4]  Thread::call_run+0x1b4  (thread.cpp:407)
V  [jvm.dll+0xab14ce]  thread_native_entry+0x10e  (os_windows.cpp:560)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]",,,,,,,,,,JDK-8264570,JDK-8265296,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-02-21 22:57;rraghavan;hs_err_pid49908.log;https://bugs.openjdk.org/secure/attachment/93294/hs_err_pid49908.log","2021-02-21 22:57;rraghavan;replay_pid49908.log;https://bugs.openjdk.org/secure/attachment/93293/replay_pid49908.log",,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2rnmb:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-02-23 02:17;thartmann;Reproducible with replay compilation, mem is TOP.;;;","2021-02-23 09:45;thartmann;Steps to reproduce:
- Run java/util/concurrent/tck/JSR166TestCase.java
- Go to JTWork/scratch and set Classpath according to what jtreg printed
export CLASSPATH=/oracle/jdk/open/JTwork/classes/java/util/concurrent/tck/JSR166TestCase.d:/oracle/jdk/open/test/jdk/java/util/concurrent/tck:/home/tobias/programs/jtreg/lib/junit.jar:/home/tobias/programs/jtreg/lib/javatest.jar:/home/tobias/programs/jtreg/lib/jtreg.jar
- Run replay compilation:
java -XX:+ReplayIgnoreInitErrors -XX:+ReplayCompiles -XX:ReplayDataFile=replay_pid49908.log  -ea -esa -Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -XX:+TieredCompilation -XX:-UseCompressedOops
;;;","2021-03-24 08:49;kvn; 1  Con  ===  0  [[]]  #top
;;;","2021-03-24 10:21;kvn;In the memory chain there is membar with Top memory edge:
 786  MemBarCPUOrder  ===  830  1  1  1  1  [[ 787  788 ]]  !jvms: Unsafe::getAndBitwiseAndInt @ bci:3 (line 3255) AbstractQueuedSynchronizer$Node::getAndUnsetStatus @ bci:10 (line 468) AbstractQueuedSynchronizer$ConditionObject::doSignal @ bci:25 (line 1453) AbstractQueuedSynchronizer$ConditionObject::signalAll @ bci:30 (line 1490) AbstractQueuedSynchronizerTest::testSignalAll_IMSE @ bci:14 (line 686)
;;;","2021-03-24 10:43;kvn;Some kind of dead code.

It came from next check (note, WeakCompareAndSwapI has TOP `adr` and `val` edges) :
 811  WeakCompareAndSwapI  ===  808  809  1  1  1  [[ 812  817  826  821 ]]  !jvms: Unsafe::getAndBitwiseAndInt @ bci:18 (line 3256) AbstractQueuedSynchronizer$Node::getAndUnsetStatus @ bci:10 (line 468) AbstractQueuedSynchronizer$ConditionObject::doSignal @ bci:25 (line 1453) AbstractQueuedSynchronizer$ConditionObject::signalAll @ bci:30 (line 1490) AbstractQueuedSynchronizerTest::testSignalAll_IMSE @ bci:14 (line 686)
 826  CmpI  === _  811  22  [[ 827 ]]  !jvms: Unsafe::getAndBitwiseAndInt @ bci:21 (line 3256) AbstractQueuedSynchronizer$Node::getAndUnsetStatus @ bci:10 (line 468) AbstractQueuedSynchronizer$ConditionObject::doSignal @ bci:25 (line 1453) AbstractQueuedSynchronizer$ConditionObject::signalAll @ bci:30 (line 1490) AbstractQueuedSynchronizerTest::testSignalAll_IMSE @ bci:14 (line 686)
 827  Bool  === _  826  [[ 828 ]] [ne] !jvms: Unsafe::getAndBitwiseAndInt @ bci:21 (line 3256) AbstractQueuedSynchronizer$Node::getAndUnsetStatus @ bci:10 (line 468) AbstractQueuedSynchronizer$ConditionObject::doSignal @ bci:25 (line 1453) AbstractQueuedSynchronizer$ConditionObject::signalAll @ bci:30 (line 1490) AbstractQueuedSynchronizerTest::testSignalAll_IMSE @ bci:14 (line 686)
 828  If  ===  821  827  [[ 830 ]] P=0.100000, C=-1.000000 !jvms: Unsafe::getAndBitwiseAndInt @ bci:21 (line 3256) AbstractQueuedSynchronizer$Node::getAndUnsetStatus @ bci:10 (line 468) AbstractQueuedSynchronizer$ConditionObject::doSignal @ bci:25 (line 1453) AbstractQueuedSynchronizer$ConditionObject::signalAll @ bci:30 (line 1490) AbstractQueuedSynchronizerTest::testSignalAll_IMSE @ bci:14 (line 686)
 830  IfFalse  ===  828  [[ 786 ]] #0 !jvms: Unsafe::getAndBitwiseAndInt @ bci:21 (line 3256) AbstractQueuedSynchronizer$Node::getAndUnsetStatus @ bci:10 (line 468) AbstractQueuedSynchronizer$ConditionObject::doSignal @ bci:25 (line 1453) AbstractQueuedSynchronizer$ConditionObject::signalAll @ bci:30 (line 1490) AbstractQueuedSynchronizerTest::testSignalAll_IMSE @ bci:14 (line 686)
;;;","2021-03-24 20:44;kvn;The test allocates new ConditionObject which does not initialize its fields:

AbstractQueuedSynchronizerTest.java 

    static class Mutex extends AbstractQueuedSynchronizer {
        /** Faux-Implements Lock.newCondition(). */
        public ConditionObject newCondition() {
            return new ConditionObject();
        }
    }
    public void testSignalAll_IMSE() {
        final Mutex sync = new Mutex();
        final ConditionObject c = sync.newCondition();
        try {
            c.signalAll();
            shouldThrow();
        } catch (IllegalMonitorStateException success) {}
    }

ConditionObject::signalAll() checks `firstWaiter` field for NULL before calling doSignal():

        public final void signalAll() {
            ConditionNode first = firstWaiter;
            if (!isHeldExclusively())
                throw new IllegalMonitorStateException();
            if (first != null) // (line 1489)
                doSignal(first, true); // (line 1490)
        }

But because check is separated by code from allocation the IR graph for doSignal() is generated:

        private void doSignal(ConditionNode first, boolean all) {
            while (first != null) { // (line 1449)
                ConditionNode next = first.nextWaiter; //  (line 1450)
                if ((firstWaiter = next) == null)
                    lastWaiter = null;
                if ((first.getAndUnsetStatus(COND) & COND) != 0) { //  (line 1453)
                    enqueue(first);
                    if (!all)
                        break;
                }
                first = next;
            }
        }

During IGVN MemNode::can_see_stored_value() called for `firstWaiter` field load. And it finds allocation and that field is NULL.

Unfortunately the dead graph for doSignal() method did not collapse. EA is executed and it finds that ConditionObject allocation does not escape and we are trying to remove it in Macro expansion phase. We have to go through all memory nodes which may reference it and we find one (Top) in dead code which cause the assert.

So the issue is that IGVN did not collapse dead code in IR.
;;;","2021-03-26 08:57;kvn;LoadStoreNode missing Value() method which checks for Top inputs!
Java getAndUnsetStatus() uses WeakCompareAndSwapINode which is subclass of LoadStoreNode. That is why the dead IR subgraph was not removed.;;;","2021-03-26 08:58;kvn;Note, it affects all releases.;;;","2021-03-26 10:33;kvn;An other note. There are no profiling information in MDOs (counters are 0) because the run was done with -Xcomp. In counter in call site is 0 we usually don't inline called method. But for some reasons in this case all called methods are inlined:

ciMethodData AbstractQueuedSynchronizerTest testSignalAll_IMSE ()V 2 1 orig 80 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 data 35 0x40002 0x0 0x90005 0x0 0x0 0x0 0x0 0x0 0x0 0xe0005 0x0 0x0 0x0 0x0 0x0 0x0 0x120005 0x0 0x0 0x0 0x0 0x0 0x0 0x150003 0x0 0x18 0x0 0x0 0x0 0x0 0x0 0x0 0x9 0x1 0x0 oops 0 methods 0
compile AbstractQueuedSynchronizerTest testSignalAll_IMSE ()V -1 4 inline 13 0 -1 AbstractQueuedSynchronizerTest testSignalAll_IMSE ()V 1 4 AbstractQueuedSynchronizerTest$Mutex <init> ()V 1 9 AbstractQueuedSynchronizerTest$Mutex newCondition ()Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject; 2 5 java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject <init> (Ljava/util/concurrent/locks/AbstractQueuedSynchronizer;)V 3 6 java/lang/Object <init> ()V 1 14 java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject signalAll ()V 2 9 java/util/concurrent/locks/ReentrantLock$Sync isHeldExclusively ()Z 3 1 java/util/concurrent/locks/AbstractOwnableSynchronizer getExclusiveOwnerThread ()Ljava/lang/Thread; 2 30 java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject doSignal (Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionNode;Z)V 3 25 java/util/concurrent/locks/AbstractQueuedSynchronizer$Node getAndUnsetStatus (I)I 4 10 jdk/internal/misc/Unsafe getAndBitwiseAndInt (Ljava/lang/Object;JI)I 1 18 JSR166TestCase shouldThrow ()V 2 3 junit/framework/Assert fail (Ljava/lang/String;)V;;;","2021-03-26 10:40;kvn;An other note, Interpreter invocation counter is not 0:
final java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject::signalAll()V
  interpreter_invocation_count:         193
  invocation_counter:                   193
  backedge_counter:                       0
  decompile_count:                        0
  mdo size: 680 bytes

I think it is because we run with -XX:+TieredCompilation and method resumed execution with C1 compiled (profiling) code before C2 compilation started and snapshot MDO state.;;;","2021-03-30 18:16;roboduke;Changeset: e073486f
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-03-31 01:16:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e073486f
;;;","2021-04-09 00:39;roland;11u Fix Request
 
Backporting this patch eliminates a c2 crash. Patch applies cleanly to 11u. While the crash has not been seen with 11u yet, fix is applicable to 11u. Backport is also required for parity. tier1 tests pass with the patch.;;;",,,,,,,,,,,,,,,,
vmTestbase/nsk/jvmti/scenarios/hotswap/HS102/hs102t001/TestDescription.java SIGSEGV in memmove_ssse3,JDK-8262092,5042509,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,dcubed,dcubed,2021-02-21 08:09,2021-05-17 17:39,2023-10-01 09:58,2021-05-10 18:47,17,,,,,,,,17,hotspot,,0,intermittent,investigate-UT,tier7,,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

vmTestbase/nsk/jvmti/scenarios/hotswap/HS102/hs102t001/TestDescription.java

Here's a snippet from the log file:

----------System.out:(20/1495)----------
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fd9ac674877, pid=24407, tid=24427
#
# JRE version: Java(TM) SE Runtime Environment (17.0+10) (fastdebug build 17-ea+10-LTS-740)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+10-LTS-740, mixed mode, sharing, tiered, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# C  [libc.so.6+0x153877]  __memmove_ssse3+0x1897
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S198/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d7537eac-8c40-452b-9f3a-0587e9b3f91e/runs/3c208823-9606-4bc5-9967-106d3dd91c3e/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti/scratch/0/core.24407)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S198/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d7537eac-8c40-452b-9f3a-0587e9b3f91e/runs/3c208823-9606-4bc5-9967-106d3dd91c3e/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti/scratch/0/hs_err_pid24407.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#
----------System.err:(0/0)----------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007fd9a44457c0):  JavaThread ""UsageTracker"" daemon [_thread_in_native, id=24427, stack(0x00007fd9024f5000,0x00007fd9025f6000)]

Stack: [0x00007fd9024f5000,0x00007fd9025f6000],  sp=0x00007fd9025f1d48,  free space=1011k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libc.so.6+0x153877]  __memmove_ssse3+0x1897
V  [libjvm.so+0x11b5ad5]  JvmtiClassFileLoadHookPoster::post_to_env(JvmtiEnv*, bool)+0x1e5
V  [libjvm.so+0x11a61a1]  JvmtiExport::post_class_file_load_hook(Symbol*, Handle, Handle, unsigned char**, unsigned char**, JvmtiCachedClassFileData**)+0x3a1
V  [libjvm.so+0x11f87d4]  KlassFactory::check_shared_class_file_load_hook(InstanceKlass*, Symbol*, Handle, Handle, ClassFileStream const*, Thread*)+0xd4
V  [libjvm.so+0x17e4c8d]  SystemDictionary::load_shared_class(InstanceKlass*, Handle, Handle, ClassFileStream const*, PackageEntry*, Thread*)+0xfd
V  [libjvm.so+0x17e53f4]  SystemDictionary::load_instance_class(Symbol*, Handle, Thread*)+0x3b4
V  [libjvm.so+0x17e38f0]  SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*)+0x650
V  [libjvm.so+0x17e5bfa]  SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*)+0x2a
V  [libjvm.so+0xa551e0]  ConstantPool::klass_at_impl(constantPoolHandle const&, int, bool, Thread*)+0x250
V  [libjvm.so+0xa57155]  ConstantPool::klass_ref_at(int, Thread*)+0x45
V  [libjvm.so+0x125b26d]  LinkResolver::resolve_field_access(fieldDescriptor&, constantPoolHandle const&, int, methodHandle const&, Bytecodes::Code, Thread*)+0x6d
V  [libjvm.so+0xe3c5f9]  InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code)+0x159
V  [libjvm.so+0xe3df8b]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x1fb
j  java.lang.invoke.LambdaForm.<clinit>()V+26 java.base@17-ea
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe4c325]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x595
V  [libjvm.so+0xe0dd35]  InstanceKlass::call_class_initializer(Thread*)+0x1e5
V  [libjvm.so+0xe0f21c]  InstanceKlass::initialize_impl(Thread*)+0x67c
V  [libjvm.so+0x125b89f]  LinkResolver::resolve_static_call(CallInfo&, LinkInfo const&, bool, Thread*)+0xcf
V  [libjvm.so+0x126167b]  LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, Thread*)+0x19b
V  [libjvm.so+0xe3d12f]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x1df
V  [libjvm.so+0xe3dea2]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x112
j  java.lang.invoke.DirectMethodHandle.makePreparedLambdaForm(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/LambdaForm;+418 java.base@17-ea
j  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/LambdaForm;+17 java.base@17-ea
j  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava/lang/invoke/MemberName;Z)Ljava/lang/invoke/LambdaForm;+163 java.base@17-ea
j  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/LambdaForm;+2 java.base@17-ea
j  java.lang.invoke.DirectMethodHandle.make(BLjava/lang/Class;Ljava/lang/invoke/MemberName;Ljava/lang/Class;)Ljava/lang/invoke/DirectMethodHandle;+159 java.base@17-ea
j  java.lang.invoke.MethodHandles$Lookup.getDirectMethodCommon(BLjava/lang/Class;Ljava/lang/invoke/MemberName;ZZLjava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/invoke/MethodHandle;+210 java.base@17-ea
j  java.lang.invoke.MethodHandles$Lookup.getDirectMethodNoSecurityManager(BLjava/lang/Class;Ljava/lang/invoke/MemberName;Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/invoke/MethodHandle;+14 java.base@17-ea
j  java.lang.invoke.MethodHandles$Lookup.getDirectMethodForConstant(BLjava/lang/Class;Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/MethodHandle;+31 java.base@17-ea
j  java.lang.invoke.MethodHandles$Lookup.linkMethodHandleConstant(BLjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;+153 java.base@17-ea
j  java.lang.invoke.MethodHandleNatives.linkMethodHandleConstant(Ljava/lang/Class;ILjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;+38 java.base@17-ea
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe4c325]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x595
V  [libjvm.so+0xe4d872]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*)+0x312
V  [libjvm.so+0x17dde92]  SystemDictionary::link_method_handle_constant(Klass*, int, Klass*, Symbol*, Symbol*, Thread*)+0x4a2
V  [libjvm.so+0xa59697]  ConstantPool::resolve_constant_at_impl(constantPoolHandle const&, int, int, bool*, Thread*)+0xc47
V  [libjvm.so+0x6c2865]  BootstrapInfo::resolve_bsm(Thread*)+0xeb5
V  [libjvm.so+0x17e06ae]  SystemDictionary::invoke_bootstrap_method(BootstrapInfo&, Thread*)+0x2e
V  [libjvm.so+0x1253e05]  LinkResolver::resolve_dynamic_call(CallInfo&, BootstrapInfo&, Thread*)+0x25
V  [libjvm.so+0x1254366]  LinkResolver::resolve_invokedynamic(CallInfo&, constantPoolHandle const&, int, Thread*)+0x136
V  [libjvm.so+0xe3c283]  InterpreterRuntime::resolve_invokedynamic(JavaThread*)+0x1b3
V  [libjvm.so+0xe3df78]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x1e8
j  sun.util.cldr.CLDRLocaleProviderAdapter.getTimeZoneNameProvider()Ljava/util/spi/TimeZoneNameProvider;+8 java.base@17-ea
j  sun.util.locale.provider.JRELocaleProviderAdapter.getLocaleServiceProvider(Ljava/lang/Class;)Ljava/util/spi/LocaleServiceProvider;+417 java.base@17-ea
j  sun.util.locale.provider.LocaleServiceProviderPool.findProviders(Ljava/util/Locale;Z)Ljava/util/List;+68 java.base@17-ea
j  sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObjectImpl(Lsun/util/locale/provider/LocaleServiceProviderPool$LocalizedObjectGetter;Ljava/util/Locale;ZLjava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object;+53 java.base@17-ea
j  sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObject(Lsun/util/locale/provider/LocaleServiceProviderPool$LocalizedObjectGetter;Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object;+7 java.base@17-ea
j  sun.util.locale.provider.TimeZoneNameUtility.retrieveDisplayNamesImpl(Ljava/lang/String;Ljava/util/Locale;)[Ljava/lang/String;+140 java.base@17-ea
j  sun.util.locale.provider.TimeZoneNameUtility.retrieveDisplayName(Ljava/lang/String;ZILjava/util/Locale;)Ljava/lang/String;+2 java.base@17-ea
j  java.util.TimeZone.getDisplayName(ZILjava/util/Locale;)Ljava/lang/String;+47 java.base@17-ea
j  java.util.Date.toString()Ljava/lang/String;+150 java.base@17-ea
j  sun.usagetracker.UsageTrackerClient$UsageTrackerRunnable.buildMessage(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;+55 java.base@17-ea
j  sun.usagetracker.UsageTrackerClient$UsageTrackerRunnable.run()V+82 java.base@17-ea
j  java.lang.Thread.run()V+11 java.base@17-ea
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe4c325]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x595
V  [libjvm.so+0xe4cba5]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*)+0x4c5
V  [libjvm.so+0xe4d05c]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Thread*)+0xac
V  [libjvm.so+0xfbcc2b]  thread_entry(JavaThread*, Thread*)+0x12b
V  [libjvm.so+0x1840ff6]  JavaThread::thread_main_inner()+0x256
V  [libjvm.so+0x1847480]  Thread::call_run()+0x100
V  [libjvm.so+0x1533496]  thread_native_entry(Thread*)+0x116

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.lang.invoke.LambdaForm.<clinit>()V+26 java.base@17-ea
v  ~StubRoutines::call_stub
j  java.lang.invoke.DirectMethodHandle.makePreparedLambdaForm(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/LambdaForm;+418 java.base@17-ea
j  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/LambdaForm;+17 java.base@17-ea
j  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava/lang/invoke/MemberName;Z)Ljava/lang/invoke/LambdaForm;+163 java.base@17-ea
j  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/LambdaForm;+2 java.base@17-ea
j  java.lang.invoke.DirectMethodHandle.make(BLjava/lang/Class;Ljava/lang/invoke/MemberName;Ljava/lang/Class;)Ljava/lang/invoke/DirectMethodHandle;+159 java.base@17-ea
j  java.lang.invoke.MethodHandles$Lookup.getDirectMethodCommon(BLjava/lang/Class;Ljava/lang/invoke/MemberName;ZZLjava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/invoke/MethodHandle;+210 java.base@17-ea
j  java.lang.invoke.MethodHandles$Lookup.getDirectMethodNoSecurityManager(BLjava/lang/Class;Ljava/lang/invoke/MemberName;Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/invoke/MethodHandle;+14 java.base@17-ea
j  java.lang.invoke.MethodHandles$Lookup.getDirectMethodForConstant(BLjava/lang/Class;Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/MethodHandle;+31 java.base@17-ea
j  java.lang.invoke.MethodHandles$Lookup.linkMethodHandleConstant(BLjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;+153 java.base@17-ea
j  java.lang.invoke.MethodHandleNatives.linkMethodHandleConstant(Ljava/lang/Class;ILjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;+38 java.base@17-ea
v  ~StubRoutines::call_stub
j  sun.util.cldr.CLDRLocaleProviderAdapter.getTimeZoneNameProvider()Ljava/util/spi/TimeZoneNameProvider;+8 java.base@17-ea
j  sun.util.locale.provider.JRELocaleProviderAdapter.getLocaleServiceProvider(Ljava/lang/Class;)Ljava/util/spi/LocaleServiceProvider;+417 java.base@17-ea
j  sun.util.locale.provider.LocaleServiceProviderPool.findProviders(Ljava/util/Locale;Z)Ljava/util/List;+68 java.base@17-ea
j  sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObjectImpl(Lsun/util/locale/provider/LocaleServiceProviderPool$LocalizedObjectGetter;Ljava/util/Locale;ZLjava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object;+53 java.base@17-ea
j  sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObject(Lsun/util/locale/provider/LocaleServiceProviderPool$LocalizedObjectGetter;Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object;+7 java.base@17-ea
j  sun.util.locale.provider.TimeZoneNameUtility.retrieveDisplayNamesImpl(Ljava/lang/String;Ljava/util/Locale;)[Ljava/lang/String;+140 java.base@17-ea
j  sun.util.locale.provider.TimeZoneNameUtility.retrieveDisplayName(Ljava/lang/String;ZILjava/util/Locale;)Ljava/lang/String;+2 java.base@17-ea
j  java.util.TimeZone.getDisplayName(ZILjava/util/Locale;)Ljava/lang/String;+47 java.base@17-ea
j  java.util.Date.toString()Ljava/lang/String;+150 java.base@17-ea
j  sun.usagetracker.UsageTrackerClient$UsageTrackerRunnable.buildMessage(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;+55 java.base@17-ea
j  sun.usagetracker.UsageTrackerClient$UsageTrackerRunnable.run()V+82 java.base@17-ea
j  java.lang.Thread.run()V+11 java.base@17-ea
v  ~StubRoutines::call_stub

siginfo: si_signo: 11 (SIGSEGV), si_code: 128 (SI_KERNEL), si_addr: 0x0000000000000000",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2rnm3:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-04-22 13:59;amenkov;Was not able to reproduce the issue.
But looks like the reason of the failure is lack of synchronization in ClassFileLoadHook.;;;","2021-05-10 18:47;roboduke;Changeset: 9713152e
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2021-05-10 22:48:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9713152eae660f83b8a681c3168b7eb2285c05bc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Add RenderPerfTest for XOR mode rendering,JDK-8262091,5042506,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,aghaisas,aghaisas,2021-02-21 07:20,2021-02-21 07:48,2023-10-01 09:58,2021-02-21 07:43,internal,,,,,,,,internal,client-libs,,0,lanai,sn_87,testbug,,,,,,,,,,,,,,,,,,,,"There is no support in Metal framework for XOR mode rendering. It has been implemented in Lanai project as a workaround.

To measure performance of this workaround this bug intends to add RenderPerfTest for XOR mode rendering of primitives, image and text rendering.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2rnlf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-02-21 07:41;aghaisas;Renderperf test is a kind of stress test. Here are the results on macOS 10.15.7 - macBook pro 13"" 2015.

OpenGL
------------
FlatOval_XOR : 30.15 FPS
RotatedBox_XOR : 48.89 FPS
Lines_XOR : 64.20 FPS
Image_XOR : 0.24 FPS
TextNoAA_XOR : 31.21 FPS
TextLCD_XOR : 29.95 FPS


Metal
--------
FlatOval_XOR : 4.53 FPS
RotatedBox_XOR : 5.19 FPS
Lines_XOR : 5.42 FPS
Image_XOR : 0.46 FPS
TextNoAA_XOR : 1.70 FPS
TextLCD_XOR : 1.67 FPS;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Hovering Metal HTML Tooltips in different windows cause IllegalArgExc on Linux,JDK-8262085,5042275,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,azvegint,webbuggrp,webbuggrp,2021-02-17 10:07,2022-09-30 21:28,2023-10-01 09:58,2021-03-01 06:32,11,15,16,,,,,,17,client-libs,,0,dcspn,jdk11u-fix-request,jdk11u-fix-yes,reproducer-yes,sn_87,sn_88,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Linux 3.10.0-1127.19.1.el7.x86_64 #1 SMP Tue Aug 25 17:23:54 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
openjdk version ""11.0.8"" 2020-07-14 LTS
OpenJDK Runtime Environment 18.9 (build 11.0.8+10-LTS)
OpenJDK 64-Bit Server VM 18.9 (build 11.0.8+10-LTS, mixed mode, sharing)




A DESCRIPTION OF THE PROBLEM :
If an application has components with tooltips that contain HTML content, and also a dialog with components with tooltips that contain HTML content, quickly moving the mouse from one such component in the main window to another such component in the dialog window can eventually trigger the exception documented below.

When debugging, I could see that in my case, the JToolTip's width, height, and all insets were 1 at the time of the exception, which caused a width of -1 and a height of -1 to be provided to BasicHTML.getHTMLBaseline .

I ran the demo program also on a Windows PC with openjdk-15.0.1-x64, and did not manage to reproduce the exception there.

Exception in thread ""AWT-EventQueue-0"" java.lang.IllegalArgumentException: Width and height must be >= 0
	at java.desktop/javax.swing.plaf.basic.BasicHTML.getHTMLBaseline(BasicHTML.java:91)
	at java.desktop/javax.swing.plaf.metal.MetalToolTipUI.paint(MetalToolTipUI.java:126)
	at java.desktop/javax.swing.plaf.ComponentUI.update(ComponentUI.java:161)
	at java.desktop/javax.swing.JComponent.paintComponent(JComponent.java:797)
	at java.desktop/javax.swing.JComponent.paint(JComponent.java:1074)
	at java.desktop/javax.swing.JComponent.paintChildren(JComponent.java:907)
	at java.desktop/javax.swing.JComponent.paint(JComponent.java:1083)
	at java.desktop/javax.swing.JComponent.paintChildren(JComponent.java:907)
	at java.desktop/javax.swing.JComponent.paint(JComponent.java:1083)
	at java.desktop/javax.swing.JLayeredPane.paint(JLayeredPane.java:590)
	at java.desktop/javax.swing.JComponent.paintChildren(JComponent.java:907)
	at java.desktop/javax.swing.JComponent.paintToOffscreen(JComponent.java:5262)
	at java.desktop/javax.swing.RepaintManager$PaintManager.paintDoubleBufferedImpl(RepaintManager.java:1643)
	at java.desktop/javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(RepaintManager.java:1618)
	at java.desktop/javax.swing.RepaintManager$PaintManager.paint(RepaintManager.java:1556)
	at java.desktop/javax.swing.BufferStrategyPaintManager.paint(BufferStrategyPaintManager.java:262)
	at java.desktop/javax.swing.RepaintManager.paint(RepaintManager.java:1323)
	at java.desktop/javax.swing.JComponent.paint(JComponent.java:1060)
	at java.desktop/java.awt.GraphicsCallback$PaintCallback.run(GraphicsCallback.java:39)
	at java.desktop/sun.awt.SunGraphicsCallback.runOneComponent(SunGraphicsCallback.java:78)
	at java.desktop/sun.awt.SunGraphicsCallback.runComponents(SunGraphicsCallback.java:115)
	at java.desktop/java.awt.Container.paint(Container.java:2002)
	at java.desktop/java.awt.Window.paint(Window.java:3940)
	at java.desktop/javax.swing.RepaintManager$4.run(RepaintManager.java:876)
	at java.desktop/javax.swing.RepaintManager$4.run(RepaintManager.java:848)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:848)
	at java.desktop/javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:823)
	at java.desktop/javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:772)
	at java.desktop/javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1890)
	at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:313)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:770)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:740)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Start the demo program, or
Create an application with 
1. a main window with a label that has a tooltip with HTML content
2. a dialog window with a label that has a tooltip with HTML content

Hover over one of the labels to see the tooltip. Quickly, wiggle the mouse to move the mouse between the two labels. 


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The tooltips should show, no exceptions should be thrown.
ACTUAL -
After switching between the labels with the tooltips multiple times, receive exception 
Exception in thread ""AWT-EventQueue-0"" java.lang.IllegalArgumentException: Width and height must be >= 0 .

---------- BEGIN SOURCE ----------
package anne.bugs;

import java.awt.Color;

import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;

public class TooltipBugDemo {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            final JFrame frame = new JFrame(""Swing Tooltip Bug Demo"");
            frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
            frame.setSize(250, 250);

            frame.add(createLabel(""main content, hover me"", Color.CYAN, ""main tooltip""));
            frame.setVisible(true);

            final JDialog dialog = new JDialog(frame, ""Dialog Window"", false);
            dialog.setContentPane(createLabel(""dialog content, hover me"", Color.YELLOW, ""dialog tooltip""));
            dialog.pack();
            dialog.setVisible(true);
        });
    }

    private static JLabel createLabel(final String labelText, final Color bgColor, final String tooltipContent) {
        final JLabel label = new JLabel(labelText);
        label.setOpaque(true);
        label.setBackground(bgColor);
        label.setToolTipText(createTooltipText(tooltipContent));
        return label;
    }

    private static String createTooltipText(String text) {
        return ""<html><h1>"" + text + ""</h1></html>"";
    }

}
---------- END SOURCE ----------

FREQUENCY : often


",,,,,,,,,,JDK-8291765,JDK-8290502,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux_redhat_6.0,,,,,,"0|i2rm63:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-02-20 23:37;pnarayanaswa;Checked with attached testcase in LOBI-7.6.64.1 and Windows 10, issue is not reproducible, didn't observe any exception 
Test Result:
=========
8u281: Pass
11.0.10: Pass
15: Pass
16-ea: Pass

resolving as cannot reproduce;;;","2021-02-23 01:09;pnarayanaswa;Additional Information from submitter:
===========================
Note: The mouse must be moved between the two labels quickly and repeatedly, the exception does not occur immediately. 
Short video of reproduced bug: https://streamable.com/gae1zg 

We have managed to reproduce the exception with the provided demo code
* with the linux/JDK combination specified in the bug report
* with Linux 5.9.0-0.bpo.5-amd64 #1 SMP Debian 5.9.15-1~bpo10+1 (2020-12-31) x86_64 GNU/Linux and openjdk version ""11.0.9.1"" 2020-11-04, OpenJDK Runtime Environment (build 11.0.9.1+1-post-Debian-1deb10u2), OpenJDK 64-Bit Server VM (build 11.0.9.1+1-post-Debian-1deb10u2, mixed mode, sharing)
* with Linux virtual-linux 5.10.13-arch1-2 #1 SMP PREEMPT Sat, 06 Feb 2021 11:07:29 +0000 x86_64 GNU/Linux and openjdk version ""15.0.2"" 2021-01-19, OpenJDK Runtime Environment (build 15.0.2+7), OpenJDK 64-Bit Server VM (build 15.0.2+7, mixed mode)

We could not reproduce the exception 
* with Linux 5.10.16-arch1-1 #1 SMP PREEMPT Sat, 13 Feb 2021 20:50:18 +0000 x86_64 GNU/Linux and openjdk 11.0.10 2021-01-19, OpenJDK Runtime Environment (build 11.0.10+9), OpenJDK 64-Bit Server VM (build 11.0.10+9, mixed mode))
* with MacOS and openjdk 11.0.2
* with Windows (as specified in bug report)


So we can reproduce it on certain combinations of Linux builds and openjdk builds.

Would it be possible to retry reproducing with another Linux build?;;;","2021-03-01 06:32;roboduke;Changeset: c569f1d6
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2021-03-01 14:31:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c569f1d6
;;;","2022-07-12 01:05;itakiguchi;Fix request [11u]

I could recreate this issue on jdk-11.0.15+10.
It depends on the environment, but it seems to be a rare case.
But it should be fixed.

Clean backport except Copyright year. ;;;","2022-07-12 01:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1217
Date: 2022-07-12 08:05:45 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
"vmTestbase/nsk/jvmti/SetEventNotificationMode/setnotif001/TestDescription.java failed with ""No notification: event JVMTI_EVENT_FRAME_POP (61)""",JDK-8262083,5042497,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,dcubed,dcubed,2021-02-20 20:21,2021-03-24 19:02,2023-10-01 09:58,2021-03-19 13:14,16,,,,,,,,17,hotspot,,0,intermittent,investigate-UT,tier7,,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK16 CI:

vmTestbase/nsk/jvmti/SetEventNotificationMode/setnotif001/TestDescription.java

Here's a snippet from the log file:

#section:main
----------messages:(4/274)----------
command: main -agentlib:setnotif001 nsk.jvmti.SetEventNotificationMode.setnotif001
reason: User specified action: run main/othervm/native -agentlib:setnotif001 nsk.jvmti.SetEventNotificationMode.setnotif001 
Mode: othervm [/othervm specified]
elapsed time (seconds): 16.681
----------configuration:(0/0)----------
----------System.out:(1/50)----------
No notification: event JVMTI_EVENT_FRAME_POP (61)
----------System.err:(0/0)----------
----------rerun:(46/8386)*----------

The test task's JVM args are:
-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -XX:+DeoptimizeALot",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2rnjf:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-03-17 16:55;amenkov;The test requests NotifyFrame event from MethodEntry handler expecting that 1st MethodEntry event is generated for main thread (for setnotif001.meth() call).
If we get the 1st MethodEntry event from some other thread (for example UsageTracker thread) we can't be sure the thread returns from the method shortly

;;;","2021-03-19 13:14;roboduke;Changeset: 6737135b
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2021-03-19 20:13:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6737135b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"vmTestbase/nsk/jdi/ThreadDeathRequest/addThreadFilter/addthreadfilter001/TestDescription.java failed with ""ERROR: eventSet1.size() != 3  :: 2""",JDK-8262081,5042488,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,dcubed,dcubed,2021-02-20 07:17,2021-03-31 17:43,2023-10-01 09:58,2021-03-25 12:48,17,,,,,,,,17,core-svc,,0,intermittent,investigate-UT,testbug,tier5,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

vmTestbase/nsk/jdi/ThreadDeathRequest/addThreadFilter/addthreadfilter001/TestDescription.java

Here's a snippet from the log file:

=> nsk/jdi/ThreadDeathRequest/addThreadFilter/addthreadfilter001 :::::: case: # 0
--> debugger: ......setting up ThreadDeathRequest
--> debugger: ......vm.resume();
--> debugger: ......waiting for ThreadDeathEvent
--> debugger: ......eventSet1.size() == 2
# ERROR: ##> debugger: ERROR: eventSet1.size() != 3  :: 2
The following stacktrace is for failure analysis.
nsk.share.TestFailure: ##> debugger: ERROR: eventSet1.size() != 3  :: 2
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.JDIBase.log3(JDIBase.java:67)
	at nsk.jdi.ThreadDeathRequest.addThreadFilter.addthreadfilter001.testRun(addthreadfilter001.java:319)
	at nsk.jdi.ThreadDeathRequest.addThreadFilter.addthreadfilter001.runTest(addthreadfilter001.java:203)
	at nsk.jdi.ThreadDeathRequest.addThreadFilter.addthreadfilter001.runThis(addthreadfilter001.java:146)
	at nsk.jdi.ThreadDeathRequest.addThreadFilter.addthreadfilter001.run(addthreadfilter001.java:92)
	at nsk.jdi.ThreadDeathRequest.addThreadFilter.addthreadfilter001.main(addthreadfilter001.java:85)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
--> debugger: ........event property : ThreadDeathRequest2
--> debugger: ........event property : ThreadDeathRequest1
--> debugger: breakpointForCommunication
debugee.stderr> **> debuggee: thread2 :   'run': enter  :: threadName == thread2
debugee.stderr> **> debuggee: thread2 :   'run': exit   :: threadName == thread2

=> nsk/jdi/ThreadDeathRequest/addThreadFilter/addthreadfilter001     TESTING ENDS
--> debugger: waiting for VMDeathEvent
--> debugger: test phase has finished normally
--> debugger:    waiting for the debuggee to finish ...
--> debugger: ......getting the debuggee's exit status
--> debugger: ......debuggee returned expected exit status: 95 == PASS_BASE
TEST FAILED",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2rnhf:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2021-03-25 12:48;roboduke;Changeset: 2a5e0dd3
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2021-03-25 19:47:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2a5e0dd3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"vmTestbase/nsk/jdi/Event/request/request001/TestDescription.java failed with ""ERROR: new event is not ThreadStartEvent""",JDK-8262080,5042486,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,dcubed,dcubed,2021-02-20 07:09,2021-09-16 13:19,2023-10-01 09:58,2021-03-19 13:12,17,,,,,,,,17,core-svc,,0,intermittent,investigate-UT,testbug,tier5,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

vmTestbase/nsk/jdi/Event/request/request001/TestDescription.java

Here's a snippet from the log file:

--> debugger: ......waiting for ThreadStartEvent
# ERROR: ##> debugger: ERROR: new event is not ThreadStartEvent: ThreadDeathEvent in thread UsageTracker
The following stacktrace is for failure analysis.
nsk.share.TestFailure: ##> debugger: ERROR: new event is not ThreadStartEvent: ThreadDeathEvent in thread UsageTracker
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.JDIBase.log3(JDIBase.java:67)
	at nsk.jdi.Event.request.request001.testRun(request001.java:364)
	at nsk.jdi.Event.request.request001.runTest(request001.java:244)
	at nsk.jdi.Event.request.request001.runThis(request001.java:180)
	at nsk.jdi.Event.request.request001.run(request001.java:109)
	at nsk.jdi.Event.request.request001.main(request001.java:102)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
--> debugger: waiting for VMDeathEvent
# ERROR: ##> debugger: ERROR: Exception : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** EXCEPTION while waiting for event ** : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** TIMEOUT while waiting for event **
# ERROR: ##> debugger: test phase has not finished normally: debuggee is still alive
--> debugger: ......forcing: vm.exit();
TEST FAILED
# ERROR: binder> Debugee VM has not exited correctly: trying to kill it
The following stacktrace is for failure analysis.
nsk.share.TestFailure: binder> Debugee VM has not exited correctly: trying to kill it
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jpda.DebugeeProcess.complain(DebugeeProcess.java:417)
	at nsk.share.jpda.DebugeeProcess.close(DebugeeProcess.java:397)
	at nsk.share.jpda.DebugeeProcess.finalize(DebugeeProcess.java:426)
	at nsk.share.FinalizableObject.finalizeAtExit(FinalizableObject.java:48)
	at nsk.share.Finalizer$FinalizerThread.run(Finalizer.java:122)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273909,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2rngz:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2021-03-19 13:12;roboduke;Changeset: 57fc8e9b
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2021-03-19 20:11:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/57fc8e9b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(allocates2(pc)) failed: not in CodeBuffer memory,JDK-8262073,5042475,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fyang,fyang,fyang,2021-02-19 22:10,2021-03-02 05:11,2023-10-01 09:58,2021-02-24 06:35,openjdk8u292,,,,,,,,openjdk8u292,hotspot,,0,11-na,jdk8u-fix-request,jdk8u-fix-yes,sustaining,,,,,,,,,,,,,,,,,,,"8u aarch64 jvm (debug build from latest jdk8u-dev repo) crashes when executing the following test:
$ jtreg -othervm jdk/test/jdk/jfr/event/gc/configuration/TestGCHeapConfigurationEventWithHeapBasedOops.sh

1. Crash log:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/yangfei/openjdk8u-dev/hotspot/src/share/vm/asm/codeBuffer.hpp:177), pid=57263, tid=0x0000ffffbe1921f0
#  assert(allocates2(pc)) failed: not in CodeBuffer memory: 0x0000ffffb04e5d80 <= 0x0000ffffb04e5e34 <= 0x0000ffffb04e5e30
#
# JRE version: OpenJDK Runtime Environment (8.0) (build 1.8.0-internal-debug-yangfei_2021_02_20_11_24-b00)
# Java VM: OpenJDK 64-Bit Server VM (25.71-b00-debug mixed mode linux-aarch64 compressed oops)
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#

---------------  T H R E A D  ---------------

Current thread (0x0000ffffb800e800):  JavaThread ""main"" [_thread_in_vm, id=57264, stack(0x0000ffffbdf93000,0x0000ffffbe193000)]

Stack: [0x0000ffffbdf93000,0x0000ffffbe193000],  sp=0x0000ffffbe18ce30,  free space=2023k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd154bc]  VMError::report_and_die()+0x4dc
V  [libjvm.so+0x5e9aec]  report_vm_error(char const*, int, char const*, char const*)+0x84
V  [libjvm.so+0x26e1d8]  CodeSection::set_end(unsigned char*)+0xbc
V  [libjvm.so+0x26e294]  CodeSection::emit_int32(int)+0x3c
V  [libjvm.so+0x26e814]  AbstractAssembler::emit_int32(int)+0x20
V  [libjvm.so+0x26fa30]  Assembler::emit_long(int)+0x4c
V  [libjvm.so+0x26fcb4]  Assembler::emit()+0x28
V  [libjvm.so+0x277a84]  Instruction_aarch64::~Instruction_aarch64()+0x18
V  [libjvm.so+0x270004]  Assembler::add(RegisterImpl*, RegisterImpl*, unsigned int)+0x58
V  [libjvm.so+0xa331a4]  MacroAssembler::wrap_add_sub_imm_insn(RegisterImpl*, RegisterImpl*, unsigned int, void (MacroAssembler::*)(RegisterImpl*,
 RegisterImpl*, unsigned int), void (MacroAssembler::*)(RegisterImpl*, RegisterImpl*, RegisterImpl*, Assembler::shift_kind, unsigned int))+0xe0
V  [libjvm.so+0x27924c]  MacroAssembler::add(RegisterImpl*, RegisterImpl*, unsigned int)+0x44
V  [libjvm.so+0xa2ce0c]  MacroAssembler::far_jump(Address, CodeBuffer*, RegisterImpl*)+0xec
V  [libjvm.so+0xd4fb78]  VtableStubs::create_itable_stub(int)+0x4e4
V  [libjvm.so+0xd4e860]  VtableStubs::find_stub(bool, int)+0x8c
V  [libjvm.so+0x584b3c]  VtableStubs::find_itable_stub(int)+0x18
V  [libjvm.so+0x582108]  CompiledIC::set_to_megamorphic(CallInfo*, Bytecodes::Code, Thread*)+0x1bc
V  [libjvm.so+0xc07328]  SharedRuntime::handle_ic_miss_helper(JavaThread*, Thread*)+0x6f4
V  [libjvm.so+0xc05e44]  SharedRuntime::handle_wrong_method_ic_miss(JavaThread*)+0x26c
v  ~RuntimeStub::ic_miss_stub

2. The itable stub in this case looks like:

Dump of assembler code from 0xffffb04e5d80 to 0xffffb04e5e30:
   0x0000ffffb04e5d80:  ldr     x12, [x9, #16]
   0x0000ffffb04e5d84:  ldr     x16, [x9, #8]
   0x0000ffffb04e5d88:  ldr     w10, [x1, #8]
   0x0000ffffb04e5d8c:  mov     x27, #0xa2000000                // #2717908992
   0x0000ffffb04e5d90:  movk    x27, #0xfff6, lsl #32
   0x0000ffffb04e5d94:  add     x10, x27, x10
   0x0000ffffb04e5d98:  mov     x27, #0xf000                    // #61440
   0x0000ffffb04e5d9c:  movk    x27, #0xefff, lsl #16
   0x0000ffffb04e5da0:  movk    x27, #0xfff7, lsl #32            <================== extra instruction emitted
   0x0000ffffb04e5da4:  ldr     w11, [x10, #296]
   0x0000ffffb04e5da8:  add     x11, x10, x11, uxtx #3
   0x0000ffffb04e5dac:  add     x11, x11, #0x1c8
   0x0000ffffb04e5db0:  ldr     x10, [x11]
   0x0000ffffb04e5db4:  cmp     x12, x10
   0x0000ffffb04e5db8:  b.eq    0xffffb04e5dd0  // b.none
   0x0000ffffb04e5dbc:  cbz     x10, 0xffffb04e5e2c
   0x0000ffffb04e5dc0:  add     x11, x11, #0x10
   0x0000ffffb04e5dc4:  ldr     x10, [x11]
   0x0000ffffb04e5dc8:  cmp     x12, x10
   0x0000ffffb04e5dcc:  b.ne    0xffffb04e5dbc  // b.any
   0x0000ffffb04e5dd0:  ldr     w10, [x1, #8]
   0x0000ffffb04e5dd4:  mov     x27, #0xa2000000                // #2717908992
   0x0000ffffb04e5dd8:  movk    x27, #0xfff6, lsl #32
   0x0000ffffb04e5ddc:  add     x10, x27, x10
   0x0000ffffb04e5de0:  mov     x27, #0xf000                    // #61440
   0x0000ffffb04e5de4:  movk    x27, #0xefff, lsl #16
   0x0000ffffb04e5de8:  movk    x27, #0xfff7, lsl #32                <================= extra instruction emitted
   0x0000ffffb04e5dec:  ldr     w11, [x10, #296]
   0x0000ffffb04e5df0:  add     x11, x10, x11, uxtx #3
   0x0000ffffb04e5df4:  add     x11, x11, #0x1c8
   0x0000ffffb04e5df8:  add     x10, x10, #0x10
   0x0000ffffb04e5dfc:  ldr     x12, [x11]
   0x0000ffffb04e5e00:  cmp     x16, x12
   0x0000ffffb04e5e04:  b.eq    0xffffb04e5e1c  // b.none
   0x0000ffffb04e5e08:  cbz     x12, 0xffffb04e5e2c
   0x0000ffffb04e5e0c:  add     x11, x11, #0x10
   0x0000ffffb04e5e10:  ldr     x12, [x11]
   0x0000ffffb04e5e14:  cmp     x16, x12
   0x0000ffffb04e5e18:  b.ne    0xffffb04e5e08  // b.any
   0x0000ffffb04e5e1c:  ldr     w11, [x11, #8]
   0x0000ffffb04e5e20:  ldr     x12, [x10, w11, uxtw]
   0x0000ffffb04e5e24:  ldr     x8, [x12, #80]
   0x0000ffffb04e5e28:  br      x8
   0x0000ffffb04e5e2c:  adrp    x8, 0xffffb0074000
End of assembler dump.

3. This issue is not there for upstream as this part has reworked by: https://bugs.openjdk.java.net/browse/JDK-8207343
    And this fix has  been backported to 11u.

4. Proposed fix for 8u: 

diff -r d644ac8583fd src/cpu/aarch64/vm/vtableStubs_aarch64.cpp
--- a/src/cpu/aarch64/vm/vtableStubs_aarch64.cpp        Wed Feb 17 12:44:59 2021 +0300
+++ b/src/cpu/aarch64/vm/vtableStubs_aarch64.cpp        Sat Feb 20 10:50:05 2021 +0800
@@ -94,6 +94,7 @@

   __ lookup_virtual_method(r16, vtable_index, rmethod);

+#ifndef PRODUCT
   if (DebugVtables) {
     Label L;
     __ cbz(rmethod, L);
@@ -102,6 +103,8 @@
     __ stop(""Vtable entry is NULL"");
     __ bind(L);
   }
+#endif // PRODUCT
+
   // r0: receiver klass
   // rmethod: Method*
   // r2: receiver
@@ -139,7 +142,7 @@
     __ lea(r10, ExternalAddress((address) SharedRuntime::nof_megamorphic_calls_addr()));
     __ incrementw(Address(r10));
   }
-#endif
+#endif // PRODUCT

   // Entry arguments:
   //  rscratch2: CompiledICHolder
@@ -182,7 +185,7 @@
   // method (rmethod): Method*
   // j_rarg0: receiver

-#ifdef ASSERT
+#ifndef PRODUCT
   if (DebugVtables) {
     Label L2;
     __ cbz(rmethod, L2);
@@ -191,7 +194,7 @@
     __ stop(""compiler entrypoint is null"");
     __ bind(L2);
   }
-#endif // ASSERT
+#endif // PRODUCT

   // rmethod: Method*
   // j_rarg0: receiver
@@ -218,14 +221,10 @@


 int VtableStub::pd_code_size_limit(bool is_vtable_stub) {
-  int size = DebugVtables ? 216 : 0;
-  if (CountCompiledCalls)
-    size += 6 * 4;
-  // FIXME: vtable stubs only need 36 bytes
-  if (is_vtable_stub)
-    size += 52;
-  else
-    size += 176;
+  if (TraceJumps || DebugVtables || CountCompiledCalls || VerifyOops) {
+    return 1000;
+  }
+  int size = is_vtable_stub ? 60 : 192; // Plain + safety
   return size;

   // In order to tune these parameters, run the JVM with VM options
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,,"0|i2rnej:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-02-20 04:50;fyang;8u RFR thread: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-February/013459.html;;;","2021-02-20 17:18;fyang;Fix Request [8u]

We should fix this bug to avoid the potential risk of exceeding the itable/vtable stub
and thus clobbering some other valid values in the memory.

http://cr.openjdk.java.net/~fyang/8262073/webrev.01/ 
Patch has been reviewed and approved by Andrew Haley:
https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-February/013467.html;;;","2021-02-24 06:35;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/rev/bd1ccfcfc1c5
User:  fyang
Date:  2021-02-24 14:34:09 +0000
;;;","2021-03-02 05:11;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/rev/bd1ccfcfc1c5
User:  andrew
Date:  2021-03-02 13:06:10 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Make compiler/ciReplay tests ignore lambdas in compilation replay,JDK-8262064,5042465,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlong,dcubed,dcubed,2021-02-19 15:09,2021-09-16 17:56,2023-10-01 09:58,2021-03-04 12:07,11,16,17,,,,,,17,hotspot,,0,ci-replay,ci-replay-failed,intermittent,investigate-UT,oracle-triage-11,oracle-triage-17,tier3,,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

compiler/ciReplay/TestVMNoCompLevel.java

Here's a snippet from the log file:

#section:main
----------messages:(5/448)----------
command: main -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.ciReplay.TestVMNoCompLevel
reason: User specified action: run main/othervm -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.ciReplay.TestVMNoCompLevel 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
elapsed time (seconds): 2.402
----------configuration:(4/111)----------
Boot Layer
  add modules: java.base                   
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(24/10245)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-777/linux-x64-debug.jdk/jdk-17/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S204/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/178b0bda-7f0c-49c4-a1ab-af7220b7cb88/runs/99419c83-0aba-48e2-87c9-6874df8b4f8f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/classes/1/compiler/ciReplay/TestVMNoCompLevel.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-777/src.full/open/test/hotspot/jtreg/compiler/ciReplay:/opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S204/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/178b0bda-7f0c-49c4-a1ab-af7220b7cb88/runs/99419c83-0aba-48e2-87c9-6874df8b4f8f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/classes/1:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-777/src.full/open/test/hotspot/jtreg:/opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S204/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/178b0bda-7f0c-49c4-a1ab-af7220b7cb88/runs/99419c83-0aba-48e2-87c9-6874df8b4f8f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/classes/1/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-777/src.full/open/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/5.1/b01/bundles/jtreg_bin-5.1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/5.1/b01/bundles/jtreg_bin-5.1.zip/jtreg/lib/jtreg.jar -XX:MaxRAMPercentage=6 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S204/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/178b0bda-7f0c-49c4-a1ab-af7220b7cb88/runs/99419c83-0aba-48e2-87c9-6874df8b4f8f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/tmp -XX:+CreateCoredumpOnCrash -XX:+UseZGC -client -version ]
[2021-02-19T21:50:01.023205039Z] Gathering output for process 25328
[2021-02-19T21:50:01.351520426Z] Waiting for completion for process 25328
[2021-02-19T21:50:01.351752244Z] Waiting for completion finished for process 25328
Output and diagnostic info for process 25328 was saved into 'pid-25328-output.log'
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-777/linux-x64-debug.jdk/jdk-17/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S204/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/178b0bda-7f0c-49c4-a1ab-af7220b7cb88/runs/99419c83-0aba-48e2-87c9-6874df8b4f8f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/classes/1/compiler/ciReplay/TestVMNoCompLevel.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-777/src.full/open/test/hotspot/jtreg/compiler/ciReplay:/opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S204/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/178b0bda-7f0c-49c4-a1ab-af7220b7cb88/runs/99419c83-0aba-48e2-87c9-6874df8b4f8f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/classes/1:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-777/src.full/open/test/hotspot/jtreg:/opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S204/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/178b0bda-7f0c-49c4-a1ab-af7220b7cb88/runs/99419c83-0aba-48e2-87c9-6874df8b4f8f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/classes/1/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-777/src.full/open/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/5.1/b01/bundles/jtreg_bin-5.1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/5.1/b01/bundles/jtreg_bin-5.1.zip/jtreg/lib/jtreg.jar -XX:MaxRAMPercentage=6 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S204/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/178b0bda-7f0c-49c4-a1ab-af7220b7cb88/runs/99419c83-0aba-48e2-87c9-6874df8b4f8f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/tmp -XX:+CreateCoredumpOnCrash -XX:+UseZGC -server -version ]
[2021-02-19T21:50:01.371674317Z] Gathering output for process 25397
[2021-02-19T21:50:01.709210635Z] Waiting for completion for process 25397
[2021-02-19T21:50:01.709466330Z] Waiting for completion finished for process 25397
Output and diagnostic info for process 25397 was saved into 'pid-25397-output.log'
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-777/linux-x64-debug.jdk/jdk-17/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S204/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/178b0bda-7f0c-49c4-a1ab-af7220b7cb88/runs/99419c83-0aba-48e2-87c9-6874df8b4f8f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/classes/1/compiler/ciReplay/TestVMNoCompLevel.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-777/src.full/open/test/hotspot/jtreg/compiler/ciReplay:/opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S204/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/178b0bda-7f0c-49c4-a1ab-af7220b7cb88/runs/99419c83-0aba-48e2-87c9-6874df8b4f8f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/classes/1:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-777/src.full/open/test/hotspot/jtreg:/opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S204/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/178b0bda-7f0c-49c4-a1ab-af7220b7cb88/runs/99419c83-0aba-48e2-87c9-6874df8b4f8f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/classes/1/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-777/src.full/open/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/5.1/b01/bundles/jtreg_bin-5.1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/5.1/b01/bundles/jtreg_bin-5.1.zip/jtreg/lib/jtreg.jar -XX:MaxRAMPercentage=6 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S204/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/178b0bda-7f0c-49c4-a1ab-af7220b7cb88/runs/99419c83-0aba-48e2-87c9-6874df8b4f8f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/tmp -XX:+CreateCoredumpOnCrash -XX:+UseZGC -Xms128m -Xmx128m -XX:MetaspaceSize=4m -XX:MaxMetaspaceSize=16m -XX:InitialCodeCacheSize=512k -XX:ReservedCodeCacheSize=4m -XX:ThreadStackSize=512 -XX:VMThreadStackSize=512 -XX:CompilerThreadStackSize=512 -XX:ParallelGCThreads=1 -XX:CICompilerCount=2 -XX:-BackgroundCompilation -XX:CompileCommand=inline,java.io.PrintStream::* -XX:+IgnoreUnrecognizedVMOptions -XX:TypeProfileLevel=222 -XX:CICrashAt=1 -XX:+DumpReplayDataOnError -XX:+PreferInterpreterNativeStubs -XX:ReplayDataFile=test_replay.txt -XX:-CreateCoredumpOnCrash -XX:CompileOnly=compiler.ciReplay.CiReplayBase$TestMain::test compiler.ciReplay.CiReplayBase$TestMain ]
[2021-02-19T21:50:01.736132860Z] Gathering output for process 25513
[2021-02-19T21:50:02.057636122Z] Waiting for completion for process 25513
[2021-02-19T21:50:02.057878630Z] Waiting for completion finished for process 25513
Output and diagnostic info for process 25513 was saved into 'pid-25513-output.log'
[2021-02-19T21:50:02.059670851Z] Waiting for completion for process 25513
[2021-02-19T21:50:02.059862302Z] Waiting for completion finished for process 25513
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-777/linux-x64-debug.jdk/jdk-17/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S204/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/178b0bda-7f0c-49c4-a1ab-af7220b7cb88/runs/99419c83-0aba-48e2-87c9-6874df8b4f8f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/classes/1/compiler/ciReplay/TestVMNoCompLevel.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-777/src.full/open/test/hotspot/jtreg/compiler/ciReplay:/opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S204/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/178b0bda-7f0c-49c4-a1ab-af7220b7cb88/runs/99419c83-0aba-48e2-87c9-6874df8b4f8f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/classes/1:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-777/src.full/open/test/hotspot/jtreg:/opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S204/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/178b0bda-7f0c-49c4-a1ab-af7220b7cb88/runs/99419c83-0aba-48e2-87c9-6874df8b4f8f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/classes/1/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-777/src.full/open/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/5.1/b01/bundles/jtreg_bin-5.1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/5.1/b01/bundles/jtreg_bin-5.1.zip/jtreg/lib/jtreg.jar -XX:MaxRAMPercentage=6 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S204/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/178b0bda-7f0c-49c4-a1ab-af7220b7cb88/runs/99419c83-0aba-48e2-87c9-6874df8b4f8f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/tmp -XX:+CreateCoredumpOnCrash -XX:+UseZGC -XX:-CreateCoredumpOnCrash -XX:+IgnoreUnrecognizedVMOptions -XX:TypeProfileLevel=222 -XX:+ReplayCompiles -XX:ReplayDataFile=test_replay.txt -XX:-TieredCompilation -server ]
[2021-02-19T21:50:02.132003361Z] Gathering output for process 25548
[2021-02-19T21:50:02.548573161Z] Waiting for completion for process 25548
[2021-02-19T21:50:02.554937380Z] Waiting for completion finished for process 25548
Output and diagnostic info for process 25548 was saved into 'pid-25548-output.log'
[2021-02-19T21:50:02.556629280Z] Waiting for completion for process 25548
[2021-02-19T21:50:02.556790034Z] Waiting for completion finished for process 25548
----------System.err:(19/1427)----------
java.lang.RuntimeException: Unexpected exit code for positive case: [-XX:-TieredCompilation, -server]: expected 1 to equal 0
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.Asserts.assertEQ(Asserts.java:178)
	at compiler.ciReplay.CiReplayBase.positiveTest(CiReplayBase.java:241)
	at compiler.ciReplay.TestVMNoCompLevel.testAction(TestVMNoCompLevel.java:74)
	at compiler.ciReplay.CiReplayBase.runTest(CiReplayBase.java:118)
	at compiler.ciReplay.TestVMNoCompLevel.main(TestVMNoCompLevel.java:48)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Unexpected exit code for positive case: [-XX:-TieredCompilation, -server]: expected 1 to equal 0
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Unexpected exit code for positive case: [-XX:-TieredCompilation, -server]: expected 1 to equal 0
----------rerun:(42/8394)*----------

<snip>

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Unexpected exit code for positive case: [-XX:-TieredCompilation, -server]: expected 1 to equal 0


An ""exit code == 1"" failure with no other error messages is
usually an indicator of the OomKiller on Linux-X64 machines.

The test task's JVM args are: -XX:+CreateCoredumpOnCrash -XX:+UseZGC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8254106,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2rncb:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-02-22 23:08;thartmann;ILW = Test fails due unexpected exit code, only happened twice with single test, no workaround = MLH = P4;;;","2021-02-22 23:14;thartmann;[2021-02-19T21:50:02.132003361Z] Gathering output for process 25548
[2021-02-19T21:50:02.548573161Z] Waiting for completion for process 25548
[2021-02-19T21:50:02.554937380Z] Waiting for completion finished for process 25548
Output and diagnostic info for process 25548 was saved into 'pid-25548-output.log'
[2021-02-19T21:50:02.556629280Z] Waiting for completion for process 25548
[2021-02-19T21:50:02.556790034Z] Waiting for completion finished for process 25548

I've checked the contents of 'pid-25548-output.log':

--- ProcessLog ---
cmd: sh -c ulimit -S -c 0 && /opt/mach5/mesos/work_dir/jib-master/install/2021-02-21-1311103.vladimir.x.ivanov.jdk/linux-x64-debug.jdk/jdk-17/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S178/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0d699e49-028a-4ae7-8889-034dab04c9c6/runs/b849005f-5106-45ad-a6b9-ffbdaac8742a/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler/classes/0/compiler/ciReplay/TestVMNoCompLevel.d:/opt/mach5/mesos/work_dir/jib-master/install/2021-02-21-1311103.vladimir.x.ivanov.jdk/src.full/open/test/hotspot/jtreg/compiler/ciReplay:/opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S178/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0d699e49-028a-4ae7-8889-034dab04c9c6/runs/b849005f-5106-45ad-a6b9-ffbdaac8742a/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler/classes/0:/opt/mach5/mesos/work_dir/jib-master/install/2021-02-21-1311103.vladimir.x.ivanov.jdk/src.full/open/test/hotspot/jtreg:/opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S178/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0d699e49-028a-4ae7-8889-034dab04c9c6/runs/b849005f-5106-45ad-a6b9-ffbdaac8742a/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler/classes/0/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/2021-02-21-1311103.vladimir.x.ivanov.jdk/src.full/open/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/5.1/b01/bundles/jtreg_bin-5.1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/5.1/b01/bundles/jtreg_bin-5.1.zip/jtreg/lib/jtreg.jar -XX:MaxRAMPercentage=6 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/35ca6ea2-bf72-41ef-89b8-0c013c60cac4-S178/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0d699e49-028a-4ae7-8889-034dab04c9c6/runs/b849005f-5106-45ad-a6b9-ffbdaac8742a/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler/tmp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+UseNewCode -XX:-CreateCoredumpOnCrash -XX:+IgnoreUnrecognizedVMOptions -XX:TypeProfileLevel=222 -XX:+ReplayCompiles -XX:ReplayDataFile=test_replay.txt -XX:-TieredCompilation -server
exitvalue: 1
stderr: 
stdout: java.lang.NoClassDefFoundError: sun/util/cldr/CLDRLocaleProviderAdapter$$Lambda$1+0x0000000801044b00
Error while parsing line 9: sun/util/cldr/CLDRLocaleProviderAdapter$$Lambda$1+0x0000000801044b00

java.lang.NoClassDefFoundError: sun/util/cldr/CLDRLocaleProviderAdapter$$Lambda$1+0x0000000801044b00
Caused by: java.lang.ClassNotFoundException: sun.util.cldr.CLDRLocaleProviderAdapter$$Lambda$1+0x0000000801044b00
	at jdk.internal.loader.BuiltinClassLoader.loadClass(java.base@17-internal/BuiltinClassLoader.java:636)
	at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(java.base@17-internal/ClassLoaders.java:182)
	at java.lang.ClassLoader.loadClass(java.base@17-internal/ClassLoader.java:519)

Failed on sun/util/cldr/CLDRLocaleProviderAdapter$$Lambda$1+0x0000000801044b00



Looks like class loading was triggered by replay compilation. The replay compilation file includes:

instanceKlass sun/util/cldr/CLDRLocaleProviderAdapter$$Lambda$1+0x0000000801044b00
;;;","2021-02-23 22:40;thartmann;The fix might be as simple as adding -XX:+ReplayIgnoreInitErrors to the command line.;;;","2021-03-02 07:10;enikitin;> The fix might be as simple as adding -XX:+ReplayIgnoreInitErrors to the command line.

I confirm, that fixes the problem, the test passes.
Having said that, I think that an only-temporary acceptable workaround at best.;;;","2021-03-04 12:07;roboduke;Changeset: c8b23e22
Author:    Dean Long <dlong@openjdk.org>
Date:      2021-03-04 20:07:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c8b23e22
;;;",,,,,,,,,,,,,,,,,,,,,,,
compiler/whitebox/BlockingCompilation.java timed out,JDK-8262060,5042460,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,enikitin,dcubed,dcubed,2021-02-19 14:23,2023-02-17 02:19,2023-10-01 09:58,2021-04-16 07:34,17,,,,,,,,17,hotspot,,0,hs-comp-triaged,intermittent,investigate-UT,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,oracle-triage-17,tier3,tier6,,,,,,,,,,,,,,"The following test timed out in the JDK17 CI:

compiler/whitebox/BlockingCompilation.java

Here's a snippet from the log file:

#section:main
----------messages:(7/564)----------
command: main -Xbootclasspath/a:. -Xmixed -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+PrintCompilation compiler.whitebox.BlockingCompilation
reason: User specified action: run main/othervm -Xbootclasspath/a:. -Xmixed -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+PrintCompilation compiler.whitebox.BlockingCompilation 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
Timeout information:
--- Timeout information end.
elapsed time (seconds): 507.548
----------configuration:(4/111)----------
Boot Layer
  add modules: java.base                   
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(314/25030)----------
    181    1       3       java.lang.String::isLatin1 (19 bytes)
    187    2       3       java.lang.String::hashCode (60 bytes)
    189    3       3       java.lang.StringLatin1::hashCode (42 bytes)

<snip>

  25891  255       3       sun.hotspot.WhiteBox::isMethodCompiled (12 bytes)
  25990  256     n 0       java.lang.Thread::sleep (native)   (static)
  38704  257     n 0       sun.hotspot.WhiteBox::isMethodCompiled0 (native)   
Timeout refired 480 times
 481265  258       3       java.util.HashMap::putVal (300 bytes)
 481266  261     n 0       jdk.internal.misc.Unsafe::putReferenceVolatile (native)   
 481269  264       4       java.lang.AbstractStringBuilder::ensureCapacityInternal (39 bytes)

<snip>

 495431  281       3       java.lang.invoke.MethodType::equals (56 bytes)
 495433  284       3       java.lang.invoke.MethodType::checkSlotCount (33 bytes)
 495435  282       1       java.util.HashMap::size (5 bytes)
----------System.err:(0/0)----------
----------rerun:(44/8460)*----------

<snip>

result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-775/linux-x64-debug.jdk/jdk-17/fastdebug/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 507545ms).
",,,,,,,,,,JDK-8302726,JDK-8300835,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2rnb7:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-02-22 23:01;thartmann;ILW = Test times out, intermittent with single test at tier3, no workaround = MLH = P4;;;","2021-02-22 23:34;thartmann;I checked the timeout handler information. The problem is that the MainThread waits forever for the test method to be compiled:

""MainThread"" #16 prio=5 os_prio=0 cpu=175.15ms elapsed=495.80s allocated=300K defined_classes=38 tid=0x00007f87f02987c0 nid=0x503a waiting on condition  [0x00007f87f4cf1000]
   java.lang.Thread.State: TIMED_WAITING (sleeping)
Thread: 0x00007f87f02987c0  [0x503a] State: _at_safepoint _at_poll_safepoint 0
   JavaThread state: _thread_blocked
	at java.lang.Thread.sleep(java.base@17-ea/Native Method)
	at compiler.whitebox.BlockingCompilation.main(BlockingCompilation.java:92)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(java.base@17-ea/Native Method)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(java.base@17-ea/NativeMethodAccessorImpl.java:78)
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(java.base@17-ea/DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(java.base@17-ea/Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.lang.Thread.run(java.base@17-ea/Thread.java:831)

I.e. it hangs in this code:

        while (!WB.isMethodCompiled(m)) {
          Thread.sleep(100);
        }

And the method is not even in the compile queue:

----------------------------------------
[2021-02-22 13:18:41] [/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+11-790/linux-x64-debug.jdk/jdk-17/fastdebug/bin/jcmd, 20518, Compiler.queue] timeout=20000
----------------------------------------
20518:
Current compiles: 

C1 compile queue:
Empty

C2 compile queue:
Empty

----------------------------------------
[2021-02-22 13:18:42] exit code: 0 time: 697 ms
----------------------------------------

It was already deoptimized:

    433  188       4       compiler.whitebox.BlockingCompilation::foo (7 bytes)
[...]
    442  188       4       compiler.whitebox.BlockingCompilation::foo (7 bytes)   made not entrant;;;","2021-02-23 09:30;kvn;May be it is similar to JDK-8260301 where there is small time window when compilation finished but WB did not get the information about it.;;;","2021-02-23 09:49;thartmann;I think the problem is that the test does not expect that BlockingCompilation::foo is deoptimized at the following point in test execution:

        if (!WB.isMethodQueuedForCompilation(m)) {
            throw new Exception(""Must be enqueued because of locked compilation"");
        }

        // restore state
        WB.unlockCompilation();

// Method m is deoptimized here

        while (!WB.isMethodCompiled(m)) {
          Thread.sleep(100);
        };;;","2021-02-23 09:51;thartmann;But I'm wondering why that simple method is even deoptimized.;;;","2021-02-23 10:06;kvn;-XX:+LogCompilation can shows why it is deoptimized if you can reproduce it. May dependencies (CHA) changed.;;;","2021-02-23 10:56;kvn;JVM deoptimizes all nmethods when some base class is redefined:
https://github.com/openjdk/jdk/blob/master/src/hotspot/share/prims/jvmtiRedefineClasses.cpp#L4098;;;","2021-02-23 22:37;thartmann;Marking this as test bug for now.;;;","2021-03-01 12:13;enikitin;> But I'm wondering why that simple method is even deoptimized.

The method uses java.util.Random.nextInt(). Can something within that method/class cause the deoptimization?;;;","2021-03-01 23:11;thartmann;> The method uses java.util.Random.nextInt(). Can something within that method/class cause the deoptimization?

Yes, as Vladimir mentioned it's likely that CHA dependencies were violated due to class (un)loading or redefinition. Once you can reproduce, -XX:+TraceDeoptimization should print the reason and the fix would simply replace the usage of the ""shared"" java.util.Random.nextInt in the test method by something that is local to the test (and therefore not affected by changes in the class hierarchy).;;;","2021-04-16 07:34;roboduke;Changeset: 694e1cdc
Author:    Evgeny Nikitin <enikitin@openjdk.org>
Committer: Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-04-16 14:33:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/694e1cdc
;;;","2023-02-16 07:09;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2023-02-16 07:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1757
Date: 2023-02-16 15:13:46 +0000;;;",,,,,,,,,,,,,,,
[TESTBUG] Fix TestReferenceRefersTo.java for Shenandoah IU mode,JDK-8262049,5042447,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2021-02-19 11:38,2021-03-01 16:40,2023-10-01 09:58,2021-02-23 13:44,16,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,Shenandoah's IU mode allows referents to be cleared even when accessed during concurrent marking. The test TestReferenceRefersTo.java needs to be adjusted to allow for that.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262266,JDK-8261473,,,,,JDK-8262122,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rn8b:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-02-23 13:44;roboduke;Changeset: c6eae061
Author:    Roman Kennke <rkennke@openjdk.org>
Date:      2021-02-23 21:43:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c6eae061
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/xml/jaxp/unittest/common/prettyprint/PrettyPrintTest.java fails after JDK-8260858,JDK-8262041,5042435,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,joehw,dcubed,dcubed,2021-02-19 08:35,2021-07-31 04:29,2023-10-01 09:58,2021-02-19 18:38,17,,,,,,,,17,xml,,0,tier2,,,,,,,,,,,,,,,,,,,,,,"The following test is failing in the JDK17 CI:

javax/xml/jaxp/unittest/common/prettyprint/PrettyPrintTest.java

Here's a snippet from the log file:

----------System.out:(709/45889)----------
[TestNG] Running:
  javax/xml/jaxp/unittest/common/prettyprint/PrettyPrintTest.java

test common.prettyprint.PrettyPrintTest.testDisableOutputEscaping(): success
test common.prettyprint.PrettyPrintTest.testIsStandalone_DOMLS(true, false, true, true, ""<?xml version=""1.0"" encoding=""UTF-8""?>
<sometag/>
""): success
test common.prettyprint.PrettyPrintTest.testIsStandalone_DOMLS(true, false, true, false, ""<?xml version=""1.0"" encoding=""UTF-8""?><sometag/>
""): success
test common.prettyprint.PrettyPrintTest.testIsStandalone_DOMLS(true, true, false, true, ""<?xml version=""1.0"" encoding=""UTF-8""?>
<sometag/>
""): success
test common.prettyprint.PrettyPrintTest.testIsStandalone_DOMLS(true, true, false, false, ""<?xml version=""1.0"" encoding=""UTF-8""?><sometag/>
""): success
test common.prettyprint.PrettyPrintTest.testIsStandalone_DOMLS(true, false, false, false, ""<?xml version=""1.0"" encoding=""UTF-8""?><sometag/>
""): success
test common.prettyprint.PrettyPrintTest.testIsStandalone_DOMLS(false, false, true, true, ""<?xml version=""1.0"" encoding=""UTF-8""?>
<sometag/>""): success
test common.prettyprint.PrettyPrintTest.testIsStandalone_DOMLS(false, true, false, true, ""<?xml version=""1.0"" encoding=""UTF-8""?>
<sometag/>""): success
test common.prettyprint.PrettyPrintTest.testIsStandalone_Template(""<?xml version=""1.0""?>
<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">

<!--Identity template, copies all content into the output -->
    <xsl:template match=""@*|node()"">
        <xsl:copy>
            <xsl:apply-templates select=""@*|node()""/>
        </xsl:copy>
    </xsl:template>

</xsl:stylesheet>"", true, false, true, true, ""<?xml version=""1.0"" encoding=""UTF-8""?>
<sometag/>
""): failure
java.lang.AssertionError: expected [<?xml version=""1.0"" encoding=""UTF-8""?>
<sometag/>
] but found [<?xml version=""1.0"" encoding=""UTF-8""?>
<sometag/>
]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertEquals(Assert.java:125)
	at org.testng.Assert.assertEquals(Assert.java:178)
	at org.testng.Assert.assertEquals(Assert.java:188)
	at common.prettyprint.PrettyPrintTest.testIsStandalone_Template(PrettyPrintTest.java:206)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

I'm starting this bug out as a P2 even though this is Tier2
test failure because the failure has appeared in every Tier2
CI job set since the following fix was integrated:

    JDK-8260858 Implementation specific property xsltcIsStandalone for XSLTC Serializer",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260858,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2rn5n:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,Verified,,"2021-02-19 08:37;dcubed;[~joehw] - Please take a look at this test failure.;;;","2021-02-19 08:43;dcubed;This test failure first happened in jdk-17+11-764-tier2 which includes the fix for:

JDK-8260858 Implementation specific property xsltcIsStandalone for XSLTC Serializer

In jdk-17+11-764-tier2, the test only failed on Win*; the test passed
on linux-aarch64, linux-x64, linux-x64-debug, and macos-x64.;;;","2021-02-19 09:03;joehw;My mach5 tests (windows/linux) passed at the time. Will set up on a Windows box to check it out.;;;","2021-02-19 18:38;roboduke;Changeset: 47559584
Author:    Joe Wang <joehw@openjdk.org>
Date:      2021-02-20 02:37:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/47559584
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Use ucrypto_free_context for clean operation in Solaris Ucrypto/pkcs11,JDK-8262040,5042434,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pkumaraswamy,pkumaraswamy,pkumaraswamy,2021-02-19 08:32,2023-03-08 08:24,2023-10-01 09:58,2021-03-10 09:46,,,,,,,,,11.0.12-oracle,security-libs,,0,15-na,CPU21_04-critical-approved,CPU21_04-critical-SQE-OK,hgupdate-sync,openjdk8u-WNF,openjdk-na,,,,,,,,,,,,,,,,,"Currently OracleUcrypto Provider calls NativeCipher.nativeFinal(id, encrypt, null, 0); to free up context memory at native level. That leads to a ucryptoEncryptFinal type solaris call with NULL/0 passed for output Len. 

Solaris team have advised that ucrypto_free_context function be used instead. We'd have to investigate when this call became available on solaris.",,,,,,,,,,JDK-8263828,JDK-8262850,JDK-8263500,JDK-8264250,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260340,,,,,,,,,,,,,,,,,,,,,,,,,,solaris_11,,,,,,"0|i2rn5f:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2021-03-16 03:30;sgehwolf;ucrypto provider not available in OpenJDK 8. Marking openjdk8u-WNF.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve how HttpConnection detects a closed channel when taking/returning a connection to the pool,JDK-8262027,5042419,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2021-02-19 04:36,2021-03-01 16:41,2023-10-01 09:58,2021-02-24 02:51,,,,,,,,,17,core-libs,,0,httpclient,,,,,,,,,,,,,,,,,,,,,,"There is a race condition when the server closes a connection at roughly the same time that the client takes it of the pool. This is particularly observable when the server/proxy closes the connection just after returning 401/407, but can also be observed in other circumstances. 
The detection of a channel state could be improved by attempting to read one character off the connection just after taking the connection off the pool.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261605,,,,,,JDK-8262294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rn23:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-02-24 02:51;roboduke;Changeset: 0d2dbd29
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2021-02-24 10:50:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0d2dbd29
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong format in SAP copyright header of OsVersionTest,JDK-8262018,5042409,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2021-02-19 02:31,2021-03-01 16:35,2023-10-01 09:58,2021-02-19 06:45,17,,,,,,,,17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-yes,,,,,,,,,,,,,,,,,,,"The fix for JDK-8261753 introduced a ',' after the copyright years which is not the expected format for SAP copyrights. ",,,,,,,,,,JDK-8262170,JDK-8262250,JDK-8262120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261753,,,,,,,,,,,,,,,,,,,,,,,b10,,,,,,,,,"0|i2rmzv:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-02-19 06:45;roboduke;Changeset: efbaedeb
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2021-02-19 14:44:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/efbaedeb
;;;","2021-02-19 06:49;clanger;Fix request (11u, 16u):
Follow up fix to JDK-8261753 which left the test with a wrong copyright format. Applies clean, no risk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(n != __null) failed: Bad immediate dominator info.,JDK-8262017,5042408,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,chagedorn,chagedorn,2021-02-19 02:22,2022-04-29 00:22,2023-10-01 09:58,2021-07-02 00:44,11,16,17,,,,,,17,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,"The attached fuzzer test fails with the following assertion:

To reproduce:
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Reduced Reduced.java
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test Test.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0f76e7b4-d512-4e9f-a839-a1d961774dea-S25478/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/60e94edb-f7fc-4e5a-a4e6-8c5edee7d585/runs/23c637d1-6b4a-4721-8ba9-95c2854c397f/workspace/open/src/hotspot/share/opto/loopnode.hpp:1091), pid=18562, tid=18576
#  assert(n != __null) failed: Bad immediate dominator info.
#
# JRE version: Java(TM) SE Runtime Environment (17.0+10) (fastdebug build 17-ea+10-LTS-723)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+10-LTS-723, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12d0d8b]  PhaseIdealLoop::idom_no_update(unsigned int) const+0x16b
...........
Command Line: -Xmx1G -Xcomp -Xbatch -XX:-TieredCompilation -XX:CompileOnly=Test -XX:CompileCommand=quiet Test
...........
Current CompileTask:
C2:    313   10 % !b        Test::mainTest @ 119 (698 bytes)

Stack: [0x00007f22f64f8000,0x00007f22f65f9000],  sp=0x00007f22f65f2da0,  free space=1003k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12d0d8b]  PhaseIdealLoop::idom_no_update(unsigned int) const+0x16b
V  [libjvm.so+0x12dd201]  PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&, IdealLoopTree*, IdealLoopTree*, Node_List*&, Node_List*&, Node_List*&, Node_List&, unsigned int, PhaseIdealLoop::CloneLoopMode)+0x581
V  [libjvm.so+0x12debbf]  PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&, int, PhaseIdealLoop::CloneLoopMode, Node*)+0x124f
V  [libjvm.so+0x12a6ddf]  PhaseIdealLoop::create_slow_version_of_loop(IdealLoopTree*, Node_List&, int, PhaseIdealLoop::CloneLoopMode)+0xc3f
V  [libjvm.so+0x12a8df2]  PhaseIdealLoop::do_unswitching(IdealLoopTree*, Node_List&)+0x172
V  [libjvm.so+0x12a162e]  IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&) [clone .part.0]+0x4ce
V  [libjvm.so+0x12a1bbb]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x13b
V  [libjvm.so+0x12a1ab5]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x35
V  [libjvm.so+0x12cec78]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0xca8
V  [libjvm.so+0xa0ee9b]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x32b
V  [libjvm.so+0xa0c003]  Compile::Optimize()+0x14c3
V  [libjvm.so+0xa0de45]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1905
V  [libjvm.so+0x83a02a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa1dd11]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xea1
V  [libjvm.so+0xa1e998]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1840bf6]  JavaThread::thread_main_inner()+0x256
V  [libjvm.so+0x1847070]  Thread::call_run()+0x100
V  [libjvm.so+0x1533406]  thread_native_entry(Thread*)+0x116",,,,,,,,,,JDK-8271300,JDK-8269910,JDK-8269833,JDK-8270703,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277132,,,,,,JDK-8241114,JDK-8257813,,,,,"2021-02-19 02:21;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/93258/FuzzerUtils.java","2021-02-19 02:22;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/93257/Reduced.java","2021-02-19 02:21;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/93259/Test.java","2021-02-22 06:24;thartmann;Test2.java;https://bugs.openjdk.org/secure/attachment/93300/Test2.java","2021-02-19 02:21;chagedorn;hs_err_pid18562.log;https://bugs.openjdk.org/secure/attachment/93260/hs_err_pid18562.log",,,,,,,,,,,,,,,,,,,,,,"0|i2rmzn:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-02-22 06:24;thartmann;I've attached another test (Test2.java) that also triggers this.;;;","2021-02-23 07:43;fmatte;The crash has started with the fix of JDK-8250607
The fix itself looks right.
From [~chagedorn] ""We have more accurate type information available which probably allows some further optimization which trigger an existing bug
I think the change in JDK-8250607 for itself is correct""

I will analyze more...;;;","2021-02-26 04:00;fmatte;I will asiign myself and start analyzing it.;;;","2021-06-04 05:31;chagedorn;Test2.java seems to be a different issue from Test.java even though it results in the same assertion failure. It also fails with JDK 14 which Test.java does not. Will open a new bug for it.;;;","2021-07-02 00:44;roboduke;Changeset: 2db9005c
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-07-02 07:43:57 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/2db9005c07585b580b3ec0889b8b5e3ed0d0ca6a
;;;","2021-07-26 10:03;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.13-oracle. Doesn't apply cleanly. Review: https://github.com/openjdk/jdk11u-dev/pull/156;;;",,,,,,,,,,,,,,,,,,,,,,
"Classpath separator: Man page says semicolon; should be colon on Linux",JDK-8262004,5042204,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asotona,webbuggrp,webbuggrp,2021-02-16 16:44,2022-05-11 23:09,2023-10-01 09:58,2022-05-05 22:59,15,,,,,,,,19,tools,,0,dcsad,noreg-doc,reproducer-other,webbug,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Ubuntu 20.10, JDK 15

A DESCRIPTION OF THE PROBLEM :
In the Linux man file for the java command in JDK 15, the path arguments to options such as -classpath say ""A semicolon (;) separated list of directories..."" which is true on Windows but should say ""colon (:)"" when on a Linux system.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
man java | grep 'list of directories'

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Should say ""A colon (:) separated list of directories""
ACTUAL -
Says ""A semicolon (;) separated list of directories""

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux_ubuntu,,,,,,"0|i2rlqj:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5d8045fc,,,,,,,,,"2021-02-18 19:54;adev;Trying to confirm from the submitter, if he is using Oracle JDK or Open JDK. But the mail is bouncing as the email id used is **@example.com.
However, I am really not sure if it should be handled by us!
https://bugs.openjdk.java.net/browse/JDK-8251572?focusedCommentId=14386452&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14386452;;;","2022-05-04 02:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8530
Date: 2022-05-04 09:28:22 +0000;;;","2022-05-04 03:15;dholmes;The source for this is a single file and we don't have the means to generate platform specific variations. We can modify the java.1 file directly to address this but we will lose that modification whenever we regenerate the file from the source. So really this needs to be fixed at the source - which only Oracle can do.;;;","2022-05-04 03:24;asotona;OK, I'll work on it in parallel.
Thanks for the info!;;;","2022-05-05 23:03;dukebot;Changeset: 015cfda8
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2022-05-06 06:00:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/015cfda8e141eaaa3bad60e669c24e53039ca364
;;;",,,,,,,,,,,,,,,,,,,,,,,
"java/lang/instrument/VerifyLocalVariableTableOnRetransformTest.sh failed with ""TestCaseScaffoldException: DummyClassWithLVT did not match .class file""",JDK-8262002,5042391,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,dcubed,dcubed,2021-02-18 19:22,2023-01-12 10:37,2023-10-01 09:58,2021-05-06 11:35,17,,,,,,,,17,core-svc,,0,intermittent,investigate-UT,tier5,,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

java/lang/instrument/VerifyLocalVariableTableOnRetransformTest.sh

Here's a snippet from the log file:

VerifyLocalVariableTableOnRetransformTest$MyObserver.transform() sees 'java/util/NavigableSet' of 1179 bytes.
VerifyLocalVariableTableOnRetransformTest$MyObserver.transform() sees 'java/util/IdentityHashMap' of 13111 bytes.
VerifyLocalVariableTableOnRetransformTest$MyObserver.transform() sees 'java/util/IdentityHashMap$KeySet' of 3688 bytes.
ATestCaseScaffold$TestCaseScaffoldException: DummyClassWithLVT did not match .class file
	at ATestCaseScaffold.fail(ATestCaseScaffold.java:116)
	at ATestCaseScaffold.assertTrue(ATestCaseScaffold.java:129)
	at VerifyLocalVariableTableOnRetransformTest.verifyClassFileBuffer(VerifyLocalVariableTableOnRetransformTest.java:123)
	at VerifyLocalVariableTableOnRetransformTest.doRunTest(VerifyLocalVariableTableOnRetransformTest.java:72)
	at ATestCaseScaffold.runTest(ATestCaseScaffold.java:60)
	at VerifyLocalVariableTableOnRetransformTest.main(VerifyLocalVariableTableOnRetransformTest.java:66)
VerifyLocalVariableTableOnRetransformTest$MyObserver.transform() sees 'java/lang/Shutdown' of 2722 bytes.
VerifyLocalVariableTableOnRetransformTest$MyObserver.transform() sees 'java/lang/Shutdown$Lock' of 360 bytes.
ATestCaseScaffold$TestCaseScaffoldException: DummyClassWithLVT did not match .class file
FAIL: found 'did not match .class file' in the test output
INFO: 'javap -v' comparison between the .class files:
1c1
< Classfile /opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S9021/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ae50325a-a120-4da0-84a8-dec2fc9980d9/runs/89647b55-3da1-45c9-88a0-3170ea16b90f/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/classes/2/java/lang/instrument/VerifyLocalVariableTableOnRetransformTest.d/DummyClassWithLVT.class
---
> Classfile /opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S9021/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ae50325a-a120-4da0-84a8-dec2fc9980d9/runs/89647b55-3da1-45c9-88a0-3170ea16b90f/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/scratch/3/DummyClassWithLVT.class
3c3
<   SHA-256 checksum ba26964074fb3f240e485f46be66aa3afc302a60c1807410b6cadc618f104328
---
>   SHA-256 checksum e8ecc277c488978c3230e8cc6d51d404c6952492252d02f701e801c784952395
216a217,218
> InnerClasses:
>   public static final #106= #102 of #104; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles
242,243d243
< InnerClasses:
<   public static final #106= #102 of #104; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles
----------System.err:(0/0)----------
----------rerun:(31/3685)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292065,,,,,,JDK-8264667,,,,,,JDK-8222289,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,generic,,,,,,"0|i2rmvv:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@dc685aa,,,,,,,,,"2021-03-23 16:38;amenkov;javap reports the same content of the class bytes.
The only difference is order of the data
for compiled class javap reports BootstrapMethods and then InnerClasses,
for data received file class transformer javap reports InnerClasses and then BootstrapMethods.;;;","2021-03-23 16:43;amenkov;The test has a comment:
        // The HotSpot VM hands us class file bytes at initial class
        // load time that match the .class file contents. However,
        // according to the following spec that is not required:
        // http://docs.oracle.com/javase/7/docs/api/java/lang/instrument/Instrumentation.html#retransformClasses(java.lang.Class...)
        // This test exists to catch any unintentional change in
        // behavior by the HotSpot VM. If this behavior is intentionally
        // changed in the future, then this test will need to be
        // updated.
;;;","2021-03-23 16:46;amenkov;It's hard to say if the behavior was changes as looks like the test does not work as expected (and it's unknown how long).
For successful run it actually throws an exception:
InstrumentationHandoff JPLIS agent initialized
Reading test class from T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_instrument\\classes\\3\\java\\lang\\instrument\\VerifyLocalVariableTableOnRetransformTest.d\\DummyClassWithLVT.class
Read 1664 bytes.
VerifyLocalVariableTableOnRetransformTest$MyObserver.transform() sees 'java/lang/invoke/BoundMethodHandle$Species_LLLLL' of 3438 bytes.
VerifyLocalVariableTableOnRetransformTest$MyObserver.transform() sees 'java/lang/invoke/BoundMethodHandle$Species_LLLLL' of 3438 bytes.
Debugging message: tearDown beginning
Exception in thread ""main"" VerifyLocalVariableTableOnRetransformTest$MyObserver.transform() sees 'java/lang/Throwable$WrappedPrintStream' of 829 bytes.
VerifyLocalVariableTableOnRetransformTest$MyObserver.transform() sees 'java/lang/Throwable$PrintStreamOrWriter' of 489 bytes.
VerifyLocalVariableTableOnRetransformTest$MyObserver.transform() sees 'java/util/IdentityHashMap' of 13111 bytes.
VerifyLocalVariableTableOnRetransformTest$MyObserver.transform() sees 'java/util/IdentityHashMap$KeySet' of 3688 bytes.
java.lang.LinkageError: loader 'bootstrap' attempted duplicate class definition for java.lang.invoke.BoundMethodHandle$Species_LLLLL. (java.lang.invoke.BoundMethodHandle$Species_LLLLL is in module java.base of loader 'bootstrap')
VerifyLocalVariableTableOnRetransformTest$MyObserver.transform() sees 'java/lang/StackTraceElement$HashedModules' of 2352 bytes.
	at java.base/java.lang.ClassLoader.defineClass1(Native Method)
	at java.base/java.lang.System$2.defineClass(System.java:2192)
	at java.base/java.lang.invoke.ClassSpecializer$Factory.generateConcreteSpeciesCode(ClassSpecializer.java:586)
	at java.base/java.lang.invoke.ClassSpecializer$Factory.loadSpecies(ClassSpecializer.java:491)
	at java.base/java.lang.invoke.ClassSpecializer.findSpecies(ClassSpecializer.java:195)
	at java.base/java.lang.invoke.BoundMethodHandle$SpeciesData.extendWith(BoundMethodHandle.java:375)
	at java.base/java.lang.invoke.LambdaFormEditor.newSpeciesData(LambdaFormEditor.java:467)
	at java.base/java.lang.invoke.LambdaFormEditor.makeArgumentCombinationForm(LambdaFormEditor.java:890)
	at java.base/java.lang.invoke.LambdaFormEditor.filterArgumentsForm(LambdaFormEditor.java:1075)
	at java.base/java.lang.invoke.MethodHandles.argumentsWithCombiner(MethodHandles.java:6134)
	at java.base/java.lang.invoke.MethodHandles.filterArgumentsWithCombiner(MethodHandles.java:6099)
	at java.base/java.lang.invoke.StringConcatFactory.generateMHInlineCopy(StringConcatFactory.java:597)
	at java.base/java.lang.invoke.StringConcatFactory.makeConcatWithConstants(StringConcatFactory.java:358)
	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:102)
	at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:315)
	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:281)
	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:271)
	at ATransformerManagementTestCase.addTransformerToManager(ATransformerManagementTestCase.java:121)
	at VerifyLocalVariableTableOnRetransformTest.verifyClassFileBuffer(VerifyLocalVariableTableOnRetransformTest.java:83)
	at VerifyLocalVariableTableOnRetransformTest.doRunTest(VerifyLocalVariableTableOnRetransformTest.java:72)
	at ATestCaseScaffold.runTest(ATestCaseScaffold.java:60)
	at VerifyLocalVariableTableOnRetransformTest.main(VerifyLocalVariableTableOnRetransformTest.java:66)
VerifyLocalVariableTableOnRetransformTest$MyObserver.transform() sees 'java/lang/Shutdown' of 2722 bytes.
VerifyLocalVariableTableOnRetransformTest$MyObserver.transform() sees 'java/lang/Shutdown$Lock' of 360 bytes.
PASS: did NOT find 'did not match .class file' in the test output

But shell script does not detect this.
;;;","2021-04-02 16:21;amenkov;Updated test to avoid LinkageError (see JDK-8264667).
""DummyClassWithLVT did not match .class file"" error is not reproducible with jdk11, is reproducible with jdk13 (initial release)
;;;","2021-04-06 15:41;amenkov;JDK-8222289 changed javac output in jdk 13 - changed order innerClasses->bootstrapMethods to bootstrapMethods->innerClasses
Looks like this change of order was unintentional, review thread does not mention this: https://mail.openjdk.java.net/pipermail/compiler-dev/2019-April/013205.html
So we have 3 ways to handle the failure:
1. restore original order in javac;
2. update JvmtiClassFileReconstituter to be in sync with javac
3. update the test to handle the difference between javac output and retransformClasses class file bytes (the test verifies that LocalVariableTable is passed to class transformers)
;;;","2021-05-06 11:35;roboduke;Changeset: 52f1db6b
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2021-05-06 18:34:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/52f1db6b6f7f5e5823ee84fc31edddf89ed21df4
;;;",,,,,,,,,,,,,,,,,,,,,,
"java/lang/management/ThreadMXBean/ResetPeakThreadCount.java failed with ""RuntimeException: Current Peak = 14 Expected to be == previous peak = 7 + 8""",JDK-8262001,5042390,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,dcubed,dcubed,2021-02-18 19:17,2022-11-28 14:16,2023-10-01 09:58,2021-03-18 13:50,17,,,,,,,,17,core-svc,,0,intermittent,investigate-UT,testbug,tier5,tier6,,,,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

java/lang/management/ThreadMXBean/ResetPeakThreadCount.java

Here's a snippet from the log file:

#section:main
----------messages:(5/234)----------
command: main ResetPeakThreadCount
reason: User specified action: run main/othervm ResetPeakThreadCount 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.management
elapsed time (seconds): 1.206
----------configuration:(3/43)----------
Boot Layer
  add modules: java.management

----------System.out:(3/132)----------
Reset peak before = 7 current = 7 after reset peak = 7 current = 7
Starting 8 threads....
   Current = 14 Peak before = 7 after: 14
----------System.err:(14/996)----------
java.lang.RuntimeException: Current Peak = 14 Expected to be == previous peak = 7 + 8
	at ResetPeakThreadCount.startThreads(ResetPeakThreadCount.java:157)
	at ResetPeakThreadCount.main(ResetPeakThreadCount.java:81)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Current Peak = 14 Expected to be == previous peak = 7 + 8
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Current Peak = 14 Expected to be == previous peak = 7 + 8
----------rerun:(41/5955)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279357,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2rmvn:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2021-02-21 13:39;dholmes;Count is always off by one, so an unexpected thread has been created somewhere.

Correction: count is off by one but a thread is missing:

----------System.out:(3/132)----------
Reset peak before = 8 current = 8 after reset peak = 8 current = 8
Starting 8 threads....
   Current = 15 Peak before = 8 after: 15

We had a peak of 8 then started 8 threads so should have 16. So one thread has terminated.;;;","2021-02-21 16:28;dholmes;The test itself notes:

 // This test does not expect any threads to be created
 // by the test harness after main() is invoked.

but it is more fragile than that as it is also impacted by any system threads that might terminate whilst the thread is running - and this is what happens in the current failure mode.;;;","2021-03-05 14:30;amenkov;We had similar issue with other ThreadMXBean test (JDK-8131745).
The test assumes no threads are created or terminated during the test execution.
Actually without the assumption it's hard to test the functionality.
;;;","2021-03-18 13:50;roboduke;Changeset: c82a673c
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2021-03-18 20:10:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c82a673c
;;;",,,,,,,,,,,,,,,,,,,,,,,,
"jdk/jfr/event/gc/detailed/TestPromotionFailedEventWithParallelScavenge.java failed with ""OutOfMemoryError: Java heap space"" ",JDK-8262000,5042389,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ehelin,dcubed,dcubed,2021-02-18 19:10,2021-06-25 02:10,2023-10-01 09:58,2021-03-04 05:20,17,,,,,,,,17,hotspot,,0,intermittent,investigate-UT,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,testbug,tier5,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

jdk/jfr/event/gc/detailed/TestPromotionFailedEventWithParallelScavenge.java

Here's a snippet from the log file:

stderr: [Exception in thread ""main"" java.lang.OutOfMemoryError: Java heap space",,,,,,,,,,JDK-8267400,JDK-8268892,JDK-8269367,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2rmvf:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-02-23 06:56;egahlin;This looks like GC related test issue. Perhaps memory needs to be increased?;;;","2021-03-04 05:20;roboduke;Changeset: d2c4ed08
Author:    Leo Korinth <lkorinth@openjdk.org>
Date:      2021-03-04 13:20:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d2c4ed08
;;;","2021-06-01 00:20;shade;Fix Request (11u)

This removes the overly strong assert and keeps codebases in sync (I see 11.0.13-oracle). Patch applies cleanly to 11u, passes tier1, passes affected test.;;;","2021-06-01 00:28;shade;Fix Request (8u)

Same reason as for 11u. Patch applies with usual path reshuffling. jdk_jfr does not regress.;;;",,,,,,,,,,,,,,,,,,,,,,,,
"compiler/c2/TestUnsignedByteCompare1.java times out with ""-XX:TieredStopAtLevel=1""",JDK-8261989,5042376,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,iveresov,lmesnik,lmesnik,2021-02-18 14:54,2021-02-22 10:54,2023-10-01 09:58,2021-02-22 10:54,17,,,,,,,,,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"Test compiler/c2/TestUnsignedByteCompare1.java
run 0xFF * 20_000 iteration of some verifications and times out with C1.

The stack shows that test spend a lot of time in pattern matching in String.format(...);


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261225,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rmsj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-02-18 14:57;lmesnik;The fix in the test might be pretty simple like the following diff. However, it is needed to check if it is expected that C1 compiled String.format(..) works so slow. (Test times out after 10 minutes)

diff --git a/test/hotspot/jtreg/compiler/c2/TestUnsignedByteCompare1.java b/test/hotspot/jtreg/compiler/c2/TestUnsignedByteCompare1.java
index ef035e89241..b64fef349ed 100644
--- a/test/hotspot/jtreg/compiler/c2/TestUnsignedByteCompare1.java
+++ b/test/hotspot/jtreg/compiler/c2/TestUnsignedByteCompare1.java
@@ -66,7 +66,7 @@ public class TestUnsignedByteCompare1 {
     }

     static String errorMessage(byte b, String type) {
-        return String.format(""%s: val=0x%x mask=0x%x"", type, b, mask());
+        return type + "": val=0x"" + Integer.toHexString(b) + "" mask=0x"" + Integer.toHexString(mask());
     }

     // Mutable mask as a compile-time constant.;;;","2021-02-18 15:03;lmesnik;BTW, we don't run this config in CI, I found it while testing loom, but an issue exists in the latest jdk-17-11-757.;;;","2021-02-22 10:52;iveresov;This test is just too slow with C1 because it can't EA all these string allocations in errorMessage(). Anyways, the test is designed to be run by C2 and JDK-8261225 fixes that.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Fix comment for getPrefixed() in canonicalize_md.c,JDK-8261977,5042360,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenyuk,asemenyuk,asemenyuk,2021-02-18 11:28,2021-03-01 16:34,2023-10-01 09:58,2021-02-18 12:55,17,,,,,,,,17,client-libs,,0,sn_87,,,,,,,,,,,,,,,,,,,,,,"The fix for JDK-8235397 issue made a portion of a comment for getPrefixed() function in src/java.base/windows/native/libjava/canonicalize_md.c misleading.
The comment should be changed from 

/* The appropriate location of getPrefixed() is io_util_md.c, but it is
   also used in a non-OpenJDK context within Oracle. There, canonicalize_md.c
   is already pulled in and compiled, so to avoid more complicated solutions
   we keep this method here.
 */

to:

/* The appropriate location of getPrefixed() is io_util_md.c
 */
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8235397,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,,"0|i2rmoz:",9223372036854775807,b11,,,,,,,,,,,,"2021-02-18 12:55;roboduke;Changeset: 0c31d5b9
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2021-02-18 20:54:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0c31d5b9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Missing ""classpath exception"" in VectorSupport.java",JDK-8261975,5042357,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psandoz,dcherepanov,dcherepanov,2021-02-18 10:29,2021-03-01 16:38,2023-10-01 09:58,2021-02-22 16:45,16,17,,,,,,,17,core-libs,,0,oracle-triage-17,vectorapi,,,,,,,,,,,,,,,,,,,,,"Missing ""classpath exception"" in the license header of src/java.base/share/classes/jdk/internal/vm/vector/VectorSupport.java  (added by JDK-8223347)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rmob:",9223372036854775807,b11,,,,,,,,,,,,"2021-02-18 18:02;iignatyev;[~psandoz], could you please take care of fixing the license header?;;;","2021-02-22 16:45;roboduke;Changeset: 0217d699
Author:    Paul Sandoz <psandoz@openjdk.org>
Date:      2021-02-23 00:44:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0217d699
;;;","2021-02-22 22:50;thartmann;Moving this to corelibs.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"reutilization of org.w3c.dom.ls.LSSerializer,produces unexpected result in 8u271",JDK-8261970,5042350,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kravikumar,shadowbug,shadowbug,2021-02-18 09:38,2021-05-17 05:33,2023-10-01 09:58,2021-02-25 09:20,17,8u261,,,,,,,8u301,xml,,0,11-na,8bpr-critical-approved,bugdb_32526383,CPU21_04-critical-approved,CPU21_04-critical-SQE-OK,hgupdate-sync,redhat-interest,regression,,,,,,,,,,,,,,,"A customer raised an issue that reusing the LSSerializer object does not work after 8u251. In the below example setting useThreadLocalSerializer=true reuses the LSSerializer. While setting useThreadLocalSerializer=false, both 8u251 and 8u271 provide the same result, but with useThreadLocalSerializer=true, they provide different result.

Code Sample:

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharConversionException;
import java.io.IOException;
import java.io.StringWriter;
import java.util.Arrays;

import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.DOMConfiguration;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.ls.DOMImplementationLS;
import org.w3c.dom.ls.LSException;
import org.w3c.dom.ls.LSOutput;
import org.w3c.dom.ls.LSSerializer;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

public class CodificationTest {

    /**
    * True for reuse LSSerializer. 
    */
    private static boolean useThreadLocalSerializer=true;
    private static boolean useThreadLocalLSOutput=true;

    public static void main(final String[] args) throws Throwable {
        System.setProperty(""jdk.xml.isStandalone"", ""true"");
        final String valueXML =
                ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n<root><value>AÁEÉIÍOÓUÚ</value></root>"";
        final Document doc = parseString(valueXML);
        final byte[] arrUtf8 = serialize(doc, ""UTF-8"", false, false);
        final byte[] arrWin1251 = serialize(doc, ""WINDOWS-1252"", false, false);
        String s = new String(arrUtf8);
        String s1 = new String(arrWin1251);
        System.out.println(""byte[] (UTF-8)       : "" + s);
        System.out.println(""byte[] (WINDOWS-1252): "" + s1);
    }

   
    static Document parseString(final String input) throws SAXException, CharConversionException {
        try {
            ByteArrayInputStream bais = null;
            Document newDoc = null;

            try {
                byte[] inputBinary = input.getBytes();

                if (!new String(inputBinary).equals(input)) {
                    inputBinary = input.getBytes(""WINDOWS-1252"");
                }
                
                if (!new String(inputBinary).equals(input)) {
                    inputBinary = input.getBytes(""UTF-8"");
                }
                bais = new ByteArrayInputStream(inputBinary);

                newDoc = getDocBuilder().parse(bais);
            } finally {
                if (bais != null) {
                    bais.close();
                }
            }

            return newDoc;
        } catch (final Exception e) {
            if (e instanceof CharConversionException) {
                throw (CharConversionException) e;
            } else if (e instanceof SAXParseException) {
                throw (SAXParseException) e;
            } else {
                System.out.println(input);
                e.printStackTrace();
            }
        }
        return null;
    }

  
    private static byte[] serialize(final Node node, final String encoding,
        final boolean prettyPrint, final boolean omitHead) throws Throwable {
        final DOMImplementationLS domImplLS = (DOMImplementationLS) getDocBuilder().getDOMImplementation();
        final LSSerializer lsSerializer;
        if (useThreadLocalSerializer) {
           lsSerializer = lsSerializerGenerator.get();
        } else {
           lsSerializer = domImplLS.createLSSerializer();
        }
        final DOMConfiguration domConfig = lsSerializer.getDomConfig();

        try {
            domConfig.setParameter(""format-pretty-print"", Boolean.valueOf(prettyPrint));
            domConfig.setParameter(""xml-declaration"", Boolean.valueOf(!omitHead));
        } catch (final DOMException de) {
            throw new Throwable(
                    ""Error in XML"", de);
        }

        final ByteArrayOutputStream outStream = new ByteArrayOutputStream();
        final LSOutput lsOutput;
        if (useThreadLocalLSOutput) {
           lsOutput = lsOutputGenerator.get();
        }else {
           lsOutput =  domImplLS.createLSOutput();
        }
        lsOutput.setEncoding(encoding);
        lsOutput.setByteStream(outStream);

       
        try {
            final Transformer t = TransformerFactory.newInstance().newTransformer();
            t.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, ""yes"");
            final StringWriter sw = new StringWriter();
            t.transform(new DOMSource(node), new StreamResult(sw));
        } catch (final Exception e) {
        }

        try {
            lsSerializer.write(node, lsOutput);
            return outStream.toByteArray();
        } catch (final LSException lse) {
            throw new Throwable(lse.getMessage(), lse);
        }
    }

    private static DocumentBuilder getDocBuilder() {
        final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        try {
            factory.setFeature(""http://xml.org/sax/features/external-general-entities"", false);

            factory.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
            factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
            final DocumentBuilder builder = factory.newDocumentBuilder();
            builder.setEntityResolver(new EntityResolverImpl());
            return builder;
        } catch (final ParserConfigurationException pce) {
            return null;
        }
    }

    private static class EntityResolverImpl implements EntityResolver {
       
        @Override
        public InputSource resolveEntity(final String publicId, final String systemId)
                    throws SAXException, IOException {
             return new InputSource(new ByteArrayInputStream(new byte[0]));
        }
    }

    private static ThreadLocal<LSSerializer> lsSerializerGenerator =
            new ThreadLocal<LSSerializer>() {

                @Override
                protected LSSerializer initialValue() {
                    final DOMImplementationLS domImplLS = (DOMImplementationLS) getDocBuilder().getDOMImplementation();
                    return domImplLS.createLSSerializer();
                }
    };
    
 
    private static ThreadLocal<LSOutput> lsOutputGenerator = new ThreadLocal<LSOutput>() {

        @Override
        protected LSOutput initialValue() {
            final DOMImplementationLS domImplLS = (DOMImplementationLS) getDocBuilder().getDOMImplementation();
            return domImplLS.createLSOutput();
        }
    };
}



Expected:

byte[] (UTF-8)       : <?xml version=""1.0"" encoding=""UTF-8""?>
<root><value>AÁEÉIÍOÓUÚ</value></root>
byte[] (WINDOWS-1252): <?xml version=""1.0"" encoding=""WINDOWS-1252""?>
<root><value>A�E�I�O�U�</value></root>

Actual:

byte[] (UTF-8)       : <?xml version=""1.0"" encoding=""UTF-8""?>
<root><value>AÁEÉIÍOÓUÚ</value></root>
byte[] (WINDOWS-1252): <?xml version=""1.0"" encoding=""UTF-8""?>
<root><value>AÁEÉIÍOÓUÚ</value></root>",,,,,,,,,,JDK-8262758,JDK-8264246,JDK-8263415,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263173,JDK-8261209,JDK-8238164,JDK-8249867,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rmmr:",9223372036854775807,b01,,,,,,,,,,,,"2021-02-23 03:07;kravikumar;Encoding format with 8u271 is using UTF-8 for WINDOWS-1252 also. This is a regression from Xerces 2.12.0 update introduced in 8u261 and fails with the latest JDK also.

If a node is already visited, the update does not process the encoding format and uses either the default/previous encoding format.

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
SNIHostName should check if the encoded hostname conform to RFC 3490,JDK-8261969,5042349,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjiang,jjiang,jjiang,2021-02-18 09:31,2021-03-10 16:30,2023-10-01 09:58,2021-03-02 14:37,16,17,,,,,,,17,security-libs,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,,"The constructor SNIHostName(byte[] encoded) should check if the encoded hostname conform to RFC 3490.

@@ -173,7 +173,8 @@ public final class SNIHostName extends SNIServerName {
                     .onUnmappableCharacter(CodingErrorAction.REPORT);
 
             this.hostname = IDN.toASCII(
-                    decoder.decode(ByteBuffer.wrap(encoded)).toString());
+                    decoder.decode(ByteBuffer.wrap(encoded)).toString(), IDN.USE_STD3_ASCII_RULES);",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rmmj:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-03-02 14:37;roboduke;Changeset: 4f4d0f53
Author:    John Jiang <jjiang@openjdk.org>
Date:      2021-03-02 22:36:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4f4d0f53
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
replaceTextureRegion throws error when Metal API validation is enabled,JDK-8261960,5042337,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jdv,jdv,jdv,2021-02-18 07:13,2021-02-18 07:29,2023-10-01 09:58,2021-02-18 07:26,internal,,,,,,,,internal,client-libs,,0,code-review,critical,lanai,sn_87,,,,,,,,,,,,,,,,,,,"When we try to create UI components like JButton with texture size greater than max texture size(16384) and enable Metal API validation.

When we ignore OOM error thrown from initTexture we hit Metal API validation errors. We need to ignore such calls in replaceTextureRegion.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261718,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i2rmjv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-02-18 07:16;jdv;We already throw warning in replaceTextureRegion when we source coordinates are more than destination coordinates.
We should not honor such call in repalceTextureRegion.

Made change and ran sanity with J2DDemo, SwingSet2, Font2DTest and RenderPerfTest not seeing any issues.
Also all jtreg test run is green.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract should warn and proceed on unsupported types rather than crashing,JDK-8261950,5042319,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-02-18 04:00,2021-02-18 05:26,2023-10-01 09:58,2021-02-18 05:26,repo-panama,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,jextract should warn and proceed on unsupported types (like vector) rather than crashing with exception. The generated code in such crash is incomplete and so subsequently javac compilation fails.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rmfv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
fileStream::readln returns incorrect line string,JDK-8261949,5042318,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,ddong,ddong,2021-02-18 03:58,2021-03-01 16:37,2023-10-01 09:58,2021-02-21 18:22,,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"fileStream::readln() overwrites last character unconditionally since it
assumes a line always ends with '\n'.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rmfn:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-02-21 18:22;roboduke;Changeset: 2b555015
Author:    Yang Yi <qingfeng.yy@alibaba-inc.com>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-02-22 02:22:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2b555015
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
os::strdup_check_oom() should be used in os::same_files() in os_windows.cpp,JDK-8261939,5042297,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,ccheung,ccheung,2021-02-17 19:09,2021-03-01 16:33,2023-10-01 09:58,2021-02-17 20:41,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"This to to address a review comment for JDK-8202750:
https://github.com/openjdk/jdk/pull/2581#discussion_r577984793

I made the change in my repo but forgot to push it to the branch before integrate.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8202750,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rmaz:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-02-17 20:41;roboduke;Changeset: b8fd6142
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2021-02-18 04:40:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b8fd6142
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
ASN1Formatter.annotate should not return in the finally block,JDK-8261938,5042296,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-02-17 18:19,2021-03-01 16:36,2023-10-01 09:58,2021-02-19 15:46,16,17,,,,,,,17,other-libs,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,,"
The return [1] in the finally block will swallow the IOException, which is unexpected.

[1] https://github.com/openjdk/jdk/blob/master/test/lib/jdk/test/lib/hexdump/ASN1Formatter.java#L120",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252523,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rmar:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@79d0c3d2,,,,,,,,,"2021-02-19 15:46;roboduke;Changeset: b10376ba
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-02-19 23:45:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b10376ba
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
LambdaForClassInBaseArchive: SimpleApp$$Lambda$1 missing ,JDK-8261937,5042294,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccheung,iklam,iklam,2021-02-17 17:38,2021-03-15 23:47,2023-10-01 09:58,2021-03-09 13:53,17,,,,,,,,17,hotspot,,0,cds,investigate-UT,lambda,noreg-self,testbug,,,,,,,,,,,,,,,,,,"test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/LambdaForClassInBaseArchive.java assumes that the name of the proxy class is SimpleApp$$Lambda$1. However, in this case, it's SimpleApp$$Lambda$2.

[9.240s][info][cds,dynamic] Copying 44 klasses and 749 symbols
[9.240s][info][cds        ] Allocating RW objects ... 
[9.240s][info][cds        ] done (865 objects)
[9.240s][info][cds        ] Allocating RO objects ... 
[9.241s][info][cds        ] done (1704 objects)
[9.241s][info][cds        ] Relocating embedded pointers in core regions ... 
[9.241s][info][cds        ] Relocating external roots ... 
[9.241s][info][cds        ] done
[9.241s][info][cds        ] MetaspaceObjs estimate = 345472 used = 345472; diff = 0 bytes
[9.242s][info][cds,dynamic] Archiving hidden sun.util.locale.provider.JRELocaleProviderAdapter$$Lambda$3/0x0000000800844df0
[9.242s][info][cds,dynamic] Archiving hidden sun.util.cldr.CLDRLocaleProviderAdapter$$Lambda$1/0x0000000800841fa8
[9.242s][info][cds,dynamic] Archiving hidden sun.util.locale.provider.JRELocaleProviderAdapter$$Lambda$4/0x0000000800845670
[9.242s][info][cds,dynamic] Archiving hidden SimpleApp$$Lambda$2/0x0000000800800800
[9.242s][info][cds        ] Hashtables estimate = 8920 used = 8312; diff = 608 bytes
[9.243s][info][cds        ] Make classes shareable
[9.244s][info][cds        ] Adjust lambda proxy class dictionary
[9.244s][info][cds        ] Dumping shared data to file: 
[9.244s][info][cds        ]    /opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S8401/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c31c7753-50f4-4d0c-b961-59a2a4e276e4/runs/10e1e774-27fe-4326-9a56-dfe551c4ad88/testoutput/test-support/jtreg_open_test_hotspot_jtreg_runtime_cds_appcds/scratch/0/top-00h31m22s431.jsa
[9.244s][info][cds        ] Shared file region (mc )  0:     1896 bytes, addr 0x0000000800778000 file offset 0x00001000 crc 0x9df5ae38
[9.244s][info][cds        ] Shared file region (rw )  1:   145680 bytes, addr 0x0000000800779000 file offset 0x00002000 crc 0xdc224dd7
[9.245s][info][cds        ] Shared file region (ro )  2:   208104 bytes, addr 0x000000080079d000 file offset 0x00026000 crc 0x39b81624
[9.245s][info][cds        ] Shared file region (bm )  3:     5624 bytes, addr 0x0000000000000000 file offset 0x00059000 crc 0xcfb5f86c
[9.245s][info][cds,dynamic] Written dynamic archive 0x0000000800778000 - 0x00000008007cfce8 [1056 bytes header, 359656 bytes total]
[9.245s][info][cds,dynamic] 44 klasses; 749 symbols
[9.245s][info][cds        ] Verify After CDS dynamic dump
];
 stderr: [Java HotSpot(TM) 64-Bit Server VM warning: Option UseBiasedLocking was deprecated in version 15.0 and will likely be removed in a future release.
]
 exitValue = 0

java.lang.RuntimeException: 'Archiving hidden SimpleApp$$Lambda$1' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:206)
	at LambdaForClassInBaseArchive.lambda$doTestCustomBase$0(LambdaForClassInBaseArchive.java:78)
	at jdk.test.lib.cds.CDSTestUtils$Result.assertNormalExit(CDSTestUtils.java:145)
	at LambdaForClassInBaseArchive.doTestCustomBase(LambdaForClassInBaseArchive.java:76)
	at LambdaForClassInBaseArchive.testCustomBase(LambdaForClassInBaseArchive.java:55)
	at DynamicArchiveTestBase.runTest(DynamicArchiveTestBase.java:73)
	at LambdaForClassInBaseArchive.main(LambdaForClassInBaseArchive.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261918,JDK-8261921,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rmab:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-02-17 17:46;iklam;It seems like under certain conditions, extra code is executed during dynamic dump, and the Lambda proxy classes are named differently. Here's a ""normal"" run that happens in most cases, where only a single Lambda proxy is loaded:

[0.808s][info][cds] Verify Before CDS dynamic dump
[0.828s][info][cds] Gathering all archivable objects ... 
[0.829s][info][cds] Gathering classes and symbols ... 
[0.878s][info][cds] Number of classes 87
[0.878s][info][cds]     instance classes   =    87
[0.878s][info][cds]     obj array classes  =     0
[0.878s][info][cds]     type array classes =     0
[0.902s][info][cds] _estimated_hashtable_bytes = 31088 + 2432 = 33520
[0.902s][info][cds] _estimated_metaspaceobj_bytes = 1144456
[0.902s][info][cds] _estimated_trampoline_bytes = 3288
[0.902s][info][cds] total estimate bytes = 1193552
[0.902s][info][cds] Reserved output buffer space at 0x00007f51e9745000 [1196032 bytes]
[0.903s][info][cds] Trampolines estimate = 3288 used = 3288; diff = 0 bytes
[0.903s][info][cds,dynamic] Copying 87 klasses and 3350 symbols
[0.903s][info][cds        ] Allocating RW objects ... 
[0.905s][info][cds        ] done (2659 objects)
[0.905s][info][cds        ] Allocating RO objects ... 
[0.922s][info][cds        ] done (6065 objects)
[0.941s][info][cds        ] Relocating embedded pointers in core regions ... 
[0.947s][info][cds        ] Relocating external roots ... 
[0.947s][info][cds        ] done
[0.947s][info][cds        ] MetaspaceObjs estimate = 1144456 used = 1144456; diff = 0 bytes
[0.951s][info][cds,dynamic] Archiving hidden SimpleApp$$Lambda$1/0x0000000800800800
[0.951s][info][cds        ] Hashtables estimate = 33520 used = 32432; diff = 1088 bytes
[0.955s][info][cds        ] Make classes shareable
[0.958s][info][cds        ] Adjust lambda proxy class dictionary
[0.960s][info][cds        ] Dumping shared data to file: 
[0.960s][info][cds        ]    /jdk2/tmp/jtreg/work/scratch/16/top-16h19m46s348.jsa
[0.960s][info][cds        ] Shared file region (mc )  0:     3288 bytes, addr 0x00000008005a4000 file offset 0x00001000 crc 0xa71a5370
[0.960s][info][cds        ] Shared file region (rw )  1:   434416 bytes, addr 0x00000008005a5000 file offset 0x00002000 crc 0xeaf5d477
[0.962s][info][cds        ] Shared file region (ro )  2:   742472 bytes, addr 0x0000000800610000 file offset 0x0006d000 crc 0x6ce4bb38
[0.963s][info][cds        ] Shared file region (bm )  3:    18520 bytes, addr 0x0000000000000000 file offset 0x00123000 crc 0x22c0b686
[0.963s][info][cds,dynamic] Written dynamic archive 0x00000008005a4000 - 0x00000008006c5448 [1056 bytes header, 1184840 bytes total]
[0.963s][info][cds,dynamic] 87 klasses; 3350 symbols
[0.963s][info][cds        ] Verify After CDS dynamic dump
;;;","2021-02-23 11:36;mseledtsov;ILW = MMM = P3;;;","2021-03-05 14:31;ccheung;Proposed fix:
--- a/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/LambdaForClassInBaseArchive.java
+++ b/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/LambdaForClassInBaseArchive.java
@@ -75,7 +75,7 @@ public class LambdaForClassInBaseArchive extends DynamicArchiveTestBase {
               appClass, ""lambda"")
             .assertNormalExit(out -> {
                     out.shouldHaveExitValue(0)
-                       .shouldContain(""Archiving hidden SimpleApp$$Lambda$1"");
+                       .shouldMatch(""Archiving hidden SimpleApp[$][$]Lambda[$].*"");
                 });
 
         // Run with both base and dynamic archives. The SimpleApp class;;;","2021-03-09 13:53;roboduke;Changeset: 3212f80a
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2021-03-09 21:52:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3212f80a
;;;",,,,,,,,,,,,,,,,,,,,,,,,
IGV: quick search fails on multi-line node labels,JDK-8261931,5042286,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rcastanedalo,xliu,xliu,2021-02-17 12:06,2022-08-16 23:39,2023-10-01 09:58,2021-03-11 01:18,17,,,,,,,,17,hotspot,,0,diagnostics,igv,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,,"Not only I can't find fuzz results, I can't even find the exact matching nodes. 
It seems to be a regression of JDK-8260581. 

Roberto taught me a workaround: the search is working correctly if line breaks are avoided in the node text field (Tools -> Options -> General) (e.g. ""[id]
[name] [dump_spec]"" without a line break).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260581,,,,,,"2021-02-17 12:08;xliu;broken_igv_searchbox.png;https://bugs.openjdk.org/secure/attachment/93235/broken_igv_searchbox.png","2021-02-17 12:10;xliu;bug.xml.zip;https://bugs.openjdk.org/secure/attachment/93237/bug.xml.zip","2021-02-17 12:09;xliu;workaround-single-line.png;https://bugs.openjdk.org/secure/attachment/93236/workaround-single-line.png",,,,,,,,,,,,,,,b08,17,,,,,,,,"0|i2rm8j:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-02-17 23:22;thartmann;ILW = IGV node search does not work, searching for node names, disable line breaks = MHL = P3;;;","2021-02-17 23:22;thartmann;Roberto, could you please have a look?;;;","2021-03-11 01:18;roboduke;Changeset: f6b4ba07
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2021-03-11 09:17:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f6b4ba07
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
ClhsdbFindPC fails with java.lang.RuntimeException: 'In java stack' missing from stdout/stderr ,JDK-8261929,5042283,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2021-02-17 11:41,2021-04-06 05:50,2023-10-01 09:58,2021-02-20 12:48,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,," ----------System.err:(32/1608)----------
 stdout: [ + findpc 0x0000000000000000
Address 0x0: In unknown location
];
 stderr: [ + findpc 0x0000000000000000
Address 0x0: In unknown location
]
 exitValue = -1

java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'In java stack' missing from stdout/stderr

at ClhsdbFindPC.testFindPC(ClhsdbFindPC.java:242)
at ClhsdbFindPC.main(ClhsdbFindPC.java:264)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.RuntimeException: 'In java stack' missing from stdout/stderr ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261702,,,,,,JDK-8243455,JDK-8264775,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rm7v:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-02-18 15:24;cjplummer;I've been unable to reproduce this issue, but since it turned up twice in two days, and JDK-8243455 won't address this issue for a while, I think a quick fix that checks for the 0x0 address is appropriate.;;;","2021-02-20 12:48;roboduke;Changeset: 0825bc55
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-02-20 20:48:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0825bc55
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
WebKit build fails with Visual Studio 2017,JDK-8261927,5042281,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,ajoseph,kcr,kcr,2021-02-17 11:37,2021-09-03 12:23,2023-10-01 09:58,2021-02-21 06:32,jfx11,jfx17,,,,,,,jfx17,javafx,,0,sn_87,,,,,,,,,,,,,,,,,,,,,,"The FX mainline build was updated to use VS 2019 a while ago, but it should still be buildable with VS 2017. After the recent WebKit 610.2 update, it no longer builds with VS 2017. I discovered this while backporting the WebKit 610.2 update to FX 11, which still uses VS 2017 to build.

Here is the error:

$ gradle -PCOMPILE_WEBKIT=true
[2519/4281] Building CXX object Source\WebCore\CMakeFiles\WebCore.dir\__\__\DerivedSources\WebCore\unified-sources\UnifiedSource-26ec8d00-4.cpp.obj
FAILED: Source/WebCore/CMakeFiles/WebCore.dir/__/__/DerivedSources/WebCore/unified-sources/UnifiedSource-26ec8d00-4.cpp.obj 
jfx\buildSrc\build\build-tools\devkit-windows_x64-VS2017-15.9.24+1.0.tar\VC\bin\x64\cl.exe  /nologo /TP -DBUILDING_JAVA__=1 -DBUILDING_WITH_CMAKE=1 -DBUILDING_WebCore -DDATA_DIR=\""share\"" -DHAVE_CONFIG_H=1 -DICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_STATIC -DIMAGEIO=1 -DLIBXML_STATIC -DLIBXSLT_STATIC -DMAX_DOM_TREE_DEPTH=2000 -DNOMINMAX -DSTATICALLY_LINKED_WITH_JavaScriptCore -DSTATICALLY_LINKED_WITH_PAL=1 -DSTATICALLY_LINKED_WITH_WTF -DUNICODE -DU_ENABLE_DYLOAD=0 -DU_STATIC_IMPLEMENTATION -DWINVER=0x601 -D_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES=1 -D_CRT_SECURE_NO_WARNINGS -D_HAS_EXCEPTIONS=0 -D_UNICODE -D_WINDOWS -D_WINSOCKAPI_="""" -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\java -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\graphics\java -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\linux -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\network -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\network\java -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\bindings\java -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\page\java -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\bridge\jni -Ijfx\modules\javafx.web\src\main\native\Source\WebKitLegacy -I..\..\gensrc\headers\javafx.web -I. -IDerivedSources\WebCore -Ijfx\modules\javafx.web\src\main\native\Source\WebCore -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\airplay -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\applepay -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\applepay\paymentrequest -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\applicationmanifest -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\async-clipboard -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\beacon -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\cache -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\credentialmanagement -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\encryptedmedia -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\encryptedmedia\legacy -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\entriesapi -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\fetch -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\geolocation -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\highlight -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\indexeddb -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\indexeddb\client -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\indexeddb\server -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\indexeddb\shared -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\mediacapabilities -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\mediacontrols -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\mediarecorder -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\mediasession -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\mediasource -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\mediastream -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\mediastream\libwebrtc -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\navigatorcontentutils -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\notifications -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\paymentrequest -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\pictureinpicture -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\plugins -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\quota -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\remoteplayback -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\speech -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\streams -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\webaudio -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\webauthn -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\webauthn\cbor -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\webauthn\fido -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\webdatabase -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\webdriver -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\webgpu -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\webgpu\WHLSL -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\webgpu\WHLSL\AST -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\websockets -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\webxr -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\accessibility -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\accessibility\isolatedtree -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\animation -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\bindings -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\bindings\js -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\bridge -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\bridge\c -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\bridge\jsc -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\contentextensions -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\crypto -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\crypto\algorithms -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\crypto\keys -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\crypto\parameters -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\css -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\css\parser -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\css\typedom -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\cssjit -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\dom -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\dom\messageports -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\domjit -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\editing -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\fileapi -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\history -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\html -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\html\canvas -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\html\forms -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\html\parser -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\html\shadow -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\html\track -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\inspector -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\inspector\agents -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\inspector\agents\page -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\inspector\agents\worker -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\layout -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\layout\blockformatting -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\layout\blockformatting\tablewrapper -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\layout\displaytree -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\layout\floats -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\layout\inlineformatting -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\layout\inlineformatting\text -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\layout\integration -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\layout\invalidation -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\layout\layouttree -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\layout\tableformatting -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\loader -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\loader\appcache -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\loader\archive -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\loader\archive\mhtml -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\loader\cache -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\loader\icon -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\mathml -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\page -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\page\animation -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\page\csp -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\page\scrolling -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\animation -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\audio -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\encryptedmedia -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\gamepad -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\graphics -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\graphics\cpu\arm -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\graphics\cpu\arm\filters -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\graphics\displaylists -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\graphics\filters -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\graphics\iso -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\graphics\opentype -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\graphics\transforms -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\mediacapabilities -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\mediarecorder -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\mediasession -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\mediastream -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\mediastream\libwebrtc -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\mock -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\mock\mediasource -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\sql -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\text -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\xr -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\plugins -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\rendering -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\rendering\line -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\rendering\mathml -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\rendering\shapes -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\rendering\style -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\rendering\svg -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\rendering\updating -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\replay -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\storage -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\style -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\svg -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\svg\animation -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\svg\graphics -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\svg\graphics\filters -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\svg\properties -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\websockets -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\workers -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\workers\service -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\workers\service\context -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\workers\service\server -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\worklets -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\xml -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\xml\parser -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\Modules\gamepad -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\graphics\texmap -Ijfx\modules\javafx.web\src\main\native\Source\WebCore\platform\graphics\nicosia -Ijfx\modules\javafx.web\src\main\native\Source\ThirdParty\libxml\src\include -Ijfx\modules\javafx.web\src\main\native\Source\ThirdParty\libxml\win32\include -Ijfx\modules\javafx.web\src\main\native\Source\ThirdParty\icu\source\common -Ijfx\modules\javafx.web\src\main\native\Source\ThirdParty\icu\source\i18n -Ijfx\modules\javafx.web\src\main\native\Source\ThirdParty\libxslt\src -Ijfx\modules\javafx.web\src\main\native\Source\ThirdParty\sqlite\. -IDerivedSources\ForwardingHeaders -Ijfx\modules\javafx.web\src\main\native\Source\WTF\wtf\java -Ijfx\modules\javafx.web\src\main\native\Source -IC:\java\openjdk\jdk-15\include -IC:\java\openjdk\jdk-15\include\win32 /W4 /DWIN32 /D_WINDOWS  /GR- /EHs- /EHc-  /MD /O2 /Ob2 /DNDEBUG   /wd4018 /wd4068 /wd4099 /wd4100 /wd4127 /wd4138 /wd4146 /wd4180 /wd4189 /wd4201 /wd4206 /wd4244 /wd4251 /wd4267 /wd4275 /wd4288 /wd4291 /wd4305 /wd4309 /wd4344 /wd4355 /wd4389 /wd4396 /wd4456 /wd4457 /wd4458 /wd4459 /wd4481 /wd4503 /wd4505 /wd4510 /wd4512 /wd4530 /wd4610 /wd4611 /wd4646 /wd4702 /wd4706 /wd4722 /wd4800 /wd4819 /wd4951 /wd4952 /wd4996 /wd6011 /wd6031 /wd6211 /wd6246 /wd6255 /wd6387 /wd4091 /Zi /GS /EHa- /EHc- /EHs- /fp:except- /analyze- /bigobj /utf-8 /validate-charset /Oy- -std:c++17 /Yu""WebCorePrefix.h"" /FI""WebCorePrefix.h"" /Fp""jfx/modules/javafx.web/build/win/Release/Source/WebCore/WebCore_SOURCES/WebCorePrefix.pch"" /showIncludes /FoSource\WebCore\CMakeFiles\WebCore.dir\__\__\DerivedSources\WebCore\unified-sources\UnifiedSource-26ec8d00-4.cpp.obj /Fdlib\WebCore.pdb /FS -c DerivedSources\WebCore\unified-sources\UnifiedSource-26ec8d00-4.cpp
jfx\modules\javafx.web\src\main\native\Source\WebCore\style/StyleScopeRuleSets.cpp(234): error C2039: 'invalidationSelector': is not a member of 'WebCore::Style::RuleFeature'
jfx\modules\javafx.web\src\main\native\source\webcore\style\RuleFeature.h(42): note: see declaration of 'WebCore::Style::RuleFeature'
jfx\modules\javafx.web\src\main\native\Source\WebCore\style/StyleScopeRuleSets.cpp(249): note: see reference to function template instantiation 'WTF::Vector<WebCore::Style::InvalidationRuleSet,0,WTF::CrashOnOverflow,16,WTF::VectorMalloc> *WebCore::Style::ensureInvalidationRuleSets<WTF::AtomString,WebCore::Style::RuleFeature,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>(const KeyType &,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0,WTF::CrashOnOverflow,16,WTF::VectorMalloc>,std::default_delete<_Ty>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<MappedArg>> &,const WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0,WTF::CrashOnOverflow,16,WTF::VectorMalloc>,std::default_delete<WTF::Vector<WebCore::Style::RuleFeature,0,WTF::CrashOnOverflow,16,WTF::VectorMalloc>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0,WTF::CrashOnOverflow,16,WTF::VectorMalloc>,std::default_delete<WTF::Vector<WebCore::Style::RuleFeature,0,WTF::CrashOnOverflow,16,WTF::VectorMalloc>>>>> &)' being compiled
        with
        [
            KeyType=WTF::AtomString,
            _Ty=WTF::Vector<WebCore::Style::InvalidationRuleSet,0,WTF::CrashOnOverflow,16,WTF::VectorMalloc>,
            MappedArg=std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0,WTF::CrashOnOverflow,16,WTF::VectorMalloc>,std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0,WTF::CrashOnOverflow,16,WTF::VectorMalloc>>>
        ]
jfx\modules\javafx.web\src\main\native\source\webcore\platform\graphics\ColorTypes.h(367): note: see reference to class template instantiation 'WebCore::SRGBA<uint8_t>' being compiled
jfx\modules\javafx.web\src\main\native\Source\WebCore\style/StyleScopeRuleSets.cpp(234): error C2039: '__this': is not a member of 'WebCore::Style::RuleFeature'
jfx\modules\javafx.web\src\main\native\source\webcore\style\RuleFeature.h(42): note: see declaration of 'WebCore::Style::RuleFeature'
jfx\modules\javafx.web\src\main\native\Source\WebCore\style/StyleScopeRuleSets.cpp(235): error C2039: 'invalidationSelector': is not a member of 'WebCore::Style::RuleFeature'
jfx\modules\javafx.web\src\main\native\source\webcore\style\RuleFeature.h(42): note: see declaration of 'WebCore::Style::RuleFeature'
jfx\modules\javafx.web\src\main\native\Source\WebCore\style/StyleScopeRuleSets.cpp(235): error C2039: '__this': is not a member of 'WebCore::Style::RuleFeature'
jfx\modules\javafx.web\src\main\native\source\webcore\style\RuleFeature.h(42): note: see declaration of 'WebCore::Style::RuleFeature'
...

> Task :web:compileNativeWin FAILED

FAILURE: Build failed with an exception.

",,,,,,,,,,JDK-8262224,JDK-8262089,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252326,JDK-8259635,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rm7f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2021-02-17 11:39;kcr;We need to backport this to FX 11 in order to complete the WebKit 610.2 update .;;;","2021-02-21 06:32;roboduke;Changeset: 9e42eea4
Author:    Arun Joseph <ajoseph@openjdk.org>
Date:      2021-02-21 14:32:11 +0000
URL:       https://git.openjdk.java.net/jfx/commit/9e42eea4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Attempt to access property/element of a Java method results in AssertionError: unknown call type,JDK-8261926,5042280,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,attila,aw,aw,2021-02-17 11:13,2021-06-29 09:32,2023-10-01 09:58,2021-06-29 09:32,15,,,,,,,,,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,"Expected: Java method objects don't have properties/elements.
Unexpected: any attempt to access them crashes the program with an AssertionError, e.g.:

jjs> java.lang.String.valueOf[""(int)""]
Exception in thread ""main"" java.lang.AssertionError: unknown call type GET:ELEMENT|PROPERTY|METHOD(Object,Object)Object@org.openjdk.nashorn.internal.scripts.Script$\^shell\_/0x0000000800c09c40
        at org.openjdk.nashorn/org.openjdk.nashorn.internal.runtime.linker.NashornBottomLinker.linkBean(NashornBottomLinker.java:124)
        at org.openjdk.nashorn/org.openjdk.nashorn.internal.runtime.linker.NashornBottomLinker.getGuardedInvocation(NashornBottomLinker.java:76)
        at jdk.dynalink/jdk.dynalink.linker.support.CompositeGuardingDynamicLinker.getGuardedInvocation(CompositeGuardingDynamicLinker.java:109)
        at jdk.dynalink/jdk.dynalink.LinkerServicesImpl.lambda$getGuardedInvocation$0(LinkerServicesImpl.java:137)
        at jdk.dynalink/jdk.dynalink.LinkerServicesImpl.getWithLookupInternal(LinkerServicesImpl.java:168)
        at jdk.dynalink/jdk.dynalink.LinkerServicesImpl.getGuardedInvocation(LinkerServicesImpl.java:135)
        at jdk.dynalink/jdk.dynalink.DynamicLinker.relink(DynamicLinker.java:242)
        at org.openjdk.nashorn.scripts/org.openjdk.nashorn.internal.scripts.Script$\^shell\_/0x0000000800c09c40.:program(<shell>:1)

jjs> java.lang.String.valueOf.call
Exception in thread ""main"" java.lang.AssertionError: unknown call type GET:PROPERTY|ELEMENT|METHOD:call(Object)Object@org.openjdk.nashorn.internal.scripts.Script$\^shell\_/0x0000000800c09c40
        at org.openjdk.nashorn/org.openjdk.nashorn.internal.runtime.linker.NashornBottomLinker.linkBean(NashornBottomLinker.java:124)
        at org.openjdk.nashorn/org.openjdk.nashorn.internal.runtime.linker.NashornBottomLinker.getGuardedInvocation(NashornBottomLinker.java:76)
        at jdk.dynalink/jdk.dynalink.linker.support.CompositeGuardingDynamicLinker.getGuardedInvocation(CompositeGuardingDynamicLinker.java:109)
        at jdk.dynalink/jdk.dynalink.LinkerServicesImpl.lambda$getGuardedInvocation$0(LinkerServicesImpl.java:137)
        at jdk.dynalink/jdk.dynalink.LinkerServicesImpl.getWithLookupInternal(LinkerServicesImpl.java:168)
        at jdk.dynalink/jdk.dynalink.LinkerServicesImpl.getGuardedInvocation(LinkerServicesImpl.java:135)
        at jdk.dynalink/jdk.dynalink.DynamicLinker.relink(DynamicLinker.java:242)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rm77:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@51b0542d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassListParser::current should be used only by main thread,JDK-8261921,5042269,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,iklam,dcubed,dcubed,2021-02-17 08:48,2021-06-16 13:11,2023-10-01 09:58,2021-02-22 19:12,11,16,17,,,,,,17,hotspot,,0,intermittent,investigate-UT,tier7,,,,,,,,,,,,,,,,,,,,"During -Xshare:dump, ClassListParser::current() should be used only by the main thread, which has created the only ClassListParser instance. Accessing it from other threads could cause intermittent failures. We observed this only on certain hosts with -Xcomp.

The following 15 tests failed in the JDK17 CI with SIGSEGV:

runtime/cds/appcds/SharedBaseAddress.java
runtime/cds/appcds/PackageSealing.java
runtime/cds/appcds/NonExistClasspath.java
runtime/cds/appcds/MultiReleaseJars.java
runtime/cds/appcds/MismatchedPathTriggerMemoryRelease.java
runtime/cds/appcds/DumpClassListWithLF.java
runtime/cds/appcds/BootClassPathMismatch.java
runtime/cds/appcds/ArchiveRelocationTest.java
runtime/cds/appcds/sharedStrings/InvalidFileFormat.java
runtime/cds/appcds/sharedStrings/ExerciseGC.java
runtime/cds/appcds/jvmti/transformRelatedClasses/TransformInterfaceImplementorAppCDS.java
runtime/cds/appcds/javaldr/GCSharedStringsDuringDump.java
runtime/cds/appcds/dynamicArchive/DynamicArchiveRelocationTest.java
runtime/cds/appcds/customLoader/ClassListFormatD.java
runtime/cds/appcds/customLoader/ClassListFormatB.java

The following 3 tests failed with other errors:

runtime/cds/serviceability/ReplaceCriticalClassesForSubgraphs.java
runtime/cds/appcds/VerifierTest_1B.java
runtime/cds/appcds/dynamicArchive/LambdaForClassInBaseArchive.java

The test task's JVM args are:

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:-UseBiasedLocking

Starting this bug as a P2 due to the sheer number of failures.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261937,,,,,,JDK-8172218,JDK-8262005,JDK-8265016,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2rm4r:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2021-02-17 10:16;iklam;The crash happens with -Xshare:dump. Usually all classes are loaded by the main thread. However, in some cases, other threads can execute and load classes. Here's the stack of the thread that crashed:

==============
C  [libc.so.6+0x146e3f]  __strlen_sse42+0xf
V  [libjvm.so+0x17e3875]  SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*)+0x65
V  [libjvm.so+0x96abe8]  ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*)+0x228
V  [libjvm.so+0x11f869c]  KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, ClassLoadInfo const&, Thread*)+0x1dc
....
j  java.util.Date.toString()Ljava/lang/String;+1 java.base@17-ea
j  sun.usagetracker.UsageTrackerClient$UsageTrackerRunnable.buildMessage(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;+55 java.base@17-ea
j  sun.usagetracker.UsageTrackerClient$UsageTrackerRunnable.run()V+82 java.base@17-ea
j  java.lang.Thread.run()V+11 java.base@17-ea
==============

resolve_super_or_fail+0x65 is a call to SystemDictionaryShared::dump_time_resolve_super_or_fail.

================
https://github.com/openjdk/jdk/blob/d5a4d2266b45107cf8d7c0d0137c77b797d836b6/src/hotspot/share/classfile/systemDictionaryShared.cpp#L1206
InstanceKlass* SystemDictionaryShared::dump_time_resolve_super_or_fail(
    Symbol* class_name, Symbol* super_name, Handle class_loader,
    Handle protection_domain, bool is_superclass, TRAPS) {

  assert(DumpSharedSpaces, ""only when dumping"");

  ClassListParser* parser = ClassListParser::instance();
  if (parser == NULL) {
    // We're still loading the well-known classes, before the ClassListParser is created.
    return NULL;
  }
  if (class_name->equals(parser->current_class_name())) {   <<<<<<<<<<<<<<<<<<< call to strlen
================

At this point, parser->current_class_name() could be NULL.

Suggested fix: return NULL immediately from dump_time_resolve_super_or_fail if the current thread is not the thread that's executing MetaspaceShared::preload_classes().;;;","2021-02-17 10:36;iklam;This failure seems to be related to timing. 

int MetaspaceShared::preload_classes(const char* class_list_path, TRAPS) {
  ClassListParser parser(class_list_path);
  int class_count = 0;
          <<<<<< ClassListParser::instance() not NULL;
         <<<<<<< the other thread crashes
  while (parser.parse_one_line()) {
         <<<<< ClassListParser::_class_name is now non-NULL

Once ClassListParser::_class_name is set, it will never be non-NULL again. So all crashes in this run seem to have happened inside a very narrow window.
;;;","2021-02-22 19:12;roboduke;Changeset: 8cfea7c5
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2021-02-23 03:11:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8cfea7c5
;;;","2021-06-16 13:11;iklam;Fix verified: in mach5, the tests that had been crashing with the bug all passed with the fix. ;;;",,,,,,,,,,,,,,,,,,,,,,,,
[AIX] jshell command throws java.io.IOError on non English locales,JDK-8261920,5042268,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,itakiguchi,itakiguchi,itakiguchi,2021-02-17 08:43,2021-03-01 16:41,2023-10-01 09:58,2021-02-24 05:14,11.0.10,15,16,17,,,,,17,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,,,,"Following exception was displayed when I executed jshell command by using standard user on AIX with Japanese locale. 
(Japanese characters were changed to \uXXXX style on this report)
================================
$ ./jshell
|  JShell\u3078\u3088\u3046\u3053\u305d -- \u30d0\u30fc\u30b8\u30e7\u30f315.0.2
|  \u6982\u8981\u306b\u3064\u3044\u3066\u306f\u3001\u6b21\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044: /help intro
Exception in thread ""main"" java.io.IOError: java.io.IOException: Unable to parse columns
        at jdk.internal.le/jdk.internal.org.jline.terminal.impl.AbstractPosixTerminal.getSize(AbstractPosixTerminal.java:62)
        at jdk.internal.le/jdk.internal.org.jline.terminal.Terminal.getBufferSize(Terminal.java:216)
        at jdk.internal.le/jdk.internal.org.jline.reader.impl.LineReaderImpl.doDisplay(LineReaderImpl.java:741)
        at jdk.internal.le/jdk.internal.org.jline.reader.impl.LineReaderImpl.<init>(LineReaderImpl.java:298)
        at jdk.jshell/jdk.internal.jshell.tool.ConsoleIOContext$2.<init>(ConsoleIOContext.java:133)
        at jdk.jshell/jdk.internal.jshell.tool.ConsoleIOContext.<init>(ConsoleIOContext.java:133)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.start(JShellTool.java:978)
        at jdk.jshell/jdk.internal.jshell.tool.JShellToolBuilder.start(JShellToolBuilder.java:254)
        at jdk.jshell/jdk.internal.jshell.tool.JShellToolProvider.main(JShellToolProvider.java:120)
Caused by: java.io.IOException: Unable to parse columns
        at jdk.internal.le/jdk.internal.org.jline.terminal.impl.ExecPty.doGetInt(ExecPty.java:278)
        at jdk.internal.le/jdk.internal.org.jline.terminal.impl.ExecPty.doGetSize(ExecPty.java:263)
        at jdk.internal.le/jdk.internal.org.jline.terminal.impl.ExecPty.getSize(ExecPty.java:170)
        at jdk.internal.le/jdk.internal.org.jline.terminal.impl.AbstractPosixTerminal.getSize(AbstractPosixTerminal.java:60)
        ... 8 more
$ 
================================

According to my investigation, JLine library checks word ""columns"" in ""stty -a"" command output.
The word ""columns"" was translated on AIX's Japanese locale (other locales also), so above error was happened.

OpenJDK for AIX developer could not find this issue because he/she requires AIX Toolbox's coreutils rpm package as build tools.
Another stty command is in /opt/freeware/bin/stty, it's in coreutils rpm package.

Standard users' system may not have coreutils rpm package or they may not set /opt/freeware/bin in PATH environment variable.
stty command should be executed with C locale to get English message.
Additionally, JLine library requires -F option. AIX's stty command does not support -F option, 
but stty command which is in coreutils rpm package supports -F option.
On standard jshell usage, -F option may not be used. But when the system has coreutils rpm package, jshell should use this one.",,,,,,,,,,JDK-8262754,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,15,,aix,,,,,,"0|i2rm4j:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2021-02-24 05:14;roboduke;Changeset: 2c99bad0
Author:    Ichiroh Takiguchi <itakiguchi@openjdk.org>
Date:      2021-02-24 13:13:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2c99bad0
;;;","2021-02-25 17:21;itakiguchi;Fix Request (jdk11u-fix-request)
I'd like to request the fix in 11u.
I ran jshell in different environments, locale settings and terminals by JDK-8256128, then I found this issue.
The fix touched JLine library.
In case of JDK11, jjs command also uses JLine.
I also ran jjs in different settings.

The patches could apply cleanly. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"java/util/Locale/LocaleProvidersRun.java failed with ""RuntimeException: Expected log was not emitted. LogRecord: null""",JDK-8261919,5042267,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,dcubed,dcubed,2021-02-17 08:17,2021-03-01 16:41,2023-10-01 09:58,2021-02-24 08:24,16,17,,,,,,,17,core-libs,,0,intermittent,investigate-UT,noreg-self,tier1,tier4,tier5,tier6,tier7,tier8,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

java/util/Locale/LocaleProvidersRun.java

Here's a snippet from the log file:

Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-723/linux-x64-debug.jdk/jdk-17/fastdebug/bin/java -ea -esa -cp /opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S8400/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/be5232f7-080e-407a-9736-c0bf4a5b27f9/runs/9591bb1e-c2df-495c-9239-94996eafdb1e/testoutput/test-support/jtreg_open_test_jdk_jdk_util/classes/3/java/util/Locale/LocaleProvidersRun.d:/opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S8400/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/be5232f7-080e-407a-9736-c0bf4a5b27f9/runs/9591bb1e-c2df-495c-9239-94996eafdb1e/testoutput/test-support/jtreg_open_test_jdk_jdk_util/classes/3/test/lib -Djava.locale.providers=FOO --add-exports=java.base/sun.util.locale.provider=ALL-UNNAMED LocaleProviders bug8245241Test Invalid locale provider adapter ""FOO"" ignored.  ]
[2021-02-17T11:27:39.299894073Z] Gathering output for process 1482
[2021-02-17T11:27:40.121906683Z] Waiting for completion for process 1482
[2021-02-17T11:27:40.122212151Z] Waiting for completion finished for process 1482
Output and diagnostic info for process 1482 was saved into 'pid-1482-output.log'
Feb 17, 2021 11:27:39 AM sun.util.locale.provider.LocaleProviderAdapter <clinit>
INFO: Invalid locale provider adapter ""FOO"" ignored.
Exception in thread ""main"" java.lang.RuntimeException: Expected log was not emitted. LogRecord: null
	at LocaleProviders.bug8245241Test(LocaleProviders.java:416)
	at LocaleProviders.main(LocaleProviders.java:107)

[2021-02-17T11:27:40.124161588Z] Waiting for completion for process 1482
[2021-02-17T11:27:40.124298037Z] Waiting for completion finished for process 1482
----------System.err:(14/882)----------
java.lang.RuntimeException: Unexpected exit code: 1
	at LocaleProvidersRun.testRun(LocaleProvidersRun.java:197)
	at LocaleProvidersRun.main(LocaleProvidersRun.java:170)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Unexpected exit code: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Unexpected exit code: 1
----------rerun:(41/6926)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2rm4b:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2021-02-24 08:24;roboduke;Changeset: 9d9ad969
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-02-24 16:23:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9d9ad969
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"two runtime/cds/appcds/VerifierTest failed with ""Unable to use shared archive""",JDK-8261918,5042266,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,dcubed,dcubed,2021-02-17 08:05,2021-03-17 21:55,2023-10-01 09:58,2021-03-10 09:19,17,,,,,,,,17,hotspot,,0,cds,dynamic-cds,intermittent,investigate-UT,noreg-self,testbug,tier4,,,,,,,,,,,,,,,,"The following two tests failed in the JDK17 CI:

runtime/cds/appcds/VerifierTest_2.java
runtime/cds/appcds/VerifierTest_1A.java

Here's a snippet from the VerifierTest_2.java log file:

----------System.err:(28/1754)----------
 stdout: [Error occurred during initialization of VM
Unable to use shared archive.
];
 stderr: [An error has occurred while processing the shared archive file.
Specified shared archive not found (/opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S8400/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7bf3d6f7-cc0c-471e-8b05-a66076a1f098/runs/d1bb70d8-2a63-484b-8898-b3c0afd1df3c/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_appcds_dynamic/scratch/0/appcds-00h11m23s161.jsa).
]
 exitValue = 1

java.lang.RuntimeException: 'Hi, how are you?' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:206)
	at VerifierTest.checkRuntimeOutput(VerifierTest.java:117)
	at VerifierTest.lambda$testset_1$0(VerifierTest.java:226)
	at jdk.test.lib.cds.CDSTestUtils$Result.ifNoMappingFailure(CDSTestUtils.java:187)
	at VerifierTest.testset_2(VerifierTest.java:306)
	at VerifierTest.main(VerifierTest.java:96)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 'Hi, how are you?' missing from stdout/stderr 


Here's a snippet from the VerifierTest_1A.java log file:

----------System.err:(28/1769)----------
 stdout: [Error occurred during initialization of VM
Unable to use shared archive.
];
 stderr: [An error has occurred while processing the shared archive file.
Specified shared archive not found (/opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S8400/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7bf3d6f7-cc0c-471e-8b05-a66076a1f098/runs/d1bb70d8-2a63-484b-8898-b3c0afd1df3c/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_appcds_dynamic/scratch/1/appcds-00h11m21s670.jsa).
]
 exitValue = 1

java.lang.RuntimeException: 'java.lang.VerifyError' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:206)
	at VerifierTest.checkRuntimeOutput(VerifierTest.java:117)
	at VerifierTest.lambda$testset_1$0(VerifierTest.java:226)
	at jdk.test.lib.cds.CDSTestUtils$Result.ifNoMappingFailure(CDSTestUtils.java:187)
	at VerifierTest.testset_1(VerifierTest.java:226)
	at VerifierTest.main(VerifierTest.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 'java.lang.VerifyError' missing from stdout/stderr ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261937,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2rm43:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-02-22 14:31;ccheung;The ""Specified shared archive not found"" error is due to the previous CDS dump operation of the dynamic archive has failed with the following error:

An error has occurred while processing the shared archive file.
The shared archive file was created with less restrictive verification setting than the current setting.

The ""shared archive"" was referring to the base archive created at the beginning of the test.

The above error message is from FileMapHeader::validate() in filemap.cpp.

  if (_has_platform_or_app_classes &&
      ((!_verify_local && BytecodeVerificationLocal) ||
       (!_verify_remote && BytecodeVerificationRemote))) {
    FileMapInfo::fail_continue(""The shared archive file was created with less restrictive ""
                  ""verification setting than the current setting."");
    return false;
  }

With UT enabled, during dumping of the base archive, the following 2 classes were loaded by the PlatformClassLoader:
[0.240s][info ][class,load] sun.util.resources.cldr.provider.CLDRLocaleDataMetaInfo source: jrt:/jdk.localedata
[0.240s][debug][class,load]  klass: 0x0000000800000800 super: 0x0000000800041040 interfaces: 0x00000008000360e8 loader: [loader data: 0x00007f649844ed50 for instance a 'jdk/internal/loader/ClassLoaders$PlatformClassLoader'{0x000000010104e630}] bytes: 8363 checksum: e72722e9

[0.289s][info ][class,load] sun.util.resources.provider.NonBaseLocaleDataMetaInfo source: jrt:/jdk.localedata
[0.289s][debug][class,load]  klass: 0x0000000800000a68 super: 0x0000000800041040 interfaces: 0x00000008000360e8 loader: [loader data: 0x00007f649844ed50 for instance a 'jdk/internal/loader/ClassLoaders$PlatformClassLoader'{0x000000010104e630}] bytes: 5012 checksum: e8698035

As a result, the _has_platform_or_app_classes is set to true. So when dumping a dynamic archive using a base archive with the -Xverify set to a different value from the base archive, the aforementioned check would fail.;;;","2021-02-23 11:39;mseledtsov;ILW = MLM = p4;;;","2021-03-10 09:19;roboduke;Changeset: 9399e1b7
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2021-03-10 17:18:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9399e1b7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
gtest/GTestWrapper.java vmErrorTest.unimplemented1_vm_assert failed,JDK-8261916,5042264,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,dcubed,dcubed,2021-02-17 07:48,2021-11-14 21:32,2023-10-01 09:58,2021-03-15 16:12,17,,,,,,,,17,hotspot,,0,intermittent,investigate-UT,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok-next,jdk16u-fix-yes,noreg-hard,tier1,tier3,tier4,tier7,,,,,,,,,,,"The following test failed in the JDK17 CI:

gtest/GTestWrapper.java

Here's a snippet from the log file:

[----------] 12 tests from vmErrorTest
[ RUN      ] vmErrorTest.resourceMark_vm_assert
[       OK ] vmErrorTest.resourceMark_vm_assert (243 ms)
[ RUN      ] vmErrorTest.assert1_vm_assert
[       OK ] vmErrorTest.assert1_vm_assert (237 ms)
[ RUN      ] vmErrorTest.assert2_vm_assert
[       OK ] vmErrorTest.assert2_vm_assert (234 ms)
[ RUN      ] vmErrorTest.guarantee1_vm_assert
[       OK ] vmErrorTest.guarantee1_vm_assert (229 ms)
[ RUN      ] vmErrorTest.guarantee2_vm_assert
[       OK ] vmErrorTest.guarantee2_vm_assert (236 ms)
[ RUN      ] vmErrorTest.fatal1_vm_assert
[       OK ] vmErrorTest.fatal1_vm_assert (247 ms)
[ RUN      ] vmErrorTest.fatal2_vm_assert
[       OK ] vmErrorTest.fatal2_vm_assert (216 ms)
[ RUN      ] vmErrorTest.fatal3_vm_assert
[       OK ] vmErrorTest.fatal3_vm_assert (224 ms)
[ RUN      ] vmErrorTest.out_of_memory1_vm_assert
[       OK ] vmErrorTest.out_of_memory1_vm_assert (223 ms)
[ RUN      ] vmErrorTest.shouldnotcallthis1_vm_assert
[       OK ] vmErrorTest.shouldnotcallthis1_vm_assert (230 ms)
[ RUN      ] vmErrorTest.shouldnotreachhere1_vm_assert
[       OK ] vmErrorTest.shouldnotreachhere1_vm_assert (232 ms)
[ RUN      ] vmErrorTest.unimplemented1_vm_assert
/opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S15067/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3e33a835-0119-4855-b0e4-d98de1473f0f/runs/c5f058e4-aa9f-43a8-8a15-153cdfa2f509/workspace/open/test/hotspot/gtest/utilities/test_vmerror.cpp:96: Failure
Death test: child_vmErrorTest_unimplemented1_()
    Result: died but not with expected exit code:
            Terminated by signal 6 (core dumped)
Actual msg:
[  DEATH   ] assert failed: Error: Unimplemented()*** Error in `/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-727/linux-x64-debug.test/hotspot/gtest/server/gtestLauncher': double free or corruption (!prev): 0x0000564abacb7b00 ***
[  DEATH   ] ======= Backtrace: =========
[  DEATH   ] /lib64/libc.so.6(+0x81329)[0x7ff4a810a329]
[  DEATH   ] /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-727/linux-x64-debug.test/hotspot/gtest/server/libjvm.so(+0x1db1b5c)[0x7ff4aa50ab5c]
[  DEATH   ] /lib64/libc.so.6(__cxa_finalize+0x9a)[0x7ff4a80c30aa]
[  DEATH   ] /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-727/linux-x64-debug.test/hotspot/gtest/server/libjvm.so(+0x354a63)[0x7ff4a8aada63]
[  DEATH   ] ======= Memory map: ========
[  DEATH   ] 60e800000-62dc00000 rw-p 00000000 00:00 0 
[  DEATH   ] 62dc00000-800020000 ---p 00000000 00:00 0 
[  DEATH   ] 800020000-800030000 rw-p 00000000 00:00 0 
[  DEATH   ] 800030000-800040000 ---p 00000000 00:00 0 
[  DEATH   ] 800040000-800080000 rw-p 00000000 00:00 0 
[  DEATH   ] 800080000-840000000 ---p 00000000 00:00 0 
[  DEATH   ] 564aba7c0000-564aba7c1000 r-xp 00000000 08:03 872849400                  /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-727/linux-x64-debug.test/hotspot/gtest/server/gtestLauncher
[  DEATH   ] 564aba7c1000-564aba7c2000 r--p 00000000 08:03 872849400                  /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-727/linux-x64-debug.test/hotspot/gtest/server/gtestLauncher
[  DEATH   ] 564aba7c2000-564aba7c3000 rw-p 00001000 08:03 872849400                  /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-727/linux-x64-debug.test/hotspot/gtest/server/gtestLauncher
[  DEATH   ] 564abac0d000-564abb144000 rw-p 00000000 00:00 0                          [heap]
[  DEATH   ] 7ff430000000-7ff430021000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff430021000-7ff434000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff434000000-7ff434021000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff434021000-7ff438000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff438000000-7ff438021000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff438021000-7ff43c000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff43c000000-7ff43c021000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff43c021000-7ff440000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff440000000-7ff440107000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff440107000-7ff444000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff444000000-7ff444021000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff444021000-7ff448000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff448000000-7ff448021000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff448021000-7ff44c000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff44c000000-7ff44c0c6000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff44c0c6000-7ff450000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff450000000-7ff450021000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff450021000-7ff454000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff454000000-7ff454021000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff454021000-7ff458000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff458000000-7ff458021000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff458021000-7ff45c000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff45c000000-7ff45c021000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff45c021000-7ff460000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff460000000-7ff460021000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff460021000-7ff464000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff464000000-7ff464021000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff464021000-7ff468000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff468000000-7ff468021000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff468021000-7ff46c000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff46dafa000-7ff46dafb000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff46dafb000-7ff46dbfc000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff46dbfc000-7ff46dc00000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff46dc00000-7ff46dcfd000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff46dcfd000-7ff46dd01000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff46dd01000-7ff46ddfe000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff46ddfe000-7ff46de02000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff46de02000-7ff46deff000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff46deff000-7ff46df03000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff46df03000-7ff470000000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff470000000-7ff470021000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff470021000-7ff474000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff474000000-7ff474021000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff474021000-7ff478000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff478000000-7ff478021000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff478021000-7ff47c000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff47c0f9000-7ff47c0fd000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff47c0fd000-7ff47c1fa000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff47c1fa000-7ff47c1fe000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff47c1fe000-7ff47c2fb000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff47c2fb000-7ff47c2ff000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff47c2ff000-7ff47c3fc000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff47c3fc000-7ff47c400000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff47c400000-7ff47c4fd000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff47c4fd000-7ff47c501000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff47c501000-7ff47c5fe000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff47c5fe000-7ff47c602000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff47c602000-7ff47c6ff000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff47c6ff000-7ff47c703000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff47c703000-7ff47cb70000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff47cb70000-7ff47d000000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff47d053000-7ff47d054000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff47d054000-7ff47d231000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff47d231000-7ff47d232000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff47d232000-7ff47d333000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff47d333000-7ff47d334000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff47d334000-7ff47dc3d000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff47dc3d000-7ff47dc3e000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff47dc3e000-7ff47dd3f000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff47dd3f000-7ff47dd40000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff47dd40000-7ff47de41000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff47de41000-7ff47de42000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff47de42000-7ff47e794000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff47e794000-7ff485c24000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff485c24000-7ff4863f4000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff4863f4000-7ff48d884000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff48d884000-7ff48d97e000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff48d97e000-7ff48e810000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff48e810000-7ff48e90a000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff48e90a000-7ff48f79c000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff48f79c000-7ff48f896000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff48f896000-7ff490728000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff490728000-7ff490f35000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff490f35000-7ff49101b000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff49101b000-7ff49128b000 rwxp 00000000 00:00 0 
[  DEATH   ] 7ff49128b000-7ff4915ad000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff4915ad000-7ff49181d000 rwxp 00000000 00:00 0 
[  DEATH   ] 7ff49181d000-7ff498ae4000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff498ae4000-7ff498d54000 rwxp 00000000 00:00 0 
[  DEATH   ] 7ff498d54000-7ff4a001b000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff4a001b000-7ff4a0027000 r-xp 00000000 08:03 2881766                    /usr/lib64/libnss_files-2.17.so
[  DEATH   ] 7ff4a0027000-7ff4a0226000 ---p 0000c000 08:03 2881766                    /usr/lib64/libnss_files-2.17.so
[  DEATH   ] 7ff4a0226000-7ff4a0227000 r--p 0000b000 08:03 2881766                    /usr/lib64/libnss_files-2.17.so
[  DEATH   ] 7ff4a0227000-7ff4a0228000 rw-p 0000c000 08:03 2881766                    /usr/lib64/libnss_files-2.17.so
[  DEATH   ] 7ff4a0228000-7ff4a022e000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff4a784b000-7ff4a7860000 r-xp 00000000 08:03 237                        /usr/lib64/libgcc_s-4.8.5-20150702.so.1
[  DEATH   ] 7ff4a7860000-7ff4a7a5f000 ---p 00015000 08:03 237                        /usr/lib64/libgcc_s-4.8.5-20150702.so.1
[  DEATH   ] 7ff4a7a5f000-7ff4a7a60000 r--p 00014000 08:03 237                        /usr/lib64/libgcc_s-4.8.5-20150702.so.1
[  DEATH   ] 7ff4a7a60000-7ff4a7a61000 rw-p 00015000 08:03 237                        /usr/lib64/libgcc_s-4.8.5-20150702.so.1
[  DEATH   ] 7ff4a7a61000-7ff4a7a78000 r-xp 00000000 08:03 2881774                    /usr/lib64/libpthread-2.17.so
[  DEATH   ] 7ff4a7a78000-7ff4a7c77000 ---p 00017000 08:03 2881774                    /usr/lib64/libpthread-2.17.so
[  DEATH   ] 7ff4a7c77000-7ff4a7c78000 r--p 00016000 08:03 2881774                    /usr/lib64/libpthread-2.17.so
[  DEATH   ] 7ff4a7c78000-7ff4a7c79000 rw-p 00017000 08:03 2881774                    /usr/lib64/libpthread-2.17.so
[  DEATH   ] 7ff4a7c79000-7ff4a7c7d000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff4a7c7d000-7ff4a7c7f000 r-xp 00000000 08:03 2881754                    /usr/lib64/libdl-2.17.so
[  DEATH   ] 7ff4a7c7f000-7ff4a7e7f000 ---p 00002000 08:03 2881754                    /usr/lib64/libdl-2.17.so
[  DEATH   ] 7ff4a7e7f000-7ff4a7e80000 r--p 00002000 08:03 2881754                    /usr/lib64/libdl-2.17.so
[  DEATH   ] 7ff4a7e80000-7ff4a7e81000 rw-p 00003000 08:03 2881754                    /usr/lib64/libdl-2.17.so
[  DEATH   ] 7ff4a7e81000-7ff4a7e88000 r-xp 00000000 08:03 1384391                    /usr/lib64/librt-2.17.so
[  DEATH   ] 7ff4a7e88000-7ff4a8087000 ---p 00007000 08:03 1384391                    /usr/lib64/librt-2.17.so
[  DEATH   ] 7ff4a8087000-7ff4a8088000 r--p 00006000 08:03 1384391                    /usr/lib64/librt-2.17.so
[  DEATH   ] 7ff4a8088000-7ff4a8089000 rw-p 00007000 08:03 1384391                    /usr/lib64/librt-2.17.so
[  DEATH   ] 7ff4a8089000-7ff4a824d000 r-xp 00000000 08:03 2881748                    /usr/lib64/libc-2.17.so
[  DEATH   ] 7ff4a824d000-7ff4a844c000 ---p 001c4000 08:03 2881748                    /usr/lib64/libc-2.17.so
[  DEATH   ] 7ff4a844c000-7ff4a8450000 r--p 001c3000 08:03 2881748                    /usr/lib64/libc-2.17.so
[  DEATH   ] 7ff4a8450000-7ff4a8452000 rw-p 001c7000 08:03 2881748                    /usr/lib64/libc-2.17.so
[  DEATH   ] 7ff4a8452000-7ff4a8457000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff4a8457000-7ff4a8558000 r-xp 00000000 08:03 2881756                    /usr/lib64/libm-2.17.so
[  DEATH   ] 7ff4a8558000-7ff4a8757000 ---p 00101000 08:03 2881756                    /usr/lib64/libm-2.17.so
[  DEATH   ] 7ff4a8757000-7ff4a8758000 r--p 00100000 08:03 2881756                    /usr/lib64/libm-2.17.so
[  DEATH   ] 7ff4a8758000-7ff4a8759000 rw-p 00101000 08:03 2881756                    /usr/lib64/libm-2.17.so
[  DEATH   ] 7ff4a8759000-7ff4aaab6000 r-xp 00000000 08:03 872849401                  /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-727/linux-x64-debug.test/hotspot/gtest/server/libjvm.so
[  DEATH   ] 7ff4aaab6000-7ff4aaab7000 ---p 0235d000 08:03 872849401                  /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-727/linux-x64-debug.test/hotspot/gtest/server/libjvm.so
[  DEATH   ] 7ff4aaab7000-7ff4aabb1000 r--p 0235d000 08:03 872849401                  /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-727/linux-x64-debug.test/hotspot/gtest/server/libjvm.so
[  DEATH   ] 7ff4aabb1000-7ff4aabe7000 rw-p 02457000 08:03 872849401                  /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-727/linux-x64-debug.test/hotspot/gtest/server/libjvm.so
[  DEATH   ] 7ff4aabe7000-7ff4aaf14000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff4aaf14000-7ff4aaf36000 r-xp 00000000 08:03 330344                     /usr/lib64/ld-2.17.so
[  DEATH   ] 7ff4aaf63000-7ff4aafe8000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff4aafe8000-7ff4ab0ce000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff4ab0ce000-7ff4ab0d3000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff4ab0d3000-7ff4ab0da000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff4ab0da000-7ff4ab0fe000 r-xp 00000000 08:03 209088411                  /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-727/linux-x64-debug.jdk/jdk-17/fastdebug/lib/libjava.so
[  DEATH   ] 7ff4ab0fe000-7ff4ab0ff000 ---p 00024000 08:03 209088411                  /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-727/linux-x64-debug.jdk/jdk-17/fastdebug/lib/libjava.so
[  DEATH   ] 7ff4ab0ff000-7ff4ab100000 r--p 00024000 08:03 209088411                  /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-727/linux-x64-debug.jdk/jdk-17/fastdebug/lib/libjava.so
[  DEATH   ] 7ff4ab100000-7ff4ab101000 rw-p 00025000 08:03 209088411                  /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-727/linux-x64-debug.jdk/jdk-17/fastdebug/lib/libjava.so
[  DEATH   ] 7ff4ab101000-7ff4ab102000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff4ab102000-7ff4ab11f000 r-xp 00000000 08:03 209088415                  /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-727/linux-x64-debug.jdk/jdk-17/fastdebug/lib/libjimage.so
[  DEATH   ] 7ff4ab11f000-7ff4ab121000 r--p 0001c000 08:03 209088415                  /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-727/linux-x64-debug.jdk/jdk-17/fastdebug/lib/libjimage.so
[  DEATH   ] 7ff4ab121000-7ff4ab122000 rw-p 0001e000 08:03 209088415                  /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+10-727/linux-x64-debug.jdk/jdk-17/fastdebug/lib/libjimage.so
[  DEATH   ] 7ff4ab122000-7ff4ab127000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff4ab128000-7ff4ab129000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff4ab129000-7ff4ab131000 rw-s 00000000 08:03 608883363                  /tmp/hsperfdata_mach5-one/24756 (deleted)
[  DEATH   ] 7ff4ab131000-7ff4ab132000 ---p 00000000 00:00 0 
[  DEATH   ] 7ff4ab132000-7ff4ab133000 r--p 00000000 00:00 0 
[  DEATH   ] 7ff4ab133000-7ff4ab134000 rwxp 00000000 00:00 0 
[  DEATH   ] 7ff4ab134000-7ff4ab135000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ff4ab135000-7ff4ab136000 r--p 00021000 08:03 330344                     /usr/lib64/ld-2.17.so
[  DEATH   ] 7ff4ab136000-7ff4ab137000 rw-p 00022000 08:03 330344                     /usr/lib64/ld-2.17.so
[  DEATH   ] 7ff4ab137000-7ff4ab138000 rw-p 00000000 00:00 0 
[  DEATH   ] 7ffd576bf000-7ffd576c3000 ---p 00000000 00:00 0 
[  DEATH   ] 7ffd576c3000-7ffd577bf000 rw-p 00000000 00:00 0                          [stack]
[  DEATH   ] 7ffd577e8000-7ffd577eb000 r--p 00000000 00:00 0                          [vvar]
[  DEATH   ] 7ffd577eb000-7ffd577ec000 r-xp 00000000 00:00 0                          [vdso]
[  DEATH   ] ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
[  DEATH   ] 
[  FAILED  ] vmErrorTest.unimplemented1_vm_assert (6528 ms)
[----------] 12 tests from vmErrorTest (9079 ms total)",,,,,,,,,,JDK-8264537,JDK-8263728,JDK-8266997,JDK-8277098,,,,,,,,,,,,,,,,,,,,JDK-8261917,JDK-8262072,,,JDK-8166727,,,,,,JDK-8263564,JDK-8263567,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2rm3n:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-02-17 07:58;dcubed;This is weird. Two different gtests fail on the same test machine
in the same Tier3 job set. This is the other one:

    JDK-8261917 gtest/LargePageGtests.java#use-large-pages os.page_size_for_region_with_zero_min_pages_vm_assert failed;;;","2021-02-23 11:43;mseledtsov;ILW = MMM = P3;;;","2021-03-10 13:46;dcubed;There are a total of 15 sighting of this failure in the CI. Here's the distribution
of the JVM options that are passed to the tasks:

$ sort failing_options  | uniq -c
      1 -Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation
      1 -Xshare:off -showversion
      3 -XX:+CheckUnhandledOops
      4 -XX:+CreateCoredumpOnCrash -XX:+UseParallelGC -XX:+UseNUMA
      3 -XX:+CreateCoredumpOnCrash -XX:+UseSerialGC
      1 -XX:+CreateCoredumpOnCrash -XX:+UseZGC
      1 -XX:+UseBiasedLocking
      1 -XX:-UseCompressedOops

On my Linux-X64 server, I had good luck with
""-XX:+CreateCoredumpOnCrash -XX:+UseSerialGC""
and saw a run where 38 gtests failed in a single run.;;;","2021-03-10 16:07;dholmes;[~dcubed] if -XX:+CreateCoreDumpOnCrash is being passed through to all the gtests and overriding the -XX:-CreateCoreDumpOnCrash that is explicitly set by gtestMain.cpp init_vm, then that will explain some of the observed failure modes in the vm_assert related tests. That is a bug in our gtestMain.

We also have a bug with SuppressFatalErrorMessages as I mentioned above because that skips the serialization control on report_and_die and so we can get two threads executing os::abort and all the VM shutdown logic concurrently, which then leads to some of the secondary crashes/failures that we see.;;;","2021-03-10 20:40;dholmes;Okay I now have a much clearer picture of what can happen. There are a number of different failure modes and a number of races involved.

Consider an ""other vm"" test that doesn't force an assertion failure or guarantee failure. It loads the JVM normally without suppressing fatal errors or disabling core files. When the test completes it calls exit(0). That is not a clean way to terminate the JVM - we always ensure the JVM exits at a safepoint, and for good reason. This exit(0) call will trigger atexit hooks and global cleanup - e.g. running destructors for static objects. Some parts of the JDK can have such static objects.

Now imagine there is another thread running some Java code at the same time that this exit teardown is happening. They are in a race. If the thread doesn't touch any of these static objects then all is fine but if it does it can lead to a crash e.g.

 A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000151ea1c04623, pid=13495, tid=13516
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-internal+0-LTS-2021-03-10-0709355.daholme...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-internal+0-LTS-2021-03-10-0709355.daholme..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# C  [libjimage.so+0x4623]  ImageStrings::find(Endian*, char const*, int*, unsigned int)+0x63
#
# Core dump will be written. Default location: /scratch/users/daholme/jdk-dev2.git/build/linux-x64-debug-8261916-ut-gtest/test-support/gtest_MutexRank_monitor_wait_rank_in_order_other_vm_server/core.13495

we then go looking for the hs_err log and core file and are surprised not to find them (or find a truncated hs_err file)! But this crashing thread is still racing with the original exit(0) call, so while it is still trying to create the hs_err file it can be blown away by the process exit. So no core file, and either no hs_err file or else a truncated one. And of course the test reports that it PASSED!

There is a similar scenario with the vm_assert related tests, that deliberately crash the VM, but now it is more complex. Those tests enable SuppressFatalErrorMessages and disable core files (though they can be reenabled via the flags for the test job). With core files disabled a fatal error in the VM again calls exit() and we get the same race with the Java thread. But this time because of SuppressFatalErrorMessages we don't see any hs_err related output for the unexpected crash, and we also trigger the shutdown race that I mentioned above. So now we can have two threads trying to shutdown the VM and that can lead to secondary errors/crashes which again are suppressed so we can't see what is happening and what we see or don't see is somewhat random/chaotic and could include the double-free glibc errors seen in some cases. And note that if glibc hits one of those errors it will also call abort() itself and thus (if it wins the race) generate a core file even if the VM would not.

I added some logging for when we take the suppressed fatal error path and saw, for example:

Suppressed fatal error handling:  pid=22038, tid=22038
Suppressed fatal error handling:  pid=22038, tid=22058
Suppressed fatal error handling:  pid=22038, tid=22038

so two threads and a recursive crash. (But the test still passed!)
;;;","2021-03-11 07:57;dcubed;Hmmm.... as I reported above, there are several test task definitions
that pass ""-XX:+CreateCoredumpOnCrash"" as one of the JVM args
options to the test task.

test/hotspot/jtreg/gtest/GTestWrapper.java has this:

    @run main/native GTestWrapper

but it may be shielding itself from external options some other way.;;;","2021-03-11 17:34;dholmes;I'm still unclear whether the -XX:+CreateCoreDumpOnCrash actually makes it all the way through to the running of the gtest - Coleen thinks that would cause them to fail regardless of UT.

Update: Coleen is correct, enabling core dumps causes these tests to fail. So somehow these extra args are being filtered out at some level of the gtest code.

What I can see from the failure reports is that we only seem to get a core file when we hit an assertion failure in the googletest code:

[ RUN      ] vmErrorTest.assert1_vm_assert
/opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S77120/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/eca12897-3c15-4761-8abc-f3a922fe14a3/runs/ad8dd39a-8067-4eb8-9cb1-a951c5c502e2/workspace/open/test/hotspot/gtest/utilities/test_vmerror.cpp:46: Failure
Death test: child_vmErrorTest_assert1_()
    Result: died but not with expected exit code:
            Terminated by signal 6 (core dumped)
Actual msg:
[  DEATH   ] assert failed: assert(str == NULL) failed: expected null
[  DEATH   ] [ FATAL ] /opt/mach5/mesos/work_dir/jib-master/install/jpg/infra/builddeps/gtest/1.8.1/gtest-1.8.1.tar.gz/googletest-release-1.8.1/googletest/include/gtest/internal/gtest-port.h:2182:: pthread_key_delete(key_)failed with error 22

so it calls abort() not our gtest wrapper nor the JVM. I don't know exactly why this particular destructor issue arises and I have no intention of trying to dig through the googletest code.;;;","2021-03-14 19:33;dholmes;I've filed JDK-8263567 ""gtests don't terminate the VM safely"" for the case of non-asserting gtests calling exit().

For the specific issue here of the vm_assert gtests I propose to make two changes to the VM:

1. When core dumps are disabled, os::abort should call ::_exit not ::exit, as the former more closely models the abrupt termination of ::abort() but without the core dump.

2. The race condition when SupressFatalErrorMessages is true will be fixed by placing the check after the atomic set/check of the thread-id. That way only a single thread can trigger the fatal error processing.;;;","2021-03-15 16:11;roboduke;Changeset: 8c1112a6
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-03-15 23:11:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8c1112a6
;;;","2021-03-17 06:12;hseigel;Fix Request (16u)

Backporting this fix prevents this bug from occurring in JDK-16u.  The original bug fix patch applied cleanly to file vmError.cpp but not to os_posix.cpp.  This is because the changed function (os::abort()) is not consolidated into os_posix.cpp in JDK-16u.  After applying the patch to a JDK-16u repo and modifying the appropriate os_<..>.cpp files, the fix was regression tested by running Mach5 tiers 1 and 2 on Linux, Windows, and Mac OS, and running tiers 3-5 on Mac OS.
;;;","2021-03-17 17:24;dholmes;Before backporting to 16u it would make sense to backport the change that consolidated the code into os_posix.cpp - JDK-8263564;;;","2021-11-05 05:08;stuefe;Fix Request (11u)

I'd like to backport this fix to 11u to prevent this bug from happening there.

Original patch does not apply cleanly:
- vmError.cpp changed slightly, since JDK-8258479 did some code cleanups for JDK17
- os::abort() ad been unified into os_posix.cpp across all posix platforms with JDK-8263564 for JDK 17. I don't want to backport JDK-8263564 since it causes too much ripples to much. Instead, the patch changes the various os::abort() implementations for all individual OSes, including Solaris.

See: https://github.com/openjdk/jdk11u-dev/pull/590;;;",,,,,,,,,,,,,,,,
IfNode::fold_compares_helper faces non-canonicalized bool when running JRuby JSON workload,JDK-8261914,5042262,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,shade,shade,2021-02-17 07:12,2021-08-09 14:29,2023-10-01 09:58,2021-03-01 00:48,11,16,17,9,,,,,17,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok-next,jdk16u-fix-yes,oracle-triage-11,oracle-triage-17,redhat-interest,,,,,,,,,,,,,,"As reported here:
  https://mail.openjdk.java.net/pipermail/hotspot-compiler-dev/2021-February/044182.html

The issue seems to be time-sensitive. I was able to reproduce this in ""release"" mode after promoting one of the asserts to guarantee:

diff --git a/src/hotspot/share/opto/ifnode.cpp b/src/hotspot/share/opto/ifnode.cpp
index 29624765324..467d8f19276 100644
--- a/src/hotspot/share/opto/ifnode.cpp
+++ b/src/hotspot/share/opto/ifnode.cpp
@@ -948,7 +948,9 @@ bool IfNode::fold_compares_helper(ProjNode* proj, ProjNode* success, ProjNode* f
      assert((dom_bool->_test.is_less() && proj->_con) ||
             (dom_bool->_test.is_greater() && !proj->_con), ""incorrect test"");
      // this test was canonicalized
-    assert(this_bool->_test.is_less() && !fail->_con, ""incorrect test"");
+    guarantee(this_bool->_test.is_less() && !fail->_con, ""incorrect test: dom_bool.test=%d 
proj._con=%d this_bool.test=%d fail._con=%d"",
+           dom_bool->_test._test, proj->_con,
+           this_bool->_test._test, fail->_con);

      cond = (hi_test == BoolTest::le || hi_test == BoolTest::gt) ? BoolTest::gt : BoolTest::ge;

...which then fails with:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (ifnode.cpp:955), pid=2438111, tid=2438182
#  guarantee(this_bool->_test.is_less() && !fail->_con) failed: incorrect test: dom_bool.test=3 
proj._con=1 this_bool.test=7 fail._con=1
#
# JRE version: OpenJDK Runtime Environment (17.0) (build 17-internal+0-adhoc.shade.jdk)
# Java VM: OpenJDK 64-Bit Server VM (17-internal+0-adhoc.shade.jdk, mixed mode, sharing, tiered, 
compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x7fc3ee]  IfNode::fold_compares_helper(ProjNode*, ProjNode*, ProjNode*, 
PhaseIterGVN*) [clone .part.0]+0x19e
#
# Core dump will be written. Default location: Core dumps may be processed with 
""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to 
/home/shade/temp/jruby/jruby-issue-6554/core.2438111)
#
# An error report file with more information is saved as:
# /home/shade/temp/jruby/jruby-issue-6554/hs_err_pid2438111.log
#
# Compiler replay data is saved as:
# /home/shade/temp/jruby/jruby-issue-6554/replay_pid2438111.log

""this_bool.test=7"" means the test is ""GE"". The downstream code does not expect this. It expects the test to be canonicalized.

JDK-8261912 should separately provide the defensive bailout when this happens.",,,,,,,,,,JDK-8263581,JDK-8262738,JDK-8263365,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8073480,JDK-8261912,,,,,,,,,,,,,,,,,,,,,,,,,,,,b64,9,,,,,,,,"0|i2rm37:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Not verified,,"2021-02-17 12:53;kvn;Can you reproduce it with your replay_pid2438111.log? Or it does not work because of dynamic bytecode?
;;;","2021-02-17 23:13;thartmann;ILW = Incorrect execution of compiled code, intermittent but reproducible with JRuby workload, no workaround but disable compilation of affected method = HMM = P2;;;","2021-03-01 00:48;roboduke;Changeset: 20c93b3b
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-03-01 08:47:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/20c93b3b
;;;","2021-03-09 05:16;shade;Fix Request (16u)

This follows up on JDK-8261912 fix (that does the right thing in release mode), now fixing the thing in debug mode. Patch applies cleanly to 16u. It reshuffles the asserts, so no product regression is expected. Risk is low.;;;","2021-03-09 10:53;shade;Fix Request (11u)

Same reason as for 16u. Patch applies cleanly to 11u, passes tier{1,2} tests.;;;","2021-08-09 14:29;epavlova;The fix just reshuffles the asserts;;;",,,,,,,,,,,,,,,,,,,,,,
Code IfNode::fold_compares_helper more defensively,JDK-8261912,5042261,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,shade,shade,shade,2021-02-17 07:08,2021-08-13 11:02,2023-10-01 09:58,2021-02-18 07:52,11,16,17,9,,,,,17,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok,jdk16u-fix-yes,oracle-triage-11,oracle-triage-17,redhat-interest,,,,,,,,,,,,"As JDK-8261914 indicates, there are cases that break the internal asserts in IfNode::fold_compares_helper, code added by JDK-8073480 in JDK 9. Unfortunately, release builds would happily miscompile when that happens. It would be better to code IfNode::fold_compares_helper more defensively, so it bails when asserts are violated. This implicitly works around the bug in JDK-8261914. The goal for this limited workaround is to be trivially backportable in order to quickly unbreak 11u, 16u and 17.",,,,,,,,,,JDK-8262727,JDK-8262962,JDK-8262455,JDK-8263290,JDK-8263076,,,,,,,,,,,,,,,,,,,,,,,JDK-8073480,,,,,,JDK-8261914,,,,,,,,,,,,,,,,,,,,,,,b64,9,,,,,,,,"0|i2rm2z:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-02-17 23:15;thartmann;ILW = Same as JDK-8261914 = P2;;;","2021-02-18 07:52;roboduke;Changeset: e9f3aab7
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-02-18 15:51:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e9f3aab7
;;;","2021-03-01 01:30;shade;Fix Request (11u)

This workarounds C2 miscompilation. Patch applies cleanly to 11u, passes tier{1,2}. Patch is low-risk, as it disables the C2 optimization in places where it would definitely miscompile.;;;","2021-03-01 02:31;shade;Fix Request (16u)

Same reason as for 11u.;;;","2021-03-04 02:09;shade;Fix Request (15u)

Same reason as for 16u and 11u.;;;",,,,,,,,,,,,,,,,,,,,,,,
DrawScanline vertex calculation is not proper,JDK-8261908,5042252,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jdv,jdv,jdv,2021-02-17 04:56,2021-02-17 08:44,2023-10-01 09:58,2021-02-17 05:22,internal,,,,,,,,internal,client-libs,,0,critical,lanai,regression,sn_87,,,,,,,,,,,,,,,,,,,After JDK-8261706 we are seeing artifacts in RenderPerfTest with uiScale=1.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i2rm17:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract generates class names that are restricted type names,JDK-8261893,5042237,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-02-17 03:13,2021-02-17 05:34,2023-10-01 09:58,2021-02-17 05:34,repo-panama,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"jextract crash with libhfsp-dev's libhfsp.h

extracting header ./usr/include/hfsplus/libhfsp.h
./usr/include/hfsplus/libhfsp.h -&gt; OUTPUT_ERROR

WARNING: Using incubator modules: jdk.incubator.foreign, jdk.incubator.jextract
In memory compilation failed: libhfsp_h.java:3805: error: 'record' not allowed here
    public static class record {
                        ^
  as of release 14, 'record' is a restricted type name and cannot be used for type declarations
libhfsp_h.java:3807: error: 'record' is not allowed here
        /* package-private */ record() {}
                              ^
warning: using incubating module(s): jdk.incubator.foreign
2 errors
1 warning

Reduced test cases:

File: t.h

struct record {
  int x;
};

jextract t.h 
WARNING: Using incubator modules: jdk.incubator.jextract, jdk.incubator.foreign
In memory compilation failed: t_h.java:12: error: 'record' not allowed here
    public static class record {
                        ^
  as of release 14, 'record' is a restricted type name and cannot be used for type declarations
warning: using incubating module(s): jdk.incubator.foreign
1 error
1 warning


File: x.h

struct var {
  int x;
};

 jextract x.h 
WARNING: Using incubator modules: jdk.incubator.foreign, jdk.incubator.jextract
In memory compilation failed: x_h.java:12: error: 'var' not allowed here
    public static class var {
                        ^
  as of release 10, 'var' is a restricted type name and cannot be used for type declarations
warning: using incubating module(s): jdk.incubator.foreign
1 error
1 warning",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rlxv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sanity/client/SwingSet/src/EditorPaneDemoTest.java fails with Metal API Validation,JDK-8261891,5042235,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,avu,jdv,jdv,2021-02-17 02:59,2021-02-23 13:46,2023-10-01 09:58,2021-02-23 13:46,internal,,,,,,,,internal,client-libs,,0,code-review,critical,lanai,,,,,,,,,,,,,,,,,,,,"Looks like in DrawLine we are passing invalid data when AA is enabled and thats why this test is throwing error with Metal API validation.

[I] MTLContext.setColorPaint: pixel=ffffffff [r=255 g=255 b=255 a=255]
[V] MTLRenderQueue_flushBuffer: opcode=20, rem=372
[I] MTLRenderer_FillRect
[I] MTLRenderer_FillRect (x=-35 y=-719 w=766 h=1109), dst tex=0x7fe1f1ef3bf0
[V] MTLRenderQueue_flushBuffer: opcode=10, rem=352
[I] MTLRenderer_DrawLine (x1=61 y1=13 x2=61 y2=13), dst tex=0x7fe1f1ef3bf0
[V] MTLLayer_displayLinkCallback() called
----------System.err:(26/2178)----------
2021-02-17 16:16:43.743 java[4703:3573344] Metal API Validation Enabled
2021-02-17 16:16:44.172 system_profiler[4705:3573439] Metal API Validation Enabled
2021-02-17 16:16:45.635 java[4703:3573379] name is : .SFNS-Regular
2021-02-17 16:16:45.635 java[4703:3573379] family is : .AppleSystemUIFont
2021-02-17 16:16:45.635 java[4703:3573379] name is : .SFNS-Bold
2021-02-17 16:16:45.635 java[4703:3573379] family is : .AppleSystemUIFont
2021-02-17 16:16:46.027 java[4703:3573379] nsFont-name is : .AppleSystemUIFont
2021-02-17 16:16:46.027 java[4703:3573379] nsFont-family is : .AppleSystemUIFont
2021-02-17 16:16:46.027 java[4703:3573379] nsFont-desc-name is : .SFNS-Regular
2021-02-17 16:16:46.027 java[4703:3573379] nsFont-name is : .AppleSystemUIFont
2021-02-17 16:16:46.027 java[4703:3573379] nsFont-family is : .AppleSystemUIFontBold
2021-02-17 16:16:46.027 java[4703:3573379] nsFont-desc-name is : .SFNS-Bold
2021-02-17 16:16:46.034 java[4703:3573379] nsFont-name is : .AppleSystemUIFont
2021-02-17 16:16:46.034 java[4703:3573379] nsFont-family is : .AppleSystemUIFont
2021-02-17 16:16:46.034 java[4703:3573379] nsFont-desc-name is : .SFNS-Regular
2021-02-17 16:16:46.047 java[4703:3573379] nsFont-name is : .AppleSystemUIFont
2021-02-17 16:16:46.047 java[4703:3573379] nsFont-family is : .AppleSystemUIFontBold
2021-02-17 16:16:46.047 java[4703:3573379] nsFont-desc-name is : .SFNS-Bold
2021-02-17 16:16:46.205 java[4703:3573344] became key: 0 JEditorPane Demo (null)
2021-02-17 16:16:46.211 java[4703:3573344] became main: 1 JEditorPane Demo (null) 1
2021-02-17 16:17:09.182 java[4703:3573344] resigned main: 1 JEditorPane Demo (null)
2021-02-17 16:17:09.183 java[4703:3573344] resigned key: 0 JEditorPane Demo (null)
2021-02-17 16:17:09.183 java[4703:3573344] deactivating window: JEditorPane Demo
2021-02-17 16:17:09.927 java[4703:3573344] became key: 0 JEditorPane Demo (null)
2021-02-17 16:17:09.928 java[4703:3573344] became main: 1 JEditorPane Demo (null) 1
validateFunctionArguments:3485: failed assertion `Vertex Function(vert_col_aa): argument vertexBuffer.0[0] from buffer(0) with offset(0) and length(16) has space for 16 bytes, but argument has a length(24).'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i2rlxf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-02-21 22:33;jdv;Update : This issue is still reproducible in latest code. Issue happens only when uiScale=1.0 or in external display. It is not happening in default retina display. We hit drawLine path only in uiScale=1.0.;;;","2021-02-22 23:11;avu;Thanks for the hint with the scale, I was able to reproduce the failure:

jtreg -e:METAL_DEVICE_WRAPPER_TYPE=1,J2D_TRACE_LEVEL=5 -jdk:/Users/avu/ws/jbrlan/build/macosx-x86_64-server-fastdebug/images/jdk -vmoptions:""-Dsun.java2d.metal=True -Dsun.java2d.uiScale=1""  test/jdk/sanity/client/SwingSet/src/EditorPaneDemoTest.java;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
jextract javac compilation errors should not result in OUTPUT_ERROR exit code,JDK-8261879,5042225,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-02-17 01:51,2021-02-17 04:19,2023-10-01 09:58,2021-02-17 04:19,repo-panama,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"jextract javac compilation errors should not result in OUTPUT_ERROR exit code. javac compilation error => generated source is faulty and so should be reported as RUNTIME_ERROR rather than OUTPUT_ERROR.

This is useful for the scripts that process jextract output/exit code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rlv7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Non-flattened array blocks scalarization of inline type,JDK-8261874,5042218,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2021-02-17 01:16,2021-02-19 00:27,2023-10-01 09:58,2021-02-19 00:27,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,,,,,"#  Internal Error (/oracle/valhalla/open/src/hotspot/share/opto/macro.cpp:1207), pid=296976, tid=296991
#  assert(!inline_alloc || !tklass->klass()->as_inline_klass()->is_scalarizable()) failed: Scalarizable inline type allocations should not have safepoint uses

Current CompileTask:
C2:    679  431    b  4       compiler.valhalla.inlinetypes.TestGenerated::test9 (37 bytes)

Stack: [0x00007f8385638000,0x00007f8385739000],  sp=0x00007f8385734380,  free space=1008k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x139ab19]  PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) [clone .part.0]+0x4d9
V  [libjvm.so+0x139acb3]  PhaseMacroExpand::eliminate_macro_nodes()+0x133
V  [libjvm.so+0x139b269]  PhaseMacroExpand::expand_macro_nodes()+0x19
V  [libjvm.so+0xa49f02]  Compile::Optimize()+0x1722
V  [libjvm.so+0xa4bd35]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1aa5
V  [libjvm.so+0x861128]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f8
V  [libjvm.so+0xa5bd11]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xea1
V  [libjvm.so+0xa5c998]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1921956]  JavaThread::thread_main_inner()+0x256
V  [libjvm.so+0x1927dd0]  Thread::call_run()+0x100
V  [libjvm.so+0x15ea876]  thread_native_entry(Thread*)+0x116",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rltn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Do not start a deleted thread in jfrRecorderThread.cpp start_thread,JDK-8261873,5042216,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2021-02-17 00:11,2021-06-10 01:09,2023-10-01 09:58,2021-02-17 05:17,17,,,,,,,,,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"In jfrRecorderThread.cpp start_thread there is a code path where potentially
Thread::start is called on a deleted thread, this should be avoided.

See also the related Sonar finding :

https://sonarcloud.io/project/issues?id=shipilev_jdk&languages=cpp&open=AXck7_QbBBG2CXpcnIyR&resolved=false&severities=BLOCKER&types=BUG",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rlt7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-02-17 05:15;mbaesken;The issue has been marked as a false positive in the Sonar scan.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Backport relevant test changes & additions from JDK-8130125,JDK-8261867,5042210,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,andrew,andrew,andrew,2021-02-16 21:34,2021-05-04 13:15,2023-10-01 09:58,2021-03-31 15:07,openjdk8u,,,,,,,,openjdk8u302,client-libs,,0,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,,,,,,,,"The main focus of JDK-8130125 is irrelevant to 8u, as it concerns the introduction of the module system.  However, the change was also used to introduce a number of other test changes and open up three tests [0]. We should backport those parts of the change to 8u.

[0] https://mail.openjdk.java.net/pipermail/awt-dev/2015-July/009588.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8130125,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rlrv:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-03-25 13:44;phh;Fix Request [8u]

Review threads:
https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-February/013441.html
https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-March/013571.html

Review approval:
https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-March/013580.html
;;;","2021-03-31 15:07;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/jdk/rev/5e357683237b
User:  phh
Date:  2021-03-31 22:04:15 +0000
;;;","2021-05-04 13:13;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/5e357683237b
User:  andrew
Date:  2021-05-04 20:08:37 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Crash caused by lambda proxy class loaded in Shutdown hook,JDK-8261860,5042198,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccheung,iklam,iklam,2021-02-16 15:45,2021-03-09 08:55,2023-10-01 09:58,2021-02-18 18:40,15,16,,,,,,,17,hotspot,,0,cds,dynamic-cds,jdk16u-fix-request,jdk16u-fix-SQE-ok,jdk16u-fix-yes,,,,,,,,,,,,,,,,,,"When creating a dynamic CDS archive with -XX:ArchiveClassesAtExit, if a lambda proxy class P is loaded inside a Shutdown hook, the proxy's nest_host class N may not be properly linked. This causes the N to be missing from the archive.

When P is loaded from the archive at run time, it require that N must also be in the archive. Since this is not the case, the VM crashes in subsequent operations.",,,,,,,,,,JDK-8262917,JDK-8263287,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-02-16 18:21;ccheung;MyTest.java;https://bugs.openjdk.org/secure/attachment/93223/MyTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rlp7:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-02-16 15:50;iklam;Proposed fix: since shutdown hooks are rarely considered to be part of an app's start-up time, it should be OK to exclude all classes loaded inside shutdown hooks from the CDS archive (whose primary purpose is to reduce start-up time).

This bug happens because *regular* classes loaded inside shutdown hooks (N in Bug Description) are excluded from the archive, but lambda proxy classes (P) are not. A simple fix is to properly exclude P.;;;","2021-02-16 18:24;ccheung;Attached test case for reproducing the bug.

// compile the test case
javac MyTest.java
// create a test.jar
jar cvf test.jar *.class
// create an archive using dynamic dump
java -XX:ArchiveClassesAtExit=foo.jsa -cp test.jar MyTest
// run with the dynamic archive
java -XX:SharedArchiveFile=foo.jsa -cp test.jar MyTest

VM crashes due to the following assert failure in systemDictionaryShare.cpp:

#  assert(shared_nest_host != __null) failed: unexpected NULL _nest_host;;;","2021-02-18 18:40;roboduke;Changeset: 78cde648
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2021-02-19 02:40:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/78cde648
;;;","2021-02-26 14:42;ccheung;Fix Request:
The SQL team reported this bug. I think this should be backported to JDK16u so that the SQL team can continue using JDK16.
The patch is simple and should apply cleanly to JDK16.;;;",,,,,,,,,,,,,,,,,,,,,,,,
"gc/g1/TestStringDeduplicationTableRehash.java failed with ""RuntimeException: 'Rehash Count: 0' found in stdout""",JDK-8261859,5042197,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,kbarrett,dcubed,dcubed,2021-02-16 15:38,2021-07-15 10:19,2023-10-01 09:58,2021-03-02 10:24,16,17,,,,,,,17,hotspot,,0,gc-g1,investigate-UT,tier2,tier3,tier7,,,,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

gc/g1/TestStringDeduplicationTableRehash.java

Here's a snippet from the log file:

[1.499s][debug][gc,stringdedup]   Table
[1.499s][debug][gc,stringdedup]     Memory Usage: 543.7K
[1.499s][debug][gc,stringdedup]     Size: 8192, Min: 1024, Max: 16777216
[1.499s][debug][gc,stringdedup]     Entries: 15351, Load: 187.4%, Cached: 0, Added: 15357, Removed: 6
[1.499s][debug][gc,stringdedup]     Resize Count: 3, Shrink Threshold: 5461(66.7%), Grow Threshold: 16384(200.0%)
[1.499s][debug][gc,stringdedup]     Rehash Count: 0, Rehash Threshold: 120, Hash Seed: 0
[1.499s][debug][gc,stringdedup]     Age Threshold: 3

<snip>



java.lang.RuntimeException: 'Rehash Count: 0' found in stdout 

	at jdk.test.lib.process.OutputAnalyzer.shouldNotContain(OutputAnalyzer.java:252)
	at gc.g1.TestStringDeduplicationTools.testTableRehash(TestStringDeduplicationTools.java:379)
	at gc.g1.TestStringDeduplicationTableRehash.main(TestStringDeduplicationTableRehash.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException

I'm starting this off in hotspot/gc for initial triage simply
because this is a G1 test.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rloz:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-03-02 10:24;roboduke;Changeset: f304b74e
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2021-03-02 18:23:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f304b74e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"serviceability/sa/ClhsdbPrintAll.java failed with ""Test ERROR java.lang.RuntimeException: 'cannot be cast to' found in stdout""",JDK-8261857,5042194,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,dcubed,dcubed,2021-02-16 15:24,2021-03-01 16:36,2023-10-01 09:58,2021-02-20 12:47,16,17,,,,,,,17,hotspot,,0,intermittent,investigate-UT,tier3,tier4,tier5,tier6,tier7,,,,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

serviceability/sa/ClhsdbPrintAll.java

Here's a snippet from the log file:

 exitValue = -1

java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'cannot be cast to' found in stdout: 'cannot be cast to' 

	at ClhsdbPrintAll.main(ClhsdbPrintAll.java:75)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.RuntimeException: 'cannot be cast to' found in stdout: 'cannot be cast to' 

	at jdk.test.lib.process.OutputAnalyzer.shouldNotMatch(OutputAnalyzer.java:381)
	at ClhsdbLauncher.runCmd(ClhsdbLauncher.java:172)
	at ClhsdbLauncher.run(ClhsdbLauncher.java:200)
	at ClhsdbPrintAll.main(ClhsdbPrintAll.java:71)
	... 6 more

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'cannot be cast to' found in stdout: 'cannot be cast to' 

JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'cannot be cast to' found in stdout: 'cannot be cast to'
----------rerun:(35/6901)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8175384,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2rlob:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-02-16 15:34;cjplummer;I don't see ""cannot be cast to"" anywhere in the output, but then there is so much output that it has been truncated. I'm not even sure why the test is checking to make sure ""cannot be cast to"" is not present, but there must have been a good reason it was added.

We'll need to keep an eye on this and see if it's a new issue that starts repeating. If so, I'll try some runs with a larger logging limit and see if we can capture where in the output it occurs.;;;","2021-02-17 21:58;cjplummer;This failure happens 1 or 2 times out of every batch of 100 runs. It might require -XX:+UseZGC, but I'm not sure. I just noticed it was used on the two reported failures, so I have used it in all my testing so far.;;;","2021-02-17 21:58;cjplummer;While doing the ""clhsdb printall"" the following method is dumped:

 public java.util.ResourceBundle newBundle(java.lang.String, java.util.Locale, java.lang.String, java.lang.ClassLoader, boolean)

And it includes the following in its disassembly:

3203   302   ldc #214(6) <String "" cannot be cast to ResourceBundle""> [fast_aldc] 

Which comes from the following in the ResourceBundle.java source:

                        throw new ClassCastException(c.getName()
                                + "" cannot be cast to ResourceBundle"");

So it seems to make sense that the printall could include ""cannot be cast to"". So the question is why is the test checking that this string is NOT present. This check was adding when the test was first created, but it was created when the following bug was fixed:

    JDK-8175384: SA: clhsdb 'printall' throws ClassCastException while printing out the bytecodes

Apparently SA was triggering a ClassCastException during ""clhsdb printall"", and the output contained ""cannot be cast to"". That message comes from  SharedRuntime::generate_class_cast_message() in sharedRuntime.cpp:

                 ""class %s cannot be cast to class %s (%s%s%s)"",

So I think we can avoid this bug by changing the check to be a bit more explicit and check for ""cannot be cast to class"".;;;","2021-02-20 12:47;roboduke;Changeset: c2509ea9
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-02-20 20:46:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c2509ea9
;;;","2021-02-21 07:23;dcubed;The fix for this bug is integrated in jdk-17+11-783.;;;",,,,,,,,,,,,,,,,,,,,,,,
Documenting the implementation specific features and properties,JDK-8261856,5042193,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,joehw,joehw,joehw,2021-02-16 15:18,2022-01-25 09:34,2023-10-01 09:58,2021-06-03 18:18,,,,,,,,,17,docs,,0,,,,,,,,,,,,,,,,,,,,,,,"Documenting implementation specific features and properties in the java.xml module.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261673,JDK-8249867,JDK-8262354,JDK-8261670,JDK-8260858,JDK-8265248,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rlo3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7ef194ba,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] c2v_iterateFrames can get out of sync with the StackFrameStream,JDK-8261846,5042180,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,never,never,never,2021-02-16 12:14,2021-08-25 02:20,2023-10-01 09:58,2021-02-17 22:36,11,16,17,,,,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk16-graalvm,jvmci,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,c2v_iterateFrames mixes a StackFrameSteam and vframes and the vframe factory method can silently skip stub frames. The could leave the StackFrameStream out of sync with the vframe walk.  This can cause the iteration fail in strange ways and assert in fastdebug builds.,,,,,,,,,,JDK-8262456,JDK-8272906,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261933,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rll7:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-02-17 22:36;roboduke;Changeset: 97e1657b
Author:    Tom Rodriguez <never@openjdk.org>
Date:      2021-02-18 06:35:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/97e1657b
;;;","2021-08-24 07:50;sgehwolf;Removing the jdk11u-jvmci-defer label as backporting this will be needed for the trio, JDK-8264016, JDK-8263776 and this one.;;;","2021-08-24 08:06;sgehwolf;Fix Request (OpenJDK 11u):

Please approve backporting this fix to OpenJDK 11u. For one Oracle has it backported, for two it fixes a fast debug JVM assert when JDK-8264016 and JDK-8263776 are backported too and relevant code gets integrated in graal vm to enable the feature. In particular it helps the graal js on OpenJDK use-case. JDK 17 patch applies clean and code is only used from JVMCI. Should be low risk for non-jvmci using code.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
File permissions of packages built by jpackage,JDK-8261845,5042176,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,almatvee,herrick,herrick,2021-02-16 11:06,2021-04-26 20:39,2023-10-01 09:58,2021-03-06 00:54,16,,,,,,,,17,tools,,0,sn_88,,,,,,,,,,,,,,,,,,,,,,"When building pkg or dmg on macosx I get file permission 644
When building msi on windows I get file permission 755
When building exe on windows I get file permission 555
The only problem I see with this, is why not have user write permission on exe files ?
This means that without deleting exe in between, you cannot run a jpackage command twice in a row without getting an error the second time, but only for package type exe.
I think we should be consistent, and create all files user writable.  
If we want it to be an error that the output file already exists, we should check that ahead of time for all package types, and not rely on failure due to no permission to write file.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266048,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rlkb:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-02-16 15:05;almatvee;Do you refer to Windows permissions as permissions for cygwin?;;;","2021-02-17 05:29;herrick;yes - file permissions expressed as 3 digits are unix style as reported in cygwin.  they still reflect the underlying permission, the 7 in 755 means the owner has read, write, and execute permission, when it is 555, it means the owner has only read and execute permission.
As a result you can run ""jpackage --type msi ..."" twice, the second time overwriting the first msi, but if you run ""jpackage --type exe ..."" twice, the second time will fail.
;;;","2021-03-06 00:54;roboduke;Changeset: fa43f926
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-03-06 08:54:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fa43f926
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
incorrect info in docs/building.html,JDK-8261843,5042174,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,jjg,jjg,2021-02-16 10:43,2021-03-01 16:33,2023-10-01 09:58,2021-02-17 09:40,16,,,,,,,,17,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,,"Jonathan Gibbons Today at 10:40 AM
The file doc/building.html says to use make print-configure to show the command line used for your current configuration. make says there is no such rule.

5 replies

Mikael Vidstedt  1 minute ago
Looks like it’s print-configuration

Jonathan Gibbons  1 minute ago
thanks

Mikael Vidstedt  1 minute ago
Can you open a bug?

Jonathan Gibbons  1 minute ago
will do

Mikael Vidstedt  < 1 minute ago
Looks like the docs have it right in 2 out of 3 places",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rljv:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-02-17 09:40;roboduke;Changeset: d5a4d226
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2021-02-17 17:40:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d5a4d226
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Submenus close to screen borders are no longer repositioned ,JDK-8261840,5042169,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rlichten,jpereda,jpereda,2021-02-16 09:34,2021-04-22 07:29,2023-10-01 09:58,2021-04-20 09:38,jfx17,,,,,,,,jfx17,javafx,,0,regression,regression_8228363,,,,,,,,,,,,,,,,,,,,,"After JDK-8228363 has been integrated, menus and submenus in the border of the screen are no longer repositioned so they don't overlap (in terms of moving them to the other side of they parent menu). Now they are laid out fully within the screen, but with no offset to such border, but overlapping on top of their parent menu.

The attached test can be used to show the change. Up until OpenJFX 16-ea+7 there is no issue, while building from head shows it.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8228363,JDK-8265526,,,,,"2021-02-16 09:27;jpereda;MenuBorder.java;https://bugs.openjdk.org/secure/attachment/93214/MenuBorder.java",,,,,,,,,,,,,,,,,,jfx17,,,,,,,,"0|i2rlir:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-02-18 01:57;rlichten;I cannot see how ""intelligent repositioning"" can be done without calculating the dimensions of the menu to be displayed. I was completely unaware of this behaviour when doing https://github.com/openjdk/jfx/pull/383.

However getting the dimensions of the menu correctly would require to apply CSS before showing the menu itself. If anyone can point out a way how to do that I would investigate ways to have show() use the Utils.pointRelativeTo - function again.
;;;","2021-02-18 02:51;rlichten;Maybe this could be a way to apply CSS correctly before using the ""old"" way of showing the menu:
        if (getScene().getStylesheets().isEmpty()) {
            getScene().getStylesheets().setAll(anchor.getScene().getStylesheets());
        }

By adding this to the old code, all Tests pass and the ""intelligent repositioning"" (for which there are no tests in ContextMenuTest ...) happens correctly.

Should I try and come up with a PR containing this workaround?
;;;","2021-02-23 06:40;kcr;[~rlichten] Where were you thinking of putting this workaround? Anything that touches the CSS stylesheets is risky.;;;","2021-02-23 07:09;rlichten;Yes, I was thinking of putting the above lines into javafx.scene.control.ContextMenu.show(Node, Side, double, double) and restoring the ""old code"" which uses Utils.pointRelativeTo and prefWidth(), prefHeight.

The whole point of PR 383 was to completely eliminate the need to know the size of the context menu before showing it. I achieved that by using the anchor location property. It was elegant. It solved my original problem (JDK-8338363). It made all the new tests pass. I was proud :-).

But PR 383 also made ""intelligent repositioning"" (which I knew nothing about until recently and which isn't tested anywhere ...) impossible, because for that you absolutely need to know the size of the context menu before showing it (otherwise how would you want to know if it overlaps the parent).

So one could argue that ""intelligent repositioning"" is not part of the spec and leave things as they are now with PR 383. But that wouldn't be quite right, because there is this sentence in the API doc: ""If there is not enough room, the menu is moved to the opposite side and the offset is not applied"".

We could just completely revert PR 383 and go back to the behaviour we had before, which is also wrong because JDK-8338363 is in fact a bug.

We could also revert the changes to javafx.scene.control.ContextMenu.show(Node, Side, double, double) from PR 383, which will make test.javafx.scene.control.ContextMenuTest.test_position_withCSS() fail. To fix this situation we could try to set the stylesheets of the context menu explicitly (one time only, only if not yet set otherwise). This will make test.javafx.scene.control.ContextMenuTest.test_position_withCSS() pass again. That's what I propose is the best solution.

As to the riskiness of touching CSS: I admit, I don't have too good a feeling about it either (that's why I came up with a ""no-size-measuring""-needed solution in the first place), but to the best of my knowlege, the context menu will get the stylesheets from the parent anywhere sometime later and we only set it once so it shouldn't be a constant performance drawback.



;;;","2021-02-23 07:33;rlichten;I've created https://github.com/openjdk/jfx/pull/410 that will basically revert PR 383 but keeps the tests in place and adds the getScene().getStylesheets().setAll(...) call to ensure that test_position_withCSS() will still pass.
;;;","2021-04-20 09:38;roboduke;Changeset: 67828aeb
Author:    Robert Lichtenberger <rlichten@openjdk.org>
Committer: Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2021-04-20 16:37:52 +0000
URL:       https://git.openjdk.java.net/jfx/commit/67828aeb
;;;",,,,,,,,,,,,,,,,,,,,,,
Error creating runtime package on macos without mac-package-identifier,JDK-8261839,5042168,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,herrick,herrick,herrick,2021-02-16 09:20,2021-03-08 10:54,2023-10-01 09:58,2021-03-01 11:33,16,,,,,,,,17,tools,,0,sn_87,sn_88,,,,,,,,,,,,,,,,,,,,,"When building a java runtime image with simple command:
jpackage --type {dmg, pkg} --name runtime-17 --runtime-image $JDK-HOME
if creating dmg, you get a null pointer exception, if creating a pkg you get a PackagerException saying the identifier could not be extracted from the app-image.
The help text for --mac-package-identifier even says it defaults to the main class name, which is fine if you are creating a dmg or pkg of an application.
When creating a runtime installer, it should default to the installer name (not the non-existant main-class name), instead of throwing these exceptions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rlij:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-02-26 06:59;herrick;The existing test open/test/jdk/tools/jpackage/share/RuntimePackageTest.java contains the directive:
@requires (os.family != ""mac"")
this blocks this test from running on mac.
without this directive the test fails for this reason.
Once this is fix this test fails later on verification of app layout on mac.
The other problem with the test of runtime package on mac is that MacHelper thinks everything is installed or unpackaed into a directory <name>.app - which is only true for applications.
;;;","2021-03-01 11:33;roboduke;Changeset: 642f45f9
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-03-01 19:33:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/642f45f9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] [test] ArchiveRelocationTest compilation failure,JDK-8261830,5042159,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2021-02-16 08:39,2021-02-16 09:29,2023-10-01 09:58,2021-02-16 09:29,repo-valhalla,,,,,,,,tbd,hotspot,,0,cds,,,,,,,,,,,,,,,,,,,,,,"A compilation failure in ArchiveRelationTest may be due to a missed merge.

Also remove an unnecessary check in HelloDynamicInlineClass.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rlgj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2 compilation fails with assert(!had_error) failed: bad dominance,JDK-8261812,5042139,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,thartmann,thartmann,2021-02-16 06:58,2022-12-08 05:42,2023-10-01 09:58,2021-03-05 07:44,11,15,16,17,,,,,17,hotspot,,0,c2,c2-loopopts,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-11,oracle-triage-17,redhat-interest,,,,,,,,,,,,,,,,"Bad graph detected in compute_lca_of_uses
n:  5455  Phi  ===  5447  4121  458  [[ 3438  2781  4983  5176  5163  2504  2300  5058  2161  4903  2034 ]]  #int:-17..127 !orig=[4180]
early(n):  5447  Region  ===  5447  5448  3594  [[ 5447  3052  4526  5451  5453  5572  5455  5459  5461  5463  5466  5469  5471  5507  5478 ]]  !orig=[4455]
n->in(1):  4121  ConI  ===  0  [[ 5455 ]]  #int:1802
early(n->in(1)):  0  Root  ===  0  98  119  3495  1462  1517  1445  1766  1496  2038  1872  1855  1429  1414  1397  1105  1121  1138  1837  1820  1804  1304  1321  1336  3496  1479  [[ 0  1  3  20  21  24  27  29  2839  2832  2774  36  2084  40  2083  44  53  56  2082  74  93  107  114  127  140  155  166  167  177  184  201  204  232  238  257  300  303  1901  317  326  1840  387  388  1717  1702  1688  1466  452  458  1144  1142  468  470  472  494  1090  500  507  1068  1033  812  811  650  652  654  3497  3516  3533  3574  3583  3604  3614  3615  3616  3617  3627  3629  3630  3631  3632  3690  3692  3699  4092  4093  4094  4095  4096  4097  4098  4114  4117  4119  4121  4123  4124  4129  4134  4138  5368  4179  4185  4143  4177  5241  4201  4147  4222  4189  4211  4872  4183  4155  4156  4157  4181  4178  4160  4161  4162  4163  4208  4165  4757  4167  4195  4223  4225  4221  4172  4191  4174  4186  4205 ]] 
n->in(2):  458  ConI  ===  0  [[ 1492  2300  2161  2504  5163  4983  5058  2781  1410  5176  1458  5455  1868  1134  1833  824  614  1317  474  4903 ]]  #int:-17
early(n->in(2)):  0  Root  ===  0  98  119  3495  1462  1517  1445  1766  1496  2038  1872  1855  1429  1414  1397  1105  1121  1138  1837  1820  1804  1304  1321  1336  3496  1479  [[ 0  1  3  20  21  24  27  29  2839  2832  2774  36  2084  40  2083  44  53  56  2082  74  93  107  114  127  140  155  166  167  177  184  201  204  232  238  257  300  303  1901  317  326  1840  387  388  1717  1702  1688  1466  452  458  1144  1142  468  470  472  494  1090  500  507  1068  1033  812  811  650  652  654  3497  3516  3533  3574  3583  3604  3614  3615  3616  3617  3627  3629  3630  3631  3632  3690  3692  3699  4092  4093  4094  4095  4096  4097  4098  4114  4117  4119  4121  4123  4124  4129  4134  4138  5368  4179  4185  4143  4177  5241  4201  4147  4222  4189  4211  4872  4183  4155  4156  4157  4181  4178  4160  4161  4162  4163  4208  4165  4757  4167  4195  4223  4225  4221  4172  4191  4174  4186  4205 ]] 

LCA(n):  3552  IfFalse  ===  3551  [[ 1156  1140 ]] #0 !orig=[1130] !jvms: MainClass::method1 @ bci:1092 (line 207)
n->out(0):  3438  SafePoint  ===  4923  1  3439  1  1  3442  183  2813  1  1  1  1  383  1  384  4225  1  1  1  4178  3437  1  1  1  1  1  1  1  1  1  1  1  4114  4114  4114  4114  4114  4114  4114  4114  4114  5455  452  4935  631  841  [[ 3675 ]]  SafePoint  !jvms: MainClass::method1 @ bci:1698 (line 241)
n->out(0)->out(0):  3675  CountedLoopEnd  ===  3438  3674  [[ 3447  3446 ]] [lt] P=0.800000, C=8020.000000 !orig=[3445] !jvms: MainClass::method1 @ bci:1466 (line 241)
n->out(1):  2781  AllocateArray  ===  5066  5055  2772  8  1 ( 650  74  21  326  183  5507  1  1  1  1  383  1  384  4201  1  1  1  4160  2079  2082  1  2083  1  2084  1  4143  5044  2774  1  1  458  452  2178  2317  2521  4114  4114  4114  4114  4114  4114  4114  4114  4114  5455  452  5056  631  841 ) [[ 2782  2783  2784  2791  2792  2793 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int ) MainClass::method1 @ bci:1509 (line 248) !jvms: MainClass::method1 @ bci:1509 (line 248)
n->out(1)->out(0):  2782  Proj  ===  2781  [[ 2785 ]] #0 !jvms: MainClass::method1 @ bci:1509 (line 248)
n->out(2):  4983  AllocateArray  ===  4994  4997  4987  8  1 ( 650  74  21  326  183  5507  1  1  1  1  383  1  384  4201  1  1  1  4160  2079  2082  1  2083  1  2084  1  4143  4996  2774  1  1  458  452  2178  2317  2521  4114  4114  4114  4114  4114  4114  4114  4114  4114  5455  452  4984  631  841 ) [[ 4976  4977  4979  4980  4982  5000 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int ) MainClass::method1 @ bci:1509 (line 248) !orig=2781 !jvms: MainClass::method1 @ bci:1509 (line 248)
n->out(2)->out(5):  5000  Proj  ===  4983  [[ 4998 ]] #0 !orig=2782 !jvms: MainClass::method1 @ bci:1509 (line 248)
n->out(3):  5176  AllocateArray  ===  5169  5160  5149  8  1 ( 650  74  21  326  183  5507  1  1  1  1  383  1  384  4201  1  1  1  4160  2079  2082  1  2083  1  2084  1  4143  5141  2774  1  1  458  452  2178  2317  2521  4114  4114  4114  4114  4114  4114  4114  4114  4114  5455  452  5161  631  841 ) [[ 5170  5171  5172  5173  5175  5193 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int ) MainClass::method1 @ bci:1509 (line 248) !orig=2781 !jvms: MainClass::method1 @ bci:1509 (line 248)
n->out(3)->out(5):  5193  Proj  ===  5176  [[ 5191 ]] #0 !orig=2782 !jvms: MainClass::method1 @ bci:1509 (line 248)
n->out(4):  5163  AllocateArray  ===  5034  4980  5180  8  1 ( 650  74  21  326  183  5507  1  1  1  1  383  1  384  4201  1  1  1  4160  2079  2082  1  2083  1  2084  1  4143  4969  2774  1  1  458  452  2178  2317  2521  4114  4114  4114  4114  4114  4114  4114  4114  4114  5455  452  4981  631  841 ) [[ 5156  5157  5159  5160  5162  5164 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int ) MainClass::method1 @ bci:1509 (line 248) !orig=5058,2781 !jvms: MainClass::method1 @ bci:1509 (line 248)
n->out(4)->out(5):  5164  Proj  ===  5163  [[ 5165 ]] #0 !orig=5075,2782 !jvms: MainClass::method1 @ bci:1509 (line 248)
n->out(5):  2504  AllocateArray  ===  2314  2311  2497  8  1 ( 494  812  21  811  183  5507  1  1  1  1  383  1  384  4191  1  1  1  4157  2079  2082  1  2083  1  2084  1  1  1  1  1  1  4138  1  4138  458  452  2178  2317  56  4114  4114  4114  4114  4114  4114  4114  4114  4114  5455  452  4749  631  841 ) [[ 2505  2506  2507  2514  2515  2516 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int ) Test0::<init> @ bci:34 (line 6) MainClass::method1 @ bci:1488 (line 245) !jvms: Test0::<init> @ bci:34 (line 6) MainClass::method1 @ bci:1488 (line 245)
n->out(5)->out(0):  2505  Proj  ===  2504  [[ 2508 ]] #0 !jvms: Test0::<init> @ bci:34 (line 6) MainClass::method1 @ bci:1488 (line 245)
n->out(6):  2300  AllocateArray  ===  2175  2172  2294  8  1 ( 388  74  21  468  183  5507  1  1  1  1  383  1  384  4189  1  1  1  4174  2079  2082  1  2083  1  2084  1  1  1  1  1  1  4147  4147  4147  458  452  2178  56  56  4114  4114  4114  4114  4114  4114  4114  4114  4114  5455  452  4749  631  841 ) [[ 2301  2302  2303  2310  2311  2312 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int ) Test0::<init> @ bci:27 (line 5) MainClass::method1 @ bci:1488 (line 245) !jvms: Test0::<init> @ bci:27 (line 5) MainClass::method1 @ bci:1488 (line 245)
n->out(6)->out(0):  2301  Proj  ===  2300  [[ 2304 ]] #0 !jvms: Test0::<init> @ bci:27 (line 5) MainClass::method1 @ bci:1488 (line 245)
n->out(7):  5058  AllocateArray  ===  5188  5173  5062  8  1 ( 650  74  21  326  183  5507  1  1  1  1  383  1  384  4201  1  1  1  4160  2079  2082  1  2083  1  2084  1  4143  5155  2774  1  1  458  452  2178  2317  2521  4114  4114  4114  4114  4114  4114  4114  4114  4114  5455  452  5174  631  841 ) [[ 5051  5052  5054  5055  5057  5075 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int ) MainClass::method1 @ bci:1509 (line 248) !orig=2781 !jvms: MainClass::method1 @ bci:1509 (line 248)
n->out(7)->out(5):  5075  Proj  ===  5058  [[ 5073 ]] #0 !orig=2782 !jvms: MainClass::method1 @ bci:1509 (line 248)
n->out(8):  2161  AllocateArray  ===  3676  2067  2120  8  1 ( 472  74  21  155  183  5507  1  1  1  1  383  1  384  4186  1  1  1  4172  2079  2082  1  2083  1  2084  1  1  1  1  1  1  4134  4134  4134  458  452  56  56  56  4114  4114  4114  4114  4114  4114  4114  4114  4114  5455  452  4749  631  841 ) [[ 2162  2163  2164  2171  2172  2173 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int ) Test0::<init> @ bci:20 (line 4) MainClass::method1 @ bci:1488 (line 245) !jvms: Test0::<init> @ bci:20 (line 4) MainClass::method1 @ bci:1488 (line 245)
n->out(8)->out(0):  2162  Proj  ===  2161  [[ 2165 ]] #0 !jvms: Test0::<init> @ bci:20 (line 4) MainClass::method1 @ bci:1488 (line 245)
n->out(9):  4903  AllocateArray  ===  4914  4917  4907  8  1 ( 650  74  21  326  183  5507  1  1  1  1  383  1  384  4201  1  1  1  4160  2079  2082  1  2083  1  2084  1  4143  4916  2774  1  1  458  452  2178  2317  2521  4114  4114  4114  4114  4114  4114  4114  4114  4114  5455  452  4904  631  841 ) [[ 4896  4897  4899  4900  4902  4920 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int ) MainClass::method1 @ bci:1509 (line 248) !orig=2781 !jvms: MainClass::method1 @ bci:1509 (line 248)
n->out(9)->out(5):  4920  Proj  ===  4903  [[ 4918 ]] #0 !orig=2782 !jvms: MainClass::method1 @ bci:1509 (line 248)
n->out(10):  2034  CallStaticJava  ===  4452  835  2032  8  9 ( 127  183  5508  1  1  1  1  383  1  384  4179  1  1  1  4167  21  1  1  1  1  1  1  1  1  1  1  1  21  500  4114  4114  4114  4114  4114  4114  4114  4114  4114  5455  452  491  631  841 ) [[ 2035 ]] # Static uncommon_trap(reason='profile_predicate' action='maybe_recompile' debug_id='0')  void ( int ) C=0.000100 MainClass::method1 @ bci:1466 (line 241) reexecute !jvms: MainClass::method1 @ bci:1466 (line 241)
n->out(10)->out(0):  2035  Proj  ===  2034  [[ 2038 ]] #0 !jvms: MainClass::method1 @ bci:1466 (line 241)

idoms of early 5447:
idom[0]  5447  Region  ===  5447  5448  3594  [[ 5447  3052  4526  5451  5453  5572  5455  5459  5461  5463  5466  5469  5471  5507  5478 ]]  !orig=[4455]
idom[1]  1156  If  ===  3552  1155  [[ 1157  1158 ]] P=0.646384, C=2005.000000 !orig=[4454] !jvms: MainClass::method1 @ bci:1110 (line 208)
idom[2]  3552  IfFalse  ===  3551  [[ 1156  1140 ]] #0 !orig=[1130] !jvms: MainClass::method1 @ bci:1092 (line 207)
idom[3]  3551  RangeCheck  ===  1115  3550  [[ 3552  3553 ]] P=0.000001, C=-1.000000 !orig=[1129] !jvms: MainClass::method1 @ bci:1092 (line 207)
idom[4]  1115  IfTrue  ===  1114  [[ 3551  1122 ]] #1 !jvms: MainClass::method1 @ bci:1092 (line 207)
idom[5]  1114  If  ===  1099  1111  [[ 1115  1116 ]] P=0.999999, C=-1.000000 !jvms: MainClass::method1 @ bci:1092 (line 207)
idom[6]  1099  IfTrue  ===  1098  [[ 1114  1106 ]] #1 !jvms: MainClass::method1 @ bci:1088 (line 207)
idom[7]  1098  If  ===  838  1095  [[ 1099  1100 ]] P=0.999999, C=-1.000000 !jvms: MainClass::method1 @ bci:1088 (line 207)
idom[8]  838  Proj  ===  837  [[ 1098  841 ]] #0 !orig=[855] !jvms: Test0::<init> @ bci:34 (line 6) MainClass::method1 @ bci:1061 (line 203)
idom[9]  837  Initialize  ===  829  1  840  1  1  836  [[ 838  839 ]]  !jvms: Test0::<init> @ bci:34 (line 6) MainClass::method1 @ bci:1061 (line 203)
idom[10]  829  CatchProj  ===  828  [[ 837 ]] #0@bci -1  !jvms: Test0::<init> @ bci:34 (line 6) MainClass::method1 @ bci:1061 (line 203)
idom[11]  828  Catch  ===  825  827  [[ 829  830 ]]  !jvms: Test0::<init> @ bci:34 (line 6) MainClass::method1 @ bci:1061 (line 203)
idom[12]  825  Proj  ===  824  [[ 828 ]] #0 !jvms: Test0::<init> @ bci:34 (line 6) MainClass::method1 @ bci:1061 (line 203)
idom[13]  824  AllocateArray  ===  628  625  810  8  1 ( 494  812  21  811  183  76  1  1  1  1  383  1  384  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  4195  1  4195  458  452  491  631  56 ) [[ 825  826  827  834  835  836 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int ) Test0::<init> @ bci:34 (line 6) MainClass::method1 @ bci:1061 (line 203) !jvms: Test0::<init> @ bci:34 (line 6) MainClass::method1 @ bci:1061 (line 203)
idom[14]  628  Proj  ===  627  [[ 824  631 ]] #0 !orig=[661] !jvms: Test0::<init> @ bci:27 (line 5) MainClass::method1 @ bci:1061 (line 203)
idom[15]  627  Initialize  ===  619  1  630  1  1  626  [[ 628  629 ]]  !jvms: Test0::<init> @ bci:27 (line 5) MainClass::method1 @ bci:1061 (line 203)
idom[16]  619  CatchProj  ===  618  [[ 627 ]] #0@bci -1  !jvms: Test0::<init> @ bci:27 (line 5) MainClass::method1 @ bci:1061 (line 203)
idom[17]  618  Catch  ===  615  617  [[ 619  620 ]]  !jvms: Test0::<init> @ bci:27 (line 5) MainClass::method1 @ bci:1061 (line 203)
idom[18]  615  Proj  ===  614  [[ 618 ]] #0 !jvms: Test0::<init> @ bci:27 (line 5) MainClass::method1 @ bci:1061 (line 203)
idom[19]  614  AllocateArray  ===  488  485  607  8  1 ( 388  74  21  468  183  76  1  1  1  1  383  1  384  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  4205  4205  4205  458  452  491  56  56 ) [[ 615  616  617  624  625  626 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int ) Test0::<init> @ bci:27 (line 5) MainClass::method1 @ bci:1061 (line 203) !jvms: Test0::<init> @ bci:27 (line 5) MainClass::method1 @ bci:1061 (line 203)
idom[20]  488  Proj  ===  487  [[ 614  491 ]] #0 !orig=[516] !jvms: Test0::<init> @ bci:20 (line 4) MainClass::method1 @ bci:1061 (line 203)
idom[21]  487  Initialize  ===  479  1  490  1  1  486  [[ 488  489 ]]  !jvms: Test0::<init> @ bci:20 (line 4) MainClass::method1 @ bci:1061 (line 203)
idom[22]  479  CatchProj  ===  478  [[ 487 ]] #0@bci -1  !jvms: Test0::<init> @ bci:20 (line 4) MainClass::method1 @ bci:1061 (line 203)
idom[23]  478  Catch  ===  475  477  [[ 479  480 ]]  !jvms: Test0::<init> @ bci:20 (line 4) MainClass::method1 @ bci:1061 (line 203)
idom[24]  475  Proj  ===  474  [[ 478 ]] #0 !jvms: Test0::<init> @ bci:20 (line 4) MainClass::method1 @ bci:1061 (line 203)
idom[25]  474  AllocateArray  ===  3651  379  424  8  1 ( 472  74  21  155  183  76  1  1  1  1  383  1  384  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  4211  4211  4211  458  452  56  56  56 ) [[ 475  476  477  484  485  486 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int ) Test0::<init> @ bci:20 (line 4) MainClass::method1 @ bci:1061 (line 203) !jvms: Test0::<init> @ bci:20 (line 4) MainClass::method1 @ bci:1061 (line 203)
idom[26]  3651  CountedLoop  ===  3651  5270  3460  [[ 3651  474  379  380  381  382  383  384 ]] stride: 1  !orig=[3642],[378] !jvms: MainClass::method1 @ bci:1057 (line 203)
idom[27]  5270  Region  ===  5270  5269  322  [[ 5270  3651  5271  5275 ]]  !orig=[346] !jvms: MainClass::method1 @ bci:1054 (line 202)
idom[28]  5280  If  ===  5295  5279  [[ 322  5281 ]] P=0.500000, C=-1.000000
idom[29]  5295  Region  ===  5295  5294  5276  [[ 5295  5280  5296  5298  5300 ]] 
idom[30]  5305  If  ===  5301  5304  [[ 5294  5306 ]] P=0.999999, C=-1.000000
idom[31]  5301  IfFalse  ===  5290  [[ 5305 ]] #0
idom[32]  5290  CountedLoopEnd  ===  5292  5283  [[ 5291  5301 ]] [lt] P=0.500000, C=3609.000000 !orig=4229,[320] !jvms: MainClass::method1 @ bci:981 (line 197)
idom[33]  5292  CountedLoop  ===  5292  4432  5291  [[ 5286  5289  5290  5292  5293 ]] inner stride: 1 pre of N4230 !orig=[4230],[3637],[147] !jvms: MainClass::method1 @ bci:987 (line 198)
idom[34]  4432  IfTrue  ===  4431  [[ 5292  254 ]] #1 !orig=[120] !jvms: MainClass::method1 @ bci:987 (line 198)
idom[35]  4431  If  ===  4519  4438  [[ 4432  4433 ]] P=0.999999, C=-1.000000
idom[36]  4519  IfFalse  ===  4518  [[ 4435  4431 ]] #0 !orig=[4423]
idom[37]  4518  RangeCheck  ===  4415  4517  [[ 4519  4520 ]] P=0.000001, C=-1.000000 !orig=[4422]
idom[38]  4415  IfTrue  ===  4414  [[ 4518  4425 ]] #1
idom[39]  4414  If  ===  4407  209  [[ 4415  4416 ]] P=0.999999, C=-1.000000
idom[40]  4407  IfTrue  ===  4406  [[ 4414  200 ]] #1
idom[41]  4406  If  ===  4404  189  [[ 4407  4408 ]] P=0.999999, C=-1.000000
idom[42]  4404  IfTrue  ===  4403  [[ 4406  183 ]] #1
idom[43]  4403  If  ===  75  171  [[ 4404  4405 ]] P=0.999999, C=-1.000000
idom[44]  75  Region  ===  75  3504  80  [[ 75  76  4403 ]]  !jvms: MainClass::method1 @ bci:987 (line 198)
idom[45]  79  If  ===  54  78  [[ 80  81 ]] P=0.999000, C=-1.000000 !jvms: MainClass::method1 @ bci:987 (line 198)
idom[46]  54  Region  ===  54  3500  60  [[ 54  55  79 ]]  !jvms: MainClass::method1 @ bci:987 (line 198)
idom[47]  59  If  ===  47  58  [[ 60  61 ]] P=0.999000, C=-1.000000 !jvms: MainClass::method1 @ bci:987 (line 198)
idom[48]  47  Proj  ===  46  [[ 59 ]] #0 !jvms: MainClass::method1 @ bci:987 (line 198)
idom[49]  46  CallLeaf  ===  5  1  7  8  1 ( 10 ) [[ 47  49 ]] # OSR_migration_end void ( rawptr:BotPTR ) !jvms: MainClass::method1 @ bci:987 (line 198)
idom[50]  5  Parm  ===  3  [[ 45  46  26  30  37  41 ]] Control !jvms: MainClass::method1 @ bci:987 (line 198)

idoms of (wrong) LCA 3552:
idom[0]  3552  IfFalse  ===  3551  [[ 1156  1140 ]] #0 !orig=[1130] !jvms: MainClass::method1 @ bci:1092 (line 207)
idom[1]  3551  RangeCheck  ===  1115  3550  [[ 3552  3553 ]] P=0.000001, C=-1.000000 !orig=[1129] !jvms: MainClass::method1 @ bci:1092 (line 207)
idom[2]  1115  IfTrue  ===  1114  [[ 3551  1122 ]] #1 !jvms: MainClass::method1 @ bci:1092 (line 207)
idom[3]  1114  If  ===  1099  1111  [[ 1115  1116 ]] P=0.999999, C=-1.000000 !jvms: MainClass::method1 @ bci:1092 (line 207)
idom[4]  1099  IfTrue  ===  1098  [[ 1114  1106 ]] #1 !jvms: MainClass::method1 @ bci:1088 (line 207)
idom[5]  1098  If  ===  838  1095  [[ 1099  1100 ]] P=0.999999, C=-1.000000 !jvms: MainClass::method1 @ bci:1088 (line 207)
idom[6]  838  Proj  ===  837  [[ 1098  841 ]] #0 !orig=[855] !jvms: Test0::<init> @ bci:34 (line 6) MainClass::method1 @ bci:1061 (line 203)
idom[7]  837  Initialize  ===  829  1  840  1  1  836  [[ 838  839 ]]  !jvms: Test0::<init> @ bci:34 (line 6) MainClass::method1 @ bci:1061 (line 203)
idom[8]  829  CatchProj  ===  828  [[ 837 ]] #0@bci -1  !jvms: Test0::<init> @ bci:34 (line 6) MainClass::method1 @ bci:1061 (line 203)
idom[9]  828  Catch  ===  825  827  [[ 829  830 ]]  !jvms: Test0::<init> @ bci:34 (line 6) MainClass::method1 @ bci:1061 (line 203)
idom[10]  825  Proj  ===  824  [[ 828 ]] #0 !jvms: Test0::<init> @ bci:34 (line 6) MainClass::method1 @ bci:1061 (line 203)
idom[11]  824  AllocateArray  ===  628  625  810  8  1 ( 494  812  21  811  183  76  1  1  1  1  383  1  384  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  4195  1  4195  458  452  491  631  56 ) [[ 825  826  827  834  835  836 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int ) Test0::<init> @ bci:34 (line 6) MainClass::method1 @ bci:1061 (line 203) !jvms: Test0::<init> @ bci:34 (line 6) MainClass::method1 @ bci:1061 (line 203)
idom[12]  628  Proj  ===  627  [[ 824  631 ]] #0 !orig=[661] !jvms: Test0::<init> @ bci:27 (line 5) MainClass::method1 @ bci:1061 (line 203)
idom[13]  627  Initialize  ===  619  1  630  1  1  626  [[ 628  629 ]]  !jvms: Test0::<init> @ bci:27 (line 5) MainClass::method1 @ bci:1061 (line 203)
idom[14]  619  CatchProj  ===  618  [[ 627 ]] #0@bci -1  !jvms: Test0::<init> @ bci:27 (line 5) MainClass::method1 @ bci:1061 (line 203)
idom[15]  618  Catch  ===  615  617  [[ 619  620 ]]  !jvms: Test0::<init> @ bci:27 (line 5) MainClass::method1 @ bci:1061 (line 203)
idom[16]  615  Proj  ===  614  [[ 618 ]] #0 !jvms: Test0::<init> @ bci:27 (line 5) MainClass::method1 @ bci:1061 (line 203)
idom[17]  614  AllocateArray  ===  488  485  607  8  1 ( 388  74  21  468  183  76  1  1  1  1  383  1  384  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  4205  4205  4205  458  452  491  56  56 ) [[ 615  616  617  624  625  626 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int ) Test0::<init> @ bci:27 (line 5) MainClass::method1 @ bci:1061 (line 203) !jvms: Test0::<init> @ bci:27 (line 5) MainClass::method1 @ bci:1061 (line 203)
idom[18]  488  Proj  ===  487  [[ 614  491 ]] #0 !orig=[516] !jvms: Test0::<init> @ bci:20 (line 4) MainClass::method1 @ bci:1061 (line 203)
idom[19]  487  Initialize  ===  479  1  490  1  1  486  [[ 488  489 ]]  !jvms: Test0::<init> @ bci:20 (line 4) MainClass::method1 @ bci:1061 (line 203)
idom[20]  479  CatchProj  ===  478  [[ 487 ]] #0@bci -1  !jvms: Test0::<init> @ bci:20 (line 4) MainClass::method1 @ bci:1061 (line 203)
idom[21]  478  Catch  ===  475  477  [[ 479  480 ]]  !jvms: Test0::<init> @ bci:20 (line 4) MainClass::method1 @ bci:1061 (line 203)
idom[22]  475  Proj  ===  474  [[ 478 ]] #0 !jvms: Test0::<init> @ bci:20 (line 4) MainClass::method1 @ bci:1061 (line 203)
idom[23]  474  AllocateArray  ===  3651  379  424  8  1 ( 472  74  21  155  183  76  1  1  1  1  383  1  384  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  4211  4211  4211  458  452  56  56  56 ) [[ 475  476  477  484  485  486 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int ) Test0::<init> @ bci:20 (line 4) MainClass::method1 @ bci:1061 (line 203) !jvms: Test0::<init> @ bci:20 (line 4) MainClass::method1 @ bci:1061 (line 203)
idom[24]  3651  CountedLoop  ===  3651  5270  3460  [[ 3651  474  379  380  381  382  383  384 ]] stride: 1  !orig=[3642],[378] !jvms: MainClass::method1 @ bci:1057 (line 203)
idom[25]  5270  Region  ===  5270  5269  322  [[ 5270  3651  5271  5275 ]]  !orig=[346] !jvms: MainClass::method1 @ bci:1054 (line 202)
idom[26]  5280  If  ===  5295  5279  [[ 322  5281 ]] P=0.500000, C=-1.000000
idom[27]  5295  Region  ===  5295  5294  5276  [[ 5295  5280  5296  5298  5300 ]] 
idom[28]  5305  If  ===  5301  5304  [[ 5294  5306 ]] P=0.999999, C=-1.000000
idom[29]  5301  IfFalse  ===  5290  [[ 5305 ]] #0
idom[30]  5290  CountedLoopEnd  ===  5292  5283  [[ 5291  5301 ]] [lt] P=0.500000, C=3609.000000 !orig=4229,[320] !jvms: MainClass::method1 @ bci:981 (line 197)
idom[31]  5292  CountedLoop  ===  5292  4432  5291  [[ 5286  5289  5290  5292  5293 ]] inner stride: 1 pre of N4230 !orig=[4230],[3637],[147] !jvms: MainClass::method1 @ bci:987 (line 198)
idom[32]  4432  IfTrue  ===  4431  [[ 5292  254 ]] #1 !orig=[120] !jvms: MainClass::method1 @ bci:987 (line 198)
idom[33]  4431  If  ===  4519  4438  [[ 4432  4433 ]] P=0.999999, C=-1.000000
idom[34]  4519  IfFalse  ===  4518  [[ 4435  4431 ]] #0 !orig=[4423]
idom[35]  4518  RangeCheck  ===  4415  4517  [[ 4519  4520 ]] P=0.000001, C=-1.000000 !orig=[4422]
idom[36]  4415  IfTrue  ===  4414  [[ 4518  4425 ]] #1
idom[37]  4414  If  ===  4407  209  [[ 4415  4416 ]] P=0.999999, C=-1.000000
idom[38]  4407  IfTrue  ===  4406  [[ 4414  200 ]] #1
idom[39]  4406  If  ===  4404  189  [[ 4407  4408 ]] P=0.999999, C=-1.000000
idom[40]  4404  IfTrue  ===  4403  [[ 4406  183 ]] #1
idom[41]  4403  If  ===  75  171  [[ 4404  4405 ]] P=0.999999, C=-1.000000
idom[42]  75  Region  ===  75  3504  80  [[ 75  76  4403 ]]  !jvms: MainClass::method1 @ bci:987 (line 198)
idom[43]  79  If  ===  54  78  [[ 80  81 ]] P=0.999000, C=-1.000000 !jvms: MainClass::method1 @ bci:987 (line 198)
idom[44]  54  Region  ===  54  3500  60  [[ 54  55  79 ]]  !jvms: MainClass::method1 @ bci:987 (line 198)
idom[45]  59  If  ===  47  58  [[ 60  61 ]] P=0.999000, C=-1.000000 !jvms: MainClass::method1 @ bci:987 (line 198)
idom[46]  47  Proj  ===  46  [[ 59 ]] #0 !jvms: MainClass::method1 @ bci:987 (line 198)
idom[47]  46  CallLeaf  ===  5  1  7  8  1 ( 10 ) [[ 47  49 ]] # OSR_migration_end void ( rawptr:BotPTR ) !jvms: MainClass::method1 @ bci:987 (line 198)
idom[48]  5  Parm  ===  3  [[ 45  46  26  30  37  41 ]] Control !jvms: MainClass::method1 @ bci:987 (line 198)

Real LCA of early 5447 (idom[2]) and (wrong) LCA 3552 (idom[0]):
 3552  IfFalse  ===  3551  [[ 1156  1140 ]] #0 !orig=[1130] !jvms: MainClass::method1 @ bci:1092 (line 207)


# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/983c483a-6907-44e0-ad29-98c7183575e2-S14556/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f9886d7a-0ace-4c83-85fd-c101daf0871b/runs/d37d62ae-53de-438f-8106-b4389296baa1/workspace/open/src/hotspot/share/opto/loopnode.cpp:4916), pid=2298779, tid=2298792
#  assert(!had_error) failed: bad dominance


Current CompileTask:
C2:    292    1 %  b  4       MainClass::method1 @ 987 (1722 bytes)

Stack: [0x00007f124a8fd000,0x00007f124a9fe000],  sp=0x00007f124a9f81a0,  free space=1004k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12c6a32]  PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool)+0x6e2
V  [libjvm.so+0x12c73c0]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x140
V  [libjvm.so+0x12c7a5a]  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)+0xba
V  [libjvm.so+0x12ce357]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x507
V  [libjvm.so+0xa0f921]  PhaseIdealLoop::verify(PhaseIterGVN&)+0x341
V  [libjvm.so+0xa01b1f]  Compile::process_for_post_loop_opts_igvn(PhaseIterGVN&)+0x1f
V  [libjvm.so+0xa0bca0]  Compile::Optimize()+0x15f0
V  [libjvm.so+0xa0d9b5]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1905
V  [libjvm.so+0x8394da]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa1d881]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xea1
V  [libjvm.so+0xa1e508]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1841b16]  JavaThread::thread_main_inner()+0x256
V  [libjvm.so+0x1847f90]  Thread::call_run()+0x100
V  [libjvm.so+0x1533dd6]  thread_native_entry(Thread*)+0x116
",,,,,,,,,,JDK-8263422,JDK-8265960,,,,,,,,,,,,,,,,,,,,,,JDK-8263187,,,,,,,,,,,,,,,,"2021-02-16 07:00;thartmann;MainClass.java;https://bugs.openjdk.org/secure/attachment/93213/MainClass.java","2021-02-16 07:00;thartmann;hs_err_pid2298779.log;https://bugs.openjdk.org/secure/attachment/93212/hs_err_pid2298779.log","2021-02-16 07:00;thartmann;replay_pid2296638.log;https://bugs.openjdk.org/secure/attachment/93211/replay_pid2296638.log",,,,,,,,,,,,,,,,,,,,,,,,"0|i2rlc3:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-02-16 07:04;thartmann;The test has been generated, I can only reproduce the failure with replay compilation:
java -XX:+ReplayIgnoreInitErrors -XX:+ReplayCompiles -XX:ReplayDataFile=replay_pid2296638.log 
;;;","2021-02-16 07:13;thartmann;ILW = Assert during C2 compilation (regression in JDK 15), reproducible with replay compilation and generated test, no workaround but disabled compilation of affected method = HMM = P2;;;","2021-02-16 07:16;thartmann;Looks like this has been introduced in JDK 15 b17.;;;","2021-02-16 23:32;thartmann;Narrowed it down to JDK-8240335 that causes/triggers this. [~roland], could you please have a look?;;;","2021-03-03 06:27;thartmann;From the patch it looks like as JDK-8240335 only triggered this and is not related, correct?;;;","2021-03-05 07:44;roboduke;Changeset: 2c0507ec
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-03-05 15:43:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2c0507ec
;;;","2021-04-19 07:33;mdoerr;Fix Request (11u)
Should get backported for parity with 11.0.12-oracle. Doesn't apply cleanly. Review thread:
http://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-April/005812.html
;;;","2021-08-09 14:35;epavlova;The regression test compiler/escapeAnalysis/TestValAtSafepointOverflowsInt.java passed in JDK17 ATR;;;",,,,,,,,,,,,,,,,,,,,
(sctp) handleSendFailed in SctpChannelImpl.c potential leaks,JDK-8261791,5042107,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2021-02-16 00:49,2021-03-18 02:16,2023-10-01 09:58,2021-02-17 05:50,17,,,,,,,,17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,sap-interest,,,,,,,,,,,,,,,,,,,,"In another bug we had  this question from me, and comment from Alan Bateman :

Btw. while adjusting Java_sun_nio_ch_sctp_SctpChannelImpl_receive0 , I started to wonder what happens to the allocated memory in the same file in handleSendFailed ( if ((addressP = malloc(dataLength)) == NULL) ) in early return cases incl. the CHECK_NULL , is there some deallocation missing there too ?
-----------------------------
Yes, the error paths in handleSendFailed should be looked at. If NewDirectByteBuffer or recvmsg fails then addressP needs to be freed. Furthermore, if the NewObject fails and bufferObj != NULL then the memory for the direct buffer will need to be freed too (as JNI NewDirectByteBuffer does not setup a cleaner).
--------------------------------
So the coding should be adjusted to remove potential leaks.",,,,,,,,,,JDK-8263787,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261881,JDK-8261601,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rl4z:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-02-17 05:50;roboduke;Changeset: a0658795
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-02-17 13:49:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a0658795
;;;","2021-03-10 03:09;mbaesken;jdk11 backport request
I would like to have the patch in jdk11 as well, because the issue is present there too. The patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Add bounds check to MTLBlitLoops CopyArea method,JDK-8261789,5042102,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aghaisas,aghaisas,aghaisas,2021-02-15 23:38,2021-02-16 01:08,2023-10-01 09:58,2021-02-16 00:19,internal,,,,,,,,internal,client-libs,,0,code-review,lanai,sn_87,,,,,,,,,,,,,,,,,,,,"Current implementation of MTLBlitLoops_CopyArea() method does not have bounds check logic. It needs to be added.
OpenGL CopyArea method has this bound check logic (a bit different to cater to glCopypixels API)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261732,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2rl3v:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Calling ""main"" method in anonymous nested class crashes the JVM",JDK-8261785,5042057,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,henryjen,webbuggrp,webbuggrp,2021-02-15 05:28,2021-08-09 14:05,2023-10-01 09:58,2021-03-22 09:00,16,17,,,,,,,17,tools,,0,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS X 10.15.7

openjdk version ""16"" 2021-03-16
OpenJDK Runtime Environment (build 16+36-2231)
OpenJDK 64-Bit Server VM (build 16+36-2231, mixed mode, sharing)

and

openjdk version ""17-ea"" 2021-09-14
OpenJDK Runtime Environment (build 17-ea+9-653)
OpenJDK 64-Bit Server VM (build 17-ea+9-653, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
JEP 395 allows inner classes to contain static members. This means that inner classes can contain public static void main(String[]) and we can call that with java Outer\$Inner. It works fine for inner member classes, but not for local or anonymous inner classes. In those cases the JVM crashes on OS X. It works on Linux and Windows.

ERROR MESSAGES/STACK TRACES THAT OCCUR :
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000000104578804, pid=18370, tid=8707
#
# JRE version: OpenJDK Runtime Environment (16.0+36) (build 16+36-2231)
# Java VM: OpenJDK 64-Bit Server VM (16+36-2231, mixed mode, sharing, tiered, compressed oops, g1 gc, bsd-amd64)
# Problematic frame:
# V  [libjvm.dylib+0x3804]  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ull, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ull>::oop_access_barrier(void*)+0x4
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: innerstatic/CrashTheJVM$1

Host: MacBookPro16,4 x86_64 2400 MHz, 16 cores, 64G, Darwin 19.6.0, macOS 10.15.7 (19H524)
Time: Mon Feb 15 15:19:44 2021 EET elapsed time: 0.026625 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007f863e009600):  JavaThread ""main"" [_thread_in_vm, id=8707, stack(0x0000700001c68000,0x0000700001d68000)]

Stack: [0x0000700001c68000,0x0000700001d68000],  sp=0x0000700001d67df0,  free space=1023k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x3804]  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ull, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ull>::oop_access_barrier(void*)+0x4
V  [libjvm.dylib+0x577421]  jni_GetStringUTFChars+0xd1
C  [libjli.dylib+0x78a6]  PostJVMInit+0xa6
C  [libjli.dylib+0x4e3a]  JavaMain+0xb9a
C  [libjli.dylib+0x7519]  ThreadJavaMain+0x9
C  [libsystem_pthread.dylib+0x6109]  _pthread_start+0x94
C  [libsystem_pthread.dylib+0x1b8b]  thread_start+0xf


siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000000

Register to memory mapping:

RAX=0x00000001051d73fe: _ZTV10JavaThread+0xa6 in /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-16.jdk/Contents/Home/lib/server/libjvm.dylib at 0x0000000104575000
RBX=0x00007f863e009910 points into unknown readable memory: 0x00000001051e5eb8 | b8 5e 1e 05 01 00 00 00
RCX=0x00000001051e5eb8: jni_NativeInterface+0 in /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-16.jdk/Contents/Home/lib/server/libjvm.dylib at 0x0000000104575000
RDX=0x0 is NULL
RSP=0x0000700001d67df0 is pointing into the stack for thread: 0x00007f863e009600
RBP=0x0000700001d67df0 is pointing into the stack for thread: 0x00007f863e009600
RSI=0x0 is NULL
RDI=0x0 is NULL
R8 =0x0 is NULL
R9 =0x0 is NULL
R10=0x0000000105243330: _ZN19TemplateInterpreter13_active_tableE+0x4800 in /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-16.jdk/Contents/Home/lib/server/libjvm.dylib at 0x0000000104575000
R11=0x0000000800590200 is pointing into metadata
R12=0x00007f863e009600 is a thread
R13=0x0 is NULL
R14=0x0 is NULL
R15=0x0 is NULL


Registers:
RAX=0x00000001051d73fe, RBX=0x00007f863e009910, RCX=0x00000001051e5eb8, RDX=0x0000000000000000
RSP=0x0000700001d67df0, RBP=0x0000700001d67df0, RSI=0x0000000000000000, RDI=0x0000000000000000
R8 =0x0000000000000000, R9 =0x0000000000000000, R10=0x0000000105243330, R11=0x0000000800590200
R12=0x00007f863e009600, R13=0x0000000000000000, R14=0x0000000000000000, R15=0x0000000000000000
RIP=0x0000000104578804, EFLAGS=0x0000000000010246, ERR=0x0000000000000004
  TRAPNO=0x000000000000000e

Top of Stack: (sp=0x0000700001d67df0)
0x0000700001d67df0:   0000700001d67e80 0000000104aec421
0x0000700001d67e00:   00007f863e009600 0000000000000000
0x0000700001d67e10:   00000001015f7b76 00007f863e009600
0x0000700001d67e20:   93eeab68d75b0004 00007f863e009600
0x0000700001d67e30:   0000000000000000 0000000000000000
0x0000700001d67e40:   00007f863e009910 00007f863e009600
0x0000700001d67e50:   0000700001d67e80 00007f863e009910
0x0000700001d67e60:   00007f863cd08670 0000000000000000
0x0000700001d67e70:   0000000000000000 00007f863e009910
0x0000700001d67e80:   0000700001d67f10 00000001015f38a6
0x0000700001d67e90:   00007f863e009910 00007f863e009600
0x0000700001d67ea0:   0000700001d67ed0 0000000104ad8cb8
0x0000700001d67eb0:   93eeab68d75b0004 00007f863cd08688
0x0000700001d67ec0:   00007f863cd08670 0000000000000000
0x0000700001d67ed0:   00007f863e009910 00007f863e009600
0x0000700001d67ee0:   0000700001d67f10 93eeab68d75b0004
0x0000700001d67ef0:   00007f863cd08688 00007f863cd08670
0x0000700001d67f00:   00007f863cd08678 00007f863e009910
0x0000700001d67f10:   0000700001d67fa0 00000001015f0e3a
0x0000700001d67f20:   0000000000000000 0000000000000000
0x0000700001d67f30:   0000000300010002 00007f863cd045a0
0x0000700001d67f40:   0000000000000000 0000000000000000
0x0000700001d67f50:   0000000000000001 00007f863cd044e0
0x0000700001d67f60:   00007f863cd04520 00007f863e009910
0x0000700001d67f70:   00000001051e5eb0 0000700001d68000
0x0000700001d67f80:   0000000000000000 0000000000000000
0x0000700001d67f90:   0000000000000000 0000000000000000
0x0000700001d67fa0:   0000700001d67fb0 00000001015f3519
0x0000700001d67fb0:   0000700001d67fd0 00007fff7382f109
0x0000700001d67fc0:   0000000000000000 0000000000000000
0x0000700001d67fd0:   0000700001d67ff0 00007fff7382ab8b
0x0000700001d67fe0:   0000000000000000 0000000000000000 

Instructions: (pc=0x0000000104578804)
0x0000000104578704:   ff 0b 73 0e 48 63 c7 48 8d 0d ea bf b6 00 8b 04
0x0000000104578714:   81 c3 55 48 89 e5 48 8d 3d e5 af ae 00 be 9c 00
0x0000000104578724:   00 00 e8 d5 cb 34 00 e8 80 e6 88 00 31 c0 5d c3
0x0000000104578734:   66 2e 0f 1f 84 00 00 00 00 00 66 90 55 48 89 e5
0x0000000104578744:   48 8b 47 08 0f b7 48 32 0f b7 40 30 8d 44 01 19
0x0000000104578754:   5d c3 66 2e 0f 1f 84 00 00 00 00 00 55 48 89 e5
0x0000000104578764:   53 50 48 89 fb 48 8d 0d 38 a4 ca 00 48 8d 05 e9
0x0000000104578774:   d7 c9 00 48 8b 00 8b 40 10 ff c8 80 39 00 74 10
0x0000000104578784:   83 f8 04 73 1f 48 98 48 8d 0d 7e eb ba 00 eb 0e
0x0000000104578794:   83 f8 04 73 0f 48 98 48 8d 0d 8e eb ba 00 48 8b
0x00000001045787a4:   04 c1 eb 21 48 8d 3d 8e af ae 00 48 8d 15 b7 af
0x00000001045787b4:   ae 00 be e8 00 00 00 31 c0 e8 3e c9 34 00 e8 e9
0x00000001045787c4:   e5 88 00 31 c0 48 89 05 a0 8a c6 00 48 89 df 48
0x00000001045787d4:   83 c4 08 5b 5d ff e0 0f 1f 44 00 00 55 48 89 e5
0x00000001045787e4:   48 8b 07 5d c3 0f 1f 80 00 00 00 00 55 48 89 e5
0x00000001045787f4:   48 8b 07 5d c3 0f 1f 80 00 00 00 00 55 48 89 e5
0x0000000104578804:   48 8b 07 5d c3 0f 1f 80 00 00 00 00 55 48 89 e5
0x0000000104578814:   41 57 41 56 53 50 48 8b 1f 4c 8d 3d a4 a6 cd 00
0x0000000104578824:   49 85 1f 74 47 49 89 fe 48 89 df e8 ec 2d ab 00
0x0000000104578834:   48 89 c1 48 85 c0 74 31 48 89 d8 f0 49 0f b1 0e
0x0000000104578844:   48 39 d8 74 24 48 89 c2 0f 1f 40 00 49 85 17 74
0x0000000104578854:   03 48 89 d3 74 13 48 89 d8 f0 49 0f b1 0e 48 39
0x0000000104578864:   d8 48 89 d3 48 89 c2 75 e3 48 89 cb 48 89 d8 48
0x0000000104578874:   83 c4 08 5b 41 5e 41 5f 5d c3 66 90 55 48 89 e5
0x0000000104578884:   48 8b 07 5d c3 0f 1f 80 00 00 00 00 55 48 89 e5
0x0000000104578894:   48 8b 07 5d c3 0f 1f 80 00 00 00 00 55 48 89 e5
0x00000001045788a4:   48 8b 07 5d c3 0f 1f 80 00 00 00 00 55 48 89 e5
0x00000001045788b4:   41 57 41 56 53 50 48 8b 1f 4c 8d 3d 04 a6 cd 00
0x00000001045788c4:   49 85 1f 74 47 49 89 fe 48 89 df e8 4c 2d ab 00
0x00000001045788d4:   48 89 c1 48 85 c0 74 31 48 89 d8 f0 49 0f b1 0e
0x00000001045788e4:   48 39 d8 74 24 48 89 c2 0f 1f 40 00 49 85 17 74
0x00000001045788f4:   03 48 89 d3 74 13 48 89 d8 f0 49 0f b1 0e 48 39 


Stack slot to memory mapping:
stack at sp + 0 slots: 0x0000700001d67e80 is pointing into the stack for thread: 0x00007f863e009600
stack at sp + 1 slots: 0x0000000104aec421: jni_GetStringUTFChars+0xd1 in /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-16.jdk/Contents/Home/lib/server/libjvm.dylib at 0x0000000104575000
stack at sp + 2 slots: 0x00007f863e009600 is a thread
stack at sp + 3 slots: 0x0 is NULL
stack at sp + 4 slots: 0x00000001015f7b76: JLI_List_split.cold.2+0x1d76 in /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-16.jdk/Contents/Home/lib/libjli.dylib at 0x00000001015ec000
stack at sp + 5 slots: 0x00007f863e009600 is a thread
stack at sp + 6 slots: 0x93eeab68d75b0004 is an unknown value
stack at sp + 7 slots: 0x00007f863e009600 is a thread


---------------  P R O C E S S  ---------------

Threads class SMR info:
_java_thread_list=0x00007f863d80e840, length=11, elements={
0x00007f863e009600, 0x00007f863e80a600, 0x00007f863d009000, 0x00007f863d015000,
0x00007f863e04c000, 0x00007f863d014a00, 0x00007f863d018c00, 0x00007f863e04c600,
0x00007f863e04a400, 0x00007f862d193200, 0x00007f863e809600
}

Java Threads: ( => current thread )
=>0x00007f863e009600 JavaThread ""main"" [_thread_in_vm, id=8707, stack(0x0000700001c68000,0x0000700001d68000)]
  0x00007f863e80a600 JavaThread ""Reference Handler"" daemon [_thread_blocked, id=15107, stack(0x000070000237d000,0x000070000247d000)]
  0x00007f863d009000 JavaThread ""Finalizer"" daemon [_thread_blocked, id=16643, stack(0x0000700002480000,0x0000700002580000)]
  0x00007f863d015000 JavaThread ""Signal Dispatcher"" daemon [_thread_blocked, id=42755, stack(0x0000700002689000,0x0000700002789000)]
  0x00007f863e04c000 JavaThread ""Service Thread"" daemon [_thread_blocked, id=42499, stack(0x000070000278c000,0x000070000288c000)]
  0x00007f863d014a00 JavaThread ""Monitor Deflation Thread"" daemon [_thread_blocked, id=41987, stack(0x000070000288f000,0x000070000298f000)]
  0x00007f863d018c00 JavaThread ""C2 CompilerThread0"" daemon [_thread_blocked, id=41731, stack(0x0000700002992000,0x0000700002a92000)]
  0x00007f863e04c600 JavaThread ""C1 CompilerThread0"" daemon [_thread_blocked, id=23555, stack(0x0000700002a95000,0x0000700002b95000)]
  0x00007f863e04a400 JavaThread ""Sweeper thread"" daemon [_thread_blocked, id=41475, stack(0x0000700002b98000,0x0000700002c98000)]
  0x00007f862d193200 JavaThread ""Notification Thread"" daemon [_thread_blocked, id=24323, stack(0x0000700002c9b000,0x0000700002d9b000)]
  0x00007f863e809600 JavaThread ""Common-Cleaner"" daemon [_thread_blocked, id=24835, stack(0x0000700002ea1000,0x0000700002fa1000)]

Other Threads:
  0x00007f863cf31540 VMThread ""VM Thread"" [stack: 0x000070000227a000,0x000070000237a000] [id=17411]
  0x00007f863d80a8b0 WatcherThread [stack: 0x0000700002d9e000,0x0000700002e9e000] [id=41219]
  0x00007f863cd18a60 GCTaskThread ""GC Thread#0"" [stack: 0x0000700001d6b000,0x0000700001e6b000] [id=20483]
  0x00007f863cd19a20 ConcurrentGCThread ""G1 Main Marker"" [stack: 0x0000700001e6e000,0x0000700001f6e000] [id=19971]
  0x00007f863cd1a940 ConcurrentGCThread ""G1 Conc#0"" [stack: 0x0000700001f71000,0x0000700002071000] [id=19203]
  0x00007f863cf21310 ConcurrentGCThread ""G1 Refine#0"" [stack: 0x0000700002074000,0x0000700002174000] [id=18691]
  0x00007f863cf221a0 ConcurrentGCThread ""G1 Service"" [stack: 0x0000700002177000,0x0000700002277000] [id=18435]

Threads with active compile tasks:

VM state: not at safepoint (normal execution)

VM Mutex/Monitor currently owned by a thread: None

Heap address: 0x0000000400000000, size: 16384 MB, Compressed Oops mode: Zero based, Oop shift amount: 3
CDS archive(s) mapped at: [0x0000000800000000-0x0000000800bb9000-0x0000000800bb9000), size 12292096, SharedBaseAddress: 0x0000000800000000, ArchiveRelocationMode: 0.
Compressed class space mapped at: 0x0000000800c00000-0x0000000840c00000, reserved size: 1073741824
Narrow klass base: 0x0000000800000000, Narrow klass shift: 3, Narrow klass range: 0x100000000

GC Precious Log:
 CPUs: 16 total, 16 available
 Memory: 65536M
 Large Page Support: Disabled
 NUMA Support: Disabled
 Compressed Oops: Enabled (Zero based)
 Heap Region Size: 8M
 Heap Min Capacity: 8M
 Heap Initial Capacity: 1G
 Heap Max Capacity: 16G
 Pre-touch: Disabled
 Parallel Workers: 13
 Concurrent Workers: 3
 Concurrent Refinement Workers: 13
 Periodic GC: Disabled

Heap:
 garbage-first heap   total 1064960K, used 8136K [0x0000000400000000, 0x0000000800000000)
  region size 8192K, 1 young (8192K), 0 survivors (0K)
 Metaspace       used 94K, committed 320K, reserved 1056768K
  class space    used 3K, committed 128K, reserved 1048576K

Heap Regions: E=young(eden), S=young(survivor), O=old, HS=humongous(starts), HC=humongous(continues), CS=collection set, F=free, OA=open archive, CA=closed archive, TAMS=top-at-mark-start (previous, next)
|   0|0x0000000400000000, 0x0000000400000000, 0x0000000400800000|  0%| F|  |TAMS 0x0000000400000000, 0x0000000400000000| Untracked 
|   1|0x0000000400800000, 0x0000000400800000, 0x0000000401000000|  0%| F|  |TAMS 0x0000000400800000, 0x0000000400800000| Untracked 
|   2|0x0000000401000000, 0x0000000401000000, 0x0000000401800000|  0%| F|  |TAMS 0x0000000401000000, 0x0000000401000000| Untracked 
|   3|0x0000000401800000, 0x0000000401800000, 0x0000000402000000|  0%| F|  |TAMS 0x0000000401800000, 0x0000000401800000| Untracked 
|   4|0x0000000402000000, 0x0000000402000000, 0x0000000402800000|  0%| F|  |TAMS 0x0000000402000000, 0x0000000402000000| Untracked 
|   5|0x0000000402800000, 0x0000000402800000, 0x0000000403000000|  0%| F|  |TAMS 0x0000000402800000, 0x0000000402800000| Untracked 
|   6|0x0000000403000000, 0x0000000403000000, 0x0000000403800000|  0%| F|  |TAMS 0x0000000403000000, 0x0000000403000000| Untracked 
|   7|0x0000000403800000, 0x0000000403800000, 0x0000000404000000|  0%| F|  |TAMS 0x0000000403800000, 0x0000000403800000| Untracked 
|   8|0x0000000404000000, 0x0000000404000000, 0x0000000404800000|  0%| F|  |TAMS 0x0000000404000000, 0x0000000404000000| Untracked 
|   9|0x0000000404800000, 0x0000000404800000, 0x0000000405000000|  0%| F|  |TAMS 0x0000000404800000, 0x0000000404800000| Untracked 
|  10|0x0000000405000000, 0x0000000405000000, 0x0000000405800000|  0%| F|  |TAMS 0x0000000405000000, 0x0000000405000000| Untracked 
|  11|0x0000000405800000, 0x0000000405800000, 0x0000000406000000|  0%| F|  |TAMS 0x0000000405800000, 0x0000000405800000| Untracked 
|  12|0x0000000406000000, 0x0000000406000000, 0x0000000406800000|  0%| F|  |TAMS 0x0000000406000000, 0x0000000406000000| Untracked 
|  13|0x0000000406800000, 0x0000000406800000, 0x0000000407000000|  0%| F|  |TAMS 0x0000000406800000, 0x0000000406800000| Untracked 
|  14|0x0000000407000000, 0x0000000407000000, 0x0000000407800000|  0%| F|  |TAMS 0x0000000407000000, 0x0000000407000000| Untracked 
|  15|0x0000000407800000, 0x0000000407800000, 0x0000000408000000|  0%| F|  |TAMS 0x0000000407800000, 0x0000000407800000| Untracked 
|  16|0x0000000408000000, 0x0000000408000000, 0x0000000408800000|  0%| F|  |TAMS 0x0000000408000000, 0x0000000408000000| Untracked 
|  17|0x0000000408800000, 0x0000000408800000, 0x0000000409000000|  0%| F|  |TAMS 0x0000000408800000, 0x0000000408800000| Untracked 
|  18|0x0000000409000000, 0x0000000409000000, 0x0000000409800000|  0%| F|  |TAMS 0x0000000409000000, 0x0000000409000000| Untracked 
|  19|0x0000000409800000, 0x0000000409800000, 0x000000040a000000|  0%| F|  |TAMS 0x0000000409800000, 0x0000000409800000| Untracked 
|  20|0x000000040a000000, 0x000000040a000000, 0x000000040a800000|  0%| F|  |TAMS 0x000000040a000000, 0x000000040a000000| Untracked 
|  21|0x000000040a800000, 0x000000040a800000, 0x000000040b000000|  0%| F|  |TAMS 0x000000040a800000, 0x000000040a800000| Untracked 
|  22|0x000000040b000000, 0x000000040b000000, 0x000000040b800000|  0%| F|  |TAMS 0x000000040b000000, 0x000000040b000000| Untracked 
|  23|0x000000040b800000, 0x000000040b800000, 0x000000040c000000|  0%| F|  |TAMS 0x000000040b800000, 0x000000040b800000| Untracked 
|  24|0x000000040c000000, 0x000000040c000000, 0x000000040c800000|  0%| F|  |TAMS 0x000000040c000000, 0x000000040c000000| Untracked 
|  25|0x000000040c800000, 0x000000040c800000, 0x000000040d000000|  0%| F|  |TAMS 0x000000040c800000, 0x000000040c800000| Untracked 
|  26|0x000000040d000000, 0x000000040d000000, 0x000000040d800000|  0%| F|  |TAMS 0x000000040d000000, 0x000000040d000000| Untracked 
|  27|0x000000040d800000, 0x000000040d800000, 0x000000040e000000|  0%| F|  |TAMS 0x000000040d800000, 0x000000040d800000| Untracked 
|  28|0x000000040e000000, 0x000000040e000000, 0x000000040e800000|  0%| F|  |TAMS 0x000000040e000000, 0x000000040e000000| Untracked 
|  29|0x000000040e800000, 0x000000040e800000, 0x000000040f000000|  0%| F|  |TAMS 0x000000040e800000, 0x000000040e800000| Untracked 
|  30|0x000000040f000000, 0x000000040f000000, 0x000000040f800000|  0%| F|  |TAMS 0x000000040f000000, 0x000000040f000000| Untracked 
|  31|0x000000040f800000, 0x000000040f800000, 0x0000000410000000|  0%| F|  |TAMS 0x000000040f800000, 0x000000040f800000| Untracked 
|  32|0x0000000410000000, 0x0000000410000000, 0x0000000410800000|  0%| F|  |TAMS 0x0000000410000000, 0x0000000410000000| Untracked 
|  33|0x0000000410800000, 0x0000000410800000, 0x0000000411000000|  0%| F|  |TAMS 0x0000000410800000, 0x0000000410800000| Untracked 
|  34|0x0000000411000000, 0x0000000411000000, 0x0000000411800000|  0%| F|  |TAMS 0x0000000411000000, 0x0000000411000000| Untracked 
|  35|0x0000000411800000, 0x0000000411800000, 0x0000000412000000|  0%| F|  |TAMS 0x0000000411800000, 0x0000000411800000| Untracked 
|  36|0x0000000412000000, 0x0000000412000000, 0x0000000412800000|  0%| F|  |TAMS 0x0000000412000000, 0x0000000412000000| Untracked 
|  37|0x0000000412800000, 0x0000000412800000, 0x0000000413000000|  0%| F|  |TAMS 0x0000000412800000, 0x0000000412800000| Untracked 
|  38|0x0000000413000000, 0x0000000413000000, 0x0000000413800000|  0%| F|  |TAMS 0x0000000413000000, 0x0000000413000000| Untracked 
|  39|0x0000000413800000, 0x0000000413800000, 0x0000000414000000|  0%| F|  |TAMS 0x0000000413800000, 0x0000000413800000| Untracked 
|  40|0x0000000414000000, 0x0000000414000000, 0x0000000414800000|  0%| F|  |TAMS 0x0000000414000000, 0x0000000414000000| Untracked 
|  41|0x0000000414800000, 0x0000000414800000, 0x0000000415000000|  0%| F|  |TAMS 0x0000000414800000, 0x0000000414800000| Untracked 
|  42|0x0000000415000000, 0x0000000415000000, 0x0000000415800000|  0%| F|  |TAMS 0x0000000415000000, 0x0000000415000000| Untracked 
|  43|0x0000000415800000, 0x0000000415800000, 0x0000000416000000|  0%| F|  |TAMS 0x0000000415800000, 0x0000000415800000| Untracked 
|  44|0x0000000416000000, 0x0000000416000000, 0x0000000416800000|  0%| F|  |TAMS 0x0000000416000000, 0x0000000416000000| Untracked 
|  45|0x0000000416800000, 0x0000000416800000, 0x0000000417000000|  0%| F|  |TAMS 0x0000000416800000, 0x0000000416800000| Untracked 
|  46|0x0000000417000000, 0x0000000417000000, 0x0000000417800000|  0%| F|  |TAMS 0x0000000417000000, 0x0000000417000000| Untracked 
|  47|0x0000000417800000, 0x0000000417800000, 0x0000000418000000|  0%| F|  |TAMS 0x0000000417800000, 0x0000000417800000| Untracked 
|  48|0x0000000418000000, 0x0000000418000000, 0x0000000418800000|  0%| F|  |TAMS 0x0000000418000000, 0x0000000418000000| Untracked 
|  49|0x0000000418800000, 0x0000000418800000, 0x0000000419000000|  0%| F|  |TAMS 0x0000000418800000, 0x0000000418800000| Untracked 
|  50|0x0000000419000000, 0x0000000419000000, 0x0000000419800000|  0%| F|  |TAMS 0x0000000419000000, 0x0000000419000000| Untracked 
|  51|0x0000000419800000, 0x0000000419800000, 0x000000041a000000|  0%| F|  |TAMS 0x0000000419800000, 0x0000000419800000| Untracked 
|  52|0x000000041a000000, 0x000000041a000000, 0x000000041a800000|  0%| F|  |TAMS 0x000000041a000000, 0x000000041a000000| Untracked 
|  53|0x000000041a800000, 0x000000041a800000, 0x000000041b000000|  0%| F|  |TAMS 0x000000041a800000, 0x000000041a800000| Untracked 
|  54|0x000000041b000000, 0x000000041b000000, 0x000000041b800000|  0%| F|  |TAMS 0x000000041b000000, 0x000000041b000000| Untracked 
|  55|0x000000041b800000, 0x000000041b800000, 0x000000041c000000|  0%| F|  |TAMS 0x000000041b800000, 0x000000041b800000| Untracked 
|  56|0x000000041c000000, 0x000000041c000000, 0x000000041c800000|  0%| F|  |TAMS 0x000000041c000000, 0x000000041c000000| Untracked 
|  57|0x000000041c800000, 0x000000041c800000, 0x000000041d000000|  0%| F|  |TAMS 0x000000041c800000, 0x000000041c800000| Untracked 
|  58|0x000000041d000000, 0x000000041d000000, 0x000000041d800000|  0%| F|  |TAMS 0x000000041d000000, 0x000000041d000000| Untracked 
|  59|0x000000041d800000, 0x000000041d800000, 0x000000041e000000|  0%| F|  |TAMS 0x000000041d800000, 0x000000041d800000| Untracked 
|  60|0x000000041e000000, 0x000000041e000000, 0x000000041e800000|  0%| F|  |TAMS 0x000000041e000000, 0x000000041e000000| Untracked 
|  61|0x000000041e800000, 0x000000041e800000, 0x000000041f000000|  0%| F|  |TAMS 0x000000041e800000, 0x000000041e800000| Untracked 
|  62|0x000000041f000000, 0x000000041f000000, 0x000000041f800000|  0%| F|  |TAMS 0x000000041f000000, 0x000000041f000000| Untracked 
|  63|0x000000041f800000, 0x000000041f800000, 0x0000000420000000|  0%| F|  |TAMS 0x000000041f800000, 0x000000041f800000| Untracked 
|  64|0x0000000420000000, 0x0000000420000000, 0x0000000420800000|  0%| F|  |TAMS 0x0000000420000000, 0x0000000420000000| Untracked 
|  65|0x0000000420800000, 0x0000000420800000, 0x0000000421000000|  0%| F|  |TAMS 0x0000000420800000, 0x0000000420800000| Untracked 
|  66|0x0000000421000000, 0x0000000421000000, 0x0000000421800000|  0%| F|  |TAMS 0x0000000421000000, 0x0000000421000000| Untracked 
|  67|0x0000000421800000, 0x0000000421800000, 0x0000000422000000|  0%| F|  |TAMS 0x0000000421800000, 0x0000000421800000| Untracked 
|  68|0x0000000422000000, 0x0000000422000000, 0x0000000422800000|  0%| F|  |TAMS 0x0000000422000000, 0x0000000422000000| Untracked 
|  69|0x0000000422800000, 0x0000000422800000, 0x0000000423000000|  0%| F|  |TAMS 0x0000000422800000, 0x0000000422800000| Untracked 
|  70|0x0000000423000000, 0x0000000423000000, 0x0000000423800000|  0%| F|  |TAMS 0x0000000423000000, 0x0000000423000000| Untracked 
|  71|0x0000000423800000, 0x0000000423800000, 0x0000000424000000|  0%| F|  |TAMS 0x0000000423800000, 0x0000000423800000| Untracked 
|  72|0x0000000424000000, 0x0000000424000000, 0x0000000424800000|  0%| F|  |TAMS 0x0000000424000000, 0x0000000424000000| Untracked 
|  73|0x0000000424800000, 0x0000000424800000, 0x0000000425000000|  0%| F|  |TAMS 0x0000000424800000, 0x0000000424800000| Untracked 
|  74|0x0000000425000000, 0x0000000425000000, 0x0000000425800000|  0%| F|  |TAMS 0x0000000425000000, 0x0000000425000000| Untracked 
|  75|0x0000000425800000, 0x0000000425800000, 0x0000000426000000|  0%| F|  |TAMS 0x0000000425800000, 0x0000000425800000| Untracked 
|  76|0x0000000426000000, 0x0000000426000000, 0x0000000426800000|  0%| F|  |TAMS 0x0000000426000000, 0x0000000426000000| Untracked 
|  77|0x0000000426800000, 0x0000000426800000, 0x0000000427000000|  0%| F|  |TAMS 0x0000000426800000, 0x0000000426800000| Untracked 
|  78|0x0000000427000000, 0x0000000427000000, 0x0000000427800000|  0%| F|  |TAMS 0x0000000427000000, 0x0000000427000000| Untracked 
|  79|0x0000000427800000, 0x0000000427800000, 0x0000000428000000|  0%| F|  |TAMS 0x0000000427800000, 0x0000000427800000| Untracked 
|  80|0x0000000428000000, 0x0000000428000000, 0x0000000428800000|  0%| F|  |TAMS 0x0000000428000000, 0x0000000428000000| Untracked 
|  81|0x0000000428800000, 0x0000000428800000, 0x0000000429000000|  0%| F|  |TAMS 0x0000000428800000, 0x0000000428800000| Untracked 
|  82|0x0000000429000000, 0x0000000429000000, 0x0000000429800000|  0%| F|  |TAMS 0x0000000429000000, 0x0000000429000000| Untracked 
|  83|0x0000000429800000, 0x0000000429800000, 0x000000042a000000|  0%| F|  |TAMS 0x0000000429800000, 0x0000000429800000| Untracked 
|  84|0x000000042a000000, 0x000000042a000000, 0x000000042a800000|  0%| F|  |TAMS 0x000000042a000000, 0x000000042a000000| Untracked 
|  85|0x000000042a800000, 0x000000042a800000, 0x000000042b000000|  0%| F|  |TAMS 0x000000042a800000, 0x000000042a800000| Untracked 
|  86|0x000000042b000000, 0x000000042b000000, 0x000000042b800000|  0%| F|  |TAMS 0x000000042b000000, 0x000000042b000000| Untracked 
|  87|0x000000042b800000, 0x000000042b800000, 0x000000042c000000|  0%| F|  |TAMS 0x000000042b800000, 0x000000042b800000| Untracked 
|  88|0x000000042c000000, 0x000000042c000000, 0x000000042c800000|  0%| F|  |TAMS 0x000000042c000000, 0x000000042c000000| Untracked 
|  89|0x000000042c800000, 0x000000042c800000, 0x000000042d000000|  0%| F|  |TAMS 0x000000042c800000, 0x000000042c800000| Untracked 
|  90|0x000000042d000000, 0x000000042d000000, 0x000000042d800000|  0%| F|  |TAMS 0x000000042d000000, 0x000000042d000000| Untracked 
|  91|0x000000042d800000, 0x000000042d800000, 0x000000042e000000|  0%| F|  |TAMS 0x000000042d800000, 0x000000042d800000| Untracked 
|  92|0x000000042e000000, 0x000000042e000000, 0x000000042e800000|  0%| F|  |TAMS 0x000000042e000000, 0x000000042e000000| Untracked 
|  93|0x000000042e800000, 0x000000042e800000, 0x000000042f000000|  0%| F|  |TAMS 0x000000042e800000, 0x000000042e800000| Untracked 
|  94|0x000000042f000000, 0x000000042f000000, 0x000000042f800000|  0%| F|  |TAMS 0x000000042f000000, 0x000000042f000000| Untracked 
|  95|0x000000042f800000, 0x000000042f800000, 0x0000000430000000|  0%| F|  |TAMS 0x000000042f800000, 0x000000042f800000| Untracked 
|  96|0x0000000430000000, 0x0000000430000000, 0x0000000430800000|  0%| F|  |TAMS 0x0000000430000000, 0x0000000430000000| Untracked 
|  97|0x0000000430800000, 0x0000000430800000, 0x0000000431000000|  0%| F|  |TAMS 0x0000000430800000, 0x0000000430800000| Untracked 
|  98|0x0000000431000000, 0x0000000431000000, 0x0000000431800000|  0%| F|  |TAMS 0x0000000431000000, 0x0000000431000000| Untracked 
|  99|0x0000000431800000, 0x0000000431800000, 0x0000000432000000|  0%| F|  |TAMS 0x0000000431800000, 0x0000000431800000| Untracked 
| 100|0x0000000432000000, 0x0000000432000000, 0x0000000432800000|  0%| F|  |TAMS 0x0000000432000000, 0x0000000432000000| Untracked 
| 101|0x0000000432800000, 0x0000000432800000, 0x0000000433000000|  0%| F|  |TAMS 0x0000000432800000, 0x0000000432800000| Untracked 
| 102|0x0000000433000000, 0x0000000433000000, 0x0000000433800000|  0%| F|  |TAMS 0x0000000433000000, 0x0000000433000000| Untracked 
| 103|0x0000000433800000, 0x0000000433800000, 0x0000000434000000|  0%| F|  |TAMS 0x0000000433800000, 0x0000000433800000| Untracked 
| 104|0x0000000434000000, 0x0000000434000000, 0x0000000434800000|  0%| F|  |TAMS 0x0000000434000000, 0x0000000434000000| Untracked 
| 105|0x0000000434800000, 0x0000000434800000, 0x0000000435000000|  0%| F|  |TAMS 0x0000000434800000, 0x0000000434800000| Untracked 
| 106|0x0000000435000000, 0x0000000435000000, 0x0000000435800000|  0%| F|  |TAMS 0x0000000435000000, 0x0000000435000000| Untracked 
| 107|0x0000000435800000, 0x0000000435800000, 0x0000000436000000|  0%| F|  |TAMS 0x0000000435800000, 0x0000000435800000| Untracked 
| 108|0x0000000436000000, 0x0000000436000000, 0x0000000436800000|  0%| F|  |TAMS 0x0000000436000000, 0x0000000436000000| Untracked 
| 109|0x0000000436800000, 0x0000000436800000, 0x0000000437000000|  0%| F|  |TAMS 0x0000000436800000, 0x0000000436800000| Untracked 
| 110|0x0000000437000000, 0x0000000437000000, 0x0000000437800000|  0%| F|  |TAMS 0x0000000437000000, 0x0000000437000000| Untracked 
| 111|0x0000000437800000, 0x0000000437800000, 0x0000000438000000|  0%| F|  |TAMS 0x0000000437800000, 0x0000000437800000| Untracked 
| 112|0x0000000438000000, 0x0000000438000000, 0x0000000438800000|  0%| F|  |TAMS 0x0000000438000000, 0x0000000438000000| Untracked 
| 113|0x0000000438800000, 0x0000000438800000, 0x0000000439000000|  0%| F|  |TAMS 0x0000000438800000, 0x0000000438800000| Untracked 
| 114|0x0000000439000000, 0x0000000439000000, 0x0000000439800000|  0%| F|  |TAMS 0x0000000439000000, 0x0000000439000000| Untracked 
| 115|0x0000000439800000, 0x0000000439800000, 0x000000043a000000|  0%| F|  |TAMS 0x0000000439800000, 0x0000000439800000| Untracked 
| 116|0x000000043a000000, 0x000000043a000000, 0x000000043a800000|  0%| F|  |TAMS 0x000000043a000000, 0x000000043a000000| Untracked 
| 117|0x000000043a800000, 0x000000043a800000, 0x000000043b000000|  0%| F|  |TAMS 0x000000043a800000, 0x000000043a800000| Untracked 
| 118|0x000000043b000000, 0x000000043b000000, 0x000000043b800000|  0%| F|  |TAMS 0x000000043b000000, 0x000000043b000000| Untracked 
| 119|0x000000043b800000, 0x000000043b800000, 0x000000043c000000|  0%| F|  |TAMS 0x000000043b800000, 0x000000043b800000| Untracked 
| 120|0x000000043c000000, 0x000000043c000000, 0x000000043c800000|  0%| F|  |TAMS 0x000000043c000000, 0x000000043c000000| Untracked 
| 121|0x000000043c800000, 0x000000043c800000, 0x000000043d000000|  0%| F|  |TAMS 0x000000043c800000, 0x000000043c800000| Untracked 
| 122|0x000000043d000000, 0x000000043d000000, 0x000000043d800000|  0%| F|  |TAMS 0x000000043d000000, 0x000000043d000000| Untracked 
| 123|0x000000043d800000, 0x000000043d800000, 0x000000043e000000|  0%| F|  |TAMS 0x000000043d800000, 0x000000043d800000| Untracked 
| 124|0x000000043e000000, 0x000000043e000000, 0x000000043e800000|  0%| F|  |TAMS 0x000000043e000000, 0x000000043e000000| Untracked 
| 125|0x000000043e800000, 0x000000043e800000, 0x000000043f000000|  0%| F|  |TAMS 0x000000043e800000, 0x000000043e800000| Untracked 
| 126|0x000000043f000000, 0x000000043f000000, 0x000000043f800000|  0%| F|  |TAMS 0x000000043f000000, 0x000000043f000000| Untracked 
| 127|0x000000043f800000, 0x000000043f9eb870, 0x0000000440000000| 24%| E|  |TAMS 0x000000043f800000, 0x000000043f800000| Complete 
|1918|0x00000007bf000000, 0x00000007bf775000, 0x00000007bf800000| 93%|OA|  |TAMS 0x00000007bf000000, 0x00000007bf000000| Untracked 
|1919|0x00000007bf800000, 0x00000007bf87d000, 0x00000007c0000000|  6%|CA|  |TAMS 0x00000007bf800000, 0x00000007bf800000| Untracked 

Card table byte_map: [0x000000011dc2d000,0x000000011fc2d000] _byte_map_base: 0x000000011bc2d000

Marking Bits (Prev, Next): (CMBitMap*) 0x00007f863e038010, (CMBitMap*) 0x00007f863e038050
 Prev Bits: [0x0000000121c2d000, 0x0000000131c2d000)
 Next Bits: [0x0000000131c2d000, 0x0000000141c2d000)

Polling page: 0x0000000101675000

Metaspace:

Usage:
  Non-class:     91.08 KB used.
      Class:      3.74 KB used.
       Both:     94.82 KB used.

Virtual space:
  Non-class space:        8.00 MB reserved,     192.00 KB (  2%) committed,  1 nodes.
      Class space:        1.00 GB reserved,     128.00 KB ( <1%) committed,  1 nodes.
              Both:        1.01 GB reserved,     320.00 KB ( <1%) committed. 

Chunk freelists:
   Non-Class:  4.00 MB
       Class:  3.75 MB
        Both:  7.74 MB

MaxMetaspaceSize: 17179869184.00 GB
CompressedClassSpaceSize: 1.00 GB
 - commit_granule_bytes: 65536.
 - commit_granule_words: 8192.
 - virtual_space_node_default_size: 1048576.
 - enlarge_chunks_in_place: 1.
 - new_chunks_are_fully_committed: 0.
 - uncommit_free_chunks: 1.
 - use_allocation_guard: 0.
 - handle_deallocations: 1.


Internal statistics:

num_allocs_failed_limit: 0.
num_arena_births: 4.
num_arena_deaths: 0.
num_vsnodes_births: 2.
num_vsnodes_deaths: 0.
num_space_committed: 5.
num_space_uncommitted: 0.
num_chunks_returned_to_freelist: 0.
num_chunks_taken_from_freelist: 5.
num_chunk_merges: 0.
num_chunk_splits: 2.
num_chunks_enlarged: 0.
num_purges: 0.

CodeHeap 'non-profiled nmethods': size=119168Kb used=0Kb max_used=0Kb free=119168Kb
 bounds [0x00000001147cd000, 0x0000000114a3d000, 0x000000011bc2d000]
CodeHeap 'profiled nmethods': size=119164Kb used=5Kb max_used=5Kb free=119158Kb
 bounds [0x000000010d36e000, 0x000000010d5de000, 0x00000001147cd000]
CodeHeap 'non-nmethods': size=7428Kb used=1047Kb max_used=1060Kb free=6380Kb
 bounds [0x000000010cc2d000, 0x000000010ce9d000, 0x000000010d36e000]
 total_blobs=311 nmethods=5 adapters=221
 compilation: enabled
              stopped_count=0, restarted_count=0
 full_count=0

Compilation events (10 events):
Event: 0.023 Thread 0x00007f863e04c600    1       3       java.lang.Object::<init> (1 bytes)
Event: 0.024 Thread 0x00007f863e04c600 nmethod 1 0x000000010d36e010 code [0x000000010d36e1a0, 0x000000010d36e2b0]
Event: 0.024 Thread 0x00007f863e04c600    2       3       java.lang.String::hashCode (60 bytes)
Event: 0.024 Thread 0x00007f863e04c600 nmethod 2 0x000000010d36e390 code [0x000000010d36e560, 0x000000010d36e8b0]
Event: 0.024 Thread 0x00007f863e04c600    3       3       java.lang.String::coder (15 bytes)
Event: 0.024 Thread 0x00007f863e04c600 nmethod 3 0x000000010d36e990 code [0x000000010d36eb20, 0x000000010d36ec50]
Event: 0.025 Thread 0x00007f863e04c600    4       3       java.lang.String::length (11 bytes)
Event: 0.025 Thread 0x00007f863e04c600 nmethod 4 0x000000010d36ed10 code [0x000000010d36eec0, 0x000000010d36f050]
Event: 0.025 Thread 0x00007f863e04c600    5       3       java.lang.String::isLatin1 (19 bytes)
Event: 0.026 Thread 0x00007f863e04c600 nmethod 5 0x000000010d36f110 code [0x000000010d36f2a0, 0x000000010d36f410]

GC Heap History (0 events):
No events

Deoptimization events (0 events):
No events

Classes unloaded (0 events):
No events

Classes redefined (0 events):
No events

Internal exceptions (0 events):
No events

Events (20 events):
Event: 0.020 Thread 0x00007f863d014a00 Thread added: 0x00007f863d014a00
Event: 0.020 Protecting memory [0x000070000288f000,0x0000700002893000] with protection modes 0
Event: 0.021 Thread 0x00007f863d018c00 Thread added: 0x00007f863d018c00
Event: 0.021 Protecting memory [0x0000700002992000,0x0000700002996000] with protection modes 0
Event: 0.021 Thread 0x00007f863e04c600 Thread added: 0x00007f863e04c600
Event: 0.021 Protecting memory [0x0000700002a95000,0x0000700002a99000] with protection modes 0
Event: 0.021 Thread 0x00007f863e04a400 Thread added: 0x00007f863e04a400
Event: 0.021 Protecting memory [0x0000700002b98000,0x0000700002b9c000] with protection modes 0
Event: 0.023 Thread 0x00007f862d193200 Thread added: 0x00007f862d193200
Event: 0.023 Protecting memory [0x0000700002c9b000,0x0000700002c9f000] with protection modes 0
Event: 0.023 loading class jdk/internal/vm/PostVMInitHook
Event: 0.023 loading class jdk/internal/vm/PostVMInitHook done
Event: 0.024 loading class jdk/internal/loader/URLClassPath$FileLoader
Event: 0.024 loading class jdk/internal/loader/URLClassPath$FileLoader done
Event: 0.024 loading class jdk/internal/loader/URLClassPath$FileLoader$1
Event: 0.024 loading class jdk/internal/loader/URLClassPath$FileLoader$1 done
Event: 0.025 Thread 0x00007f863e809600 Thread added: 0x00007f863e809600
Event: 0.025 Protecting memory [0x0000700002ea1000,0x0000700002ea5000] with protection modes 0
Event: 0.026 loading class java/lang/Class$EnclosingMethodInfo
Event: 0.026 loading class java/lang/Class$EnclosingMethodInfo done


Dynamic libraries:
0x00007fff72b4b000 	/usr/lib/libz.1.dylib
0x00000001015ec000 	/Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-16.jdk/Contents/Home/lib/libjli.dylib
0x00007fff387fe000 	/System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa
0x00007fff46007000 	/System/Library/Frameworks/Security.framework/Versions/A/Security
0x00007fff37763000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices
0x00007fff7060f000 	/usr/lib/libSystem.B.dylib
0x00007fff7340c000 	/usr/lib/system/libcache.dylib
0x00007fff73412000 	/usr/lib/system/libcommonCrypto.dylib
0x00007fff7341e000 	/usr/lib/system/libcompiler_rt.dylib
0x00007fff73426000 	/usr/lib/system/libcopyfile.dylib
0x00007fff73430000 	/usr/lib/system/libcorecrypto.dylib
0x00007fff735cf000 	/usr/lib/system/libdispatch.dylib
0x00007fff73610000 	/usr/lib/system/libdyld.dylib
0x00007fff73647000 	/usr/lib/system/libkeymgr.dylib
0x00007fff73655000 	/usr/lib/system/liblaunch.dylib
0x00007fff73656000 	/usr/lib/system/libmacho.dylib
0x00007fff7365c000 	/usr/lib/system/libquarantine.dylib
0x00007fff7365f000 	/usr/lib/system/libremovefile.dylib
0x00007fff73661000 	/usr/lib/system/libsystem_asl.dylib
0x00007fff73679000 	/usr/lib/system/libsystem_blocks.dylib
0x00007fff7367a000 	/usr/lib/system/libsystem_c.dylib
0x00007fff73702000 	/usr/lib/system/libsystem_configuration.dylib
0x00007fff73706000 	/usr/lib/system/libsystem_coreservices.dylib
0x00007fff7370a000 	/usr/lib/system/libsystem_darwin.dylib
0x00007fff73713000 	/usr/lib/system/libsystem_dnssd.dylib
0x00007fff7371b000 	/usr/lib/system/libsystem_featureflags.dylib
0x00007fff7371d000 	/usr/lib/system/libsystem_info.dylib
0x00007fff73798000 	/usr/lib/system/libsystem_m.dylib
0x00007fff737e0000 	/usr/lib/system/libsystem_malloc.dylib
0x00007fff73808000 	/usr/lib/system/libsystem_networkextension.dylib
0x00007fff73816000 	/usr/lib/system/libsystem_notify.dylib
0x00007fff73834000 	/usr/lib/system/libsystem_sandbox.dylib
0x00007fff73839000 	/usr/lib/system/libsystem_secinit.dylib
0x00007fff7376b000 	/usr/lib/system/libsystem_kernel.dylib
0x00007fff73820000 	/usr/lib/system/libsystem_platform.dylib
0x00007fff73829000 	/usr/lib/system/libsystem_pthread.dylib
0x00007fff7383c000 	/usr/lib/system/libsystem_symptoms.dylib
0x00007fff73844000 	/usr/lib/system/libsystem_trace.dylib
0x00007fff7385c000 	/usr/lib/system/libunwind.dylib
0x00007fff73862000 	/usr/lib/system/libxpc.dylib
0x00007fff7246f000 	/usr/lib/libobjc.A.dylib
0x00007fff70948000 	/usr/lib/libc++abi.dylib
0x00007fff708f5000 	/usr/lib/libc++.1.dylib
0x00007fff396a0000 	/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation
0x00007fff3bd5d000 	/System/Library/Frameworks/Foundation.framework/Versions/C/Foundation
0x00007fff36953000 	/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
0x00007fff39182000 	/System/Library/Frameworks/CoreData.framework/Versions/A/CoreData
0x00007fff6a60a000 	/System/Library/PrivateFrameworks/UIFoundation.framework/Versions/A/UIFoundation
0x00007fff6569e000 	/System/Library/PrivateFrameworks/RemoteViewServices.framework/Versions/A/RemoteViewServices
0x00007fff6d17f000 	/System/Library/PrivateFrameworks/XCTTargetBootstrap.framework/Versions/A/XCTTargetBootstrap
0x00007fff3956d000 	/System/Library/Frameworks/CoreDisplay.framework/Versions/A/CoreDisplay
0x00007fff3ec17000 	/System/Library/Frameworks/Metal.framework/Versions/A/Metal
0x00007fff5369c000 	/System/Library/PrivateFrameworks/DesktopServicesPriv.framework/Versions/A/DesktopServicesPriv
0x00007fff7174a000 	/usr/lib/liblangid.dylib
0x00007fff52931000 	/System/Library/PrivateFrameworks/CoreSVG.framework/Versions/A/CoreSVG
0x00007fff687fa000 	/System/Library/PrivateFrameworks/SkyLight.framework/Versions/A/SkyLight
0x00007fff39b21000 	/System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics
0x00007fff35327000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate
0x00007fff72a3c000 	/usr/lib/libxml2.2.dylib
0x00007fff5e628000 	/System/Library/PrivateFrameworks/IconServices.framework/Versions/A/IconServices
0x00007fff3c53c000 	/System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface
0x00007fff70139000 	/usr/lib/libDiagnosticMessagesClient.dylib
0x00007fff534f6000 	/System/Library/PrivateFrameworks/DFRFoundation.framework/Versions/A/DFRFoundation
0x00007fff714d9000 	/usr/lib/libicucore.A.dylib
0x00007fff37a95000 	/System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox
0x00007fff37b78000 	/System/Library/Frameworks/AudioUnit.framework/Versions/A/AudioUnit
0x00007fff70811000 	/usr/lib/libauto.dylib
0x00007fff53598000 	/System/Library/PrivateFrameworks/DataDetectorsCore.framework/Versions/A/DataDetectorsCore
0x00007fff3831f000 	/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox
0x00007fff45201000 	/System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore
0x00007fff3865e000 	/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SpeechRecognition.framework/Versions/A/SpeechRecognition
0x00007fff5300a000 	/System/Library/PrivateFrameworks/CoreUI.framework/Versions/A/CoreUI
0x00007fff38bed000 	/System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio
0x00007fff3ba1c000 	/System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration
0x00007fff60678000 	/System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport
0x00007fff713a0000 	/usr/lib/libenergytrace.dylib
0x00007fff3c496000 	/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit
0x00007fff3aa88000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices
0x00007fff62831000 	/System/Library/PrivateFrameworks/PerformanceAnalysis.framework/Versions/A/PerformanceAnalysis
0x00007fff44234000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL
0x00007fff3880c000 	/System/Library/Frameworks/ColorSync.framework/Versions/A/ColorSync
0x00007fff3a1a4000 	/System/Library/Frameworks/CoreImage.framework/Versions/A/CoreImage
0x00007fff3b4fb000 	/System/Library/Frameworks/CoreText.framework/Versions/A/CoreText
0x00007fff3c5cc000 	/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO
0x00007fff70971000 	/usr/lib/libcompression.dylib
0x00007fff7047d000 	/usr/lib/libMobileGestalt.dylib
0x00007fff6a374000 	/System/Library/PrivateFrameworks/TextureIO.framework/Versions/A/TextureIO
0x00007fff70774000 	/usr/lib/libate.dylib
0x00007fff5e831000 	/System/Library/PrivateFrameworks/InternationalSupport.framework/Versions/A/InternationalSupport
0x00007fff7174c000 	/usr/lib/liblzma.5.dylib
0x00007fff713c7000 	/usr/lib/libfakelink.dylib
0x00007fff70701000 	/usr/lib/libarchive.2.dylib
0x00007fff470b8000 	/System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration
0x00007fff7006c000 	/usr/lib/libCRFSuite.dylib
0x00007fff37f0f000 	/System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork
0x00007fff708d7000 	/usr/lib/libbsm.0.dylib
0x00007fff73648000 	/usr/lib/system/libkxld.dylib
0x00007fff4ce72000 	/System/Library/PrivateFrameworks/AppleFSCompression.framework/Versions/A/AppleFSCompression
0x00007fff70c62000 	/usr/lib/libcoretls.dylib
0x00007fff70c79000 	/usr/lib/libcoretls_cfhelpers.dylib
0x00007fff724b5000 	/usr/lib/libpam.2.dylib
0x00007fff725ea000 	/usr/lib/libsqlite3.dylib
0x00007fff72a29000 	/usr/lib/libxar.1.dylib
0x00007fff708e8000 	/usr/lib/libbz2.1.0.dylib
0x00007fff713e8000 	/usr/lib/libiconv.2.dylib
0x00007fff7095e000 	/usr/lib/libcharset.1.dylib
0x00007fff71f52000 	/usr/lib/libnetwork.dylib
0x00007fff724bc000 	/usr/lib/libpcap.A.dylib
0x00007fff706b6000 	/usr/lib/libapple_nghttp2.dylib
0x00007fff3ae3f000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/FSEvents
0x00007fff3ab0f000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore
0x00007fff3b083000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata
0x00007fff3b11c000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices
0x00007fff3b14a000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit
0x00007fff3aa89000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE
0x00007fff3ae48000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices
0x00007fff3adf1000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices
0x00007fff3b1b2000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SharedFileList.framework/Versions/A/SharedFileList
0x00007fff40053000 	/System/Library/Frameworks/NetFS.framework/Versions/A/NetFS
0x00007fff60ba8000 	/System/Library/PrivateFrameworks/NetAuth.framework/Versions/A/NetAuth
0x00007fff6d54c000 	/System/Library/PrivateFrameworks/login.framework/Versions/A/Frameworks/loginsupport.framework/Versions/A/loginsupport
0x00007fff69e3f000 	/System/Library/PrivateFrameworks/TCC.framework/Versions/A/TCC
0x00007fff51aa4000 	/System/Library/PrivateFrameworks/CoreNLP.framework/Versions/A/CoreNLP
0x00007fff600a5000 	/System/Library/PrivateFrameworks/MetadataUtilities.framework/Versions/A/MetadataUtilities
0x00007fff71824000 	/usr/lib/libmecabra.dylib
0x00007fff7177c000 	/usr/lib/libmecab.dylib
0x00007fff713d8000 	/usr/lib/libgermantok.dylib
0x00007fff7069d000 	/usr/lib/libThaiTokenizer.dylib
0x00007fff700a3000 	/usr/lib/libChineseTokenizer.dylib
0x00007fff3533f000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage
0x00007fff367a9000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib
0x00007fff366e6000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib
0x00007fff3650e000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib
0x00007fff35996000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
0x00007fff360d2000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib
0x00007fff3646e000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLinearAlgebra.dylib
0x00007fff364fb000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparseBLAS.dylib
0x00007fff36484000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libQuadrature.dylib
0x00007fff35bfe000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBNNS.dylib
0x00007fff3648a000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparse.dylib
0x00007fff5ec19000 	/System/Library/PrivateFrameworks/LanguageModeling.framework/Versions/A/LanguageModeling
0x00007fff51454000 	/System/Library/PrivateFrameworks/CoreEmoji.framework/Versions/A/CoreEmoji
0x00007fff5ed37000 	/System/Library/PrivateFrameworks/LinguisticData.framework/Versions/A/LinguisticData
0x00007fff5ece8000 	/System/Library/PrivateFrameworks/Lexicon.framework/Versions/A/Lexicon
0x00007fff7095f000 	/usr/lib/libcmph.dylib
0x00007fff42c42000 	/System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory
0x00007fff42c5f000 	/System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory
0x00007fff4b0a2000 	/System/Library/PrivateFrameworks/APFS.framework/Versions/A/APFS
0x00007fff46351000 	/System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation
0x00007fff72a25000 	/usr/lib/libutil.dylib
0x00007fff52989000 	/System/Library/PrivateFrameworks/CoreServicesStore.framework/Versions/A/CoreServicesStore
0x00007fff46408000 	/System/Library/Frameworks/ServiceManagement.framework/Versions/A/ServiceManagement
0x00007fff4e642000 	/System/Library/PrivateFrameworks/BackgroundTaskManagement.framework/Versions/A/BackgroundTaskManagement
0x00007fff72b22000 	/usr/lib/libxslt.1.dylib
0x00007fff4d4e5000 	/System/Library/PrivateFrameworks/AppleSystemInfo.framework/Versions/A/AppleSystemInfo
0x00007fff3c7e8000 	/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib
0x00007fff3caa5000 	/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib
0x00007fff3ca88000 	/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib
0x00007fff3c72a000 	/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib
0x00007fff3c72e000 	/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJP2.dylib
0x00007fff3caa3000 	/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib
0x00007fff713a1000 	/usr/lib/libexpat.1.dylib
0x00007fff4cfcd000 	/System/Library/PrivateFrameworks/AppleJPEG.framework/Versions/A/AppleJPEG
0x00007fff55c89000 	/System/Library/PrivateFrameworks/FontServices.framework/libFontParser.dylib
0x00007fff6c54e000 	/System/Library/PrivateFrameworks/WatchdogClient.framework/Versions/A/WatchdogClient
0x00007fff5e274000 	/System/Library/PrivateFrameworks/IOAccelerator.framework/Versions/A/IOAccelerator
0x00007fff3efb2000 	/System/Library/Frameworks/MetalPerformanceShaders.framework/Versions/A/MetalPerformanceShaders
0x00007fff5aa04000 	/System/Library/PrivateFrameworks/GPUWrangler.framework/Versions/A/GPUWrangler
0x00007fff5e289000 	/System/Library/PrivateFrameworks/IOPresentment.framework/Versions/A/IOPresentment
0x00007fff53509000 	/System/Library/PrivateFrameworks/DSExternalDisplay.framework/Versions/A/DSExternalDisplay
0x00007fff435d3000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreFSCache.dylib
0x00007fff3ecfe000 	/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSCore.framework/Versions/A/MPSCore
0x00007fff3ed3c000 	/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSImage.framework/Versions/A/MPSImage
0x00007fff3ee03000 	/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSNeuralNetwork.framework/Versions/A/MPSNeuralNetwork
0x00007fff3edc7000 	/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSMatrix.framework/Versions/A/MPSMatrix
0x00007fff3ef62000 	/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSRayIntersector.framework/Versions/A/MPSRayIntersector
0x00007fff3eded000 	/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSNDArray.framework/Versions/A/MPSNDArray
0x00007fff600f2000 	/System/Library/PrivateFrameworks/MetalTools.framework/Versions/A/MetalTools
0x00007fff4c27c000 	/System/Library/PrivateFrameworks/AggregateDictionary.framework/Versions/A/AggregateDictionary
0x00007fff50e9c000 	/System/Library/PrivateFrameworks/CoreAnalytics.framework/Versions/A/CoreAnalytics
0x00007fff4d404000 	/System/Library/PrivateFrameworks/AppleSauce.framework/Versions/A/AppleSauce
0x00007fff7035f000 	/usr/lib/libIOReport.dylib
0x00007fff3b6b3000 	/System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo
0x00007fff5be7d000 	/System/Library/PrivateFrameworks/GraphVisualizer.framework/Versions/A/GraphVisualizer
0x00007fff551cf000 	/System/Library/PrivateFrameworks/FaceCore.framework/Versions/A/FaceCore
0x00007fff42be9000 	/System/Library/Frameworks/OpenCL.framework/Versions/A/OpenCL
0x00007fff70181000 	/usr/lib/libFosl_dynamic.dylib
0x00007fff615c9000 	/System/Library/PrivateFrameworks/OTSVG.framework/Versions/A/OTSVG
0x00007fff37868000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib
0x00007fff55e58000 	/System/Library/PrivateFrameworks/FontServices.framework/libhvf.dylib
0x00007fff435de000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib
0x00007fff437bc000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib
0x00007fff435e7000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib
0x00007fff435f2000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib
0x00007fff435d0000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCVMSPluginSupport.dylib
0x00007fff435d9000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib
0x00007fff71df3000 	/usr/lib/libncurses.5.4.dylib
0x00007fff37764000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS
0x00007fff37931000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSyncLegacy.framework/Versions/A/ColorSyncLegacy
0x00007fff379cf000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices
0x00007fff37a27000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis
0x00007fff37a36000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore
0x00007fff37a7c000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD
0x00007fff37a87000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis
0x00007fff37901000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATSUI.framework/Versions/A/ATSUI
0x00007fff71237000 	/usr/lib/libcups.2.dylib
0x00007fff3e04d000 	/System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos
0x00007fff3c18f000 	/System/Library/Frameworks/GSS.framework/Versions/A/GSS
0x00007fff72576000 	/usr/lib/libresolv.9.dylib
0x00007fff5c02a000 	/System/Library/PrivateFrameworks/Heimdal.framework/Versions/A/Heimdal
0x00007fff3e060000 	/System/Library/Frameworks/Kerberos.framework/Versions/A/Libraries/libHeimdalProxy.dylib
0x00007fff713de000 	/usr/lib/libheimdal-asn1.dylib
0x00007fff50334000 	/System/Library/PrivateFrameworks/CommonAuth.framework/Versions/A/CommonAuth
0x00007fff4d582000 	/System/Library/PrivateFrameworks/AssertionServices.framework/Versions/A/AssertionServices
0x00007fff4e125000 	/System/Library/PrivateFrameworks/AudioToolboxCore.framework/Versions/A/AudioToolboxCore
0x00007fff6d1fc000 	/System/Library/PrivateFrameworks/caulk.framework/Versions/A/caulk
0x00007fff4e6ee000 	/System/Library/PrivateFrameworks/BaseBoard.framework/Versions/A/BaseBoard
0x00007fff6582c000 	/System/Library/PrivateFrameworks/RunningBoardServices.framework/Versions/A/RunningBoardServices
0x00007fff6283d000 	/System/Library/PrivateFrameworks/PersistentConnection.framework/Versions/A/PersistentConnection
0x00007fff65225000 	/System/Library/PrivateFrameworks/ProtocolBuffer.framework/Versions/A/ProtocolBuffer
0x00007fff50358000 	/System/Library/PrivateFrameworks/CommonUtilities.framework/Versions/A/CommonUtilities
0x00007fff4e87c000 	/System/Library/PrivateFrameworks/Bom.framework/Versions/A/Bom
0x00007fff70032000 	/usr/lib/libAudioToolboxUtility.dylib
0x00007fff4e64c000 	/System/Library/PrivateFrameworks/Backup.framework/Versions/A/Backup
0x00007fff5342a000 	/System/Library/PrivateFrameworks/CrashReporterSupport.framework/Versions/A/CrashReporterSupport
0x00007fff672be000 	/System/Library/PrivateFrameworks/Sharing.framework/Versions/A/Sharing
0x00007fff4cb90000 	/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Apple80211
0x00007fff4e369000 	/System/Library/PrivateFrameworks/AuthKit.framework/Versions/A/AuthKit
0x00007fff53137000 	/System/Library/PrivateFrameworks/CoreUtils.framework/Versions/A/CoreUtils
0x00007fff3b6f8000 	/System/Library/Frameworks/CoreWLAN.framework/Versions/A/CoreWLAN
0x00007fff3c31c000 	/System/Library/Frameworks/IOBluetooth.framework/Versions/A/IOBluetooth
0x00007fff603f7000 	/System/Library/PrivateFrameworks/MobileKeyBag.framework/Versions/A/MobileKeyBag
0x00007fff51f3c000 	/System/Library/PrivateFrameworks/CorePhoneNumbers.framework/Versions/A/CorePhoneNumbers
0x00007fff4cf80000 	/System/Library/PrivateFrameworks/AppleIDAuthSupport.framework/Versions/A/AppleIDAuthSupport
0x00007fff40060000 	/System/Library/Frameworks/Network.framework/Versions/A/Network
0x00007fff5eac5000 	/System/Library/PrivateFrameworks/KeychainCircle.framework/Versions/A/KeychainCircle
0x00007fff39149000 	/System/Library/Frameworks/CoreBluetooth.framework/Versions/A/CoreBluetooth
0x00007fff6933d000 	/System/Library/PrivateFrameworks/SpeechRecognitionCore.framework/Versions/A/SpeechRecognitionCore
0x0000000104575000 	/Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-16.jdk/Contents/Home/lib/server/libjvm.dylib
0x0000000101669000 	/Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-16.jdk/Contents/Home/lib/libjimage.dylib
0x000000010167f000 	/Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-16.jdk/Contents/Home/lib/libjava.dylib


VM Arguments:
java_command: innerstatic/CrashTheJVM$1
java_class_path (initial): .
Launcher Type: SUN_STANDARD

[Global flags]
     intx CICompilerCount                          = 12                                        {product} {ergonomic}
     uint ConcGCThreads                            = 3                                         {product} {ergonomic}
     uint G1ConcRefinementThreads                  = 13                                        {product} {ergonomic}
   size_t G1HeapRegionSize                         = 8388608                                   {product} {ergonomic}
    uintx GCDrainStackTargetSize                   = 64                                        {product} {ergonomic}
   size_t InitialHeapSize                          = 1073741824                                {product} {ergonomic}
   size_t MarkStackSize                            = 4194304                                   {product} {ergonomic}
   size_t MaxHeapSize                              = 17179869184                               {product} {ergonomic}
   size_t MaxNewSize                               = 10301210624                               {product} {ergonomic}
   size_t MinHeapDeltaBytes                        = 8388608                                   {product} {ergonomic}
   size_t MinHeapSize                              = 8388608                                   {product} {ergonomic}
    uintx NonNMethodCodeHeapSize                   = 7602480                                {pd product} {ergonomic}
    uintx NonProfiledCodeHeapSize                  = 122027880                              {pd product} {ergonomic}
    uintx ProfiledCodeHeapSize                     = 122027880                              {pd product} {ergonomic}
    uintx ReservedCodeCacheSize                    = 251658240                              {pd product} {ergonomic}
     bool SegmentedCodeCache                       = true                                      {product} {ergonomic}
   size_t SoftMaxHeapSize                          = 17179869184                            {manageable} {ergonomic}
     bool UseCompressedClassPointers               = true                           {product lp64_product} {ergonomic}
     bool UseCompressedOops                        = true                           {product lp64_product} {ergonomic}
     bool UseG1GC                                  = true                                      {product} {ergonomic}
     bool UseNUMA                                  = false                                     {product} {ergonomic}
     bool UseNUMAInterleaving                      = false                                     {product} {ergonomic}

Logging:
Log output configuration:
 #0: stdout all=warning uptime,level,tags
 #1: stderr all=off uptime,level,tags

Environment Variables:
JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-16.jdk/Contents/Home
PATH=/Library/Java/JavaVirtualMachines/jdk-16.jdk/Contents/Home/bin:/Library/Frameworks/Python.framework/Versions/Current/bin:/opt/mx:/opt/gradle-2.14.1/bin:/opt/vert.x-3.2.0-full/bin:/Applications/eclipse-luna-fenix/connectiq/connectiq-sdk-mac-1.1.3/bin:/opt/bff:/opt/spring/spring-roo-1.1.0.M3/bin:/opt/jad:/opt/gwt-mac-1.5.2:/opt/scala-2.10.3/bin:/opt/rar:/Applications/SWI-Prolog.app/Contents/MacOS:/opt/jtreg/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/000/VMwareFusion.app/Contents/Public
LD_LIBRARY_PATH=/opt/hsdis
SHELL=/bin/bash
LC_CTYPE=UTF-8

Signal Handlers:
SIGSEGV: [libjvm.dylib+0xa7db10], sa_mask[0]=11100110000111110111111111111111, sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO
SIGBUS: [libjvm.dylib+0xa7db10], sa_mask[0]=11100110000111110111111111111111, sa_flags=SA_RESTART|SA_SIGINFO
SIGFPE: [libjvm.dylib+0xa7db10], sa_mask[0]=11100110000111110111111111111111, sa_flags=SA_RESTART|SA_SIGINFO
SIGPIPE: [libjvm.dylib+0x947610], sa_mask[0]=11100110000111110111111111111111, sa_flags=SA_RESTART|SA_SIGINFO
SIGXFSZ: [libjvm.dylib+0x947610], sa_mask[0]=11100110000111110111111111111111, sa_flags=SA_RESTART|SA_SIGINFO
SIGILL: [libjvm.dylib+0xa7db10], sa_mask[0]=11100110000111110111111111111111, sa_flags=SA_RESTART|SA_SIGINFO
SIGUSR2: [libjvm.dylib+0x9480c0], sa_mask[0]=00000000000000000000000000000000, sa_flags=SA_RESTART|SA_SIGINFO
SIGHUP: [libjvm.dylib+0x946680], sa_mask[0]=11100110000111110111111111111111, sa_flags=SA_RESTART|SA_SIGINFO
SIGINT: [libjvm.dylib+0x946680], sa_mask[0]=11100110000111110111111111111111, sa_flags=SA_RESTART|SA_SIGINFO
SIGTERM: [libjvm.dylib+0x946680], sa_mask[0]=11100110000111110111111111111111, sa_flags=SA_RESTART|SA_SIGINFO
SIGQUIT: [libjvm.dylib+0x946680], sa_mask[0]=11100110000111110111111111111111, sa_flags=SA_RESTART|SA_SIGINFO
SIGTRAP: [libjvm.dylib+0xa7db10], sa_mask[0]=11100110000111110111111111111111, sa_flags=SA_RESTART|SA_SIGINFO


---------------  S Y S T E M  ---------------

OS:uname: Darwin 19.6.0 Darwin Kernel Version 19.6.0: Tue Jan 12 22:13:05 PST 2021; root:xnu-6153.141.16~1/RELEASE_X86_64 x86_64
OS uptime: 0 days 3:47 hours
rlimit (soft/hard): STACK 8192k/65532k , CORE 0k/infinity , NPROC 11136/16704 , NOFILE 10240/infinity , AS infinity/infinity , CPU infinity/infinity , DATA infinity/infinity , FSIZE infinity/infinity , MEMLOCK infinity/infinity , RSS infinity/infinity
load average: 2.26 2.08 2.28

CPU: total 16 (initial active 16) (8 cores per cpu, 2 threads per core) family 6 model 158 stepping 13 microcode 0xde, cx8, cmov, fxsr, ht, mmx, 3dnowpref, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, lzcnt, tsc, tscinvbit, avx, avx2, aes, erms, clmul, bmi1, bmi2, adx, fma, vzeroupper, clflush, clflushopt

Memory: 4k page, physical 67108864k(1936044k free), swap 0k(0k free)

vm_info: OpenJDK 64-Bit Server VM (16+36-2231) for bsd-amd64 JRE (16+36-2231), built on Feb  8 2021 11:37:22 by ""mach5one"" with clang 4.2.1 Compatible Apple LLVM 11.0.0 (clang-1100.0.33.17)

END.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile the attached file innerstatic/CrashTheJVM.java with Java 16 or Java 17 EA. This will produce 7 different class files:

innerstatic/CrashTheJVM$1.class
innerstatic/CrashTheJVM$1LocalInnerClass.class
innerstatic/CrashTheJVM$1LocalNestedClass.class
innerstatic/CrashTheJVM$2.class
innerstatic/CrashTheJVM$InnerClass.class
innerstatic/CrashTheJVM$NestedClass.class
innerstatic/CrashTheJVM.class

Each of these class files have a main method, which means we should be able to use them as our main entry point into the JVM. It works for the main class and for the inner and nested class, but not for the local classes nor anonymous types.

This works:

java innerstatic/CrashTheJVM
java innerstatic/CrashTheJVM\$InnerClass
java innerstatic/CrashTheJVM\$NestedClass

This crashes the JVM on OS X, both for Java 16 and 17:

java innerstatic/CrashTheJVM\$1 # anonymous nested class
java innerstatic/CrashTheJVM\$1LocalInnerClass # local inner class
java innerstatic/CrashTheJVM\$1LocalNestedClass # local nested class
java innerstatic/CrashTheJVM\$2 # anonymous inner class

This happens on all GCs, not just G1. We tried Serial, Parallel, Z, G1 and Epsilon.

ACTUAL -
The first three classes start fine, but the last four crash the JVM:

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000000104578804, pid=18370, tid=8707
#
# JRE version: OpenJDK Runtime Environment (16.0+36) (build 16+36-2231)


---------- BEGIN SOURCE ----------
package innerstatic;

public class CrashTheJVM {
  public static void main(String... args) {
    System.out.println(""Fine 1: from the outer class"");


    new Object() {
      public static void main(String... args) {
        System.out.println(""Crash 1: from anonymous nested class"");
      }
    };
    class LocalNestedClass {
      public static void main(String... args) {
        System.out.println(""Crash 2: from local nested class"");
      }
    }
  }

  public void fromMethod() {
    new Object() {
      public static void main(String... args) {
        System.out.println(""Crash 3: from anonymous inner class"");
      }
    };
    class LocalInnerClass {
      public static void main(String... args) {
        System.out.println(""Crash 4: from local inner class"");
      }
    }
  }

  public class InnerClass {
    public static void main(String... args) {
      System.out.println(""Fine 2: from inner class"");
    }
  }

  public class NestedClass {
    public static void main(String... args) {
      System.out.println(""Fine 3: from nested class"");
    }
  }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Don't do crazy things like declare a main () method in an anonymous or local nested class ;-)

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2rktv:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5d8045fc,,,,,,,Verified,,"2021-02-15 21:01;fmatte;Issue is reproducible on latest version 17 ea b09

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x000000010de03784, pid=45349, tid=8707
#
# JRE version: Java(TM) SE Runtime Environment (17.0+9) (build 17-ea+9-LTS-653)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17-ea+9-LTS-653, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Problematic frame:
# V  [libjvm.dylib+0x3784]  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ull, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ull>::oop_access_barrier(void*)+0x4
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  T H R E A D  ---------------

Current thread (0x00007ff07b001000):  JavaThread ""main"" [_thread_in_vm, id=8707, stack(0x000000010d49b000,0x000000010d59b000)]

Stack: [0x000000010d49b000,0x000000010d59b000],  sp=0x000000010d59ad30,  free space=1023k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x3784]  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ull, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ull>::oop_access_barrier(void*)+0x4
V  [libjvm.dylib+0x564143]  jni_GetStringUTFChars+0xc3
C  [libjli.dylib+0x7906]  PostJVMInit+0xa6
C  [libjli.dylib+0x4eaa]  JavaMain+0xb9a
C  [libjli.dylib+0x7589]  ThreadJavaMain+0x9
C  [libsystem_pthread.dylib+0x3661]  _pthread_body+0x154
C  [libsystem_pthread.dylib+0x350d]  _pthread_body+0x0
C  [libsystem_pthread.dylib+0x2bf9]  thread_start+0xd
;;;","2021-02-15 23:50;fmatte;With Fast debug build
==
fmatte$ ./jdk-17/fastdebug/bin/java CrashTheJVM\$1       
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/jniHandles.inline.hpp:91
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/0f76e7b4-d512-4e9f-a839-a1d961774dea-S31361/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/acc2c6c5-533c-4017-8445-f1048e561bcd/runs/0c43b296-dd70-487d-8db0-5da4337bd737/workspace/open/src/hotspot/share/runtime/jniHandles.inline.hpp:91), pid=58601, tid=7939
#  assert(handle != __null) failed: JNI handle should not be null
#
# JRE version: Java(TM) SE Runtime Environment (17.0+9) (fastdebug build 17-ea+9-LTS-653)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+9-LTS-653, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /private/tmp/fmatte/hs_err_pid58601.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
==;;;","2021-02-16 11:38;mseledtsov;ILW = HMM = P2;;;","2021-02-16 16:26;dholmes;This looks like a launcher bug not a VM bug.;;;","2021-02-16 16:40;dholmes;I could not reproduce this on Linux, so seems macOS specific.;;;","2021-02-16 16:52;dholmes;This is a launcher bug on macOS. PostJVMInit calls SetMainClassForAWT which tries to use the canonical name of the application main class, but these nested classes do not have a canonical name. Hence they pass a null reference to GetStringUTFChars, which crashes.

static void
SetMainClassForAWT(JNIEnv *env, jclass mainClass) {
    jclass classClass = NULL;
    NULL_CHECK(classClass = FindBootStrapClass(env, ""java/lang/Class""));

    jmethodID getCanonicalNameMID = NULL;
    NULL_CHECK(getCanonicalNameMID = (*env)->GetMethodID(env, classClass, ""getCanonicalName"", ""()Ljava/lang/String;""));

    jstring mainClassString = (*env)->CallObjectMethod(env, mainClass, getCanonicalNameMID);
    if ((*env)->ExceptionCheck(env)) {
        /*
         * Clears all errors caused by getCanonicalName() on the mainclass and
         * leaves the JAVA_MAIN_CLASS__<pid> empty.
         */
        (*env)->ExceptionClear(env);
        return;
    }

    const char *mainClassName = NULL;
    NULL_CHECK(mainClassName = (*env)->GetStringUTFChars(env, mainClassString, NULL));
;;;","2021-03-22 09:00;roboduke;Changeset: b2df5137
Author:    Henry Jen <henryjen@openjdk.org>
Date:      2021-03-22 15:59:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b2df5137
;;;","2021-08-09 14:05;henryjen;The test passes.;;;",,,,,,,,,,,,,,,,,,,,
[lworld] Add support for PrimitiveObject interface,JDK-8261782,5042094,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-02-15 20:55,2021-02-21 22:51,2023-10-01 09:58,2021-02-21 22:44,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,,,,,,,,,,"From https://openjdk.java.net/jeps/8251554:

The PrimitiveObject and IdentityObject interfaces
There are two new interfaces introduced as essential preview APIs:

java.lang.PrimitiveObject
java.lang.IdentityObject
All primitive classes implicitly implement PrimitiveObject. All identity classes (including all preexisting concrete classes in the Java ecosystem) implicitly implement IdentityObject. Array types are also subtypes of IdentityObject.

These interfaces help to distinguish between identity objects and primitive objects in three ways:

An instanceof IdentityObject or instanceof PrimitiveObject test can be used to determine whether an object has identity (and similarly for reflection on the Class).

A variable of type IdentityObject or PrimitiveObject can hold an arbitrary object with or without identity, respectively.

An extends IdentityObject or extends PrimitiveObject type parameter bound can be used to require type arguments that guarantee values with or without identity, respectively.

An interface can explicitly extend either IdentityObject or PrimitiveObject if the author determines that all implementing objects are expected to have or not have identity. It is an error if a class ends up implementing both interfaces (implicitly, explicitly, or by inheritance). By default, an interface extends neither interface and can be implemented by both kinds of concrete classes.

An abstract class can similarly be declared to implement either IdentityObject or PrimitiveObject; or, if it declares a field, an instance initializer, a non-empty constructor, or a synchronized method, it implicitly implements IdentityObject. Otherwise, it extends neither interface and can be extended by both kinds of concrete classes.

The class Object behaves like a simple abstract class: it implements neither IdentityObject nor PrimitiveObject. Calls to new Object() are re-interpreted as instance creation of a new, empty identity subclass of Object (name TBD).

And


Compilation and run time
Primitive classes are compiled to class files, with special treatment deeply integrated into the Java Virtual Machine.

class file representation & interpretation
A primitive class is declared in a class file using the ACC_PRIMITIVE modifier (0x0100). (Encoding of modifiers indicating a reference-favoring or validation-enforcing class is TBD.) At class load time, the class is considered to implement the interface PrimitiveObject; an error occurs if a primitive class is not final, has a non-final instance field, or implements—directly or indirectly—IdentityObject. At preparation time, an error occurs if a primitive class has a circularity in its instance field types.

An abstract class that allows primitive subclasses declares this capability in its class file (details TBD). At class load time, an error occurs if the class is not abstract, declares an instance field, declares a synchronized method, or implements—directly or indirectly—IdentityObject.

At class load time, a class (not an interface) is considered to implement the interface IdentityObject if it is not primitive and does not explicitly allow primitive subclasses. Every array type is also considered to implement IdentityObject. It is a load time error if any class or interface implements or extends—directly or indirectly—both PrimitiveObject and IdentityObject.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262104,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rl23:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update JDK documentation links in Standard Algorithm Names page,JDK-8261778,5042090,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mullan,rgallard,rgallard,2021-02-15 19:50,2021-03-17 21:21,2023-10-01 09:58,2021-03-10 11:11,17,,,,,,,,17,security-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,"Could you changes these links in the Standard Algorithm Names page:

1.
[JDK Security Providers](https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-FE2D2E28-C991-4EF9-9DBE-2A4982726313)
=>
[JDK Providers Documentation](https://docs.oracle.com/pls/topic/lookup?ctx=javase@@VERSION_SPECIFICATION@@&id=GUID-FE2D2E28-C991-4EF9-9DBE-2A4982726313)

Note that this link appears twice. Please also change the name of the link.

2.
[Policy File](https://docs.oracle.com/en/java/javase/11/security/permissions-jdk1.html#GUID-789089CA-8557-4017-B8B0-6899AD3BA18D)
=>
[Default Policy Implementation and Policy File Syntax](https://docs.oracle.com/pls/topic/lookup?ctx=javase@@VERSION_SPECIFICATION@@&id=GUID-789089CA-8557-4017-B8B0-6899AD3BA18D)

Please also change the name of the link.

3.
[Default Policy File Locations](https://docs.oracle.com/en/java/javase/11/security/permissions-jdk1.html#GUID-BFF84712-05CF-4C1E-926F-411FDF83AE32)
=>
[Default Policy File Locations](https://docs.oracle.com/pls/topic/lookup?ctx=javase@@VERSION_SPECIFICATION@@&id=GUID-BFF84712-05CF-4C1E-926F-411FDF83AE32)

According to Jonathan Gibbons, the build scripts automatically convert @@VERSION_SPECIFICATION@@ to the latest release number. You could test these links out by substituting @@VERSION_SPECIFICATION@@ with any published version of the JDK docs release 9 or later. For example:

https://docs.oracle.com/pls/topic/lookup?ctx=javase15&id=GUID-FE2D2E28-C991-4EF9-9DBE-2A4982726313

goes to the JDK 15 version of the page.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rl17:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[8u] hotspot needs to recognise cl.exe 19.16 to build with VS2017,JDK-8261766,5042072,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dcherepanov,dcherepanov,dcherepanov,2021-02-15 09:28,2021-02-23 07:48,2023-10-01 09:58,2021-02-17 01:53,openjdk8u,,,,,,,,openjdk8u292,infrastructure,,0,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,,,,,,,,"Similar to https://bugs.openjdk.java.net/browse/JDK-8209359

Need to update the build scripts for 8u to recognise values for MS_VER ""1914"", ""1915"" and ""1916"".

This fixes building 8u with VS 2017 version 15.9 (cl.exe 19.16).

Attempt to build current 8u repo with VS 2017 15.9 fails with:

> adlc.exe.manifest : general error c1010070: Failed to load and parse the manifest. The system cannot find the file specified.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rkx7:",9223372036854775807,b04,,,,,,,,,,,,"2021-02-15 09:55;dcherepanov;Review request: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-February/013430.html;;;","2021-02-16 02:48;dcherepanov;Approval: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-February/013432.html;;;","2021-02-17 01:53;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/rev/d644ac8583fd
User:  dcherepanov
Date:  2021-02-17 09:49:57 +0000
;;;","2021-02-23 07:48;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/rev/d644ac8583fd
User:  andrew
Date:  2021-02-23 15:44:09 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] gc/g1/TestGCLogMessages.java fails if ergonomics detect too small InitialHeapSize,JDK-8261758,5042064,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cgo,cgo,cgo,2021-02-15 07:07,2022-10-11 03:55,2023-10-01 09:58,2021-02-17 02:41,17,,,,,,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok,jdk16u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,,,"One part of the test case gc/g1/TestGCLogMessages.java fails, if the ergonomics don't detect the InitialHeapSize correctly. The test fails with:

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: '\[debug.*Evacuation Failure' missing from stdout/stderr

if -Xms < -Xmx. This is the case, if the test machine has less than 2G of memory.

The failure can be triggered on a linux based development machine, using:

$ systemd-run --user --scope -p MemoryMax=1900M /usr/bin/make TEST=""test/hotspot/jtreg/gc/g1/TestGCLogMessages.java"" test",,,,,,,,,,JDK-8262879,JDK-8263286,JDK-8295128,JDK-8289226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rkvf:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-02-17 02:41;roboduke;Changeset: c7885eb1
Author:    Christoph Göttschkes <cgo@openjdk.org>
Committer: Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-02-17 10:40:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c7885eb1
;;;","2021-02-19 00:15;cgo;Fix request(16u):
Patch applies cleanly and fixes the test in 16u. Risk should be minimal, as only a test case is changed. Without this backport, we are not able to run the hotspot tier1 JTreg test suite for aarch32 on memory constrained devices.;;;","2022-10-10 04:55;goetz;Fix request [11u]

I backport this for parity with 11.0.1y-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2022-10-10 05:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1428
Date: 2022-10-10 11:57:07 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
Test java/lang/System/OsVersionTest.java still failing on BigSur patch versions after JDK-8253702,JDK-8261753,5042056,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2021-02-15 05:19,2021-03-25 08:54,2023-10-01 09:58,2021-02-16 04:58,16,17,,,,,,,17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok,jdk16u-fix-yes,,,,,,,,,,,,,,,,,,"After a fix for JDK-8253702 was submitted, the test java/lang/System/OsVersionTest.java still fails on BigSur versions that have a patch version (> 1), e.g. on macOS Big Sur 11.2.1.

java.lang.Error: 11.2 != 11.2.1",,,,,,,,,,JDK-8262048,JDK-8262248,JDK-8262024,JDK-8264186,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262018,,,,,,JDK-8253702,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rktn:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-02-16 04:58;roboduke;Changeset: 8ba390d1
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2021-02-16 12:57:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8ba390d1
;;;","2021-02-16 14:19;clanger;Fix request (16u):
JDK16 is affected as well when building with Xcode < 12. Patch applies cleanly.;;;","2021-02-17 11:00;clanger;Fix request (11u):
Same reasoning as for 16u. However, I had to resolve the import statements in the test. RFR is here: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-February/005028.html;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Multiple GC test are missing memory requirements,JDK-8261752,5042054,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cgo,cgo,cgo,2021-02-15 05:08,2021-05-19 02:19,2023-10-01 09:58,2021-02-17 02:42,17,,,,,,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,,,,"The following GC tests are allocating a huge amount of memory without specifying a memory requirement:

 * test/hotspot/jtreg/gc/epsilon/TestByteArrays.java
 * test/hotspot/jtreg/gc/epsilon/TestElasticTLAB.java
 * test/hotspot/jtreg/gc/epsilon/TestElasticTLABDecay.java
 * test/hotspot/jtreg/gc/epsilon/TestMemoryPools.java
 * test/hotspot/jtreg/gc/g1/TestHumongousRemsetsMatch.java
 * test/hotspot/jtreg/gc/g1/ihop/TestIHOPStatic.java
 * test/hotspot/jtreg/gc/logging/TestMetaSpaceLog.java

Those tests fail on memory constrained devices.",,,,,,,,,,JDK-8263007,JDK-8263296,JDK-8263458,JDK-8267380,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8211123,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rkt7:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-02-17 02:42;roboduke;Changeset: 2e18b52a
Author:    Christoph Göttschkes <cgo@openjdk.org>
Committer: Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-02-17 10:41:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2e18b52a
;;;","2021-02-19 01:12;cgo;Fix request(16u):
Patch applies cleanly and fixes the tests in 16u. Risk should be minimal, as only requires tags are added to tests. Without this backport, we are not able to run the hotspot tier1 JTreg test suite for aarch32 on memory constrained devices.;;;","2021-03-10 01:42;cgo;Fix Request(11u)

Backport fixes multiple tests for execution on memory constrained devices.
Patch doesn't apply cleanly, because JDK-8249000 and JDK-8244614 touched a lot of tests and have not been backported yet.
Backport excludes the test ""TestMetaSpaceLog.java"", introduced by JDK-8211123, which has not been backported yet.
Risk is low, since changes only add additional @requires tags to the tests.

Review: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-March/005259.html
Webrev: https://cr.openjdk.java.net/~cgo/8261752/backport-11u.00/;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Fix lingering references to inline/value types ,JDK-8261751,5042052,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-02-15 04:56,2021-02-15 06:07,2023-10-01 09:58,2021-02-15 06:07,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,,,,,,,,,,There are still various references to inline/values types that need to be cleaned up adopting the new nomenclature of primitive class types.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rksr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove internal class sun.net.www.MimeLauncher,JDK-8261750,5042051,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jboes,jboes,jboes,2021-02-15 04:28,2021-03-01 16:31,2023-10-01 09:58,2021-02-17 02:07,,,,,,,,,17,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,,"MimeLauncher is a package-private class in the exported sun.net.www package in java.base. The class is no longer used in the package. 

The sun.net.www package is exported to java.net.http and jdk.jartool. The only public access point to a MimeLauncher instance is MimeEntry::launch, which is not called anywhere in those two packages. MimeLauncher and MimeEntry::launch can thus be considered for removal.

Another related public class, sun.net.www. ApplicationLaunchException, is no longer used anywhere, and can also be considered for removal.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rksj:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-02-17 02:07;roboduke;Changeset: 03b586b3
Author:    Julia Boes <jboes@openjdk.org>
Date:      2021-02-17 10:07:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/03b586b3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Some jtreg tests are failing with invalid setRectClip,JDK-8261734,5042034,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,avu,jdv,jdv,2021-02-15 01:42,2021-02-17 08:41,2023-10-01 09:58,2021-02-16 16:05,internal,,,,,,,,internal,client-libs,,0,critical,lanai,,,,,,,,,,,,,,,,,,,,,"When Metal API Validation is enabled 2 jtreg tests are failing because of invalid setRectClip data.

Failed jtreg tests :
java/awt/Focus/Cause/FocusCauseTest.java
java/awt/Mixing/AWT_Mixing/JScrollPaneOverlapping.java

jtreg j2d trace logs :
[V] MTLRenderQueue_flushBuffer: opcode=51, rem=160
[I] MTLContext.setClipRect: 7,25 - 72,22
[E] MTLClip.setClipRect: invalid rect: x1=7 y1=25 x2=72 y2=22
[I] MTLClip.setClipRect: x=7 y=25 w=65 h=-3
[V] MTLRenderQueue_flushBuffer: opcode=101, rem=140
[I] MTLContext.setColorPaint: pixel=ff000000 [r=0 g=0 b=0 a=255]
[V] MTLRenderQueue_flushBuffer: opcode=20, rem=132
[I] MTLRenderer_FillRect
[I] MTLRenderer_FillRect (x=7 y=25 w=1 h=16), dst tex=0x7fc06895cdb0
----------System.err:(21/1686)----------
2021-02-15 14:51:33.484 java[49798:1529850] Metal API Validation Enabled
2021-02-15 14:51:33.774 system_profiler[49800:1529939] Metal API Validation Enabled
2021-02-15 14:51:34.923 java[49798:1529885] name is : .SFNS-Regular
2021-02-15 14:51:34.923 java[49798:1529885] family is : .AppleSystemUIFont
2021-02-15 14:51:34.924 java[49798:1529885] name is : .SFNS-Bold
2021-02-15 14:51:34.924 java[49798:1529885] family is : .AppleSystemUIFont
2021-02-15 14:51:35.329 java[49798:1529885] nsFont-name is : .AppleSystemUIFont
2021-02-15 14:51:35.329 java[49798:1529885] nsFont-family is : .AppleSystemUIFont
2021-02-15 14:51:35.329 java[49798:1529885] nsFont-desc-name is : .SFNS-Regular
2021-02-15 14:51:35.329 java[49798:1529885] nsFont-name is : .AppleSystemUIFont
2021-02-15 14:51:35.329 java[49798:1529885] nsFont-family is : .AppleSystemUIFontBold
2021-02-15 14:51:35.330 java[49798:1529885] nsFont-desc-name is : .SFNS-Bold
2021-02-15 14:51:35.338 java[49798:1529885] nsFont-name is : .AppleSystemUIFont
2021-02-15 14:51:35.338 java[49798:1529885] nsFont-family is : .AppleSystemUIFont
2021-02-15 14:51:35.338 java[49798:1529885] nsFont-desc-name is : .SFNS-Regular
2021-02-15 14:51:35.352 java[49798:1529885] nsFont-name is : .AppleSystemUIFont
2021-02-15 14:51:35.352 java[49798:1529885] nsFont-family is : .AppleSystemUIFontBold
2021-02-15 14:51:35.352 java[49798:1529885] nsFont-desc-name is : .SFNS-Bold
2021-02-15 14:51:35.380 java[49798:1529850] became key: 0  (null)
2021-02-15 14:51:35.386 java[49798:1529850] became main: 1  (null) 1
-[MTLDebugRenderCommandEncoder setScissorRect:]:2703: failed assertion `(rect.y(25) + rect.height(0))(25) must be <= render pass height(22)'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261717,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i2rkor:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-02-16 06:55;aghaisas;Just for information - 

The environment variable needs to be set using -e option of jtreg :
~/Downloads/jtreg/bin/jtreg -jdk:./lanai/build/macosx-x86_64-server-fastdebug/images/jdk -e:METAL_DEVICE_WRAPPER_TYPE=1,J2D_TRACE_LEVEL=5 -vmoption:-Dsun.java2d.metal=True test/jdk/java/awt/Focus/Cause/FocusCauseTest.java;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
panama ea builds are missing jextract launcher,JDK-8261733,5042033,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,sundar,sundar,2021-02-15 01:19,2021-02-22 04:35,2023-10-01 09:58,2021-02-22 04:35,repo-panama,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"panama ea builds are missing jextract launcher on all three platforms (Mac OS, Linux and Windows). It seems like libclang.so/.dylib/.dll is missing as well. Most likely build from wrong branch?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2rkoj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-02-15 03:16;mcimadamore;There was an issue in setting up the EA builds - the wrong branch was used, and a vanilla Java 17 build was produced. We're trying to rectify the problem.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
C2 compilation fails with assert(store->find_edge(load) != -1) failed: missing precedence edge,JDK-8261730,5042028,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rcastanedalo,thartmann,thartmann,2021-02-14 23:56,2021-04-13 05:32,2023-10-01 09:58,2021-03-03 23:49,11,14,15,16,17,8,,,17,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,"FAILURE:

The attached program triggers the following assertion failure within C2:

$ java -Xcomp -XX:CompileOnly=Test::foo Test.java

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (../../src/hotspot/share/opto/gcm.cpp:773), pid=312231, tid=312244
#  assert(store->find_edge(load) != -1) failed: missing precedence edge
 
ANALYSIS:

The assertion failure falsely reports a potential anti-dependence violation by the implicit null check transformation (PhaseCFG::implicit_null_check()) that runs opportunistically between global and local scheduling. This transformation tries to reuse memory operations to perform null checks, hoisting the former into null-check blocks if necessary.

When hoisting stores, implicit_null_check() preserves anti-dependences between the hoisted store and loads in the corresponding null-check and not-null blocks, but disregards possible anti-dependences with loads in the null block. This is safe, as the null block is only executed when the hoisted store has ""failed"" (attempted to write to the null address). The verification code in PhaseCFG::verify() is not aware of this fact and reports a false anti-dependence violation (missing precedence edge from the load in the null block to the store hoisted to the null-check block).

The problem is illustrated in the attached CFGs. After global scheduling (before-implicit-null-check.pdf), implicit_null_check() detects a store (17 storeImmIO) in B6 that could potentially perform the null check done by (5 testN_reg) in B4. After checking that neither B4 or B6 contain anti-dependent loads, the transformation replaces (5 testN_reg) with (17 storeImmIO) by hoisting the latter into B4 and adding an additional (46 NullCheck) pseudo-operation (after-implicit-null-check.pdf). Finally, after local scheduling, PhaseCFG::verify() falsely reports that (17 storeImmIO) can overwrite the memory value read by the load operation (34 subI_rReg_mem) in the null block B5, and fails. This overwrite cannot happen, because executing B5 implies (17 storeImmIO)'s failure to store any value.

WORKAROUND:

Ignore the assertion failure, e.g. using the JVM option -XX:SuppressErrorAt=/gcm.cpp:773

TENTATIVE SOLUTION:

Relax the assertion code in PhaseCFG::verify() by considering the case where the store implements a null check and the load is placed in the corresponding null block.

ORIGINAL REPORT:

class a {
  int b;
  long[] c;
  double q;
}
class MainClass {
  a d = new a();
  long[] e(a[] f, int g) {
    for (int h = 0; h < 7;) {
      for (int i = 0; i < 4; ++i)
        ;
      d.b = -f[0].b;
      for (int j = 0;;)
        d.b = j;
    }
    return f[0].c;
  }
  double k(int l, int m) {
    a[] n = {new a()};
    e(n, l);
    return n[0].q;
  }
  public static void main(String[] args) {
    MainClass o = new MainClass();
    for (int p = 0;;)
      o.k(p, p);
  }
}

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (workspace/open/src/hotspot/share/opto/gcm.cpp:773), pid=4056702, tid=4056716
#  assert(store->find_edge(load) != -1) failed: missing precedence edge


Current CompileTask:
C2:    731    7       4       MainClass::e (59 bytes)

Stack: [0x00007f0b302a2000,0x00007f0b303a3000],  sp=0x00007f0b3039e000,  free space=1008k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd0466d]  PhaseCFG::insert_anti_dependences(Block*, Node*, bool)+0x177d
V  [libjvm.so+0x6abc34]  PhaseCFG::verify() const+0x664
V  [libjvm.so+0xa03164]  Compile::Code_Gen()+0x2c4
V  [libjvm.so+0xa0df8c]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x19dc
V  [libjvm.so+0x83a09a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa1dd81]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xea1
V  [libjvm.so+0xa1ea08]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x1840926]  JavaThread::thread_main_inner()+0x256
V  [libjvm.so+0x1846da0]  Thread::call_run()+0x100
V  [libjvm.so+0x1532f56]  thread_native_entry(Thread*)+0x116
",,,,,,,,,,JDK-8264349,JDK-8263740,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265132,,,,,,,,,,,,"2021-02-24 01:33;rcastanedalo;Test.java;https://bugs.openjdk.org/secure/attachment/93340/Test.java","2021-02-23 04:25;rcastanedalo;after-implicit-null-check.pdf;https://bugs.openjdk.org/secure/attachment/93325/after-implicit-null-check.pdf","2021-02-23 04:25;rcastanedalo;before-implicit-null-check.pdf;https://bugs.openjdk.org/secure/attachment/93324/before-implicit-null-check.pdf","2021-02-15 00:02;thartmann;hs_err_pid4056702.log;https://bugs.openjdk.org/secure/attachment/93200/hs_err_pid4056702.log","2021-02-15 00:04;thartmann;replay_pid4056702.log;https://bugs.openjdk.org/secure/attachment/93201/replay_pid4056702.log",,,,,,,,,,,,,,,,,,,,,,"0|i2rknf:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-02-15 00:05;thartmann;ILW = Assert during C2 compilation, reproducible with generated test, no known workaround but disable compilation of affected method = HMM = P2;;;","2021-02-15 00:38;thartmann;Does not reproduce with JDK 17 b02 and earlier. With JDK 17 b03-b05, JDK-8259747 is triggered. It does not reproduce with b06-b07 and triggers again with b08.;;;","2021-02-15 00:39;thartmann;I've narrowed it down to JDK-8258894. Roberto, could you please have a look?;;;","2021-02-22 07:19;rcastanedalo;The issue is independent of JDK-8258894: the attached test case (reduced from the one reported originally) yields the same assertion failure on older JDK versions (all the way to JDK 8).;;;","2021-02-23 00:02;thartmann;Okay, thanks for the update. I'll unlink JDK-8258894 then.;;;","2021-02-25 02:00;rcastanedalo;ILW = Assert during C2 compilation, reproducible with generated test, ignore assert failure = HML = P2;;;","2021-03-03 23:49;roboduke;Changeset: 4cfecceb
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2021-03-04 07:48:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4cfecceb
;;;","2021-03-08 23:41;thartmann;Lowering priority to P3 because this issue does not affect product code (assert is too strong).;;;","2021-03-26 04:24;mdoerr;Fix Request (11u)
Should get backported for parity with 11.0.12-oracle. Applies cleanly except one Copyright year change.;;;",,,,,,,,,,,,,,,,,,,
Lanai: Crash in MTLClip when Metal API Validation enabled,JDK-8261712,5041995,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,avu,avu,avu,2021-02-14 00:50,2021-02-14 09:07,2023-10-01 09:58,2021-02-14 07:50,internal,,,,,,,,,client-libs,,0,code-review,lanai,Lanai,,,,,,,,,,,,,,,,,,,,"Running J2Ddemo with METAL_DEVICE_WRAPPER_TYPE=1 triggers assertion in the validation code.

-[MTLDebugRenderCommandEncoder validateFramebufferWithRenderPipelineState:]:1288: failed assertion `Framebuffer With Render Pipeline State Validation
For stencil attachment, the render pipeline's pixelFormat (MTLPixelFormatInvalid) does not match the framebuffer's pixelFormat (MTLPixelFormatStencil8).
'

Here is the stack of the failure:
__pthread_kill 0x00007fff20310462
pthread_kill 0x00007fff2033e610
abort 0x00007fff20291720
__assert_rtn 0x00007fff202909d6
MTLReportFailure.cold.1 0x00007fff283a6fe4
MTLReportFailure 0x00007fff283951b2
_MTLMessageContextEnd 0x00007fff2838ef6a
-[MTLDebugRenderCommandEncoder validateFramebufferWithRenderPipelineState:] 0x00007fff20afb2b4
-[MTLDebugRenderCommandEncoder setRenderPipelineState:] 0x00007fff20afb4c6
-[MTLClip setMaskGenerationPipelineState:destWidth:destHeight:pipelineStateStorage:] MTLClip.m:249
-[EncoderStates updateEncoder:context:renderOptions:forceUpdate:] EncoderManager.m:141
-[EncoderManager getEncoder:renderOptions:] EncoderManager.m:417
-[EncoderManager getRenderEncoder:isDstOpaque:] EncoderManager.m:286
MTLRenderer_FillSpans MTLRenderer.m:404
Java_sun_java2d_metal_MTLRenderQueue_flushBuffer MTLRenderQueue.m:0
<unknown> 0x000000011da3aa39
<unknown> 0x0000000116b53124
<unknown> 0x0000000115d1fa4d
<unknown> 0x0000000115d16d4a
JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*) javaCalls.cpp:426
JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*) javaCalls.cpp:340
JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*) javaCalls.cpp:195
JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Thread*) javaCalls.cpp:201
thread_entry(JavaThread*, Thread*) jvm.cpp:2840
JavaThread::thread_main_inner() thread.cpp:1497
JavaThread::run() thread.cpp:1480
Thread::call_run() thread.cpp:402
thread_native_entry(Thread*) os_bsd.cpp:601
_pthread_start 0x00007fff2033e950
thread_start 0x00007fff2033a47b",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rkg3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-02-14 02:17;avu;Cannot reproduce with the latest source base. Probably it is fixed within JDK-8261704;;;","2021-02-14 05:49;jdv;[~avu] Is root of this issue same as JDK-8261703 ? 
Because even with JDK-8261704 fix i am seeing similar failure after running jtreg tests present in JDK-8261703.;;;","2021-02-14 07:56;avu;Reproduced and fixed;;;","2021-02-14 08:17;avu;> [~avu] Is root of this issue same as JDK-8261703 ?

Probably, yes could rerun the tests with my recent fix.
;;;","2021-02-14 09:07;prr;I am re-running tests. Full results may take about 3 hours. ;;;",,,,,,,,,,,,,,,,,,,,,,,
"Clhsdb ""versioncheck true"" throws NPE every time",JDK-8261711,5041991,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2021-02-13 21:57,2021-03-01 16:29,2023-10-01 09:58,2021-02-16 14:32,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"hsdb> verbose true
hsdb> versioncheck true
Error: java.lang.NullPointerException
java.lang.NullPointerException
	at java.base/java.util.concurrent.ConcurrentHashMap.putVal(ConcurrentHashMap.java:1011)
	at java.base/java.util.concurrent.ConcurrentHashMap.put(ConcurrentHashMap.java:1006)
	at java.base/java.util.Properties.put(Properties.java:1312)
	at java.base/java.util.Properties.setProperty(Properties.java:229)
	at java.base/java.lang.System.setProperty(System.java:915)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor$33.doit(CommandProcessor.java:1195)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2095)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2065)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.run(CommandProcessor.java:1936)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.run(CLHSDB.java:99)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.main(CLHSDB.java:40)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runCLHSDB(SALauncher.java:280)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:483)

                if (t.countTokens() == 0) {
                    out.println(""versioncheck is "" +
                                (System.getProperty(""sun.jvm.hotspot.runtime.VM.disableVersionCheck"") == null));
                } else if (t.countTokens() == 1) {
                    if (Boolean.valueOf(t.nextToken()).booleanValue()) {
                        System.setProperty(""sun.jvm.hotspot.runtime.VM.disableVersionCheck"", null);
                    } else {
                        System.setProperty(""sun.jvm.hotspot.runtime.VM.disableVersionCheck"", ""true"");
                    }
                } else {
                    usage();
                }

If the disableVersionCheck is null,meaning it is not set, then version checking is enabled. However, if disableVersionCheck is currently set true, the proper way to get it back to null is to call System.clearProperty(). Calling setProperty() with a null value will always cause an NPE.

I doubt this code has ever worked. It probably hasn't been noticed since disableVersionCheck defaults to null (so version checking is enabled), and if you want it disabled you use ""versioncheck false"", which will set disableVersionCheck to true. Since there is very little reason to go back to it being enabled, probably this bug was never noticed.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rkf7:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-02-16 14:32;roboduke;Changeset: e7e20d4e
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-02-16 22:32:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e7e20d4e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
SA DSO objects have sizes that are too large,JDK-8261710,5041990,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,cjplummer,cjplummer,2021-02-13 20:32,2021-07-30 12:39,2023-10-01 09:58,2021-03-01 22:57,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"When SA creates a DSO object, which is used to represent a shared object file (.so), it initializes the ""size"" to be the size of the shared object file. This usually results in the size being too big. This can cause SA to get confused about whether or not an address is in the shared object. SA should instead set the DSO's size to the amount of the file that is actually mapped.

See JDK-8261702 for an example of an SA bug this bug caused (but was worked around).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261702,JDK-8263242,JDK-8248875,,,,,,,,,,"2021-02-16 14:20;dcubed;jdk-17-20210216_8261710_linux.zip;https://bugs.openjdk.org/secure/attachment/93217/jdk-17-20210216_8261710_linux.zip",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rkez:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-02-16 14:20;dcubed;[~cjplummer] asked me to test jdk/pull/2563 with serviceability/sa/ClhsdbFindPC.java
on my Ubuntu 16.04 test machine:

$ do_java_test serviceability/sa/ClhsdbFindPC.java 2>&1 | tee -a do_java_test.8261710.log
INFO: GNUMAKE=make
INFO: GNUMAKE version is: GNU Make 4.1

INFO: JTREG options:
INFO:   JOBS=16
INFO:   TEST_MODE=othervm
INFO:   EXTRA_PROBLEM_LISTS=ProblemList-extra.txt
INFO:   VM_OPTIONS=
INFO: test_val=serviceability/sa/ClhsdbFindPC.java
Test Config: linux-x86_64-normal-server-release
    INFO: TIMEOUT_FACTOR=4
    Done testing
    Test Run linux-x86_64-normal-server-release time: 0.55 minutes.

    TEST                                              TOTAL  PASS  FAIL ERROR
    jtreg:open/test/hotspot/jtreg/serviceability/sa/ClhsdbFindPC.java
    >>                                                       4     3     1     0 <<

    1 failure(s) found in log=do_java_test.linux-x86_64-normal-server-release.log

    TEST: serviceability/sa/ClhsdbFindPC.java#id3
    ERROR: Failed to instantiate timeout handler: jdk.test.failurehandler.jtreg.GatherProcessInfoTimeoutHandler: file does not exist


Test Config: linux-x86_64-normal-server-fastdebug
    INFO: TIMEOUT_FACTOR=6
    Done testing
    Test Run linux-x86_64-normal-server-fastdebug time: 0.87 minutes.

    TEST                                              TOTAL  PASS  FAIL ERROR
    jtreg:open/test/hotspot/jtreg/serviceability/sa/ClhsdbFindPC.java
                                                          4     4     0     0

Test Config: linux-x86_64-normal-server-slowdebug
    INFO: TIMEOUT_FACTOR=12
    Done testing
    Test Run linux-x86_64-normal-server-slowdebug time: 2.97 minutes.

    TEST                                              TOTAL  PASS  FAIL ERROR
    jtreg:open/test/hotspot/jtreg/serviceability/sa/ClhsdbFindPC.java
    >>                                                       4     3     1     0 <<

    1 failure(s) found in log=do_java_test.linux-x86_64-normal-server-slowdebug.log

    TEST: serviceability/sa/ClhsdbFindPC.java#id3
    LOG: build/linux-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_serviceability_sa_ClhsdbFindPC_java/serviceability/sa/ClhsdbFindPC_id3.jtr
    Saving build/linux-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_serviceability_sa_ClhsdbFindPC_java/serviceability/sa/ClhsdbFindPC_id3.jtr as /work/shared/bug_hunt/8261844_for_jdk17.git/test_failures.2021-02-16-171036/ClhsdbFindPC_id3.jtr.slowdebug
    Saving /work/shared/bug_hunt/8261844_for_jdk17.git/build/linux-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_serviceability_sa_ClhsdbFindPC_java/serviceability/sa/ClhsdbFindPC_id3/hs_err_pid16470.log as /work/shared/bug_hunt/8261844_for_jdk17.git/test_failures.2021-02-16-171036/hs_err_pid16470.log
    Moving /work/shared/bug_hunt/8261844_for_jdk17.git/build/linux-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_serviceability_sa_ClhsdbFindPC_java/serviceability/sa/ClhsdbFindPC_id3/core to /work/shared/bug_hunt/8261844_for_jdk17.git/test_failures.2021-02-16-171036/core.16470


Total test time: 4.40 minutes.

I've attached the .jtr files for all three configs:

$ unzip -l jdk-17-20210216_8261710_linux.zip
Archive:  jdk-17-20210216_8261710_linux.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    24864  2021-02-16 17:11   build/linux-x86_64-normal-server-fastdebug/test-support/jtreg_open_test_hotspot_jtreg_serviceability_sa_ClhsdbFindPC_java/serviceability/sa/ClhsdbFindPC_id3.jtr
    25431  2021-02-16 17:10   build/linux-x86_64-normal-server-release/test-support/jtreg_open_test_hotspot_jtreg_serviceability_sa_ClhsdbFindPC_java/serviceability/sa/ClhsdbFindPC_id3.jtr
    23800  2021-02-16 17:14   build/linux-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_serviceability_sa_ClhsdbFindPC_java/serviceability/sa/ClhsdbFindPC_id3.jtr
---------                     -------
    74095                     3 files;;;","2021-02-16 14:45;cjplummer;Although not clear from the comment above, and for some reason the first failure above appears to be a timeout, both failures are in fact:

 + findpc 0x00002b77f084d116
Address 0x00002b77f084d116: /lib/x86_64-linux-gnu/libnss_files.so.2 + 0x21b116
...
java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'In interpreter codelet' missing from stdout/stderr 

So this is the same issue, and appears to not have been fixed by 2563. It would also indicate that the fix is still overstating the memory range of the dso.;;;","2021-03-01 22:57;roboduke;Changeset: 3b350ad8
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2021-03-02 06:56:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3b350ad8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Swing test fails Metal API Validation with setVertexBytes error,JDK-8261706,5041984,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jdv,prr,prr,2021-02-13 16:16,2021-02-14 10:41,2023-10-01 09:58,2021-02-14 08:44,internal,,,,,,,,internal,client-libs,,0,code-review,critical,lanai,primitive,sn_87,,,,,,,,,,,,,,,,,,"This error is observed when running javax/swing/border/Test6981576.java
2021-02-13 14:46:22.118 system_profiler[49702:12352927] Metal API Validation Enabled
2021-02-13 14:46:22.380 java[49700:12352868] Metal API Validation Enabled
-[MTLDebugRenderCommandEncoder setVertexBytes:length:atIndex:]:1501: failed assertion `length(8672) must be <= 4096.'
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rkdn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-02-13 18:02;jdv;[V] MTLRenderQueue_flushBuffer: opcode=20, rem=6812
[I] MTLRenderer_FillRect
[I] MTLRenderer_FillRect (x=0 y=0 w=300 h=278), dst tex=0x7f8131a76db0
[V] MTLRenderQueue_flushBuffer: opcode=101, rem=6792
[I] MTLContext.setColorPaint: pixel=ffb8cfe5 [r=184 g=207 b=229 a=255]
[V] MTLRenderQueue_flushBuffer: opcode=14, rem=6784
[I] MTLRenderer_DrawScanlines (scanlineCount=554), dst tex=0x7f8131a76db0
----------System.err:(5/428)----------
2021-02-14 07:29:43.744 java[79486:454618] Metal API Validation Enabled
2021-02-14 07:29:44.293 system_profiler[79488:454711] Metal API Validation Enabled
2021-02-14 07:29:44.744 java[79486:454618] became key: 0 Test6981576 (null)
2021-02-14 07:29:44.748 java[79486:454618] became main: 1 Test6981576 (null) 1
-[MTLDebugRenderCommandEncoder setVertexBytes:length:atIndex:]:1356: failed assertion `length(8864) must be <= 4096.'

Looks like overflow in DrawScanLines setVertexBytes. Need to limit Vertex data per encoder to 4KB.;;;","2021-02-14 08:40;jdv;In MTLRenderer_DrawScanLines we are exceeding 4K limit for setVertexBytes and because of this we are seeing error with Metal API Validation enabled. Implemented logic to clamp vertex data to 4KB.

jtreg test passes with fix and also there are no sanity issues in J2DDemo, SwingSet2 and Font2DTest.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Swing jtreg tests fail Metal API Validation with missing buffer binding,JDK-8261705,5041983,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jdv,prr,prr,2021-02-13 16:14,2021-02-17 09:45,2023-10-01 09:58,2021-02-14 10:51,internal,,,,,,,,internal,client-libs,,0,code-review,critical,lanai,primitive,sn_87,,,,,,,,,,,,,,,,,,"A number of  Swing jtreg tests fail metal API validation with
validateFunctionArguments:3714: failed assertion `Vertex Function(vert_col): missing buffer binding at index 0 for vertexBuffer.0[0].'
./javax/swing/JTextArea/4697612/bug4697612.jtr
./javax/swing/JTable/7055065/bug7055065.jtr
./javax/swing/JTable/6263446/bug6263446.jtr
./javax/swing/JTable/7124218/SelectEditTableCell.jtr
./javax/swing/JTree/6263446/bug6263446.jtr
./javax/swing/JTree/8003400/Test8003400.jtr
./javax/swing/text/CSSBorder/6796710/bug6796710.jtr
./javax/swing/text/GlyphPainter2/6427244/bug6427244.jtr",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261713,JDK-8261716,JDK-8261707,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rkdf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-02-13 17:58;jdv;Ran all the listed jtreg failures and all fail with same error pointing to MTLRenderer_DrawScanlines code.

jtreg logs with trace :
[I] MTLContext.setClipRect: 0,0 - 0,0
[E] MTLClip.setClipRect: invalid rect: x1=0 y1=0 x2=0 y2=0
[I] MTLClip.setClipRect: x=0 y=0 w=0 h=0
[V] MTLRenderQueue_flushBuffer: opcode=101, rem=12800
[I] MTLContext.setColorPaint: pixel=ff000000 [r=0 g=0 b=0 a=255]
[V] MTLRenderQueue_flushBuffer: opcode=14, rem=12792
[I] MTLRenderer_DrawScanlines (scanlineCount=0), dst tex=0x7fd1f62241d0
----------System.err:(21/1660)----------
2021-02-14 07:17:52.216 java[79242:448630] Metal API Validation Enabled
2021-02-14 07:17:52.465 system_profiler[79244:448726] Metal API Validation Enabled
2021-02-14 07:17:53.890 java[79242:448740] name is : .SFNS-Regular
2021-02-14 07:17:53.890 java[79242:448740] family is : .AppleSystemUIFont
2021-02-14 07:17:53.890 java[79242:448740] name is : .SFNS-Bold
2021-02-14 07:17:53.890 java[79242:448740] family is : .AppleSystemUIFont
2021-02-14 07:17:54.316 java[79242:448740] nsFont-name is : .AppleSystemUIFont
2021-02-14 07:17:54.316 java[79242:448740] nsFont-family is : .AppleSystemUIFont
2021-02-14 07:17:54.316 java[79242:448740] nsFont-desc-name is : .SFNS-Regular
2021-02-14 07:17:54.317 java[79242:448740] nsFont-name is : .AppleSystemUIFont
2021-02-14 07:17:54.317 java[79242:448740] nsFont-family is : .AppleSystemUIFontBold
2021-02-14 07:17:54.317 java[79242:448740] nsFont-desc-name is : .SFNS-Bold
2021-02-14 07:17:54.329 java[79242:448740] nsFont-name is : .AppleSystemUIFont
2021-02-14 07:17:54.329 java[79242:448740] nsFont-family is : .AppleSystemUIFont
2021-02-14 07:17:54.329 java[79242:448740] nsFont-desc-name is : .SFNS-Regular
2021-02-14 07:17:54.344 java[79242:448740] nsFont-name is : .AppleSystemUIFont
2021-02-14 07:17:54.344 java[79242:448740] nsFont-family is : .AppleSystemUIFontBold
2021-02-14 07:17:54.344 java[79242:448740] nsFont-desc-name is : .SFNS-Bold
2021-02-14 07:17:54.432 java[79242:448630] became key: 0  (null)
2021-02-14 07:17:54.434 java[79242:448630] became main: 1  (null) 1
validateFunctionArguments:3476: failed assertion `Vertex Function(vert_col): missing buffer binding at index 0 for vertexBuffer.0[0].';;;","2021-02-14 10:39;jdv;As we can see in the log we are hitting DrawScanLine with scanlineCount=0. So we end up calling drawPrimitives without actual vertex data. This is causing error when Metal API Validation is enabled. In OpenGL we have null checks for scanline data as well as count. We need similar check in case of Metal.;;;","2021-02-14 10:43;jdv;Ran all the jtreg failures reported and they pass with null check fix.
Did sanity with J2DDemo, SwingSet2 and Font2DTest, no regressions noticed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
 Many java/awt/ tests fail with Metal API Validation synchronizeTexture error,JDK-8261704,5041981,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jdv,prr,prr,2021-02-13 14:38,2021-02-14 10:40,2023-10-01 09:58,2021-02-13 20:09,internal,,,,,,,,internal,client-libs,,0,code-review,critical,lanai,sn_87,,,,,,,,,,,,,,,,,,,"
With Metal API Validation, the Java 2D macOS Metal pipeline has the
the following error 
021-02-13 12:51:01.491 java[14931:12150485] Metal API Validation Enabled
-[MTLDebugBlitCommandEncoder synchronizeTexture:slice:level:]:1198: failed assertion `synchronizeTexture: only applies when resourceOptions(0x20) & MTLResourceStorageModeMask(0xf0) == MTLResourceStorageModeManaged(0x10).  NOT MTLResourceStorageModePrivate'

 with many java/awt jtreg ests - other tests may fail because of the same but this is a good sampling 
./java/awt/Graphics2D/DrawString/TextRenderingTest.jtr
./java/awt/Graphics2D/FlipDrawImage/FlipDrawImage.jtr
./java/awt/Graphics2D/FillTexturePaint/FillTexturePaint.jtr
./java/awt/GradientPaint/LinearColorSpaceGradientTest.jtr
./java/awt/GradientPaint/GradientTransformTest.jtr
./java/awt/image/VolatileImage/DrawHugeImageTest.jtr
./java/awt/image/VolatileImage/CustomCompositeTest.jtr
./java/awt/image/VolatileImage/bug7181438.jtr
./java/awt/image/VolatileImage/TransparentVImage.jtr
./java/awt/image/DrawImage/IncorrectUnmanagedImageSourceOffset.jtr
./java/awt/image/DrawImage/IncorrectSourceOffset.jtr
./java/awt/image/DrawImage/EABlitTest.jtr
./java/awt/image/DrawImage/ScaledImageAlphaTest.jtr
./java/awt/image/DrawImage/IncorrectUnmanagedImageRotatedClip.jtr
./java/awt/image/DrawImage/IncorrectAlphaSurface2SW.jtr
./java/awt/image/DrawImage/IncorrectBounds.jtr
./java/awt/image/DrawImage/SimpleManagedImage.jtr
./java/awt/image/DrawImage/IncorrectDestinationOffset.jtr
./java/awt/image/DrawImage/SimpleUnmanagedImage.jtr
./java/awt/image/DrawImage/BlitRotateClippedArea.jtr
./java/awt/image/DrawImage/IncorrectClipXorModeSurface2Surface.jtr
./java/awt/image/DrawImage/IncorrectClipXorModeSW2Surface.jtr
./java/awt/image/DrawImage/IncorrectAlphaConversionBicubic.jtr
./java/awt/image/DrawImage/IncorrectClipSurface2SW.jtr
./java/awt/image/DrawImage/IncorrectManagedImageSourceOffset.jtr
./java/awt/image/DrawImage/IncorrectOffset.jtr
./java/awt/BasicStroke/DashOffset.jtr
./java/awt/BasicStroke/DashScaleMinWidth.jtr
./java/awt/BasicStroke/DashZeroWidth.jtr
./java/awt/Graphics/CopyScaledArea/CopyScaledAreaTest.jtr
./java/awt/Graphics/LineClipTest.jtr
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rkcz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-02-13 16:18;jdv;Only place where we are using synchronizeTexture is in MTLBlitLoops_SurfaceToSwBlit.
synchronizeTexture can be used only with MTLStorageModeManaged storage mode : https://developer.apple.com/documentation/metal/mtlblitcommandencoder/1400757-synchronizetexture?language=objc 

In MTLBlitLoops_SurfaceToSwBlit we are accessing texture created in MTLSurfaceData which has storage mode MTLStorageModePrivate, that is why we are seeing this error from Metal API validation. It should be safe to just remove usage of synchronizeTexture call in MTLBlitLoops_SurfaceToSwBlit, because we know it will not be honoured by Metal.

Also only place where we use textures with MTLStorageModeManaged is in replaceTextureRegion of MTLBlitLoops.m. I dont see any calls to MTLBlitLoops_SurfaceToSwBlit from replaceTextureRegion.;;;","2021-02-13 17:27;jdv;jtreg log with trace enabled:

[V] MTLRenderQueue_flushBuffer: opcode=20, rem=76
[I] MTLRenderer_FillRect
[I] MTLRenderer_FillRect (x=0 y=0 w=200 h=200), dst tex=0x7fdd4139f970
[V] MTLRenderQueue_flushBuffer: opcode=55, rem=56
[I] MTLContext.resetClip
[V] MTLRenderQueue_flushBuffer: opcode=58, rem=52
[V] MTLContext_ResetComposite
[V] MTLRenderQueue_flushBuffer: opcode=100, rem=48
[V] MTLRenderQueue_CheckPreviousOp: new op=3
[I] MTLContext.resetPaint
[V] MTLRenderQueue_flushBuffer: opcode=34, rem=44
[V] MTLRenderQueue_CheckPreviousOp: new op=7
[V] MTLBlitLoops_SurfaceToSwBlit: sx=0 sy=0 w=400 h=400 dx=0 dy=0
[V] MTLBlitLoops_SurfaceToSwBlit: source texture 0x7fdd4139f970
----------System.err:(3/412)----------
2021-02-14 06:50:31.411 java[36138:318872] Metal API Validation Enabled
2021-02-14 06:50:34.368 system_profiler[36280:319262] Metal API Validation Enabled
-[MTLDebugBlitCommandEncoder synchronizeTexture:slice:level:]:1273: failed assertion `synchronizeTexture: only applies when resourceOptions(0x20) & MTLResourceStorageModeMask(0xf0) == MTLResourceStorageModeManaged(0x10).  NOT MTLResourceStorageModePrivate';;;","2021-02-13 20:01;jdv;Removed synchronizeTexture and did sanity test with J2DDemo, SwingSet2 and Font2DTest, no regressions.
It resolves jtreg failures captured in this bug.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Many java/awt/ tests fail with Metal API Validation Stencil PixelFormat error,JDK-8261703,5041979,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jdv,prr,prr,2021-02-13 14:33,2021-02-18 08:56,2023-10-01 09:58,2021-02-17 08:35,internal,,,,,,,,internal,client-libs,,0,code-review,critical,lanai,sn_87,,,,,,,,,,,,,,,,,,,"With Metal API Validation, the Java 2D macOS Metal pipeline has the
the following error
2021-02-13 12:25:54.692 system_profiler[14003:12106238] Metal API Validation Enabled
2021-02-13 12:25:54.874 java[14001:12106180] Metal API Validation Enabled
-[MTLDebugRenderCommandEncoder validateFramebufferWithRenderPipelineState:]:1288: failed assertion `Framebuffer With Render Pipeline State Validation
For stencil attachment, the render pipeline's pixelFormat (MTLPixelFormatInvalid) does not match the framebuffer's pixelFormat (MTLPixelFormatStencil8).

with many java/awt jtreg ests - other tests may fail because of the same but this is a good sampling 
./java/awt/Paint/ComponentIsNotDrawnAfterRemoveAddTest/ComponentIsNotDrawnAfterRemoveAddTest.jtr
./java/awt/Mixing/AWT_Mixing/JListInGlassPaneOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JTextAreaInGlassPaneOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JSpinnerInGlassPaneOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JSliderInGlassPaneOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JPanelOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JInternalFrameMoveOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JPanelInGlassPaneOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JTextFieldOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JScrollBarOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JSliderOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JTextAreaOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JProgressBarOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JInternalFrameOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JScrollBarInGlassPaneOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JListOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JLabelOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JEditorPaneOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JProgressBarInGlassPaneOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JLabelInGlassPaneOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JTextFieldInGlassPaneOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JButtonInGlassPaneOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JToggleButtonInGlassPaneOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/OpaqueOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JSpinnerOverlapping.jtr
./java/awt/Mixing/AWT_Mixing/JEditorPaneInGlassPaneOverlapping.jtr
./java/awt/Mixing/HWDisappear.jtr
./java/awt/Mixing/MixingInHwPanel.jtr
./java/awt/Mixing/OpaqueTest.jtr
./java/awt/Mixing/JButtonInGlassPane.jtr
./java/awt/Mixing/OverlappingButtons.jtr
./java/awt/dnd/ImageDecoratedDnDInOut/ImageDecoratedDnDInOut.jtr
./java/awt/MouseInfo/ComponentMousePositionTest.jtr
./java/awt/Component/Revalidate/Revalidate.jtr
./java/awt/Frame/MiscUndecorated/RepaintTest.jtr
./java/awt/Focus/NonFocusableWindowTest/NoEventsTest.jtr
./java/awt/Dialog/NestedDialogs/Modeless/NestedModelessDialogTest.jtr
./java/awt/Dialog/NestedDialogs/Modal/NestedModalDialogTest.jtr
./java/awt/Container/isRemoveNotifyNeeded/JInternalFrameTest.jtr
./java/awt/GridLayout/LayoutExtraGaps/LayoutExtraGaps.jtr
./java/awt/List/ListMultipleSelectTest/ListMultipleSelectTest.jtr",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261863,,,,JDK-8261967,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rkcj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-02-13 17:36;jdv;JDK-8261638 resolves the reported crash with same Metal API Validation Error but it looks like in some other cases we are hitting same code.
Like for example in j2DDemo itself if we go to ""Colors"" and enabled Rendering Quality we hit same error.

jtreg log with trace for java/awt/Paint/ComponentIsNotDrawnAfterRemoveAddTest/ComponentIsNotDrawnAfterRemoveAddTest.java :

[I] MTLRenderQueue_flushBuffer: limit=6440
[V] MTLRenderQueue_flushBuffer: opcode=52, rem=6436
[V] MTLRenderQueue_CheckPreviousOp: new op=7
[I] MTLContext.beginShapeClip
[I] MTLContext_ResetTransform
[V] MTLRenderQueue_flushBuffer: opcode=53, rem=6432
[V] MTLRenderQueue_CheckPreviousOp: new op=5
[I] MTLRenderer_FillSpans
[V] MTLContext : commandBuffer is NULL
----------System.err:(5/616)----------
2021-02-14 06:59:11.450 java[62967:380777] Metal API Validation Enabled
2021-02-14 06:59:11.968 system_profiler[63064:381253] Metal API Validation Enabled
2021-02-14 06:59:15.057 java[62967:380777] became key: 0 ComponentIsNotDrawnAfterRemoveAddTest (null)
2021-02-14 06:59:15.059 java[62967:380777] became main: 1 ComponentIsNotDrawnAfterRemoveAddTest (null) 1
-[MTLDebugRenderCommandEncoder validateFramebufferWithRenderPipelineState:]:1257: failed assertion `For stencil attachment, the render pipeline's pixelFormat (MTLPixelFormatInvalid) does not match the framebuffer's pixelFormat (MTLPixelFormatStencil8).';;;","2021-02-14 10:54;jdv;Some of these jtreg tests are passing after JDK-8261712 but some are still failing with same error.
Will wait for complete test run(https://bugs.openjdk.java.net/browse/JDK-8261712?focusedCommentId=14400700&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14400700 )to finish then we can find other root causes for this error.;;;","2021-02-15 03:06;jdv;Remaining test which are captured in this bug are also failing with same stencil attachement error but the code path it is taking is through LCD cached rendering. Need to verify state management here.

[V] MTLRenderQueue_flushBuffer: opcode=40, rem=168
[V] MTLRenderQueue_CheckPreviousOp: new op=7
[I] MTLTR_DrawGlyphList
[I] totalGlyphs = 19
[I] Entered for loop for glyph list
[I] Glyph width = 13 height = 14
[I] rowBytes = 39
[I] MTLTR_DrawGlyphList LCD cache
[I] MTLTR_InitGlyphCache
[I] MTLGlyphCache_Init
[V] MTLContext : commandBuffer is NULL
----------System.err:(26/2247)----------
2021-02-15 16:35:10.788 java[51652:1574462] Metal API Validation Enabled
2021-02-15 16:35:11.093 system_profiler[51654:1574550] Metal API Validation Enabled
2021-02-15 16:35:11.611 java[51652:1574462] became key: 0 set back (null)
2021-02-15 16:35:11.613 java[51652:1574462] became main: 1 set back (null) 1
2021-02-15 16:35:12.604 java[51652:1574542] name is : .SFNS-Regular
2021-02-15 16:35:12.604 java[51652:1574542] family is : .AppleSystemUIFont
2021-02-15 16:35:12.605 java[51652:1574542] name is : .SFNS-Bold
2021-02-15 16:35:12.605 java[51652:1574542] family is : .AppleSystemUIFont
2021-02-15 16:35:12.973 java[51652:1574542] nsFont-name is : .AppleSystemUIFont
2021-02-15 16:35:12.973 java[51652:1574542] nsFont-family is : .AppleSystemUIFont
2021-02-15 16:35:12.973 java[51652:1574542] nsFont-desc-name is : .SFNS-Regular
2021-02-15 16:35:12.974 java[51652:1574542] nsFont-name is : .AppleSystemUIFont
2021-02-15 16:35:12.974 java[51652:1574542] nsFont-family is : .AppleSystemUIFontBold
2021-02-15 16:35:12.974 java[51652:1574542] nsFont-desc-name is : .SFNS-Bold
2021-02-15 16:35:12.986 java[51652:1574542] nsFont-name is : .AppleSystemUIFont
2021-02-15 16:35:12.986 java[51652:1574542] nsFont-family is : .AppleSystemUIFont
2021-02-15 16:35:12.986 java[51652:1574542] nsFont-desc-name is : .SFNS-Regular
2021-02-15 16:35:13.000 java[51652:1574542] nsFont-name is : .AppleSystemUIFont
2021-02-15 16:35:13.000 java[51652:1574542] nsFont-family is : .AppleSystemUIFontBold
2021-02-15 16:35:13.000 java[51652:1574542] nsFont-desc-name is : .SFNS-Bold
2021-02-15 16:35:13.060 java[51652:1574462] resigned key: 1 set back (null)
2021-02-15 16:35:13.061 java[51652:1574462] became key: 0 Mixing : GlassPane Overlapping test (null)
2021-02-15 16:35:13.061 java[51652:1574462] resigned main: 0 set back (null)
2021-02-15 16:35:13.062 java[51652:1574462] deactivating window: set back
2021-02-15 16:35:13.062 java[51652:1574462] became main: 1 Mixing : GlassPane Overlapping test (null) 1
-[MTLDebugRenderCommandEncoder validateFramebufferWithRenderPipelineState:]:1257: failed assertion `For stencil attachment, the render pipeline's pixelFormat (MTLPixelFormatInvalid) does not match the framebuffer's pixelFormat (MTLPixelFormatStencil8).';;;","2021-02-17 00:12;jdv;Raised PR : https://github.com/openjdk/lanai/pull/194 
It resolves jtreg failures captured in this bug.;;;","2021-02-17 08:29;jdv;Since it has more changes.
I spent good amount of time to do Sanity testing, Ran all below things with uiScale=1, uiScale=2, With Metal API Validation and without Metal API Validation
1) J2DDemo
2) SwingSet
3) Font2DTest
4) RenderPerfTest
5) RenderPerfLCDTest

Also ran standalone tests with KEY_TEXT_ANTIALIAS_LCD_CONTRAST to check based whether contrast is working fine with this change. ;;;",,,,,,,,,,,,,,,,,,,,,,,
ClhsdbFindPC can fail due to PointerFinder incorrectly thinking an address is in a .so,JDK-8261702,5041974,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2021-02-13 10:41,2021-03-01 16:37,2023-10-01 09:58,2021-02-21 12:04,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"I had one test failure of ClhsdbFindPC that I could not reproduce again, but I'm pretty sure I know the cause. The part of the test that failed was using findpc on a pc address from the jstack output, and that address was in the interpreter. However, findpc found it at some large offset from the start of a .so without a symbol match.

The cause is due to a known issue with the Linux DSO.java support. A DSO is created for each .so. There is a bug that results in the size given to the created DSO to end up being too large. It is the size of the file rather than the size of the actual mapped in segments. For the most part this is harmless, and when an address is in a .so, findpc will find the proper .so and symbol for it. However, if the address is just outside of the .so, PointerFinder can think it is inside of it. Here's the relevant code:

        loc.loadObject = cdbg.loadObjectContainingPC(a);
        if (loc.loadObject != null) {
            loc.nativeSymbol = loc.loadObject.closestSymbolToPC(a);
            return loc;
        }

loadObjectContainingPC(a) returns the DSO that contains the address. As mentioned above, this might not always be accurate. If the address is not actually in the returned DSO, but is in some DSO, then the call to loadObject.closestSymbolToPC() will still work properly because it actually ignores the DSO info and just searches all DSO's from native to find the symbol in the correct DSO, even if it was not the specified DSO.

However, if the address is not in and DSO, yet a DSO was returned by loadObjectContainingPC(), then there are problems. The most likely way this will happen is when specifying an address just after the last DSO in memory. In the case of this bug the address was in the interpreter. However, because this code thinks it is in a DSO (and we haven't yet done the check to see if it is in the interpreter), we end up calling loadObject.closestSymbolToPC(a). This will fail to find a symbol match, but that is not an indication of failure because not all addresses in a DSO have a symbol associated with them. So then we later end up in the code that prints the findpc info for the address:

        if (nativeSymbol != null) {
            String name = nativeSymbol.getName();
            if (cdbg.canDemangle()) {
                name = cdbg.demangle(name);
            }
            tty.print(name);
            diff = nativeSymbol.getOffset();
        } else {
            tty.print(loadObject.getName());
            diff = addr.minus(loadObject.getBase());
        }
        if (diff != 0L) {
            tty.print("" + 0x"" + Long.toHexString(diff));
        }

in this case nativeSymbol is null, so we just end up printing the name of the DSO plus the offset from the start of the DSO. The test fails because what it expected was for ""In interpreter codelet:"" to appear in the output.

The workaround for this DSO bug is simple. Just have PointerFinder defer searching DSOs for the address to be the last thing it does. That way we will first attempt to find the address in the interpreter.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261844,,,,JDK-8247514,,,,,,JDK-8261929,JDK-8261710,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rkbf:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-02-16 11:05;cjplummer;This issue has now been reproduced by someone else. See JDK-8261844. It includes the log output which I had lost by the time I filed this bug. As you can see below, it was trying to find an NMethod, but instead found a very large offset off of libjvm.so.

  stderr: [ + findpc 0x00002b28f0f2a284
Address 0x00002b28f0f2a284: /work/shared/mirrors/src_clones/jdk/jdk_baseline.git/build/linux-x86_64-normal-server-fastdebug/images/jdk/lib/server/libjvm.so + 0xff50284
]
 exitValue = -1

java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'In code in NMethod for LingeredAppWithTrivialMain.main' missing from stdout/stderr ;;;","2021-02-18 09:38;cjplummer;Failures with ""'In java stack' missing from stdout/stderr"" and the following in the output should be filed under JDK-8261929:

stderr: [ + findpc 0x0000000000000000
Address 0x0: In unknown location ;;;","2021-02-21 12:04;roboduke;Changeset: 539c80bf
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-02-21 18:59:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/539c80bf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Bugs in clhsdb history support,JDK-8261692,5041964,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2021-02-13 10:20,2021-03-01 16:36,2023-10-01 09:58,2021-02-20 15:20,17,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,"Much like unix shells, clhsdb supports recalling commands from the history, and much like unix shells, relies on the '!' character to indicate a history reference. However, it has three bugs that need to be addressed.

The first issue is that !<cmd> matches every <cmd> in the history, not just the most recent occurrence. This makes the history support useless once the command is in the history more than once. Shell history matching only uses the most recent match. clhsdb should do the same.

hsdb> verbose true
hsdb> !ver 
verbose true
hsdb> !ver
verbose trueverbose true
Usage: verbose true | false

The second issue is that a '!' anywhere in the command will trigger history matching, but provides no way to disable it with quoting. This becomes problematic when you want to pass an argument that has an '!', which is the case with the new findysm support I'm adding with JDK-8261098. On windows I had to add a '!' to the symbol, and it took me a long time to figure out why the '!' and everything after it seemed to be getting stripped.

hsdb> echo true
hsdb> echo true
+ echo true
hsdb> echo !true 
+ echo   <-- it tried to match on ""true"", but didn't find any matches
echo is true
hsdb> echo !echo
+ echo echo echo trueecho true   <-- tried to match on ""echo"" and found some matches
Usage: echo [ true | false ]

It looks like this is supported behavior by unix shells also. The work around in unix shells is to quote the '!' with a '\'. However, clhsdb does not support this. It will need to if we want to allow clhsdb command arguments to contain a '!'.

The 3rd issue is when there is more than one '!' given in the command. Upon processing the second '!' you get an exception:

hsdb> echo one two three
Usage: echo [ true | false ]
hsdb> echo !$ !$
Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException: begin 7, end 1, length 10

This is due to the following code:

                    if (m.start() > start) {
                        result.append(ln.substring(start, m.start() - start));
                    }

This code is suppose to capture any text that did not match the ""historyPattern"". So in the above example on the first pass it would capture ""echo "" and on the second pass just the "" "". The problem is that it is subtracting ""start"" from the 2nd argument, which is suppose to be the end of the range to copy, not the length. This works fine on the first pass since ""start"" is 0, but on the second pass is causes ""end"" to be 1 instead of 8.",,,,,,,,,,,,,,,,,,,,,,,JDK-8261098,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rk97:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-02-20 15:20;roboduke;Changeset: 18188c2a
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-02-20 23:19:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/18188c2a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract should mangle names on case-insensitive platforms,CODETOOLS-7903309,5044230,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,mcimadamore,mcimadamore,2021-03-10 04:41,2022-09-28 04:04,2023-10-01 09:58,2022-09-28 04:04,,,,,,,,,,tools,,0,foreign-jextract,,,,,,,,,,,,,,,,,,,,,,"Jextract should mangle names that are identical on case-insensitive platforms - example:

typedef struct pvalueA {... } PVALUEA, FAR *PPVALUEA;
    typedef struct pvalueW { ... }PVALUEW, FAR *PPVALUEW;
    typedef PVALUEW PVALUE;
 

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rxw3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-09-28 04:04;sundar;We mangle such same-case matching names now. The code in the bug extracts fine.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JCov loses module hashes,CODETOOLS-7902878,5046516,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,lkuskov,shurailine,shurailine,2021-04-08 17:02,2021-04-19 14:03,2023-10-01 09:58,2021-04-19 14:03,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"The problem can be reproduced by running this test on instrumented jdk: jdk/modules/etc/JdkQualifiedExportTest.java:
make jcov-test TEST=jdk/modules/etc/JdkQualifiedExportTest.java ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sbmr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@33767a5b,,,,,,,,,"2021-04-19 14:01;lkuskov;JREInstr writes corrupted ModuleHashes attribute into java.base/module-info that causes a failure of a check of unavailability of qualified exports to upgradeable modules.
The fix removes ModuleHashes attribute from java.base/module-info which isn't neccessary for all purposes relaiting to jcov tasks.;;;","2021-04-19 14:03;roboduke;Changeset: 5e08fd00
Author:    Leonid Kuskov <lkuskov@openjdk.org>
Date:      2021-04-19 21:02:52 +0000
URL:       https://git.openjdk.java.net/jcov/commit/5e08fd00
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
jcstress: Fix C2-only configuration filtering,CODETOOLS-7902877,5046424,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P2,Fixed,shade,shade,shade,2021-04-08 05:35,2021-04-08 06:43,2023-10-01 09:58,2021-04-08 06:43,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"CODETOOLS-7902872 rewrote CompileMode code, and introduced a little regression here:
 https://github.com/openjdk/jcstress/commit/67158528f9abdf49f9ae23c704c068a76075b4fe?branch=67158528f9abdf49f9ae23c704c068a76075b4fe&diff=unified#diff-90c43d0da51e119c248c273763e3e5d3b6b14586492fb836c480ecd144af56e5L143-R144

The filter should say ""config.onlyIfC2() && !hasC2"". The ""!"" was accidentally dropped.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7902872,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sbeb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2021-04-08 06:43;shade;https://github.com/openjdk/jcstress/commit/8e0c2d216415056d1ddd15f84ba06a1dd9262e6f;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Cleanup Instr tool,CODETOOLS-7902876,5046348,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,lkuskov,lkuskov,lkuskov,2021-04-07 10:30,2021-04-07 12:24,2023-10-01 09:58,2021-04-07 12:24,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"Jcov::Instr tool has enough issues that it deserves a cleanup:
1. usage of methods in utests should be downgraded to JDK 8
2. spelling errors and malformed comments
3. javap regression  
4. jcov should be switched from 9.0.1 snapshot to 9.1 (JDK 17 is supported)
5. deprecated methods should be refactored
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2saxn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@33767a5b,,,,,,,,,"2021-04-07 12:24;roboduke;Changeset: e847caf0
Author:    Leonid Kuskov <leonid.kuskov@oracle.com>
Committer: GitHub <noreply@github.com>
Date:      2021-04-07 12:23:48 +0000
URL:       https://git.openjdk.java.net/jcov/commit/e847caf0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Infinite loop in AgentServer,CODETOOLS-7902870,5045803,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,naoto,naoto,naoto,2021-03-30 14:57,2021-03-30 15:38,2023-10-01 09:58,2021-03-30 15:38,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"In AgentServer.java, there is this piece of code:

         private void decode() throws IOException {
             byteBuffer.flip();
             CoderResult cr;
             while ((cr = decoder.decode(byteBuffer, charBuffer, false)) != CoderResult.UNDERFLOW) {
                 writeCharBuffer();
             }
             byteBuffer.compact();
         }
The while loop only exits if the decode() returns UNDERFLOW, which may not be true in some occasions, because the encoding used here and the output from the agent VM may differ, decode() may return malformed/unmapped error. Then it will become an infinite loop here.

",,,,,,,,,,,,,,,,,,,,,,,JDK-8260265,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2s7kj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IntelliJ 2020.2: constructor must not have parameters: JTRegServiceConfigurable,CODETOOLS-7902859,5045132,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,cushon,cushon,cushon,2021-03-22 11:33,2021-03-23 03:46,2023-10-01 09:58,2021-03-23 03:46,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"The following crash occurs when using the jtreg plugin with IntelliJ 2020.2, and opening the plugin preferences pane:

```
com.intellij.diagnostic.PluginException: Class constructor must not have parameters: com.oracle.plugin.jtreg.service.ui.JTRegServiceConfigurable [Plugin: jtreg]
	at com.intellij.serviceContainer.ComponentManagerImpl.instantiateExtensionWithPicoContainerOnlyIfNeeded(ComponentManagerImpl.kt:696)
	at com.intellij.openapi.options.ConfigurableEP$ClassProducer.createElement(ConfigurableEP.java:422)
	at com.intellij.openapi.options.ConfigurableEP.createConfigurable(ConfigurableEP.java:329)
	at com.intellij.openapi.options.ex.ConfigurableWrapper.createConfigurable(ConfigurableWrapper.java:45)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s3fv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
make/build.sh fails when OpenJDK is specified for --jdk option,CODETOOLS-7902855,5044939,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,ksakata,ksakata,ksakata,2021-03-19 05:50,2021-05-17 20:40,2023-10-01 09:58,2021-05-17 20:40,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"When we specify not Oracle JDK but OpenJDK for --jdk option, make/build.sh fails.

$ ~/jdk-15.0.1+9/bin/java -version
openjdk version ""15.0.1"" 2020-10-20
OpenJDK Runtime Environment AdoptOpenJDK (build 15.0.1+9)
OpenJDK 64-Bit Server VM AdoptOpenJDK (build 15.0.1+9, mixed mode, sharing)

$ bash make/build.sh --jdk ~/jdk-15.0.1+9
[build.sh][ERROR] JDK 8 or newer is required to build jtreg

This is caused by a difference in the output of java -version command on OpenJDK and Oracle JDK.

$ java -version
java version ""1.8.0_281""
Java(TM) SE Runtime Environment (build 1.8.0_281-b09)
Java HotSpot(TM) 64-Bit Server VM (build 25.281-b09, mixed mode)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2s28z:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JCStress: Fix simple test issues found by static analysis,CODETOOLS-7902843,5044214,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-03-10 02:28,2021-03-10 04:13,2023-10-01 09:58,2021-03-10 04:13,,,,,,,,,,tools,,0,sonarcloud-found,,,,,,,,,,,,,,,,,,,,,,SonarCloud reports multiple problems in test code. Some of them are legitimate problems that break/weaken the tests.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rxsj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2021-03-10 04:13;shade;https://github.com/openjdk/jcstress/commit/2ea3facb44e04b2e76724bfffc8511c695298ee8;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JMH: Fix *Statistics iterators to throw NoSuchElementException properly,CODETOOLS-7902840,5044031,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-03-09 06:49,2021-03-10 03:46,2023-10-01 09:58,2021-03-10 03:46,,,,,,,,,,tools,,0,sonarcloud-found,,,,,,,,,,,,,,,,,,,,,,"SonarCloud instance reports:
 Add a ""NoSuchElementException"" for iteration beyond the end of the collection.

...in places like:

        @Override
        public Map.Entry<Double, Long> next() {
            return new AbstractMap.SimpleImmutableEntry<>(values[currentIndex++], 1L);
        }

        @Override
        public Map.Entry<Double, Long> next() {
            entryReturned = true;
            return new AbstractMap.SimpleImmutableEntry<>(value, 1L);
        }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rx03:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2021-03-10 03:46;shade;https://github.com/openjdk/jmh/commit/3b7bab948801128ef7d07aaacf0804f8a8c5d0d5;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JMH: Don't use fail() inside a try-catch catching an AssertionError,CODETOOLS-7902838,5044023,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-03-09 05:58,2021-03-09 07:31,2023-10-01 09:58,2021-03-09 07:31,,,,,,,,,,tools,,0,sonarcloud-found,,,,,,,,,,,,,,,,,,,,,,"SonarCloud instance reports a bug in our tests:
 ""Don't use fail() inside a try-catch catching an AssertionError.""

    @Test
    public void invokeAPI() throws RunnerException {
        try {
            ...
            new Runner(opt).run();

            Assert.fail(""Should have failed""); // <--- here
        } catch (RunnerException e) {
            // expected
        }
    }

Indeed, that does not look correct.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rwyb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2021-03-09 07:31;shade;https://github.com/openjdk/jmh/commit/ec0740c2bfa23041f247654bc6fbf6fab7a4a417;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JOL: Fix incorrect implicit numeric promotions,CODETOOLS-7902836,5043943,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-03-08 10:31,2021-03-08 11:03,2023-10-01 09:58,2021-03-08 11:03,,,,,,,,,,tools,,0,sonarcloud-found,,,,,,,,,,,,,,,,,,,,,,SonarCloud instance reports a few places where implicit promotions are not what we want them to be. The most notorious please is in HeapDumpReader::digestObjArray.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rwgj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ea3ea3c,,,,,,,,,"2021-03-08 11:03;shade;https://github.com/openjdk/jol/commit/bdd2c2df814818b4021348a1e9826c739725b4b6;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JOL: ObjectShapes.processJAR should close resources properly,CODETOOLS-7902835,5043941,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-03-08 10:13,2021-03-08 10:35,2023-10-01 09:58,2021-03-08 10:35,,,,,,,,,,tools,,0,sonarcloud-found,,,,,,,,,,,,,,,,,,,,,,"SonarCloud instance reports the failures here:
 ""Use try-with-resources or close this ""URLClassLoader"" in a ""finally"" clause.""
 ""Use try-with-resources or close this ""JarFile"" in a ""finally"" clause.""

    private Multiset<String> processJAR(String jarName) {
        Multiset<String> shapes = new Multiset<>();
        try {
            URLClassLoader cl = URLClassLoader.newInstance(new URL[]{new URL(""jar:file:"" + jarName + ""!/"")});
           JarFile jarFile = new JarFile(jarName);",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rwg3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ea3ea3c,,,,,,,,,"2021-03-08 10:35;shade;https://github.com/openjdk/jol/commit/1f34d1b585aa4dfc5fb407b801af6ea6933de8a1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JMHSample_25_API_GA selectToBreed selection bug,CODETOOLS-7902834,5043905,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-03-08 02:59,2021-03-10 01:18,2023-10-01 09:58,2021-03-10 01:18,,,,,,,,,,tools,,0,sonarcloud-found,,,,,,,,,,,,,,,,,,,,,,"SonarCloud instance reports: 'Was ""-="" meant instead?'

            double thresh = Math.random() * totalScore;
            for (Chromosome c : list) {
                if (thresh < 0) return c;
                thresh =- c.score(); // <--- here
            }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rw83:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2021-03-10 01:18;shade;https://github.com/openjdk/jmh/commit/41548a7ae931f70ea84d2f85124a278d97000e9e;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
dtraceasm: do not Process.destroy the dtrace process,CODETOOLS-7902830,5042322,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-02-18 04:42,2021-02-23 11:03,2023-10-01 09:58,2021-02-23 11:03,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"Look here:
 https://mail.openjdk.java.net/pipermail/jmh-dev/2021-February/003134.html

Process.destroy closes the streams, so whatever output the profiler had accrued would be lost.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rmgj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2021-02-23 11:03;shade;https://github.com/openjdk/jmh/commit/3acfb65cb8b8f4846f570ce5ceda9f0e3458564c;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JMH Statistics implementations do not follow Comparable spec,CODETOOLS-7902829,5042314,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-02-18 03:12,2021-02-18 07:58,2023-10-01 09:58,2021-02-18 07:58,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"Comparable.compareTo spec says: ""Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.""

Unfortunately, that is not followed by JMH Statistics, because they get the order wrong. The tests that are supposed to catch this are also wrong.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rmer:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2021-02-18 07:58;shade;https://github.com/openjdk/jmh/commit/c950cdb437d10606284b744d9b5a1a70f8aa2499;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Generated BenchmarkList file should be sorted for reproducibility,CODETOOLS-7902825,5042253,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,redestad,redestad,2021-02-17 05:05,2021-02-18 03:50,2023-10-01 09:58,2021-02-18 03:50,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,,"We've seen failures in the JDK reproducible checks where the BenchmarkLists differ, which appears to be due the collection not being explicitly sorted before written to disk.

Since BenchmarkListEntry is already Comparable, a minimal fix would be to change the collection used into a TreeSet:

@@ -122,7 +122,7 @@ public class BenchmarkGenerator {
 
         // Processing completed, final round.
         // Collect all benchmark entries here
-        Set<BenchmarkListEntry> entries = new HashSet<>();
+        Set<BenchmarkListEntry> entries = new TreeSet<>();

Explicitly sorting the collection before writing it out in BenchmarkList::writeBenchmarkList might be the a more robust alternative.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2rm1f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2021-02-18 03:50;shade;https://github.com/openjdk/jmh/commit/5b3a1296dff77ee3f6743e38833eafdd0970bace;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
