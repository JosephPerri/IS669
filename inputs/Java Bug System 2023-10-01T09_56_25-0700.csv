Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Inward issue link (Blocks),Inward issue link (Blocks),Outward issue link (Blocks),Outward issue link (Blocks),Outward issue link (CSR),Inward issue link (Cloners),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field ( Type of Bug [Challenge] ),Custom field (CPU),Custom field (CPU),Custom field (Cost of Delay),Custom field (Epic Link),Custom field (Imported),Custom field (Indexed),Custom field (Introduced In Build),Custom field (Introduced In Version),Custom field (Number of Tests Affected [Challenge]),Custom field (OS),Custom field (OS),Custom field (Oracle Evaluation),Custom field (Original story points),Custom field (Parent Link),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Resolved In Build),Sprint,Custom field (Story Points),Custom field (Subcomponent),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Time Spent),Custom field (Understanding),Custom field (Value),Custom field (Verification),Custom field (external_bug),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
sync-bot removing hgupdate-sync label from 8u5 backport,SKARA-1345,5068038,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,rcalnan,rcalnan,2022-02-07 19:55,2022-02-10 12:32,2023-10-01 09:56,2022-02-10 11:29,,,,,,,,,1.0,bots,,0,urt-infra,,,,,,,,,,,,,,,,,,,"In January the hgupdate sync label was removed from:

https://bugs.openjdk.java.net/browse/JDK-8031256

the fix was integrated into 8 and then 8u5 and so 8u5 should have a sync label.

Added an hgupdater-issue label a few minutes ago and it has not been updated, and so the bot thinks it is correct.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vylv:",9223372036854775807,,,,,,,,,,,,,"2022-02-09 09:14;erikj;The problem here is that Skara doesn't know about the number of builds that exists in release 8. It is applying the rule that says >b60 means it's a special release that shouldn't be considered.;;;","2022-02-09 09:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1284
Date: 2022-02-09 17:38:30 +0000;;;","2022-02-10 11:29;roboduke;Changeset: e7a5c307
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-02-10 19:28:37 +0000
URL:       https://git.openjdk.java.net/skara/commit/e7a5c30777a1f9d4d0f55c66a2f66e6aa8d8fe73
;;;","2022-02-10 12:32;erikj;This has been deployed and the affected issue has been automatically corrected (after a nudge from me).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user rpatil-java,SKARA-1343,5067928,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,rpatil,rpatil,2022-02-06 23:35,2022-02-07 05:21,2023-10-01 09:56,2022-02-07 05:21,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,"Hi Skara admins,
Please link my OpenJDK username ""rpatil"" to my Github account ""rpatil-java"".
I am part of the JPG team at Oracle.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vxxf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user stepanov17,SKARA-1342,5067824,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,avstepan,avstepan,2022-02-04 07:50,2022-02-04 09:59,2023-10-01 09:56,2022-02-04 09:59,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,please add github user stepanov17. thanks,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vxjf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Correct email domain not always used when adding a contributor to a PR,SKARA-1340,5067731,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,kcr,kcr,2022-02-03 07:34,2023-05-08 13:02,2023-10-01 09:56,2023-05-08 13:02,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"When not using the default census, the email address of the PR author is correctly taken from the census. This is not the case for additional contributors, added by the ""/contributor add"" command. The email domain for additional contributors is always the default ""openjdk.org"" domain.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vwyz:",9223372036854775807,,,,,,,,,,,,,"2022-02-08 00:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1281
Date: 2022-02-08 08:25:24 +0000;;;","2023-05-05 10:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1513
Date: 2023-05-05 17:06:52 +0000;;;","2023-05-08 13:02;roboduke;Changeset: 53328fdb
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-05-08 20:01:41 +0000
URL:       https://git.openjdk.org/skara/commit/53328fdbacdc59a9bdc928022f43de232be332af
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user Larry-N,SKARA-1338,5067712,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,inakonechnyy,inakonechnyy,2022-02-03 02:50,2022-02-03 04:37,2023-10-01 09:56,2022-02-03 04:37,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,Please add my github username to OpenJDK organisation ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vwur:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Sponsor label only removed if PR is actually sponsored,SKARA-1333,5067168,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,erikj,erikj,2022-01-26 12:23,2022-02-09 06:38,2023-10-01 09:56,2022-02-09 06:38,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"When a PR is first marked with sponsor, but then the author becomes a committer before the PR is sponsored, and integrates on their own, the sponsor label gets stuck and is never removed. I think this is a pretty simple fix in IntegrateCommand, to make sure sponsor labels are also removed if present when a change is actually integrated.

Example PR: https://github.com/openjdk/jdk/pull/5714",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vthv:",9223372036854775807,,,,,,,,,,,,,"2022-02-08 04:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1282
Date: 2022-02-08 12:03:16 +0000;;;","2022-02-09 06:38;roboduke;Changeset: 4df4afb8
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-02-09 14:38:11 +0000
URL:       https://git.openjdk.java.net/skara/commit/4df4afb8f85b5a4ebb7d2dec7482b56836c56046
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Skara sometimes fails to detect that a backport was clean,SKARA-1332,5067136,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,kcr,kcr,2022-01-26 08:09,2023-05-09 09:45,2023-10-01 09:56,2023-05-08 14:04,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"Sometimes the Skara PR bot doesn't detect that a backport is clean, and doesn't add the ""clean"" label (thus isn't subsequently marked as ""ready"").
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1406,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vtar:",9223372036854775807,,,,,,,,,,,,,"2022-02-07 20:18;gli;Could you please give an example PR? Thanks.;;;","2022-02-11 09:39;kcr;Here is a recent example:
https://github.com/openjdk/jfx17u/pull/33;;;","2022-04-20 06:44;kcr;Here is another instance of this bug:

https://github.com/openjdk/jfx17u/pull/41;;;","2022-04-20 08:27;gli;It is because the GitHub rest-api returns the paging data instead of the concrete data if the file number of the PR is too large.

The related rest-api:
https://docs.github.com/en/rest/commits/commits#get-a-commit
https://docs.github.com/en/rest/pulls/pulls#list-pull-requests-files

I will submit a PR to fix it in the near feature.;;;","2022-04-20 15:30;gli;GitHub sometimes don't return the `patch` field of the files.

Please try these three search and find the keyword `libxml2.def.src`:
1. https://api.github.com/repos/openjdk/jfx/pulls/764/files?per_page=30&page=4
2. https://api.github.com/repos/openjdk/jfx/pulls/764/files?per_page=100
3. https://api.github.com/repos/openjdk/jfx/commits/b0f2521219efc1b0d0c45088736d5105712bc2c9

You can see the first link returns the `patch` field of the file `libxml2.def.src`.
But the second and third link don't return the `patch` field.

It is very strange and the GitHub rest-api doc seems not state the concrete detial about it.
;;;","2022-04-22 08:19;gli;An analysis about failing to get patch information from Github was posted at PR-1302 [1]. And SKARA-1406 [2] solves part of this issue about that the GitHub rest api `get-a-commit` [3] and `list-pull-requests-files` [4] don't return the `patch` field when the `per_page` argument exceeds 70.

[1] https://github.com/openjdk/skara/pull/1302#issue-1211945938
[2] https://bugs.openjdk.java.net/browse/SKARA-1406
[3] https://docs.github.com/en/rest/commits/commits#get-a-commit
[4] https://docs.github.com/en/rest/pulls/pulls#list-pull-requests-files;;;","2023-05-08 12:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1515
Date: 2023-05-08 19:45:59 +0000;;;","2023-05-08 14:04;roboduke;Changeset: 0043fdf3
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-05-08 21:03:19 +0000
URL:       https://git.openjdk.org/skara/commit/0043fdf3aab5a5dee4ad6e35915bb7962b39ce2e
;;;","2023-05-09 05:39;kcr;Thanks for fixing this. This will be a big help. I'll keep an eye out for any problems.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
incorrect hgupdate label for JDK 7 updates,SKARA-1329,5066989,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,rcalnan,rcalnan,2022-01-25 06:50,2022-01-27 14:41,2023-10-01 09:56,2022-01-27 12:07,,,,,,,,,1.0,bots,,0,urt-infra,,,,,,,,,,,,,,,,,,,"7u45 is missing an hgupdate-sync label, for example:

https://bugs.openjdk.java.net/browse/JDK-8020381

this may be due to 7u40 having over 30 builds and so is perhaps being mistaken for a BPR.   This query lists the issues that are tagged incorrectly:

https://bugs.openjdk.java.net/issues/?jql=id%20in%20masterbug(%22project%20%3D%20jdk%20and%20fixversion%20%3D%207u45%20and%20not%20labels%20%3D%20hgupdate-sync%22)%20%0Aand%20%20id%20in%20masterbug(%22project%20%3D%20jdk%20and%20fixversion%20%3D%207u40%20and%20resolution%20%3D%20fixed%22)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vse3:",9223372036854775807,,,,,,,,,,,,,"2022-01-25 13:05;erikj;That is correct. The current rule implemented by Skara is that for 7 and 8, any build between 31 and 60 is considered a BPR. If there are exceptions to this rule, we should try to cover all of them with this bug. For which updates should we not assume b31+ are for BPRs?;;;","2022-01-25 13:22;erikj;Looking at the specification given to Skara, BPR should only be builds 30 to 39, so there is another error already.

I took at stab at looking for releases which had a build 29 and found 7u40 and 8u26. I'm going to assume those are the only exceptions. 

Unless I hear anything else, I will implement these changes.;;;","2022-01-26 12:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1280
Date: 2022-01-26 20:16:23 +0000;;;","2022-01-27 09:01;erikj;The specification says 30-39 is reserved for BPR and 60+ are special releases that should not be considered for hgupdate-sync. That leaves a gap of undefined numbers in the range 40-59. Before this change, those were assumed to be in the BPR range, and after contemplating this for a while, I agree with that conclusion. We need to handle it in some way, though I don't think any release exists where this actually matters.;;;","2022-01-27 12:07;roboduke;Changeset: 39785f26
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-01-27 20:07:11 +0000
URL:       https://git.openjdk.java.net/skara/commit/39785f26f571cb64ddc43d9776081b53833a90e8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update Skara to recognize the FX 8uNNN-bXX tag format,SKARA-1325,5066810,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,kcr,kcr,2022-01-21 06:13,2022-01-31 07:56,2023-10-01 09:56,2022-01-24 13:56,,,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,,,"When a new tag is pushed, the Skara bot will update the resolved-in-build field for all bugs fixed between the previous build tag and the current one, setting it to the build number corresponding to the just-pushed tag. In order for this to work with FX 8u bugs, the bot needs to recognize the FX 8u tag format, which is:

8uNNN-bXX

where NNN is the update-release number and XX is the build number. This is equivalent to the JDK tag format, which uses jdk8uNNN-bXX, except that the FX tags don't have a prefix before ""8u"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1324,,,JDK-8118553,JDK-8280485,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vrab:",9223372036854775807,,,,,,,,,,,,,"2022-01-24 12:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1279
Date: 2022-01-24 20:50:22 +0000;;;","2022-01-24 13:56;roboduke;Changeset: 69aa9482
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-01-24 21:55:31 +0000
URL:       https://git.openjdk.java.net/skara/commit/69aa9482b96fcab75868ff6bc97c7e843a691e7d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user djelinski,SKARA-1321,5066712,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,djelinski,djelinski,2022-01-20 01:29,2022-01-20 04:28,2023-10-01 09:56,2022-01-20 04:28,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,Please link my gh user https://github.com/djelinski to https://openjdk.java.net/census#djelinski,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vqoj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Skara failing to create backport records for fixes synced into mainline,SKARA-1320,5066596,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,kcr,kcr,2022-01-19 05:10,2022-02-11 10:53,2023-10-01 09:56,2022-01-19 09:41,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"The Skara notify bot failed to create a new backport record for ""19"" for several recent fixes that were synced from jdk18 into jdk.

Here is a recent integration where it worked:

https://mail.openjdk.java.net/pipermail/core-libs-dev/2021-December/084555.html

All three of the bugs from that merge integration correctly had a ""19"" backport record created and resolved:

JDK-8273179
JDK-8278538
JDK-8277621

Several of the most recent ones did not. For example:

https://mail.openjdk.java.net/pipermail/jdk-changes/2022-January/016505.html

...
JDK-8279924
JDK-8280034
JDK-8279998

Similarly, yesterday's merge in the jfx repo from the jfx18 branch to the master branch did not result in a record created for the one bug it should have done:

https://mail.openjdk.java.net/pipermail/openjfx-changes/2022-January/004956.html

JDK-8273998
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1349,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vpyr:",9223372036854775807,,,,,,,,,,,,,"2022-01-19 05:22;kcr;I note that for the three JDK bugs I listed above as not having a record created -- JDK-8279924, JDK-8280034, JDK-8279998 -- the notify bot added a commit comment to the main bug ID (the one with ""18"" as the fixVersion).
;;;","2022-01-19 05:54;erikj;This looks to be caused by the fixversion change. As we are no longer configuring fixversion on the Skara bot side, Skara will instead look for the correct fixversion in .jcheck/conf. This happens for each new commit that it finds in a branch (master in mainline in this case) and then this is used for the notification for that commit. In the case where we merge changes from 18 to mainline, .jcheck/conf currently has no version value. In the future it would have value 19 while mainline would be 20.

So for the current case, I see no other alternative than to restore the fixversion in the Skara bot config for mainline. For the future, when the stabilization branch/fork has a fixversion, we could maybe implement something smarter like this:

Instead of looking at .jcheck/conf at the current commit, find the last commit that touched .jcheck/conf in the branch, but with a commit date before the current commit. Using this method may need to be configurable on a per repo level. We may make it even simpler and just check the .jcheck/conf value at HEAD. That is essentially what using a server side fixversion does anyway. ;;;","2022-01-19 08:52;erikj;Agreed to implement a configurable option to always use .jcheck/conf from HEAD when getting the fixversion for a branch.;;;","2022-01-19 09:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1276
Date: 2022-01-19 17:17:45 +0000;;;","2022-01-19 09:41;roboduke;Changeset: 556c63d5
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-01-19 17:41:04 +0000
URL:       https://git.openjdk.java.net/skara/commit/556c63d5a0f18cb7dea1ab8a46f41a0e1551a469
;;;","2022-01-19 13:10;erikj;Successfully forced re-evaluation for both jdk and jfx repos.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user biboudis,SKARA-1319,5066566,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,abimpoudis,abimpoudis,2022-01-19 03:11,2022-05-04 10:13,2023-10-01 09:56,2022-05-04 10:11,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vps3:",9223372036854775807,,,,,,,,,,,,,"2022-01-19 04:06;kcr;[~abimpoudis] You do not have an OpenJDK ID, so this request cannot be done at this time.;;;","2022-01-19 04:09;abimpoudis;I have a PR ready to be integrated on Github. Should I proceed with that first?;;;","2022-01-19 04:09;kcr;Yes. And then enter ""/covered"" in response to the OCA request.;;;","2022-01-19 04:15;abimpoudis;Its merged now (without /covered). ;;;","2022-05-04 10:11;kcr;Done.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user guotaiping1,SKARA-1317,5066505,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,kcr,tguo,tguo,2022-01-18 17:22,2022-01-19 04:03,2023-10-01 09:56,2022-01-19 04:03,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,"Please associate my GitHub account with my OpenJDK identity.

https://github.com/guotaiping1
https://openjdk.java.net/census#tguo",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vpej:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Review comment on a commit triggers error in CommitCommentsWorkItem,SKARA-1316,5066486,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-01-18 12:09,2022-01-19 11:45,2023-10-01 09:56,2022-01-19 09:22,,,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,,,"In a Gitlab MR, it's possible to comment directly on new commits being added to the MR. This seems like a rather unusual thing to do, but just happened recently. When such a comment is added, the CommitCommentsWorkItem will be triggered and try to process this comment as if it was made on a commit in the repo. The problem is that a review commit is usually not present in the target repo, but only the source/fork, so the lookup will fail.

Here is an example stacktrace:

java.lang.RuntimeException: Did not find commit with title Review comments for repository jpg-sec/jdk8u-cpu
	at org.openjdk.skara.forge/org.openjdk.skara.forge.gitlab.GitLabRepository.commitWithComment(GitLabRepository.java:397)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.gitlab.GitLabRepository.lambda$recentCommitComments$14(GitLabRepository.java:437)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.gitlab.GitLabRepository.recentCommitComments(GitLabRepository.java:443)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CommitCommentsWorkItem.run(CommitCommentsWorkItem.java:95)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.runMeasured(BotRunner.java:190)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:146)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

The problem seems to be in GitlabRepository::recentCommitComments, which requests ""note"" objects from the last 4 days and then filters for notes about comments on commits. The above mentioned comment matches this filtering. We need to figure out some additional filter that tells the commit comments we care about apart from the ones we don't. Alternatively, we should just discard comments that can't be looked up using the supplied titleToCommit map.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vpab:",9223372036854775807,,,,,,,,,,,,,"2022-01-18 13:02;erikj;Reproduced this on the internal playground repo. The comment was really made on the commit itself, using a link that seems to imply that the commit is part of the target repo and not the source.;;;","2022-01-18 13:46;erikj;After having played around a bit with this in the playground repo, there seems to be a difference between Notes on actual commits and Notes on diffs in a review. The former has a ""target_type"" of ""Note"", while the latter has ""DiffNote"". My suggested fix for this is then simply to add filtering on that field and value.;;;","2022-01-18 13:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1275
Date: 2022-01-18 21:49:01 +0000;;;","2022-01-19 09:22;roboduke;Changeset: 09b1e6bc
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-01-19 17:21:38 +0000
URL:       https://git.openjdk.java.net/skara/commit/09b1e6bc2dc89ab0786bacc9d058018fa7565b93
;;;","2022-01-19 11:45;erikj;My initial fix failed with NPE in many repos. I fixed this in a followup fix: 
https://github.com/openjdk/skara/pull/1277
https://github.com/openjdk/skara/commit/ab4c9f4fc47c9918c4bc54de205b1bb641c6635d;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user turbanoff,SKARA-1313,5066446,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,aturbanov,aturbanov,2022-01-18 05:59,2022-01-18 06:59,2023-10-01 09:56,2022-01-18 06:59,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,Please associate my Github account https://github.com/turbanoff with my OpenJDK username,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vp1f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Pull Request not closed automatically,SKARA-1311,5066340,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,schaturvedi,schaturvedi,2022-01-16 21:33,2022-01-21 06:49,2023-10-01 09:56,2022-01-21 05:50,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"I have a PR on Github which is approved and integrated too. I can see the commit as well in the code base. But it wasn't closed and resolved automatically as per the process. Though there is a button to close it manually but ideally we should not do that. Can someone please help me with this?

The PR link here : https://github.com/openjdk/jmc/pull/346",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vodv:",9223372036854775807,,,,,,,,,,,,,"2022-01-18 06:45;erikj;It looks like the bot got a 500 response from one of the rest calls while handling the integration. This left the PR in an unfinished state. The Skara bot is then supposed to pick right up where it left off on the next attempt, but for some reason, this particular state is now ignored and never handled. 

This is a bug that needs more investigation. Please leave the PR in the current state so I can use it to investigate this for a bit more time if possible.;;;","2022-01-18 06:52;erikj;The CheckWorkItem has an early return check if the PR has the label ""integrated"". Perhaps this also needs to verify that the PR is closed.;;;","2022-01-20 10:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1278
Date: 2022-01-20 18:56:18 +0000;;;","2022-01-21 05:50;roboduke;Changeset: 8ad1c7ab
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-01-21 13:49:37 +0000
URL:       https://git.openjdk.java.net/skara/commit/8ad1c7ab7e5d1c582ccf5ae429246a8aaa15e8f9
;;;","2022-01-21 06:49;erikj;This fix has been deployed and the PR was automatically closed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CSRBot only reacts to approved CSR if PR is touched,SKARA-1308,5066172,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-01-12 11:27,2022-01-14 10:46,2023-10-01 09:56,2022-01-14 10:46,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"When a CSR issue is approved, any associated PR is only updated once someone touches the PR. The CSRBot will not evaluate anything about a PR unless there is a change to it. Since a CSR issue update only happens in JBS, the CSRBot needs to check Jira for updates every now and then regardless of if the PR was updated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1071,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vncj:",9223372036854775807,,,,,,,,,,,,,"2022-01-12 11:31;kcr;Here are three recent PRs where this bug was noticed:

https://github.com/openjdk/jfx/pull/548
https://github.com/openjdk/jdk/pull/6868
https://github.com/openjdk/jdk/pull/6974;;;","2022-01-13 13:02;erikj;This started with SKARA-1071. Before that issue, we only needed to check for CSR issues in JBS when there was a CSR label on a PR. Now we basically always need to check for CSR issues, as we want to react to them regardless of if the CSR label is set on a PR.

In SKARA-1071, all the logic of CSRBot was instead guarded with the PullRequestUpdateCache.

So given the current expected behavior, we simply have to remove that guard and let CSRBot always check JBS for CSR issues. In reality, this is already the case for Gitlab based repos, as the cache is shortcutting those already, but for Github repos, we will be hammering JBS quite a bit more than before.

See https://github.com/openjdk/skara/pull/451 for explanation of previous behavior.;;;","2022-01-13 13:09;erikj;If this turns into an issue, we can always add some kind of explicit limiter in this bot.;;;","2022-01-13 13:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1274
Date: 2022-01-13 21:15:50 +0000;;;","2022-01-14 10:46;roboduke;Changeset: 677bf943
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-01-14 18:46:32 +0000
URL:       https://git.openjdk.java.net/skara/commit/677bf943d78a45c0e561a53109c1fb4de709fd10
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IssueNotifier fails to update Resolved In Build for issues with *-oracle fixVersion,SKARA-1306,5066092,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2022-01-11 10:10,2022-05-04 11:09,2023-10-01 09:56,2022-01-20 06:02,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,In SKARA-1146 I made the IssueNotifier for build tags only update Resolved In Build in issues where the fixVersion of the issue/backport matches the version in the build tag. I missed taking fixversions of the format N-oracle into account.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1146,,,,,,,,,,,,SKARA-1426,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vmur:",9223372036854775807,,,,,,,,,,,,,"2022-01-11 11:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1272
Date: 2022-01-11 19:57:01 +0000;;;","2022-01-12 06:24;roboduke;Changeset: a3c21256
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-01-12 14:24:10 +0000
URL:       https://git.openjdk.java.net/skara/commit/a3c21256639171b369b7afcb6b12087b20c1d919
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The 'git skara sync' command often fails,SKARA-1304,5066002,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-01-10 14:29,2023-04-18 12:28,2023-10-01 09:56,2022-01-13 06:36,,,,,,,,,1.0,cli,,0,,,,,,,,,,,,,,,,,,,,"The change in https://github.com/openjdk/skara/pull/1226 tried to make ""git sync"" be more careful about which remotes it automatically would sync between. Unfortunately, it's a bit too restrictive. The API call to get the fork parent from one of our forges requires authentication, which we do not have available in this context. Skara also fails to extract any proxy configuration from the underlying git config, which further impairs usability inside Oracle for Github repos. Skara also has to do some trial and error to identify the correct forge provider, which makes the probing take considerable time. I don't think it's ok for the command to spend 10s+ doing seemingly ""nothing"".

I'm not sure what the best solution is here yet.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1232,,,,,,,,,,,,,,,SKARA-1232,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vmar:",9223372036854775807,,,,,,,,,,,,,"2022-01-10 14:51;erikj;Looking at the 'git fork' command, I managed to figure out how credentials were supposed to be setup and moved that logic earlier. I'm now able to authorize correctly, so one of the issues is resolved.;;;","2022-01-10 16:27;erikj;Fixing the general proxy issue seems way beyond this issue and something that I may want to tackle later in a separate issue. (I would like Skara to be able to pick a proxy config of the form ""http.http://github.com.proxy = foo"" from the git config.) 

For the rest of the issues, I'm going to suggest the following behavior. It's reverting some of the previous change, especially in regards to the --to and --from parameters.

To figure out the source/from URI:
1. If --from is set, use that. Require --force if to and from hostnames do not match.
2. If upstream is configured, use that. If remote fork was found, fail if it's not a match. Require --force if to and from hostnames do not match.
3. If the remote fork was found, use that. Try to fix upstream config in local repo.

This means that as long as the hostnames match, you can use --to and --from as documented here: https://wiki.openjdk.java.net/display/SKARA/git-sync, which I think makes sense. You only need to use --force if the hostnames aren't matching.

Since finding the fork config from the forge is unreliable, I don't think we can require verifying that. That check will just be a best effort. At least it works with authorization now. It's still slow when the proxy isn't configured however (but that part can now be worked around by adding --force).;;;","2022-01-11 12:22;erikj;While playing around and testing different scenarios, I discovered another issue. The related ""git skara fork"" command is causing ForgeUtils to set bad values for ""forge.name"" in the git config for repositories. Here is the typical scenario for an Oracle internal setup:

1. git fork <closed repo> jdk
2. cd jdk && git fork <open repo> open

After this, ""git skara sync"" will not work in the closed top level repo, because the ""git fork"" command has now stored ""forge.name=github"" in the top level repo. This makes all Skara git commands assume that the remote is a github forge, which it isn't, and will fail.;;;","2022-01-11 13:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1273
Date: 2022-01-11 21:12:42 +0000;;;","2022-01-13 06:36;roboduke;Changeset: b068ba75
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-01-13 14:35:30 +0000
URL:       https://git.openjdk.java.net/skara/commit/b068ba7543de3aa19886d39fcf924c7523c299bf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user DanHeidinga,SKARA-1302,5065752,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,heidinga,heidinga,2022-01-06 07:49,2022-01-06 10:15,2023-10-01 09:56,2022-01-06 08:32,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,"I'm a committer on the CRaC project but I noticed on a recent pull request review that I'm not being correctly recognized.

For example:
```
@DanHeidinga (no known github.com user name / role)
```
on https://github.com/openjdk/crac/pull/8",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vkr7:",9223372036854775807,,,,,,,,,,,,,"2022-01-06 10:15;heidinga;Thanks Erik!  Much appreciated.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IssueNotifier removes and re-adds review links and comments,SKARA-1298,5065307,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,gli,erikj,erikj,2021-12-23 12:09,2022-01-03 06:55,2023-10-01 09:56,2022-01-03 06:55,,,,,,,,,1.0,admin,,0,,,,,,,,,,,,,,,,,,,,"Since SKARA-1258, users have started reporting that Skara removes and re-adds review link comments to bugs every now and then. I don't think this behavior is new since that bug, but since we are now also removing comments, users are being notified of these bug modifications through email, so it's much more noticeable.

Here is an example bug and PR: JDK-8279119
https://github.com/openjdk/jdk/pull/6924

My best guess right now is that the PullRequestWorkItem somehow fails to parse the issues from the pr.body for some reason and that triggers an onRemovedIssue event.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vi0j:",9223372036854775807,,,,,,,,,,,,,"2021-12-26 03:22;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/skara/pull/1269
Date: 2021-12-26 11:21:47 +0000
;;;","2022-01-03 06:54;roboduke;Changeset: 8aab2a59
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-01-03 14:54:32 +0000
URL:       https://git.openjdk.java.net/skara/commit/8aab2a590929de7d98c8bd1e8c6cf12e40cb6433
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ArchiveWorkItem throws repeated exceptions after force push to PR,SKARA-1296,5065123,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-12-21 07:02,2022-01-07 06:47,2023-10-01 09:56,2022-01-07 06:47,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"When a user misbehaves and does a force-push to update an active PR, the ArchiveWorkItem has problems creating the incremental webrev and ends up throwing an exception. This is then retried a bunch of times, throwing exceptions each time. This in turn triggers alarms for admins.

This needs to be detected and handled better. A user force-push is bad behavior, but should not result in alarms being triggered.

java.io.UncheckedIOException: java.io.IOException: Unexpected exit code: 128
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.WebrevStorage.createAndArchive(WebrevStorage.java:322)
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.WebrevStorage$1.generate(WebrevStorage.java:335)
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.ArchiveItem.lambda$from$10(ArchiveItem.java:198)
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.ArchiveItem.footer(ArchiveItem.java:435)
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.ReviewArchive.generateNewEmails(ReviewArchive.java:354)
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.ArchiveWorkItem.run(ArchiveWorkItem.java:371)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.runMeasured(BotRunner.java:190)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:146)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.io.IOException: Unexpected exit code: 128
	at org.openjdk.skara.vcs/org.openjdk.skara.vcs.git.GitRepository.await(GitRepository.java:125)
	at org.openjdk.skara.vcs/org.openjdk.skara.vcs.git.GitRepository.diff(GitRepository.java:1192)
	at org.openjdk.skara.vcs/org.openjdk.skara.vcs.ReadOnlyRepository.diff(ReadOnlyRepository.java:117)
	at org.openjdk.skara.webrev/org.openjdk.skara.webrev.Webrev$Builder.generateJSON(Webrev.java:186)
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.WebrevStorage.generateJSON(WebrevStorage.java:144)
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.WebrevStorage.createAndArchive(WebrevStorage.java:300)
	... 13 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vgvn:",9223372036854775807,,,,,,,,,,,,,"2021-12-21 08:13;erikj;This fails when trying to diff between two hashes and one of them isn't present in the local repository. The old hash, that was replaced with the force-push, is still present in the remote, and if you are lucky, it will also be present in the local if the WorkItem ends up running in a scratch area that happens to have this object fetched. This does rely on luck though and most of the time, it's unlikely that the previous hash actually is present. I think we need to explicitly fetch it before trying to generate the webrev.;;;","2021-12-22 10:26;erikj;Investigating this, and trying to adapt one of the tests to reproduce it, uncovered some issues with the test setups. When instantiating HostedRepository objects through the TestCredentials class, every HostedRepository instance is using the same Git repository as the actual backend. This is causing some pretty weird behavior when testing mlbridge functionality that I can't imagine being intentional. The same repository is used both for the source and target of the PR, as well as the mlbridge archive (where each mail is stored). This mixing of completely unrelated functionality makes me question the validity of the tests. At least those touching the area of this bug weren't really testing what I assumed they were intended to test. I've tried to fix this for my new test as well as the one I based my test on (rebase), but I believe a bigger overhaul will be needed here as a separate change.;;;","2021-12-22 11:22;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/skara/pull/1267
Date: 2021-12-22 19:21:31 +0000
;;;","2022-01-07 06:47;roboduke;Changeset: 45386784
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-01-07 14:47:09 +0000
URL:       https://git.openjdk.java.net/skara/commit/453867848fe3e8d80af4667741decbb50010d49e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CSRBot throws intermittent exception when looking up JiraIssue links,SKARA-1295,5065094,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-12-20 15:41,2022-01-06 15:00,2023-10-01 09:56,2022-01-06 15:00,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"Since (I believe) SKARA-1071, we are seeing quite frequent intermittent exceptions from the CSRBot. This comes from a failure to look up the issue when following an issue link. I'm still not sure why this happens and why it's not consistently happening.

java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.orElseThrow(Optional.java:377)
	at org.openjdk.skara.issuetracker/org.openjdk.skara.issuetracker.jira.JiraIssue.lambda$links$9(JiraIssue.java:372)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at org.openjdk.skara.issuetracker/org.openjdk.skara.issuetracker.jira.JiraIssue.links(JiraIssue.java:376)
	at org.openjdk.skara.bots.csr/org.openjdk.skara.bots.csr.CSRBot.csrLink(CSRBot.java:64)
	at org.openjdk.skara.bots.csr/org.openjdk.skara.bots.csr.CSRBot.run(CSRBot.java:88)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.runMeasured(BotRunner.java:190)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:146)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1071,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vgp7:",9223372036854775807,,,,,,,,,,,,,"2021-12-21 06:11;erikj;Deploying a temporary change with a more detailed exception message for just this bot.;;;","2021-12-22 00:20;gli;It seems that some issue links don't have both `inwardIssue` and `outwardIssue`. The issue links should be similar to the following json:

```
    ""issuelinks"": [
      {
        ""id"": ""10001"",
        ""type"": {
          // ignore
        },
        ""outwardIssue"": { // or `inwardIssue`
          // ignore
        }
      },
      {
       // ignore other issue links
      }
    ]
```

If the issue links has no `inwardIssue` and `outwardIssue`, which is like the following json, the method `JiraIssue::links` will throw the NoSuchElementException with ""No value present"".

```
    ""issuelinks"": [
      {
        ""id"": ""10001"",
        ""type"": {
          // ignore
        }
        //  has no ""outwardIssue` and `inwardIssue`
      },
      {
       // ignore other issue links
      }
    ]
```

I don't know which issue has these incorrect issue links now. But the implementation of the method `JiraIssue::links` should be adjusted to solve this situation.;;;","2021-12-22 06:01;erikj;No, the inwardIssue/outwardIssue properties are there, otherwise we would get NPE when trying to call get() on it. The exception here is from the orElseThrow() call. JiraProject::issue is returning an empty Optional. This also seems to be intermittent, only happening sometimes, but enough to be very distracting in the admin notifications.

I have some instances with the improved logging so I can investigate more today (if I have time). My best guess is that it's either Jira failing in some way, or some kind of race. I may need to add additional logging to see exactly why JiraProject::issue returns empty.;;;","2021-12-22 09:00;gli;Your analysis is right. I misread the code.;;;","2021-12-22 12:20;erikj;Added additional logging. Waiting for it to reproduce again.;;;","2021-12-22 16:02;erikj;The error code is 401 (unauthorized), so this has something to do with confidential issues.;;;","2021-12-23 07:29;erikj;I have a theory on this. It only seems to be happening for issues that require authentication to read. The authentication is provided by a Vault server, which hands out time limited tokens. Skara has logic for probing and renewing the token when necessary, but looking at this logic, there is a potential race. If the token times out right after the probe happens, but before the actual request is sent, then we would get a 401. Given how this only happens once or twice every few hours, this theory seems plausible. I think the reason this is happening so much for CSRBot is that it hammers JBS with requests for bugs much more often than any other bot before. I have also seen failures in other bots since I enabled this logging, but it's certainly not as common.;;;","2021-12-23 09:56;erikj;I'm going to try a fix for this. It turned out to be simpler than I had anticipated. There is already a retry loop in RestRequest that retries up to 5 times on IOException. Here we can check if we have dynamic authorization enabled and if so also retry on 401.;;;","2021-12-23 14:24;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/skara/pull/1268
Date: 2021-12-23 22:23:23 +0000
;;;","2022-01-03 09:39;erikj;My attempted fix did not solve the problem. I believe this is because java.net.http.HttpRequest.Builder::headers only adds headers, it doesn't replace them, so the new authentication header is just added after the previous one.;;;","2022-01-06 15:00;roboduke;Changeset: 6a7ae943
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-01-06 23:00:13 +0000
URL:       https://git.openjdk.java.net/skara/commit/6a7ae9436fa21757f11ff84e44ddfd4b778520be
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The Skara bot should not add review links or comments to CSR issues,SKARA-1293,5065014,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,kcr,kcr,2021-12-18 09:26,2021-12-22 06:06,2023-10-01 09:56,2021-12-22 06:06,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,A recent change to the Skara notifier bot lists the associated CSR for the issue under review in the pull request. This seems to have had the side effect of adding a JBS issue link and comment with a pointer to the PR for CSR issues. I find it somewhat confusing to see this link and comment on the CSR issue. See JDK-8269514 for an example.,".
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vg7f:",9223372036854775807,,,,,,,,,,,,,"2021-12-22 03:59;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/skara/pull/1266
Date: 2021-12-22 11:58:53 +0000
;;;","2021-12-22 06:06;roboduke;Changeset: 56bdc6ee
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2021-12-22 14:06:02 +0000
URL:       https://git.openjdk.java.net/skara/commit/56bdc6eefd2ce9be686efa7b231611a83503032e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Empty commit message causes IndexOutOfBoundsException,SKARA-1292,5064991,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2021-12-17 11:27,2021-12-20 09:55,2023-10-01 09:56,2021-12-20 09:55,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"If a commit contains no message, then Skara will throw IndexOutOfBoundsException in CommitCommentsWorkItem. This needs to be handled better.

java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)
	at java.base/java.util.Objects.checkIndex(Objects.java:359)
	at java.base/java.util.ArrayList.get(ArrayList.java:427)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CommitCommentsWorkItem.run(CommitCommentsWorkItem.java:86)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.runMeasured(BotRunner.java:190)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:146)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1267,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vg2b:",9223372036854775807,,,,,,,,,,,,,"2021-12-17 14:08;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/skara/pull/1265
Date: 2021-12-17 22:07:03 +0000
;;;","2021-12-20 09:55;roboduke;Changeset: f95f606e
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-12-20 17:54:42 +0000
URL:       https://git.openjdk.java.net/skara/commit/f95f606e226ded17e39dcd21028eed789156f8d4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in org.openjdk.skara.issuetracker.Label.compareTo,SKARA-1291,5064939,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-12-16 13:37,2021-12-20 14:45,2023-10-01 09:56,2021-12-20 14:45,,,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,,,"Recently, we have started seeing NPEs being thrown in org.openjdk.skara.issuetracker.Label::compareTo when called from GitLabMergeRequest::links. This seems to be caused by adding of labels while the GitLabMergeRequest object is active. The labelNameToLabel map is initiated in the constructor based on the repository labels. This may get outdated while the GitLabMergeRequest instance is still alive. We need to either make sure this map is kept up to date, or simply ignore the null values that come out of it.

java.lang.NullPointerException: Cannot read field ""name"" because ""l"" is null
	at org.openjdk.skara.issuetracker/org.openjdk.skara.issuetracker.Label.compareTo(Label.java:52)
	at org.openjdk.skara.issuetracker/org.openjdk.skara.issuetracker.Label.compareTo(Label.java:29)
	at java.base/java.util.Comparators$NaturalOrderComparator.compare(Comparators.java:52)
	at java.base/java.util.Comparators$NaturalOrderComparator.compare(Comparators.java:47)
	at java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)
	at java.base/java.util.TimSort.sort(TimSort.java:220)
	at java.base/java.util.Arrays.sort(Arrays.java:1307)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:353)
	at java.base/java.util.stream.Sink$ChainedReference.end(Sink.java:258)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.gitlab.GitLabMergeRequest.labels(GitLabMergeRequest.java:682)
	at org.openjdk.skara.issuetracker/org.openjdk.skara.issuetracker.Issue.labelNames(Issue.java:163)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CheckWorkItem.run(CheckWorkItem.java:360)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.runMeasured(BotRunner.java:190)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:146)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vfqr:",9223372036854775807,,,,,,,,,,,,,"2021-12-20 14:45;roboduke;Changeset: 87d9845d
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-12-20 22:45:09 +0000
URL:       https://git.openjdk.java.net/skara/commit/87d9845dc1c5ff957836c4ff42392602d523b587
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Adjust the implementation of the 'reviewers' command to match the documentation,SKARA-1288,5064816,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,gli,gli,gli,2021-12-14 18:40,2022-03-29 06:28,2023-10-01 09:56,2022-03-29 06:28,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"When using the command `/reviewers 2 reviewer` in the [PR-6752](https://github.com/openjdk/jdk/pull/6752), the bot replied the following message:

```
@DamonFool Usage: /reviewers <n> [<role>] where <n> is the number of required reviewers. If role is set, the reviewers need to have that project role. If omitted, role defaults to authors.
Number of required reviewers of role reviewers cannot be decreased below 3
```

It is wrong, and the command `/reviewers 2 reviewer` should be executed correctly. 

---

Update:

I read the code in the class `ReviewersCommand` and `ReviewersTracker`. It seems the current code doesn't match the [documentation](https://wiki.openjdk.java.net/display/SKARA/Pull+Request+Commands#PullRequestCommands-/reviewers).  So I would like to adjust the implementation and refactor these two classes to meet the documentation.

The original title: `The command '/reviewers 2 reviewer' can't be executed correctly`.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-217,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vezf:",9223372036854775807,,,,,,,,,,,,,"2021-12-15 14:30;erikj;I agree that the error message printed when running `/reviewers 2 reviewer` is completely wrong. I also agree that the documentation and the current behavior are in disagreement. What I'm not sure about is how the command is supposed to work. Here are some questions I have to kick of a discussion.

1. Should multiple command invocations add and subtract to and from a current maintained state in the PR, or should each new command invocation just override any previous command for a given role?
2. Should it be possible to decrease the reviewer requirements below what's defined in .jcheck/conf?;;;","2021-12-16 01:01;gli;> Should multiple command invocations add and subtract to and from a current maintained state in the PR, or should each new command invocation just override any previous command for a given role?

From the previous implementation, I find the new command would override the old command. The old command will become invalid completely. And my patch is following this convention.

> Should it be possible to decrease the reviewer requirements below what's defined in .jcheck/conf?

If we permit this behavior, the author who is also a reviewer can type `/reviewers 0` to escape the review phase and integrate the patch directly. And IMO, the .jcheck/conf is the minimal requirement of the patch.;;;","2022-03-25 02:09;gli;This issue has been around for a long time. And the PR was provided. Maybe we should push it forward.;;;","2022-03-28 13:27;erikj;I have looked through the old implementation and your patch again. I also found the original discussion in the PR for SKARA-217. I must say I was surprised that a new /reviewers command would completely override the previous one. I would have imagined that something like this would be valid and result in requiring both 2 committers and 2 reviewers:

/reviewers 2 committer
/reviewers 2 reviewer

I suppose the initial implementation didn't allow for custom roles, so just setting a new number makes sense to completely override. I also don't think we really need to customize that much with X number of one role and Y number of another role for a specific PR, so the proposed functionality is adequate. I do however think that we need to make it very clear that this is indeed how the command is intended to work. The lack of a clear specification and documentation is what threw me off from the start. EDIT: I added a note about this to the documentation on the wiki.

Your proposed patch looks like it's doing the right thing. It needs to update copyright years now, and I may want to tweak the language in some places. I will go over it again.;;;","2022-03-29 06:28;roboduke;Changeset: 919cef49
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-03-29 13:27:42 +0000
URL:       https://git.openjdk.java.net/skara/commit/919cef4910c461a3eb60a97c05f8a6c43923141e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failures with Mercurial 6.0,SKARA-1283,5064765,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-12-14 07:05,2021-12-14 10:02,2023-10-01 09:56,2021-12-14 10:02,,,,,,,,,1.0,libraries,,1,,,,,,,,,,,,,,,,,,,,"The github actions on Macos are failing several tests. This seems to be caused by brew now giving us Mercurial 6.0 and some kind of incompatibility with that version in Skara.

Further investigation gives that the problem is the hg extension ""git-log"" which Skara dynamically uses with HG.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2veo3:",9223372036854775807,,,,,,,,,,,,,"2021-12-14 10:02;roboduke;Changeset: 68394f56
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-12-14 18:02:26 +0000
URL:       https://git.openjdk.java.net/skara/commit/68394f56961411ad1454b441341441e3aea3f233
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jcheck fails to run due to IllegalStateException,SKARA-1281,5064500,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-12-10 10:47,2021-12-14 08:36,2023-10-01 09:56,2021-12-14 08:36,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"In https://github.com/openjdk/jdk/pull/6637, jcheck currently fails to run, which is keeping the PR in limbo. Here follows the chain of events that lead to this.

1. The source branch of the PR is far behind the target repo, which causes the automatic rebasing attempt by Skara before running Jcheck to fail. Skara then commits the complete state of the source branch on top of the target branch for the sake of running Jcheck on something.
2. We recently had this change go into mainline, which removed the old .hgtags files https://github.com/openjdk/jdk/commit/62a7f5d3236ab2248518a475b1d8b71cb4bf1313. This change is among the commits missing in the source branch.
3. The hg-tags check only triggers if any of the patches contain a file ending in .hgtags, which the change in 2 does, and because of 1, the commit jcheck is evaluating contains the re-adding of .hgtags, so this check fails.
4. The PullRequestCheckIssueVisitor is so sure that hg-tags would never fail, that it throws IllegalStateException if it does, which fails the complete WorkItem run.

I'm not completely sure what the correct fix here is. Throwing exceptions in Skara bot WorkItems is sensitive as it prevents the WorkItem from finishing. In this case, I think we need to handle this failure and not throw the exception. It's certainly unexpected, but still, if the repository has the hg-tags check configured, it should be checked and honored. Maybe it should just be ignored as the only way we know it would get triggered is if something else has already failed (the rebase in this case).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vd17:",9223372036854775807,,,,,,,,,,,,,"2021-12-14 08:36;roboduke;Changeset: 3caed6e5
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-12-14 16:35:59 +0000
URL:       https://git.openjdk.java.net/skara/commit/3caed6e5aa18b359b4a2cae61a2fb931dadd2837
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Eclipse Version Number requires update in Update Site Index page.,JMC-7555,5067913,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,vpurnam,bbanathur,bbanathur,2022-02-06 07:55,2022-04-05 10:56,2023-10-01 09:56,2022-04-05 10:56,8.2.0,,,,,,,,8.2.0,Infrastructure,,0,sqe-8.2.0,,,,,,,,,,,,,,,,,,,"# The eclipse version number could be updated on IDE update-site index pages for both oracle and openjdk ide plugins from( 4.20 to 4.21)

     2. JConsole plug-in support for the Management Console. does not work as expected , also it gets overridden when ThreadLogic plugin is installed.  Hence the reference to JConsole plug-in support could be removed from the IDE pages as well.

 
 * Requires Eclipse 4.20 or later.
 * Requires Eclipse 4.20 or later.
 * Requires Eclipse 4.20 or later.
 * JDK Mission Control is a set of plug-ins for Eclipse 4.20 or later.
 * Before starting, make sure that you have downloaded and installed Eclipse 4.20 or later.

|Before starting, make sure that you have downloaded and installed Eclipse 4.20 or later and installed the [JDK Mission Control base Plug-ins|https://download.oracle.com/technology/products/missioncontrol/updatesites/oracle/8.2.0/ide/].|

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vxu3:",9223372036854775807,,,,,,,,,,,,,"2022-03-27 01:12;bbanathur;Installation of JMC (as an IDE plugin) will fail with the following error message, if attempted in 4.20
{code:java}
An error occurred while collecting items to be installed
session context was:(profile=epp.package.committers, phase=org.eclipse.equinox.internal.p2.engine.phases.Collect, operand=, action=).
No repository found containing: osgi.bundle,org.eclipse.emf.common,2.24.0.v20220123-0838
No repository found containing: osgi.bundle,org.eclipse.emf.ecore,2.26.0.v20220123-0838
No repository found containing: org.eclipse.update.feature,org.eclipse.emf.common,2.25.0.v20220123-0838
No repository found containing: org.eclipse.update.feature,org.eclipse.emf.ecore,2.27.0.v20220123-0838
No repository found containing: osgi.bundle,org.objectweb.asm.analysis,9.2.0.v20210813-1119
{code}
 

 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IItemCollectionJsonSerializerTest.java might fail on Windows due to line endings,JMC-7540,5066819,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,clanger,clanger,clanger,2022-01-21 07:53,2022-04-06 22:30,2023-10-01 09:56,2022-01-22 06:25,,,,,,,,,8.2.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,,,"The test IItemCollectionJsonSerializerTest.java failed on my Windows system. In the git repository, the golden file iitemcollection.json has Unix line endings. On Windows, the returned data from IItemCollectionJsonSerializer.toJsonString(testRecording) seems to have platform line endings.

The test should normalize this.",,,,,,,,,,JMC-7749,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vrcb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42a4684c,,,,,,,,,"2022-01-21 08:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/370
Date: 2022-01-21 15:57:41 +0000;;;","2022-01-22 06:25;roboduke;Changeset: 3d036435
Author:    Christoph Langer <clanger@openjdk.org>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2022-01-22 14:25:09 +0000
URL:       https://git.openjdk.java.net/jmc/commit/3d0364353bee86b742a351c5617032b1d1b8aa0c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDP Tests failing in VPN environments,JMC-7539,5066806,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,clanger,clanger,clanger,2022-01-21 04:35,2022-04-06 22:30,2023-10-01 09:56,2022-01-24 08:06,,,,,,,,,8.2.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,,,"The tests org.openjdk.jmc.jdp.client.JDPClientTest and org.openjdk.jmc.jdp.client.{color:#242424}JDPClientTest fail in scenarios where Multicasting is not possible, e.g. when a VPN is turned on and reconfigured the routing configuration.{color}

{color:#242424}The testing should be improved to warn about this and explain what can possibly be done, including a way to skip the tests as a last resort.{color}",,,,,,,,,,JMC-7751,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vr9f:",9223372036854775807,,,,,,,,,,,,,"2022-01-21 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/369
Date: 2022-01-21 14:25:16 +0000;;;","2022-01-24 08:06;roboduke;Changeset: f3ca1b12
Author:    Johannes Bechberger <johannes.bechberger@sap.com>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2022-01-24 16:05:36 +0000
URL:       https://git.openjdk.java.net/jmc/commit/f3ca1b120449ecb2d77cfc7f5116da79d6a4cefe
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build script assumes that Darwin always targets x86_64,JMC-7537,5066716,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,reinhapa,mdoerr,mdoerr,2022-01-20 02:30,2022-04-06 22:30,2023-10-01 09:56,2022-01-21 10:21,,,,,,,,,8.2.0,Release Engineering,,0,,,,,,,,,,,,,,,,,,,,"""./build.sh"" does not select the correct processor architecture on Mac M1 which is aarch64 instead of x86_64.",,,,,,,,,,JMC-7748,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2vqpf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5dc4c445,,,,,,,,,"2022-01-20 02:31;mdoerr;On behalf of Johannes Bechberger.;;;","2022-01-20 02:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/366
Date: 2022-01-20 10:38:35 +0000;;;","2022-01-21 10:21;roboduke;Changeset: baa6c777
Author:    Johannes Bechberger <johannes.bechberger@sap.com>
Committer: Patrick Reinhart <reinhapa@openjdk.org>
Date:      2022-01-21 18:20:43 +0000
URL:       https://git.openjdk.java.net/jmc/commit/baa6c777e461982b9c8d729fcac799abe2c004b0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Delay in realtime rendering of graphs  in JMX Console,JMC-7532,5066464,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,vpurnam,bbanathur,bbanathur,2022-01-18 08:13,2022-04-06 22:31,2023-10-01 09:56,2022-02-09 08:57,8.2.0,,,,,,,,8.2.0,Mission Control Client,,0,regression,sqe-8.2.0,,,,,,,,,,,,,,,,,,"Real-time rendering of graphs in the JMX console does not happen automatically. It often requires a manual intervention such as a mouse click on the graph. Please see the Memory graph below.

There's a delay in repeated update/rendering of graphs as can be seen from image 2 below, Started noticing this issue more often with 4.21 version of Eclipse SDK most frequently on macOS

!image-2022-01-18-21-36-49-712.png|width=999,height=549!

 

!image-2022-01-20-14-25-25-197.png|width=999,height=498!

 ",,,,,,,,,,JMC-7757,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-01-18 08:06;bbanathur;image-2022-01-18-21-36-49-712.png;https://bugs.openjdk.org/secure/attachment/97658/image-2022-01-18-21-36-49-712.png","2022-01-20 00:55;bbanathur;image-2022-01-20-14-25-25-197.png;https://bugs.openjdk.org/secure/attachment/97669/image-2022-01-20-14-25-25-197.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vp5f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5162edbb,,,,,,,,,"2022-01-20 14:22;hirt;Maybe you can take a look at this one Virag?;;;","2022-01-31 05:41;vpurnam;Hi [~hirt], I have checked this on windows, it works fine on windows. I need to try that on macOS.  [~bbanathur] has also mentioned that the issue is reproducible on macOS. ;;;","2022-02-03 08:42;hirt;I can verify that this seems to be an issue on Mac OS X.;;;","2022-02-03 08:50;bbanathur;We had earlier noticed similar issues with JMC 8.0.0 on BigSur  (ref JMC-7207, JMC-7206) But the issue got resolved possibly after the Eclipse SDK version upgrade in JMC 8.1.0.

Even this time (JMC v8.2.0) it's observed more frequently after the eclipse version upgrade to  v4.21.

 

 ;;;","2022-02-04 00:22;vpurnam;[~hirt], [~bbanathur] : I have found the root cause of this issue. Widget redraw() method has been called conditionally. It has not been called for MacOS to solve ""console dials causing high CPU load on Mac"". If redraw() method is called, realtime rendering happens for macOS as well. I do not see any high CPU load (May be issue with older versions of OS). I think, this change can be done. As part of inspection/review, we can get other's comments/opinions as well.;;;","2022-02-04 04:34;hirt;Sounds good! Thanks Virag!;;;","2022-02-08 17:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/375
Date: 2022-02-04 19:31:30 +0000;;;","2022-02-09 08:57;roboduke;Changeset: e3549e9b
Author:    vpurnam <vpurnam@VPURNAM-7420.in.oracle.com>
Committer: Suchita Chaturvedi <schaturvedi@openjdk.org>
Date:      2022-02-09 16:56:33 +0000
URL:       https://git.openjdk.java.net/jmc/commit/e3549e9bd809e0a06d8e751c4026fd22e70b5939
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove 2020-06 platform,JMC-7510,5066278,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,hirt,hirt,hirt,2022-01-14 05:40,2022-04-06 22:29,2023-10-01 09:56,2022-01-14 07:06,,,,,,,,,8.2.0,Release Engineering,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7743,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vo03:",9223372036854775807,,JMC 8.2 Sprint 3,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4bcb9d9e,,,,,,,,,"2022-01-14 05:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/358
Date: 2022-01-14 13:44:04 +0000;;;","2022-01-14 07:06;roboduke;Changeset: 80fce51c
Author:    Marcus Hirt <hirt@openjdk.org>
Date:      2022-01-14 15:06:10 +0000
URL:       https://git.openjdk.java.net/jmc/commit/80fce51c6dc3b5c368df70d5afb10a300fbe005d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add 2021-09 target platform,JMC-7509,5066271,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,hirt,hirt,hirt,2022-01-14 04:45,2022-04-06 22:29,2023-10-01 09:56,2022-01-14 12:55,,,,,,,,,8.2.0,Release Engineering,,0,,,,,,,,,,,,,,,,,,,,"...and update babel.

Note that I'll not make it default until we've had some discussions within the team.",,,,,,,,,,JMC-7744,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vnyj:",9223372036854775807,,JMC 8.2 Sprint 3,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4bcb9d9e,,,,,,,,,"2022-01-14 05:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/357
Date: 2022-01-14 13:20:12 +0000;;;","2022-01-14 12:55;roboduke;Changeset: f8105b87
Author:    Marcus Hirt <hirt@openjdk.org>
Date:      2022-01-14 20:54:04 +0000
URL:       https://git.openjdk.java.net/jmc/commit/f8105b87ccc8b77842e100ed35b4d9556e34a6b0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fixing project setup,JMC-7507,5066177,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,hirt,hirt,hirt,2022-01-12 11:54,2022-04-06 22:29,2023-10-01 09:56,2022-01-14 07:06,,,,,,,,,8.2.0,Infrastructure,,0,,,,,,,,,,,,,,,,,,,,Some projects lack the proper configuration to make it easy to import the project into eclipse.,,,,,,,,,,JMC-7742,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vndn:",9223372036854775807,,JMC 8.2 Sprint 3,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@312b13a5,,,,,,,,,"2022-01-13 04:05;hirt;Also upgrading to Tycho 2.5.0.;;;","2022-01-13 07:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/355
Date: 2022-01-13 12:47:08 +0000;;;","2022-01-14 07:06;roboduke;Changeset: 8ade37d8
Author:    Marcus Hirt <hirt@openjdk.org>
Date:      2022-01-14 15:05:32 +0000
URL:       https://git.openjdk.java.net/jmc/commit/8ade37d84fdaca91b8b3c2999d18e61caacd6b8e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot reset websocket server port to default,JMC-7505,5066164,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,aptmac,aptmac,aptmac,2022-01-12 08:15,2022-04-06 22:29,2023-10-01 09:56,2022-01-12 08:51,8.2.0,,,,,,,,8.2.0,Mission Control Client,,0,,,,,,,,,,,,,,,,,,,,"At the moment, in the Preferences menu the default value for the Websocket server port is not hooked up, so when trying to reset the values to their default the port number is unchanged.

!websocket-reset-before.gif!",,,,,,,,,,JMC-7740,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-01-12 08:11;aptmac;websocket-reset-before.gif;https://bugs.openjdk.org/secure/attachment/97585/websocket-reset-before.gif",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vnar:",9223372036854775807,,,,,,,,,,,,,"2022-01-12 08:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/353
Date: 2022-01-12 16:17:53 +0000;;;","2022-01-12 08:51;roboduke;Changeset: 70aa834a
Author:    Alex Macdonald <aptmac@openjdk.org>
Date:      2022-01-12 16:50:20 +0000
URL:       https://git.openjdk.java.net/jmc/commit/70aa834a5eca40a4c65adc4f0e6287635f4455e3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flightrecorder.writer.test project setup,JMC-7504,5066154,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,hirt,hirt,hirt,2022-01-12 05:27,2022-04-06 22:29,2023-10-01 09:56,2022-01-12 08:19,,,,,,,,,8.2.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,,,"It's impossible to import it into Eclipse, since some of the dependencies and project files are missing.",,,,,,,,,,JMC-7739,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vn8j:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@20bacb6c,,,,,,,,,"2022-01-12 05:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/352
Date: 2022-01-12 13:46:23 +0000;;;","2022-01-12 08:19;roboduke;Changeset: be067aba
Author:    Marcus Hirt <hirt@openjdk.org>
Date:      2022-01-12 16:18:25 +0000
URL:       https://git.openjdk.java.net/jmc/commit/be067aba5dce42086deb7c9ea3f9aeecd58706b4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix serializers.test dependency,JMC-7503,5066148,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,hirt,hirt,hirt,2022-01-12 03:20,2022-04-06 22:28,2023-10-01 09:56,2022-01-12 05:57,,,,,,,,,8.2.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,,,Properly declare the flightrecorder.test dependency as a test-jar.,,,,,,,,,,JMC-7736,,,,,,,,,,,,,,,,,,,,,,,JMC-7491,JMC-7406,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vn77:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42a4684c,,,,,,,,,"2022-01-12 03:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/351
Date: 2022-01-12 10:07:19 +0000;;;","2022-01-12 05:57;roboduke;Changeset: 367914b6
Author:    Brice Dutheil <brice.dutheil@gmail.com>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2022-01-12 13:55:51 +0000
URL:       https://git.openjdk.java.net/jmc/commit/367914b671dca7652e2ed3cb52d57331dfb91a5b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to view JMC Help Contents,JMC-7494,5065514,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,aciminian,bbanathur,bbanathur,2022-01-03 08:21,2022-04-06 22:28,2023-10-01 09:56,2022-01-10 09:28,8.2.0,,,,,,,,8.2.0,Mission Control Client,,0,regression,regression_7198,sqe-8.2.0,,,,,,,,,,,,,,,,,"JMC 8.1.0 Help page was inaccessible (JMC-7321) when booted with  JDK 17 but it was working fine with JDK 11 as boot JDK.

But in JMC 8.2.0 the help contents are not accessible with the latest versions of  JDK 11, JDK 17.0.2 or JDK 18. 

 
{code:java}
HTTP ERROR 500 javax.servlet.ServletException: non-HTTP request or responseHTTP ERROR 500 javax.servlet.ServletException: non-HTTP request or response
URI: /help/index.jspSTATUS: 500MESSAGE: javax.servlet.ServletException: non-HTTP request or responseSERVLET: org.eclipse.equinox.http.jetty.internal.HttpServerManager$InternalHttpServiceServlet-1dc28fd8CAUSED BY: javax.servlet.ServletException: non-HTTP request or responseCaused by:
javax.servlet.ServletException: non-HTTP request or response at javax.servlet.http.HttpServlet.service(HttpServlet.java:578) at org.eclipse.equinox.http.jetty.internal.HttpServerManager$InternalHttpServiceServlet.service(HttpServerManager.java:308) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:764) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:508) at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:221) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1571) at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:221) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1373) at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:176) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:463) at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1544) at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:174) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1295) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:129) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:122) at org.eclipse.jetty.server.Server.handle(Server.java:562) at org.eclipse.jetty.server.HttpChannel.lambda$handle$0(HttpChannel.java:399) at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:656) at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:391) at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:282) at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:319) at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:100) at org.eclipse.jetty.io.SocketChannelEndPoint$1.run(SocketChannelEndPoint.java:101) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:894) at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:1038) at java.base/java.lang.Thread.run(Thread.java:834)
{code}",,,,,,,,,,JMC-7734,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vjaj:",9223372036854775807,,,,,,,,,,,,,"2022-01-04 08:56;aptmac;Unfortunately this looks like it was caused after the PR to add the websocket server: [https://github.com/openjdk/jmc/commit/ca204424ce32336f2923aff66f619d571b1fc720]

Reverting back to the commit before this one and the help page is working as expected (on Linux at least).;;;","2022-01-09 07:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/347
Date: 2022-01-09 15:04:38 +0000;;;","2022-01-10 09:28;roboduke;Changeset: b65e3512
Author:    Alex Ciminian <alexandru.ciminian@datadoghq.com>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2022-01-10 17:27:12 +0000
URL:       https://git.openjdk.java.net/jmc/commit/b65e3512c86ed1f59e26c08fc817079532d10752
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update versions and copyright on Update site pages,JMC-7493,5065510,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,schaturvedi,schaturvedi,schaturvedi,2022-01-03 07:10,2022-04-06 22:28,2023-10-01 09:56,2022-01-05 14:44,8.2.0,,,,,,,,8.2.0,Infrastructure,,0,,,,,,,,,,,,,,,,,,,,"+*{color:#172b4d}OpenJDK IDE Page{color}*+

{color:#172b4d}1) index.html{color}

{color:#172b4d}JConsole plug-in support for the Management Console{color}.
Requires Eclipse {color:#de350b}4.19{color} or later.
JDK Mission Control is a set of plug-ins for Eclipse {color:#de350b}4.19{color} or later.
Copyright © 1999, {color:#de350b}2021{color}, Oracle and/or its affiliates.

2) update-site-instructions/index.html

{color:#172b4d}[http://download.oracle.com/technology/products/missioncontrol/updatesites/openjdk/8.1.0]{color}/ide/
Before starting, make sure that you have downloaded and installed Eclipse {color:#de350b}4.19{color} or later.
{color:#de350b}Copyright year missing{color} -> Oracle is a registered trademark of Oracle Corporation and/or its

3) Run on JDK howto

{color:#172b4d}Copyright © 1999, 2021{color}, Oracle and/or its affiliates.

+*OpenJDK RCP Page*+
Copyright © 1999, 2021, Oracle and/or its affiliates.",,,,,,,,,,JMC-7733,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7487,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vj9n:",9223372036854775807,,,,,,,,,,,,,"2022-01-05 11:18;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jmc/pull/346
Date: 2022-01-05 19:15:52 +0000
;;;","2022-01-05 14:44;roboduke;Changeset: f077a406
Author:    Suchita Chaturvedi <schaturvedi@openjdk.org>
Date:      2022-01-05 22:44:29 +0000
URL:       https://git.openjdk.java.net/jmc/commit/f077a406946ccab1ca1f3a09e36ace76cda3243c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to install Eclipse IDE Plugin,JMC-7486,5065471,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,vpurnam,bbanathur,bbanathur,2022-01-01 07:55,2022-04-06 22:31,2023-10-01 09:56,2022-02-14 22:22,8.2.0,,,,,,,,8.2.0,Mission Control Client,,0,regression,sqe-8.2.0,,,,,,,,,,,,,,,,,,"Unable to install JMC supported Eclipse IDE Plugin, Attached is the screen recording for reproducing the issue.",,,,,,,,,,JMC-7758,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7501,,,,,,"2022-01-01 07:54;bbanathur;IDEPluginInstallation.mov;https://bugs.openjdk.org/secure/attachment/97475/IDEPluginInstallation.mov","2022-01-15 09:16;bbanathur;install.log;https://bugs.openjdk.org/secure/attachment/97607/install.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vadt:",9223372036854775807,,JMC 8.2 Sprint 3,,,,,,,,,,,"2022-01-02 20:15;psrivastava;please check if issue is reproducible on open;;;","2022-01-15 09:19;bbanathur;{code:java}
!MESSAGE Cannot complete the install because one or more required items could not be found.
!MESSAGE Missing requirement: Apache Aries SPI Fly Dynamic Weaving Bundle 1.3.4 (org.apache.aries.spifly.dynamic.bundle 1.3.4) requires 'java.package; org.objectweb.asm.commons [9.2.0,10.0.0)' but it could not be found
{code};;;","2022-02-14 11:30;vpurnam;Added dependent plugins in ""ide feature"" and also deleted one unused plugin from ""flight recorder feature"".

*Plugins added:*
""org.objectweb.asm"",
""org.objectweb.asm.commons"",
""org.objectweb.asm.tree"",
""org.objectweb.asm.util"",
""org.eclipse.jetty.webapp"",
""org.eclipse.jetty.security"",
""org.eclipse.jetty.server"",
""org.eclipse.jetty.alpn.client"",
""org.eclipse.jetty.servlet"",
""org.eclipse.jetty.http"",
""org.eclipse.jetty.io"",
""org.eclipse.jetty.util"",
""org.eclipse.jetty.xml"",
""org.eclipse.jetty.websocket.core.client"",
""org.eclipse.jetty.websocket.core.common"",
""org.eclipse.jetty.websocket.core.server"",
""org.eclipse.jetty.websocket.common"",
""org.eclipse.jetty.client""

*Plugin removed:*
""org.eclipse.jetty.websocket.javax.server"";;;","2022-02-14 11:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/377
Date: 2022-02-14 19:26:39 +0000;;;","2022-02-14 11:32;vpurnam;Adding dependent plugins manually will solve the issue, but we need to also check if maven build/package should automatically fetch all the required plugins. 

We need to investigate in this area.;;;","2022-02-14 22:22;roboduke;Changeset: 1844ca4c
Author:    vpurnam <vpurnam@VPURNAM-7420.in.oracle.com>
Committer: Suchita Chaturvedi <schaturvedi@openjdk.org>
Date:      2022-02-15 06:21:16 +0000
URL:       https://git.openjdk.java.net/jmc/commit/1844ca4ccc5a0f4b47dda1b01da427a00e13910d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"JMC Application, Plugins and License Copyright year requires update",JMC-7485,5065470,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,schaturvedi,bbanathur,bbanathur,2022-01-01 07:15,2022-04-06 22:29,2023-10-01 09:56,2022-01-12 05:58,8.2.0,,,,,,,,8.2.0,Mission Control Client,,0,sqe-8.2.0,,,,,,,,,,,,,,,,,,,"The copyright year has to be 2022 on JMC About, Plugin licence etc.

!image-2022-01-01-20-44-12-560.png|width=336,height=179!

 ",,,,,,,,,,JMC-7737,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-01-01 07:14;bbanathur;image-2022-01-01-20-44-12-560.png;https://bugs.openjdk.org/secure/attachment/97474/image-2022-01-01-20-44-12-560.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vj0r:",9223372036854775807,,,,,,,,,,,,,"2022-01-11 13:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/350
Date: 2022-01-11 21:29:26 +0000;;;","2022-01-12 05:58;roboduke;Changeset: b6bf40f8
Author:    Suchita Chaturvedi <schaturvedi@openjdk.org>
Date:      2022-01-12 13:56:59 +0000
URL:       https://git.openjdk.java.net/jmc/commit/b6bf40f821e959a529f007e282e7e8e4077e9457
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Confusing display of stack traces when selecting event types with no events,JMC-7482,5065279,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,jpbempel,hirt,hirt,2021-12-23 04:08,2022-04-06 22:28,2023-10-01 09:56,2022-01-10 13:46,,,,,,,,,8.2.0,Mission Control Client,,0,,,,,,,,,,,,,,,,,,,,"I think this might have been by design to show the aggregate of all stack traces without an explicit selection, but it's confusing.

From Frank Kriegl:

To reproduce:
 # select the event ""flight recording"" (A). no stack trace is shown.
 # select the event ""Allocation in new TLAB"" (B). a stack trace is shown (this is expected)
 # click on (A) again, so the stack trace view is emptied.
 # select the event ""Biased Lock Revocation"" (C). No events are found, but a stack trace is displayed (this is not expected, compare with the configuration)",,,,,,,,,,JMC-7735,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-12-23 04:08;hirt;flight_recording_enabled-true_stack-trace-false.jfr;https://bugs.openjdk.org/secure/attachment/97445/flight_recording_enabled-true_stack-trace-false.jfr",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vhub:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1c80c3d6,,,,,,,,,"2021-12-23 13:55;jpbempel;The problem is because the default Selection Filter is `ItemFilters.all()` for event browser.

I guess the idea was to get all items when nothing is selected, the thing is when you select an empty event type it falls back to all items

What we could do is to keep the case where nothing is selected and having all items, but when something is selected (event types or category) with no event we filter accordingly.;;;","2021-12-27 10:17;hirt;I think that's a good way forward.;;;","2021-12-29 08:50;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jmc/pull/344
Date: 2021-12-29 16:48:22 +0000
;;;","2022-01-10 13:46;roboduke;Changeset: ce10e3f9
Author:    Jean-Philippe Bempel <jpbempel@openjdk.org>
Date:      2022-01-10 21:44:42 +0000
URL:       https://git.openjdk.java.net/jmc/commit/ce10e3f99d7644f14099bde14be7cff74e5f8b85
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMC8.2 does not build with eclipse 4.19 (21-03),JMC-7477,5064547,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,hirt,psrivastava,psrivastava,2021-12-12 19:24,2022-04-06 22:30,2023-10-01 09:56,2022-01-21 07:38,8.2.0,,,,,,,,8.2.0,Release Engineering,,0,,,,,,,,,,,,,,,,,,,,"JMC8.2 does not build with eclipse 4.19 with unresolved dependencies.

Does JMC8.2 mandates using Eclipse 4.20 ?",,,,,,,,,,JMC-7747,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vdbn:",9223372036854775807,,,,,,,,,,,,,"2021-12-13 11:47;aptmac;Here's the error message I see:

[ERROR] Cannot resolve target definition:
 [ERROR] Software being installed: org.eclipse.platform.sdk 4.19.0.I20210303-1800
 [ERROR] Missing requirement for filter properties ~= $0: org.eclipse.equinox.p2.core.feature.feature.group 1.6.900.v20210227-0235 requires 'org.eclipse.equinox.p2.iu; org.eclipse.equinox.security.macosx [1.101.300.v20210212-1601,1.101.300.v20210212-1601]' but it could not be found
 [ERROR] Cannot satisfy dependency: org.eclipse.equinox.p2.user.ui.feature.group 2.4.1100.v20210227-0235 depends on: org.eclipse.equinox.p2.iu; org.eclipse.equinox.p2.core.feature.feature.group [1.6.900.v20210227-0235,1.6.900.v20210227-0235]
 [ERROR] Cannot satisfy dependency: org.eclipse.platform.sdk 4.19.0.I20210303-1800 depends on: org.eclipse.equinox.p2.iu; org.eclipse.equinox.p2.user.ui.feature.group [2.4.1100.v20210227-0235,2.4.1100.v20210227-0235]
 [ERROR] 
 [ERROR] Failed to resolve target definition /home/almac/workspace/jmc/releng/platform-definitions/platform-definition-2021-03/platform-definition-2021-03.target: See log for details -> [Help 1]

It looks to be an issue with the aarch64 environment. To verify, if you remove the aarch64 environment in the jmc pom ([https://github.com/openjdk/jmc/blob/master/pom.xml#L255|https://github.com/openjdk/jmc/blob/master/pom.xml#L255)]) then the build progresses as expected. The Mac OSX aarch64 environment was added in: https://bugs.openjdk.java.net/browse/JMC-7440

Taking a look at the Eclipse downloads, it looks like the Mac OSX aarch64 SDK was released starting in 4.20.
 4.19: [https://archive.eclipse.org/eclipse/downloads/drops4/R-4.19-202103031800/]
 4.20: [https://archive.eclipse.org/eclipse/downloads/drops4/R-4.20-202106111600/]

As a result, building JMC using any non-4.20 target platform right now would probably fail. The work around would be to manually remove the aarch64 environment from the pom if you're doing builds using versions < 4.20, but it'd probably be better if there was some profile or check somewhere to only add an aarch64 platform if the target platform is at least 4.20.;;;","2021-12-13 11:57;aptmac;On further thought, maybe it'd be nice to have the option to specify which platforms we build. Thoughts? Otherwise it's pretty funny that if anything Windows/Mac goes down Eclipse side my Linux builds will go down with it.;;;","2022-01-16 06:27;hirt;Any vendor still locked into using 4.19? If not, I'd be happy to remove the versions <= 4.19.;;;","2022-01-16 06:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/361
Date: 2022-01-16 14:35:20 +0000;;;","2022-01-20 14:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/367
Date: 2022-01-20 22:16:09 +0000;;;","2022-01-21 07:38;roboduke;Changeset: c646b146
Author:    Marcus Hirt <hirt@openjdk.org>
Date:      2022-01-21 15:37:12 +0000
URL:       https://git.openjdk.java.net/jmc/commit/c646b1463c5317e279729440bd6b85ff0764a953
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Locale information for nb is not working properly,JDK-8282227,5067230,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,naoto,webbuggrp,webbuggrp,2022-01-27 05:33,2023-03-31 04:10,2023-10-01 09:56,2022-04-29 10:23,17,18,19,,,,,,19,core-libs,,0,dcsaw,jdk17u-fix-request,jdk17u-fix-yes,regression,reproducer-yes,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When using the locale 'nb', information like weekdays, monthname etc. is not correct when a locale of 'nn' also has been used first. By not correct I mean they are expressed as some default language eg. english. 

I believe that the reason for this bug is a regression for commit https://github.com/openjdk/jdk/commit/f6e54f2f9a27d08b8789244d86354167f1478bb5
Here nb.xml and other files have lost a lot of information. It was deleted in above state commit. Somehow in the language bundle selection there is code that tries to get the correct bundle for a given locale. This ends up in a bad state and english locale data is the result. I believe that the nb.xml should get the data back.


REGRESSION : Last worked in version 14

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
You just need to run some code to reproduce this.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
nn: [, sø., må., ty., on., to., fr., la.]
nb: [, søn., man., tir., ons., tor., fre., lør.]

ACTUAL -
nn: [, sø., må., ty., on., to., fr., la.]
nb: [, Sun, Mon, Tue, Wed, Thu, Fri, Sat]

---------- BEGIN SOURCE ----------
System.out.println(""nn: "" + Arrays.deepToString(DateFormatSymbols.getInstance(Locale.forLanguageTag(""nn"")).getShortWeekdays()));
System.out.println(""nb: "" + Arrays.deepToString(DateFormatSymbols.getInstance(Locale.forLanguageTag(""nb"")).getShortWeekdays()));
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
No known workaround.

FREQUENCY : always


",,,,,,,,,,JDK-8302439,JDK-8305375,JDK-8302183,,,,,,,,,,,,,,,,,,,,,JDK-8301945,,,JDK-8301945,,,,,,,,,,,,JDK-8258794,,,,,,"2022-02-22 01:18;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/98042/Main.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,b19,17,,generic,,,,,"0|i2vtvn:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,Verified,,"2022-02-22 01:17;tongwan;The observations on Windows 10:
JDK 17ea+18: Passed.
JDK 17eab19: Failed, incorrect outputs.
JDK 18ea+29: Failed.
JDK 19ea+3: Failed.;;;","2022-02-22 10:09;naoto;Looks like caching those Norwegian locales, which is irregularly handled, seems to have some bug.;;;","2022-04-22 16:14;naoto;Caused by the change in CLDR 39 which broke the locale data inheritance. From their release notes (https://cldr.unicode.org/index/downloads/cldr-39)
---
Norwegian. There was a significant change in the way that Norwegian was handled. The no/nb/nn codes predated the 
development of the macrolanguage structure, and this change brings it into alignment with other languages.

Formerly, nb was the main locale, and no was an alias to it. With this change, no is now the main locale, and nb inherits from it. All of the data that was in nb was moved to no. Due to locale data inheritance, resolved nb and no has the same contents that they had before, so conformant implementations should see no differences.

Additionally, nn is now inheriting from no. Practically speaking, this means that where there is missing data in nn, the data from no will be used. That would not be as satisfactory has having full data in nn, but is probably better than inheriting from root (English).

Implementations need to be aware of these changes, since they may expose assumptions in the code using CLDR that cause problems. 

In particular, any fast-path code that assumes that a language subtag alone (like nn) must inherit from root needs to be changed (this was the case for both CLDR internal code and for ICU).

nn (and nb) is no longer independent of no: if an implementation strips out locale data, it must not strip out no if it has nn or nb.;;;","2022-04-22 16:20;naoto;A workaround is to use the COMPAT provider (java -Djava.locale.provider=COMPAT), although the translations are a bit different from CLDR, but certainly not in English.;;;","2022-04-25 17:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8394
Date: 2022-04-26 00:32:48 +0000;;;","2022-04-29 10:23;dukebot;Changeset: 3d07b3c7
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-04-29 17:20:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3d07b3c7f01b60ff4dc38f62407c212b48883dbf
;;;","2023-03-28 03:23;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Small risk, obvious failure
Clean backport.
Test passes and fails without the fix.SAP nighlty testing passed inlcuding 8278434.;;;","2023-03-28 03:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1220
Date: 2023-03-28 10:27:54 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Matcher.hitEnd returns unexpected results in presence of CANON_EQ flag.,JDK-8281560,5068081,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,igraves,webbuggrp,webbuggrp,2022-02-08 06:20,2023-05-21 23:54,2023-10-01 09:56,2022-03-08 08:34,11,17,18,19,,,,,19,core-libs,,0,18ea,19ea,dcsaw,regression,reproducer-yes,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When matching the string `a1a1` with two regexes: `(a+|1+)` and `([a]+|[1]+)`, the results returned by `hitEnd` for the 3rd match differ. This is unexpected because the two regexes should be completely equivalent. The situation only occurs if the `CANON_EQ` flag is provided. If it is not provided, the results are again consistent.

The results were consistent in Java 1.8. It's been tested in JDK 11, 17 and 19 that the results are inconsistent.

REGRESSION : Last worked in version 8

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile the two patterns (`(a+|1+)` and `([a]+|[1]+)`) with the `CANON_EQ` option, run a matcher against input `a1a1` and compare the results returned by `hitEnd` after each match.
Notice how for the 3rd match the results will be different for the two regexes.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Matching (a+|1+) with a1a1
a
hitEnd = false
1
hitEnd = false
a
hitEnd = false
1
hitEnd = true
Matching ([a]+|[1]+) with a1a1
a
hitEnd = false
1
hitEnd = false
a
hitEnd = false
1
hitEnd = true

ACTUAL -
Matching (a+|1+) with a1a1
a
hitEnd = false
1
hitEnd = false
a
hitEnd = false
1
hitEnd = true
Matching ([a]+|[1]+) with a1a1
a
hitEnd = false
1
hitEnd = false
a
hitEnd = true
1
hitEnd = true


---------- BEGIN SOURCE ----------
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class regex {
	public static void domatch(String regex, String input) {
		Pattern pat = Pattern.compile(regex, Pattern.CANON_EQ);
		Matcher matcher = pat.matcher(input);

		System.out.println(""Matching "" + regex + "" with "" + input);

		while (matcher.find()) {
			System.out.println(matcher.group());
			System.out.println(""hitEnd = "" + matcher.hitEnd());
		}
	}

	public static void main(String[] args) {
		domatch(""(a+|1+)"", ""a1a1"");
		domatch(""([a]+|[1]+)"", ""a1a1"");
	}
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8308487,JDK-8307545,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-02-09 06:36;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/97941/Main.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,b01,11,,generic,,,,,"0|i2vyvf:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@557d5cff,,,,,,,Verified,,"2022-02-09 13:22;tongwan;The observations on Windows 10:
JDK 8: Passed.
JDK 11ea+1: Failed, 3rd match is different
JDK 17: Failed.
JDK 18ea+29: Failed.
JDK 19ea+3: Failed.;;;","2022-02-14 11:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7466
Date: 2022-02-14 19:54:00 +0000;;;","2022-03-08 08:34;dukebot;Changeset: 3fc009be
Author:    Ian Graves <igraves@openjdk.org>
Date:      2022-03-08 16:32:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3fc009be8a49f9edb8059d8612ef6ed7f048f242
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] VALUE / PRIMITIVE modifiers should be supported by reflection,JDK-8281463,5068088,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rriggs,fparain,fparain,2022-02-08 07:02,2022-09-07 07:48,2023-10-01 09:56,2022-09-06 13:18,repo-valhalla,,,,,,,,tbd,core-libs,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"The JVMS drafts for value classes and primitive classes define the following new class modifiers:
  - ACC_VALUE
  - ACC_PERMITS_VALUE
  - ACC_PRIMITIVE

Those new flags are defined in ""Table 4.1-B. Class access and property modifiers"".

Those new modifiers should be supported by the java.lang.reflect.Modifier class, which would prevent code duplication like in java.lang.Class where the missing flags are defined locally as private constant fields.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287250,,,,JDK-8280981,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vywz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2022-02-08 09:53;mchung;java.lang.reflect.Modifier API does not define all class modifiers for example ACC_ENUM and ACC_MODULE.   I'm not sure if we want to define public Modifier constants for these new flags.

To test if a class is a value class or a primitive class, the new API Class::isValue and Class::isPrimitiveClass are provided to test that.

We could consider internal ways to catch if the values are different in JVM and the libraries.;;;","2022-02-08 10:17;rriggs;We can redirect developers to use the methods on Class but since there are re-used bits, some change/clarification will be needed.  
For example, STRICT and PRIMITIVE have the same value but apply only to methods and classes respectively.
Similarly, NATIVE, and VALUE.
The Modifier methods ClassModifiers() and Interface modifiers should be clarified and corrected. 
I think that means removing STRICT and adding PRIMITIVE, even if they have the same values.
The most difficult is the toString method because it can't distinguish between Class vs Method vs Field Modifiers.;;;","2022-02-08 12:48;fparain;So, we need clear rules about what should go or not go into this class. 
One of the first question will be:  ACC_PERMITS_VALUE has been added recently, should it be kept or removed?
;;;","2022-02-08 13:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/640
Date: 2022-02-08 21:23:30 +0000;;;","2022-05-16 16:35;dlsmith;Revised spec: we now want to expose ACC_VALUE and *ACC_IDENTITY*, along with ACC_PRIMITIVE.

Could consider accessors 'isValue' and 'isIdentity' for java.lang.Class, in the spirit of 'isInterface' and 'isEnum'. (Name clash with 'isPrimitive'; that one can wait.);;;","2022-05-26 15:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/698
Date: 2022-05-26 22:24:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Annotation toString output for enum not reusable for source input,JDK-8281462,5068087,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,darcy,sbrannen,sbrannen,2022-02-08 06:59,2022-08-17 11:26,2023-10-01 09:56,2022-02-11 15:25,,,,,,,,,19,core-libs,,0,release-note=yes,,,,,,,,,,,,,,,,,,,"As a follow up to JDK-8162817, if an enum used in an annotation has overridden `toString()` to return something other than `name()`, the output of the annotation's `toString()` method will not be reusable for source input.

Given the following example application:

-------------------------------------------------------------------------
package example;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.reflect.Method;

public class Example {

	enum Color {
		RED, GREEN, BLUE;

		public String toString() {
			return name().toLowerCase();
		}
	}

	@Retention(RetentionPolicy.RUNTIME)
	@interface Colors {
		Color[] value();
	}

	@Colors({Color.RED, Color.BLUE})
	public static void main(String[] args) throws Exception {
		Method method = Example.class.getDeclaredMethod(""main"", String[].class);
		System.out.println(method.getAnnotation(Colors.class));
	}
}
-------------------------------------------------------------------------

The output of the application on JDK 9 through JDK 17 is:

@example.Example$Colors({red, blue})

Whereas, we would expect the output to be:

@example.Example$Colors({RED, BLUE})

Or potentially using partially qualified enum constants as in:

@example.Example$Colors({Color.RED, Color.BLUE})

Or potentially using fully qualified enum constants as in:

@example.Example$Colors({example.Example.Color.RED, example.Example.Color.BLUE})

The cause for this is the fact that `Enum#toString()` is invoked instead of `Enum#name()` when generating the output of each enum constant in the `toString()` implementation of `Annotation`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281568,,,,,,,,JDK-8281674,,,,,,,,,,,,JDK-8162817,JDK-8281671,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9,,,,,,,"0|i2vywr:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,Verified,,"2022-02-08 07:06;sbrannen;As a side note, for a nested annotation type such as `Colors` in the provided example, I would expect the `toString()` to output `@example.Example.Colors(...)` using the canonical name instead of `@example.Example$Colors(...)` using the binary name.;;;","2022-02-09 21:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7418
Date: 2022-02-10 05:49:47 +0000;;;","2022-02-11 12:46;darcy;The annotation printing in javac already uses the names of enum constants rather than their toString values as well as using canonical type names rather than binary names.;;;","2022-02-11 15:25;roboduke;Changeset: c3179a87
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-02-11 23:24:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c3179a8760019b5954e344bf0d2775e1e1968f32
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebKit 613.1 build broken on M1,JDK-8281459,5068083,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,arapte,jvos,jvos,2022-02-08 06:42,2022-04-13 07:11,2023-10-01 09:56,2022-02-10 05:26,8u341,jfx19,,,,,,,jfx19,javafx,,0,regression,regression_8278980,sn_111,,,,,,,,,,,,,,,,,"The update to WebKit 613.1 (see
https://bugs.openjdk.java.net/browse/JDK-8278980) does not build on Apple's Aarch64 systems.

The changes to MacroAssemblerARM64.h introduce duplicate code which causes the compilation to fail.

For example, 
void loadPair64(RegisterID src, FPRegisterID dest1, FPRegisterID dest2)
is implemented twice, at line 1641 and line 1657",,,,,,,,,,JDK-8282658,JDK-8281597,JDK-8281662,JDK-8284827,,,,,,,,,,,,,,,,,,,,,,,JDK-8281558,,,,,,,,,,,,JDK-8278980,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,os_x,,,,"0|i2vyvv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-02-08 06:58;kcr;[~jvos] We can fix this, unless you already have a fix in mind.;;;","2022-02-08 12:27;jvos;The same issue occurs when building for Linux-AArch64 (e.g. Rasperry Pi 64 bit).;;;","2022-02-08 12:55;kcr;Good to know. Ambarish will fix it and make sure it builds on macOS / aarch64 (e.g., Mac M1). Can you test the fix on Linux as part of reviewing it?;;;","2022-02-09 11:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/730
Date: 2022-02-09 19:14:47 +0000;;;","2022-02-10 05:26;roboduke;Changeset: cdebc6cb
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2022-02-10 13:25:43 +0000
URL:       https://git.openjdk.java.net/jfx/commit/cdebc6cbafb579148b4addee44d307bd9739454b
;;;","2022-02-11 10:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/34
Date: 2022-02-11 18:35:37 +0000;;;","2022-03-04 06:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/78
Date: 2022-03-04 14:16:14 +0000;;;","2022-04-13 06:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/771
Date: 2022-04-13 13:43:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Assert in EA due to oop access to flat array,JDK-8281454,5068077,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2022-02-08 05:28,2022-02-09 03:39,2023-10-01 09:56,2022-02-09 03:39,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,,"Similar to JDK-8250951. TestNullableArrays fails with -XX:+StressReflectiveCode:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/.../workspace/open/src/hotspot/share/opto/escape.cpp:450), pid=26520, tid=26546
#  assert((ptnode_adr(adr->_idx) == __null || ptnode_adr(adr->_idx)->as_Field()->is_oop())) failed: sanity
#

Current CompileTask:
C2:   5648  523    b        compiler.valhalla.inlinetypes.TestNullableArrays::test111 (36 bytes)

Stack: [0x00007fa3808c1000,0x00007fa3809c2000],  sp=0x00007fa3809bca40,  free space=1006k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xc69628]  ConnectionGraph::add_objload_to_connection_graph(Node*, Unique_Node_List*)+0x3c8
V  [libjvm.so+0xc76c06]  ConnectionGraph::compute_escape()+0x896
V  [libjvm.so+0xc78b65]  ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*)+0x1a5
V  [libjvm.so+0xae25b6]  Compile::Optimize()+0xa86
V  [libjvm.so+0xae67ad]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x162d
V  [libjvm.so+0x8d7673]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x6c3
V  [libjvm.so+0xaf6498]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc88
V  [libjvm.so+0xaf7258]  CompileBroker::compiler_thread_loop()+0x668
V  [libjvm.so+0x19f64da]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x19fe820]  Thread::call_run()+0x100
V  [libjvm.so+0x16b8ad4]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8250951,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vyuj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-09 03:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/642
Date: 2022-02-09 11:05:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Document the default value for the override-methods option,JDK-8281445,5068070,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,prappo,prappo,2022-02-08 02:46,2022-06-15 23:35,2023-10-01 09:56,2022-06-10 08:06,19,,,,,,,,19,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"JDK-8157000 added an enumerated option, override-methods, which has two values: ""detail"" and ""summary"". Neither `javadoc -help` nor the man page specifies which of these values is default.",,,,,,,,,,JDK-8288239,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280713,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vysz:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-06-09 20:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/2
Date: 2022-06-10 02:59:29 +0000;;;","2022-06-10 08:06;dukebot;Changeset: 03276a51
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-06-10 15:02:59 +0000
URL:       https://git.openjdk.org/jdk19/commit/03276a515301e7772bbff7cce645f73eb695099b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PhiNode::Value() is too conservative for tripcount of CountedLoop,JDK-8281429,5068053,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,roland,roland,2022-02-08 01:10,2023-09-29 10:12,2023-10-01 09:56,2022-05-06 01:26,19,,,,,,,,19,hotspot,,0,amazon-interest,c2,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,"I noticed for a loop like:

for (int i = 0; i < 10; i++) {
}

PhiNode::Value() sets the type of i to [0, 10] when it's [0,9]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296077,JDK-8292088,JDK-8295788,JDK-8289748,JDK-8316396,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vyp7:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-08 08:42;chagedorn;ILW = Type range of iv phis are too wide which could prevent optimizations, no known cases where this limits performance, no workaround = MLH = P4;;;","2022-03-15 09:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7823
Date: 2022-03-15 16:02:54 +0000;;;","2022-05-06 01:26;dukebot;Changeset: fa1ca98f
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-05-06 08:24:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fa1ca98fff66fb91cfd5b00404645e0574d03101
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The source data for the color conversion can be discarded,JDK-8281419,5068039,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-02-07 21:30,2022-02-16 16:21,2023-10-01 09:56,2022-02-10 23:42,17,18,19,,,,,,19,client-libs,,0,noreg-perf,,,,,,,,,,,,,,,,,,,"When we convert the image from one color profile to another one we copy data to the temp array, and after conversion, we commit both(src and dst). But the source data could be discarded since we do not(should not) change it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vym3:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-02-07 21:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7375
Date: 2022-02-08 05:42:47 +0000;;;","2022-02-10 23:42;roboduke;Changeset: 8441d51e
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-02-11 07:41:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8441d51e71e143250b44eea74114a624cf00cc3e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MemorySegment::map should live in FileChannel,JDK-8281412,5068031,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jboes,mcimadamore,mcimadamore,2022-02-07 16:01,2022-03-11 05:48,2023-10-01 09:56,2022-03-11 05:48,repo-panama,,,,,,,,,tools,,0,foreign-memaccess+abi,foreign-preview,,,,,,,,,,,,,,,,,,"There are many dependencies between MemorySegment::map and FileChannel::map - they both require a MapMode, for instance. In addition, clients that want to create mapped memory regions might want to map the same file in multiple regions, in which case working on a FileChannel seems more convenient than working off a Path (which would require creating the channel twice, under the hood).

For these reasons, the mapped memory segment factory should move as an instance method on FileChannel, and renamed to `mapAsMemorySegment`. Also some of the parameter names of the methods should be renamed to match those in FileChannel::map.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8259028,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vykb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-02-21 09:06;mcimadamore;Likely, an abstract method which throws UnsupportedOperationException should be added to the FileChannel abstract class, and then should be implemented by FileChannelImpl accordingly. This would allow existing subclasses to keep working (even though they would not be able to access the new memory segment mapping functionality).;;;","2022-03-10 06:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/668
Date: 2022-03-10 14:05:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some downcall shapes show unexpected allocations,JDK-8281387,5068000,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2022-02-07 09:39,2022-02-15 07:37,2023-10-01 09:56,2022-02-15 07:37,repo-panama,,,,,,,,,tools,,0,foreign-memaccess+abi,foreign-preview,,,,,,,,,,,,,,,,,,"In the attached benchmark, the panama_call_as_address as well as the panama_call_as_new_segment methods show unexpected allocations of a MemoryAddressImpl and NativeMemorySegmentImpl respectively.

All four of these benchmarks are expected to perform the same. It seems there is a problem with escape analysis that we should investigate.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281595,,,,,,"2022-02-07 09:42;jvernee;CLayouts.java;https://bugs.openjdk.org/secure/attachment/97927/CLayouts.java","2022-02-07 09:41;jvernee;PointerInvoke.java;https://bugs.openjdk.org/secure/attachment/97926/PointerInvoke.java","2022-02-07 09:42;jvernee;libPtr.c;https://bugs.openjdk.org/secure/attachment/97928/libPtr.c",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vydf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-02-10 05:29;jvernee;After some investigation, it turns out that in both the slow cases, the newly allocated object escapes into an out-of-line method handle call in an untaken catch block, which prevents scalar replacement.

The call is not inlined during parsing since the input is a CastPP -> Phi node (with 1 NULL edge, 1 ConP edge). The Phi node is eliminated later on and the receiver becomes constant, but the call was not enqueued for late inlining because the call site count is 0 [1], so it is never retried.

[1]: https://github.com/openjdk/jdk/blob/039313d65d47dc85cb8c91d3e1d2752d365f70f9/src/hotspot/share/opto/callGenerator.cpp#L1060;;;","2022-02-11 11:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/640
Date: 2022-02-11 19:05:19 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Rename T_INLINE_TYPE to T_PRIMITIVE_OBJECT,JDK-8281380,5067989,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2022-02-07 07:59,2022-02-08 11:49,2023-10-01 09:56,2022-02-08 11:49,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,lworld,,,,,,,,,,,,,,,,,,,"The introduction of value classes made the BasicType T_INLINE_TYPE confusing.
In HotSpot, both value classes and primitive classes have their meta-data encoded into an InlineKlass instance. But the translation from signature to BasicType is based on decorators, value classes use a ""L"" decorator and are therefore translated to T_OBJECT, while primitive classes use a ""Q"" decorator and are associated with T_INLINE_TYPE.
The BasicType T_INLINE_TYPE should be renamed in order to prevent confusion between InlineKlass, which applies to both value classes and primitive classes, and T_INLINE_TYPE, which applies only to primitive classes.
The proposed new name is T_PRIMITIVE_OBJECT.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vyaz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-08 07:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/638
Date: 2022-02-08 15:51:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Crash in LateInlineMHCallGenerator::do_late_inline_check,JDK-8281378,5067986,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,thartmann,thartmann,2022-02-07 07:33,2022-02-08 06:01,2023-10-01 09:56,2022-02-08 06:01,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,,"test/hotspot/jtreg/compiler/exceptions/TestLateMHInlineExceptions.java fails with ""-ea -esa -XX:CompileThreshold=100 -XX:-TieredCompilation"":

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f29d6698291, pid=22423, tid=22438
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (fastdebug build 19-lworld3ea+0-2022-02-07-1432051.tobias.hartmann.valhalla)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-lworld3ea+0-2022-02-07-1432051.tobias.hartmann.valhalla, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x8e4291]  LateInlineMHCallGenerator::do_late_inline_check(Compile*, JVMState*)+0xa1

Current CompileTask:
C2:   2079  257 % !b        TestLateMHInlineExceptions::main @ 10 (88 bytes)

Stack: [0x00007f29c0001000,0x00007f29c0102000],  sp=0x00007f29c00fcd80,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8e4291]  LateInlineMHCallGenerator::do_late_inline_check(Compile*, JVMState*)+0xa1
V  [libjvm.so+0x8e0dc7]  CallGenerator::do_late_inline_helper()+0x927
V  [libjvm.so+0xadef8d]  Compile::inline_incrementally_one()+0x33d
V  [libjvm.so+0xae014f]  Compile::inline_incrementally(PhaseIterGVN&)+0x18f
V  [libjvm.so+0xae1e9b]  Compile::Optimize()+0x36b
V  [libjvm.so+0xae67ad]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x162d
V  [libjvm.so+0x8d7673]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x6c3
V  [libjvm.so+0xaf6498]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc88
V  [libjvm.so+0xaf7258]  CompileBroker::compiler_thread_loop()+0x668
V  [libjvm.so+0x19f64da]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x19fe820]  Thread::call_run()+0x100
V  [libjvm.so+0x16b8ad4]  thread_native_entry(Thread*)+0x104
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8250764,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vyab:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-08 00:13;thartmann;Code was introduced by JDK-8250764:
https://github.com/openjdk/valhalla/commit/b697e163c8e92cad39f4815e2a1c5c5eac15143b;;;","2022-02-08 00:13;thartmann;Potential fix:

diff --git a/src/hotspot/share/opto/callGenerator.cpp b/src/hotspot/share/opto/callGenerator.cpp
index ccd77ea68bf..992ee4e5f69 100644
--- a/src/hotspot/share/opto/callGenerator.cpp
+++ b/src/hotspot/share/opto/callGenerator.cpp
@@ -449,14 +449,13 @@ bool LateInlineMHCallGenerator::do_late_inline_check(Compile* C, JVMState* jvms)
   CallGenerator* cg = for_method_handle_inline(jvms, _caller, method(), allow_inline, input_not_const);
   assert(!input_not_const, ""sanity""); // shouldn't have been scheduled for inlining in the first place
 
+  // AlwaysIncrementalInline causes for_method_handle_inline() to
+  // return a LateInlineCallGenerator. Extract the
+  // InlineCallGenerator from it.
+  if (AlwaysIncrementalInline && cg != NULL && cg->is_late_inline()) {
+    cg = cg->inline_cg();
+  }
   if (cg != NULL) {
-    // AlwaysIncrementalInline causes for_method_handle_inline() to
-    // return a LateInlineCallGenerator. Extract the
-    // InlineCallGenerato from it.
-    if (AlwaysIncrementalInline && cg->is_late_inline()) {
-      cg = cg->inline_cg();
-    }
-
;;;","2022-02-08 05:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/637
Date: 2022-02-08 13:40:14 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Consider polymorphic methods when looking for overrides,JDK-8281376,5067984,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-02-07 07:11,2022-03-02 17:17,2023-10-01 09:56,2022-02-23 08:19,19,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280713,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vy9v:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-02-10 07:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7427
Date: 2022-02-10 15:41:51 +0000;;;","2022-02-23 08:18;dukebot;Changeset: 35076af1
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-02-23 16:17:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/35076af13acd1b9327d35ac67dc80c15bb1059c7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add MD5.implCompress0 to Graal toBeInvestigated list after 8280978,JDK-8281374,5067982,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,phh,phh,phh,2022-02-07 06:53,2022-03-04 03:06,2023-10-01 09:56,2022-02-08 07:04,15.0.7,,,,,,,,15.0.7,hotspot,,0,jdk15u-fix-request,jdk15u-fix-yes,oracle-triage-11,oracle-triage-19,,,,,,,,,,,,,,,,"JDK-8280978 is a backport of JDK-8250902 to 15u. In CheckGraalIntrinsics.java, adding MD5.implCompress0 to the Graal toBeInvestigated list was left at happening only for JDK 16 and later. For the backport, it should have been modified to apply to JDK 15 and later.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8250902,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,15.0.7,,generic,,,,,"0|i2vy9f:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-07 07:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/171
Date: 2022-02-07 15:33:03 +0000;;;","2022-02-07 08:02;phh;Fix Request (15u).

Patch to fix a previous backport. No risk, just moves the MD5 test to the Graal toBeInvestigated list.;;;","2022-02-07 12:55;dlong;ILW = CheckGraalIntrinsics test failure = MMH = P3;;;","2022-02-08 07:04;roboduke;Changeset: 8612163b
Author:    Paul Hohensee <phh@openjdk.org>
Date:      2022-02-08 15:03:35 +0000
URL:       https://git.openjdk.java.net/jdk15u-dev/commit/8612163b04e0f414d4ea0c0dbff99ac98302f82f
;;;","2022-03-04 02:54;roboduke;Changeset: 8612163b
Author:    Paul Hohensee <phh@openjdk.org>
Date:      2022-02-08 15:03:35 +0000
URL:       https://git.openjdk.java.net/jdk15u/commit/8612163b04e0f414d4ea0c0dbff99ac98302f82f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NSAccessibilityPressAction action for tree node and NSAccessibilityShowMenuAcgtion action not working,JDK-8281338,5067947,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenov,asemenov,asemenov,2022-02-07 05:46,2023-05-05 03:45,2023-10-01 09:56,2022-02-08 22:52,18,19,,,,,,,19,client-libs,,0,a11y,jdk11u-a11y-defer,jdk17u-fix-request,jdk17u-fix-yes,macos,,,,,,,,,,,,,,,"The ""toggle popup"" accessibility action does not correctly match the NSAccessibleShowMenuAction action.
The ""toggleExpand"" accessibility action does not correctly match the NSAccessibilityPressAction action.",,,,,,,,,,JDK-8283553,JDK-8281824,JDK-8287658,JDK-8288267,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2vy1n:",9223372036854775807,b10,,,,,,,,,,,,"2022-02-08 05:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7381
Date: 2022-02-08 12:57:43 +0000;;;","2022-02-08 22:52;roboduke;Changeset: cb2f8cae
Author:    Artem Semenov <asemenov@openjdk.org>
Date:      2022-02-09 06:50:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cb2f8caed2de1bf0a85a7ebfd232c36371e06c98
;;;","2022-03-22 07:25;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Manual test has passed on M1.;;;","2022-03-22 07:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/280
Date: 2022-03-22 14:24:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Remove workaround in LambdaToMethod to circumvent BootstrapMethodError,JDK-8281336,5067945,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-02-07 04:29,2022-02-07 16:34,2023-10-01 09:56,2022-02-07 16:34,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,,,,,,,,,,,,,,,,,,,,"Presently, Javac has a workaroud in LambdaToMethod to deal with 
LambdaConversionException thrown by the runtime when the receiver type is a primitive reference type and the implementation type is the primitive value type of the same class.

While https://bugs.openjdk.java.net/browse/JDK-8273301 was being worked on, Mandy provided a patch that she put together for 
https://bugs.openjdk.java.net/browse/JDK-8274399 for inclusion.
(See Mandy's message in https://bugs.openjdk.java.net/browse/JDK-8273301 and also
https://github.com/openjdk/valhalla/pull/545)

However  since https://bugs.openjdk.java.net/browse/JDK-8273301 was abandoned due to ref-default primitives going away, this patch from Mandy went into a limbo. 

The current ticket is to (a) pull back the workaround in Javac and include the fix from Mandy.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vy17:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-02-07 04:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/631
Date: 2022-02-07 12:33:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow a library already loaded via System::loadLibrary to be loaded as a raw library,JDK-8281335,5067944,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,mchung,mcimadamore,mcimadamore,2022-02-07 04:09,2022-08-09 09:01,2023-10-01 09:56,2022-02-16 10:32,18,,,,,,,,19,core-libs,,0,foreign-memaccess+abi,foreign-preview,,,,,,,,,,,,,,,,,,"There seems to be some suspicious interaction between jpackage and Panama on Windows.

See:

https://mail.openjdk.java.net/pipermail/panama-dev/2022-February/016206.html

for more details",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282515,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vy0z:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-02-10 01:57;mcimadamore;Simple reproducer:

import jdk.incubator.foreign.CLinker;

public class TestLookup {
    public static void main(String[] args) {
        System.load(""C:\\Windows\\System32\\ucrtbase.dll"");
        CLinker.systemCLinker().lookup(""foo""); // fails with UnsatisfiedLinkError
    }
};;;","2022-02-10 13:33;mchung;The raw library loading mechanism has a restriction in the current implementation that does not allow mix-n-match of loading a library as a JNI library as well as a raw library.

Maurizio and I discussed on this.  We agree to remove the restriction.   Raw library loading mechanism is essentially equivalent to dlopen/dlclose calls independent of JNI library loading.    If a native library is loaded as a JNI library and a raw library, it will get different NativeLibrary instances.  When a class loader is being unloaded, JNI_Unload will be invoked but the native library may not be unloaded until NativeLibrary::unload is called explicitly for the raw library.;;;","2022-02-10 15:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7435
Date: 2022-02-10 23:27:49 +0000;;;","2022-02-16 10:32;roboduke;Changeset: 980d1878
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2022-02-16 18:31:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/980d18789139295c95ec6045539b68d1ae57bc31
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MemorySegment.ofBuffer does not keep byte buffer alive,JDK-8281334,5067943,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-02-07 04:07,2022-02-07 10:10,2023-10-01 09:56,2022-02-07 10:10,repo-panama,,,,,,,,,tools,,0,foreign-memaccess+abi,foreign-preview,,,,,,,,,,,,,,,,,,"As the title says, MemorySegment.ofBuffer tries to fetch the scope attached to the buffer instance (if any) and use that. If none is found, the global scope is used instead. This is a bug - since there would be nothing keeping the buffer alive.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vy0r:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-02-07 05:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/639
Date: 2022-02-07 13:09:16 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaFX does not support fonts installed per-user on Windows 10/11,JDK-8281327,5067858,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpereda,webbuggrp,webbuggrp,2022-02-04 18:53,2023-03-12 11:28,2023-10-01 09:56,2023-02-16 02:30,jfx13,,,,,,,,jfx21,javafx,,0,dcspn,reproducer-other,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
See JDK-8218914:

Starting from build 17704, Windows 10 supports per-user font installation (see https://blogs.windows.com/windowsexperience/2018/06/27/announcing-windows-10-insider-preview-build-17704/#SgtQaWxPhRKl3mHR.97). This installation method actually becomes default, while 'Install for all users' action does it now the old (system-wide) way.
JRE currently doesn't recognize fonts installed in the new way. In particular, GraphicsEnvironment.getAllFonts() doesn't list them, and such fonts cannot be used by passing their name to Font constructor.

Starting with Java 13, java.awt.GraphicsEnvironment::getAllFonts() can correctly find the font installed for the current user on Windows 10/11, but javafx.scene.text.Font is not yet supported.

I checked the source code of OpenJFX and found that PrismFontFactory::getPlatformFontDirs() tried to distinguish between the system font folder and the user font folder. 

But unfortunately, PrismFontFactory::getFontPath() (https://github.com/openjdk/jfx/blob/717cfdc85817aee57d5326e592340c849382d7a4/modules/javafx.graphics/src/main/native-font/fontpath.c#L68) doesn't seem to work properly. It always seems to find the same folder on windows.


FREQUENCY : always


",,,,,,,,,,JDK-8304024,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8255281,JDK-8218914,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,"0|i2vxqz:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-02-07 01:54;pnarayanaswa;Moving to JDK Project for further review.;;;","2022-02-14 10:47;prr;As indicated in the description this was also requested for Java 2D / client-libs, and was supposed to be fixed in JDK-13 by JDK-8219814. But the submitter of JDK-8255281 says it does not work.;;;","2023-01-31 02:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1017
Date: 2023-01-31 10:30:22 +0000;;;","2023-02-16 02:30;dukebot;Changeset: f4ca00dd
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2023-02-16 10:28:16 +0000
URL:       https://git.openjdk.org/jfx/commit/f4ca00dd6f81a97401f78f422a6899cb44ab462f
;;;","2023-03-12 11:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/118
Date: 2023-03-12 18:16:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Unused code emitted for unpacking arguments leads to code buffer overflow,JDK-8281325,5067938,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,dsimms,dsimms,2022-02-07 01:18,2022-02-07 07:48,2023-10-01 09:56,2022-02-07 07:48,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,,,"Merge of jdk-19+8 into lworld:  https://github.com/openjdk/valhalla/pull/630

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S136843/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1aaeef96-5bd1-4311-923d-d6e1c34ec47a/runs/1d7de586-11bd-49ef-a126-77235a73dd47/workspace/open/src/hotspot/share/asm/codeBuffer.hpp:192), pid=7364, tid=7379
#  assert(allocates2(pc)) failed: not in CodeBuffer memory: 0x00007f666d7c6c20 <= 0x00007f666d7c7422 <= 0x00007f666d7c7420

Current CompileTask:
C2:  19036 1199    b  4       compiler.valhalla.inlinetypes.TestCallingConvention::test23 (45 bytes)

Stack: [0x00007f6c5dbfc000,0x00007f6c5dcfd000],  sp=0x00007f6c5dcf74d8,  free space=1005k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x6f2893]  CodeSection::set_end(unsigned char*)+0x53
V  [libjvm.so+0x66da1e]  Assembler::emit_operand_helper(int, int, int, Address::ScaleFactor, int, RelocationHolder const&, int)+0x3ee
V  [libjvm.so+0x66e980]  Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&, int) [clone .constprop.8]+0x70
V  [libjvm.so+0x6e9f96]  Assembler::movq(RegisterImpl*, Address)+0x106
V  [libjvm.so+0x14b1710]  MacroAssembler::unpack_inline_helper(GrowableArray<SigEntry> const*, int&, VMRegImpl*, int&, VMRegPair*, int, int&, MacroAssembler::RegState*)+0x140
V  [libjvm.so+0x1466b24]  MacroAssembler::unpack_inline_args(Compile*, bool)+0x5f4
V  [libjvm.so+0x3204d3]  MachVEPNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x1d3
V  [libjvm.so+0x16d9b0e]  PhaseOutput::scratch_emit_size(Node const*)+0x45e
V  [libjvm.so+0x16cfed0]  PhaseOutput::shorten_branches(unsigned int*)+0x2f0
V  [libjvm.so+0x16e3038]  PhaseOutput::Output()+0xb28
V  [libjvm.so+0xae39fb]  Compile::Code_Gen()+0x42b
V  [libjvm.so+0xae689b]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x172b
V  [libjvm.so+0x8d7673]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x6c3
V  [libjvm.so+0xaf6488]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc88
V  [libjvm.so+0xaf7248]  CompileBroker::compiler_thread_loop()+0x668
V  [libjvm.so+0x19f5dca]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x19fe110]  Thread::call_run()+0x100
V  [libjvm.so+0x16b83c4]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-02-07 01:26;dsimms;merge_conflict_originals.tgz;https://bugs.openjdk.org/secure/attachment/97908/merge_conflict_originals.tgz",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vxzn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-07 07:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/633
Date: 2022-02-07 15:17:05 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Unnecessary entries in Preload attribute,JDK-8281323,5067936,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-02-07 00:50,2022-02-23 02:55,2023-10-01 09:56,2022-02-23 02:55,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,,,,,,,,,,,,,,,,,,,,"As reported by Frederic Parain:

Two questions related to the Preload attribute.
First, with the source code below:
public value class PreLoadTest1 {
    byte b;

    public PreLoadTest1(byte b) {
	this.b = b;
    }
}
javac creates a Preload attribute containing the PreLoadTest1 class itself, which seems unnecessary.
Is there a reason justifying this behavior?

Second, with the source file below:
public class PreLoadTest2 {
    static class Inner1 {
	    static value class Inner2 {
	    }
	    Inner2 inner;
    }
}
Class PreLoadTest2 had no field of type Inner2 , and no method using Inner2 has an argument type or return value type, but javac creates a Preload attribute in PreLoadTest2's class file containing Inner2.
Is there a reason for that? 

Both of these are unnessary entries that show up only because currently, Preload attribute generation piggy backs on InnerClasses attribute generation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vxz7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-02-20 23:14;sadayapalam;According to https://openjdk.java.net/jeps/8277163:

""Each class file generated by javac includes a Preload attribute naming any value class that appears in one of the class file's declared field or method descriptors.""

However, in internal discussions Frederic remarked that C1 would be better off knowing that local variable's type is a value class.

""Loading those local variable’s type would help C1. C1 uses patching when dealing with unloaded identity classes, but it often cannot do that with unloaded value classes: because of flattening, patching cannot be used, deopt and recompilation are required. Having more loaded types would lead to less recompilation.""

;;;","2022-02-22 01:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/656
Date: 2022-02-22 09:29:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: always construct strip mined loop initially (even if strip mining is disabled),JDK-8281322,5067935,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,roland,roland,2022-02-07 00:40,2022-03-30 01:40,2023-10-01 09:56,2022-03-14 07:00,19,,,,,,,,19,hotspot,,0,c2,c2-loopopts,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,Some of the long range check transformations take advantage of the safepoint captured by loop strip mining to extract jvm state. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283396,JDK-8282045,JDK-8276116,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vxyz:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-07 01:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7364
Date: 2022-02-07 08:53:41 +0000;;;","2022-02-07 13:01;dlong;ILW = IR test failure, possible performance anomalies; with strip mining off; turn strip mining on = MMM = P3 ;;;","2022-03-14 07:00;dukebot;Changeset: ea9eeea8
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-03-14 13:59:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ea9eeea8ffea6ed32a270051c6986f4f059943c0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CompactNumberFormat displays 4-digit values when rounding to a new range,JDK-8281317,5067918,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2022-02-06 17:14,2022-08-09 09:02,2023-10-01 09:56,2022-02-17 11:04,17,18,19,,,,,,19,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Tested with Oracle JDK 17.0.2.  Operating system not relevant.

A DESCRIPTION OF THE PROBLEM :
The CompactNumberFormat class was introduced to make displaying large values in a compact manner consistent and easy across different implementations. For example, the value ""5,213,222"" being displayed as ""5M"".  By default, the CompactNumberFormat supports rounding.  For instance, ""523,999"" is formatted to 524K.

There appears to be an issue, though, when rounding causes the overall term to increase, say from thousand to million, or million to billion.  For example, with rounding enabled, the values 999,999 and 1,000,000 should both format to ""1M"" using a short STYLE formatter. Instead, it prints as 1000K and 1M, respectively.  Anyone displaying data coming from a CompactNumberFormat would see 1000K and quickly realize this is a display error.  Note that this problem happens regardless of if the style SHORT or LONG is selected.  In the case of LONG, the format would be ""1000 thousand"", which is even worse to see in a real application.

This behavior appears to be a bug related to rounding. If not a bug, then the CompactNumberFormat is not suitable for practical use.  If a business displayed a monetary value as $1000K or ""1000 thousand"", instead of $1M,  it would be very unprofessional.  In other words, if this isn't a bug and the spec is correct, then the existence of this issue defeats the purpose of using CompactNumberFormat in the first place.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Sample code to reproduce the issue:

var nf1 = NumberFormat.getCompactNumberInstance(Locale.US,Style.SHORT);
System.out.println(nf1.format(999_999));
System.out.println(nf1.format(1_000_000));

System.out.println(nf1.format(1_999_999));
System.out.println(nf1.format(2_000_000));

var nf2 = NumberFormat.getCompactNumberInstance(Locale.US,Style.LONG);
System.out.println(nf2.format(999_999_999));
System.out.println(nf2.format(1_000_000_000));

System.out.println(nf2.format(1_999_999_999));
System.out.println(nf2.format(2_000_000_000));

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
1M
1M
2M
2M
1 billion
1 billion
2 billion
2 billion
ACTUAL -
1000K
1M
2M
2M
1000 million
1 billion
2 billion
2 billion

---------- BEGIN SOURCE ----------
import java.text.NumberFormat;
import java.text.NumberFormat.Style;
import java.util.Locale;

public class SampleCode {
	public static void main(String[] arg) {
		var nf1 = NumberFormat.getCompactNumberInstance(Locale.US,Style.SHORT);
		System.out.println(nf1.format(999_999));
		System.out.println(nf1.format(1_000_000));
		
		System.out.println(nf1.format(1_999_999));
		System.out.println(nf1.format(2_000_000));
		
		var nf2 = NumberFormat.getCompactNumberInstance(Locale.US,Style.LONG);
		System.out.println(nf2.format(999_999_999));
		System.out.println(nf2.format(1_000_000_000));

		System.out.println(nf2.format(1_999_999_999));
		System.out.println(nf2.format(2_000_000_000));
	}
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
The only work-around would be to disable rounding, or round the value before sending it to a CompactNumberFormat.  Or don't use CompactNumberFormat at all because it is not useful.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-02-06 23:54;tongwan;SampleCode.java;https://bugs.openjdk.org/secure/attachment/97907/SampleCode.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vxv7:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,Verified,,"2022-02-07 00:00;tongwan;The observations on Windows 10:
JDK 11: The reproducer is not applicable.
JDK 17: Failed, 999_999 returns 1000K and 999_999_999 returns 1000 million
JDK 18ea+29: Failed.
JDK 19ea+3: Failed.;;;","2022-02-14 11:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7412
Date: 2022-02-09 22:37:45 +0000;;;","2022-02-17 11:04;roboduke;Changeset: 12927765
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-02-17 19:03:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/129277653e51e9b1387ecee279a6ccee9199c8ff
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Unicode, (?i) flag and backreference throwing IndexOutOfBounds Exception",JDK-8281315,5067916,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,igraves,webbuggrp,webbuggrp,2022-02-06 09:58,2022-08-09 09:02,2023-10-01 09:56,2022-02-22 08:33,11,17,18,19,8,,,,19,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
I stumbled upon the problem outlined in this stackoverflow issue: https://stackoverflow.com/questions/16008974/strange-java-unicode-regular-expression-stringindexoutofboundsexception

When the (?i) flag is present with a backreference, certain unicode sequences (most notably emoji) cause an IndexOutOfBounds exception to be raised. One of the answers even identifies the issue and proposes a fix. Yet, the question was asked years ago and the issue still persists in the current implementation.

The issue is not just limited to replaceAll, but happens when one attempts to search the string too.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the code provided in the source code section, three textboxes below this one, and observe the issue.



EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Both print statements should produce the same result, true.
ACTUAL -
The first call succeeds, but the second one fails, throwing an IndexOutOfBounds exception.

Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException: index 6, length 6
	at java.base/java.lang.String.checkIndex(String.java:3710)
	at java.base/java.lang.StringUTF16.checkIndex(StringUTF16.java:1624)
	at java.base/java.lang.StringUTF16.charAt(StringUTF16.java:1421)
	at java.base/java.lang.String.charAt(String.java:713)
	at java.base/java.lang.Character.codePointAt(Character.java:8874)
	at java.base/java.util.regex.Pattern$CIBackRef.match(Pattern.java:5077)
	at java.base/java.util.regex.Pattern$Curly.match(Pattern.java:4369)
	at java.base/java.util.regex.Pattern$GroupTail.match(Pattern.java:4832)
	at java.base/java.util.regex.Pattern$CharProperty.match(Pattern.java:3943)
	at java.base/java.util.regex.Pattern$GroupHead.match(Pattern.java:4801)
	at java.base/java.util.regex.Pattern$Start.match(Pattern.java:3620)
	at java.base/java.util.regex.Matcher.search(Matcher.java:1728)
	at java.base/java.util.regex.Matcher.find(Matcher.java:745)
	at com.company.Main.main(Main.java:13)

---------- BEGIN SOURCE ----------
import java.util.regex.Pattern;

public class Main {
    public static void main(String[] args) {
        String line = ""💕💕💕"";

        var pattern1 = Pattern.compile(""(.)\\1{2,}"");
        System.out.println(pattern1.matcher(line).find());

        var pattern2 = Pattern.compile(""(?i)(.)\\1{2,}"");
        System.out.println(pattern2.matcher(line).find());
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Not using the (?i) flag but instead running toLowerCase on the string before it is fed to the Regex for processing.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-02-06 23:40;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/97906/Main.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vxur:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@557d5cff,,,,,,,Verified,,"2022-02-06 23:47;tongwan;The observations on Windows 10:
JDK 8: Failed, StringIndexOutOfBoundsException thrown
JDK 11: Failed.
JDK 17: Failed.
JDK 18ea+29: Failed.
JDK 19ea+3: Failed.;;;","2022-02-16 10:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7501
Date: 2022-02-16 18:45:29 +0000;;;","2022-02-22 08:33;dukebot;Changeset: 3cb38678
Author:    Ian Graves <igraves@openjdk.org>
Date:      2022-02-22 16:31:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3cb38678aa7f03356421f5a17c1de4156e206d68
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Reenable test/langtools/tools/javac/processing/rounds/OverwriteBetweenCompilations.java,JDK-8281312,5067925,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-02-06 23:08,2022-06-02 03:45,2023-10-01 09:56,2022-06-02 03:45,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,,,,,,,,,,,,,,,,,,,,"During https://github.com/openjdk/valhalla/pull/622/ I disabled one failing test test/langtools/tools/javac/processing/rounds/OverwriteBetweenCompilations.java by @ignoring it.

The cause for this failure needs to be understood and the test needs to be reenabled with a suitable fix.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vxwr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-05-30 03:16;sadayapalam;This problem seems to arise from the supertype walk in Types#implicitIdentityType() - Good news is this super type walk is likely to go away with https://bugs.openjdk.java.net/browse/JDK-8287136 - I'll fold a fix to the current ticket under that. ;;;","2022-06-02 03:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/701
Date: 2022-06-02 10:05:48 +0000;;;","2022-06-02 03:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/702
Date: 2022-06-02 10:36:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test com/sun/net/httpserver/simpleserver/MapToPathTest.java fails on Windows 11,JDK-8281305,5067914,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jboes,aturbanov,aturbanov,2022-02-06 08:22,2022-08-22 05:35,2023-10-01 09:56,2022-02-17 02:37,18,19,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,"Test {{com/sun/net/httpserver/simpleserver/MapToPathTest.java}} always fails for me on freshly installed Windows 11.

127.0.0.1 - - [06/Feb/2022:19:23:26 +0300] ""GET /foo/bar/baz/c:// HTTP/1.1"" 200 -
Resource requested: C:\Projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_com_sun_net_httpserver_simpleserver_MapToPathTest_java\scratch\0\MapToPathTest\foo\bar\baz\
> Connection: Upgrade, HTTP2-Settings
> Http2-settings: AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA
> Host: localhost:59664
> Upgrade: h2c
> User-agent: Java-http-client/19-internal
> Content-length: 0
>
< Date: Sun, 06 Feb 2022 16:23:26 GMT
< Last-modified: Sun, 6 Feb 2022 16:23:25 GMT
< Content-type: text/html; charset=UTF-8
< Content-length: 216
<
test MapToPathTest.test(): failure
java.lang.AssertionError: expected [404] but found [200]
        at org.testng.Assert.fail(Assert.java:99)
        at org.testng.Assert.failNotEquals(Assert.java:1037)
        at org.testng.Assert.assertEqualsImpl(Assert.java:140)
        at org.testng.Assert.assertEquals(Assert.java:122)
        at org.testng.Assert.assertEquals(Assert.java:907)
        at org.testng.Assert.assertEquals(Assert.java:917)
        at MapToPathTest.test(MapToPathTest.java:138)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
        at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
        at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
        at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
        at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
        at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
        at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
        at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
        at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
        at org.testng.TestRunner.privateRun(TestRunner.java:764)
        at org.testng.TestRunner.run(TestRunner.java:585)
        at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
        at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
        at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
        at org.testng.SuiteRunner.run(SuiteRunner.java:286)
        at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
        at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
        at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
        at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
        at org.testng.TestNG.runSuites(TestNG.java:1069)
        at org.testng.TestNG.run(TestNG.java:1037)
        at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
        at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:828)

On Windows 11 method 'sun.net.httpserver.simpleserver.FileServerHandler#mapToPath'
https://github.com/openjdk/jdk/blob/77b0240d44fd356711d75bc241e198f6f89ada8f/src/jdk.httpserver/share/classes/sun/net/httpserver/simpleserver/FileServerHandler.java#L230
resolves path to 'C:\Projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_com_sun_net_httpserver_simpleserver_MapToPathTest_java\scratch\0\MapToPathTest\foo\bar\baz\'
(Which seems strange for me). This directory is not hidden and readable. That's why server returns 200.

On Windows 10 (where test does NOT fail) method resolves path as 'c:'. (Which is surprise for me too) and then this path is considered as _hidden_ (why?)  inside sun.net.httpserver.simpleserver.FileServerHandler#isHiddenOrSymLink method. And return expected 404.

Looks like main difference is that on Win11 JDK is located in Disk C:. (at path C:\Projects\jdk2), while on Win10 JDK is located in Disk K:. And because of that WindowsPath.resolve returns different result (see https://github.com/openjdk/jdk/blob/master/src/java.base/windows/classes/sun/nio/fs/WindowsPath.java#L628 )",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2vxub:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-02-15 08:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7478
Date: 2022-02-15 13:06:29 +0000;;;","2022-02-17 02:37;roboduke;Changeset: 9ca435b4
Author:    Julia Boes <jboes@openjdk.org>
Date:      2022-02-17 10:35:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9ca435b4c03f9741709bbfab22fb006de8c8c9d3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
applications/microbenchmarks/other/Test_7.java#id12 hits assert in PhiNode::Ideal,JDK-8281299,5067909,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,dlong,alanb,alanb,2022-02-06 00:15,2022-03-11 16:36,2023-10-01 09:56,2022-03-11 14:58,repo-loom,,,,,,,,repo-loom,hotspot,,0,c2,,,,,,,,,,,,,,,,,,,"The following tests hit the assert in the loom repo:

aplications/microbenchmarks/other/Test_7.java#id12
applications/microbenchmarks/other/Test_8.java#id0

The loom repo is currently sync'ed with jdk-19+9. I haven't been able to duplicate it with the main line.

One set of options that seem to trigger it reliably is:  -XX:-DoEscapeAnalysis -XX:CompileThreshold=100

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/open/src/hotspot/share/opto/phaseX.hpp:134), pid=8746, tid=8841
#  assert(i<_max) failed: oob
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (fastdebug build 19-internal+0-2022-02-06-0741038.alan.bateman.loom-merge)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-internal+0-2022-02-06-0741038.alan.bateman.loom-merge, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x8e43e4]  PhiNode::Ideal(PhaseGVN*, bool)+0x684
#

Current CompileTask:
C2:   4636 1515       4       jdk.jfr.DynamicEvent1::commit (77 bytes)

Stack: [0x00007fc69156d000,0x00007fc69166e000],  sp=0x00007fc691669480,  free space=1009k
Thread 0x00007fc66c112080 [8841]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8e43e4]  PhiNode::Ideal(PhaseGVN*, bool)+0x684
V  [libjvm.so+0x150aeb5]  PhaseGVN::transform_no_reclaim(Node*)+0x25
V  [libjvm.so+0x1204491]  LibraryCallKit::inline_native_getEventWriter()+0x1561
V  [libjvm.so+0x121042e]  LibraryIntrinsic::generate(JVMState*)+0x21e
V  [libjvm.so+0xbd71eb]  Parse::do_call()+0x2fb
V  [libjvm.so+0x14e7648]  Parse::do_one_bytecode()+0x3c8
V  [libjvm.so+0x14d8386]  Parse::do_one_block()+0x5a6
V  [libjvm.so+0x14d9233]  Parse::do_all_blocks()+0xf3
V  [libjvm.so+0x14dcedf]  Parse::Parse(JVMState*, ciMethod*, float)+0xb9f
V  [libjvm.so+0x8a2935]  ParseGenerator::generate(JVMState*)+0xd5
V  [libjvm.so+0xbd71eb]  Parse::do_call()+0x2fb
V  [libjvm.so+0x14e7648]  Parse::do_one_bytecode()+0x3c8
V  [libjvm.so+0x14d8386]  Parse::do_one_block()+0x5a6
V  [libjvm.so+0x14d9233]  Parse::do_all_blocks()+0xf3
V  [libjvm.so+0x14dcedf]  Parse::Parse(JVMState*, ciMethod*, float)+0xb9f
V  [libjvm.so+0x8a2935]  ParseGenerator::generate(JVMState*)+0xd5
V  [libjvm.so+0x8a4b2e]  PredictedCallGenerator::generate(JVMState*)+0x27e
V  [libjvm.so+0xbd71eb]  Parse::do_call()+0x2fb
V  [libjvm.so+0x14e7648]  Parse::do_one_bytecode()+0x3c8
V  [libjvm.so+0x14d8386]  Parse::do_one_block()+0x5a6
V  [libjvm.so+0x14d9233]  Parse::do_all_blocks()+0xf3
V  [libjvm.so+0x14dcedf]  Parse::Parse(JVMState*, ciMethod*, float)+0xb9f
V  [libjvm.so+0x8a2935]  ParseGenerator::generate(JVMState*)+0xd5
V  [libjvm.so+0xa15c62]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xd82
V  [libjvm.so+0x8a0058]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x178
V  [libjvm.so+0xa23948]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xbc8
V  [libjvm.so+0xa24488]  CompileBroker::compiler_thread_loop()+0x408
V  [libjvm.so+0x174d55a]  JavaThread::thread_main_inner()+0x1ea
V  [libjvm.so+0x1754b20]  Thread::call_run()+0x100
V  [libjvm.so+0x14929d4]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283061,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vxt7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-10 13:09;dlong;All of the crashes I've seen involve calling method jdk/jfr/internal/EventWriter.getEventWriter(), which is different in loom.  In JDK19 it returns Object, but in loom it returns EventWriter.  The crashes also involve dynamic DynamicEvent and EventHandler classes that JFR creates using ASM.;;;","2022-03-10 13:13;dlong;We are calling type_or_null() for a node with _idx of 512, and the mapping array is size 512, so we crash.  As the code is currently written, with as assert in fast_lookup() checking for an out-of-bounds index, it seems like a bug that type_or_null() doesn't check for that before calling fast_lookup().

We may be hitting this problem a lot, but it will only cause a crash when the unmapped node is new enough to have an index bigger than the _types array.  That array is doubled in size when it grows, so it often has extra unmapped slots at the end, which probably explains why we don't hit this assert more often.;;;","2022-03-10 20:28;dlong;Workaround: -XX:DisableIntrinsic=_getEventWriter
;;;","2022-03-10 22:27;alanb;[~mgronlun] refreshed the JFR support very recently via:
  https://github.com/openjdk/loom/commit/442ea0f055f66a796431460d11c06e94a6a379ac
which includes changes to the getEventWriter intrinsic, maybe this is why I haven't see this crash in the last few days.;;;","2022-03-11 14:57;dlong;Thanks Alan.  Now that I understand the problem better, I was able to verify that the new intrinsic code no longer has the problem. ;;;","2022-03-11 14:58;dlong;Fixed in latest JFR inline_native_getEventWriter intrinsic.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Revise the creation of unmodifiable list,JDK-8281298,5067907,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xuelei,xuelei,xuelei,2022-02-05 11:01,2022-02-09 16:14,2023-10-01 09:56,2022-02-06 22:32,,,,,,,,,19,security-libs,,0,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,,,,"In JDK-8281289, the SSLParameters class was updated with the patch:
- return Collections.<SNIServerName>unmodifiableList(new ArrayList<>(sniNames.values()));
+ return List.copyOf(sniNames.values());

However, there's a small compatibility risk with this change, `List.copyOf(...).contains(null)` will throw NPE while `Collections.unmodifiableList(...).contains(null)` won't. It may be not worthy of the risk although the impact may be minimal.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vxsr:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-02-05 12:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7359
Date: 2022-02-05 20:29:50 +0000;;;","2022-02-06 22:32;roboduke;Changeset: f2302822
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-02-07 06:30:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f2302822c0ef30fbf7cb4e31b8dc1513e9413a23
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestStressG1Humongous fails with guarantee(is_range_uncommitted),JDK-8281297,5067906,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,lkorinth,aturbanov,aturbanov,2022-02-05 10:26,2023-07-07 03:13,2023-10-01 09:56,2022-05-09 00:18,19,,,,,,,,19,hotspot,,0,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,tier6,tier7,,,,,,,,,,,,,"Reproduced at least twice. Once in fresh master and once in my branch (https://github.com/openjdk/jdk/pull/7061).

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (g1RegionToSpaceMapper.cpp:117), pid=8256, tid=7316
#  guarantee(is_range_committed(start_idx, num_regions)) failed: Range not committed, start: 949, num_regions: 72
#
# JRE version: OpenJDK Runtime Environment (19.0) (build 19-internal+0-adhoc.aturbanov.jdk)
# Java VM: OpenJDK 64-Bit Server VM (19-internal+0-adhoc.aturbanov.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# No core dump will be written. Minidumps are not enabled by default on client versions of Windows
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:MaxRAMPercentage=12.5 -Djava.io.tmpdir=c:\projects\jdk\build\windows-x86_64-server-release\test-support\jtreg_test_hotspot_jtreg_tier4\tmp -Xlog:gc=debug -Xmx1024m -XX:+UseG1GC -XX:G1HeapRegionSize=1m -Dtimeout=600 -Dthreads=7 -Dhumongoussize=0.6 -Dregionsize=1 gc.stress.TestStressG1HumongousImpl

Host: AMD Ryzen 9 5900X 12-Core Processor            , 8 cores, 11G,  Windows 11 , 64 bit Build 22000 (10.0.22000.434)
Time: Fri Feb  4 09:40:09 2022 Eur elapsed time: 305.518100 seconds (0d 0h 5m 5s)

---------------  T H R E A D  ---------------

Current thread (0x00000238f1f28d30):  ConcurrentGCThread ""G1 Service"" [stack: 0x0000006375900000,0x0000006375a00000] [id=7316]

Stack: [0x0000006375900000,0x0000006375a00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x6a150a]  os::platform_print_native_stack+0xca  (os_windows_x86.cpp:235)
V  [jvm.dll+0x850c3d]  VMError::report+0xc4d  (vmError.cpp:828)
V  [jvm.dll+0x85254e]  VMError::report_and_die+0x78e  (vmError.cpp:1656)
V  [jvm.dll+0x852bb7]  VMError::report_and_die+0x47  (vmError.cpp:1437)
V  [jvm.dll+0x26165a]  report_vm_error+0x8a  (debug.cpp:280)
V  [jvm.dll+0x32edc2]  G1RegionsLargerThanCommitSizeMapper::uncommit_regions+0xd2  (g1RegionToSpaceMapper.cpp:115)
V  [jvm.dll+0x384433]  HeapRegionManager::uncommit_inactive_regions+0x143  (heapRegionManager.cpp:322)
V  [jvm.dll+0x340b90]  G1UncommitRegionTask::execute+0x70  (g1UncommitRegionTask.cpp:118)
V  [jvm.dll+0x33c7a6]  G1ServiceThread::run_service+0x1b6  (g1ServiceThread.cpp:143)
V  [jvm.dll+0x2557fe]  ConcurrentGCThread::run+0x1e  (concurrentGCThread.cpp:51)
V  [jvm.dll+0x7fcc2a]  Thread::call_run+0x8a  (thread.cpp:368)
V  [jvm.dll+0x6a03b5]  thread_native_entry+0x75  (os_windows.cpp:544)
C  [ucrtbase.dll+0x26c0c]
C  [KERNEL32.DLL+0x154e0]
C  [ntdll.dll+0x485b]",,,,,,,,,,JDK-8287557,JDK-8311633,JDK-8298570,JDK-8288390,JDK-8293943,JDK-8304206,JDK-8295203,,,,,,,,,,,,,,,,JDK-8293809,JDK-8284639,,,JDK-8285937,JDK-8283899,,,,,,,,,,,,,,,,,"2022-02-05 10:26;aturbanov;TestStressG1Humongous1.zip;https://bugs.openjdk.org/secure/attachment/97901/TestStressG1Humongous1.zip","2022-02-05 10:26;aturbanov;TestStressG1Humongous2.zip;https://bugs.openjdk.org/secure/attachment/97900/TestStressG1Humongous2.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2vxsj:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-04-16 19:36;dcubed;Here's a log file snippet for the jdk-19+19-1227-tier7 sighting: 

gc/stress/TestStressG1Humongous.java

Allocated 1021 objects.
[342.413s][info ][gc] GC(13385) Pause Young (Concurrent Start) (G1 Humongous Allocation) 1M->0M(1024M) 1.375ms
[342.413s][info ][gc] GC(13386) Concurrent Mark Cycle
[342.417s][info ][gc] GC(13386) Pause Remark 115M->115M(390M) 0.818ms
[342.420s][info ][gc] GC(13386) Pause Cleanup 228M->228M(390M) 0.152ms
[342.420s][info ][gc] GC(13386) Concurrent Mark Cycle 7.774ms
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (g1RegionToSpaceMapper.cpp:117), pid=35916, tid=48352
#  guarantee(is_range_committed(start_idx, num_regions)) failed: Range not committed, start: 899, num_regions: 122
#
# JRE version: Java(TM) SE Runtime Environment (19.0+19) (build 19-ea+19-1227)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (19-ea+19-1227, mixed mode, sharing, tiered, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_gc\\scratch\\4_1\\hs_err_pid35916.mdmp
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_gc\\scratch\\4_1\\hs_err_pid35916.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
];
 stderr: []
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0]

	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:489)
	at gc.stress.TestStressG1Humongous.run(TestStressG1Humongous.java:77)
	at gc.stress.TestStressG1Humongous.main(TestStressG1Humongous.java:57)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0]


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x000001dc0f614760):  ConcurrentGCThread ""G1 Service"" [stack: 0x00000086c7900000,0x00000086c7a00000] [id=48352]

Stack: [0x00000086c7900000,0x00000086c7a00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x6a9cca]  os::platform_print_native_stack+0xca  (os_windows_x86.cpp:235)
V  [jvm.dll+0x806d6e]  VMError::report+0xc4e  (vmError.cpp:839)
V  [jvm.dll+0x8086be]  VMError::report_and_die+0x78e  (vmError.cpp:1668)
V  [jvm.dll+0x808d27]  VMError::report_and_die+0x47  (vmError.cpp:1449)
V  [jvm.dll+0x26544a]  report_vm_error+0x8a  (debug.cpp:282)
V  [jvm.dll+0x336232]  G1RegionsLargerThanCommitSizeMapper::uncommit_regions+0xd2  (g1RegionToSpaceMapper.cpp:115)
V  [jvm.dll+0x38bb15]  HeapRegionManager::uncommit_inactive_regions+0x155  (heapRegionManager.cpp:322)
V  [jvm.dll+0x348010]  G1UncommitRegionTask::execute+0x70  (g1UncommitRegionTask.cpp:118)
V  [jvm.dll+0x343c26]  G1ServiceThread::run_service+0x1b6  (g1ServiceThread.cpp:143)
V  [jvm.dll+0x25930e]  ConcurrentGCThread::run+0x1e  (concurrentGCThread.cpp:51)
V  [jvm.dll+0x7b282a]  Thread::call_run+0x8a  (thread.cpp:366)
V  [jvm.dll+0x6a8b80]  thread_native_entry+0x80  (os_windows.cpp:544)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791];;;","2022-05-05 10:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8560
Date: 2022-05-05 17:37:35 +0000;;;","2022-05-09 00:18;dukebot;Changeset: 1ce72eab
Author:    Leo Korinth <lkorinth@openjdk.org>
Date:      2022-05-09 07:16:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1ce72eabe54520845d8466c9d3ac07b60597182a
;;;","2022-05-11 03:02;ayang;Just for the record, since the fix was not obvious to me.

Before the fix, `BitMap::par_put_range_within_word`, contains a single load, `bm_word_t  w  = *pw;` and some bit operations on the local variable of `w`.

However, the generated asm using `VS2022-17.1.0+1.0` looks like:

```
; <op> <src> <dst>
and    (%r11),%rcx
                            <--- (%r11) is updated
mov    (%r11),%rax          <--- %rax has the new (%r11)
...
lock cmpxchg %rcx,(%r11)    <--- success because %rax has the latest (%r11), but %rcx is built using outdated (%r11).
```

It's unclear why the compiler chooses to load `pw` multiple times, instead of using a register for `w`. Nonetheless, the fix of marking `pw` (`%r11`) as `volatile` avoids such asm code.;;;","2022-06-09 03:18;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Low risk, simple change.
Clean backport.
SAP nightly testing passed.;;;","2022-06-09 03:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/455
Date: 2022-06-09 10:21:04 +0000;;;","2022-10-11 01:25;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
Small risk, tiny change to hotspot coding.
Clean backport.
Mentioned test passes. SAP nighlty testing passed.;;;","2022-10-11 01:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1436
Date: 2022-10-11 08:26:23 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[vectorapi] FIRST_NONZERO reduction operation throws IllegalArgumentExcept on zero vectors,JDK-8281294,5067902,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,psandoz,qamai,qamai,2022-02-05 08:00,2022-08-17 11:26,2023-10-01 09:56,2022-02-10 10:38,,,,,,,,,19,core-libs,,0,vectorapi,,,,,,,,,,,,,,,,,,,"FIRST_NONZERO reduction operation is implemented as 

    this.lane(thisNZ.firstTrue());

VectorMask.firstTrue() returns vector length on all false masks, this leads to Vector.lane(int) throws IllegalArgumentException. The implementation should returns 0 in this occasion instead since FIRST_NONZERO is described as a != 0 ? a : b, which will be 0 if both a and b are 0.

In addition FIRST_NONZERO reduction with a mask throws UnsupportedOperationException, since the there is no support to obtain the reduce identity vector.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vxrn:",9223372036854775807,b10,,,,,,,,,,Verified,,"2022-02-08 15:32;dlong;This sounds like a library issue, not a JIT issue.  [~psandoz], I'm assigning to you for evaluation.;;;","2022-02-08 16:53;psandoz;It's a library issue (a secondary issue is to make the operation intrinsic). We neglected to test this operation under reduction.;;;","2022-02-09 13:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7410
Date: 2022-02-09 21:36:01 +0000;;;","2022-02-10 10:38;roboduke;Changeset: 83b6e4bc
Author:    Paul Sandoz <psandoz@openjdk.org>
Date:      2022-02-10 18:37:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/83b6e4bc04db89a846a1b6c2d0666efe139f8f61
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve with List.copyOf,JDK-8281289,5067844,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xuelei,xuelei,xuelei,2022-02-04 14:46,2022-02-09 16:13,2023-10-01 09:56,2022-02-04 23:54,,,,,,,,,19,security-libs,,0,noreg-cleanup,noreg-trivial,tencent-interest,,,,,,,,,,,,,,,,,"The implementation code in SSLParameters could be improved with List.copyOf() method.

-         return Collections.<SNIServerName>unmodifiableList(new ArrayList<>(sniNames.values()));
+        return List.copyOf(sniNames.values());

-         return Collections.<SNIMatcher>unmodifiableList(new ArrayList<>(sniMatchers.values()));
+        return List.copyOf(sniMatchers.values());
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vxnv:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-02-04 15:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7356
Date: 2022-02-04 23:02:21 +0000;;;","2022-02-04 23:54;roboduke;Changeset: 42e272e1
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-02-05 07:44:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/42e272e181f188c89fa88f144715f19235943fca
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Write JSlider accessibility test,JDK-8281284,5067833,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-02-04 10:22,2022-03-30 18:01,2023-10-01 09:56,2022-03-29 09:52,18,19,,,,,,,19,client-libs,,0,,,,,,,,,,,,,,,,,,,,"This testcase covers old and new api added in jdk17 
getAccessibleAction(), getAccessibleActionCount() , getAccessibleActionDescription",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vxlf:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-02-04 10:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7355
Date: 2022-02-04 18:39:52 +0000;;;","2022-03-29 09:52;dukebot;Changeset: f074775f
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Alexander Zuev <kizune@openjdk.org>
Date:      2022-03-29 16:48:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f074775f6cb423c76bc90082873f31cdbd82d9ca
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove usages of __WithField in runtime tests,JDK-8281283,5067832,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlsmith,dlsmith,dlsmith,2022-02-04 10:16,2022-03-02 13:34,2023-10-01 09:56,2022-02-23 15:35,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,,,,,,,,,,,,,,,,,,,,"We don't anticipate a generalized 'withfield' feature in the language any time soon, so tests that make use of the temporary '__WithField' feature need to be rewritten, either achieving the behavior through a Java language constructor or expressing the instruction in bytecode (e.g., via jasm).",,,,,,,,,,,,,,,,,,,,,,,,JDK-8281763,,JDK-8282580,,,,,,,,,,,,,,,,,,,,,,JDK-8282512,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vxl7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-04 14:33;dlsmith;I've noticed some related bugs in JumboInline, where 'update' doesn't work properly, and 'equals' performs incorrect comparisons, hidden by the broken 'update'.;;;","2022-02-16 17:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/653
Date: 2022-02-17 00:56:50 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Preload attribute code needs some fixes,JDK-8281281,5067829,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2022-02-04 08:57,2022-02-04 11:14,2023-10-01 09:56,2022-02-04 11:14,repo-valhalla,,,,,,,,,hotspot,,0,lworld,,,,,,,,,,,,,,,,,,,"Preload attribute support is missing some deallocation code and a proper handling during class redefinition.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vxkj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-04 09:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/626
Date: 2022-02-04 16:58:22 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrading from 8 to 11 no longer accepts '/' as filepath separator in gc paths,JDK-8281275,5067366,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,webbuggrp,webbuggrp,2022-01-29 03:38,2022-03-31 05:05,2023-10-01 09:56,2022-02-10 15:26,11.0.14,,,,,,,,19,hotspot,,0,8na,dcspn,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,logging,migration11,redhat-interest,regression,reproducer-other,webbug,"A DESCRIPTION OF THE PROBLEM :
I'm running the following java command in a Windows Server 2016 operating system using the latest Java 11 version:

java -Xlog:gc*:file=""C:\users\test_gc.log"" -version

This completes successfully.

However, I would like to be able to do:

java -Xlog:gc*:file=""C:/users/test_gc.log"" -version

This fails due to the forward slashes in a Windows system. This would be normal in a cmd terminal; however, I'm testing the commands above in PowerShell which accepts both backslashes and forward slashes in paths.

In java 8, forward slashes were acceptable and both of the above commands worked (albeit with \\ for the backslash case). Furthermore, in Java 8 the quotes weren't required due to its xloggc syntax that didn't have a colon. Specifically in this bug report, I would like the bugged incompatibility with '/' to be addressed.

The loss of a universal forward slash in paths wreaks havoc with running software in Windows that has multiple embedded 3rd-party java components, as each embedded component parses the backslashes differently. Right now I have a combination of single backslashes, double backslashes, and even 4 backslashes as path separators for different java components (jboss, spark, hive). These are common java software products, and it is impossible to address all of their source codes to handle the \ in the same manner.

For java 11 gc paths to be usable on Windows, it must be able to accept '/' inputs as filepath separators. Thank you.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Install latest Java 8 Hotspot version on Windows 64.

Open PowerShell.

Enter (substitute User with your username):

java -Xloggc:C:/Users/User/Documents/gc8.log -version

Repeat with the latest Java 11 Hotspot version:

java -Xlog:gc*:file=""C:/Users/User/Documents/gc11.log"" -version

It will fail.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
I expected this output:

openjdk version ""11.0.14"" 2022-01-18
OpenJDK Runtime Environment Temurin-11.0.14+9 (build 11.0.14+9)
OpenJDK 64-Bit Server VM Temurin-11.0.14+9 (build 11.0.14+9, mixed mode)
ACTUAL -
Error output:

Invalid -Xlog option '-Xlog:gc*:file=C:/Users/User/Documents/gc11.log', see error log for details.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.

CUSTOMER SUBMITTED WORKAROUND :
Backslashes work:

java -Xlog:gc*:file=""C:\Users\User\Documents\gc11.log"" -version


FREQUENCY : always


",,,,,,,,,,JDK-8282266,JDK-8281749,JDK-8281756,JDK-8283636,JDK-8284092,JDK-8283502,JDK-8282013,JDK-8284080,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-02-04 07:23;pnarayanaswa;Capture1.PNG;https://bugs.openjdk.org/secure/attachment/97836/Capture1.PNG",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2vupv:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-04 07:23;pnarayanaswa;Issue is reproducible, <attached screenshot>
Moving to JDK Project.;;;","2022-02-07 01:08;lkorinth;Moved from gc to runtime because this is a unified logging issue.;;;","2022-02-07 15:04;dholmes;I'm a little surprised we accepted forward-slash paths in Java 8, but if we did then we should be able to continue to do so. I need to check which component is actually responsible for the file handling.;;;","2022-02-08 04:35;dholmes;This appears to be a parsing problem with Unified Logging. If I use JDK 15, where -Xloggc is automatically converted to -Xlog:gc then I can use a forward-slashed path for the log file. But if I try to use -Xlog:gc:file=... directly then I get an error e.g.

$ java -Xlog:gc:file=""c:/Users/daholme/zz2.log"" -version
[0.004s][error][logging] Invalid decorator '/Users/daholme/zz2.log'.
Invalid -Xlog option '-Xlog:gc:file=c:/Users/daholme/zz2.log', see error log for details.

and we can see the Unified Logging has mis-parsed the path due to the colon and thinks that the path is a decorator.

This seems to be the problem code:

#ifdef _WINDOWS
    // Skip over Windows paths such as ""C:\...""
    // Handle both C:\... and file=C:\...""
    if (next != NULL && next[0] == ':' && next[1] == '\\') {
      if (next == str + 1 || (strncmp(str, ""file="", 5) == 0)) {
        next = strpbrk(next + 1, "":\"""");
      }
    }
#endif

as it only check for the \ separator not the /.;;;","2022-02-08 11:08;mseledtsov;ILW = MMM = P3;;;","2022-02-08 15:30;dholmes;The obvious trivial fix works:

$ /d/apps/Java/jdk-19/bin/java -Xlog:gc:file=c:/Users/daholme/zz4.log -version
java version ""19-internal"" 2022-09-20
Java(TM) SE Runtime Environment (build 19-internal+0-2022-02-08-2143255.david.holmes.jdk-dev2.git)
Java HotSpot(TM) 64-Bit Server VM (build 19-internal+0-2022-02-08-2143255.david.holmes.jdk-dev2.git, mixed mode, sharing);;;","2022-02-09 20:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7415
Date: 2022-02-10 04:53:07 +0000;;;","2022-02-10 15:26;roboduke;Changeset: 84868e39
Author:    David Holmes <dholmes@openjdk.org>
Date:      2022-02-10 23:23:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/84868e39be4522ba87e603beea0f8da9efa43b6d
;;;","2022-02-14 10:55;hseigel;Fix Request
This change fixes a regression involving -Xloggc.  The risk for this fix is low because the amount of code being changed is small and only affects Windows.  The patch applied cleanly and was tested by running Mach5 tiers 1 and 2.
;;;","2022-02-16 10:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/27
Date: 2022-02-16 18:13:17 +0000;;;","2022-03-21 07:11;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
Simple fix, low risk.
Clean backport.
SAP nightly testing passed.;;;","2022-03-21 07:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/270
Date: 2022-03-21 14:13:19 +0000;;;","2022-03-22 08:18;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
Simple fix, low risk.
Clean backport except for Copyright.
SAP nightly testing passed.;;;","2022-03-22 08:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/935
Date: 2022-03-22 15:15:59 +0000;;;","2022-03-30 07:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/189
Date: 2022-03-30 14:21:39 +0000;;;","2022-03-31 02:20;yan;Fix request [15u, 13u]

I'd like to backport it for parity with major releases.
Old copyright dates -- the only difference from the original. 
Fix works. Nightly test run successful.;;;","2022-03-31 04:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/333
Date: 2022-03-31 11:46:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Resolve duplication of test ClassTransformer class,JDK-8281268,5067816,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,amenkov,amenkov,2022-02-04 06:09,2022-05-25 23:07,2023-10-01 09:56,2022-05-18 13:51,19,,,,,,,,19,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,,,"JDK-8240908 fix copied ClassTransformer class (from test/jdk/com/sun/jdi/lib/jdb) to /test/lib as it's used by tests from hotspot and jdk (and also by test from Valhalla repo)
Need to resolve the duplication: update tests and delete the copy from test/jdk/com/sun/jdi/lib/jdb",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8240908,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vxhn:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2022-05-11 23:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8672
Date: 2022-05-12 06:43:29 +0000;;;","2022-05-13 15:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8710
Date: 2022-05-13 22:50:11 +0000;;;","2022-05-18 13:50;dukebot;Changeset: a6177092
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2022-05-18 20:49:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a617709235588420ad16624e44625de5e3f4625f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VM HeapDumper dumps array classes several times,JDK-8281267,5067815,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,amenkov,amenkov,2022-02-04 06:03,2022-02-23 17:49,2023-10-01 09:56,2022-02-18 01:23,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,"HeapDumper generates duplicate HPROF_LOAD_CLASS records for array classes (both object arrays and primitive type arrays).
Number of the duplicates depend on dimension of the array.
For example:
If an application has ""[[[I"" class loaded (int[][][])
the following HPROF_LOAD_CLASS are written:
- [I - 2 records
- [[I - 3 records
- [[[I - 4 records",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vxhf:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2022-02-08 08:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7384
Date: 2022-02-08 16:49:41 +0000;;;","2022-02-18 01:23;roboduke;Changeset: 138a1719
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2022-02-18 09:21:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/138a17195d1695c6faaa156a43624c39c62b141b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] MetaUtil.toInternalName() doesn't handle hidden classes correctly,JDK-8281266,5067814,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2022-02-04 06:02,2022-04-03 22:37,2023-10-01 09:56,2022-03-08 07:37,17.0.2,18,19,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,jvmci,oracle-triage-11,oracle-triage-18,,,,,,,,,,,,"JDK-8238358 introduced hidden classes with internal names like com/example/Foo.1234 that get changed to com.example.Foo/1234 by Class.getName() which are not properly handled by MetaUtil's toInternalName and internalNameToJava

This used to work on the assumption that the internal class names didn't contain the . character and that java class names didn't contain the / character except for lambdas (which are now treated as hidden classes as well), an assumption that no longer holds.",,,,,,,,,,JDK-8284244,JDK-8283821,JDK-8283554,,,,,,,,,,,,,,,,,,,,,,,,JDK-8238358,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vxh7:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-04 06:04;sgehwolf;Assigning to myself on behalf of Foivos Zakkak who is working on a fix for this.;;;","2022-02-04 17:58;dlong;ILW = unknown impact, unknown likelihood, no workaround = MMH = P3;;;","2022-02-18 11:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7346
Date: 2022-02-04 12:01:46 +0000;;;","2022-03-08 07:37;dukebot;Changeset: 0cbc4b85
Author:    Foivos Zakkak <fzakkak@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-03-08 15:35:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0cbc4b85bf8ab2ccfb8762322098c4cc7996df7d
;;;","2022-03-21 07:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/274
Date: 2022-03-21 14:46:10 +0000;;;","2022-03-22 03:02;sgehwolf;Fix Request (OpenJDK 17u):

Backporting to fix Mandrel/GraalVM issue with incorrect file names being reported for lambda method in debug info https://github.com/graalvm/mandrel/issues/355. Small and trivial fix, low risk. Clean backport. Testing: tier1 and jvmci tests passing (including the newly added ones that where failing before the patch);;;","2022-03-30 23:33;thartmann;Fix Request (JDK 18u)
Fixes an issue with incorrect file names being reported for lambda methods in debug info. The fix is low risk and applied cleanly. Already tested and backported to JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-30 23:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/87
Date: 2022-03-31 06:29:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Windows builds in different directories are not fully reproducible,JDK-8281262,5067807,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mkartashev,mkartashev,mkartashev,2022-02-04 02:40,2022-12-23 00:31,2023-10-01 09:56,2022-02-10 02:47,17,dev,,,,,,,19,infrastructure,,0,build-infra,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,,,,,,,,,,,,"When building the same commit of OpenJDK in different directories on Windows, some of dll/exe files created by the build differ quite a bit. Closer inspection with dumpbin reveals absolute path names baked into them despite the use of the -pathmap flag. In my case, the following came out different:
dt_shmem.dll, instrument.dll, jdwp.dll, jvm.dll, jpackageapplauncherw.exe, msiwrapper.exe, jpackage.dll.
This, of course, has a ripple effect on many jmods, which appear different as well.

To reproduce the problem:
1. Clone the OpenJDK repository.
2. Run configure with at least these options 
 --enable-reproducible-build --with-source-date=1643953637 --with-hotspot-build-time=2022-02-04 --with-copyright-year=2022 --disable-absolute-paths-in-output  --with-debug-level=release
3. Build (make images).

Then do, for example,
$ dumpbin /all ./build/windows-x86_64-server-release/images/jdk/bin/jdwp.dll
And search for any short word that appears in the path above the JDK root. In my case, building in my home directory enabled me to do
$ grep maxim ... | wc -l
34  
(better also check by looking at the dumpbin output as the word may happen to be not a part of a path or have a line break in the middle).
",,,,,,,,,,JDK-8282010,JDK-8282265,JDK-8283501,JDK-8282009,JDK-8299302,,,,,,,,,,,,,,,,,,,,,,JDK-8256240,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2vxfv:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-02-04 02:46;mkartashev;The reason for -pathmap not having the desired effect seems to be in the use of Windows-style path for it. The slash characters in the path passed as an argument get removed by the fixpath script that pre-processes all commands on Windows prior to running them and is supposed to convert Unix-style paths to what is understood by Windows.

For example:
$ build/windows-x86_64-server-release/fixpath print -pathmap:C:\cygwin64\home\maxim\work\repr.build.1=s
-pathmap:C:cygwin64homemaximworkrepr.build.1=s

However, if a ""normal"" Unix-style path is provided, it gets converted correctly and then the build produces reproducible results:

$ build/windows-x86_64-server-release/fixpath print -pathmap:/home/maxim/work/repr.build.1=s
-pathmap:C:\cygwin64\home\maxim\work\repr.build.1=s
;;;","2022-02-04 03:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7344
Date: 2022-02-04 10:55:40 +0000;;;","2022-02-10 02:47;roboduke;Changeset: d442328b
Author:    Maxim Kartashev <maxim.kartashev@jetbrains.com>
Committer: Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-02-10 10:46:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d442328bc2f2f4bc35dd054487a78552e3d9a759
;;;","2022-02-10 15:50;erikj;Fix Request (18u)
This is a regression introduced in JDK 16. Before this we were at a stage where we finally managed to remove all absolute paths from build machines from our built binaries. This fix restores this property on Windows. Risk is very low, just a build and test change. Patch applies cleanly and is verified to have the desired effect.;;;","2022-02-16 09:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/26
Date: 2022-02-16 17:30:16 +0000;;;","2022-03-21 07:05;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a build change.
Clean backport.
SAP nightly testing passed.;;;","2022-03-21 07:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/269
Date: 2022-03-21 14:10:10 +0000;;;","2022-12-15 00:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1598
Date: 2022-12-15 08:16:01 +0000;;;","2022-12-20 09:19;clanger;Fix request (11u):
Inlined in the backport of JDK-8256240. Without this small piece of code, the original backport would not work. Seems benign and good to have.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test java/lang/instrument/RetransformWithMethodParametersTest.java is failing,JDK-8281243,5067790,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,amenkov,dholmes,dholmes,2022-02-03 17:43,2022-02-09 16:14,2023-10-01 09:56,2022-02-07 01:10,19,,,,,,,,19,hotspot,,0,intermittent,noreg-self,tier3,,,,,,,,,,,,,,,,,"JDK-8240908 added a new test that is now seen to fail intermittently:

----------System.out:(163/7668)----------
InstrumentationHandoff JPLIS agent initialized
Reading test class from /System/Volumes/Data/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S22806/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/85c40bfb-9782-46c7-90ed-85b8d360aa74/runs/754600a9-2a5f-4382-8878-a63263c49a70/testoutput/test-support/jtreg_open_test_jdk_tier3/classes/3/java/lang/instrument/RetransformWithMethodParametersTest.d/MethodParametersTarget.class
Read 502 bytes.
Params of method1 method (2):
  0: intParam1 (present)
  1: stringParam1 (present)
Debugging message: Added transformer RetransformWithMethodParametersTest$Transformer with canRetransform=true
Testcase 1: ensure ClassFileReconstituter restores MethodParameters attribute
RetransformWithMethodParametersTest$Transformer.transform() sees 'MethodParametersTarget' of 502 bytes.
Class bytes are different.
expected -------------------
[2022-02-04T01:20:26.422653Z] Gathering output for process 13406
[2022-02-04T01:20:26.838675Z] Waiting for completion for process 13406
[2022-02-04T01:20:26.838814Z] Waiting for completion finished for process 13406
Output and diagnostic info for process 13406 was saved into 'pid-13406-output.log'
[2022-02-04T01:20:26.841194Z] Waiting for completion for process 13406
[2022-02-04T01:20:26.841285Z] Waiting for completion finished for process 13406
Classfile /System/Volumes/Data/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S22806/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/85c40bfb-9782-46c7-90ed-85b8d360aa74/runs/754600a9-2a5f-4382-8878-a63263c49a70/testoutput/test-support/jtreg_open_test_jdk_tier3/scratch/1/MethodParametersTarget.class
  Last modified Feb 4, 2022; size 502 bytes
  SHA-256 checksum 61f42fc76bec6b36b6ddb7ceb902f624061168b4fc00adc69da8ca7a18a2384b
  Compiled from ""RetransformWithMethodParametersTest.java""
class MethodParametersTarget
  minor version: 0
  major version: 63
  flags: (0x0020) ACC_SUPER
  this_class: #7                          // MethodParametersTarget
  super_class: #2                         // java/lang/Object
  interfaces: 0, fields: 0, methods: 2, attributes: 1
Constant pool:
   #1 = Methodref          #2.#3          // java/lang/Object.""<init>"":()V
   #2 = Class              #4             // java/lang/Object
   #3 = NameAndType        #5:#6          // ""<init>"":()V
   #4 = Utf8               java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = Class              #8             // MethodParametersTarget
   #8 = Utf8               MethodParametersTarget
   #9 = Utf8               Code
  #10 = Utf8               LineNumberTable
  #11 = Utf8               LocalVariableTable
  #12 = Utf8               this
  #13 = Utf8               LMethodParametersTarget;
  #14 = Utf8               method1
  #15 = Utf8               (ILjava/lang/String;)V
  #16 = Utf8               intParam1
  #17 = Utf8               I
  #18 = Utf8               stringParam1
  #19 = Utf8               Ljava/lang/String;
  #20 = Utf8               MethodParameters
  #21 = Utf8               SourceFile
  #22 = Utf8               RetransformWithMethodParametersTest.java
{
  MethodParametersTarget();
    descriptor: ()V
    flags: (0x0000)
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object.""<init>"":()V
         4: return
      LineNumberTable:
        line 59: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   LMethodParametersTarget;

  public void method1(int, java.lang.String);
    descriptor: (ILjava/lang/String;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=0, locals=3, args_size=3
         0: return
      LineNumberTable:
        line 68: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       1     0  this   LMethodParametersTarget;
            0       1     1 intParam1   I
            0       1     2 stringParam1   Ljava/lang/String;
    MethodParameters:
      Name                           Flags
      intParam1
      stringParam1
}
SourceFile: ""RetransformWithMethodParametersTest.java""
==========================================
expected -------------------
[2022-02-04T01:20:26.846186Z] Gathering output for process 13417
[2022-02-04T01:20:27.285856Z] Waiting for completion for process 13417
[2022-02-04T01:20:27.285970Z] Waiting for completion finished for process 13417
Output and diagnostic info for process 13417 was saved into 'pid-13417-output.log'
[2022-02-04T01:20:27.286346Z] Waiting for completion for process 13417
[2022-02-04T01:20:27.286374Z] Waiting for completion finished for process 13417
Classfile /System/Volumes/Data/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S22806/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/85c40bfb-9782-46c7-90ed-85b8d360aa74/runs/754600a9-2a5f-4382-8878-a63263c49a70/testoutput/test-support/jtreg_open_test_jdk_tier3/scratch/1/MethodParametersTarget.class
  Last modified Feb 4, 2022; size 502 bytes
  SHA-256 checksum 0072be898071fb79abf0964ff53c5514aa3ba66726da5c4f81033f18acb8ce89
  Compiled from ""RetransformWithMethodParametersTest.java""
class MethodParametersTarget
  minor version: 0
  major version: 63
  flags: (0x0020) ACC_SUPER
  this_class: #7                          // MethodParametersTarget
  super_class: #2                         // java/lang/Object
  interfaces: 0, fields: 0, methods: 2, attributes: 1
Constant pool:
   #1 = Methodref          #2.#3          // java/lang/Object.""<init>"":()V
   #2 = Class              #4             // java/lang/Object
   #3 = NameAndType        #5:#6          // ""<init>"":()V
   #4 = Utf8               java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = Class              #8             // MethodParametersTarget
   #8 = Utf8               MethodParametersTarget
   #9 = Utf8               Code
  #10 = Utf8               LineNumberTable
  #11 = Utf8               LocalVariableTable
  #12 = Utf8               this
  #13 = Utf8               LMethodParametersTarget;
  #14 = Utf8               method1
  #15 = Utf8               (ILjava/lang/String;)V
  #16 = Utf8               intParam1
  #17 = Utf8               I
  #18 = Utf8               stringParam1
  #19 = Utf8               Ljava/lang/String;
  #20 = Utf8               MethodParameters
  #21 = Utf8               SourceFile
  #22 = Utf8               RetransformWithMethodParametersTest.java
{
  public void method1(int, java.lang.String);
    descriptor: (ILjava/lang/String;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=0, locals=3, args_size=3
         0: return
      LineNumberTable:
        line 68: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       1     0  this   LMethodParametersTarget;
            0       1     1 intParam1   I
            0       1     2 stringParam1   Ljava/lang/String;
    MethodParameters:
      Name                           Flags
      intParam1
      stringParam1

  MethodParametersTarget();
    descriptor: ()V
    flags: (0x0000)
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object.""<init>"":()V
         4: return
      LineNumberTable:
        line 59: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   LMethodParametersTarget;
}
SourceFile: ""RetransformWithMethodParametersTest.java""
==========================================
Debugging message: tearDown beginning
----------System.err:(15/1106)----------
ATestCaseScaffold$TestCaseScaffoldException: MethodParametersTarget did not match .class file
	at ATestCaseScaffold.fail(ATestCaseScaffold.java:116)
	at RetransformWithMethodParametersTest.compareClassBytes(RetransformWithMethodParametersTest.java:178)
	at RetransformWithMethodParametersTest.doRunTest(RetransformWithMethodParametersTest.java:197)
	at ATestCaseScaffold.runTest(ATestCaseScaffold.java:60)
	at RetransformWithMethodParametersTest.main(RetransformWithMethodParametersTest.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8240908,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,"0|i2vxc3:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-02-04 02:32;amenkov;The test expects ClassFileReconstituter restores exactly the same bytes as original classbytes.
This can be wrong if the class has more than 1 method (due to method sorting in  the VM).
MethodParametersTarget class has only 1 method (method1), but does not have constructors. This causes declaration of implicit default constructor.
Need to convert method1 method to constructor to avoid default constructor declaration.;;;","2022-02-04 03:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7345
Date: 2022-02-04 11:18:39 +0000;;;","2022-02-07 01:10;roboduke;Changeset: 95fd9d20
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2022-02-07 09:08:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/95fd9d20f329b15d68e613ec7f932254715e9130
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TYPE_USE annotations not printed in correct position in toString output,JDK-8281238,5067376,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,darcy,webbuggrp,webbuggrp,2022-01-29 21:05,2022-04-02 21:05,2023-10-01 09:56,2022-02-11 13:53,17,,,,,,,,19,tools,,0,additional-information-received,dcsad,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
openjdk version ""17"" 2021-09-14
OpenJDK Runtime Environment (build 17+35-2724)
OpenJDK 64-Bit Server VM (build 17+35-2724, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
TypeMirror's documentation says that a the result of a toString() should try to be valid to use in source code.



    /**
     * Returns an informative string representation of this type.  If
     * possible, the string should be of a form suitable for
     * representing this type in source code.  Any names embedded in
     * the result are qualified if possible.
     *
     * @return a string representation of this type
     */




STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Make an annotation whose target is TYPE_USE

@Target({ElementType.TYPE_USE})
@interface ExampleAnn {}

2. Write some code which uses that annotation on a field type

class Example {
    @ExampleAnn String abc;
}

3. Obtain a TypeMirror of the VariableElement via an annotation processor.

4. Using .toString() on that TypeMirror


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
java.lang.@ExampleAnn String
ACTUAL -
@ExampleAnn java.lang.String

---------- BEGIN SOURCE ----------
// Code for this requires setting up the scaffolding for an annotation processor

---------- END SOURCE ----------

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284220,,,,,,"2022-02-01 21:43;tongwan;type-mirror-bug.zip;https://bugs.openjdk.org/secure/attachment/97806/type-mirror-bug.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vus3:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-30 21:12;tongwan;Requested the complete source code of setting up the scaffolding for an annotation processor from the submitter.;;;","2022-02-01 21:47;tongwan;Additional information from the submiiter:
Okey dokie. All you should have to do is run `java Build.java`.;;;","2022-02-03 10:23;adev;The given reproducer prints:
warning: TypeMirror's toString gave: java.lang.String
warning: TypeMirror's toString gave: @ex.TypeUse java.lang.String
target\GeneratedClass.java:4: error: scoping construct cannot be annotated with type-use annotation: @ex.TypeUse
    @ex.TypeUse java.lang.String name;
                         ^
1 error
2 warnings;;;","2022-02-03 12:46;darcy;I've distilled the reported problem into a standalone example.  Whether or not the annotation type is declared as TYPE_USE or a declaration annotation seems to affect its syntactic acceptance.

import java.lang.annotation.*;

public class GeneratedClass { 
    java.lang.String thisWorks;

     @SuppressWarnings(""foo"") // 
     java.lang.String name1;

     @java.lang.SuppressWarnings(""foo"")
     java.lang.String name2;

     @TypeUse
     String name3;

     @TypeUse
     String name4;

     @TypeUse
     java.lang.String name5; // Fails

     @TypeUse
     java.lang.String name6; // Fails
}

@Target({ElementType.TYPE_USE}) // Change to FIELD and compile succeeds
@Retention(RetentionPolicy.SOURCE)
@interface TypeUse {};;;","2022-02-03 15:45;darcy;After consulting with a colleague, the behavior on the source text above is the expected behavior per JLS 9.7.4:
 ""For example, assume an annotation interface TA which is meta-annotated with just @Target(ElementType.TYPE_USE). The terms @TA java.lang.Object and java.@TA lang.Object are illegal because the simple name to which @TA is closest is classified as a package name. On the other hand, java.lang.@TA Object is legal. ""

https://docs.oracle.com/javase/specs/jls/se17/html/jls-9.html#jls-9.7.4-400 

So to be accepted as valid source, if fully qualified type names are used, any type annotations need to be appear after the package name and before the type name as in the quoted example above. This will require modifications to the currently implemented annotation processing printing facilities.;;;","2022-02-09 13:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7411
Date: 2022-02-09 21:43:13 +0000;;;","2022-02-11 13:50;darcy;With the change out for review, the output of the test program is

Note: TypeMirror's toString gave: java.lang.String
Note: TypeMirror's toString gave: java.lang.@ex.TypeUse String
;;;","2022-02-11 13:53;roboduke;Changeset: 4032fe76
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-02-11 21:52:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4032fe76dccb6da85927361aee7ceedcdb758e89
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The -protected option is not always checked in keytool and jarsigner,JDK-8281234,5067761,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,weijun,weijun,weijun,2022-02-03 10:04,2022-03-07 14:58,2023-10-01 09:56,2022-03-02 06:10,,,,,,,,,19,security-libs,,0,,,,,,,,,,,,,,,,,,,,"When a keystore does not need a password in the load() method and it's not a token based one (one of SunPKCS11 and MSCAPI), the -protected option should be able to prevent jarsigner prompting for a password. It should also prevent keytool from printing out the ""password not provided"" warnings.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vx5n:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,,,"2022-02-03 10:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7339
Date: 2022-02-03 18:23:55 +0000;;;","2022-03-02 06:10;dukebot;Changeset: fc918a73
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-03-02 14:07:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fc918a73d0dcc28146e60f15e978209424a32576
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Preview branch's CLinker.downcallHandle crashes inside asm ,JDK-8281228,5067736,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,sundar,sundar,2022-02-03 08:22,2022-02-21 08:14,2023-10-01 09:56,2022-02-04 05:09,repo-panama,,,,,,,,,tools,,0,foreign-jextract,foreign-preview,,,,,,,,,,,,,,,,,,"File:  Main.java

import java.lang.foreign.*;
import java.util.function.*;
import java.lang.invoke.*;
import java.util.Optional;
import static java.lang.foreign.ValueLayout.*;

public class Main {
    private final static CLinker LINKER = CLinker.systemCLinker();
    private final static ClassLoader LOADER = Main.class.getClassLoader();

    private static final Function<String, Optional<NativeSymbol>> SYMBOL_LOOKUP;

    static {
        // Manual change to handle platform specific library name difference
        String libName = System.getProperty(""os.name"").startsWith(""Windows"")? ""libclang"" : ""clang"";
        System.loadLibrary(libName);

        SYMBOL_LOOKUP = name -> LOADER.findNative(name).or(() -> LINKER.lookup(name));
    }

    static final MethodHandle downcallHandle(String name, FunctionDescriptor fdesc) {
        return SYMBOL_LOOKUP.apply(name).map(
                   addr -> LINKER.downcallHandle(addr, fdesc)
                ).orElse(null);
    }

    static final FunctionDescriptor clang_getFileName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        ADDRESS.withName(""data""),
        JAVA_INT.withName(""private_flags""),
        MemoryLayout.paddingLayout(32)
    ),
        ADDRESS
    );
    static final MethodHandle clang_getFileName$MH = downcallHandle(
        ""clang_getFileName"",
        clang_getFileName$FUNC
    );

    public static void main(String[] args) {}
}

# Note: $llvm10 is the directory where LLVM is installed.

$ java --enable-native-access=ALL-UNNAMED -Djava.library.path=$llvm10/lib/ --enable-preview --source 19 Main.java
Note: Main.java uses preview features of Java SE 19.
Note: Recompile with -Xlint:preview for details.
Exception in thread ""main"" java.lang.ExceptionInInitializerError
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:488)
	at java.base/java.lang.Class.forName(Class.java:467)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:411)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 0
	at java.base/jdk.internal.org.objectweb.asm.Frame.getConcreteOutputType(Frame.java:1170)
	at java.base/jdk.internal.org.objectweb.asm.Frame.merge(Frame.java:1270)
	at java.base/jdk.internal.org.objectweb.asm.MethodWriter.computeAllFrames(MethodWriter.java:1641)
	at java.base/jdk.internal.org.objectweb.asm.MethodWriter.visitMaxs(MethodWriter.java:1577)
	at java.base/jdk.internal.foreign.abi.BindingSpecializer.specialize(BindingSpecializer.java:153)
	at java.base/jdk.internal.foreign.abi.ProgrammableInvoker.getBoundMethodHandle(ProgrammableInvoker.java:102)
	at java.base/jdk.internal.foreign.abi.x64.sysv.CallArranger.arrangeDowncall(CallArranger.java:124)
	at java.base/jdk.internal.foreign.abi.x64.sysv.SysVx64Linker.arrangeDowncall(SysVx64Linker.java:62)
	at java.base/jdk.internal.foreign.abi.AbstractLinker.lambda$downcallHandle$0(AbstractLinker.java:55)
	at java.base/jdk.internal.foreign.abi.AbstractLinker$SoftReferenceCache$Node.get(AbstractLinker.java:101)
	at java.base/jdk.internal.foreign.abi.AbstractLinker$SoftReferenceCache.get(AbstractLinker.java:87)
	at java.base/jdk.internal.foreign.abi.AbstractLinker.downcallHandle(AbstractLinker.java:53)
	at java.base/java.lang.foreign.CLinker.downcallHandle(CLinker.java:195)
	at Main.lambda$downcallHandle$2(Main.java:23)
	at java.base/java.util.Optional.map(Optional.java:260)
	at Main.downcallHandle(Main.java:22)
	at Main.<clinit>(Main.java:34)
	... 6 more

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281224,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vx03:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-02-03 10:15;sundar;Switched-off BindingSpecializer. Got a different error. 

$  java --enable-native-access=ALL-UNNAMED -Djava.library.path=/Users/sundarajanathijegannathan/bin/llvm10/lib/ --enable-preview --source 19 -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=false Main.java 
Note: Main.java uses preview features of Java SE 19.
Note: Recompile with -Xlint:preview for details.
Exception in thread ""main"" java.lang.ExceptionInInitializerError
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:488)
	at java.base/java.lang.Class.forName(Class.java:467)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:411)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
Caused by: java.lang.IllegalArgumentException: target and combiner types must match: (SegmentAllocator,MemorySegment,NativeSymbol,Addressable,long)MemorySegment != (NativeSymbol)void
	at java.base/java.lang.invoke.MethodHandleStatics.newIllegalArgumentException(MethodHandleStatics.java:169)
	at java.base/java.lang.invoke.MethodHandles.misMatchedTypes(MethodHandles.java:6238)
	at java.base/java.lang.invoke.MethodHandles.foldArgumentChecks(MethodHandles.java:6087)
	at java.base/java.lang.invoke.MethodHandles.foldArguments(MethodHandles.java:6058)
	at java.base/jdk.internal.foreign.abi.ProgrammableInvoker.getBoundMethodHandle(ProgrammableInvoker.java:122)
	at java.base/jdk.internal.foreign.abi.x64.sysv.CallArranger.arrangeDowncall(CallArranger.java:124)
	at java.base/jdk.internal.foreign.abi.x64.sysv.SysVx64Linker.arrangeDowncall(SysVx64Linker.java:62)
	at java.base/jdk.internal.foreign.abi.AbstractLinker.lambda$downcallHandle$0(AbstractLinker.java:55)
	at java.base/jdk.internal.foreign.abi.AbstractLinker$SoftReferenceCache$Node.get(AbstractLinker.java:101)
	at java.base/jdk.internal.foreign.abi.AbstractLinker$SoftReferenceCache.get(AbstractLinker.java:87)
	at java.base/jdk.internal.foreign.abi.AbstractLinker.downcallHandle(AbstractLinker.java:53)
	at java.base/java.lang.foreign.CLinker.downcallHandle(CLinker.java:195)
	at Main.lambda$downcallHandle$2(Main.java:23)
	at java.base/java.util.Optional.map(Optional.java:260)
	at Main.downcallHandle(Main.java:22)
	at Main.<clinit>(Main.java:34)
	... 6 more
;;;","2022-02-04 02:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/638
Date: 2022-02-03 22:23:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve the API documentation of HttpRequest.Builder::build to state that the default implementation provided by the JDK returns immutable objects. ,JDK-8281223,5067729,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccleary,dfuchs,dfuchs,2022-02-03 07:20,2022-04-06 23:58,2023-10-01 09:56,2022-03-30 21:30,19,,,,,,,,19,core-libs,,0,httpclient,noreg-doc,,,,,,,,,,,,,,,,,,"This is documented in the class level documentation of HttpRequest.Builder, but it could deserve an @implSpec note in the documentation of the build() method.",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281833,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vwyj:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-02-15 07:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7479
Date: 2022-02-15 14:05:16 +0000;;;","2022-03-30 21:30;dukebot;Changeset: e0a86699
Author:    Conor Cleary <ccleary@openjdk.org>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2022-03-31 04:28:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e0a86699b3727e76b8cedefc6e635ebdb22fb731
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ciTypeFlow::profiled_count fails ""assert(0 <= i && i < _len) failed: illegal index""",JDK-8281222,5067727,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rbackman,alanb,alanb,2022-02-03 06:40,2022-03-30 17:59,2023-10-01 09:56,2022-03-28 00:36,19,repo-loom,,,,,,,19,hotspot,,0,c2,noreg-hard,oracle-triage-11,oracle-triage-17,oracle-triage-19,regression,,,,,,,,,,,,,,"The loom repo has picked up an issue after sync'ing up with jdk-19+8.

A few tests are hitting an assert in ciTypeFlow::profiled_count when the test is run in a virtual thread. So far the failures are with

java/foreign/TestSegmentCopy.java
java/text/Format/DateFormat/SimpleDateFormatPatternTest.java

In both cases the compile task is org.testng.internal.Invoker::invokeTestMethods, don't know if this coincidence but maybe it will help. jtreg uses TestNG 6.9.5 at this time.


The error log in all cases looks like:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/ws/loom/open/src/hotspot/share/utilities/growableArray.hpp:145), pid=6561, tid=34311
#  assert(0 <= i && i < _len) failed: illegal index
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (fastdebug build 19-internal+0-2022-02-03-1408050.USER...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-internal+0-2022-02-03-1408050. USER..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

Current CompileTask:
C2:   4271 1957 % !   4       org.testng.internal.Invoker::invokeTestMethods @ 612 (1101 bytes)

Stack: [0x000070000db36000,0x000070000dc36000],  sp=0x000070000dc335c0,  free space=1013k
Thread 0x00007facee03cc10 [34311]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x12feac9]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6e9
V  [libjvm.dylib+0x12ff14b]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V  [libjvm.dylib+0x70428d]  report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V  [libjvm.dylib+0x594afe]  ciTypeFlow::profiled_count(ciTypeFlow::Loop*)+0x51e
V  [libjvm.dylib+0x594d63]  ciTypeFlow::Loop::at_insertion_point(ciTypeFlow::Loop*, ciTypeFlow::Loop*)+0x133
V  [libjvm.dylib+0x595227]  ciTypeFlow::build_loop_tree(ciTypeFlow::Block*)+0x307
V  [libjvm.dylib+0x595c3e]  ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*)+0x4de
V  [libjvm.dylib+0x595f60]  ciTypeFlow::flow_types()+0x1b0
V  [libjvm.dylib+0x596905]  ciTypeFlow::do_flow()+0x95
V  [libjvm.dylib+0x55b6fb]  ciMethod::get_osr_flow_analysis(int)+0x7b
V  [libjvm.dylib+0x1027980]  Parse::Parse(JVMState*, ciMethod*, float)+0x660
V  [libjvm.dylib+0x4efc7a]  ParseGenerator::generate(JVMState*)+0xaa
V  [libjvm.dylib+0x604e12]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1352
V  [libjvm.dylib+0x4edda7]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x167
V  [libjvm.dylib+0x622d19]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x779
V  [libjvm.dylib+0x622388]  CompileBroker::compiler_thread_loop()+0x298
V  [libjvm.dylib+0x12498b4]  JavaThread::thread_main_inner()+0x254
V  [libjvm.dylib+0x1246287]  Thread::call_run()+0x177
V  [libjvm.dylib+0xff4cc0]  thread_native_entry(Thread*)+0x150
C  [libsystem_pthread.dylib+0x6109]  _pthread_start+0x94



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278518,JDK-8280842,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b08,19,,,,,,,"0|i2vwy3:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-03 06:41;alanb;The issue duplicates easily with:
  make run-test TEST=""java/foreign/TestSegmentCopy.java"" JTREG_MAIN_WRAPPER=Virtual
;;;","2022-02-03 19:38;dlong;The crash is past this check

    if (data == NULL || !data->is_JumpData()) {

from JDK-8280842, so that fix doesn't seem to be the cause.  This crash is because the ""succs"" array has length 0.
[~roland], please take a look.  It reproduces every time in the loom repo.;;;","2022-02-04 01:57;roland;I tied to reproduce this locally with no success.
I built fastdebug for loom:
commit 2af5f47e0795c763f77a09a38b25576cccbed281 (HEAD -> fibers, origin/fibers, origin/HEAD)
Author: Ron Pressler <ron.pressler@oracle.com>
Date:   Fri Feb 4 00:21:32 2022 +0000

    Remove assertion message

I also rebuilt latest jtreg:

commit 17bbd21a805ff0ee3a7b197613a899bd9b4b45c5 (HEAD -> master, tag: jtreg-6.2+1, origin/master, origin/HEAD)
Author: Jonathan Gibbons <jjg@openjdk.org>
Date:   Sat Jan 22 15:30:02 2022 +0000

    7903083: Provide system property or option to override timeout

    Reviewed-by: iris

with jdk11.
I run the tests with:
make CONF=linux-x86_64-server-fastdebug run-test TEST=""java/foreign/TestSegmentCopy.java java/text/Format/DateFormat/SimpleDateFormatPatternTest.java""
;;;","2022-02-04 03:55;dlong;Sorry [~roland], I didn't realize the JTREG_MAIN_WRAPPER=Virtual stuff stuff requires a custom version of jtreg.
[~alanb], is there a way for Roland to get the right jtreg, or is there a way to reproduce the failure with the vanilla jtreg?;;;","2022-02-04 04:00;alanb;Loom is currently using a fork of jtreg that provides a way to run existing tests in the context of virtual thread, the repo to use is:
   git clone -b loom https://github.com/lmesnik/jtreg

TBD if this execution mode will ever make it into the jtreg main line.

The build needs to be configured to use this jtreg build, then add JTREG_MAIN_WRAPPER=Virtual to make run-test command to execute the test in a virtual thread. The assert triggers every time for me with the two tests.
;;;","2022-02-04 04:06;alanb;[~dlong] Yeah, the setup is complicated. I'm trying to see if I can duplicate it with a simpler setup. I've created a 10-line program that runs TestNG directly. This requires jtreg from the picture. So far all 279794 test cases run by these 2 tests pass when executed with both platform and virtual threads.;;;","2022-02-04 04:53;roland;Thanks for the instructions. That doesn't work though.
roland@ws loom]$ make CONF=linux-x86_64-server-fastdebug run-test TEST=""java/foreign/TestSegmentCopy.java"" JTREG_MAIN_WRAPPER=Virtual 
Note: Command line contains non-control variables:
* JTREG_MAIN_WRAPPER=Virtual
Make sure it is not mistyped, and that you intend to override this variable.
'make help' will list known control variables.

Note: Command line contains non-control variables:
* JTREG_MAIN_WRAPPER=Virtual
Make sure it is not mistyped, and that you intend to override this variable.
'make help' will list known control variables.

Building target 'run-test' in configuration 'linux-x86_64-server-fastdebug'
Test selection 'java/foreign/TestSegmentCopy.java', will run:
* jtreg:test/jdk/java/foreign/TestSegmentCopy.java

Running test 'jtreg:test/jdk/java/foreign/TestSegmentCopy.java'
Error: Unable to access jarfile /lib/jtreg.jar
Finished running test 'jtreg:test/jdk/java/foreign/TestSegmentCopy.java'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_java_foreign_TestSegmentCopy_java

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR
>> jtreg:test/jdk/java/foreign/TestSegmentCopy.java      1     0     0     1 <<
==============================
TEST FAILURE

make[1]: *** [/home/roland/loom/make/Init.gmk:319: main] Error 1
make: *** [/home/roland/loom/make/Init.gmk:186: run-test] Error 2

The test does run without JTREG_MAIN_WRAPPER=Virtual
jtreg is built from:
commit f9c46f2d78bdc0b4077ff17e9cb6ccff1ee0157a (HEAD -> loom, origin/loom)
Author: lmesnik <leonid.mesnik@oracle.com>
Date:   Tue Nov 30 14:19:54 2021 -0700

    -agentvm mode fixed
;;;","2022-02-04 05:04;alanb;""Error: Unable to access jarfile /lib/jtreg.jar"".  I think configure needs both --with-jtreg and --with-jtregMW (MW = ""Main Wrapper""). When you make run-test with JTREG_MAIN_WRAPPER then RunTests.gmk will run jtreg with the -mainWrapper option.;;;","2022-02-04 07:09;roland;Thanks. I tried that and I don't get the ""Unable to access jarfile"" error anymore but the tests pass.;;;","2022-02-10 01:52;rbackman;I've reproduced it with Loom.

First insight:

assert(((wide ? iter.get_far_dest() : iter.get_dest()) == loop->head()->start()) == (succs->at(ciTypeFlow::GOTO_TARGET) == loop->head()), ""branch should lead to loop head"");

calls succs->at() when succs are empty. 

Printing the current block:

  State : locals 35, stack 0, monitors 0                                                                                                                                 
    local  0 : org/testng/internal/Invoker                                                                                                                               
    local  1 : test SimpleDateFormatPatternTest.testValidPattern(""EEEE, MMMM d, yyyy h:mm:ss a z"", xh): success                                                          
org/testng/ITestNGMethod                                                                                                                                                 
    local  2 : org/testng/xml/XmlSuite                                                                                                                                  
    local  3 : java/util/Map                                                                                                                                            
    local  4 : org/testng/internal/ConfigurationGroupMethods                                                                                                            
    local  5 : test SimpleDateFormatPatternTest.testValidPattern(""d/M/yyyy H:mm:ss"", xh): success                                                                       
java/lang/Object                                                                                                                                                        
    local  6 : org/testng/ITestContext                                                                                                                                  
    local  7 : java/lang/String                                                                                                                                         
    local  8 : java/util/Map                                                                                                                                            
    local  9 : long                                                                                                                                                     
test SimpleDateFormatPatternTest.testValidPattern(""d-MMM-yy HH:mm:ss"", xh): success                                                                                     
    local 10 : long2                                                                                                                                                    
    local 11 : int                                                                                                                                                      
    local 12 : int                                                                                                                                                      
    local 13 : org/testng/internal/ExpectedExceptionsHolder                                                                                                             
    local 14 : org/testng/ITestClass                                                                                                                                    
    local 15 : test SimpleDateFormatPatternTest.testValidPattern(""EEEE d' de 'MMMM' de 'yyyy hh:mm:ss a z"", xh): success                                                 
java/util/List                                                                                                                                                          
    local 16 : org/testng/internal/Invoker$FailureContext                                                                                                               
    local 17 : [Lorg/testng/ITestNGMethod;                                                                                                                              
    local 18 : [Lorg/testng/ITestNGMethod;                                                                                                                              
    local 19 : long                                                                                                                                                     
test SimpleDateFormatPatternTest.testValidPattern(""yyyy'M'd' ahh'mm'ss'"", xh): success                                                                                   
    local 20 : long2                                                                                                                                                    
    local 21 : java/util/Map                                                                                                                                            
    local 22 : org/testng/internal/Invoker$ParameterBag                                                                                                                 
    local 23 : java/util/Iterator                                                                                                                                       
    local 24 : int                                                                                                                                                      
test SimpleDateFormatPatternTest.testValidPattern(""yyyy'MM'dd' EEEE ahh'mm'ss'"", xh): success                                                                            
    local 25 : java/util/List                                                                                                                                           
    local 26 : org/testng/internal/TestResult                                                                                                                           
    local 27 : bottom                                                                                                                                                   
    local 28 : bottom                                                                                                                                                   
    local 29 : bottom                                                                                                                                                   
    local 30 : test SimpleDateFormatPatternTest.testValidPattern(""EEEE, d MMMM yyyy HH:mm:ss z"", xh): success                                                            
bottom
    local 31 : bottom
    local 32 : bottom
    local 33 : bottom
    local 34 : bottom
  Successors : 0
  Predecessors : 1
    #9  test SimpleDateFormatPatternTest.testValidPattern(""d/M/YYYY H:mm:ss"", xh): success                                                                               
[445 - 455)
  Exceptions : 1
    #1  [1028 - 1095) lphd -- java/lang/Throwable
  Traps on 480 with trap index 257
;;;","2022-03-04 02:20;dlong;If I reproduce this with a loom repo, then take the replay file and run replay it with jdk19, I get the same crash.;;;","2022-03-04 03:40;dlong;The key to reproducing this seems to be the version of testng.  If I take the rerun script from the .jtr file, replace the jtreg version with jtreg 5.1 (using testng 6.9.5), and replace loom with jdk19, it still crashes.;;;","2022-03-04 04:03;dlong;It doesn't crash with jdk18 or jdk-19+7.;;;","2022-03-04 04:09;dlong;ILW = assert in c2; seems to depend on testng version; disable c2 compile of triggering method = MMM = P3;;;","2022-03-21 07:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7892
Date: 2022-03-21 14:45:40 +0000;;;","2022-03-28 00:36;dukebot;Changeset: 66f1da18
Author:    Rickard Bäckman <rbackman@openjdk.org>
Date:      2022-03-28 07:34:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/66f1da188514dc111e417c7e8071f051a9c9cc9e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Source file launch with security manager enabled fails,JDK-8281217,5067722,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jpai,jpai,2022-02-03 05:30,2022-03-02 17:17,2023-10-01 09:56,2022-02-23 08:53,17,18,,,,,,,19,tools,,0,source-launcher,,,,,,,,,,,,,,,,,,,"Discussed in the core-libs-dev mailing list https://mail.openjdk.java.net/pipermail/core-libs-dev/2022-February/085532.html

The following trivial code when run with security manager enabled in source file launch mode fails with an exception:

public class HelloWorld {
	public static void main(final String[] args) throws Exception {
		System.out.println(""Hello World"");
	}
}

java -Djava.security.manager=default HelloWorld.java

WARNING: A command line option has enabled the Security Manager
WARNING: The Security Manager is deprecated and will be removed in a 
future release
Exception in thread ""main"" java.security.AccessControlException: access 
denied (""java.lang.RuntimePermission"" 
""accessClassInPackage.jdk.internal.misc"")
     at 
java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:485)
     at 
java.base/java.security.AccessController.checkPermission(AccessController.java:1068)
     at 
java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:416)
     at 
java.base/java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1332)
     at 
java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:184)
     at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
     at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vwwz:",9223372036854775807,b12,,,,,,,,,,,,"2022-02-03 05:42;mullan;Adding the following lines to src/java.base/share/lib/security/default.policy fixes the issue:

grant codeBase ""jrt:/jdk.compiler"" {
    permission java.security.AllPermission;
};

I first tried just granting java.lang.RuntimePermission ""accessClassInPackage.jdk.internal.misc"", but it still failed because it needed FilePermission to read the source file. So, although it would be nice to grant fewer permissions, granting AllPermission might be the most practical solution.;;;","2022-02-09 18:11;jjg;We tried quite hard to make the source launcher code work with a security manager, and decided it was not possible/practical.

It maybe that the best solution is to detect and reject the combination of source code launcher and security manager, and exit with an informative error message, instead of a crash, as reported here.

While the source code launcher is aimed at the early stages of learning Java, as described in JEP 330, it is also aimed at shebang files. That being said, even that other usage does not seem to merit use ability to run with a security manager.
;;;","2022-02-09 21:27;jpai;> It maybe that the best solution is to detect and reject the combination of source code launcher and security manager, and exit with an informative error message, instead of a crash, as reported here. 

Given that security manager is already deprecated, I think what you state is a good idea. My attempts at using source launcher with security manager were more for convenience in launching, than any need to have security manager functional with source launcher.;;;","2022-02-17 08:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7518
Date: 2022-02-17 16:22:53 +0000;;;","2022-02-23 08:52;dukebot;Changeset: 99b8ed9d
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-02-23 16:49:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/99b8ed9dbf88e21a42a8d2f6249bfab7176e7d42
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unsafe use of long in VMThread::setup_periodic_safepoint_if_needed,JDK-8281214,5067718,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azafari,eastigeevich,eastigeevich,2022-02-03 03:29,2022-12-12 13:49,2023-10-01 09:56,2022-12-05 05:32,19,,,,,,,,20,hotspot,,0,starter,,,,,,,,,,,,,,,,,,,"In VMThread::setup_periodic_safepoint_if_needed there is an unsafe use of long:

long interval_ms = SafepointTracing::time_since_last_safepoint_ms();

because SafepointTracing::time_since_last_safepoint_ms returns jlong which can be bigger than long.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8135181,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vww3:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-03 04:38;dholmes;We can fix this but it isn't unsafe in practice as it would require there to be 24.855 days between safepoints.;;;","2022-02-03 05:53;hseigel;This looks like a duplicate of https://bugs.openjdk.java.net/browse/JDK-8135181;;;","2022-02-03 07:34;dcubed;Should this become a sub-task of JDK-8135181?;;;","2022-02-03 07:56;eastigeevich;I have no objection to convert it to a sub-task.;;;","2022-02-08 11:10;mseledtsov;ILW = MLM = P4;;;","2022-12-02 01:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11476
Date: 2022-12-02 09:08:22 +0000;;;","2022-12-05 05:32;dukebot;Changeset: b9eec968
Author:    Afshin Zafari <afshin.zafari@oracle.com>
Committer: Robbin Ehn <rehn@openjdk.org>
Date:      2022-12-05 13:30:15 +0000
URL:       https://git.openjdk.org/jdk/commit/b9eec96889abf7df6d2b479e294c7823fb3d5850
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unsafe uses of long and size_t in MemReporterBase::diff_in_current_scale,JDK-8281213,5067717,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azafari,eastigeevich,eastigeevich,2022-02-03 03:19,2023-06-27 09:05,2023-10-01 09:56,2023-01-20 02:19,19,20,21,,,,,,21,hotspot,,0,amazon-interest,nmt,starter,,,,,,,,,,,,,,,,,"MemReporterBase::diff_in_current_scale is defined as follows:

  inline long diff_in_current_scale(size_t s1, size_t s2) const {
    long amount = (long)(s1 - s2);
    long scale = (long)_scale;
    amount = (amount > 0) ? (amount + scale / 2) : (amount - scale / 2);
    return amount / scale;
  }

Long and size_t can have different sizes: 4 bytes and 8 bytes (LLP64). The result of 's1 - s2' might not fit into long. It might not fit into int64_t. For example: s1 is SIZE_MAX and s2 is SIZE_MAX-MAX_INT64-1.

We should calculate diff as size_t and convert a result to long. Assertions must be added to check the diff fits into long.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310974,,,,,,,,,,,,JDK-8135181,JDK-8300981,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vwvv:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-03 05:53;hseigel;This looks like a duplicate of https://bugs.openjdk.java.net/browse/JDK-8135181;;;","2022-02-03 07:34;dcubed;Should this become a sub-task of JDK-8135181?;;;","2022-02-04 05:01;coleenp;Removing the use of 'long' from hotspot code is it's own task, so I think this is fine as a separate RFE.;;;","2022-02-08 11:12;mseledtsov;ILW = MLM = P4;;;","2022-12-05 06:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11514
Date: 2022-12-05 13:54:57 +0000;;;","2023-01-20 02:19;dukebot;Changeset: 26410c18
Author:    Afshin Zafari <afshin.zafari@oracle.com>
Committer: Evgeny Astigeevich <eastigeevich@openjdk.org>
Date:      2023-01-20 10:17:07 +0000
URL:       https://git.openjdk.org/jdk/commit/26410c180b88b4342217fdad63f1221786d8c37b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TableView scrollTo() will not show last row for a custom cell factory.,JDK-8281207,5067566,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,pnarayanaswa,webbuggrp,webbuggrp,2022-02-01 13:12,2022-06-23 01:06,2023-10-01 09:56,2022-02-03 01:10,jfx17,,,,,,,,jfx18,javafx,,0,dcspn,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When a custom cell factory used in a TableView to show wrapped text, the scrollTo() function will not show last row.  The issue should be reproduceable with attached sample code below.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run attached source code.  Added enough line of text to the table until vertical scroll bar shows.  Then add long text lines so they will be wrapped in the table.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Show full line of last added text.
ACTUAL -
Last line will not show if there are wrapped text in the view of the TableView.

---------- BEGIN SOURCE ----------
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Orientation;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Control;
import javafx.scene.control.Separator;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Callback;

/**
 * Issue with programmatic scroll in TableView with a custom cell factory.
 * 
 * 
 * This program emulates a chat application when everything typed in the bottom
 * text box is added to the end of a TableView above and scroll to show what is
 * just added by calling scrollTo().
 * 
 * The ""Text"" column of TableView uses a custom cell factory of a Text control
 * to wrap text to accommodate long text value.
 * 
 * It works well until a long text is added that cause text to wrap in the table,
 * then the text added will not be fully shown.  It gets worse when there are multiple
 * wrapped texts in the view of the TableView.  Calling refresh() will not resolve
 * the issue.  It will be resolved either by manually scroll up and down, or until
 * all wrapped text scrolled out of the view of the TableView.
 * 
 */

public class TableViewScrollTest extends Application {

	public static void main(String[] args) {
		launch(args);
	}

	@Override
	public void start(Stage primaryStage) throws Exception {
		
		// Create a two column table with a custom cell factory
		// to support wrapped text.
		_textTable = new TableView<>();
		_textTable.setEditable(false);
		_textTable.setSelectionModel(null);
        TableColumn<TextRow, String> nameColumn = new TableColumn<>(""Name"");
        nameColumn.setCellValueFactory(new PropertyValueFactory<>(""name""));
        nameColumn.setPrefWidth(100);
        nameColumn.setReorderable(false);
        nameColumn.setResizable(false);
        nameColumn.setSortable(false);
        nameColumn.setStyle(""-fx-alignment: center"");
        _textTable.getColumns().add(nameColumn);
        TableColumn<TextRow, String> textColumn = new TableColumn<>(""Text"");
        textColumn.setCellValueFactory(new PropertyValueFactory<>(""text""));
        textColumn.setCellFactory(new Callback<TableColumn<TextRow, String>, TableCell<TextRow, String>>() {
            @Override
            public TableCell<TextRow, String> call(TableColumn<TextRow, String> param) {
                TableCell<TextRow, String> cell = new TableCell<>();
                Text text = new Text();
                cell.setGraphic(text);
                cell.setPrefHeight(Control.USE_COMPUTED_SIZE);
                text.wrappingWidthProperty().bind(textColumn.widthProperty().subtract(20));
                text.textProperty().bind(cell.itemProperty());
                return cell;
            }
        });
        textColumn.prefWidthProperty().bind(_textTable.widthProperty().subtract(100));
        textColumn.setReorderable(false);
        textColumn.setResizable(false);
        textColumn.setSortable(false);
         _textTable.getColumns().add(textColumn);
        _textList = FXCollections.observableArrayList();
        _textTable.setItems(_textList);

		Separator separator = new Separator();
		separator.setOrientation(Orientation.HORIZONTAL);
		
		// Input text field and a button to add the text.
		HBox hBox = new HBox(20);
		hBox.setAlignment(Pos.CENTER);
		_textField = new TextField();
		Button button = new Button(""Send"");
		button.setDefaultButton(true);
		button.setOnAction(e -> addText());
		HBox.setHgrow(_textField, Priority.ALWAYS);
		hBox.getChildren().addAll(_textField, button);
		
		VBox vBox = new VBox(15);
		vBox.setPadding(new Insets(20, 10, 20, 10));
		VBox.setVgrow(_textTable, Priority.ALWAYS);
		vBox.getChildren().addAll(_textTable, separator, hBox);
		
		Scene scene = new Scene(vBox);
		primaryStage.setScene(scene);
		primaryStage.setTitle(""TableView Scroll Test"");
		primaryStage.setMinWidth(400);
		primaryStage.setWidth(400);
		primaryStage.setMinHeight(400);
		primaryStage.setHeight(400);
		primaryStage.show();
		
		_textField.requestFocus();
	}
	
	private void addText() {
		String t = _textField.getText().strip();
		if (!t.isEmpty()) {
			TextRow row = new TextRow(""My Name"", t);
			_textList.add(row);
			
			_textTable.refresh(); // This will not help.
			
			// The ""scroll to last row"" below will not work well when
			// there are wrapped text line in the view of the TableView.
			_textTable.scrollTo(_textList.size() - 1);
		}
		_textField.setText("""");
	}
	
	public static class TextRow {
		
		public String getName() {
			return _name;
		}
		
		public String getText() {
			return _text;
		}
		
		private TextRow(String name, String text) {
			_name = name;
			_text = text;
		}
		
		private final String _name;
		private final String _text;
	}
	
    private TableView<TextRow> _textTable; 
	private ObservableList<TextRow> _textList;
    private TextField _textField;
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Manually scroll up first and then down will show the last line.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289040,,,,,,,,,,,,JDK-8276553,,,,,,"2022-02-03 00:57;pnarayanaswa;TableViewScrollTest.java;https://bugs.openjdk.org/secure/attachment/97821/TableViewScrollTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,b01,jfx17.0.0.1,,generic,,,,,"0|i2vvyb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-02-03 00:58;pnarayanaswa;Checked with attached test case in Windows 10, Issue is reproducible only in openjfx17, 
Issue is not reproducible either in openjfx11 or openjfx18ea10 <attached short clipping>;;;","2022-02-03 01:10;pnarayanaswa;Fixed in openjfx18, JDK-8276553;;;","2022-02-03 01:17;pnarayanaswa;Mail to submitter:
==================
The issue has been resolved in Java FX 18 [1].
Please share your feedback checking in the latest Early Access build.

[1] https://gluonhq.com/products/javafx/
;;;","2022-02-04 00:25;pnarayanaswa;Submitter Reply
=============
I tested using JavaFX version 18-ea+10.  Looks like the issue is fixed there.  Looking forward for the fix to be released.

Thanks again for your help.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/cds/appcds/DumpingWithNoCoops.java fails,JDK-8281186,5067689,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,stuefe,stuefe,2022-02-02 22:02,2022-02-22 16:54,2023-10-01 09:56,2022-02-15 09:19,19,,,,,,,,19,hotspot,,0,cds,,,,,,,,,,,,,,,,,,,"runtime/cds/appcds/DumpingWithNoCoops.jtr fails at least on linux x64 and MacOS intel:

```
    Test with heap args: -XX:InitialHeapSize=8g
....

----------System.err:(22/1157)----------
 stdout: [[0.001s][trace][gc,heap]   Minimum heap size 6815736
[0.038s][debug][cds    ] Setting InitialHeapSize to 4G for CDS dumping, original size = 8192M
Error occurred during initialization of VM
Initial heap size set to a larger value than the maximum heap size
];
 stderr: []
 exitValue = 1

java.lang.RuntimeException: 'Setting MaxHeapSize to 4G for CDS dumping' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at DumpingWithNoCoops.main(DumpingWithNoCoops.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)
```

Another variant of this error happens when the Dump works fine but the output is missing.

I think the test needs to explicitly set all heap sizes for the test processes, and not leave it up to the VM. Otherwise MaxHeapSize depends on whatever memory the machine has.



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8255495,,,,,,"2022-02-04 11:07;ccheung;DumpingWithNoCoops.java.patch;https://bugs.openjdk.org/secure/attachment/97838/DumpingWithNoCoops.java.patch","2022-02-08 15:45;ccheung;new-DumpingWithNoCoops.java.patch;https://bugs.openjdk.org/secure/attachment/97935/new-DumpingWithNoCoops.java.patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vwpn:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-02 22:34;dholmes;New test introduced by JDK-8255495.;;;","2022-02-04 11:07;ccheung;I could reproduce the first failure by adding -vmoptions:""-XX:MaxHeapSize=3g"" when running the test via jtreg.

For the second failure: ""Another variant of this error happens when the Dump works fine but the output is missing.""

Does any of the following exists in the output?
""Setting MinHeapSize to 4G for CDS dumping""
""Setting InitialHeapSize to 4G for CDS dumping""

I have a potential patch by catching the RuntimeException and inspecting the output.
If there's an error related to the MaxHeapSize setting (the first failure), just print a message and don't proceed with the test case further.
The patch also looks for the above 2 lines in the output in case the expected output isn't there.;;;","2022-02-08 01:00;stuefe;Second case: no, none of these outputs were there as far as I remember. I looked specifically for them. I'll try to reproduce it.;;;","2022-02-08 01:15;stuefe;[~ccheung] Would it not make sense to run the process with all heap sizes pre-defined? Otherwise this test depends on the memory of the test machine, which makes it unpredictable. That may also make your test simpler, since you know exactly which output should happen.;;;","2022-02-08 11:14;mseledtsov;ILW = MML = P4;;;","2022-02-08 15:47;ccheung;[~stuefe] I've uploaded another patch. Except for the first case, all heap sizes are pre-defined.;;;","2022-02-09 15:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7413
Date: 2022-02-09 23:02:15 +0000;;;","2022-02-15 09:19;roboduke;Changeset: 745f7e7d
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-02-15 17:18:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/745f7e7d921afcf45a2fa87824841e4545054d21
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RandomGenerator:NextDouble() default behavior partially fixed by JDK-8280950,JDK-8281183,5067685,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,darcy,kganapureddy,kganapureddy,2022-02-02 20:26,2022-11-03 08:32,2023-10-01 09:56,2022-02-05 18:21,19,,,,,,,,19,core-libs,,0,conformance,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,regression,tck-red-19,,,,,,,,,," It looks the fix(JDK-8280950) addressed the issue partially, I see the test (test_nextDoubleWithBoundDef1) using nextDouble(bound) still fails with the latest JDK nightly.

=======
  @TestCase
    @TestedStatement(source = ""nextDouble(double)"", value = {""The default implementation checks that bound is a "" +
            ""positive finite double. Then invokes nextDouble(), scaling the result so that the final result lies "" +
            ""between 0.0 (inclusive) and bound (exclusive).""})
    public void test_nextDoubleWithBoundDef1(@Doubles({Double.MIN_VALUE, 10.0, 1234455555.45, 10000000d}) double bound) {
        AtomicBoolean nextDoubleInvoked = new AtomicBoolean(false);
        RandomGenerator rg = new RandomGenerator() {
            @Override
            public double nextDouble() {
                nextDoubleInvoked.set(true);
                return 123456789.34d;
            }

            @Override
            public long nextLong() {
                return 0;
            }
        };
        double value = rg.nextDouble(bound);
        Assert.assertTrue(nextDoubleInvoked.get());
        Assert.assertTrue(value >= 0);
        Assert.assertTrue(value < bound);
    }

===========
 Possibly one more place to address it may be -  public static double boundedNextDouble(RandomGenerator rng, double bound)",,,,,,,,,,JDK-8281698,JDK-8281883,JDK-8281696,JDK-8281697,JDK-8285876,JDK-8281559,JDK-8296316,JDK-8288063,,,,,,,,,,,,,,JDK-8280950,JCK-7317217,,,,JDK-8280550,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vwor:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2022-02-05 16:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7360
Date: 2022-02-06 00:41:06 +0000;;;","2022-02-05 18:21;roboduke;Changeset: 77b0240d
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-02-06 02:19:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/77b0240d44fd356711d75bc241e198f6f89ada8f
;;;","2022-02-09 10:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/23
Date: 2022-02-09 18:43:37 +0000;;;","2022-06-07 03:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/435
Date: 2022-06-07 10:52:19 +0000;;;","2022-06-08 00:49;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Required follow-up.
Clean backport.
SAP nightly testing passed.
;;;","2022-10-31 11:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1488
Date: 2022-10-31 18:08:46 +0000;;;","2022-11-02 00:41;goetz;ix request [11u]

I backport this for parity with 11.0.18-oracle. It is a follow up to 8280550 and 8280950.
Changes behaviour of random. Medium risk, but a necessary bugfix.
I had to adapt the change similar to the underlying one. 
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test jdk/tools/jpackage/windows/WinInstallerIconTest always fails on Windows 11,JDK-8281170,5067669,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenyuk,aturbanov,aturbanov,2022-02-02 11:26,2023-02-15 06:01,2023-10-01 09:56,2022-02-16 09:32,17,18,19,,,,,,19,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,regression,regression_8268404,sn_112,testbug,,,,,,,,,,,,,,"The test jdk/tools/jpackage/windows/WinInstallerIconTest always fails my freshly installed Windows 11 machine with this output: 
STDOUT:
[10:59:30.454] Parsing [--jpt-run=WinInstallerIconTest]...
[10:59:30.477] WinInstallerIconTest.test -> [public void WinInstallerIconTest.test() throws java.io.IOException]
[10:59:30.489] Create: WinInstallerIconTest.test
[10:59:30.489] [ RUN      ] WinInstallerIconTest.test
[10:59:30.560] TRACE: Actions: [[initialize], [create], [finalize]]
[10:59:30.563] TRACE: Actions: [[initialize], [create], [finalize]]
[10:59:30.563] TRACE: Actions: [[initialize], [create], [finalize]]
[10:59:30.564] ERROR: Failed: Installer 2 built with custom icon (size=0) should be smaller than Installer 1 built with default icon (size=0)
[10:59:30.564] [  FAILED  ] WinInstallerIconTest.test; checks=1
[10:59:30.564] [==========] 1 tests ran
[10:59:30.564] [  PASSED  ] 0 tests
[10:59:30.573] [  FAILED  ] 1 test, listed below
[10:59:30.573] [  FAILED  ] WinInstallerIconTest.test; workDir=[.\test]
[10:59:30.573] 1 FAILED TEST
STDERR:
java.lang.AssertionError: Failed: Installer 2 built with custom icon (size=0) should be smaller than Installer 1 built with default icon (size=0)
        at jdk.jpackage.test.TKit.error(TKit.java:264)
        at jdk.jpackage.test.TKit.assertTrue(TKit.java:644)
        at jdk.jpackage.test.TKit.assertTrue(TKit.java:631)
        at WinInstallerIconTest.test(WinInstallerIconTest.java:77)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
        at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
        at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:139)
        at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:124)
        at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
        at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
        at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:121)
        at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
        at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:107)
        at jdk.jpackage.test.TKit.runTests(TKit.java:120)
        at jdk.jpackage.test.Main.runTests(Main.java:79)
        at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
        at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
        at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:107)
        at jdk.jpackage.test.Main.main(Main.java:75)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:833)
java.lang.RuntimeException: 1 FAILED TEST
        at jdk.jpackage.test.Main.reportSummary(Main.java:130)
        at jdk.jpackage.test.Main.runTests(Main.java:90)
        at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
        at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
        at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:107)
        at jdk.jpackage.test.Main.main(Main.java:75)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:833)

I modified assertion message a bit to show sizes. Looks like installer wasn't created at all.",,,,,,,,,,JDK-8299921,JDK-8302580,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268404,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2vwl7:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-02-02 12:38;aturbanov;Debug shows that jdk.jpackage.internal.WinMsiBundler#supported return 'false' because of 'jdk.jpackage.internal.ConfigException: Can not find WiX tools (light.exe, candle.exe)'.
Seems that I need to install something to be able to run this test.;;;","2022-02-02 12:44;asemenyuk;You need to install WiX toolkit for running jpackage tests on Windows.
You can get it from https://github.com/wixtoolset/wix3/releases/tag/wix3112rtm

How did you manage to run the test on Windows without WiX toolkit installed?
;;;","2022-02-02 12:51;asemenyuk;JDK-8268404 changes updated the test in a way asserts get executed even in case no installers got created. 
This is a regression from JDK-8268404.;;;","2022-02-15 09:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7481
Date: 2022-02-15 17:44:24 +0000;;;","2022-02-16 09:32;roboduke;Changeset: bb4dece2
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2022-02-16 17:30:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bb4dece246a56f2b225089c331e9f3d092dfbfa1
;;;","2023-02-14 04:15;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test passes and fails without the fix. SAP nighlty testing passed.;;;","2023-02-14 04:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1170
Date: 2023-02-14 12:20:06 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] javac should generate BSM to invoke the static factory for value class,JDK-8281166,5067665,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sadayapalam,mchung,mchung,2022-02-02 10:29,2022-02-07 02:19,2023-10-01 09:56,2022-02-07 02:19,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,,,,,,,"import java.util.function.Supplier;

public value class MethodReference {
    final int x;
    final int y;
    MethodReference() {
        this.x = 1234;
        this.y = 5678;
    }

    public static void main(String... args) {
        Supplier<MethodReference> supplier = MethodReference::new;
        MethodReference o = (MethodReference) supplier.get();
        if (o.x != 1234 || o.y != 5678)
            throw new AssertionError(o);
    }
}

javac currently generates BSM for the method reference `MethodReference::new` to invoke the instance constructor rather than the static factory.

BootstrapMethods:
  0: #36 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #43 ()Ljava/lang/Object;
      #44 REF_newInvokeSpecial MethodReference.""<init>"":()V
      #48 ()LMethodReference;

Hence a runtime error:

$ java MethodReference
Exception in thread ""main"" java.lang.NoSuchMethodError: 'void MethodReference.<init>()'
	at MethodReference.main(MethodReference.java:12)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281024,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vwkb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-02-06 23:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/629
Date: 2022-02-07 07:24:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) java/nio/file/FileStore/Basic.java  fails with java.lang.RuntimeException: values differ by more than 1GB,JDK-8281149,5067647,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,msheppar,msheppar,2022-02-02 09:34,2023-08-01 02:58,2023-10-01 09:56,2023-05-19 08:39,18,,,,,,,,21,core-libs,,0,intermittent,noreg-self,sbr,,,,,,,,,,,,,,,,,"----------System.err:(12/601)----------
java.lang.RuntimeException: values differ by more than 1GB
	at Basic.checkWithin1GB(Basic.java:63)
	at Basic.doTests(Basic.java:116)
	at Basic.main(Basic.java:49)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test",,,,,,,,,,JDK-8313519,JDK-8313532,JDK-8313375,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vwgb:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-04-14 11:11;bpb;Given this test code

109         /**
110          * Test: Space atributes
111          */
112         File f = file1.toFile();
113         long total = f.getTotalSpace();
114         long free = f.getFreeSpace();
115         long usable = f.getUsableSpace();
116 
117         // check values are ""close""
118         checkWithin1GB(total,  store1.getTotalSpace());
119         checkWithin1GB(free,   store1.getUnallocatedSpace());
120         checkWithin1GB(usable, store1.getUsableSpace());
121 
122         // get values by name
123         checkWithin1GB(total,  (Long)store1.getAttribute(""totalSpace""));
124         checkWithin1GB(free,   (Long)store1.getAttribute(""unallocatedSpace""));
125         checkWithin1GB(usable, (Long)store1.getAttribute(""usableSpace""));

since getAttribute(""unallocatedSpace"") returns getUnallocatedSpace(), then the amount of unallocated space must have changed between when the expected value was retrieved at line 114 and where it is checked at line 124. Note that the first check at line 119 did not fail.;;;","2023-04-14 11:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13480
Date: 2023-04-14 18:18:06 +0000;;;","2023-05-19 08:39;dukebot;Changeset: a5343fa6
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-05-19 15:37:37 +0000
URL:       https://git.openjdk.org/jdk/commit/a5343fa60505764c088dad4a17680d92568509d5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Other tests that use the foreign API are missing --enable-preview,JDK-8281147,5067645,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jboes,jboes,jboes,2022-02-02 08:21,2022-02-03 05:19,2023-10-01 09:56,2022-02-03 05:19,repo-panama,,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,Tests in java.util.stream and java.lang.invoke use the (here previewed) foreign API without specifying the --enable-preview flag. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vwfv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-02-02 08:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/636
Date: 2022-02-02 16:25:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Adding Preload attribute support,JDK-8281116,5067611,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2022-02-02 05:09,2022-02-02 08:09,2023-10-01 09:56,2022-02-02 08:09,repo-valhalla,,,,,,,,,hotspot,,0,lworld,,,,,,,,,,,,,,,,,,,"The JVM should recognize, parse and use the Preload attribute when present.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vw8b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-02 05:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/623
Date: 2022-02-02 13:12:19 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Spurious ""variable might not have been initialized"" with sealed class switch",JDK-8281100,5067346,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,webbuggrp,webbuggrp,2022-01-28 09:25,2022-02-16 16:21,2023-10-01 09:56,2022-02-11 04:13,17,19,,,,,,,19,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The preview pattern matching compiler feature in JDK 17 is not correctly recognizing that a variable is initialized unless a default case is added (which completely defeats the purpose of using the new switch statements). See the provided source code for more details.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Attempt to compile the sample code using the '--enable-preview' option

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The code should compile without errors.
ACTUAL -
javac -source 17 --enable-preview Example.java
Sample.java:18: error: variable description might not have been initialized
        return description;
               ^
Note: Sample.java uses preview features of Java SE 17.
Note: Recompile with -Xlint:preview for details.
1 error

---------- BEGIN SOURCE ----------
class Example
{
    sealed interface MyBoolean
    {
        record True() implements MyBoolean {}
        record False() implements MyBoolean {}
    }

    String describe(MyBoolean value)
    {
        final String description;

        switch (value) {
            case MyBoolean.True t -> description = ""It's True"";
            case MyBoolean.False f -> description = ""It's False"";
            //default -> throw new IllegalStateException(""Cannot happen javac!"");
        }

        return description;
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
You either must include a default statement or initialize the variable to some value (making it non-final), neither of which are acceptable.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-02-01 20:14;adev;Test.java;https://bugs.openjdk.org/secure/attachment/97803/Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vulf:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-02-01 20:36;adev;The issue is reproducible. 
javac -source 17 --enable-preview Test.java throws compilation error:
Test.java:19: error: variable description might not have been initialized

JDK 19 throws the error as well.;;;","2022-02-09 01:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7402
Date: 2022-02-09 09:40:21 +0000;;;","2022-02-11 04:13;roboduke;Changeset: 4ff5824f
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-02-11 12:11:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4ff5824f5bc13826d2eae1c83094acfcccdb7b8f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaFX built with VS2019 and jlinked into JDK 11.x fails to start,JDK-8281089,5067574,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,kcr,kcr,kcr,2022-02-01 15:07,2022-07-07 16:22,2023-10-01 09:56,2022-02-28 05:40,jfx11,jfx17,,,,,,,jfx19,javafx,,0,sn_111,sn_112,,,,,,,,,,,,,,,,,,"To reproduce this, run the following on a Windows machine that does *not* have the Visual Studio runtime libraries installed in C:\Windows\System32. In particular, make sure that C:\Windows\System32\vcruntime140_1.dll does not exist.

1. Use a JDK 11.0.x release built with VS 2017

2. Use a recent version of the JavaFX jmods  built with VS 2019 (e.g., JavaFX 17.0.2)

3. Create a jlinked image as follows:

$ jlink --module-path ./javafx-jmods-17.0.2 --add-modules java.se,javafx.controls --bind-services --output ./jdk-11+fx

4. Run any JavaFX program using the custom. jlinked JDK:

$ jdk-11+fx/bin/java -Djavafx.verbose=true -Dprism.verbose=true HelloRectangle

BUG: it will print the following exceptions and fail to start:

JavaFX launchApplication method: launchMode=LM_CLASS
Loaded jdk-11+fx\bin\api-ms-win-core-console-l1-1-0.dll from java.library.path
Error: failed to load api-ms-win-core-console-l1-2-0.dll : java.lang.UnsatisfiedLinkError: no api-ms-win-core-console-l1-2-0 in java.library.path: 
...
Loaded jdk-11+fx\bin\vcruntime140.dll from java.library.path
Error: failed to load vcruntime140_1.dll : java.lang.UnsatisfiedLinkError: no vcruntime140_1 in java.library.path: 
Loaded jdk-11+fx\bin\msvcp140.dll from java.library.path
...
GraphicsPipeline.createPipeline failed for com.sun.prism.d3d.D3DPipeline
java.lang.UnsatisfiedLinkError: jdk-11+fx\bin\prism_d3d.dll: Can't find dependent libraries
	at java.base/java.lang.ClassLoader$NativeLibrary.load0(Native Method)
	at java.base/java.lang.ClassLoader$NativeLibrary.load(ClassLoader.java:2430)
	at java.base/java.lang.ClassLoader$NativeLibrary.loadLibrary(ClassLoader.java:2487)
	at java.base/java.lang.ClassLoader.loadLibrary0(ClassLoader.java:2684)
	at java.base/java.lang.ClassLoader.loadLibrary(ClassLoader.java:2638)
	at java.base/java.lang.Runtime.loadLibrary0(Runtime.java:829)
	at java.base/java.lang.System.loadLibrary(System.java:1867)
	at javafx.graphics/com.sun.glass.utils.NativeLibLoader.loadLibraryInternal(NativeLibLoader.java:166)
	at javafx.graphics/com.sun.glass.utils.NativeLibLoader.loadLibrary(NativeLibLoader.java:54)
	at javafx.graphics/com.sun.prism.d3d.D3DPipeline.lambda$static$0(D3DPipeline.java:54)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at javafx.graphics/com.sun.prism.d3d.D3DPipeline.<clinit>(D3DPipeline.java:50)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:315)
	at javafx.graphics/com.sun.prism.GraphicsPipeline.createPipeline(GraphicsPipeline.java:218)
	at javafx.graphics/com.sun.javafx.tk.quantum.QuantumRenderer$PipelineRunnable.init(QuantumRenderer.java:92)
	at javafx.graphics/com.sun.javafx.tk.quantum.QuantumRenderer$PipelineRunnable.run(QuantumRenderer.java:125)
	at java.base/java.lang.Thread.run(Thread.java:834)
*** Fallback to Prism SW pipeline
Prism pipeline name = com.sun.prism.sw.SWPipeline
Loaded jdk-11+fx\bin\prism_sw.dll from java.library.path
(X) Got class = class com.sun.prism.sw.SWPipeline
Initialized prism pipeline: com.sun.prism.sw.SWPipeline
JavaFX: using com.sun.javafx.tk.quantum.QuantumToolkit
Error: failed to load api-ms-win-core-console-l1-2-0.dll : 
Error: failed to load vcruntime140_1.dll : java.lang.UnsatisfiedLinkError: no vcruntime140_1 in java.library.path: 
Exception in thread ""main"" java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at java.base/sun.launcher.LauncherHelper$FXHelper.main(LauncherHelper.java:1051)
Caused by: java.lang.RuntimeException: java.lang.UnsatisfiedLinkError: jdk-11+fx\bin\glass.dll: Can't find dependent libraries
	at javafx.graphics/com.sun.javafx.tk.quantum.QuantumToolkit.startup(QuantumToolkit.java:301)
	at javafx.graphics/com.sun.javafx.application.PlatformImpl.startup(PlatformImpl.java:293)
	at javafx.graphics/com.sun.javafx.application.PlatformImpl.startup(PlatformImpl.java:163)
	at javafx.graphics/com.sun.javafx.application.LauncherImpl.startToolkit(LauncherImpl.java:659)
	at javafx.graphics/com.sun.javafx.application.LauncherImpl.launchApplicationWithArgs(LauncherImpl.java:410)
	at javafx.graphics/com.sun.javafx.application.LauncherImpl.launchApplication(LauncherImpl.java:364)
	... 5 more
Caused by: java.lang.UnsatisfiedLinkError: jdk-11+fx\bin\glass.dll: Can't find dependent libraries
	at java.base/java.lang.ClassLoader$NativeLibrary.load0(Native Method)
	at java.base/java.lang.ClassLoader$NativeLibrary.load(ClassLoader.java:2430)
	at java.base/java.lang.ClassLoader$NativeLibrary.loadLibrary(ClassLoader.java:2487)
	at java.base/java.lang.ClassLoader.loadLibrary0(ClassLoader.java:2684)
	at java.base/java.lang.ClassLoader.loadLibrary(ClassLoader.java:2638)
	at java.base/java.lang.Runtime.loadLibrary0(Runtime.java:829)
	at java.base/java.lang.System.loadLibrary(System.java:1867)
	at javafx.graphics/com.sun.glass.utils.NativeLibLoader.loadLibraryInternal(NativeLibLoader.java:166)
	at javafx.graphics/com.sun.glass.utils.NativeLibLoader.loadLibrary(NativeLibLoader.java:54)
	at javafx.graphics/com.sun.glass.ui.Application.loadNativeLibrary(Application.java:112)
	at javafx.graphics/com.sun.glass.ui.Application.loadNativeLibrary(Application.java:120)
	at javafx.graphics/com.sun.glass.ui.win.WinApplication.access$000(WinApplication.java:43)
	at javafx.graphics/com.sun.glass.ui.win.WinApplication$1.run(WinApplication.java:107)
	at javafx.graphics/com.sun.glass.ui.win.WinApplication$1.run(WinApplication.java:88)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at javafx.graphics/com.sun.glass.ui.win.WinApplication.<clinit>(WinApplication.java:88)
	at javafx.graphics/com.sun.glass.ui.win.WinPlatformFactory.createApplication(WinPlatformFactory.java:39)
	at javafx.graphics/com.sun.glass.ui.win.WinPlatformFactory.createApplication(WinPlatformFactory.java:36)
	at javafx.graphics/com.sun.glass.ui.Application.run(Application.java:146)
	at javafx.graphics/com.sun.javafx.tk.quantum.QuantumToolkit.startup(QuantumToolkit.java:291)
	... 10 more
",,,,,,,,,,JDK-8282453,JDK-8282455,,,,,,,,,,,,,,,JDK-8289952,,,,,,,,,,JDK-8207015,,,,,,,,,,,,JDK-8278983,JDK-8278980,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vw03:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-02-01 15:11;kcr;This bug was initially discussed while evaluating the fix for JDK-8207015, but at the time we didn't file a follow-on bug. We are now looking into backporting the Windows Visual Studio 2019 compiler update to JavaFX 11.x, and this bug is a blocker for that backport.;;;","2022-02-01 15:23;kcr;The root cause of this problem is that in the jmods, all of the DLLs from the javafx.* modules end up in the same place as the DLLs from the JDK, which caused a conflict as reported in JDK-8207015. For the Microsoft DLLs, it meant that both java.base and javafx.graphics were trying to install some of the same files into the same place, which caused a jlink error, so I filed JDK-8207015, and I fixed it by removing the Microsoft DLLs entirely from javafx.graphics.jmod. This works only if the JDK distributes the same (or later) version of Microsoft DLLs as JavaFX does.

Since JDK 11.x is built with VS 2017, this will fail when installing a version of JavaFX built with VS 2019.

One possible solution would be to create a JavaFX-specific subdirectory for the DLLs. We want to first find this in mainline jfx first (since we already hit the problem and it could pop up again in some later version of JavaFX), and then backport it to jfx17u and jfx11u.;;;","2022-02-16 08:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/734
Date: 2022-02-16 16:46:47 +0000;;;","2022-02-28 05:40;dukebot;Changeset: e74cbe8b
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-02-28 13:36:50 +0000
URL:       https://git.openjdk.java.net/jfx/commit/e74cbe8b9563a1ab1a21290aa125579bdaa2f29f
;;;","2022-02-28 08:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/75
Date: 2022-02-28 16:02:42 +0000;;;","2022-02-28 08:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/37
Date: 2022-02-28 16:14:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[s390] JFR runs into assertions while validating interpreter frames,JDK-8281061,5067539,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdoerr,mdoerr,mdoerr,2022-02-01 09:19,2022-02-14 20:56,2023-10-01 09:56,2022-02-08 09:50,11,17,18,19,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"JDK-8279924 introduced frame::is_interpreted_frame_valid checks. Some of them access ijava_state members using the following assertion:
assert(state->magic == (intptr_t) frame::z_istate_magic_number) failed: wrong z_ijava_state in interpreter frame (no magic found)
This is only reliable after frame valid verification, not for potentially incomplete frames.
In addition, the pc requires null check before using it in a frame constructor (see PPC64 fix in JDK-8280155).",,,,,,,,,,JDK-8281583,JDK-8281578,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279924,JDK-8280155,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s390x,,,,,,,,,,,,,,"0|i2vvsb:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-01 09:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7312
Date: 2022-02-01 17:22:57 +0000;;;","2022-02-08 09:50;roboduke;Changeset: 7f19c700
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-02-08 17:48:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7f19c700707573000a37910dd6d2f2bb6e8439ad
;;;","2022-02-08 10:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/149
Date: 2022-02-08 18:08:07 +0000;;;","2022-02-08 10:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/811
Date: 2022-02-08 18:22:46 +0000;;;","2022-02-08 10:28;mdoerr;Fix Request (17u, 11u):
I had tried to fix the same issues on s390 as on PPC64 with JDK-8279924 and JDK-8280155. Unfortunately, a few adaptations are missing and we see errors in JFR tests on s390. Apologies for that!
This collection of small fixes applies cleanly to 17u and requires minor adaptation to fit into 11u. JFR jtreg tests have also passed with the latter, now.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix doc references to overriding in JLS,JDK-8281057,5067536,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,prappo,prappo,prappo,2022-02-01 07:34,2022-02-09 16:12,2023-10-01 09:56,2022-02-03 06:56,19,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"For whatever reason, a number of places in JDK seem to confuse JLS 8.4.6.** with JLS 8.4.8.**.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280713,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vvrn:",9223372036854775807,b09,,,,,,,,,,,,"2022-02-01 08:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7311
Date: 2022-02-01 16:19:01 +0000;;;","2022-02-03 06:56;roboduke;Changeset: 1f926609
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-02-03 14:55:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1f926609372c9b80dde831a014310a3729768c92
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
man page update for jstatd Security Manager dependency removal,JDK-8281049,5067529,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2022-02-01 06:16,2022-02-09 16:13,2023-10-01 09:56,2022-02-04 13:24,19,,,,,,,,19,core-svc,,0,jstatd,,,,,,,,,,,,,,,,,,,"man page update required after this change:

8272317: jstatd has dependency on Security Manager which needs to be removed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vvq3:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2022-02-02 02:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7320
Date: 2022-02-02 10:54:19 +0000;;;","2022-02-04 13:24;roboduke;Changeset: 48523b09
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2022-02-04 21:23:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/48523b090886f7b24ed4009f0c150efaa6f7b056
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve ImageCheckboxTest to test all available LaF,JDK-8281033,5067511,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kizune,kizune,kizune,2022-02-01 02:16,2022-02-16 16:21,2023-10-01 09:56,2022-02-12 01:27,17,18,,,,,,,19,client-libs,,0,sn_111,sn_112,,,,,,,,,,,,,,,,,,Need to improve ImageCheckboxTest so it tests not only default LaF but all available LaFs each time.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vvm3:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-02-11 02:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7439
Date: 2022-02-11 10:47:41 +0000;;;","2022-02-12 01:27;roboduke;Changeset: aa918a6e
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2022-02-12 09:26:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/aa918a6ec4cd1356efd481c6f6fa94959f94f7b3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow for compiler.note.cant.instantiate.object.directly to be suppressed via an option,JDK-8281026,5067503,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-02-01 01:30,2022-02-09 04:29,2023-10-01 09:56,2022-02-09 04:29,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,,,,,,,,,,,,,,,,,,,,"During JDK builds, we emit numerous of these notes and a way to suppress this warning has been requested.

We can't actually make the code change until such time newIdentity() is a preview symbol.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vvkb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-02-08 04:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/636
Date: 2022-02-08 12:44:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NMT integration into pp debug command does not work,JDK-8281023,5067500,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-02-01 00:07,2022-02-09 16:12,2023-10-01 09:56,2022-02-03 06:14,19,,,,,,,,19,hotspot,,0,nmt,,,,,,,,,,,,,,,,,,,"JDK-8280289 enhanced the debug pp() command to use NMT if enabled, and to print NMT related info. That is useful, but there are some issues.

On debug, it just asserts, since the empty reserved region we create to hold the output of the mmap-search is created with address=NULL:

```
(gdb) call pp(0x7ffff010b030)

""Executing pp""

Thread 2 ""java"" received signal SIGSEGV, Segmentation fault.
0x00007ffff6721a71 in VirtualMemoryRegion::VirtualMemoryRegion (this=this@entry=0x7ffff5bb2620, addr=addr@entry=0x0, size=size@entry=0) at /shared/projects/openjdk/jdk-jdk/source/src/hotspot/share/services/virtualMemoryTracker.hpp:180
180          assert(addr != NULL, ""Invalid address"");
```

On release we don't assert and get further, but the use of SafeFetch is slightly wrong. It will deny us any NMT data about p if *p==0:

```
if (CanUseSafeFetchN() && SafeFetchN((intptr_t*)p, 0) != 0) {
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280289,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vvjn:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-01 01:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7297
Date: 2022-02-01 08:36:42 +0000;;;","2022-02-03 06:14;roboduke;Changeset: 010965c8
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-02-03 14:12:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/010965c86ab39260b882df807c4f5d6420b20ca9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Errors.PrimitiveClassDoesNotSupport diagnostic should apply to value classes also,JDK-8281013,5067489,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-01-31 21:46,2022-02-08 02:43,2023-10-01 09:56,2022-02-08 02:43,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,,,,,,,,,,,,,,,,,,,,"com.sun.tools.javac.comp.Attr#visitApply issues this diagnostic. This is all couched in the lingo of primitive classes and the diagnostic at the moment is also issued only for primitive classes. However, the same checks and diagnostics should apply for B2 value classes also.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vvh7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-02-07 22:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/635
Date: 2022-02-08 06:32:17 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test jdk/javadoc/doclet/checkStylesheetClasses/CheckStylesheetClasses.java fails after JDK-8280738,JDK-8281007,5067481,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,dholmes,dholmes,2022-01-31 15:56,2023-01-02 02:07,2023-10-01 09:56,2022-01-31 16:32,19,,,,,,,,19,tools,,0,noreg-self,tier1,ursqe-triaged,,,,,,,,,,,,,,,,,"----------System.err:(16/768)----------
found 149 names in HtmlStyle
found 108 names in stylesheet
In HtmlStyle but not stylesheet: bold
In HtmlStyle but not stylesheet: highlighted
In HtmlStyle but not stylesheet: italic
java.lang.Exception: differences found
	at CheckStylesheetClasses.run(CheckStylesheetClasses.java:152)
	at CheckStylesheetClasses.main(CheckStylesheetClasses.java:64)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280738,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,"0|i2vvff:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-01-31 16:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7293
Date: 2022-02-01 00:22:31 +0000;;;","2022-01-31 16:32;roboduke;Changeset: 1ea01465
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-02-01 00:31:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1ea01465ab06749a3177b9b724ccea0945a2de09
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
array_bounds should be array-bounds after 8278507,JDK-8280999,5067472,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,phh,phh,phh,2022-01-31 14:20,2022-02-09 00:13,2023-10-01 09:56,2022-02-01 05:44,11.0.15,,,,,,,,11.0.15,infrastructure,,0,17-na,18-na,19-na,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,"JDK-8278507, the backport of JDK-8266171 to 11.0.15, added array_bounds rather than array-bounds to the list of gcc disabled warnings.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278507,JDK-8266171,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,11.0.15,,generic,,,,,"0|i2vvdf:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-01-31 14:21;phh;Filing on behalf of Dan Lutker, <lutkerd@amazon.com>.
;;;","2022-01-31 14:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/803
Date: 2022-01-31 22:31:48 +0000;;;","2022-01-31 14:46;phh;Fix Request (11u).

Fixes a typo in JDK-8278507, which is the 11u backport of JDK-8266171.
;;;","2022-02-01 05:44;roboduke;Changeset: 85c81d95
Author:    Dan Lutker <lutkerd@amazon.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2022-02-01 13:43:02 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/85c81d9515ba2b98eda9442b3b07c29a230f2a56
;;;","2022-02-09 00:13;roboduke;Changeset: 85c81d95
Author:    Dan Lutker <lutkerd@amazon.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2022-02-01 13:43:02 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/85c81d9515ba2b98eda9442b3b07c29a230f2a56
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[XWayland] Drag and Drop does not work in java -> wayland app direction,JDK-8280994,5067467,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,azvegint,azvegint,azvegint,2022-01-31 14:10,2023-06-12 20:47,2023-10-01 09:56,2023-06-05 09:36,internal,,,,,,,,21,client-libs,,0,sn_145,wayland,wayland_fixed_upstream,wayland_x11_compatibility,,,,,,,,,,,,,,,,"It is not possible to perform Drag and Drop in java -> wayland direction.

Root cause:

When we are trying perform DnD operation from XWayland to native Wayland window, it provides some dummy window under the cursor. 

From my testing it is always has 0x600002 id:


$ xprop -id 0x600002
XdndAware(ATOM) = BITMAP

It has only XdndAware property and nothing else. But our code is picky when it is selecting the target window:

https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/java.desktop/unix/classes/sun/awt/X11/XDragSourceContextPeer.java#L399

https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/java.desktop/unix/classes/sun/awt/X11/XlibUtil.java#L318

It only accepts windows only with WM_STATE property set, so it prevents drag to initiate.

Accepting this window from Wayland allows to perform drop.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281612,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vvcb:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-06-01 08:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14266
Date: 2023-06-01 15:18:55 +0000;;;","2023-06-05 09:36;dukebot;Changeset: 73352b68
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-06-05 16:34:45 +0000
URL:       https://git.openjdk.org/jdk/commit/73352b68c4e19929305ce430cb74ca850b752d22
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[XWayland] Popup is not closed on click outside of area controlled by XWayland,JDK-8280993,5067466,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,azvegint,azvegint,azvegint,2022-01-31 14:08,2023-05-28 20:47,2023-10-01 09:56,2023-05-22 04:37,,,,,,,,,21,client-libs,,0,sn_138,sn_143,sn_144,wayland,wayland_known_workaround,wayland_x11_change_spec,wayland_x11_compatibility,,,,,,,,,,,,,"We are using XGrabPointer to get mouse input and dismiss popup menus on mouse click.

Obviously, it does not work when we are trying to mouse click outside of area controlled by XWayland(window's title, desktop, wayland native apss).


 prototype of not perfect workaround

 diff --git a/src/java.desktop/unix/classes/sun/awt/X11/XPopupMenuPeer.java b/src/java.desktop/unix/classes/sun/awt/X11/XPopupMenuPeer.java
index a19f56249ae..db88ef49f37 100644
--- a/src/java.desktop/unix/classes/sun/awt/X11/XPopupMenuPeer.java
+++ b/src/java.desktop/unix/classes/sun/awt/X11/XPopupMenuPeer.java
@@ -111,6 +111,16 @@ public class XPopupMenuPeer extends XMenuWindow implements PopupMenuPeer {
         // Get menus from the target.
         Vector<MenuItem> targetItemVector = getMenuTargetItems();
         if (targetItemVector != null) {
+            //TODO: add focus listener only for XWayland
+            target.addFocusListener(new FocusAdapter() {
+                @Override
+                public void focusLost(FocusEvent e) {
+                    target.removeFocusListener(this);
+                    if (isShowing()) {
+                        hide();
+                    }
+                }
+            });
             reloadItems(targetItemVector);
             //Fix for 6287092: JCK15a: api/java_awt/interactive/event/EventTests.html#EventTest0015 fails, mustang

For a first look this workaround seems to work reliably except only one case:

clicking on window's title containing origin component does not lead to focus change, thus we don't hiding popup.",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307529,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vvc3:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-02-23 11:25;azvegint;Changeset: f6cd2824
Author: Aleksandr Zvegintsev <alexander.zvegintsev@oracle.com>
Date: 2023-02-22 12:37:48 +0100
URL: https://github.com/openjdk/wakefield/commit/f6cd28245d2a5ce870ccb89494d74823e3c852ee;;;","2023-05-05 05:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13830
Date: 2023-05-05 12:27:04 +0000;;;","2023-05-22 04:37;dukebot;Changeset: 3d550f74
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-05-22 11:37:12 +0000
URL:       https://git.openjdk.org/jdk/commit/3d550f748521443dc2e148aa4f786060419f1113
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[REDO BACKPORT] Example JBS issue,JDK-8280989,5067462,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jwilhelm,jwilhelm,jwilhelm,2022-01-31 14:03,2022-09-28 12:36,2023-10-01 09:56,2022-01-31 14:05,17,18,,,,,,,15.0.2,hotspot,,0,starter,,,,,,,,,,,,,,,,,,,This is an example issue created for the OpenJDK Developers' Guide. Read more about how to handle backouts and redos of backports here: https://openjdk.org/guide/#backing-out-a-backport,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272373,,,,,JDK-8280986,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vvb7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11336cca,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Wayland] [XWayland] java.awt.Robot taking screenshots,JDK-8280982,5067455,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,azvegint,azvegint,azvegint,2022-01-31 13:50,2023-07-24 03:16,2023-10-01 09:56,2023-06-07 06:08,,,,,,,,,21,client-libs,,0,sn_134,sn_135,sn_136,sn_137,sn_138,sn_139,sn_140,sn_141,sn_143,sn_144,sn_145,wayland,wayland_x11_change_spec,wayland_x11_compatibility,,,,,,"Modern Linux systems often come with [Wayland](https://wayland.freedesktop.org/) by default.
This comes with some difficulties, and one of them is the inability to get screenshots from the system.
This is because we now use the [X Window System API](https://en.wikipedia.org/wiki/X_Window_System) to capture screenshots and it cannot access data outside the [XWayland server](https://wayland.freedesktop.org/xserver.html) 

But this functionality is a very important part of automated testing.


At the moment there are two obvious solutions to this problem, and both use [xdg-desktop-portal](https://github.com/flatpak/xdg-desktop-portal):

1. [org.freedesktop.portal.Screenshot DBUS API](https://flatpak.github.io/xdg-desktop-portal/#gdbus-org.freedesktop.portal.Screenshot)
It has several drawbacks though:
+ It saves a screenshot to disk, which must be read and deleted(may add some delays depending on the type of a disk drive).
+ There is no way to disable the visual ""screen flash"" after screenshot
+ It asks a user confirmation to save a screenshot. This confirmation can be saved on Gnome 43+. 
Since we would like Ubuntu 22.04 LTS which comes with Gnome 42 this option is not acceptable for us because it would require user confirmation for each screenshot.
But we still can consider this option as a fallback.



2. [org.freedesktop.portal.ScreenCast](https://flatpak.github.io/xdg-desktop-portal/#gdbus-org.freedesktop.portal.ScreenCast)
It typically used by applications that need to capture the contents of the user's screen or a specific window for the purpose of sharing, recording, or streaming.
This might be a bit of overkill, but it avoids several of the problems mentioned in the Screenshot API.

+ implementation is more complicated comparing to Screenshot API
+ no intermediate file, screenshot data can be obtained from memory
+ Permission to make screenshots can be stored with [`restore_token`](https://flatpak.github.io/xdg-desktop-portal/#gdbus-method-org-freedesktop-portal-ScreenCast.SelectSources)",,,,,,,,,,,,,,,,,,,,,,,,JDK-8296415,JDK-8300994,JDK-8308802,,JDK-8307456,,,,,,,,,,,,,,,,,,,,JDK-8312591,JDK-8308802,JDK-8309621,JDK-8309703,,,"2022-01-31 13:53;azvegint;ScreenshotConfirmationDialog.png;https://bugs.openjdk.org/secure/attachment/97795/ScreenshotConfirmationDialog.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vv9n:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-05-04 08:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13803
Date: 2023-05-04 14:18:44 +0000;;;","2023-05-04 08:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13804
Date: 2023-05-04 14:20:30 +0000;;;","2023-06-07 06:08;dukebot;Changeset: 9d7bf532
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-06-07 13:08:11 +0000
URL:       https://git.openjdk.org/jdk/commit/9d7bf5329e5a0393553bca2e3a51ad1125b41b96
;;;","2023-06-09 01:08;mbaesken;Looks like this breaks the AIX build.  I created  JDK-8309703  .;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect encoding of avx512 vpsraq instruction with mask and constant shift.,JDK-8280976,5067448,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbhateja,jbhateja,jbhateja,2022-01-31 12:08,2022-06-21 10:50,2023-10-01 09:56,2022-02-01 23:38,18,19,,,,,,,19,hotspot,,0,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,vectorapi,,,,,,,,,,,,," - Issues was during new test development using LongVector.lanewise(VectorOperators.ASHR, const_shift)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284564,,,,,,,,,,,,JDK-8271515,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,,,,,"0|i2vv83:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-31 12:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7291
Date: 2022-01-31 20:15:40 +0000;;;","2022-01-31 15:41;dlong;ILW = wrong result for vector ASHR (incubator feature), seen in new test only, no workaround = MMH = P3;;;","2022-02-01 23:38;roboduke;Changeset: 48a32b5f
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2022-02-02 07:36:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/48a32b5f3aa1b238bc9857002325579a5b041685
;;;","2022-02-27 22:37;pmohan;Please provide justification for getting this into 18.0.1 with a risk assessment and testing done.;;;","2022-04-14 05:43;jbhateja;Hi Praveen,
Scope of problem is limited to VectorAPI, incorrect encoding instruction will be generated for right shift operation with constant shift count over long vectors. Incorrect instruction will not be emitted for vector operations inferred through auto-vectorizer.

Existing VectorAPI jtreg suite lacked such test points, we have filled that gap with JDK-8284564.

Thanks

;;;","2022-06-21 02:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/172
Date: 2022-06-21 09:08:55 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tests com/sun/net/httpserver/simpleserver fail with FileSystemException on Windows 11,JDK-8280965,5067437,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jboes,aturbanov,aturbanov,2022-01-31 10:10,2022-02-09 16:14,2023-10-01 09:56,2022-02-07 01:29,19,,,,,,,,19,core-libs,,0,noreg-self,,,,,,,,,,,,,,,,,,,"Couple of tests always fail on my freshly installed Windows 11
1. com/sun/net/httpserver/simpleserver/CustomFileSystemTest.java (testSymlinkGET, testSymlinkSegmentGET)

test CustomFileSystemTest.testSymlinkGET(): failure
java.nio.file.FileSystemException: C:\\Projects\\jdk\\build\\windows-x86_64-server-release\\test-support\\jtreg_test_jdk_com_sun_net_httpserver\\scratch\\1\\testSymlinkGET\\symlink: A required privilege is not held by the client
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.createSymbolicLink(WindowsFileSystemProvider.java:598)
	at java.base/java.nio.file.Files.createSymbolicLink(Files.java:1069)
	at CustomFileSystemTest.testSymlinkGET(CustomFileSystemTest.java:398)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
test CustomFileSystemTest.testSymlinkSegmentGET(): failure
java.nio.file.FileSystemException: C:\\Projects\\jdk\\build\\windows-x86_64-server-release\\test-support\\jtreg_test_jdk_com_sun_net_httpserver\\scratch\\1\\testSymlinkSegmentGET\\symlink: A required privilege is not held by the client
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.createSymbolicLink(WindowsFileSystemProvider.java:598)
	at java.base/java.nio.file.Files.createSymbolicLink(Files.java:1069)
	at CustomFileSystemTest.testSymlinkSegmentGET(CustomFileSystemTest.java:425)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

2. com/sun/net/httpserver/simpleserver/SimpleFileServerTest.java (testSymlinkGET, testSymlinkSegmentGET)
test SimpleFileServerTest.testSymlinkGET(): failure
java.nio.file.FileSystemException: C:\\Projects\\jdk\\build\\windows-x86_64-server-release\\test-support\\jtreg_test_jdk_com_sun_net_httpserver\\scratch\\0\\.\\SimpleFileServerTest\\testSymlinkGET\\symlink: A required privilege is not held by the client
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.createSymbolicLink(WindowsFileSystemProvider.java:598)
	at java.base/java.nio.file.Files.createSymbolicLink(Files.java:1069)
	at SimpleFileServerTest.testSymlinkGET(SimpleFileServerTest.java:390)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
test SimpleFileServerTest.testSymlinkSegmentGET(): failure
java.nio.file.FileSystemException: C:\\Projects\\jdk\\build\\windows-x86_64-server-release\\test-support\\jtreg_test_jdk_com_sun_net_httpserver\\scratch\\0\\.\\SimpleFileServerTest\\testSymlinkSegmentGET\\symlink: A required privilege is not held by the client
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.createSymbolicLink(WindowsFileSystemProvider.java:598)
	at java.base/java.nio.file.Files.createSymbolicLink(Files.java:1069)
	at SimpleFileServerTest.testSymlinkSegmentGET(SimpleFileServerTest.java:417)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

Seems like Windows symlyink creation requires some additional rights.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2vv5n:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-01-31 11:10;alanb;Creating sym links requires admin privileges but it should work with ""Developer mode"" too as the JDK will try to use SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE. That said, the test probably needs to handle the case that it can't create sym links, as is done with the tests in the java/nio and java/io directories.;;;","2022-02-03 01:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7335
Date: 2022-02-03 09:24:46 +0000;;;","2022-02-07 01:29;roboduke;Changeset: f3e82426
Author:    Julia Boes <jboes@openjdk.org>
Date:      2022-02-07 09:28:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f3e8242683f6c729d89e2f49b0977889b4786f4a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Linux aarch64] : drawImage dithers TYPE_BYTE_INDEXED images incorrectly,JDK-8280964,5067435,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,aj,aj,2022-01-31 08:52,2022-05-03 01:09,2023-10-01 09:56,2022-02-22 17:06,11,17,18,8,,,,,19,client-libs,,0,imt,imt-2738,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,linux-aarch64,sn_112,sqebug,sqemanual,,,,,,,,,,"BufferedImage.TYPE_BYTE_INDEXED image type is not rendered properly in linux aarch64 machines
Steps to reproduce:
1) Run the attached Test ImageWriteParamTest.java along with fax.png
2) It will create an output folder which contains the resultant image.
3) Check whether the Image is rendered as expected or not.

Expected behavior:
The Image is rendered as expected. The color of rendered images must be the same as the original.
Actual behavior:
The color of the rendered image is not the same as the original(please see attached screenshot)

Note: MarlinRenderingEngine also have the same issue",Linux aarch64,,,,,,,,,JDK-8286049,JDK-8283810,JDK-8284307,JDK-8283923,JDK-8283947,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-02-03 02:53;aj;Actual.jpg;https://bugs.openjdk.org/secure/attachment/97824/Actual.jpg","2022-02-03 02:53;aj;Expected.jpg;https://bugs.openjdk.org/secure/attachment/97823/Expected.jpg","2022-02-02 03:25;aj;ImageWriteParamTest.java;https://bugs.openjdk.org/secure/attachment/97811/ImageWriteParamTest.java","2022-02-02 03:25;aj;fax.png;https://bugs.openjdk.org/secure/attachment/97812/fax.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux_oracle,,,,,"0|i2vv57:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-01-31 09:43;prr;""create and run the Test""

Hmm .. the name of the test is not provided. Some identifying info would be helpful.;;;","2022-02-02 21:05;prr;The test that was attached just exits for me. It doesn't display a window.
I hacked up my own version from the original SQE test and it does display but on mac aarch64 it works fine.
So is this a problem only on Linux aarch64 ?
The bug title ""BufferedImage.TYPE_BYTE_INDEXED not rendered properly in aarch64 machines"" suggests a generic problem.

It is actually unclear that the symopsis is correct anyway since the image that looks wrong is one that WAS a BYTE_INDEXED before writing but
as a JPEG it should be read back as RGB .. so it seems like it is more to do with writing the image ? There's subsampling during writing but
I doubt that would cause this but I can't be sure.

Anyway I have no idea where to get an aarch64 linux system so there's nothing I can do on this bug.;;;","2022-02-03 10:28;prr;
""BufferedImage.TYPE_BYTE_INDEXED not rendered properly in linux aarch64 machines ""
Since even JBS / my web browser renders the ""actual.png"" in those incorrect pink colours
the problem is not (as the current bug summary suggests) anything to do with rendering
of a BYTE_INDEXED image. The image must be written out incorrectly. So I will change the
bug summary accordingly;;;","2022-02-03 15:36;prr;I got access to a system over VNC. I was able to configure and build JDK and reproduce the problem
using my own cut-down test.

Then I tried deleting the sub-sampling from the ImageWriteParam and lo and behold.. the image colours were now correct.
I wasn't really expecting that to fix it but it is a start and makes this look a more corner case problem but I have no idea of the root cause as yet.;;;","2022-02-21 10:05;prr;Image I/O and JPEG were all a red herring here. The bug is in core imaging software loops.
The test case cycles through BufferedImage types and draws the loaded image into each of these types
then writes it out again as a JPEG and then re-reads it and draws it sub-sampled for user comparison.

Since JPEG won't write a ByteIndexed image directly, there's code in JPEGImageWriter that re-blits
it a scanline at a time into a 3 BYTE BGR image. This looked suspect but wasn't the problem either.

In fact you don't even need Image I/O to load an image to reproduce this.
Just have an image where the color components are > 0 and < 255, and draw it into a ByteIndexed image
and the problem code is hit.

In order to map the 24 bit RGB colors of the source image onto one of the (typically) 256 colours
in the ByteIndexed image palette, the core imaging loops invoke code that does a lookup up
after applying a dithering error correction lookup first. This adjusts each of the R/G/B values
that aren't 0 or 255 by adding a value - which may be negative - to help them map better to the colormap.

        PREFIX ## berr = (pRasInfo)->bluErrTable + PREFIX ## YDither; \
..
            b += PREFIX ## berr[PREFIX ## XDither]; \

There's clamping to keep them in range but that's not relevant to the bug.
The problem is that the lookup table used to hold the error correction is defined as ""char"".
On all our other architectures this is the same as ""signed char"". But on Linux aarch64 it is ""unsigned char""
so that the addition process will always see a positive number to add .. and the error correction can then be wildly off.
The fix is to declare these tables as signed char so the right arithmetic happens.

Note: turning off sub-sampling did not really cure it, but the image colours then close enough to what it should be that
it looked like it was just dithering effects. It was much more washed out - since the dithering error tables were
always adding - pointing at lighter colours. Having fixed the bug the difference is clear.

The simplest test I have for this is that if you draw an image that is ""not quite"" blue
- Color(0,0,254) - then the error correction ought to make it point to the exact match for blue
in the cmap table .. but we do not..

Note: the output pixel values are not consistent - eg for the blue case 0xb9, 0x23, 0xb9, 0x23, 0x23, 0xb9, 0x23,0xb9
This is because the dither lookup offsets cycle
        PREFIX ## XDither = (LOC & 7); \
..
#define NextByteIndexedStoreVarsX(PREFIX) \
    PREFIX ## XDither = (PREFIX ## XDither + 1) & 7

         PREFIX ## YDither = ((LOC & 7) << 3); \

#define NextByteIndexedStoreVarsY(PREFIX) \
    PREFIX ## YDither = (PREFIX ## YDither + (1 << 3)) & (7 << 3)

This just adds to the wildness of the end results and the difficulty in understanding them. ;;;","2022-02-21 10:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7563
Date: 2022-02-21 18:13:12 +0000;;;","2022-02-22 17:06;dukebot;Changeset: 6f882ded
Author:    Phil Race <prr@openjdk.org>
Date:      2022-02-23 01:03:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6f882deddcc094777b45f0dacc7351dbc23993a4
;;;","2022-03-29 06:19;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Test has passed.;;;","2022-03-29 06:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/300
Date: 2022-03-29 13:20:21 +0000;;;","2022-04-29 02:45;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
Clean backport.
Test passes.
SAP nightly testing passed.;;;","2022-04-29 02:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1063
Date: 2022-04-29 09:45:17 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect PrintFlags formatting on Windows,JDK-8280963,5067434,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,akasko,akasko,akasko,2022-01-31 08:18,2022-08-10 20:09,2023-10-01 09:56,2022-06-15 09:27,openjdk8u322,,,,,,,,openjdk8u352,hotspot,,0,11-na,17-na,18-na,19-na,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,"Consider the following command in 8u:

java -Xmx4g -XX:+PrintFlagsFinal -version

Its output on Windows will contain invalid zero values for 64-bit flags which actual values are exact multiple of 4 GiB: 

...
uintx MaxHeapSize                              := 0
...

This happens because value is stored in uintx (uintptr_t) that is 64-bit, but ""%-16lu"" formatting string is used that is intended for unsigned long (32-bit on Windows).

Actual flag value is correct, the problem happens when this value is being formatted for the output.

This problem was fixed in 9 as part of JDK-8042893 .",,,,,,,,,,JDK-8288479,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8042893,,,,,,,,,,,,JDK-8288020,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,"0|i2vv4z:",9223372036854775807,master,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-02 03:24;akasko;Fix request (8u)

Change is requested to be integrated into 8u because it fixes a customer-facing bug. Review approval:

https://mail.openjdk.java.net/pipermail/jdk8u-dev/2022-February/014532.html;;;","2022-02-14 18:58;andrew;I think the testcase should be synced to later versions, either under this bug or a related bug.;;;","2022-02-17 02:49;akasko;PrintFlagsUintxTest appeared to be not applicable to mainline jdk, uintx is not used for MaxHeapSize value there.;;;","2022-04-14 07:41;andrew;Adding jdk8u-needs-pr.

This fix needs to be rebased on to the current GitHub 8u-dev repository - https://github.com/openjdk/jdk8u-dev - and reviewed there before being approved and integrated.;;;","2022-04-20 14:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk8u-dev/pull/45
Date: 2022-04-20 21:01:34 +0000;;;","2022-06-07 05:15;akasko;Fix request (8u)

Change is requested to be integrated into 8u because it fixes a customer-facing bug.;;;","2022-08-10 20:09;dukebot;Changeset: 83e90957
Author:    Alex Kasko <akasko@openjdk.org>
Date:      2022-06-15 11:25:55 +0000
URL:       https://git.openjdk.org/jdk8u/commit/83e90957bef15267bed792ee5d8d65899a2487e8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Re-examine copyright headers on files in src/java.desktop/macosx/native/libawt_lwawt/awt/a11y,JDK-8280956,5067427,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenov,alanb,alanb,2022-01-31 08:00,2023-05-05 03:45,2023-10-01 09:56,2022-02-02 23:24,18,19,,,,,,,19,client-libs,,0,a11y,jdk11u-a11y-defer,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,,,,,,,,,,,,,"There are several source files in src/java.desktop/macosx/native/libawt_lwawt/awt/a11y that have the GPL header, need to check if they should be changed to GPL+CP.",,,,,,,,,,JDK-8287781,JDK-8286250,JDK-8283491,JDK-8281287,JDK-8286149,JDK-8288409,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vv3f:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-02-01 08:13;prr;Hmm having found the first of these (CellAccessibility.m) it isn't really a surprise that these are
new files as part of the updated A11Y work for Mac and they were pushed by a JetBrains dev.;;;","2022-02-01 08:14;prr;Alex pls work with JB to fix these. ;;;","2022-02-02 01:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7318
Date: 2022-02-02 09:46:14 +0000;;;","2022-02-02 23:23;roboduke;Changeset: fe547eac
Author:    Artem Semenov <asemenov@openjdk.org>
Date:      2022-02-03 07:22:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fe547eacd71b4eb8119ecc7ca2d0bbe8e757f854
;;;","2022-03-21 06:35;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, comment only.
Clean backport.;;;","2022-03-21 06:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/268
Date: 2022-03-21 13:47:41 +0000;;;","2022-05-02 12:45;tsteele;Fix request [18u]

Backport to jdk18 addresses copyright licence issues.
As with 17, no risk (because only the file header is changed) and a clean backport. ;;;","2022-05-02 12:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/119
Date: 2022-05-02 19:42:55 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Testbug: fix commented asserts in XXViewTest.test_rt_29650,JDK-8280951,5067422,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fastegal,fastegal,fastegal,2022-01-31 07:22,2022-02-04 08:55,2023-10-01 09:56,2022-02-03 08:53,jfx17,,,,,,,,jfx19,javafx,,0,ListViewTest,TableViewTest,TESTBUG,,,,,,,,,,,,,,,,,"The tests were added in the fix for JDK-8124615 (early variant of also firing cancel in commit, was rt_29650), XX = List, Tree/Table, Tree.

They register handlers to count the events of every type and verify the expected number (1 for commit, 0 for cancel/start). They also try to test that the edited value actually is committed. This assert is commented for List, Tree/Table because it would fail due to the test bug. For Tree, it accidentally passes as a side-effect of JDK-8187309, JDK-8187473 (missing default commit handler, cell illegally saving data).

The testbug is to add the counting commit handler via view.setOn which replaces the default (data saving) commit handler - thus nothing saved.

       listView.setOnEditCommit(t -> {
            rt_29650_commit_count++;
        });
       
        ... //fire commit key on cell

        // TODO should the following assert be enabled?
       // assertEquals(""Testing!"", listView.getItems().get(0));


The fix is to follow instructions of java doc (editing sections of xxView) and register the counting handler via addEventHandler.

Note: for Tree, this will be fixed along with adding a default commit handler",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8124615,JDK-8187473,JDK-8187309,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vv2b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-02-03 03:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/725
Date: 2022-02-03 11:38:55 +0000;;;","2022-02-03 03:51;fastegal;searched for all locations that use setOnEditCommit: there are - but all seem to be doing it correctly: either don't care about saved value or take care that it is saved (by either let the test handler take over or calling the default handler);;;","2022-02-03 08:53;roboduke;Changeset: 929e7c92
Author:    Jeanette Winzenburg <fastegal@openjdk.org>
Date:      2022-02-03 16:52:31 +0000
URL:       https://git.openjdk.java.net/jfx/commit/929e7c9217ff7ea04f9bb31bd5c1bf7d74086752
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RandomGenerator:NextDouble() default behavior non conformant after JDK-8280550 fix,JDK-8280950,5067421,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,darcy,kganapureddy,kganapureddy,2022-01-31 07:18,2022-11-03 08:09,2023-10-01 09:56,2022-01-31 17:28,19,,,,,,,,19,core-libs,,0,conformance,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,regression,tck-red-19,,,,,,,,,,"The following test quoted below that validates the spec 
https://download.java.net/java/early_access/jdk19/docs/api/java.base/java/util/random/RandomGenerator.html#nextDouble(double)

> ""Implementation Requirements:
> The default implementation checks that bound is a positive finite double. Then invokes nextDouble(), scaling the result so that the final result lies between 0.0 (inclusive) and bound (exclusive).""

fails with JDK 19-pre08 bundles.

This is the test which is supplying the positive finite double and expecting the results as specified :

=============
        RandomGenerator rg = new RandomGenerator() {
            @Override
            public double nextDouble() {
                return 123456789.34d;
            }

            @Override
            public long nextLong() {
                return 0;
            }
        };
        double value = rg.nextDouble(bound);  // the ""bound"" used by the specific test could be any value from the list of {Double.MIN_VALUE, 10.0, 1234455555.45, 10000000d} 
        Assert.assertTrue(value >= 0);
        Assert.assertTrue(value < bound);  // fails here
==========
",,,,,,,,,,JDK-8281557,JDK-8281882,JDK-8285788,JDK-8296314,JDK-8288061,JDK-8293063,JDK-8293062,,,,,,,,,,,,,JDK-8281183,,,JCK-7317217,,,,JDK-8280550,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vv23:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2022-01-31 14:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7292
Date: 2022-01-31 22:31:03 +0000;;;","2022-01-31 17:28;roboduke;Changeset: 0e70d450
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-02-01 01:27:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0e70d4504c267174738485c7da82a2ac0ef09770
;;;","2022-01-31 18:26;darcy;Note for 18u and 17u backport request:
This additional fix is needed to address a correctness problem in JDK-8280550. They must be backported together in some fashion, either modifying the patch for JDK-8280550 or back porting this fix on its own.;;;","2022-02-09 03:22;shade;Should be jdk17u-fix-request, with a ""u""?;;;","2022-02-09 10:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/22
Date: 2022-02-09 18:35:11 +0000;;;","2022-06-07 03:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/434
Date: 2022-06-07 10:42:28 +0000;;;","2022-06-08 00:49;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Required follow up.
Clean backport.
SAP nightly testing passed.
;;;","2022-10-31 10:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1487
Date: 2022-10-31 17:25:48 +0000;;;","2022-11-02 00:41;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle. It is a follow up to 8280550.
Changes behaviour of random. Medium risk, but a necessary bugfix.
I had to adapt the change similar to the underlying one. 
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Correct the references for the Java Security Standard Algorithm Names specification,JDK-8280949,5067420,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-01-31 07:17,2022-02-07 13:04,2023-10-01 09:56,2022-01-31 12:27,,,,,,,,,19,security-libs,,0,noreg-doc,tencent-interest,,,,,,,,,,,,,,,,,,"In the JSSE specification, the reference to ""Java Security Standard Algorithm Names"" specification is documented as ""Java Cryptography Architecture Standard Algorithm Name Documentation"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vv1v:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-01-31 07:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7290
Date: 2022-01-31 15:37:38 +0000;;;","2022-01-31 12:27;roboduke;Changeset: f991891b
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-01-31 20:25:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f991891b0ba7a3767d2abd85ab9b2d284dc3d013
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Adapt test/jdk/javax/xml/crypto/dsig/LogParameters.java for 13u,JDK-8280947,5067417,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yan,yan,yan,2022-01-31 06:36,2022-02-01 23:58,2023-10-01 09:56,2022-01-31 07:30,13.0.11,,,,,,,,13.0.11,security-libs,,0,noreg-self,,,,,,,,,,,,,,,,,,,The test test/jdk/javax/xml/crypto/dsig/LogParameters.java introduced in JDK-8247907 was pushed to jdk13u-dev without proper check. It depends on a feature from jdk15. Should be adapted.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8247907,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vv17:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ee0b2af,,,,,,,,,"2022-01-31 06:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/321
Date: 2022-01-31 14:43:26 +0000;;;","2022-01-31 07:30;roboduke;Changeset: 7d6e6ba7
Author:    Yuri Nesterenko <yan@openjdk.org>
Date:      2022-01-31 15:29:26 +0000
URL:       https://git.openjdk.java.net/jdk13u-dev/commit/7d6e6ba71f3454980d996588a9662f1fe8838559
;;;","2022-02-01 23:58;roboduke;Changeset: 7d6e6ba7
Author:    Yuri Nesterenko <yan@openjdk.org>
Date:      2022-01-31 15:29:26 +0000
URL:       https://git.openjdk.java.net/jdk13u/commit/7d6e6ba71f3454980d996588a9662f1fe8838559
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Preload attribute should mention primitive classes when reference projection is used in descriptors,JDK-8280942,5067412,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-01-31 04:58,2022-02-23 02:56,2023-10-01 09:56,2022-02-23 02:56,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,,,,,,,,,,,,,,,,,,,,"com.sun.tools.javac.jvm.PoolWriter#enterValueClass contains
the following code:

```
if (c.isValueClass() && !c.isPrimitiveClass()) {
            valueClasses.add(c);
}
```

This would preclude a primitive class Point from being mentioned in Preload attribute altogether. ie Only pure B2 classes feature in Preload list. However, we do want a class to feature in the Preload class list if its reference projection finds mention in descriptors.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vv03:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-31 05:03;sadayapalam;We may want to add a boolean force parameter to com.sun.tools.javac.jvm.PoolWriter#enterValueClass ;;;","2022-02-22 01:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/656
Date: 2022-02-22 09:29:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
os::print_memory_mappings() prints segment preceeding the inclusion range,JDK-8280941,5067411,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-01-31 04:16,2022-04-01 05:07,2023-10-01 09:56,2022-02-01 09:21,19,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"os::print_memory_mappings() is a helpful little routine to print existing memory mappings within a given range. On Linux, it parses proc/<pid>/maps. But it always prints a segment preceding the start address, e.g. here see the first line:

```
Range [7f92467a3000-7f92467a9000) contains: 7f924679f000-7f92467a3000 rw-p 00000000 00:00 0 
7f92467a3000-7f92467a4000 rwxp 00000000 00:00 0 
7f92467a4000-7f92467a5000 rw-p 00000000 00:00 0 
7f92467a5000-7f92467a6000 rwxp 00000000 00:00 0 
7f92467a6000-7f92467a7000 rw-p 00000000 00:00 0 
7f92467a7000-7f92467a8000 rwxp 00000000 00:00 0 
7f92467a8000-7f92467a9000 rw-p 00000000 00:00 0 
```

and it should also precede the first line with a newline",,,,,,,,,,JDK-8284172,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256864,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vuzv:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-01 00:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7289
Date: 2022-01-31 12:47:03 +0000;;;","2022-02-01 09:21;roboduke;Changeset: d1cc5fda
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-02-01 17:19:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d1cc5fda8f9fe3480d661985f15c71a8a9a4a7f8
;;;","2022-03-31 21:43;stuefe;Fix Request 17u:

I'd like to backport this to jdk17. Applies cleanly, very low risk, well tested, and helps with hs-err analysis. Thank you.;;;","2022-03-31 21:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/326
Date: 2022-04-01 04:42:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gtest os.release_multi_mappings_vm is racy,JDK-8280940,5067408,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-01-31 03:43,2022-04-04 20:36,2023-10-01 09:56,2022-02-14 08:44,17,18,19,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,redhat-interest,,,,,,,,,,,,,,,,"release_multi_mappings_vm, introduced as regression for JDK-8255978, is unfortunately racy.

The original intention of the test was to check that os::release_memory() works across multiple mappings allocated with multiple calls to os::reserve_memory(). This was broken for a long time on windows, since it relies on the implicit assumption that every platform uses mmap-ish APIs under the hood. But Windows virtual memory API (and SysV shmat, for that matter) does not work that way.

The release_multi_mappings_vm test

A reserves a number of mappings in 4M stripes adjacent to each other
B releases them with a single call to os::release_memory
C re-allocates a range at the same address
Step (C) will fail if the os::release call in (B) failed to release the mapping. Which it sometimes did silently, so just checking the return code in (B) was not sufficient.

Unfortunately, it will also fail if someone concurrently mapped into the range between (B) and (C). It's rare, but it happens.

This is difficult to make completely airtight, but we could make it much more stable:

instead of releasing all stripes, just release the n middle stripes (n>1) and leave first and last stripe reserved. Then, in (C), re-reserve the middle stripes. Tests the same (as long as we have multiple middle stripes) but drastically decreases the chance of some random allocation placing memory into the vacated address hole
reduce the stripe size from today's 4M to something much smaller. Again, reduces the chance of stray mappings being placed into the hole since it will be smaller too.
",,,,,,,,,,JDK-8284325,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283670,JDK-8255978,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vuz7:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-01 11:05;mseledtsov;ILW = MLM = P4;;;","2022-02-02 21:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7288
Date: 2022-01-31 12:20:58 +0000;;;","2022-02-14 08:44;roboduke;Changeset: f07b8165
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-02-14 16:41:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f07b8165231799383303e5c0755d07afd2feb7fd
;;;","2022-03-31 22:38;stuefe;Fix Request (17):

Fixes intermittent errors in multi-release gtest. Low risk. Does not apply cleanly; minor fixes were needed (needed include memTracker.hpp, and needed some resolving w/o resulting changes)

Was reviewed, awaiting approval;;;","2022-03-31 22:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/328
Date: 2022-04-01 05:37:53 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/internal/vm/Continuation/HumongousStack.java failing in loom repo,JDK-8280918,5067379,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,haosun,alanb,alanb,2022-01-30 01:38,2022-03-06 23:29,2023-10-01 09:56,2022-03-06 23:25,repo-loom,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,,"jdk/internal/vm/Continuation/HumongousStack.java fails in tier7 and tier8 with

----------System.out:(4/51)----------
start depth: 5000
-- Yielding!
-- Resumed!
done: 0
----------System.err:(19/1196)----------
java.lang.OutOfMemoryError: Java heap space
	at HumongousStack.fillYoungGen(HumongousStack.java:43)
	at HumongousStack.fillYoungGen(HumongousStack.java:44)
	at HumongousStack.fillYoungGen(HumongousStack.java:44)
	at HumongousStack.fillYoungGen(HumongousStack.java:44)
	at HumongousStack.main(HumongousStack.java:57)
	at java.base/java.lang.invoke.LambdaForm$DMH/0x0000000801002000.invokeStatic(LambdaForm$DMH)
	at java.base/java.lang.invoke.LambdaForm$MH/0x0000000801003400.invoke(LambdaForm$MH)
	at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(DirectMethodHandleAccessor.java:155)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1494)

JavaTest Message: Test threw exception: java.lang.OutOfMemoryError: Java heap space
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.OutOfMemoryError: Java heap space

Seems to be mostly:
-Xms1g -Xmx1g -XX:+UseG1GC -XX:G1HeapRegionSize=1m -Xss10m -Xint ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vusr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-27 17:21;haosun;I expect this failure should be fixed with commit [1].

I didn't find `tier7' and `tier8' test group in OpenJDK.
Could you help to verify that this commit [1] has fixed this failure? Thanks.

[1] https://github.com/openjdk/loom/commit/bd4e3dd;;;","2022-03-01 08:11;alanb;This test failure was observed with stress testing. I hope to do more stress testing in our CI in the coming days so I should be able to close the issue then.;;;","2022-03-06 23:25;alanb;This test did not fail with stress testing in higher tiers so I think Hao's commit did resolve this issue.;;;","2022-03-06 23:29;haosun;Thanks for your testing and confirmation.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitorVMEventsTest.java failing in loom repo,JDK-8280914,5067370,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,alanb,alanb,2022-01-29 08:15,2022-06-25 02:15,2023-10-01 09:56,2022-04-24 20:54,repo-loom,,,,,,,,19,hotspot,,0,intermittent,loom,tier7,,,,,,,,,,,,,,,,,"serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitorVMEventsTest.java#id0
serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitorVMEventsTest.java#id1
fail consistently in tier7 with:

#section:main
----------messages:(4/425)----------
command: main --enable-preview -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_clone -agentlib:HeapMonitorTest MyPackage.HeapMonitorVMEventsTest platform
reason: User specified action: run main/othervm/native --enable-preview -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_clone -agentlib:HeapMonitorTest MyPackage.HeapMonitorVMEventsTest platform 
Mode: othervm [/othervm specified]
elapsed time (seconds): 0.903
----------configuration:(0/0)----------
----------System.out:(0/0)----------
----------System.err:(12/727)----------
java.lang.RuntimeException: Could not set the sampler
	at MyPackage.HeapMonitor.sampleEverything(HeapMonitor.java:194)
	at MyPackage.HeapMonitorVMEventsTest.main(HeapMonitorVMEventsTest.java:116)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1494)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Could not set the sampler
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Could not set the sampler",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280355,JDK-8285605,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vuqr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-04-21 00:41;sspitsyn;This test as standalone does not fail in 100 mach5 runs on all platforms.
It is also not reproducible when all serviceability/jvmti tests run together.;;;","2022-04-24 20:54;sspitsyn;This issue was fixed by Ron with the changeset:
  https://github.com/openjdk/loom/commit/9b8e1b4f073d6cb8b20d79bf548de37b916851b9;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Update openjdk project in jcheck to ""jdk-updates"" for jdk18u",JDK-8280910,5067362,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,serb,serb,2022-01-28 17:45,2022-02-16 06:46,2023-10-01 09:56,2022-02-02 14:52,18-pool,,,,,,,,18.0.1,infrastructure,,0,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,,,,,,,,,,,,,,,,,"The openjdk project in jcheck should be changed to ""jdk-updates"" for jdk18u",,,,,,,,,,JDK-8281986,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vuoz:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-01-28 18:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/11
Date: 2022-01-29 01:47:00 +0000;;;","2022-01-31 09:47;serb;Fix Request (18u) 

The openjdk project in jcheck should be changed to ""jdk-updates"" for jdk18u, to use proper configuration.;;;","2022-02-02 14:52;roboduke;Changeset: e32fb7fc
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-02-02 22:51:10 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/e32fb7fc20239cf6f7321f7ffbbe48879c5b1909
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javadoc build fails after JDK-4774868,JDK-8280903,5067353,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,bpb,dcubed,dcubed,2022-01-28 12:18,2022-07-28 07:38,2023-10-01 09:56,2022-01-28 15:19,19,,,,,,,,19,core-libs,,0,regression,tier1,,,,,,,,,,,,,,,,,,"The javadoc build fails after the following fix was pushed:

JDK-4774868 (fc spec) Unclear spec for FileChannel.force

Since this is a Tier1 build failure, I'm starting this bug as a P1.

Here's a snippet from the build task's stdout log:

[2022-01-28T17:33:33,777Z] Generating JDK_API javadoc for 60 modules
[2022-01-28T17:33:47,303Z] /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13966/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0c6e0501-cf4e-455f-a9e8-70603f864497/runs/692dcc2c-0c4b-4ac3-a567-2a20b0821267/workspace/open/src/java.base/share/classes/java/nio/channels/FileChannel.java:570: error: reference not found
[2022-01-28T17:33:47,303Z]      * defined by {@link FileOutputStream} or {@link RandomAccessFile} when the
[2022-01-28T17:33:47,304Z]                          ^
[2022-01-28T17:33:47,304Z] /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13966/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0c6e0501-cf4e-455f-a9e8-70603f864497/runs/692dcc2c-0c4b-4ac3-a567-2a20b0821267/workspace/open/src/java.base/share/classes/java/nio/channels/FileChannel.java:570: error: reference not found
[2022-01-28T17:33:47,304Z]      * defined by {@link FileOutputStream} or {@link RandomAccessFile} when the
[2022-01-28T17:33:47,304Z]                                                      ^
[2022-01-28T17:33:47,743Z] /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13966/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0c6e0501-cf4e-455f-a9e8-70603f864497/runs/692dcc2c-0c4b-4ac3-a567-2a20b0821267/workspace/open/src/java.base/share/classes/java/nio/channels/FileChannel.java:570: error: reference not found
[2022-01-28T17:33:47,743Z]      * defined by {@link FileOutputStream} or {@link RandomAccessFile} when the
[2022-01-28T17:33:47,743Z]                          ^
[2022-01-28T17:33:47,743Z] /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13966/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0c6e0501-cf4e-455f-a9e8-70603f864497/runs/692dcc2c-0c4b-4ac3-a567-2a20b0821267/workspace/open/src/java.base/share/classes/java/nio/channels/FileChannel.java:570: error: reference not found
[2022-01-28T17:33:47,743Z]      * defined by {@link FileOutputStream} or {@link RandomAccessFile} when the
[2022-01-28T17:33:47,743Z]                                                      ^
[2022-01-28T17:33:50,555Z] /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13966/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0c6e0501-cf4e-455f-a9e8-70603f864497/runs/692dcc2c-0c4b-4ac3-a567-2a20b0821267/workspace/open/src/java.base/share/classes/java/nio/channels/FileChannel.java:570: error: reference not found
[2022-01-28T17:33:50,555Z]      * defined by {@link FileOutputStream} or {@link RandomAccessFile} when the
[2022-01-28T17:33:50,555Z]                          ^
[2022-01-28T17:33:50,555Z] /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13966/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0c6e0501-cf4e-455f-a9e8-70603f864497/runs/692dcc2c-0c4b-4ac3-a567-2a20b0821267/workspace/open/src/java.base/share/classes/java/nio/channels/FileChannel.java:570: error: reference not found
[2022-01-28T17:33:50,555Z]      * defined by {@link FileOutputStream} or {@link RandomAccessFile} when the
[2022-01-28T17:33:50,555Z]                                                      ^
[2022-01-28T17:34:21,350Z] 2 errors
[2022-01-28T17:34:21,486Z] gmake[3]: *** [/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13966/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0c6e0501-cf4e-455f-a9e8-70603f864497/runs/692dcc2c-0c4b-4ac3-a567-2a20b0821267/workspace/build/docs/support/docs/_javadoc_REFERENCE_API_exec.marker] Error 1
[2022-01-28T17:34:21,561Z] gmake[2]: *** [docs-reference-api-javadoc] Error 1
[2022-01-28T17:34:21,561Z] gmake[2]: *** Waiting for unfinished jobs....
[2022-01-28T17:34:22,831Z] 2 errors
[2022-01-28T17:34:22,977Z] gmake[3]: *** [/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13966/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0c6e0501-cf4e-455f-a9e8-70603f864497/runs/692dcc2c-0c4b-4ac3-a567-2a20b0821267/workspace/build/docs/support/docs/_javadoc_JAVASE_API_exec.marker] Error 1
[2022-01-28T17:34:23,039Z] gmake[2]: *** [docs-javase-api-javadoc] Error 1
[2022-01-28T17:34:30,221Z] 2 errors
[2022-01-28T17:34:30,335Z] gmake[3]: *** [/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13966/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0c6e0501-cf4e-455f-a9e8-70603f864497/runs/692dcc2c-0c4b-4ac3-a567-2a20b0821267/workspace/build/docs/support/docs/_javadoc_JDK_API_exec.marker] Error 1
[2022-01-28T17:34:30,398Z] gmake[2]: *** [docs-jdk-api-javadoc] Error 1
[2022-01-28T17:34:30,400Z] 
[2022-01-28T17:34:30,400Z] ERROR: Build failed for target 'default (all-docs-bundles)' in configuration 'docs' (exit code 2) 
[2022-01-28T17:34:30,409Z] Stopping sjavac server",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-4774868,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vumz:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2022-01-28 12:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7273
Date: 2022-01-28 20:30:57 +0000;;;","2022-01-28 15:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7277
Date: 2022-01-28 23:00:41 +0000;;;","2022-01-28 15:19;roboduke;Changeset: d366d15d
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-01-28 23:18:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d366d15d67a08833d93a5806edef8145cb7803e5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MethodHandle::linkToNative stub is missing w/ -Xint ,JDK-8280901,5067351,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,shade,shade,2022-01-28 10:13,2022-04-03 22:46,2023-10-01 09:56,2022-02-23 12:31,16,17,18,19,,,,,19,hotspot,,0,foreign,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-19,redhat-interest,,,,,,,,,,"Lots of java/foreign testd crash when run in -Xint. For example, this one:

$ CONF=linux-x86_64-server-fastdebug make run-test TEST=java/foreign/TestDowncall.java TEST_VM_OPTS=""-Xint""

STDOUT:
STDERR:

TEST RESULT: Failed. Unexpected exit from test [exit code: 139]
--------------------------------------------------

The crash produces no hs_err, and debugging is quite complicated, but I think the crash is somewhere within C2I adapter for LJJL shape.

AHE@0x00007fb9a0486750: 0xbbebeb i2c: 0x00007fb995284ee0 c2i: 0x00007fb995284fcc c2iUV: 0x00007fb995284f96 c2iNCI: 0x00007fb995285009
i2c argument handler #218 for: LJJL 0xbbebeb (606 bytes generated)
c2i argument handler starts at 0x7fb995284fcc

  0x00007fb9952850f6:   popfq  
  0x00007fb9952850f7:   mov    %r13,%rsp
  0x00007fb9952850fa:   pop    %rax
  0x00007fb9952850fb:   mov    %rsp,%r13
  0x00007fb9952850fe:   sub    $0x40,%rsp
  0x00007fb995285102:   mov    %rax,(%rsp) ;<---- somewhere here
  0x00007fb995285106:   mov    %rsi,0x30(%rsp)
  0x00007fb99528510b:   movabs $0xdeadffffdeadaaab,%rax
  0x00007fb995285115:   mov    %rax,0x28(%rsp)

Reading the code, I stumbled upon:

address MethodHandles::generate_method_handle_interpreter_entry(MacroAssembler* _masm,
                                                                vmIntrinsics::ID iid) {
...
  // No need in interpreter entry for linkToNative for now.
  // Interpreter calls compiled entry through i2c.
  if (iid == vmIntrinsics::_linkToNative) {
    __ hlt();
    return NULL;
  }
...
}

I wonder if that is too optimistic when no compilers present?",,,,,,,,,,JDK-8284097,JDK-8284254,JDK-8283914,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8254231,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vumj:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-02 07:29;chagedorn;ILW = Multiple foreign tests crash when run with -Xint, low? only seen with -Xint when no compilers are present, run with compilers (remove -Xint) = HLL = P4;;;","2022-02-14 05:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7459
Date: 2022-02-14 13:40:32 +0000;;;","2022-02-23 12:31;dukebot;Changeset: f86f38a8
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-02-23 20:29:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f86f38a8afd31c76039206f8f1f33371ad814396
;;;","2022-03-29 08:32;thartmann;Fix Request (JDK 18u)
Fixes a crash due to a missing stub. The fix is low risk and applies cleanly. Already tested and about to be backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 08:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/71
Date: 2022-03-29 15:31:52 +0000;;;","2022-03-30 03:40;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Test has passed.;;;","2022-03-30 03:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/311
Date: 2022-03-30 10:42:31 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/nio/file/Files/probeContentType/Basic.java fails on Windows 11,JDK-8280896,5067343,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aturbanov,aturbanov,aturbanov,2022-01-28 09:02,2023-01-18 06:13,2023-10-01 09:56,2022-03-23 12:30,19,,,,,,,,19,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,"The test java/nio/file/Files/probeContentType/Basic.java fails on my freshly installed Windows 11 machine with this output :

STDOUT:
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo6977734172940873116.html...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\red225293338004022445.grape...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo3544016144931637043.adoc...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo11795920306207961342.bz2...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo14175820866521636966.css...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo1472983939883547388.csv...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo10409754564324888570.doc...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo4350598674469236186.docx...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo7094481409264310167.gz...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo13269466953095617342.jar...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo1778499543895142782.jpg...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo3085621711878828557.js...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo5021037834280140893.json...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo10836126803641663105.markdown...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo16984339283195959715.md...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo636653181924273460.mp3...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo9476771755905792390.mp4...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo2190850200778867594.odp...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo7227414466314166629.ods...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo9270250413507696645.odt...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo3710484881418975744.pdf...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo4385225635143947453.php...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo17951619028997261314.png...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo15911982171472714001.ppt...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo14775713798145332035.pptx...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo8131080798250212247.py...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo12921037060086511216.rar...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo14604006729527049842.rtf...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo6872283720745747284.webm...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo15750668461327514445.webp...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo17438762350752999155.xls...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo11917427220512016134.xlsx...
probe c:\projects\jdk2\build\windows-x86_64-server-release\test-support\jtreg_test_jdk_java_nio_file_Files_probeContentType\tmp\foo12294139891205977365.7z...
STDERR:
For extension jar we got content type: application/jar; expected: [application/java-archive, application/x-java-archive]
java.lang.RuntimeException: Test failed!
        at Basic.main(Basic.java:192)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:833)
",,,,,,,,,,JDK-8300529,JDK-8299225,JDK-8299124,JDK-8300441,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2vukr:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-01-28 09:05;dfuchs;I guess the check in the test should be relaxed to accept any of these;;;","2022-02-03 02:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7334
Date: 2022-02-03 08:22:42 +0000;;;","2022-03-23 12:30;dukebot;Changeset: f9137cb7
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-03-23 19:27:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f9137cb7b79f86e96247e7b4bc4abb03857afe75
;;;","2023-01-16 08:41;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.19-oracle/17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-01-16 08:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1070
Date: 2023-01-16 16:38:38 +0000;;;","2023-01-16 08:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1662
Date: 2023-01-16 16:41:00 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot use '-Djava.system.class.loader' with class loader in signed JAR,JDK-8280890,5067336,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,mullan,mullan,mullan,2022-01-28 07:46,2023-01-18 07:50,2023-10-01 09:56,2022-02-07 06:07,11.0.17,17.0.5,18,openjdk8u362,,,,,19,security-libs,,0,11bpr-critical-approved,17bpr-critical-approved,8bpr-critical-approved,dcsaw,jdk11u-critical-request,jdk11u-critical-yes,jdk17u-critical-request,jdk17u-critical-yes,jdk8u-critical-request,jdk8u-critical-yes,redhat-interest,regression,reproducer-yes,webbug,,,,,,"The problem occurs if and only if
a) -Djava.system.class.loader is used and
b) the system class loader in question is found in a signed JAR and

# Compile source files (JDK used for compilation is unimportant)
javac src/org/acme/app/Main.java src/org/acme/loader/CustomClassLoader.java

# Create JAR containing custom class loader
jar cf CustomClassLoader.jar -C src org/acme/loader/CustomClassLoader.class

# Create signing key (default keystore has password 'changeit')
keytool -genkeypair -keyalg RSA -alias test-user

# Sign JAR (default keystore has password 'changeit')
jarsigner CustomClassLoader.jar test-user

# Run dummy application, setting custom class loader from JAR as system class loader
java -Djava.security.debug=""jca"" -Djava.system.class.loader=org.acme.loader.CustomClassLoader -cp ""CustomClassLoader.jar;src"" org.acme.app.Main

Java HotSpot(TM) 64-Bit Server VM warning: Archived non-system classes are disabled because the java.system.class.loader property is specified (value = ""org.acme.loader.CustomClassLoader""). To use archived non-system classes, this property must not be set
ProviderList: provider configuration: [SUN, SunRsaSign, SunEC, SunJSSE, SunJCE, SunJGSS, SunSASL, XMLDSig, SunPCSC, JdkLDAP, JdkSASL, Apple, SunPKCS11]
ProviderList: config configuration: null
jca: Setting up name2enum:
jca: 2.5.4.3 => CommonName
jca: COMMONNAME => CommonName
jca: 2.5.4.4 => Surname
jca: SURNAME => Surname
jca: 2.5.4.5 => SerialNumber
jca: SERIALNUMBER => SerialNumber
jca: 2.5.4.6 => CountryName
jca: COUNTRYNAME => CountryName
jca: 2.5.4.7 => LocalityName
jca: LOCALITYNAME => LocalityName
jca: 2.5.4.8 => StateName
jca: STATENAME => StateName
jca: 2.5.4.9 => StreetAddress
jca: STREETADDRESS => StreetAddress
jca: 2.5.4.10 => OrgName
jca: ORGNAME => OrgName
jca: 2.5.4.11 => OrgUnitName
jca: ORGUNITNAME => OrgUnitName
jca: 2.5.4.12 => Title
jca: TITLE => Title
jca: 2.5.4.42 => GivenName
jca: GIVENNAME => GivenName
jca: 2.5.4.43 => Initials
jca: INITIALS => Initials
jca: 2.5.4.44 => GenerationQualifier
jca: GENERATIONQUALIFIER => GenerationQualifier
jca: 2.5.4.46 => DNQualifier
jca: DNQUALIFIER => DNQualifier
jca: 2.5.29.9 => SubjectDirectoryAttributes
jca: SUBJECTDIRECTORYATTRIBUTES => SubjectDirectoryAttributes
jca: 2.5.29.14 => SubjectKeyID
jca: SUBJECTKEYID => SubjectKeyID
jca: 2.5.29.15 => KeyUsage
jca: KEYUSAGE => KeyUsage
jca: 2.5.29.16 => PrivateKeyUsage
jca: PRIVATEKEYUSAGE => PrivateKeyUsage
jca: 2.5.29.17 => SubjectAlternativeName
jca: SUBJECTALTERNATIVENAME => SubjectAlternativeName
jca: 2.5.29.18 => IssuerAlternativeName
jca: ISSUERALTERNATIVENAME => IssuerAlternativeName
jca: 2.5.29.19 => BasicConstraints
jca: BASICCONSTRAINTS => BasicConstraints
jca: 2.5.29.20 => CRLNumber
jca: CRLNUMBER => CRLNumber
jca: 2.5.29.21 => ReasonCode
jca: REASONCODE => ReasonCode
jca: 2.5.29.23 => HoldInstructionCode
jca: HOLDINSTRUCTIONCODE => HoldInstructionCode
jca: 2.5.29.24 => InvalidityDate
jca: INVALIDITYDATE => InvalidityDate
jca: 2.5.29.27 => DeltaCRLIndicator
jca: DELTACRLINDICATOR => DeltaCRLIndicator
jca: 2.5.29.28 => IssuingDistributionPoint
jca: ISSUINGDISTRIBUTIONPOINT => IssuingDistributionPoint
jca: 2.5.29.29 => CertificateIssuer
jca: CERTIFICATEISSUER => CertificateIssuer
jca: 2.5.29.30 => NameConstraints
jca: NAMECONSTRAINTS => NameConstraints
jca: 2.5.29.31 => CRLDistributionPoints
jca: CRLDISTRIBUTIONPOINTS => CRLDistributionPoints
jca: 2.5.29.32 => CertificatePolicies
jca: CERTIFICATEPOLICIES => CertificatePolicies
jca: 2.5.29.32.0 => CE_CERT_POLICIES_ANY
jca: CE_CERT_POLICIES_ANY => CE_CERT_POLICIES_ANY
jca: 2.5.29.33 => PolicyMappings
jca: POLICYMAPPINGS => PolicyMappings
jca: 2.5.29.35 => AuthorityKeyID
jca: AUTHORITYKEYID => AuthorityKeyID
jca: 2.5.29.36 => PolicyConstraints
jca: POLICYCONSTRAINTS => PolicyConstraints
jca: 2.5.29.37 => extendedKeyUsage
jca: EXTENDEDKEYUSAGE => extendedKeyUsage
jca: 2.5.29.37.0 => anyExtendedKeyUsage
jca: ANYEXTENDEDKEYUSAGE => anyExtendedKeyUsage
jca: 2.5.29.46 => FreshestCRL
jca: FRESHESTCRL => FreshestCRL
jca: 2.5.29.54 => InhibitAnyPolicy
jca: INHIBITANYPOLICY => InhibitAnyPolicy
jca: 1.3.6.1.5.5.7.1.1 => AuthInfoAccess
jca: AUTHINFOACCESS => AuthInfoAccess
jca: 1.3.6.1.5.5.7.1.11 => SubjectInfoAccess
jca: SUBJECTINFOACCESS => SubjectInfoAccess
jca: 1.3.6.1.5.5.7.3.1 => serverAuth
jca: SERVERAUTH => serverAuth
jca: 1.3.6.1.5.5.7.3.2 => clientAuth
jca: CLIENTAUTH => clientAuth
jca: 1.3.6.1.5.5.7.3.3 => codeSigning
jca: CODESIGNING => codeSigning
jca: 1.3.6.1.5.5.7.3.4 => emailProtection
jca: EMAILPROTECTION => emailProtection
jca: 1.3.6.1.5.5.7.3.5 => ipsecEndSystem
jca: IPSECENDSYSTEM => ipsecEndSystem
jca: 1.3.6.1.5.5.7.3.6 => ipsecTunnel
jca: IPSECTUNNEL => ipsecTunnel
jca: 1.3.6.1.5.5.7.3.7 => ipsecUser
jca: IPSECUSER => ipsecUser
jca: 1.3.6.1.5.5.7.3.8 => KP_TimeStamping
jca: 1.3.6.1.5.5.7.3.9 => OCSPSigning
jca: OCSPSIGNING => OCSPSigning
jca: 1.3.6.1.5.5.7.48.1 => OCSP
jca: OCSP => OCSP
jca: 1.3.6.1.5.5.7.48.1.1 => OCSPBasicResponse
jca: OCSPBASICRESPONSE => OCSPBasicResponse
jca: 1.3.6.1.5.5.7.48.1.2 => OCSPNonceExt
jca: OCSPNONCEEXT => OCSPNonceExt
jca: 1.3.6.1.5.5.7.48.1.5 => OCSPNoCheck
jca: OCSPNOCHECK => OCSPNoCheck
jca: 1.3.6.1.5.5.7.48.2 => caIssuers
jca: CAISSUERS => caIssuers
jca: 1.3.6.1.5.5.7.48.3 => AD_TimeStamping
jca: 1.3.6.1.5.5.7.48.5 => caRepository
jca: CAREPOSITORY => caRepository
jca: 2.16.840.1.101.3.4.1 => AES
jca: AES => AES
jca: 2.16.840.1.101.3.4.1.1 => AES_128$ECB$NoPadding
jca: AES_128/ECB/NOPADDING => AES_128$ECB$NoPadding
jca: 2.16.840.1.101.3.4.1.2 => AES_128$CBC$NoPadding
jca: AES_128/CBC/NOPADDING => AES_128$CBC$NoPadding
jca: 2.16.840.1.101.3.4.1.3 => AES_128$OFB$NoPadding
jca: AES_128/OFB/NOPADDING => AES_128$OFB$NoPadding
jca: 2.16.840.1.101.3.4.1.4 => AES_128$CFB$NoPadding
jca: AES_128/CFB/NOPADDING => AES_128$CFB$NoPadding
jca: 2.16.840.1.101.3.4.1.5 => AES_128$KW$NoPadding
jca: AES_128/KW/NOPADDING => AES_128$KW$NoPadding
jca: AESWRAP_128 => AES_128$KW$NoPadding
jca: 2.16.840.1.101.3.4.1.6 => AES_128$GCM$NoPadding
jca: AES_128/GCM/NOPADDING => AES_128$GCM$NoPadding
jca: 2.16.840.1.101.3.4.1.8 => AES_128$KWP$NoPadding
jca: AES_128/KWP/NOPADDING => AES_128$KWP$NoPadding
jca: AESWRAPPAD_128 => AES_128$KWP$NoPadding
jca: 2.16.840.1.101.3.4.1.21 => AES_192$ECB$NoPadding
jca: AES_192/ECB/NOPADDING => AES_192$ECB$NoPadding
jca: 2.16.840.1.101.3.4.1.22 => AES_192$CBC$NoPadding
jca: AES_192/CBC/NOPADDING => AES_192$CBC$NoPadding
jca: 2.16.840.1.101.3.4.1.23 => AES_192$OFB$NoPadding
jca: AES_192/OFB/NOPADDING => AES_192$OFB$NoPadding
jca: 2.16.840.1.101.3.4.1.24 => AES_192$CFB$NoPadding
jca: AES_192/CFB/NOPADDING => AES_192$CFB$NoPadding
jca: 2.16.840.1.101.3.4.1.25 => AES_192$KW$NoPadding
jca: AES_192/KW/NOPADDING => AES_192$KW$NoPadding
jca: AESWRAP_192 => AES_192$KW$NoPadding
jca: 2.16.840.1.101.3.4.1.26 => AES_192$GCM$NoPadding
jca: AES_192/GCM/NOPADDING => AES_192$GCM$NoPadding
jca: 2.16.840.1.101.3.4.1.28 => AES_192$KWP$NoPadding
jca: AES_192/KWP/NOPADDING => AES_192$KWP$NoPadding
jca: AESWRAPPAD_192 => AES_192$KWP$NoPadding
jca: 2.16.840.1.101.3.4.1.41 => AES_256$ECB$NoPadding
jca: AES_256/ECB/NOPADDING => AES_256$ECB$NoPadding
jca: 2.16.840.1.101.3.4.1.42 => AES_256$CBC$NoPadding
jca: AES_256/CBC/NOPADDING => AES_256$CBC$NoPadding
jca: 2.16.840.1.101.3.4.1.43 => AES_256$OFB$NoPadding
jca: AES_256/OFB/NOPADDING => AES_256$OFB$NoPadding
jca: 2.16.840.1.101.3.4.1.44 => AES_256$CFB$NoPadding
jca: AES_256/CFB/NOPADDING => AES_256$CFB$NoPadding
jca: 2.16.840.1.101.3.4.1.45 => AES_256$KW$NoPadding
jca: AES_256/KW/NOPADDING => AES_256$KW$NoPadding
jca: AESWRAP_256 => AES_256$KW$NoPadding
jca: 2.16.840.1.101.3.4.1.46 => AES_256$GCM$NoPadding
jca: AES_256/GCM/NOPADDING => AES_256$GCM$NoPadding
jca: 2.16.840.1.101.3.4.1.48 => AES_256$KWP$NoPadding
jca: AES_256/KWP/NOPADDING => AES_256$KWP$NoPadding
jca: AESWRAPPAD_256 => AES_256$KWP$NoPadding
jca: 2.16.840.1.101.3.4.2.1 => SHA_256
jca: SHA-256 => SHA_256
jca: SHA256 => SHA_256
jca: 2.16.840.1.101.3.4.2.2 => SHA_384
jca: SHA-384 => SHA_384
jca: SHA384 => SHA_384
jca: 2.16.840.1.101.3.4.2.3 => SHA_512
jca: SHA-512 => SHA_512
jca: SHA512 => SHA_512
jca: 2.16.840.1.101.3.4.2.4 => SHA_224
jca: SHA-224 => SHA_224
jca: SHA224 => SHA_224
jca: 2.16.840.1.101.3.4.2.5 => SHA_512$224
jca: SHA-512/224 => SHA_512$224
jca: SHA512/224 => SHA_512$224
jca: 2.16.840.1.101.3.4.2.6 => SHA_512$256
jca: SHA-512/256 => SHA_512$256
jca: SHA512/256 => SHA_512$256
jca: 2.16.840.1.101.3.4.2.7 => SHA3_224
jca: SHA3-224 => SHA3_224
jca: 2.16.840.1.101.3.4.2.8 => SHA3_256
jca: SHA3-256 => SHA3_256
jca: 2.16.840.1.101.3.4.2.9 => SHA3_384
jca: SHA3-384 => SHA3_384
jca: 2.16.840.1.101.3.4.2.10 => SHA3_512
jca: SHA3-512 => SHA3_512
jca: 2.16.840.1.101.3.4.2.11 => SHAKE128
jca: SHAKE128 => SHAKE128
jca: 2.16.840.1.101.3.4.2.12 => SHAKE256
jca: SHAKE256 => SHAKE256
jca: 2.16.840.1.101.3.4.2.13 => HmacSHA3_224
jca: HMACSHA3-224 => HmacSHA3_224
jca: 2.16.840.1.101.3.4.2.14 => HmacSHA3_256
jca: HMACSHA3-256 => HmacSHA3_256
jca: 2.16.840.1.101.3.4.2.15 => HmacSHA3_384
jca: HMACSHA3-384 => HmacSHA3_384
jca: 2.16.840.1.101.3.4.2.16 => HmacSHA3_512
jca: HMACSHA3-512 => HmacSHA3_512
jca: 2.16.840.1.101.3.4.2.17 => SHAKE128_LEN
jca: SHAKE128-LEN => SHAKE128_LEN
jca: 2.16.840.1.101.3.4.2.18 => SHAKE256_LEN
jca: SHAKE256-LEN => SHAKE256_LEN
jca: 2.16.840.1.101.3.4.3.1 => SHA224withDSA
jca: SHA224WITHDSA => SHA224withDSA
jca: 2.16.840.1.101.3.4.3.2 => SHA256withDSA
jca: SHA256WITHDSA => SHA256withDSA
jca: 2.16.840.1.101.3.4.3.3 => SHA384withDSA
jca: SHA384WITHDSA => SHA384withDSA
jca: 2.16.840.1.101.3.4.3.4 => SHA512withDSA
jca: SHA512WITHDSA => SHA512withDSA
jca: 2.16.840.1.101.3.4.3.5 => SHA3_224withDSA
jca: SHA3-224WITHDSA => SHA3_224withDSA
jca: 2.16.840.1.101.3.4.3.6 => SHA3_256withDSA
jca: SHA3-256WITHDSA => SHA3_256withDSA
jca: 2.16.840.1.101.3.4.3.7 => SHA3_384withDSA
jca: SHA3-384WITHDSA => SHA3_384withDSA
jca: 2.16.840.1.101.3.4.3.8 => SHA3_512withDSA
jca: SHA3-512WITHDSA => SHA3_512withDSA
jca: 2.16.840.1.101.3.4.3.9 => SHA3_224withECDSA
jca: SHA3-224WITHECDSA => SHA3_224withECDSA
jca: 2.16.840.1.101.3.4.3.10 => SHA3_256withECDSA
jca: SHA3-256WITHECDSA => SHA3_256withECDSA
jca: 2.16.840.1.101.3.4.3.11 => SHA3_384withECDSA
jca: SHA3-384WITHECDSA => SHA3_384withECDSA
jca: 2.16.840.1.101.3.4.3.12 => SHA3_512withECDSA
jca: SHA3-512WITHECDSA => SHA3_512withECDSA
jca: 2.16.840.1.101.3.4.3.13 => SHA3_224withRSA
jca: SHA3-224WITHRSA => SHA3_224withRSA
jca: 2.16.840.1.101.3.4.3.14 => SHA3_256withRSA
jca: SHA3-256WITHRSA => SHA3_256withRSA
jca: 2.16.840.1.101.3.4.3.15 => SHA3_384withRSA
jca: SHA3-384WITHRSA => SHA3_384withRSA
jca: 2.16.840.1.101.3.4.3.16 => SHA3_512withRSA
jca: SHA3-512WITHRSA => SHA3_512withRSA
jca: 1.2.840.113549.1.1 => PKCS1
jca: 1.2.840.113549.1.1.1 => RSA
jca: RSA => RSA
jca: 1.2.840.113549.1.1.2 => MD2withRSA
jca: MD2WITHRSA => MD2withRSA
jca: 1.2.840.113549.1.1.4 => MD5withRSA
jca: MD5WITHRSA => MD5withRSA
jca: 1.2.840.113549.1.1.5 => SHA1withRSA
jca: SHA1WITHRSA => SHA1withRSA
jca: 1.2.840.113549.1.1.7 => OAEP
jca: OAEP => OAEP
jca: 1.2.840.113549.1.1.8 => MGF1
jca: MGF1 => MGF1
jca: 1.2.840.113549.1.1.9 => PSpecified
jca: PSPECIFIED => PSpecified
jca: 1.2.840.113549.1.1.10 => RSASSA_PSS
jca: RSASSA-PSS => RSASSA_PSS
jca: PSS => RSASSA_PSS
jca: 1.2.840.113549.1.1.11 => SHA256withRSA
jca: SHA256WITHRSA => SHA256withRSA
jca: 1.2.840.113549.1.1.12 => SHA384withRSA
jca: SHA384WITHRSA => SHA384withRSA
jca: 1.2.840.113549.1.1.13 => SHA512withRSA
jca: SHA512WITHRSA => SHA512withRSA
jca: 1.2.840.113549.1.1.14 => SHA224withRSA
jca: SHA224WITHRSA => SHA224withRSA
jca: 1.2.840.113549.1.1.15 => SHA512$224withRSA
jca: SHA512/224WITHRSA => SHA512$224withRSA
jca: 1.2.840.113549.1.1.16 => SHA512$256withRSA
jca: SHA512/256WITHRSA => SHA512$256withRSA
jca: 1.2.840.113549.1.3.1 => DiffieHellman
jca: DIFFIEHELLMAN => DiffieHellman
jca: DH => DiffieHellman
jca: 1.2.840.113549.1.5.3 => PBEWithMD5AndDES
jca: PBEWITHMD5ANDDES => PBEWithMD5AndDES
jca: 1.2.840.113549.1.5.6 => PBEWithMD5AndRC2
jca: PBEWITHMD5ANDRC2 => PBEWithMD5AndRC2
jca: 1.2.840.113549.1.5.10 => PBEWithSHA1AndDES
jca: PBEWITHSHA1ANDDES => PBEWithSHA1AndDES
jca: 1.2.840.113549.1.5.11 => PBEWithSHA1AndRC2
jca: PBEWITHSHA1ANDRC2 => PBEWithSHA1AndRC2
jca: 1.2.840.113549.1.5.12 => PBKDF2WithHmacSHA1
jca: PBKDF2WITHHMACSHA1 => PBKDF2WithHmacSHA1
jca: 1.2.840.113549.1.5.13 => PBES2
jca: PBES2 => PBES2
jca: 1.2.840.113549.1.7 => PKCS7
jca: PKCS7 => PKCS7
jca: 1.2.840.113549.1.7.1 => Data
jca: DATA => Data
jca: 1.2.840.113549.1.7.2 => SignedData
jca: SIGNEDDATA => SignedData
jca: 1.2.840.1113549.1.7.1 => JDK_OLD_Data
jca: JDK_OLD_DATA => JDK_OLD_Data
jca: 1.2.840.1113549.1.7.2 => JDK_OLD_SignedData
jca: JDK_OLD_SIGNEDDATA => JDK_OLD_SignedData
jca: 1.2.840.113549.1.7.3 => EnvelopedData
jca: ENVELOPEDDATA => EnvelopedData
jca: 1.2.840.113549.1.7.4 => SignedAndEnvelopedData
jca: SIGNEDANDENVELOPEDDATA => SignedAndEnvelopedData
jca: 1.2.840.113549.1.7.5 => DigestedData
jca: DIGESTEDDATA => DigestedData
jca: 1.2.840.113549.1.7.6 => EncryptedData
jca: ENCRYPTEDDATA => EncryptedData
jca: 1.2.840.113549.1.9.1 => EmailAddress
jca: EMAILADDRESS => EmailAddress
jca: 1.2.840.113549.1.9.2 => UnstructuredName
jca: UNSTRUCTUREDNAME => UnstructuredName
jca: 1.2.840.113549.1.9.3 => ContentType
jca: CONTENTTYPE => ContentType
jca: 1.2.840.113549.1.9.4 => MessageDigest
jca: MESSAGEDIGEST => MessageDigest
jca: 1.2.840.113549.1.9.5 => SigningTime
jca: SIGNINGTIME => SigningTime
jca: 1.2.840.113549.1.9.6 => CounterSignature
jca: COUNTERSIGNATURE => CounterSignature
jca: 1.2.840.113549.1.9.7 => ChallengePassword
jca: CHALLENGEPASSWORD => ChallengePassword
jca: 1.2.840.113549.1.9.8 => UnstructuredAddress
jca: UNSTRUCTUREDADDRESS => UnstructuredAddress
jca: 1.2.840.113549.1.9.9 => ExtendedCertificateAttributes
jca: EXTENDEDCERTIFICATEATTRIBUTES => ExtendedCertificateAttributes
jca: 1.2.840.113549.1.9.10 => IssuerAndSerialNumber
jca: ISSUERANDSERIALNUMBER => IssuerAndSerialNumber
jca: 1.2.840.113549.1.9.14 => ExtensionRequest
jca: EXTENSIONREQUEST => ExtensionRequest
jca: 1.2.840.113549.1.9.15 => SMIMECapability
jca: SMIMECAPABILITY => SMIMECapability
jca: 1.2.840.113549.1.9.16.1.4 => TimeStampTokenInfo
jca: TIMESTAMPTOKENINFO => TimeStampTokenInfo
jca: 1.2.840.113549.1.9.16.2.12 => SigningCertificate
jca: SIGNINGCERTIFICATE => SigningCertificate
jca: 1.2.840.113549.1.9.16.2.14 => SignatureTimestampToken
jca: SIGNATURETIMESTAMPTOKEN => SignatureTimestampToken
jca: 1.2.840.113549.1.9.16.3.18 => CHACHA20_POLY1305
jca: CHACHA20-POLY1305 => CHACHA20_POLY1305
jca: 1.2.840.113549.1.9.20 => FriendlyName
jca: FRIENDLYNAME => FriendlyName
jca: 1.2.840.113549.1.9.21 => LocalKeyID
jca: LOCALKEYID => LocalKeyID
jca: 1.2.840.113549.1.9.22.1 => CertTypeX509
jca: CERTTYPEX509 => CertTypeX509
jca: 1.2.840.113549.1.9.52 => CMSAlgorithmProtection
jca: CMSALGORITHMPROTECTION => CMSAlgorithmProtection
jca: 1.2.840.113549.1.12.1.1 => PBEWithSHA1AndRC4_128
jca: PBEWITHSHA1ANDRC4_128 => PBEWithSHA1AndRC4_128
jca: 1.2.840.113549.1.12.1.2 => PBEWithSHA1AndRC4_40
jca: PBEWITHSHA1ANDRC4_40 => PBEWithSHA1AndRC4_40
jca: 1.2.840.113549.1.12.1.3 => PBEWithSHA1AndDESede
jca: PBEWITHSHA1ANDDESEDE => PBEWithSHA1AndDESede
jca: 1.2.840.113549.1.12.1.5 => PBEWithSHA1AndRC2_128
jca: PBEWITHSHA1ANDRC2_128 => PBEWithSHA1AndRC2_128
jca: 1.2.840.113549.1.12.1.6 => PBEWithSHA1AndRC2_40
jca: PBEWITHSHA1ANDRC2_40 => PBEWithSHA1AndRC2_40
jca: 1.2.840.113549.1.12.10.1.2 => PKCS8ShroudedKeyBag
jca: PKCS8SHROUDEDKEYBAG => PKCS8ShroudedKeyBag
jca: 1.2.840.113549.1.12.10.1.3 => CertBag
jca: CERTBAG => CertBag
jca: 1.2.840.113549.1.12.10.1.5 => SecretBag
jca: SECRETBAG => SecretBag
jca: 1.2.840.113549.2.2 => MD2
jca: MD2 => MD2
jca: 1.2.840.113549.2.5 => MD5
jca: MD5 => MD5
jca: 1.2.840.113549.2.7 => HmacSHA1
jca: HMACSHA1 => HmacSHA1
jca: 1.2.840.113549.2.8 => HmacSHA224
jca: HMACSHA224 => HmacSHA224
jca: 1.2.840.113549.2.9 => HmacSHA256
jca: HMACSHA256 => HmacSHA256
jca: 1.2.840.113549.2.10 => HmacSHA384
jca: HMACSHA384 => HmacSHA384
jca: 1.2.840.113549.2.11 => HmacSHA512
jca: HMACSHA512 => HmacSHA512
jca: 1.2.840.113549.2.12 => HmacSHA512$224
jca: HMACSHA512/224 => HmacSHA512$224
jca: 1.2.840.113549.2.13 => HmacSHA512$256
jca: HMACSHA512/256 => HmacSHA512$256
jca: 1.2.840.113549.3.2 => RC2$CBC$PKCS5Padding
jca: RC2/CBC/PKCS5PADDING => RC2$CBC$PKCS5Padding
jca: 1.2.840.113549.3.4 => ARCFOUR
jca: ARCFOUR => ARCFOUR
jca: RC4 => ARCFOUR
jca: 1.2.840.113549.3.7 => DESede$CBC$NoPadding
jca: DESEDE/CBC/NOPADDING => DESede$CBC$NoPadding
jca: 1.2.840.113549.3.9 => RC5$CBC$PKCS5Padding
jca: RC5/CBC/PKCS5PADDING => RC5$CBC$PKCS5Padding
jca: 1.2.840.10040.4.1 => DSA
jca: DSA => DSA
jca: 1.2.840.10040.4.3 => SHA1withDSA
jca: SHA1WITHDSA => SHA1withDSA
jca: DSS => SHA1withDSA
jca: 1.2.840.10045.2.1 => EC
jca: EC => EC
jca: 1.2.840.10045.3.0.5 => c2tnb191v1
jca: X9.62 C2TNB191V1 => c2tnb191v1
jca: 1.2.840.10045.3.0.6 => c2tnb191v2
jca: X9.62 C2TNB191V2 => c2tnb191v2
jca: 1.2.840.10045.3.0.7 => c2tnb191v3
jca: X9.62 C2TNB191V3 => c2tnb191v3
jca: 1.2.840.10045.3.0.11 => c2tnb239v1
jca: X9.62 C2TNB239V1 => c2tnb239v1
jca: 1.2.840.10045.3.0.12 => c2tnb239v2
jca: X9.62 C2TNB239V2 => c2tnb239v2
jca: 1.2.840.10045.3.0.13 => c2tnb239v3
jca: X9.62 C2TNB239V3 => c2tnb239v3
jca: 1.2.840.10045.3.0.18 => c2tnb359v1
jca: X9.62 C2TNB359V1 => c2tnb359v1
jca: 1.2.840.10045.3.0.20 => c2tnb431r1
jca: X9.62 C2TNB431R1 => c2tnb431r1
jca: 1.2.840.10045.3.1.1 => secp192r1
jca: SECP192R1 => secp192r1
jca: NIST P-192 => secp192r1
jca: X9.62 PRIME192V1 => secp192r1
jca: 1.2.840.10045.3.1.2 => prime192v2
jca: X9.62 PRIME192V2 => prime192v2
jca: 1.2.840.10045.3.1.3 => prime192v3
jca: X9.62 PRIME192V3 => prime192v3
jca: 1.2.840.10045.3.1.4 => prime239v1
jca: X9.62 PRIME239V1 => prime239v1
jca: 1.2.840.10045.3.1.5 => prime239v2
jca: X9.62 PRIME239V2 => prime239v2
jca: 1.2.840.10045.3.1.6 => prime239v3
jca: X9.62 PRIME239V3 => prime239v3
jca: 1.2.840.10045.3.1.7 => secp256r1
jca: SECP256R1 => secp256r1
jca: NIST P-256 => secp256r1
jca: X9.62 PRIME256V1 => secp256r1
jca: 1.2.840.10045.4.1 => SHA1withECDSA
jca: SHA1WITHECDSA => SHA1withECDSA
jca: 1.2.840.10045.4.3.1 => SHA224withECDSA
jca: SHA224WITHECDSA => SHA224withECDSA
jca: 1.2.840.10045.4.3.2 => SHA256withECDSA
jca: SHA256WITHECDSA => SHA256withECDSA
jca: 1.2.840.10045.4.3.3 => SHA384withECDSA
jca: SHA384WITHECDSA => SHA384withECDSA
jca: 1.2.840.10045.4.3.4 => SHA512withECDSA
jca: SHA512WITHECDSA => SHA512withECDSA
jca: 1.2.840.10045.4.3 => SpecifiedSHA2withECDSA
jca: SPECIFIEDSHA2WITHECDSA => SpecifiedSHA2withECDSA
jca: 1.2.840.10046.2.1 => X942_DH
jca: 1.3.36.3.3.2.8.1.1.1 => brainpoolP160r1
jca: BRAINPOOLP160R1 => brainpoolP160r1
jca: 1.3.36.3.3.2.8.1.1.3 => brainpoolP192r1
jca: BRAINPOOLP192R1 => brainpoolP192r1
jca: 1.3.36.3.3.2.8.1.1.5 => brainpoolP224r1
jca: BRAINPOOLP224R1 => brainpoolP224r1
jca: 1.3.36.3.3.2.8.1.1.7 => brainpoolP256r1
jca: BRAINPOOLP256R1 => brainpoolP256r1
jca: 1.3.36.3.3.2.8.1.1.9 => brainpoolP320r1
jca: BRAINPOOLP320R1 => brainpoolP320r1
jca: 1.3.36.3.3.2.8.1.1.11 => brainpoolP384r1
jca: BRAINPOOLP384R1 => brainpoolP384r1
jca: 1.3.36.3.3.2.8.1.1.13 => brainpoolP512r1
jca: BRAINPOOLP512R1 => brainpoolP512r1
jca: 1.3.132.0.1 => sect163k1
jca: SECT163K1 => sect163k1
jca: NIST K-163 => sect163k1
jca: 1.3.132.0.2 => sect163r1
jca: SECT163R1 => sect163r1
jca: 1.3.132.0.3 => sect239k1
jca: SECT239K1 => sect239k1
jca: 1.3.132.0.4 => sect113r1
jca: SECT113R1 => sect113r1
jca: 1.3.132.0.5 => sect113r2
jca: SECT113R2 => sect113r2
jca: 1.3.132.0.6 => secp112r1
jca: SECP112R1 => secp112r1
jca: 1.3.132.0.7 => secp112r2
jca: SECP112R2 => secp112r2
jca: 1.3.132.0.8 => secp160r1
jca: SECP160R1 => secp160r1
jca: 1.3.132.0.9 => secp160k1
jca: SECP160K1 => secp160k1
jca: 1.3.132.0.10 => secp256k1
jca: SECP256K1 => secp256k1
jca: 1.3.132.0.15 => sect163r2
jca: SECT163R2 => sect163r2
jca: NIST B-163 => sect163r2
jca: 1.3.132.0.16 => sect283k1
jca: SECT283K1 => sect283k1
jca: NIST K-283 => sect283k1
jca: 1.3.132.0.17 => sect283r1
jca: SECT283R1 => sect283r1
jca: NIST B-283 => sect283r1
jca: 1.3.132.0.22 => sect131r1
jca: SECT131R1 => sect131r1
jca: 1.3.132.0.23 => sect131r2
jca: SECT131R2 => sect131r2
jca: 1.3.132.0.24 => sect193r1
jca: SECT193R1 => sect193r1
jca: 1.3.132.0.25 => sect193r2
jca: SECT193R2 => sect193r2
jca: 1.3.132.0.26 => sect233k1
jca: SECT233K1 => sect233k1
jca: NIST K-233 => sect233k1
jca: 1.3.132.0.27 => sect233r1
jca: SECT233R1 => sect233r1
jca: NIST B-233 => sect233r1
jca: 1.3.132.0.28 => secp128r1
jca: SECP128R1 => secp128r1
jca: 1.3.132.0.29 => secp128r2
jca: SECP128R2 => secp128r2
jca: 1.3.132.0.30 => secp160r2
jca: SECP160R2 => secp160r2
jca: 1.3.132.0.31 => secp192k1
jca: SECP192K1 => secp192k1
jca: 1.3.132.0.32 => secp224k1
jca: SECP224K1 => secp224k1
jca: 1.3.132.0.33 => secp224r1
jca: SECP224R1 => secp224r1
jca: NIST P-224 => secp224r1
jca: 1.3.132.0.34 => secp384r1
jca: SECP384R1 => secp384r1
jca: NIST P-384 => secp384r1
jca: 1.3.132.0.35 => secp521r1
jca: SECP521R1 => secp521r1
jca: NIST P-521 => secp521r1
jca: 1.3.132.0.36 => sect409k1
jca: SECT409K1 => sect409k1
jca: NIST K-409 => sect409k1
jca: 1.3.132.0.37 => sect409r1
jca: SECT409R1 => sect409r1
jca: NIST B-409 => sect409r1
jca: 1.3.132.0.38 => sect571k1
jca: SECT571K1 => sect571k1
jca: NIST K-571 => sect571k1
jca: 1.3.132.0.39 => sect571r1
jca: SECT571R1 => sect571r1
jca: NIST B-571 => sect571r1
jca: 1.3.132.1.12 => ECDH
jca: ECDH => ECDH
jca: 1.3.14.3.2.7 => OIW_DES_CBC
jca: DES/CBC => OIW_DES_CBC
jca: DES => OIW_DES_CBC
jca: 1.3.14.3.2.12 => OIW_DSA
jca: 1.3.14.3.2.13 => OIW_JDK_SHA1withDSA
jca: 1.3.14.3.2.15 => OIW_SHA1withRSA_Odd
jca: 1.3.14.3.2.17 => DESede
jca: DESEDE => DESede
jca: 1.3.14.3.2.26 => SHA_1
jca: SHA-1 => SHA_1
jca: SHA => SHA_1
jca: SHA1 => SHA_1
jca: 1.3.14.3.2.27 => OIW_SHA1withDSA
jca: 1.3.14.3.2.29 => OIW_SHA1withRSA
jca: 1.3.101.110 => X25519
jca: X25519 => X25519
jca: 1.3.101.111 => X448
jca: X448 => X448
jca: 1.3.101.112 => Ed25519
jca: ED25519 => Ed25519
jca: 1.3.101.113 => Ed448
jca: ED448 => Ed448
jca: 0.9.2342.19200300.100.1.1 => UCL_UserID
jca: UCL_USERID => UCL_UserID
jca: 0.9.2342.19200300.100.1.25 => UCL_DomainComponent
jca: UCL_DOMAINCOMPONENT => UCL_DomainComponent
jca: 2.16.840.1.113730.1.1 => NETSCAPE_CertType
jca: NETSCAPE_CERTTYPE => NETSCAPE_CertType
jca: 2.16.840.1.113730.2.5 => NETSCAPE_CertSequence
jca: NETSCAPE_CERTSEQUENCE => NETSCAPE_CertSequence
jca: 2.16.840.1.113730.4.1 => NETSCAPE_ExportApproved
jca: NETSCAPE_EXPORTAPPROVED => NETSCAPE_ExportApproved
jca: 2.16.840.1.113894.746875.1.1 => ORACLE_TrustedKeyUsage
jca: ORACLE_TRUSTEDKEYUSAGE => ORACLE_TrustedKeyUsage
jca: 2.5.8.1.1 => ITUX509_RSA
jca: 1.3.6.1.4.1.42.2.11.2.1 => SkipIPAddress
jca: SKIPIPADDRESS => SkipIPAddress
jca: 1.3.6.1.4.1.42.2.17.1.1 => JAVASOFT_JDKKeyProtector
jca: JAVASOFT_JDKKEYPROTECTOR => JAVASOFT_JDKKeyProtector
jca: 1.3.6.1.4.1.42.2.19.1 => JAVASOFT_JCEKeyProtector
jca: JAVASOFT_JCEKEYPROTECTOR => JAVASOFT_JCEKeyProtector
jca: 1.3.6.1.4.1.311.10.3.3 => MICROSOFT_ExportApproved
jca: MICROSOFT_EXPORTAPPROVED => MICROSOFT_ExportApproved
ProviderList: ThreadLocal providers: [SUN, SunRsaSign, SunEC]
ProviderList: Disabling ThreadLocal providers
Error occurred during initialization of VM
java.util.ServiceConfigurationError: Locale provider adapter ""CLDR""cannot be instantiated.
	at sun.util.locale.provider.LocaleProviderAdapter.forType(java.base@19-internal/LocaleProviderAdapter.java:199)
	at sun.util.locale.provider.LocaleServiceProviderPool.findProviders(java.base@19-internal/LocaleServiceProviderPool.java:302)
	at sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObjectImpl(java.base@19-internal/LocaleServiceProviderPool.java:274)
	at sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObject(java.base@19-internal/LocaleServiceProviderPool.java:256)
	at sun.util.locale.provider.CalendarDataUtility.retrieveFirstDayOfWeek(java.base@19-internal/CalendarDataUtility.java:76)
	at java.util.Calendar.setWeekCountData(java.base@19-internal/Calendar.java:3398)
	at java.util.Calendar.<init>(java.base@19-internal/Calendar.java:1607)
	at java.util.GregorianCalendar.<init>(java.base@19-internal/GregorianCalendar.java:738)
	at java.util.Calendar$Builder.build(java.base@19-internal/Calendar.java:1492)
	at sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint.<init>(java.base@19-internal/DisabledAlgorithmConstraints.java:702)
	at sun.security.util.DisabledAlgorithmConstraints$Constraints.<init>(java.base@19-internal/DisabledAlgorithmConstraints.java:414)
	at sun.security.util.DisabledAlgorithmConstraints.<init>(java.base@19-internal/DisabledAlgorithmConstraints.java:144)
	at sun.security.util.DisabledAlgorithmConstraints.<init>(java.base@19-internal/DisabledAlgorithmConstraints.java:118)
	at sun.security.util.DisabledAlgorithmConstraints$JarHolder.<clinit>(java.base@19-internal/DisabledAlgorithmConstraints.java:96)
	at sun.security.util.DisabledAlgorithmConstraints.jarConstraints(java.base@19-internal/DisabledAlgorithmConstraints.java:108)
	at sun.security.pkcs.SignerInfo.<clinit>(java.base@19-internal/SignerInfo.java:61)
	at sun.security.pkcs.PKCS7.parseSignedData(java.base@19-internal/PKCS7.java:390)
	at sun.security.pkcs.PKCS7.parse(java.base@19-internal/PKCS7.java:174)
	at sun.security.pkcs.PKCS7.parse(java.base@19-internal/PKCS7.java:142)
	at sun.security.pkcs.PKCS7.<init>(java.base@19-internal/PKCS7.java:124)
	at sun.security.util.SignatureFileVerifier.<init>(java.base@19-internal/SignatureFileVerifier.java:118)
	at java.util.jar.JarVerifier.processEntry(java.base@19-internal/JarVerifier.java:308)
	at java.util.jar.JarVerifier.update(java.base@19-internal/JarVerifier.java:239)
	at java.util.jar.JarFile.initializeVerifier(java.base@19-internal/JarFile.java:762)
	at java.util.jar.JarFile.ensureInitialization(java.base@19-internal/JarFile.java:1033)
	at java.util.jar.JavaUtilJarAccessImpl.ensureInitialization(java.base@19-internal/JavaUtilJarAccessImpl.java:72)
	at jdk.internal.loader.URLClassPath$JarLoader$2.getManifest(java.base@19-internal/URLClassPath.java:888)
	at jdk.internal.loader.BuiltinClassLoader.defineClass(java.base@19-internal/BuiltinClassLoader.java:848)
	at jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(java.base@19-internal/BuiltinClassLoader.java:760)
	at jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(java.base@19-internal/BuiltinClassLoader.java:681)
	at jdk.internal.loader.BuiltinClassLoader.loadClass(java.base@19-internal/BuiltinClassLoader.java:639)
	at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(java.base@19-internal/ClassLoaders.java:188)
	at java.lang.ClassLoader.loadClass(java.base@19-internal/ClassLoader.java:521)
	at java.lang.Class.forName0(java.base@19-internal/Native Method)
	at java.lang.Class.forName(java.base@19-internal/Class.java:488)
	at java.lang.Class.forName(java.base@19-internal/Class.java:467)
	at java.lang.ClassLoader.initSystemClassLoader(java.base@19-internal/ClassLoader.java:1986)
	at java.lang.System.initPhase3(java.base@19-internal/System.java:2285)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(java.base@19-internal/DirectConstructorHandleAccessor.java:79)
	at java.lang.reflect.Constructor.newInstanceWithCaller(java.base@19-internal/Constructor.java:499)
	at java.lang.reflect.Constructor.newInstance(java.base@19-internal/Constructor.java:483)
	at sun.util.locale.provider.LocaleProviderAdapter.forType(java.base@19-internal/LocaleProviderAdapter.java:188)
	at sun.util.locale.provider.LocaleServiceProviderPool.findProviders(java.base@19-internal/LocaleServiceProviderPool.java:302)
	at sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObjectImpl(java.base@19-internal/LocaleServiceProviderPool.java:274)
	at sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObject(java.base@19-internal/LocaleServiceProviderPool.java:256)
	at sun.util.locale.provider.CalendarDataUtility.retrieveFirstDayOfWeek(java.base@19-internal/CalendarDataUtility.java:76)
	at java.util.Calendar.setWeekCountData(java.base@19-internal/Calendar.java:3398)
	at java.util.Calendar.<init>(java.base@19-internal/Calendar.java:1607)
	at java.util.GregorianCalendar.<init>(java.base@19-internal/GregorianCalendar.java:738)
	at java.util.Calendar$Builder.build(java.base@19-internal/Calendar.java:1492)
	at sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint.<init>(java.base@19-internal/DisabledAlgorithmConstraints.java:702)
	at sun.security.util.DisabledAlgorithmConstraints$Constraints.<init>(java.base@19-internal/DisabledAlgorithmConstraints.java:414)
	at sun.security.util.DisabledAlgorithmConstraints.<init>(java.base@19-internal/DisabledAlgorithmConstraints.java:144)
	at sun.security.util.DisabledAlgorithmConstraints.<init>(java.base@19-internal/DisabledAlgorithmConstraints.java:118)
	at sun.security.util.DisabledAlgorithmConstraints$JarHolder.<clinit>(java.base@19-internal/DisabledAlgorithmConstraints.java:96)
	at sun.security.util.DisabledAlgorithmConstraints.jarConstraints(java.base@19-internal/DisabledAlgorithmConstraints.java:108)
	at sun.security.pkcs.SignerInfo.<clinit>(java.base@19-internal/SignerInfo.java:61)
	at sun.security.pkcs.PKCS7.parseSignedData(java.base@19-internal/PKCS7.java:390)
	at sun.security.pkcs.PKCS7.parse(java.base@19-internal/PKCS7.java:174)
	at sun.security.pkcs.PKCS7.parse(java.base@19-internal/PKCS7.java:142)
	at sun.security.pkcs.PKCS7.<init>(java.base@19-internal/PKCS7.java:124)
	at sun.security.util.SignatureFileVerifier.<init>(java.base@19-internal/SignatureFileVerifier.java:118)
	at java.util.jar.JarVerifier.processEntry(java.base@19-internal/JarVerifier.java:308)
	at java.util.jar.JarVerifier.update(java.base@19-internal/JarVerifier.java:239)
	at java.util.jar.JarFile.initializeVerifier(java.base@19-internal/JarFile.java:762)
	at java.util.jar.JarFile.ensureInitialization(java.base@19-internal/JarFile.java:1033)
	at java.util.jar.JavaUtilJarAccessImpl.ensureInitialization(java.base@19-internal/JavaUtilJarAccessImpl.java:72)
	at jdk.internal.loader.URLClassPath$JarLoader$2.getManifest(java.base@19-internal/URLClassPath.java:888)
	at jdk.internal.loader.BuiltinClassLoader.defineClass(java.base@19-internal/BuiltinClassLoader.java:848)
	at jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(java.base@19-internal/BuiltinClassLoader.java:760)
	at jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(java.base@19-internal/BuiltinClassLoader.java:681)
	at jdk.internal.loader.BuiltinClassLoader.loadClass(java.base@19-internal/BuiltinClassLoader.java:639)
	at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(java.base@19-internal/ClassLoaders.java:188)
	at java.lang.ClassLoader.loadClass(java.base@19-internal/ClassLoader.java:521)
	at java.lang.Class.forName0(java.base@19-internal/Native Method)
	at java.lang.Class.forName(java.base@19-internal/Class.java:488)
	at java.lang.Class.forName(java.base@19-internal/Class.java:467)
	at java.lang.ClassLoader.initSystemClassLoader(java.base@19-internal/ClassLoader.java:1986)
	at java.lang.System.initPhase3(java.base@19-internal/System.java:2285)
Caused by: java.lang.IllegalStateException: getSystemClassLoader cannot be called during the system class loader instantiation
	at java.lang.ClassLoader.getSystemClassLoader(java.base@19-internal/ClassLoader.java:1941)
	at java.lang.ClassLoader.getSystemResources(java.base@19-internal/ClassLoader.java:1707)
	at java.util.ServiceLoader$LazyClassPathLookupIterator.nextProviderClass(java.base@19-internal/ServiceLoader.java:1193)
	at java.util.ServiceLoader$LazyClassPathLookupIterator.hasNextService(java.base@19-internal/ServiceLoader.java:1228)
	at java.util.ServiceLoader$LazyClassPathLookupIterator.hasNext(java.base@19-internal/ServiceLoader.java:1273)
	at java.util.ServiceLoader$2.hasNext(java.base@19-internal/ServiceLoader.java:1309)
	at java.util.ServiceLoader$3.hasNext(java.base@19-internal/ServiceLoader.java:1393)
	at sun.util.cldr.CLDRLocaleProviderAdapter.lambda$new$0(java.base@19-internal/CLDRLocaleProviderAdapter.java:86)
	at java.security.AccessController.doPrivileged(java.base@19-internal/AccessController.java:569)
	at sun.util.cldr.CLDRLocaleProviderAdapter.<init>(java.base@19-internal/CLDRLocaleProviderAdapter.java:85)
	at jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(java.base@19-internal/DirectConstructorHandleAccessor.java:67)
	at java.lang.reflect.Constructor.newInstanceWithCaller(java.base@19-internal/Constructor.java:499)
	at java.lang.reflect.Constructor.newInstance(java.base@19-internal/Constructor.java:483)
	at sun.util.locale.provider.LocaleProviderAdapter.forType(java.base@19-internal/LocaleProviderAdapter.java:188)
	at sun.util.locale.provider.LocaleServiceProviderPool.findProviders(java.base@19-internal/LocaleServiceProviderPool.java:302)
	at sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObjectImpl(java.base@19-internal/LocaleServiceProviderPool.java:274)
	at sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObject(java.base@19-internal/LocaleServiceProviderPool.java:256)
	at sun.util.locale.provider.CalendarDataUtility.retrieveFirstDayOfWeek(java.base@19-internal/CalendarDataUtility.java:76)
	at java.util.Calendar.setWeekCountData(java.base@19-internal/Calendar.java:3398)
	at java.util.Calendar.<init>(java.base@19-internal/Calendar.java:1607)
	at java.util.GregorianCalendar.<init>(java.base@19-internal/GregorianCalendar.java:738)
	at java.util.Calendar$Builder.build(java.base@19-internal/Calendar.java:1492)
	at sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint.<init>(java.base@19-internal/DisabledAlgorithmConstraints.java:702)
	at sun.security.util.DisabledAlgorithmConstraints$Constraints.<init>(java.base@19-internal/DisabledAlgorithmConstraints.java:414)
	at sun.security.util.DisabledAlgorithmConstraints.<init>(java.base@19-internal/DisabledAlgorithmConstraints.java:144)
	at sun.security.util.DisabledAlgorithmConstraints.<init>(java.base@19-internal/DisabledAlgorithmConstraints.java:118)
	at sun.security.util.DisabledAlgorithmConstraints$JarHolder.<clinit>(java.base@19-internal/DisabledAlgorithmConstraints.java:96)
	at sun.security.util.DisabledAlgorithmConstraints.jarConstraints(java.base@19-internal/DisabledAlgorithmConstraints.java:108)
	at sun.security.pkcs.SignerInfo.<clinit>(java.base@19-internal/SignerInfo.java:61)
	at sun.security.pkcs.PKCS7.parseSignedData(java.base@19-internal/PKCS7.java:390)
	at sun.security.pkcs.PKCS7.parse(java.base@19-internal/PKCS7.java:174)
	at sun.security.pkcs.PKCS7.parse(java.base@19-internal/PKCS7.java:142)
	at sun.security.pkcs.PKCS7.<init>(java.base@19-internal/PKCS7.java:124)
	at sun.security.util.SignatureFileVerifier.<init>(java.base@19-internal/SignatureFileVerifier.java:118)
	at java.util.jar.JarVerifier.processEntry(java.base@19-internal/JarVerifier.java:308)
	at java.util.jar.JarVerifier.update(java.base@19-internal/JarVerifier.java:239)
	at java.util.jar.JarFile.initializeVerifier(java.base@19-internal/JarFile.java:762)
	at java.util.jar.JarFile.ensureInitialization(java.base@19-internal/JarFile.java:1033)
	at java.util.jar.JavaUtilJarAccessImpl.ensureInitialization(java.base@19-internal/JavaUtilJarAccessImpl.java:72)
	at jdk.internal.loader.URLClassPath$JarLoader$2.getManifest(java.base@19-internal/URLClassPath.java:888)
	at jdk.internal.loader.BuiltinClassLoader.defineClass(java.base@19-internal/BuiltinClassLoader.java:848)
	at jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(java.base@19-internal/BuiltinClassLoader.java:760)
	at jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(java.base@19-internal/BuiltinClassLoader.java:681)
	at jdk.internal.loader.BuiltinClassLoader.loadClass(java.base@19-internal/BuiltinClassLoader.java:639)
	at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(java.base@19-internal/ClassLoaders.java:188)
	at java.lang.ClassLoader.loadClass(java.base@19-internal/ClassLoader.java:521)
	at java.lang.Class.forName0(java.base@19-internal/Native Method)
	at java.lang.Class.forName(java.base@19-internal/Class.java:488)
	at java.lang.Class.forName(java.base@19-internal/Class.java:467)
	at java.lang.ClassLoader.initSystemClassLoader(java.base@19-internal/ClassLoader.java:1986)
	at java.lang.System.initPhase3(java.base@19-internal/System.java:2285)",,,,,,,,,,JDK-8299640,JDK-8299605,JDK-8299389,JDK-8299633,JDK-8299391,JDK-8300555,JDK-8299008,JDK-8299006,JDK-8299007,JDK-8299331,JDK-8299009,JDK-8299310,JDK-8299311,JDK-8299928,,,,,,,,JDK-8270170,,JDK-8297684,,,JDK-8298762,JDK-8298741,JDK-8292770,JDK-8299529,,,,,,,,,JDK-8249906,JDK-8269039,JDK-8299529,JDK-8298271,JDK-8298108,,"2022-01-28 07:46;mullan;CustomClassLoader.java;https://bugs.openjdk.org/secure/attachment/97771/CustomClassLoader.java","2022-01-28 07:46;mullan;Main.java;https://bugs.openjdk.org/secure/attachment/97772/Main.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vuj7:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2022-02-01 14:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7316
Date: 2022-02-01 21:54:29 +0000;;;","2022-02-07 06:07;roboduke;Changeset: a0f6f240
Author:    Sean Mullan <mullan@openjdk.org>
Date:      2022-02-07 14:06:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a0f6f2409ea61ff9ed9dc2e2b46e309c751d456d
;;;","2022-12-22 01:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/363
Date: 2022-12-22 09:50:33 +0000;;;","2022-12-22 03:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u/pull/65
Date: 2022-12-22 10:58:34 +0000;;;","2022-12-22 03:26;sgehwolf;Fix Request (critical, OpenJDK 17u):

I propose to fix this regression introduced in OpenJDK 17.0.5 with the backport of JDK-8269039 ASAP, i.e. 17.0.6 not 17.0.7. This should be low-risk as it merely removes use of java.util.Calendar API usage in DisabledAlgorithmConstraints which can cause issues with applications that contain CalendarDataProvider's in signed jars. See JDK-8297684 and JDK-8298108 for details. I'll follow up with a backport of JDK-8298108 (different reg test) in 17.0.7-dev. Patch wasn't clean, but the only difference to the JDK 19 patch is a copyright header change. Patch got reviewed by Christoph Langer. The test fails prior the product fix and passes after.;;;","2022-12-22 07:34;sgehwolf;Fix Request (critical, OpenJDK 11u):

I propose to fix this regression introduced in OpenJDK 11.0.17 with the backport of JDK-8269039 ASAP, i.e. 11.0.18 not 11.0.19. This should be low-risk as it merely removes use of java.util.Calendar API usage in DisabledAlgorithmConstraints which can cause issues with applications that contain CalendarDataProvider's in signed jars. See JDK-8297684 and JDK-8298108 for details. I'll follow up with a backport of JDK-8298108 (different reg test) in jdk11u-dev. Patch wasn't clean, but the only difference to the JDK 19 patch is a copyright header change in product code and some test-fix-ups so that it works with JDK 11. Patch got reviewed by Christoph Langer. The test fails prior the product fix and passes after.;;;","2022-12-22 07:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u/pull/29
Date: 2022-12-22 15:43:20 +0000;;;","2022-12-23 08:28;sgehwolf;Fix Request (critical, OpenJDK 8u):

I propose to fix this regression introduced in OpenJDK 8u362 (jdk8u tree) with the backport of JDK-8269039 ASAP, i.e. 8u362 not 8u372. This should be low-risk as it merely removes use of java.util.Calendar API usage in DisabledAlgorithmConstraints which can cause issues with applications that contain CalendarDataProvider's in signed jars. See JDK-8297684 and JDK-8298108 for details. I'll follow up with a backport of JDK-8298108 (different reg test) in jdk8u-dev. Patch wasn't clean. Reviewed by Andrew Hughes. The test fails prior the product fix and passes after.;;;","2022-12-23 10:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/947
Date: 2022-12-03 22:42:54 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/lang/instrument/GetObjectSizeIntrinsicsTest.java fails with -XX:-UseCompressedOops,JDK-8280889,5067335,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,dcubed,dcubed,2022-01-28 07:10,2023-01-02 04:32,2023-10-01 09:56,2022-01-31 00:50,19,repo-loom,,,,,,,19,core-svc,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,tier7,tier8,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

java/lang/instrument/GetObjectSizeIntrinsicsTest.java#id8

Here's a snippet from the log file:

#section:main
----------messages:(4/592)----------
command: main -Xmx8g -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath/a:. -XX:ObjectAlignmentInBytes=32 -Xint -javaagent:basicAgent.jar GetObjectSizeIntrinsicsTest GetObjectSizeIntrinsicsTest large
reason: User specified action: run main/othervm -Xmx8g -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:+WhiteBoxAPI -Xbootclasspath/a:. -XX:ObjectAlignmentInBytes=32 -Xint -javaagent:basicAgent.jar GetObjectSizeIntrinsicsTest GetObjectSizeIntrinsicsTest large 
Mode: othervm [/othervm specified]
elapsed time (seconds): 7.924
----------configuration:(0/0)----------
----------System.out:(1/47)----------
InstrumentationHandoff JPLIS agent initialized
----------System.err:(18/1233)----------
java.lang.OutOfMemoryError: Java heap space
	at GetObjectSizeIntrinsicsTest.testSize_localLargeObjArray(GetObjectSizeIntrinsicsTest.java:457)
	at GetObjectSizeIntrinsicsTest.doRunTest(GetObjectSizeIntrinsicsTest.java:366)
	at ATestCaseScaffold.runTest(ATestCaseScaffold.java:60)
	at GetObjectSizeIntrinsicsTest.main(GetObjectSizeIntrinsicsTest.java:326)
	at java.base/java.lang.invoke.LambdaForm$DMH/0x00000000800c1800.invokeStatic(LambdaForm$DMH)
	at java.base/java.lang.invoke.LambdaForm$MH/0x00000000800c2800.invoke(LambdaForm$MH)
	at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(DirectMethodHandleAccessor.java:155)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.OutOfMemoryError: Java heap space
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.OutOfMemoryError: Java heap space
----------rerun:(45/6983)*----------

So far the failure has happened on linux-x64-debug and
win-x64-debug configs:

JVM args for all of the failures so far are:
-XX:-UseCompressedOops

The Tier7 job set includes the fix for the following bug:

JDK-8280166 Extend java/lang/instrument/GetObjectSizeIntrinsicsTest.java test cases",,,,,,,,,,JDK-8297745,JDK-8299460,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280166,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,generic,,,,,"0|i2vuiz:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@dc685aa,,,,,,,,,"2022-01-28 07:13;dcubed;[~shade] - Looks like there might be an issue with one of your new
test cases when run with -XX:-UseCompressedOops.

Can you take a look please?;;;","2022-01-28 07:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7269
Date: 2022-01-28 15:37:59 +0000;;;","2022-01-31 00:50;roboduke;Changeset: 251351f4
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-31 08:49:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/251351f49498ea39150b38860b8f73232fbaf05d
;;;","2022-02-01 06:21;dcubed;This fix for this bug is in jdk-19+8-404.;;;","2023-01-01 11:51;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.  Depends on 8280166.
Test passes.;;;","2023-01-01 11:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1018
Date: 2023-01-01 19:49:53 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Shenandoah: Some tests failed with ""EA: missing allocation reference path""",JDK-8280885,5067331,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,roland,zgu,zgu,2022-01-28 05:59,2023-07-05 01:58,2023-10-01 09:56,2022-02-01 23:40,11,17,18,19,8-shenandoah,,,,19,hotspot,,0,amazon-interest,gc-shenandoah,jdk17u-fix-request,jdk17u-fix-yes,oraclejdk-na,redhat-interest,,,,,,,,,,,,,,"Following tests failed in nightly test.

java/foreign/TestUpcall_async.java
java/foreign/TestDowncall.java
java/foreign/TestUpcall_scope.java
java/foreign/TestMemoryHandleAsUnsigned.java
java/foreign/loaderLookup/TestLoaderLookup.java
java/lang/invoke/MethodHandlesGeneralTest.java

#  Internal Error (/home/jenkins/workspace/nightly/jdk-jdk/src/hotspot/share/opto/escape.cpp:3333), pid=13910, tid=13951
#  assert(false) failed: EA: missing allocation reference path
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal+0-adhoc.jenkins.jdk-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal+0-adhoc.jenkins.jdk-jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, 
shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xb1d444]  ConnectionGraph::split_unique_types(GrowableArray<Node*>&, GrowableArray<ArrayCopyNode*>&, GrowableArray<MergeMemNode*>&)+0xed


",,,,,,,,,,JDK-8311484,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-01-28 05:58;zgu;hs_err_pid46467.log;https://bugs.openjdk.org/secure/attachment/97768/hs_err_pid46467.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vui3:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-02-01 02:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7299
Date: 2022-02-01 10:03:17 +0000;;;","2022-02-01 23:40;roboduke;Changeset: ab638341
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-02-02 07:37:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ab638341de164965e06bb1d59808670260916b82
;;;","2023-07-04 05:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1537
Date: 2023-07-04 12:07:57 +0000;;;","2023-07-04 08:14;shade;Fix Request (17u)

Fixes the corner case in Shenandoah IU mode. Applies cleanly. Tests pass, see 17u PR.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LineBodyHandlerTest.java creates and discards too many clients,JDK-8280868,5067316,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2022-01-28 01:40,2023-02-13 20:13,2023-10-01 09:56,2022-02-02 09:12,19,,,,,,,,19,core-libs,,0,httpclient,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,"The LineBodyHandlerTest.java creates and discards many clients (64).
The test has been observed failing intermittently on some systems (Windows 10) while trying to open the client's selector, apparently due to some connection limit (see below).

It seems that using a single client reduces the occurrences in which the test fails. 

java.io.IOException: Unable to establish loopback connection
at java.base/sun.nio.ch.PipeImpl$Initializer.run(PipeImpl.java:99)
at java.base/sun.nio.ch.PipeImpl$Initializer.run(PipeImpl.java:65)
at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
at java.base/sun.nio.ch.PipeImpl.<init>(PipeImpl.java:188)
at java.base/sun.nio.ch.WEPollSelectorImpl.<init>(WEPollSelectorImpl.java:78)
at java.base/sun.nio.ch.WEPollSelectorProvider.openSelector(WEPollSelectorProvider.java:33)
at java.base/java.nio.channels.Selector.open(Selector.java:295)
at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.<init>(HttpClientImpl.java:719)
at java.net.http/jdk.internal.net.http.HttpClientImpl.<init>(HttpClientImpl.java:323)
... 33 more
Caused by: java.net.ConnectException: Connection timed out: connect
at java.base/sun.nio.ch.Net.connect0(Native Method)
at java.base/sun.nio.ch.Net.connect(Net.java:579)
at java.base/sun.nio.ch.Net.connect(Net.java:586)
at java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:853)
at java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:285)
at java.base/sun.nio.ch.PipeImpl$Initializer$LoopbackConnector.run(PipeImpl.java:129)
at java.base/sun.nio.ch.PipeImpl$Initializer.run(PipeImpl.java:81) ",,,,,,,,,,JDK-8297825,JDK-8299581,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280944,JDK-8280788,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vuer:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-01-28 01:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7263
Date: 2022-01-28 09:45:02 +0000;;;","2022-02-02 09:12;roboduke;Changeset: 47800bf3
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-02-02 17:11:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/47800bf3da181ae0ee612b14d95773fd1dc90350
;;;","2023-01-01 12:04;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-01-01 12:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1019
Date: 2023-01-01 20:05:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cpuid1Ecx feature parsing is incorrect for AMD CPUs,JDK-8280867,5067315,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-01-28 01:32,2022-04-05 03:01,2023-10-01 09:56,2022-02-01 12:56,11,17,18,19,8,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-18,redhat-interest,,,,,,,,,,,"Originally found by Ashutosh Mehra of Red Hat.

If you look at our current CPU feature handling here:
 https://github.com/openjdk/jdk/blob/c2ee1b33c37e6f2848dc8b3e5417b93b1dac1112/src/hotspot/cpu/x86/vm_version_x86.hpp#L145-L158

  union ExtCpuid1Ecx {
    uint32_t value;
    struct {
      uint32_t LahfSahf     : 1, // bit 0
               CmpLegacy    : 1,  // bit 1
                            : 3, // bits 2..4
               lzcnt_intel  : 1, // bit 5
               lzcnt        : 1, // bit 6
               sse4a        : 1, // bit 7
               misalignsse  : 1, // bit 8
               prefetchw    : 1, // bit 9
                            : 22;
    } bits;
  };

And compare it with Intel SDM and AMD APM, then you'll notice a discrepancy in bit positions.

AMD APM V3 says (https://www.amd.com/system/files/TechDocs/40332.pdf, ""Obtaining Processor Information Via the CPUID Instruction"", page 610):

  Bit 0: LahfSahf LAHF and SAHF instruction support in 64-bit mode.
  Bit 1: CmpLegacy Core multi-processing legacy mode.
  Bit 2: SVM Secure virtual machine.
  Bit 3: ExtApicSpace
  Bit 4: AltMovCr8 LOCK MOV CR0 means MOV CR8. 
  Bit 5: ABM Advanced bit manipulation. LZCNT instruction support. 
  Bit 6: SSE4A
  Bit 7: MisAlignSse
  Bit 8: 3DNowPrefetch
  Bit 9: OSVW OS visible workaround.

So CPUID returns {LZCNT, SSE4A, MisAlignSse, 3DNowPrefetch} in bits 5..8. Hotspot's code, however, reads {lzcnt, sse4a, misalignsse, prefetchw} from bits 6..9!

Intel SDM 2A says (https://cdrdv2.intel.com/v1/dl/getContent/671199, ""CPUID—CPU Identification"", page 3-233):
  Bit 00: LAHF/SAHF available in 64-bit mode
  Bits 04-01 Reserved
  Bit 05: LZCNT
  Bits 07-06 Reserved
  Bit 08: PREFETCHW
  Bits 31-09 Reserved

It matches the current structure well, except for prefetchw oddity (CPUID sets bit 8, Hotspot reads bit 9 ""misalignsse"") that is handled separately:

    // Intel features.
    if (is_intel()) {
...
      // for Intel, ecx.bits.misalignsse bit (bit 8) indicates support for prefetchw
      if (_cpuid_info.ext_cpuid1_ecx.bits.misalignsse != 0) {
        result |= CPU_3DNOW_PREFETCH;
      }
...
    }

I believe this went unnoticed, because all adjacent bits 6..9 are set on modern AMD CPUs.",,,,,,,,,,JDK-8284078,JDK-8283823,JDK-8284253,JDK-8284139,JDK-8284348,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vuej:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-28 15:10;dlong;Nice find.  I'm surprised how long this went unnoticed.;;;","2022-01-28 15:11;dlong;ILW = misindentification of AMD CPU features = MMH = P3;;;","2022-01-31 05:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7287
Date: 2022-01-31 11:26:29 +0000;;;","2022-02-01 12:56;roboduke;Changeset: a18beb47
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-02-01 20:55:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a18beb4797a1ca6fc6b31e997be48b2bd91c6ac0
;;;","2022-03-29 05:15;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly.;;;","2022-03-29 05:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/295
Date: 2022-03-29 12:16:10 +0000;;;","2022-03-29 08:28;thartmann;Fix Request (JDK 18u)
Fixes misindentification of AMD CPU features. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 08:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/70
Date: 2022-03-29 15:28:10 +0000;;;","2022-04-02 00:45;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
I had to resolve some trivial differences.
A low risk fix we should have in 11.
SAP nightly testing passed.;;;","2022-04-02 00:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/989
Date: 2022-04-02 07:43:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SuppressWarnings does not work properly in package-info and module-info,JDK-8280866,5067314,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2022-01-28 01:08,2022-02-23 17:49,2023-10-01 09:56,2022-02-18 03:27,19,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,"Consider:
===package-info.java
@Ann
@SuppressWarnings(""deprecation"")
package test;
===Ann.java
package test;

@Deprecated @interface Ann {}
===

After JDK-8280744, this will produce:
---
$ javac -Xlint:deprecation *.java
package-info.java:1: warning: [deprecation] Ann in test has been deprecated
@Ann
 ^
1 warning
---

That appears to be clearly wrong, as the warning is suppressed.

Something similar is visible in module-info.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280744,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vueb:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-28 03:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7266
Date: 2022-01-28 10:57:50 +0000;;;","2022-02-18 03:27;roboduke;Changeset: e3365041
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-02-18 11:04:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e3365041bdef4dc09f3e5967124103e4364614fb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update build README to reflect that MSYS2 is supported,JDK-8280863,5067309,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-01-28 00:38,2022-11-25 10:45,2023-10-01 09:56,2022-01-28 04:48,19,,,,,,,,19,infrastructure,,0,build-infra,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,It is now possible to build on MSYS2 on Windows. This should be reflected in the build README.,,,,,,,,,,JDK-8290094,JDK-8297664,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vud7:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-01-28 00:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7242
Date: 2022-01-27 08:49:08 +0000;;;","2022-01-28 04:48;roboduke;Changeset: 6de90ad9
Author:    Magnus Ihse Bursie <mag@icus.se>
Committer: Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-01-28 12:45:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6de90ad9800b83c4a5f364c3645603fcb6828d6c
;;;","2022-07-09 05:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/540
Date: 2022-07-09 11:56:12 +0000;;;","2022-07-11 08:42;clanger;Fix request (17u) on behalf of George Adams:
This is kind of a prerequisite for backporting the new GHA workflow that makes use of the MSYS2 environment on Windows. This backport adds some more clarity to the documentation. Risk: None.;;;","2022-11-25 03:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1552
Date: 2022-11-25 09:16:38 +0000;;;","2022-11-25 09:02;gdams;Fix request (11u):
This is kind of a  prerequisite for backporting the new GHA workflow that makes use of the MSYS2 environment on Windows. This backport adds some more clarity to the documentation. Risk: None.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Robot color picker broken on Linux with scaling above 100%,JDK-8280861,5067307,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mkartashev,mkartashev,mkartashev,2022-01-28 00:11,2023-09-18 09:41,2023-10-01 09:56,2022-02-21 03:42,11,17,dev,,,,,,19,client-libs,,0,,,,,,,,,,,,,,,,,,,,"Several tests that use Robot.getPixelColor() or createScreenCapture() fail on Linux with scaling set above 100%:
javax/swing/JPasswordField/TestSelectedTextBackgroundColor.java
javax/swing/JProgressBar/TestJProgressBarHighlightColor.java
javax/swing/JSlider/TestJSliderRendering.java
javax/swing/JSpinner/TestSelectedTextBackgroundColor.java
javax/swing/JTextPane/TestJTextPaneBackgroundColor.java
javax/swing/JToolTip/TestTooltipBackgroundColor.java

The reason for failures is that the coordinates for the tested pixel are incorrect and the returned value, which is usually expected to be different because of a change in state, appears to be the same.

There are also two tests that *should* fail for the same reason, but don't:
java/awt/Robot/HiDPIScreenCapture/HiDPIRobotScreenCaptureTest.java
java/awt/Robot/HiDPIScreenCapture/ScreenCaptureTest.java
That's because the tests only check the color in the middle of a large square and, even if the coordinates are off by a few dozen pixels, the result is as expected. 
However, those two tests fail with scaling set to 300% because of an attempt to capture an image of zero size.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282270,,,,,,,,,,,,JDK-8274939,JDK-8225118,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2vucr:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-01-28 00:20;mkartashev;There are two bugs here:
1. gtk3_interface.c`gtk3_get_drawable_data() gets the coordinates from Robot that pre-scales them. However, gdk_pixbuf_get_from_window() expects unscaled coordinates _and_ size. The latter had been taken care of in JDK-8225118, but coordinates are still passed scaled.
2. The fix for JDK-8225118 scales down the size of the captured area by the root window scale factor, which can be 3 or more. So when the incoming size is just 1x1 (for instance, from Robot.getPixelColor() ), scaling this down by 3 results in the size of 0x0, which gdk refuses to work with.;;;","2022-01-28 09:09;vdyakov;[~serb]  feel free to take it if you want ;;;","2022-02-10 06:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7425
Date: 2022-02-10 14:08:48 +0000;;;","2022-02-21 03:41;dukebot;Changeset: cc7cf812
Author:    Maxim Kartashev <maxim.kartashev@jetbrains.com>
Committer: Anton Tarasov <ant@openjdk.org>
Date:      2022-02-21 11:39:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cc7cf81256ed4d74493472017b1c4df20fa2208a
;;;","2023-09-18 09:41;aivanov;Test failures caused by this fix are addressed by JDK-8282270.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Epoch shift synchronization point for Compiler threads is inadequate,JDK-8280844,5067290,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,dholmes,dholmes,2022-01-27 18:54,2023-04-03 03:04,2023-10-01 09:56,2022-05-18 02:08,19,,,,,,,,19,hotspot,,0,intermittent,tier2,,,,,,,,,,,,,,,,,,"Test: runtime/cds/appcds/dynamicArchive/JFRDynamicCDS.java	

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S14416/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fdc8091a-cbef-4a20-a1a8-2734bdeacf60/runs/511e6326-3570-4d99-bcfc-3805b0440edf/workspace/open/src/hotspot/share/jfr/recorder/checkpoint/types/traceid/jfrTraceIdLoadBarrier.inline.hpp:94), pid=80973, tid=39939
#  assert(((((JfrTraceIdBits::load(klass)) & ((JfrTraceIdEpoch::this_epoch_method_and_class_bits()))) != 0))) failed: invariant
#
# JRE version: Java(TM) SE Runtime Environment (19.0+8) (fastdebug build 19-ea+8-388)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+8-388, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Core dump will be written. Default location: core.80973
#
# JFR recording file will be written. Location: /System/Volumes/Data/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S16843/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/47cffc4c-91af-44a3-8c71-cd82fa17b906/runs/77ebb5c7-c062-429a-b41a-0609f3de168b/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/1/hs_err_pid80973.jfr
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp

---------------  T H R E A D  ---------------

Current thread (0x000000012b03c210):  JavaThread ""C2 CompilerThread1"" daemon [_thread_in_native, id=39939, stack(0x0000000172130000,0x0000000172333000)]


Current CompileTask:
C2:   1138 1187       4       jdk.internal.org.objectweb.asm.SymbolTable::put (150 bytes)

Stack: [0x0000000172130000,0x0000000172333000],  sp=0x00000001723323d0,  free space=2056k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x10bdb80]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x5d8
V  [libjvm.dylib+0x10be2b8]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40
V  [libjvm.dylib+0x5b3554]  report_vm_error(char const*, int, char const*, char const*, ...)+0x80
V  [libjvm.dylib+0xecdf68]  JfrTraceIdLoadBarrier::load(Klass const*, Method const*)+0x178
V  [libjvm.dylib+0x58bef0]  void EventCompilation::writeData<EventWriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> > >(EventWriterHost<EncoderHost<BigEndianEncoderImpl, BigEndianEncoderImpl>, EncoderHost<Varint128EncoderImpl, BigEndianEncoderImpl>, MemoryWriterHost<Adapter<JfrFlush>, StackObj, ExclusiveAccessAssert> >&)+0x74
V  [libjvm.dylib+0x58bb80]  JfrEvent<EventCompilation>::write_sized_event(JfrBuffer*, Thread*, JfrThreadLocal*, bool)+0x1a0
V  [libjvm.dylib+0x58b990]  JfrEvent<EventCompilation>::write_event()+0xac
V  [libjvm.dylib+0x58b1a0]  JfrEvent<EventCompilation>::commit()+0x64
V  [libjvm.dylib+0x579440]  post_compilation_event(EventCompilation&, CompileTask*)+0xf4
V  [libjvm.dylib+0x578508]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x70c
V  [libjvm.dylib+0x577c24]  CompileBroker::compiler_thread_loop()+0x29c
V  [libjvm.dylib+0x10195d0]  JavaThread::thread_main_inner()+0x254
V  [libjvm.dylib+0x1016814]  Thread::call_run()+0x21c
V  [libjvm.dylib+0xdc92f4]  thread_native_entry(Thread*)+0x160
C  [libsystem_pthread.dylib+0x7240]  _pthread_start+0x94",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277948,JDK-8303357,,,,,,,,,,,JDK-8233111,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2vu8z:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-05-16 03:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8724
Date: 2022-05-16 10:17:42 +0000;;;","2022-05-18 02:08;dukebot;Changeset: d936c302
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2022-05-18 09:06:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d936c3024acf428df6d1fb3064a1d8aa5038d277
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
macos-Aarch64 SEGV in frame::sender_for_compiled_frame after JDK-8277948,JDK-8280843,5067289,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,ddong,dholmes,dholmes,2022-01-27 18:43,2022-06-15 12:08,2023-10-01 09:56,2022-01-28 14:53,19,,,,,,,,19,hotspot,,0,regression,tier1,tier2,tier3,,,,,,,,,,,,,,,,"Test: compiler/regalloc/TestC2IntPressure.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000000109ebd418, pid=7520, tid=8451
#
# JRE version: Java(TM) SE Runtime Environment (19.0+8) (fastdebug build 19-ea+8-388)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+8-388, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Problematic frame:
# V  [libjvm.dylib+0x6bd418]  frame::sender_for_compiled_frame(RegisterMap*) const+0xa4
#
# Core dump will be written. Default location: core.7520
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp

---------------  T H R E A D  ---------------

Current thread (0x0000000127809a10):  JavaThread ""main"" [_thread_in_vm, id=8451, stack(0x000000016af14000,0x000000016b117000)]

Stack: [0x000000016af14000,0x000000016b117000],  sp=0x000000016b114320,  free space=2048k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x6bd418]  frame::sender_for_compiled_frame(RegisterMap*) const+0xa4
V  [libjvm.dylib+0x6bc858]  frame::sender(RegisterMap*) const+0x18
V  [libjvm.dylib+0xec47dc]  SharedRuntime::resolve_sub_helper(bool, bool, JavaThread*)+0x78
V  [libjvm.dylib+0xec45fc]  SharedRuntime::resolve_helper(bool, bool, JavaThread*)+0x50
V  [libjvm.dylib+0xebd064]  SharedRuntime::resolve_opt_virtual_call_C(JavaThread*)+0x258
v  ~RuntimeStub::resolve_opt_virtual_call
J 8 c2 java.lang.String.charAt(I)C java.base (25 bytes) @ 0x0000000112b28960 [0x0000000112b28900+0x0000000000000060]
j  jdk.internal.org.objectweb.asm.ByteVector.putUTF8(Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/ByteVector;+85 java.base
j  jdk.internal.org.objectweb.asm.SymbolTable.addConstantUtf8(Ljava/lang/String;)I+65 java.base
j  jdk.internal.org.objectweb.asm.MethodWriter.<init>(Ljdk/internal/org/objectweb/asm/SymbolTable;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;I)V+61 java.base
j  jdk.internal.org.objectweb.asm.ClassWriter.visitMethod(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/MethodVisitor;+19 java.base
j  java.lang.invoke.InvokerBytecodeGenerator.methodPrologue()V+22 java.base
j  java.lang.invoke.InvokerBytecodeGenerator.addMethod()V+1 java.base
j  java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCodeBytes()[B+6 java.base
j  java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(Ljava/lang/invoke/LambdaForm;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MemberName;+27 java.base
j  java.lang.invoke.LambdaForm.compileToBytecode()V+69 java.base
j  java.lang.invoke.Invokers.invokeHandleForm(Ljava/lang/invoke/MethodType;ZI)Ljava/lang/invoke/LambdaForm;+641 java.base
j  java.lang.invoke.Invokers.methodHandleInvokeLinkerMethod(Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;+144 java.base
j  java.lang.invoke.MethodHandleNatives.linkMethodImpl(Ljava/lang/Class;ILjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;+20 java.base
j  java.lang.invoke.MethodHandleNatives.linkMethod(Ljava/lang/Class;ILjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;+14 java.base
v  ~StubRoutines::call_stub
V  [libjvm.dylib+0x8a0858]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x4cc
V  [libjvm.dylib+0x89fe78]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0xf0
V  [libjvm.dylib+0xfd9dbc]  SystemDictionary::find_method_handle_invoker(Klass*, Symbol*, Symbol*, Klass*, Handle*, JavaThread*)+0x684
V  [libjvm.dylib+0xbd5e70]  LinkResolver::lookup_polymorphic_method(LinkInfo const&, Handle*, JavaThread*)+0x190
V  [libjvm.dylib+0xbdbc5c]  LinkResolver::resolve_handle_call(CallInfo&, LinkInfo const&, JavaThread*)+0xe8
V  [libjvm.dylib+0xbdb338]  LinkResolver::resolve_invokehandle(CallInfo&, constantPoolHandle const&, int, JavaThread*)+0x90
V  [libjvm.dylib+0x894de4]  InterpreterRuntime::resolve_invokehandle(JavaThread*)+0x208
V  [libjvm.dylib+0x89536c]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x274
j  jdk.internal.reflect.MethodHandleIntegerFieldAccessorImpl.getInt(Ljava/lang/Object;)I+11 java.base
j  java.lang.reflect.Field.getInt(Ljava/lang/Object;)I+22 java.base
j  java.lang.invoke.MethodHandleNatives.verifyConstants()Z+48 java.base
j  java.lang.invoke.MethodHandleNatives.<clinit>()V+85 java.base
v  ~StubRoutines::call_stub
V  [libjvm.dylib+0x8a0858]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x4cc
V  [libjvm.dylib+0x86b728]  InstanceKlass::call_class_initializer(JavaThread*)+0x264
V  [libjvm.dylib+0x86a49c]  InstanceKlass::initialize_impl(JavaThread*)+0x894
V  [libjvm.dylib+0x101ff4c]  Threads::initialize_jsr292_core_classes(JavaThread*)+0x12c
V  [libjvm.dylib+0x10207e4]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x880
V  [libjvm.dylib+0x977124]  JNI_CreateJavaVM+0xa8
C  [libjli.dylib+0x4728]  JavaMain+0x104
C  [libjli.dylib+0x72f4]  ThreadJavaMain+0xc
C  [libsystem_pthread.dylib+0x7878]  _pthread_start+0x140",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277948,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2vu8r:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-01-27 18:55;dholmes;Giving the timing and the platform it is quite possible this crash has also been caused by the changes in JDK-8277948.;;;","2022-01-27 20:42;ddong;I will take a look at this.;;;","2022-01-27 23:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7260
Date: 2022-01-28 07:41:21 +0000;;;","2022-01-28 14:53;roboduke;Changeset: 91391598
Author:    Denghui Dong <ddong@openjdk.org>
Date:      2022-01-28 22:52:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/91391598989c70c98b9400997df4f9177d3e576f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Access violation in ciTypeFlow::profiled_count,JDK-8280842,5067288,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,dholmes,dholmes,2022-01-27 18:34,2022-02-07 13:07,2023-10-01 09:56,2022-02-01 23:37,19,,,,,,,,19,hotspot,,0,c2,intermittent,oracle-triage-11,oracle-triage-17,oracle-triage-19,regression,tier2,,,,,,,,,,,,,"Test:  javax/xml/crypto/dsig/GenerationTests.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007ff84b2088a1, pid=4060, tid=18948
#
# JRE version: Java(TM) SE Runtime Environment (19.0+8) (build 19-ea+8-385)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (19-ea+8-385, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Problematic frame:
# V  [jvm.dll+0x1f88a1]  ciTypeFlow::profiled_count+0x6

---------------  T H R E A D  ---------------

Current thread (0x000002d74c256350):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=18948, stack(0x000000dbd6300000,0x000000dbd6400000)]


Current CompileTask:
C2:  64718 8602 % !   4       sun.net.httpserver.ServerImpl$Dispatcher::run @ 80 (551 bytes)

Stack: [0x000000dbd6300000,0x000000dbd6400000],  sp=0x000000dbd63fd630,  free space=1013k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x1f88a1]  ciTypeFlow::profiled_count+0x61  (ciTypeFlow.cpp:2467)
V  [jvm.dll+0x1f551f]  ciTypeFlow::build_loop_tree+0x1bf  (ciTypeFlow.cpp:2644)
V  [jvm.dll+0x1f696b]  ciTypeFlow::df_flow_types+0x32b  (ciTypeFlow.cpp:2786)
V  [jvm.dll+0x1f77d1]  ciTypeFlow::flow_types+0x2c1  (ciTypeFlow.cpp:2822)
V  [jvm.dll+0x1f6ace]  ciTypeFlow::do_flow+0xe  (ciTypeFlow.cpp:2983)
V  [jvm.dll+0x1e6a3a]  ciMethod::get_osr_flow_analysis+0x7a  (ciMethod.cpp:354)
V  [jvm.dll+0x6aa168]  Parse::Parse+0x388  (parse1.cpp:505)
V  [jvm.dll+0x1be75c]  ParseGenerator::generate+0x8c  (callGenerator.cpp:103)
V  [jvm.dll+0x230703]  Compile::Compile+0x9e3  (compile.cpp:739)
V  [jvm.dll+0x1bb5b1]  C2Compiler::compile_method+0xc1  (c2compiler.cpp:115)
V  [jvm.dll+0x24032a]  CompileBroker::invoke_compiler_on_method+0x77a  (compileBroker.cpp:2293)
V  [jvm.dll+0x23e615]  CompileBroker::compiler_thread_loop+0x265  (compileBroker.cpp:1967)
V  [jvm.dll+0x7aa4e1]  JavaThread::run+0x131  (thread.cpp:1278)
V  [jvm.dll+0x7a493a]  Thread::call_run+0x8a  (thread.cpp:366)
V  [jvm.dll+0x69bd60]  thread_native_entry+0x80  (os_windows.cpp:544)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]


siginfo: EXCEPTION_ACCESS_VIOLATION (0xc0000005), reading address 0x0000000000000000",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278518,JDK-8281222,,,,,"2022-01-27 23:13;thartmann;hs_err_pid4060.log;https://bugs.openjdk.org/secure/attachment/97762/hs_err_pid4060.log","2022-01-27 23:13;thartmann;replay_pid4060.log;https://bugs.openjdk.org/secure/attachment/97761/replay_pid4060.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vu8j:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-27 23:11;thartmann;Code was just introduced by JDK-8278518.;;;","2022-01-27 23:12;thartmann;Roland, could you please have a look?;;;","2022-01-27 23:16;thartmann;ILW = Crash during C2 compilation, intermittent with single test, no known workaround but disable compilation of affected method = HLM = P3;;;","2022-02-01 01:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7298
Date: 2022-02-01 09:47:28 +0000;;;","2022-02-01 23:37;roboduke;Changeset: 97af3230
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-02-02 07:35:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/97af32304101397bb33cbbd1e35fd9124f9e2311
;;;","2022-02-03 00:55;alanb;I'm trying to sync up the loom repo to jdk-19+8 (which has the commit for JDK-8280842) and running into something in this same area. So far only seeing it with the test java/foreign/TestSegmentCopy.java where the compiler broker hits this assert:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/open/src/hotspot/share/utilities/growableArray.hpp:145), pid=28444, tid=29083
#  assert(0 <= i && i < _len) failed: illegal index
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (fastdebug build 19-internal+0-2022-02-03-0748181.alan.bateman.loom-merge)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-internal+0-2022-02-03-0748181.alan.bateman.loom-merge, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x97caca]  GrowableArrayView<ciTypeFlow::Block*>::at(int)+0x3a
#

:

Current CompileTask:
C2:  10015 1829 % !   4       org.testng.internal.Invoker::invokeTestMethods @ 612 (1101 bytes)

Stack: [0x00007ffa316f7000,0x00007ffa317f8000],  sp=0x00007ffa317f46c0,  free space=1013k
Thread 0x00007ffa00e49f90 [29083]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x97caca]  GrowableArrayView<ciTypeFlow::Block*>::at(int)+0x3a
V  [libjvm.so+0x974fba]  ciTypeFlow::profiled_count(ciTypeFlow::Loop*)+0x1aa
V  [libjvm.so+0x97577b]  ciTypeFlow::Loop::sorted_merge(ciTypeFlow::Loop*)+0x26b
V  [libjvm.so+0x978dac]  ciTypeFlow::build_loop_tree(ciTypeFlow::Block*)+0x1bc
V  [libjvm.so+0x97a702]  ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*)+0x612
V  [libjvm.so+0x97ac4e]  ciTypeFlow::flow_types()+0x41e
V  [libjvm.so+0x97b556]  ciTypeFlow::do_flow()+0x26
V  [libjvm.so+0x929251]  ciMethod::get_osr_flow_analysis(int)+0x51
V  [libjvm.so+0x14d65d0]  Parse::Parse(JVMState*, ciMethod*, float)+0x820
V  [libjvm.so+0x8a1845]  ParseGenerator::generate(JVMState*)+0xd5
V  [libjvm.so+0xa13fc2]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xd82
V  [libjvm.so+0x89ef68]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x178
V  [libjvm.so+0xa21cd8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xbc8
V  [libjvm.so+0xa22818]  CompileBroker::compiler_thread_loop()+0x408
V  [libjvm.so+0x1745e3a]  JavaThread::thread_main_inner()+0x1ea
V  [libjvm.so+0x174d1a0]  Thread::call_run()+0x100
V  [libjvm.so+0x148c9d4]  thread_native_entry(Thread*)+0x104

I may have to create a follow-on issue to track this.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update SQLite to 3.37.2,JDK-8280841,5067287,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hmeda,vdyakov,vdyakov,2022-01-27 18:30,2022-10-20 11:41,2023-10-01 09:56,2022-02-10 22:42,8u341,jfx19,,,,,,,jfx19,javafx,,0,3rdparty,noreg-other,sn_111,,,,,,,,,,,,,,,,,"We currently use SQLite version 3.32.3. It's time to update to the latest stable release version 3.37.2 released on 2022-01-06
https://www.sqlite.org/index.html
",,,,,,,,,,JDK-8285852,JDK-8281653,JDK-8285942,JDK-8290413,,,,,,,,,,,,,JDK-8275245,,,JDK-8295755,,JDK-8247963,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vu8b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-02-07 02:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/727
Date: 2022-02-04 12:53:51 +0000;;;","2022-02-07 02:57;hmeda;Downloaded  the latest stable release version from https://www.sqlite.org/download.html corresponding to sqlite-amalgamation-3370200.zip.
Firstly, Compared the existing version of the library and the release version 3.32.3 and verified that there are no workspace specific changes.
Updated the files from the latest amalgamation.
Verified the build and tested for sanity and unity tests.
No failures are observed.;;;","2022-02-10 22:42;roboduke;Changeset: 6b7b463c
Author:    Hima Bindu Meda <hima.bindu.meda@oracle.com>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2022-02-11 06:40:57 +0000
URL:       https://git.openjdk.java.net/jfx/commit/6b7b463cd2286658ad7d236824ded9b1020329e7
;;;","2022-04-28 10:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/85
Date: 2022-04-28 17:04:37 +0000;;;","2022-04-29 10:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/42
Date: 2022-04-29 16:59:33 +0000;;;","2022-07-16 11:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/833
Date: 2022-07-16 18:44:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update libFFI to 3.4.2,JDK-8280840,5067285,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,vdyakov,vdyakov,2022-01-27 15:12,2023-04-18 12:48,2023-10-01 09:56,2022-03-07 17:38,8u341,jfx19,,,,,,,jfx19,javafx,,0,3rdparty,sn_112,sn_113,,,,,,,,,,,,,,,,,"Need to upgrade to the latest libFFI 3.4.2 (Released on June 28, 2021)
https://github.com/libffi/libffi/wiki",,,,,,,,,,JDK-8286004,JDK-8282914,JDK-8286640,,,,,,,,,,,,,,JDK-8252983,,,JDK-8306328,,JDK-8239095,,,,,JDK-8257895,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vu7v:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2022-02-23 18:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/738
Date: 2022-02-19 07:45:43 +0000;;;","2022-03-07 17:38;dukebot;Changeset: 1beb3235
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-03-08 01:35:36 +0000
URL:       https://git.openjdk.java.net/jfx/commit/1beb3235223452929ec951ee18dd30a5345307cf
;;;","2022-04-30 06:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/93
Date: 2022-04-30 13:30:49 +0000;;;","2022-05-09 14:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/53
Date: 2022-05-09 21:05:17 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/javadoc/tool/CheckManPageOptions.java depends on source hierarchy,JDK-8280835,5067279,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-01-27 13:52,2022-06-22 09:10,2023-10-01 09:56,2022-01-27 14:01,18,,,,,,,,19,tools,,0,noreg-self,,,,,,,,,,,,,,,,,,,"jdk/javadoc/tool/CheckManPageOptions.java test fails if the JDK source is unavailable. 

The test is trying to use a file from JDK sources. For that, it is going up the file hierarchy starting from test.dir env variable in an attempt to find ""src"" directory. If no source directory available, the test fails.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279486,,,,,,,,,,,,,,,JDK-8288989,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vu6j:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,Verified,,"2022-01-27 14:01;roboduke;Changeset: 6d242e40
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-01-27 21:58:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6d242e406539e97bdd4da82c478db901942b770f
;;;","2022-01-27 14:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7240
Date: 2022-01-27 01:31:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clean up bug8033699 and bug8075609.java tests: regtesthelpers aren't used,JDK-8280820,5067257,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-01-27 09:20,2022-03-30 03:29,2023-10-01 09:56,2022-02-09 11:14,7u91,8u60,9,,,,,,19,client-libs,,0,cssn22_02_01,noreg-cleanup,sustaining,,,,,,,,,,,,,,,,,"Both javax/swing/JRadioButton/8075609/bug8075609.java and javax/swing/JRadioButton/8075609/bug8075609.java tests do not use regtesthelpers, so the reference to the library and building Util class can be removed from the test description.

When the bug8075609.java test disposes of the frame, it accesses it from the main thread.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8075609,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b16,8u60,,,,,,,"0|i2vu1n:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-01-27 09:23;aivanov;This test should also iterate over all the available Look and Feels: JDK-8280821;;;","2022-02-02 05:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7322
Date: 2022-02-02 13:38:36 +0000;;;","2022-02-09 11:14;roboduke;Changeset: fd8a3dcc
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-02-09 19:12:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fd8a3dcc52dc5d6b62edd83eacef5934f6294e80
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
С2: assert(false) failed: cyclic dependency prevents range check elimination,JDK-8280799,5067227,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,shade,shade,2022-01-27 04:27,2023-08-09 06:00,2023-10-01 09:56,2022-02-14 00:38,11.0.14,17,18,19,,,,,19,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-19,regression,,,,,,,,,,"Reliably reproduces in 11u after JDK-8272574 backport, but maybe it affects mainline too:

$ CONF=linux-x86_64-normal-server-fastdebug make run-test TEST=jdk/javadoc/doclet/ TEST_VM_OPTS=""-XX:+UseParallelGC""

#  Internal Error (/home/shade/trunks/shipilev-jdk11u-dev/src/hotspot/share/opto/loopPredicate.cpp:675), pid=116243, tid=119644
#  assert(false) failed: cyclic dependency prevents range check elimination, idx: offset 6068, offset_ctrl 2894, predicate_proj 2892


Current CompileTask:
C2:  37659 6256       4       jdk.javadoc.internal.doclets.toolkit.util.DocLink::relativizeAgainst (90 bytes)

Stack: [0x00007f1b557e0000,0x00007f1b558e1000],  sp=0x00007f1b558d9f40,  free space=999k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1b3a43a]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x1ca
V  [libjvm.so+0x1b3b5a5]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x35
V  [libjvm.so+0xbfb55a]  report_vm_error(char const*, int, char const*, char const*, ...)+0x10a
V  [libjvm.so+0x13a3ba9]  IdealLoopTree::is_range_check_if(IfNode*, PhaseIdealLoop*, Invariance&, ProjNode*) const [clone .part.0]+0x3c9
V  [libjvm.so+0x13a697e]  PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&, Deoptimization::DeoptReason)+0x37e
V  [libjvm.so+0x13a845e]  PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.0]+0x50e
V  [libjvm.so+0x13a92a9]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x109
V  [libjvm.so+0x13a91e9]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x49
V  [libjvm.so+0x13a91e9]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x49
V  [libjvm.so+0x13a91e9]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x49
V  [libjvm.so+0x13a91e9]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x49
V  [libjvm.so+0x13ece96]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x1266
V  [libjvm.so+0xb0d7f7]  Compile::optimize_loops(int&, PhaseIterGVN&, LoopOptsMode) [clone .part.0]+0x307
V  [libjvm.so+0xb11dcf]  Compile::Optimize()+0xd0f
V  [libjvm.so+0xb13ddc]  Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1aec
V  [libjvm.so+0x8ee144]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)+0x334
V  [libjvm.so+0xb246f0]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x540
V  [libjvm.so+0xb25d98]  CompileBroker::compiler_thread_loop()+0x678
V  [libjvm.so+0x1a6ebc2]  JavaThread::thread_main_inner()+0x252
V  [libjvm.so+0x1a67dfb]  Thread::call_run()+0x7b
V  [libjvm.so+0x164eb26]  thread_native_entry(Thread*)+0x116



==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR   
>> jtreg:test/langtools/jdk/javadoc/doclet             187   177     0    10 <<
==============================
TEST FAILURE
",,,,,,,,,,JDK-8286166,JDK-8284249,JDK-8283916,JDK-8285887,JDK-8284147,,,,,,,,,,,,,,,,,,,,,,JDK-8272574,JDK-8282592,JDK-8314024,,,,,,,,,,JDK-8283834,JDK-8281811,JDK-8291919,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vtuz:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-28 06:26;roland;I could reproduce a similar failure with mainline (custom test case) and the same fix works for mainline and the 11 failure.;;;","2022-01-28 15:16;dlong;ILW = missing optimization/assert in debug build; at least 1 reproducer; no workaround = MMH = P3;;;","2022-02-02 02:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7319
Date: 2022-02-02 10:38:11 +0000;;;","2022-02-14 00:38;roboduke;Changeset: 1ef45c5b
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-02-14 08:35:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1ef45c5bbdeb4e1ca65c6d8f3ac1568a6951f3a7
;;;","2022-03-29 08:58;thartmann;Fix Request (JDK 18u)
Fixes an assert in C2. The fix is medium risk and applies cleanly. Already tested and about to be backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 09:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/74
Date: 2022-03-29 15:57:37 +0000;;;","2022-03-30 03:25;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Test has passed.;;;","2022-03-30 03:33;goetz;[17u] There seem to be follow up fixes. Are they needed? Should we wait a bit with this change?;;;","2022-03-30 03:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/310
Date: 2022-03-30 10:27:46 +0000;;;","2022-03-31 07:31;mdoerr;I've created dependent PRs for the related fixes. (The 4th one is already in 17.0.2.) Note that Oracle will probably ignore the Shenandoah fix for 17.0.4-oracle.;;;","2022-04-11 04:40;roland;Fix Request (11u):

I'd like to backport this change because we hit that failure in our testing (the bug was actually filed against 11 initially). It applies cleanly. tier1 test passes.
I'll backport JDK-8281811 and JDK-8283834 as well. JDK-8282592 is not directly related so I'll skip that backport at least for now.;;;","2022-04-13 04:06;clanger;[~roland], I think this backport is viable for 11u. However, I'd like to ask you to open the PR(s) before requesting it. Hence, for the time being I'm removing the fix-request label to get the item off the maintainers list until then.;;;","2022-04-13 04:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1035
Date: 2022-04-13 11:11:16 +0000;;;","2022-04-13 04:19;roland;[~clanger] I didn't realize it was required. Done now.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
com.sun.jdi.ObjectReference::setValue spec should prohibit any final field modification,JDK-8280798,5067226,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,amenkov,amenkov,2022-01-27 04:12,2022-12-08 15:30,2023-10-01 09:56,2022-12-02 12:19,,,,,,,,,20,core-svc,,0,release-note=yes,,,,,,,,,,,,,,,,,,,"com.sun.jdi.ObjectReference::setValue spec says:
--------
Sets the value of a given instance or static field in this object. The Field must be valid for this ObjectReference; that is, it must be from the mirrored object's class or a superclass of that class. If static, the field must not be final.
-------
""If static"" is confusing here.
The method throws  IllegalArgumentException (""Cannot set value of final field"") for both static and instance final fields.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281652,,,,,,,,JDK-8247868,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vtur:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-02-14 10:06;amenkov;Discovered that Eclipse JDI implementation allows to modify final variables:
https://bugs.eclipse.org/bugs/show_bug.cgi?id=94223
But as this can be quite unsafe the debugger shows warning dialog before changing final value:
https://bugs.eclipse.org/bugs/show_bug.cgi?id=577564;;;","2022-11-21 15:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11279
Date: 2022-11-21 22:58:54 +0000;;;","2022-11-21 18:06;dholmes;I would have expected that a debugger should, and needs to, be able to modify final fields - naturally with caveats/warnings. I think the restriction on ""static final"" is more to do with compile-time constants than anything as the debugger could not propagate such a change.;;;","2022-11-22 13:29;amenkov;JDI cannot produce any warnings, so each debugger would need to check for this specific case and produce the warning.

I'd say ability to modify final instance fields and inability to change final statics is JVM implementation details.

To me the main reason to update the spec instead of fix of implement to allow modify instance final fields is not safety - it may cause unpredictable effects in other part of debugee.
https://bugs.eclipse.org/bugs/show_bug.cgi?id=577564 describes a real case when change of final field caused ""impossible"" application behavior and this took a lot of time to understand than can happen.
;;;","2022-12-02 12:19;dukebot;Changeset: 2821fa98
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2022-12-02 20:16:51 +0000
URL:       https://git.openjdk.org/jdk/commit/2821fa9883cc9687b53e3bb5655732a614cff8fc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure on Solaris after 8262392,JDK-8280786,5067214,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dcherepanov,dcherepanov,dcherepanov,2022-01-27 02:10,2022-02-09 00:12,2023-10-01 09:56,2022-01-27 09:19,11.0.13,,,,,,,,11.0.15,client-libs,,0,17-na,18-na,19-na,hgupdate-sync,jdk11u-critical-request,jdk11u-critical-yes,jdk11u-fix-request,jdk11u-fix-yes,regression,,,,,,,,,,,"Backport of JDK-8262392 to jdk11u caused build failure on Solaris

""./src/java.desktop/unix/native/common/java2d/opengl/J2D_GL/glxext.h"", line 706: error: typedef redeclared: int64_t (E_TYPEDEF_REDECLARED)
""./src/java.desktop/unix/native/common/java2d/opengl/J2D_GL/glxext.h"", line 707: error: typedef redeclared: uint64_t (E_TYPEDEF_REDECLARED)
",,,,,,,,,,JDK-8281383,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262392,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vts3:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-01-27 02:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/799
Date: 2022-01-27 10:18:22 +0000;;;","2022-01-27 03:01;dcherepanov;Fix request (11u)

The patch fixes Solaris build. Risk is minimal.;;;","2022-01-27 08:23;sgehwolf;Approved. Not applicable to later JDKs due to solaris support removal.;;;","2022-01-27 09:19;roboduke;Changeset: 6837e148
Author:    Dmitry Cherepanov <dcherepanov@openjdk.org>
Date:      2022-01-27 17:18:15 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/6837e1484bbeda710cde3763f0b0edb9c02351c2
;;;","2022-02-07 02:53;goetz;Critical Fix request (11u)

We want to bring this to jdk11u; 11.0.14.1 see http://mail.openjdk.java.net/pipermail/jdk-updates-dev/2022-February/011862.html

Applies clean.;;;","2022-02-07 02:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u/pull/27
Date: 2022-02-07 10:49:34 +0000;;;","2022-02-09 00:12;roboduke;Changeset: 6837e148
Author:    Dmitry Cherepanov <dcherepanov@openjdk.org>
Date:      2022-01-27 17:18:15 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/6837e1484bbeda710cde3763f0b0edb9c02351c2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"serviceability/sa/ClhsdbThreadContext.java  sometimes fails with 'Thread ""SteadyStateThread""' missing from stdout/stderr ",JDK-8280770,5067198,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2022-01-26 22:15,2022-10-27 15:56,2023-10-01 09:56,2022-02-01 08:00,19,,,,,,,,19,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,,,"Although it fails because it can't find SteadyStateThread in the output, the real issue is that it failed to dump the threaddcontext for the SteadyStateThread:

 + threadcontext -v 23
Couldn't find thread 23

The SteadyStateThread was determined to be thread 23 based on the earlier ""threadcontext -a"" output. It's unclear why it failed to find it. This is a new test (and feature).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8250801,,,,,,,,,,,,JDK-8280971,JDK-8283010,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vtoj:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-01-27 11:58;cjplummer;The same SA code is used for threadcontext whether you specify -a or a tid:

                String id = t.nextToken();
                Threads threads = VM.getVM().getThreads();
                boolean all = id.equals(""-a"");
                for (int i = 0; i < threads.getNumberOfThreads(); i++) {
                    JavaThread thread = threads.getJavaThreadAt(i);
                    ByteArrayOutputStream bos = new ByteArrayOutputStream();
                    thread.printThreadIDOn(new PrintStream(bos));
                    if (all || bos.toString().equals(id)) {
                        out.format(""Thread \""%s\"" id=%s Address=%s\n"",
                                   thread.getThreadName(), bos.toString(), thread.getAddress());
                        thread.printThreadContextOn(out, verbose);
                        out.println("" "");
                        if (!all) return;
                    }
                }
                if (!all) {
                    out.println(""Couldn't find thread \"""" + id + ""\"""");
                }

The test executes threadcontext 3 times:

   threadcontext -a
   threadcontext -a -v
   threadcontext <tid>

<tid> is the tid of the SteadyStateThread, which is gleaned from the output of the ""treadcontext -a -v"" command. Since the target VM is allowed to run between each command, it's possible that the same set of threads might not be printed each time, but the SteadyStateThread should not be exiting.

I modified the above code to always print out the current thread it is looking at. In a passing case for the ""threadcontext <tid>"" command, you will see something like:

hsdb> + threadcontext -v 23
4 11 12 13 14 15 16 17 18 19 20 22 23 Thread ""SteadyStateThread"" id=23 Address=0x0000019c1d845ec0

In one failing case I looked at I saw:

hsdb> + threadcontext -v 23
1 8 9 10 11 12 13 14 15 16 17 19 20 Couldn't find thread ""23""

Note that thread 22 is also missing. It is the Common-Cleaner thread and was included in the previous ""threadcontext -a -v"" output. I don't think either of these threads have actually gone away, so it looks like for some reason either VM.getVM().getThreads() is not returnning all the threads, or threads.getNumberOfThreads() is not including the full count of threads.
;;;","2022-01-27 13:55;cjplummer;Below is first the list of IDs printed by ""threadcontext -a"" followed by the list that ""threadcontext <id>"" iterated over (I added the spaces to make it easier to see the difference).

4        11 12 13 14 15 16 17 18 19 20 22 23
1 8 9 10 11 12 13 14 15 16 17 19 20

So there have been changes. 8, 9, and 10 are added and 18, 22, and 23 have been removed. I then modified the test to dump the name and ID of every thread when the error happens. This is what I got.

Thread ""main"" id=1 Address=0x000001dc2c238690
Thread ""Reference Handler"" id=8 Address=0x000001dc4b48a0f0
Thread ""Finalizer"" id=9 Address=0x000001dc4b48e460
Thread ""Signal Dispatcher"" id=10 Address=0x000001dc4b4c7600
Thread ""Attach Listener"" id=11 Address=0x000001dc4b4c8fc0
Thread ""Service Thread"" id=12 Address=0x000001dc4b4ca280
Thread ""Monitor Deflation Thread"" id=13 Address=0x000001dc4b4ceb00
Thread ""C2 CompilerThread0"" id=14 Address=0x000001dc4b4d28d0
Thread ""C1 CompilerThread0"" id=15 Address=0x000001dc4b4d9d70
Thread ""Sweeper thread"" id=16 Address=0x000001dc4b4e4be0
Thread ""Notification Thread"" id=17 Address=0x000001dc508fdd20
Thread ""Common-Cleaner"" id=19 Address=0x000001dc51c0dfa0
Thread ""SteadyStateThread"" id=20 Address=0x000001dc51749420

When I compare this list with what got printed by ""threadcontext -a"", I can see that the list is the same, but IDs have changed. It's the same set of threads and in the same order, but with different IDs.;;;","2022-01-27 14:26;cjplummer;My guess is that every time you re-attach the ID can change. The ID being used is what is known by MS as the ""engine thread id"". There is also the ""system thread id"", which is what SA stashes away as the sysId when first getting the list of threads. sysId is the same as OSThread::_thread_id. SA the maps the sysID to an ""id"", which is what MS calls the ""engine thread id"", by calling the MS GetThreadIdBySystemId API:

class WindbgAMD64Thread implements ThreadProxy {
  private WindbgDebugger debugger;
  private long           sysId; // SystemID for Windows thread, stored in OSThread::_thread_id
  private boolean        gotID;
  private long           id;    // ThreadID for Windows thread,  returned by GetThreadIdBySystemId

This is the id that gets displayed when dumping threads, and the one that is specified when using ""threadcontext <id>"". The follow web page discusses the ""engine thread id"":

https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/controlling-threads-and-processes

Although it's not clearly stated, I seems that the ""enging thread id"" might not be the same each time the application is stopped by the debugger.

It's hard to write clhsdb tests code that attaches, executes a clhsdb command, looks at the output, and then issues another clhsdb command based on what is seen in the output. The way all the tests currently work is they attach, run a clhsdb command, detach, and return the output. This is all done by making a single call into ClhsdbLauncher. So when multiple clhsdb commands are executed, the state of the target process is changing in between.

My suggestion is to just not bother with the ""threadcontext <tid>"" testing when run on windows. I'm not seeing this issue on any other platform.;;;","2022-01-27 20:08;cjplummer;One other thing to not that I can't explain is that I only see this issue when using -Xcomp plus some other options. The two that are reproducing it are:

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:+DeoptimizeALot
-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:+VerifyOops

Just using -Xcomp does not seem to reproduce the issue. Possibly different threads (that are not JavaThreads) get spun up or exit based on these option settings, and that causes the renumbering of some threads.;;;","2022-01-27 23:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7259
Date: 2022-01-28 07:34:21 +0000;;;","2022-02-01 08:00;roboduke;Changeset: 5080e815
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-02-01 15:59:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5080e815b4385751734054b5f889c4d89cfcdeb4
;;;","2022-02-03 08:52;dcubed;This fix is integrated in jdk-19+8-427.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
-XX:ArchiveClassesAtExit does not archive BoundMethodHandle$Species classes,JDK-8280767,5067194,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,minqi,iklam,iklam,2022-01-26 21:17,2022-02-09 16:13,2023-10-01 09:56,2022-02-04 11:22,19,,,,,,,,19,hotspot,,0,cds,lambda,,,,,,,,,,,,,,,,,,"Please download the attached CDSLambdaInvokerTestDyn.sh and CDSLambdaInvokerTest.java, and run:

$ bash CDSLambdaInvokerTestDyn.sh $TESTBED
+ mybuild/images/jdk/bin/javac CDSLambdaInvokerTest.java
+ mybuild/images/jdk/bin/jar cf CDSLambdaInvokerTest.jar CDSLambdaInvokerTest.class
+ mybuild/images/jdk/bin/java -cp CDSLambdaInvokerTest.jar -XX:ArchiveClassesAtExit=CDSLambdaInvokerTestDyn.jsa -Xlog:cds+class=debug CDSLambdaInvokerTest
+ cat
+ mybuild/images/jdk/bin/java -XX:SharedArchiveFile=CDSLambdaInvokerTestDyn.jsa -cp CDSLambdaInvokerTest.jar -Xlog:class+load CDSLambdaInvokerTest
+ cat
============ checking dumping status ==================================================
***** FAILED: BoundMethodHandle$Species_FL should be archived
============ checking if lambda form classes/methods are loaded from CDS ==============
***** FAILED: BoundMethodHandle$Species_FL should be loaded from top archive


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278325,,,,,,,,,,,,,,,,,,"2022-01-28 10:51;iklam;CDSLambdaInvokerTest.java;https://bugs.openjdk.org/secure/attachment/97774/CDSLambdaInvokerTest.java","2022-01-28 10:51;iklam;CDSLambdaInvokerTestDyn.sh;https://bugs.openjdk.org/secure/attachment/97773/CDSLambdaInvokerTestDyn.sh",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vtnn:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-28 12:56;minqi;The dynamic dump does not archive the speices lambda classes due to following code:
JVM_LogLambdaFormInvoker:
    if (DynamicDumpSharedSpaces) {
      // Note: LambdaFormInvokers::append_filtered and LambdaFormInvokers::append take same format which is not
      // same as below the print format. The line does not include LAMBDA_FORM_TAG.
      LambdaFormInvokers::append_filtered(os::strdup((const char*)c_line, mtInternal));
    }
Here, we only append the ones in filtering list. It should not do this here. The filtering only for storing the LF(SPECIES)_RESOLVE lines in static dump.;;;","2022-02-01 11:06;mseledtsov;ILW = MLM = P4;;;","2022-02-02 18:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7329
Date: 2022-02-02 23:26:32 +0000;;;","2022-02-04 11:22;roboduke;Changeset: 8e4ef818
Author:    Yumin Qi <minqi@openjdk.org>
Date:      2022-02-04 19:20:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8e4ef818a90de35ae75e7f82a780653d623bb29c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UseCompressedOops should be set after limit_heap_by_allocatable_memory,JDK-8280761,5067188,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ayang,iklam,iklam,2022-01-26 17:16,2022-04-20 23:30,2023-10-01 09:56,2022-04-19 05:55,19,,,,,,,,19,hotspot,,0,ergonomics,,,,,,,,,,,,,,,,,,,"""ulimit -v"" can limit the amount of virtual memory available to the JVM. Therefore, Arguments::set_heap_size() calls limit_heap_by_allocatable_memory() to reduce the max heap size to respect this limit.

https://github.com/iklam/jdk/blame/a4d201909c8919b7465dee72594d718252c6344e/src/hotspot/share/runtime/arguments.cpp#L1755

However, UseCompressedOops is set before limit_heap_by_allocatable_memory(). As a result, even if the final heap size is small enough, the JVM will still disable UseCompressedOops, and thus use more memory for oop pointers than necesary.

In the following two test cases, the ergonomics code choose the same max heap size (5121245184), but UseCompressedOops is disabled in the second case.

~$ (ulimit -v 10000000; java -Xlog:gc*=debug -XX:MaxRAM=32g -version) 2>&1 | egrep '(Compressed Oops:)|(Maximum)'
[0.023s][debug][gc,heap] Minimum heap 8388608  Initial heap 536870912  Maximum heap 5121245184
[0.027s][info ][gc,init       ] Compressed Oops: Enabled (Zero based)

~$ (ulimit -v 10000000; java -Xlog:gc*=debug -XX:MaxRAM=128g -version) 2>&1 | egrep '(Compressed Oops:)|(Maximum)'
[0.021s][debug][gc,heap] Minimum heap 8388608  Initial heap 2147483648  Maximum heap 5121245184
[0.028s][info ][gc,init       ] Compressed Oops: Disabled
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285011,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vtmb:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-03-24 00:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7938
Date: 2022-03-24 06:52:34 +0000;;;","2022-04-19 05:55;dukebot;Changeset: 8d96ab0f
Author:    KIRIYAMA Takuya <kiriyama.takuya@fujitsu.com>
Committer: Albert Mingkun Yang <ayang@openjdk.org>
Date:      2022-04-19 12:54:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8d96ab0f36d91a54cf7951a159325bd4f6aab41d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"HSDB ""Monitor Cache Dump"" command might throw NPE",JDK-8280743,5067169,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,cjplummer,cjplummer,cjplummer,2022-01-26 12:29,2023-08-28 14:55,2023-10-01 09:56,2023-08-23 12:14,18,19,,,,,,,22,hotspot,,0,noreg-hard,,,,,,,,,,,,,,,,,,,"JDK-8280555 documents a test bug when using ObjectSynchronizer to iterate over all ObjectMonitors. The test code was not protecting against mon.object() being null, and was getting an NPE. While looking for other users of ObjectSynchronizer, I found it is used by the HSDB ""Monitor Cache Dump"" feature. It has a similar bug that can result in an NPE. The code doing the iterating is:

    ObjectMonitor mon;
    while (i.hasNext()) {
      mon = (ObjectMonitor)i.next();
      if (mon.contentions() != 0 || mon.waiters() != 0 || mon.owner() != null) {
        OopHandle object = mon.object();
        if (object == null) {
          dumpMonitor(tty, mon, true);
        } else {
          dumpMonitor(tty, mon, false);
        }
      }
    }

So not only can mon.object() be null, but the code is also checking for it. However, dumpMonitor() is not handling it right. It executes the following code unconditionally:

    OopHandle obj = mon.object();
    Oop oop = heap.newOop(obj);
    tty.println(""  _object: "" + obj + "", a "" + oop.getKlass().getName().asString());

This code will NPE if mon.object() is NULL.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8259008,JDK-8280555,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vti3:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-08-21 12:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15369
Date: 2023-08-21 19:54:59 +0000;;;","2023-08-23 12:14;dukebot;Changeset: 2c60cadf
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-08-23 19:12:35 +0000
URL:       https://git.openjdk.org/jdk/commit/2c60cadfde61363d1f5aefdcf138e039a461c914
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Related to comment inheritance jdk.javadoc cleanup and refactoring,JDK-8280713,5067132,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-01-26 06:58,2022-03-30 04:35,2023-10-01 09:56,2022-03-01 04:09,19,,,,,,,,19,tools,,0,javadoc-inheritance,,,,,,,,,,,,,,,,,,,Explorative refactoring performed while looking into multiple @inheritDoc issues.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281057,,,,,,,,,,,,JDK-8282483,JDK-8283864,JDK-8281376,JDK-8281445,JDK-8282056,JDK-8282311,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vt9v:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-02-24 10:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7233
Date: 2022-01-26 16:20:30 +0000;;;","2022-03-01 04:09;dukebot;Changeset: eff396f3
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-03-01 12:06:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/eff396f397d3c279f9a090adb6ad4e619f24253c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] More issues with C2's arraycopy intrinsic,JDK-8280707,5067126,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2022-01-26 05:46,2022-01-27 23:01,2023-10-01 09:56,2022-01-27 23:01,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c2,lworld,,,,,,,,,,,,,,,,,,"Attached Test.java triggers failures in the matcher and GCM:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla2/open/src/hotspot/share/opto/matcher.cpp:1868), pid=593275, tid=593294
#  assert(m->adr_type() == mach_at) failed: matcher should not change adr type

Current CompileTask:
C2:  19732   26    b  4       Test::test1 (21 bytes)

Stack: [0x00007fd74064d000,0x00007fd74074e000],  sp=0x00007fd740748c10,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x15279e3]  Matcher::ReduceInst(State*, int, Node*&)+0x383
V  [libjvm.so+0x15303ed]  Matcher::match_tree(Node const*)+0x57d
V  [libjvm.so+0x153f63f]  Matcher::xform(Node*, int)+0xf6f
V  [libjvm.so+0x1547058]  Matcher::match()+0x4658
V  [libjvm.so+0xac47cc]  Compile::Code_Gen()+0x9c
V  [libjvm.so+0xad101e]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x174e
V  [libjvm.so+0x8c4176]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x6b6
V  [libjvm.so+0xae1188]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc88
V  [libjvm.so+0xae1f28]  CompileBroker::compiler_thread_loop()+0x648
V  [libjvm.so+0x19f6a0a]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x19fedd0]  Thread::call_run()+0x100
V  [libjvm.so+0x16b6064]  thread_native_entry(Thread*)+0x104



# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla2/open/src/hotspot/share/opto/gcm.cpp:793), pid=595520, tid=595555
#  assert(store != load->find_exact_control(load->in(0))) failed: dependence cycle found

Current CompileTask:
C2:  20778   26    b  4       Test::test2 (11 bytes)

Stack: [0x00007f3ede1c4000,0x00007f3ede2c5000],  sp=0x00007f3ede2bf6a0,  free space=1005k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xe08fea]  PhaseCFG::insert_anti_dependences(Block*, Node*, bool)+0x212a
V  [libjvm.so+0xe0f60b]  PhaseCFG::schedule_late(VectorSet&, Node_Stack&)+0xc7b
V  [libjvm.so+0xe0fe45]  PhaseCFG::global_code_motion()+0x325
V  [libjvm.so+0xe14061]  PhaseCFG::do_global_code_motion()+0x51
V  [libjvm.so+0xac49c3]  Compile::Code_Gen()+0x293
V  [libjvm.so+0xad101e]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x174e
V  [libjvm.so+0x8c4176]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x6b6
V  [libjvm.so+0xae1188]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc88
V  [libjvm.so+0xae1f28]  CompileBroker::compiler_thread_loop()+0x648
V  [libjvm.so+0x19f6a0a]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x19fedd0]  Thread::call_run()+0x100
V  [libjvm.so+0x16b6064]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252506,,,,,,"2022-01-26 05:45;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/97737/Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vt8j:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-27 07:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/620
Date: 2022-01-27 15:15:04 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Rename defaultvalue to aconst_init in tests,JDK-8280704,5067122,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dsimms,dsimms,dsimms,2022-01-26 01:34,2022-01-26 06:09,2023-10-01 09:56,2022-01-26 06:09,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,lworld,,,,,,,,,,,,,,,,,,,"Opcode and semantics are the same, but a rename is still needed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vt7n:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-01-26 02:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/618
Date: 2022-01-26 10:00:02 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CipherCore.doFinal(...) causes potentially massive byte[] allocations during decryption,JDK-8280703,5067121,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sstenzel,sstenzel,sstenzel,2022-01-26 00:47,2023-04-18 00:38,2023-10-01 09:56,2022-01-28 08:46,,,,,,,,,19,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-perf,,,,,,,,,,,,,,,"As announced on the security-dev mailing list, I'd like to (re)introduce a conditional statement that was first introduced in the context of JDK-8253821 and removed in JDK-8253821:

It used to be this [1]:

if (getMode() != GCM_MODE || outputCapacity < estOutSize) {
    // create temporary output buffer if the estimated size is larger
    // than the user-provided buffer.
    internalOutput = new byte[estOutSize];
    offset = 0;
}

The assumption in the original issue was, that only GCM would benefit from working on the original buffer. However, the temporary internal buffer can be avoided altogether if the output buffer is large enough.

Furthermore, the need to copy the results back from the temporary buffer to the output buffer can be circumvented.

The current implementation will _always_ create a temporary buffer, despite the output buffer being sufficient. For every call to `Cipher.doFinal(ByteBuffer, ByteBuffer)` this causes the allocation of a byte[] with the size depending on the supplied ciphertext.

A small test program for showing these allocations is available on [2].

[1] https://github.com/openjdk/jdk/blame/e546ae27ffc6c19ae078a41ab6e1741a104958c1/src/java.base/share/classes/com/sun/crypto/provider/CipherCore.java#L946-L951

[2] https://gist.github.com/overheadhunter/f3969950c0fdbaecaa77c857b2246cc5",,,,,,,,,,JDK-8306217,JDK-8303957,JDK-8305495,JDK-8303205,,,,,,,,,,,,,,,,,,,,,,,JDK-8255557,JDK-8253821,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vt7f:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2022-01-26 02:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7230
Date: 2022-01-26 10:07:01 +0000;;;","2022-01-28 08:46;roboduke;Changeset: 409382ba
Author:    Sebastian Stenzel <sebastian.stenzel@skymatic.de>
Committer: Anthony Scarpino <ascarpino@openjdk.org>
Date:      2022-01-28 16:42:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/409382ba4b43bf48ed0086020dd20641effd35b6
;;;","2023-02-13 14:00;sgibbons;Fix request 17u.

This fix gives a 3x performance improvement in AES-CTR decryption.

Risk is very low.  Tested with tier1 and benchmark.;;;","2023-02-13 14:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1169
Date: 2023-02-13 22:33:05 +0000;;;","2023-02-27 09:36;sgibbons;Fix request 11u.

This fix gives a 3x performance improvement in AES-CTR decryption.

Risk is very low. Tested with tier1 and benchmark.;;;","2023-02-27 10:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1780
Date: 2023-02-27 17:58:21 +0000;;;","2023-02-28 00:36;goetz;[11u]
I don't really share the risk estimate of ""very low"".
It touches a security-relevant algorithm, and changes massively
the memory behavior, keeping byte[] longer around.
But the change is small and local, and it is live in 
19 for a while now without any follow-ups. So ""yes"". ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2 compilation hits assert(is_dominator(c, n_ctrl)) failed",JDK-8280696,5067114,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2022-01-26 00:06,2022-06-24 01:11,2023-10-01 09:56,2022-05-19 07:55,17,18,19,,,,,,19,hotspot,,0,c2,ctw,intermittent,jdk17u-fix-request,jdk17u-fix-yes,noreg-hard,oracle-triage-11,oracle-triage-19,,,,,,,,,,,,"applications/ctw/jars/CtwOfLucene.java triggers the following assert:

#  Internal Error (/workspace/open/src/hotspot/share/opto/loopopts.cpp:1628), pid=66675, tid=23299
#  Error: assert(is_dominator(c, n_ctrl)) failed

Current CompileTask:
C2:   1705  542 % !b        java.io.BufferedReader::readLine @ 139 (327 bytes)

Stack: [0x000000016d53c000,0x000000016d73f000],  sp=0x000000016d739690,  free space=2037k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0xfb2340]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x5d8
V  [libjvm.dylib+0xfb2a08]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40
V  [libjvm.dylib+0x517994]  report_vm_error(char const*, int, char const*, char const*, ...)+0x80
V  [libjvm.dylib+0xb75cec]  PhaseIdealLoop::compute_early_ctrl(Node*, Node*)+0x1fc
V  [libjvm.dylib+0xb74b00]  PhaseIdealLoop::try_sink_out_of_loop(Node*)+0x41c
V  [libjvm.dylib+0xb73e78]  PhaseIdealLoop::split_if_with_blocks_post(Node*)+0x698
V  [libjvm.dylib+0xb76570]  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)+0x214
V  [libjvm.dylib+0xb61bd8]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x9a4
V  [libjvm.dylib+0x4d5a98]  PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&, LoopOptsMode)+0xf0
V  [libjvm.dylib+0x4c9838]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x7c
V  [libjvm.dylib+0x4c9b8c]  Compile::optimize_loops(PhaseIterGVN&, LoopOptsMode)+0xd0
V  [libjvm.dylib+0x4c4114]  Compile::Optimize()+0xfb4
V  [libjvm.dylib+0x4c2028]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x12f4
V  [libjvm.dylib+0x3cbe34]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x134
V  [libjvm.dylib+0x4dc960]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x604
V  [libjvm.dylib+0x4dc15c]  CompileBroker::compiler_thread_loop()+0x2c0
V  [libjvm.dylib+0xf164bc]  JavaThread::thread_main_inner()+0x284
V  [libjvm.dylib+0xf13894]  Thread::call_run()+0x21c
V  [libjvm.dylib+0xce8b04]  thread_native_entry(Thread*)+0x160
C  [libsystem_pthread.dylib+0x74ec]  _pthread_start+0x94",,,,,,,,,,JDK-8288796,JDK-8289123,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252372,JDK-8287009,,,,,"2022-01-26 00:05;thartmann;hs_err_lucene-analyzers-morfologik-7.5.0.jar_0_66675.log;https://bugs.openjdk.org/secure/attachment/97736/hs_err_lucene-analyzers-morfologik-7.5.0.jar_0_66675.log","2022-01-26 00:05;thartmann;replay_lucene-analyzers-morfologik-7.5.0.jar_0_66675.log;https://bugs.openjdk.org/secure/attachment/97735/replay_lucene-analyzers-morfologik-7.5.0.jar_0_66675.log","2022-05-16 05:00;thartmann;replay_pid30846.log;https://bugs.openjdk.org/secure/attachment/98948/replay_pid30846.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vt5v:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-26 04:08;chagedorn;ILW = C2 assertion when sinking a node, rare, disable compilation of affected method = HLM = P3;;;","2022-04-21 05:50;thartmann;Might have been fixed by JDK-8280600. Trying to reproduce.;;;","2022-04-22 01:46;thartmann;Not able to reproduce. Closing.;;;","2022-05-13 13:06;epavlova;Hi Tobias,

I got the same crash while running microbenchmarks based tests using latest jdk19 bits:

#  Internal Error (/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14622/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/
executors/68f9fb7c-e585-49eb-b345-02046aded32a/runs/38cf37e0-603c-49fa-ae47-1be0e55e0ae6/workspace/open/src/hotspot/share/opto/loopopts.cpp:1728), pi
d=30846, tid=30861
#  Error: assert(is_dominator(c, n_ctrl)) failed
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (fastdebug build 19-internal-2022-05-13-0428371.ekaterina.pavlova.jdk.jdk.master)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-internal-2022-05-13-0428371.ekaterina.pavlova.jdk.jdk.master, mixed mode, sharing, compres
sed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1493264]  PhaseIdealLoop::compute_early_ctrl(Node*, Node*)+0x264
#
---------------  T H R E A D  ---------------

Current thread (0x00007fce30484f70):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=30861, stack(0x00007fce10e9c000,0x00007fce10f9d00
0)]


Current CompileTask:
C2:   1505  469 %           java.io.BufferedReader::implReadLine @ 125 (302 bytes)

Stack: [0x00007fce10e9c000,0x00007fce10f9d000],  sp=0x00007fce10f96d10,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1493264]  PhaseIdealLoop::compute_early_ctrl(Node*, Node*)+0x264
V  [libjvm.so+0x1494041]  PhaseIdealLoop::try_sink_out_of_loop(Node*)+0x171
V  [libjvm.so+0x1494a78]  PhaseIdealLoop::split_if_with_blocks_post(Node*)+0x58
V  [libjvm.so+0x1495689]  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)+0x209
V  [libjvm.so+0x14874bd]  PhaseIdealLoop::build_and_optimize()+0x132d
V  [libjvm.so+0xad4d1a]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x27a
V  [libjvm.so+0xad148e]  Compile::Optimize()+0x103e
V  [libjvm.so+0xad36d0]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1590
V  [libjvm.so+0x8e83c3]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x683
V  [libjvm.so+0xae2570]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xce0
V  [libjvm.so+0xae3498]  CompileBroker::compiler_thread_loop()+0x6c8
V  [libjvm.so+0x1a5a0ca]  JavaThread::thread_main_inner()+0x21a
V  [libjvm.so+0x1a67a10]  Thread::call_run()+0x100
V  [libjvm.so+0x17127e4]  thread_native_entry(Thread*)+0x104




The test which crashed is org.openjdk.bench.java.util.stream.ops.value.AllMatch.par_chain123$, 
it was run as 
> jdk19/bin/java $JVM_FLAGS -cp build/linux-x64/images/test/micro/benchmarks.jar 
    org.openjdk.jmh.Main -f 1 org.openjdk.bench.java.util.stream.ops.value.AllMatch.par_chain123$ 

The JVM_FLAGS flags the test was crashed were:
1) -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -XX:-UseCompressedOops -server -XX:-TieredCompilation -XX:+StressIGVN -XX:+StressGCM -XX:+StressLCM
2) -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -XX:+VerifyOops -server -XX:-TieredCompilation -XX:+StressIGVN -XX:+StressGCM -XX:+StressLCM

So far I was able to reproduce the crash by running the test 10,000 times and the crash happened only 2 times.
Perhaps not all jvm flags are important. I can try to reproduce with reduced amount of flags.


;;;","2022-05-16 05:00;thartmann;Thanks [~epavlova], I can reproduce this with replay compilation (attached replay_pid30846.log) and latest JDK 19-ea+23-1651:
java -XX:+ReplayIgnoreInitErrors -XX:+ReplayCompiles -XX:ReplayDataFile=replay_pid30846.log -XX:+UnlockExperimentalVMOptions -XX:+StressIGVN -XX:StressSeed=132118749
;;;","2022-05-16 06:34;thartmann;Could be related to JDK-8286625 or JDK-8278420.;;;","2022-05-18 07:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8770
Date: 2022-05-18 14:34:58 +0000;;;","2022-05-19 07:55;dukebot;Changeset: fa1b56ed
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-05-19 14:52:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fa1b56ede6eed653f70efbbfff3af5ee6b481ee4
;;;","2022-06-21 00:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/161
Date: 2022-06-21 07:40:42 +0000;;;","2022-06-21 11:10;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Simple C2 fix containing some cleanups.
Clean backport. SAP nightly testing passed.;;;","2022-06-21 11:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/489
Date: 2022-06-21 18:10:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JfrRecorderService failes with guarantee(num_written > 0) when no space left on device.,JDK-8280684,5067103,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mgronlun,tkiriyama,tkiriyama,2022-01-25 22:22,2023-07-24 22:06,2023-10-01 09:56,2022-02-25 03:43,18,,,,,,,,19,hotspot,,0,azul-interest,datadog-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,"Description:
JfrRecorderService failes to write records and becomes Internal Error when no space left on device.

Environment:
Red Hat Enterprise Linux Server release 7.9 (Maipo)
Intel(R) Xeon(R) Platinum 8260 CPU @ 2.40GHz
4GB Memory

openjdk version ""18-ea"" 2022-03-22
OpenJDK Runtime Environment (build 18-ea+31-2049)
OpenJDK 64-Bit Server VM (build 18-ea+31-2049, mixed mode, sharing)

Actual output:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (jfrStreamWriterHost.inline.hpp:80), pid=16941, tid=16961
#  guarantee(num_written > 0) failed: Nothing got written, or os::write() failed
#
# JRE version: OpenJDK Runtime Environment (18.0+31) (build 18-ea+31-2049)
# Java VM: OpenJDK 64-Bit Server VM (18-ea+31-2049, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x874a8a]  void JfrLinkedList<JfrBuffer, JfrCHeapObj>::iterate<PredicatedConcurrentWriteOp<UnBufferedWriteToChunk<JfrBuffer>, Excluded<JfrBuffer, true> > >(PredicatedConcurrentWriteOp<UnBufferedWriteToChunk<JfrBuffer>, Excluded<JfrBuffer, true> >&)+0x19a
#
# Core dump will be written. Default location: /work/core.16941
#

Expected output:
JFR should report an appropriate message.

How to reproduce :

1. Run out of the disk

$ dd if=/dev/zero of=largefile_200G.dat bs=1G count=200

$ df -k
Filesystem            1K-blocks     Used Available Use% Mounted on
/dev/mapper/rhel-root  47285700 47013032        268 100% /

2. Execute an application and start JFR with -XX:FlightRecorderOptions=maxchunksize=1M

---------- BEGIN SOURCE ----------
        Configuration profConfig = Configuration.getConfiguration(""profile"");
        Recording recording = new Recording(profConfig);
        recording.setName(""TestJFR"");
        recording.start();
        while (true) {
            try {
               new Object();
               Thread.sleep(1);
            } catch (Exception ex) {
            }
        }
        recording.stop();
---------- END SOURCE ---------

3. Watch jfr files and the disk size.

$ cd /tmp/2022_01_13_20_56_16_32501
$ watch -n 3 ""ls -l ; df -k""
$ ls -l ; df -k
total 1256
-rw-rw-r--. 1 isadmin isadmin 1091928 Jan 13 21:05 2022_01_13_20_56_16.jfr
-rw-rw-r--. 1 isadmin isadmin  192512 Jan 13 21:05 2022_01_13_21_05_17.jfr

tmpfs                   1940260        0   1940260   0% /sys/fs/cgroup
/dev/mapper/rhel-root  47285700 47285680        20 100% /",,,,,,,,,,JDK-8285864,JDK-8286999,JDK-8312091,JDK-8312107,JDK-8312698,JDK-8291708,JDK-8291709,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vt3f:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-01-25 23:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7227
Date: 2022-01-26 06:41:41 +0000;;;","2022-02-25 03:43;dukebot;Changeset: 9471f24c
Author:    KIRIYAMA Takuya <kiriyama.takuya@fujitsu.com>
Committer: Markus Grönlund <mgronlun@openjdk.org>
Date:      2022-02-25 11:39:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9471f24ca191832669a13e5a1ea73f7097a25927
;;;","2022-04-25 03:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/357
Date: 2022-04-25 10:16:26 +0000;;;","2022-04-25 03:22;jbachorik;[17u] Fix request

I would like to request an approval for backporting this fix to jdk17u-dev 

The fix improves the user experience in situation when a full file system prevents JFR functioning normally.
The changes are isolated, restricted to exceptional exit and therefore they pose very low risk.

The backport is straight-forward with one very minor merge conflict at https://github.com/openjdk/jdk17u-dev/pull/357/files#diff-9d8a6589421d0826a02497fe0ca83499c039a811ffd3d1aa99e7168294f5fac5R79 (in JDK 17u there is an extra cast)

PR: https://github.com/openjdk/jdk17u-dev/pull/357;;;","2022-04-25 07:23;jbachorik;[11u] Fix request

I would like to ask for the consideration of accepting the JDK 11u backport of this fix.

The fix improves the user experience in situation when a full file system prevents JFR functioning normally.
The changes are isolated, restricted to exceptional exit and therefore they pose very low risk.

The backport is straight-forward with only minor merge conflicts in copyright, type cast and nullptr vs. NULL.

PR: https://github.com/openjdk/jdk11u-dev/pull/1044;;;","2022-04-25 07:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1044
Date: 2022-04-25 14:21:30 +0000;;;","2022-08-02 04:43;evergizova;Fix request (15u & 13u)
Requesting backport to 15u & 13u for parity with 11u.
The patch doesn't apply cleanly due to copyright years and context difference in jfrJavaSupport.cpp, jfrJavaSupport.hpp and jfrStreamWriterHost.inline.hpp (JDK-8252685 and JDK-8183227 are not in 15u).
Additionally, similar to 11u backport, the original condition `error_msg != NULL` is left without replacing NULL with nullptr, because C++14 Language Features was enabled since jdk16 (JDK-8208089).
Tested with jdk/jfr and tier1.;;;","2022-08-02 05:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/250
Date: 2022-08-02 11:03:32 +0000;;;","2022-08-02 05:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/386
Date: 2022-08-02 11:29:21 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: Remove uses of long and unsigned long,JDK-8280683,5067102,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yadongwang,yadongwang,yadongwang,2022-01-25 21:39,2022-01-27 23:33,2023-10-01 09:56,2022-01-27 23:33,repo-riscv-port,,,,,,,,repo-riscv-port,hotspot,,0,,,,,,,,,,,,,,,,,,,,"The riscv port should follow https://bugs.openjdk.java.net/browse/JDK-8248404, for the same reason of:
```
In many cases the RISCV64 back end uses long and unsigned long types. These types don't work on LLP64 systems (such as Windows) and should be replaced either by int64_t or jlong, as appropriate.
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8248404,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,repo-riscv-port,,linux,,,,,"0|i2vt37:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-27 21:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/riscv-port/pull/55
Date: 2022-01-28 05:13:00 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ObjectInputStream.readObject should throw InvalidClassException instead of IllegalAccessError,JDK-8280642,5067055,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2022-01-25 14:17,2022-02-07 13:06,2023-10-01 09:56,2022-02-01 12:15,11-pool,17-pool,7-pool,8-pool,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,"During deserialization of a serialized data stream that contains a proxy descriptor with non-public interfaces 
java.io.ObjectInputStream` checks that the interfaces can be loaded from a single classloader in `ObjectInputStream.resolveProxyClass`.
If the interfaces cannot be loaded from a single classloader, an `IllegalAccessError` is thrown.
When `ObjectInputStream.readObject` encounters this case, it reflects an incompatibility
between the classloaders of the source of the serialized stream and the classloader being used for deserialization.
When a proxy object cannot be created from the interfaces, `ObjectInputStream.readObject` should catch
the `InvalidAccessError` and throw `InvalidObjectException` with the `InvalidAccessError` as the cause.
This allows the application to handle the exception consistently with other errors during deserialization.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280906,,,,,JDK-8280376,,,JDK-8280376,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vssr:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7e74daa7,,,,,,,,,"2022-01-28 13:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7274
Date: 2022-01-28 21:02:23 +0000;;;","2022-02-01 12:15;roboduke;Changeset: fdd9ca74
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2022-02-01 20:13:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fdd9ca74bd6ca87c30be2bcdcfd22e19b7687a5a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClhsdbThreadContext.java test is triggering codecache related asserts,JDK-8280601,5067005,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2022-01-25 11:21,2022-10-27 15:55,2023-10-01 09:56,2022-02-01 15:03,19,,,,,,,,19,hotspot,,0,intermittent,tier7,,,,,,,,,,,,,,,,,,"When running serviceability/sa/ClhsdbThreadContext.java , the following failure was seen:

 sun.jvm.hotspot.utilities.AssertionFailure: Should have found CodeBlob
at jdk.hotspot.agent/sun.jvm.hotspot.utilities.Assert.that(Assert.java:32)
at jdk.hotspot.agent/sun.jvm.hotspot.utilities.PointerFinder.find(PointerFinder.java:140)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.JavaThread.printThreadContextOn(JavaThread.java:493)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor$46.doit(CommandProcessor.java:1699)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2212)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2182)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.run(CommandProcessor.java:2053)
at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.run(CLHSDB.java:112)
at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.main(CLHSDB.java:44)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runCLHSDB(SALauncher.java:281)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)
]
 exitValue = -1

java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'Thread ""Common-Cleaner""' missing from stdout/stderr

at ClhsdbThreadContext.main(ClhsdbThreadContext.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.base/java.lang.Thread.run(Thread.java:833)

The root cause is:

r9: 0x00000176ee380000Error: sun.jvm.hotspot.utilities.AssertionFailure: Should have found CodeBlob
sun.jvm.hotspot.utilities.AssertionFailure: Should have found CodeBlob

This caused the clhsdb threadcontext command to abort, so it never got around to dumping the context of the Common-Cleaner thread.

It looks like in PionterFinder.find() SA has hit some edge case with the address, and found that it is in the codecache, but there is no CodeBlob representing that address, so it asserts. I think instead it should just adapt and later PointerLocation should print something like ""Not in CodeBlob"".

So far this has only happened on Windows-x64 in a run with the following JVM args:

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:+VerifyOops

Most likely -Xcomp is what triggered it. It seems to have happened consistently in 3 separate runs with this option, so it likely 100% reproducible.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8250801,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vshn:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-01-25 16:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7217
Date: 2022-01-25 22:07:37 +0000;;;","2022-01-27 10:04;cjplummer;I ran into a couple of other asserts listed below. It looks like since dumping the threadcontext can result in using PointerFinder with fairly random addresses, it is doing a much better job of stress testing PointerFinder than is done by other tests. The root issue in all these asserts is that a random address in the codecache can either be outside of any CodeBlob, or can map to a CodeBlob that is not yet initialized or could even have been freed. The two newest asserts seem to be a result of the latter:

sun.jvm.hotspot.utilities.AssertionFailure: found wrong CodeBlob
	at jdk.hotspot.agent/sun.jvm.hotspot.utilities.Assert.that(Assert.java:32)
	at jdk.hotspot.agent/sun.jvm.hotspot.code.CodeCache.findBlobUnsafe(CodeCache.java:140)
	at jdk.hotspot.agent/sun.jvm.hotspot.utilities.PointerFinder.find(PointerFinder.java:138)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.JavaThread.printThreadContextOn(JavaThread.java:493)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor$46.doit(CommandProcessor.java:1702)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2215)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2185)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.run(CommandProcessor.java:2056)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.run(CLHSDB.java:112)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.main(CLHSDB.java:44)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runCLHSDB(SALauncher.java:281)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)

sun.jvm.hotspot.utilities.AssertionFailure: Should have found CodeBlob
	at jdk.hotspot.agent/sun.jvm.hotspot.utilities.Assert.that(Assert.java:32)
	at jdk.hotspot.agent/sun.jvm.hotspot.utilities.PointerFinder.find(PointerFinder.java:140)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.JavaThread.printThreadContextOn(JavaThread.java:493)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor$46.doit(CommandProcessor.java:1702)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2215)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2185)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.run(CommandProcessor.java:2056)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.run(CLHSDB.java:112)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.main(CLHSDB.java:44)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runCLHSDB(SALauncher.java:281)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)

PointerFinder and PointerLocation need to be prepared to handled these asserts, and any other exception thrown.;;;","2022-02-01 15:03;roboduke;Changeset: 85d839fb
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-02-01 23:02:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/85d839fb4f3f820d130ea95f9a54ae137a95c20a
;;;","2022-02-03 06:10;dcubed;The fix was integrated in jdk-19+8-437.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(!had_error) failed: bad dominance,JDK-8280600,5067003,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,chagedorn,chagedorn,2022-01-25 10:52,2022-05-04 23:45,2023-10-01 09:56,2022-02-02 00:03,17,18,19,,,,,,19,hotspot,,0,c2,c2-loopopts,javafuzzer,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-11,oracle-triage-19,redhat-interest,,,,,,,,,"The attached fuzzer test fails starts to fail after JDK-8259609 (just reveals an existing bug, see comments) with the following assertion:

To reproduce:
$ java -Xcomp -XX:CompileOnly=Test Test.java
$ java -Xcomp -XX:CompileOnly=Reduced Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13969/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7ba0f8d2-063a-4d17-9102-79bc486a843e/runs/cd3aa16d-01e2-42b3-89ad-9b0251a5fc3b/workspace/open/src/hotspot/share/opto/loopnode.cpp:5287), pid=23515, tid=23528
#  assert(!had_error) failed: bad dominance
#
# JRE version: Java(TM) SE Runtime Environment (18.0+32) (fastdebug build 18-ea+32-2068)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+32-2068, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1391942]  PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool)+0x6e2
.........
Command Line: -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet Test
.........
Current CompileTask:
C2:    879   63   !b  4       Test::mainTest (516 bytes)

Stack: [0x00007fa7e0760000,0x00007fa7e0861000],  sp=0x00007fa7e085ae60,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1391942]  PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool)+0x6e2
V  [libjvm.so+0x1391dc0]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x2a0
V  [libjvm.so+0x13922ca]  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)+0xba
V  [libjvm.so+0x1392d52]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x622
V  [libjvm.so+0xa8f490]  PhaseIdealLoop::verify(PhaseIterGVN&)+0x2a0
V  [libjvm.so+0xa8a459]  Compile::Optimize()+0x8e9
V  [libjvm.so+0xa8cdfe]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x159e
V  [libjvm.so+0x8a5684]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x664
V  [libjvm.so+0xa9d0f8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc88
V  [libjvm.so+0xa9deb8]  CompileBroker::compiler_thread_loop()+0x648
V  [libjvm.so+0x192750a]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x192f8d0]  Thread::call_run()+0x100
V  [libjvm.so+0x16103d4]  thread_native_entry(Thread*)+0x104
",,,,,,,,,,JDK-8283824,JDK-8283949,JDK-8284258,,,,,,,,,,,,,,,,,,,,,JDK-8280587,,,JDK-8283386,JDK-8282592,JDK-8281117,JDK-8259609,,,,,,,,,JDK-8252372,,,,,,"2022-01-25 10:51;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/97730/FuzzerUtils.java","2022-01-25 10:52;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/97729/Reduced.java","2022-01-25 10:51;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/97731/Test.java","2022-01-25 10:51;chagedorn;hs_err_pid24300.log;https://bugs.openjdk.org/secure/attachment/97732/hs_err_pid24300.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b24,17,,,,,,,"0|i2vsh7:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-25 10:53;chagedorn;ILW = C2 assertion due to dominance failure, only single test but recent regression, disable compilation of affected method = HMM = P2;;;","2022-01-25 10:55;chagedorn;Targetting to JDK 18 as this is a recent regression from JDK 18. 

[~roland] can you have a look at it? ;;;","2022-01-26 06:19;roland;This appears to happen as a side effect of the following changes:
https://github.com/openjdk/jdk/commit/82f4aacb42e60e9cd00e199703a869e7ad4465ff#diff-6a59f91cb710d682247df87c75faf602f0ff9f87e2855ead1b80719704fbedff in IdealLoopTree::policy_range_check()
So it's not directly related to long range checks in long counted loops. AFAICT, instead, it's another bug caused by 8252372 (Check if cloning is required to move loads out of loops in PhaseIdealLoop::split_if_with_blocks_post()). ;;;","2022-01-26 06:37;chagedorn;Thanks Roland for analyzing it further. As discussed offline, the fix is not simple and could be risky. 

Given that we are in RDP 2 now and that JDK-8252372 was added in JDK 17 (i.e. not a recent regression), we agreed to defer this bug and update its ILW:

Updated ILW = C2 assertion due to dominance failure, only single test and not recent regression, disable compilation of affected method = HLM = P3
;;;","2022-02-01 07:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7307
Date: 2022-02-01 15:03:33 +0000;;;","2022-02-01 09:52;kvn;The fix could be backported into 18u after push and testing in JDK 19.;;;","2022-02-02 00:03;roboduke;Changeset: de826ba1
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-02-02 08:01:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/de826ba18a5e98586029581c2d4bcd27334fbdd1
;;;","2022-03-29 05:54;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Test has passed.;;;","2022-03-29 06:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/297
Date: 2022-03-29 12:56:02 +0000;;;","2022-03-29 08:26;thartmann;Fix Request (JDK 18u)
Fixes an assert in C2. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 08:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/68
Date: 2022-03-29 15:25:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Refactor java.lang.invoke.MethodHandles::memoryAccessVarHandle,JDK-8280597,5066998,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jboes,jboes,jboes,2022-01-25 10:00,2022-03-08 08:10,2023-10-01 09:56,2022-03-08 08:10,repo-panama,,,,,,,,,tools,,0,foreign-memaccess+abi,foreign-preview,,,,,,,,,,,,,,,,,,"Refactor similarly to the byte buffer VarHandle factory byteBufferViewVarHandle, e.g. naming it segmentViewVarHandle.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vsg3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-03-07 06:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/663
Date: 2022-03-07 13:56:55 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ScopedMemoryAccess_closeScope: remove exception parameter,JDK-8280596,5066997,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jboes,jboes,jboes,2022-01-25 09:55,2022-02-04 02:45,2023-10-01 09:56,2022-02-04 02:45,repo-panama,,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,"Remove the trailing exception parameter in ScopedMemoryAccess_closeScope, which is now an unused parameter.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vsfv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-02-03 08:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/637
Date: 2022-02-03 16:16:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Small javadoc tweaks to foreign API,JDK-8280592,5066991,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-01-25 07:18,2022-02-16 06:45,2023-10-01 09:56,2022-01-25 17:14,18,,,,,,,,18,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"Further review of the API javadoc revealed some inconsistencies, especially in the javadoc wording for predicate methods.",,,,,,,,,,JDK-8281667,JDK-8280723,JDK-8281984,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vsej:",9223372036854775807,b34,,,,,,,,,,,,"2022-01-25 07:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/113
Date: 2022-01-25 15:22:30 +0000;;;","2022-01-25 17:14;roboduke;Changeset: ef08e2c6
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-01-26 01:12:37 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/ef08e2c63b040cef6ca5f71dbce49f3d7647fdd8
;;;","2022-02-01 09:49;roboduke;Changeset: ef08e2c6
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-01-26 01:12:37 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/ef08e2c63b040cef6ca5f71dbce49f3d7647fdd8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: Phi inputs and pinned nodes are not scheduled correctly,JDK-8280568,5066953,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rcastanedalo,neliasso,neliasso,2022-01-25 00:39,2022-08-16 23:50,2023-10-01 09:56,2022-05-03 00:29,19,,,,,,,,19,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,,"Nodes aren't shown in correct blocks, even if they have explicit control. In attached image all nodes encircled should be drawn in other blocks, for two reasons: pinned nodes should be scheduled in the same block as the nodes they are pinned to, and phi inputs should be scheduled above the block in which the phi node is scheduled.

To reproduce the issue shown in the picture, open the graph file alloc.xml (included in the attached ZIP bundle), open the graph ""Optimize finished"", and open the mode ""Cluster nodes into blocks"". The graph file itself is generated by compiling the simple program SimpleAlloc.java (also included in the attached ZIP bundle) with JDK 17 as follows:

$ java -XX:+PrintOpto -XX:CompileCommand=IGVPrintLevel,SimpleAlloc::testAllocArray,4 -XX:CompileCommand=compileonly,*::testAllocArray -XX:PrintIdealGraphFile=alloc.xml SimpleAlloc.java",,,,,,,,,,,,,,,,,,,,,,,,JDK-8281539,,JDK-8282053,JDK-8273666,,,,,,,,,JDK-8287164,,,,,,,,,,,,JDK-8287438,,,,,,"2022-01-25 01:02;neliasso;alloc.png;https://bugs.openjdk.org/secure/attachment/97718/alloc.png","2022-02-04 06:13;rcastanedalo;alloc.zip;https://bugs.openjdk.org/secure/attachment/97835/alloc.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vs63:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-26 04:11;chagedorn;ILW = Broken block layout in IGV, only in block view, no workaround = MLH = P4;;;","2022-02-17 06:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7493
Date: 2022-02-16 11:05:17 +0000;;;","2022-03-02 05:23;rcastanedalo;Focusing on JDK-8282547 first since it will make it easier to develop and test this enhancement.;;;","2022-05-03 00:29;dukebot;Changeset: 7a483517
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2022-05-03 07:27:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7a4835178d58b132773fec77b923095e36d1dcec
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/sa/TestObjectMonitorIterate.java is failing due to ObjectMonitor referencing a null Object,JDK-8280555,5066938,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2022-01-24 22:56,2022-09-22 04:48,2023-10-01 09:56,2022-01-28 10:53,19,repo-loom,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,"serviceability/sa/TestObjectMonitorIterate.java fails in the loom repo:

 stderr: [Exception in thread ""main"" java.lang.NullPointerException: Cannot invoke ""sun.jvm.hotspot.oops.Oop.getKlass()"" because ""<local5>"" is null
	at TestObjectMonitorIterate.test(TestObjectMonitorIterate.java:63)
	at TestObjectMonitorIterate.main(TestObjectMonitorIterate.java:97)

The code in question is:

            while (itr.hasNext()) {
                ObjectMonitor mon = (ObjectMonitor)itr.next();
                Oop oop = heap.newOop(mon.object());
                System.out.println(""Monitor found: "" + oop.getKlass().getName().asString());
            }

So it looks like it found an ObjectMonitor, but the Object for the monitor was null for some reason.

This failure does not happen when no VM args are specified. It does happen with:

   -Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation

It also happens with just -Xcomp. ",,,,,,,,,,JDK-8293593,JDK-8294214,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280743,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vs2r:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-01-25 21:16;cjplummer;Loom introduced code that triggers a full GC when the codecache is swept. This is messing up the test as it expects no GC to have been done before the iterating over the ObjectMonitors. More specifically, it is causing at least one object referenced by an ObjectMonitor to be GC'd. If I put in an extra check for the null object:

            while (itr.hasNext()) {
                ObjectMonitor mon = (ObjectMonitor)itr.next();
                if (mon.object() == null) {
                    System.out.println(""Monitor found: object is null"");
                } else {
                    Oop oop = heap.newOop(mon.object());
                    System.out.println(""Monitor found: "" + oop.getKlass().getName().asString());
                }
            }

The test passes with the following output:

Monitor found: java/lang/Object
Monitor found: java/lang/Class
Monitor found: object is null
Monitor found: object is null
Monitor found: java/lang/Object
Monitor found: java/lang/ref/NativeReferenceQueue$Lock
Monitor found: java/lang/Object
;;;","2022-01-26 12:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7238
Date: 2022-01-26 20:15:59 +0000;;;","2022-01-28 10:53;roboduke;Changeset: 0740ac47
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-01-28 18:51:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0740ac474cbda439684223e660827e38964e6b1f
;;;","2022-09-19 13:00;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-09-19 13:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/691
Date: 2022-09-19 20:01:14 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
resourcehogs/serviceability/sa/ClhsdbRegionDetailsScanOopsForG1.java can fail if GC is triggered,JDK-8280554,5066937,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2022-01-24 22:24,2022-09-22 04:54,2023-10-01 09:56,2022-02-01 08:03,19,repo-loom,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,"resourcehogs/serviceability/sa/ClhsdbRegionDetailsScanOopsForG1.java is failing in the loom repo, even when not being run using the vthread wrapper. 

    java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'Survivor' missing from stdout/stderr 

The test runs the g1regiondetails clhsdb command, which dumps out all of the g1 regions. There's a very large number of ""free"" regions, 1 ""Eden"" region, and a couple of ""Old"" regions, but no ""Survivor"" region, which is what the test is looking for.

At first I though it may have been missed in the truncated part of the output, since the test exceeds jteg's max output, but I ran with an increased max output so there would be no truncation, and there is still no sign of a Survivor region in the output.

This failure does not happen when no JVM args are specified, but does with the following:

 -Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation

I suspect -Xcomp is what matters here, but have not verified that yet.",,,,,,,,,,JDK-8294218,JDK-8294060,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vs2j:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-01-25 17:39;cjplummer;Loom introduced code that triggers a full GC when the codecache is swept. This is likely messing up the test as it expects no GC to have been done before the scanoops. The GC is causing some types of G1 regions to not be present. We could make the test look for types that only we know will also be present in -Xcomp runs, like just Eden and Old (possibly conditional on -Xcomp), or we could just skip this test when using -Xcomp.;;;","2022-01-27 09:52;cjplummer;It looks like this has a similar root cause as JDK-8280553. There are some large static objects created for the purpose of causing Survivor, StartsHumongous, and ContinuesHumongous regions to be created. The compiler detects that these objects are not being kept live, and when the GC happens these regions disappear because the objects in them are GC'd. Using statics instead of locals partly fixes the issue. There is still no Survivor region, but there are StartsHumongous and ContinuesHumongous regions, so I suggest dropping Survivor from the list of regions to check for (and using statics to keep the objects alive so we have StartsHumongous and ContinuesHumongous regions).;;;","2022-01-27 20:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7257
Date: 2022-01-28 04:27:18 +0000;;;","2022-02-01 08:03;roboduke;Changeset: 4532c3a1
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-02-01 16:02:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4532c3a1639af0b4ff8c4f42c3796fa73ca5be83
;;;","2022-09-21 04:44;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-09-21 04:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/712
Date: 2022-09-21 11:49:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
resourcehogs/serviceability/sa/TestHeapDumpForLargeArray.java can fail if GC occurs,JDK-8280553,5066935,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2022-01-24 22:06,2023-01-04 01:27,2023-10-01 09:56,2022-01-29 13:36,19,repo-loom,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,"resourcehogs/serviceability/sa/TestHeapDumpForLargeArray.java is failing in the loom repo, even when not using the vthread wrapper:

    java.lang.RuntimeException: 'truncating to' missing from stdout/stderr 

The test is pretty simple. The target app creates a very large array:

        int[] hugeArray = new int[Integer.MAX_VALUE/2];

When doing a heap dump, the following is expected in the output but is missing for some reason:

WARNING: Cannot dump array of type int with length 1073741823; truncating to length 1073741819

This doesn't happen when specifying no VM args, but does with the following args:

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation

This also happens with just -Xcomp. It's unclear why the warning message is not produced. 1073741823 * 4 is 0x7fffffff. Add some room for the object header and the overall size of the object exceeds SA's limit, which is why SA would normally truncate it to 1073741819. Why in this case it is not exceeding the limit is unclear. Possibly the object is not even being dump, so the warning message is never triggered.",,,,,,,,,,JDK-8297691,JDK-8299579,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vs23:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-01-25 17:45;cjplummer;Loom introduced code that triggers a full GC when the codecache is swept. This is likely messing up the test as it expects no GC to have been done before the scanoops. My guess is that the compiler is smart enough to detect that the array being allocated is not used, or at the very least not kept live and can be GC'd:

public class LingeredAppWithLargeArray extends LingeredApp {
    public static void main(String args[]) {
        int[] hugeArray = new int[Integer.MAX_VALUE/2];
        LingeredApp.main(args);
    }
 }

So when you run with -Xcomp you get this newly introduced full GC, and hugeArray is no longer present when the heap dump is done.;;;","2022-01-25 21:13;cjplummer;Making hugeArray public static fixes the issue.;;;","2022-01-26 12:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7236
Date: 2022-01-26 20:03:21 +0000;;;","2022-01-29 13:36;roboduke;Changeset: be9f984c
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-01-29 21:35:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/be9f984caec32c3fe1deef30efe40fa115409ca0
;;;","2023-01-01 11:36;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
TestHeapDumpForLargeArray.java passes. SAP nightly testing passed.;;;","2023-01-01 11:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1017
Date: 2023-01-01 19:36:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SplittableRandom#nextDouble(double,double) can return result >= bound",JDK-8280550,5066896,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,darcy,webbuggrp,webbuggrp,2022-01-24 04:39,2023-04-21 01:02,2023-10-01 09:56,2022-01-26 09:29,11,17,18,19,8,,,,19,core-libs,,0,19ea,amazon-interest,dcsaw,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,redhat-interest,reproducer-yes,webbug,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Java 11.0.13

A DESCRIPTION OF THE PROBLEM :
The nextDouble​(double origin, double bound) method of java.util.SplittableRandom can return a result which is >= bound. According to the documentation (https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/SplittableRandom.html#nextDouble(double,double)), the result is < bound.

I believe the reason for this behavior is this line in the source: https://github.com/openjdk/jdk11u-dev/blob/master/src/java.base/share/classes/java/util/SplittableRandom.java#L353

r = Double.longBitsToDouble(Double.doubleToLongBits(bound) - 1);

This line probably wants to create a double less than bound by decrementing the result of Double.doubleToLongBits(bound). However, when bound is negative, decrementing the long will actually make the double bigger (due to 2's complement representation). The fix is possibly as simple as ""+1"" instead of ""-1"" when bound is negative.

I've tested this on Java 11, but looking at the source, newer versions are probably also affected: https://github.com/openjdk/jdk/blob/jdk-19+6/src/java.base/share/classes/jdk/internal/util/random/RandomSupport.java#L648

ThreadLocalRandom also seems to be affected.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile and run the example code below.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Expected output:

[some double which is between d1 (inclusive) and d2 (exclusive)]
true
true
ACTUAL -
Actual output:

-0.9999999999999999
true
false

---------- BEGIN SOURCE ----------
package com.example;

import java.util.SplittableRandom;

final class Example {

  public static void main(String[] args) {
    double d1 = -1.0000000000000002;
    double d2 = -1.0;
    var sr = new SplittableRandom(42L);
    var r = sr.nextDouble(d1, d2);
    System.out.println(r);
    System.out.println(r >= d1);
    System.out.println(r < d2);
  }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8285722,JDK-8281881,JDK-8280921,JDK-8280922,JDK-8281556,JDK-8280923,JDK-8296306,JDK-8288055,,,,,,,,,,,,,,,,JDK-8282082,,,JCK-7317246,JCK-7317217,,,,,,,,,,,JDK-8281183,JDK-8280950,JDK-8296402,,,,"2022-01-24 21:00;tongwan;Example.java;https://bugs.openjdk.org/secure/attachment/97714/Example.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vrtf:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2022-01-24 21:03;tongwan;The observations on Windows 10:
JDK 8: Failed, sr.nextDouble(d1, d2) returned -0.9999999999999999
JDK 11: Failed.
JDK 17: Failed.
JDK 18ea+29: Failed.
JDK 19ea+3: Failed.;;;","2022-01-25 18:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7221
Date: 2022-01-26 02:12:11 +0000;;;","2022-01-26 09:29;roboduke;Changeset: 0c42e43f
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-01-26 17:25:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0c42e43f77b91a50fedc3fddb74e17f910d8df2a
;;;","2022-02-01 00:09;goetz;Joe, 
will you backport this to open jdk17u-dev? You would be welcome! But if not, please remove the jdk17u-fix-request label.
Thanks, Goetz.;;;","2022-02-09 10:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/21
Date: 2022-02-09 18:25:01 +0000;;;","2022-05-16 04:11;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Clean backport.  Needs two follow ups!
SAP nightly testing passed.;;;","2022-05-16 04:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/399
Date: 2022-05-16 11:11:03 +0000;;;","2022-06-07 03:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/433
Date: 2022-06-07 10:39:55 +0000;;;","2022-10-26 06:51;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
There is risk backporting this, especially as the code had to be adapted 
to the Random implementation in 11. But the test clearly reproduces the 
bug, so we should fix it.
Non-clean backport.
Test passes.  SAP nighlty testing passed.;;;","2022-10-26 06:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1478
Date: 2022-10-26 13:48:17 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"x86_32 Math.sqrt performance regression with -XX:UseSSE={0,1}",JDK-8280526,5066901,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-01-24 08:11,2022-02-16 06:45,2023-10-01 09:56,2022-01-26 00:34,11.0.15-oracle,17.0.3-oracle,18,19,,,,,19,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,oracle-triage-18,redhat-interest,regression,,,,,,,,,"While working on JDK-8279076 backport to 17u, I noticed that one tier1 test times out:

$ CONF=linux-x86-server-fastdebug make run-test TEST=compiler/loopopts/superword/SumRedSqrt_Double.java TEST_VM_OPTS=""-XX:UseSSE=0 -XX:UseAVX=0"" 

After some investigation, I realized that the Matcher::match_rule_supported addition in JDK-8279076 is done to match SqrtD in x86.ad. x86_32.ad has a separate rule that works with UseSSE <= 1!

instruct sqrtDPR_reg(regDPR dst, regDPR src) %{
  predicate (UseSSE<=1);
  match(Set dst (SqrtD src));
  format %{ ""DSQRT  $dst,$src"" %}
  opcode(0xFA, 0xD9);
  ins_encode( Push_Reg_DPR(src),
              OpcS, OpcP, Pop_Reg_DPR(dst) );
  ins_pipe( pipe_slow );
%}

Which means JDK-8279076 regressed x86_32 with -XX:UseSSE={0,1}, because now it would say to C2 that Op_SqrtD is not supported.",,,,,,,,,,JDK-8280857,JDK-8280850,JDK-8281733,JDK-8281983,JDK-8280968,JDK-8280929,,,,,,,,,,,,,,,,,,,,,JDK-8279076,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2vruj:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-24 08:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7200
Date: 2022-01-24 16:41:55 +0000;;;","2022-01-24 17:44;dlong;ILW = performance regression on x86_32 on sqrt = MMH = P3;;;","2022-01-26 00:34;roboduke;Changeset: a24f44d1
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-26 08:31:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a24f44d17de586c72c8343f8891e72ad8a514597
;;;","2022-01-26 02:38;shade;Fix Request (18u)

Fixes a recent regression in 18u. Applies cleanly. Test passes.;;;","2022-01-26 02:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/9
Date: 2022-01-26 10:38:12 +0000;;;","2022-01-26 03:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/124
Date: 2022-01-26 11:53:17 +0000;;;","2022-01-26 07:43;shade;Fix Request (17u)

Fixes the regression introduced by JDK-8279076. Applies cleanly. Tests pass.;;;","2022-02-11 00:57;shade;Fix Request (11u)

Fixes the x86_32 regression after JDK-8279076 backport. Applies cleanly.;;;","2022-02-11 00:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/820
Date: 2022-02-11 08:51:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Interpreter incorrectly handles uninitialized static inline type field,JDK-8280524,5066898,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2022-01-24 05:22,2022-01-25 04:27,2023-10-01 09:56,2022-01-25 04:27,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,,,"Test Failures (1)
-----------------
Custom Run Test: @Run: test21_verifier - @Test: test21:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.valhalla.inlinetypes.TestUnloadedInlineTypeField.test21_verifier()
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.AbstractTest.run(AbstractTest.java:99)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:89)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:821)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:249)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:164)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 5 more
Caused by: java.lang.ExceptionInInitializerError
	at compiler.valhalla.inlinetypes.TestUnloadedInlineTypeField.test21(TestUnloadedInlineTypeField.java:900)
	at compiler.valhalla.inlinetypes.TestUnloadedInlineTypeField.test21_verifier(TestUnloadedInlineTypeField.java:905)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 7 more
Caused by: java.lang.NullPointerException: There cannot be a NullPointerException at bci 0 of method void compiler.valhalla.inlinetypes.TestUnloadedInlineTypeField$Test21ClassB.<clinit>()
	at compiler.valhalla.inlinetypes.TestUnloadedInlineTypeField$Test21ClassB.<clinit>(TestUnloadedInlineTypeField.java:890)
	... 10 more

	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:856)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:249)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:164)




# A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x0000024913ce3936, pid=57556, tid=4900
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-lworld3ea+0-2022-01-21-1521047.tobias.hartmann.valhalla2)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-lworld3ea+0-2022-01-21-1521047.tobias.hartmann.valhalla2, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Problematic frame:
# j  compiler.valhalla.inlinetypes.TestUnloadedInlineTypeField$Test21ClassB.<clinit>()V+0
#

Current thread (0x000002490c367620):  JavaThread ""main"" [_thread_in_Java, id=4900, stack(0x000000ee11c00000,0x000000ee11d00000)]

Stack: [0x000000ee11c00000,0x000000ee11d00000],  sp=0x000000ee11cfe1e0,  free space=1016k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  0x0000024913ce3936",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vrtv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-25 03:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/617
Date: 2022-01-25 10:57:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Revert fix for JDK-8212175 as it is not relevant anymore,JDK-8280519,5066891,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-01-24 00:44,2022-01-24 00:59,2023-10-01 09:56,2022-01-24 00:59,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,,,,,,,,,,,,,,,,,,,,"JDK-8212175 was raised to handle the compilation failure brought on by the compilers insertion of longHashCode() method into primitive classes. 

Support for this method has been pulled back and primitive classes no longer have this method synthezised for them. Hence the fix for JDK-8212175 is stale and needs to be pulled back",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vrsb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-24 00:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/615
Date: 2022-01-24 08:52:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[API-cleanup] Merge the internal API points Types.is{Primitive/Value}Class with Type.is{Primitive/Value}Class,JDK-8280514,5066885,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-01-23 21:48,2022-01-24 00:01,2023-10-01 09:56,2022-01-24 00:01,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,,,,,,,,,,,,,,,,,,,,"In earlier review discussions with Maurizio, it was agreed that these API points add just null check and not much other value to justify their weight and independent existence. After attribution, type notes are not null, they are set to ErrorType, so these are redundant splits.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vrqz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-23 23:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/614
Date: 2022-01-24 07:53:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/cds/appcds/TestDumpClassListSource.java fails on platforms without AppCDS custom class loaders support,JDK-8280499,5066861,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-01-22 00:49,2022-01-26 17:22,2023-10-01 09:56,2022-01-23 20:39,19,,,,,,,,19,hotspot,,0,cds,tencent-interest,,,,,,,,,,,,,,,,,,"The failure was first observed on x86_32.
```
Command line: [/home/jdk/build/linux-x86-server-fastdebug/images/jdk/bin/java -cp /home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_TestDumpClassListSource_java/classes/0/runtime/cds/appcds/TestDumpClassListSource.d:/home/jdk/test/hotspot/jtreg/runtime/cds/appcds:/home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_TestDumpClassListSource_java/classes/0/test/lib:/home/jdk/test/lib:/home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_TestDumpClassListSource_java/classes/0/test/hotspot/jtreg/runtime/cds/appcds:/opt/jtreg/lib/javatest.jar:/opt/jtreg/lib/jtreg.jar -Xshare:dump -XX:SharedClassListFile=test-classlist.list -XX:SharedArchiveFile=test-hello.jsa -cp /home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_TestDumpClassListSource_java/scratch/0/test-hello.jar ClassListWithCustomClassNoSource 3 ]
[2022-01-22T08:43:15.974046758Z] Gathering output for process 1849
[ELAPSED: 198 ms]
[logging stdout to /home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_TestDumpClassListSource_java/scratch/0/runtime.cds.appcds.TestDumpClassListSource.java-0004-custom-dump.stdout]
[logging stderr to /home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_TestDumpClassListSource_java/scratch/0/runtime.cds.appcds.TestDumpClassListSource.java-0004-custom-dump.stderr]
[STDERR]
An error has occurred while processing class list file test-classlist.list 723:32.
AppCDS custom class loaders not supported on this platform:
Hello id: 701 super: 0 source: /home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_TestDumpClassListSource_java/scratch/0/test-hello.jar
                               ^

STDERR:
java.lang.RuntimeException: Archive file test-hello.jsa should be created
        at TestDumpClassListSource.checkFileExistence(TestDumpClassListSource.java:87)
        at TestDumpClassListSource.main(TestDumpClassListSource.java:210)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Archive file test-hello.jsa should be created
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Archive file test-hello.jsa should be created
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279009,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vrln:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-22 00:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7187
Date: 2022-01-22 08:54:03 +0000;;;","2022-01-23 20:39;roboduke;Changeset: 30cd47d4
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-01-24 04:37:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/30cd47d42124540303e5f5dbbd509b58d8fb90a0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: Undefined Behaviour in class Assembler,JDK-8280497,5066859,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yadongwang,yadongwang,yadongwang,2022-01-21 23:22,2022-08-05 00:47,2023-10-01 09:56,2022-01-26 17:45,repo-riscv-port,,,,,,,,repo-riscv-port,hotspot,,0,,,,,,,,,,,,,,,,,,,,The same problem exists on the riscv platfom. So we follow https://bugs.openjdk.java.net/browse/JDK-8276563.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276563,JDK-8291952,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,repo-riscv-port,,linux,,,,,"0|i2vrl7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-25 21:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/riscv-port/pull/53
Date: 2022-01-26 05:28:15 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use cross-module syntax for cross-module links,JDK-8280492,5066854,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2022-01-21 18:54,2022-01-26 17:24,2023-10-01 09:56,2022-01-24 12:18,19,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"After JDK-8164408, javadoc supports a syntax for cross-module links. The JDK docs should use that syntax to support enabling the ""reference"" category doclint checks in the future.",,,,,,,,,,,,,,,,,,,,,,,,JDK-8280488,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280534,JDK-8164408,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vrk3:",9223372036854775807,b07,,,,,,,,,,,,"2022-01-22 13:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7189
Date: 2022-01-22 21:09:03 +0000;;;","2022-01-24 12:18;roboduke;Changeset: 8e82d002
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-01-24 20:16:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8e82d0021c119b7793870811fad37d7659c1174d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
doclint reference checks withstand warning suppression,JDK-8280488,5066850,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,darcy,darcy,2022-01-21 15:45,2022-02-07 13:05,2023-10-01 09:56,2022-01-31 14:49,18,19,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,"After JDK-8274926, the doclint reference checks are still enabled it the code in question is annotated with @SuppressWarnings(""doclint"") or @SuppressWarnings(""doclint:reference"").

This was noticed when @SuppressWarnings(""doclint:reference"") did not stop doclint errors in the JDK build for cross-module links.",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280492,,,,,,,,,,JDK-8274926,JDK-8164408,,,,,,,,,,,JDK-8278175,JDK-8280534,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vrj7:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-01-21 17:51;jjg;There are two separate but related issues here, with a variety of possible solutions.

Issue #1: the implementation of @SuppressWarnings(""doclint"") does not match the spec given in the man page and CSR.    The implementation just suppresses warnings (but not errors) while the spec says that warnings and errors are suppressed.

Issue #2: we want to be able to disable diagnostics for selected references when the target is not available on the class or module path ... while still being able to detect typos in references when it matters.

There are two obvious fixes for Issue #1 ... either fix the implementation or fix the spec.   The current implementation seems more natural (@SuppressWarnings should just suppress warnings) but the annotation is the only reasonable mechanism we have to provide localized suppression of issues, so if we can't make the errors go away (somehow) we might need to be able to suppress them.

For issue #2, there are various possible fixes:

Fix #2a:  allow @SuppressWarnings(""doclint"") to suppress errors as well

Fix #2b: provide an ""sledgehammer"" mode to downgrade all doclint errors to warnings when invoked from javac

Fix #2c: provide a more precise mode to downgrade issues resulting from cross-module references from errors to warnings when the target module is not in the module graph.  This mode might be enabled from javac, but not from javadoc (so that javadoc will still catch issues with mis-spelled module names.)   We would need a variant of this rule for non-modular code.

If we go with #2b or #2c, then the fix for Issue #1 could be to just update the spec to match the implementation.

Overall, the general issue here seems specific to ""forward references"" when the reference is potentially valid but the target is not on the class path or module path.  Accommodating this use case seems the best way to address this problem, while still retaining the ability to post errors for significant issues that are locally fixable.

And, (to be clear) if we can find a way to downgrade the forward cross-module references from errors to warnings, they can then be suppressed with @SuppressWarnings.;;;","2022-01-21 17:59;darcy;Brainstorming suggestion for 2, treat accordingly: allow distinguished syntax for cross-module links. For example, from the base module instead of

    @see  java.awt.FileDialog#setFilenameFilter(java.io.FilenameFilter)

to link to a method in java.desktop use

    @see  java.desktop:java.awt.FileDialog#setFilenameFilter(java.io.FilenameFilter)

When compiling in single module mode, such cross-module links could be skipped other than for syntactic checking, etc.;;;","2022-01-21 18:05;jjg;I'd prefer to stay with the de-facto standard use of '/' to separate module and package name, rather than introduce yet another syntax.   But otherwise yes, I agree with the suggestion ... with the refinement that the downgrade only happens if the module is not found in the overall module graph.

So, summary,   if in java.base you use    
    @see java.desktop/java.awt.FileDialog#setFilenameFilter(java.io.FilenameFilter) 
you'll get a (suppressible) warning in javac

but if in java.desktop you use
    @see java.base/java.lang.NotAnObject
you'll (always) get an error ... because the module will be in the module graph

;;;","2022-01-21 18:12;darcy;Sounds good; I'll attach a candidate patch to java.base within the next few days that can be used to help verify the change.;;;","2022-01-22 13:38;darcy;PR of library updates using proposed syntax: https://git.openjdk.java.net/jdk/pull/7189

What is the idiom (if any) to make a @see/@link reference to a module rather than a package? Some modules in the JDK have the same name as a package.;;;","2022-01-24 15:10;jjg;If the module is the same as the package, you ought to be able to go 
    @see name/
i.e. with a trailing '/', (but that might be wishful thinking from other environments.);;;","2022-01-25 18:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7222
Date: 2022-01-26 02:20:24 +0000;;;","2022-01-31 14:49;roboduke;Changeset: ee3be0bb
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-01-31 22:47:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ee3be0bb567f0e28fd3e920ef3685607d0a8d656
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Window transparency bug on Linux,JDK-8280482,5066842,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,aivanov,aivanov,2022-01-21 13:23,2023-08-10 06:05,2023-10-01 09:56,2023-07-31 21:31,11,17,21,22,,,,,22,client-libs,,0,amazon-interest,reproducer-yes,sn_141,sn_143,sn_149,webbug,,,,,,,,,,,,,,"In a multi-screen setup, some windows could lose translucency.

The sample app creates a grid of translucent windows that covers the screen. 

Expected results:

The entire screen is covered with windows which have the specified level of translucency.

Actual results:

Some of the areas of the screen appear darker than expected as if that window lost translucency.


Originally reported on client-dev mailing list:
https://mail.openjdk.java.net/pipermail/client-libs-dev/2022-January/002064.html","Ubuntu Linux with multiple screens

Linux Mint with multiple screens",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-01-22 05:23;aivanov;TransparencyBug One-by-One Ubuntu 20.04.3.png;https://bugs.openjdk.org/secure/attachment/97697/TransparencyBug+One-by-One+Ubuntu+20.04.3.png","2022-01-22 03:58;aivanov;TransparencyBug One-by-One.png;https://bugs.openjdk.org/secure/attachment/97694/TransparencyBug+One-by-One.png","2022-01-22 03:59;aivanov;TransparencyBug.java;https://bugs.openjdk.org/secure/attachment/97696/TransparencyBug.java","2022-01-24 05:24;aivanov;VirtualBox Ubuntu-20.04 TransparencyBug.png;https://bugs.openjdk.org/secure/attachment/97702/VirtualBox+Ubuntu-20.04+TransparencyBug.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2vrhf:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-01-21 14:31;prr;Is this actually specific to Mint ?
Can it be reproduced on a supported OS such as Ubuntu or Oracle Linux ? 
I don't have any way to verify this one way or another - mostly meaning a multi-screen system handy.;;;","2022-01-22 04:11;aivanov;I updated the test case so that it creates each window on the EDT separately. This way the problem is seen right away. (The screenshot is attached, TransparencyBug One-by-One.png.) Some of the windows are darker than others: there's an area of 4 dark windows tiles on the main monitor, there are many windows which have different transparency level on the secondary monitor.

In the previous version, while all the windows were created as one go on the EDT, each window was displayed with the right colour initially. Once the EDT got unblocked, I saw something like animation where the window tiles on the screen changed colours. The colours remained stable afterwards.;;;","2022-01-22 05:28;aivanov;[~prr] I reproduced it on Ubuntu 20.04.3 using a Live image. It does not have artifacts on the second monitor yet there's still an area of 2×2 tiles on the main monitor which is rendered darker than expected. See the attached screenshot: ""TransparencyBug One-by-One Ubuntu 20.04.3.png"".;;;","2022-01-24 05:12;aivanov;The problem can be reproduced in VirtualBox with multiple screens using Ubuntu 20.04.3. An area on the main screen has dark non-translucent windows.;;;","2023-03-22 02:41;sgehwolf;https://stackoverflow.com/questions/75807131/java-swing-window-looses-transparency-on-secondary-monitors-in-linux is some nice analysis of the problem.;;;","2023-03-22 23:25;tr;Reproducible on Virtual VM Ubuntu 21.10. Thank you [~sgehwolf] for the analysis link, will look into it.;;;","2023-03-24 14:49;karianna;A Eclipse Temurin user observed something similar...

Details on https://stackoverflow.com/questions/75807131/java-swing-window-looses-transparency-on-secondary-monitors-in-linux

TL;DR... Swing correctly selects a 32 bit X11 visual to support transparency but this gets changed to the default X11 visual which is 24 bits when the window is moved. 

They applied the following monkey patch to switch the default configurations to one with transparency support.

```
for (GraphicsDevice device : GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()) {
    if (!device.getDefaultConfiguration().isTranslucencyCapable()) {
        try {
            Field field = Class.forName(""sun.awt.X11GraphicsDevice"").getDeclaredField(""defaultConfig"");
            field.setAccessible(true);
            for (GraphicsConfiguration gc : device.getConfigurations()) {
                if (gc.isTranslucencyCapable()) {
                    field.set(device, gc);
                    break;
                }
            }
        } catch (ReflectiveOperationException e) {
            e.printStackTrace();
        }
    }
}
```

They then came up with another patch using a different approach

```
AtomicBoolean updating = new AtomicBoolean();
frame.addPropertyChangeListener(""graphicsConfiguration"", new PropertyChangeListener() {
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (updating.compareAndSet(false, true)) {
            /*
             * trigger frame to pick a graphics context with transparency support again
             */
            try {
                frame.setBackground(new Color(0, 0, 0, 255));
                frame.setBackground(new Color(0, 0, 0, 0));
            } finally {
                updating.set(false);
            }
        }
    }
});
```
;;;","2023-07-11 03:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14825
Date: 2023-07-11 10:50:13 +0000;;;","2023-07-31 21:31;dukebot;Changeset: 0a3c6d6b
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-08-01 04:28:42 +0000
URL:       https://git.openjdk.org/jdk/commit/0a3c6d6bd010231d02e92016037149e85fb1db3f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macOS] : hotspot arm64 bug exposed by latest clang,JDK-8280476,5066835,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,dcubed,prr,prr,2022-01-21 12:14,2022-05-05 11:42,2023-10-01 09:56,2022-02-04 09:38,11.0.15,17.0.1,19,,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,redhat-interest,,,,,,,,,,,,"The latest clang compiler (not yet used in OpenJDK tool chains) exposes a bug in the macos aarch64 port  which causes a crash on startup (ie just running java -version)

This was reported by Apple as below :-
New optimizations in recent versions of clang are exposing undefined behavior in OpenJDK causing the JVM to crash during initialization on Apple Silicon 
 

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (assembler_aarch64.hpp:248), pid=33335, tid=7939
#  guarantee(val < (1ULL << nbits)) failed: Field too big for insn
#
# JRE version:  (17.0.1) (build )
# Java VM: OpenJDK 64-Bit Server VM (17.0.1-internal+0, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
#

---------------  S U M M A R Y ------------

Command Line: 

Host: ""MacBookAir10,1"" arm64 24 MHz, 8 cores, 8G, Darwin 21.3.0, macOS 12.2 (21D33)
Time: Wed Dec 22 07:42:22 2021 PST elapsed time: 0.021249 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x0000000157014c00):  JavaThread ""Unknown thread"" [_thread_in_vm, id=7939, stack(0x000000016d8b0000,0x000000016dab3000)]

Stack: [0x000000016d8b0000,0x000000016dab3000],  sp=0x000000016dab20c0,  free space=2056k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0xa294b0]  _ZN7VMError14report_and_dieEiPKcS1_PcP6ThreadPhPvS6_S1_im+0x4b0
V  [libjvm.dylib+0xa29c4c]  _ZN7VMError14report_and_dieEP6ThreadPvPKciS4_S4_Pc+0x40
V  [libjvm.dylib+0x2c83b8]  _Z15report_vm_errorPKciS0_S0_z+0x5c
V  [libjvm.dylib+0x879334]  _ZN9Assembler4andrEP12RegisterImplS1_y+0x94
V  [libjvm.dylib+0x95d1b0]  _ZN13StubGenerator18generate_call_stubERPh+0x9ac
V  [libjvm.dylib+0x92e99c]  _ZN13StubGenerator16generate_initialEv+0x34
V  [libjvm.dylib+0x92e2e0]  _Z22StubGenerator_generateP10CodeBufferb+0x84
V  [libjvm.dylib+0x95f458]  _ZN12StubRoutines11initialize1Ev+0xc8
V  [libjvm.dylib+0x457878]  _Z12init_globalsv+0x28
V  [libjvm.dylib+0x9bd9e0]  _ZN7Threads9create_vmEP14JavaVMInitArgsPb+0x418
V  [libjvm.dylib+0x4f5514]  JNI_CreateJavaVM+0x78
C  [libjli.dylib+0x4608]  JavaMain+0x100
C  [libjli.dylib+0x74a0]  ThreadJavaMain+0xc
C  [libsystem_pthread.dylib+0x7240]  _pthread_start+0x94

-----
The problem is undefined behavior in replicate:

  uint64_t replicate(uint64_t bits, int nbits, int count)
  {
    uint64_t result = 0;
    // nbits may be 64 in which case we want mask to be -1
    uint64_t mask = ones(nbits);
    for (int i = 0; i < count ; i++) {
      result <<= nbits;
      result |= (bits & mask);
    }
    return result;
  }

If nbits is 64, the shift has undefined behavior since the size of the shifted value is 64.  Adding a handler for this special case at the start of replicate will address this problem, eg:

--- a/src/hotspot/cpu/aarch64/immediate_aarch64.cpp
+++ b/src/hotspot/cpu/aarch64/immediate_aarch64.cpp
@@ -129,8 +129,13 @@ static inline uint32_t uimm(uint32_t val, int hi, int lo)

uint64_t replicate(uint64_t bits, int nbits, int count)
{
+  // Special case nbits == 64 since the resulting shift below would result in undefined behavior
+  if (nbits == 64) {
+    assert(count <= 1);
+    return bits;
+  }
+
  uint64_t result = 0;
-  // nbits may be 64 in which case we want mask to be -1
  uint64_t mask = ones(nbits);
  for (int i = 0; i < count ; i++) {
    result <<= nbits;

",,,,,,,,,,JDK-8286224,JDK-8285655,JDK-8283342,JDK-8283341,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2vrfv:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-01-25 11:09;mseledtsov;ILW = HHL = P2
(workaround - do not upgrade toolchain);;;","2022-01-25 11:58;dcubed;[~prr] - What's the version info for the clang that ran into this problem?;;;","2022-01-25 12:19;dcubed;Just for the record, the crashing code reported in the description note is here:

  void f(unsigned val, int msb, int lsb) {
    int nbits = msb - lsb + 1;
    guarantee(val < (1ULL << nbits), ""Field too big for insn"");  // FAILED here
    assert_cond(msb >= lsb);
    unsigned mask = checked_cast<unsigned>(right_n_bits(nbits));
    val <<= lsb;
    mask <<= lsb;
    insn |= val;
    assert_cond((bits & mask) == 0);
#ifdef ASSERT
    bits |= mask;
#endif
  }

The above is for JDK17.0.1. For the jdk/jdk repo, the line numbers are different
and the function itself is different:

  void f(unsigned val, int msb, int lsb) {
    int nbits = msb - lsb + 1;
    guarantee(val < (1ULL << nbits), ""Field too big for insn"");
    assert_cond(msb >= lsb);
    val <<= lsb;
    insn |= val;
#ifdef ASSERT
    unsigned mask = checked_cast<unsigned>(right_n_bits(nbits));
    mask <<= lsb;
    assert_cond((bits & mask) == 0);
    bits |= mask;
#endif
  }

but all the changes are after the failing guarantee() so that shouldn't
be an issue.

The replicate() function itself is unchanged between JDK17.0.1 and jdk/jdk.

;;;","2022-01-25 12:47;prr;[~prr] - What's the version info for the clang that ran into this problem?

I asked the same question.
Initial answer was clang 12.0.0 and later but since we already use Xcode 12.4 I'm not sure that can be right
so I am waiting for an updated answer on that.;;;","2022-01-26 14:14;dcubed;I set up an environment to try and reproduce this issue:

- installed Xcode: Version 13.2.1 (13C100) on my M1 MacMini
- I ran the following command to reset the Xcode version:
  $ sudo xcode-select -r
- I verified the Xcode version:
  $ xcode-select -p
  /Applications/Xcode.app/Contents/Developer

- Ran configure to use the newly installed Xcode instead of the official devkit:
  $ sh jib.sh configure -- --without-devkit 2>&1 | tee configure.without-devkit.log

- Ran make to build the bits with the newly installed Xcode instead of the official devkit:
  $ make CONF=macosx-aarch64 jdk-image test-image 2>&1 | tee make.without-devkit.log

- Set JAVA_HOME:
  $ export JAVA_HOME=`pwd`/build/macosx-aarch64/images/jdk

Test the built bits:

$ $JAVA_HOME/bin/java -version
java version ""19-internal"" 2022-09-20
Java(TM) SE Runtime Environment (build 19-internal+0-2022-01-26-2153301.dcubed...)
Java HotSpot(TM) 64-Bit Server VM (build 19-internal+0-2022-01-26-2153301.dcubed..., mixed mode, sharing)

$ $JAVA_HOME/bin/java -Xinternalversion
Java HotSpot(TM) 64-Bit Server VM (19-internal+0-2022-01-26-2153301.dcubed...) for bsd-aarch64 JRE (19-internal+0-2022-01-26-2153301.dcubed...), built on Jan 26 2022 16:56:37 by ""dcubed"" with clang Apple LLVM 13.0.0 (clang-1300.0.29.30)

So it looks like LLVM 13.0.0/clang-1300.0.29.30 does not crash with ""java -version"" with the
JDK19 repo.;;;","2022-01-27 08:51;dcubed;Based on this timestamp from the description note:

> Time: Wed Dec 22 07:42:22 2021 PST elapsed time: 0.021249 seconds (0d 0h 0m 0s)

we know that the repo that was used to build those bits could be no newer than
Wed Dec 22 07:42:22 2021 PST. I've created a new repo based on OpenJDK17.0.1
and that repo is baselined at this changeset:

$ git log HEAD^!
commit 9d0bfe1108c8a264ecf4f841cb426a22f872c85c (HEAD)
Author: Zhengyu Gu <zgu@openjdk.org>
Date:   Wed Dec 22 14:12:01 2021 +0000

    8265150: AsyncGetCallTrace crashes on ResourceMark
    
    Backport-of: 267c024eb52acd1611188dd5b1417b877ff3eafd

14:12:01 Z => 09:12:01 ET -> 06:12:.01 PT

The next changeset was integrated at:

11:41 ET -> 08:41 PT and could not have been included in this build.;;;","2022-01-27 08:58;dcubed;I built the bits and ran ""java -version"":

$ build/macosx-aarch64/images/jdk/bin/java -version
java version ""17.0.3-internal"" 2022-04-19 LTS
Java(TM) SE Runtime Environment (build 17.0.3-internal+0-LTS-2022-01-27-1638291.dcubed...)
Java HotSpot(TM) 64-Bit Server VM (build 17.0.3-internal+0-LTS-2022-01-27-1638291.dcubed..., mixed mode, sharing)

No crash. Sigh...

To verify that my newer Xcode was used:

$ build/macosx-aarch64/images/jdk/bin/java -Xinternalversion
Java HotSpot(TM) 64-Bit Server VM (17.0.3-internal+0-LTS-2022-01-27-1638291.dcubed...) for bsd-aarch64 JRE (17.0.3-internal+0-LTS-2022-01-27-1638291.dcubed...), built on Jan 27 2022 11:41:45 by ""dcubed"" with clang Apple LLVM 13.0.0 (clang-1300.0.29.30)


Okay, so I'm giving up on reproducing this crash. I'm missing vital info:

- the LLVM/clang version used by the person at Apple
- the exact OpenJDK17.0.1 changeset that the repo was basedline at

I'm going to move forward with this bug fix from the code inspection
point of view rather than a reproducible crash point of view.;;;","2022-01-28 08:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7270
Date: 2022-01-28 16:49:32 +0000;;;","2022-02-04 09:38;roboduke;Changeset: f5d6fddc
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-02-04 17:37:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f5d6fddc6df8c5c5456a2544b131833d5227292b
;;;","2022-02-05 19:49;prr;As to which compiler versions expose this bug I am told :

It is reportedly in the 12.0.0 OSS release, and later.
It is definitely in the Xcode 13.3 Beta release, and later.;;;","2022-02-08 14:46;dcubed;Here info for my latest experiment:

% sw_vers                     
ProductName:	macOS
ProductVersion:	12.2
BuildVersion:	21D5039d


% /usr/bin/xcodebuild -version
Xcode 13.3
Build version 13E5095k


% git log HEAD^!              
commit d4b99bc029771d29c2119a9b5f381cae3fe21ec1 (HEAD -> before-JDK-8280476)
Author: Albert Mingkun Yang <ayang@openjdk.org>
Date:   Fri Feb 4 16:03:50 2022 +0000

    8281120: G1: Rename G1BlockOffsetTablePart::alloc_block to update_for_block
    
    Reviewed-by: tschatzl, iwalulya, sjohanss

The repo does not build when positioned at the above changeset:

=== Output from failing command(s) repeated here ===
* For target hotspot_variant-server_libjvm_gtest_objs_test_networkUtilization.o:
In file included from /Users/ddaugher/8280476_for_jdk19.git/open/test/hotspot/gtest/jfr/test_networkUtilization.cpp:45:
In file included from /Users/ddaugher/8280476_for_jdk19.git/open/test/hotspot/gtest/unittest.hpp:51:
In file included from /Users/ddaugher/jib-ddaugher/install/jpg/infra/builddeps/gtest/1.8.1/gtest-1.8.1.tar.gz/googletest-release-1.8.1/googlemock/include/gmock/gmock.h:59:
/Users/ddaugher/jib-ddaugher/install/jpg/infra/builddeps/gtest/1.8.1/gtest-1.8.1.tar.gz/googletest-release-1.8.1/googlemock/include/gmock/gmock-actions.h:484:3: warning: definition of implicit copy constructor for 'PolymorphicAction<testing::internal::ReturnNullAction>' is deprecated because it has a user-declared copy assignment operator [-Wdeprecated-copy]
  GTEST_DISALLOW_ASSIGN_(PolymorphicAction);
  ^
/Users/ddaugher/jib-ddaugher/install/jpg/infra/builddeps/gtest/1.8.1/gtest-1.8.1.tar.gz/googletest-release-1.8.1/googletest/include/gtest/internal/gtest-port.h:928:8: note: expanded from macro 'GTEST_DISALLOW_ASSIGN_'
  void operator=(type const &) GTEST_CXX11_EQUALS_DELETE_
       ^
/Users/ddaugher/jib-ddaugher/install/jpg/infra/builddeps/gtest/1.8.1/gtest-1.8.1.tar.gz/googletest-release-1.8.1/googlemock/include/gmock/gmock-actions.h:1125:10: note: in implicit copy constructor for 'testing::PolymorphicAction<testing::internal::ReturnNullAction>' first required here
  return MakePolymorphicAction(internal::ReturnNullAction());
         ^
/Users/ddaugher/jib-ddaugher/install/jpg/infra/builddeps/gtest/1.8.1/gtest-1.8.1.tar.gz/googletest-release-1.8.1/googlemock/include/gmock/gmock-actions.h:484:3: warning: definition of implicit copy constructor for 'PolymorphicAction<testing::internal::ReturnVoidAction>' is deprecated because it has a user-declared copy assignment operator [-Wdeprecated-copy]
  GTEST_DISALLOW_ASSIGN_(PolymorphicAction);
  ^
   ... (rest of output omitted)

* All command lines available in /Users/ddaugher/8280476_for_jdk19.git/build/macosx-aarch64/make-support/failure-logs.
=== End of repeated output ===;;;","2022-02-08 15:02;dcubed;Running configure like this works around the gtest build problems:

$ sh jib.sh configure -- --disable-warnings-as-errors --without-gtest --without-devkit 2>&1 | tee configure.without-devkit-13.3-beta.log
[jib LOG] Bootstrapping com.oracle.java.jib jib 3.0-SNAPSHOT c82367a
[jib LOG] Mirror site main
[jib LOG] JIB Java CLI Version: jib 3.0-SNAPSHOT Build: c82367a Date: Tue Jan 04 16:52:16 UTC 2022

<snip>

Configuration summary:
* Name:           macosx-aarch64
* Debug level:    release
* HS debug level: product
* JVM variants:   server
* JVM features:   server: 'cds compiler1 compiler2 epsilongc g1gc jfr jni-check jvmci jvmti management oracle-src parallelgc serialgc services vm-structs zgc' 
* OpenJDK target: OS: macosx, CPU architecture: aarch64, address length: 64
* Version string: 19-internal+0-2022-02-08-2252500.ddaugher... (19-internal)

Tools summary:
* Boot JDK:       java version ""17"" 2021-09-14 LTS Java(TM) SE Runtime Environment (build 17+35-LTS-2724) Java HotSpot(TM) 64-Bit Server VM (build 17+35-LTS-2724, mixed mode, sharing) (at /Users/ddaugher/jib-ddaugher/install/jdk/17/35/bundles/macos-aarch64/jdk-17_macos-aarch64_bin.tar.gz/jdk-17.jdk/Contents/Home)
* Toolchain:      clang (clang/LLVM from Xcode 13.3)
* C Compiler:     Version 13.1.6 (at /usr/bin/clang)
* C++ Compiler:   Version 13.1.6 (at /usr/bin/clang++)

Build performance summary:
* Build jobs:     8
* Memory limit:   16384 MB

And running the build like this repros the original report bug:

$ make CONF_NAME=macosx-aarch64 | tee make.without-devkit-13.3-beta.log
Building configuration 'macosx-aarch64' (matching CONF_NAME=macosx-aarch64)
Building configuration 'macosx-aarch64' (matching CONF_NAME=macosx-aarch64)
Building target 'default (product-bundles test-bundles static-libs-bundles)' in configuration 'macosx-aarch64'

<snip>

Compiling 4 files for BUILD_JIGSAW_TOOLS
Optimizing the exploded image
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (assembler_aarch64.hpp:251), pid=96642, tid=9987
#  guarantee(val < (1ULL << nbits)) failed: Field too big for insn
#
# JRE version:  (19.0) (build )
# Java VM: Java HotSpot(TM) 64-Bit Server VM (19-internal+0-2022-02-08-2252500.ddaugher..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /Users/ddaugher/8280476_for_jdk19.git/open/make/hs_err_pid96642.log
#
#
;;;","2022-02-08 15:12;dcubed;And with the repo rolled forward by one changeset to:

% git log HEAD^!
commit f5d6fddc6df8c5c5456a2544b131833d5227292b (HEAD -> JDK-8280476)
Author: Daniel D. Daugherty <dcubed@openjdk.org>
Date:   Fri Feb 4 17:37:01 2022 +0000

    8280476: [macOS] : hotspot arm64 bug exposed by latest clang
    
    Reviewed-by: kbarrett, adinn

And then a clean configure and rebuild works:

% build/macosx-aarch64/jdk/bin/java -version
java version ""19-internal"" 2022-09-20
Java(TM) SE Runtime Environment (build 19-internal+0-2022-02-08-2303409.ddaugher...)
Java HotSpot(TM) 64-Bit Server VM (build 19-internal+0-2022-02-08-2303409.ddaugher..., mixed mode)

% build/macosx-aarch64/jdk/bin/java -Xinternalversion
Java HotSpot(TM) 64-Bit Server VM (19-internal+0-2022-02-08-2303409.ddaugher...) for bsd-aarch64 JRE (19-internal+0-2022-02-08-2303409.ddaugher...), built on Feb  8 2022 23:06:27 by ""ddaugher"" with clang Apple LLVM 13.1.6 (clang-1316.0.20.6)

So this verifies that the fix does solve the problem.;;;","2022-03-16 06:10;vkempik;Fix Request (11u, 17u): I would like to backport this fix to 11u/17u. The fix is trivial and adds sanity check to prevent undefined behaviour. Applies clean;;;","2022-03-16 06:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/259
Date: 2022-03-16 13:04:49 +0000;;;","2022-03-16 06:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/897
Date: 2022-03-16 13:05:37 +0000;;;","2022-04-11 02:22;sgehwolf;For the record, apparently this also affects Xcode 13.3. Xcode 13.2.1 seems fine. Based on info from: https://github.com/graalvm/labs-openjdk-17/issues/2;;;","2022-04-12 01:17;clanger;Fix request (18u):
Add fix for UB with latest Xcode versions. Applies clean.;;;","2022-04-12 01:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/99
Date: 2022-04-12 08:15:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Garbage value passed to getLocaleInfoWrapper in HostLocaleProviderAdapter_md,JDK-8280474,5066833,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2022-01-21 11:19,2022-08-25 12:05,2023-10-01 09:56,2022-01-24 11:32,11,17,18,19,,,,,19,core-libs,,0,redhat-interest,,,,,,,,,,,,,,,,,,,"Reported by clang-tidy:
https://github.com/openjdk/jdk/blame/739769c8fc4b496f08a92225a12d07414537b6c0/src/java.base/windows/native/libjava/HostLocaleProviderAdapter_md.c#L838
isGenitive is only assigned when style contains CALENDAR_STYLE_STANDALONE_MASK
otherwise it contains garbage.

FYI [~naoto]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2vrff:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,Verified,,"2022-01-21 11:30;naoto;`isGenitive` needs to be initialized to zero.;;;","2022-01-21 11:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7184
Date: 2022-01-21 19:28:21 +0000;;;","2022-01-24 11:32;roboduke;Changeset: a5416669
Author:    Daniel Jeliński <djelinski@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2022-01-24 19:31:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a5416669a57a7739af13efc32ec084560527862b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CI: Support unresolved JVM_CONSTANT_Dynamic constant pool entries ,JDK-8280473,5066832,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,vlivanov,vlivanov,2022-01-21 09:54,2022-04-04 00:27,2023-10-01 09:56,2022-02-14 10:48,11,17,18,19,,,,,19,hotspot,,0,ci,oracle-triage-19,performance,,,,,,,,,,,,,,,,,"Support unresolved dynamic constants in CI.

ciConstant ciEnv::get_constant_by_index_impl(const constantPoolHandle& cpool,
                                             int pool_index, int cache_index,
                                             ciInstanceKlass* accessor) {
...
  } else if (tag.is_dynamic_constant()) {
    return ciConstant();
...

Right now, unresolved JVM_CONSTANT_Dynamic CP entries bail out compilations (both C1 and C2):

   201     410   91    b  1       compiler.runtime.TestConstantsInError$Test_CD_9/0x0000000800c11000::test (3 bytes)
   202 compilation bailout: could not resolve a constant
   203     410   91    b  1       compiler.runtime.TestConstantsInError$Test_CD_9/0x0000000800c11000::test (3 bytes)   COMPILE SKIPPED: could not resolve a constant (retry at different tier)


    296   64    b        Test_CD/0x0000000800c0a400::test (3 bytes)
    296   64    b        Test_CD/0x0000000800c0a400::test (3 bytes)   COMPILE SKIPPED: cannot parse method (retry at different tier)


src/hotspot/share/c1/c1_GraphBuilder.cpp:
void GraphBuilder::load_constant() {
  ciConstant con = stream()->get_constant();
  if (con.basic_type() == T_ILLEGAL) {
    // FIXME: an unresolved Dynamic constant can get here,
    // and that should not terminate the whole compilation.
    BAILOUT(""could not resolve a constant"");

src/hotspot/share/ci/ciTypeFlow.cpp:
// ciTypeFlow::StateVector::do_ldc
void ciTypeFlow::StateVector::do_ldc(ciBytecodeStream* str) {
  ciConstant con = str->get_constant();
  if (con.is_valid()) {
    ...
  } else {
    if (str->is_unresolved_klass_in_error()) {
      trap(str, NULL, Deoptimization::make_trap_request(Deoptimization::Reason_unhandled,
                                                        Deoptimization::Action_none));
    } else {
      // OutOfMemoryError in the CI while loading constant
      push_null();
      outer()->record_failure(""ldc did not link"");
    }

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270928,,,JDK-8281942,,,,,,,,,,,,JDK-8279822,JDK-8185992,JDK-8186046,JDK-8282194,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vrf7:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-25 14:04;vlivanov;It looks like it is a source of serious performance issues for those who depend on ConstantDynamic. Turning it into a bug.;;;","2022-01-25 14:08;vlivanov;https://mail.openjdk.java.net/pipermail/hotspot-compiler-dev/2022-January/053132.html;;;","2022-01-25 14:08;vlivanov;Also, JDK-8270928 which I was unaware of.;;;","2022-01-26 04:13;chagedorn;ILW = Performance limitation due to missing support of unresolved dynamic constants in CI, medium?, no workaround = MMH = P3;;;","2022-02-10 05:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7423
Date: 2022-02-10 11:37:18 +0000;;;","2022-02-14 10:48;roboduke;Changeset: 88fc3bfd
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-02-14 18:46:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/88fc3bfdff7f89a02fcfb16909df144e6173c658
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Confusing instanceof check in HijrahChronology.range,JDK-8280470,5066828,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2022-01-21 08:59,2022-01-31 15:22,2023-10-01 09:56,2022-01-25 00:09,18,19,,,,,,,19,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,"Parameter type is already known to be 'ChronoField'. There is no sense to use instanceof check.

    public ValueRange range(ChronoField field) {
        checkCalendarInit();
        if (field instanceof ChronoField) {
            ChronoField f = field;
            return switch (f) {
                case DAY_OF_MONTH -> ValueRange.of(1, 1, getMinimumMonthLength(), getMaximumMonthLength());
                case DAY_OF_YEAR -> ValueRange.of(1, getMaximumDayOfYear());
                case ALIGNED_WEEK_OF_MONTH -> ValueRange.of(1, 5);
                case YEAR, YEAR_OF_ERA -> ValueRange.of(getMinimumYear(), getMaximumYear());
                case ERA -> ValueRange.of(1, 1);
                default -> field.range();
            };
        }
        return field.range();
    }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vreb:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2022-01-21 09:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7118
Date: 2022-01-17 21:02:35 +0000;;;","2022-01-25 00:09;roboduke;Changeset: 53804720
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-01-25 08:08:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/53804720a04b5b314701de82eddf1a55798eba00
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Crashes in getConfigColormap, getConfigVisualId, XVisualIDFromVisual on Linux",JDK-8280468,5066826,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mkartashev,mkartashev,mkartashev,2022-01-21 08:49,2022-05-04 23:35,2023-10-01 09:56,2022-04-27 11:22,17,,,,,,,,19,client-libs,,0,,,,,,,,,,,,,,,,,,,,"Starting around summer of 2021, we've started to receive crash reports (SIGBUS, SIGSEGV) on Linux originating from libawt_xawt.so with stack frames falling into the following three categories. Neither of those were reproduced on site.
The crashes seem to be related to the backport of JDK-8076313 to JetBrains Runtime.

Current thread (0x00007f97ec0f3800):  JavaThread ""AWT-EventQueue-0"" [_thread_in_native, id=110867, stack(0x00007f97d2e1a000,0x00007f97d301b000)]

Stack: [0x00007f97d2e1a000,0x00007f97d301b000],  sp=0x00007f97d3015f10,  free space=2031k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libawt_xawt.so+0x366c3]  Java_sun_awt_X11GraphicsDevice_getConfigColormap+0x73
j  sun.awt.X11GraphicsDevice.getConfigColormap(II)I+0 java.desktop@11.0.11
j  sun.awt.X11GraphicsDevice.makeDefaultConfiguration()V+172 java.desktop@11.0.11
J 105853 c2 sun.awt.X11GraphicsDevice.getDefaultConfiguration()Ljava/awt/GraphicsConfiguration; java.desktop@11.0.11 (33 bytes) @ 0x00007f986e1bb770 [0x00007f986e1bb6c0+0x00000000000000b0]
J 106313 c2 javax.swing.BufferStrategyPaintManager.paint(Ljavax/swing/JComponent;Ljavax/swing/JComponent;Ljava/awt/Graphics;IIII)Z java.desktop@11.0.11 (235 bytes) @ 0x00007f986e2eaf68 [0x00007f986e2e8e00+0x0000000000002168]
J 98318 c2 javax.swing.JComponent.paint(Ljava/awt/Graphics;)V java.desktop@11.0.11 (409 bytes) @ 0x00007f986d73d38c [0x00007f986d73cc60+0x000000000000072c]
J 73257 c1 java.awt.GraphicsCallback$PaintCallback.run(Ljava/awt/Component;Ljava/awt/Graphics;)V java.desktop@11.0.11 (6 bytes) @ 0x00007f985b59d0c4 [0x00007f985b59cfc0+0x0000000000000104]
J 73254 c1 sun.awt.SunGraphicsCallback.runOneComponent(Ljava/awt/Component;Ljava/awt/Rectangle;Ljava/awt/Graphics;Ljava/awt/Shape;I)V java.desktop@11.0.11 (177 bytes) @ 0x00007f986012cbac [0x00007f986012b5e0+0x00000000000015cc]
J 73253 c1 sun.awt.SunGraphicsCallback.runComponents([Ljava/awt/Component;Ljava/awt/Graphics;I)V java.desktop@11.0.11 (167 bytes) @ 0x00007f985ebfee14 [0x00007f985ebfe6a0+0x0000000000000774]
j  java.awt.Container.paint(Ljava/awt/Graphics;)V+58 java.desktop@11.0.11
J 62857 c1 java.awt.Window.paint(Ljava/awt/Graphics;)V java.desktop@11.0.11 (72 bytes) @ 0x00007f985f4a520c [0x00007f985f4a4540+0x0000000000000ccc]
...


C  [libawt_xawt.so+0x36403]  Java_sun_awt_X11GraphicsDevice_getConfigVisualId+0x73
j  sun.awt.X11GraphicsDevice.getConfigVisualId(II)I+0 java.desktop@11.0.11
j  sun.awt.X11GraphicsDevice.makeDefaultConfiguration()V+13 java.desktop@11.0.11
j  sun.awt.X11GraphicsDevice.getDefaultConfiguration()Ljava/awt/GraphicsConfiguration;+15 java.desktop@11.0.11
j  javax.swing.RepaintManager.getDoubleBufferMaximumSize()Ljava/awt/Dimension;+46 java.desktop@11.0.11
j  javax.swing.RepaintManager.getVolatileOffscreenBuffer(Ljava/awt/Component;II)Ljava/awt/Image;+98 java.desktop@11.0.11
j  javax.swing.RepaintManager$PaintManager.paint(Ljavax/swing/JComponent;Ljavax/swing/JComponent;Ljava/awt/Graphics;IIII)Z+35 java.desktop@11.0.11
J 26358 c1 javax.swing.BufferStrategyPaintManager.paint(Ljavax/swing/JComponent;Ljavax/swing/JComponent;Ljava/awt/Graphics;IIII)Z java.desktop@11.0.11 (235 bytes) @ 0x00007f9623e63874 [0x00007f9623e63380+0x00000000000004f4]
J 25815 c1 javax.swing.RepaintManager.paint(Ljavax/swing/JComponent;Ljavax/swing/JComponent;Ljava/awt/Graphics;IIII)V java.desktop@11.0.11 (93 bytes) @ 0x00007f9623c30974 [0x00007f9623c30680+0x00000000000002f4]
J 36174 c2 javax.swing.JComponent.paint(Ljava/awt/Graphics;)V java.desktop@11.0.11 (409 bytes) @ 0x00007f9631a49448 [0x00007f9631a48c60+0x00000000000007e8]
...


C  [libX11.so.6+0x31154]  XVisualIDFromVisual+0x4
C  [libawt_xawt.so+0x3514f]  getAllConfigs+0x90f
C  [libawt_xawt.so+0x363e6]  Java_sun_awt_X11GraphicsDevice_getConfigVisualId+0x56
j  sun.awt.X11GraphicsDevice.getConfigVisualId(II)I+0 java.desktop@11.0.11
j  sun.awt.X11GraphicsDevice.makeDefaultConfiguration()V+13 java.desktop@11.0.11
J 50467 c1 sun.awt.X11GraphicsDevice.getDefaultConfiguration()Ljava/awt/GraphicsConfiguration; java.desktop@11.0.11 (33 bytes) @ 0x00007f429ee79a14 [0x00007f429ee79860+0x00000000000001b4]
J 41966 c1 javax.swing.RepaintManager.getDoubleBufferMaximumSize()Ljava/awt/Dimension; java.desktop@11.0.11 (134 bytes) @ 0x00007f429cf0be1c [0x00007f429cf0b640+0x00000000000007dc]
J 34245 c1 javax.swing.RepaintManager.getVolatileOffscreenBuffer(Ljava/awt/Component;II)Ljava/awt/Image; java.desktop@11.0.11 (243 bytes) @ 0x00007f429cb67744 [0x00007f429cb67020+0x0000000000000724]
J 42055 c1 javax.swing.RepaintManager$PaintManager.paint(Ljavax/swing/JComponent;Ljavax/swing/JComponent;Ljava/awt/Graphics;IIII)Z java.desktop@11.0.11 (201 bytes) @ 0x00007f429d0225b4 [0x00007f429d022320+0x0000000000000294]
J 21887 c1 javax.swing.BufferStrategyPaintManager.paint(Ljavax/swing/JComponent;Ljavax/swing/JComponent;Ljava/awt/Graphics;IIII)Z java.desktop@11.0.11 (235 bytes) @ 0x00007f429f195874 [0x00007f429f195380+0x00000000000004f4]
J 38591 c1 javax.swing.RepaintManager.paint(Ljavax/swing/JComponent;Ljavax/swing/JComponent;Ljava/awt/Graphics;IIII)V java.desktop@11.0.11 (93 bytes) @ 0x00007f429f2f18fc [0x00007f429f2f13c0+0x000000000000053c]
J 36546 c2 javax.swing.JComponent.paint(Ljava/awt/Graphics;)V java.desktop@11.0.11 (409 bytes) @ 0x00007f42ada94594 [0x00007f42ada93e00+0x0000000000000794]

...
(stacks trimmed for clarity).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8076313,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2vrdv:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-01-21 09:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7182
Date: 2022-01-21 17:02:38 +0000;;;","2022-02-16 04:51;mkartashev;This issue can be artificially reproduced with a patched JDK from here: https://github.com/mkartashev/jdk/commit/202afe06763ed3ebda6d042239e578af299bb7a0

The idea of the reproducer is to introduce artificial synchronization and then delay between the time `X11GraphicsEnvironment.initDevices()` invalidates the device and the time `X11GraphicsDevice.makeConfigurations()` is made aware of that. In the scenario the reproducer helps to create, `makeConfigurations()` starts working on the second monitor (`screen == 1`) and in the middle of that the screen disappears, but the screen number is changed 500+ms later, allowing `getConfigVisualId()` to be called with screen number 1 that is no longer valid. To facilitate a crash rather than random memory corruption, I pad the array of screens (`x11Screens` from `awt_GraphicsEnv.c`) with a couple of zeroed-out elements at the end. This way, when accessing past the effective end, you're de-referencing a zero (or near-zero) pointer.

Steps to reproduce are described in the `Test.java` file in the repository root of the mentioned commit; there's also a sample of the crash there. To repeat:

On a Linux box with exactly two monitors running X11 (no Wayland or XWayland),
- build branch https://github.com/mkartashev/jdk/tree/JDK-8280468-reproducer or apply the above mentioned commit as a patch,
- compile `Test.java` from the repository root,
- execute it using the freshly built `java` (both release and fastdebug builds will work),
- when this gets printed to stdout
`makeConfigurations(): waiting for the signal to continue...`
 unplug or disable the second monitor on the system,
- observe the crash.

The reproducer is quite fragile in the sense that it is built on a number of implicit assumptions about the order and quantity of several things, which may or may not differ between systems. If it doesn't crash on your system, some tweaks may be in order.
;;;","2022-04-27 11:22;dukebot;Changeset: 05dac5a2
Author:    Maxim Kartashev <maxim.kartashev@jetbrains.com>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-04-27 18:19:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/05dac5a23ed2813b2f4f2e4f007ebb93b4ae23ef
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] javac should allow compilation with abstract java.lang.Object class,JDK-8280456,5066812,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sadayapalam,fparain,fparain,2022-01-21 06:29,2022-01-25 16:33,2023-10-01 09:56,2022-01-25 16:33,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,,,,,,,"The JVMS draft for value classes expects the java.lang.Object class to be abstract. In order to minimize the impact on users and legacy code, statements like ""new Object()"" should still be allowed.

javac already translates ""new Object()"" into a static call to java.util.Objects.newIdentity(), however, if the java.lang.Object class is made abstract, the compilation fails:

ObjectTest.java:5: Note: Object cannot be instantiated directly; a subclass of Object will be instantiated instead, by invoking java.util.Objects.newIdentity()
    Object o = new Object();
               ^
ObjectTest.java:5: error: Object is abstract; cannot be instantiated
    Object o = new Object();


javac should allow compilation of this code without generating an error.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vrar:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-21 06:56;sadayapalam;So 

(1) javac should not choke on abstract Object i.e no Object is abstract; cannot be instantiated error
(2) Continue to warn Object cannot be instantiated directly; a subclass of Object will be instantiated instead, by invoking
(3) Continue to translate ""new Object()"" into a static call to java.util.Objects.newIdentity()

??

Does this capture what we want ?? ;;;","2022-01-21 07:12;fparain;All three statements are correct.;;;","2022-01-25 02:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/616
Date: 2022-01-25 10:11:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"JSSE Guide example has typo, Datagrampacket should be DatagramPacket",JDK-8280455,5066808,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgallard,mullan,mullan,2022-01-21 06:03,2022-03-21 06:24,2023-10-01 09:56,2022-01-28 13:53,,,,,,,,,18,docs,,0,jdk11u-na,jdk17u-na,securitydocs,,,,,,,,,,,,,,,,,"In https://docs.oracle.com/en/java/javase/17/security/java-secure-socket-extension-jsse-reference-guide.html#GUID-80EBB1BB-8A36-4B6F-BC35-AF235F30EF45

the line:

List <Datagrampacket> packets = onReceiveTimeout(engine, peerAddr);

should be:

List <DatagramPacket> packets = onReceiveTimeout(engine, peerAddr);",,,,,,,,,,JDK-8280547,JDK-8280548,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vr9v:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1: ClassLoaderData verification keeps CLDs live that causes problems with VerifyDuringGC during Remark,JDK-8280454,5066807,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,sjohanss,sjohanss,2022-01-21 05:18,2022-11-22 05:17,2023-10-01 09:56,2022-06-10 01:00,19,,,,,,,,20,hotspot,,0,gc-g1,gc-pending-review,,,,,,,,,,,,,,,,,,"When running with -XX:+VerifyDuringGC G1 will do verification during the Remark and Cleanup pause. The ""before"" verification in Remark is causing class unloading to not work as expected because iterating over the CLDGs keeps all CLDs live. The call to ClassLoaderData::holder() in ClassLoaderDataGraphIterator::get_next() pushes it into the SATB queue, which is processed during Remark just a bit later.

At least for the TestHumongousClassLoader.java this causes a test failure as the CLDs are not unloaded. This can be reproduce using -XX:VerifySubSet=classloader_data_graph (i.e. only do that specific verification) and if you instead run with -XX:VerifySubSet=heap the tests passes.

One workaround could be to only verify the heap in the ""before"" verification for remark, exclude the CLDG verification in this verification or add a special iteration for this particular verification.",,,,,,,,,,JDK-8288344,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297427,JDK-8288203,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vr9n:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-01-24 09:59;tschatzl;My guess is that the ClassLoaderDataGraphIterator puts ClassLoaderData instances it finds into handles, which may keep them alive until they are cleaned out. Not sure exactly why they are marked as live throughout the remark pause as on the outside handling seems okay (i.e. some handlemark is used);;;","2022-05-30 08:01;tschatzl;System dictionary verification has the same issue, the called method ClassLoaderDataGraph::verify_dictionary() keeps alive objects in error.;;;","2022-05-31 00:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8949
Date: 2022-05-30 17:09:35 +0000;;;","2022-06-10 01:00;dukebot;Changeset: 94b473e4
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-06-10 07:57:32 +0000
URL:       https://git.openjdk.org/jdk/commit/94b473e4642a5a4626faeb73341b4aea128ccb31
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Missing ""classpath exception"" in several files from jdk.httpserver",JDK-8280441,5066792,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jboes,dcherepanov,dcherepanov,2022-01-21 02:06,2022-01-26 16:23,2023-10-01 09:56,2022-01-24 02:05,18,,,,,,,,18,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"List of files (added by JDK-8245095) without the ""classpath exception"" in GPL header

src/jdk.httpserver/share/classes/sun/net/httpserver/simpleserver/Main.java
src/jdk.httpserver/share/classes/sun/net/httpserver/simpleserver/JWebServer.java
src/jdk.httpserver/share/classes/sun/net/httpserver/simpleserver/FileServerHandler.java
src/jdk.httpserver/share/classes/sun/net/httpserver/simpleserver/OutputFilter.java
src/jdk.httpserver/share/classes/sun/net/httpserver/simpleserver/ResourceBundleHelper.java
src/jdk.httpserver/share/classes/sun/net/httpserver/simpleserver/SimpleFileServerImpl.java
src/jdk.httpserver/share/classes/com/sun/net/httpserver/SimpleFileServer.java",,,,,,,,,,JDK-8280673,JDK-8280539,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vr6b:",9223372036854775807,b33,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-01-21 06:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/111
Date: 2022-01-21 14:38:08 +0000;;;","2022-01-24 02:04;roboduke;Changeset: ead9fecc
Author:    Julia Boes <jboes@openjdk.org>
Date:      2022-01-24 10:03:40 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/ead9feccae75ab0491ce86a707f5056d88ac899a
;;;","2022-01-25 04:31;roboduke;Changeset: ead9fecc
Author:    Julia Boes <jboes@openjdk.org>
Date:      2022-01-24 10:03:40 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/ead9feccae75ab0491ce86a707f5056d88ac899a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Scalarization does not properly handle speculative types,JDK-8280440,5066791,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2022-01-21 01:51,2022-01-21 07:17,2023-10-01 09:56,2022-01-21 07:17,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,,"As a result TestNullableInlinesTypes.java fails with ""-DIgnoreCompilerControls=true -XX:CompileThreshold=100 -DVerifyIR=false"":

Custom Run Test: @Run: test16_verifier - @Test: test16:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.valhalla.inlinetypes.TestNullableInlineTypes.test16_verifier() throws java.lang.Exception
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.AbstractTest.run(AbstractTest.java:99)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:89)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:821)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:249)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:164)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 5 more
Caused by: java.lang.RuntimeException: assertTrue: expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:472)
	at compiler.valhalla.inlinetypes.TestNullableInlineTypes.test16_verifier(TestNullableInlineTypes.java:495)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 7 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vr63:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-21 05:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/610
Date: 2022-01-21 13:54:17 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: fix saved_fp for compiled frame in frame::safe_for_sender,JDK-8280424,5066772,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yzhu,yzhu,yzhu,2022-01-20 22:55,2022-01-21 23:10,2023-10-01 09:56,2022-01-21 23:10,repo-riscv-port,,,,,,,,repo-riscv-port,hotspot,,0,,,,,,,,,,,,,,,,,,,,"Some places are missed updating when refactoring riscv stack frame previously.

We need to update calculation of saved_fp for compiled frame in frame::safe_for_sender.

Previous riscv stack frame patch:
https://github.com/openjdk/jdk-sandbox/commit/db2415748747a0912749bb8fc160a8948021a924",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,"0|i2vr1v:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-21 19:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/riscv-port/pull/52
Date: 2022-01-22 03:47:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: Unnecessary i2l conversion in LIRGenerator::emit_array_address,JDK-8280423,5066770,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fjiang,fjiang,fjiang,2022-01-20 22:32,2022-01-21 00:34,2023-10-01 09:56,2022-01-21 00:34,repo-riscv-port,,,,,,,,repo-riscv-port,hotspot,,0,,,,,,,,,,,,,,,,,,,,"On RISC-V, operands with `T_INT` type are sign-extended implicitly when defined, so i2l conversion is unnecessary.

This fix is similar with JDK-8278417, which calls `generate_address` directly to generate address for array access.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,repo-riscv-port,,linux,,,,,"0|i2vr1f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-20 23:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/riscv-port/pull/50
Date: 2022-01-21 06:59:27 +0000;;;","2022-01-20 23:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/riscv-port/pull/51
Date: 2022-01-21 07:08:50 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in DefaultProxySelector,JDK-8280414,5066756,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2022-01-20 12:41,2022-09-12 00:04,2023-10-01 09:56,2022-01-25 06:42,11,17,19,,,,,,19,core-libs,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,,,,,,,,"There's a memory leak in Windows DefaultProxySelector. The method createProxyList creates a list and stores a pointer in `head`; that pointer is then used as iterator, and when the iteration finishes, memory is never free'd.

The leak only happens when DefaultProxySelector is used (java.net.useSystemProxies=true) and a proxy is used (the connection is not direct).

Reported by clang-tidy.",,,,,,,,,,JDK-8281019,JDK-8281804,JDK-8280934,JDK-8281196,JDK-8281994,JDK-8280935,JDK-8293073,JDK-8293072,,,,,,,,,,,,,,,,JDK-8281151,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2vqyb:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-01-21 00:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7172
Date: 2022-01-21 08:25:30 +0000;;;","2022-01-25 06:42;roboduke;Changeset: fe77250f
Author:    Daniel Jeliński <djelinski@openjdk.org>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-01-25 14:41:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fe77250fa450ec803d2818dc90c5bf156521d537
;;;","2022-01-28 07:34;omikhaltcova;Fix request (13u, 15u) - will label after testing completed 

The original patch applies cleanly. It fixes the same code bug related to the freeing memory. ;;;","2022-01-31 01:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/164
Date: 2022-01-28 15:25:55 +0000;;;","2022-01-31 01:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/320
Date: 2022-01-28 15:26:06 +0000;;;","2022-01-31 05:06;mbaesken;jdk17u fix request
I would like to have the fix in 17 because the issue is present there too. The patch applies cleanly.;;;","2022-01-31 05:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/135
Date: 2022-01-31 13:00:58 +0000;;;","2022-01-31 13:17;clanger;[~mbaesken], maybe you want to do this in 18u as well?;;;","2022-01-31 23:59;mbaesken;jdk18u fix request
I would like to have the fix in 18 because the issue is present there too. The patch applies cleanly.;;;","2022-02-01 00:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/12
Date: 2022-02-01 08:02:55 +0000;;;","2022-02-11 03:18;mbaesken;jdk11u fix request
I would like to have the fix in 11 because the issue is present there too. The patch applies cleanly.;;;","2022-02-11 03:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/821
Date: 2022-02-11 11:30:23 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JarFile::getInputStream can fail with NPE accessing ze.getName(),JDK-8280409,5066750,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,jeff,jeff,2022-01-20 10:58,2022-03-02 17:17,2023-10-01 09:56,2022-02-23 08:58,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,"A fuzzed jar file causes an NPE in JarFile::verifiableEntry due to
access to a null pointer.  

java JarTest npe_ze_null.jar  javax/inject/Singleton.class
[...]
Exception in thread ""main"" java.lang.NullPointerException: Cannot invoke
""java.util.zip.ZipEntry.getName()"" because ""ze"" is null
at java.base/java.util.jar.JarFile.verifiableEntry(JarFile.java:863)
at java.base/java.util.jar.JarFile.getInputStream(JarFile.java:853)
at JarTest.main(JarTest.java:18)

private JarEntry verifiableEntry(ZipEntry ze) {
        if (ze instanceof JarFileEntry) {
            // assure the name and entry match for verification
            return ((JarFileEntry)ze).realEntry();
        }
        ze = getJarEntry(ze.getName());  <======
        if (ze instanceof JarFileEntry) {
            return ((JarFileEntry)ze).realEntry();
        }
        return (JarEntry)ze;
    }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282022,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vqwz:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2022-02-04 06:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7348
Date: 2022-02-04 12:42:39 +0000;;;","2022-02-23 08:58;dukebot;Changeset: a020b6ba
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2022-02-23 16:56:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a020b6ba8f38fe85fb26972a51e4c1068408b1c1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JarFile.getInputStream throws unexpected NASE,JDK-8280406,5066747,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,jeff,jeff,2022-01-20 10:41,2022-02-04 11:40,2023-10-01 09:56,2022-02-04 11:40,,,,,,,,,18,core-libs,,0,18-na,19-na,,,,,,,,,,,,,,,,,," Loading a fuzzed signed JAR file throws an unexpected exception:

java Test
Exception in thread ""main"" java.lang.NegativeArraySizeException: -1090511228
        at java.base/java.util.jar.JarFile.getBytes(JarFile.java:806)
        at
java.base/java.util.jar.JarFile.initializeVerifier(JarFile.java:755)
        at java.base/java.util.jar.JarFile.getInputStream(JarFile.java:840)
        at Test.reproduceIssue(Test.java:39)
        at Test.main(Test.java:58)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vqwb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2022-02-04 11:40;lancea;This issue is no longer reproducible as of JDK 18 but is in JDK 17 and earlier builds;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unexpected exception thrown when CEN file entry comment length is not valid,JDK-8280404,5066745,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,jeff,jeff,2022-01-20 10:30,2022-03-14 10:25,2023-10-01 09:56,2022-03-07 08:11,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,"A fuzzed signed jar throws an exception when retrieving the
manifest entry, this seems to be due to a miscalculated offset while UTF8
decoding:

java JarTest iae_malformat_input.jar
Exception in thread ""main"" java.lang.IllegalArgumentException: malformed
input off : 80, length : 1
at java.base/java.lang.StringCoding.throwMalformed(StringCoding.java:698)
at java.base/java.lang.StringCoding.decodeUTF8_0(StringCoding.java:885)
at
java.base/java.lang.StringCoding.newStringUTF8NoRepl(StringCoding.java:978)
at java.base/java.lang.System$2.newStringUTF8NoRepl(System.java:2273)
at java.base/java.util.zip.ZipCoder$UTF8ZipCoder.toString(ZipCoder.java:208)
at java.base/java.util.zip.ZipFile.getZipEntry(ZipFile.java:671)
at java.base/java.util.zip.ZipFile.getEntry(ZipFile.java:330)
at java.base/java.util.jar.JarFile.getManEntry(JarFile.java:935)
at
java.base/java.util.jar.JarFile.getManifestFromReference(JarFile.java:417)
at java.base/java.util.jar.JarFile.getManifest(JarFile.java:409)
at JarTest.main(JarTest.java:12)
Caused by: java.nio.charset.MalformedInputException: Input length = 1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vqvv:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2022-03-03 03:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7673
Date: 2022-03-03 11:19:12 +0000;;;","2022-03-07 08:11;dukebot;Changeset: f0995abe
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2022-03-07 16:10:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f0995abe62b81cf9c96cc07caa0ac27d00c96ff1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RegEx: String.split can fail with NPE in Pattern.CharPredicate::match,JDK-8280403,5066744,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,igraves,jeff,jeff,2022-01-20 10:23,2023-05-17 12:37,2023-10-01 09:56,2022-01-24 14:22,17,19,,,,,,,19,core-libs,,0,amazon-interest,,,,,,,,,,,,,,,,,,,"String.split can throw an NPE in some cases which may
adversely affect the control flow of an application.

jshell> ""A"".split(""[˜\\H +F&&]"")
|  Exception java.lang.NullPointerException: Cannot invoke
""java.util.regex.Pattern$CharPredicate.is(int)"" because ""p"" is null
|        at Pattern$CharPredicate.lambda$and$0 (Pattern.java:5615)
|        at Pattern$CharProperty.match (Pattern.java:3942)
|        at Pattern$StartS.match (Pattern.java:3653)
|        at Matcher.search (Matcher.java:1728)
|        at Matcher.find (Matcher.java:745)
|        at Pattern.split (Pattern.java:1265)
|        at String.split (String.java:2353)
|        at String.split (String.java:2399)
|        at (#1:1)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vqvn:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@557d5cff,,,,,,,,,"2022-01-24 08:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7199
Date: 2022-01-24 16:22:08 +0000;;;","2022-01-24 09:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7201
Date: 2022-01-24 17:21:57 +0000;;;","2022-01-24 14:22;roboduke;Changeset: e3076552
Author:    Ian Graves <igraves@openjdk.org>
Date:      2022-01-24 22:21:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e3076552ec528864e61a6e0ec91e228006fddefc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[sspi] gss_accept_sec_context leaves output_token uninitialized,JDK-8280401,5066742,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-01-20 10:13,2023-01-04 02:36,2023-10-01 09:56,2022-01-20 19:17,,,,,,,,,19,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-trivial,,,,,,,,,,,,,,,"The SSPI native GSS-API library does not support the acceptor side and its gss_accept_sec_context() always returns GSS_S_FAILURE. However, it also leaves output_token uninitialized and it will crash JDK's own native GSS-API bridge.",,,,,,,,,,JDK-8283433,JDK-8282871,JDK-8298233,JDK-8299590,JDK-8298437,,,,,,,,,,,,,,,,,,JDK-8280420,,,,JDK-8280420,JDK-6722928,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vqv7:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ce3d383,,,,,,,,,"2022-01-20 10:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7163
Date: 2022-01-20 18:19:19 +0000;;;","2022-01-20 19:17;roboduke;Changeset: 6352c020
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-01-21 03:16:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6352c020c25f2701afb4fabee0cc7fcef2d407fb
;;;","2022-03-18 02:05;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
Small risk, tiny change.
Clean backport.
SAP nightly testing passed.;;;","2022-03-18 02:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/265
Date: 2022-03-18 09:07:38 +0000;;;","2023-01-03 08:43;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Small risk, tiny change.
Clean backport.
SAP nighlty testing passed.;;;","2023-01-03 09:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1629
Date: 2023-01-03 16:56:53 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK 19 L10n resource files update - msgdrop 10,JDK-8280400,5066741,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,achung,achung,achung,2022-01-20 09:46,2022-04-12 09:55,2023-10-01 09:56,2022-03-28 10:01,19,,,,,,,,19,globalization,,0,sn_110,sn_111,sn_112,sn_113,sn_114,sn_115,,,,,,,,,,,,,,"This bug is to track the message drop 10 for JDK 19.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283806,JDK-8283805,,,,,,JDK-8283804,JDK-8283870,,,,,,,,,,,JDK-8281634,JDK-8283802,JDK-8227009,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vquz:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@52b4192d,,,,,,,Fix failed,,"2022-03-09 13:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7765
Date: 2022-03-09 21:09:30 +0000;;;","2022-03-28 11:32;dukebot;Changeset: c0aecd15
Author:    Alisen Chung <achung@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2022-03-28 18:31:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c0aecd15ae8d7abf37901f785fccaff2317c3b23
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NMT: Correct NMT tag on CollectedHeap,JDK-8280391,5066731,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2022-01-20 07:40,2023-01-02 03:44,2023-10-01 09:56,2022-01-24 05:36,11,17,18,19,8,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,nmt,redhat-interest,,,,,,,,,,,,,,It is odd to see that CollectedHeap is tagged as mtInternal.,,,,,,,,,,JDK-8298110,JDK-8299454,JDK-8298051,JDK-8297319,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vqsr:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-20 07:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7161
Date: 2022-01-20 15:54:34 +0000;;;","2022-01-24 05:36;roboduke;Changeset: 44db4794
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-01-24 13:34:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/44db4794d29c6e0755a6dc0ea1346f48f918155b
;;;","2022-11-15 11:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/883
Date: 2022-11-15 19:18:38 +0000;;;","2022-11-17 05:59;shade;Fix Request (17u)

Improves NMT reporting by moving GC-specific structures from mtInternal to mtGC. Applies cleanly. Testing passes.;;;","2022-12-31 08:40;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Trivial change, low risk.
Clean backport.
SAP nighlty testing passed.;;;","2022-12-31 08:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1622
Date: 2022-12-31 16:39:58 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] JCWithField AST node support should evolve to work with value classes,JDK-8280382,5066721,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,sadayapalam,sadayapalam,2022-01-20 04:54,2022-01-28 07:48,2023-10-01 09:56,2022-01-28 07:48,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,,,,,,,,,,,,,,,,,,,,JCWithField (source construct __WithField()) continues to operate only on primitive classes and must evolve to work with value classes.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vqqj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-27 11:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/621
Date: 2022-01-27 19:24:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] VM should accept static factory methods in value class files.,JDK-8280381,5066720,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,sadayapalam,sadayapalam,2022-01-20 04:43,2022-01-24 09:18,2023-10-01 09:56,2022-01-24 09:18,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,lworld,,,,,,,,,,,,,,,,,,,"public final value class X {
    int x = 10;
    public static void main(String [] args) {
        System.out.println(new X().toString());
    }
}

compiles fine but fails with:
$ ~/gitreps/valhalla/build/linux-x86_64-server-release/images/jdk/bin/java X
Error: LinkageError occurred while loading main class X
	java.lang.ClassFormatError: Method <init> in class X (not an inline class) has illegal modifiers: 0x9

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vqqb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-21 05:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/609
Date: 2022-01-21 13:36:15 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MethodHandleProxies does not correctly invoke default methods with varags,JDK-8280377,5066656,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,webbuggrp,webbuggrp,2022-01-19 15:44,2022-01-31 15:23,2023-10-01 09:56,2022-01-25 17:26,11,17,18,19,,,,,19,core-libs,,0,dcsaw,redhat-interest,reproducer-yes,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When creating an interface proxy to a MethodHandle using MethodHandleProxies.asInterfaceInstance, default methods using a varargs parameter are not correctly handled.
Calling such a default method on a MethodHandle proxy will produce an IllegalArgumentException with message ""array is not of length X"", as the method handles are not correctly combined. Default methods with a regular array as their trailing parameter are not affected.

The cause of this issue is that MethodHandleProxies.callDefaultMethod does not ensure that the MethodHandle obtained for the default method is not a varargs collector (MethodHandle.isVarargsCollector). If it is, it will try to collect varargs arguments, instead of passing the array on ""as is"". The vararg argument collection has already happened at this point, because the generated java.lang.reflect.Proxy code has no special handling of varargs, it treats them as regular arrays. The fix is that callDefaultMethod needs to call asFixedArity on the result of findSpecial.


---------- BEGIN SOURCE ----------
package com.example;

import java.lang.invoke.MethodHandleProxies;
import java.lang.invoke.MethodHandles;

import static java.lang.invoke.MethodType.methodType;

public class Main {

    public interface Interface
    {
        void method(Object... args);
        default void defaultMethod(Object... args) {
            method(args);
        }
        default void defaultMethod2(Object[] args) {
            method(args);
        }
    }

    private static void callMeViaMethodHandles(String foo, int bar) {
        System.out.println(""foo="" + foo + "", bar="" + bar);
    }

    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException
    {
        var mh = MethodHandles.lookup().findStatic(
                Main.class, ""callMeViaMethodHandles"", methodType(void.class, String.class, int.class)
        );
        mh = mh.asSpreader(Object[].class, mh.type().parameterCount());
        var proxy = MethodHandleProxies.asInterfaceInstance(Interface.class, mh);

        // throws incorrect exception
        proxy.defaultMethod(""should be foo"", 3);
        
        // works fine
        proxy.defaultMethod2(new Object[] { ""should be foo"", 3 });
    }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-01-20 03:08;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/97673/Main.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vqc3:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2022-01-20 03:06;tongwan;The observations on Windows 10:
JDK 11: Failed, an IllegalArgumentException is thrown
JDK 17: Failed.
JDK 18ea+29: Failed.
JDK 19ea+3: Failed. ;;;","2022-01-20 06:53;jkuhn;The Title is correct. MethodHandleProxies does not correctly invoke default methods with varags.

Different reproducer - stripped of all unnecessary details:

    import java.lang.invoke.MethodHandleProxies;
    import java.lang.invoke.MethodHandles;
    import java.util.Arrays;

    import static java.lang.invoke.MethodType.methodType;

    public class Main {
        
        public interface Interface extends Runnable {
            
            default void defaultMethod(Object... args) {
                System.out.println(Arrays.deepToString(args));
            }
            
            default void defaultMethod2(Object[] args) {
                System.out.println(Arrays.deepToString(args));
            }
        }
        
        public static void main(String[] args) throws Throwable {
            
            var proxy = MethodHandleProxies.asInterfaceInstance(Interface.class, MethodHandles.empty(methodType(void.class)));
                    
            call1(proxy);
            call2(proxy);
        }
        
        private static void call1(Interface ifc) {
            ifc.defaultMethod(new Object[] { ""should be foo"", 3});
        }
        
        private static void call2(Interface ifc) {
            ifc.defaultMethod2(new Object[] { ""should be foo"", 3});
        }
    }

Output:

    [[should be foo, 3]]
    [should be foo, 3];;;","2022-01-20 10:04;mchung;The MethodHandleProxies implementation can use InvocationHandler::invokeDefault instead.;;;","2022-01-21 14:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7185
Date: 2022-01-21 22:49:38 +0000;;;","2022-01-21 15:39;mchung;Alternative fix for backport consideration:

@@ -343,7 +343,7 @@ public class MethodHandleProxies {
                         intfc, mk.getName(),
                         MethodType.methodType(mk.getReturnType(), mk.getParameterTypes()),
                         self.getClass());
-                return mh.asSpreader(Object[].class, mk.getParameterCount());
+                return mh.asFixedArity().asSpreader(Object[].class, mk.getParameterCount());;;;","2022-01-25 17:26;roboduke;Changeset: a183bfb4
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2022-01-26 01:24:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a183bfb436a7dd998e602c2d16486e88c390fca1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update Xalan serializer / SystemIDResolver to align with JDK-8270492,JDK-8280373,5066711,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2022-01-20 01:18,2023-04-18 05:58,2023-10-01 09:56,2022-01-26 00:42,11,17,19,8,,,,,19,xml,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,"After 8270492
https://github.com/openjdk/jdk/commit/78b2c8419bc69436873e6fc9c542480949d140c5
has been pushed, we should adjust src/java.xml/share/classes/com/sun/org/apache/xml/internal/serializer/utils/SystemIDResolver.java  getAbsoluteURI   to what has been done in 8270492 to src/java.xml/share/classes/com/sun/org/apache/xml/internal/utils/SystemIDResolver.java",,,,,,,,,,JDK-8281250,JDK-8284559,JDK-8281805,JDK-8281251,JDK-8302297,JDK-8303717,JDK-8289222,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270492,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vqob:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@40911f81,,,,,,,,,"2022-01-20 02:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7155
Date: 2022-01-20 10:55:59 +0000;;;","2022-01-26 00:42;roboduke;Changeset: c180070c
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-01-26 08:41:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c180070cb59b8e075376ae913c5db9a4ed868303
;;;","2022-02-03 08:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/323
Date: 2022-02-03 16:21:30 +0000;;;","2022-02-03 08:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/170
Date: 2022-02-03 16:22:34 +0000;;;","2022-02-03 08:36;omikhaltcova;Fix request (13u, 15u) 

The original patch applied cleanly. The same adjustments should be made after JDK-8270492.;;;","2022-02-11 02:53;mbaesken;Fix Request (17u)
I would like to have the patch in 17u as well, because the issue is present there too. The patch applies cleanly.;;;","2022-02-11 02:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/159
Date: 2022-02-11 10:52:54 +0000;;;","2022-04-05 17:10;andrew;Adding 8 & 11 as affected as the same JDK-8270492 change also went into 8u322 and 11.0.14.;;;","2022-04-05 17:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1008
Date: 2022-04-06 00:26:48 +0000;;;","2022-04-06 09:12;andrew;Fix Request [11u]:

JDK-8270492 was a security fix in the January security update which was backported to 8u, 11u & 17u. This fix synchronises src/java.xml/share/classes/com/sun/org/apache/xml/internal/serializer/utils/SystemIDResolver.java to match the change in src/java.xml/share/classes/com/sun/org/apache/xml/internal/utils/SystemIDResolver.java made in JDK-8270492. The fix has already been backported to 17u.

Backport is clean: https://github.com/openjdk/jdk11u-dev/pull/1008;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
native library cache should be platform/arch specific,JDK-8280369,5066707,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jvos,jvos,jvos,2022-01-20 00:24,2023-02-21 13:57,2023-10-01 09:56,2022-03-29 05:42,jfx11,,,,,,,,jfx19,javafx,,0,11-bp,17-bp,,,,,,,,,,,,,,,,,,"We currently store the native libraries that are contained in the javafx jar files in a cache on the runtime machine. The cache already depends on the version (e.g. you can have javafx 17.0.1 and javafx 17.0.0 libs next to each other), but not on the architecture.

As noted on the openjfx-dev mailinglist: 

https://mail.openjdk.java.net/pipermail/openjfx-dev/2022-January/033274.html

It should be noted that in fact, we can start programs with different architectures on the same system. A typical example is that Windows x86 software can be run on the Windows amd64 platform.
With the popularization of aarch64 architecture, this situation will become more common: The software of Windows x86 and Windows amd64 can be run on the Windows aarch64 platform, and the  software of MacOs x86 can be run on the MacOS aarch64.

We should add this to the NativeLibLoader which deals with read/write to the library cache.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vqnf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-03-25 11:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/762
Date: 2022-03-25 18:12:23 +0000;;;","2022-03-29 05:42;dukebot;Changeset: a0db4730
Author:    Glavo <zjx001202@gmail.com>
Committer: Johan Vos <jvos@openjdk.org>
Date:      2022-03-29 12:40:42 +0000
URL:       https://git.openjdk.java.net/jfx/commit/a0db473043167d546973e8293e3f208cb1f59f12
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Restore Files.createTempFile javadoc,JDK-8280366,5066704,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bpb,alanb,alanb,2022-01-19 23:45,2022-02-02 17:31,2023-10-01 09:56,2022-01-27 13:02,19,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"JDK-8279990 removed the text that explains that File.createTempFile is only part of a temporary-file facility. The text should be restored, maybe we just revert the changes in JDK-8279990 or propose an alternative that is easier to read.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279990,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vqmr:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-01-24 10:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7202
Date: 2022-01-24 18:47:45 +0000;;;","2022-01-27 13:02;roboduke;Changeset: ece89c6d
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-01-27 21:00:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ece89c6df167e9a7f99b00e3f89c2c41c10ab31b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minor correction of ALPN specification in SSLParameters,JDK-8280363,5066701,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-01-19 22:41,2022-01-26 17:20,2023-10-01 09:56,2022-01-20 08:51,,,,,,,,,19,security-libs,,0,noreg-doc,tencent-interest,,,,,,,,,,,,,,,,,,"In the getApplicationProtocols() method in javax.net.ssl.SSLParameters, the return statement says that ""The array is ordered based on protocol preference, with protocols[0] being the most preferred."".  However, there is no protocols variable in this method.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9,,,,,,,"0|i2vqm3:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-01-19 23:13;xuelei;No new regression test, doc only update.;;;","2022-01-19 23:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7152
Date: 2022-01-20 07:12:42 +0000;;;","2022-01-20 08:50;roboduke;Changeset: 0ea2b390
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-01-20 16:50:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0ea2b39035f1b535a53770379c94ae43f0ddb8b6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"user.home = ""?"" when running with systemd DynamicUser=true",JDK-8280357,5065394,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,webbuggrp,webbuggrp,2021-12-28 04:02,2022-03-02 17:19,2023-10-01 09:56,2022-02-24 12:18,17,18,,,,,,,19,core-libs,,0,containers,dcsswa,noreg-hard,release-note=yes,reproducer-yes,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
In some environments like a systemd service with DynamicUser=true, or in Docker, the NSS database isn't updated with useful information. In systemd querying the home directory returns ""/"" which is useless and in the past I've seen Docker environments return null, causing HotSpot to set user.home to ""?"". This can lead to very odd issues with directories name ? turning up all over the place as usually this value is passed straight to Path or File.

Some time ago I filed a bug against systemd asking them to put a more useful answer in NSS:

https://github.com/systemd/systemd/issues/19537

Unfortunately the maintainer doesn't want to fix this. His view is that everything on UNIX _except_ Java uses $HOME and that it's Java that needs to be fixed, as then a systemd unit can set HOME to something ""meaningful"" e.g. the state directory.

In the past, using $HOME for user.home has been deprioritized as being a potentially backwards incompatible change, presumably for weird UNIX environments where $HOME doesn't match the NSSDB even though $HOME is initialized from that db. So in this bug I propose a change that shouldn't have any compatibility issues - when NSS returns either ""/"" or NULL, fall back to reading $HOME and/or $STATE_DIRECTORY instead. Neither / nor ? are valid home directories on UNIX systems, thus presenting these values to an app is always wrong and can only break things.

This isn't a theoretical concern by the way. I'm currently dealing with some breakage of a Java app that runs in a systemd service because it tries to write to the root directory.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run this command on a Linux system with systemd and Java installed:

systemd-run -p DynamicUser=1 -p StateDirectory=xyz -p Environment=HOME=/var/lib/xyz -p WorkingDirectory=/var/lib/xyz -t /usr/bin/java -XshowSettings:properties --version | grep user.home



EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
It points to a writable directory.
ACTUAL -
user.home is set to /

CUSTOMER SUBMITTED WORKAROUND :
A mix of setting system properties by hand, changing your own code, etc, but user.home is used all over the place including in libraries so this gets painful fast.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282102,,,,,,,,,,,,,,,,,,,,JDK-7069190,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vijv:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-01-19 20:01;sswsharm;Issue is reproduced, user.home is set to / instead of a writeable directory.

OS: Linux(Ubuntu 20.04)
JDK 11.0.3: Fail
JDK 17.0..2: Fail
JDK 18ea31: Fail

Command used: systemd-run -p DynamicUser=1 -p StateDirectory=xyz -p Environment=HOME=/var/lib/xyz -p WorkingDirectory=/var/lib/xyz -t /usr/bin/java -XshowSettings:properties --version | grep user.home

Output: user.home = /;;;","2022-01-19 21:13;dholmes;Hotspot does not determine the value of user.home, that happens in the core-library side, so  re-directing to there.

The code that sets user.home is:

    /* user properties */
    {
        struct passwd *pwent = getpwuid(getuid());
        sprops.user_name = pwent ? strdup(pwent->pw_name) : ""?"";
#ifdef MACOSX
        setUserHome(&sprops);
#else
        sprops.user_home = pwent ? strdup(pwent->pw_dir) : NULL;
#endif
        if (sprops.user_home == NULL) {
            sprops.user_home = ""?"";
        }
    }

So the JDK relies on getpwuid having the right value. If I recall correctly from previous discussions there are potential security issues with just using $HOME.;;;","2022-01-19 21:18;dholmes;This is the ""past issue"" alluded to above - JDK-7069190.;;;","2022-01-20 00:03;alanb;I haven't used systemd DynamicUser but it sounds like it allocates a uid for the service when it starts, then drops it when the service stops. It would be useful to know how other programs work in this environment, e.g. does ""whoami"" fail, what about programs that used getcwd?;;;","2022-01-20 09:41;smarks;Setting the home dir to ""?"" is wrong in all cases. Probably a better fallback would be ""/"" which at least is a valid directory, though perhaps not the correct one. (Unless someone has removed the root filesystem.) Most users won't be able to write to the root directory, so various things (like prefs) might fail; that's probably ok. However, somebody might run Java as root, which I would think is generally considered a bad idea, in which case various things might be scribbled into the root directory, so setting the home dir to ""/"" might not be such a good idea after all. Perhaps a better fallback would be to set it to the current value of cwd. This might be suitable for backporting, in case it helps things.

A larger issue concerns the environment vs. various databases and use of getpwuid and getpwnam. In some sense the latter ought to be more reliable but with these new configurations that's not necessarily true anymore. There are also cases (see JDK-7168102) where multiple distinct users have the same uid, leading to incorrect results. In those cases the environment has presumably been set correctly, but looking things up in the databases could return inappropriate results.

If we trust the command line, we should also trust the environment, so initializing the properties from HOME and LOGNAME/USER might be reasonable. This of course is a change in long-standing behavior, so we'd have to do thorough testing, and possibly have a way to restore the old behavior, etc.

See also this: https://www.freedesktop.org/software/systemd/man/nss-systemd.html

Apparently this lets systemd dynamic users resolve to reasonable things in the nss databases. Telling people to make sure this module is installed and configured properly might be an alternative approach, as opposed to simply using the environment variables.;;;","2022-01-20 10:23;alanb;The description suggests that user.dir is set to ""/"" so I'm guessing that getcwd is returning the root directory (I don't have a systemd DynamicUser environment to test it). If getcwd is actually failing then I would expect problems in other areas as the system properties init is not the only place that uses it.

It's probably time to explore moving to HOME and USER. To do that I think we need to get a handle on the environment/conditions where the values would differ to getcwd/getpwuid. Also using env variables would require changes in a few places to avoid inconsistencies.;;;","2022-01-31 13:21;rriggs;The issue is only raised against user.home initialization. 
The pw_dir (home directory) entry in getpwent is only mentioned twice in the Java runtime sources,
once in the initialization of user.home and in HotSpot, where it is only used if $HOME is invalid.

Changing java_props_md.c to use $HOME as the primary and pw_dir as the fallback seems preferred.

A slightly less risky fix, is to fallback to $HOME if pw_dir is invalid, null, or empty or an invalid directory such as ""/"".

Both alternatives would address the original reported issue.

If the initialization of user.name to $USER vs. pw_name, should be addressed, it should be via a separate issue.;;;","2022-02-18 07:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7534
Date: 2022-02-18 15:29:34 +0000;;;","2022-02-24 12:18;dukebot;Changeset: bf19fc65
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2022-02-24 20:12:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bf19fc65c71cba8cb4383d714fe8993acd01be0a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
-XX:ArchiveClassesAtExit should print warning if base archive failed to load,JDK-8280353,5066691,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,minqi,iklam,iklam,2022-01-19 18:17,2022-02-02 17:30,2023-10-01 09:56,2022-01-27 11:00,19,,,,,,,,19,hotspot,,0,cds,regression,,,,,,,,,,,,,,,,,,"Before JDK-8261455:

$ java -XX:+UseCompressedOops -XX:SharedArchiveFile=foo.jsa -Xshare:dump 
$ java -XX:-UseCompressedOops -XX:SharedArchiveFile=foo.jsa -XX:ArchiveClassesAtExit=bar.jsa  -version
Error occurred during initialization of VM
-XX:ArchiveClassesAtExit is unsupported when base CDS archive is not loaded. Run with -Xlog:cds for more info.

After JDK-8261455:
$ java -XX:+UseCompressedOops -XX:SharedArchiveFile=foo.jsa -Xshare:dump 
$ java -XX:-UseCompressedOops -XX:SharedArchiveFile=foo.jsa -XX:ArchiveClassesAtExit=bar.jsa  -version
java version ""19-internal"" 2022-09-20
Java(TM) SE Runtime Environment (build 19-internal+0-adhoc.iklam.open)
Java HotSpot(TM) 64-Bit Server VM (build 19-internal+0-adhoc.iklam.open, mixed mode)
$ ls -l bar.jsa
ls: cannot access 'bar.jsa': No such file or directory


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279997,JDK-8261455,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vqjv:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-26 10:52;minqi;Before fix the message is not correct, since 
 java -XX:-UseCompressedOops -XX:SharedArchiveFile=foo.jsa -XX:ArchiveClassesAtExit=bar.jsa  -version
the mode is 'auto' --- if foo.jsa could not be mapped, CDS is disabled and no share, it should continue without sharing.

After fix, it continues without sharing. Since foo.jsa could not be mapped, bar.jsa will not be generated. ;;;","2022-01-26 11:03;iklam;A warning message should be printed ""-XX:ArchiveClassesAtExit is unsupported when base CDS archive is not loaded. Run with -Xlog:cds for more info."";;;","2022-01-26 21:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7241
Date: 2022-01-27 04:48:37 +0000;;;","2022-01-27 11:00;roboduke;Changeset: a3a0dcd9
Author:    Yumin Qi <minqi@openjdk.org>
Date:      2022-01-27 18:58:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a3a0dcd9215beb6baf43c6e94f8e16fb6a2ccf68
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: Loop opts are missing during OSR compilation,JDK-8280320,5066658,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,sparasa,sparasa,2022-01-19 16:34,2023-07-13 10:04,2023-10-01 09:56,2022-07-01 15:58,18,19,,,,,,,19,hotspot,,0,c2-osr,ci,noreg-hard,oracle-triage-11,oracle-triage-17,oracle-triage-18,performance,regression,,,,,,,,,,,,"While benchmarking AVX related tests on x86 server machines, it was observed that the test throughput of the release build is ~35x slower than that of the fastdebug build. A sample test case named TestShortRShift.java is also attached.

Preliminarily performance analysis revealed that the fastdebug version is running AVX instructions whereas the debug version is falling back to the scalar instruction.

--------------------------------------------------------------------------
Below we list the main function that is being tested in TestShortRShift.java

    public static void mainTest(long numIterations) {
        while (numIterations > 0) {
            for (int i = 0; i < BUFFER_SIZE; i++) {
               // Code below would be run using x86 AVX instructions
                outputBuffer[i] = (short)(inputBuffer[i] >> 3);
            }
            numIterations--;
        }
    }",,,,,,,,,,JDK-8289627,JDK-8291213,JDK-8291376,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272330,JDK-8312043,,,,,"2022-01-19 16:22;sparasa;TestShortRShift.java;https://bugs.openjdk.org/secure/attachment/97665/TestShortRShift.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,linux,,,,,"0|i2vqcj:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-19 23:47;chagedorn;Hi [~sparasa], did you mean OpenJDK 11.0.17 (label 11.0.17)?;;;","2022-01-20 10:31;sparasa;Hi Christian, sorry for the confusion. It's actually the latest JDK (openjdk 19-internal 2022-09-20). Updated the version in the bug report.
;;;","2022-01-20 10:51;sparasa;This issue occurs in the latest JDK 18 (openjdk 18-internal 2022-03-22) as well. However, it does not occur in JDK 17(openjdk 17.0.1 2021-10-19);;;","2022-01-20 15:34;dlong;ILW = performance regression on AVX tests = MMH = P3;;;","2022-01-21 00:38;chagedorn;[~sparasa] No problem, thanks for updating it!;;;","2022-01-21 02:13;vlivanov;[~sparasa] what hardware are you running on? Is it AVX512-capable? Skylake or newer? ;;;","2022-01-21 10:22;sparasa;Yes, ran it on AVX512-capable servers Skylake and also IceLake. Observed this regression on both of them.;;;","2022-06-17 14:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/38
Date: 2022-06-17 21:29:41 +0000;;;","2022-07-01 15:58;dukebot;Changeset: 99250140
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-07-01 22:56:48 +0000
URL:       https://git.openjdk.org/jdk19/commit/9925014035ed203ba42cce80a23730328bbe8a50
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update boot JDK to 17.0.2,JDK-8280280,5066612,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2022-01-19 09:01,2022-03-22 07:42,2023-10-01 09:56,2022-01-21 06:52,jfx18,,,,,,,,jfx18,javafx,,0,noreg-build,,,,,,,,,,,,,,,,,,,"Now that JDK 17.0.2 has released we should consider updating the boot JDK for JavaFX to use JDK 17.0.2.
",,,,,,,,,,JDK-8280465,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283517,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vq2b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-01-19 11:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/721
Date: 2022-01-19 18:43:31 +0000;;;","2022-01-21 06:52;roboduke;Changeset: c47f18ef
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-01-21 14:51:23 +0000
URL:       https://git.openjdk.java.net/jfx/commit/c47f18effb4b959eb0f943095603d02f398e6fd2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JUnit5 tests using Assumptions API fail to compile in some cases,JDK-8280275,5066603,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2022-01-19 06:42,2022-11-03 00:03,2023-10-01 09:56,2022-01-20 04:13,jfx18,,,,,,,,jfx18,javafx,,0,noreg-self,testbug,,,,,,,,,,,,,,,,,,"Tests using the JUnit 5 Assumptions API fails to compile due to missing dependencies. To reproduce, run the following with ""gradle test"" on the command line:

-----------------------------------------------------------------------------
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assumptions.assumeTrue;

import org.junit.jupiter.api.Test;

public class JUnit5Test {

    @Test
    void junit5ShouldWork() {
        assumeTrue(this != null);

        assertNotNull(this);
        System.err.println(""JUnit 5 test working!"");
    }
}
-----------------------------------------------------------------------------


It will fail with the following error:

> Task :base:compileTestJava
modules/javafx.base/src/test/java/test/JUnit5Test.java:37: error: cannot access TestAbortedException
        assumeTrue(this != null);
                  ^
  class file for org.opentest4j.TestAbortedException not found
",,,,,,,,,,JDK-8286011,JDK-8284829,JDK-8280463,JDK-8286495,,,,,,,,,,,,,JDK-8205915,,,,,,,,,,,,,,,,,,,,,,JDK-8274274,JDK-8296283,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vq0b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-01-19 06:43;kcr;This was discovered during the review of JDK-8205915. See:
https://github.com/openjdk/jfx/pull/715#issuecomment-1016516818;;;","2022-01-19 06:45;kcr;The problem is that the opentest4j library is listed in build.gradle as a runtime-only dependency, when in fact it is a compile-time dependency. The fix is to make the following change:

-        testRuntimeOnly group: ""org.opentest4j"", name: ""opentest4j"", version: ""1.2.0""
+        testImplementation group: ""org.opentest4j"", name: ""opentest4j"", version: ""1.2.0""
;;;","2022-01-19 07:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/720
Date: 2022-01-19 15:18:48 +0000;;;","2022-01-20 04:13;roboduke;Changeset: 94807b6e
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-01-20 12:12:43 +0000
URL:       https://git.openjdk.java.net/jfx/commit/94807b6edfb9af55be353cab237e8e64007c61dc
;;;","2022-04-13 07:59;kcr;I plan to backport this to facilitate backports of bugs that use JUnit 5 in their tests.;;;","2022-05-02 06:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/98
Date: 2022-04-30 13:48:01 +0000;;;","2022-05-10 08:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/59
Date: 2022-05-09 21:20:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] JITs miss some klass initialization checks for defaultvalue,JDK-8280270,5066597,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2022-01-19 05:11,2022-01-24 04:23,2023-10-01 09:56,2022-01-24 04:23,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (workspace/open/src/hotspot/share/oops/inlineKlass.cpp:70), pid=20957, tid=20991
#  assert(is_initialized() || is_being_initialized() || is_in_error_state()) failed: default value is set at the beginning of initialization


Current CompileTask:
C2:   7707 1238    b  4       compiler.valhalla.inlinetypes.TestNullableInlineTypes::test87 (14 bytes)

Stack: [0x00007f55ed1ea000,0x00007f55ed2eb000],  sp=0x00007f55ed2e7590,  free space=1013k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xf1e1f4]  InlineKlass::default_value()+0x324
V  [libjvm.so+0x96837e]  ciInlineKlass::default_instance() const+0x3ae
V  [libjvm.so+0xf2d69c]  InlineTypeNode::Ideal(PhaseGVN*, bool)+0x1bc
V  [libjvm.so+0x174ac95]  PhaseGVN::transform_no_reclaim(Node*)+0x25
V  [libjvm.so+0xf2edf3]  InlineTypeNode::make_null(PhaseGVN&, ciInlineKlass*)+0x1f3
V  [libjvm.so+0xf2eecb]  InlineTypeNode::make_null(PhaseGVN&, ciInlineKlass*)+0x2cb
V  [libjvm.so+0xf2e8cb]  InlineTypePtrNode::make_null(PhaseGVN&, ciInlineKlass*)+0x2eb
V  [libjvm.so+0xf2ff7e]  InlineTypeNode::make_from_oop(GraphKit*, Node*, ciInlineKlass*, bool)+0x75e
V  [libjvm.so+0x17047a8]  Parse::Parse(JVMState*, ciMethod*, float)+0xa78
V  [libjvm.so+0x8c8925]  ParseGenerator::generate(JVMState*)+0x115
V  [libjvm.so+0xad07cb]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x143b
V  [libjvm.so+0x8c3c66]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x6b6
V  [libjvm.so+0xae0c48]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc88
V  [libjvm.so+0xae19e8]  CompileBroker::compiler_thread_loop()+0x648
V  [libjvm.so+0x19f67fa]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x19febc0]  Thread::call_run()+0x100
V  [libjvm.so+0x16b5b94]  thread_native_entry(Thread*)+0x104
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vpyz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-24 02:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/611
Date: 2022-01-21 15:36:31 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(aio) AsynchronousSocketChannel init fails in IPv6 only Windows env,JDK-8280241,5066565,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2022-01-19 02:56,2022-01-31 15:22,2023-10-01 09:56,2022-01-25 03:17,18,,,,,,,,19,core-libs,,0,noreg-hard,,,,,,,,,,,,,,,,,,,"test TestAsyncSocketChannels.testBasicIOWithSupportedScope(newSharedScope()): failure
java.lang.ExceptionInInitializerError
	at java.base/sun.nio.ch.WindowsAsynchronousChannelProvider.openAsynchronousSocketChannel(WindowsAsynchronousChannelProvider.java:90)
	at java.base/java.nio.channels.AsynchronousSocketChannel.open(AsynchronousSocketChannel.java:174)
	at java.base/java.nio.channels.AsynchronousSocketChannel.open(AsynchronousSocketChannel.java:195)
	at TestAsyncSocketChannels.testBasicIOWithSupportedScope(TestAsyncSocketChannels.java:159)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.io.IOException: An address incompatible with the requested protocol was used
	at java.base/sun.nio.ch.WindowsAsynchronousSocketChannelImpl.initIDs(Native Method)
	at java.base/sun.nio.ch.WindowsAsynchronousSocketChannelImpl.<clinit>(WindowsAsynchronousSocketChannelImpl.java:945)
	... 33 more
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2vprv:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-01-19 04:18;djelinski;Problem in native initIDs function:
https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/java.base/windows/native/libnio/ch/WindowsAsynchronousSocketChannelImpl.c#L68
it's hardcoded to use AF_INET which is not available when IPv4 is disabled.;;;","2022-01-19 04:24;alanb;The implementation uses ConnectEx on Windows. The code that obtains the function pointer requires a socket and it assumes IPv4 is available.;;;","2022-01-24 06:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7197
Date: 2022-01-24 14:27:51 +0000;;;","2022-01-25 03:17;roboduke;Changeset: 36fbec78
Author:    Daniel Jeliński <djelinski@openjdk.org>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-01-25 11:15:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/36fbec78be837fe1defb72f39c6e3f2b5135fddf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: Minimal build failed after JDK-8279565,JDK-8280236,5066561,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fjiang,fjiang,fjiang,2022-01-19 00:50,2022-01-19 16:28,2023-10-01 09:56,2022-01-19 16:28,repo-riscv-port,,,,,,,,repo-riscv-port,hotspot,,0,,,,,,,,,,,,,,,,,,,,"After JDK-8279565, minimal build complains `'ror_imm' was not declared in this scope` error.  The definition of `ror_imm` should move outside of `COMPILER2` macro.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,repo-riscv-port,,linux,,,,,"0|i2vpqz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-19 01:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/riscv-port/pull/48
Date: 2022-01-19 08:59:46 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deprecated flag FlightRecorder missing from VMDeprecatedOptions test,JDK-8280235,5066560,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,dholmes,epeter,epeter,2022-01-19 00:42,2022-07-07 01:15,2023-10-01 09:56,2022-06-28 16:39,19,,,,,,,,20,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,,,"FlightRecorder was deprecated in JDK-8224139, however it was never added to the test
test/hotspot/jtreg/runtime/CommandLine/VMDeprecatedOptions.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8224139,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vpqr:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-01-19 04:21;dholmes;This is correct, it should have been added to the test back in JDK 13 when the change was made. Not sure it is worthwhile retrofitting this though. The main purpose of adding to the VMDeprecatedOptions test is to validate newly deprecated flags.

On a related note though should FlightRecorder finally be obsoleted and targeted for removal?;;;","2022-06-10 03:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9123
Date: 2022-06-10 10:20:38 +0000;;;","2022-06-28 16:39;dukebot;Changeset: 910053b7
Author:    KIRIYAMA Takuya <kiriyama.takuya@fujitsu.com>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2022-06-28 23:37:23 +0000
URL:       https://git.openjdk.org/jdk/commit/910053b74ec5249b3ecae33b9b0b0a68729ef418
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"AArch64 ""core"" variant does not build after JDK-8270947",JDK-8280234,5066559,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-01-19 00:35,2022-10-18 22:23,2023-10-01 09:56,2022-01-19 04:03,17,18,19,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,,,,,,,,,,,,,,,"=== Output from failing command(s) repeated here ===
* For target hotspot_variant-core_libjvm_objs_macroAssembler_aarch64.o:
/home/shade/shipilev-jdk/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp: In member function 'u_char* MacroAssembler::zero_words(Register, Register)':
/home/shade/shipilev-jdk/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:4728:27: error: incomplete type 'ciEnv' used in nested name specifier
         && (task = ciEnv::current()->task())
                           ^~~~~~~
",,,,,,,,,,JDK-8280335,JDK-8280668,JDK-8295482,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270947,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vpqj:",9223372036854775807,b33,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-19 00:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/108
Date: 2022-01-19 08:46:56 +0000;;;","2022-01-19 04:03;roboduke;Changeset: 28e02fa2
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-19 12:01:05 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/28e02fa2cb40267136c88a507696ec3e610e95a3
;;;","2022-01-19 13:25;dlong;ILW = build regression, seen in ""core"" build, no workaround = MMH = P3;;;","2022-01-25 04:31;roboduke;Changeset: 28e02fa2
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-19 12:01:05 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/28e02fa2cb40267136c88a507696ec3e610e95a3
;;;","2022-10-14 07:08;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, trivial change. Follow-up to 8270947.
Clean backport. SAP nightly testing passed.;;;","2022-10-14 07:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/796
Date: 2022-10-14 14:08:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Abstract classes that allow value subclasses should be marked ACC_PERMITS_VALUE (0x0040),JDK-8280194,5066511,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-01-18 19:37,2022-02-01 03:36,2023-10-01 09:56,2022-02-01 03:36,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,,,,,,,,,,,,,,,,,,,,"From https://openjdk.java.net/jeps/8277163

An abstract class that allows value subclasses declares this capability in its class file using the ACC_PERMITS_VALUE modifier (0x0040). At class load time, an error occurs if the class is not abstract, declares an instance field, declares a synchronized method, or implements—directly or indirectly—IdentityObject.

Also from https://cr.openjdk.java.net/~dlsmith/jep401/jep401-20211220/specs/value-objects-jvms.html#jvms-4.7.31

The ACC_INTERFACE flag indicates that this class file defines an interface, not a module or class. If the ACC_INTERFACE flag is set, the ACC_ABSTRACT flag must also be set, and the ACC_FINAL, ACC_VALUE, ACC_PERMITS_VALUE, ACC_ENUM, and ACC_MODULE flags must not be set.

The ACC_FINAL flag indicates that this class cannot be extended by another class. If the ACC_FINAL flag is set, the ACC_ABSTRACT flag and ACC_PERMITS_VALUE flags must not be set

If the ACC_VALUE flag is set, the ACC_FINAL flag must also be set, and the ACC_ABSTRACT, ACC_PERMITS_VALUE, ACC_ENUM, ACC_INTERFACE, and ACC_MODULE flags must not be set.

...

(more)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vpfv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-31 06:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/622
Date: 2022-01-31 14:08:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
summary javadoc for java.awt.GraphicsEnvironment#preferProportionalFonts broken,JDK-8280193,5066463,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,webbuggrp,webbuggrp,2022-01-18 08:03,2022-04-06 23:59,2023-10-01 09:56,2022-03-31 04:49,17,8,,,,,,,19,client-libs,,0,dcspks,noreg-doc,reproducer-yes,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
the javadoc summary for preferProportionalFonts() is broken due to javadoc tuncating mid sentence when seeing a full stop followed by a whitepsace character in the ""e.g. ""



STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
go to https://docs.oracle.com/en/java/javase/17/docs/api/java.desktop/java/awt/GraphicsEnvironment.html and look at the javadoc summaries for all the methods paying special attention to the summary for preferProportionalFonts

Observe the summary is ""Indicates a preference for proportional over non-proportional (e.g."" 



EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
the summary is not truncated after the e.g and should be a full sentence.
ACTUAL -
Observe the summary is ""Indicates a preference for proportional over non-proportional (e.g."" 


CUSTOMER SUBMITTED WORKAROUND :
use inference

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vp57:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-01-18 19:27;pardesha;This need to be updated for JDK 8 and 17 as well.
https://docs.oracle.com/javase/8/docs/api/java/awt/GraphicsEnvironment.html
https://docs.oracle.com/en/java/javase/17/docs/api/java.desktop/java/awt/GraphicsEnvironment.html;;;","2022-02-16 06:33;prappo;Sentence segmentation is hard. To control it from the doc comment, JDK 10 introduced a tag, `@summary`. ( See https://docs.oracle.com/en/java/javase/17/docs/specs/javadoc/doc-comment-spec.html#summary ) java.awt.GraphicsEnvironment.preferPropotionalFonts should use that tag.;;;","2022-03-23 01:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7127
Date: 2022-01-18 14:05:55 +0000;;;","2022-03-31 04:49;dukebot;Changeset: 5740a3b6
Author:    James Nord <jtnord@users.noreply.github.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-03-31 11:45:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5740a3b6e635456b34b4f31d0f1e84d3e746b796
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HotSpot Style Guide has stale link to chromium style guide,JDK-8280182,5066496,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cushon,cushon,cushon,2022-01-18 15:06,2022-01-26 17:16,2023-10-01 09:56,2022-01-19 13:06,,,,,,,,,19,hotspot,,0,hotspot-style-guide,,,,,,,,,,,,,,,,,,,"doc/hotspot-style.md contains a broken link to: https://chromium.googlesource.com/chromium/src/+/main/styleguide/c++/c++11.md

The correct link is: https://chromium.googlesource.com/chromium/src/+/main/styleguide/c++/c++-features.md",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vpcj:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11336cca,,,,,,,,,"2022-01-18 15:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7138
Date: 2022-01-18 23:09:12 +0000;;;","2022-01-19 13:06;roboduke;Changeset: dac15efc
Author:    Liam Miller-Cushon <cushon@openjdk.org>
Date:      2022-01-19 20:17:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dac15efc1be8fe49d2f6365f9adfb31dc3ea74ba
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Possible NPE in Thread.dispatchUncaughtException,JDK-8280174,5066487,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aturbanov,aturbanov,aturbanov,2022-01-18 12:56,2022-01-26 17:22,2023-10-01 09:56,2022-01-24 03:12,17,18,19,,,,,,19,core-libs,,0,noreg-hard,,,,,,,,,,,,,,,,,,,"Thread.dispatchUncaughtException calls getUncaughtExceptionHandler() which reads volatile field twice:

    private volatile UncaughtExceptionHandler uncaughtExceptionHandler;

    public UncaughtExceptionHandler getUncaughtExceptionHandler() {
        return uncaughtExceptionHandler != null ?
            uncaughtExceptionHandler : group;
    }

    private void dispatchUncaughtException(Throwable e) {
        getUncaughtExceptionHandler().uncaughtException(this, e);
    }

Another thread could change uncaughtExceptionHandler between 2 volatile reads. It will result in NullPointerException",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vpaj:",9223372036854775807,b07,,,,,,,,,,,,"2022-01-18 13:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7117
Date: 2022-01-17 20:56:56 +0000;;;","2022-01-18 23:19;alanb;It would be unusual to change the UHE of another started Thread but in theory it could be set to null as getUncaughtExceptionHandler is called or the thread is terminating with an exception. But yes, a long standing bug here.;;;","2022-01-24 03:12;roboduke;Changeset: f05ff996
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-01-24 11:10:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f05ff996543d0239383d8b363fdbba15769c4aae
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Generate Preload attribute to enumerate value classes encountered,JDK-8280164,5066474,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-01-18 09:25,2022-01-19 06:17,2023-10-01 09:56,2022-01-19 06:17,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,,,,,,,"From https://openjdk.java.net/jeps/8277163

Each class file generated by javac includes a Preload attribute naming any value class that appears in one of the class file's declared field or method descriptors.

According to JVMS draft at https://cr.openjdk.java.net/~dlsmith/jep401/jep401-20211220/specs/value-objects-jvms.html#jvms-4.7.31

4.7.31 The Preload Attribute
The Preload attribute is a variable-length attribute in the attributes table of a ClassFile structure (4.1) in a version 61.65535 class file. The Preload attribute indicates to a Java Virtual Machine implementation that certain classes contain information that may be of interest during linkage. For example, a value class might be listed to facilitate inlining of value objects.

There must be no more than one Preload attribute in the attributes table of a ClassFile structure.

The Preload attribute should have the following format:

Preload_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 number_of_classes;
    u2 classes[number_of_classes];
}
The items of the Preload_attribute structure are as follows:

attribute_name_index
The value of the attribute_name_index item is an index into the constant_pool table. The constant_pool entry at that index is a CONSTANT_Utf8_info structure (4.4.7) representing the string ""Preload"".

attribute_length
The value of the attribute_length item indicates the length of the attribute, excluding the initial six bytes.

number_of_classes
The value of the number_of_classes item indicates the number of entries in the classes array.

classes[]
Each value in the classes array should be a valid index into the constant_pool table. The constant_pool entry at that index should be a CONSTANT_Class_info structure (4.4.1) representing a class or interface.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vp7n:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-18 10:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/605
Date: 2022-01-18 18:45:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Implement code generation support for value classes.,JDK-8280163,5066472,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-01-18 09:09,2022-01-18 09:13,2023-10-01 09:56,2022-01-18 09:13,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,,,,,,,"
This ticket is to implement code generation support for value classes.

Much of this functionality already exists in the Valhalla code base, but were implemented at the level of B3 (primitive) classes. What is needed therefore is to push these code generation tactics and strategies down to B2 (value) classes.

Specifically:

- Rename defaultvalue opcode to aconst_init
- Transate value class constructors to static factory methods of the name <init> with the return type of the class type.
- Translate source level value instantiation attempts via new into calls to the static value factory method.
- Translate assignments to fields with withfield rather than putfield.
- In the class reader recognize value class factory methods and massage them and internalize them as normal constrctors - This is to minimize changes to the other phases of the compiler. A value class constrctor is treated as plain constrctor by javac but during class file emission, we do as mandated by JVMS.

Deferred

- <init> to be renamed to <new>
- Emission of Preload attribute
- Marking stateless abstract classes as value supers.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vp77:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-18 09:12;sadayapalam;PR: https://github.com/openjdk/valhalla/pull/604

Commit: https://github.com/openjdk/valhalla/pull/604/commits/7bd4466fa20d1a92db3145428850a8ab090b434c;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/net/httpserver/simpleserver/jwebserver/MaxRequestTimeTest.java fails with SSLException,JDK-8280161,5066470,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jboes,dfuchs,dfuchs,2022-01-18 08:58,2022-01-26 17:20,2023-10-01 09:56,2022-01-20 04:17,,,,,,,,,19,core-libs,,0,noreg-self,,,,,,,,,,,,,,,,,,,"Binding to loopback by default. For all interfaces use ""-b 0.0.0.0"" or ""-b ::"".
Serving T:\\...\\jtreg_open_test_jdk_tier2_part3\\scratch\\4\\MaxRequestTimeTest and subdirectories on 127.0.0.1 port 65013
URL http://127.0.0.1:65013/

test MaxRequestTimeTest.testMaxRequestTime(): failure
javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection?
	at java.net.http/jdk.internal.net.http.HttpClientImpl.send(HttpClientImpl.java:582)
	at java.net.http/jdk.internal.net.http.HttpClientFacade.send(HttpClientFacade.java:123)
	at MaxRequestTimeTest.sendHTTPSRequest(MaxRequestTimeTest.java:142)
	at MaxRequestTimeTest.testMaxRequestTime(MaxRequestTimeTest.java:99)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection?
	at java.base/sun.security.ssl.SSLEngineInputRecord.bytesInCompletePacket(SSLEngineInputRecord.java:145)
	at java.base/sun.security.ssl.SSLEngineInputRecord.bytesInCompletePacket(SSLEngineInputRecord.java:64)
	at java.base/sun.security.ssl.SSLEngineImpl.readRecord(SSLEngineImpl.java:612)
	at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:506)
	at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:482)
	at java.base/javax.net.ssl.SSLEngine.unwrap(SSLEngine.java:679)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Reader.unwrapBuffer(SSLFlowDelegate.java:529)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Reader.processData(SSLFlowDelegate.java:433)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Reader$ReaderDownstreamPusher.run(SSLFlowDelegate.java:268)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	... 1 more
config MaxRequestTimeTest.teardown(): success

===============================================
com/sun/net/httpserver/simpleserver/jwebserver/MaxRequestTimeTest.java
Total tests run: 1, Passes: 0, Failures: 1, Skips: 0
===============================================
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280162,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2vp6r:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-01-19 09:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7144
Date: 2022-01-19 17:01:22 +0000;;;","2022-01-20 04:17;roboduke;Changeset: 20297dea
Author:    Julia Boes <jboes@openjdk.org>
Date:      2022-01-20 12:16:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/20297deaeb64fb1e025ed1fcde19867c6875f9a0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
New test from JDK-8274736 failed with/without patch in JDK11u,JDK-8280158,5066466,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,clanger,zgu,zgu,2022-01-18 08:23,2023-02-16 01:42,2023-10-01 09:56,2022-10-29 05:20,11,11.0.15,,,,,,,11.0.18,security-libs,,1,jdk11u-fix-request,jdk11u-fix-yes,redhat-interest,sap-interest,,,,,,,,,,,,,,,,"The new test NoInvalidateSocketException.java from JDK-8274736 failed with and without the fix in TransportContext.java.

SAP reported the problem with the backport. Apparently, it is JDK11u specific.

Logs:

335262374876357: Main Client Thread: *** OPENED NEW SESSION ***: Session(1640081713614|TLS_AES_256_GCM_SHA384)
335262376364735: Client Reader Thread: Started reading from SSLSocket@4e5adc37
335262388254500: Main Client Thread: Closing SSLSocket@4e5adc37
335262393544543: Main Client Thread: Closed SSLSocket@4e5adc37
335262393794628: Server Reader Thread: Received: -1 bytes of data

335262395736985: Client Reader Thread: Exception reading from SSLSocket@4e5adc37: java.net.SocketException: Socket closed
java.net.SocketException: Socket closed
         at java.base/java.net.SocketInputStream.socketRead0(Native Method)
         at java.base/java.net.SocketInputStream.socketRead(SocketInputStream.java:115)
         at java.base/java.net.SocketInputStream.read(SocketInputStream.java:168)
         at java.base/java.net.SocketInputStream.read(SocketInputStream.java:140)
         at java.base/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:478)
         at java.base/sun.security.ssl.SSLSocketInputRecord.readHeader(SSLSocketInputRecord.java:472)
         at java.base/sun.security.ssl.SSLSocketInputRecord.bytesInCompletePacket(SSLSocketInputRecord.java:70)
         at java.base/sun.security.ssl.SSLSocketImpl.readApplicationRecord(SSLSocketImpl.java:1449)
         at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:1060)
         at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:967)
         at NoInvalidateSocketException.readFromSSLSocket(NoInvalidateSocketException.java:249)
         at NoInvalidateSocketException$ReaderThread.run(NoInvalidateSocketException.java:180)
335262888066936: Main Client Thread: *** Session(1640081713614|TLS_AES_256_GCM_SHA384) IS VALID ***

335263891069822: Main Client Thread: Opened SSLSocket@15cf8e42
335263891241055: Main Client Thread: Started handshake on SSLSocket@15cf8e42

...

javax.net.ssl|ALL|1A|Server Reader Thread|2021-12-21 10:15:26.646 GMT|SSLSessionImpl.java:242|Session initialized:  Session(1640081713614|TLS_AES_256_GCM_SHA384)
javax.net.ssl|ALL|10|Client Reader Thread|2021-12-21 10:15:26.661 GMT|SSLSessionImpl.java:242|Session initialized:  Session(1640081713614|TLS_AES_256_GCM_SHA384)
java.lang.RuntimeException: One or more sessions were improperly invalidated.
         at NoInvalidateSocketException.main(NoInvalidateSocketException.java:88)
         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
         at java.base/java.lang.reflect.Method.invoke(Method.java:566)
         at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
         at java.base/java.lang.Thread.run(Thread.java:829)

JavaTest Message: Test threw exception: java.lang.RuntimeException: One or more sessions were improperly invalidated.
JavaTest Message: shutting down test

",,,,,,,,,,JDK-8298856,,,,,,,,,,,,,,,,,,,,,,,JDK-8278388,,,JDK-8211018,JDK-8289886,,,,,,,,,,,JDK-8277970,JDK-8274736,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b01,11.0.15,,,,,,,"0|i2vp5v:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-01-18 10:40;zgu;java.net.SocketException: Socket closed exception is expected and intentional:
The test verifies that java.net.SocketException should not invalidate SSL session.

The failure case in jdk11u, I found, is due to a newly created session is INVALIDATE (sessionId == []);;;","2022-01-19 05:51;zgu;Further debugging pointing to TLS v13 handshake problem:

Failed case:

T13FinishedProducer.onProduceFinished(ClientHandshakeContext chc,
                HandshakeMessage message) {
....
  chc.conContext.conSession = chc.handshakeSession.finish(); <=== returns invalid session Id == []
  chc.conContext.protocolVersion = chc.negotiatedProtocol;
... 

This is pretty much how far I can go, I will try to find a expert in this area to takeover.



}


;;;","2022-03-16 03:29;sgehwolf;[~pkumaraswamy] Could you please link the bug this duplicates? Otherwise closing this as a duplicate doesn't seem appropriate.;;;","2022-03-16 04:31;pkumaraswamy;Re-opening. The duplicate bug was internal, this public bug can be used to track the fix instead;;;","2022-03-16 05:59;sgehwolf;Thanks!;;;","2022-06-01 23:46;clanger;Is it maybe the same issue as JDK-8277970?;;;","2022-06-02 00:11;jnimeh;Hmmm, never seen this one before.  It doesn't appear to be the same as JDK-8277970.  There would need to be an AEADBadTagException that underlies the failure and there are parts of the stack trace that look different than what we're already tracking.;;;","2022-06-02 08:51;clanger;Thanks, [~jnimeh], for looking.;;;","2022-06-14 21:54;azeller;We see the same problems in 8u331.;;;","2022-08-16 05:04;pkumaraswamy;I do not observe any failure with Oracle JDK8u331, I tried with latest versions as well and couldn't reproduce the issue even after 100's of re-run;;;","2022-10-11 06:31;djelinski;The SSLSessionImpl.isRejoinable (used by session.isValid) method has a TLS1.3 - related bug that was fixed in JDK-8211018; in short, TLS 1.3 sessions don't need a sessionID. Compare:
https://github.com/openjdk/jdk11u-dev/blob/c1411113b396f468963a1deacc3b57ed366e735a/src/java.base/share/classes/sun/security/ssl/SSLSessionImpl.java#L385
https://github.com/openjdk/jdk/blob/4cec141a90bc5d3b8ec17c024291d9c74a112cd4/src/java.base/share/classes/sun/security/ssl/SSLSessionImpl.java#L853

Also, TLS 1.3 sessions generated by Java should have session ID. That was fixed in JDK-8277881.;;;","2022-10-19 02:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1465
Date: 2022-10-19 09:48:55 +0000;;;","2022-10-25 22:52;clanger;Fix request (11u)
The proposed fix repairs an issue that was unveiled by the backport of JDK-8274736. Suggested and reviewed by Daniel Jelinski. Tested in SAP nightlies. Risk is moderate.;;;","2022-10-29 05:20;dukebot;Changeset: 18631ef9
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-10-29 12:16:51 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/18631ef9928fe781ad5a6459642062d5f40d04cb
;;;","2022-11-02 04:53;dukebot;Changeset: 18631ef9
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-10-29 12:16:51 +0000
URL:       https://git.openjdk.org/jdk11u/commit/18631ef9928fe781ad5a6459642062d5f40d04cb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wrong texts Falied in a couple of tests,JDK-8280157,5066465,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-01-18 08:15,2022-01-26 17:15,2023-10-01 09:56,2022-01-19 04:02,18,19,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,We have a wrong string Falied in a couple of tests.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vp5n:",9223372036854775807,b07,,,,,,,,,,,,"2022-01-19 01:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7142
Date: 2022-01-19 09:19:00 +0000;;;","2022-01-19 04:02;roboduke;Changeset: 8931c122
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-01-19 12:01:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8931c12258a39cabda2cd1b92f54afcb216b882e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[PPC64, s390] frame size checks are not yet correct",JDK-8280155,5066460,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mdoerr,mdoerr,2022-01-18 07:47,2022-02-10 02:23,2023-10-01 09:56,2022-01-19 00:29,18,,,,,,,,18,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oraclejdk-na,,,,,,,,,,,,,,,"JDK-8279924 introduced new checks in frame::is_interpreted_frame_valid. One of them is incorrect: fp() and sp() return intptr_t*, so subtraction needs to use the number of slots instead of the number of bytes.

The following tests have failed on some machines:
jdk/jfr/api/consumer/TestRecordedFullStackTrace.java
jdk/jfr/event/profiling/TestFullStackTrace.java

In addition, ""assert(pc != __null) failed: precondition: must have PC"" has occurred on PPC64 because the null check is not done before the frame constructor.",,,,,,,,,,JDK-8280334,JDK-8280667,JDK-8280959,JDK-8281582,,,,,,,,,,,,,,,,,,,,,,,JDK-8279924,,,,,,,,,,,,JDK-8281061,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,s390x,,,,,,18,,,,,,,"0|i2vp4j:",9223372036854775807,b33,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-18 08:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/107
Date: 2022-01-18 15:51:22 +0000;;;","2022-01-19 00:29;roboduke;Changeset: f37bfead
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-01-19 08:28:31 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/f37bfeadcf036a75defc64ad7f4a9f5596cd7407
;;;","2022-01-25 04:31;roboduke;Changeset: f37bfead
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-01-19 08:28:31 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/f37bfeadcf036a75defc64ad7f4a9f5596cd7407
;;;","2022-01-26 01:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/121
Date: 2022-01-26 09:15:41 +0000;;;","2022-01-26 03:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/123
Date: 2022-01-26 11:47:59 +0000;;;","2022-01-26 04:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/797
Date: 2022-01-26 12:04:57 +0000;;;","2022-01-26 04:22;mdoerr;Fix Request (11u, 17u):
Should get backported together with JDK-8279924. Problems were observed in these older releases. Applies cleanly (except Copyright update in 11u).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect comparator com.sun.beans.introspect.MethodInfo.MethodOrder,JDK-8280132,5066408,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,webbuggrp,webbuggrp,2022-01-17 15:03,2023-07-24 09:28,2023-10-01 09:56,2022-02-08 17:28,11,17,18,,,,,,19,client-libs,,0,11-bp,17-bp,amazon-interest,dcspn,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,reproducer-yes,webbug,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS X 11.5.1

$ java -version
openjdk version ""17.0.1"" 2021-10-19
OpenJDK Runtime Environment (build 17.0.1+12-39)
OpenJDK 64-Bit Server VM (build 17.0.1+12-39, mixed mode, sharing)

Older versions are also affected (tested 11.0.8)

A DESCRIPTION OF THE PROBLEM :
Method java.beans.Introspector.getBeanInfo(...) sometimes thows exception for complex classes. Issue JDK-8211147 made MethodInfo.MethodOrder comparator antisymmetric, but it is still non-transitive. Attached source code shows an example that breaks transitivity.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run program many times (1000 should be enough, maybe more if not lucky), public API test should throw IllegalArgumentException

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Expected to not throw.
ACTUAL -

Public API:

Exception in thread ""main"" java.lang.IllegalArgumentException: Comparison method violates its general contract!
	at java.base/java.util.TimSort.mergeLo(TimSort.java:781)
	at java.base/java.util.TimSort.mergeAt(TimSort.java:518)
	at java.base/java.util.TimSort.mergeCollapse(TimSort.java:448)
	at java.base/java.util.TimSort.sort(TimSort.java:245)
	at java.base/java.util.Arrays.sort(Arrays.java:1307)
	at java.base/java.util.ArrayList.sort(ArrayList.java:1721)
	at java.desktop/com.sun.beans.introspect.MethodInfo.get(MethodInfo.java:93)
	at java.desktop/com.sun.beans.introspect.ClassInfo.getMethods(ClassInfo.java:80)
	at java.desktop/java.beans.Introspector.getTargetMethodInfo(Introspector.java:1029)
	at java.desktop/java.beans.Introspector.getBeanInfo(Introspector.java:446)
	at java.desktop/java.beans.Introspector.getBeanInfo(Introspector.java:195)
	at Main.testPublicAPI(Main.java:60)
	at Main.main(Main.java:11)

Private API:

MethodA = public default Main$C2 Main$D.foo0()
MethodB = public default Main$C3 Main$D.foo0()
MethodC = public default Main$C1 Main$D.foo0()
Exception in thread ""main"" java.lang.RuntimeException: Broken contract!
	at Main.lambda$testPrivateAPI$0(Main.java:33)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at Main.lambda$testPrivateAPI$1(Main.java:27)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at Main.lambda$testPrivateAPI$2(Main.java:26)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at Main.testPrivateAPI(Main.java:25)
	at Main.main(Main.java:13)

---------- BEGIN SOURCE ----------
import java.beans.Introspector;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Comparator;
import java.util.List;

public class Main {

    public static void main(String... args) throws Exception {
        // Public API, fails very rarely
        testPublicAPI();
        // Test using internal API, fails always
        testPrivateAPI();
    }

    // ------------------

    public static void testPrivateAPI() throws Exception {
        // --add-opens java.desktop/com.sun.beans.introspect=ALL-UNNAMED
        Class<?> orderMethodClass = Class.forName(""com.sun.beans.introspect.MethodInfo$MethodOrder"");
        Field instance = orderMethodClass.getDeclaredField(""instance"");
        instance.setAccessible(true);
        Comparator<Method> order = (Comparator<Method>) instance.get(orderMethodClass);
        List<Method> methods = List.of(D.class.getDeclaredMethods());
        methods.forEach(a -> {
            methods.forEach(b -> {
                methods.forEach(c -> {
                    if (order.compare(a, b) < 0 && order.compare(b, c) < 0) {
                        if (order.compare(a, c) >= 0) {
                            System.out.println(""MethodA = "" + a);
                            System.out.println(""MethodB = "" + b);
                            System.out.println(""MethodC = "" + c);
                            throw new RuntimeException(""Broken contract!"");
                        }
                    }
                });
            });
        });
    }

    interface C1 {
        C1 foo0();
    }

    interface C2 {
        C2 foo0();
    }

    interface C3 extends C1 {
        C3 foo0();
    }

    interface D extends C3, C2, C1 {
        D foo0();
    }

    // ------------------

    private static void testPublicAPI() throws Exception {
        Introspector.getBeanInfo(A_258.class);
    }

    public interface A_239 {
    }
    public interface A_240 {
    }
    public interface A_000 {
    }
    public interface A_238<T> {
    }
    public interface A_035 extends A_195, A_106, A_240 {
        A_035 a_040();
        A_035 a_000();
        A_035 a_018();
    }
    public static class A_258 implements A_053, A_196, A_200, A_070, A_106, A_057, A_094, A_098, A_105, A_107, A_097, A_093, A_214, A_215, A_210, A_129, A_067, A_180, A_108, A_184, A_110, A_111, A_082, A_221, A_172, A_171, A_168, A_139, A_143, A_140, A_075, A_081, A_080, A_163, A_165, A_164, A_159, A_161, A_155, A_158, A_157, A_156, A_195, A_197, A_114, A_213, A_236, A_220, A_201, A_035, A_136, A_135, A_226, A_227, A_005, A_054, A_203, A_202, A_071, A_115, A_113, A_112, A_058, A_095, A_096, A_099, A_100, A_237, A_091, A_092, A_217, A_218, A_216, A_211, A_130, A_063, A_062, A_064, A_065, A_066, A_061, A_060, A_181, A_208, A_207, A_209, A_185, A_186, A_083, A_173, A_176, A_222, A_223, A_174, A_169, A_153, A_154, A_194, A_190, A_104, A_132, A_141, A_142, A_166, A_167, A_160, A_162, A_076, A_077, A_078, A_079, A_074, A_085, A_192, A_188, A_134, A_138, A_137, A_228 {

        @Override
        public A_258 a_052() {
            return null;
        }

        @Override
        public A_258 a_071() {
            return null;
        }

        @Override
        public A_258 a_029() {
            return null;
        }

        @Override
        public A_258 a_046() {
            return null;
        }

        @Override
        public A_258 a_045() {
            return null;
        }

        @Override
        public A_258 a_047() {
            return null;
        }

        @Override
        public A_258 a_048() {
            return null;
        }

        @Override
        public A_258 a_049() {
            return null;
        }

        @Override
        public A_258 a_044() {
            return null;
        }

        @Override
        public A_258 a_043() {
            return null;
        }

        @Override
        public A_258 a_026() {
            return null;
        }

        @Override
        public A_258 a_027() {
            return null;
        }

        @Override
        public A_258 a_074() {
            return null;
        }

        @Override
        public A_258 a_079() {
            return null;
        }

        @Override
        public A_258 a_012() {
            return null;
        }

        @Override
        public A_258 a_100() {
            return null;
        }

        @Override
        public A_258 a_085() {
            return null;
        }

        @Override
        public A_258 a_084() {
            return null;
        }

        @Override
        public A_258 a_011() {
            return null;
        }

        @Override
        public A_258 a_059() {
            return null;
        }

        @Override
        public A_258 a_058() {
            return null;
        }

        @Override
        public A_258 a_080() {
            return null;
        }

        @Override
        public A_258 a_030() {
            return null;
        }

        @Override
        public A_258 a_031() {
            return null;
        }

        @Override
        public A_258 a_081() {
            return null;
        }

        @Override
        public A_258 a_077() {
            return null;
        }

        @Override
        public A_258 a_036() {
            return null;
        }

        @Override
        public A_258 a_056() {
            return null;
        }

        @Override
        public A_258 a_078() {
            return null;
        }

        @Override
        public A_258 a_076() {
            return null;
        }

        @Override
        public A_258 a_057() {
            return null;
        }

        @Override
        public A_258 a_005() {
            return null;
        }

        @Override
        public A_258 a_089() {
            return null;
        }

        @Override
        public A_258 a_088() {
            return null;
        }

        @Override
        public A_258 a_090() {
            return null;
        }

        @Override
        public A_258 a_072() {
            return null;
        }

        @Override
        public A_258 a_002() {
            return null;
        }

        @Override
        public A_258 a_040() {
            return null;
        }

        @Override
        public A_258 a_060() {
            return null;
        }

        @Override
        public A_258 a_061() {
            return null;
        }

        @Override
        public A_258 a_039() {
            return null;
        }

        @Override
        public A_258 a_032() {
            return null;
        }

        @Override
        public A_258 a_033() {
            return null;
        }

        @Override
        public A_258 a_000() {
            return null;
        }

        @Override
        public A_258 a_037() {
            return null;
        }

        @Override
        public A_258 a_014() {
            return null;
        }

        @Override
        public A_258 a_015() {
            return null;
        }

        @Override
        public A_258 a_016() {
            return null;
        }

        @Override
        public A_258 a_017() {
            return null;
        }

        @Override
        public A_258 a_091() {
            return null;
        }

        @Override
        public A_258 a_065() {
            return null;
        }

        @Override
        public A_258 a_066() {
            return null;
        }

        @Override
        public A_258 a_018() {
            return null;
        }

        @Override
        public A_258 a_093() {
            return null;
        }

        @Override
        public A_258 a_092() {
            return null;
        }

        @Override
        public A_258 a_095() {
            return null;
        }

        @Override
        public A_258 a_096() {
            return null;
        }

        @Override
        public A_258 a_069() {
            return null;
        }
    }
    public interface A_250 extends A_239 {
        A_250 a_094();
    }
    public interface A_253 extends A_239 {
        A_253 a_000();
    }
    public interface A_256 extends A_239 {
        A_256 a_009();
    }
    public interface A_248 extends A_239 {
        A_248 a_022();
    }
    public interface A_255 extends A_239 {
        A_255 a_007();
    }
    public interface A_241 extends A_248, A_250, A_251, A_249, A_239 {
    }
    public interface A_254 extends A_239 {
        A_254 a_008();
    }
    public interface A_251 extends A_239 {
        A_251 a_097();
    }
    public interface A_252 extends A_241, A_255, A_253, A_257, A_254, A_256, A_239 {
        A_252 a_022();
        A_252 a_094();
        A_252 a_097();
        A_252 a_087();
    }
    public interface A_229 extends A_239 {
        A_229 a_000();
    }
    public interface A_232 extends A_239 {
    }
    public interface A_249 extends A_239 {
        A_249 a_087();
    }
    public interface A_230 extends A_239 {
    }
    public interface A_234 extends A_239 {
        A_234 a_026();
    }
    public interface A_037 extends A_239 {
        A_037 a_013();
    }
    public interface A_233 extends A_239 {
        A_233 a_018();
    }
    public interface A_231 extends A_239 {
        A_231 a_007();
    }
    public interface A_049 extends A_239 {
        A_049 a_068();
    }
    public interface A_257 extends A_239 {
        A_257 a_018();
    }
    public interface A_235 extends A_239 {
    }
    public interface A_040 extends A_239 {
        A_040 a_025();
    }
    public interface A_133 extends A_000, A_005, A_134, A_240 {
        A_133 a_040();
        A_133 a_057();
    }
    public interface A_001 extends A_239 {
        A_001 a_020();
    }
    public interface A_031 extends A_239 {
    }
    public interface A_089 extends A_239 {
        A_089 a_098();
    }
    public interface A_166 extends A_239 {
        A_166 a_065();
    }
    public interface A_054 extends A_239 {
        A_054 a_000();
    }
    public interface A_190 extends A_239 {
        A_190 a_077();
    }
    public interface A_169 extends A_239 {
        A_169 a_037();
    }
    public interface A_217 extends A_239 {
        A_217 a_093();
    }
    public interface A_078 extends A_239 {
        A_078 a_016();
    }
    public interface A_192 extends A_239 {
    }
    public interface A_222 extends A_239 {
        A_222 a_095();
    }
    public interface A_112 extends A_239 {
        A_112 a_033();
    }
    public interface A_066 extends A_239 {
        A_066 a_049();
    }
    public interface A_074 extends A_239 {
        A_074 a_012();
    }
    public interface A_003 extends A_239 {
        A_003 a_039();
    }
    public interface A_083 extends A_239 {
    }
    public interface A_050 extends A_239 {
        A_050 a_070();
    }
    public interface A_087 extends A_239 {
    }
    public interface A_058 extends A_239 {
    }
    public interface A_128 extends A_239 {
    }
    public interface A_092 extends A_239 {
    }
    public interface A_004 extends A_240 {
        A_004 a_040();
    }
    public interface A_115 extends A_239 {
        A_115 a_039();
    }
    public interface A_176 extends A_239 {
        A_176 a_071();
    }
    public interface A_162 extends A_239 {
    }
    public interface A_132 extends A_239 {
        A_132 a_056();
    }
    public interface A_064 extends A_239 {
        A_064 a_047();
    }
    public interface A_021 extends A_239 {
    }
    public interface A_160 extends A_239 {
    }
    public interface A_141 extends A_239 {
        A_141 a_060();
    }
    public interface A_091 extends A_239 {
        A_091 a_026();
    }
    public interface A_034 extends A_239 {
        A_034 a_084();
    }
    public interface A_151 extends A_239 {
    }
    public interface A_026 extends A_239 {
        A_026 a_026();
    }
    public interface A_130 extends A_239 {
        A_130 a_052();
    }
    public interface A_242 extends A_239 {
        A_242 a_001();
    }
    public interface A_205 extends A_239 {
        A_205 a_086();
    }
    public interface A_048 extends A_239 {
        A_048 a_065();
    }
    public interface A_044 extends A_240 {
        A_044 a_040();
    }
    public interface A_023 extends A_239 {
    }
    public interface A_027 extends A_239 {
    }
    public interface A_138 extends A_239 {
        A_138 a_059();
    }
    public interface A_024 extends A_239 {
        A_024 a_011();
    }
    public interface A_038 extends A_239 {
        A_038 a_021();
    }
    public interface A_016 extends A_239 {
    }
    public interface A_118 extends A_239 {
        A_118 a_045();
    }
    public interface A_071 extends A_239 {
        A_071 a_011();
    }
    public interface A_203 extends A_239 {
        A_203 a_084();
    }
    public interface A_137 extends A_239 {
    }
    public interface A_119 extends A_239 {
        A_119 a_046();
    }
    public interface A_145 extends A_239 {
    }
    public interface A_045 extends A_239 {
        A_045 a_041();
    }
    public interface A_069 extends A_239 {
        A_069 a_010();
    }
    public interface A_150 extends A_239 {
    }
    public interface A_047 extends A_239 {
        A_047 a_057();
    }
    public interface A_179 extends A_239 {
    }
    public interface A_207 extends A_239 {
        A_207 a_088();
    }
    public interface A_228 extends A_239 {
        A_228 a_100();
    }
    public interface A_005 extends A_240 {
        A_005 a_040();
    }
    public interface A_030 extends A_239 {
        A_030 a_039();
    }
    public interface A_173 extends A_239 {
        A_173 a_069();
    }
    public interface A_060 extends A_239 {
        A_060 a_043();
    }
    public interface A_245 extends A_239 {
        A_245 a_009();
    }
    public interface A_042 extends A_239 {
        A_042 a_035();
    }
    public interface A_209 extends A_239 {
        A_209 a_090();
    }
    public interface A_216 extends A_239 {
    }
    public interface A_142 extends A_239 {
    }
    public interface A_246 extends A_239 {
        A_246 a_019();
    }
    public interface A_223 extends A_239 {
    }
    public interface A_211 extends A_239 {
        A_211 a_091();
    }
    public interface A_244 extends A_239 {
        A_244 a_008();
    }
    public interface A_019 extends A_239 {
        A_019 a_050();
    }
    public interface A_041 extends A_239 {
        A_041 a_034();
    }
    public interface A_208 extends A_239 {
        A_208 a_089();
    }
    public interface A_065 extends A_239 {
    }
    public interface A_127 extends A_239 {
        A_127 a_083();
    }
    public interface A_033 extends A_239 {
    }
    public interface A_153 extends A_239 {
    }
    public interface A_079 extends A_239 {
    }
    public interface A_025 extends A_239 {
    }
    public interface A_046 extends A_239 {
        A_046 a_042();
    }
    public interface A_002 extends A_239 {
    }
    public interface A_154 extends A_239 {
    }
    public interface A_077 extends A_239 {
        A_077 a_015();
    }
    public interface A_121 extends A_239 {
        A_121 a_053();
    }
    public interface A_036 extends A_239 {
        A_036 a_003();
    }
    public interface A_225 extends A_239 {
        A_225 a_054();
    }
    public interface A_181 extends A_239 {
        A_181 a_005();
    }
    public interface A_134 extends A_239 {
        A_134 a_057();
    }
    public interface A_017 extends A_239 {
    }
    public interface A_194 extends A_239 {
        A_194 a_081();
    }
    public interface A_243 extends A_239 {
        A_243 a_006();
    }
    public interface A_015 extends A_239 {
        A_015 a_004();
    }
    public interface A_028 extends A_239 {
        A_028 a_032();
    }
    public interface A_218 extends A_239 {
    }
    public interface A_174 extends A_239 {
    }
    public interface A_039 extends A_239 {
        A_039 a_023();
    }
    public interface A_029 extends A_239 {
    }
    public interface A_095 extends A_239 {
        A_095 a_029();
    }
    public interface A_096 extends A_239 {
    }
    public interface A_124 extends A_239 {
        A_124 a_028();
    }
    public interface A_202 extends A_239 {
        A_202 a_085();
    }
    public interface A_186 extends A_239 {
    }
    public interface A_120 extends A_239 {
    }
    public interface A_076 extends A_239 {
        A_076 a_014();
    }
    public interface A_052 extends A_239 {
        A_052 a_099();
    }
    public interface A_056 extends A_239 {
    }
    public interface A_020 extends A_239 {
        A_020 a_062();
    }
    public interface A_018 extends A_239 {
        A_018 a_045();
    }
    public interface A_149 extends A_239 {
        A_149 a_051();
    }
    public interface A_022 extends A_239 {
        A_022 a_075();
    }
    public interface A_063 extends A_239 {
        A_063 a_046();
    }
    public interface A_043 extends A_239 {
        A_043 a_038();
    }
    public interface A_167 extends A_239 {
    }
    public interface A_085 extends A_239 {
        A_085 a_018();
    }
    public interface A_032 extends A_239 {
    }
    public interface A_188 extends A_239 {
        A_188 a_076();
    }
    public interface A_126 extends A_239 {
    }
    public interface A_113 extends A_239 {
        A_113 a_032();
    }
    public interface A_051 extends A_239 {
        A_051 a_082();
    }
    public interface A_185 extends A_239 {
        A_185 a_074();
    }
    public interface A_099 extends A_239 {
    }
    public interface A_062 extends A_239 {
        A_062 a_045();
    }
    public interface A_237 extends A_239 {
        A_237 a_027();
    }
    public interface A_100 extends A_239 {
    }
    public interface A_189 extends A_000, A_005, A_190, A_240 {
        A_189 a_040();
        A_189 a_077();
    }
    public interface A_061 extends A_239 {
        A_061 a_044();
    }
    public interface A_104 extends A_239 {
        A_104 a_036();
    }
    public interface A_084 extends A_000, A_005, A_085, A_240 {
        A_084 a_040();
        A_084 a_018();
    }
    public interface A_129 extends A_000, A_005, A_130, A_240 {
        A_129 a_040();
        A_129 a_052();
    }
    public interface A_086 extends A_000, A_005, A_087, A_089, A_240 {
        A_086 a_040();
        A_086 a_024();
        A_086 a_098();
    }
    public interface A_125 extends A_239 {
    }
    public interface A_212 extends A_053, A_084, A_005, A_054, A_085, A_217, A_218, A_240 {
        A_212 a_040();
        A_212 a_000();
        A_212 a_018();
        A_212 a_093();
    }
    public interface A_171 extends A_170, A_175, A_005, A_173, A_176, A_174, A_240 {
        A_171 a_040();
        A_171 a_069();
        A_171 a_071();
        A_171 a_072();
    }
    public interface A_247 extends A_239 {
    }
    public interface A_183 extends A_053, A_084, A_005, A_054, A_085, A_185, A_186, A_240 {
        A_183 a_040();
        A_183 a_000();
        A_183 a_018();
        A_183 a_074();
    }
    public interface A_198 extends A_053, A_196, A_070, A_131, A_005, A_054, A_203, A_071, A_132, A_240 {
        A_198 a_040();
        A_198 a_000();
        A_198 a_084();
        A_198 a_011();
        A_198 a_056();
    }
    public interface A_070 extends A_000, A_005, A_071, A_240 {
        A_070 a_040();
        A_070 a_011();
    }
    public interface A_109 extends A_106, A_212, A_005, A_115, A_113, A_112, A_054, A_085, A_217, A_218, A_240 {
        A_109 a_040();
        A_109 a_039();
        A_109 a_032();
        A_109 a_033();
        A_109 a_000();
        A_109 a_018();
        A_109 a_093();
    }
    public interface A_158 extends A_159, A_161, A_152, A_005, A_054, A_160, A_162, A_153, A_154, A_240 {
        A_158 a_040();
        A_158 a_000();
        A_158 a_079();
    }
    public interface A_110 extends A_106, A_212, A_183, A_005, A_054, A_085, A_115, A_113, A_112, A_217, A_218, A_185, A_186, A_240 {
        A_110 a_040();
        A_110 a_000();
        A_110 a_018();
        A_110 a_039();
        A_110 a_032();
        A_110 a_033();
        A_110 a_093();
        A_110 a_074();
    }
    public interface A_200 extends A_000, A_005, A_202, A_240 {
        A_200 a_040();
        A_200 a_085();
    }
    public interface A_161 extends A_053, A_005, A_054, A_162, A_240 {
        A_161 a_040();
        A_161 a_000();
    }
    public interface A_175 extends A_000, A_005, A_176, A_240 {
        A_175 a_040();
        A_175 a_071();
    }
    public interface A_103 extends A_000, A_084, A_005, A_085, A_104, A_240 {
        A_103 a_040();
        A_103 a_018();
        A_103 a_036();
    }
    public interface A_093 extends A_090, A_152, A_005, A_054, A_085, A_091, A_092, A_153, A_154, A_240 {
        A_093 a_040();
        A_093 a_000();
        A_093 a_018();
        A_093 a_026();
        A_093 a_079();
        A_093 a_027();
    }
    public interface A_204 extends A_000, A_005, A_205, A_240 {
        A_204 a_040();
        A_204 a_086();
    }
    public interface A_067 extends A_059, A_152, A_005, A_054, A_085, A_063, A_062, A_064, A_065, A_066, A_061, A_060, A_153, A_154, A_240 {
        A_067 a_040();
        A_067 a_000();
        A_067 a_018();
        A_067 a_046();
        A_067 a_045();
        A_067 a_047();
        A_067 a_049();
        A_067 a_044();
        A_067 a_043();
        A_067 a_079();
    }
    public interface A_101 extends A_070, A_005, A_071, A_240 {
        A_101 a_040();
        A_101 a_011();
    }
    public interface A_224 extends A_000, A_225, A_240 {
        A_224 a_054();
        A_224 a_040();
    }
    public interface A_156 extends A_053, A_084, A_155, A_059, A_005, A_054, A_085, A_160, A_162, A_063, A_062, A_064, A_065, A_066, A_061, A_060, A_240 {
        A_156 a_040();
        A_156 a_000();
        A_156 a_018();
        A_156 a_046();
        A_156 a_045();
        A_156 a_047();
        A_156 a_049();
        A_156 a_044();
        A_156 a_043();
    }
    public interface A_122 extends A_116, A_152, A_005, A_054, A_085, A_121, A_119, A_118, A_120, A_153, A_154, A_240 {
        A_122 a_040();
        A_122 a_000();
        A_122 a_018();
        A_122 a_053();
        A_122 a_046();
        A_122 a_045();
        A_122 a_048();
        A_122 a_079();
        A_122 a_080();
    }
    public interface A_184 extends A_183, A_152, A_005, A_054, A_085, A_185, A_186, A_153, A_154, A_240 {
        A_184 a_040();
        A_184 a_000();
        A_184 a_018();
        A_184 a_074();
        A_184 a_079();
    }
    public interface A_180 extends A_000, A_181, A_240 {
        A_180 a_005();
        A_180 a_040();
    }
    public interface A_191 extends A_000, A_005, A_192, A_240 {
        A_191 a_040();
        A_191 a_078();
    }
    public interface A_107 extends A_106, A_094, A_005, A_115, A_113, A_112, A_095, A_096, A_240 {
        A_107 a_040();
        A_107 a_039();
        A_107 a_032();
        A_107 a_033();
        A_107 a_029();
        A_107 a_000();
        A_107 a_018();
    }
    public interface A_102 extends A_196, A_005, A_203, A_240 {
        A_102 a_040();
        A_102 a_084();
    }
    public interface A_177 extends A_000, A_005, A_179, A_240 {
        A_177 a_040();
    }
    public interface A_123 extends A_195, A_005, A_054, A_124, A_127, A_128, A_126, A_125, A_240 {
        A_123 a_040();
        A_123 a_000();
        A_123 a_028();
        A_123 a_083();
        A_123 a_064();
        A_123 a_055();
        A_123 a_018();
        A_123 a_079();
        A_123 a_080();
        A_123 a_081();
        A_123 a_077();
        A_123 a_036();
        A_123 a_056();
        A_123 a_012();
        A_123 a_078();
        A_123 a_076();
        A_123 a_057();
    }
    public interface A_088 extends A_106, A_086, A_240 {
        A_088 a_040();
        A_088 a_039();
        A_088 a_032();
        A_088 a_033();
        A_088 a_000();
        A_088 a_018();
        A_088 a_024();
        A_088 a_098();
    }
    public interface A_094 extends A_084, A_005, A_085, A_095, A_096, A_240 {
        A_094 a_040();
        A_094 a_018();
        A_094 a_029();
    }
    public interface A_105 extends A_098, A_236, A_005, A_085, A_153, A_074, A_099, A_100, A_240 {
        A_105 a_040();
        A_105 a_018();
        A_105 a_079();
        A_105 a_012();
        A_105 a_030();
        A_105 a_031();
        A_105 a_000();
        A_105 a_081();
        A_105 a_077();
        A_105 a_036();
        A_105 a_056();
        A_105 a_078();
        A_105 a_076();
        A_105 a_057();
    }
    public interface A_199 extends A_196, A_090, A_005, A_054, A_085, A_091, A_092, A_203, A_240 {
        A_199 a_040();
        A_199 a_000();
        A_199 a_018();
        A_199 a_026();
        A_199 a_084();
        A_199 a_027();
    }
    public interface A_080 extends A_075, A_236, A_005, A_085, A_153, A_074, A_076, A_077, A_078, A_079, A_240 {
        A_080 a_040();
        A_080 a_018();
        A_080 a_079();
        A_080 a_012();
        A_080 a_014();
        A_080 a_015();
        A_080 a_016();
        A_080 a_000();
        A_080 a_080();
        A_080 a_081();
        A_080 a_077();
        A_080 a_036();
        A_080 a_056();
        A_080 a_078();
        A_080 a_076();
        A_080 a_057();
    }
    public interface A_172 extends A_170, A_219, A_005, A_054, A_085, A_173, A_222, A_223, A_174, A_240 {
        A_172 a_040();
        A_172 a_000();
        A_172 a_018();
        A_172 a_069();
        A_172 a_095();
        A_172 a_072();
    }
    public interface A_108 extends A_106, A_180, A_206, A_005, A_115, A_113, A_112, A_181, A_208, A_207, A_209, A_240 {
        A_108 a_040();
        A_108 a_039();
        A_108 a_032();
        A_108 a_033();
        A_108 a_005();
        A_108 a_089();
        A_108 a_088();
        A_108 a_090();
        A_108 a_000();
        A_108 a_018();
    }
    public interface A_195 extends A_053, A_084, A_152, A_193, A_189, A_103, A_131, A_073, A_191, A_187, A_133, A_005, A_054, A_085, A_153, A_154, A_194, A_190, A_104, A_132, A_074, A_192, A_188, A_134, A_240 {
        A_195 a_040();
        A_195 a_000();
        A_195 a_018();
        A_195 a_079();
        A_195 a_080();
        A_195 a_081();
        A_195 a_077();
        A_195 a_036();
        A_195 a_056();
        A_195 a_012();
        A_195 a_078();
        A_195 a_076();
        A_195 a_057();
    }
    public interface A_220 extends A_219, A_236, A_005, A_085, A_153, A_074, A_240 {
        A_220 a_040();
        A_220 a_018();
        A_220 a_079();
        A_220 a_012();
        A_220 a_000();
        A_220 a_095();
        A_220 a_080();
        A_220 a_081();
        A_220 a_077();
        A_220 a_036();
        A_220 a_056();
        A_220 a_078();
        A_220 a_076();
        A_220 a_057();
    }
    public interface A_146 extends A_000, A_005, A_151, A_150, A_149, A_240 {
        A_146 a_040();
        A_146 a_073();
        A_146 a_051();
    }
    public interface A_090 extends A_000, A_053, A_084, A_005, A_054, A_085, A_237, A_091, A_092, A_240 {
        A_090 a_040();
        A_090 a_000();
        A_090 a_018();
        A_090 a_027();
        A_090 a_026();
    }
    public interface A_057 extends A_106, A_058, A_240 {
        A_057 a_002();
        A_057 a_040();
        A_057 a_039();
        A_057 a_032();
        A_057 a_033();
        A_057 a_000();
        A_057 a_018();
    }
    public interface A_098 extends A_084, A_005, A_085, A_099, A_100, A_240 {
    }
    public interface A_136 extends A_084, A_005, A_085, A_138, A_137, A_240 {
    }
    public interface A_116 extends A_053, A_084, A_005, A_054, A_085, A_121, A_119, A_118, A_120, A_240 {
        A_116 a_040();
        A_116 a_000();
        A_116 a_018();
        A_116 a_053();
        A_116 a_046();
        A_116 a_045();
        A_116 a_048();
    }
    public interface A_159 extends A_053, A_005, A_054, A_160, A_240 {
        A_159 a_040();
        A_159 a_000();
    }
    public interface A_140 extends A_139, A_236, A_005, A_085, A_153, A_074, A_141, A_142, A_240 {
        A_140 a_040();
        A_140 a_018();
        A_140 a_079();
        A_140 a_012();
        A_140 a_060();
        A_140 a_061();
        A_140 a_000();
        A_140 a_080();
        A_140 a_081();
        A_140 a_077();
        A_140 a_036();
        A_140 a_056();
        A_140 a_078();
        A_140 a_076();
        A_140 a_057();
    }
    public interface A_178 extends A_177, A_144, A_005, A_179, A_145, A_240 {
        A_178 a_040();
    }
    public interface A_139 extends A_053, A_005, A_054, A_141, A_142, A_240 {
        A_139 a_040();
        A_139 a_000();
        A_139 a_060();
        A_139 a_061();
    }
    public interface A_165 extends A_163, A_152, A_005, A_054, A_166, A_167, A_153, A_154, A_240 {
        A_165 a_040();
        A_165 a_000();
        A_165 a_065();
        A_165 a_066();
        A_165 a_079();
        A_165 a_080();
    }
    public interface A_053 extends A_000, A_238<Long>, A_005, A_054, A_240 {
        A_053 a_040();
        A_053 a_000();
    }
    public interface A_135 extends A_136, A_236, A_005, A_085, A_153, A_074, A_138, A_137, A_240 {
        A_135 a_040();
        A_135 a_018();
        A_135 a_079();
        A_135 a_012();
        A_135 a_059();
        A_135 a_058();
        A_135 a_000();
        A_135 a_081();
        A_135 a_077();
        A_135 a_036();
        A_135 a_056();
        A_135 a_078();
        A_135 a_076();
        A_135 a_057();
    }
    public interface A_148 extends A_146, A_236, A_005, A_085, A_153, A_074, A_240 {
        A_148 a_040();
        A_148 a_018();
        A_148 a_079();
        A_148 a_012();
        A_148 a_051();
        A_148 a_000();
        A_148 a_081();
        A_148 a_077();
        A_148 a_036();
        A_148 a_056();
        A_148 a_078();
        A_148 a_076();
        A_148 a_057();
    }
    public interface A_206 extends A_000, A_005, A_208, A_207, A_209, A_240 {
        A_206 a_040();
        A_206 a_089();
        A_206 a_088();
        A_206 a_090();
    }
    public interface A_215 extends A_000, A_005, A_216, A_240 {
        A_215 a_040();
        A_215 a_092();
    }
    public interface A_117 extends A_116, A_090, A_005, A_054, A_085, A_121, A_119, A_118, A_120, A_091, A_092, A_240 {
        A_117 a_040();
        A_117 a_000();
        A_117 a_018();
        A_117 a_053();
        A_117 a_046();
        A_117 a_045();
        A_117 a_048();
        A_117 a_026();
        A_117 a_027();
    }
    public interface A_082 extends A_000, A_005, A_083, A_240 {
        A_082 a_040();
    }
    public interface A_182 extends A_053, A_084, A_152, A_193, A_189, A_005, A_054, A_085, A_153, A_154, A_194, A_190, A_240 {
        A_182 a_040();
        A_182 a_000();
        A_182 a_018();
        A_182 a_079();
        A_182 a_080();
        A_182 a_081();
        A_182 a_077();
    }
    public interface A_055 extends A_000, A_005, A_056, A_240 {
    }
    public interface A_193 extends A_000, A_005, A_194, A_240 {
        A_193 a_040();
        A_193 a_081();
    }
    public interface A_214 extends A_212, A_152, A_005, A_054, A_085, A_217, A_218, A_153, A_154, A_240 {
        A_214 a_040();
        A_214 a_000();
        A_214 a_018();
        A_214 a_093();
        A_214 a_079();
    }
    public interface A_059 extends A_053, A_084, A_005, A_054, A_085, A_063, A_062, A_064, A_065, A_066, A_061, A_060, A_240 {
        A_059 a_040();
        A_059 a_000();
        A_059 a_018();
        A_059 a_046();
        A_059 a_045();
        A_059 a_047();
        A_059 a_048();
        A_059 a_049();
        A_059 a_044();
        A_059 a_043();
    }
    public interface A_226 extends A_000, A_228, A_240 {
        A_226 a_100();
        A_226 a_040();
    }
    public interface A_210 extends A_053, A_005, A_054, A_211, A_240 {
        A_210 a_040();
        A_210 a_000();
        A_210 a_091();
    }
    public interface A_073 extends A_000, A_005, A_074, A_240 {
        A_073 a_040();
        A_073 a_012();
    }
    public interface A_157 extends A_155, A_236, A_005, A_085, A_153, A_074, A_160, A_162, A_240 {
        A_157 a_040();
        A_157 a_018();
        A_157 a_079();
        A_157 a_012();
        A_157 a_000();
        A_157 a_081();
        A_157 a_077();
        A_157 a_036();
        A_157 a_056();
        A_157 a_078();
        A_157 a_076();
        A_157 a_057();
    }
    public interface A_131 extends A_053, A_005, A_054, A_132, A_240 {
        A_131 a_040();
        A_131 a_000();
        A_131 a_056();
    }
    public interface A_152 extends A_053, A_005, A_054, A_153, A_154, A_240 {
        A_152 a_040();
        A_152 a_000();
        A_152 a_079();
    }
    public interface A_106 extends A_053, A_084, A_005, A_115, A_113, A_112, A_240 {
        A_106 a_040();
        A_106 a_039();
        A_106 a_032();
        A_106 a_033();
        A_106 a_000();
        A_106 a_018();
    }
    public interface A_147 extends A_106, A_236, A_005, A_085, A_153, A_074, A_240 {
        A_147 a_040();
        A_147 a_018();
        A_147 a_012();
        A_147 a_039();
        A_147 a_032();
        A_147 a_033();
        A_147 a_000();
        A_147 a_081();
        A_147 a_077();
        A_147 a_036();
        A_147 a_056();
        A_147 a_078();
        A_147 a_076();
        A_147 a_057();
    }
    public interface A_081 extends A_075, A_152, A_005, A_054, A_076, A_077, A_078, A_079, A_153, A_154, A_240 {
        A_081 a_040();
        A_081 a_000();
        A_081 a_014();
        A_081 a_015();
        A_081 a_016();
        A_081 a_079();
        A_081 a_080();
    }
    public interface A_197 extends A_196, A_070, A_236, A_005, A_085, A_153, A_074, A_203, A_071, A_240 {
        A_197 a_040();
        A_197 a_018();
        A_197 a_079();
        A_197 a_012();
        A_197 a_084();
        A_197 a_011();
        A_197 a_000();
        A_197 a_081();
        A_197 a_077();
        A_197 a_036();
        A_197 a_056();
        A_197 a_078();
        A_197 a_076();
        A_197 a_057();
    }
    public interface A_213 extends A_212, A_215, A_236, A_005, A_085, A_153, A_074, A_240 {
        A_213 a_040();
        A_213 a_018();
        A_213 a_079();
        A_213 a_012();
        A_213 a_000();
        A_213 a_093();
        A_213 a_092();
        A_213 a_081();
        A_213 a_077();
        A_213 a_036();
        A_213 a_056();
        A_213 a_078();
        A_213 a_076();
        A_213 a_057();
    }
    public interface A_143 extends A_139, A_152, A_005, A_141, A_142, A_153, A_154, A_240 {
        A_143 a_040();
        A_143 a_060();
        A_143 a_061();
        A_143 a_079();
        A_143 a_080();
        A_143 a_000();
    }
    public interface A_221 extends A_219, A_152, A_005, A_054, A_085, A_222, A_223, A_153, A_154, A_240 {
        A_221 a_040();
        A_221 a_000();
        A_221 a_018();
        A_221 a_095();
        A_221 a_079();
        A_221 a_080();
    }
    public interface A_196 extends A_000, A_005, A_203, A_240 {
        A_196 a_040();
        A_196 a_084();
    }
    public interface A_155 extends A_159, A_161, A_005, A_054, A_160, A_162, A_240 {
        A_155 a_040();
        A_155 a_000();
    }
    public interface A_097 extends A_094, A_152, A_005, A_085, A_095, A_096, A_153, A_154, A_240 {
        A_097 a_040();
        A_097 a_018();
        A_097 a_029();
        A_097 a_079();
        A_097 a_000();
    }
    public interface A_219 extends A_053, A_084, A_005, A_054, A_085, A_222, A_223, A_240 {
        A_219 a_040();
        A_219 a_000();
        A_219 a_018();
        A_219 a_095();
        A_219 a_096();
    }
    public interface A_068 extends A_053, A_005, A_054, A_069, A_240 {
        A_068 a_040();
        A_068 a_000();
        A_068 a_010();
    }
    public interface A_114 extends A_106, A_236, A_005, A_085, A_153, A_074, A_115, A_113, A_240 {
        A_114 a_040();
        A_114 a_018();
        A_114 a_079();
        A_114 a_012();
        A_114 a_039();
        A_114 a_032();
        A_114 a_033();
        A_114 a_000();
        A_114 a_080();
        A_114 a_081();
        A_114 a_077();
        A_114 a_036();
        A_114 a_056();
        A_114 a_078();
        A_114 a_076();
        A_114 a_057();
    }
    public interface A_163 extends A_053, A_005, A_054, A_166, A_167, A_240 {
        A_163 a_040();
        A_163 a_000();
        A_163 a_065();
        A_163 a_066();
    }
    public interface A_187 extends A_000, A_005, A_188, A_240 {
        A_187 a_040();
        A_187 a_076();
    }
    public interface A_144 extends A_000, A_005, A_145, A_240 {
        A_144 a_040();
    }
    public interface A_111 extends A_106, A_212, A_219, A_170, A_005, A_054, A_085, A_115, A_113, A_112, A_217, A_218, A_222, A_223, A_173, A_240 {
        A_111 a_040();
        A_111 a_000();
        A_111 a_018();
        A_111 a_039();
        A_111 a_032();
        A_111 a_033();
        A_111 a_093();
        A_111 a_095();
        A_111 a_069();
    }
    public interface A_168 extends A_000, A_053, A_005, A_054, A_169, A_240 {
        A_168 a_040();
        A_168 a_000();
        A_168 a_037();
    }
    public interface A_227 extends A_226, A_236, A_005, A_085, A_153, A_074, A_228, A_240 {
        A_227 a_040();
        A_227 a_018();
        A_227 a_079();
        A_227 a_012();
        A_227 a_100();
        A_227 a_000();
        A_227 a_081();
        A_227 a_077();
        A_227 a_036();
        A_227 a_056();
        A_227 a_078();
        A_227 a_076();
        A_227 a_057();
    }
    public interface A_075 extends A_053, A_005, A_054, A_076, A_077, A_078, A_079, A_240 {
        A_075 a_040();
        A_075 a_000();
        A_075 a_014();
        A_075 a_015();
        A_075 a_016();
        A_075 a_017();
    }
    public interface A_008 extends A_239 {
        A_008 a_040();
    }
    public interface A_072 extends A_070, A_090, A_005, A_054, A_085, A_091, A_092, A_071, A_240 {
        A_072 a_040();
        A_072 a_000();
        A_072 a_018();
        A_072 a_026();
        A_072 a_011();
        A_072 a_027();
    }
    public interface A_170 extends A_000, A_005, A_173, A_174, A_240 {
        A_170 a_040();
        A_170 a_069();
        A_170 a_072();
    }
    public interface A_012 extends A_239 {
        A_012 a_063();
    }
    public interface A_164 extends A_163, A_236, A_005, A_085, A_153, A_074, A_166, A_167, A_240 {
        A_164 a_040();
        A_164 a_018();
        A_164 a_079();
        A_164 a_012();
        A_164 a_065();
        A_164 a_066();
        A_164 a_000();
        A_164 a_080();
        A_164 a_081();
        A_164 a_077();
        A_164 a_036();
        A_164 a_056();
        A_164 a_078();
        A_164 a_076();
        A_164 a_057();
    }
    public interface A_006 extends A_239 {
        A_006 a_004();
    }
    public interface A_007 extends A_239 {
    }
    public interface A_201 extends A_200, A_236, A_005, A_085, A_153, A_074, A_240 {
        A_201 a_040();
        A_201 a_018();
        A_201 a_079();
        A_201 a_012();
        A_201 a_085();
        A_201 a_000();
        A_201 a_081();
        A_201 a_077();
        A_201 a_036();
        A_201 a_056();
        A_201 a_078();
        A_201 a_076();
        A_201 a_057();
    }
    public interface A_011 extends A_239 {
        A_011 a_062();
    }
    public interface A_014 extends A_239 {
        A_014 a_075();
    }
    public interface A_009 extends A_239 {
        A_009 a_045();
    }
    public interface A_010 extends A_239 {
        A_010 a_050();
    }
    public interface A_013 extends A_239 {
        A_013 a_067();
    }
    public interface A_236 extends A_195, A_005, A_085, A_153, A_074, A_240 {
        A_236 a_040();
        A_236 a_018();
        A_236 a_079();
        A_236 a_012();
        A_236 a_000();
        A_236 a_081();
        A_236 a_077();
        A_236 a_036();
        A_236 a_056();
        A_236 a_078();
        A_236 a_076();
        A_236 a_057();
    }

}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
-Djava.util.Arrays.useLegacyMergeSort=true

FREQUENCY : occasionally


",,,,,,,,,,JDK-8305476,JDK-8299484,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308152,,,,,,,,,,,,JDK-8211147,,,,,,"2022-01-18 03:33;pnarayanaswa;Capture.PNG;https://bugs.openjdk.org/secure/attachment/97657/Capture.PNG","2022-01-18 03:31;pnarayanaswa;Main.java;https://bugs.openjdk.org/secure/attachment/97656/Main.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vosz:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41b965df,,,,,,,,,"2022-01-18 03:33;pnarayanaswa;Checked with attached testcase in Windows 10, Issue is reproducible(attached screenshot for reference)
Test Result
===========
11: Fail
11.0.13: Fail
17: Fail
18ea29: Fail

;;;","2022-01-23 14:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7190
Date: 2022-01-23 07:41:39 +0000;;;","2022-02-08 17:28;roboduke;Changeset: 2f46af05
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-02-09 01:26:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2f46af05ce2d43e19e0095680eb3a52fd904c774
;;;","2022-12-31 20:22;serb;Fix request (17u)

Clean backport. Verified by the new test. The jdk_desktop tests are green.
Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/1014;;;","2022-12-31 20:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1014
Date: 2022-12-31 21:54:31 +0000;;;","2023-07-21 01:29;gdams;Fix request (11u)

Backport applies cleanly;;;","2023-07-21 01:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2053
Date: 2023-07-21 08:26:36 +0000;;;","2023-07-24 09:28;goetz;[~gadams] please follow instructions in https://wiki.openjdk.org/display/JDKUpdates/How+to+contribute+or+backport+a+fix. Then label again. Thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: detect and remove dead irreducible loops,JDK-8280126,5066201,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,webbuggrp,webbuggrp,2022-01-12 23:26,2023-05-31 01:18,2023-10-01 09:56,2023-02-07 23:47,11,11.0.12-oracle,17,18,19,20,21,8,21,hotspot,,0,additional-information-received,c2,dcsaw,irreducibility,oracle-triage-18,reproducer-yes,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS version:
Distributor ID: Ubuntu
Description:    Ubuntu 20.04.3 LTS
Release:        20.04
Codename:       focal

We used the following version:

java version ""11.0.12"" 2021-07-20 LTS
Java(TM) SE Runtime Environment 18.9 (build 11.0.12+8-LTS-237)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.12+8-LTS-237, mixed mode)

java version ""17.0.1"" 2021-10-19 LTS
Java(TM) SE Runtime Environment (build 17.0.1+12-LTS-39)
Java HotSpot(TM) 64-Bit Server VM (build 17.0.1+12-LTS-39, mixed mode, sharing)

openjdk version ""11-internal"" 2018-09-25
OpenJDK Runtime Environment (fastdebug build 11-internal+0-adhoc.minghai.jdk11)
OpenJDK 64-Bit Server VM (fastdebug build 11-internal+0-adhoc.minghai.jdk11, mixed mode)

A DESCRIPTION OF THE PROBLEM :
The attached fuzzer test trapped in dead loop with ""-Xcomp""(run in compiled mode), but it passed with ""-Xint""(run in interpreted mode) or without JVM parameters(run in mixed mode)

ERROR MESSAGES/STACK TRACES THAT OCCUR :
When we run the test in jdk17.0.1 and jdk11.0.12, both in compiled mode(with ""-Xcomp""), it trapped in dead loop. But when  run the test in jdk17.0.1 and jdk11.0.12, both in mixed mode or interpreted mode(with ""-Xint), it passed successfully.

Besides, when run in jdk11-internal, mixed mode or interpreted mode, it passed successfully.
But when run in jdk11-internal, compiled mode, it crashes with the following messages:
933   ConI    ===  0  [[ 4764  1447  409  1486  3173  4798  4803  4805  4756  304  6451  4769  4795  4796  410  4797  4793  6188  4763  412  5535  305  6053  5642  6055  6469  4770  5005  5006  4403  413  7005  6008  4403  5777  412  4403  411  411  6188  380  6007  5780  5009  5052  5640  303  6046  1405  5589  412  461  303  305  3729  5531  7151  4732  411  6188  305  410  1450  6140  413  3027  4403  4699  6188  411  413  6769  3119  6726  5385  496  5772  5036  339  5638  6019  304  6147  5384  303  6427  1322  304  1836  411  362  410  1399  305  4403  411  412  5390  411  5533  6188  6142  6532  6470  6064  411  6472  6645  411  6188  336  6188  6188  6035  6188  6188  4743  3730  6723  6019  4403  334  6452  4747  5536  3054  5538  5522  412  341  5530  305  5383  413  5470  304  6188  5512  303  6019  5523  304  4403  305  335  412  303  4403  6188  4403  304  303  304  4403  303  6720  6625  6724  381  412  305  304  412  412  304  412  412  303  413  305  305  6639  5525  5637  305  413  303  304  303  305  303  304  4403  6026  337  338  7022  342  340  3076  7033 ]]  #int:1 !jvms: JSON::parseObject @ bci:477
 3054   AddI    === _  3054  933  [[ 6428  6026  7008  339  1415  342  335  335  336  336  6019  3054  334  334  340  3091  7033  341  5501  338  337  7022 ]]  !orig=[7007],... !jvms: JSON::parseObject @ bci:821
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/phaseX.cpp:885
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/minghai/jdk11/src/hotspot/share/opto/phaseX.cpp:885), pid=22769, tid=22780
#  assert(no_dead_loop) failed: dead loop detected
#
# JRE version: OpenJDK Runtime Environment (11.0) (fastdebug build 11-internal+0-adhoc.minghai.jdk11)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 11-internal+0-adhoc.minghai.jdk11, compiled mode, tiered, compressed oops, g1 gc, linux-amd64)
# Core dump will be written. Default location: core.22769 (may not exist)
#
# An error report file with more information is saved as:
# /mnt/c/Users/Minghai/hs_err_pid22769.log
#
# Compiler replay data is saved as:
# /mnt/c/Users/Minghai/replay_pid22769.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
Current thread is 22780
Dumping core ...
zsh: abort (core dumped)   -Xcomp -cp  org.junit.runner.JUnitCore

the log files, hs_err_pid22769.log and replay_pid22769.log are also attached.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. extract the bug.zip
2. in dictionary ""bug"", run command:
java -cp ./bugFiles:./util:./junit.jar:./hamcrest.jar:./target/classes:./target/test-classes org.junit.runner.JUnitCore com.alibaba.fastjson.deserializer.issue1463.TestIssue1463

you may add ""-Xcomp"" or ""-Xint"" to get different results.


---------- BEGIN SOURCE ----------
to be attached in bug.zip
---------- END SOURCE ----------

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305797,JDK-8286112,JDK-6742111,JDK-8288736,JDK-8296412,JDK-8299214,JDK-8296389,JDK-8308675,JDK-8296318,JDK-8303045,,,,,,,JDK-8275326,JDK-8299214,JDK-8297642,,,,"2022-09-29 01:34;epeter;A.jasm;https://bugs.openjdk.org/secure/attachment/100887/A.jasm","2022-10-26 05:06;epeter;A2.jasm;https://bugs.openjdk.org/secure/attachment/101197/A2.jasm","2022-10-26 05:06;epeter;A2.jasm.graph.crash.png;https://bugs.openjdk.org/secure/attachment/101198/A2.jasm.graph.crash.png","2022-10-26 05:06;epeter;A2.jasm.graph.png;https://bugs.openjdk.org/secure/attachment/101199/A2.jasm.graph.png","2022-10-05 04:14;epeter;D.jasm;https://bugs.openjdk.org/secure/attachment/100949/D.jasm","2022-10-10 01:26;epeter;D.jasm.crash.graph.png;https://bugs.openjdk.org/secure/attachment/101005/D.jasm.crash.graph.png","2022-10-28 04:21;epeter;D2.jasm;https://bugs.openjdk.org/secure/attachment/101237/D2.jasm","2022-10-28 04:21;epeter;D2.jasm.graph.crash.png;https://bugs.openjdk.org/secure/attachment/101238/D2.jasm.graph.crash.png","2022-10-28 04:21;epeter;D2.jasm.graph.png;https://bugs.openjdk.org/secure/attachment/101239/D2.jasm.graph.png","2022-10-28 04:21;epeter;D2.jasm.images.zip;https://bugs.openjdk.org/secure/attachment/101240/D2.jasm.images.zip","2022-10-07 07:56;epeter;E.jasm;https://bugs.openjdk.org/secure/attachment/100980/E.jasm","2022-10-09 08:18;epeter;E.jasm.crash.graph.png;https://bugs.openjdk.org/secure/attachment/101001/E.jasm.crash.graph.png","2022-10-09 08:45;epeter;F.jasm;https://bugs.openjdk.org/secure/attachment/101002/F.jasm","2022-10-09 23:05;epeter;F.jasm.crash.graph.png;https://bugs.openjdk.org/secure/attachment/101004/F.jasm.crash.graph.png","2022-10-12 03:44;epeter;G.jasm;https://bugs.openjdk.org/secure/attachment/101052/G.jasm","2022-10-12 03:45;epeter;G.jasm.crash.graph.png;https://bugs.openjdk.org/secure/attachment/101053/G.jasm.crash.graph.png","2022-10-12 04:04;epeter;H.jasm;https://bugs.openjdk.org/secure/attachment/101055/H.jasm","2022-10-19 08:27;epeter;K.jasm;https://bugs.openjdk.org/secure/attachment/101135/K.jasm","2022-10-19 08:27;epeter;K.jasm.bailout.graph.png;https://bugs.openjdk.org/secure/attachment/101134/K.jasm.bailout.graph.png","2022-10-25 23:53;epeter;N.jasm;https://bugs.openjdk.org/secure/attachment/101190/N.jasm","2022-10-25 23:53;epeter;N.jasm.graph.crash.png;https://bugs.openjdk.org/secure/attachment/101191/N.jasm.graph.crash.png","2022-10-25 23:53;epeter;N.jasm.graph.png;https://bugs.openjdk.org/secure/attachment/101192/N.jasm.graph.png","2022-10-31 08:25;epeter;P.jasm;https://bugs.openjdk.org/secure/attachment/101262/P.jasm","2022-10-31 08:25;epeter;P.jasm.0.after_parsing.png;https://bugs.openjdk.org/secure/attachment/101263/P.jasm.0.after_parsing.png","2022-10-31 08:25;epeter;P.jasm.1.before_codegen.png;https://bugs.openjdk.org/secure/attachment/101264/P.jasm.1.before_codegen.png","2022-10-31 08:25;epeter;P.jasm.2.at_crash.png;https://bugs.openjdk.org/secure/attachment/101265/P.jasm.2.at_crash.png","2022-11-01 23:09;epeter;Q1.jasm;https://bugs.openjdk.org/secure/attachment/101291/Q1.jasm","2022-11-01 23:09;epeter;Q1.jasm.0.before.png;https://bugs.openjdk.org/secure/attachment/101292/Q1.jasm.0.before.png","2022-11-01 23:09;epeter;Q1.jasm.1.crash.png;https://bugs.openjdk.org/secure/attachment/101293/Q1.jasm.1.crash.png","2022-11-08 01:04;epeter;Q3.jasm;https://bugs.openjdk.org/secure/attachment/101478/Q3.jasm","2022-11-08 01:04;epeter;Q3.jasm.graph.png;https://bugs.openjdk.org/secure/attachment/101479/Q3.jasm.graph.png","2022-11-02 07:13;epeter;R.jasm;https://bugs.openjdk.org/secure/attachment/101296/R.jasm","2022-11-02 07:13;epeter;R.jasm.5.crash.png;https://bugs.openjdk.org/secure/attachment/101297/R.jasm.5.crash.png","2022-11-02 07:13;epeter;R.jasm.graph.zip;https://bugs.openjdk.org/secure/attachment/101298/R.jasm.graph.zip","2022-11-10 05:23;epeter;T.java;https://bugs.openjdk.org/secure/attachment/101536/T.java","2022-11-10 05:23;epeter;T.java.images.zip;https://bugs.openjdk.org/secure/attachment/101537/T.java.images.zip","2022-11-10 11:02;epeter;T2.java;https://bugs.openjdk.org/secure/attachment/101545/T2.java","2022-11-11 00:54;epeter;T3.java;https://bugs.openjdk.org/secure/attachment/101560/T3.java","2022-11-15 02:55;epeter;TestIrreducibleLoops.jasm;https://bugs.openjdk.org/secure/attachment/101603/TestIrreducibleLoops.jasm","2022-11-08 09:10;epeter;test_007.0.png;https://bugs.openjdk.org/secure/attachment/101494/test_007.0.png","2022-11-08 09:10;epeter;test_007.1.png;https://bugs.openjdk.org/secure/attachment/101495/test_007.1.png","2022-11-08 09:10;epeter;test_007.2.png;https://bugs.openjdk.org/secure/attachment/101496/test_007.2.png","2022-11-08 10:28;epeter;test_009.0.png;https://bugs.openjdk.org/secure/attachment/101502/test_009.0.png","2022-11-08 10:28;epeter;test_009.1.png;https://bugs.openjdk.org/secure/attachment/101503/test_009.1.png","2022-11-08 10:28;epeter;test_009.2.png;https://bugs.openjdk.org/secure/attachment/101504/test_009.2.png","2022-11-15 02:55;epeter;test_011.png;https://bugs.openjdk.org/secure/attachment/101604/test_011.png",,,,,,,,,,,,,,,,"0|i2vniz:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-13 19:51;fmatte;This looks exactly similar to JDK-8275326. There is no source to validate.
Could you please check with jdk18 latest version to confirm the fix?;;;","2022-01-17 23:21;tongwan;Requested the submitter verify the fix by downloading the latest version JDK 18 at https://jdk.java.net/18/
If the issue still exists, requested the bug.zip mentioned in the reproducing steps.;;;","2022-01-19 23:02;tongwan;Additional information from the submitter:
I have tried the JDK18 of the following version:

openjdk version ""18-ea"" 2022-03-22
OpenJDK Runtime Environment (build 18-ea+31-2049)
OpenJDK 64-Bit Server VM (build 18-ea+31-2049, mixed mode, sharing)

However, it seems that the problem still exists. It ran correctly in mixed mode and interpreted mode, but trapped in dead loop in compiled mode.
;;;","2022-01-20 00:14;fmatte;Please ask for bug.zip file mentioned in the bug report;;;","2022-01-20 02:29;tongwan;Requested the bug.zip file from the submitter.;;;","2022-01-20 07:19;dcubed;Moving from hotspot/runtime -> hotspot/compiler for initial triage.;;;","2022-01-20 15:44;dlong;ILW = same as JDK-8275326 = P3;;;","2022-01-21 15:30;dlong;With jdk19 I get:
    assert(cached_vbox != __null) failed: sanity
called from PhiNode::merge_through_phi

I haven't been able to reproduce it in jdk18 b31;;;","2022-01-21 15:47;dlong;The builds at https://jdk.java.net/18/ are not debug builds, which explains why I didn't see an assert.  I do get the assert with this build:

# JRE version: Java(TM) SE Runtime Environment (18.0+32) (fastdebug build 18-ea+32-2068)
;;;","2022-01-26 03:52;chagedorn;I can also reproduce this with latest JDK when using -XX:+UnlockExperimentalVMOptions -XX:-EnableVectorReboxing. Otherwise, I hit the assert which [~dlong] posted above. It is probably the same issue and we just fail earlier because the graph is already broken.;;;","2022-02-08 02:51;fmatte;I just ran with -Xcomp and hit the assert, I have jdk19 b04 (slightly older version)

/tank/fmatte/JAVA/jdk19/jdk-19-ea+04/fastdebug/bin/java -Xcomp -cp ./bugFiles:./util:./junit.jar:./hamcrest.jar:./target/classes:./target/test-classes org.junit.runner.JUnitCore com.alibaba.fastjson.deserializer.issue1463.TestIssue1463
JUnit version 4.13.2
. 341  ConI  ===  0  [[ 1339  1163  5194  1159  1153  7033  7034  7021  7022  111  110  7023  7024  7025  5195  7026  7077  153  118  110  110  2998  7135  117  7136  6849  7018  7094  7098  152  146  7089  2952  603  153  2951  814  1910  110  5196  2953  633  153  6830  7099  7100  5196  3055  153  427  2747  3193  110  7117  2953  152  153  2952  1152  3136  2996  3049  110  7123  7041  2952  2951  111  5231  2951  5196  153  5196  2952  7040  391  109  2919  3000  153  797  2917  2952  2997  634  7116  2999  5196  2753  5195  2524  111  4378  2953  5232  2952  5196  111  5195  462  153  7124  6821  6833  108  111  6834  160  7075  111  2953  7076  2916  111  111  111  403  1904  7115  6906  2951  5196  6935  2951  2953  7035  2951  111  7114  7728  2952  5196  152  111  2951  153  153  2953  153  2953  7754  7229  7000  2952  7118  165  2951  2952  2953  5260  110  2951  6812  153  2951  2953  5196  6810  358  6990  2918  111  153  2953  2952  2951  7039  6811  2953  2952  110  106  6934  2915  2753  2968  6934  2914 ]]  #int:1 !jvms: JSON::parseObject @ bci:240 (line 368)
 2524  AddI  === _  2524  341  [[ 2996  160  7509  2919  4408  2916  2997  2997  2998  2998  152  2524  2996  2763  2918  2917  1920  2999  3000 ]]  !orig=[7508],... !jvms: JSON::parseObject @ bci:748 (line 368)
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/phaseX.cpp:943
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S136873/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1a465b75-bc3e-436d-8ce8-843258d7f72f/runs/4c2d264d-5066-447e-8e7e-d0ab59cf74c8/workspace/open/src/hotspot/share/opto/phaseX.cpp:943), pid=11039, tid=11052
#  assert(no_dead_loop) failed: dead loop detected
#
# JRE version: Java(TM) SE Runtime Environment (19.0+4) (fastdebug build 19-ea+4-144)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+4-144, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x16935e6]  PhaseGVN::dead_loop_check(Node*) [clone .part.0]+0x156
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /tank/fmatte/bugs/8280126/bug/core.11039)
#
# An error report file with more information is saved as:
# /tank/fmatte/bugs/8280126/bug/hs_err_pid11039.log
#
# Compiler replay data is saved as:
# /tank/fmatte/bugs/8280126/bug/replay_pid11039.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
;;;","2022-02-09 02:21;fmatte;This issue is reproducible in jdk8 also;;;","2022-02-09 18:27;tongwan;Additional information from the submitter that may be useful:

This fuzzer is specially designed to test the JIT compilers in JVM, it mutates(change some codes inside a file) class files, run the mutated files and expects different behaviors of JVM under interpret mode and compiled mode.

This fuzzer is based on byte code. That is, the fuzzer reads in the byte code and mutate it directly, so I cannot provide the source code that is mutated since the fuzzer generates byte code instead of source code. Maybe decompilation tools are helpful.

The original source code is from Alibaba's fastjson: https://github.com/alibaba/fastjson. In the fuzz test, only one function in one specific class is mutated: com/alibaba/fastjson/JSON.parseObject(String ,Type, ParserConfig, ParseProcess, int, Feature...)
The mutated file that is generated by the fuzzer is: bug/bugFiles/com/alibaba/fastjson/JSON.class. It's sure that this function causes the bug.

To produce the bug, just replace the original com/alibaba/fastjson/JSON.class with this mutated one, then run the test: com.alibaba.fastjson.deserializer.issue1463.TestIssue1463 through JUnit. You could run this command in bug/:
java -Xcomp -cp ./bugFiles:./util:./junit.jar:./hamcrest.jar:./target/classes:./target/test-classes org.junit.runner.JUnitCore com.alibaba.fastjson.deserializer.issue1463.TestIssue1463
You can see that in this command, ./bugFiles is the first in cp, in order to replace original file with the mutated one.
To remove the '-Xcomp' or replace it with '-Xint' leads to different results, as indicated in the report.
;;;","2022-02-10 07:36;epeter;What I tried so far:
I disassembled the JSON.class with jdis, and immediately reassembled it with jasm. Unfortunately, this process is not reflexive, and it does not produce an identical file (only about 3/4 the size). If put in that new class file, I get this error instead:

--------------------------
Time: 0.067
There was 1 failure:
1) testIssue1463(com.alibaba.fastjson.deserializer.issue1463.TestIssue1463)
java.lang.NoClassDefFoundError: serializer/SerializeWriter
	at com.alibaba.fastjson.deserializer.issue1463.TestIssue1463.doubleDeserialization(TestIssue1463.java:37)
	at com.alibaba.fastjson.deserializer.issue1463.TestIssue1463.testIssue1463(TestIssue1463.java:28)
	... 31 trimmed
Caused by: java.lang.ClassNotFoundException: serializer.SerializeWriter
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	... 34 more

FAILURES!!!
Tests run: 1,  Failures: 1
--------------------

However, if I disassemble it with jdec, and reassemble it with jcoder the files are identical. Unfortunately, the jdec output is not humanly readable, The byte-code is displayed in hex format only.

I tried to jdis - jasm - jdec the class file. This also produced hex format byte-code. However, it is not identical (though similar), and if pasted into the other file this leads to issues (I assume some symbols or offsets have changed).

It is thus not clear how to reduce the class file. We may have to pain-stakingly debug the graph of the given class-file.;;;","2022-03-22 08:48;epeter;I implemented some helper functions to analyze the Phi structure and the ctrl structure:

// Call this from debugger:
// Starting at a phi node, traverse inputs (not control)
// Traverse phi nodes recursively
// Print and count all non-phi, non-NULL inputs
int traverse_phi(const int idx, bool printNonPhi) {
  Node* root_phi = find_node(idx);
  if( root_phi == NULL ) {
    tty->print(""traverse_phi: node idx not found: %d\n"",idx);
    return 0;
  }
  if( !root_phi->isa_Phi() ) {
    tty->print(""traverse_phi: input is not a phi node:\n"");
    root_phi->dump();
    return 0;
  }

  Node_Stack stack(1);
  VectorSet  visited;
  int cnt = 0;

  stack.push(root_phi, 1); // ignore control
  visited.set(root_phi->_idx);

  while (stack.is_nonempty()) {
    Node* n   = stack.node();
    uint  idx = stack.index();
    if (idx < n->req()) {
      stack.set_index(idx + 1);
      Node* in = n->in(idx);
      if (in == NULL) {
        continue; // ignore dead path
      } else if (in->isa_Phi()) {
        if (!visited.test_set(in->_idx)) {
          stack.push(in, 1); // ignore control
          tty->print(""# phi found:\n"");
	  in->dump();
	}
      } else {
        if (!visited.test_set(in->_idx) && printNonPhi) {
          tty->print(""# %d: interesting input found in node %d _in[%d]\n"",cnt++,n->_idx,idx);
	  in->dump();
	}
      }
    } else {
      stack.pop();
    }
  }
  return cnt;
}

// Call this from debugger:
// Starting at a region node, traverse inputs (only control)
// Traverse region nodes recursively
int traverse_cfg(const int idx, bool printNonCfg = false) {
  Node* root_cfg = find_node(idx);
  if( root_cfg == NULL ) {
    tty->print(""traverse_cfg: node idx not found: %d\n"",idx);
    return 0;
  }
  if( !root_cfg->is_CFG() ) {
    tty->print(""traverse_cfg: input is not a cfg node:\n"");
    root_cfg->dump();
    return 0;
  }

  Node_Stack stack(1);
  VectorSet  visited;
  int cnt = 0;

  stack.push(root_cfg, 0); // also take control
  visited.set(root_cfg->_idx);

  while (stack.is_nonempty()) {
    Node* n   = stack.node();
    uint  idx = stack.index();
    if (idx < n->req()) {
      stack.set_index(idx + 1);
      Node* in = n->in(idx);
      if (in == NULL) {
        continue; // ignore dead path
      } else if (in->is_CFG() ) {
        if (!visited.test_set(in->_idx)) {
          stack.push(in, 0); // also take control
          tty->print(""# cfg found:\n"");
          in->dump();
        }
      } else {
        if (!visited.test_set(in->_idx) && printNonCfg) {
          tty->print(""# %d: interesting input found in node %d _in[%d]\n"",cnt++,n->_idx,idx);
          in->dump();
        }
      }
    } else {
      stack.pop();
    }
  }
  return cnt;
};;;","2022-03-22 08:50;epeter;What I have found so far:
We crash in PhiNode::merge_through_phi , because there is a phi-spaghetti ball which has no data input (6 phi nodes). This triggers the sanity check assert.
Then, I implemented a crawler that goes recursively visit all ctrl nodes (where is_CFG()  is true). About 40-50 ctrl nodes up (If, ProjFalse etc), I find one that has the control input TOP.
3330  If  ===  1  3329
It could well be valid that this is TOP.
The node 3330 is also put on the work list, but it is not processed before we run into the assert.
My hypothesis: we should only do PhiNode::merge_through_phi  if we know that not somewhere up in the control flow we still have nodes that are on the worklist and may collapse. Because the whole Phi-spaghetti ball may die from TOP inputs that should propagate down eventually..;;;","2022-03-22 09:13;epeter;Another possibility: the ctrl flow should erode (TOP propagated down) before the phi's become a dead loop.;;;","2022-03-23 03:34;epeter;I investigated why 3330 gets ctrl input TOP.
We find a dominating If with the identical test. Then, we realize that after that dominating if, we took
3259  IfTrue  ===  3258  [[ 3314 ]]
but right now we just used
3316  IfFalse  ===  3314  [[ 3330 ]]
which means 3330 is not reachable. Hence, it seems that this is a good move to disconnect.

The difficulty with this bug is that we have many paths that get eliminated, finding the real source of the issue feels like searching for a needle in a haystack.;;;","2022-05-03 08:23;epeter;I have enough other work for now. If nobody takes it, I might take it back at a later point.;;;","2022-05-17 23:54;thartmann;Deferring this to JDK 20 for now because it's a long standing issue and we are getting closer to the fork. If the fix is ready in time for JDK 19, the fix version needs to be reset.;;;","2022-09-29 01:33;epeter;I found A.jasm, a reduction of the class file, which triggers a different assert:

#  Internal Error (/home/emanuel/Documents/fork2-jdk/open/src/hotspot/share/opto/cfgnode.cpp:2539), pid=16034, tid=16048
#  assert(cached_vbox != __null) failed: sanity
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (slowdebug build 20-internal-2022-09-21-0845014.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2022-09-21-0845014.emanuel..., compiled mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x7b9687]  PhiNode::merge_through_phi(Node*, PhaseIterGVN*)+0x31d

Assemble it to class file like this:
./java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm A.jasm

And run like that:
./java -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:-UseLoopPredicate -XX:-UseProfiledLoopPredicate -XX:+TraceLoopOpts -XX:+PrintInlining -Xcomp -XX:+TraceOptoParse -XX:CompileCommand=compileonly,A::test -Xcomp -XX:-TieredCompilation A

The problem seems this:
During IGVN, a dead loop is generated. We have a dead-loop of 3 phi's, that only reference each other in the inputs. But Phi nodes are considered is_dead_loop_safe.
For unsafe dead-loops, we decide to remove them immediately, but safe dead-loops remain in the graph. This seems mostly an optimization so that we do not always have to traverse the graph with is_unreachable_from_root.
The PhiNode::merge_through_phi assumes there cannot be a dead-loop with phi's, but here I have an example.
We will probably have to discuss this, but maybe we can bail out of the optimization in PhiNode::merge_through_phi instead of the assert. Since it is a dead loop, further optimizations would be useless anyway. Maybe we could even call a cleanup of the graph in this case.

I will now reduce the class file for the original assert:
# assert(no_dead_loop) failed: dead loop detected

Note: I have struggled with the jasm decompiler because it uses class file version ""64:0"". The bug here I could reproduce with a smaller version number ""49:0"".;;;","2022-10-05 04:14;epeter;I added the following change to avoid that ""sanity"" assert:

@@ -2536,6 +2536,10 @@ Node* PhiNode::merge_through_phi(Node* root_phi, PhaseIterGVN* igvn) {
       stack.pop();
     }
   }
+  if (cached_vbox == nullptr) {
+    // Found dead-loop of Phi nodes. Phi nodes are called dead-loop-safe, so this is expected.
+    return nullptr; // no optimization - TODO: do we remove the dead-loop ???
+  }
   assert(cached_vbox != NULL, ""sanity"");
   const TypeInstPtr* btype = cached_vbox->box_type();
   const TypeVect*    vtype = cached_vbox->vec_type();


With that change, I found a D.jasm, such that I get that second assert:
# assert(no_dead_loop) failed: dead loop detected

Assemble:
java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm D.jasm

Run:
java -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:-UseLoopPredicate -XX:-UseProfiledLoopPredicate -XX:+TraceLoopOpts -XX:+PrintInlining -Xcomp -XX:CompileCommand=compileonly,D::test -XX:-TieredCompilation -XX:-LoopUnswitching  D

Note: without the VM code change, we would still first hit the ""sanity"" assert.;;;","2022-10-07 07:55;epeter;It seems that the issue is that in PhiNode::is_data_loop (better name: is_dead_data_loop), we check if we have a Loop, and if we have a Loop, there is the possibility that we have a unique input because entry is TOP, and the backedge holds the now unique data input. We have a dead data loop.

But in our case, we have a unique input because both entry and loopback data are this AddI node. Basically, we have a double loop (loop inside loop), but in total it is all dead. The difficulty is that there are legitimate ways that the Phi node can have two identical inputs for entry and loopback, for example if the loop-modification to this ""varialbe"" collpases to ""identity function"".

Currently, we decide that since we do not have different values for entry and loopback, this is not dead, and allow the Phi node to be replaced with the Add node, leaving this Add node to self-reference, and trigger the dead-loop assert.

We need to find a better condition for dead-loops. As far as I understand, it is bad if a Phi node is removed last in a loop. Maybe what is really bad is if we leave a data-node loop without any Phi node. So a loop with only ""unsafe"" nodes. Maybe we cannot avoid a bigger traversal?;;;","2022-10-07 07:59;epeter;In search for other (simpler or more general) cases, I have found a very similar jasm code, that triggers a different assert, and does not even ever visit the PhiNode::is_data_loop function.

java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm E.jasm
./java -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:-UseLoopPredicate -XX:-UseProfiledLoopPredicate -XX:+TraceLoopOpts -XX:+PrintInlining -Xcomp -XX:CompileCommand=compileonly,E::test -XX:-TieredCompilation -XX:-LoopUnswitching E

#  Internal Error (/home/emanuel/Documents/fork2-jdk/open/src/hotspot/share/opto/loopnode.cpp:5281), pid=1643825, tid=1643838
#  assert(!in->is_CFG()) failed: CFG Node with no controlling input?

I wonder if this is the same or a different bug?
Note, that also this E.jasm would first trigger the assert in PhiNode::merge_through_phi. So I simply use the bailout code from above, that returns nullptr instead of asserting ""sanity"".;;;","2022-10-09 08:42;epeter;It seems to me, that the issue with E.jasm is that we have two AddI nodes in the dead data-loop at the end, so the Phi node thinks we have a valid entry / backedge loop, but both are ""backedges"", so we still have a dead-loop.

Please see https://bugs.openjdk.org/secure/attachment/101001/E.jasm.crash.graph.png

After PhaseIdealLoop (we only ran PHASE_PHASEIDEALLOOP1), where we also run IGVN, we leave behind this dead-loop (both data and control are deadloop - in this case we also have an endless loop [NeverBranch], but that is irrelevant).
Then, we run
PhaseIdealLoop::verify(igvn);
and find a HaltNode for which has_node(n) is false. This is because in
PhaseIdealLoop::build_loop_tree
we do a traversal from Root down the outputs, so we never find this dead-loop. And in verify, we assume that every control node has been visited (i.e. we cannot have dead-loop code).;;;","2022-10-09 23:08;epeter;I just added an F.jasm, where the optimization finally leads to a 3-hop data-deadloop.

See the relevant subgraph here:
https://bugs.openjdk.org/secure/attachment/101004/F.jasm.crash.graph.png

We do not hit the
# assert(no_dead_loop) failed: dead loop detected
because that assert only detects 1-hop and 2-hop cycles. So like in E.jasm, after PhaseIdealLoop (incl IGVN) we have not removed the HaltNode with the dead-loop above, which leads to the assert
# assert(!in->is_CFG()) failed: CFG Node with no controlling input?;;;","2022-10-09 23:18;epeter;Summary so far:

A.jasm
 -> Phi loop -> bad assumption in PhiNode::merge_through_phi (Phi nodes are dead_loop_safe, so phi-dead-loops are allowed, the sanity assert is incorrect)
D.jasm
 -> last Phi with a unique input of an AddI, that collapses to a self-looping AddI -> dead-loop assert
E.jasm
 -> Phi with left-loop and right-loop (2 AddI that loop back to Phi). -> dead-loop not detected -> fail in PhaseIdealLoop::verify
F.jasm
 -> last Phi with unique input of 3-hop Loop (MulF -> ConvF2I -> ConvI2F -> MulI). dead-loop assert does not trigger because cycle too long, but PhaseIdealLoop::verify finds dead code, asserts;;;","2022-10-12 03:45;epeter;G.jasm
-> IGVN leaves dead-loop with multiple Phi and Addi nodes -> PhaseIdealLoop::verify finds dead code, asserts

java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm G.jasm

./java -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:+PrintOptoAssembly -XX:-UseLoopPredicate -XX:-UseProfiledLoopPredicate -XX:+TraceLoopOpts -XX:+PrintInlining -Xcomp -XX:CompileCommand=compileonly,G::test -XX:-TieredCompilation -XX:-LoopUnswitching  G

#  Internal Error (/home/emanuel/Documents/fork2-jdk/open/src/hotspot/share/opto/loopnode.cpp:5284), pid=1840533, tid=1840546
#  assert(!in->is_CFG()) failed: CFG Node with no controlling input?

https://bugs.openjdk.org/secure/attachment/101053/G.jasm.crash.graph.png;;;","2022-10-12 04:04;epeter;H.jasm
-> similar to D.jasm, but I can avoid hitting the ""sanity"" assert. This shows that we most likely do have two separate bugs here.

java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm H.jasm

./java -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:+PrintOptoAssembly -XX:-UseLoopPredicate -XX:-UseProfiledLoopPredicate -XX:+TraceLoopOpts -XX:+PrintInlining -Xcomp -XX:CompileCommand=compileonly,H::test -XX:-TieredCompilation -XX:-LoopUnswitching  H

Loop: N0/N0  has_sfpt
  Loop: N167/N175  IRREDUCIBLE sfpts={ 175 }
    Loop: N260/N258  limit_check sfpts={ 232 239 }
   0  Root  === 0 251 209  [[ 0 1 3 22 23 48 55 98 99 116 237 ]] 
 237  ConI  === 0  [[ 238 ]]  #int:2
 238  AddI  === _ 238 237  [[ 244 239 175 238 205 205 ]]  !orig=172,[191],216 !jvms: H::test @ bci:64
...
#  Internal Error (/home/emanuel/Documents/fork2-jdk/open/src/hotspot/share/opto/phaseX.cpp:943), pid=1847547, tid=1847560
#  assert(no_dead_loop) failed: dead loop detected;;;","2022-10-12 04:17;epeter;Summary:

1.
I think we have two bugs. I have a H.jasm where we do not hit the ""sanity"" assert because we never generate a dead-loop that is only Phi's.

2.
I have multiple examples now, where we can see that if we produce a data-dead-loop during IGVN, and the dead-loop is not removed:

2a)
This can trigger asserts during IGVN, like if we are left with a singular AddI node that references itself.

2b)
I can also extend it to 3-hop cycles of for example MulF,ConvF2I,ConvI2F. This is not cought by the dead-loop assert, because we only catch 2-hop cycles at most.

2c)
Further, there are cases where we are left with a Phi node that has a AddI as left input and AddI as right input, but both of those have the Phi node as input -> we have a :infinity:  shaped double-dead-loop. This is not detected.

2d)
I can create a more complex loop with multiple Phi's and AddI, which is also a dead-loop.

Cases 2 b-d are all not detected during IGVN, and run into dead-code detection in PhaseIdealLoop::verify.
# assert(!in->is_CFG()) failed: CFG Node with no controlling input?
The problem is that we assume that there is no dead code after IGVN.


---
I think in ""normal"" cases (the ones where we do not have some ugly irreducible loop), we do not have Phi nodes that dead-loop in this way (e.g. :infinity: shape). Normally, the dead-loop is expected to collapse. If the loop has no dependency on the data-dead-loop (e.g. and If in the loop depends on that data), we have no problem, the data has no use and it is removed (not sure yet how the control is also removed, but that seems to happen somehow I guess). If we do have some If that depends on that data-dead-loop, it seems we do need the data-dead-loop to collapse / be replaced with TOP. This causes the control also to collapse. If the control does not collapse, we eventually have some control connection down to Root, and PhaseIdealLoop::verify will find that connection and assert because it sees that this is dead code.;;;","2022-10-19 08:26;epeter;I am currently playing around to get more examples. And make them more readable.
My working hypothesis was that we do not handle irreducible loops well during PhaseIdealLoop and its IGVN runs.
Now I found a K.jasm where we bailout with reason ""unhandled CFG detected during loop optimization"".
The comments around that location tell me that PhaseIdealLoop::build_loop_tree_impl is not happy that it found a second loop entry.

I attached the K.jasm, plus a CFG snapshot in picture form.

Now I need to find out for which irreducible loops we bailout, and why, and why we do not bailout in the other cases I found.

Update: we indeed first enter the ""green loop"" via 116, and later also via the second entry 108. We have already post-traversed the whole ""green loop"" from 116, so when we look at it again from 108, we detect that we were have a second entry -> bailout. I wonder if this bailout is necessary? Could we not just ""undo"" the loops here?;;;","2022-10-26 00:35;epeter;N.jasm
(see file attached and 2 graph pictures)

LOOP_Y (orange) collapses during PhaseIdealLoop, as an empty_loop. This makes that 87 If always is False, so during IGVN of PhaseIdealLoop, LOOP_3 (green) loses control. But LOOP_3 does not collapse, and in PhaseIdealLoop::verify we detect it as dead-code:
# assert(!in->is_CFG()) failed: CFG Node with no controlling input?

Why does LOOP_3 (green) not collapse?
We have an irreducible loop (head at 104 Region, second entry at 103 Region). Thus, we have no LoopNode, and when one of those region loses control, we decide that there is no ""unsafe case"". As far as we understand, the definition of ""safe dead loops"" depends on having only reducible loops.

Result of conversation:
We need to know if we detect all irreducible loops. If yes, we could try one of these solutions:
1) have global flag ""have any irreducible loops"". If true, we always do reachability check if any Region loses any control input. Simple solution, but may be expensive, even for regions that are not part of irreducible loops.
2) Find a way to mark all Regions that are implicated by the irreducible loop, and only do reachability there.
3) Bailout would not be very desirable.
4) An eventual goal should be to elliminate irreducibility from C2.

One task worth investing in: See if we can reproduce dead-loop asserts elsewhere (outside PhaseIdealLoop) with similar code.;;;","2022-10-26 05:11;epeter;A2.jasm
(see file and 2 attached pictures)

We seem to be generating some sort of loop/irreducible subgraph, that is still connected at PHASE_AFTER_PARSING.
But during IGVN (PHASE_ITER_GVN1), we lose control, and the graph disconnects, without collapsing.
We trigger this assert because we have a dead-phi-loop:
#  assert(cached_vbox != __null) failed: sanity

Interesting about this assert is that it triggers so early, right after parsing.
The question is if this really depends on the irreducibility in the graph.
I think it has to do something with us inserting more Phi nodes if there is an irreducible loop.;;;","2022-10-26 07:33;epeter;Just found JDK-6742111, a case where we seem to generate irreducible loops during an optimization. Not sure if it is still true. And there is a comment in the code:

  // disable assert until issue with split_flow_path is resolved (6742111)
  // assert(!_has_irreducible_loops || C->parsed_irreducible_loop() || C->is_osr_compilation(),
  //        ""shouldn't introduce irreducible loops"");

it seems to be the only use of parsed_irreducible_loop

Problem with this:
If we have no irreducilbe loop in the graph, and then suddenly an optimization creates irreducibility, we might not realize until PhaseIdealLoop build_loop_tree. And then who knows if we might not end up with dead code.;;;","2022-10-27 09:23;epeter;Good test candidates:
N.jasm - triggers CFG assert, with simple irreducible loop prepended by empty loop, in PhaseIdealLoop::verify
A2.jasm - triggers merge_through_phi sanity assert, with irreducible loop in loop, right after parsing
K.jasm - bailout bad CFG. K3 infinite irreducible loop, under loop with modulo condition that collapses during loop-opts.
D2.jasm - trigger ""dead loop detected"". Not as simple as maybe hoped for, but maybe hard to do simpler. empty loop plus irreducible loop with nested loop. Irreducible loop dies from inside via data to control to data.

What I still need/want:
infinite irreducible loop
irreducible loop where one entry falls quick, the other only later
irreducible loop that gets converted into a int-counted loop, maybe then becomes dead also
maype: dead_loop assert in a simpler way
maybe: trigger merge_through_phi outside an irreducible loop - probably not possible
maybe: OSR irreducible graph case - but probably not relevant;;;","2022-10-28 04:23;epeter;I attached D2.jasm, and pictures (see zip for the 10 interesting steps)
#  assert(no_dead_loop) failed: dead loop detected
For a self-referencing AddI node

Code:
LOOP_Y: empty_loop (violet)
Condition that turns out to be false after LOOP_Y collapses -> LOOP_3 is cut off
LOOP_3: irreducible loop, with an inner loop

Analysis:
LOOP_Y collapses and cuts off LOOP_3 in PhaseIdealLoop.
During IGVN, we see that LOOP_3 dies from the inside out, which leads to some bad states.
For one, we have an AddI that references itself, but also an 140 If has no IfTrue anymore.
This happens because the data-nodes for register 0 eventually collapse, as they realize that they have no inputs. 106 Phi finds that its unique input is TOP. As the inner loop of LOOP_3 has a condition depending on register 0, the dying data-flow makes the control-flow die as well. Eventually, 192 Region dies, which then also removes 193 Phi from register 12, and 159 Phi realizes that 175 AddI is its unique input and subsumes itself with that 175 AddI. Now we have a self-reverencing AddI, which leads to the dead-loop assert next time the AddI is processed on the worklist. (edited) ;;;","2022-10-31 08:34;epeter;I have started a jasm-byte-code-fuzzer project. It spat out some jasm files that trigger some asserts that are already reported here. But I found a new case.

P.jasm
(see attached, plus pictures)
#  assert(is_loop || block->find_node(def) < j) failed: uses must follow definitions

Analysis:
The assert checks that if both use and def are in the same block, we have def < use (before).
There are some exceptions where we do not check this.
First, we do not check this if we have a LoopNode as the block head, since the backedge might cause def/use to be in a loop (def-use-....-def).
There is another special case ""tight loop with no LoopNode"". I am currently not sure what exactly this could be. Maybe it can even be removed.

In this specific example, the block-region can be traced back to a irreducible-loop-entry/head.
Possibly this is a new case we have not handled, and may have to fix / special case in the assert.
More info: We only run PhaseIdealLoop::build_loop_tree once, and find the NeverBranch case (no loop exit). Thus, in this run, the found loops are not attached to the loop tree, and the Regions are not transformed to LoopNodes.
Q: is this really infinite loop specific?

Found non-irreducible case for this: JDK-8296318;;;","2022-11-01 23:16;epeter;I am working on a fix, that tags the Regions ""irreducible"" if we find out at some point (during parsing in ciTypeFlow) that they are either the head or a ""secondary entry"" to an irreducible loop. Whenever such a tagged node loses any control input, we must check if the region is still connected to Root.

This solution assumes that we can also detect new Region nodes that are created ""irreducible"", and we must tag them too.

I found a Q1.jasm (attached, with 2 pictures). We see that in split_fall_in, we have a loop-head Region node that is tagged ""irreducible"", and we multiple of its fall-in controls away into a separate region. It is now possible that this new separate region takes over as the entry to the irreducible loop. In Q1.jasm, this is the case.

TODO: There may be more such cases, I need to investigate.;;;","2022-11-02 07:15;epeter;R.jasm (see file and pictures,  including series in zip file)

#  Internal Error (/home/emanuel/Documents/fork2-jdk/open/src/hotspot/share/opto/node.cpp:830), pid=1965983, tid=1965996
#  assert(idx < _cnt) failed: oob
# V  [libjvm.so+0x1095f68]  Node::del_req(unsigned int)+0x26

Happens in PhaseCFG::convert_NeverBranch_to_Goto

Context:
Normal case: ""live""/""succ"" projection is added as output of NeverBranch before the ""dead"" projection leading to Halt.
Details: During DFS, usually we go from Halt to NeverBranch. Then via Region/Loop, take backedge, and find the ""live""/""succ"" edge. We already have its inputs (NeverBranch), thus we can now post-visit the live edge, and attach it to the NeverBranch first. Later, once we have processed the whole infinite loop, we post-visit out of NeverBranch to the ""dead"" projection edge, which we attach second.

In R.jasm:
Abnormal order: ""dead"" projection is first attached to NeverBranch, and ""live""/""succ"" projection is added second.
Details: In our pathological case, we go in through the shared 122 Halt, and first visit the 166 NeverBranch of the peeled iteration, and visit all of what is above. But there is no backedge, so we will not find the ""live"" edge, and we post-visit the ""dead"" edge first (171 CProj). Then, we take the second branch of the Halt, and visit the peeled loop. From there, we finally find the ""live"" projection (167 CProj) of the peeled iterations NeverBranch, and attach it second.
A further detail: 159 Halt is visited even later, which is somewhat relevant, because if it was visited before 122 Halt, then we would first attach the ""live"" 167CProj, and avoid the bug.

Why is the order of ""live""/""succ"" Projection vs the ""dead"" one relevant?
It predicts in what order we later DFS traverse the nodes for scheduling the nodes into blocks, and also matters the order of successor blocks.
It seems that the code in PhaseCFG::convert_NeverBranch_to_Goto expects the ""succ"" projection and block to have idx=0. On first appearance the code looks like it should also handle the inverted case where ""succ"" has idx=1, but the code has a bug, where we overwrite the _succs array where the ""dead"" block reference is stored before we read it off.

This looks somewhat related to irreducible loops, but maybe this bug is reproducible without irreducible loops. In this case, the decaying irreducible loop creates a situation with multiple NeverBranch nodes in a subgraph, and a special order of creation which seems relevant for the specific DFS traversal during matching, which leads to the inversion, and the eventual assert in the DFS traversial during scheduling.

Update: I found a case without irreducible loops! Bug filed under JDK-8296389;;;","2022-11-04 09:31;epeter;FYI:
Fuzzing found another assert triggered. Looks like a separate bug. Filed it as JDK-8296412.;;;","2022-11-04 09:44;epeter;Update to previous Work Status report:
https://bugs.openjdk.org/browse/JDK-8280126?focusedCommentId=14532876&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14532876

Fuzzing found more of the same 3 asserts:
CFG          -> assert(!in->is_CFG()) failed: CFG Node with no controlling input?
sanity       -> assert(cached_vbox != __null) failed: sanity
dead-loop -> assert(no_dead_loop) failed: dead loop detected

All of these seem to have to do with dead irreducible loops. However, the sanity assert is somewhat less related, as it seems to be an optimization that makes assumptions that are not really given.
The CFG and the dead-loop assert can be prevented if we track the irreducible regions properly, and do connectivity check every time we lose a control input.

In addition, fuzzing seems to hit my own assert, if I do not track the irreducible regions correctly (eg. Q1.jasm).

Fuzzing also found 3 unrelated asserts, bugs reported in:
JDK-8296412, JDK-8296389, JDK-8296318


Good test candidates:
N.jasm - triggers CFG assert, with simple irreducible loop prepended by empty loop, in PhaseIdealLoop::verify
A2.jasm - triggers merge_through_phi sanity assert, with irreducible loop in loop, right after parsing
K.jasm - bailout bad CFG. K3 infinite irreducible loop, under loop with modulo condition that collapses during loop-opts.
D2.jasm - trigger ""dead loop detected"". Not as simple as maybe hoped for, but maybe hard to do simpler. empty loop plus irreducible loop with nested loop. Irreducible loop dies from inside via data to control to data.
Q1.jasm - trigger assert that checks that we do not find irreducible regions that we did not reviously mark. This Q1.jasm creates a new Region in split_fall_in that must be marked as irreducible if the previous region was marked irreducible.

What I still wish:
maype: dead_loop assert in a simpler way - maybe with StressIGVN?
(really not so important - but I need to run with StressIGVN during fuzzing)

Edit done:
infinite irreducible loop
maybe: OSR irreducible graph case - but probably not relevant

Edit most likely not possible:
irreducible loop where one entry falls quick, the other only later
irreducible loop that gets converted into a int-counted loop, maybe then becomes dead also
(the previous two ideas could be done with the empty_loop and the unrolling template)
(why it is not possible: once we lose all but one entry, the graph becomes reducible -> collapses normally)
maybe: trigger merge_through_phi outside an irreducible loop - probably not possible;;;","2022-11-08 01:02;epeter;Not all irreducible loop heads are necessarily ""irreducible loop entry"".
See Q3.jasm as example.
 43  Region  === 43 _ 39  [[ 43 41 ]]  #irreducible-entry !jvms: Q3::test @ bci:14
 44  Region  === 44 _ 38  [[ 44 24 ]]  #irreducible-entry !jvms: Q3::test @ bci:22
 60  Region  === 60 _ 56  [[ 60 58 ]]  #irreducible !jvms: Q3::test @ bci:25;;;","2022-11-08 09:07;epeter;Update:
I am now working on a test-collection: TestIrreducibleLoops.jasm
test_001: Q3.jasm - relatively simple irreducible loop
test_002: Q1.jasm - triggers split_fall_in
test_003: N.jasm - cut off both entries at the same time, would trigger CFG assert
test_004: A2.jasm - triggers PhiNode::merge_through_phi ""sanity"" assert because of dead Phi-loop
test_005: K.jasm - infinite irreducible loop -> bailout
test_006: D2.jasm - triggers data dead-loop assert with self-referencing AddI node - StressIGVN can make it intermittent, as the order of decay matters
test_007: old entries lose ""backedge"" controls, and are collapsed. Internal nodes take over as irreducible loop entry.
test_008: same, but collapse happens already during parsing, not loop-opts like test_007.
test_009: same as test_007, except that there are additional if-statements that are no longer in loop when old entries lose ""backedge"" control. New entries are below the if-section.

Update (Nov 15):
test_010: reducible loop in irreducible loop, with same loop head.
test_011: irreducible loop entry detection is not consistent, depends on DF traversal order.
test_012: WIP;;;","2022-11-10 05:20;epeter;I found a T.java that produces an irreducible loop, which is then later cut off, and the data internally collapses in a bad way, such that we create a data-dead-loop -> assert. In production, this leads to a SIGSEGV.

See T.jasm, and image series in zip.

Analysis:
I have a ""killswitch"" (red), the ""if (x == 0)"". This cuts the backedge from before the OSR.
I wanted a ""empty_loop"" to collapse during OSR-compilation. Since it contains a backedge, I have to make sure it is visited once before OSR compilation, hence LOOP3 (triggers OSR, green) is in an extra if-statement. There, we also set x=1, which activates the ""killswitch"".
It then takes a while until the ""empty_loop"" properly falls apart - eventually during IGVN it does, rips away the entries to the irreducible loop (always have y==0, return directly).
We have the data for ""i"" -> it quickly collapses when the control flow collapses (pink). We can see that the control flow of the LOOP1 is already very close to dying too -> 252 SafePoint will soon disappear, and remove 357 Loop, eventually the whole code would be deleted - except we process ""310 LShiftI"" (i *= 2) first, which is already a self-loop.
Solution: we have to make sure to detect when the irreducible loop is disconnected, and aggressively remove control-flow.

What this shows: it is possible to create difficult irreducible loops with just pure Java, with OSR.
Unfortunately, I still need to restrict the trap-limit, will need to investigate if that is really necessary.
It seems to take a lot to trigger such a scenario - but it is possible.

Reproduce it like this:
java -XX:CompileCommand=compileonly,T::test -XX:-TieredCompilation -XX:PerMethodTrapLimit=0 T.java

I usually run it like this:
java -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:CompileCommand=compileonly,T::test -XX:-TieredCompilation -XX:-RenumberLiveNodes -XX:PerMethodTrapLimit=0 -XX:+TraceLoopOpts -Xbatch T.java

Results:

(product)
openjdk 17.0.4 2022-07-19
OpenJDK Runtime Environment (build 17.0.4+8-Ubuntu-120.04)
OpenJDK 64-Bit Server VM (build 17.0.4+8-Ubuntu-120.04, mixed mode, sharing)
#  SIGSEGV (0xb) at pc=0x00007fb7d02ab8fa, pid=1412770, tid=1412783

(debug)
   0  Root  === 0 316  [[ 0 1 3 249 21 182 26 238 30 212 34 209 38 67 81 83 87 88 91 92 206 139 142 153 164 370 425 503 538 571 573 575 609 ]] 
  91  ConI  === 0  [[ 311 167 166 310 252 179 ]]  #int:1
 310  LShiftI  === _ 310 91  [[ 311 310 252 289 167 293 273 302 ]]  !orig=[251],263 !jvms: T::test @ bci:151 (line 10)
#  Internal Error (/home/emanuel/Documents/fork6-jdk/open/src/hotspot/share/opto/phaseX.cpp:943), pid=1413030, tid=1413043
#  assert(no_dead_loop) failed: dead loop detected
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (slowdebug build 20-internal-2022-11-09-0613525.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2022-11-09-0613525.emanuel..., mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x115478c]  PhaseGVN::dead_loop_check(Node*)+0x180

Edit:
The trap-limit is necessary here, else we get an uncommon_trap at the loop-exit of LOOP3, since the loop-exit was never taken before OSR:
122  CallStaticJava  === 117 98 119 8 9 (121 1 1 101 1 102 103 104 1 109 ) [[ 123 ]] # Static uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')  void ( int ) C=0.000100 T::test @ bci:65 (line 19) reexecute !jvms: T::test @ bci:65 (line 19)

Maybe we can somehow avoid hitting any of the profiling unc_traps.
But I think it is quite difficult.
An easier, but probably contrived way is to exhaust the traps.

Edit2:
T2.java
We can exhaust the unc_traps. But it is a bit contrived.
java -XX:CompileCommand=compileonly,T::test -XX:-TieredCompilation -XX:PerMethodTrapLimit=5 T.java
I have 5 ""decoy"" for loops. Each one triggers OSR, and sets a ""unstable_if"" at the loop-exit. Once the OSR execution exits the respective loop, the unc_trap is triggered, we decompile. Then the next for-loop OSR compiles. Until we exhaust the unc_trap limit for ""unstable_if"".
Default trap limit is 100, and given this example we could extend it easily by copying the for-loops 100 times. Maybe there is another solution, but I did not get simple if / switch to work for that.

Edit3:
T3.java
java -XX:PerMethodTrapLimit=10 T3.java
We can exhaust the trap limit, and do not need the number of ""decoy"" loops to be exactly equal to the trap limit, the trap limit just needs to be lower than the number of ""decoy"" loops. Xcomp seems required, but that can probably also be circumvented. -Xbatch may be required if the ""decoy"" loops do not perform enough iterations.
Note: we can easily duplicate the ""decoy"" loops more, and exhaust the default trap limit of 100.;;;","2022-12-22 04:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11764
Date: 2022-12-22 08:40:48 +0000;;;","2023-02-07 23:47;dukebot;Changeset: ac7119f0
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-02-08 07:45:09 +0000
URL:       https://git.openjdk.org/jdk/commit/ac7119f0d5319a3fb44dc67a938c3e1eb21b9202
;;;"
C2: Infinite loop in CMoveINode::Ideal during IGVN,JDK-8280123,5066426,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vlivanov,shade,shade,2022-01-18 01:53,2022-03-07 02:52,2023-10-01 09:56,2022-01-20 03:25,17,18,19,,,,,,19,hotspot,,0,c2,javafuzzer,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,oracle-triage-11,oracle-triage-19,redhat-interest,regression,,,,,,,,,"Attached Fuzzer test fails in current mainline:

$ build/linux-x86_64-server-fastdebug/images/jdk/bin/java -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation -XX:StressSeed=81931138 -cp 0017/ Test

#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/opto/phaseX.cpp:1162), pid=2380570, tid=2380583
#  assert(false) failed: infinite loop in PhaseIterGVN::transform_old

Current CompileTask:
C2:    365    6   !b        Test::vMeth (499 bytes)

Stack: [0x00007ff68b638000,0x00007ff68b739000],  sp=0x00007ff68b7340c0,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1690c41]  PhaseIterGVN::transform_old(Node*)+0x381
V  [libjvm.so+0x1689a4e]  PhaseIterGVN::optimize()+0x7e
V  [libjvm.so+0xab4072]  Compile::Optimize()+0x1c2
V  [libjvm.so+0xab66ce]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x127e
V  [libjvm.so+0x8d58bb]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x69b
V  [libjvm.so+0xac80c8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xe48
V  [libjvm.so+0xac8e38]  CompileBroker::compiler_thread_loop()+0x648
V  [libjvm.so+0x1a2ca0c]  JavaThread::thread_main_inner()+0x28c
V  [libjvm.so+0x1a33064]  Thread::call_run()+0x104
V  [libjvm.so+0x160a1cc]  thread_native_entry(Thread*)+0x10c

Seems to only reproduce with a specific seed. Bisection points to JDK-8267687 as the cause.",,,,,,,,,,JDK-8281192,JDK-8281993,JDK-8280851,JDK-8282733,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-01-18 01:42;shade;0017.zip;https://bugs.openjdk.org/secure/attachment/97651/0017.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vowz:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-18 02:41;chagedorn;ILW = Infinite loop assertion failure in IGVN and bailout in product, single Java Fuzzer test, disable compilation of affected method or use -XX:-StressIGVN = HLM = P3 ;;;","2022-01-19 05:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7133
Date: 2022-01-18 18:57:02 +0000;;;","2022-01-20 03:25;roboduke;Changeset: 3f747368
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-01-20 11:23:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3f747368b9a5c321d2724ba57103f17edc166251
;;;","2022-02-01 02:33;thartmann;Fix Request (JDK 18u)
The fix has already been backported to JDK 17u and should be backported to JDK 18u as well to avoid a regression. The fix is low risk and applies cleanly. It has been tested manually with tier1-3 and in the JDK 17u and JDK 19 CI.;;;","2022-02-01 02:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/18
Date: 2022-02-01 10:34:17 +0000;;;","2022-03-04 04:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/198
Date: 2022-03-04 12:09:28 +0000;;;","2022-03-05 01:50;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. No new test failures observed (our nightly tests).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SupportedGroupsExtension should output ""named groups"" rather than ""versions""",JDK-8280122,5066425,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jjiang,jjiang,jjiang,2022-01-18 01:39,2022-01-25 00:12,2023-10-01 09:56,2022-01-18 14:41,11,17,18,,,,,,19,security-libs,,0,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,,,,"MessageFormat messageFormat = new MessageFormat(
    ""\""versions\"": '['{0}']'"", Locale.ENGLISH);

In class SupportedGroupsExtension, the above ""versions"" should be ""named groups"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vowr:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-01-18 03:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7123
Date: 2022-01-18 11:11:49 +0000;;;","2022-01-18 14:41;roboduke;Changeset: 3a421e4b
Author:    John Jiang <jjiang@openjdk.org>
Date:      2022-01-18 22:40:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3a421e4b78ae5e7116ac68128504b65fa00e1f7f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(dc) DatagramSocket.receive does not always throw when the channel is closed  ,JDK-8280113,5066330,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,alanb,webbuggrp,webbuggrp,2022-01-16 09:09,2023-07-21 07:35,2023-10-01 09:56,2023-02-22 00:14,17,21,,,,,,,21,core-libs,,0,dcsaw,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Linux Xubuntu 21.10 x64 OpenJDK17.0.1
Linux Xubuntu 21.10 x64 GraalVM CE 21.3.0
Linux Xubuntu 21.10 x64 BellSoft 17.0.1
Raspberry Pi OS Bullseye armhf BellSoft 17.0.1

A DESCRIPTION OF THE PROBLEM :
A DatagramSocket.receive() blocked on receive does not always throw a SocketException when the Socket is closed.  If the Socket has a setSoTimeout set to a positive number and two packets have been received and the socket is closed no exception will be thrown.  Also true for MulticastSockets.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Open a DatagramSocket, set Socket timeout to a positive value, receive two DatagramPackets, and then close the Socket.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
It should throw a SocketException.
ACTUAL -
Program flow will proceed to the subsequent instruction and no Excpetion will be thrown.

---------- BEGIN SOURCE ----------
import java.io.*;
import java.net.*;

public class SocketBug {
    int port = 56789;
    Thread rxThread;
    Thread txThread;
    DatagramSocket rxSocket;
    volatile boolean runFlag;

    public SocketBug() throws IOException {
        rxSocket = new DatagramSocket(port);
        // must have a positive value timeout
        rxSocket.setSoTimeout(5000);

        rxThread = new Thread(() -> {
            byte[] buf = new byte[64];
            DatagramPacket packet = new DatagramPacket(buf,buf.length);
            try {
                while (runFlag) {
                    rxSocket.receive(packet);
                    if (runFlag)
                        System.out.println(""rxThread: packet received"");
                    else
                        throw new IOException(
                         ""should have thrown SocketException"");
                }
            } catch (IOException ioe) {
                System.out.printf(""rxThread: %s%n"",ioe);
            }
        });

        txThread = new Thread(() -> {
            byte[] buf = new byte[64];
            DatagramPacket packet = new DatagramPacket(buf,buf.length,
             new InetSocketAddress(""localhost"",port));
            try (DatagramSocket txSocket = new DatagramSocket()) {
                // just to make sure rxThread is blocked on receive
                Thread.sleep(200);
                // must send two packets
                txSocket.send(packet);
                txSocket.send(packet);
                System.out.println(""txThread: packets sent"");
            } catch (IOException|InterruptedException ex) {
                System.out.printf(""txThread: %s%n"",ex);
            }
        });
    }

    public void start() {
        runFlag = true;
        rxThread.start();
        txThread.start();
    }

    public void stop() {
        runFlag = false;
        rxSocket.close();
    }

    public static void main(String[] args) {
        try {
            SocketBug bug = new SocketBug();
            bug.start();
            Thread.sleep(1000);
            bug.stop();
        } catch (IOException|InterruptedException ex) {
            System.out.printf(""main: %s%n"",ex);
        }
    }
}


---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Set a flag before closing the Socket and test that flag after Socket.receive().

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JI-9072637,,,,,,,,,,,,,,,,,,,,,,"2022-01-17 21:55;tongwan;SocketBug.java;https://bugs.openjdk.org/secure/attachment/97650/SocketBug.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,14,,generic,,,,,"0|i2vobn:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2022-01-17 21:52;tongwan;Observations on Windows 10:
JDK 17: Passed, a SocketException thrown;;;","2022-01-17 23:25;alanb;This looks like a bug in the reproducer. Setting ""runFlag"" and closing the socket is not an atomic operation so rxThread may read runFlag as flag after receiving a datagram. If you remove the runFlag from the loop in rxThread then you'll get the expected SocketException.;;;","2022-01-18 17:41;tongwan;Additional information from the submitter:
You tested it with Windows. This bug is NOT in Windows;;;","2022-01-18 17:44;tongwan;The observations with Linux:
tongwan@TONGWAN-7080:/mnt/c/Users/TONGWAN/Documents/JI-9072428/src$ cat /etc/os-release
NAME=""Ubuntu""
VERSION=""20.04.2 LTS (Focal Fossa)""
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME=""Ubuntu 20.04.2 LTS""
VERSION_ID=""20.04""
HOME_URL=""https://www.ubuntu.com/""
SUPPORT_URL=""https://help.ubuntu.com/""
BUG_REPORT_URL=""https://bugs.launchpad.net/ubuntu/""
PRIVACY_POLICY_URL=""https://www.ubuntu.com/legal/terms-and-policies/privacy-policy""
VERSION_CODENAME=focal
UBUNTU_CODENAME=focal
tongwan@TONGWAN-7080:/mnt/c/Users/TONGWAN/Documents/JI-9072428/src$ /mnt/c/Users/TONGWAN/Downloads/jdk-17.0.1/bin/java SocketBug
rxThread: packet received
txThread: packets sent
rxThread: packet received
rxThread: java.io.IOException: should have thrown SocketException

root@730ba8deecc7:/# cat /etc/os-release
PRETTY_NAME=""Debian GNU/Linux bookworm/sid""
NAME=""Debian GNU/Linux""
ID=debian
HOME_URL=""https://www.debian.org/""
SUPPORT_URL=""https://www.debian.org/support""
BUG_REPORT_URL=""https://bugs.debian.org/""
root@730ba8deecc7:/tmp/external/Documents/JI-9072428/src#  ../../../Downloads/jdk-17.0.1/bin/java SocketBug
rxThread: packet received
txThread: packets sent
rxThread: packet received
rxThread: java.io.IOException: should have thrown SocketException;;;","2022-01-18 20:08;pnarayanaswa;Additional Information from submitter:
============================
The bug is not in Windows 10 using openjdk-17.0.2 64 bit or BellSoft's Liberica JDK 17.0.1 64bit.;;;","2022-01-18 22:52;alanb;This is an issue with the reproducer (SocketBug.java), not a JDK issue.;;;","2022-01-28 03:59;tongwan;Additional information from the submitter:
You closed it because you tested it on a Windows machine and Windows Java does NOT have this bug. This is LINUX bug. ;;;","2022-02-13 20:08;tongwan;Additional information from the submitter:
This is only a Linux bug. It works correctly in Windows.  

Here is more explanations about the reproducer:
 * SocketBug demonstrates the bug in OpenJDK 17 on LINUX where after two UDP
 * packets have been received and the receiving socket is blocked on receive(),
 * closing the socket DOES NOT produce a SocketException but instead falls
 * through to the next instruction. This bug is NOT in the Windows version of
 * OpenJDK 17.
 *
 * The start() method starts both the rxThread and txThread. The rxThread
 * creates a DatagramSocket for receiving and enters the while(true) loop,
 * blocking on recieve(). The only exit from that loop is via an exception.
 * The txThread creates a DatagramSocket for sending and sends two packets.
 * They are both received by the socket in the rxThread. Since the runFlag is
 * true the ""packet received"" message is printed. The rxThread is then blocked
 * waiting for more packets or to be closed. The stop method is called after
 * two seconds. This sets the runFlag to false and closes the socket.
 * The receiving socket should throw a SocketException but instead it falls
 * through to the if statement and then prints the message ""should have thrown
 * SocketException"" because runFlag is now false. ;;;","2023-02-19 22:00;tongwan;Additional information from the submitter
ADDITIONAL SYSTEM INFORMATION :
Xubuntu 22.10 x64, OpenJDK 19.0.2, OpenJDK 21ea and Bellsoft Java 19.0.2

Raspberry Pi OS 64bit, OpenJDK 19.0.2, OpenJDK 21ea and Bellsoft Java 19.0.2

A DESCRIPTION OF THE PROBLEM :
**** THIS IS ONLY A BUG ON LINUX OS, IT WORKS FINE ON WINDOWS ***

When two UDP packetes have been received on a Socket with a timeout is blocked on a receive(), closing the Socket does NOT produce a SocketException but instead falls through to the next instruction.

This is the output of the reproducer when run on Xubuntu 22.10:

java SocketBug.java
txThread: first packet sent
rxThread: packet received
txThread: second packet sent
rxThread: packet received
txThread: finished
rxThread: java.io.IOException: should have thrown SocketException: runFlag=false
rxThread: finished

This is the output when run on Windows 10:

java SocketBug.java
txThread: first packet sent
rxThread: packet received
txThread: second packet sent
txThread: finished
rxThread: packet received
rxThread: java.net.SocketException: Socket closed: runFlag=false
rxThread: finished

When I submitted this bug last year it was closed after a test of the reproducer on a Windows machine. This bug is not in Windows Java. It is a Linux Java bug.


REGRESSION : Last worked in version 17.0.6

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create a DatagramSocket with a timeout and send two DatagramPackets to the Socket, receive those two packets, block on the Socket.receive() method and then close the Socket.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
A SocketException should be thrown when the Socket blocked on receive() is closed.
ACTUAL -
No exception will be thrown and the code will proceed to the instruction after the Socket.receive().

---------- BEGIN SOURCE ----------
import java.io.*;
import java.net.*;

/**
 * SocketBug demonstrates the bug in OpenJDK 17, 18 and 19 on LINUX where after
 * two UDP packets have been received and the receiving socket is blocked on
 * receive(), closing the socket DOES NOT produce a SocketException but instead
 * falls through to the next instruction. This bug is NOT in the Windows
 * version of OpenJDK 17, 18 or 19.
 *
 * The start() method starts both the rxThread and txThread. The rxThread
 * creates a DatagramSocket for receiving and enters the while(true) loop,
 * blocking on recieve(). The only exit from that loop is via an exception.
 * The txThread creates a DatagramSocket for sending and sends two packets.
 * They are both received by the socket in the rxThread. Since the runFlag is
 * true the ""packet received"" message is printed. The rxThread is then blocked
 * waiting for more packets or to be closed. The stop method is called after
 * two seconds. This sets the runFlag to false and closes the socket.
 * The rxSocket should throw a SocketException but instead it falls through to
 * the if statement and then prints the message
 * ""should have thrown SocketException"" because runFlag is now false.
 */
public class SocketBug {
    int port = 56789;
    Thread rxThread;
    Thread txThread;
    DatagramSocket rxSocket;
    volatile boolean runFlag;

    public SocketBug() throws IOException {
        rxSocket = new DatagramSocket(port);
        // must have a positive value timeout
        // this is longer than the delay in main()
        rxSocket.setSoTimeout(5000);

        rxThread = new Thread(() -> {
            String threadName = Thread.currentThread().getName();
            byte[] buf = new byte[64];
            DatagramPacket packet = new DatagramPacket(buf,buf.length);
            try {
                // no way out of this loop except an exception
                while (true) {
                    rxSocket.receive(packet);
                    if (runFlag)
                        System.out.printf(""%s: packet received%n"",threadName);
                    else
                        throw new IOException(
                         ""should have thrown SocketException"");
                }
                // the only way out of the while loop above is an exception
            } catch (IOException ioe) {
                System.out.printf(""%s: %s: runFlag=%b%n"",
                 threadName,ioe,runFlag);
            }
            System.out.printf(""%s: finished%n"",threadName);
        },""rxThread"");

        txThread = new Thread(() -> {
            String threadName = Thread.currentThread().getName();
            byte[] buf = new byte[64];
            DatagramPacket packet = new DatagramPacket(buf,buf.length,
             new InetSocketAddress(""localhost"",port));
            try (DatagramSocket txSocket = new DatagramSocket()) {
                // must send two packets
                txSocket.send(packet);
                System.out.printf(""%s: first packet sent%n"",threadName);
                txSocket.send(packet);
                System.out.printf(""%s: second packet sent%n"",threadName);
            } catch (IOException ioe) {
                System.out.printf(""%s: %s%n"",threadName,ioe);
            }
            System.out.printf(""%s: finished%n"",threadName);
        },""txThread"");
    }

    public void start() {
        runFlag = true;
        rxThread.start();
        txThread.start();
    }

    public void stop() {
        runFlag = false;
        rxSocket.close();
    }

    public static void main(String[] args) {
        try {
            SocketBug bug = new SocketBug();
            bug.start();
            Thread.sleep(2000);
            bug.stop();
        } catch (IOException|InterruptedException ex) {
            System.out.printf(""main: %s%n"",ex);
        }
    }
}


---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Set a flag before closing the Socket and test that flag in the code following the Socket.receive() method.

FREQUENCY : always ;;;","2023-02-20 02:57;alanb;Thanks for the updated test, this is an issue with async close receive when the channel has already received more than one datagram. This may go back to JDK 14 when the socket address caches were introduced.;;;","2023-02-20 11:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12674
Date: 2023-02-20 18:09:44 +0000;;;","2023-02-22 00:14;dukebot;Changeset: b6ecca12
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-02-22 08:13:06 +0000
URL:       https://git.openjdk.org/jdk/commit/b6ecca126846f9c53d554ff061cfe9b7b20a4d12
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/c2/irTests/TestIRAbs.java fails on some arches,JDK-8280089,5066394,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-01-17 10:15,2022-09-09 02:21,2023-10-01 09:56,2022-01-18 04:15,19,,,,,,,,19,hotspot,,0,noreg-self,oracle-triage-19,ursqe-triaged,,,,,,,,,,,,,,,,,"$ CONF=linux-x86-server-fastdebug make run-test TEST=compiler/c2/irTests/TestIRAbs.java

Failed IR Rules (3)
------------------
- Method ""public long compiler.c2.irTests.TestIRAbs.testLong1(long)"":
  * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIf={}, applyIfAnd={}, failOn={""(\\d+(\\s){2}(SubL.*)+(\\s){2}===.*)""}, applyIfOr={}, counts={}, applyIfNot={})""
    - failOn: Graph contains forbidden nodes:
        Regex 1: (\d+(\s){2}(SubL.*)+(\s){2}===.*)
        Matched forbidden node:
          25  SubL  === _  24  11  [[ 39  50 ]]  !jvms: TestIRAbs::testLong1 @ bci:2 (line 171)
  * @IR rule 2: ""@compiler.lib.ir_framework.IR(applyIf={}, applyIfAnd={}, failOn={}, applyIfOr={}, counts={""(\\d+(\\s){2}(AbsL.*)+(\\s){2}===.*)"", ""1""}, applyIfNot={})""
    - counts: Graph contains wrong number of nodes:
        Regex 1: (\d+(\s){2}(AbsL.*)+(\s){2}===.*)
        Expected 1 but found 0 nodes.

- Method ""public long compiler.c2.irTests.TestIRAbs.testLong0(long)"":
  * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIf={}, applyIfAnd={}, failOn={}, applyIfOr={}, counts={""(\\d+(\\s){2}(AbsL.*)+(\\s){2}===.*)"", ""1""}, applyIfNot={})""
    - counts: Graph contains wrong number of nodes:
        Regex 1: (\d+(\s){2}(AbsL.*)+(\s){2}===.*)
        Expected 1 but found 0 nodes.

>>> Check stdout for compilation output of the failed methods
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276673,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vopv:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-17 10:27;shade;The trouble is that AbsL parts of the test are arch-specific, as only {x86_64,aarch64,ppc64,s390}.ad have the match rules for AbsL. x86_32.ad does not have it, so C2 never actually emits AbsL in x86_32 case. AbsI, AbsF, AbsD are also not supported by arm.ad.

I wonder if IR Test Framework might be able to disable subtests based on arch... It is probably all around easier to make this test x86_64 specific. It tests shared C2 code, so testing one architecture is probably enough.
;;;","2022-01-17 10:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7116
Date: 2022-01-17 18:43:00 +0000;;;","2022-01-18 00:16;chagedorn;ILW = IR test fails on x86_32, single test, no workaround = MLH = P4;;;","2022-01-18 04:15;roboduke;Changeset: 645b38d5
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-18 12:13:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/645b38d586b38252faa4663aca0453e3079fc30d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1: Fix template parameters in G1SegmentedArraySegment,JDK-8280070,5066350,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mli,mli,mli,2022-01-17 02:55,2022-01-25 00:09,2023-10-01 09:56,2022-01-18 01:17,19,,,,,,,,19,hotspot,,0,cleanup,gc-g1,,,,,,,,,,,,,,,,,,"This is a simple fix of template parameters in G1SegmentedArraySegment.

diff --git a/src/hotspot/share/gc/g1/g1SegmentedArray.inline.hpp b/src/hotspot/share/gc/g1/g1SegmentedArray.inline.hpp
index 1829f47e216..17be55fe6ab 100644
--- a/src/hotspot/share/gc/g1/g1SegmentedArray.inline.hpp
+++ b/src/hotspot/share/gc/g1/g1SegmentedArray.inline.hpp
@@ -34,12 +34,12 @@ template<MEMFLAGS flag>
 G1SegmentedArraySegment<flag>::G1SegmentedArraySegment(uint slot_size, uint num_slots, G1SegmentedArraySegment* next) :
   _slot_size(slot_size), _num_slots(num_slots), _next(next), _next_allocate(0) {
 
-  _segment = NEW_C_HEAP_ARRAY(char, (size_t)_num_slots * slot_size, mtGCCardSet);
+  _segment = NEW_C_HEAP_ARRAY(char, (size_t)_num_slots * slot_size, flag);
 }
 
 template<MEMFLAGS flag>
 G1SegmentedArraySegment<flag>::~G1SegmentedArraySegment() {
-  FREE_C_HEAP_ARRAY(mtGCCardSet, _segment);
+  FREE_C_HEAP_ARRAY(flag, _segment);
 }
 
 template<MEMFLAGS flag>
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vog3:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-01-17 06:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7114
Date: 2022-01-17 14:34:16 +0000;;;","2022-01-18 01:17;roboduke;Changeset: eb949953
Author:    Hamlin Li <mli@openjdk.org>
Date:      2022-01-18 09:16:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/eb9499535cde140c6bf16b3c4a8e9ee55412d0c3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect code generated for unary - on char operand,JDK-8280067,5066345,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2022-01-17 01:26,2022-01-26 17:23,2023-10-01 09:56,2022-01-24 05:53,11,17,18,19,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,"(Reported by Kristian Thomassen.)

Consider code like:
---
public class UnaryMinus {
    public static void main(String... args) {
        Character var = (char) - (false ? (char) args.length : (char) 2);
    }
}
---

When run, this will cause a crash:
---
$ java UnaryMinus.java
Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException: Index -2 out of bounds for length 128
        at java.base/java.lang.Character.valueOf(Character.java:8595)
        at UnaryMinus.main(UnaryMinus.java:3)
---
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2voez:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-20 04:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7156
Date: 2022-01-20 12:31:57 +0000;;;","2022-01-24 05:53;roboduke;Changeset: 18c9cb07
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-01-24 13:52:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/18c9cb07891cdd68c06385a28af16e3931b84317
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The sun/rmi/server/Activation.java class use Thread.dumpStack(),JDK-8280060,5066337,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-01-16 19:24,2023-01-10 04:52,2023-10-01 09:56,2022-02-16 17:01,8,,,,,,,,openjdk8u332,other-libs,,0,11-na,amazon-interest,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,,,"The sun/rmi/server/Activation.java class use the Thread.dumpStack() and produces many dumps during tck execution.
In jdk8 It was added here:
http://hg.openjdk.java.net/jdk8u/monojdk8u/annotate/98c3f2812caf/jdk/src/share/classes/sun/rmi/server/Activation.java#l538

The same patch for jdk11 does not have it:
https://github.com/openjdk/jdk11u/commit/4ce7b5f28063abca8391d5d7173a45210191e269#diff-fe5b09c998a43189c85b9465455d866b07b32131b2b0f85a6e5801176b22362aR548",,,,,,,,,,JDK-8282327,JDK-8299876,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vod7:",9223372036854775807,b03,,,,,,,,,,,,"2022-01-21 20:00;serb;Fix request (8u)

The ""Thread.dumpStack()"" pushed to jdk 8 by the JDK-8174770 is removed to stop producing many dumps during tck/jtreg execution.

Review: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2022-January/014511.html
Webrev: http://cr.openjdk.java.net/~serb/8280060/webrev.00;;;","2022-02-16 17:01;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/monojdk8u-dev/rev/7376b980d6b0
User:  serb
Date:  2022-02-17 01:00:37 +0000
;;;","2022-04-17 19:08;andrew;HG Updates added a comment - 2022-02-24 02:19
URL: https://hg.openjdk.java.net/jdk8u/monojdk8u/rev/7376b980d6b0
User: andrew
Date: 2022-02-24 02:18:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect glibc version is used in a comment in os_linux.cpp,JDK-8280059,5066335,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,dholmes,dholmes,2022-01-16 18:36,2022-01-25 00:08,2023-10-01 09:56,2022-01-17 16:49,14,,,,,,,,19,hotspot,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"From JDK-8169373:

The glibc NPTL bug which subtracted the guard size from the thread stack size instead of adding it on top of it has been fixed in glibc 2.27 (see https://sourceware.org/bugzilla/show_bug.cgi?id=22637). This leads to slightly bigger stack sizes for non-Java threads if running an glibc 2.27+ but I think the effect is negligible and only affects non-Java threads because Java threads don't use glibc guard pages.

""JDK-8225035: Thread stack size issue caused by large TLS size"" mentioned this in a comment (https://github.com/openjdk/jdk/blob/299022dfacbcb49e3bc5beca8ff9b1fca1101493/src/hotspot/os/linux/os_linux.cpp#L809) but used the wrong glibc version ""2.7"" instead of ""2.27"". 

---",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8169373,JDK-8225035,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b05,14,,linux,,,,,"0|i2vocr:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-16 18:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7103
Date: 2022-01-17 02:44:59 +0000;;;","2022-01-17 16:49;roboduke;Changeset: 262f2efd
Author:    David Holmes <dholmes@openjdk.org>
Date:      2022-01-18 00:47:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/262f2efd6ce546b4ee8c9c045916c1a23ad14676
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing comma in copyright header,JDK-8280048,5066315,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mikael,mikael,mikael,2022-01-14 19:12,2023-08-07 14:17,2023-10-01 09:56,2022-01-14 19:22,11,17,19,8,,,,,19,client-libs,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,Missing comma in test/jdk/java/awt/Graphics2D/CopyAreaOOB.java after JDK-7001973.,,,,,,,,,,JDK-8291603,JDK-8301389,JDK-8301158,JDK-8291606,JDK-8301157,,,,,,,,,,,,,,,,,,,,,,JDK-7001973,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vo8b:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-01-14 19:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7095
Date: 2022-01-15 03:14:33 +0000;;;","2022-01-14 19:22;roboduke;Changeset: 9a18190a
Author:    Mikael Vidstedt <mikael@openjdk.org>
Date:      2022-01-15 03:20:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9a18190a4f8e31801d1442d97f247f074a3fd5c0
;;;","2023-01-25 15:44;serb;Fix request (11u 17u)

Clean backport. The fix for a typo.
Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/1114
Review 11u-dev: https://github.com/openjdk/jdk11u-dev/pull/1692;;;","2023-01-25 15:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1114
Date: 2023-01-25 23:15:41 +0000;;;","2023-01-25 15:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1692
Date: 2023-01-25 23:19:26 +0000;;;","2023-01-27 19:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/248
Date: 2023-01-27 23:15:23 +0000;;;","2023-01-27 19:48;serb;Fix request (8u)

Clean backport. The fix for a typo.
Review 8u-dev: https://github.com/openjdk/jdk8u-dev/pull/248;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Broken link to Swing Connection document from javax.swing package docs,JDK-8280047,5066313,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,kcr,kcr,2022-01-14 16:18,2022-02-11 09:52,2023-10-01 09:56,2022-01-19 20:17,11,17,18,,,,,,19,client-libs,,0,noreg-doc,sn_110,,,,,,,,,,,,,,,,,,"The following external link to ""The Swing Connection"", from the javax.swing package API docs, is a broken link that returns a 404:

http://www.oracle.com/technetwork/java/javase/tech/articles-jsp-139072.html

It is linked from this page:

https://docs.oracle.com/en/java/javase/17/docs/api/java.desktop/javax/swing/package-summary.html#related

The source is here:

https://github.com/openjdk/jdk/blob/jdk-19%2B5/src/java.desktop/share/classes/javax/swing/package-info.java#L135

This link hasn't changed since at least JDK 11.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vo7v:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-01-16 22:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7104
Date: 2022-01-17 06:25:59 +0000;;;","2022-01-19 20:17;roboduke;Changeset: 1022cbdf
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-01-20 04:16:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1022cbdf987af846e79b92dfa20b763db7563320
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Retry loop issues in java.io.ClassCache,JDK-8280041,5066305,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-01-14 10:59,2023-06-08 14:27,2023-10-01 09:56,2022-01-25 11:23,11,17,18,19,,,,,19,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,,,,,,,,,,,,,"JDK-8277072 introduced java.io.ClassCache, but there seem to be at least two issues with it:
 *) The cache cannot disambiguate between cleared SoftReference and the accidental passing of ""null"" value; in that case, the retry loop would spin indefinitely;
 *) If retry loop would spin several times, every time discovering a cleared SoftReference, it would create and register new SoftReference on the ReferenceQueue. However, it would not *drain* the RQ in the loop; in that case, we might have the unbounded garbage accumulating in RQ;

WIP: https://github.com/openjdk/jdk/pull/7092",,,,,,,,,,JDK-8284131,JDK-8283589,JDK-8283679,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277072,,,,,,,,,,,,JDK-8309688,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vo63:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7e74daa7,,,,,,,Verified,,"2022-01-14 11:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7092
Date: 2022-01-14 19:27:18 +0000;;;","2022-01-25 11:22;roboduke;Changeset: cebaad1c
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-25 19:22:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cebaad1c94c301304fd146526cac95bfeaac66bf
;;;","2022-03-14 03:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/46
Date: 2022-03-14 09:44:00 +0000;;;","2022-03-14 03:27;rkennke;Fix-request (jdk18u, jdk17u):
This backport fixes a number of issues with the preceding change for JDK-8277072.
The original change has baked for several weeks in jdk19 and applies cleanly.;;;","2022-03-14 03:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/244
Date: 2022-03-14 10:39:18 +0000;;;","2022-03-14 03:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/245
Date: 2022-03-14 10:46:25 +0000;;;","2022-03-14 03:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/887
Date: 2022-03-14 10:47:34 +0000;;;","2022-03-14 10:29;rkennke;Fix-request (jdk11u):
This backport fixes a number of issues with the preceding change for JDK-8277072.
The original change has baked for several weeks in jdk19. One of the tests required some changes because the API Reference.refersTo() does not exist in JDK 11.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deprecate GTK2 for removal,JDK-8280031,5066293,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,azvegint,prr,prr,2022-01-14 08:52,2023-05-22 09:09,2023-10-01 09:56,2023-05-05 13:20,21,,,,,,,,21,client-libs,,0,gtk,sn_143,,,,,,,,,,,,,,,,,,"OpenJFX has deprecated GTK2 for removal (see https://bugs.openjdk.java.net/browse/JDK-8273089)

For the AWT/Swing usage OL6 / RHEL 6 are still supported until at least June 2024 so it is too early to do that yet but it should be done in the next LTS which is JDK 21 in September 2023

Then remove GTK2 before the following LTS (JDK 25 in Sep 2025) but AFTER June 2024 .. which makes the removal release one of
JDK 23 : Sep 2024
JDK 24 : Mar 2025
JDK 25 : Sep 2025 

There should be a CSR and a release note.
Additionally when explicitly specifying jdk.gtk.version=2.2 a message should be printed warning of the deprecation.
Perhaps this should be printed only if jdk.gtk.verbose=true is also specified but we can mull that over later.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307481,,,,,,,,,,,,,,,,,,,,JDK-8273089,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vo3f:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-05-05 13:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13834
Date: 2023-05-05 15:21:14 +0000;;;","2023-05-05 13:20;dukebot;Changeset: 7d58978f
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-05-05 20:16:26 +0000
URL:       https://git.openjdk.org/jdk/commit/7d58978f62bf333f256115d6592706d70144ad15
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"G1: ""Overflow during reference processing, can not continue"" on x86_32",JDK-8280029,5066291,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-01-14 08:03,2023-08-28 09:47,2023-10-01 09:56,2022-01-18 06:41,11,17,18,19,8,,,,19,hotspot,,0,gc-g1,gc-g1-marking,redhat-interest,,,,,,,,,,,,,,,,,"x86_32 intermittently fails jdk/javadoc/doclet/testLinkPlatform/TestLinkPlatform.java. I finally managed to reproduce it on one local machine with:

$ CONF=linux-x86-server-fastdebug make run-test TEST=jdk/javadoc/doclet/testLinkPlatform/TestLinkPlatform.java TEST_VM_OPTS=""-XX:ActiveProcessorCount=2"" JTREG=""REPEAT_COUNT=100""

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/shade/shipilev-jdk/src/hotspot/share/gc/g1/g1ConcurrentMark.cpp:1649), pid=2198496, tid=2198505
#  fatal error: Overflow during reference processing, can not continue. Please increase MarkStackSizeMax (current value: 4194304) and restart.
#

Host: core11, 11th Gen Intel(R) Core(TM) i5-11500 @ 2.70GHz, 12 cores, 30G, Debian GNU/Linux 11 (bullseye)
Time: Fri Jan 14 14:47:04 2022 CET elapsed time: 9.418540 seconds (0d 0h 0m 9s)

---------------  T H R E A D  ---------------

Current thread (0xb4060778):  VMThread ""VM Thread"" [stack: 0xb4180000,0xb4200000] [id=2198505]

Stack: [0xb4180000,0xb4200000],  sp=0xb41fea64,  free space=506k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xb735f8]  G1ConcurrentMark::weak_refs_work()+0x788
V  [libjvm.so+0xb74185]  G1ConcurrentMark::remark()+0x135
V  [libjvm.so+0xc1af0d]  VM_G1PauseConcurrent::doit()+0x1fd
V  [libjvm.so+0x1799b20]  VM_Operation::evaluate()+0x160
V  [libjvm.so+0x17b87fd]  VMThread::evaluate_operation(VM_Operation*)+0x11d
V  [libjvm.so+0x17b9835]  VMThread::inner_execute(VM_Operation*)+0x415
V  [libjvm.so+0x17b9969]  VMThread::loop()+0xb9
V  [libjvm.so+0x17b9a8a]  VMThread::run()+0xba
V  [libjvm.so+0x16b7c0a]  Thread::call_run()+0xfa
V  [libjvm.so+0x12fcc0b]  thread_native_entry(Thread*)+0x11b
C  [libpthread.so.0+0x80b4]  start_thread+0xe4


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281647,,,,,,,,,,,,JDK-8280087,JDK-8204337,,,,,"2023-08-28 09:47;cslucas;g1gc.log;https://bugs.openjdk.org/secure/attachment/105271/g1gc.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vo2z:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-01-14 08:09;shade;Bumping to -XX:MarkStackSizeMax=512M (default for x86_64) does not help, which suggests it is not just ""running out of stack"". Something is really fishy here.;;;","2022-01-14 14:27;shade;It is quite hard to believe, but bisect shows it started with:

commit 09831e7aa47ebe41eab2f3014ebbacf338097ef6
Author: Joe Darcy <darcy@openjdk.org>
Date:   Thu Dec 9 17:01:59 2021 +0000

    8273146: Start of release updates for JDK 19
    8277511: Add SourceVersion.RELEASE_19
    8277513: Add source 19 and target 19 to javac
    
    Reviewed-by: dholmes, alanb, erikj, iris, mikael, ihse;;;","2022-01-17 02:47;shade;G1 log that precedes the crash is:

[8.508s][info][gc] GC(17) Pause Young (Normal) (G1 Evacuation Pause) 219M->144M(306M) 86.416ms
[8.760s][info][gc] GC(18) Pause Young (Concurrent Start) (G1 Humongous Allocation) 187M->141M(306M) 63.117ms
[8.760s][info][gc] GC(19) Concurrent Undo Cycle
[8.762s][info][gc] GC(19) Concurrent Undo Cycle 2.116ms
[8.846s][info][gc] GC(20) Pause Young (Concurrent Start) (G1 Humongous Allocation) 157M->136M(306M) 19.597ms
[8.846s][info][gc] GC(21) Concurrent Undo Cycle
[8.847s][info][gc] GC(21) Concurrent Undo Cycle 0.767ms
[9.016s][info][gc] GC(22) Pause Young (Concurrent Start) (G1 Humongous Allocation) 169M->145M(306M) 34.107ms
[9.016s][info][gc] GC(23) Concurrent Mark Cycle
<crash>;;;","2022-01-17 02:56;shade;At the time of crash, mark stack is full of ZipFileSystem$IndexNode instances:

[9.001s][info][gc] GC(20) Pause Young (Concurrent Start) (G1 Humongous Allocation) 209M->152M(306M) 58.205ms
[9.001s][info][gc] GC(21) Concurrent Mark Cycle
[9.125s][info][gc] GC(21) Object: 0xb762f180, jdk.nio.zipfs.ZipFileSystem$IndexNode
[9.125s][info][gc] GC(21) Object: 0xb762f120, jdk.nio.zipfs.ZipFileSystem$IndexNode
...
[9.210s][info][gc] GC(21) Object: 0xba276480, jdk.nio.zipfs.ZipFileSystem$IndexNode
[9.210s][info][gc] GC(21) Object: 0xba276378, jdk.nio.zipfs.ZipFileSystem$IndexNode
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/g1ConcurrentMark.cpp:1681
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/shade/shipilev-jdk/src/hotspot/share/gc/g1/g1ConcurrentMark.cpp:1681), pid=3946432, tid=3946442
#  fatal error: Overflow during reference processing, can not continue. Please increase MarkStackSizeMax (current value: 4194304) and restart. Mark stack size: 32736;;;","2022-01-17 03:07;shade;Wait, so the failure happens when actual mark stack size is 32736, while MarkStackSizeMax is configured at 4194304. That implies the mark stack is not growing up to ""max"", and we run out of 32K of stack? My previous experiment with -XX:MarkStackSizeMax=512M would not solve it. But now I tried with -XX:MarkStackSize=4M (not ""Max""), and the test passes! That's a big clue.;;;","2022-01-17 03:47;shade;Bumping to -XX:MarkStackSize=64K (from 32K) reliably avoids this bug. I believe this is a bona-fide problem in G1: queue overflow happens during Remark Pause, when it is too late to resize the queues and restart the concurrent mark. The error message is a bit misleading, should also say about the default (MarkStackSize) as the option to try.

[8.961s][info ][gc      ] GC(27) Concurrent Mark Cycle
[9.038s][info ][gc,start] GC(27) Pause Remark
; now in G1CMMarkStack::par_push_chunk, that would do set_overflow(true) next
[9.082s][debug][gc      ] GC(27) Cannot allocate, _hwm >= _chunk_capacity; _hwm = 32, _chunk_capacity = 32 ; 
[9.082s][debug][gc      ] GC(27) Cannot allocate, capacity = 32, max = 4096;;;","2022-01-17 04:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7109
Date: 2022-01-17 12:24:05 +0000;;;","2022-01-18 06:41;roboduke;Changeset: 1725f77b
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-18 14:40:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1725f77bcd6528d56960a0796fcea3725cc98b6a
;;;","2023-08-28 09:47;cslucas;I'm seeing this same failure on Linux x86_32 when building a modified branch from tip. I attached a sample log file.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Underline and line-through not straight in WebView,JDK-8280020,5066282,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbhaskar,shadzic,shadzic,2022-01-14 05:57,2022-05-02 04:45,2023-10-01 09:56,2022-03-07 07:28,jfx17,jfx19,,,,,,,jfx19,javafx,,0,sn_113,,,,,,,,,,,,,,,,,,,"When a text is underlined or striked in a WebView (or HTMLEditor), the line is not straight and is slightly falling down.

Step to reproduce:
Run this code:
""import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;
import javafx.stage.Stage;

public class LoadHtml extends Application {

    public void start(Stage primaryStage) throws Exception {
        primaryStage.setTitle(System.getProperty(""java.runtime.version""));

        WebView browser = new WebView();
        WebEngine engine = browser.getEngine();

        engine.loadContent(""<div style=\""font-size:36pt; font-family:Arial; text-decoration: underline; \"">aaaaaaa aaaaaaaaaaaaaaaa</div>\n""
                + ""<div style=\""font-size:36pt; font-family:Arial; text-decoration: line-through;\"">aaaaaaa aaaaaaaaaaaaaaa</div>"");

        StackPane sp = new StackPane();
        sp.getChildren().add(browser);

        Scene scene = new Scene(sp);

        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}""

Actual result:
See the capture where the line is slightly falling down.

Expected result:
The line should be straight.",,,,,,,,,,JDK-8283052,JDK-8285993,JDK-8285857,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284184,,,,,,"2022-01-14 05:55;shadzic;JDK17.png;https://bugs.openjdk.org/secure/attachment/97605/JDK17.png","2022-02-01 21:19;jbhaskar;issue.png;https://bugs.openjdk.org/secure/attachment/97805/issue.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,"0|i2vo0z:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-01-24 08:48;shadzic;I would be interested on an early explanation or a work-around if it exists. The rendering is kinda odd sometimes;;;","2022-02-01 21:18;jbhaskar;The issue is reproducible on main line as well as latest sandbox jfxwebkit.  The test example is more clear if we use letter c instead of a

 engine.loadContent(""<div style=\""font-size:36pt; font-family:Arial; text-decoration: underline; \"">cccccc cccccccccc</div>\n""
                + ""<div style=\""font-size:36pt; font-family:Arial; text-decoration: line-through;\"">aaaaaaa aaaaaaaaaaaaaaa</div>"");

Further analysis is in progress.;;;","2022-02-10 03:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/731
Date: 2022-02-10 11:36:38 +0000;;;","2022-03-07 07:27;dukebot;Changeset: 263db3df
Author:    Jay Bhaskar <jbhaskar@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-03-07 15:24:36 +0000
URL:       https://git.openjdk.java.net/jfx/commit/263db3df5fdf9e0f6955be6ae58173aa589e55fe
;;;","2022-04-28 10:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/90
Date: 2022-04-28 17:50:08 +0000;;;","2022-04-29 10:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/47
Date: 2022-04-29 17:10:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove unused code from metaspace,JDK-8280019,5066281,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-01-14 05:56,2022-01-25 00:05,2023-10-01 09:56,2022-01-14 08:18,18,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,Metaspace contains code which is unused and can be deleted (mainly local variable definitions).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vo0r:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-14 06:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7085
Date: 2022-01-14 14:02:25 +0000;;;","2022-01-14 08:18;roboduke;Changeset: d9dd485b
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-01-14 16:17:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d9dd485b95e1796822c0dcfaed8a28328b0a976a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gc/g1/TestShrinkAuxiliaryData30 test fails on large machines,JDK-8280016,5066276,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-01-14 05:17,2022-11-22 02:06,2023-10-01 09:56,2022-01-17 00:19,11,17,18,19,8,,,,19,hotspot,,0,gc-g1,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,testbug,,,,,,,,,,,,,,,"It is the bug in original implementation of JDK-8043766.

The test tries to run with -XX:G1ConcRSLogCacheSize=30, while the max acceptable value is 27:

  product(size_t, G1ConcRSLogCacheSize, 10,                                 \
          ""Log base 2 of the length of conc RS hot-card cache."")            \
          range(0, 27)                                                      \

It only happens on large machines, because smaller machines get the test skipped with:

        int maxCacheSize = Math.max(0, Math.min(31, getMaxCacheSize()));
        if (maxCacheSize < hotCardTableSize) {
            throw new SkippedException(String.format(
                    ""Skiping test for %d cache size due max cache size %d"",
                    hotCardTableSize, maxCacheSize));
        }

getMaxCacheSize() is derived from the Runtime.getRuntime().freeMemory():

    private static int getMaxCacheSize() {
        long availableMemory = Runtime.getRuntime().freeMemory()
                - ShrinkAuxiliaryDataTest.getMemoryUsedByTest() - 1l;
        if (availableMemory <= 0) {
            return 0;
        }

        long availablePointersCount = availableMemory / Unsafe.ADDRESS_SIZE;
        return (63 - (int) Long.numberOfLeadingZeros(availablePointersCount));
    }

So, on smaller machines, for example, my 128G desktop:

jtreg.SkippedException: Skiping test for 30 cache size due max cache size 26
	at gc.g1.TestShrinkAuxiliaryData.test(TestShrinkAuxiliaryData.java:77)

On my 1T server, this test is not skipped and reliably fails like:

 stdout: [];
 stderr: [size_t G1ConcRSLogCacheSize=30 is outside the allowed range [ 0 ... 27 ]
Improperly specified VM option 'G1ConcRSLogCacheSize=30'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
]
 exitValue = 1",,,,,,,,,,JDK-8297399,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8043766,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vnzn:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-01-14 05:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7082
Date: 2022-01-14 13:24:58 +0000;;;","2022-01-17 00:19;roboduke;Changeset: 590eb860
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-17 08:17:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/590eb86033d5445018cd0e961e8721a20de4bb0c
;;;","2022-11-21 04:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/908
Date: 2022-11-21 12:39:00 +0000;;;","2022-11-21 04:48;shade;Fix Request (17u)

Fixes a test bug. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Compiler interface uses wrong class loader when looking up field type,JDK-8280006,5066265,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2022-01-14 02:51,2022-01-19 23:34,2023-10-01 09:56,2022-01-19 23:34,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,,,"Leads to C2 compilation bailout with message ""COMPILE SKIPPED: Can't determine return type. (retry at different tier)""

See details in the PR.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vnx7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-19 00:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/606
Date: 2022-01-19 08:24:22 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DCmdArgument<jlong>::parse_value() should handle NULL input,JDK-8280004,5066263,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-01-14 02:28,2023-09-29 02:59,2023-10-01 09:56,2022-01-28 00:10,11,17,18,19,8,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"Sonarcloud told me that in `DCmdArgument<jlong>::parse_value()`, we explicitly handle NULL input strings for the parse value, then print it out as part of the assembled exception message.

I don't think this can ever happen IRL, it is theoretical only. But we should fix it nevertheless. It also can be simplified, I don't think the temporary string copy is needed.",,,,,,,,,,JDK-8284171,JDK-8317303,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vnwr:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2022-01-14 04:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7079
Date: 2022-01-14 10:40:58 +0000;;;","2022-01-28 00:10;roboduke;Changeset: 55f180fb
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-01-28 08:10:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/55f180fb7dfecc859e59c7852d48aeab6c936a5d
;;;","2022-03-31 21:45;stuefe;Fix Request 17u:

I'd like to backport this to jdk17. Applies cleanly, very low risk, well tested. Prevents an unlikely crash when parsing jcmd arguments.;;;","2022-03-31 22:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/325
Date: 2022-04-01 04:41:27 +0000;;;","2023-09-28 02:06;goetz;Fix request [11u]

A fix for diagnostics. Low risk as code only executed if dcmd is used.
Clean backport.
SAP nighlty testing passed.;;;","2023-09-28 02:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2153
Date: 2023-09-28 09:06:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C1: Reconsider uses of logical_and immediates in LIRGenerator::do_getObjectSize,JDK-8280003,5066262,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-01-14 02:25,2023-05-17 12:43,2023-10-01 09:56,2022-05-04 08:43,17,18,19,,,,,,19,hotspot,,0,amazon-interest,c1,oracle-triage-11,oracle-triage-19,,,,,,,,,,,,,,,,"JDK-8253525 added uses of `logical_and` with long/int constants without protecting them with `load_immediate`. This was proven to be a problem at least on ARM32, see JDK-8279301. We should reconsider how `logical_and` is used in that new code.

Draft PR: https://github.com/openjdk/jdk/pull/7080",,,,,,,,,,,,,,,,,,,,,,,,JDK-8280166,,,,,,,,,JDK-8279301,,,JDK-8253525,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vnwj:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-14 02:47;chagedorn;ILW = Same as JDK-8279301 but never observed so far = P3;;;","2022-01-14 05:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7080
Date: 2022-01-14 11:05:45 +0000;;;","2022-04-25 03:35;thartmann;[~shade] Looks like this is good to go in?;;;","2022-05-04 08:43;dukebot;Changeset: 7b7207a4
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-05-04 15:39:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7b7207a45a2838823b42c9c7cb0a45a97996018a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jmap -histo may leak stream,JDK-8280002,5066261,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-01-14 01:31,2022-12-12 14:57,2023-10-01 09:56,2022-01-14 11:40,16,17,18,19,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,sap-interest,,,,,,,,,,,,,,,,,"JDK-8215624 added parallel heap iteration to both `jmap -histo` and `jcmd GC.class_histogram`. When called with an explicit file and an invalid argument for number of threads, it leaks the file (bit of memory and a handle).

Example:

jmap -histo:parallel=notanumber,file=xx.txt

Can only be reproduced with jmap. jcmd is safe, since `GC.class_histogram` handles argument for the `-parallel` option in shared code, and there it is done correclty.
",,,,,,,,,,JDK-8280111,JDK-8298608,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8215624,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vnwb:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2022-01-14 02:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7078
Date: 2022-01-14 10:04:53 +0000;;;","2022-01-14 11:40;roboduke;Changeset: c359c358
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-01-14 19:40:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c359c358c8ebaf7b1dddbc4b499a7aae65ba6736
;;;","2022-01-17 00:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/99
Date: 2022-01-17 08:25:29 +0000;;;","2022-01-17 00:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/768
Date: 2022-01-17 08:25:48 +0000;;;","2022-01-17 01:29;stuefe;Note: not an issue for 11 even though JDK-8215624 had been downported to 11u.;;;","2022-01-17 02:29;stuefe;Fix Request (jdk17): Important to fix to prevent the leak. Fix applies cleanly. Fix is very simple and carries low risk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"PPC64 debug builds fail with ""untested: RangeCheckStub: predicate_failed_trap_id""",JDK-8279998,5066255,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-01-13 23:08,2022-01-25 14:19,2023-10-01 09:56,2022-01-17 00:21,11,17,18,19,,,,,18,hotspot,,0,c1,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-build,oracle-triage-19,,,,,,,,,,,,,"# CONF=linux-ppc64le-server-fastdebug make bootcycle-images

[bootcycle] Compiling 71 files for COMPILE_CREATE_SYMBOLS
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (0xe0000000), pid=1229216, tid=1229219
#  untested: RangeCheckStub: predicate_failed_trap_id
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal+0-adhoc.root.shipilev-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal+0-adhoc.root.shipilev-jdk, mixed mode, emulated-client, tiered, compressed oops, compressed class ptrs, serial gc, linux-ppc64le)
# Problematic frame:
# J 387 c1 build.tools.generatebreakiteratordata.CharSet.doIntersection([I)[I (344 bytes) @ 0x00007fff8100c054 [0x00007fff8100b800+0x0000000000000854]
#

Stack: [0x00007fff7ea70000,0x00007fff7ec70000],  sp=0x00007fff7ec6d840,  free space=2038k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
J 423% c1 build.tools.generatebreakiteratordata.CharSet.doIntersection([I)[I (344 bytes) @ 0x00007fff6d9a6814 [0x00007fff6d9a5d80+0x0000000000000a94]
j  build.tools.generatebreakiteratordata.CharSet.difference(Lbuild/tools/generatebreakiteratordata/CharSet;)Lbuild/tools/generatebreakiteratordata/CharSet;+9
j  build.tools.generatebreakiteratordata.RuleBasedBreakIteratorBuilder.buildCharCategories(Ljava/util/Vector;)V+562
j  build.tools.generatebreakiteratordata.DictionaryBasedBreakIteratorBuilder.buildCharCategories(Ljava/util/Vector;)V+2
j  build.tools.generatebreakiteratordata.RuleBasedBreakIteratorBuilder.<init>(Ljava/lang/String;)V+97
j  build.tools.generatebreakiteratordata.DictionaryBasedBreakIteratorBuilder.<init>(Ljava/lang/String;)V+2
j  build.tools.generatebreakiteratordata.GenerateBreakIteratorData.generateDataFile(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V+35
j  build.tools.generatebreakiteratordata.GenerateBreakIteratorData.generateFiles()V+114
j  build.tools.generatebreakiteratordata.GenerateBreakIteratorData.main([Ljava/lang/String;)V+10
v  ~StubRoutines::call_stub
V  [libjvm.so+0xfdbe10]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x690
V  [libjvm.so+0x171087c]  os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*), JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x3c
V  [libjvm.so+0xfd9f00]  JavaCalls::call(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x40
V  [libjvm.so+0x117d370]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .constprop.1]+0x600
V  [libjvm.so+0x1180e24]  jni_CallStaticVoidMethod+0x194
C  [libjli.so+0x70cc]  JavaMain+0x10fc
C  [libjli.so+0xbb98]  ThreadJavaMain+0x18
C  [libc.so.6+0xb6d54]  start_thread+0x174

Reproduces in mainline JDK and 17u. Something might have changed in the Java code that we are starting to hit this path, but the issue just looks generic. This code seems to be that way since the original commit in JDK-8144019:

  if (_info->deoptimize_on_exception()) {
    address a = Runtime1::entry_for(Runtime1::predicate_failed_trap_id);
    // May be used by optimizations like LoopInvariantCodeMotion or RangeCheckEliminator.
    DEBUG_ONLY( __ untested(""RangeCheckStub: predicate_failed_trap_id""); )   // <---- fails here
    //__ load_const_optimized(R0, a);
    __ add_const_optimized(R0, R29_TOC, MacroAssembler::offset_to_global_toc(a));
    __ mtctr(R0);
    __ bctrl();
    ce->add_call_info_here(_info);
    ce->verify_oop_map(_info);
    debug_only(__ illtrap());
    return;
  }
",,,,,,,,,,JDK-8280138,JDK-8280315,JDK-8280137,JDK-8280650,,,,,,,,,,,,,,,,,,,,,,,JDK-8144019,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,"0|i2vnuz:",9223372036854775807,b32,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-13 23:15;shade;Goetz, do you think we should just remove these two lines then?
    // May be used by optimizations like LoopInvariantCodeMotion or RangeCheckEliminator.
    DEBUG_ONLY( __ untested(""RangeCheckStub: predicate_failed_trap_id""); )
;;;","2022-01-14 01:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7077
Date: 2022-01-14 09:45:43 +0000;;;","2022-01-14 02:51;chagedorn;ILW = Harmless untested assertion could be removed, only on PPC when building bootcycle-images, no workaround = MMH = P3;;;","2022-01-14 04:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/101
Date: 2022-01-14 12:14:06 +0000;;;","2022-01-17 00:21;roboduke;Changeset: 4d9b3f4c
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-17 08:20:23 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/4d9b3f4ceef4b514ec943e1a5dd1147618376ad8
;;;","2022-01-17 00:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/100
Date: 2022-01-17 08:37:35 +0000;;;","2022-01-17 01:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/769
Date: 2022-01-17 08:41:26 +0000;;;","2022-01-17 01:52;shade;Fix Request (11u, 17u)

Fixes the fast/slow bootcycle build failure on PPC64. Patch is removing the over-zealous assert. Build is fixed for 17u. 11u is not affected yet, but might be affected in future.;;;","2022-01-17 17:58;roboduke;Changeset: 4d9b3f4c
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-17 08:20:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4d9b3f4ceef4b514ec943e1a5dd1147618376ad8
;;;","2022-01-25 04:30;roboduke;Changeset: 4d9b3f4c
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-17 08:20:23 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/4d9b3f4ceef4b514ec943e1a5dd1147618376ad8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
check_for_dynamic_dump should not exit vm ,JDK-8279997,5066253,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,minqi,iklam,iklam,2022-01-13 22:18,2022-02-16 16:21,2023-10-01 09:56,2022-02-11 08:43,19,,,,,,,,19,hotspot,,0,cds,dynamic-cds,regression,,,,,,,,,,,,,,,,,"Before JDK-8261455:

$ rm -f base.jsa
$ java -XX:SharedArchiveFile=base.jsa -XX:ArchiveClassesAtExit=top.jsa -version
Error occurred during initialization of VM
-XX:ArchiveClassesAtExit is unsupported when base CDS archive is not loaded. Run with -Xlog:cds for more info.

$ java -Xshare:dump -XX:SharedArchiveFile=base.jsa
$ java -XX:+UseZGC -XX:SharedArchiveFile=base.jsa -XX:ArchiveClassesAtExit=top.jsa -version
Error occurred during initialization of VM
-XX:ArchiveClassesAtExit is unsupported when base CDS archive is not loaded. Run with -Xlog:cds for more info.

===========================================
After JDK-8261455, the behavior becomes inconsistent:

$ rm -f base.jsa
$ java -XX:SharedArchiveFile=base.jsa -XX:ArchiveClassesAtExit=top.jsa -version
Error occurred during initialization of VM
-XX:ArchiveClassesAtExit is unsupported when base CDS archive is not loaded. Run with -Xlog:cds for more info.

$ java -Xshare:dump -XX:SharedArchiveFile=base.jsa
$ java -XX:+UseZGC -XX:SharedArchiveFile=base.jsa -XX:ArchiveClassesAtExit=top.jsa -version
java version ""19-internal"" 2022-09-20
Java(TM) SE Runtime Environment (build 19-internal+0-adhoc.iklam.open)
Java HotSpot(TM) 64-Bit Server VM (build 19-internal+0-adhoc.iklam.open, mixed mode)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261455,,,,,,,,,,,,JDK-8280353,JDK-8281678,JDK-8281715,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vnuj:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-18 11:21;mseledtsov;ILW = MMM = P3;;;","2022-02-07 14:29;minqi;This behavior is same a 8280353. -Xshare:auto is the default in command line unless user specify -Xshare:on to force to load CDS. With auto mode, if mapping shared archive failed --- the program should go without sharing.
The case not limited to UseZGC. if CDS failed to load under 'auto' mode, we should print out warning and let the program continue without sharing.;;;","2022-02-07 22:49;iklam;If the base archive cannot be mapped with -Xshare:auto, the current policy of the CDS warning message is:

- By default, we continue execution without print any warnings. Otherwise, the user will see a lot of warnings when running with JVM flags that are incompatible with the two default CDS archives, or with the CDS archive specified via -XX:SharedArchiveFile. If the user really wants to know what's happening, they can specify -Xlog:cds.

- However, if -XX:AutoCreateSharedArchive or -XX:ArchiveClassesAtExit are specified, we print a warning, so that it's clear to the user that the requested archive cannot be created.
;;;","2022-02-09 10:16;minqi;With whatever the reason base archive failed:
      if (archives == 1) {
        char* base_archive_path = NULL;
        bool success =
          FileMapInfo::get_base_archive_name_from_header(SharedArchiveFile, &base_archive_path);
        if (!success) {
          // If +AutoCreateSharedArchive and the specified shared archive does not exist,
          // regenerate the dynamic archive base on default archive.
          if (AutoCreateSharedArchive && !os::file_exists(SharedArchiveFile)) {
            DynamicDumpSharedSpaces = true;
            ArchiveClassesAtExit = const_cast<char *>(SharedArchiveFile);
            SharedArchivePath = get_default_shared_archive_path();
            SharedArchiveFile = nullptr;
          } else {
            no_shared_spaces(“invalid archive”);    <------ not success we reached here.
          }
Since it is !RequireSharedSpaces, UseSharedSpaces set to false there and continue. But this caused check_for_dynamic_dump exit. We should not exit if neither -XX:AutoCreateSharedArchive nor -XX:ArchiveClassesAtExit is specified.
 ;;;","2022-02-10 12:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7433
Date: 2022-02-10 20:40:31 +0000;;;","2022-02-11 08:43;roboduke;Changeset: e75e8cd7
Author:    Yumin Qi <minqi@openjdk.org>
Date:      2022-02-11 16:42:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e75e8cd708ed478eda08c4a5c724e7e82f57d36e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"(fs) Awkward verbiage in description of Files.createTempFile(Path,String,String,FileAttribute)",JDK-8279990,5066246,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-01-13 13:35,2022-01-25 09:23,2023-10-01 09:56,2022-01-14 09:48,18,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"The third paragraph of the documentation of java.nio.file.Files.createTempFile(Path,String,String,FileAttribute) is:

""As with the File.createTempFile methods, this method is only part of a temporary-file facility. Where used as a work files, the resulting file may be opened using the DELETE_ON_CLOSE option so that the file is deleted when the appropriate close method is invoked. Alternatively, a shutdown-hook, or the File.deleteOnExit() mechanism may be used to delete the file automatically. ""

The first and second sentences are awkward and should be rephrased. In particular, the statement about ""temporary-file facility"" seems redundant, and ""as a works file"" incorrect.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280366,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vnsz:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-01-13 14:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7071
Date: 2022-01-13 21:55:43 +0000;;;","2022-01-14 09:48;roboduke;Changeset: fb8fdc0f
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-01-14 17:47:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fb8fdc0fbf17dd7e900cb688df4917b97b26b9ab
;;;","2022-01-15 08:25;alanb;This JBS issue has removed sentences that were correct. We may need a follow-up issue to restore the original text, maybe with some re-phasing if it needs to be clearer.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
two AppCDS tests fail after JDK-8261455,JDK-8279970,5066222,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,minqi,dcubed,dcubed,2022-01-13 06:26,2022-06-15 12:36,2023-10-01 09:56,2022-01-18 19:22,19,,,,,,,,19,hotspot,,0,cds,problemlist,regression,tier5,,,,,,,,,,,,,,,,"The following two tests failed in the JDK19 CI:

runtime/cds/appcds/dynamicArchive/TestAutoCreateSharedArchive.java
runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java#custom-cl-zgc

Here's a snippet from the linux-x64 TestAutoCreateSharedArchive.java
log file:

java.lang.RuntimeException: 'AutoCreateSharedArchive is ignored because runtime.cds.appcds.dynamicArchive.TestAutoCreateSharedArchive.java-base.jsa is a static archive' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at TestAutoCreateSharedArchive.lambda$testAutoCreateSharedArchive$4(TestAutoCreateSharedArchive.java:247)
	at jdk.test.lib.cds.CDSTestUtils$Result.assertNormalExit(CDSTestUtils.java:149)
	at TestAutoCreateSharedArchive.testAutoCreateSharedArchive(TestAutoCreateSharedArchive.java:244)
	at DynamicArchiveTestBase.runTest(DynamicArchiveTestBase.java:75)
	at TestAutoCreateSharedArchive.main(TestAutoCreateSharedArchive.java:130)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 'AutoCreateSharedArchive is ignored because runtime.cds.appcds.dynamicArchive.TestAutoCreateSharedArchive.java-base.jsa is a static archive' missing from stdout/stderr 


Here's a snippet from the linux-x64
DynamicLoaderConstraintsTest.java#custom-cl-zgc log file:

----------System.err:(33/2406)----------
java version ""19-ea"" 2022-09-20
Java(TM) SE Runtime Environment (fastdebug build 19-ea+6-214)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 19-ea+6-214, mixed mode)
 stdout: [[0.123s][info][cds] trying to map /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13752/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/766f2d41-6c57-458f-83a4-a0fcbe3df250/runs/1b117e24-74fa-419d-a973-f824b3a332ab/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/2/tempBaseArchive-11h06m15s512.jsa
[0.123s][info][cds] Opened archive /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13752/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/766f2d41-6c57-458f-83a4-a0fcbe3df250/runs/1b117e24-74fa-419d-a973-f824b3a332ab/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/2/tempBaseArchive-11h06m15s512.jsa.
[0.123s][info][cds] Archive was created with UseCompressedOops = 1, UseCompressedClassPointers = 1
Error occurred during initialization of VM
Unable to use shared archive.
];
 stderr: [An error has occurred while processing the shared archive file.
Unable to use shared archive.
The saved state of UseCompressedOops and UseCompressedClassPointers is different from runtime, CDS will be disabled.
]
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0]

	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:489)
	at jdk.test.lib.cds.CDSTestUtils$Result.assertNormalExit(CDSTestUtils.java:198)
	at DynamicLoaderConstraintsTest.doTest(DynamicLoaderConstraintsTest.java:167)
	at DynamicLoaderConstraintsTest.doTest(DynamicLoaderConstraintsTest.java:116)
	at DynamicArchiveTestBase.runTest(DynamicArchiveTestBase.java:75)
	at DynamicLoaderConstraintsTest.main(DynamicLoaderConstraintsTest.java:108)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Expected to get exit value of [0]

Since this looks like a regression introduced by:

JDK-8261455 Automatically generate the CDS archive if necessary

I'm starting this bug at P2.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261455,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vnnn:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-01-13 10:31;iklam;The failures seem to happen when -vmoptions:'-Xshare:off' is passed to jtreg when running these tests.;;;","2022-01-13 13:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7070
Date: 2022-01-13 21:14:05 +0000;;;","2022-01-18 19:22;roboduke;Changeset: b0496b0d
Author:    Yumin Qi <minqi@openjdk.org>
Date:      2022-01-19 03:21:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b0496b0df60cf19a0666f1f1c382f7bcd01e15bb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NULL return from map_bitmap_region() needs to be checked,JDK-8279969,5066221,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,dcubed,dcubed,2022-01-13 06:09,2022-02-23 17:48,2023-10-01 09:56,2022-02-16 22:42,19,,,,,,,,19,hotspot,,0,cds,intermittent,tier4,,,,,,,,,,,,,,,,,"The following test timed out in the JDK19 CI, in a task that specifies the jtreg option  ""-vmoptions:-Dtest.cds.runtime.options=-XX:+UseSerialGC""

runtime/cds/appcds/SharedArchiveConsistency.java

Here's a snippet from the log file:

8. modify _base_archive_name_offset to non-zero

    baseArchiveNameOffset = 0
new baseArchiveNameOffset = 1024
Command line: [/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+5-210/macosx-x64-debug.jdk/jdk-19/fastdebug/bin/java -cp /System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S60189/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/544c9c19-d1f2-4fc9-b1f8-4c637c7f7dc3/runs/9de2271c-aede-4fca-bc4d-00a1a67ef442/testoutput/test-support/jtreg_open_test_hotspot_jtreg_runtime_cds/classes/1/runtime/cds/appcds/SharedArchiveConsistency.d:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+5-210/src.full/open/test/hotspot/jtreg/runtime/cds/appcds:/System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S60189/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/544c9c19-d1f2-4fc9-b1f8-4c637c7f7dc3/runs/9de2271c-aede-4fca-bc4d-00a1a67ef442/testoutput/test-support/jtreg_open_test_hotspot_jtreg_runtime_cds/classes/1/test/lib:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+5-210/src.full/open/test/lib:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar -XX:MaxRAMPercentage=12.5 -Djava.io.tmpdir=/System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S60189/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/544c9c19-d1f2-4fc9-b1f8-4c637c7f7dc3/runs/9de2271c-aede-4fca-bc4d-00a1a67ef442/testoutput/test-support/jtreg_open_test_hotspot_jtreg_runtime_cds/tmp -Dtest.cds.runtime.options=-XX:+UseSerialGC -XX:+UseSerialGC -Xshare:auto -showversion -XX:SharedArchiveFile=/System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S60189/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/544c9c19-d1f2-4fc9-b1f8-4c637c7f7dc3/runs/9de2271c-aede-4fca-bc4d-00a1a67ef442/testoutput/test-support/jtreg_open_test_hotspot_jtreg_runtime_cds/scratch/1/17-base-arhive-path-offset-01h10m29s690.jsa -Dtest.timeout.factor=4.0 -XX:+UnlockDiagnosticVMOptions -XX:VerifyArchivedFields=1 -Xlog:cds -XX:+VerifySharedSpaces -cp /System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S60189/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/544c9c19-d1f2-4fc9-b1f8-4c637c7f7dc3/runs/9de2271c-aede-4fca-bc4d-00a1a67ef442/testoutput/test-support/jtreg_open_test_hotspot_jtreg_runtime_cds/scratch/1/hello.jar Hello ]
[2022-01-13T01:10:30.422900Z] Gathering output for process 6968
[ELAPSED: 3524 ms]
[logging stdout to /System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S60189/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/544c9c19-d1f2-4fc9-b1f8-4c637c7f7dc3/runs/9de2271c-aede-4fca-bc4d-00a1a67ef442/testoutput/test-support/jtreg_open_test_hotspot_jtreg_runtime_cds/scratch/1/runtime.cds.appcds.SharedArchiveConsistency.java-0016-exec.stdout]
[logging stderr to /System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S60189/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/544c9c19-d1f2-4fc9-b1f8-4c637c7f7dc3/runs/9de2271c-aede-4fca-bc4d-00a1a67ef442/testoutput/test-support/jtreg_open_test_hotspot_jtreg_runtime_cds/scratch/1/runtime.cds.appcds.SharedArchiveConsistency.java-0016-exec.stderr]
[STDERR]
java version ""19-ea"" 2022-09-20
Java(TM) SE Runtime Environment (fastdebug build 19-ea+5-210)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 19-ea+5-210, mixed mode)

Note: this test may fail in very rare occasions due to CRC32 checksum collision
----------System.err:(1/15)----------
STATUS:Passed.
----------rerun:(36/7260)*----------

The test passed while the timeout handler was running.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vnnf:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-13 06:16;dcubed;According to the hs_err_pid:

# Core dump will be written. Default location: core.6896

If the test does not need the core file, then I recommend running the test with
the ""-XX:-CreateCoredumpOnCrash"" option. That will also make the test run
faster.;;;","2022-01-13 12:20;iklam;The crash happens here:

bool HeapShared::load_regions(FileMapInfo* mapinfo, LoadedArchiveHeapRegion* loaded_regions,
                              int num_loaded_regions, uintptr_t buffer) {
  uintptr_t bitmap_base = (uintptr_t)mapinfo->map_bitmap_region();

map_bitmap_region() can return NULL because of CRC error (you can see that in the stdout log), but we use bitmap_base without doing the NULL check.

The fix is to add the missing NULL check.

Also, the test case should report an error if the VM crashes. Otherwise we wouldn't find these bugs unless we get a timeout ....

V  [libjvm.dylib+0x8acfde]  BitMap::iterate(BitMapClosure*)+0x3e
V  [libjvm.dylib+0x8ad793]  HeapShared::load_regions(FileMapInfo*, LoadedArchiveHeapRegion*, int, unsigned long)+0xf3
V  [libjvm.dylib+0x8adb95]  HeapShared::load_heap_regions(FileMapInfo*)+0x175
V  [libjvm.dylib+0x72116a]  FileMapInfo::map_or_load_heap_regions()+0x5a
V  [libjvm.dylib+0xde7dcb]  MetaspaceShared::map_archives(FileMapInfo*, FileMapInfo*, bool)+0x50b
V  [libjvm.dylib+0xde7525]  MetaspaceShared::initialize_runtime_shared_and_meta_spaces()+0x125
V  [libjvm.dylib+0xddde12]  Metaspace::global_initialize()+0xb2
V  [libjvm.dylib+0x1112a7a]  universe_init()+0x15a
V  [libjvm.dylib+0x8da1d3]  init_globals()+0x33
V  [libjvm.dylib+0x10d777e]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x41e
V  [libjvm.dylib+0x9ed2cb]  JNI_CreateJavaVM+0x8b
C  [libjli.dylib+0x4462]  JavaMain+0x122
C  [libjli.dylib+0x73e9]  ThreadJavaMain+0x9
C  [libsystem_pthread.dylib+0x6109]  _pthread_start+0x94
C  [libsystem_pthread.dylib+0x1b8b]  thread_start+0xf



=============================
test-support/jtreg_open_test_hotspot_jtreg_runtime_cds/runtime/cds/appcds/SharedArchiveConsistency/runtime.cds.appcds.SharedArchiveConsistency.java-0009-exec.stdout:

[0.004s][info][cds] Opening shared archive: /System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S60189/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/544c9c19-d1f2-4fc9-b1f8-4c637c7f7dc3/runs/9de2271c-aede-4fca-bc4d-00a1a67ef442/testoutput/test-support/jtreg_open_test_hotspot_jtreg_runtime_cds/scratch/1/08-bm-01h01m48s796.jsa
[0.186s][info][cds] trying to map /System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S60189/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/544c9c19-d1f2-4fc9-b1f8-4c637c7f7dc3/runs/9de2271c-aede-4fca-bc4d-00a1a67ef442/testoutput/test-support/jtreg_open_test_hotspot_jtreg_runtime_cds/scratch/1/08-bm-01h01m48s796.jsa
[0.186s][info][cds] Opened archive /System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S60189/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/544c9c19-d1f2-4fc9-b1f8-4c637c7f7dc3/runs/9de2271c-aede-4fca-bc4d-00a1a67ef442/testoutput/test-support/jtreg_open_test_hotspot_jtreg_runtime_cds/scratch/1/08-bm-01h01m48s796.jsa.
[0.186s][info][cds] Archive was created with UseCompressedOops = 1, UseCompressedClassPointers = 1
[0.186s][info][cds] Core region alignment: 16384
[0.186s][info][cds] Reserved archive_space_rs [0x0000000800000000 - 0x0000000800c00000] (12582912) bytes
[0.186s][info][cds] Reserved class_space_rs   [0x0000000800c00000 - 0x0000000840c00000] (1073741824) bytes
[0.191s][info][cds] Mapped static  region #0 at base 0x0000000800000000 top 0x0000000800488000 (ReadWrite)
[0.196s][info][cds] Mapped static  region #1 at base 0x0000000800488000 top 0x0000000800c00000 (ReadOnly)
[0.197s][info][cds] CDS archive was created with max heap size = 2048M, and the following configuration:
[0.197s][info][cds]     narrow_klass_base = 0x0000000800000000, narrow_klass_shift = 0
[0.197s][info][cds]     narrow_oop_mode = 1, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 3
[0.197s][info][cds]     heap range = [0x0000000740000000 - 0x00000007c0000000]
[0.197s][info][cds] The current max heap size = 2048M, HeapRegion::GrainBytes = 0
[0.197s][info][cds]     narrow_klass_base = 0x0000000800000000, narrow_klass_shift = 0
[0.197s][info][cds]     narrow_oop_mode = 1, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 3
[0.197s][info][cds]     heap range = [0x0000000780000000 - 0x0000000800000000]
[0.197s][info][cds] UseSharedSpaces: Checksum verification failed.
[0.197s][error][cds] relocation bitmap CRC error
[0.197s][info ][cds] Loaded heap    region #5 at base 0x00000007aaaa0000 top 0x00000007aab14000 size 475136 delta -355860480
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00000001058d4fde, pid=6896, tid=9987
#
# JRE version:  (19.0+5) (fastdebug build )
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+5-210, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, serial gc, bsd-amd64)
# Problematic frame:
# V  [libjvm.dylib+0x8acfde]  BitMap::iterate(BitMapClosure*)+0x3e
#
# Core dump will be written. Default location: core.6896
#
# An error report file with more information is saved as:
# /System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S60189/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/544c9c19-d1f2-4fc9-b1f8-4c637c7f7dc3/runs/9de2271c-aede-4fca-bc4d-00a1a67ef442/testoutput/test-support/jtreg_open_test_hotspot_jtreg_runtime_cds/scratch/1/hs_err_pid6896.log
#
#
;;;","2022-01-13 12:33;iklam;How to reproduce:

$ jtreg ... -vmoptions:-Dtest.cds.runtime.options=-XX:+UseSerialGC SharedArchiveConsistency.java 
$ cd .../jtreg_work/scratch
$ ls -l *.log
-rw-r--r-- 1 iklam dba 29407 Jan 13 12:31 hs_err_pid4077552.log

Jtreg reported the test as ""passed"". However, we see an hs_err file, which indicate that parts of the test has failed.
;;;","2022-01-13 12:34;dcubed;[~iklam] - I'm a tad bit confused. If there's a missing NULL check which resulted in
a crash, then why did the test ""PASS"" while the timeout handler was running? It
seems like, we're also missing an unexpected test failure mode check...;;;","2022-01-13 13:08;iklam;[~dcubed] yes the test is missing checks for VM crashes. I.e., if the output contains any of the strings in matchMessages, it doesn't check crash anymore.

    public static String[] matchMessages = {
        ""UseSharedSpaces: Header checksum verification failed."",
        ""The shared archive file has an incorrect header size."",
        ""Unable to use shared archive"",
        ""An error has occurred while processing the shared archive file."",
        ""Checksum verification failed."",
        ""The shared archive file has been truncated.""
    };

    public static void testAndCheck(String[] execArgs) throws Exception {
        OutputAnalyzer output = shareAuto ? TestCommon.execAuto(execArgs) : TestCommon.execCommon(execArgs);
        String stdtxt = output.getOutput();
        System.out.println(""Note: this test may fail in very rare occasions due to CRC32 checksum collision"");
        for (String message : matchMessages) {
            if (stdtxt.contains(message)) {
                // match any to return   <<<<<<<<<<<<<<<<<<<<<<<<<<<< HERE
                return;
            }
        }
        TestCommon.checkExec(output);  <<<<<<<<<<<< crashes are checked in here;;;","2022-02-15 21:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7487
Date: 2022-02-16 05:39:58 +0000;;;","2022-02-16 22:42;roboduke;Changeset: 1864481d
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-02-17 06:40:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1864481df10d2f616cbfdecebf3bebbae04de5e1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/lang/StringBuffer(StringBuilder)/HugeCapacity.java intermittently fails,JDK-8279954,5066203,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlaskey,jpai,jpai,2022-01-13 00:40,2022-02-07 13:06,2023-10-01 09:56,2022-02-01 10:46,19,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,"I saw this in a couple of unrelated PRs where this test failed in the GitHub Actions job for tier1. The java/lang/StringBuffer/HugeCapacity.java has recently started failing intermittently. So far I have seen it fail only on Windows. This is one such PR https://github.com/openjdk/jdk/pull/7052 where it failed. 

Here's the operating system details from that run:
====
2022-01-12T18:27:59.1170290Z ##[group]Operating System
2022-01-12T18:27:59.1171633Z Microsoft Windows Server 2019
2022-01-12T18:27:59.1172889Z 10.0.17763
2022-01-12T18:27:59.1173347Z Datacenter
2022-01-12T18:27:59.1174814Z ##[endgroup]
2022-01-12T18:27:59.1175977Z ##[group]Virtual Environment
2022-01-12T18:27:59.1176880Z Environment: windows-2019
2022-01-12T18:27:59.1177674Z Version: 20211219.1
2022-01-12T18:27:59.1178822Z Included Software: https://github.com/actions/virtual-environments/blob/win19/20211219.1/images/win/Windows2019-Readme.md
2022-01-12T18:27:59.1180311Z Image Release: https://github.com/actions/virtual-environments/releases/tag/win19%2F20211219.1
2022-01-12T18:27:59.1181222Z ##[endgroup]
=====


Following is the logs for this test run from that PR:
=====
2022-01-12T18:54:44.2506489Z TEST: java/lang/StringBuffer/HugeCapacity.java
2022-01-12T18:54:44.2508064Z TEST JDK: c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin\jdk-19
2022-01-12T18:54:44.2910264Z 
2022-01-12T18:54:44.3092931Z ACTION: build -- Passed. Build successful
2022-01-12T18:54:44.3121776Z REASON: Named class compiled on demand
2022-01-12T18:54:44.3123242Z TIME:   0.033 seconds
2022-01-12T18:54:44.3124556Z messages:
2022-01-12T18:54:44.3129552Z command: build HugeCapacity
2022-01-12T18:54:44.3130491Z reason: Named class compiled on demand
2022-01-12T18:54:44.3131248Z Test directory:
2022-01-12T18:54:44.3137088Z   compile: HugeCapacity
2022-01-12T18:54:44.3138098Z elapsed time (seconds): 0.033
2022-01-12T18:54:44.3152911Z 
2022-01-12T18:54:44.3158233Z ACTION: compile -- Passed. Compilation successful
2022-01-12T18:54:44.3160695Z REASON: .class file out of date or does not exist
2022-01-12T18:54:44.3161706Z TIME:   0.027 seconds
2022-01-12T18:54:44.3162383Z messages:
2022-01-12T18:54:44.3163464Z command: compile D:\a\jdk\jdk\test\jdk\java\lang\StringBuffer\HugeCapacity.java
2022-01-12T18:54:44.3164472Z reason: .class file out of date or does not exist
2022-01-12T18:54:44.3165302Z Mode: agentvm
2022-01-12T18:54:44.3165956Z Agent id: 9
2022-01-12T18:54:44.3166573Z elapsed time (seconds): 0.027
2022-01-12T18:54:44.3167295Z configuration:
2022-01-12T18:54:44.3168065Z Boot Layer (javac runtime environment)
2022-01-12T18:54:44.3170152Z   class path: C:\Users\runneradmin\jtreg\lib\javatest.jar 
2022-01-12T18:54:44.3171141Z               C:\Users\runneradmin\jtreg\lib\jtreg.jar 
2022-01-12T18:54:44.3172403Z   patch:      java.base D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\patches\java.base
2022-01-12T18:54:44.3173316Z 
2022-01-12T18:54:44.3174015Z javac compilation environment
2022-01-12T18:54:44.3174907Z   source path: D:\a\jdk\jdk\test\jdk\java\lang\StringBuffer
2022-01-12T18:54:44.3175897Z   class path:  D:\a\jdk\jdk\test\jdk\java\lang\StringBuffer
2022-01-12T18:54:44.3177122Z                D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuffer\HugeCapacity.d
2022-01-12T18:54:44.3177980Z 
2022-01-12T18:54:44.3178551Z rerun:
2022-01-12T18:54:44.3179522Z cd 'D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\scratch_1' && \
2022-01-12T18:54:44.3180740Z JDK8_HOME='c:\Users\runneradmin\bootjdk\17' \
2022-01-12T18:54:44.3181525Z JTREG_KEYWORDS=!headful \
2022-01-12T18:54:44.3182305Z JTREG_VERBOSE=fail,error,time \
2022-01-12T18:54:44.3184248Z PATH='C:\Users\runneradmin\cygwin\cygwin64\bin;C:\Users\runneradmin\cygwin\cygwin64\bin;C:\Program Files\PowerShell\7;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0;C:\Windows\System32\OpenSSH;C:\Program Files\PowerShell\7' \
2022-01-12T18:54:44.3186565Z SystemDrive=C: \
2022-01-12T18:54:44.3187629Z SystemRoot='C:\Windows' \
2022-01-12T18:54:44.3188714Z TEMP='C:\Users\RUNNER~1\AppData\Local\Temp' \
2022-01-12T18:54:44.3189899Z TEST_IMAGE_DIR='c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin-tests' \
2022-01-12T18:54:44.3191009Z TMP='C:\Users\RUNNER~1\AppData\Local\Temp' \
2022-01-12T18:54:44.3191751Z _NT_SYMBOL_PATH=' ' \
2022-01-12T18:54:44.3192391Z windir='C:\Windows' \
2022-01-12T18:54:44.3193390Z     'c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin\jdk-19\bin\javac' \
2022-01-12T18:54:44.3194360Z         -J-Xmx768m \
2022-01-12T18:54:44.3195133Z         -J-XX:MaxRAMPercentage=25 \
2022-01-12T18:54:44.3196319Z         -J'-Djava.io.tmpdir=d:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\tmp' \
2022-01-12T18:54:44.3197341Z         -J-ea \
2022-01-12T18:54:44.3197866Z         -J-esa \
2022-01-12T18:54:44.3198630Z         -J-XX:-CreateCoredumpOnCrash \
2022-01-12T18:54:44.3199942Z         -J'-Djava.library.path=c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin-tests\jdk\jtreg\native' \
2022-01-12T18:54:44.3201789Z         -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Djava.io.tmpdir=d:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\tmp -ea -esa' \
2022-01-12T18:54:44.3203948Z         -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Djava.io.tmpdir=d:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\tmp -J-ea -J-esa' \
2022-01-12T18:54:44.3205501Z         -J-Dtest.compiler.opts= \
2022-01-12T18:54:44.3206492Z         -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \
2022-01-12T18:54:44.3207970Z         -J-Dtest.jdk='c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin\jdk-19' \
2022-01-12T18:54:44.3209736Z         -J-Dcompile.jdk='c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin\jdk-19' \
2022-01-12T18:54:44.3210934Z         -J-Dtest.timeout.factor=4.0 \
2022-01-12T18:54:44.3212203Z         -J-Dtest.nativepath='c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin-tests\jdk\jtreg\native' \
2022-01-12T18:54:44.3213438Z         -J-Dtest.root='D:\a\jdk\jdk\test\jdk' \
2022-01-12T18:54:44.3214449Z         -J-Dtest.name=java/lang/StringBuffer/HugeCapacity.java \
2022-01-12T18:54:44.3215733Z         -J-Dtest.file='D:\a\jdk\jdk\test\jdk\java\lang\StringBuffer\HugeCapacity.java' \
2022-01-12T18:54:44.3216883Z         -J-Dtest.src='D:\a\jdk\jdk\test\jdk\java\lang\StringBuffer' \
2022-01-12T18:54:44.3217925Z         -J-Dtest.src.path='D:\a\jdk\jdk\test\jdk\java\lang\StringBuffer' \
2022-01-12T18:54:44.3219420Z         -J-Dtest.classes='D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuffer\HugeCapacity.d' \
2022-01-12T18:54:44.3221315Z         -J-Dtest.class.path='D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuffer\HugeCapacity.d' \
2022-01-12T18:54:44.3224603Z         -J-Dtest.class.path.prefix='D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuffer\HugeCapacity.d;D:\a\jdk\jdk\test\jdk\java\lang\StringBuffer' \
2022-01-12T18:54:44.3226807Z         -d 'D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuffer\HugeCapacity.d' \
2022-01-12T18:54:44.3228159Z         -sourcepath 'D:\a\jdk\jdk\test\jdk\java\lang\StringBuffer' \
2022-01-12T18:54:44.3230020Z         -classpath 'D:\a\jdk\jdk\test\jdk\java\lang\StringBuffer;D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuffer\HugeCapacity.d' 'D:\a\jdk\jdk\test\jdk\java\lang\StringBuffer\HugeCapacity.java'
2022-01-12T18:54:44.3231486Z 
2022-01-12T18:54:44.3232268Z ACTION: main -- Failed. Unexpected exit from test [exit code: 1]
2022-01-12T18:54:44.3233567Z REASON: User specified action: run main/othervm -Xms5G -Xmx5G HugeCapacity 
2022-01-12T18:54:44.3234445Z TIME:   0.229 seconds
2022-01-12T18:54:44.3235185Z messages:
2022-01-12T18:54:44.3236420Z command: main -Xms5G -Xmx5G HugeCapacity
2022-01-12T18:54:44.3238280Z reason: User specified action: run main/othervm -Xms5G -Xmx5G HugeCapacity 
2022-01-12T18:54:44.3254401Z Mode: othervm [/othervm specified]
2022-01-12T18:54:44.3257598Z elapsed time (seconds): 0.229
2022-01-12T18:54:44.3258716Z configuration:
2022-01-12T18:54:44.3259545Z STDOUT:
2022-01-12T18:54:44.3260109Z #
2022-01-12T18:54:44.3260983Z # There is insufficient memory for the Java Runtime Environment to continue.
2022-01-12T18:54:44.3262102Z # Native memory allocation (mmap) failed to map 10485760 bytes for G1 virtual space
2022-01-12T18:54:44.3263405Z # An error report file with more information is saved as:
2022-01-12T18:54:44.3265243Z # D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\scratch_1\hs_err_pid7004.log
2022-01-12T18:54:44.3266488Z STDERR:
2022-01-12T18:54:44.3325822Z OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000024619210000, 10485760, 0) failed; error='The paging file is too small for this operation to complete' (DOS error/errno=1455)
2022-01-12T18:54:44.3327104Z rerun:
2022-01-12T18:54:44.3327926Z cd 'D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\scratch_1' && \
2022-01-12T18:54:44.3328860Z JDK8_HOME='c:\Users\runneradmin\bootjdk\17' \
2022-01-12T18:54:44.3329497Z JTREG_KEYWORDS=!headful \
2022-01-12T18:54:44.3330114Z JTREG_VERBOSE=fail,error,time \
2022-01-12T18:54:44.3332388Z PATH='C:\Users\runneradmin\cygwin\cygwin64\bin;C:\Users\runneradmin\cygwin\cygwin64\bin;C:\Program Files\PowerShell\7;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0;C:\Windows\System32\OpenSSH;C:\Program Files\PowerShell\7' \
2022-01-12T18:54:44.3334063Z SystemDrive=C: \
2022-01-12T18:54:44.3334628Z SystemRoot='C:\Windows' \
2022-01-12T18:54:44.3335277Z TEMP='C:\Users\RUNNER~1\AppData\Local\Temp' \
2022-01-12T18:54:44.3336277Z TEST_IMAGE_DIR='c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin-tests' \
2022-01-12T18:54:44.3337251Z TMP='C:\Users\RUNNER~1\AppData\Local\Temp' \
2022-01-12T18:54:44.3337854Z _NT_SYMBOL_PATH=' ' \
2022-01-12T18:54:44.3338313Z windir='C:\Windows' \
2022-01-12T18:54:44.3339938Z CLASSPATH='D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuffer\HugeCapacity.d;D:\a\jdk\jdk\test\jdk\java\lang\StringBuffer;C:\Users\runneradmin\jtreg\lib\javatest.jar;C:\Users\runneradmin\jtreg\lib\jtreg.jar' \
2022-01-12T18:54:44.3341872Z     'c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin\jdk-19\bin\java' \
2022-01-12T18:54:44.3343899Z         -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Djava.io.tmpdir=d:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\tmp -ea -esa' \
2022-01-12T18:54:44.3345992Z         -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Djava.io.tmpdir=d:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\tmp -J-ea -J-esa' \
2022-01-12T18:54:44.3347862Z         -Dtest.compiler.opts= \
2022-01-12T18:54:44.3348693Z         -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \
2022-01-12T18:54:44.3350275Z         -Dtest.jdk='c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin\jdk-19' \
2022-01-12T18:54:44.3352546Z         -Dcompile.jdk='c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin\jdk-19' \
2022-01-12T18:54:44.3353666Z         -Dtest.timeout.factor=4.0 \
2022-01-12T18:54:44.3354768Z         -Dtest.nativepath='c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin-tests\jdk\jtreg\native' \
2022-01-12T18:54:44.3355829Z         -Dtest.root='D:\a\jdk\jdk\test\jdk' \
2022-01-12T18:54:44.3356630Z         -Dtest.name=java/lang/StringBuffer/HugeCapacity.java \
2022-01-12T18:54:44.3358162Z         -Dtest.file='D:\a\jdk\jdk\test\jdk\java\lang\StringBuffer\HugeCapacity.java' \
2022-01-12T18:54:44.3363468Z         -Dtest.src='D:\a\jdk\jdk\test\jdk\java\lang\StringBuffer' \
2022-01-12T18:54:44.3364456Z         -Dtest.src.path='D:\a\jdk\jdk\test\jdk\java\lang\StringBuffer' \
2022-01-12T18:54:44.3365795Z         -Dtest.classes='D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuffer\HugeCapacity.d' \
2022-01-12T18:54:44.3367512Z         -Dtest.class.path='D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuffer\HugeCapacity.d' \
2022-01-12T18:54:44.3369509Z         -Dtest.class.path.prefix='D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuffer\HugeCapacity.d;D:\a\jdk\jdk\test\jdk\java\lang\StringBuffer' \
2022-01-12T18:54:44.3374333Z         -Xmx768m \
2022-01-12T18:54:44.3374936Z         -XX:MaxRAMPercentage=25 \
2022-01-12T18:54:44.3375934Z         '-Djava.io.tmpdir=d:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\tmp' \
2022-01-12T18:54:44.3376797Z         -ea \
2022-01-12T18:54:44.3377183Z         -esa \
2022-01-12T18:54:44.3378676Z         -XX:-CreateCoredumpOnCrash \
2022-01-12T18:54:44.3380019Z         '-Djava.library.path=c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin-tests\jdk\jtreg\native' \
2022-01-12T18:54:44.3382391Z         -Xms5G \
2022-01-12T18:54:44.3382898Z         -Xmx5G \
2022-01-12T18:54:44.3384917Z         com.sun.javatest.regtest.agent.MainWrapper 'D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\java\lang\StringBuffer\HugeCapacity.d\main.0.jta'
2022-01-12T18:54:44.3386261Z 
2022-01-12T18:54:44.3386906Z TEST RESULT: Failed. Unexpected exit from test [exit code: 1]
======
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vnjf:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-01-13 19:47;jpai;Additionally, even the (same named but different) java/lang/StringBuilder/HugeCapacity.java test too failed with a similar exception. The OS details and logs from one of those PRs is as follows. I didn't create a separate issue for that one since both these tests look similar:

===
2022-01-10T16:04:45.0802230Z ##[group]Operating System
2022-01-10T16:04:45.0803476Z Microsoft Windows Server 2019
2022-01-10T16:04:45.0804711Z 10.0.17763
2022-01-10T16:04:45.0805456Z Datacenter
2022-01-10T16:04:45.0806514Z ##[endgroup]
2022-01-10T16:04:45.0807085Z ##[group]Virtual Environment
2022-01-10T16:04:45.0807801Z Environment: windows-2019
2022-01-10T16:04:45.0808669Z Version: 20211219.1
2022-01-10T16:04:45.0810211Z Included Software: https://github.com/actions/virtual-environments/blob/win19/20211219.1/images/win/Windows2019-Readme.md
2022-01-10T16:04:45.0811747Z Image Release: https://github.com/actions/virtual-environments/releases/tag/win19%2F20211219.1
2022-01-10T16:04:45.0812730Z ##[endgroup]
====

Logs:
====
2022-01-10T16:28:31.0420839Z TEST: java/lang/StringBuilder/HugeCapacity.java
2022-01-10T16:28:31.0432414Z TEST JDK: c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin\jdk-19
2022-01-10T16:28:31.0718556Z 
2022-01-10T16:28:31.0756592Z ACTION: build -- Passed. Build successful
2022-01-10T16:28:31.0757760Z REASON: Named class compiled on demand
2022-01-10T16:28:31.0758478Z TIME:   0.029 seconds
2022-01-10T16:28:31.0763386Z messages:
2022-01-10T16:28:31.0771030Z command: build HugeCapacity
2022-01-10T16:28:31.0772264Z reason: Named class compiled on demand
2022-01-10T16:28:31.0781633Z Test directory:
2022-01-10T16:28:31.0782434Z   compile: HugeCapacity
2022-01-10T16:28:31.0783145Z elapsed time (seconds): 0.029
2022-01-10T16:28:31.0783603Z 
2022-01-10T16:28:31.0784319Z ACTION: compile -- Passed. Compilation successful
2022-01-10T16:28:31.0785155Z REASON: .class file out of date or does not exist
2022-01-10T16:28:31.0785843Z TIME:   0.029 seconds
2022-01-10T16:28:31.0786428Z messages:
2022-01-10T16:28:31.0787427Z command: compile D:\a\jdk\jdk\test\jdk\java\lang\StringBuilder\HugeCapacity.java
2022-01-10T16:28:31.0788440Z reason: .class file out of date or does not exist
2022-01-10T16:28:31.0789122Z Mode: agentvm
2022-01-10T16:28:31.0789690Z Agent id: 9
2022-01-10T16:28:31.0790281Z elapsed time (seconds): 0.029
2022-01-10T16:28:31.0790944Z configuration:
2022-01-10T16:28:31.0791662Z Boot Layer (javac runtime environment)
2022-01-10T16:28:31.0792551Z   class path: C:\Users\runneradmin\jtreg\lib\javatest.jar 
2022-01-10T16:28:31.0793450Z               C:\Users\runneradmin\jtreg\lib\jtreg.jar 
2022-01-10T16:28:31.0794624Z   patch:      java.base D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\patches\java.base
2022-01-10T16:28:31.0795468Z 
2022-01-10T16:28:31.0796100Z javac compilation environment
2022-01-10T16:28:31.0796954Z   source path: D:\a\jdk\jdk\test\jdk\java\lang\StringBuilder
2022-01-10T16:28:31.0797911Z   class path:  D:\a\jdk\jdk\test\jdk\java\lang\StringBuilder
2022-01-10T16:28:31.0799269Z                D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuilder\HugeCapacity.d
2022-01-10T16:28:31.0800232Z 
2022-01-10T16:28:31.0800764Z rerun:
2022-01-10T16:28:31.0801680Z cd 'D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\scratch_1' && \
2022-01-10T16:28:31.0802706Z JDK8_HOME='c:\Users\runneradmin\bootjdk\17' \
2022-01-10T16:28:31.0803455Z JTREG_KEYWORDS=!headful \
2022-01-10T16:28:31.0804185Z JTREG_VERBOSE=fail,error,time \
2022-01-10T16:28:31.0805971Z PATH='C:\Users\runneradmin\cygwin\cygwin64\bin;C:\Users\runneradmin\cygwin\cygwin64\bin;C:\Program Files\PowerShell\7;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0;C:\Windows\System32\OpenSSH;C:\Program Files\PowerShell\7' \
2022-01-10T16:28:31.0807713Z SystemDrive=C: \
2022-01-10T16:28:31.0808369Z SystemRoot='C:\Windows' \
2022-01-10T16:28:31.0809120Z TEMP='C:\Users\RUNNER~1\AppData\Local\Temp' \
2022-01-10T16:28:31.0810208Z TEST_IMAGE_DIR='c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin-tests' \
2022-01-10T16:28:31.0811303Z TMP='C:\Users\RUNNER~1\AppData\Local\Temp' \
2022-01-10T16:28:31.0812001Z _NT_SYMBOL_PATH=' ' \
2022-01-10T16:28:31.0812609Z windir='C:\Windows' \
2022-01-10T16:28:31.0813550Z     'c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin\jdk-19\bin\javac' \
2022-01-10T16:28:31.0814494Z         -J-Xmx768m \
2022-01-10T16:28:31.0815181Z         -J-XX:MaxRAMPercentage=25 \
2022-01-10T16:28:31.0816290Z         -J'-Djava.io.tmpdir=d:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\tmp' \
2022-01-10T16:28:31.0817272Z         -J-ea \
2022-01-10T16:28:31.0817859Z         -J-esa \
2022-01-10T16:28:31.0818594Z         -J-XX:-CreateCoredumpOnCrash \
2022-01-10T16:28:31.0819877Z         -J'-Djava.library.path=c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin-tests\jdk\jtreg\native' \
2022-01-10T16:28:31.0821916Z         -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Djava.io.tmpdir=d:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\tmp -ea -esa' \
2022-01-10T16:28:31.0823982Z         -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Djava.io.tmpdir=d:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\tmp -J-ea -J-esa' \
2022-01-10T16:28:31.0825451Z         -J-Dtest.compiler.opts= \
2022-01-10T16:28:31.0826540Z         -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \
2022-01-10T16:28:31.0827821Z         -J-Dtest.jdk='c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin\jdk-19' \
2022-01-10T16:28:31.0829215Z         -J-Dcompile.jdk='c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin\jdk-19' \
2022-01-10T16:28:31.0830331Z         -J-Dtest.timeout.factor=4.0 \
2022-01-10T16:28:31.0831584Z         -J-Dtest.nativepath='c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin-tests\jdk\jtreg\native' \
2022-01-10T16:28:31.0832801Z         -J-Dtest.root='D:\a\jdk\jdk\test\jdk' \
2022-01-10T16:28:31.0833718Z         -J-Dtest.name=java/lang/StringBuilder/HugeCapacity.java \
2022-01-10T16:28:31.0834905Z         -J-Dtest.file='D:\a\jdk\jdk\test\jdk\java\lang\StringBuilder\HugeCapacity.java' \
2022-01-10T16:28:31.0836024Z         -J-Dtest.src='D:\a\jdk\jdk\test\jdk\java\lang\StringBuilder' \
2022-01-10T16:28:31.0837053Z         -J-Dtest.src.path='D:\a\jdk\jdk\test\jdk\java\lang\StringBuilder' \
2022-01-10T16:28:31.0838551Z         -J-Dtest.classes='D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuilder\HugeCapacity.d' \
2022-01-10T16:28:31.0840410Z         -J-Dtest.class.path='D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuilder\HugeCapacity.d' \
2022-01-10T16:28:31.0843731Z         -J-Dtest.class.path.prefix='D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuilder\HugeCapacity.d;D:\a\jdk\jdk\test\jdk\java\lang\StringBuilder' \
2022-01-10T16:28:31.0845838Z         -d 'D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuilder\HugeCapacity.d' \
2022-01-10T16:28:31.0847167Z         -sourcepath 'D:\a\jdk\jdk\test\jdk\java\lang\StringBuilder' \
2022-01-10T16:28:31.0849072Z         -classpath 'D:\a\jdk\jdk\test\jdk\java\lang\StringBuilder;D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuilder\HugeCapacity.d' 'D:\a\jdk\jdk\test\jdk\java\lang\StringBuilder\HugeCapacity.java'
2022-01-10T16:28:31.0850524Z 
2022-01-10T16:28:31.0851273Z ACTION: main -- Failed. Unexpected exit from test [exit code: 1]
2022-01-10T16:28:31.0852420Z REASON: User specified action: run main/othervm -Xms5G -Xmx5G -XX:+CompactStrings HugeCapacity true 
2022-01-10T16:28:31.0853370Z TIME:   0.181 seconds
2022-01-10T16:28:31.0853959Z messages:
2022-01-10T16:28:31.0854782Z command: main -Xms5G -Xmx5G -XX:+CompactStrings HugeCapacity true
2022-01-10T16:28:31.0855970Z reason: User specified action: run main/othervm -Xms5G -Xmx5G -XX:+CompactStrings HugeCapacity true 
2022-01-10T16:28:31.0857011Z Mode: othervm [/othervm specified]
2022-01-10T16:28:31.0857745Z elapsed time (seconds): 0.181
2022-01-10T16:28:31.0858403Z configuration:
2022-01-10T16:28:31.0858994Z STDOUT:
2022-01-10T16:28:31.0859511Z #
2022-01-10T16:28:31.0860311Z # There is insufficient memory for the Java Runtime Environment to continue.
2022-01-10T16:28:31.0861377Z # Native memory allocation (mmap) failed to map 10485760 bytes for G1 virtual space
2022-01-10T16:28:31.0862333Z # An error report file with more information is saved as:
2022-01-10T16:28:31.0863478Z # D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\scratch_1\hs_err_pid2184.log
2022-01-10T16:28:31.0864399Z STDERR:
2022-01-10T16:28:31.0865793Z OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x000001cfdf610000, 10485760, 0) failed; error='The paging file is too small for this operation to complete' (DOS error/errno=1455)
2022-01-10T16:28:31.0866895Z rerun:
2022-01-10T16:28:31.0867837Z cd 'D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\scratch_1' && \
2022-01-10T16:28:31.0868918Z JDK8_HOME='c:\Users\runneradmin\bootjdk\17' \
2022-01-10T16:28:31.0869672Z JTREG_KEYWORDS=!headful \
2022-01-10T16:28:31.0871133Z JTREG_VERBOSE=fail,error,time \
2022-01-10T16:28:31.0872905Z PATH='C:\Users\runneradmin\cygwin\cygwin64\bin;C:\Users\runneradmin\cygwin\cygwin64\bin;C:\Program Files\PowerShell\7;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0;C:\Windows\System32\OpenSSH;C:\Program Files\PowerShell\7' \
2022-01-10T16:28:31.0874568Z SystemDrive=C: \
2022-01-10T16:28:31.0875224Z SystemRoot='C:\Windows' \
2022-01-10T16:28:31.0875977Z TEMP='C:\Users\RUNNER~1\AppData\Local\Temp' \
2022-01-10T16:28:31.0877068Z TEST_IMAGE_DIR='c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin-tests' \
2022-01-10T16:28:31.0878207Z TMP='C:\Users\RUNNER~1\AppData\Local\Temp' \
2022-01-10T16:28:31.0878904Z _NT_SYMBOL_PATH=' ' \
2022-01-10T16:28:31.0879516Z windir='C:\Windows' \
2022-01-10T16:28:31.0881234Z CLASSPATH='D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuilder\HugeCapacity.d;D:\a\jdk\jdk\test\jdk\java\lang\StringBuilder;C:\Users\runneradmin\jtreg\lib\javatest.jar;C:\Users\runneradmin\jtreg\lib\jtreg.jar' \
2022-01-10T16:28:31.0883302Z     'c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin\jdk-19\bin\java' \
2022-01-10T16:28:31.0884930Z         -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Djava.io.tmpdir=d:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\tmp -ea -esa' \
2022-01-10T16:28:31.0886944Z         -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Djava.io.tmpdir=d:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\tmp -J-ea -J-esa' \
2022-01-10T16:28:31.0888398Z         -Dtest.compiler.opts= \
2022-01-10T16:28:31.0889331Z         -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \
2022-01-10T16:28:31.0890551Z         -Dtest.jdk='c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin\jdk-19' \
2022-01-10T16:28:31.0891922Z         -Dcompile.jdk='c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin\jdk-19' \
2022-01-10T16:28:31.0893014Z         -Dtest.timeout.factor=4.0 \
2022-01-10T16:28:31.0894227Z         -Dtest.nativepath='c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin-tests\jdk\jtreg\native' \
2022-01-10T16:28:31.0895385Z         -Dtest.root='D:\a\jdk\jdk\test\jdk' \
2022-01-10T16:28:31.0896293Z         -Dtest.name=java/lang/StringBuilder/HugeCapacity.java \
2022-01-10T16:28:31.0897486Z         -Dtest.file='D:\a\jdk\jdk\test\jdk\java\lang\StringBuilder\HugeCapacity.java' \
2022-01-10T16:28:31.0898805Z         -Dtest.src='D:\a\jdk\jdk\test\jdk\java\lang\StringBuilder' \
2022-01-10T16:28:31.0899857Z         -Dtest.src.path='D:\a\jdk\jdk\test\jdk\java\lang\StringBuilder' \
2022-01-10T16:28:31.0901298Z         -Dtest.classes='D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuilder\HugeCapacity.d' \
2022-01-10T16:28:31.0903217Z         -Dtest.class.path='D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuilder\HugeCapacity.d' \
2022-01-10T16:28:31.0905355Z         -Dtest.class.path.prefix='D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\classes\java\lang\StringBuilder\HugeCapacity.d;D:\a\jdk\jdk\test\jdk\java\lang\StringBuilder' \
2022-01-10T16:28:31.0906838Z         -Xmx768m \
2022-01-10T16:28:31.0907540Z         -XX:MaxRAMPercentage=25 \
2022-01-10T16:28:31.0908638Z         '-Djava.io.tmpdir=d:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\tmp' \
2022-01-10T16:28:31.0909718Z         -ea \
2022-01-10T16:28:31.0910276Z         -esa \
2022-01-10T16:28:31.0910994Z         -XX:-CreateCoredumpOnCrash \
2022-01-10T16:28:31.0912266Z         '-Djava.library.path=c:\Users\runneradmin\jdk-windows-x64\jdk-19-internal+0_windows-x64_bin-tests\jdk\jtreg\native' \
2022-01-10T16:28:31.0913346Z         -Xms5G \
2022-01-10T16:28:31.0913900Z         -Xmx5G \
2022-01-10T16:28:31.0914534Z         -XX:+CompactStrings \
2022-01-10T16:28:31.0916736Z         com.sun.javatest.regtest.agent.MainWrapper 'D:\a\jdk\jdk\build\run-test-prebuilt\test-support\jtreg_test_jdk_tier1_part1\java\lang\StringBuilder\HugeCapacity.d\main.0.jta' true
2022-01-10T16:28:31.0918246Z 
2022-01-10T16:28:31.0918962Z TEST RESULT: Failed. Unexpected exit from test [exit code: 1]
=====;;;","2022-01-14 06:09;jlaskey;will try upping the @requires;;;","2022-01-14 06:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7086
Date: 2022-01-14 14:33:13 +0000;;;","2022-02-01 10:46;roboduke;Changeset: bde2b378
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2022-02-01 18:45:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bde2b3783e0e9787cf2f270fcb3a54c2d4f1e5ab
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaThread::_free_handle_block leaks native memory,JDK-8279949,5066196,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lmesnik,lmesnik,lmesnik,2022-01-12 21:44,2023-09-13 20:06,2023-10-01 09:56,2022-02-15 10:01,18,,,,,,,,19,hotspot,,0,memory,redhat-interest,sap-interest,test-bigapps-Kitchensink,,,,,,,,,,,,,,,,"The test fails with native OOME. Latest NMT reports about ""Internal"" memory consumption.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276658,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vnhv:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-12 21:50;lmesnik;I am going to check where is the leak and verify if it is not a test problem.;;;","2022-01-18 11:24;mseledtsov;ILW = MLH = P4;;;","2022-01-25 11:20;mseledtsov;ILW = M (slow leak) H (always) M = P3;;;","2022-02-05 04:34;vlivanov;The test stresses class loading by continuously load/unload classes for compiled LambdaForms (triggered by LambdaForm customization).

And the leak happens during class initialization.

-                  Internal (reserved=10768KB, committed=10768KB)
-                  Internal (reserved=15328KB +3930KB, committed=15328KB +3930KB)
-                  Internal (reserved=19167KB +7769KB, committed=19167KB +7769KB)
-                  Internal (reserved=23475KB, committed=23475KB)
-                  Internal (reserved=23793KB +4273KB, committed=23793KB +4273KB)
-                  Internal (reserved=27521KB +8001KB, committed=27521KB +8001KB)
-                  Internal (reserved=34979KB, committed=34979KB)
-                  Internal (reserved=38998KB +83KB, committed=38998KB +83KB)
-                  Internal (reserved=42109KB, committed=42109KB)
-                  Internal (reserved=45087KB +6172KB, committed=45087KB +6172KB)
-                  Internal (reserved=44969KB +6054KB, committed=44969KB +6054KB)
-                  Internal (reserved=48595KB, committed=48595KB)
...
-                  Internal (reserved=1314810KB, committed=1314810KB)
                            (malloc=1314778KB #4469692) 
                            (mmap: reserved=32KB, committed=32KB) 
 
[0x000000010300ba94] JNIHandleBlock::allocate_block(JavaThread*, AllocFailStrategy::AllocFailEnum)+0xe0
[0x0000000102efbf78] JavaCallWrapper::JavaCallWrapper(methodHandle const&, Handle, JavaValue*, JavaThread*)+0x11c
[0x0000000102efd788] JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x2dc
[0x0000000102ec8848] InstanceKlass::call_class_initializer(JavaThread*)+0x264
                             (malloc=1308338KB type=Internal #4294032)

JNIHandleBlock::release_block() keeps a free list of blocks, but JavaThread::exit() releases only the top one.

void JavaThread::exit(bool destroy_vm, ExitType exit_type) {
...
  if (free_handle_block() != NULL) {
    JNIHandleBlock* block = free_handle_block();
    set_free_handle_block(NULL);
    JNIHandleBlock::release_block(block);
  }
...
}

void JNIHandleBlock::release_block(JNIHandleBlock* block, JavaThread* thread) {
...
  if (thread != NULL ) {
    block->zap();
    JNIHandleBlock* freelist = thread->free_handle_block();
    block->_pop_frame_link = NULL;
    thread->set_free_handle_block(block);

    // Add original freelist to end of chain
    if ( freelist != NULL ) {
      while ( block->_next != NULL ) block = block->_next;
      block->_next = freelist;
    }
    block = NULL;
  }
  if (block != NULL) {
    Atomic::dec(&_blocks_allocated);
    delete block;
  }

I tried to clear the whole free list and there's no leak observed anymore:

  if (block != NULL) {
    while (block != NULL) {
      Atomic::dec(&_blocks_allocated);
      JNIHandleBlock* next = block->_next();
      delete block;
      block = next;
    }
  }

-                  Internal (reserved=6899KB, committed=6899KB)
-                  Internal (reserved=6915KB, committed=6915KB)
-                  Internal (reserved=4875KB, committed=4875KB)
-                  Internal (reserved=4882KB -2257KB, committed=4882KB -2257KB)
-                  Internal (reserved=6379KB, committed=6379KB)
-                  Internal (reserved=7578KB, committed=7578KB)
-                  Internal (reserved=5341KB -1797KB, committed=5341KB -1797KB)
-                  Internal (reserved=6483KB, committed=6483KB)
-                  Internal (reserved=7533KB +395KB, committed=7533KB +395KB)
-                  Internal (reserved=5685KB, committed=5685KB)
-                  Internal (reserved=6620KB, committed=6620KB)
-                  Internal (reserved=8060KB +922KB, committed=8060KB +922KB)
-                  Internal (reserved=5521KB -1618KB, committed=5521KB -1618KB)
-                  Internal (reserved=6399KB -739KB, committed=6399KB -739KB)
-                  Internal (reserved=7647KB +508KB, committed=7647KB +508KB)
-                  Internal (reserved=5433KB -1706KB, committed=5433KB -1706KB)
-                  Internal (reserved=6192KB -946KB, committed=6192KB -946KB)
-                  Internal (reserved=5168KB -2275KB, committed=5168KB -2275KB)
-                  Internal (reserved=6314KB, committed=6314KB)
-                  Internal (reserved=7686KB +243KB, committed=7686KB +243KB)
;;;","2022-02-05 04:38;vlivanov;It's a long standing bug. The relevant code predates OpenJDK.;;;","2022-02-12 14:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7453
Date: 2022-02-12 22:07:33 +0000;;;","2022-02-13 17:23;lmesnik;I think that problem was introduced by https://github.com/openjdk/jdk/commit/3b2585c02bd9d66cc2c8b2d5c16e9a48f4280d07#diff-0b84e9907dd19c5d7d6bb35b47f03b6879f3fb8575d97e15d8ddf1bac48448a6L418 and doesn't exist in jdk 17 and earlier versions.;;;","2022-02-15 10:01;roboduke;Changeset: 1aff44b2
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-02-15 17:59:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1aff44b2cfcf5d2253161985b902894ee69365fc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(ch) java.nio.channels.FileChannel tryLock and write methods are missing @throws NonWritableChannelException,JDK-8279946,5066193,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-01-12 18:14,2023-01-26 10:17,2023-10-01 09:56,2022-01-25 10:03,18,,,,,,,,19,core-libs,,0,doc-only,noreg-doc,,,,,,,,,,,,,,,,,,The java.nio.channels.FileChannel methods tryLock() and write() are missing throws clauses for NonWritableChannelException although these methods throw such an exception when the channel is read-only.,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279984,,,,JDK-4510562,,,,JDK-4780504,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vnh7:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-01-12 18:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7058
Date: 2022-01-13 02:40:39 +0000;;;","2022-01-25 10:03;roboduke;Changeset: f4575e40
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-01-25 18:02:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f4575e4052bf66f1259c626e01a74d3ac593e645
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sun/security/pkcs11/Signature/TestDSAKeyLength.java fails when NSS version detection fails,JDK-8279941,5066188,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,msheppar,msheppar,2022-01-12 15:20,2023-02-28 03:59,2023-10-01 09:56,2022-09-20 13:14,18,8,,,,,,,20,security-libs,,0,atr,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,noreg-self,sqe,testbug,,,,,,,,,"External JDK18 ATR test failure

java.lang.Exception: Test Failed - expected IKE not thrown
	at TestDSAKeyLength.main(TestDSAKeyLength.java:82)
	at PKCS11Test.premain(PKCS11Test.java:174)
	at PKCS11Test.testNSS(PKCS11Test.java:550)
	at PKCS11Test.main(PKCS11Test.java:210)
	at TestDSAKeyLength.main(TestDSAKeyLength.java:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,JDK-8299024,JDK-8296600,JDK-8296526,JDK-8296524,JDK-8299067,JDK-8298820,JDK-8303340,,,,,,,,,,,,,,,,INTJDK-7629971,JDK-8284356,,,,,,,,,,,,,,,,,,,,,"2022-01-24 22:59;vprovodin;TestDSAKeyLength_ubuntu2104.jtr;https://bugs.openjdk.org/secure/attachment/97715/TestDSAKeyLength_ubuntu2104.jtr",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vng3:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2022-01-12 15:43;rhalade;can you please provide more details on the failure? This is not a manual test so is covered with our regular CI runs and we have not seen this failure. Also, running locally with 18+30, I am not able to reproduce this failure.;;;","2022-01-24 23:07;vprovodin;In our cases this issue was observed on Ubuntu 21.04 (see the attached TestDSAKeyLength_ubuntu2104.jtr) but it successfully passed ob 18.04 and 20.04
;;;","2022-01-25 09:28;rhalade;[~valeriep] This looks to me similar to JDK-8029158 where no exception is thrown on Ubuntu 21.04 and above.;;;","2022-01-26 11:38;rhalade;I can reproduce this with Ubuntu 21.10. From the log -

Beginning test run TestDSAKeyLength...
Cannot resolve artifact, please check if JIB jar is present in classpath.
nssLibDir: /usr/lib/x86_64-linux-gnu/nss/
Cannot resolve artifact, please check if JIB jar is present in classpath.
libsoftokn3 version not found, set to 0.0: /usr/lib/x86_64-linux-gnu/nss/libsoftokn3.so
NSS version: 0.0

Per test, it should be skipped if NSS version is greater than 3.14 but test is not able to determine NSS version. known NSS bug - https://bugzilla.mozilla.org/show_bug.cgi?id=946504

I think default NSS version on 21.10 is 3.68.;;;","2022-01-26 12:05;rhalade;Looking at .so file, I couldn't find ""$Header: NSS"" or ""Version: NSS"" to determine NSS version.;;;","2022-01-26 12:39;rhalade;Updated with label ""noreg-self"" based on the triage so far. [~valeriep] let me know if there is any other way to extract NSS version in test.;;;","2022-01-27 16:40;valeriep;Actually, when I tried the test with newer NSS library, it seems that NSS allows use of the large DSA key sizes, e.g. 2048, with their SHA1withDSA signature impl. Previously, the NSS library does not throw IKE upon large DSA keys but errors out upon sign/verify operations. Now, the NSS library still does not throw IKE, however, the sign/verify operations will succeed. This goes against NIST standard of matching security strength of digest length and key size and is inconsistent with the SHA1withDSA signature impl of SUN provider. But it's unclear if there are some apps depending on this behavior, so perhaps we should not introduce additional restrictions here.

For the purpose of addressing this test failure, we can address it by checking for IKE first. If IKE is not thrown, then proceeds with sign/verify operation which should succeed. Here is the proposed test changes:

--- a/test/jdk/sun/security/pkcs11/Signature/TestDSAKeyLength.java
+++ b/test/jdk/sun/security/pkcs11/Signature/TestDSAKeyLength.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2022, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -24,8 +24,8 @@
 /*
  * @test
  * @bug 7200306 8029158
- * @summary verify that P11Signature impl will error out when initialized
- * with unsupported key sizes
+ * @summary verify that P11Signature impl either error outs with IKE or
+ * do sign/verify as usual.
  * @library /test/lib ..
  * @key randomness
  * @modules jdk.crypto.cryptoki
@@ -46,40 +46,40 @@ public class TestDSAKeyLength extends PKCS11Test {
         main(new TestDSAKeyLength(), args);
     }

-    @Override
-    protected boolean skipTest(Provider provider) {
-        if (isNSS(provider) && getNSSVersion() >= 3.14) {
-            System.out.println(""Skip testing NSS "" + getNSSVersion());
-            return true;
-        }
-
-        return false;
-    }
-
     @Override
     public void main(Provider provider) throws Exception {
         KeyPairGenerator kpg = KeyPairGenerator.getInstance(""DSA"", ""SUN"");
         kpg.initialize(2048, new SecureRandom());
         KeyPair pair = kpg.generateKeyPair();

-        boolean status = true;
         Signature sig = Signature.getInstance(""SHA1withDSA"", provider);
+
         try {
             sig.initSign(pair.getPrivate());
-            status = false;
         } catch (InvalidKeyException ike) {
-            System.out.println(""Expected IKE thrown for initSign()"");
-        }
-        try {
-            sig.initVerify(pair.getPublic());
-            status = false;
-        } catch (InvalidKeyException ike) {
-            System.out.println(""Expected IKE thrown for initVerify()"");
+            // check if IKE is also thrown for initVerify()
+            try {
+                sig.initVerify(pair.getPublic());
+                throw new RuntimeException
+                        (""Expected IKE not thrown for initVerify()"");
+            } catch (InvalidKeyException ike2) {
+                System.out.println(""Test Passed - expected IKE thrown"");
+                return;
+            }
+
         }
-        if (status) {
-            System.out.println(""Test Passed"");
-        } else {
-            throw new Exception(""Test Failed - expected IKE not thrown"");
+
+        // no IKE; check if the sign/verify operation work as expected
+        byte[] data = ""This is a test"".getBytes();
+        sig.initSign(pair.getPrivate());
+        sig.update(data);
+        byte[] sigData = sig.sign();
+
+        sig.initVerify(pair.getPublic());
+        sig.update(data);
+        if (!sig.verify(sigData)) {
+            throw new RuntimeException(""Error in signature verification"");
         }
+        System.out.println(""Test Passed - sign/verify passed"");
     }
 }
;;;","2022-09-15 08:36;shade;I hit this on Ubuntu 22.04. Is there any resolution in sight?;;;","2022-09-15 08:40;shade;I was able to work around the failure by doing:
diff --git a/test/jdk/sun/security/pkcs11/Signature/TestDSAKeyLength.java b/test/jdk/sun/security/pkcs11/Signature/TestDSAKeyLength.java
index 7d0f68e4f01..423a97523df 100644
--- a/test/jdk/sun/security/pkcs11/Signature/TestDSAKeyLength.java
+++ b/test/jdk/sun/security/pkcs11/Signature/TestDSAKeyLength.java
@@ -48,7 +48,7 @@ public class TestDSAKeyLength extends PKCS11Test {
 
     @Override
     protected boolean skipTest(Provider provider) {
-        if (isNSS(provider) && getNSSVersion() >= 3.14) {
+        if (isNSS(provider) && (getNSSVersion() == 0.0 || getNSSVersion() >= 3.14)) {
             System.out.println(""Skip testing NSS "" + getNSSVersion());
             return true;
         }
;;;","2022-09-15 15:47;valeriep;The test should be updated. The easiest way is to assume newer NSS when version info isn't available (as Aleksey suggested above; add an extra condition). As the test is hardcoded to skip testing NSS 3.14 or newer, the test is getting irrelevant since the NSS 3.13 and older releases are getting scarce.;;;","2022-09-15 22:55;shade;I can take over and PR my fix, if you want.;;;","2022-09-19 09:39;rhalade;[~shade] I have assigned bug to you. Thanks!;;;","2022-09-19 10:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10346
Date: 2022-09-19 17:01:40 +0000;;;","2022-09-20 13:14;dukebot;Changeset: cddd6def
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-09-20 20:11:45 +0000
URL:       https://git.openjdk.org/jdk/commit/cddd6def9f796a25137e0059e82053142747c001
;;;","2022-10-25 09:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/838
Date: 2022-10-25 16:12:30 +0000;;;","2022-10-25 09:30;shade;Fix Request (17u, 19u)

Fixes the tier2 test failure. Applies cleanly. Affected test starts to pass.;;;","2022-10-25 09:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/56
Date: 2022-10-25 16:29:34 +0000;;;","2023-02-27 01:37;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
No risk, only a test change.
Clean backport except for Copyright, marked clean.
Test passes. SAP nighlty testing passed.;;;","2023-02-27 01:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1777
Date: 2023-02-27 09:36:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Synthetic cast causes generation of store barriers when using heap segments,JDK-8279930,5066163,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-01-12 07:28,2022-01-25 14:17,2023-10-01 09:56,2022-01-14 03:17,18,,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,,,"The heap segment hierarchy uses a generic type variable to denote the type of the base object (e.g. float[] vs. int[]). When we create slices, we access the base field, javac inserts a cast to the sharp type, and then the value is used to initialize a new segment. This extra cast is enough to throw off C2's store capture optimizations, which allow barriers to be removed for initializing stores.",,,,,,,,,,JDK-8280311,JDK-8280643,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279971,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vnaj:",9223372036854775807,b32,,,,,,,,,,,,"2022-01-12 07:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/97
Date: 2022-01-12 15:48:20 +0000;;;","2022-01-14 03:17;roboduke;Changeset: c6b02755
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-01-14 11:15:16 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/c6b027559c6e055b1475ada4001ef483b1a12d24
;;;","2022-01-17 17:57;roboduke;Changeset: c6b02755
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-01-14 11:15:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c6b027559c6e055b1475ada4001ef483b1a12d24
;;;","2022-01-25 04:29;roboduke;Changeset: c6b02755
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-01-14 11:15:16 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/c6b027559c6e055b1475ada4001ef483b1a12d24
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[PPC64, s390] implement frame::is_interpreted_frame_valid checks",JDK-8279924,5066157,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mdoerr,mdoerr,2022-01-12 05:49,2022-02-10 01:33,2023-10-01 09:56,2022-01-14 06:14,11,17,18,19,,,,,18,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,frame::is_interpreted_frame_valid is currently empty on these platforms. Checks are required to make e.g. JfrGetCallTrace::find_top_frame reliable.,,,,,,,,,,JDK-8280646,JDK-8281579,JDK-8280957,JDK-8280313,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280155,JDK-8281061,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,s390x,,,,,,,,,,,,,"0|i2vn97:",9223372036854775807,b32,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-12 06:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/96
Date: 2022-01-12 14:02:09 +0000;;;","2022-01-14 06:14;roboduke;Changeset: c809d34f
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-01-14 14:12:38 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/c809d34f9ec0d8e9f77adc73ee772ce90efbe58d
;;;","2022-01-17 17:58;roboduke;Changeset: c809d34f
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-01-14 14:12:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c809d34f9ec0d8e9f77adc73ee772ce90efbe58d
;;;","2022-01-25 04:29;roboduke;Changeset: c809d34f
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-01-14 14:12:38 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/c809d34f9ec0d8e9f77adc73ee772ce90efbe58d
;;;","2022-01-26 01:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/122
Date: 2022-01-26 09:23:46 +0000;;;","2022-01-26 04:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/796
Date: 2022-01-26 11:59:40 +0000;;;","2022-01-26 04:22;mdoerr;Fix Request (11u, 17u):
Should get backported together with JDK-8280155. Problems were observed in these older releases. Applies cleanly (except Copyright update in 11u). 11u needs a replacement for is_in_stack_range_incl which can be copied from other platforms (x86, aarch64).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix various doc typos,JDK-8279918,5066150,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,prappo,prappo,prappo,2022-01-12 03:46,2022-01-25 00:05,2023-10-01 09:56,2022-01-14 08:10,19,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vn7n:",9223372036854775807,b06,,,,,,,,,,,,"2022-01-13 02:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7063
Date: 2022-01-13 10:30:07 +0000;;;","2022-01-14 08:10;roboduke;Changeset: f1805309
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-01-14 16:10:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f1805309352a22119ae2edf8bfbb596f00936224
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: Wrong result caused by incorrect use of iregL2I operand in some c2 match rules,JDK-8279914,5066140,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fjiang,fjiang,fjiang,2022-01-12 01:35,2022-01-12 03:51,2023-10-01 09:56,2022-01-12 03:51,repo-riscv-port,,,,,,,,repo-riscv-port,hotspot,,0,c2,,,,,,,,,,,,,,,,,,,"The following Test can reproduce the bug:

```
// Test.java
public class Test {
    static void print(int a) {
        System.out.println(a);
    }

    static void foo(int x, long y) {
        int z = x | (int)y;

        if (z > 0) {
           print(z);
        }
    }

    public static void main(String[] args) {
        int x = 7;
        long y = 21474836472L;

        for (int i = 0; i < 20000; i++) {
            foo(x, y);
        }
    }
}
```
Command:

```
java -Xbatch -XX:-Inline -XX:-TieredCompilation -XX:+PrintOptoAssembly -XX:+PrintAssembly Test
```
Test will ouput `-1` in this case, which is not as expected. The OptoAssembly and assembly are as follow:

```
// Opto
01c     orr  R28, R11, l2i(R12) #@orI_reg_reg
020 +   bgt  R28, zr, B3    #@cmpI_reg_imm0_branch  P=0.000000 C=6784.000000

// Assembly
  0x00000040132da35c:   or  t3,a1,a2                    ;*ior {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::foo@3 (line 7)
  0x00000040132da360:   bgtz    t3,0x00000040132da380       ;*ifle {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::foo@6 (line 9)
```

Without the conversion of Long to Integer, a1 = 0x7 and a2 = 0x4FFFFFFFF. The  result of `or t3, a1, a2` will be 0x4FFFFFFFF.
Since `bgtz ` will compare the full 64-bit value in `t3` with zr,`z > 0` will return true, which is incorrect.

After fixing this issue,  Test will output nothing as expected since the Long type value will be convert to Integer correctly. 
The corresponding OptoAssembly and assembly will be:

```
// Opto
01c     addw  R7, R12, zr   #@convL2I_reg
020 +   orr  R7, R11, R7    #@orI_reg_reg
024 +   bgt  R7, zr, B3 #@cmpI_reg_imm0_branch  P=0.000000 C=6784.000000

// Assembly
  0x00000040132d935c:   addw    t2,a2,zero
  0x00000040132d9360:   or  t2,a1,t2                    ;*ior {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::foo@3 (line 7)
  0x00000040132d9364:   bgtz    t2,0x00000040132d9384       ;*ifle {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::foo@6 (line 9)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,repo-riscv-port,,linux,,,,,"0|i2vn5f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-12 03:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/riscv-port/pull/44
Date: 2022-01-12 10:59:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] The test jdk/java/lang/instrument/valhalla/RedefinePrimitive.java has started failing,JDK-8279912,5066138,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,sadayapalam,sadayapalam,2022-01-12 01:16,2022-01-13 07:47,2023-10-01 09:56,2022-01-13 07:47,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,,,,,,,,,,,,,,,,,,,,"The test jdk/java/lang/instrument/valhalla/RedefinePrimitive.java has started failing after the integration of https://bugs.openjdk.java.net/browse/JDK-8279368 into Valhalla.

Relevant part of the test log:

stdout: [>>main (Reconstituter sanity)
>>retransformClasses (MyPrimitive)
>>transform, class=MyPrimitive
<<transform, class=MyPrimitive
<<retransformClasses (MyPrimitive)
Reading test class from /home/srikanth/testruns/JTwork/classes/0/java/lang/instrument/valhalla/RedefinePrimitive.d/MyPrimitive.class
comparing class bytes for class MyPrimitive
class bytes mismatch
.class saved to MyPrimitive_redefined.class
Disassembly difference (/home/srikanth/testruns/JTwork/classes/0/java/lang/instrument/valhalla/RedefinePrimitive.d/MyPrimitive.class vs MyPrimitive_redefined.class):
[2022-01-12T08:28:31.531860804Z] Gathering output for process 3779597
[2022-01-12T08:28:32.309883227Z] Waiting for completion for process 3779597
[2022-01-12T08:28:32.310046145Z] Waiting for completion finished for process 3779597
Output and diagnostic info for process 3779597 was saved into 'pid-3779597-output.log'
[2022-01-12T08:28:32.462442533Z] Gathering output for process 3779625
[2022-01-12T08:28:33.238461110Z] Waiting for completion for process 3779625
[2022-01-12T08:28:33.238585736Z] Waiting for completion finished for process 3779625
Output and diagnostic info for process 3779625 was saved into 'pid-3779625-output.log'
< (5) final primitive value class MyPrimitive
< (8)   flags: (0x0930) ACC_FINAL, ACC_SUPER, ACC_PRIMITIVE, ACC_VALUE
> (5) final primitive class MyPrimitive
> (8)   flags: (0x0830) ACC_FINAL, ACC_SUPER, ACC_PRIMITIVE

Basically, Valhalla compiler now emits an additional flag bit ACC_VALUE along side ACC_PRIMITIVE for primitive classes.

See http://cr.openjdk.java.net/~dlsmith/jep401/jep401-20211220/specs/primitive-classes-jvms.html 

(Table 4.1-B. Class access and property modifiers)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vn4z:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-01-12 06:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/600
Date: 2022-01-12 14:10:07 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Javac tolerates synchronized methods in value/primitive records,JDK-8279906,5066129,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jespersm,sadayapalam,sadayapalam,2022-01-11 23:43,2022-01-20 00:42,2023-10-01 09:56,2022-01-20 00:42,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,,,,,,,"primitive record Point(int x, int y) {
    synchronized void foo() {
    }
}

and 

value record Point(int x, int y) {
    synchronized void foo() {
    }
}


compile fine. They should not.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vn2z:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-19 04:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/607
Date: 2022-01-19 10:34:05 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Redundant modulo operation in ECDHKeyAgreement,JDK-8279903,5066126,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2022-01-11 22:48,2023-05-19 02:25,2023-10-01 09:56,2022-01-12 18:18,11,17,,,,,,,19,security-libs,,0,amazon-interest,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,,,"In class sun.security.ec.ECDHKeyAgreement.java, the last mod() in the below line looks redundant,
BigInteger lhs = y.modPow(BigInteger.valueOf(2), p).mod(p);",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vn2b:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,,,"2022-01-11 23:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7042
Date: 2022-01-12 06:57:45 +0000;;;","2022-01-12 18:18;roboduke;Changeset: 48519480
Author:    John Jiang <jjiang@openjdk.org>
Date:      2022-01-13 02:16:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/485194805966e8dbb76473fa26276e5ba26d8097
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Javac should verify/ensure that a Functional interface implements neither IdentityObject nor ValueObject ,JDK-8279901,5066124,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-01-11 20:40,2022-01-13 04:32,2023-10-01 09:56,2022-01-13 04:32,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,,,,,,,"From https://openjdk.java.net/jeps/8277163:

""As a special case, an interface may only be considered a functional interface, compatible with lambda expressions, if it extends neither IdentityObject nor ValueObject. This allows for flexibility in the implementation of lambda expressions.""

and 

""The LambdaMetafactory class checks that neither IdentityObject nor ValueObject are among the requested superinterfaces.""

This means two things:

(1) If an @FunctionalInterface annotated interface ends up implementing either of the top interfaces indirectly or directly,
the compiler should complain.

(2) When a lambda expression/method reference is the implementation of an interface, the compiler should assert that
the interface does not implement either of these top interface types. 

(OIOW, checks should happen at the interface declaration site as well the
site of instantiation)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279838,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vn1v:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-13 01:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/601
Date: 2022-01-13 09:52:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/vectorization/TestPopCountVectorLong.java fails due to vpopcntdq is not supported,JDK-8279900,5066123,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-01-11 19:17,2022-05-06 10:11,2023-10-01 09:56,2022-01-11 19:56,19,,,,,,,,19,hotspot,,0,noreg-self,oracle-triage-19,tencent-interest,ursqe-triaged,,,,,,,,,,,,,,,,"One or more @IR rules failed:

Failed IR Rules (1)
------------------
- Method ""public void compiler.vectorization.TestPopCountVectorLong.vectorizeBitCount()"":
  * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIf={}, failOn={}, applyIfAnd={}, applyIfOr={}, counts={""PopCountVL"", "">= 1""}, applyIfNot={})""
    - counts: Graph contains wrong number of nodes:
        Regex 1: PopCountVL
        Expected 1 but found 0 nodes.

>>> Check stdout for compilation output of the failed methods


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
        at compiler.lib.ir_framework.driver.IRMatcher.reportFailuresIfAny(IRMatcher.java:498)
        at compiler.lib.ir_framework.driver.IRMatcher.applyRules(IRMatcher.java:271)
        at compiler.lib.ir_framework.driver.IRMatcher.<init>(IRMatcher.java:73)
        at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:700)
        at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:669)
        at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:322)
        at compiler.lib.ir_framework.TestFramework.run(TestFramework.java:208)
        at compiler.vectorization.TestPopCountVectorLong.main(TestPopCountVectorLong.java:46)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
        at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278868,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vn1n:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-11 19:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7040
Date: 2022-01-12 03:26:56 +0000;;;","2022-01-11 19:56;roboduke;Changeset: 1c688f41
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-01-12 03:55:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1c688f41373e90865b729b5149be2ec010bc9b37
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/swing/JInternalFrame/8020708/bug8020708.java timeouts on Windows 11,JDK-8279894,5066117,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,landrews,landrews,2022-01-11 15:45,2022-01-26 17:19,2023-10-01 09:56,2022-01-19 20:15,17,18,,,,,,,19,client-libs,,0,sn_110,,,,,,,,,,,,,,,,,,,"javax/swing/JInternalFrame/8020708/bug8020708.java timeouts on Windows 11

----------System.out:(30/375)----------
keyCode 67
keyCode 67
keyCode 67
keyCode 83
keyCode 83
keyCode 83
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
keyCode 67
Timeout refired 120 times

test result: Error. Program `c:\law\jdk_builds\jdk18\b27\jdk-18\bin\java' timed out (timeout set to 120000ms, elapsed time including timeout handling was 120012ms).

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,windows,,,,,"0|i2vn0b:",9223372036854775807,b07,,,,,,,,,,,,"2022-01-12 23:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7060
Date: 2022-01-13 07:44:48 +0000;;;","2022-01-19 20:15;roboduke;Changeset: c4a624d4
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-01-20 04:13:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c4a624d46332552e7baca8ee09bfdce0e53eef05
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Local variable independently used by multiple loops can interfere with loop optimizations,JDK-8279888,5066110,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,redestad,redestad,2022-01-11 13:28,2022-09-18 22:49,2023-10-01 09:56,2022-04-25 02:31,18,19,,,,,,,19,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-19,performance,,,,,,,,,,,,,,,"JDK-8279833 deals with a point fix where moving a method local variable into two separate scope locals avoids a regression introduced by JEP 254.

I've attached a JMH benchmark based on a slightly modified version of the pre-JDK-8279833 version of String.encodeUTF8_UTF16 (loopsWithSharedLocal), along with a version with the same patch applied as in JDK-8279833 (loopsWithScopedLocal):

Benchmark                        (negativeStart)  Mode  Cnt     Score   Error  Units
LoopLocals.loopsWithScopedLocal             true  avgt    2  2828.665          ns/op
LoopLocals.loopsWithScopedLocal            false  avgt    2  1164.918          ns/op
LoopLocals.loopsWithSharedLocal             true  avgt    2  5355.671          ns/op
LoopLocals.loopsWithSharedLocal            false  avgt    2  1164.860          ns/op

The interesting case is when we're spending most of the time in the second loop (negativeStart = true). When not splitting the locals this variant is about half as fast.

I expect that C2 should be able to act as if the variables were local to each individual scope in general here. I've tried simplifying the benchmark, e.g., by removing the byte[] allocations, but then the issue disappears.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281565,JDK-8286451,JDK-8293978,,,,,,,,,,JDK-8279833,JDK-8281565,,,,,"2022-01-12 11:26;redestad;LoopLocals.java;https://bugs.openjdk.org/secure/attachment/97590/LoopLocals.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vmyr:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-11 13:52;kvn;@roland can you look on it?;;;","2022-01-11 13:53;kvn;JDK 11u and 17u could be affected to based on JDK-8279833.;;;","2022-01-11 20:53;dlong;ILW = possible performance regression, micro benchmark, no workaround = MMH = P3;;;","2022-01-12 07:23;roland;I measure this:
Benchmark                        (negativeStart)  Mode  Cnt     Score     Error  Units
LoopLocals.loopsWithScopedLocal             true  avgt   15   693.615 ±  28.509  ns/op
LoopLocals.loopsWithScopedLocal            false  avgt   15   403.623 ±  11.235  ns/op
LoopLocals.loopsWithSharedLocal             true  avgt   15  1304.995 ± 305.077  ns/op
LoopLocals.loopsWithSharedLocal            false  avgt   15   409.803 ±   7.183  ns/op

With the patch from JDK-8278518:

Benchmark                        (negativeStart)  Mode  Cnt    Score    Error  Units
LoopLocals.loopsWithScopedLocal             true  avgt   15  692.950 ± 22.341  ns/op
LoopLocals.loopsWithScopedLocal            false  avgt   15  403.563 ±  8.676  ns/op
LoopLocals.loopsWithSharedLocal             true  avgt   15  491.926 ± 22.503  ns/op
LoopLocals.loopsWithSharedLocal            false  avgt   15  411.230 ± 10.395  ns/op

And ScopedLocal is now slower than SharedLocal. The reason I think is that SharedLocal's second loop:
        while (sp < sl) {
            c = getChar(val, sp++);
            if (c < 0x80) {
                dst[dp++] = (byte)c;
            } else if (c < 0x800) {
              ..

is compiled as:

        while (sp < sl) {
            c = getChar(val, sp++);
            if (c < 0x80) {
                dst[dp++] = (byte)c;
            } else {
              break;
            }
         }

with the less common else branch code moved in an outer loop. This allows the inner loop body to optimize much better. This happens at the ciTypeFlow level because of the particular bytecode shape of SharedLocal but I suppose we could get c2 to transform the IR of:
for (;;) {
  if () {
    // common
  } else {
    // uncommon
  }
}
into:
for (;;) {
  for (;;) {
    if () {
      // common
    } else {
       got uncommon;
    }
  }
  break;
  uncommon:
   // uncommon
}
Is it worth it? What do you think [~kvn]?;;;","2022-01-12 08:11;redestad;Interesting interaction. Question: why does defining c in the body of the second loop affect the shape to prohibit this optimization in this case? 

(We should probably add a few more mixed micros: the else branch in the second loop might not be rare on more realistic UTF-16 Strings, but skew towards something a bit more balanced. The current micros skew it hard so that only a single branch in the second loop is exercised in each case.);;;","2022-01-12 08:34;redestad;Refactored the micros and added a variant with more randomly mixed chars, which still exhibit the issue at hand when I run on a build with the JDK-8278518 patch:


Benchmark                            (variant)  Mode  Cnt     Score     Error  Units
LoopLocals.loopsWithScopedLocal  startNonASCII  avgt    5  2679.191 ± 438.853  ns/op
LoopLocals.loopsWithScopedLocal    endNonASCII  avgt    5  1087.806 ±  72.943  ns/op
LoopLocals.loopsWithScopedLocal          mixed  avgt    5  3941.537 ± 237.364  ns/op
LoopLocals.loopsWithSharedLocal  startNonASCII  avgt    5  1592.903 ± 225.704  ns/op
LoopLocals.loopsWithSharedLocal    endNonASCII  avgt    5  1144.281 ± 194.808  ns/op
LoopLocals.loopsWithSharedLocal          mixed  avgt    5  6953.854 ± 630.521  ns/op

The mixed variant is synthetic but somewhat more representative of real text, i.e., a mix of ASCII and higher code points. With JDK-8278518 we get a too optimistic speculation of the second loop in the startNonAscii variant since it'll almost only see ASCII bytes in that test. 

I've uploaded the updated microbenchmark. Since they're potentially misleading then perhaps the start/endNonASCII should be removed from any final version of this.;;;","2022-01-13 05:58;roland;Question: why does defining c in the body of the second loop affect the shape to prohibit this optimization in this case? 

The shape of the CFG (at the bytecode level) is different in the 2 cases. loopsWithSharedLocal() is compiled down to something like:

        while (sp < sl) {
            c = getChar(val, sp++);
            if (c < 0x80) {
                dst[dp++] = (byte)c;
                continue;
            }
            if (c < 0x800) {
                dst[dp++] = (byte)(0xc0 | (c >> 6));
                dst[dp++] = (byte)(0x80 | (c & 0x3f));
                continue;
            }
             if (Character.isSurrogate(c)) {
                int uc = -1;
                char c2;
                if (Character.isHighSurrogate(c) && sp < sl &&
                        Character.isLowSurrogate(c2 = getChar(val, sp))) {
                    uc = Character.toCodePoint(c, c2);
                }
                if (uc < 0) {
                    dst[dp++] = '?';
                } else {
                    dst[dp++] = (byte)(0xf0 | ((uc >> 18)));
                    dst[dp++] = (byte)(0x80 | ((uc >> 12) & 0x3f));
                    dst[dp++] = (byte)(0x80 | ((uc >>  6) & 0x3f));
                    dst[dp++] = (byte)(0x80 | (uc & 0x3f));
                    sp++;  // 2 chars                                                                                                                                                                                                                                             
                }
                continue;
            }
            {
                // 3 bytes, 16 bits                                                                                                                                                                                                                                               
                dst[dp++] = (byte)(0xe0 | ((c >> 12)));
                dst[dp++] = (byte)(0x80 | ((c >>  6) & 0x3f));
                dst[dp++] = (byte)(0x80 | (c & 0x3f));
                continue;
            }
        }

that is, there are gotos back to the beginning of the loop at the end of every conditional block. loopsWithScopedLocal() has a single goto back to the loop header. That makes a difference because c2 doesn't build the same IR in the 2 cases. In the first case, it sees a loop with several backedges which it transforms to a loop nest, each loop with a single backedge (because that's the canonical representation of a loop in c2). The inner loop is the one that's really getting optimized which in this case is:
        while (sp < sl) {
            c = getChar(val, sp++);
            if (c < 0x80) {
                dst[dp++] = (byte)c;
           } else {
              break;
           }
       }
While in the second case, there's a single loop with a complicated body.
;;;","2022-01-14 14:43;redestad;Ok, so JDK-8278518 allows rearranging code like that in some cases, for better and worse, and my patch for JDK-8279833 accidentally prevents this by subtly changing the bytecode. I'm not sure what to make of this, but on a high level I think we should work to reduce the ""surprise factor"" from subtle (and fragile) changes as the ones in JDK-8279833;;;","2022-02-04 06:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7352
Date: 2022-02-04 14:41:55 +0000;;;","2022-04-25 02:31;dukebot;Changeset: 32593df3
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-04-25 09:30:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/32593df392cfd139e10849c2a5db0a377fd1ce9c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use better file for cygwin source permission check,JDK-8279884,5066105,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mikael,mikael,mikael,2022-01-11 13:04,2022-01-25 00:02,2023-10-01 09:56,2022-01-11 14:35,18,19,,,,,,,19,infrastructure,,0,,,,,,,,,,,,,,,,,,,,"For sanity, configure tries to verify that source files have the right permissions by checking the LICENSE file in TOPDIR. That file may not always be available, and for builds where it isn't configure will generate a (harmless) error along the lines of:

/usr/bin/stat: cannot stat '/cygdrive/t/workspace/LICENSE': No such file or directory
/cygdrive/t/workspace/build/.configure-support/generated-configure.sh: line 138173: test: -lt: unary operator expected


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2vmxn:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-01-11 13:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7038
Date: 2022-01-11 21:07:17 +0000;;;","2022-01-11 14:35;roboduke;Changeset: 36f41cbe
Author:    Mikael Vidstedt <mikael@openjdk.org>
Date:      2022-01-11 22:34:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/36f41cbe1126c6d9a00b21a1a68cf5f44e2f443f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/awt/font/JNICheck/JNICheck.sh test fails on Ubuntu 21.10,JDK-8279878,5066097,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,landrews,landrews,2022-01-11 11:13,2022-08-08 17:48,2023-10-01 09:56,2022-02-06 13:14,17,18,,,,,,,19,client-libs,,0,sn_111,,,,,,,,,,,,,,,,,,,"java/awt/font/JNICheck/JNICheck.sh test fails on Ubuntu 21.10 with following error in the log.txt file

cat ./JTwork/classes/java/awt/font/JNICheck/JNICheck.d/log.txt
  *** Handler was modified!
Consider using jsig library.

Tested on following Ubuntu
cat /etc/os-release 
----------------------------------------------
PRETTY_NAME=""Ubuntu 21.10""
NAME=""Ubuntu""
VERSION_ID=""21.10""
VERSION=""21.10 (Impish Indri)""
VERSION_CODENAME=impish
ID=ubuntu
ID_LIKE=debian
HOME_URL=""https://www.ubuntu.com/""
SUPPORT_URL=""https://help.ubuntu.com/""
BUG_REPORT_URL=""https://bugs.launchpad.net/ubuntu/""
PRIVACY_POLICY_URL=""https://www.ubuntu.com/legal/terms-and-policies/privacy-policy""
UBUNTU_CODENAME=impish
----------------------------------------------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292054,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,linux_ubuntu,,,,,"0|i2vmvv:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-01-11 12:28;prr;I don't think this has anything to do with what this test is testing. Looks like on 21.10 something (not in the JDK) is modifying the VMs
signal handlers, and when you specify -Xcheck:jni then the VM warns.
The source could be any platform library that we load. Not sure it is fixable.;;;","2022-01-13 14:17;prr;The test already tries to exclude any warnings from signal issues from causing a failure
 -Xcheck:jni JNICheck | grep -v SIG | grep -v Signal | grep -v CallStatic

Seems like we just need to add these new strings to that exclude list.

Note that there is an open bug against the networking libraries causing these
https://bugs.openjdk.java.net/browse/JDK-8131136
But this one may be from some dependent library of GTK ?

The full set of messages is :-

=====
java -Djdk.gtk.verbose=true -Xcheck:jni JNICheck
Looking for GTK3 library...
Warning: SIGPIPE handler modified!
Signal Handlers:
   SIGSEGV: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGBUS: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGFPE: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGPIPE: SIG_IGN, mask=00000000000010000000000000000000, flags=SA_RESTART
  *** Handler was modified!
  *** Expected: javaSignalHandler in libjvm.so, mask=11100100110111111111111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGXFSZ: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGILL: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGUSR2: SR_handler in libjvm.so, mask=00000000000000000000000000000000, flags=SA_RESTART|SA_SIGINFO
    SIGHUP: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGINT: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGTERM: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGQUIT: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGTRAP: SIG_DFL, mask=00000000000000000000000000000000, flags=none
Consider using jsig library.
GTK3 library loaded.

=====
;;;","2022-01-14 11:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7091
Date: 2022-01-14 19:09:53 +0000;;;","2022-02-06 13:14;roboduke;Changeset: 2f48a3f0
Author:    Phil Race <prr@openjdk.org>
Date:      2022-02-06 21:13:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2f48a3f032dcfe159a7ab4a3d0afd0a0760d0a04
;;;","2022-07-25 13:45;prr;Somewhat after the fact but I did just read this
https://docs.gtk.org/gtk3/func.init.html

Since 2.18, GTK+ calls signal (SIGPIPE, SIG_IGN) during initialization, to ignore SIGPIPE signals, since these are almost never wanted in graphical applications. If you do need to handle SIGPIPE for some reason, reset the handler after gtk_init(), but notice that other libraries (e.g. libdbus or gvfs) might do similar things.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clean up: isAssignableFrom usages in xpath and jdk internal classes,JDK-8279876,5066095,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,joehw,weijun,weijun,2022-01-11 10:43,2022-04-13 23:02,2023-10-01 09:56,2022-04-08 09:37,,,,,,,,,19,xml,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,Please search for isAssignableFrom in src/java.xml/share/classes/jdk/xml/internal/SecuritySupport.java and src/java.xml/share/classes/jdk/xml/internal/SecuritySupport.java.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7317542,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vmvf:",9223372036854775807,b18,,,,,,,,,,,,"2022-04-05 15:58;joehw;The usages of isAssignableFrom in a few classes in xpath and jdk internal were either incorrect or unnecessary when the internal uses were really looking for equal or the exact class types.;;;","2022-04-05 16:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8116
Date: 2022-04-05 23:05:47 +0000;;;","2022-04-08 09:37;dukebot;Changeset: 0a026759
Author:    Joe Wang <joehw@openjdk.org>
Date:      2022-04-08 16:34:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0a0267590fad6a2d14d499588c97bb11e554feb9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clarify 'rect' parameters and description of paintTabBorder method in BasicTabbedPaneUI,JDK-8279861,5066077,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-01-11 06:55,2022-01-26 17:24,2023-10-01 09:56,2022-01-24 10:38,9,,,,,,,,19,client-libs,,0,cssn22_01_01,noreg-doc,sustaining,,,,,,,,,,,,,,,,,"Clarify the meaning of 'rect' parameters: it is the tab rectangles.
It's applicable to paintTab, paintFocusIndicator, and assureRectsCreated.

Also clarify the description of paintTabBorder method.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vmrf:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-01-11 07:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7033
Date: 2022-01-11 15:50:48 +0000;;;","2022-01-24 10:38;roboduke;Changeset: a825a4a1
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-01-24 18:35:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a825a4a1dba14317547b57bc0188b1e912baa251
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Multiple issues with speculative type at checkcast,JDK-8279853,5066063,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2022-01-11 05:07,2022-01-11 23:50,2023-10-01 09:56,2022-01-11 23:50,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,,"
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f3f72a25c8a, pid=226995, tid=227010
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-lworld3ea+0-2021-10-19-1138180.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-lworld3ea+0-2021-10-19-1138180.tobias..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1645c8a]  Node::clone() const+0x2a

Current CompileTask:
C2:   3755 1252    b  4       compiler.valhalla.inlinetypes.TestLWorld::test153 (8 bytes)

Stack: [0x00007f3f3addd000,0x00007f3f3aede000],  sp=0x00007f3f3aed8780,  free space=1005k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1645c8a]  Node::clone() const+0x2a
V  [libjvm.so+0xf32cfc]  InlineTypeBaseNode::allocate_fields(GraphKit*)+0x1c
V  [libjvm.so+0xf32e98]  InlineTypeBaseNode::allocate_fields(GraphKit*)+0x1b8
V  [libjvm.so+0x1700bbe]  Parse::return_current(Node*)+0x35e
V  [libjvm.so+0x1716005]  Parse::do_one_bytecode()+0x4f5
V  [libjvm.so+0x16fe208]  Parse::do_one_block()+0x838
V  [libjvm.so+0x16ff130]  Parse::do_all_blocks()+0x130
V  [libjvm.so+0x17040ac]  Parse::Parse(JVMState*, ciMethod*, float)+0xe1c
V  [libjvm.so+0x8c8925]  ParseGenerator::generate(JVMState*)+0x115
V  [libjvm.so+0x8cd5b8]  CallGenerator::do_late_inline_helper()+0xa98
V  [libjvm.so+0xaccf2d]  Compile::inline_incrementally_one()+0x33d
V  [libjvm.so+0xacd28f]  Compile::inline_incrementally(PhaseIterGVN&)+0x18f
V  [libjvm.so+0xacdc49]  Compile::Optimize()+0x359
V  [libjvm.so+0xad09c6]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1656
V  [libjvm.so+0x8c3c66]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x6b6
V  [libjvm.so+0xae0c28]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc88
V  [libjvm.so+0xae19c8]  CompileBroker::compiler_thread_loop()+0x648
V  [libjvm.so+0x19f5d5a]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x19fe120]  Thread::call_run()+0x100
V  [libjvm.so+0x16b50f4]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vmob:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-11 23:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/598
Date: 2022-01-12 07:19:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Inconsistent treatment of repeated modifiers.,JDK-8279840,5066051,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jespersm,sadayapalam,sadayapalam,2022-01-11 03:09,2022-02-07 02:45,2023-10-01 09:56,2022-02-07 02:45,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,,,,,,,"(Caught by Aggelos Biboudis during review of 
https://github.com/openjdk/valhalla/pull/596)

An inconsistency in error reporting:

FooTest.java:2: error: repeated modifier
public native native class FooTest { }
              ^
but:

FooTest.java:2: error: class, interface, enum, or record expected
public value value class FooTest { }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vmln:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-02-04 01:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/625
Date: 2022-02-04 09:45:15 +0000;;;","2022-02-04 01:49;jespersm;@Angelos Bimpoudis : Oooops - I didn't see you had this assigned, and I just posted a PR for a fix.;;;","2022-02-04 02:23;abimpoudis;No worries [~jespersm]! :D ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Javac has started incorrectly accepting native as a modifer for classes,JDK-8279839,5066050,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jespersm,sadayapalam,sadayapalam,2022-01-11 03:05,2022-02-07 00:10,2023-10-01 09:56,2022-02-07 00:10,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,,,,,,,"The following have started compiling recently - this needs fix:

public native value class X { }
native class Y { }

Thanks to Aggelos Biboudis for catching it and reporting during
review of https://github.com/openjdk/valhalla/pull/596",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vmlf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-02-04 15:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/627
Date: 2022-02-04 21:42:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] PrimitiveObject is dead, long live ValueObject",JDK-8279838,5066049,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-01-11 02:51,2022-01-12 16:13,2023-10-01 09:56,2022-01-12 16:13,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,,,,,,,"The latest draft JEP for value objects has rechristened PrimitiveObject to instead be called ValueObject.

This ticket is to effect this change along with any incidental
collateral changes to top types called out in the spec.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279901,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vml7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-12 01:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/599
Date: 2022-01-12 09:47:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(is_Loop()) failed: invalid node class: Region,JDK-8279837,5066048,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,chagedorn,chagedorn,chagedorn,2022-01-11 02:38,2022-03-09 02:18,2023-10-01 09:56,2022-01-12 23:14,11,17,18,19,8,,,,18,hotspot,,0,c2,conformance,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-18,tck-red-18,,,,,,,,,,,,"The attached test was extracted from a newly added JCK test for 18.

To reproduce:

$ java -Xcomp -XX:-TieredCompilation -XX:CompileCommand=compileonly,Test::run -XX:CompileCommand=dontinline,Test::dontInline Test.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13700/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8f731315-8676-4d9a-b759-a859429b8bf4/runs/73843d3e-ae06-4fbd-97ab-7296fb2593fc/workspace/open/src/hotspot/share/opto/node.hpp:894), pid=20387, tid=20400
#  assert(is_Loop()) failed: invalid node class: Region
#
# JRE version: Java(TM) SE Runtime Environment (18.0+26) (fastdebug build 18-ea+26-1787)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+26-1787, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1352e34]  IdealLoopTree::compute_trip_count(PhaseIdealLoop*)+0x34
.......
Command Line: -Xcomp -XX:-TieredCompilation -XX:CompileCommand=compileonly,Test::run -XX:CompileCommand=dontinline,Test::dontInline --add-modules=ALL-DEFAULT jdk.compiler/com.sun.tools.javac.launcher.Main Test.java
.......
Current CompileTask:
C2:   2416   81    b        Test::run (29 bytes)

Stack: [0x00007fd3cc7d7000,0x00007fd3cc8d8000],  sp=0x00007fd3cc8d1fb0,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1352e34]  IdealLoopTree::compute_trip_count(PhaseIdealLoop*)+0x34
V  [libjvm.so+0x1366dec]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x11c
V  [libjvm.so+0x13944c8]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0xe68
V  [libjvm.so+0xa9485a]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x28a
V  [libjvm.so+0xa9024a]  Compile::Optimize()+0x73a
V  [libjvm.so+0xa92d9e]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x159e
V  [libjvm.so+0x8ab5a4]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x664
V  [libjvm.so+0xaa3098]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc88
V  [libjvm.so+0xaa3e58]  CompileBroker::compiler_thread_loop()+0x648
V  [libjvm.so+0x192745a]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x192f820]  Thread::call_run()+0x100
V  [libjvm.so+0x1611f24]  thread_native_entry(Thread*)+0x104",,,,,,,,,,JDK-8282868,JDK-8280308,JDK-8280687,JDK-8280631,JDK-8280853,JDK-8282646,,,,,,,,,,,,,,,,,,JDK-8270532,JDK-8279634,,,,,,,,,,,,,,,,,,,,"2022-01-11 02:38;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/97569/Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vmkz:",9223372036854775807,b32,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-01-11 06:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7029
Date: 2022-01-11 14:12:17 +0000;;;","2022-01-11 06:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/94
Date: 2022-01-11 14:53:59 +0000;;;","2022-01-12 23:14;roboduke;Changeset: 65eb066b
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-01-13 07:13:22 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/65eb066b630b892f22492457e0f86165e5ef4765
;;;","2022-01-17 17:11;roboduke;Changeset: 65eb066b
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-01-13 07:13:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/65eb066b630b892f22492457e0f86165e5ef4765
;;;","2022-01-25 04:28;roboduke;Changeset: 65eb066b
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-01-13 07:13:22 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/65eb066b630b892f22492457e0f86165e5ef4765
;;;","2022-03-03 06:59;mdoerr;Fix Request (17u + 11u):
Should get backported for parity with 17.0.4-oracle and 11.0.16-oracle. Applies cleanly. Test has passed.;;;","2022-03-03 07:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/189
Date: 2022-03-03 15:01:04 +0000;;;","2022-03-08 08:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/862
Date: 2022-03-08 16:00:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Alpine Linux fails to build when --with-source-date enabled,JDK-8279834,5066044,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aleonard,aleonard,aleonard,2022-01-11 02:05,2022-03-16 06:17,2023-10-01 09:56,2022-01-11 06:22,19,,,,,,,,19,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,reproducible-build,,,,,,,,,,,,,,,,,"If ""reproducible-builds"" is enabled using the --with-source-date configure argument, the build fails on Alpine Linux with the following error:
14:42:34  Compiling 31 files for BUILD_JRTFS
14:42:38  Creating support/modules_libs/java.base/jrt-fs.jar
14:42:38  option --date requires an argument
14:42:38  Try `jar --help' for more information.
14:42:38  gmake[3]: *** [JrtfsJar.gmk:71: /home/adoptopenjdk/workspace/build-scripts/jobs/jdk/jdk-alpine-linux-x64-hotspot/workspace/build/src/build/linux-x86_64-server-release/support/modules_libs/java.base/jrt-fs.jar] Error 1
14:42:38  gmake[2]: *** [make/Main.gmk:394: jrtfs-jar] Error 2
14:42:38  gmake[2]: *** Waiting for unfinished jobs....

The reason is because Alpine Linux uses the BusyBox ""date"" tool, which is GNU compatible but the current openjdk make date version detection thinks it is BSD compatible and not GNU.
",,,,,,,,,,JDK-8283261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,linux_alpine,,,,,"0|i2vmk3:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-01-11 02:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7025
Date: 2022-01-11 10:25:31 +0000;;;","2022-01-11 06:22;roboduke;Changeset: 9e024476
Author:    Andrew Leonard <aleonard@openjdk.org>
Date:      2022-01-11 14:21:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9e0244762c0961b1bb3453d294531997b367e757
;;;","2022-03-15 09:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/257
Date: 2022-03-15 16:52:17 +0000;;;","2022-03-15 10:02;aleonard;Fix Request jdk17u
This is the accompanying fix for Alpine Linux with recently merged PR #246, Alpine linux fails to configure if --with-source-date option for reproducible builds is specified.

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Loop optimization issue in String.encodeUTF8_UTF16,JDK-8279833,5066041,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,redestad,redestad,redestad,2022-01-11 01:26,2022-04-11 16:06,2023-10-01 09:56,2022-01-11 06:49,11,17,18,19,9,,,,19,core-libs,,0,c2,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,openjdk8u-NA,performance,redhat-interest,sap-interest,,,,,,,,,,"While making an attempt to replace the ASCII fast loop in `String.encodeUTF8_UTF16` I noticed that altering the shape of the code so that char c is scope local to each loop helps the performance of the method by helping C2 optimize each loop better. I narrowed it down to something as straightforward as this:

```
diff --git a/src/java.base/share/classes/java/lang/String.java b/src/java.base/share/classes/java/lang/String.java
index abb35ebaeb1..f84d60f92cc 100644
--- a/src/java.base/share/classes/java/lang/String.java
+++ b/src/java.base/share/classes/java/lang/String.java
@@ -1284,14 +1284,17 @@ public final class String
         int sp = 0;
         int sl = val.length >> 1;
         byte[] dst = new byte[sl * 3];
-        char c;
-        while (sp < sl && (c = StringUTF16.getChar(val, sp)) < '\u0080') {
+        while (sp < sl) {
+            char c = StringUTF16.getChar(val, sp);
+            if (c >= '\u0080') {
+                break;
+            }
             // ascii fast loop;
             dst[dp++] = (byte)c;
             sp++;
         }
         while (sp < sl) {
-            c = StringUTF16.getChar(val, sp++);
+            char c = StringUTF16.getChar(val, sp++);
             if (c < 0x80) {
                 dst[dp++] = (byte)c;
             } else if (c < 0x800) {
```

Results on a few micros I'm updating to better stress this code --
Baseline:
```
Benchmark                                      (charsetName)  Mode  Cnt     Score     Error  Units
StringEncode.WithCharset.encodeUTF16                   UTF-8  avgt   15   171.853 ±  10.275  ns/op
StringEncode.WithCharset.encodeUTF16LongEnd            UTF-8  avgt   15  1991.586 ±  82.234  ns/op
StringEncode.WithCharset.encodeUTF16LongStart          UTF-8  avgt   15  8422.458 ± 473.161  ns/op
```
Patch:
```
Benchmark                                      (charsetName)  Mode  Cnt     Score     Error  Units
StringEncode.WithCharset.encodeUTF16                   UTF-8  avgt   15   128.525 ±   6.573  ns/op
StringEncode.WithCharset.encodeUTF16LongEnd            UTF-8  avgt   15  1843.455 ±  72.984  ns/op
StringEncode.WithCharset.encodeUTF16LongStart          UTF-8  avgt   15  4124.791 ± 308.683  ns/op
```

Going back, this seem to have been an issue with this code since its inception with JEP 254 in JDK 9.

The micro encodeUTF16LongEnd encodes a longer string which is mostly ASCII but with an non-ASCII codepoint at the end. This exaggerates the usefulness of the ascii loop. encodeUTF16LongStart tests the same string but with the non-ASCII codepoint moved to the front. This stresses the non-ascii loop. We see that the patch above helps in general, but mainly improves the microbenchmark that spends its time in the second loop.

There's likely a compiler bug hiding in plain sight here where the potentially uninitialized local `char c` messes up the loop optimization of the second loop. I think the above patch is reasonable to put back into the JDK while we investigate if/how C2 can better handle this pattern.",,,,,,,,,,JDK-8280095,JDK-8280039,JDK-8279962,JDK-8280636,JDK-8279985,JDK-8280701,,,,,,,,,,,,,,,,,,,,,JDK-8279888,,,,,,,,,,,,JDK-8054307,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vmjf:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-01-11 04:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7026
Date: 2022-01-11 12:30:44 +0000;;;","2022-01-11 06:49;roboduke;Changeset: c3d0a940
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2022-01-11 14:49:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c3d0a94040d9bd0f4b99da97b89fbfce252a41c0
;;;","2022-01-12 04:49;stsypanov;Is this related to https://bugs.openjdk.java.net/browse/JDK-8278518? What do you think?;;;","2022-01-12 08:39;redestad;[~stsypanov]: there's some interesting interaction pointed out by [~roland] over in JDK-8279888 (scoping the locals differently seem to prohibit some speculative optimizations) but digging deeper the regression detected in this case seem unrelated. Let's move the conversation there.;;;","2022-01-13 02:42;redestad;Fix Request (18/18u) 

This resolves a regression to String.getBytes(UTF-8) for UTF-16 encoded strings introduced in JDK 9. Patch applies cleanly.

(EDIT: this fix request wasn't necessary since we're still in RDP1 and the bug is P2);;;","2022-01-13 05:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/99
Date: 2022-01-13 13:46:53 +0000;;;","2022-01-14 03:17;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
This is only a performance enhancement. But the risk is low, the code
change is very trivial. Thus I think we should take this.
Clean backport.  SAP nightly testing passed.;;;","2022-01-14 03:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/97
Date: 2022-01-14 11:16:02 +0000;;;","2022-01-17 14:59;redestad;> This is only a performance enhancement.

That's a bit of a mis-characterization, though, since this fixes a sizeable regression introduced in JDK 9. I reported on those findings in the mainline PR: https://github.com/openjdk/jdk/pull/7026;;;","2022-01-17 17:12;roboduke;Changeset: ff856593
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2022-01-13 15:25:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ff8565931115d581afff679ea85b1a2d80c03b99
;;;","2022-01-24 06:49;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
A simple fix that should do no harm.
Backport is not clean, see PR.
SAP nightly testing passed.;;;","2022-01-24 06:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/791
Date: 2022-01-24 14:34:30 +0000;;;","2022-01-25 04:29;roboduke;Changeset: ff856593
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2022-01-13 15:25:16 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/ff8565931115d581afff679ea85b1a2d80c03b99
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: Preserve result in native wrapper with +UseHeavyMonitors,JDK-8279826,5066032,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,yadongwang,yadongwang,yadongwang,2022-01-10 22:32,2022-01-16 17:04,2023-10-01 09:56,2022-01-16 17:04,repo-riscv-port,,,,,,,,repo-riscv-port,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,,,,,,,"Testing observed a few failures after JDK-8278387. On RISC-V, we followed JDK-8278489: The reason for the failures is in the native-wrappers, in the +UseHeavyMonitors paths, we don't preserve the result register after the native call.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278489,,,,,,,,,,,,JDK-8278387,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,repo-riscv-port,,linux,,,,,"0|i2vmhf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-14 19:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/riscv-port/pull/46
Date: 2022-01-15 03:15:44 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: JFCModel shouldn't need FilePermission to read predefined .jfc files,JDK-8279825,5066031,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-01-10 21:15,2022-01-25 00:04,2023-10-01 09:56,2022-01-14 06:32,17,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,"JDK 17 introduced a more advanced parser for reading .jfc files. This to allow .jfc options to be configured using -XX:StartFlightRecording and JFR.start.

Problem is that default.jfc and profile.jfc are loaded without FilePermission, which could lead to a SecurityException if JFR is used with a security manager. This is not the case for the older parser, which is planned to be decommissioned once default.jfc and profile.jfc configuration can be loaded using jlink mechanism.

Workaround is for the user to configure permission themselves so the JVM can read JAVA_HOME/lib/jfr/default.jfc and JAVA_HOME/lib/jfr/profile.jfc. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vmh7:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-01-13 19:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7066
Date: 2022-01-13 16:44:34 +0000;;;","2022-01-14 06:32;roboduke;Changeset: e8f494cd
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-01-14 14:31:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e8f494cd5f2e7ef345cd145ad7836419efa1a059
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CI: Constant pool entries in error state are not supported,JDK-8279822,5065816,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,webbuggrp,webbuggrp,2022-01-07 09:21,2022-04-08 08:57,2023-10-01 09:56,2022-02-09 05:58,11,17,18,19,,,,,19,hotspot,,0,dcsswa,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-19,regression,reproducer-yes,webbug,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
java version ""17.0.1"" 2021-10-19 LTS
Java(TM) SE Runtime Environment (build 17.0.1+12-LTS-39)
Java HotSpot(TM) 64-Bit Server VM (build 17.0.1+12-LTS-39, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
JVM crashes after some time due to erorr in C2 compiler while processing potentially invalid bytecode.
Flags -XX:-TieredCompilation -Xcomp -Xbatch were used to simplify the test case.

Part of the core dump:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (ciEnv.cpp:687), pid=1404, tid=4804
#  Error: ShouldNotReachHere()
#
# JRE version: Java(TM) SE Runtime Environment (17.0.1+12) (build 17.0.1+12-LTS-39)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17.0.1+12-LTS-39, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# No core dump will be written. Minidumps are not enabled by default on client versions of Windows
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#



REGRESSION : Last worked in version 16.0.2

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile a class that contains virtual/static method in it.
Change it's access to be virtual if it was static, and vice versa.
Keep invoking the method till C2 compiler crashes.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
JVM does not crash
ACTUAL -
JVM crashes with core dump

---------- BEGIN SOURCE ----------
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.Handle;
import org.objectweb.asm.Type;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import static org.objectweb.asm.Opcodes.*;

public class CompilerCrash {

  public static void main(String[] args) throws Exception {
    var cw = new ClassWriter(0);
    cw.visit(V17, ACC_PUBLIC, ""BadClass"", null, ""java/lang/Object"", null);
    var mv = cw.visitMethod(ACC_PUBLIC | ACC_STATIC, ""crash"", ""()V"", null, null);
    mv.visitCode();
    mv.visitLdcInsn(
        new Handle(
            H_INVOKESTATIC,
            ""java/lang/Class"",
            ""cast"",
            ""(Ljava/lang/Object;)Ljava/lang/Object;"",
            false));
    mv.visitLdcInsn(Type.getType(String.class));
    mv.visitLdcInsn(""some object"");
    mv.visitMethodInsn(
        INVOKEVIRTUAL,
        ""java/lang/invoke/MethodHandle"",
        ""invoke"",
        ""(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;"",
        false);
    mv.visitInsn(RETURN);
    mv.visitMaxs(3, 0);
    byte[] classBytes = cw.toByteArray();
    var loader = new BytesClassLoader(""BadClass"", classBytes);
    var method = Class.forName(""BadClass"", true, loader).getMethod(""crash"");
    for (int i = 0; i < 16000; i++)
      try {
        method.invoke(null);
      } catch (InvocationTargetException ignored) {
      }
  }

  private static final class BytesClassLoader extends ClassLoader {

    private final String name;
    private final byte[] bytes;

    BytesClassLoader(String name, byte[] bytes) {
      this.name = name;
      this.bytes = bytes;
    }

    @Override
    protected Class<?> findClass(String name) throws ClassNotFoundException {
      if (!this.name.equals(name)) {
        throw new ClassNotFoundException(name);
      }
      byte[] bytes = this.bytes;
      return defineClass(name, bytes, 0, bytes.length);
    }
  }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8284594,JDK-8284406,JDK-8284060,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280473,,,,,,,,,,,,,,,,,,"2022-01-10 20:29;sswsharm;CompilerCrash.java;https://bugs.openjdk.org/secure/attachment/97565/CompilerCrash.java","2022-01-10 20:39;sswsharm;hs_err_pid15600.log;https://bugs.openjdk.org/secure/attachment/97566/hs_err_pid15600.log","2022-01-10 20:39;sswsharm;replay_pid15600.log;https://bugs.openjdk.org/secure/attachment/97567/replay_pid15600.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,"0|i2vl5f:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-10 20:40;sswsharm;Issue is reproduced.

OS: Windows 10
JDK 10 : Fail
JDK 11 : Fail
JDK 17 : Fail
JDK 18 ea : Fail

hs_err_pid and replay_pid files are attached

;;;","2022-01-11 00:28;chagedorn;ILW = Compiler assertion and not recent regression, only when processing potentially invalid bytecode, disable compilation of affected method = HLM = P3;;;","2022-01-11 03:24;pnarayanaswa;Additional Information from submitter:
===========================
Also happens with C1 compiler without flags.;;;","2022-02-01 11:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7314
Date: 2022-02-01 19:09:31 +0000;;;","2022-02-09 05:58;roboduke;Changeset: c5c8c064
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-02-09 13:56:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c5c8c0644d9442846de15422285fffeb91c3e0a1
;;;","2022-03-29 22:52;thartmann;Fix Request (JDK 18u)
Fixes a ShouldNotReachHere. The fix is low risk and applies cleanly but I had to adapt the class file version of a test. Already tested and about to be backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 22:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/83
Date: 2022-03-30 05:50:59 +0000;;;","2022-04-01 03:36;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly, but I had to set the class file version of the test to V17 (like Tobias in his 18u backport). Included test has passed. Nightly tests as well.;;;","2022-04-01 03:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/334
Date: 2022-04-01 10:34:15 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Log warnings properly when loading a misconfigured .jfc file,JDK-8279821,5066029,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-01-10 19:58,2022-01-25 00:02,2023-10-01 09:56,2022-01-11 21:17,17,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,"The control attribute in the setting element in a .jfc file may refer to a control element, for example, ""jdk.FileRead#threshold"" is controlled by ""file-threshold"". 

    <event ""jdk.FileRead> 
      <setting name=""threshold"" control=""file-threshold"">20 ms</setting>
      ...
    </event>

    <text name=""file-threshold"" label=""File I/O Threshold"">20 ms</text>

If a user has created a broken .jfc, by removing the control element, i.e <text>, without removing the corresponding control attributes, i.e control=""file-threshold"", a warning is issued. 

Problem is that the output is System.out. 

This works well when using 'jfr configure' command, but not when the model is parsed and validated by -XX:StartFlightRecorder or jcmd <pid> JFR.start. The warning should be printed to unified logging or the output of the diagnostic command. 

Consider backporting this to JDK 17, since the warning output could interfere with the output of the application, when starting JFR from command line or jcmd using a broken .jfc file. I have seen users create such broken .jfc files in the past.

I:  High, may disrupt application where standard out is piped. Red face
L: Low, only happens with JFR and with user-edited .jfc. files
W: Medium, remove broken parts of .jfc file

ILW => HLM => P3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vmgr:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-01-10 22:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7024
Date: 2022-01-11 04:54:42 +0000;;;","2022-01-11 21:17;roboduke;Changeset: f16f6a95
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-01-12 05:16:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f16f6a95df30fbc720811181f5eca8533730d626
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EC KeyFactory and KeyPairGenerator do not have aliases for OID format,JDK-8279801,5066004,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,weijun,weijun,weijun,2022-01-10 14:35,2022-01-25 00:04,2023-10-01 09:56,2022-01-13 07:28,,,,,,,,,19,security-libs,,0,,,,,,,,,,,,,,,,,,,,"You can run KeyFactory.getInstance(""EC"") but not KeyFactory.getInstance(""1.2.840.10045.2.1"").",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vmb7:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-01-11 12:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7036
Date: 2022-01-11 20:34:59 +0000;;;","2022-01-13 07:28;roboduke;Changeset: 0a839b43
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-01-13 15:26:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0a839b434b8454e22d6e5084af6e45cab3daa538
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
isAssignableFrom checks in AlgorithmParametersSpi.engineGetParameterSpec appear to be backwards,JDK-8279800,5066003,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,weijun,weijun,weijun,2022-01-10 14:32,2022-04-17 21:19,2023-10-01 09:56,2022-01-12 16:42,,,,,,,,,19,security-libs,,0,,,,,,,,,,,,,,,,,,,,"For example, in sun/security/rsa/PSSParameters.java#L184, it takes the form of

        if (PSSParameterSpec.class.isAssignableFrom(paramSpec)) {
            return paramSpec.cast(spec);
        } else {
            throw new InvalidParameterSpecException
                (""Inappropriate parameter specification"");
        }

but in fact it should be ""paramSpec.isAssignableFrom(PSSParameterSpec.class)"". isAssignableFrom means is-parent-of and you can only cast an object of a child class to that of a parent class.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284939,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vmaz:",9223372036854775807,b06,,,,,,,,,,,,"2022-01-11 12:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7037
Date: 2022-01-11 20:38:30 +0000;;;","2022-01-12 16:42;roboduke;Changeset: cb250298
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-01-13 00:42:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cb25029885b176be9ebbc84ac1a8ba71be96a6a7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc for BasicTabbedPaneUI is inconsistent,JDK-8279798,5065999,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-01-10 13:06,2022-01-26 17:24,2023-10-01 09:56,2022-01-24 10:35,9,,,,,,,,19,client-libs,,0,cssn22_01_01,noreg-doc,sustaining,,,,,,,,,,,,,,,,,"The javadoc for BasicTabbedPaneUI is inconsistent with other classes:
* Create a UI.
* Install the defaults.
* Uninstall the defaults.
* Laysout a label.

Most methods of the BasicTabbedPaneUI as well as similar methods in other Basic*UI classes use the third person form:
* Creates a UI.
* Installs the defaults.
* Uninstalls the defaults.
* Lays out a label.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8077095,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b65,9,,,,,,,"0|i2vma3:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-01-11 07:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7031
Date: 2022-01-11 15:32:04 +0000;;;","2022-01-24 10:35;roboduke;Changeset: 0b5c54be
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-01-24 18:32:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0b5c54be675c63ecac17cd37f6d388fd42f09aa8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix typo: Constucts -> Constructs,JDK-8279796,5065997,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,weijun,aivanov,aivanov,2022-01-10 12:42,2022-01-26 17:17,2023-10-01 09:56,2022-01-19 15:08,11,17,8,,,,,,19,security-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"The Javadoc for DigestMD5Base constructor has a typo:
""Constucts an instance of DigestMD5Base.""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vm9n:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-01-19 14:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7147
Date: 2022-01-19 22:18:32 +0000;;;","2022-01-19 15:08;roboduke;Changeset: 98d96a77
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-01-19 23:06:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/98d96a770756ffe3e7f5e4b82120e9fb484cad9a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix typo in BasicFileChooserUI: Constucts -> Constructs,JDK-8279795,5065996,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-01-10 12:35,2022-01-26 17:24,2023-10-01 09:56,2022-01-24 10:33,9,,,,,,,,19,client-libs,,0,cssn22_01_01,noreg-doc,sustaining,,,,,,,,,,,,,,,,,"The Javadoc for DoubleClickListener class in BasicFileChooserUI has a typo: ""Constucts a {@code DoubleClickListener}.""

It should be ""Constructs...""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8077095,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b65,9,,,,,,,"0|i2vm9f:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-01-11 07:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7030
Date: 2022-01-11 15:25:37 +0000;;;","2022-01-24 10:33;roboduke;Changeset: dae2226a
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-01-24 18:30:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dae2226a538f7156056d1f101fb5b4d1c6f72520
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix typos in BasicScrollBarUI: Laysouts a vertical scroll bar,JDK-8279794,5065995,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-01-10 12:32,2022-01-26 17:24,2023-10-01 09:56,2022-01-24 10:33,9,,,,,,,,19,client-libs,,0,cssn22_01_01,noreg-doc,sustaining,,,,,,,,,,,,,,,,,"The Javadoc for javax.swing.plaf.basic.BasicScrollBarUI.layoutVScrollbar reads:
“Laysouts a  vertical scroll bar.”

It should be “Lays out...”.

The Javadoc for layoutHScrollbar also says:
“Laysouts a  vertical scroll bar.”
which should be updated to
“Lays out a horizontal scroll bar.”",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8077095,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b65,9,,,,,,,"0|i2vm97:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-01-11 07:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7032
Date: 2022-01-11 15:35:06 +0000;;;","2022-01-24 10:33;roboduke;Changeset: acd98294
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-01-24 18:31:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/acd98294c628e8e03a036a8e3e08d775147b2fda
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[8u] ProblemList failing tests in CI,JDK-8279784,5065983,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aivanov,aivanov,aivanov,2022-01-10 10:01,2022-05-05 10:20,2023-10-01 09:56,2022-01-11 12:15,8u331,,,,,,,,8u331,client-libs,,0,cssn22_01_01,sustaining,testbug,,,,,,,,,,,,,,,,,"The following tests fail consistently in mach5 testing for 8u:

javax/swing/JTable/4275046/bug4275046.java
javax/swing/JMenu/8072900/WrongSelectionOnMouseOver.java
javax/swing/JComboBox/8072767/bug8072767.java
javax/swing/JComboBox/8033069/bug8033069ScrollBar.java
javax/swing/JComboBox/8033069/bug8033069NoScrollBar.java
java/awt/SplashScreen/MultiResolutionSplash/MultiResolutionSplashTest.java
java/awt/event/MouseWheelEvent/WheelModifier/WheelModifier.java
java/awt/event/MouseEvent/EnterAsGrabbedEvent/EnterAsGrabbedEvent.java
java/awt/MouseInfo/GetPointerInfoTest.java
java/awt/Mouse/ExtraMouseClick/ExtraMouseClick.java
java/awt/Choice/ChoiceKeyEventReaction/ChoiceKeyEventReaction.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279538,JDK-8169475,JDK-8233901,JDK-8279521,JDK-8279572,JDK-8130741,JDK-8273561,JDK-8196093,JDK-8279537,JDK-8279524,JDK-8279539,JDK-8214469,JDK-8286207,JDK-8279639,JDK-8254604,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vm6j:",9223372036854775807,b02,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macosx] ignore xcodebuild warnings on M1,JDK-8279702,5065900,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,goetz,goetz,goetz,2022-01-10 07:54,2022-02-04 06:48,2023-10-01 09:56,2022-01-14 05:55,17,18,19,,,,,,18,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"Xcodebuild outputs warnings on M1 regarding libraries unrelated to the JDK (at least on some installs). These warning can safely be ignored (and are ignored by build scripts of e.g. webm https://chromium.googlesource.com/webm/libwebp/+/refs/heads/main/iosbuild.sh).

The problem arises when checking the Xcodebuild version by processing the whole output of “xcodebuild -version”. 

Related issues from other projects are 
https://github.com/KhronosGroup/MoltenVK/issues/1268,
https://github.com/flutter/flutter/issues/72492#issuecomment-800467668.

",,,,,,,,,,JDK-8280645,JDK-8281270,JDK-8280312,JDK-8281002,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2vlo3:",9223372036854775807,b32,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-01-10 07:57;goetz;I opened this on behalf of Johannes Bechberger of the SAP OpenJDK team.;;;","2022-01-10 09:50;mikael;FWIW I also ran into this the other day and after talking to [~erikj] tried simply directing stderr to /dev/null, which seems to do the trick. Something like this:

diff --git a/make/autoconf/toolchain.m4 b/make/autoconf/toolchain.m4
index 9666d9a6d9d..f49dc3be5f2 100644
--- a/make/autoconf/toolchain.m4
+++ b/make/autoconf/toolchain.m4
@@ -234,7 +234,7 @@ AC_DEFUN_ONCE([TOOLCHAIN_DETERMINE_TOOLCHAIN_TYPE],
   if test ""x$OPENJDK_TARGET_OS"" = xmacosx; then
     if test -n ""$XCODEBUILD""; then
       # On Mac OS X, default toolchain to clang after Xcode 5
-      XCODE_VERSION_OUTPUT=`""$XCODEBUILD"" -version 2>&1 | $HEAD -n 1`
+      XCODE_VERSION_OUTPUT=`""$XCODEBUILD"" -version 2>/dev/null | $HEAD -n 1`
       $ECHO ""$XCODE_VERSION_OUTPUT"" | $GREP ""Xcode "" > /dev/null
       if test $? -ne 0; then
         AC_MSG_NOTICE([xcodebuild output: $XCODE_VERSION_OUTPUT]);;;","2022-01-10 23:30;goetz;Hi Mikael, 
similar was proposed by Johannes:
https://github.com/openjdk/jdk/pull/7015
but he depends on the OCA check.
I assume we just have to wait until it is checked,
or do we have to take further steps on our side?
;;;","2022-01-10 23:36;mikael;It's not urgent for me to get this fixed, so if it takes a few days to get the OCA signed and verified that's fine with me.;;;","2022-01-11 00:12;goetz;He is covered by the SAP OCA, it only needs to be verified. ;;;","2022-01-12 02:27;goetz;Fix request [18]

We moved the PR to jdk18, as we think it should be fixed there, too:
https://github.com/openjdk/jdk18/pull/95

As this is a very trivial build fix, it should be acceptable for RDP1.;;;","2022-01-12 02:29;goetz;Making it P3 as the build is broken.;;;","2022-01-13 18:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/95
Date: 2022-01-12 09:42:07 +0000;;;","2022-01-14 05:55;roboduke;Changeset: 4b520f00
Author:    Johannes Bechberger <johannes.bechberger@sap.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-01-14 13:53:53 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/4b520f0001be5f33996d5ab7d9ad75773a847e54
;;;","2022-01-17 17:58;roboduke;Changeset: 4b520f00
Author:    Johannes Bechberger <johannes.bechberger@sap.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-01-14 13:53:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4b520f0001be5f33996d5ab7d9ad75773a847e54
;;;","2022-01-25 04:29;roboduke;Changeset: 4b520f00
Author:    Johannes Bechberger <johannes.bechberger@sap.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-01-14 13:53:53 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/4b520f0001be5f33996d5ab7d9ad75773a847e54
;;;","2022-01-31 00:39;burban;Fix request [17u]

It avoids `configure` to fail on macOS/AArch64, it applies cleanly and it's a trivial fix.;;;","2022-01-31 00:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/131
Date: 2022-01-31 08:34:39 +0000;;;","2022-01-31 04:01;burban;Fix request [11u]

It avoids `configure` to fail on macOS/AArch64, it applies almost cleanly (conflict in copyright header) and it's a trivial fix. ;;;","2022-01-31 04:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/802
Date: 2022-01-31 12:00:14 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] modify compiler/loopopts/TestSkeletonPredicateNegation.java to run on C1 also,JDK-8279695,5065893,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fmatte,fmatte,fmatte,2022-01-10 06:42,2022-10-11 04:10,2023-10-01 09:56,2022-01-11 01:41,18,,,,,,,,18,hotspot,,0,CPU22_04-critical-approved,CPU22_04-critical-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-19,,,,,,,,,,,,"The test does 1987 iterations of a loop that does 52 inner iterations, and on every inner iteration, an array-out-of-bounds-exception is thrown. And this is run 10.000 times.C2 manages to collapse this to nothing. C1 doesn't and that makes it slow.

Reducing the Inner and outer iterations to make it work on C1 also.
Thanks [~neliasso] for the above analysis.",,,,,,,,,,JDK-8282242,JDK-8282174,JDK-8282084,JDK-8281478,JDK-8280627,JDK-8280306,JDK-8280856,JDK-8295132,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279032,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vlmj:",9223372036854775807,b31,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-10 06:57;chagedorn;ILW = Same as JDK-8279032 = P4;;;","2022-01-11 00:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/92
Date: 2022-01-11 08:27:15 +0000;;;","2022-01-11 01:41;roboduke;Changeset: 86d0abb6
Author:    Fairoz Matte <fmatte@openjdk.org>
Committer: Nils Eliasson <neliasso@openjdk.org>
Date:      2022-01-11 09:39:39 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/86d0abb66bd2fe1edd15b81d351ea3b3c90fd256
;;;","2022-01-12 17:07;roboduke;Changeset: 86d0abb6
Author:    Fairoz Matte <fmatte@openjdk.org>
Committer: Nils Eliasson <neliasso@openjdk.org>
Date:      2022-01-11 09:39:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/86d0abb66bd2fe1edd15b81d351ea3b3c90fd256
;;;","2022-01-25 04:28;roboduke;Changeset: 86d0abb6
Author:    Fairoz Matte <fmatte@openjdk.org>
Committer: Nils Eliasson <neliasso@openjdk.org>
Date:      2022-01-11 09:39:39 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/86d0abb66bd2fe1edd15b81d351ea3b3c90fd256
;;;","2022-02-04 04:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/145
Date: 2022-02-04 11:59:21 +0000;;;","2022-02-09 09:02;jdowland;Fix Request (17u)

This is a test-only change, for Oracle parity. The affected test passes for me on jdk17u-dev master before and afterwards.

Review thread: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2022-February/011927.html

Thanks!;;;","2022-10-09 10:16;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2022-10-09 10:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1416
Date: 2022-10-09 17:31:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Remove dead code,JDK-8279682,5065881,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,egahlin,egahlin,2022-01-10 03:57,2022-01-24 23:57,2023-10-01 09:56,2022-01-10 21:50,19,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,Dead code has accumulated over the last few release. Let's remove it.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vljv:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-01-10 08:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7006
Date: 2022-01-10 11:58:41 +0000;;;","2022-01-10 21:50;roboduke;Changeset: ec5a455e
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-01-11 05:49:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ec5a455efb04a503836f10db214d6b95bf9b4c37
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS cannot handle non-existent JAR file in bootclassapth,JDK-8279675,5065839,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,webbuggrp,webbuggrp,2022-01-08 00:15,2022-01-26 17:21,2023-10-01 09:56,2022-01-21 15:48,17,,,,,,,,19,hotspot,,0,cds,dcsswa,reproducer-no,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
FROM ubuntu:20.04

A DESCRIPTION OF THE PROBLEM :
I'm building a docker container based on Ubuntu using the openjdk-17-jre-headless package installed via apt.

The Ubuntu package seems to have some sort of patch that adds /usr/share/java/java-atk-wrapper.jar to the boot class path. This file doesn't actually exist and thus has no effect. However, if I produce a *.jsa file with this JDK, then even though -XX:ArchiveClassesAtExit works just fine, a subsequent call with -XX:SharedArchiveFile then doesn't work (same JDK, same boot class path with same missing jar) and fails with ""BOOT classpath mismatch, actual =/usr/lib/jvm/java-17-openjdk-amd64/lib/modules:/usr/share/java/java-atk-wrapper.jar"".


Console Output:


------------------------
-XX:ArchiveClassesAtExit
------------------------

#7 0.188 + FILEBOT_OPTS=-Xshare:on -XX:ArchiveClassesAtExit=/classes.jsa -Xlog:class+path=info filebot -script fn:sysenv
#7 0.195 [0.001s][info][class,path] bootstrap loader class path=/usr/lib/jvm/java-17-openjdk-amd64/lib/modules:/usr/share/java/java-atk-wrapper.jar
#7 0.199 [0.005s][info][class,path] Expecting BOOT path=/usr/lib/jvm/java-17-openjdk-amd64/lib/modules
#7 0.199 [0.005s][info][class,path] Expecting -Djava.class.path=
#7 0.199 [0.005s][info][class,path] checking shared classpath entry: /usr/lib/jvm/java-17-openjdk-amd64/lib/modules
#7 0.199 [0.005s][info][class,path] ok
#7 0.200 [0.006s][info][class,path] app loader class path=/usr/share/filebot/jar/filebot.jar
...


------------------------
-XX:SharedArchiveFile
------------------------
#7 4.597 + FILEBOT_OPTS=-Xshare:on -XX:SharedArchiveFile=/classes.jsa -Xlog:class+path=info filebot -script fn:sysenv
#7 4.608 [0.002s][info][class,path] bootstrap loader class path=/usr/lib/jvm/java-17-openjdk-amd64/lib/modules:/usr/share/java/java-atk-wrapper.jar
#7 4.620 [0.012s][info][class,path] Expecting BOOT path=/usr/lib/jvm/java-17-openjdk-amd64/lib/modules
#7 4.620 [0.012s][info][class,path] Expecting -Djava.class.path=
#7 4.620 [0.012s][info][class,path] checking shared classpath entry: /usr/lib/jvm/java-17-openjdk-amd64/lib/modules
#7 4.620 [0.012s][info][class,path] ok
#7 4.620 [0.012s][info][class,path] Expecting BOOT path=/usr/lib/jvm/java-17-openjdk-amd64/lib/modules
...
#7 4.634 [0.023s][info][class,path] [BOOT classpath mismatch, actual =/usr/lib/jvm/java-17-openjdk-amd64/lib/modules:/usr/share/java/java-atk-wrapper.jar
#7 4.634 Error occurred during initialization of VM
#7 4.634 Unable to use shared archive.
...

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
If I use the same JDK, then I expect the generated *.jsa to work, even if the OpenJDK is somehow patched to include non-existent boot class path entries.

CUSTOMER SUBMITTED WORKAROUND :
The work around is to not use the openjdk-17-jre-headless package, and instead some other generic OpenJDK build.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2vlaj:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-10 03:10;sswsharm;Moving it to JDK for further analysis.;;;","2022-01-11 11:12;mseledtsov;ILW = MLM = P4;;;","2022-01-11 23:34;iklam;The problem is both static dump and dynamic dump removes non-existent JAR files from the recorded bootclasspath:

Static CDS dump:

$ cat > HelloWorld.classlist <<EOF
HelloWorld
EOF
$ java -Xlog:class+path -Xbootclasspath/a:notexist.jar -Xshare:dump \
     -XX:SharedClassListFile=HelloWorld.classlist -cp HelloWorld.jar \
     -XX:SharedArchiveFile=static.jsa
[0.002s][info][class,path] bootstrap loader class path=/jdk2/bld/gil/images/jdk/lib/modules:notexist.jar
[0.026s][info][class,path] app loader class path=HelloWorld.jar
[0.026s][info][class,path] opened: HelloWorld.jar
[0.109s][info][class,path] add boot shared path (jrt) /jdk2/bld/gil/images/jdk/lib/modules
[0.109s][info][class,path] add app shared path (jar) HelloWorld.jar
$ java -Xshare:on -Xlog:class+path -Xbootclasspath/a:notexist.jar \
     -XX:SharedArchiveFile=static.jsa -cp HelloWorld.jar HelloWorld
[0.003s][info][class,path] bootstrap loader class path=/jdk2/bld/gil/images/jdk/lib/modules:notexist.jar
[0.032s][info][class,path] Expecting BOOT path=/jdk2/bld/gil/images/jdk/lib/modules
[0.032s][info][class,path] Expecting -Djava.class.path=HelloWorld.jar
[0.032s][info][class,path] checking shared classpath entry: /jdk2/bld/gil/images/jdk/lib/modules
[0.032s][info][class,path] ok
[0.032s][info][class,path] checking shared classpath entry: HelloWorld.jar
[0.032s][info][class,path] ok
[0.032s][info][class,path] [BOOT classpath mismatch, actual =/jdk2/bld/gil/images/jdk/lib/modules:notexist.jar
An error has occurred while processing the shared archive file.
shared class paths mismatch (hint: enable -Xlog:class+path=info to diagnose the failure)
Error occurred during initialization of VM
Unable to use shared archive.
;;;","2022-01-11 23:43;iklam;Dynamic CDS dump:

$ rm -f notexist.jar
$ java -Xlog:class+path -Xbootclasspath/a:notexist.jar -cp HelloWorld.jar \
     -XX:ArchiveClassesAtExit=dynamic.jsa HelloWorld
[0.003s][info][class,path] bootstrap loader class path=/jdk2/bld/gil/images/jdk/lib/modules:notexist.jar
[0.028s][info][class,path] Expecting BOOT path=/jdk2/bld/gil/images/jdk/lib/modules
[0.028s][info][class,path] Expecting -Djava.class.path=
[0.028s][info][class,path] checking shared classpath entry: /jdk2/bld/gil/images/jdk/lib/modules
[0.028s][info][class,path] ok
[0.030s][info][class,path] app loader class path=HelloWorld.jar
[0.031s][info][class,path] opened: HelloWorld.jar
[0.062s][info][class,path] add boot shared path (jrt) /jdk2/bld/gil/images/jdk/lib/modules
[0.062s][info][class,path] add app shared path (jar) HelloWorld.jar
Hello World
$ java -Xshare:on -Xlog:class+path -Xbootclasspath/a:notexist.jar \
     -cp HelloWorld.jar -XX:SharedArchiveFile=dynamic.jsa HelloWorld
[0.002s][info][class,path] bootstrap loader class path=/jdk2/bld/gil/images/jdk/lib/modules:notexist.jar
[0.026s][info][class,path] Expecting BOOT path=/jdk2/bld/gil/images/jdk/lib/modules
[0.026s][info][class,path] Expecting -Djava.class.path=
[0.026s][info][class,path] checking shared classpath entry: /jdk2/bld/gil/images/jdk/lib/modules
[0.026s][info][class,path] ok
[0.026s][info][class,path] Expecting BOOT path=/jdk2/bld/gil/images/jdk/lib/modules
[0.026s][info][class,path] Expecting -Djava.class.path=HelloWorld.jar
[0.026s][info][class,path] checking shared classpath entry: /jdk2/bld/gil/images/jdk/lib/modules
[0.026s][info][class,path] ok
[0.026s][info][class,path] checking shared classpath entry: HelloWorld.jar
[0.026s][info][class,path] ok
[0.026s][info][class,path] [BOOT classpath mismatch, actual =/jdk2/bld/gil/images/jdk/lib/modules:notexist.jar
An error has occurred while processing the shared archive file.
shared class paths mismatch (hint: enable -Xlog:class+path=info to diagnose the failure)
Error occurred during initialization of VM
Unable to use shared archive.
;;;","2022-01-11 23:44;iklam;Note that a similar scenario is tested by runtime/cds/appcds/NonExistClasspath.java, but the test would pass as long as there's at least one JAR file on the Xbootclasspath that exists (hello.jar in the following trace)

[0.002s][info][class,path] bootstrap loader class path=/jdk2/bld/zoo/images/jdk/lib/modules:/jdk2/tmp/jtreg1/work/scratch/non-exist.jar:/jdk2/tmp/jtreg1/work/scratch/hello.jar
[0.002s][info][class,path] opened: /jdk2/tmp/jtreg1/work/scratch/hello.jar
[0.030s][info][class,path] Expecting BOOT path=/jdk2/bld/zoo/images/jdk/lib/modules:/jdk2/tmp/jtreg1/work/scratch/hello.jar
[0.030s][info][class,path] Expecting -Djava.class.path=
[0.030s][info][class,path] checking shared classpath entry: /jdk2/bld/zoo/images/jdk/lib/modules
[0.030s][info][class,path] ok
[0.030s][info][class,path] checking shared classpath entry: /jdk2/tmp/jtreg1/work/scratch/hello.jar
[0.030s][info][class,path] ok
Hello World;;;","2022-01-14 18:09;ccheung;The bug is in FileMapInfo::validate_boot_class_paths() :

  } else if (dp_len == 0 && rp != NULL) {
    if (relaxed_check) {
      return true;   // ok, relaxed check, runtime has extra boot append path entries
  } else {
      mismatch = true;
  }

Before setting mismatch to true, it should check if some of the runtime paths (rp) exists.
If all the runtime paths don't exist, there is no mismatch.;;;","2022-01-20 12:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7169
Date: 2022-01-20 20:21:39 +0000;;;","2022-01-21 15:48;roboduke;Changeset: b9ae7790
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-01-21 23:47:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b9ae77906e9c886ee239871b75c183c5ec7ae846
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AudioClip.play doesn't work due to NullPointerException when creating DataPusher,JDK-8279673,5065873,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aturbanov,aturbanov,aturbanov,2022-01-10 03:00,2022-02-02 17:30,2023-10-01 09:56,2022-01-26 23:02,17,18,,,,,,,19,client-libs,,0,,,,,,,,,,,,,,,,,,,,"    import java.applet.AudioClip;
    import java.io.IOException;
    import java.net.URL;


    public class AudioNpe {
        public static void main(String[] args) throws IOException, InterruptedException {
            URL url = new URL(""https://file-examples-com.github.io/uploads/2017/11/file_example_WAV_1MG.wav"");
            AudioClip content = (AudioClip)url.getContent();
            content.play();

            Thread.sleep(10000L);
        }
    }

	  at java.lang.Thread.<init>(Thread.java:393)
	  at java.lang.Thread.<init>(Thread.java:760)
	  at com.sun.media.sound.JSSecurityManager.createThread(JSSecurityManager.java:115)
	  at com.sun.media.sound.DataPusher.start(DataPusher.java:117)
	  - locked <0x955> (a com.sun.media.sound.DataPusher)
	  at com.sun.media.sound.JavaSoundAudioClip.startImpl(JavaSoundAudioClip.java:202)
	  - locked <0x95e> (a com.sun.media.sound.JavaSoundAudioClip)
	  at com.sun.media.sound.JavaSoundAudioClip.play(JavaSoundAudioClip.java:152)
	  at main.java.AudioNpe.main(AudioNpe.java:12)

It happens because of bug in com.sun.media.sound.JSSecurityManager#createThread implementation: variable 'String name', which supposed to be used - actually unused and <null> thread name is passed to 'Thread' constructor.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vli3:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7d98911c,,,,,,,,,"2022-01-10 03:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/6382
Date: 2021-11-14 20:02:27 +0000;;;","2022-01-26 23:02;roboduke;Changeset: 2ea0edf2
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-01-27 07:00:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2ea0edf2c40edde4c191864a40e7a4d741ac0b8e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Implement semantic checks for value classes,JDK-8279672,5065872,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-01-10 02:50,2022-01-11 16:29,2023-10-01 09:56,2022-01-11 16:29,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,,,,,,,,,,,,,,,,,,,,"
From https://openjdk.java.net/jeps/8277163:

A value class declaration is subject to the following restrictions:

The class is implicitly final, so cannot be extended. The class may not be declared abstract.

All instance fields are implicitly final, so must be assigned exactly once by constructors or initializers, and cannot be assigned outside of a constructor or initializer.

The class does not implement—directly or indirectly—IdentityObject (see below). This implies that the superclass is either Object or a stateless abstract class.

No constructor makes a super constructor call. Instance creation will occur without executing any superclass initialization code.

No instance methods are declared synchronized.

(Possibly) The class does not declare a finalize() method.

(Possibly) The constructor does not make use of this except to set the fields in the constructor body, or perhaps after all fields are definitely assigned.

// ----

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vlhv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-11 02:44;sadayapalam;Basically, we need to push down the existing semantic checks and diagnostics to value classes from primitive classes and the latter receive the right treatment by virtue of being value classes (all primitive classes are value classes with additional properties around nullability, atomicity etc);;;","2022-01-11 04:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/597
Date: 2022-01-11 12:20:38 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test/jdk/com/sun/jdi/TestScaffold.java uses wrong condition,JDK-8279669,5065870,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,sgehwolf,sgehwolf,2022-01-10 02:22,2022-12-07 20:21,2023-10-01 09:56,2022-01-11 05:15,,,,,,,,,19,core-svc,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,,,,,,,,,,,,,"Originally reported here:
https://github.com/openjdk/jdk/pull/6652

Condition is obviously wrong, because if name starts with ""java."" other 2 conditions are always true. Intent, as I understand it, was to redefine class where debug event took place (in case of test classes), unless it took place in class of jdk itself, in which case redefine test's main class (if redefineAtEvents is true of course). Check for class names starting with ""jdk."" was added with later commit [1], not touching that wrong condition (check for classes belonging to jdk) and putting check to else branch instead (therefore not doing any redefinition in case name starts with ""jdk."").

Actually fix is done to be then backported to jdk8u, where com/sun/jdi/RedefineCrossEvent.java test stared failing after recent backport [2], due to missing check for classes starting with ""jdk."" [3]:
...
Redefining class jdk.internal.misc.TerminatingThreadLocal (no class loader)
FAIL: redefine - unexpected exception: java.io.FileNotFoundException: /home/tester/test.1638289866/jdk/JTwork/classes/com/sun/jdi/jdk/internal/misc/TerminatingThreadLocal.class (No such file or directory)
...

This test actually passes for (latest) jdk. However fixing this condition before doing backport, rather than backporting it in current form seems like right thing to do. I tested this locally and jdi tests are passing with this change for latest jdk (and also for jdk8u).

[1] https://github.com/zzambers/jdk/commit/426873751c710061d0f9bc713a0de47373e51418#diff-778880449f85966d3c6b219b8ceb41fdbbe7acc5e520d2aa27aada3f33bf1eab
[2] https://bugs.openjdk.java.net/browse/JDK-8273772
[3] https://github.com/openjdk/jdk8u/blob/7d3c0bede34930cadd76644e58bf56f2a83c3d01/jdk/test/com/sun/jdi/TestScaffold.java#L535",,,,,,,,,,JDK-8283178,JDK-8282457,JDK-8282456,,,,,,,,,,,,,,,,,,,,,,,,JDK-8206330,JDK-8288170,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vlhf:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-01-10 02:23;sgehwolf;Reported on behalf of Zdenek (and assigning to me on his behalf). He has a fix for this.;;;","2022-01-10 04:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/6652
Date: 2021-12-01 19:19:02 +0000;;;","2022-01-11 05:15;roboduke;Changeset: 4c52eb39
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-01-11 13:14:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4c52eb39431c2479b0d140907bdcc0311d30f871
;;;","2022-02-22 16:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/837
Date: 2022-02-23 00:13:55 +0000;;;","2022-02-23 07:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/175
Date: 2022-02-23 15:47:13 +0000;;;","2022-02-24 07:24;zzambers;8u review: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2022-February/014578.html;;;","2022-02-24 07:43;zzambers;Fix Request 11u: should be fixed in all jdks, low risk (simple change in test class), I ran tests in test/jdk/com/sun/jdi - passed for me;;;","2022-02-24 07:44;zzambers;Fix Request 17u: should be also fixed in 17u, applies cleanly for 17u, I ran tests in test/jdk/com/sun/jdi - passed for me ;;;","2022-03-14 09:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk8u-dev/pull/6
Date: 2022-03-14 16:44:49 +0000;;;","2022-03-14 15:37;zzambers;Fix Request [8u]: should be fixed on 8u (as on other jdks), it fixes com/sun/jdi/RedefineCrossEvent.java test for 8u (actually initial motivation for this fix), low risk (test only), tests in test/com/sun/jdi passed form me with this patch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SetLocalXXX on virtual threads needs to be specified/implemented,JDK-8279667,5065867,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,sspitsyn,alanb,alanb,2022-01-10 01:24,2022-02-24 06:21,2023-10-01 09:56,2022-02-24 06:21,repo-loom,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,,"SetLocalXXX should work for virtual threads when setting locals in the top-most frame of a mounted virtual thread. For other cases it should fail. Specification, implementation, and test work will be required.

One approach to specifying the limitation is to require the virtual thread provided to SetLocalXXX to be the current thread or a thread suspended at a breakpoint.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vlgr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-02-14 12:37;sspitsyn;My guess is SetLocalXXX should work if target thread is at any event, is current or suspended when mounted. In other words, it should work when target thread is mounted. There can be some surprises in transient cases when the target thread is mounted but not suspended. In such cases, the work has to be done in handshakes and fail when virtual thread is unmounted at a handshake time. Another tricky case to handle is when carrier thread is passive or in VTMT (mount/unmount transition). I'm not sure this case is going to work from scratch.
The JVMTI error codes to consider for unmounted virtual thread and passive carrier thread cases:
  OPAQUE_FRAME (this code already specified for SetLocalXXX - this is my preference)
  ABSENT_INFORMATION (not specified for SetLocalXXX, can be good to distinguish from OPAQUE_FRAME cases)
  THREAD_NOT_SUSPENDED (this does not work for unmounted suspended)

Also, we may want to introduce new error code, e.g. THREAD_UNMOUNTED.
But I'm not sure if it is okay to use the term ""UNMOUNTED"".
Also, it does not work for passive carrier threads.;;;","2022-02-15 00:38;alanb;I thought that deferred updates were not supported with continuations and the only feasible approach for the short term is to limit SetLocalXXX to the top-most frame. I think we have to careful that implementation constraints and details around mount transition do not leak into the spec, hence the suggestion that it be limited to the current thread or suspended at a breakpoint (would BREAKPOINTED work for that?).

SetLocalXXX is specified to return OPAQUE_FRAME for ""Not a visible frame"" case. It's probably okay to use the exception but it will require the description in SetLocalXXX to be updated.;;;","2022-02-15 05:48;rpressler;If we restrict it to the topmost frame of the current thread, i.e. a thread that's stopped at a breakpoint, then it should just work. The virtual thread is always mounted, and the topmost frame is known to be interpreted.;;;","2022-02-15 17:51;sspitsyn;Thank you for the comments.
I thought deferred locals  are not supported with unmounted continuations only.
Now I see why the suggestion was to support the topmost frame only.;;;","2022-02-24 06:21;sspitsyn;The changeset is:
  https://git.openjdk.java.net/loom/commit/5749f7612315baee291a8a4947f72872a002cfe2;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: JFR crashes at 0x0,JDK-8279664,5065864,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,xlinzheng,xlinzheng,xlinzheng,2022-01-10 00:15,2022-01-20 19:50,2023-10-01 09:56,2022-01-20 19:50,repo-riscv-port,,,,,,,,repo-riscv-port,hotspot,,0,,,,,,,,,,,,,,,,,,,,"RISC-V build currently could seldom crash at 0x0 when JFR is enabled. The reason is unknown because there is very little useful information in the hs_err_pid log: the pc is 0x0 and the ra is 0x0, too. Note that it is also reproducible after checking out to [the RISC-V initial load patch](https://github.com/openjdk/riscv-port/commit/7148c39832fe522bad91df77ef4b5c9371193c35) on the HiFive Unleashed board. Still addressing the issue yet.

Approach to reproduce the issue:
modify the line `@run main/othervm jdk.jfr.jcmd.TestJcmdStartStopDefault` in `test/jdk/jdk/jfr/jcmd/TestJcmdStartStopDefault.java` to 

```
@run main/othervm jdk.jfr.jcmd.TestJcmdStartStopDefault
@run main/othervm jdk.jfr.jcmd.TestJcmdStartStopDefault
@run main/othervm jdk.jfr.jcmd.TestJcmdStartStopDefault
@run main/othervm jdk.jfr.jcmd.TestJcmdStartStopDefault
...
```
to violently jtreg this test in a do...while shell loop could help to reproduce this issue.

An interesting thing is that C910 could not reproduce this after a one-week while-true long run.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-01-10 00:15;xlinzheng;hs_err_pid9430.log;https://bugs.openjdk.org/secure/attachment/97558/hs_err_pid9430.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,"0|i2vlg3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-10 00:42;xlinzheng;Thank you for the update, Christian :-);;;","2022-01-10 00:45;xlinzheng;As the hs_err log describes, I would assume it is calling `jdk.jfr.internal.EventWriter.beginEvent()` because only this method could generate the situation alike this hs_err log, which has a j_rarg0 (EventWriter) and a j_rarg1 (PlatformEventType).;;;","2022-01-10 01:59;xlinzheng;AArch64 reveals no error so it might be a riscv64 related issue.;;;","2022-01-10 22:26;xlinzheng;This problem is very obscure. At a first glance, I think it might be related to the new frame structure.;;;","2022-01-13 04:58;xlinzheng;I have asked my dear colleague Denghui, who is quite familiar with JFR, and received some useful suggestions.

In the `default.jfc`:
```
<event name=""jdk.ExecutionSample"">
      <setting name=""enabled"" control=""method-sampling-enabled"">true</setting>
      <setting name=""period"" control=""method-sampling-java-interval"">20 ms</setting>
</event>
```

By changing the 'true' to 'false', the problem seems gone. So maybe it relates to JFR's stack tracing behavior.;;;","2022-01-16 18:51;xlinzheng;Update:

Commenting out `PosixSignals::do_suspend` and `PosixSignals::do_resume`'s pthread_kill related code, and problems seems gone. But still weird. I see all code here as correct.

```
void PosixSignals::do_resume(OSThread* osthread) {
  assert(osthread->sr.is_suspended(), ""thread should be suspended"");
  assert(!sr_semaphore.trywait(), ""invalid semaphore state"");

  if (osthread->sr.request_wakeup() != os::SuspendResume::SR_WAKEUP_REQUEST) {
    // failed to switch to WAKEUP_REQUEST
    ShouldNotReachHere();
    return;
  }

  while (true) {
//    if (sr_notify(osthread) == 0) {
      if (sr_semaphore.timedwait(2)) {
        if (osthread->sr.is_running()) {
          return;
        }
      }
//    } else {
//      ShouldNotReachHere();
//    }
  }

  guarantee(osthread->sr.is_running(), ""Must be running!"");
}
```

```
bool PosixSignals::do_suspend(OSThread* osthread) {
  assert(osthread->sr.is_running(), ""thread should be running"");
  assert(!sr_semaphore.trywait(), ""semaphore has invalid state"");

  // mark as suspended and send signal
  if (osthread->sr.request_suspend() != os::SuspendResume::SR_SUSPEND_REQUEST) {
    // failed to switch, state wasn't running?
    ShouldNotReachHere();
    return false;
  }

//  if (sr_notify(osthread) != 0) {
//    ShouldNotReachHere();
//  }

  // managed to send the signal and switch to SUSPEND_REQUEST, now wait for SUSPENDED
  while (true) {
    if (sr_semaphore.timedwait(2)) {
      break;
    } else {
      // timeout
      os::SuspendResume::State cancelled = osthread->sr.cancel_suspend();
      if (cancelled == os::SuspendResume::SR_RUNNING) {
        return false;
      } else if (cancelled == os::SuspendResume::SR_SUSPENDED) {
        // make sure that we consume the signal on the semaphore as well
        sr_semaphore.wait();
        break;
      } else {
        ShouldNotReachHere();
        return false;
      }
    }
  }

  guarantee(osthread->sr.is_suspended(), ""Must be suspended"");
  return true;
}
```

But the SR_handler seems also not erroneous to me. I think I shall update the Ubuntu first.;;;","2022-01-19 00:33;xlinzheng;Update:

The problem still exists after updating Ubuntu to 21.10, unfortunately.;;;","2022-01-20 05:38;xlinzheng;Oh my god, after examining for hundreds of times, I think I know where is wrong...;;;","2022-01-20 05:49;xlinzheng;And it shall be a P2 due to the regression.;;;","2022-01-20 07:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/riscv-port/pull/49
Date: 2022-01-20 15:02:20 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/jvmti/GetLocalVariable/GetLocalWithoutSuspendTest.java fails on Windows in loom repo,JDK-8279663,5065862,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,alanb,alanb,2022-01-09 23:55,2022-07-08 15:17,2023-10-01 09:56,2022-04-28 06:08,repo-loom,,,,,,,,repo-loom,hotspot,,0,intermittent,,,,,,,,,,,,,,,,,,,"loom repo, Windows only, higher tier that runs the test with -Xbatch -Xcomp, -XX:-TieredCompilation, -XX:CompileThreshold=100.

The test seems to get a stack overflow, typical output is:

----------System.out:(25/1585)*----------
AGENT: Agent_OnLoad started.
AGENT: Agent_Initialize started
AGENT: Agent_Initialize finished
AGENT: VM init event
AGENT: Start new thread that performs GetLocalObject calls on a running target thread
### Java-Test: Set target thread for get local variable calls by agent.
### Java-Test: Test how many frames fit on the stack by performing recursive calls until
### Java-Test: StackOverflowError is thrown
### Java-Test: Testing with target depth: 20664
### Java-Test: Begin Test.
### Java-Test: 0 ms  Iteration : 0  waitTime : 1
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\os_windows.cpp:2610
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\\workspace\\open\\src\\hotspot\\os\\windows\\os_windows.cpp:2610), pid=27220, tid=52708
#  assert(!in_vm) failed: Undersized StackShadowPages
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (fastdebug build 19-internal+0-2022-01-09-1508384.alan.bateman.loom)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-internal+0-2022-01-09-1508384.alan.bateman.loom, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\4\\hs_err_pid27220.mdmp
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\4\\hs_err_pid27220.log
----------System.err:(0/0)----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290013,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vlfn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-06 16:59;sspitsyn;This is a test issue.
The test provokes StackOverflowError to find max possible stack depth:
    public int recursiveMethod(int depth, int targetStackDepth) {
        int maxDepth = depth;
        try {
            if (depth == targetStackDepth) {
                notifyAgentToGetLocal(depth - 100, waitCycles);
            } else {
                maxDepth = recursiveMethod(depth + 1, targetStackDepth);
            }
        } catch (StackOverflowError e) {
            // Don't print message here, because this would likely trigger a new StackOverflowError
        }
        return maxDepth;
    }
Apparently, it does not always work as expected. It can be this fails on Windows only.
;;;","2022-02-06 18:20;dholmes;I don't think this is a test issue, this is a stack overflow generation issue with Windows. It may be related to stack banging, or it may be as the assert states that we don't have sufficient shadow space in some circumstances. You would need to check the core/hs_err file to determine exactly what the state of the stack was when the assertion fired. There may be something Loom specific affecting this.;;;","2022-02-07 16:04;sspitsyn;Okay, then it is most likely not a JVMTI issue.
Will try to check if JVMTI contributed anything to this.
Unfortunately, I've not been able to reproduce this on Windows yet. Will try more.
;;;","2022-03-13 00:59;sspitsyn;Moving this issue to the Runtime team for evaluation.
Please, feel free to move it back to JVM TI if necessary.;;;","2022-04-27 02:12;alanb;This test has been on the exclude list for a long time because it failed too often. Do we know if it fails in the jep-vt branch, or in the fibers branch with -XX:-LoomVM ?  ;;;","2022-04-27 15:23;coleenp;It fails in the fibers branch without the wrapper.  Thanks to [~erikj] I have a stack:

V  [jvm.dll+0x57fb67]  report_vm_error+0xb7  (debug.cpp:283)
V  [jvm.dll+0xc43ba6]  topLevelExceptionFilter+0x1d6  (os_windows.cpp:2606)  <== this is there the assert(!in_vm) is.
V  [jvm.dll+0xf37657]  JNI_CreateJavaVM$filt$0+0x17  (jni.cpp:3720)
C  [VCRUNTIME140.dll+0xef90]
C  [ntdll.dll+0xa20cf]
C  [ntdll.dll+0x51454]
C  [ntdll.dll+0xa0bfe]
V  [jvm.dll+0xf36ef7]  __chkstk+0x37  (chkstk.asm:109)
V  [jvm.dll+0x403612]  vframeStream::vframeStream+0x32  (vframe.inline.hpp:111)
V  [jvm.dll+0x7d61f2]  java_lang_Throwable::fill_in_stack_trace+0x292  (javaClasses.cpp:2790)
V  [jvm.dll+0x7d5f36]  java_lang_Throwable::fill_in_stack_trace+0x86  (javaClasses.cpp:2925)
V  [jvm.dll+0x63aa08]  Exceptions::throw_stack_overflow_exception+0x138  (exceptions.cpp:245)
V  [jvm.dll+0x7c6b0e]  JavaCalls::call_helper+0x35e  (javaCalls.cpp:388)
V  [jvm.dll+0xc44fac]  os::os_exception_wrapper+0x2c  (os_windows_x86.cpp:113)
V  [jvm.dll+0x7c769b]  JavaCalls::call_static+0x11b  (javaCalls.cpp:258)
V  [jvm.dll+0x7c78f3]  JavaCalls::call_static+0xa3  (javaCalls.cpp:278)
V  [jvm.dll+0xbf21db]  NativeLookup::lookup_style+0x38b  (nativeLookup.cpp:285)
V  [jvm.dll+0xbf199d]  NativeLookup::lookup_entry+0x1dd  (nativeLookup.cpp:335)
V  [jvm.dll+0xbf1533]  NativeLookup::lookup+0x93  (nativeLookup.cpp:440)
V  [jvm.dll+0x5254af]  CompileBroker::compile_method+0x41f  (compileBroker.cpp:1420)
V  [jvm.dll+0x5257a1]  CompileBroker::compile_method+0xd1  (compileBroker.cpp:1353)
V  [jvm.dll+0x50b7cf]  CompilationPolicy::compile_if_required+0x26f  (compilationPolicy.cpp:110)
V  [jvm.dll+0xa6d922]  LinkResolver::resolve_static_call+0x1c2  (linkResolver.cpp:1094)
V  [jvm.dll+0xa6c881]  LinkResolver::resolve_invoke+0xc1  (linkResolver.cpp:1626)
V  [jvm.dll+0xd053b4]  SharedRuntime::find_callee_info_helper+0x6a4  (sharedRuntime.cpp:1184)
V  [jvm.dll+0xd0c0b2]  SharedRuntime::resolve_sub_helper+0x222  (sharedRuntime.cpp:1377)
V  [jvm.dll+0xd0b6df]  SharedRuntime::resolve_helper+0x4f  (sharedRuntime.cpp:1249)
V  [jvm.dll+0xd0bd6f]  SharedRuntime::resolve_static_call_C+0x1ff  (sharedRuntime.cpp:1563)
;;;","2022-04-27 15:54;coleenp;It looks like the Windows StackShadowPages is 7 DEBUG_ONLY(+2) which is a lot smaller than Linux.  This is fine until we added a RegisterMap in the loom code in fill_in_stack_trace.

#ifdef ASSERT
  vframeStream st(thread, false /* stop_at_java_call_stub */, false /* process_frames */);
#endif
  int total_count = 0;
  RegisterMap map(thread, false /* update */, false /* process_frames */, true /* walk_cont */);
  int decode_offset = 0;

This code creates a RegisterMap on the ASSERT path in the vframeStream constructor, and another one.

Trying to make the windows StackShadowPages 7 DEBUG_ONLY(+4) to see if that causes this to pass.
;;;","2022-04-28 12:47;coleenp;Correction: there doesn't seem to be a *new* RegisterMap in the loom code, but the RegisterMap is a few words larger.

Adding this to fill_in_stack_trace() in mainline, also makes it fail with the same crash:

  log_info(os)(""in fill_in_stack_trace sp "" INTPTR_FORMAT, p2i(os::current_stack_pointer()));
;;;","2022-04-28 16:27;coleenp;RegisterMap in loom is 4752 bytes vs. 4736 in jdk/jdk, which isn't a big change.

On linux, printing stack pointers in javaCalls::call_helper and the callee fill_in_stack_trace for the StackOverflowCall here:
(gdb) print 0x00007f910b90d030-0x00007f910b90a900  
$1 = 10032  <= stack usage in mainline
(gdb) print 0x00007f1d117c7fd0-0x00007f1d117c5850
$2 = 10112  <= stack usage in loom
(gdb) print 10112-10032
$3 = 80  <= difference in bytes

On Windows, same test:
(gdb) print 0x2944309ba0-0x2944307350
$4 = 10320  <= stack usage in mainline
(gdb) print 0xaa44209b00-0xaa44207200
$5 = 10496 <= stack usage in loom
(gdb) print 10496-10320
$6 = 176 <= difference

So windows uses a bit more stack along the path that got the native stack overflow (thread_in_java).  With the smaller StackShadowPages default, this is enough to cause the native stack overflow, and the error message in the assert suggesting increasing StackShadowPage default is the right fix.

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/sa/ClhsdbScanOops.java can fail due to unexpected GC,JDK-8279662,5065861,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,alanb,alanb,2022-01-09 23:46,2023-02-28 03:53,2023-10-01 09:56,2022-02-02 13:53,19,repo-loom,,,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,"serviceability/sa/ClhsdbScanOops.java#id0 and serviceability/sa/ClhsdbScanOops.java#id1 fail higher tiers in the loom repo, the test is not run with the jtreg wrapper.

java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'java/lang/Thread' missing from stdout/stderr 

	at ClhsdbScanOops.testWithGcType(ClhsdbScanOops.java:106)
	at ClhsdbScanOops.main(ClhsdbScanOops.java:115)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1496)
Caused by: java.lang.RuntimeException: 'java/lang/Thread' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:340)
	at ClhsdbLauncher.runCmd(ClhsdbLauncher.java:166)
	at ClhsdbLauncher.run(ClhsdbLauncher.java:203)
	at ClhsdbScanOops.testWithGcType(ClhsdbScanOops.java:102)
	... 5 more

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'java/lang/Thread' missing from stdout/stderr 

JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'java/lang/Thread' missing from stdout/stderr",,,,,,,,,,JDK-8303337,JDK-8293619,JDK-8294219,JDK-8299512,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vlff:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-01-24 22:47;cjplummer;The test issues a clhsdb scanoops command over the entire range of the Eden space. This dumps the class name of each object in this range. It expects to find at least one java/lang/Thread reference, but there are none. It also is not happening when there are no VM args specified, but does when -Xcomp is specified.

;;;","2022-01-25 00:13;cjplummer;I'm also seeing this on linux-x64 and macosx-x64. In this case the complaint was not finding java/lang/Object. The number of objects found in the scan was very small. The end of the scan seems to indicate a problem:

0x00000007aaa01208 sun/nio/fs/UnixFileAttributeViews$Basic
0x00000007aaa01220 sun/nio/fs/UnixFileAttributes
0x00000007aaa012a0 java/nio/file/attribute/FileTime
0x00000007aacbb858 java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionNode

Why did we jump from 0x00000007aaa012a0 to 0x00000007aacbb858? FileTime is a small object.;;;","2022-01-25 00:22;cjplummer;I'm seeing a failure to scan to the end of the used part of the Eden space in all the failure cases. I think the above case is a bit of an anomaly in that it found the last object in the space, but missed a bunch before it. It the other failures I looked at it just seemed to skip the end of the used part of the Eden space. I wonder if this might have something to do with coming across a InstanceStackChunkKlass. We can't compute it's size, but the way scanning works it should just skip over the what it think the size is (based on the declared fields) and then treat every address after it as the start of an object until the address passes object verification. ;;;","2022-01-25 09:17;cjplummer;It looks like not scanning to the very end of the specified range is normal, even in the passing case.;;;","2022-01-25 17:20;cjplummer;Loom introduced code that triggers a full GC when the codecache is swept. This is likely messing up the test as it expects no GC to have been done before the scanoops. The GC is causing expected objects to no longer be in the Eden space. We could make the test look for types that only we know will also be present in -Xcomp runs, but this could be fragile. Right now this is the list of types it expects to find:

  java/lang/Object
  java/lang/Class
  java/lang/Thread
  java/lang/String
  [B
  [I

I'm not sure which of those types we can rely on always being present. Another option is to run scanoops on all regions. Lastly we could choose to not support running the test with -Xcomp, which is my current preference.;;;","2022-01-31 21:14;cjplummer;The solution is to run scanoops on both the eden gen and the old gen. This way the above types are always found in the output. This is pretty easy to do.;;;","2022-02-01 08:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7295
Date: 2022-02-01 05:29:36 +0000;;;","2022-02-02 13:53;roboduke;Changeset: fe0118f8
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-02-02 21:51:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fe0118f8040ce7e5e3d605942443e3a5d442fa92
;;;","2022-09-19 13:05;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.
Test passes SAP nightly testing passed.;;;","2022-09-19 13:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/692
Date: 2022-09-19 20:23:39 +0000;;;","2023-02-27 01:27;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
No risk, only a test change.
Clean backport except for Copyright, marked as clean.
Test passes. SAP nighlty testing passed.;;;","2023-02-27 01:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1776
Date: 2023-02-27 09:26:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Javac diagnostic compiler.err.primitive.class.must.not.implement.cloneable not valid anymore,JDK-8279656,5065857,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,sadayapalam,sadayapalam,2022-01-09 20:42,2022-01-19 04:16,2023-10-01 09:56,2022-01-19 04:16,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,,,,,,,"ATM, on Valhalla we restrict a primitive class from implementing cloneable interface. According to Dan, this is stale design choice.

""We had a recent conversation that concluded that cloning is reasonable in some use cases. For example, you could bundle a pair of cloneable reference types into a primitive class or value class, and want to do a deep copy.""

So we should drop the restriction.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vlej:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-14 02:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/603
Date: 2022-01-14 10:39:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Bogus error: incompatible types: Object cannot be converted to Foo,JDK-8279655,5065856,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,sadayapalam,sadayapalam,2022-01-09 20:35,2022-01-24 03:10,2023-10-01 09:56,2022-01-24 02:32,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,,,,,,,,,,,,,,,,,,,,"Thanks to Maurizio for reporting this:

// -- X.java
sealed interface Foo permits Bar { }
primitive class  Bar implements Foo { }

class Test {
   void test(Object o) {
      Foo foo = (Foo)o;
   }
}
$javac -g X.java
X.java:6: error: incompatible types: Object cannot be converted to Foo
      Foo foo = (Foo)o;
                     ^
1 error


Error goes away if interface is not sealed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vleb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-14 08:38;abimpoudis;I read the isCastable and areDisjoint methods on javac but I think this is more of a spec topic, so before proceeding here is my concrete question. 

To my understanding, while checking the relationship of Object (freely extensible) and Foo (sealed iface) we need to check for disjointness on Object and the implementing/permitted classes; Bar. The code (and spec) falls-through to assess whether the implicitly final class Bar--that is *not subtype of Object*--is disjoint. At this point we are already past the area of interest because the code checks if Bar is final and not an interface and it reasons that the two are disjoint.

Should this be treated as a subtype through a boxing conversion to the corresponding ref type before even we check for disjointness? 

Spec for quick reference:
https://docs.oracle.com/javase/specs/jls/se17/html/jls-5.html#jls-5.1.6.1;;;","2022-01-15 02:38;sadayapalam;I think this code should compile. As far as I see, the cast question should be decided by whether 'o' could hold at runtime, an instance of a type that is castable to Foo and this is clearly true.

This is likely one instance of the general problem captured by https://bugs.openjdk.java.net/browse/JDK-8244712 - there are places where we need to be preferentially/eagerly operating on the reference projection type (this terminology it would appear may not be current, but javac still uses it in implementation)  

In the language model the primitive class type Bar is not a subtype of j.l.O, but for the VM it is. (The class Bar gives rise to two types, Bar and Bar.ref, In the language model, Bar is not subtype of j.l.O but Bar.ref is. Bar and Bar.ref have no subtyping relation in the language model, only a light weight primtive widening/narrowing conversions are defined between them, while for the VM they have a subtype relationship.

Javac implementation has the unenviable job of having to operate on both models at the same time. The method com.sun.tools.javac.code.Type#referenceProjectionOrSelf is useful in cases where we want the answer the VM would want to hear. 

See the uses of this method in the implementation to get a picture of the problem.

To understand this with a very similar example, please do the following:

(1)  Apply this patch:

diff --git a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
index 96b84c652d1..d328d72ed0c 100644
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
@@ -1600,7 +1600,7 @@ public class Attr extends JCTree.Visitor {
             Type elemtype = types.elemtype(exprType); // perhaps expr is an array?
             if (elemtype == null) {
                 // or perhaps expr implements Iterable<T>?
-                Type base = types.asSuper(exprType.referenceProjectionOrSelf(), syms.iterableType.tsym);
+                Type base = types.asSuper(exprType, syms.iterableType.tsym);
                 if (base == null) {
                     log.error(tree.expr.pos(),
                               Errors.ForeachNotApplicableToType(exprType,


(2) Build and feed the test case from test/langtools/tools/javac/valhalla/lworld-values/EnhancedForLoopTest.java and see how it fails to compile (wrongly);;;","2022-01-15 03:18;sadayapalam;I had a strong feeling that we used to handle this scenario earlier - this intuition indeed turned out to be true.

At one point, we had this code chunk at the top of the areDisjoint() method:

           /* The disjointsness checks below are driven by subtyping. At the language level
               a reference projection type and its value projection type are not related by
               subtyping, thereby necessitating special handling.
            */
            if ((ss.isReferenceProjection() && ss.valueProjection() == ts) ||
                (ss.isPrimitiveClass() && ss.referenceProjection() == ts)) {
                return false;
            }

The fix for JDK-8244227 seems to have gotten rid of this hunk of code - perhaps incorrectly. (That code chunk itself won't solve the present problem) - but it is interesting that this problem was recognized and run into earlier.;;;","2022-01-15 03:19;sadayapalam;Commit c68ce892ca267e9b93ebfd3b693cfe4cb55b8c70 seems to have pulled out that change;;;","2022-01-21 13:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/612
Date: 2022-01-21 21:03:41 +0000;;;","2022-01-24 03:10;abimpoudis;Thank you for the analysis and the feedback [~sadayapalam]!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/incubator/vector/Vector256ConversionTests.java crashes randomly with SVE,JDK-8279654,5065855,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fgao,fgao,fgao,2022-01-09 20:10,2022-01-26 23:35,2023-10-01 09:56,2022-01-18 17:22,18,19,,,,,,,18,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,,"# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/matcher.cpp:1794
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/eriliu02/entllt/openjdk/jdk/jdk_src/src/hotspot/share/opto/matcher.cpp:1794), pid=3792173, tid=3792189
#  assert(C->node_arena()->contains(s->_leaf) || !has_new_node(s->_leaf)) failed: duplicating node that's already been matched
#
# JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-git-cd8783c08)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 18-internal+0-git-cd8783c08, mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x13f45d4]test Vector256ConversionTests.castShape(Species[short, 16, S_256_BIT], Species[int, 2, S_64_BIT], short(i)): success
castShape took 161 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b211449): success
test Vector256ConversionTests.castShape(Species[short, 16, S_256_BIT], Species[long, 1, S_64_BIT], short(i)): success
castShape took 147 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@337da6e): success
  Matcher::ReduceInst(State*, int, Node*&)+0xca4
#
STDERR:
WARNING: Using incubator modules: jdk.incubator.vector",,,,,,,,,,JDK-8280665,JDK-8280329,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271515,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2vle3:",9223372036854775807,b32,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-09 20:13;fgao;There is no match rule to subsume StoreVector (VectorStoreMask src)  into one instruction when the element basic type is T_BYTE even though pd_clone_node returns true.;;;","2022-01-10 00:37;chagedorn;ILW = C2 assert with vector test, single test?, disable compilation of affected method = HLM = P3;;;","2022-01-12 22:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/98
Date: 2022-01-13 06:34:18 +0000;;;","2022-01-18 17:22;roboduke;Changeset: af6c9aba
Author:    Fei Gao <fgao@openjdk.org>
Committer: Ningsheng Jian <njian@openjdk.org>
Date:      2022-01-19 01:20:53 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/af6c9abafaa3b8f9bdcc938fec465aeeed8b30ed
;;;","2022-01-25 04:31;roboduke;Changeset: af6c9aba
Author:    Fei Gao <fgao@openjdk.org>
Committer: Ningsheng Jian <njian@openjdk.org>
Date:      2022-01-19 01:20:53 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/af6c9abafaa3b8f9bdcc938fec465aeeed8b30ed
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/codecache/stress/OverloadCompileQueueTest.java failing in loom repo,JDK-8279653,5065853,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,alanb,alanb,2022-01-09 12:06,2022-03-02 09:05,2023-10-01 09:56,2022-03-02 09:05,repo-loom,,,,,,,,repo-loom,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,,,"tier6, fast debug builds, -Xcomp -XX:-SegmentedCodeCache.

The test timeouts on all platforms. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vldn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-25 14:44;coleenp;This test seems to have a deadlock compling but then gets a programmatic timeout from test/lib/jdk/test/lib/TimeLimitedRunner.java in the mainline like:

            if (timeout != 0) {
                long iterDuration = System.currentTimeMillis() - iterStart;
                maxDuration = Math.max(maxDuration, iterDuration);
                iterStart = System.currentTimeMillis();
                if (iterStart + (maxDuration * factor) > stoptime) {
                    System.out.println(""Not enough time to continue execution. ""
                            + ""Interrupted."");
                    break;
                }

In the mainline repo before the timeout, the thread state is:

""Thread-1"" #27 prio=5 os_prio=0 cpu=1.05ms elapsed=16.41s tid=0x00007fb4400302b0 nid=635 waiting on condition  [0x00007fb46f5f3000]
   java.lang.Thread.State: TIMED_WAITING (sleeping)
Thread: 0x00007fb4400302b0  [0x27b] State: _at_safepoint _at_poll_safepoint 0
   JavaThread state: _thread_blocked
	at java.lang.Thread.sleep(java.base@19-internal/Native Method)
	at compiler.codecache.stress.LockUnlockThread.run(OverloadCompileQueueTest.java:69)


In the loom repo (without virtual threads), that thread state is this:

""Thread-1"" #27 [38284] prio=5 os_prio=0 cpu=0.50ms elapsed=6283.46s tid=0x00007f0cd0033270 nid=38284 waiting on condition  [0x00007f0d0e791000]
   java.lang.Thread.State: RUNNABLE
Thread: 0x00007f0cd0033270  [0x958c] State: _at_safepoint _at_poll_safepoint 0
   JavaThread state: _thread_blocked
	at compiler.codecache.stress.LockUnlockThread.run(OverloadCompileQueueTest.java:69)


So the two questions are, 1. is there something about the loom repository that makes TimeLimitRunner not kill the process, and 2. why does this test hang while compiling with -Xcomp.;;;","2022-02-26 05:30;coleenp;There's a whitebox function to stall compilations, but it's timed out while trying to compile sleep.

""C1 CompilerThread0"" #15 [38243] daemon prio=9 os_prio=0 cpu=8021.47ms elapsed=1106.32s tid=0x00007f0d4049c5c0 nid=38243 runnable  [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE
Thread: 0x00007f0d4049c5c0  [0x9563] State: _at_safepoint _at_poll_safepoint 0
   JavaThread state: _thread_in_native
   Compiling: 6452   !b  3       java.lang.Thread::sleep (103 bytes)

Which seems inconvenient since it's waiting for sleep to tell it when to wake up.;;;","2022-02-26 06:43;alanb;Thread.sleep is a native main in the main line. In the loom repo it is a java method. Does the test need to be updated to take that into account?;;;","2022-02-26 06:48;coleenp;I'll try this.  The mainline does not deadlock, but does intentionally time out.;;;","2022-02-27 10:37;coleenp;So by disabling compilation of Thread.sleep() the test doesn't deadlock in loom now either, but it still doesn't let the TimeLimitRunner kill the process.;;;","2022-03-02 09:05;coleenp;commit cba3230be5dc40b1132ea4d7807c3fc050b0b17e (HEAD -> fibers, upstream/fibers)
Merge: 2aff24b57ad 25d428b2382
Author: Coleen Phillimore <coleen.phillimore@oracle.com>
Date:   Wed Mar 2 12:02:04 2022 -0500

    Merge pull request #91 from coleenp/cc
    
    8279653: compiler/codecache/stress/OverloadCompileQueueTest.java failing in loom repo
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Unclosed directory stream,JDK-8279647,5065841,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-01-08 01:37,2022-01-24 23:56,2023-10-01 09:56,2022-01-10 20:41,11,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,When fetching the predefined .jfc files the directory stream being used is not closed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vlaz:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-01-08 04:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/6999
Date: 2022-01-08 09:39:19 +0000;;;","2022-01-10 20:41;roboduke;Changeset: 6504458d
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-01-11 04:39:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6504458d87cdf6001f70c354b11942516a457137
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Remove recursive call in jdk.jfr.internal.Control,JDK-8279646,5065838,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-01-07 19:43,2022-01-24 23:56,2023-10-01 09:56,2022-01-10 18:53,19,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,There is an endless recursive call in jdk.jfr.internal.Control::getValue() that should be removed. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vlab:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-01-08 02:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/6998
Date: 2022-01-08 03:58:00 +0000;;;","2022-01-10 18:53;roboduke;Changeset: 2f13872d
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-01-11 02:51:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2f13872d5152a7fab122d52ebcfb468dc0db7ac5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: The cacheEventType in Dispatcher is never assigned,JDK-8279645,5065837,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,egahlin,egahlin,2022-01-07 17:54,2022-01-24 23:56,2023-10-01 09:56,2022-01-10 11:54,14,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,"When streaming events it is common that the succeeding event has the same event type. To avoid looking up the dispatcher with every new event, a cache was introduced, but it never gets updated when a new event type arrives.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vla3:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-01-07 18:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/6996
Date: 2022-01-08 01:59:33 +0000;;;","2022-01-10 11:54;roboduke;Changeset: 4471e951
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-01-10 19:52:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4471e95174a89d83794ed894c2a1bb3fc9def74d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
hsdis may not work when it was built with --with-binutils=system,JDK-8279644,5065836,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2022-01-07 17:39,2022-01-24 23:56,2023-10-01 09:56,2022-01-10 16:22,18,,,,,,,,19,infrastructure,,0,,,,,,,,,,,,,,,,,,,,"JDK-8277089 introduced the feature to build hsdis with binutils which is provided by the system, however it may not work when it was build with --with-binutils=system.

We can see the following message when the problem happens. I saw it on Ubuntu 20.04.

```
hsdis: bad native mach=architecture not set in Makefile!; please port hsdis to this platform
```

The cause is `-DLIBARCH_$OPENJDK_TARGET_CPU_LEGACY_LIB` is not set in `HSDIS_CFLAGS`. For example, it will be set  `LIBARCH_amd64` on AMD64. We should set `LIBARCH_$OPENJDK_TARGET_CPU_LEGACY_LIB` to `HSDIS_CFLAGS` even if the builder uses system binutils.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277089,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,linux,,,,,"0|i2vl9v:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-01-07 18:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/6997
Date: 2022-01-08 02:00:27 +0000;;;","2022-01-10 16:22;roboduke;Changeset: 2f7665b8
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2022-01-11 00:21:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2f7665b8292cc09574d62fecc3e9619c488ac137
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Remove unnecessary creation of Duration and Instant objects,JDK-8279642,5065834,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-01-07 17:25,2022-01-24 23:56,2023-10-01 09:56,2022-01-10 10:42,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,jdk.jfr.consumer.RecordedEvent and jdk.jfr.consumer.RecordedObject contain unnecessary allocation of java.time.Duration and java.time.Instant objects.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vl9f:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-01-07 17:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/6994
Date: 2022-01-08 01:21:06 +0000;;;","2022-01-10 10:42;roboduke;Changeset: 0d190961
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-01-10 18:41:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0d190961f28fb670fab06838dba69ec7a20c2fb9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ListView with null SelectionModel/FocusModel throws NPE,JDK-8279640,5065831,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mhanl,mhanl,mhanl,2022-01-07 15:56,2022-11-29 06:09,2023-10-01 09:56,2022-09-14 06:16,8,jfx11,jfx17,jfx18,,,,,jfx20,javafx,,0,FocusModel,ListView,NPE,SelectionModel,,,,,,,,,,,,,,,,"When a null SelectionModel/FocusModel is set in a ListView, it will throw NPEs on various different actions, 
e.g. on clicking on a ListCell with a null SelectionModel or pressing space with a null FocusModel  and more

Example: Click on the first ListCell or press SPACE.
### SOURCE START ###
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.ListView;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class FXBug extends Application {

    public static void main(final String[] args) {
        launch(args);
    }

    @Override
    public void start(final Stage primaryStage) {
        ListView<String> listView = new ListView<>();
        listView.getItems().addAll(""ABC"", ""DEF"");

        listView.setFocusModel(null);
        listView.setSelectionModel(null);
        BorderPane root = new BorderPane(listView);

        final Scene scene = new Scene(root);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
}
### SOURCE END ###",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8230098,,,JDK-8187145,JDK-8296413,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vl8r:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-01-07 16:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/711
Date: 2022-01-08 00:17:36 +0000;;;","2022-09-14 06:16;dukebot;Changeset: 27f19050
Author:    Marius Hanl <mhanl@openjdk.org>
Date:      2022-09-14 13:14:48 +0000
URL:       https://git.openjdk.org/jfx/commit/27f1905077cbc475fbce1b0f8d950d014dbb07a4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update JCov version to 3.0.12,JDK-8279636,5065825,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,shurailine,alanb,alanb,2022-01-07 12:14,2022-08-14 08:24,2023-10-01 09:56,2022-01-26 10:06,,,,,,,,,19,infrastructure,,0,,,,,,,,,,,,,,,,,,,,This JCov version supports class version 63.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292330,,JDK-8270108,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vl7f:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-01-25 16:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7218
Date: 2022-01-26 00:08:36 +0000;;;","2022-01-26 10:06;roboduke;Changeset: d2a50a64
Author:    Alexandre Iline <shurailine@openjdk.org>
Date:      2022-01-26 18:05:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d2a50a64920d22bbbd19ac7fa8681ff177799faf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: miscompilation of map pattern as a vector reduction,JDK-8279622,5065809,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rcastanedalo,chagedorn,chagedorn,2022-01-07 05:19,2022-07-25 05:20,2023-10-01 09:56,2022-05-03 04:13,11,17,18,19,,,,,19,hotspot,,0,c2,c2-superword,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-19,redhat-interest,,,,,,,,,,,"SLP wrongly vectorizes a loop as a reduction instead of a simple map pattern. SLP believes the loop forms a reduction pattern because its operations are earlier marked as reduction nodes (by PhaseIdealLoop::mark_reductions), however they are marked as such within a *different* loop that is removed by in-between loop transformations.

HOW TO REPRODUCE

$ java -ea Fail.java (using JDK 17, 18, or 19 up to b11)

FAILURE ANALYSIS

Using Fail.java as an example (run with -XX:-PartialPeelLoop for simplicity), the sequence of events is (roughly) as follows:

Original loop before loop optimizations (N, M, and Fail.mask are constants):

   for (int i = 0; i < N; i++) {
     for (j = 0; j < M; j++) {
       r[i] ^= Fail.mask;
     }
   }

1. The inner loop is marked as a reduction together with its XOR operation:

   for (int i = 0; i < N; i++) {
     for (j = 0; j < M; j++) {   // loop marked as a reduction
       r[i] ^= Fail.mask;        // XOR marked as a reduction
     }
   }

2. The inner loop is split into a peeled iteration, main, and post loop and unrolled twice:

   for (int i = 0; i < N; i++) {
     r[i] ^= Fail.mask;          // XOR marked as a reduction (inconsistent, outer loop is not a reduction!)
     int j = 0;
     for (...; j+=2) {           // loop marked as a reduction
       r[i] ^= Fail.mask;        // XOR marked as a reduction
       r[i] ^= Fail.mask;        // XOR marked as a reduction
     }
     for (...; j++) {            // loop marked as a reduction
       r[i] ^= Fail.mask;        // XOR marked as a reduction
     }
   }

3. the inner main and post loops are found to be redundant (due to the ""self-inversion"" property of XOR with a constant operand) and get removed:

   for (int i = 0; i < N; i++) {
     r[i] ^= Fail.mask;          // XOR marked as a reduction
   }

4. the outer loop is further optimized into its final version, where the main loop is unrolled four times for SLP vectorization:

   int i = 0;
   for (...; i++) {
     r[i] ^= Fail.mask;          // XOR marked as a reduction
   }
   for (...; i+=4) {
     r[i] ^= Fail.mask;          // XOR marked as a reduction
     r[i] ^= Fail.mask;          // XOR marked as a reduction
     r[i] ^= Fail.mask;          // XOR marked as a reduction
     r[i] ^= Fail.mask;          // XOR marked as a reduction
   }
   for (...; i++) {
     r[i] ^= Fail.mask;          // XOR marked as a reduction
   }

5. the main loop is wrongly vectorized as a reduction due to its XOR operations being marked as reductions:

   int i = 0;
   for (...; i++) {
     r[i] ^= Fail.mask;          // XOR marked as a reduction
   }
   for (...; i+=4) {
     tmp = reduce(XOR, Fail.mask, r[i...i+3])
     r[i...i+3] = [tmp, tmp, tmp, tmp]
   }
   for (...; i++) {
     r[i] ^= Fail.mask;          // XOR marked as a reduction
   }

The expected main loop vectorization is:
   ...
   for (...; i+=4) {
     r[i...i+3] = map(XOR, r[i...i+3], [Fail.mask, Fail.mask, Fail.mask, Fail.mask])
   }
   ...

Note that this failure is only reproducible in up to JDK 19 b11. In JDK 19 b12, JDK-8154302 introduces a safepoint poll in the (counted) outer-main loop (see step 4 above), which inhibits SLP vectorization (""SuperWord::transform_loop: loop too complicated, cl_exit->in(0) != lpt->_head""). The root cause of the failure (a reduction node within a non-reduction loop) remains present though.

ORIGINAL REPORT:

The attached fuzzer test produces a different result for C2 compared to C1/interpreter.

To reproduce (on JDK 17, JDK18, and JDK19):
$ java -Xint Test.java > int.log
$ java Test.java > c2.log
$ diff int.log c2.log
55c55
< iArr3 = -4168
---
> iArr3 = -204359
67c67
< iArr3 = -4168
---
> iArr3 = -195060

# To reproduce on JDK 17, JDK 18 (but not on JDK19 commit cc7cf81):
$ java -ea Reduced.java
(results in an exception because of an unexpected result.)

# To reproduce on JDK19 commit cc7cf81:
$ java -ea Reduced2.java
(as above, results in an exception because of an unexpected result.)",,,,,,,,,,JDK-8289121,JDK-8289920,JDK-8288810,JDK-8288812,,,,,,,,,,,,,,,,,,,,,,,JDK-8271272,JDK-8286177,JDK-8287087,JDK-8290964,,,,,,,,,JDK-8074981,JDK-8261147,JDK-8154302,JDK-8285369,,,"2022-04-13 01:50;rcastanedalo;Fail.java;https://bugs.openjdk.org/secure/attachment/98562/Fail.java","2022-01-07 05:18;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/97556/FuzzerUtils.java","2022-01-07 05:19;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/97554/Reduced.java","2022-02-23 01:17;rcastanedalo;Reduced2.java;https://bugs.openjdk.org/secure/attachment/98058/Reduced2.java","2022-01-07 05:18;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/97555/Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vl3v:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-07 05:19;chagedorn;Starts to fail after JDK-8271272 but that only seems to reveal an existing issue.;;;","2022-01-07 05:20;chagedorn;ILW = Wrong result with vector instructions in OSR compiled method, only single Java Fuzzer test, use -XX:-UseSuperWord = HLM = P3;;;","2022-04-29 04:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8464
Date: 2022-04-29 08:02:07 +0000;;;","2022-05-02 07:09;rcastanedalo;Adding JDK 11 as a (potentially) affected version, as the main transformations involved in the failure are included (superword vectorization of reductions, peel/main/post loop transformation), even thought I have not been able to construct a reproducer before JDK-8271272 (JDK 17 b34).  As mentioned by [~chagedorn] above, JDK-8271272 itself is likely unrelated and only acts as an enabler of the specific transformation chain that leads to failure in the reproducer.;;;","2022-05-03 04:04;rcastanedalo;Internal test failures on JDK 11 instrumented with the assertion proposed in the PR confirm that JDK 11 is affected by this issue.;;;","2022-05-03 04:13;dukebot;Changeset: 6fcd3222
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2022-05-03 11:08:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6fcd322258e0cce3724a4a8dc18f7802018a7cc9
;;;","2022-06-21 00:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/157
Date: 2022-06-21 07:23:37 +0000;;;","2022-06-22 00:32;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
A C2 fix with the typical risk we should take. Needs follow up 8286177, the other related issues are not needed.
I had to resolve due to differing context.
Test passes, but also without the fix. SAP nightly testing passed.;;;","2022-06-22 00:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/494
Date: 2022-06-22 07:30:59 +0000;;;","2022-07-01 02:54;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
C2 fix with the typical risk we should take. Needs follow up JDK-8286177, the other related issues are not needed.
Clean backport from 17.  
Test passes, but also without the fix. SAP nightly testing passed.;;;","2022-07-01 03:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1194
Date: 2022-07-01 09:55:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deserializing HashMap throws access denied suppressAccessChecks,JDK-8279618,5065805,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,robm,chegar,chegar,2022-01-07 04:33,2022-03-29 03:12,2023-10-01 09:56,2022-01-13 06:32,7u321,8u311,,,,,,,8u331,core-libs,,0,8bpr-critical-approved,regression,,,,,,,,,,,,,,,,,,"The Oracle JDK 1.8.0_311 has a regression when deserializing the serial
form of a HashMap, when run with a security manager. The fix for bugNo.
8266097 introduced the regression by performing a setAcessible(true)
without being encapsulated in a doPrivilege. This results in the caller
of ObjectInputStream.readObject being required to hold
java.lang.reflect.ReflectPermission ""suppressAccessChecks"", which is a
bug.

The issue is only applicable to Oracle JDK. Other distributions based on
the source code in OpenJDK 8u-dev do NOT suffer this issue.

The issue is only applicable to the 8u release train, since 8u311. More
modern JDK releases, like say, JDK 11u and 17u, do NOT suffer this 
issue.

The issue is caused by the following code in HashMap (as can be seen in
src.zip):

  private static final Field f = getLoadFactorField();
  private static final long LF_OFFSET = unsafe.objectFieldOffset(f);

  static Field getLoadFactorField() {
    try {
        Field f = HashMap.class.getDeclaredField(""loadFactor"");
        f.setAccessible(true);  // <<< HERE
        return f;
    } catch (NoSuchFieldException e) {
        return null;
    }
  }

Whereas the OpenJDK version of this code is as follows:

  LF_OFFSET = unsafe.objectFieldOffset(HashMap.class.getDeclaredField(""loadFactor""));

The f.setAccessible(true) is simply unnecessary, and is the root cause
of the issue.  

FYI - More modern JDKs all use Unsafe, the two arg version of
objectFieldOffset that accepts a class and string field name.

The remainer of the information here details how to reproduce the issue.

Simple test case that serializes and deserializes a HashMap:
---
import java.io.*;
import java.util.*;

public class Test {

  public static void main(String... args) throws Exception {
    Map<String,String> map = new HashMap<>();
    map.put(""foo"", ""bar"");

    byte[] serialBytes = serialize(map);
    Map<String,String> map2 = deserialize(serialBytes);
    System.out.println(map2);
  }

  @SuppressWarnings(""unchecked"")
  static byte[] serialize(Object object) throws Exception {
    try (ByteArrayOutputStream baos = new ByteArrayOutputStream();
         ObjectOutputStream oos = new ObjectOutputStream(baos)) {
      oos.writeObject(object);
      return baos.toByteArray();
    }
  }

  static <T> T deserialize(byte[] bytes) throws Exception {
    try (ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes))) {
      return (T) ois.readObject();
    }
  }
}
---

First run with an OpenJDK distribution:

$ /Library/Java/JavaVirtualMachines/temurin-8.jdk/Contents/Home/bin/java -version
openjdk version ""1.8.0_312""
OpenJDK Runtime Environment (Temurin)(build 1.8.0_312-b07)
OpenJDK 64-Bit Server VM (Temurin)(build 25.312-b07, mixed mode)

$ /Library/Java/JavaVirtualMachines/temurin-8.jdk/Contents/Home/bin/javac Test.java

$ /Library/Java/JavaVirtualMachines/temurin-8.jdk/Contents/Home/bin/java Test
{foo=bar}

$ /Library/Java/JavaVirtualMachines/temurin-8.jdk/Contents/Home/bin/java -Djava.security.manager Test
{foo=bar}

Then run with the Oracle JDK distribution:

$ /Library/Java/JavaVirtualMachines/jdk1.8.0_311.jdk/Contents/Home/bin/java -version
java version ""1.8.0_311""
Java(TM) SE Runtime Environment (build 1.8.0_311-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.311-b11, mixed mode)

$ /Library/Java/JavaVirtualMachines/jdk1.8.0_311.jdk/Contents/Home/bin/java Test
{foo=bar}

$ /Library/Java/JavaVirtualMachines/jdk1.8.0_311.jdk/Contents/Home/bin/java -Djava.security.manager Test
Exception in thread ""main"" java.lang.ExceptionInInitializerError
	at java.util.HashMap.readObject(HashMap.java:1386)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1185)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2319)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2210)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1690)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:508)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:466)
	at Test.deserialize(Test.java:26)
	at Test.main(Test.java:11)
Caused by: java.security.AccessControlException: access denied (""java.lang.reflect.ReflectPermission"" ""suppressAccessChecks"")
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)
	at java.security.AccessController.checkPermission(AccessController.java:886)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
	at java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:128)
	at java.util.HashMap$UnsafeHolder.getLoadFactorField(HashMap.java:1438)
	at java.util.HashMap$UnsafeHolder.<clinit>(HashMap.java:1430)
	... 13 more
",,,,,,,,,,JDK-8280042,JDK-8280759,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280427,JDK-8266097,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vl2z:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2022-01-07 04:53;chegar;This issue was discovered when upgrading the runtime JDK with Elasticsearch distributions - and in fact is an effective blocker for ES running on recent releases of Oracle 8u.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The left line of the TitledBorder is not painted on 150 scale factor,JDK-8279614,5065731,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,achung,webbuggrp,webbuggrp,2022-01-06 03:47,2023-02-15 06:54,2023-10-01 09:56,2022-06-13 13:10,11,17,18,19,,,,,20,client-libs,,0,dcspn,hidpi,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,migration11,reproducer-yes,sn_110,sn_111,sn_112,sn_113,sn_114,sn_115,sn_117,sn_119,sn_120,webbug,,"ADDITIONAL SYSTEM INFORMATION :
Windows, jdk-19 and jdk-17

A DESCRIPTION OF THE PROBLEM :
When I run the code attached into the ""Source code for an executable test case"" section, the line from the left side of the TitledBorder is not painted correctly. This is painted in white instead of black/grey.

I reproduced the problem on Windows with a HiDPI monitor and a scaling factor set to 150. 
The border is painted well when the scaling factor is set to 100 or 125.

REGRESSION : Last worked in version 8u301

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Prerequisite: an HiDPI monitor
Execute the attached code on Windows 10 with a scaling factor set to 150.


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The line from the left side of the title border will be painted as the one from the right side.
ACTUAL -
The line from the left side is painted in white.

---------- BEGIN SOURCE ----------
package ro.sync.ui.application;
import java.awt.BorderLayout;

import javax.swing.BorderFactory;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.UIManager;

import ro.sync.ui.LFSystemUtil;

public class SwingDemo2 {

  public static void main(String[] args) throws Exception {
    UIManager.setLookAndFeel(LFSystemUtil.getSystemLookAndFeelClassName());

    JFrame frame = new JFrame(""Swing Test"");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    JPanel parentPanel = new JPanel(new BorderLayout());
    parentPanel.setBorder(ApplicationBorderFactory.createEmptyBorder(5, 5, 5, 5));

    JPanel childPanel = new JPanel(new BorderLayout());
    childPanel.setBorder(BorderFactory.createTitledBorder(""Title""));
    childPanel.add(new JCheckBox(), BorderLayout.CENTER);

    parentPanel.add(childPanel, BorderLayout.CENTER);

    frame.getContentPane().add(parentPanel, BorderLayout.CENTER);    

    frame.pack();
    frame.setLocationRelativeTo(null);  
    frame.setVisible(true);
  }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
I don't have a workaround

FREQUENCY : always


",,,,,,,,,,JDK-8296563,JDK-8302584,JDK-8296564,JDK-8302579,,,,,,,,,,,,,,,,,,,,,,,JDK-8059328,JDK-8288332,JDK-8282958,,,,,,,,,,JDK-8294921,JDK-8294680,,,,,"2022-01-07 03:49;pnarayanaswa;Capture.PNG;https://bugs.openjdk.org/secure/attachment/97552/Capture.PNG","2022-01-07 03:49;pnarayanaswa;SwingDemo2.java;https://bugs.openjdk.org/secure/attachment/97553/SwingDemo2.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2vkmj:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-01-07 03:49;pnarayanaswa;Checked with attached test case in Window 10, Display resolution 1920*1080 and Scale at 150%, issue is reproducible(attached screenshot)
Test Case:
========
8u311: Pass
11: Fail
11.0.13: Fail
17: Fail
18ea29: Fail
19ea4: Fail;;;","2022-02-14 09:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7449
Date: 2022-02-11 23:44:22 +0000;;;","2022-03-08 11:10;achung;Looks like the shadowed part of the border is not showing up when set to 150% scaling, but the highlighted part of the border is. Removing the highlighted part of the border causes the shadowed part of the border to reappear.

Seems like the issue is the highlighted part of the border is overdrawing the shadowed part of the border. Since the darker line is seen as the ""actual"" border, reordering the painting of the lines so that the darker line is always drawn second would solve this issue.;;;","2022-06-13 13:10;dukebot;Changeset: b42c1ad1
Author:    Alisen Chung <achung@openjdk.org>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-06-13 20:05:06 +0000
URL:       https://git.openjdk.org/jdk/commit/b42c1ad1086a5c3f579e27380d23f67f8cebb437
;;;","2023-02-14 04:28;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.19-oracle,17.0.7-oracle.
Low risk, affects only win awt and has clear repro case.
Clean backport.
Test passes and fails without the fix. SAP nighlty testing passed.;;;","2023-02-14 04:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1171
Date: 2023-02-14 12:36:22 +0000;;;","2023-02-14 05:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1732
Date: 2023-02-14 13:29:14 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] ReturnBlobToWrongHeapTest.java fails with -XX:TieredStopAtLevel=1 on machines with many cores,JDK-8279597,5065783,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,haosun,haosun,haosun,2022-01-06 17:47,2022-04-25 06:47,2023-10-01 09:56,2022-01-13 15:56,18,19,,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-19,,,,,,,,,,,,,,,,"The following test failed on some AArch64 systems:
    compiler/codecache/stress/ReturnBlobToWrongHeapTest.java

Reproduce:

./configure --with-debug-level=release
make run-test TEST=""compiler/codecache/stress/ReturnBlobToWrongHeapTest.java"" JTREG=""VM_OPTIONS=-XX:TieredStopAtLevel=1""

Here's a snippet from the log file:

----------System.out:(14/1085)----------
CompileCommand: dontinline compiler/codecache/stress/Helper$TestCase.method bool dontinline = true
[0.046s][warning][codecache] CodeHeap 'non-profiled nmethods' is full. Compiler has been disabled.
[0.046s][warning][codecache] Try increasing the code heap size using -XX:NonProfiledCodeHeapSize=
CodeHeap 'non-profiled nmethods': size=8Kb used=7Kb max_used=7Kb free=0Kb
 bounds [0x0000ffff97b55000, 0x0000ffff97b57000, 0x0000ffff97b57000]
CodeHeap 'non-nmethods': size=16376Kb used=941Kb max_used=941Kb free=15434Kb
 bounds [0x0000ffff96b57000, 0x0000ffff96dc7000, 0x0000ffff97b55000]
 total_blobs=269 nmethods=8 adapters=194
 compilation: disabled (not enough contiguous free space left)
              stopped_count=1, restarted_count=0
 full_count=1
Error occurred during initialization of boot layer
java.lang.InternalError: java.lang.NoSuchMethodException: no such method: java.lang.invoke.MethodHandle.linkToStatic(MemberName)Object/invokeStatic
Caused by: java.lang.NoSuchMethodException: no such method: java.lang.invoke.MethodHandle.linkToStatic(MemberName)Object/invokeStatic
----------System.err:(2/207)----------
OpenJDK 64-Bit Server VM warning: CodeHeap 'non-profiled nmethods' is full. Compiler has been disabled.
OpenJDK 64-Bit Server VM warning: Try increasing the code heap size using -XX:NonProfiledCodeHeapSize=",,,,,,,,,,JDK-8285248,JDK-8280640,JDK-8285587,JDK-8280310,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2vky3:",9223372036854775807,b32,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-07 00:20;chagedorn;ILW = Test failure with -XX:TieredStopAtLevel=1, single test, no workaround = MLH = P4 ;;;","2022-01-11 00:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/93
Date: 2022-01-11 08:27:49 +0000;;;","2022-01-11 01:12;haosun;[~chagedorn] Hi. Just noticed that the ""fix version"" was set as 19 by you already, after I uploaded the PR to jdk18 repo today.

May I ask which version would be better for this patch to target? Thanks.;;;","2022-01-11 09:17;kvn;[~haosun] I reverted version to 18. We can still fix P4 bugs in tests in 18. Your PR is correct.
;;;","2022-01-13 15:56;roboduke;Changeset: 45f20633
Author:    Hao Sun <haosun@openjdk.org>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2022-01-13 23:56:27 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/45f20633f66af51f017b884dc85637e8f3547d85
;;;","2022-01-17 17:57;roboduke;Changeset: 45f20633
Author:    Hao Sun <haosun@openjdk.org>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2022-01-13 23:56:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/45f20633f66af51f017b884dc85637e8f3547d85
;;;","2022-01-25 04:29;roboduke;Changeset: 45f20633
Author:    Hao Sun <haosun@openjdk.org>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2022-01-13 23:56:27 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/45f20633f66af51f017b884dc85637e8f3547d85
;;;","2022-04-20 07:23;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Trivial testfix applies cleanly. Test has passed.;;;","2022-04-20 07:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/352
Date: 2022-04-20 14:20:06 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] custom JCheckBox and JRadioBox with custom icon set: focus is still displayed after unchecking,JDK-8279586,5065766,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kizune,shurailine,shurailine,2022-01-06 09:55,2022-03-31 10:52,2023-10-01 09:56,2022-02-01 02:22,17,18,,,,,,,19,client-libs,,0,a11y,accessibility,amazon-interest,imt-2612,jdk17u-fix-request,jdk17u-fix-yes,macos,sn_111,vpat-exclude,,,,,,,,,,,"OS: 
mac

Environment: 
macOS 12 x64

Reproducible: Always

Failed on Release/Build: JDK_18_b28
Is it a Regression in JDK 18u release : NO
[If Regression] Regression introduced in JDK 18u release/build: 
Test result on the last GAed release for this train:  FAILED on JDK_17_b29
Is it a platform-specific issue:  Yes. This issue only happens on macOS.

Steps to reproduce: With and Without VOICE OVER
 In Radio Buttons tab -> Display Options 
 Uncheck 'Paint Focus'
 Press Tab to Image Radio Buttons. 
 Observe focus
uncheck 'Paint Focus'.png
check 'Paint Focus'.png
Actual behavior:
Unchecking 'Paint Focus', focus is still displayed.

Expected behavior:
Unchecking 'Paint Focus', focus is not displayed.
",,,,,,,,,,JDK-8284106,JDK-8281112,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-01-06 09:58;shurailine;8b0ebceb-4eeb-43a6-a328-76a110e291fe.png;https://bugs.openjdk.org/secure/attachment/97529/8b0ebceb-4eeb-43a6-a328-76a110e291fe.png","2022-01-06 09:58;shurailine;Uncheck 'Paint Focus'.mp4;https://bugs.openjdk.org/secure/attachment/97531/Uncheck+%27Paint+Focus%27.mp4","2022-01-06 09:58;shurailine;ff3d8826-babc-4d92-aae1-e5ec3405ab44.png;https://bugs.openjdk.org/secure/attachment/97530/ff3d8826-babc-4d92-aae1-e5ec3405ab44.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2vkub:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-01-25 14:31;kizune;It affects only custom JCheckBox and JRadioBox with custom icon set.;;;","2022-01-31 08:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7286
Date: 2022-01-31 09:44:43 +0000;;;","2022-02-01 02:22;roboduke;Changeset: 18a7dc8c
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2022-02-01 10:20:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/18a7dc8c08fa15a260b4a39b18c068d30ee45962
;;;","2022-02-02 15:58;serb;Working on the backport to the openjdk 17u-dev;;;","2022-03-15 21:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/258
Date: 2022-03-16 03:11:25 +0000;;;","2022-03-27 23:44;serb;Fix Request (17u)

- Parity with 17.0.4-oracle
- Risk Analysis: Low
- Testing: The fix verified by the test, the jdk_desktop tests are green 
- PR: https://github.com/openjdk/jdk17u-dev/pull/258;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"compiler/codecache/CodeCacheFullCountTest.java fails with ""RuntimeException: the value of full_count is wrong.""",JDK-8279573,5065751,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,dcubed,dcubed,2022-01-06 07:25,2022-04-19 00:17,2023-10-01 09:56,2022-03-01 07:30,19,,,,,,,,19,hotspot,,0,intermittent,noreg-self,oracle-triage-19,tier3,tier6,ursqe-triaged,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

compiler/codecache/CodeCacheFullCountTest.java

Here's a snippet from the log file:

----------System.out:(7/2278)----------
Command line: [/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+4-134/macosx-x64-debug.jdk/jdk-19/fastdebug/bin/java -cp /System/Volumes/Data/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S1576/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f6e14629-997c-45a5-9d53-3dcd9a6dd92b/runs/509bbce6-5325-4d8d-aee2-c88cca151a31/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/classes/0/compiler/codecache/CodeCacheFullCountTest.d:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+4-134/src.full/open/test/hotspot/jtreg/compiler/codecache:/System/Volumes/Data/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S1576/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f6e14629-997c-45a5-9d53-3dcd9a6dd92b/runs/509bbce6-5325-4d8d-aee2-c88cca151a31/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/classes/0/test/lib:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar -XX:ReservedCodeCacheSize=2496k -XX:-UseCodeCacheFlushing CodeCacheFullCountTest WasteCodeCache ]
[2022-01-05T23:38:13.088302Z] Gathering output for process 15346
[2022-01-05T23:38:28.543683Z] Waiting for completion for process 15346
[2022-01-05T23:38:28.543939Z] Waiting for completion finished for process 15346
Output and diagnostic info for process 15346 was saved into 'pid-15346-output.log'
[2022-01-05T23:38:28.580547Z] Waiting for completion for process 15346
[2022-01-05T23:38:28.581348Z] Waiting for completion finished for process 15346
----------System.err:(11/619)----------
java.lang.RuntimeException: the value of full_count is wrong.
	at CodeCacheFullCountTest.runTest(CodeCacheFullCountTest.java:68)
	at CodeCacheFullCountTest.main(CodeCacheFullCountTest.java:43)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: the value of full_count is wrong.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277042,JDK-8278149,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2vkqz:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-06 15:10;dlong;ILW = intermittent test failure with ZGC = MMH = P3;;;","2022-01-06 15:25;dlong;The test fails if full_count is 2.  This sounds like a test bug to me.

stderr: Java HotSpot(TM) 64-Bit Server VM warning: CodeCache is full. Compiler has been disabled.
Java HotSpot(TM) 64-Bit Server VM warning: Try increasing the code cache size using -XX:ReservedCodeCacheSize=
Java HotSpot(TM) 64-Bit Server VM warning: CodeCache is full. Compiler has been disabled.
Java HotSpot(TM) 64-Bit Server VM warning: Try increasing the code cache size using -XX:ReservedCodeCacheSize=
Java HotSpot(TM) 64-Bit Server VM warning: C1 initialization failed. Shutting down all compilers
Java HotSpot(TM) 64-Bit Server VM warning: C2 initialization failed. Shutting down all compilers

stdout: [5.571s][warning][codecache] CodeCache is full. Compiler has been disabled.
[5.571s][warning][codecache] Try increasing the code cache size using -XX:ReservedCodeCacheSize=
[5.571s][warning][codecache] CodeCache is full. Compiler has been disabled.
[5.571s][warning][codecache] Try increasing the code cache size using -XX:ReservedCodeCacheSize=
CodeCache: size=2496Kb used=2494Kb max_used=2494Kb free=1Kb
 bounds [0x000000010e427000, 0x000000010e697000, 0x000000010e697000]
 total_blobs=1751 nmethods=1013 adapters=660
 compilation: disabled (not enough contiguous free space left)
              stopped_count=0, restarted_count=0
 full_count=2
CodeCache: size=2496Kb used=1931Kb max_used=2494Kb free=564Kb
 bounds [0x000000010e427000, 0x000000010e697000, 0x000000010e697000]
 total_blobs=1750 nmethods=1013 adapters=660
 compilation: disabled (not enough contiguous free space left)
              stopped_count=0, restarted_count=0
 full_count=2
;;;","2022-01-06 15:26;dlong;The problem probably exists in 18 as well, but so far we have only seen the failure in 19.;;;","2022-02-24 14:54;coleenp;This test relies on -XX:-UseCodeCacheFlushing to not remove code in the code cache via the sweeper but in fact nmethods can be swept depending on the timing and number of methods included.  This option looks completely useless to me, especially to force a code cache full situation.

In the loom repository, an additional jar file is compiled and this allows the code cache to be flushed, and the test doesn't get a code cache full failure.;;;","2022-02-24 15:35;coleenp;This fixes the loom test but I don't know if this fixes the number of full_count.

diff --git a/src/hotspot/share/runtime/sweeper.cpp b/src/hotspot/share/runtime/sweeper.cpp
index 2861918b16c..aee7613c0af 100644
--- a/src/hotspot/share/runtime/sweeper.cpp
+++ b/src/hotspot/share/runtime/sweeper.cpp
@@ -499,9 +499,11 @@ NMethodSweeper::MethodStateChange NMethodSweeper::process_compiled_method(Compil
     // All inline caches that referred to this nmethod were cleaned in the
     // previous sweeper cycle. Now flush the nmethod from the code cache.
     assert(!cm->is_locked_by_vm(), ""must not flush locked Compiled Methods"");
-    cm->flush();
-    assert(result == None, ""sanity"");
-    result = Flushed;
+    if (UseCodeCacheFlushing) {
+      cm->flush();
+      assert(result == None, ""sanity"");
+      result = Flushed;
+   }
   } else if (cm->is_not_entrant()) {
     // If there are no current activations of this method on the
     // stack we can safely convert it to a zombie method
;;;","2022-02-26 05:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7629
Date: 2022-02-26 13:14:57 +0000;;;","2022-03-01 07:30;dukebot;Changeset: 76398c84
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-03-01 15:28:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/76398c84007862bdf07cea6be792eca50eec9edd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Buffer overrun in reverse_words of sharedRuntime_x86_64.cpp:3517,JDK-8279545,5065710,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hseigel,shadowbug,shadowbug,2022-01-05 15:58,2023-08-28 21:59,2023-10-01 09:56,2022-01-14 06:43,17,19,,,,,,,19,hotspot,,0,amazon-interest,bugdb_33727632,jdk17u-fix-request,jdk17u-fix-yes,noreg-hard,parfait,,,,,,,,,,,,,,Buffer overrun in reverse_words of sharedRuntime_x86_64.cpp:3517,,,,,,,,,,JDK-8315203,JDK-8310309,JDK-8315035,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,other,,,,,"0|i2vkhv:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-12 11:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7053
Date: 2022-01-12 18:21:52 +0000;;;","2022-01-14 06:43;roboduke;Changeset: 35734ad0
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2022-01-14 14:41:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/35734ad0805b9ecaf6eb72a4b1513b8de53ed72c
;;;","2023-06-16 08:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1459
Date: 2023-06-16 14:56:25 +0000;;;","2023-06-16 08:16;shade;Fix Request (17u)

Fixes the overrun protection code in Montgomery multiply/square intrinsics. Should have no effect on the normal production code. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Should only clear CLD::_claim_strong mark for strong CLD iterations,JDK-8279540,5065703,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2022-01-05 12:16,2023-05-19 00:56,2023-10-01 09:56,2022-01-07 05:34,18,19,,,,,,,19,hotspot,,0,gc-shenandoah,redhat-interest,,,,,,,,,,,,,,,,,,"JDK-8273559 started to use CLD::_claim_other for heap iteration and for other iterations, except verfier, Shenandoah uses CLD::_claim_strong, but for those iterations, it clears all marks, instead of CLD::_claim_strong mark.

I don't think it is a fatal bug, it just means heap iteration may walk a CLD by multiple workers.

  ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273559,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vkgb:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-01-06 05:31;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6980
Date: 2022-01-06 13:27:16 +0000
;;;","2022-01-07 05:34;roboduke;Changeset: 4243f4c9
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-01-07 13:33:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4243f4c998344e77dccd4d5605e56e869bc8af89
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/nio/zipfs/ZipFSOutputStreamTest.java timed out,JDK-8279536,5065699,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,lancea,dcubed,dcubed,2022-01-05 10:48,2023-06-06 00:02,2023-10-01 09:56,2022-01-12 04:59,11,13,15,17,18,19,,,19,core-libs,,0,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,tier2,tier7,,,,,,,,,,,,"The following test timed out in the JDK19 CI:

jdk/nio/zipfs/ZipFSOutputStreamTest.java

Here's a snippet from the log file:

#section:testng
----------messages:(8/252)----------
command: testng ZipFSOutputStreamTest
reason: User specified action: run testng/timeout=300 ZipFSOutputStreamTest 
Mode: agentvm
Agent id: 17
Timeout refired 1200 times
Timeout information:
--- Timeout information end.
elapsed time (seconds): 1223.151
----------configuration:(14/1711)----------
Boot Layer
  class path: /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar 
              /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar 
              /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar 
              /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar 
              /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar 
              /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar 
              /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar 
  patch:      java.base /System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S62585/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6e4acd1d-0a23-4d4c-9897-6e619ea0ff01/runs/a1a63658-9dec-4d5d-8cc8-cbcf0f4abd7a/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/patches/java.base

Test Layer
  class path: /System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S62585/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6e4acd1d-0a23-4d4c-9897-6e619ea0ff01/runs/a1a63658-9dec-4d5d-8cc8-cbcf0f4abd7a/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/classes/1/jdk/nio/zipfs/ZipFSOutputStreamTest.d
              /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+4-145/src.full/open/test/jdk/jdk/nio/zipfs

----------rerun:(29/5326)*----------

<snip>

----------stdout:(1/68)----------
[1265.658s][warning][gc] GC locker is held; pre-dump GC was skipped
result: Error. Agent error: java.lang.Exception: Agent 17 timed out with a timeout of 1200 seconds; check console log for any additional details",,,,,,,,,,JDK-8309516,JDK-8297324,JDK-8300745,JDK-8301927,JDK-8300746,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8190753,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x_10.15,,,,,"0|i2vkff:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2022-01-10 01:13;jpai;This jdk/nio/zipfs/ZipFSOutputStreamTest was introduced in https://github.com/openjdk/jdk/pull/4607. The test creates a zip file with entries of varying sizes. One of the entries is of large size (Integer.MAX_VALUE + 1 bytes). The zip entry creation with that large byte size is expected to take relatively long. The test is then run twice (via 2 @DataProviders), so essentially it creates that large sized entry twice.

The test has (already) been configured for a 300 seconds (= 5 minute) timeout:

@run testng/timeout=300 ZipFSOutputStreamTest

My local runs of this test (on a machine which has no load) shows that it consistently completes in 3 minutes 30 seconds to 3 minutes 50 seconds. So, perhaps the timeout configured for 5 minute is a bit too close and is running into issues on a loaded system, maybe? Should we perhaps increase the timeout to something larger and see if that helps? I can open a PR with that change (plus minor diagnositic logs) if that's OK.


;;;","2022-01-10 04:41;jpai;I ran a bit more diagnostics locally. Interestingly, the majority of the time in this test case is spent in reading the zip file entries using ZipFS. This reading is done to verify/test that the generating zip file indeed has the right content. I wasn't expecting this part to be taking the majority of the time in this testcase. I'll look more to see whether the time taken is reasonable or not.;;;","2022-01-10 04:58;alanb;[~jpai] - the timeouts in our CI seem to be on older Mac systems with HDD, running macOS 10.15.7.;;;","2022-01-10 07:08;jpai;[~alanb], this actually turned out to be an inefficency in the way the test was written (by me). I've opened https://github.com/openjdk/jdk/pull/7010 which has additional details. With that change, I can now consistently run this test case (successfully) between 40 to 42 seconds (as compared to 3 minutes 30 seconds).;;;","2022-01-10 07:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7010
Date: 2022-01-10 15:06:11 +0000;;;","2022-01-12 04:59;roboduke;Changeset: ff0cb989
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-01-12 12:58:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ff0cb98965a0b6be2f6c399e4645630c10b3466e
;;;","2022-11-17 03:16;shade;Fix Request (17u)

Improves test performance. Applies cleanly. Testing passes.;;;","2022-11-17 03:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/890
Date: 2022-11-17 11:15:15 +0000;;;","2023-06-02 04:33;mbaesken;jdk11 backport request
I would like to have the patch in jdk11u-dev as well, because the issue is present there too (timeouts in this test on slower machines).  The backport is low risk (only test) and clean (has some diff in a stride but recognized clean by the PR check bot) .;;;","2023-06-02 04:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1923
Date: 2023-06-02 11:30:05 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dereferencing segments backed by different scopes leads to pollution,JDK-8279527,5065689,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-01-05 08:44,2022-01-24 23:56,2023-10-01 09:56,2022-01-07 05:42,,,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,,,"If the LoopOverPollutedSegments benchmark is enhanced with the attached patch, the performance of some of its benchmark methods regresses greatly.

This is caused by the call to the liveness check method (checkValidState) becoming megamorphic.",,,,,,,,,,JDK-8279777,JDK-8280296,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-01-05 08:45;mcimadamore;loopOverPollutedSegments.patch;https://bugs.openjdk.org/secure/attachment/97514/loopOverPollutedSegments.patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vkd7:",9223372036854775807,b31,,,,,,,,,,,,"2022-01-05 09:02;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/82
Date: 2022-01-05 16:59:30 +0000
;;;","2022-01-07 05:41;roboduke;Changeset: d65c6658
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-01-07 13:41:29 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/d65c665839c0a564c422ef685f2673fac37315d7
;;;","2022-01-10 09:07;roboduke;Changeset: d65c6658
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-01-07 13:41:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d65c665839c0a564c422ef685f2673fac37315d7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exceptions::count_out_of_memory_exceptions miscounts class metaspace OOMEs,JDK-8279526,5065687,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-01-05 08:34,2022-01-12 16:48,2023-10-01 09:56,2022-01-05 11:46,19,,,,,,,,19,hotspot,,0,redhat-interest,regression,sonarcloud-found,,,,,,,,,,,,,,,,,"SonarCloud reports that Universe::is_out_of_memory_error_class_metaspace added by JDK-8278125 is not used. Indeed, Exceptions::count_out_of_memory_exceptions seems to have a typo in a condition.

SonarCloud reports that `Universe::is_out_of_memory_error_class_metaspace` is not used after JDK-8278125. Indeed, that patch seemed to introduce a typo in `Exceptions::count_out_of_memory_exceptions`:
https://github.com/openjdk/jdk/commit/ad1dc9c2ae5463363aff20072a3f2ca4ea23acd2?diff=unified#diff-997cf62de09eb9ba3ba9a8fc1d48666b913b4ece76a4f37559a985282788d913L466-R466",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278125,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vkcr:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-05 08:43;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6970
Date: 2022-01-05 16:38:22 +0000
;;;","2022-01-05 11:46;roboduke;Changeset: 523300e7
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-05 19:45:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/523300e7968b28ade4bbfe004030227a224ab2dc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SPNEGO has not passed channel binding info into the underlying mechanism,JDK-8279520,5065678,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,weijun,weijun,weijun,2022-01-05 06:43,2022-08-09 09:01,2023-10-01 09:56,2022-01-06 14:04,,,,,,,,,19,security-libs,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,See summary,,,,,,,,,,JDK-8284736,JDK-8284658,JDK-8285903,JDK-8285425,JDK-8284656,JDK-8290355,JDK-8288182,JDK-8290356,,,,,,,,,,,,,,,,,,,JDK-8279842,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vkaz:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ce3d383,,,,,,,Verified,,"2022-01-05 08:32;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6969
Date: 2022-01-05 16:25:27 +0000
;;;","2022-01-06 14:04;roboduke;Changeset: 8d0f385f
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-01-06 22:02:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8d0f385fd0243c3e38b400f463b8d9727b0a5956
;;;","2022-04-11 03:59;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Included test has passed.;;;","2022-04-11 04:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/345
Date: 2022-04-11 10:59:47 +0000;;;","2022-04-28 13:46;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.16-oracle. Applies cleanly except Copyright year update. Included test has passed.;;;","2022-04-28 13:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1060
Date: 2022-04-28 20:45:18 +0000;;;","2022-07-15 00:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/369
Date: 2022-07-15 07:43:17 +0000;;;","2022-07-15 00:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/232
Date: 2022-07-15 07:43:53 +0000;;;","2022-07-15 00:53;omikhaltcova;Fix request (13u, 15u)

Applied cleanly. Backported for parity with jdk11u and prior to JDK-8279842 to make HttpsCB.java pass successfully.
Tested with the following tests group: test/jdk/sun/security/krb5;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SIGSEGV in org.openjdk.tests.java.util.stream.SliceOpTest.testSliceMulti in loom repo,JDK-8279519,5065676,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,rpressler,alanb,alanb,2022-01-05 05:57,2022-01-06 12:09,2023-10-01 09:56,2022-01-06 12:09,repo-loom,,,,,,,,repo-loom,hotspot,,0,wrapper,,,,,,,,,,,,,,,,,,,"
loom repo, aarch64 only.

test/jdk/java/util/stream/test/org/openjdk/tests/java/util/stream/SliceOpTest.java SEGVs in generated code, usually org.openjdk.tests.java.util.stream.SliceOpTest.testSliceMulti

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000fffc40c03854, pid=1527183, tid=1527244
#
# JRE version: Java(TM) SE Runtime Environment (19.0+2) (fastdebug build 19-loom+2-20)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-loom+2-20, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# J 3615 c2 org.openjdk.tests.java.util.stream.SliceOpTest.testSliceMulti(Ljava/util/stream/TestData$OfRef;I[Ljava/util/function/Function;)V (69 bytes) @ 0x0000fffc40c03854 [0x0000fffc40c03540+0x0000000000000314]
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /testoutput/test-support/jtreg_open_test_jdk_tier1_part2/java/util/stream/test/org/openjdk/tests/java/util/stream/SliceOpTest/core.1527183)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2vkaj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-06 09:19;rpressler;Happens only with UseChunkBitmaps.;;;","2022-01-06 12:09;rpressler;Fixed by 70afa32;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C1: No inlining through invokedynamic and invokestatic call sites when resolved class is not linked,JDK-8279515,5065671,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,vlivanov,vlivanov,2022-01-05 05:21,2022-03-10 05:55,2023-10-01 09:56,2022-01-10 05:56,17,18,,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,redhat-interest,regression,,,,,,,,,,,,,"JDK-8267806 introduced a regression where invokedynamic call site linker can be left not inlined by C1 (even though it is marked with @ForceInline annotation):
 
  @ 3   java.lang.invoke.Invokers$Holder::linkToTargetMethod (9 bytes)   not inlineable

Before JDK-8267806 it was always inlined:
  @ 3   java.lang.invoke.Invokers$Holder::linkToTargetMethod (9 bytes)   force inline by annotation",,,,,,,,,,JDK-8280778,JDK-8282970,JDK-8280618,JDK-8280301,,,,,,,,,,,,,,,,,,,,JDK-8270926,,,JDK-8282142,,,,,,,,,,,,JDK-8267806,JDK-8282509,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b25,17,,,,,,,"0|i2vk9f:",9223372036854775807,b31,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-05 13:49;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/80
Date: 2022-01-05 15:30:27 +0000
;;;","2022-01-05 18:46;dlong;ILW = performance regression = MMH = P3;;;","2022-01-10 05:56;roboduke;Changeset: ad34f03b
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-01-10 13:56:01 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/ad34f03b549e6f37825efc3e554d2232b557611a
;;;","2022-01-10 09:07;roboduke;Changeset: ad34f03b
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-01-10 13:56:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ad34f03b549e6f37825efc3e554d2232b557611a
;;;","2022-01-25 04:26;roboduke;Changeset: ad34f03b
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-01-10 13:56:01 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/ad34f03b549e6f37825efc3e554d2232b557611a
;;;","2022-03-09 05:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/209
Date: 2022-03-09 13:18:42 +0000;;;","2022-03-10 01:11;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Nightly tests have passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE on clearing value of IntegerSpinnerValueFactory,JDK-8279514,5065603,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,webbuggrp,webbuggrp,2022-01-04 09:44,2022-11-29 06:08,2023-10-01 09:56,2022-09-01 20:19,jfx11,jfx17,jfx18,,,,,,jfx20,javafx,,0,dcspn,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 11
openjdk version ""17.0.1"" 2021-10-19
OpenJDK Runtime Environment Temurin-17.0.1+12 (build 17.0.1+12)
OpenJDK 64-Bit Server VM Temurin-17.0.1+12 (build 17.0.1+12, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
The only way of clearing the content of spinners is to set the value of the corresponding value factory to null which is then treated by the toString(...) functions of the value factories.
When setting null as the value of an IntegerSpinnerValueFactory the value is cleared but an NullPointerException occurs in an attached listener handling value changes.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Create an empty JavaFX project
2. Create a spinner whose value factory is a IntegerSpinnerValueFactory
3. Set the value hold by the value factory to null

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Empty spinner text field
ACTUAL -
Empty spinner text field while throwing a NullPointerException

---------- BEGIN SOURCE ----------
package com.example.integerspinnermissingnullcheck;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Spinner;
import javafx.scene.control.SpinnerValueFactory;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class FooApplication extends Application {
    @Override
    public void start(Stage stage) {
        var spinner = new Spinner<>(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 10));
        spinner.getValueFactory()
                .setValue(null);

        var container = new VBox(spinner);
        var scene = new Scene(container);

        stage.setTitle(""There's no null check similar to the one of DoubleSpinnerValueFactory"");
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch();
    }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-01-05 04:17;pnarayanaswa;FooApplication.java;https://bugs.openjdk.org/secure/attachment/97513/FooApplication.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vjub:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-01-05 04:18;pnarayanaswa;Checked with attached testcase in Windows 10, Issue is reproducible
Test Result:
========
openjfx11 : Fail
openjfx15 : Fail
openjfx17 : Fail 
openjfx18ea8: Fail;;;","2022-01-25 01:58;aghaisas;I see that below SpinnerValueFactory classes need to add a null check in valueProperty() ChangeListeners.
IntegerSpinnerValueFactory
LocalDateSpinnerValueFactory
LocalTimeSpinnerValueFactory
ListSpinnerValueFactory

Only DoubleSpinnerValueFactory has a valid null check.;;;","2022-08-10 00:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/865
Date: 2022-08-10 06:56:50 +0000;;;","2022-09-01 20:19;dukebot;Changeset: d1a7ebdc
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2022-09-02 03:15:21 +0000
URL:       https://git.openjdk.org/jfx/commit/d1a7ebdc3374066f1c1f2739551185cbb34bdf96
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/javadoc/doclet/testDocletExample/TestDocletExample.java  fails after 8278795,JDK-8279513,5065669,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,mbaesken,mbaesken,2022-01-05 02:29,2022-05-25 23:16,2023-10-01 09:56,2022-05-25 10:47,19,,,,,,,,19,tools,,0,noreg-self,,,,,,,,,,,,,,,,,,,"After ""8278795: Create test library and tests for langtools snippets"" has been pushed, the test jdk/javadoc/doclet/testDocletExample/TestDocletExample.java fails on all our test platforms.
Output is :
:stdErr:
Tue Jan 04 19:53:30 CET 2022
java.lang.Exception: 2 errors found
	at toolbox.TestRunner.runTests(TestRunner.java:116)
	at TestDocletExample.main(TestDocletExample.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.Exception: 2 errors found
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: 2 errors found

:stdOut:
Tue Jan 04 23:10:25 CET 2022
test: testEntryPoint
Exception running test testEntryPoint: java.lang.NullPointerException: Cannot invoke ""com.sun.source.doctree.SnippetTree.getBody()"" because ""<local4>"" is null
java.lang.NullPointerException: Cannot invoke ""com.sun.source.doctree.SnippetTree.getBody()"" because ""<local4>"" is null
	at TestDocletExample.testEntryPoint(TestDocletExample.java:68)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at toolbox.TestRunner.runTests(TestRunner.java:89)
	at TestDocletExample.main(TestDocletExample.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

test: testDocletExample
Exception running test testDocletExample: java.lang.NullPointerException: Cannot invoke ""com.sun.source.doctree.SnippetTree.getBody()"" because ""<local4>"" is null
java.lang.NullPointerException: Cannot invoke ""com.sun.source.doctree.SnippetTree.getBody()"" because ""<local4>"" is null
	at TestDocletExample.testDocletExample(TestDocletExample.java:92)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at toolbox.TestRunner.runTests(TestRunner.java:89)
	at TestDocletExample.main(TestDocletExample.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

2 tests, 2 errors",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287337,,,,,,,,,,,,JDK-8278795,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vk8z:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-05-19 11:04;jjg;I cannot reproduce this problem, and the test routinely passes on our test infrastructure.

If this is still an issue, please provide more specific details of platform and version etc, so that we can try and reproduce it.;;;","2022-05-19 11:17;jjg;[~mbaesken] Do you have the src/ directory available, in the obvious place next to the test/ directory when you run tests?
;;;","2022-05-19 11:58;jjg;OK, I reproduced it, under unusual circumstances.

If the src/ directory is missing, the test fails with
java.lang.IllegalArgumentException: Cannot find src/ from /Volumes/J2GWork/jdk/jdk.8279513.TestDocletExample/open/test/langtools/jdk/javadoc/doclet/testDocletExample

If the src/jdk.javadoc directory is missing, the test fails as described, with
Exception running test testDocletExample: java.lang.NullPointerException: Cannot invoke ""com.sun.source.doctree.SnippetTree.getBody()"" because ""<local4>"" is null;;;","2022-05-19 14:26;jjg;At some level, there's no obvious fix here: the problem is a configuration problem, albeit an uncommon on.

The test is expecting to find source code for the jdk.javadoc module, and fails/crashes when it can't find it.

There are some possible improvements and a partial workaround.

1. Don't use IllegalArgumentException in SnippetUtils when the source cannot be found; use a locally defined better name.

2. At a minimum, detect when the source for a specific module cannot be found; maybe move that check into SnippetUtils

3. Define and use a keyword so that this test can be easily skipped.;;;","2022-05-19 15:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8796
Date: 2022-05-19 22:05:50 +0000;;;","2022-05-20 00:10;mbaesken;Hi Jonathan, I can confirm that missing sources were the problem; my colleague adjusted the src-file copy and this solved the issue for us.
So I think your improvements make sense.;;;","2022-05-25 10:47;dukebot;Changeset: 7156f98e
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-05-25 17:45:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7156f98e324ffd0ab17105b2cb8cb6ce0d718e5b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/dcmd/vm/ClassLoaderHierarchyTest.java failing intermittently in loom repo,JDK-8279511,5065668,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2022-01-05 01:44,2022-01-05 03:30,2023-10-01 09:56,2022-01-05 03:30,repo-loom,,,,,,,,repo-loom,core-svc,,0,,,,,,,,,,,,,,,,,,,,"This test fails intermittently in the loom repo with output such as:

test ClassLoaderHierarchyTest.jmx(): failure
java.lang.RuntimeException: 'Kevin.*TestClassLoader' missing from stdout/stderr 

It may be that the test needs to use reachabilityFence to keep unnamed_cl, named_cl, and named_child_cl alive.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vk8r:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/threading/TestManyVirtualThreads.java hits ShouldNotReachHere during stack walk on aarch64,JDK-8279502,5065658,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,rpressler,alanb,alanb,2022-01-04 23:56,2022-01-17 06:57,2023-10-01 09:56,2022-01-05 12:08,repo-loom,,,,,,,,,hotspot,,0,,,,,,,,,,,,,,,,,,,,"This test hits a ShouldNotReachHere when walking thread stacks during GC on aarch64 systems. Typical error log is:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/open/src/hotspot/share/runtime/frame.cpp:1208), pid=617056, tid=617207
#  Error: ShouldNotReachHere()
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (fastdebug build 19-internal+0-2022-01-04-1329430.alan.bateman.loom)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-internal+0-2022-01-04-1329430.alan.bateman.loom, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0xc29f7c]  frame::oops_do_internal(OopClosure*, CodeBlobClosure*, DerivedOopClosure*, DerivedPointerIterationMode, RegisterMap const*, bool) const+0x16c
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/scratch/3/core.617056)
#
# JFR recording file will be written. Location: /testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/scratch/3/hs_err_pid617056.jfr
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vk6j:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-01-05 12:08;rpressler;Fixed by b3fffdf85e5;;;","2022-01-05 12:08;rpressler;Fixed by b3fffdf85e5;;;","2022-01-17 06:57;rpressler;A better fix in c5ee916;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProcessBuilder inherits contextClassLoader when spawning a process reaper thread,JDK-8279488,5065598,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rriggs,webbuggrp,webbuggrp,2022-01-04 08:21,2022-11-22 12:19,2023-10-01 09:56,2022-03-28 08:48,11,17,18,19,,,,,19,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
System: Macbook Pro 16 (2019)
OS: mac 11.5.1
JDKs:
- OpenJDK Runtime Environment AdoptOpenJDK-11.0.11+9 (build 11.0.11+9)
- OpenJDK Runtime Environment Temurin-17.0.1+12 (build 17.0.1+12)

A DESCRIPTION OF THE PROBLEM :
The ProcessBuilder makes use of a cached ThreadPoolExecutor internally to monitor the status of the forked processes. Whenever a new thread named ""process reaper"" is created within this pool through the defined ThreadFactory, this new thread inherits the contextClassLoader of the calling thread (default thread creation behavior).

As a result, since the ""process reaper"" threads can stay as long as there are processes to execute (keep alive time is set to 1 mn in java.util.concurrent.Executors.newCachedThreadPool()), such a thread retains a reference to the contextClassLoader instance of the thread which triggered the new ""process reaper"" thread allocation in the first place.

Such a reference to this contextClassLoader implies that the entire object graph attached to it is retained in memory and cannot be garbage-collected, even if otherwise discarded: the initial situation which triggered this investigation was indeed a classloader leak happening when a webapp making use of ProcessBuilder is restarted within a Tomcat container.

In addition to this, since these threads are shared and reused across the JVM and cannot allocate non java.lang objects, it does not look relevant to use a specific contextClassLoader for the ""process reaper"" threads in any case.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Build the provided test class, and run it.
This class executes a process twice, each time with a different contextClassLoader, reports the outcome and the current contextClassLoader of all the ""process reaper"" threads.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The contextClassLoader of idle ""process reaper"" threads should be the bootstrap classloader (null):

Process #32998 launched using classloader java.net.URLClassLoader@7344699f - exit code 0
Thread process reaper #22 - contextClassLoader null
Process #32999 launched using classloader java.net.URLClassLoader@2a84aee7 - exit code 0
Thread process reaper #22 - contextClassLoader null
ACTUAL -
The contextClassLoader of idle ""process reaper"" threads is the contextClassLoader instance used during the first run instead:

Process #32998 launched using classloader java.net.URLClassLoader@7344699f - exit code 0
Thread process reaper #22 - contextClassLoader java.net.URLClassLoader@7344699f <<<<< HERE
Process #32999 launched using classloader java.net.URLClassLoader@2a84aee7 - exit code 0
Thread process reaper #22 - contextClassLoader java.net.URLClassLoader@7344699f <<<<< HERE

---------- BEGIN SOURCE ----------
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.concurrent.CompletableFuture;

public class ProcessBuilderClassloadingIssue {
    
    public static void main(String... args) throws Exception {
        // Run #1
        execProcessUsingClassLoaderAndReport(new ProcessLauncher(), newClassLoader());
        reportProcessReaperThreads();

        // Run #2
        execProcessUsingClassLoaderAndReport(new ProcessLauncher(), newClassLoader());
        reportProcessReaperThreads();
    }

    public static ClassLoader newClassLoader() throws Exception {
        return new URLClassLoader(new URL[]{ new File(""."").toURI().toURL() });
    }
    
    public static void execProcessUsingClassLoaderAndReport(
            ProcessLauncher processLauncher,
            ClassLoader classLoader) throws Exception {
        // Switch the current thread contextClassLoader
        Thread.currentThread().setContextClassLoader(classLoader);
        
        Process process = processLauncher.exec().get();
        System.out.println(""Process #"" + process.pid() + "" launched using classloader ""
                + classLoader + "" - exit code "" + process.exitValue());
    }
    
    public static void reportProcessReaperThreads() {
        for (Thread thread: Thread.getAllStackTraces().keySet()) {
            if (""process reaper"".equals(thread.getName())) {
                System.out.println(""Thread "" + thread.getName() + "" #"" + thread.getId()
                        + "" - contextClassLoader "" + thread.getContextClassLoader() );
            }
        }
    }
    
    public static class ProcessLauncher {
        public static final String COMMAND = ""/bin/date"";
        
        public CompletableFuture<Process> exec() throws IOException {
            return new ProcessBuilder(COMMAND).start().onExit();
        }
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
None found.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297451,,,,,,"2022-01-04 18:59;tongwan;ProcessBuilderClassloadingIssue.java;https://bugs.openjdk.org/secure/attachment/97507/ProcessBuilderClassloadingIssue.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vjt7:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-01-04 19:01;tongwan;The observations on Windows 10:
JDK 11: Failed,  contextClassLoader is not null
JDK 17: Failed.
JDK 18ea+29: Failed.
JDK 19ea+3: Failed.;;;","2022-01-18 08:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7131
Date: 2022-01-18 15:57:58 +0000;;;","2022-03-28 08:48;dukebot;Changeset: f0282d7d
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2022-03-28 15:44:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f0282d7def8c043d95e9b86da926b7d45224c31c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: Fix bad AD file when UseRVB is disabled,JDK-8279487,5065637,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fjiang,fjiang,fjiang,2022-01-04 19:00,2022-01-04 22:38,2023-10-01 09:56,2022-01-04 22:38,repo-riscv-port,,,,,,,,repo-riscv-port,hotspot,,0,,,,,,,,,,,,,,,,,,,,"After JDK-8279344, test/hotspot/jtreg/compiler/intrinsics/TestRotate.java will report bad AD file error on fastdebug JDK when UseRVB is disabled:

```
----------System.out:(61/2324)----------
o27  RotateRight  === _ o10 o22  [[o28  2 ]]  #int

--N: o27  RotateRight  === _ o10 o22  [[o28  2 ]]  #int

   --N: o10  Parm  === o3  [[o27 ]] Parm0: int
   IREGI  0  IREGI
   IREGINOSP  0  IREGINOSP
   IREGI_R10  0  IREGI_R10
   IREGI_R12  0  IREGI_R12
   IREGI_R13  0  IREGI_R13
   IREGI_R14  0  IREGI_R14
   IREGIHEAPBASE  0  IREGIHEAPBASE
   IREGIORL2I  0  IREGI
   IREGIORL  0  IREGI
   IREGILNP  0  IREGI
   IREGILNPNOSP  0  IREGINOSP

   --N: o22  ConI  === o0  [[o27 ]]  #int:1
   IMMI  0  IMMI
   IMMI_1  0  IMMI_1
   IMMI_LE_4  0  IMMI_LE_4
   IMMIADD  0  IMMIADD
   IMMISUB  0  IMMISUB
   IMMI5  0  IMMI5
   IMMIOFFSET  0  IMMIOFFSET
   IREGI  100  loadConI
   IREGINOSP  100  loadConI
   IREGI_R10  100  loadConI
   IREGI_R12  100  loadConI
   IREGI_R13  100  loadConI
   IREGI_R14  100  loadConI
   IREGIORL2I  100  IREGI
   IREGIORL  100  IREGI
   IREGILNP  100  IREGI
```
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-01-04 22:18;fjiang;hs_err_pid2255863.log;https://bugs.openjdk.org/secure/attachment/97509/hs_err_pid2255863.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,repo-riscv-port,,linux,,,,,"0|i2vk1v:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-04 22:16;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/riscv-port/pull/41
Date: 2022-01-05 03:12:16 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect copyright year in compiler/lib/ir_framework/IRNode.java  after JDK-8278114,JDK-8279485,5065634,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,pxie,pxie,pxie,2022-01-04 17:26,2022-03-21 00:03,2023-10-01 09:56,2022-01-04 18:23,19,,,,,,,,19,hotspot,,0,noreg-self,oracle-triage-19,tencent-interest,ursqe-triaged,,,,,,,,,,,,,,,,Incorrect copyright year in compiler/lib/ir_framework/IRNode.java after JDK-8278114,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278114,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vk17:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-04 17:35;kvn;How did you catch it? Just looking on it or you have a check in your testing?;;;","2022-01-04 17:45;pxie;Just by looking on it.;;;","2022-01-04 17:56;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6962
Date: 2022-01-05 01:44:06 +0000
;;;","2022-01-04 18:23;roboduke;Changeset: 8b5de27c
Author:    bobpengxie <bobpengxie@tencent.com>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2022-01-05 02:22:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8b5de27ce1e4fe664e08879c2ca89d08db710c9d
;;;","2022-01-04 23:49;chagedorn;ILW = Incorrect copyright year, one file = LLL = P5;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Disable tools/jar/ReproducibleJar.java on 32-bit platforms,JDK-8279453,5065596,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-01-04 08:15,2022-01-19 10:27,2023-10-01 09:56,2022-01-05 08:20,19,,,,,,,,19,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"
$ CONF=linux-x86-server-fastdebug make run-test TEST=tools/jar/ReproducibleJar.java

Checking jar entries local date time for --date 2099-12-31T23:59:59+00:00, is 2099-12-31T23:59:59
test ReproducibleJar.testValidSourceDate(""2099-12-31T23:59:59+00:00""): failure
java.lang.AssertionError: checkFileTime failed, extracted to 1963-11-25T16:31:42Z, expected to be close to 2099-12-31T22:59:59Z
	at ReproducibleJar.checkFileTime(ReproducibleJar.java:243)
	at ReproducibleJar.testValidSourceDate(ReproducibleJar.java:152)

This is due to JDK-8279444, which cannot be solved yet. This test might need to be disabled on 32-bit platforms meanwhile.
",,,,,,,,,,JDK-8280145,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276766,,,,,,,,,,,,JDK-8279444,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vjsr:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@189ffaae,,,,,,,,,"2022-01-04 08:49;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6957
Date: 2022-01-04 16:46:09 +0000
;;;","2022-01-05 08:20;roboduke;Changeset: a741b927
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-05 16:19:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a741b927a3cdc8e339ae557c77886ea850aa06b6
;;;","2022-01-12 06:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/82
Date: 2022-01-12 11:07:14 +0000;;;","2022-01-18 03:15;aleonard;Fix request (17u) 
This test fix is required for the backport of https://github.com/openjdk/jdk17u-dev/pull/82/ which will cause the failure of testcase test/jdk/tools/jar/ReproducibleJar.java on 32bit platforms. The 32bit exclusion is already incorporated in https://github.com/openjdk/jdk17u-dev/pull/82/.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/jvmti/vthread/VThreadTest/VThreadTest.java failing in loom repo,JDK-8279451,5065593,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,alanb,alanb,2022-01-04 06:50,2022-01-06 08:23,2023-10-01 09:56,2022-01-06 07:32,repo-loom,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,,"This test is failing in the loom repo with:

----------System.out:(27/1831)----------
Agent_OnLoad started
Agent_OnLoad finished
processVThreadEvent: event: VirtualThreadStart, thread: VThread-Producer

#### VirtualThreadStart event: thread: VThread-Producer, vthread: 0xfffe58000f20

JVMTI GetVirtualThread with NULL thread (current) returned non-NULL vthread as expected
JVMTI GetVirtualThread with good thread returned non-NULL vthread as expected

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000fffed85fc844, pid=1303466, tid=1303512
#
# JRE version: OpenJDK Runtime Environment (19.0) (build 19-internal+0-2022-01-04-1329430.alan.bateman.loom)
# Java VM: OpenJDK 64-Bit Server VM (19-internal+0-2022-01-04-1329430.alan.bateman.loom, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0xa4c844]  Klass::is_subclass_of(Klass const*) const+0x14
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/scratch/2/core.1303466)
#
# An error report file with more information is saved as:
# /testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/scratch/2/hs_err_pid1303466.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vjs3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-01-06 07:32;sspitsyn;I was not able to reproduce this issue in thousands of mach5 runs.
But I think this crash happens in the JVMTI etension function GetCarrierThread at the lines if vthread_oop was not set by JvmtiExport::cv_external_thread_to_JavaThread and can contain garbage:
  if (!java_lang_VirtualThread::is_instance(vthread_oop)) {
    return JVMTI_ERROR_INVALID_THREAD;
  }

The suggested fix is:

diff --git a/src/hotspot/share/prims/jvmtiExport.cpp b/src/hotspot/share/prims/jvmtiExport.cpp
index 84782d6feda..b737772eafc 100644
--- a/src/hotspot/share/prims/jvmtiExport.cpp
+++ b/src/hotspot/share/prims/jvmtiExport.cpp
@@ -763,6 +763,10 @@ JvmtiExport::cv_external_thread_to_JavaThread(ThreadsList * t_list,
   assert(jt_pp != NULL, ""must have a return JavaThread pointer"");
   // thread_oop_p is optional so no assert()
 
+  if (thread_oop_p != NULL) {
+    *thread_oop_p = NULL;
+  }
+
   oop thread_oop = JNIHandles::resolve_external_guard(thread);
   if (thread_oop == NULL) {
     // NULL jthread, GC'ed jthread or a bad JNI handle.
@@ -772,9 +776,6 @@ JvmtiExport::cv_external_thread_to_JavaThread(ThreadsList * t_list,
 
   if (!thread_oop->is_a(vmClasses::Thread_klass())) {
     // The oop is not a java.lang.Thread.
-    if (thread_oop_p != NULL) {
-      *thread_oop_p = NULL;
-    }
     return JVMTI_ERROR_INVALID_THREAD;
   }
   // Looks like a java.lang.Thread oop at this point.
diff --git a/src/hotspot/share/prims/jvmtiExtensions.cpp b/src/hotspot/share/prims/jvmtiExtensions.cpp
index df21f067522..ad4219b6093 100644
--- a/src/hotspot/share/prims/jvmtiExtensions.cpp
+++ b/src/hotspot/share/prims/jvmtiExtensions.cpp
@@ -135,7 +135,7 @@ static jvmtiError JNICALL GetCarrierThread(const jvmtiEnv* env, ...) {
 
   ThreadsListHandle tlh(current_thread);
   JavaThread* java_thread;
-  oop vthread_oop;
+  oop vthread_oop = NULL;
   jvmtiError err = JvmtiExport::cv_external_thread_to_JavaThread(tlh.list(), vthread, &java_thread, &vthread_oop);
   if (err != JVMTI_ERROR_NONE) {
     // We got an error code so we don't have a JavaThread *, but
diff --git a/test/hotspot/jtreg/serviceability/jvmti/vthread/VThreadTest/libVThreadTest.cpp b/test/hotspot/jtreg/serviceability/jvmti/vthread/VThreadTest/libVThreadTest.cpp
index 76f25453b19..ead724b78b9 100644
--- a/test/hotspot/jtreg/serviceability/jvmti/vthread/VThreadTest/libVThreadTest.cpp
+++ b/test/hotspot/jtreg/serviceability/jvmti/vthread/VThreadTest/libVThreadTest.cpp
@@ -32,7 +32,7 @@ extern ""C"" {
 
 typedef struct Tinfo {
   jboolean just_scheduled;
-  const char* tname;
+  char* tname;
 } Tinfo;
 
 static const int MAX_EVENTS_TO_PROCESS = 20;
@@ -50,7 +50,8 @@ find_tinfo(JNIEnv* jni, const char* tname) {
   for (; idx < MAX_WORKER_THREADS; idx++) {
     inf = &tinfo[idx];
     if (inf->tname == NULL) {
-      inf->tname = tname;
+      inf->tname = (char*)malloc(strlen(tname) + 1); 
+      strcpy(inf->tname, tname);
       break;
     }
     if (strcmp(inf->tname, tname) == 0) {
@@ -108,7 +109,7 @@ print_vthread_event_info(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread, jthread v
     }
     inf->just_scheduled = JNI_FALSE;
   }
-  //deallocate(jvmti, jni, (void*)tname);
+  deallocate(jvmti, jni, (void*)tname);
 }
 
 static void
@@ -116,7 +117,7 @@ test_GetVirtualThread(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread, jthread vthr
   jobject thread_vthread = NULL;
   jvmtiError err;
 
-  LOG(""\n"");
+  LOG(""\ntest_GetVirtualThread: event: %s\n"", event_name);
 
   // #1: Test JVMTI GetVirtualThread extension function NULL thread (current)
   err = GetVirtualThread(jvmti, jni, NULL, &thread_vthread);
@@ -148,7 +149,7 @@ test_GetCarrierThread(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread, jthread vthr
   jthread vthread_thread = NULL;
   jvmtiError err;
 
-  LOG(""\n"");
+  LOG(""\ntest_GetCarrierThread: event: %s\n"", event_name);
 
   // #1: Test JVMTI GetCarrierThread extension function with NULL vthread
   err = GetCarrierThread(jvmti, jni, NULL, &vthread_thread);
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] exception in HotSpotJVMCIRuntime.translate can exit the VM,JDK-8279437,5065575,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,dnsimon,dnsimon,2022-01-04 00:31,2022-03-17 01:46,2023-10-01 09:56,2022-01-08 13:49,17,18,19,,,,,,19,hotspot,,0,jdk11-graalvm,jdk17-graalvm,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,jvmci,oracle-triage-19,,,,,,,,,,,"The HotSpotJVMCIRuntime.translate method copies objects between the HotSpot heap and the libjvmci heap. Failure during copying (e.g. due to an OutOfMemoryError) currently results in a VM exit as shown below:

 testHostOOMResourceLimit: Uncaught exception exiting JVMCIEnv scope entered at open/src/hotspot/share/jvmci/jvmciCompilerToVM.cpp:2467
java.lang.OutOfMemoryError: Java heap space
	at jdk.vm.ci.hotspot.CompilerToVM.getResolvedJavaType0(jdk.internal.vm.ci@17.0.2/Native Method)
	at jdk.vm.ci.hotspot.CompilerToVM.getResolvedJavaType(jdk.internal.vm.ci@17.0.2/CompilerToVM.java:675)
	at jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.getHolder(jdk.internal.vm.ci@17.0.2/HotSpotResolvedJavaMethodImpl.java:97)
	at jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.fromMetaspace(jdk.internal.vm.ci@17.0.2/HotSpotResolvedJavaMethodImpl.java:115)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (jvmciRuntime.cpp:1587), pid=7044, tid=7057
#  fatal error: Fatal exception in JVMCI: Uncaught exception exiting JVMCIEnv scope entered at open/src/hotspot/share/jvmci/jvmciCompilerToVM.cpp:2467
#
# JRE version: Java(TM) SE Runtime Environment GraalVM LIBGRAAL_EE 22.0.0-dev (17.0.2+5) (build 17.0.2+5-LTS-jvmci-22.0-b02)
# Java VM: Java HotSpot(TM) 64-Bit Server VM GraalVM LIBGRAAL_EE 22.0.0-dev (17.0.2+5-LTS-jvmci-22.0-b02, mixed mode, sharing, tiered, jvmci, jvmci compiler, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x98dc64]  JVMCIRuntime::fatal_exception(JVMCIEnv*, char const*)+0x74
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /b/b/e/main/vm-enterprise/hs_err_pid7044.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

Instead, the exception should be propagated back into the runtime from which HotSpotJVMCIRuntime.translate was called.
",,,,,,,,,,JDK-8280775,JDK-8281187,JDK-8281987,JDK-8283308,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-01-04 00:31;dnsimon;hs_err_pid7044.log;https://bugs.openjdk.org/secure/attachment/97496/hs_err_pid7044.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vjo3:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-04 02:09;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6951
Date: 2022-01-04 08:51:29 +0000
;;;","2022-01-04 02:41;chagedorn;ILW = Unexpected VM exit when copying fails in rare cases = HLM = P3;;;","2022-01-08 13:49;roboduke;Changeset: e14fb4f4
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2022-01-08 21:47:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e14fb4f4aa9c4569615005e474f897c54094f024
;;;","2022-02-01 02:31;thartmann;Fix Request (JDK 18u)
The fix has already been backported to JDK 17u and should be backported to JDK 18u as well to avoid a regression. The fix is low risk and applies cleanly. It has been tested manually with tier1-3 and in the JDK 17u and JDK 19 CI.;;;","2022-02-01 02:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/17
Date: 2022-02-01 10:32:45 +0000;;;","2022-03-14 08:44;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
A bigger, but jvmci-only change. Risk limited to jvmci.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-03-14 08:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/254
Date: 2022-03-14 15:46:12 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Withdraw all support for ref-default classes ,JDK-8279431,5065568,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-01-03 22:48,2022-01-05 01:49,2023-10-01 09:56,2022-01-05 01:49,repo-valhalla,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,We need to back out all code added via JDK-8244231 for ref-default classes. These have no place in the new 3 bucket model having subsumed by B2 classes (value classes),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vjmj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-04 00:32;sadayapalam;Also calls for backing out the fix for JDK-8271583: [lworld] primitive records can't be reference favoring  ;;;","2022-01-05 01:47;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/valhalla/pull/592
Date: 2022-01-05 09:38:42 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Revalue ACC_PRIMITIVE to be 0x800 to align with draft JVMS,JDK-8279428,5065565,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-01-03 22:32,2022-01-10 01:21,2023-10-01 09:56,2022-01-10 01:21,repo-valhalla,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"http://cr.openjdk.java.net/~dlsmith/jep401/jep401-20211220/specs/primitive-classes-jvms.html

calls for ACC_PRIMITIVE to be 0x800 instead of 0x100 as before.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vjlv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-06 01:58;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/valhalla/pull/593
Date: 2022-01-06 09:54:17 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] failed speculations list must outlive any nmethod that refers to it,JDK-8279412,5065544,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,dnsimon,dnsimon,2022-01-03 13:46,2022-02-16 06:48,2023-10-01 09:56,2022-01-04 02:16,11,17,18,19,,,,,19,hotspot,,0,jdk11-graalvm,jdk11u-jvmci-defer,jdk17-graalvm,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,"Very rarely when running Graal's unit tests, this happens:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (methodData.cpp:829), pid=93495, tid=93496
#  fatal error: Adding to failed speculations list that appears to have been freed. Source: 3183{static void com.oracle.graal.compiler.enterprise.test.CountedStripMiningRangeCheckTest.testStridePosScalePos(jlong, jlong, jlong, jlong)}
#
# JRE version: Java(TM) SE Runtime Environment GraalVM 22.1.0-dev (17.0.1+7) (build 17.0.1+7-LTS-jvmci-21.3-b02)
# Java VM: Java HotSpot(TM) 64-Bit Server VM GraalVM 22.1.0-dev (17.0.1+7-LTS-jvmci-21.3-b02, mixed mode, sharing, tiered, jvmci, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xb9087e]  FailedSpeculation::add_failed_speculation(nmethod*, FailedSpeculation**, unsigned char*, int)+0x12e
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h"" (or dumping to /home/davileop/Work/Source/graal-enterprise/graal-enterprise/core.93495)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

This should be avoidable by allowing a HotSpotNmethod created in a unit test to hold a strong reference to the failed speculations list.",,,,,,,,,,JDK-8281991,JDK-8280053,JDK-8279496,JDK-8279552,JDK-8281190,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vjh7:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-03 14:08;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6949
Date: 2022-01-03 21:58:25 +0000
;;;","2022-01-04 02:16;roboduke;Changeset: 1ffdc52c
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2022-01-04 10:14:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1ffdc52cf0ab88458e0583bff28d35ca33d244b7
;;;","2022-01-04 02:34;chagedorn;ILW = Rare fatal error with Graal unit tests = HLM = P3;;;","2022-01-13 07:08;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
Risk: a small fix avoiding a crash in graal
Clean backport.  SAP nightly testing passed.;;;","2022-01-13 07:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/93
Date: 2022-01-13 15:09:43 +0000;;;","2022-02-01 02:30;thartmann;Fix Request (JDK 18u)
The fix has already been backported to JDK 11u/17u and should be backported to JDK 18u as well to avoid a regression. The fix is low risk and applies cleanly. It has been tested manually with tier1-3 and in the JDK 11u/17u and JDK 19 CI.;;;","2022-02-01 02:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/16
Date: 2022-02-01 10:31:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/jfr/api/recording/time/TestTimeMultiple.java failed with ""RuntimeException: getStopTime() > afterStop""",JDK-8279398,5065529,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,dcubed,dcubed,2022-01-03 10:44,2022-10-13 20:42,2023-10-01 09:56,2022-01-10 07:10,17,18,19,,,,,,18,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,tier3,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

jdk/jfr/api/recording/time/TestTimeMultiple.java

Here's a snippet from the log file:

#section:main
----------messages:(5/277)----------
command: main jdk.jfr.api.recording.time.TestTimeMultiple
reason: User specified action: run main/othervm jdk.jfr.api.recording.time.TestTimeMultiple 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr
elapsed time (seconds): 1.331
----------configuration:(3/38)----------
Boot Layer
  add modules: jdk.jfr

----------System.out:(0/0)----------
----------System.err:(13/1029)----------
java.lang.RuntimeException: getStopTime() > afterStop: expected that 2021-12-27T00:29:59.879034202Z <= 2021-12-27T00:29:59.879034200Z
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertLessThanOrEqual(Asserts.java:154)
	at jdk.jfr.api.recording.time.TestTimeMultiple.main(TestTimeMultiple.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: getStopTime() > afterStop: expected that 2021-12-27T00:29:59.879034202Z <= 2021-12-27T00:29:59.879034200Z
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: getStopTime() > afterStop: expected that 2021-12-27T00:29:59.879034202Z <= 2021-12-27T00:29:59.879034200Z
----------rerun:(42/5189)*----------",,,,,,,,,,JDK-8280302,JDK-8280620,JDK-8293597,JDK-8295313,JDK-8294026,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2vjdv:",9223372036854775807,b31,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-01-04 03:12;egahlin;This probably due to changes to the timestamp mechanism, needed to fix JDK-8268297.

We will likely see this in JDK 18 CI as well.

The original problem was the low resolution of the clock on windows, which allowed two chunks to get the same timestamp, which confuses event streaming as it can't order chunks chronologically.  To prevent this, 1 ns was added if the same timestamp occurred twice. This ensured a strictly increasing clock. 

Problem is that Instant.now(), used in this test, doesn't have that additional nanosecond, so it fails as the end time of recording may get an additional time delta.

Possible solutions:

1) Don't use Instant.now() in the test, instead use the same timestamp method as JFR uses internally. Expose it using white box API.

2) Revert the change in JDK-8268297 and create some other mechanism that allows streaming to order chunks. 

A) The filename hints the order, but then we need to change to a binary tree and compare both filename and timestamp, instead of using a hash table with the timestamp as the key. 

B) Another idea,  Instead of using the filename, introduce a counter (0-255) to the extension bits in the header and use it to resolve order if there is a timestamp collision.

3) Loop in native until we get a new timestamp, with a short sleep (1 ms), perhaps with a safepoint poll(?), so it will not create latencies. Getting the same timestamp is unlikely and typically don't happen during normal operation, only in tests where recording can be very short (ms).

4) Loop in Java, until we get a new timestamp from Instant.now().;;;","2022-01-06 00:09;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/84
Date: 2022-01-06 02:55:48 +0000
;;;","2022-01-10 07:10;roboduke;Changeset: 40df5df9
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-01-10 15:07:49 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/40df5df95edb67331d39d829b895094e961fe21f
;;;","2022-01-10 09:07;roboduke;Changeset: 40df5df9
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-01-10 15:07:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/40df5df95edb67331d39d829b895094e961fe21f
;;;","2022-01-25 04:26;roboduke;Changeset: 40df5df9
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-01-10 15:07:49 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/40df5df95edb67331d39d829b895094e961fe21f
;;;","2022-09-16 04:19;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
Low risk, timestamps of jfr.
Clean backport.
SAP nightly testing passed.;;;","2022-09-16 04:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/688
Date: 2022-09-16 11:22:23 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[test]  Adjust sun/security/pkcs12/KeytoolOpensslInteropTest.java after 8278344,JDK-8279385,5065508,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-01-03 06:16,2022-10-26 22:16,2023-10-01 09:56,2022-01-03 23:57,18,19,,,,,,,19,security-libs,,0,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,"After JDK-8278344, it has been commented that better shouldMatch should be used for the adjusted test parsing output of different OpenSSL versions.",,,,,,,,,,JDK-8281807,JDK-8281998,JDK-8281253,JDK-8281669,JDK-8293005,JDK-8295972,JDK-8295973,JDK-8295971,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278344,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vj97:",9223372036854775807,b04,,,,,,,,,,,,"2022-01-03 06:56;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6946
Date: 2022-01-03 14:52:13 +0000
;;;","2022-01-03 23:57;roboduke;Changeset: 9bdf6eb7
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-01-04 07:55:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9bdf6eb7b2412ecff523015f1430dfb6a0e4dd09
;;;","2022-01-10 05:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/91
Date: 2022-01-10 13:36:25 +0000;;;","2022-02-04 06:48;roboduke;Changeset: 01f93ddf
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-02-04 07:47:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/01f93ddf18daea5c0798ac949c6717c37d9cefa0
;;;","2022-02-07 15:56;roboduke;Changeset: 01f93ddf
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-02-04 07:47:42 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/01f93ddf18daea5c0798ac949c6717c37d9cefa0
;;;","2022-02-11 02:42;mbaesken;Fix Request (17u)
I would like to have the patch in 17u as well, because the issue is present there too. The patch applies cleanly.;;;","2022-02-11 02:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/158
Date: 2022-02-11 10:42:45 +0000;;;","2022-08-24 23:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1344
Date: 2022-08-25 06:50:55 +0000;;;","2022-08-26 01:16;clanger;Fix Request (11u)
Follow up fix for JDK-8278344. No risk, test only. Passed SAP Testing and GHA.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GHA: Print tests that are in error,JDK-8279379,5065502,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-01-03 03:23,2022-01-10 17:10,2023-10-01 09:56,2022-01-04 03:14,11,17,18,,,,,,18,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,,,"Current GHA workflow only prints newfailures.txt when tests fail. But the tests can also ""ERROR"" out. In which case, we want to print other_errors.txt as well.

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR   
>> jtreg:test/langtools:tier1                         4282  4281     0     1 <<
==============================
TEST FAILURE

# newfailures.txt
<empty>

# other_errors.txt
jdk/javadoc/doclet/testLinkPlatform/TestLinkPlatform.java 
",,,,,,,,,,JDK-8279612,JDK-8279810,JDK-8279611,JDK-8279765,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vj7v:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-01-03 03:39;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/75
Date: 2022-01-03 11:34:14 +0000
;;;","2022-01-04 03:14;roboduke;Changeset: 06f37132
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-04 11:13:07 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/06f3713271f7827b376a3a9cfbfd3d91bc77f7de
;;;","2022-01-04 11:35;roboduke;Changeset: 06f37132
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-04 11:13:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/06f3713271f7827b376a3a9cfbfd3d91bc77f7de
;;;","2022-01-05 01:56;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/60
Date: 2022-01-05 09:51:13 +0000
;;;","2022-01-05 01:58;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk11u-dev/pull/741
Date: 2022-01-05 09:53:03 +0000
;;;","2022-01-05 02:12;shade;Fix Request (11u, 17u)

This improves GHA error reporting. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Javac Parser still has stale code supporting nullable projection types from a previous era,JDK-8279377,5065500,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-01-03 02:27,2022-01-10 07:04,2023-10-01 09:56,2022-01-03 03:02,repo-valhalla,,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,,,,,,,To fix JDK-8229537 some support was added to javac parser. This was at a time we had the experimental syntax Type? for nullable projection types. This can and should be garbage collected.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vj7f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-03 03:00;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/valhalla/pull/591
Date: 2022-01-03 10:57:22 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk.jpackage/share/native/applauncher/JvmLauncher.cpp fails to build with GCC 6.3.0,JDK-8279370,5065495,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-01-02 23:43,2022-07-21 03:30,2023-10-01 09:56,2022-01-17 17:12,18,19,,,,,,,19,tools,,0,hgupdate-sync,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"Happens after JDK-8274856, seems like a missing #include.

* For target support_native_jdk.jpackage_libjpackageapplauncheraux_JvmLauncher.o:
src/jdk.jpackage/share/native/applauncher/JvmLauncher.cpp: In member function 'int {anonymous}::JliLaunchData::initJvmlLauncherData(JvmlLauncherData*) const':
src/jdk.jpackage/share/native/applauncher/JvmLauncher.cpp:289:54: error: expected primary-expression before ',' token
                             offsetof(JvmlLauncherData, jliLaunchArgv), curPtr);
                                                      ^
src/jdk.jpackage/share/native/applauncher/JvmLauncher.cpp:289:56: error: 'jliLaunchArgv' was not declared in this scope
                             offsetof(JvmlLauncherData, jliLaunchArgv), curPtr);
                                                        ^~~~~~~~~~~~~
src/jdk.jpackage/share/native/applauncher/JvmLauncher.cpp:289:69: error: 'offsetof' was not declared in this scope
                             offsetof(JvmlLauncherData, jliLaunchArgv), curPtr);
                                                                     ^
src/jdk.jpackage/share/native/applauncher/JvmLauncher.cpp:300:54: error: expected primary-expression before ',' token
                             offsetof(JvmlLauncherData, envVarNames), curPtr);
                                                      ^
src/jdk.jpackage/share/native/applauncher/JvmLauncher.cpp:310:54: error: expected primary-expression before ',' token
                             offsetof(JvmlLauncherData, envVarValues), curPtr);
   ... (rest of output omitted)",,,,,,,,,,JDK-8279955,JDK-8280634,JDK-8289942,JDK-8290794,,,,,,,,,,,,,,,,,,,,,,,JDK-8274856,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vj6b:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-01-03 00:13;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/74
Date: 2022-01-03 08:10:27 +0000
;;;","2022-01-17 17:11;roboduke;Changeset: 14a90e53
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-13 08:51:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/14a90e536b86a8fb8d5f0272ec03359e44638da5
;;;","2022-01-25 04:29;roboduke;Changeset: 14a90e53
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-13 08:51:35 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/14a90e536b86a8fb8d5f0272ec03359e44638da5
;;;","2022-07-20 11:25;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, trivial.
Clean backport.;;;","2022-07-20 11:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/570
Date: 2022-07-20 18:28:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Add parser support for declaration of value classes,JDK-8279368,5065492,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-01-02 22:12,2022-01-10 15:38,2023-10-01 09:56,2022-01-10 15:38,repo-valhalla,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"From https://openjdk.java.net/jeps/8277163

A class can be declared a value class with the value contextual keyword. If a concrete class is declared without the value contextual keyword, it is an identity class.

...

In most other ways, a value class declaration is just like an identity class declaration. It can have superinterfaces, type parameters, enclosing instances, inner classes, overloaded constructors, static members, and the full range of access restrictions on its members.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277163,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vj5n:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-10 04:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/596
Date: 2022-01-10 12:30:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
vmTestbase/nsk/jvmti/scenarios/jni_interception/JI03/ji03t003/TestDescription.java fails with usage tracker,JDK-8279358,5065481,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,lmesnik,lmesnik,2022-01-01 16:23,2022-06-09 22:32,2023-10-01 09:56,2022-06-07 13:50,18,,,,,,,,19,hotspot,,0,atr,,,,,,,,,,,,,,,,,,,"Test vmTestbase/nsk/jvmti/scenarios/jni_interception/JI03/ji03t003/TestDescription.java

fails with usage tracker.

Log:
TEST FAILED: the tested JNI function ExceptionOccurred() has not been redirected:
	3 intercepted call(s) instead of 2 as expected
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284028,JDK-8286445,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vj37:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-04-29 14:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8475
Date: 2022-04-29 21:39:20 +0000;;;","2022-05-09 14:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8614
Date: 2022-05-09 21:26:50 +0000;;;","2022-06-07 13:50;dukebot;Changeset: b12e7f1b
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2022-06-07 20:32:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b12e7f1bf95e27fc50b79a5d2c09b8820a4a935a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Method linking fails with guarantee(mh->adapter() != NULL) failed: Adapter blob must already exist!,JDK-8279356,5065479,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,thartmann,lmesnik,lmesnik,2022-01-01 16:03,2022-03-17 02:37,2023-10-01 09:56,2022-01-10 23:00,11,17,18,,,,,,18,hotspot,,0,atr,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,"Test crashes with 
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (method.cpp:1285), pid=536, tid=61312
#  guarantee(mh->adapter() != NULL) failed: Adapter blob must already exist!
#
# JRE version: Java(TM) SE Runtime Environment (18.0+27) (build 18-ea+27-1924)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (18-ea+27-1924, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: T:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\scratch\0\hs_err_pid536.mdmp
#
# JFR recording file will be written. Location: T:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\scratch\0\hs_err_pid536.jfr
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xbootclasspath/a:T:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\scratch\0\wb.jar -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Djava.security.manager=allow -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=t:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\tmp -Xcomp -XX:+CreateCoredumpOnCrash -XX:TieredStopAtLevel=2 -XX:MaxRAMPercentage=50 --enable-preview -Djava.net.preferIPv6Addresses=false -XX:+DisplayVMOutputToStderr -Xlog:gc*,gc+heap=debug:gc.log:uptime,timemillis,level,tags -XX:+DisableExplicitGC -XX:+StartAttachListener -Xlog:monitorinflation=info:file=../monitorinflation.log::filesize=500m -Djava.io.tmpdir=T:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\scratch\0/java.io.tmpdir -Duser.home=T:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\scratch\0/user.home -agentpath:c:\ade\mesos\work_dir\jib-master\install\jdk-18+27-1924\windows-x64.test\hotspot\jtreg\native\JvmtiStressModule.dll -XX:NativeMemoryTracking=detail -Djdk.test.lib.random.seed=3309059798736813513 applications.kitchensink.process.stress.Main T:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\scratch\0\kitchensink.final.properties

Host: AMD EPYC 7J13 64-Core Processor                , 12 cores, 47G,  Windows 10 , 64 bit Build 19041 (10.0.19041.1348)
Time: Fri Dec 17 19:54:47 2021 Etc elapsed time: 24.599284 seconds (0d 0h 0m 24s)

---------------  T H R E A D  ---------------

Current thread (0x00000152f4c37960):  JavaThread ""C1 CompilerThread0"" daemon [_thread_in_vm, id=61312, stack(0x0000003a04a00000,0x0000003a04b00000)]


Current CompileTask:
C1:  24599 23642    b  2       jdk.jfr.internal.EventWriter::<init> (58 bytes)

Stack: [0x0000003a04a00000,0x0000003a04b00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x6976da]  os::platform_print_native_stack+0xca  (os_windows_x86.cpp:235)
V  [jvm.dll+0x7f1f4d]  VMError::report+0xc4d  (vmError.cpp:828)
V  [jvm.dll+0x7f385e]  VMError::report_and_die+0x78e  (vmError.cpp:1656)
V  [jvm.dll+0x7f3ec7]  VMError::report_and_die+0x47  (vmError.cpp:1437)
V  [jvm.dll+0x25cbfa]  report_vm_error+0x8a  (debug.cpp:280)
V  [jvm.dll+0x64e639]  Method::set_code+0x39  (method.cpp:1285)
V  [jvm.dll+0x1dd2bf]  ciEnv::register_method+0x5ff  (ciEnv.cpp:1168)
V  [jvm.dll+0x148e71]  Compilation::compile_method+0x271  (c1_Compilation.cpp:475)
V  [jvm.dll+0x14821a]  Compilation::Compilation+0x19a  (c1_Compilation.cpp:590)
V  [jvm.dll+0x149f01]  Compiler::compile_method+0xe1  (c1_Compiler.cpp:251)
V  [jvm.dll+0x23eb2a]  CompileBroker::invoke_compiler_on_method+0x77a  (compileBroker.cpp:2291)
V  [jvm.dll+0x23ce0c]  CompileBroker::compiler_thread_loop+0x25c  (compileBroker.cpp:1967)
V  [jvm.dll+0x7a4611]  JavaThread::run+0x131  (thread.cpp:1280)
V  [jvm.dll+0x79ea4a]  Thread::call_run+0x8a  (thread.cpp:368)
V  [jvm.dll+0x696585]  thread_native_entry+0x75  (os_windows.cpp:544)
C  [ucrtbase.dll+0x21bb2]
C  [KERNEL32.DLL+0x17034]
C  [ntdll.dll+0x52651]",,,,,,,,,,JDK-8280852,JDK-8280305,JDK-8280689,JDK-8283313,JDK-8282647,JDK-8280625,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-01-01 16:07;lmesnik;test-support_jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java_applications_runthese_RunThese30M_hs_err_pid536.log;https://bugs.openjdk.org/secure/attachment/97476/test-support_jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java_applications_runthese_RunThese30M_hs_err_pid536.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vj2r:",9223372036854775807,b31,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-01-01 16:04;lmesnik;Crash reproduced with ""-Xcomp -XX:+CreateCoredumpOnCrash -XX:TieredStopAtLevel=1 or 2"" so far with product binaries on windows only.
;;;","2022-01-03 01:53;chagedorn;ILW = Crash with guarantee when registering method, occurred twice in long running test with same C1 method, disable compilation of affected method = HLM = P3;;;","2022-01-03 06:33;thartmann;I traced it back to JDK 17 b8. It's probably a regression from JDK-8251462 but I'll verify.

Update: I verified that it's a regression from JDK-8251462.;;;","2022-01-06 07:22;thartmann;I was able to extract a regression test and this issue was *not* introduced by JDK-8251462 but just triggered due to slightly different compilation behavior.;;;","2022-01-06 07:26;thartmann;Updated ILW = Crash with guarantee when registering method, reproducible with targeted regression test, increase code cache size = HMM = P2;;;","2022-01-07 09:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/6990
Date: 2022-01-07 16:57:03 +0000;;;","2022-01-09 23:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/88
Date: 2022-01-10 07:46:24 +0000;;;","2022-01-10 23:00;roboduke;Changeset: 6d7db4b0
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-01-11 06:59:26 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/6d7db4b0b3e9172645cef12c36fbeb41a6d38d83
;;;","2022-01-12 17:07;roboduke;Changeset: 6d7db4b0
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-01-11 06:59:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6d7db4b0b3e9172645cef12c36fbeb41a6d38d83
;;;","2022-01-25 04:27;roboduke;Changeset: 6d7db4b0
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-01-11 06:59:26 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/6d7db4b0b3e9172645cef12c36fbeb41a6d38d83
;;;","2022-03-03 07:04;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly.;;;","2022-03-03 07:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/190
Date: 2022-03-03 15:08:09 +0000;;;","2022-03-14 07:37;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.16-oracle. Doesn't applies cleanly, but is simple to resolve. Review: https://github.com/openjdk/jdk11u-dev/pull/891
Test has passed.
;;;","2022-03-14 07:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/891
Date: 2022-03-14 14:35:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[TESTBUG] SADebugDTest.java does not handle ""Address already in use"" error",JDK-8279351,5065460,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2021-12-31 05:33,2023-01-17 10:25,2023-10-01 09:56,2022-01-04 07:02,19,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,"We expect SADebugDTest.java will retly the test when it encounters ""Address already in use"" error. However RuntimeException is thrown when the error happens.

Please see serviceability-dev post for details.
https://mail.openjdk.java.net/pipermail/serviceability-dev/2021-December/040453.html",,,,,,,,,,JDK-8300186,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2viyj:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-12-31 05:44;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6941
Date: 2021-12-31 13:39:28 +0000
;;;","2022-01-04 07:02;roboduke;Changeset: d1e6f261
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2022-01-04 15:00:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d1e6f26160e811b8d6f44108899422a62c0be388
;;;","2023-01-12 01:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1061
Date: 2023-01-12 09:12:01 +0000;;;","2023-01-12 23:49;mbaesken;jdk17 backport request
I would like to have the change in jdk17 as well because it would be beneficial there too. The backport is low risk and clean.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JSSE config for non-file truststore misplaced,JDK-8279340,5065035,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgallard,webbuggrp,webbuggrp,2021-12-19 20:43,2022-01-14 02:52,2023-10-01 09:56,2022-01-05 07:11,11,17,8,,,,,,18,docs,,0,dcsaw,jdk11u-na,jdk17u-na,noreg-doc,openjdk-na,securitydocs,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Mistake exists in all versions I can check back to 7, although 8 and 7 HTML use meaningful ids not GUIDs, and 7 has a single table combining secprops and sysprops. 

A DESCRIPTION OF THE PROBLEM :
https://docs.oracle.com/en/java/javase/17/security/java-secure-socket-extension-jsse-reference-guide.html#GUID-A41282C3-19A3-400A-A40F-86F4DA22ABA9 

In the second table (system properties) at Customizing JSSE the entry for javax.net.ssl.trustStoreType says ""The value NONE may be specified [for a non-file-based store]"". This belongs on the entry for javax.net.ssl.trustStore (the filename) not for trustStoreType. (The same text is correctly placed for keyStore and not keyStoreType.) 


FREQUENCY : always


",,,,,,,,,,JDK-8279476,JDK-8279478,JDK-8279480,JDK-8279477,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vgc3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,"2021-12-30 03:33;tongwan;The same issue can be found at:
https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html
https://docs.oracle.com/en/java/javase/11/security/java-secure-socket-extension-jsse-reference-guide.html;;;","2022-01-06 01:41;shade;Docs issue, does not affect OpenJDK directly, adding openjdk-na.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(ch) Input/Output streams returned by Channels factory methods don't support concurrent read/write ops,JDK-8279339,5065437,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2021-12-30 03:11,2022-01-12 16:48,2023-10-01 09:56,2022-01-06 00:13,,,,,,,,,19,core-libs,,1,,,,,,,,,,,,,,,,,,,,"If someone has a SocketChannel sc then one way to obtain input/output streams is via the Socket adaptor, i.e. sc.socket().getXXXStream. Another way is with Channels.newXXXStream(sc) factory methods. 

A long standing limitation (that dates from the original JSR-51 and Java 1.4) is that the input/output streams returned by the Channels.newXXXStream methods must synchronize on the channel's blockingLock() to prevent the channel from being configured non-blocking. There is one ""blocking lock"" per SelectableChannel so problematic when the SelectableChannel is also a ByteChannel as it prevents a thread from writing while another is blocked in read (and vice versa).

More background on this issue can be found in JDK-4509080. The input/output streams for the Socket adaptor had the same limitation prior to changes in JDK 13 and JDK-8222774. The issue with the streams returned by Channels.newXXXStream resurfaced recently as part of side discussion of JDK-8278268.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vitf:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-12-30 03:36;mkarg;Thank you for addressing this issue. Do you want me to provide a PR, or do you prefer to work on this issue on your own? Asking because you set yourself as the assignee while in the original discussion I said I will look into it anyways.;;;","2021-12-30 03:37;mkarg;See also this discussion and reproducer: https://github.com/trishagee/socket-locking/pull/1;;;","2021-12-30 08:11;alanb;Most of the issues in JDK-4509080 were addressed as part of larger refactoring work in JDK-8222774. I have preliminary changes that build on that that would allow the Channels method to have an input/output view of the channel that works like the socket adaptor. So you can leave it assigned to me.;;;","2022-01-04 01:54;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6953
Date: 2022-01-04 09:13:34 +0000
;;;","2022-01-06 00:13;roboduke;Changeset: 2dbb936d
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-01-06 08:12:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2dbb936da91a875a5a88da5d4c0b4956b9c6368f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The MToolkit is still referenced in a few places,JDK-8279337,5065434,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,serb,serb,serb,2021-12-29 22:32,2022-01-12 16:49,2023-10-01 09:56,2022-01-07 17:03,11,18,19,,,,,,19,client-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,"The MToolkit (motif toolkit) was removed in jdk7, but it is still referenced in a few places.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2visr:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-12-30 02:19;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6939
Date: 2021-12-30 06:33:24 +0000
;;;","2022-01-07 17:03;roboduke;Changeset: f203723f
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-01-08 01:02:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f203723fc72c5d92c8745d4c595f360a9b50c512
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringIndexOutOfBoundsException when testing sun.tools.jar.Manifest.isManifestName with empty input,JDK-8279336,5065020,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,lpinto,webbuggrp,webbuggrp,2021-12-18 22:26,2022-07-08 01:05,2023-10-01 09:56,2022-05-23 07:48,8,,,,,,,,8u351,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Throw StringIndexOutOfBoundsException when testing sun.tools.jar.Manifest.isManifestName with empty input.
This method is unavailable in jdk1.8.0_301, but it still works in jdk1.8.0_292.
You can just replace API ""charAt"" with ""startsWith"", and this exception will not appear again.
This kind of reform has happened before, please refer to https://github.com/openjdk/jdk/commit/e341e35276315a5140ddec11a7e659d57328e9a0

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
The test case:
@Test
    public void test_isManifestNam(){
        String string0 = """";
        sun.tools.jar.Manifest.isManifestName(string0);
    }

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
When the input is empty, it should return false rather than StringIndexOutOfBoundsException.
ACTUAL -
java.lang.StringIndexOutOfBoundsException: String index out of range: 0

	at java.lang.String.charAt(String.java:658)
	at sun.tools.jar.Manifest.isManifestName(Manifest.java:247)

---------- BEGIN SOURCE ----------
 public static boolean isManifestName(String name) {

        // remove leading /
        if (name.charAt(0) == '/') {
            name = name.substring(1, name.length());
        }
        // case insensitive
        name = name.toUpperCase();

        if (name.equals(""META-INF/MANIFEST.MF"")) {
            return true;
        }
        return false;
    }
---------- END SOURCE ----------

FREQUENCY : occasionally


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-12-27 20:14;adev;Test.java;https://bugs.openjdk.org/secure/attachment/97465/Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vg8r:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@189ffaae,,,,,,,,,"2021-12-29 21:39;adev;StringIndexOutOfBoundsException is thrown when testing sun.tools.jar.Manifest.isManifestName with empty input

The issue is reproducible with the given reproducer.
java.lang.StringIndexOutOfBoundsException: String index out of range: 0

at java.lang.String.charAt(String.java:658)
at sun.tools.jar.Manifest.isManifestName(Manifest.java:247) ;;;","2021-12-29 21:42;adev;I was able to reproduce with jdk1.8.0_301 as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some JFR tests do not accept 'GCLocker Initiated GC' as a valid GC cause,JDK-8279333,5065428,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fmatte,enikitin,enikitin,2021-12-29 12:10,2022-01-24 23:56,2023-10-01 09:56,2022-01-06 06:21,18,19,,,,,,,18,hotspot,,0,atr,,,,,,,,,,,,,,,,,,,"Tests in question:

jdk/jfr/event/gc/collection/TestGCCauseWithG1ConcurrentMark.java
jdk/jfr/event/gc/collection/TestGCCauseWithG1FullCollection.java


Error message:
GC cause 'GCLocker Initiated GC' not in the valid causes[G1 Preventive Collection, G1 Compaction Pause, G1 Evacuation Pause, System.gc()]: expected true, was false

The failure superficially resembles the JDK-8268424, though it is not a new GC cause here.

Sample stack trace:

----------System.err:(13/924)----------
java.lang.RuntimeException: GC cause 'GCLocker Initiated GC' not in the valid causes[G1 Preventive Collection, G1 Compaction Pause, G1 Evacuation Pause, System.gc()]: expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at jdk.jfr.event.gc.collection.GCGarbageCollectionUtil.test(GCGarbageCollectionUtil.java:98)
	at jdk.jfr.event.gc.collection.TestGCCauseWithG1ConcurrentMark.main(TestGCCauseWithG1ConcurrentMark.java:44)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

Log:

Event: jdk.GarbageCollection {
  startTime = 02:06:00.907 (2021-12-13)
  duration = 2.18 ms
  gcId = 19
  name = ""G1New""
  cause = ""G1 Evacuation Pause""
  sumOfPauses = 2.18 ms
  longestPause = 2.18 ms
}

Event: jdk.GarbageCollection {
  startTime = 02:06:00.911 (2021-12-13)
  duration = 2.51 ms
  gcId = 20
  name = ""G1New""
  cause = ""GCLocker Initiated GC""
  sumOfPauses = 2.51 ms
  longestPause = 2.51 ms
}
",,,,,,,,,,JDK-8280295,JDK-8279775,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2virf:",9223372036854775807,b31,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-01-05 22:49;fmatte;""GCLocker Initiated GC"" needs to be added as GC causes. I am wondering why the failure was not observed so far. I am not able to reproduce this locally.
> String[] gcCauses = {""G1 Evacuation Pause"", ""G1 Preventive Collection"", ""G1 Compaction Pause"", ""System.gc()""};;;;","2022-01-05 23:44;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6978
Date: 2022-01-06 07:40:50 +0000
;;;","2022-01-06 06:16;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/86
Date: 2022-01-06 14:11:45 +0000
;;;","2022-01-06 06:21;roboduke;Changeset: 7c792f27
Author:    Fairoz Matte <fmatte@openjdk.org>
Committer: Erik Gahlin <egahlin@openjdk.org>
Date:      2022-01-06 14:20:45 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/7c792f27a8f6ccf87922cc5f2768946e55e33816
;;;","2022-01-10 09:07;roboduke;Changeset: 7c792f27
Author:    Fairoz Matte <fmatte@openjdk.org>
Committer: Erik Gahlin <egahlin@openjdk.org>
Date:      2022-01-06 14:20:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7c792f27a8f6ccf87922cc5f2768946e55e33816
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove hardcoded IPv4 available policy on Windows,JDK-8279329,5065422,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,msheppar,msheppar,msheppar,2021-12-29 07:48,2022-02-21 04:48,2023-10-01 09:56,2022-02-08 00:32,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,"InetAddress::initializePlatformLookupPolicy() invokes 
isIPv4Available()

this will retrieve a state variable indicating the availability of IPv4. On Windows OS platforms this is hardcoded to true as determined by native function IPv4_supported in 

open/src/java.base/windows/native/libnet/net_util_md.c

jint  IPv4_supported()
{
    /* TODO: properly check for IPv4 support on Windows */
    return JNI_TRUE;
}


This has implications on IPv6 only platforms, and as such skews the lookup policy on such platforms

It would seem appropriate to amend this function to test the socket creation as per other OS platforms

jint  IPv4_supported()
{
    SOCKET s = socket(AF_INET, SOCK_STREAM, 0) ;
    if (s == INVALID_SOCKET) {
        return JNI_FALSE;
    }
    closesocket(s);

    return JNI_TRUE;
    /* TODO: properly check for IPv4 support on Windows */
   // return JNI_TRUE;
}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275640,JDK-8282189,,,,,,,,,,,JDK-8279566,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2viq3:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-02-02 00:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7317
Date: 2022-02-02 08:31:08 +0000;;;","2022-02-02 10:27;msheppar;This change is needed for InetAddress to function properly in a Windows IPv6 only environment and indirectly JDK-8279566 has a dependency on it.

This was found when executing some sanity checks in IPv6 only configuration e.g.
InetAddress.getLoopbackAddress always returns 127.0.0.1 rather than 0::1;;;","2022-02-08 00:32;roboduke;Changeset: f2a9627c
Author:    Masanori Yano <myano@openjdk.org>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2022-02-08 08:31:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f2a9627c05f9ef82eb83d8c1b9d4209bf42e7d8d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CssParser uses default charset instead of UTF-8,JDK-8279328,5065421,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mstrauss,mstrauss,mstrauss,2021-12-29 07:31,2022-01-17 07:26,2023-10-01 09:57,2022-01-08 08:54,jfx17,,,,,,,,jfx18,javafx,,0,,,,,,,,,,,,,,,,,,,,"`CssParser.parse(URL)` is specified to assume UTF-8 file encoding, but (implicitly) uses the default charset to read the file, potentially resulting in incorrect interpretation of the file content.

This can be fixed by explicitly specifying the UTF-8 charset for `InputStreamReader`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vipv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-12-29 07:42;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jfx/pull/705
Date: 2021-12-29 15:39:39 +0000
;;;","2022-01-08 08:54;roboduke;Changeset: be3b3bd2
Author:    Michael Strauß <mstrauss@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-01-08 16:54:14 +0000
URL:       https://git.openjdk.java.net/jfx/commit/be3b3bd2a3af078b7c43a400014721efc6824efa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/jvmci/compilerToVM/DisassembleCodeBlobTest.java assumes immutable code,JDK-8279317,5065412,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlong,alanb,alanb,2021-12-29 00:09,2022-04-22 03:28,2023-10-01 09:57,2022-03-15 00:27,19,repo-loom,,,,,,,19,hotspot,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,,,"compiler/jvmci/compilerToVM/DisassembleCodeBlobTest.java has been failing intermittently in the loom repo for the last few weeks. The typical output is:

----------System.err:(16/2068)----------
java.lang.RuntimeException: CompileCodeTestCase{executable=protected compiler.jvmci.compilerToVM.CompileCodeTestCase$Dummy(), bci=-1} : 3nd invocation returned different value from 2nd: expected   0x00007f41098d8360: 8984 2400 | a0fe ff55 | 4883 ec10 | 9090 9090 | 4181 7f1c | 0000 0000 | 0f84 0500  to equal   0x00007f41098d8360: 8984 2400 | a0fe ff55 | 4883 ec10 | 9090 9090 | 4181 7f1c | 0200 0000 | 0f84 0500 
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.Asserts.assertEQ(Asserts.java:178)
	at compiler.jvmci.compilerToVM.DisassembleCodeBlobTest.check(DisassembleCodeBlobTest.java:112)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at compiler.jvmci.compilerToVM.DisassembleCodeBlobTest.main(DisassembleCodeBlobTest.java:66)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1496)

JavaTest Message: Test threw exception: java.lang.RuntimeException: CompileCodeTestCase{executable=protected compiler.jvmci.compilerToVM.CompileCodeTestCase$Dummy(), bci=-1} : 3nd invocation returned different value from 2nd: expected   0x00007f41098d8360: 8984 2400 | a0fe ff55 | 4883 ec10 | 9090 9090 | 4181 7f1c | 0000 0000 | 0f84 0500  to equal   0x00007f41098d8360: 8984 2400 | a0fe ff55 | 4883 ec10 | 9090 9090 | 4181 7f1c | 0200 0000 | 0f84 0500 
JavaTest Message: shutting down test",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8210498,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vinv:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-07 19:15;dlong;I think this is the nmethod entry barrier getting disarmed, which patches the code.  If so, I don't see why this wouldn't affect jdk19 as well.
[~eosterlund], do you agree?;;;","2022-03-07 20:10;dlong;It looks like loom always has nmethod entry barriers enabled.  So maybe this problem only exists in jdk19 with Shenandoah and ZGC?;;;","2022-03-10 16:18;dlong;The test only runs with JVMCI, which means only with GCs that support JVMCI:  UseSerialGC || UseParallelGC || UseG1GC.  So technically, this test can't fail on jdk19, but the test is still broken in my opinion.  I don't see the value in disassembling the same nmethod 3 times and comparing the results from the 2nd and 3rd times.  It seems like even without nmethod entry barriers, any other change to the code would cause the test to fail, like an embedded oop moved after a GC, or a call site that gets updated.;;;","2022-03-10 20:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7781
Date: 2022-03-11 04:14:00 +0000;;;","2022-03-11 14:59;dlong;MDash: https://mach5.us.oracle.com/mdash/jobs/dlong-8279317-20220312-1201-29974087
MDash: https://mach5.us.oracle.com/mdash/jobs/dlong-8279317-20220312-1202-29974099
MDash: https://mach5.us.oracle.com/mdash/jobs/dlong-8279317-20220312-1203-29974108
MDash: https://mach5.us.oracle.com/mdash/jobs/dlong-8279317-20220312-1204-29974119
;;;","2022-03-15 00:27;dukebot;Changeset: 34d4ffce
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-03-15 07:24:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/34d4ffcea5d71560c549655967de863342b48984
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[arm32] SIGILL when running GetObjectSizeIntrinsicsTest,JDK-8279300,5065390,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,snazarki,snazarki,snazarki,2021-12-28 01:12,2022-01-24 23:53,2023-10-01 09:57,2022-01-10 03:55,11,17,18,19,,,,,19,hotspot,,0,c1,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oraclejdk-na,oracle-triage-19,redhat-interest,,,,,,,,,,,,"Synopsis:
1. Release runtime crashes with SIGILL when executing JITed code
2. Debug runtime asserts at C1 thread
#  Internal Error (/home/jenkins/18.04/workspace/jdk17/linux/armhf/c2/build/generic/sa/release/crossbuild/jdk17/src/hotspot/cpu/arm/assembler_arm_32.cpp:77), pid=32041, tid=32056
#  assert((imm & 0x0ffffff0) == 0) failed: too complicated constant: -8 (fffffff8)

Investigation:
Both crashes are caused by the constant supplied to ARM32 logic instruction. C1 assembler doesn't guard incoming parameter with verification procedure as it is done for arithmetic ops or long arguments.  

The fix:
void LIR_Assembler::logic_op(LIR_Code code, LIR_Opr left, LIR_Opr right, LIR_Opr dest) {
...
      assert(right->is_constant(), ""must be"");
      const uint c = (uint)right->as_constant_ptr()->as_jint();
+      if (!Assembler::is_arith_imm_in_range(c)) {
+        BAILOUT(""illegal arithmetic operand"");
+     }
      switch (code) {
        case lir_logic_and: __ and_32(res, lreg, c); break;
        case lir_logic_or:  __ orr_32(res, lreg, c); break;
        case lir_logic_xor: __ eor_32(res, lreg, c); break;
        default: ShouldNotReachHere();
      }
....

Workaround:
Disable tiered compilation",,,,,,,,,,JDK-8279863,JDK-8279883,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279301,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,arm,,,,,,,,,linux,,,,,"0|i2viiz:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-12-28 01:16;snazarki;This op (logic_and) is issued from shared code of c1_LIRGenerator.cpp
1412   │ #else
1413   │   __ add(length_int, header_size, length_int);
1414   │   if (round_mask != 0) {
1415   │     __ logical_and(length_int, LIR_OprFact::intConst(~round_mask), length_int);  // <------- constant doesn't fit ARM instruction requirement
1416   │   }
1417   │   __ convert(Bytecodes::_i2l, length_int, result_reg);
1418   │ #endif

The fix will be provided under separate case;;;","2021-12-28 12:57;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6937
Date: 2021-12-28 20:53:49 +0000
;;;","2022-01-02 23:39;chagedorn;ILW = C1 assertion failure  in code generation, only on arm32 and with single test, disable compilation of affected method = HLM = P3;;;","2022-01-10 03:55;roboduke;Changeset: 6613ce64
Author:    Sergey Nazarkin <snazarki@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-10 11:54:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6613ce64d76a6cc40fd933b022834098721b8d23
;;;","2022-01-10 04:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/72
Date: 2022-01-10 12:16:51 +0000;;;","2022-01-10 04:23;snazarki;Fix Request (17u)

Fixes the ARM32 bug. Applies cleanly. ;;;","2022-01-10 10:08;snazarki;Fix Request (11u)

Fix for SIGILL on arm32 platform. Applies cleanly.;;;","2022-01-10 10:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/748
Date: 2022-01-10 17:56:22 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove Shape::setMode method,JDK-8279297,5065335,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,webbuggrp,webbuggrp,2021-12-24 09:45,2022-09-12 05:04,2023-10-01 09:57,2022-07-07 07:21,jfx17,,,,,,,,jfx19,javafx,,0,dcspn,noreg-cleanup,reproducer-other,sn_121,sn_122,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
There is an obvious problem in the following source file

* jfx/modules/javafx.graphics/src/main/java/javafx/scene/shape/Shape.java

    void setMode(NGShape.Mode mode) {
        mode = mode; // -> this.mode = mode;
    }

This implementation is considered to be working differently than expected.

If you fix this issue, you will be able to use the test I attached in JDK-8229264
The COPY mode of the blend mode works correctly.
I have confirmed this.




STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. run the tests attached to JDK-8229264
Check the rendering result of COPY mode. 2.

The following screenshot may be helpful.
* https://github.com/javafxports/openjdk-jfx/issues/552

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Background is not filled with black

ACTUAL -
Background is filled with black


---------- BEGIN SOURCE ----------
Use the attached test for JDK-8229264
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289379,,,,,,,,,,JDK-8289381,,,,,,,,,,,,JDK-8229264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vi6r:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-12-27 23:05;pnarayanaswa;Moving to JDK for Dev team's review.;;;","2022-01-03 08:09;kcr;Yes, this is clearly a bad assignment. As a result, the setMode method in Shape does nothing. The only reason that it isn't causing any problems is that the setMode method is unused; the mode field is instead computed and set in the checkModeChanged method.

The best fix for this bug is to remove the unused setMode method from Shape and ShapeHelper.

Note that this is not the cause of JDK-8229264, nor is it related in any way to that bug, in spite of the comment in the description.;;;","2022-07-06 11:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/814
Date: 2022-07-06 18:12:42 +0000;;;","2022-07-07 07:21;dukebot;Changeset: 28b8220e
Author:    Andy Goryachev <andy.goryachev@oracle.com>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2022-07-07 14:19:15 +0000
URL:       https://git.openjdk.org/jfx/commit/28b8220e051620674f247c22a217bb9590d103a2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NonblockingQueue::try_pop may improperly indicate queue is empty,JDK-8279294,5065381,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kbarrett,kbarrett,kbarrett,2021-12-27 08:56,2023-05-19 00:55,2023-10-01 09:57,2022-01-26 09:09,18,,,,,,,,19,hotspot,,0,gc-g1,gc-pending-review,,,,,,,,,,,,,,,,,,"If there are concurrent calls to NonblockingQueue::try_pop, it is possible for contention between them to result in some of them incorrectly indicating the queue is empty, when it actually is not.

If a try_pop finds a head object whose next value is null, the current code assumes that means it lost the race with the 3rd clause (which claimed the last entry), so the list is now effectively empty.  But it could have instead lost the race with the second clause, and we don't know whether the queue now has any entries.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273383,,,,,,,,,,,,JDK-8268290,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vigz:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-12-27 08:57;kbarrett;This was found while investigating JDK-8273383, but is unfortunately not the cause of that bug.
;;;","2021-12-30 15:20;kbarrett;Better than just returning true+NULL might be to try `cmpxchg(&_head, result, (T*)NULL)`.
;;;","2022-01-17 00:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/106
Date: 2022-01-17 08:23:37 +0000;;;","2022-01-17 00:28;kbarrett;The actual change has ended up being significantly different from what was proposed in the original description, so I deleted that.
;;;","2022-01-19 14:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7149
Date: 2022-01-19 22:43:25 +0000;;;","2022-01-26 09:09;roboduke;Changeset: 4b2370e5
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2022-01-26 17:07:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4b2370e57698e7413fef053afe9d22bb0bc86041
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"symbol not found error, implicit lambdas and diamond constructor invocations",JDK-8279290,5065116,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,webbuggrp,webbuggrp,2021-12-21 04:59,2022-01-25 00:10,2023-10-01 09:57,2022-01-18 07:51,17,,,,,,,,19,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
debian sid
Linux 5.10.0-6-amd64 #1 SMP Debian 5.10.28-1 (2021-04-09) x86_64 GNU/Linux
openjdk 17.0.1 2021-10-19
OpenJDK Runtime Environment (build 17.0.1+12-Debian-1)
OpenJDK 64-Bit Server VM (build 17.0.1+12-Debian-1, mixed mode, sharing)


A DESCRIPTION OF THE PROBLEM :
type inference failed with 'cannot find symbol' error

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
javac Test.java

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
compiled successfuly
ACTUAL -
javac Test.java
Test.java:25: error: cannot find symbol
                System.out.println(inHours); //cannot find symbol inHours?
                                   ^
  symbol: variable inHours
Test.java:31: error: cannot find symbol
                System.out.println(inHours); //cannot find symbol inHours?
                                   ^
  symbol: variable inHours
Test.java:37: error: cannot find symbol
                System.out.println(inHours); //cannot find symbol inHours?
                                   ^
  symbol: variable inHours
3 errors


---------- BEGIN SOURCE ----------
package bug;

import java.util.function.Consumer;

class Test {
    // B must be generic to reproduce
    static class B<T>{}

    static class A1 {
        public <T> A1(Consumer<T> cons) {}
    }

    static class A2<T> {
        public A2(Consumer<T> cons) {}
    }

    static class A3 {
        public <T> A3(T val, Consumer<T> cons) {}
    }

    public void mount() {
        // not works. Expected inHours will be infered as Object
        new A1(inHours ->
            new B<>() {{
                System.out.println(inHours); //cannot find symbol inHours?
            }});

        // not works. Expected inHours will be infered as Object
        new A2<>(inHours ->
            new B<>() {{
                System.out.println(inHours); //cannot find symbol inHours?
            }});

        // not works. Expected inHours will be infered as Boolean
        new A3(true, inHours ->
            new B<>() {{
                System.out.println(inHours); //cannot find symbol inHours?
            }});
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
package bug;

import java.util.function.Consumer;

public class Workaround {
    // B must be generic to reproduce
    static class B<T> {}

    static class A1 {
        public <T> A1(Consumer<T> cons) {}
    }

    static class A2<T> {
        public A2(Consumer<T> cons) {}
    }

    static class A3 {
        public <T> A3(T val, Consumer<T> cons) {}
    }

    public void mount() {
        // works (workaround)
        new A1((Consumer<Boolean>) inHours ->
            new B<>() {{
                System.out.println(inHours);
            }});

        // works (workaround)
        new A2<Boolean>(inHours ->
            new B<>() {{
                System.out.println(inHours);
            }});

        // works (workaround)
        new A3(true, (Consumer<Boolean>) inHours ->
            new B<>() {{
                System.out.println(inHours);
            }});
    }
}


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-12-26 22:59;adev;Test.java;https://bugs.openjdk.org/secure/attachment/97457/Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vgu3:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-12-26 23:07;adev;The issue is reproducible. 
> error: cannot find symbol
System.out.println(inHours); //cannot find symbol inHours?

Typecasting the lambda parameter solves the problem.;;;","2022-01-05 21:48;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6977
Date: 2022-01-06 05:42:49 +0000
;;;","2022-01-18 07:51;roboduke;Changeset: 9e3f68d8
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2022-01-18 15:50:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9e3f68d8f41ff632ebf28a6f488f6a06754a088f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PKCS9Attribute SigningTime always encoded in UTFTime,JDK-8279254,5065323,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bperez,weijun,weijun,2021-12-23 19:14,2023-07-12 13:27,2023-10-01 09:57,2023-06-23 08:33,,,,,,,,,22,security-libs,,0,starter-bug,,,,,,,,,,,,,,,,,,,"According to https://datatracker.ietf.org/doc/html/rfc2630#section-11.3, 

   Dates between 1 January 1950 and 31 December 2049 (inclusive) must be
   encoded as UTCTime.  Any dates with year values before 1950 or after
   2049 must be encoded as GeneralizedTime.

In fact, all other time encoding in X.509 follows the similar style. We should create a single argument `DerOutputStream::putTime` method to deal with this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vi43:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-06-22 11:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14617
Date: 2023-06-22 18:45:14 +0000;;;","2023-06-23 08:33;dukebot;Changeset: 7628da20
Author:    Ben Perez <ben.perez@oracle.com>
Committer: Jamil Nimeh <jnimeh@openjdk.org>
Date:      2023-06-23 15:31:16 +0000
URL:       https://git.openjdk.org/jdk/commit/7628da200833d0d26215a91afdd1bf7fc110da1d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test accompaning fix for JDK-8205187 is failing in Windows,JDK-8279244,5065311,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,vromero,vromero,vromero,2021-12-23 13:08,2022-09-14 15:02,2023-10-01 09:57,2021-12-23 13:28,19,,,,,,,,19,tools,,0,noreg-self,tier1,ursqe-triaged,,,,,,,,,,,,,,,,,this is the common new line character issue in Windows. I forgot to upload a commit fixing this and integrated fix for JDK-8205187 without it,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8205187,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2vi1f:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-12-23 13:22;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6932
Date: 2021-12-23 21:18:49 +0000
;;;","2021-12-23 13:26;dcubed;Here's a log file snippet for the jdk-19+4-117-tier1 sighting: 

tools/javac/fatalErrors/NoJavaLangTest.java 

----------System.err:(17/866)----------
Testing [-Xlint:-options, -source, 8, -bootclasspath, ., -classpath, .]
[DIRECT]:
error: Unable to find package java.lang in platform classes
1 error
java.lang.AssertionError: javac generated error output is not correct
	at NoJavaLangTest.test(NoJavaLangTest.java:109)
	at NoJavaLangTest.testBootClassPath(NoJavaLangTest.java:79)
	at NoJavaLangTest.run(NoJavaLangTest.java:64)
	at NoJavaLangTest.main(NoJavaLangTest.java:57)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.AssertionError
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.AssertionError: javac generated error output is not correct;;;","2021-12-23 13:28;roboduke;Changeset: 4669bcd8
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2021-12-23 21:26:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4669bcd877c89b63739abd8087ea934c7126fb3f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1 Full GC does not always slide memory to bottom addresses,JDK-8279241,5065304,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,dcubed,dcubed,2021-12-23 11:07,2022-08-04 07:19,2023-10-01 09:57,2022-01-25 01:15,18,,,,,,,,19,hotspot,,0,gc-pending-review,intermittent,jdk18-defer-request,jdk18-defer-yes,tier4,,,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

runtime/cds/appcds/cacheObject/HeapFragmentationTest.java

Here's a snippet from the log file:

[0.625s][info ][gc,heap] GC(4) Eden regions: 0->0(2)
[0.625s][info ][gc,heap] GC(4) Survivor regions: 0->0(5)
[0.625s][info ][gc,heap] GC(4) Old regions: 1->1
[0.625s][info ][gc,heap] GC(4) Archive regions: 2->2
[0.625s][info ][gc,heap] GC(4) Humongous regions: 0->0
[0.625s][info ][gc     ] GC(4) Pause Full (G1 Compaction Pause) 1M->1M(10M) 71.992ms
Aborting due to java.lang.OutOfMemoryError: Java heap space
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/debug.cpp:362
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13740/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ab608f54-4d8f-478e-83ac-d19b2e323bdb/runs/0b06b07a-ea51-4623-af6d-c2d4ba24de47/workspace/open/src/hotspot/share/utilities/debug.cpp:362), pid=17819, tid=17823
#  fatal error: OutOfMemory encountered: Java heap space
#
# JRE version: Java(TM) SE Runtime Environment (18.0+30) (fastdebug build 18-ea+30-2014)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+30-2014, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S14144/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/394d1899-59ec-4632-9797-dfcc5aae96c5/runs/57a2ffc5-f654-472a-8132-39ff1cdd676a/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_cds_relocation/scratch/3/core.17819)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S14144/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/394d1899-59ec-4632-9797-dfcc5aae96c5/runs/57a2ffc5-f654-472a-8132-39ff1cdd676a/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_cds_relocation/scratch/3/hs_err_pid17819.log
];
 stderr: [java version ""18-ea"" 2022-03-22
Java(TM) SE Runtime Environment (fastdebug build 18-ea+30-2014)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 18-ea+30-2014, mixed mode, sharing)
]
 exitValue = 134

java.lang.RuntimeException: 'array.length = 1048576000' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at jdk.test.lib.cds.CDSTestUtils.checkMatches(CDSTestUtils.java:491)
	at jdk.test.lib.cds.CDSTestUtils$Result.assertNormalExit(CDSTestUtils.java:194)
	at HeapFragmentationTest.main(HeapFragmentationTest.java:85)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 'array.length = 1048576000' missing from stdout/stderr

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f98a0037620):  JavaThread ""main"" [_thread_in_vm, id=17823, stack(0x00007f98a841f000,0x00007f98a8520000)]

Stack: [0x00007f98a841f000,0x00007f98a8520000],  sp=0x00007f98a851e2e0,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1a1bf00]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x1a0
V  [libjvm.so+0xaf4d5b]  report_fatal(VMErrorType, char const*, int, char const*, ...)+0x12b
V  [libjvm.so+0xaf500d]  report_java_out_of_memory(char const*)+0xed
V  [libjvm.so+0x14b1c1a]  MemAllocator::Allocation::check_out_of_memory()+0xda
V  [libjvm.so+0x14b48e1]  MemAllocator::allocate() const+0x191
V  [libjvm.so+0x1968c86]  TypeArrayKlass::allocate_common(int, bool, JavaThread*)+0x2e6
V  [libjvm.so+0x15ea06f]  oopFactory::new_typeArray(BasicType, int, JavaThread*)+0xff
V  [libjvm.so+0xeed4d6]  InterpreterRuntime::newarray(JavaThread*, BasicType, int)+0xb6
j  HeapFragmentationApp.main([Ljava/lang/String;)V+20
v  ~StubRoutines::call_stub
V  [libjvm.so+0xf07434]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x504
V  [libjvm.so+0x1040b75]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .constprop.1]+0x375
V  [libjvm.so+0x10441b5]  jni_CallStaticVoidMethod+0x1c5
C  [libjli.so+0x4797]  JavaMain+0xd37
C  [libjli.so+0x7aa9]  ThreadJavaMain+0x9

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  HeapFragmentationApp.main([Ljava/lang/String;)V+20
v  ~StubRoutines::call_stub",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267703,,,,,,"2021-12-23 12:15;iklam;hs_err.txt;https://bugs.openjdk.org/secure/attachment/97449/hs_err.txt",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2vhzv:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-12-23 12:13;iklam;The tests assumes this:

        // We run with a 1400m heap, so we should be able to allocate a 1000m buffer, regardless
        // of the heap size chosen at dump time.

However, G1 puts an Old Gen region in the middle of the heap. This makes it impossible to allocate a 1000MB humongous region.

Heap:
 garbage-first heap   total 1035264K, used 1116K [0x0000000600000000, 0x0000000657800000)
  region size 1024K, 0 young (0K), 0 survivors (0K)
 Metaspace       used 183K, committed 384K, reserved 1114112K
  class space    used 2K, committed 128K, reserved 1048576K

Heap Regions: E=young(eden), S=young(survivor), O=old, HS=humongous(starts), HC=humongous(continues), CS=collection set, F=free, OA=open archive, CA=closed archive, TAMS=top-at-mark-start (previous, next)
|   0|0x0000000600000000, 0x0000000600000000, 0x0000000600100000|  0%| F|  |TAMS 0x0000000600000000, 0x0000000600000000| Untracked 
|   1|0x0000000600100000, 0x0000000600100000, 0x0000000600200000|  0%| F|  |TAMS 0x0000000600100000, 0x0000000600100000| Untracked 
|   2|0x0000000600200000, 0x0000000600200000, 0x0000000600300000|  0%| F|  |TAMS 0x0000000600200000, 0x0000000600200000| Untracked 
      .... all free regions here .... (~450MB)
| 432|0x000000061b000000, 0x000000061b000000, 0x000000061b100000|  0%| F|  |TAMS 0x000000061b000000, 0x000000061b000000| Untracked 
| 433|0x000000061b100000, 0x000000061b100000, 0x000000061b200000|  0%| F|  |TAMS 0x000000061b100000, 0x000000061b100000| Untracked 
| 434|0x000000061b200000, 0x000000061b200000, 0x000000061b300000|  0%| F|  |TAMS 0x000000061b200000, 0x000000061b200000| Untracked 
| 435|0x000000061b300000, 0x000000061b32b3e0, 0x000000061b400000| 16%| O|  |TAMS 0x000000061b300000, 0x000000061b300000| Untracked 
| 436|0x000000061b400000, 0x000000061b400000, 0x000000061b500000|  0%| F|  |TAMS 0x000000061b400000, 0x000000061b400000| Untracked 
| 437|0x000000061b500000, 0x000000061b500000, 0x000000061b600000|  0%| F|  |TAMS 0x000000061b500000, 0x000000061b500000| Untracked 
      .... all free regions here ....(~600MB)
|1007|0x000000063ef00000, 0x000000063ef00000, 0x000000063f000000|  0%| F|  |TAMS 0x000000063ef00000, 0x000000063ef00000| Untracked 
|1008|0x000000063f000000, 0x000000063f000000, 0x000000063f100000|  0%| F|  |TAMS 0x000000063f000000, 0x000000063f000000| Untracked 
      [??? unmapped spaces (~400MB)
|1398|0x0000000657600000, 0x0000000657676000, 0x0000000657700000| 46%|OA|  |TAMS 0x0000000657676000, 0x0000000657600000| Untracked 
|1399|0x0000000657700000, 0x0000000657776000, 0x0000000657800000| 46%|CA|  |TAMS 0x0000000657700000, 0x0000000657776000| Untracked 
;;;","2021-12-23 12:14;iklam;Reassigned to GC team for evaluation.

Question for GC team -- is G1 supposed to move the Old Gen region to satisfy the humongous allocation?;;;","2021-12-24 23:27;kbarrett;In this failure we have:

GC(0) Pause Young (Concurrent Start) (G1 Humongous Allocation)
GC(1) Concurrent Undo Cycle
GC(2) Pause Young (Normal) (G1 Humongous Allocation)
GC(3) Pause Full (G1 Compaction Pause)
GC(4) Pause Full (G1 Compaction Pause)

All appear to be triggered by the single humongous allocation.  It seems reasonable to have a single old region after all that.  But it does seem strange and not useful that it's in the middle of the heap, rather than ""compacted"" to the end.
;;;","2022-01-10 07:06;tschatzl;This is a pre-existing issue: G1 full gc does not guarantee any compaction order or always compacting into lower addresses.

In the ""Prepare for Compaction Phase"" threads iterate over all regions to put them into their list(s) of regions they can compact into in parallel, competing for these regions obviously.

If cpu time assignment is bad, it can happen that the thread that later actually compacts that region, gets that region 400-something as first destination region.

In my tests I did not really manage to reproduce the failure, but with three threads it could happen that instead of starting to compact into region 0, 1, and 2 respectively, I managed to sometimes get starting regions like 32 or so (can only be observed using additional debug code).;;;","2022-01-10 07:27;tschatzl;That single Old region at 400-something is a Survivor region - G1 allocates young gen from the end of the heap downwards as opposed to real old gen regions created by promotion which are allocated from the bottom of the heap upwards as a simple measure to avoid region level fragmentation.;;;","2022-01-11 07:37;sjohanss;We had this problem at the end of 17 as well. Looks like that fix didn't fix all cases. ;;;","2022-01-13 06:30;tschatzl;The suggested change to guarantee sliding all live memory to lower address is to split the existing ""Prepare Compaction"" task into two parts:
* a serial part that spreads the given compaction target regions (i.e. regions we are going to compact into) across the compaction point queues in a round robin fashion
* a parallel part that covers the remaining work: forwarding the live objects to their respective future location (every thread using the calculated compaction queue), and clearing and rebuilding metadata; clear the metadata that is going to be invalid after full gc, and rebuild metadata that is not otherwise created (BOT for young gen regions staying in place).

Measurements on a prototype show that even the absolute time such a serial phase takes (small per-region work) is negligible (<=0.05ms for >1000 regions), and even more negligible compared to what actual work takes.
On very large heaps the number of regions can be increased if that ever becomes a concern (allowed by JDK-8275056).

Future work could e.g. precalculate target regions for humongous objects fairly easily with that change too (for a maximally compacting last-resort gc); this would be fairly hard doing in parallel in a single pass anyway as they require multiple consecutive regions.

Another option is to balance the compaction queues based on amount of live data to balance the compaction (copying) phase.;;;","2022-01-18 00:11;tschatzl;Deferral Request:

We suggest deferral for this because:
* complexity of the fix: it is fairly big for a change this late (see https://github.com/openjdk/jdk/pull/7106/files)
* likelihood of the crash: there is a very very very small likelihood of this occurring given our (complete) understanding of this issue; this is a race that happens due to threads potentially getting arbitrarily paused for a relatively long time. We've got only two instances of this, one just before jdk17, one now (before 18), where the JDK17 fix (JDK-8267703) already makes this even less likely to occur. We have got no end user reports about this occurring.
* this is not a regression in jdk18, but introduced earlier

While the complexity is probably manageable, we think the likelihood argument outweighs the improvement this change gives.

We will consider backporting this change to jdk17.;;;","2022-01-18 09:46;kvn;Defer request for JDK 18 approved.

After the bug is fixed and tested in JDK 19 consider backporting it into JDK18u (update) in addition to JDK 17u.;;;","2022-01-19 01:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7106
Date: 2022-01-17 11:00:04 +0000;;;","2022-01-25 01:15;roboduke;Changeset: 295b263f
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-01-25 09:13:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/295b263fa951b9d51bfa92c04e49b2a17a62bd6f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Leak in ScrollPaneSkin, related to touch events",JDK-8279228,5065291,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fkirmaier,fkirmaier,fkirmaier,2021-12-23 09:35,2022-03-11 07:59,2023-10-01 09:57,2022-02-23 08:14,jfx17,,,,,,,,jfx19,javafx,,0,,,,,,,,,,,,,,,,,,,,"When touchDetected or mouseDown is true, the sbTouch animation is running, 
and the node is removed from the Scene, then the animation will never stop, causing a memory leak.
Simple fix is to also check, whether the Node is visible, by checking the ""isTreeShowing"" property.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vhwz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-12-23 09:47;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jfx/pull/701
Date: 2021-12-23 17:43:19 +0000
;;;","2022-02-23 08:14;roboduke;Changeset: adf1da42
Author:    Florian Kirmaier <fkirmaier@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-02-23 16:13:05 +0000
URL:       https://git.openjdk.java.net/jfx/commit/adf1da42de07aba5af07c67a4e756db52203256d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Access Bridge: Wrong frame position and hit test result on HiDPI display,JDK-8279227,5065290,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ant,ant,ant,2021-12-23 08:42,2022-03-20 12:32,2023-10-01 09:57,2022-01-18 10:53,17,18,,,,,,,18,client-libs,,0,a11y,accessibility,hidpi,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"[A description by Aleksandr Veselov]

Seems like Access Bridge does not perform scaling of coordinates, like AWT does for components. So, if I try to create window with a label at position (300, 300) it opens at physical coordinates (600, 600) (scale = 200%), but NVDA shows fame for a label at (300, 300) in physical pixels.

How to reproduce:

Start NVDA and enable highlight in NVDA settings (Vision > Enable Highlighting)
Open IDEA
Focus something, e.g. terminal panel
The blue frame is misplaced",,,,,,,,,,JDK-8283431,JDK-8280323,JDK-8280658,JDK-8280827,,,,,,,,,,,,,,,,,,,,,,,JDK-8280359,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2vhwr:",9223372036854775807,b32,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2021-12-24 01:57;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/72
Date: 2021-12-24 09:51:14 +0000
;;;","2022-01-18 10:53;roboduke;Changeset: 20ef9541
Author:    Aleksandr Veselov <aleksandr.veselov@jetbrains.com>
Committer: Anton Tarasov <ant@openjdk.org>
Date:      2022-01-18 18:51:58 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/20ef954158bc5a339118640946b39047fe853ae4
;;;","2022-01-25 04:30;roboduke;Changeset: 20ef9541
Author:    Aleksandr Veselov <aleksandr.veselov@jetbrains.com>
Committer: Anton Tarasov <ant@openjdk.org>
Date:      2022-01-18 18:51:58 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/20ef954158bc5a339118640946b39047fe853ae4
;;;","2022-03-18 02:02;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
Clean backport.
SAP nighlty testing passed.;;;","2022-03-18 02:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/264
Date: 2022-03-18 09:02:04 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[arm32] C1 longs comparison operation destroys argument registers,JDK-8279225,5065288,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,snazarki,snazarki,snazarki,2021-12-23 08:05,2022-09-14 15:02,2023-10-01 09:57,2021-12-28 03:30,11,17,18,19,,,,,19,hotspot,,0,c1,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-19,redhat-interest,,,,,,,,"Several regression tests are failed on arm32 CPU if tiered compilation is enabled. 

The list includes
java/math/BigDecimal/DivideMcTests
java/util/Arrays/Sorting.java
java/util/Arrays/SortingNearlySortedPrimitive.java
java/util/concurrent/tck/JSR166TestCase
java/util/stream/SliceOpTest.java
etc

It appears C1 comp_op for long operands destroys arguments registers:
void LIR_Assembler::comp_op(LIR_Condition condition, LIR_Opr opr1, LIR_Opr opr2, LIR_Op2* op) {
....
      Register ylo = opr2->as_register_lo();
      Register yhi = opr2->as_register_hi();
      if (condition == lir_cond_equal || condition == lir_cond_notEqual) {
        __ teq(xhi, yhi);
        __ teq(xlo, ylo, eq);
      } else {
        __ subs(xlo, xlo, ylo);  // <<<  incorrect 
        __ sbcs(xhi, xhi, yhi); // <<<   incorrect
      }
...
}

The bug persist at all version of JDK since ARM32 code was opensourced. ",,,,,,,,,,JDK-8279679,JDK-8279681,JDK-8279507,JDK-8279440,JDK-8281188,JDK-8281989,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,arm,,,,,,,,,linux,,,,,"0|i2vhwb:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-12-23 08:06;snazarki;The fix is quite trivial, I'll create PR soon
-        __ subs(xlo, xlo, ylo);
-        __ sbcs(xhi, xhi, yhi);
+        __ cmp(xlo, ylo);
+        __ sbcs(Rtemp, xhi, yhi);
;;;","2021-12-24 00:31;chagedorn;ILW = Test failures on ARM32 with tiered compilation, multiple tests, no workaround = MMH = P3;;;","2021-12-24 08:29;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6934
Date: 2021-12-24 16:25:37 +0000
;;;","2021-12-28 03:30;roboduke;Changeset: 299022df
Author:    Sergey Nazarkin <snazarki@openjdk.org>
Committer: Alexey Bakhtin <abakhtin@openjdk.org>
Date:      2021-12-28 11:29:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/299022dfacbcb49e3bc5beca8ff9b1fca1101493
;;;","2022-01-06 03:38;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/62
Date: 2022-01-06 11:34:21 +0000
;;;","2022-01-06 04:02;shade;Fix Request (17u)

Fixes the ARM32 bug. Applies cleanly.;;;","2022-01-06 06:41;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk11u-dev/pull/743
Date: 2022-01-06 14:34:56 +0000
;;;","2022-01-06 06:41;shade;Fix Request (11u)

Same reason as for 17u. Applies cleanly.;;;","2022-02-01 02:28;thartmann;Fix Request (JDK 18u)
The fix has already been backported to JDK 11u and 17u and should be backported to JDK 18u as well to avoid a regression. The fix is low risk and applies cleanly. It has been tested manually with tier1-3 and in the JDK 11/17u and JDK 19 CI.;;;","2022-02-01 02:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/15
Date: 2022-02-01 10:29:15 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect legacyMap.get in java.security.Provider after JDK-8276660,JDK-8279222,5065281,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-12-23 05:12,2022-04-25 10:55,2023-10-01 09:57,2022-01-04 23:30,18,19,,,,,,,18,security-libs,,0,regression,sonarcloud-found,,,,,,,,,,,,,,,,,,"SonarCloud reports:
 A ""Map<ServiceKey, Service>"" cannot contain a ""String"" in a ""ServiceKey"" type.

     // clean up old alias if present
     Service prevAliasService = legacyMap.get(aliasAlg);

This code is introduced by JDK-8276660.",,,,,,,,,,JDK-8279814,JDK-8279769,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276660,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vhur:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2021-12-23 05:38;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/70
Date: 2021-12-23 13:33:26 +0000
;;;","2022-01-04 23:30;roboduke;Changeset: 0f4807e8
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-05 07:29:17 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/0f4807e8fe2468f303b32a6f2dc9ccc7ecad82a1
;;;","2022-01-05 17:29;roboduke;Changeset: 0f4807e8
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-01-05 07:29:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0f4807e8fe2468f303b32a6f2dc9ccc7ecad82a1
;;;","2022-04-25 10:55;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[REDO] C2 crash when allocating array of size too large,JDK-8279219,5065280,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,chagedorn,chagedorn,2021-12-23 04:10,2022-08-15 08:51,2023-10-01 09:57,2022-02-01 23:35,11,17,18,19,,,,,19,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-19,,,,,,,,,,,"The original fix caused problems and was backed out. This bug should redo the fix which should also fix the found problems with JDK-8278413:
- JDK-8279021
- JDK-8279062
- JDK-8279125",,,,,,,,,,JDK-8283943,JDK-8283822,JDK-8284350,JDK-8284259,JDK-8284138,,,,,,,,,,,,,,,,,,,,,,JDK-8284369,JDK-8278413,JDK-8279204,JDK-8279021,JDK-8291665,JDK-8292260,JDK-8288184,JDK-8292301,JDK-8291919,,,,JDK-8279125,JDK-8279062,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vhuj:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-12-23 04:14;chagedorn;ILW = Same as JDK-8278413 = P3;;;","2022-01-04 00:54;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6952
Date: 2022-01-04 08:51:30 +0000
;;;","2022-02-01 23:35;roboduke;Changeset: d32f99ee
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-02-02 07:34:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d32f99ee65679601d6e160e7975fc1e367bfa6f4
;;;","2022-03-29 05:31;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Tests have passed.;;;","2022-03-29 05:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/296
Date: 2022-03-29 12:31:02 +0000;;;","2022-03-29 08:27;thartmann;Fix Request (JDK 18u)
Fixes a crash in C2. The fix is medium risk and applies cleanly. Already tested and backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 08:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/69
Date: 2022-03-29 15:26:49 +0000;;;","2022-04-02 02:49;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
This is a quite big change in C2 bringing a certain risk. But as it fixes a bug I think we shoul take it to 11. Also, it was quite well tested in the course of development until it finally made it into the repo.
I had to resolve sereval trivial issues. No code changes.
Tests pass.  
SAP nightly testing passed.;;;","2022-04-02 02:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/990
Date: 2022-04-02 09:44:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in Scene after dragging a cell,JDK-8279214,5065217,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mhanl,webbuggrp,webbuggrp,2021-12-22 04:37,2022-12-09 16:11,2023-10-01 09:57,2022-11-22 01:56,jfx17,,,,,,,,jfx20,javafx,,0,dcspn,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
There is still a memory leak in the scene when it comes to MouseHandler. There already is a bugfix that considers most of the use cases (see links down below) but one scenario is missing:
If you start dragging a cell of a tableview the fullPDRTmpTargetWrapper field of the scene keeps holding on to the reference of the tableview even when its gone and the GC was triggered.

https://github.com/openjdk/jfx/pull/448
https://bugs.openjdk.java.net/browse/JDK-8264330

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
- drag a cell
- push button 'Remove Pane'
- trigger GC

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
no remaining reference to the tableview
ACTUAL -
fullPDRTmpTargetWrapper still has a reference to the tableview

---------- BEGIN SOURCE ----------
package com.arm.ablex.client.fx.main;

import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class MemoryLeak extends Application {

    public static void main(String[] args) {
        Application.launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception {
        Button buttonRemove = new Button(""Remove Pane"");
        VBox box = new VBox(buildTableView(), buttonRemove);

        Scene scene = new Scene(box);
        buttonRemove.setOnAction(event -> scene.setRoot(new Pane()));

        stage.setWidth(1000);
        stage.setScene(scene);
        stage.show();
    }

    private TableView buildTableView() {
        TableView<String> tableView = new TableView();

        TableColumn<String, String> column = new TableColumn<>(""column"");
        column.setCellValueFactory(param -> new SimpleStringProperty(param.getValue()));
        column.setCellFactory(param -> {
            TableCell<String, String> cell = new TableCell<>() {
                @Override
                protected void updateItem(String item, boolean empty) {
                    super.updateItem(item, empty);
                    if (!empty) {
                        setText(item);
                        setOnDragDetected(event -> {
                            startFullDrag();
                            System.out.println(""this causes memory leak"");
                        });
                    } else {
                        setText(null);
                        setOnDragDetected(null);
                    }
                }
            };

            return cell;
        });

        tableView.getColumns().add(column);
        tableView.getItems().addAll(""item1"", ""item2"", ""item3"");

        return tableView;
    }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264330,,,,,,"2021-12-23 01:24;pnarayanaswa;MemoryLeak.java;https://bugs.openjdk.org/secure/attachment/97444/MemoryLeak.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vhgj:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@18948797,,,,,,,,,"2022-09-14 11:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/899
Date: 2022-09-14 18:44:14 +0000;;;","2022-11-22 01:56;dukebot;Changeset: a0ea8743
Author:    Marius Hanl <mhanl@openjdk.org>
Date:      2022-11-22 09:54:41 +0000
URL:       https://git.openjdk.org/jfx/commit/a0ea8743eb20bf4791f7a8bf627416aa97c002e5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[BACKOUT] JDK-8278413: C2 crash when allocating array of size too large,JDK-8279204,5065266,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2021-12-22 23:59,2022-08-15 08:48,2023-10-01 09:57,2021-12-23 08:23,18,19,,,,,,,18,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-19,regression,,,,,,,,,,,,,,,"This had caused multiple failures in JDK 18 and JDK 19, see JDK-8279021 and JDK-8279062. At this point, it is more convenient to backout the change and redo it later.",,,,,,,,,,JDK-8279760,JDK-8279249,,,,,,,,,,,,,,,,,,,,,JDK-8279125,,,,JDK-8278413,JDK-8292301,,,,,,,,,,,JDK-8279125,JDK-8279219,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vhrf:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-12-23 01:49;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/69
Date: 2021-12-23 08:01:52 +0000
;;;","2021-12-23 04:04;chagedorn;ILW = Backout = P3;;;","2021-12-23 08:23;roboduke;Changeset: 04ad6689
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-12-23 16:22:10 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/04ad668921abbd71dfbc474eed6f1760f7a541b1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Stray file 'out' added in ""8275650: Problemlist java/io/File/createTempFile/SpecialTempFile.java""",JDK-8279159,5065220,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,goetz,goetz,goetz,2021-12-22 06:01,2021-12-22 06:13,2023-10-01 09:57,2021-12-22 06:13,17.0.3,18,,,,,,,,core-libs,,0,,,,,,,,,,,,,,,,,,,,An empty file 'out' was added with JDK-8275650. This needs to be removed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276623,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vhh7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix Amazon copyright in various files,JDK-8279134,5065197,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2021-12-22 00:46,2022-09-14 15:02,2023-10-01 09:57,2021-12-26 14:11,19,,,,,,,,19,infrastructure,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,"This bug is similar to https://bugs.openjdk.java.net/browse/JDK-8244094

Currently, some of the files in the OpenJDK repo have Amazon copyright notices which are all slightly different and do not conform to Amazons preferred copyright notice which is simply (intentionally without copyright year):

""Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8244094,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vhc3:",9223372036854775807,b04,,,,,,,,,,,,"2021-12-22 02:55;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6915
Date: 2021-12-22 09:07:24 +0000
;;;","2021-12-26 14:11;roboduke;Changeset: 7fea1032
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-12-26 22:10:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7fea10327ed27fcf8eae474ca5b15c3b4bafff2a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
src/jdk.hotspot.agent/doc/index.html file contains references to scripts that no longer exist,JDK-8279119,5065180,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,cjplummer,cjplummer,cjplummer,2021-12-21 18:22,2022-12-27 01:27,2023-10-01 09:57,2022-01-02 17:30,19,,,,,,,,19,hotspot,,0,doc,jdk17u-fix-request,jdk17u-fix-yes,noreg-doc,,,,,,,,,,,,,,,,"The SA src/jdk.hotspot.agent/doc/index.html file contains a table of SA scripts and their descriptions. All of these scripts are now gone. They were used to make it easier to launch what today we would call SA tools. Now all these tools are launched as sub-commands of the jhsdb command, which has its own man page.",,,,,,,,,,JDK-8298616,JDK-8299361,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279122,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vh8b:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-12-23 09:57;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6924
Date: 2021-12-23 03:45:31 +0000
;;;","2022-01-02 17:30;roboduke;Changeset: 2a59ebbb
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-01-03 01:29:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2a59ebbba391ee0d70604027081712f1c2dfd1fe
;;;","2022-12-23 06:44;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a doc change.
Clean backport. SAP nightly testing passed.;;;","2022-12-23 06:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/984
Date: 2022-12-23 14:43:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix internal doc comment errors.,JDK-8279115,5065176,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2021-12-21 15:37,2022-09-14 15:01,2023-10-01 09:57,2021-12-23 07:21,18,,,,,,,,19,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"Running javadoc with default access options on the javadoc internal code reveals just 3 errors, which are easily fixed. The errors are in

ConstructorWriter EnumConstantWriter, MethodWriter",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vh7f:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-12-21 16:17;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6913
Date: 2021-12-22 00:13:39 +0000
;;;","2021-12-23 07:21;roboduke;Changeset: 558a6824
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-12-23 15:19:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/558a6824c6db805a2b220ab13ed95624df515538
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR crashes on Linux ppc due to missing crash protector in signal handler,JDK-8279077,5065137,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2021-12-21 10:15,2022-12-15 10:12,2023-10-01 09:57,2022-01-04 08:30,11-pool,13-pool,15-pool,8-pool,,,,,15.0.7,hotspot,,0,17-na,18-na,19-na,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,redhat-interest,,,,,,,,,,"Our customer reported JFR crashes on Linux ppc when filling stack trace.

My investigation points to that Linux ppc signal handle does not install crash protection callback, as other platforms do, etc. linux_x86.

This bug seems to be day 1 bug, probably during the porting. Thomas Stuefe refactored [1] relevant code during 16 time frame , so this bug is presented in 15 and earlier version.

[1] JDK-8255711
",,,,,,,,,,JDK-8279690,JDK-8279692,JDK-8281144,JDK-8298882,,,,,,,,,,,,,,,,,,,,,,,JDK-8279181,,,,,,,,,,,,JDK-8254824,JDK-8255711,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,linux,,,,,"0|i2vgyr:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-12-21 10:55;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk11u-dev/pull/729
Date: 2021-12-21 18:49:47 +0000
;;;","2021-12-21 12:38;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk15u-dev/pull/155
Date: 2021-12-21 20:34:14 +0000
;;;","2021-12-22 01:58;sgehwolf;[~zgu] Please add a link to the bug which refactored code in JDK 17 (and, thus, made this bug not applicable to 17+);;;","2022-01-03 08:47;phh;The call to check_crash_protection was added by JDK-8254824 for JDK 16. You can see in the commit https://github.com/openjdk/jdk/commit/011dd0d8 that it was added to every os_linux_xxx.cpp other than ppc.

The refactoring that moved the code to signals_posix.cpp was also done for JDK 16 by JDK-JDK-8255711, commit https://github.com/openjdk/jdk/commit/dd8e4ffb.
;;;","2022-01-04 05:17;zgu;Fix Request (15u)

I would like to fix this bug in jdk15u. The patch fixes a fatal crash with jfr on Linux ppc.

The code that protects JVM from crashing, misses on Linux ppc, but exists on other Linux platforms, so it is a low risk fix.;;;","2022-01-04 08:30;roboduke;Changeset: 250ef7dd
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-01-04 16:29:42 +0000
URL:       https://git.openjdk.java.net/jdk15u-dev/commit/250ef7dd34d2622864a6d7f92b645405997fad98
;;;","2022-01-04 12:41;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk11u-dev/pull/739
Date: 2022-01-04 20:36:40 +0000
;;;","2022-01-05 06:08;zgu;Fix Request (11u)

A clean backport to 11u. The patch fixes a fatal crash with jfr on Linux ppc.

The code that protects JVM from crashing, misses on Linux ppc, but exists on other Linux platforms, so it is a low risk fix.;;;","2022-01-05 07:29;zgu;Fix Request (8u)

A clean backport to 8u. The patch fixes a fatal crash with jfr on Linux ppc.

The code that protects JVM from crashing, misses on Linux ppc, but exists on other Linux platforms, so it is a low risk fix.;;;","2022-01-10 02:54;sgehwolf;[~zgu] Please remember to push to the mono-repo for jdk8u-dev[1].

[1] https://hg.openjdk.java.net/jdk8u/monojdk8u-dev/;;;","2022-02-02 00:06;roboduke;Changeset: 250ef7dd
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-01-04 16:29:42 +0000
URL:       https://git.openjdk.java.net/jdk15u/commit/250ef7dd34d2622864a6d7f92b645405997fad98
;;;","2022-09-01 14:15;roboduke;Changeset: 67f1d62d
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-01-04 16:29:42 +0000
URL:       https://git.openjdk.org/shenandoah-jdk8u/commit/67f1d62d39bd97942d6baaf7e226b95ace39514d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: Bad AD file when matching SqrtF with UseSSE=0,JDK-8279076,5065135,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2021-12-21 10:07,2022-02-14 00:40,2023-10-01 09:57,2021-12-22 12:18,11,17,18,19,8,,,,18,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,redhat-interest,,,,,,,,,,,"Reliably reproduces on x86_32 with vector tests, but the issue looks pre-existing.

$ CONF=linux-x86-server-fastdebug make run-test TEST=jdk/incubator/vector/Float128VectorTests.java TEST_VM_OPTS=""-XX:UseSSE=0 -XX:UseAVX=0""

test Float128VectorTests.SINHFloat128VectorTests(float[cornerCaseValue(i)]): success
o39  SqrtF  === _ o12  [[o40  2 ]] 

--N: o39  SqrtF  === _ o12  [[o40  2 ]] 

   --N: o12  Parm  === o3  [[o39 ]] Parm2: float
   REGFPR  0  REGFPR
   REGFPR1  0  REGFPR1
   REGF  100  MoveVL2F
   LEGREGF  200  MoveF2LEG
   VLREGF  0  VLREGF

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/matcher.cpp:1716

The current match rules are:

// sqrtss instruction needs destination register to be pre initialized for best performance
// Therefore only the instruct rule where the input is pre-loaded into dst register is defined below
instruct sqrtF_reg(regF dst) %{
  predicate(UseSSE>=1);
  match(Set dst (SqrtF dst));
  format %{ ""sqrtss  $dst, $dst"" %}
  ins_encode %{
    __ sqrtss($dst$$XMMRegister, $dst$$XMMRegister);
  %}
  ins_pipe(pipe_slow);
%}

The node is generated here:

//------------------------------Ideal------------------------------------------
// If we see pattern ConvF2D SomeDoubleOp ConvD2F, do operation as float.
Node *ConvD2FNode::Ideal(PhaseGVN *phase, bool can_reshape) {
  if ( in(1)->Opcode() == Op_SqrtD ) {
    Node* sqrtd = in(1);
    if ( sqrtd->in(1)->Opcode() == Op_ConvF2D ) {
      if ( Matcher::match_rule_supported(Op_SqrtF) ) {
        Node* convf2d = sqrtd->in(1);
        return new SqrtFNode(phase->C, sqrtd->in(0), convf2d->in(1));
      }
    }
  }
  return NULL;
}

I actually thought Matcher::match_rule_supported looks at predicate(...) in the match rule above, but apparently it just hard-codes the exceptions! Op_SqrtF (and Op_SqrtD) should be handled there.

This only affects x86_32, as x86_64 always runs with UseSSE >= 2.",,,,,,,,,,JDK-8281719,JDK-8280892,JDK-8279441,JDK-8279551,JDK-8279758,JDK-8279247,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280526,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vgyb:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-12-21 11:46;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/60
Date: 2021-12-21 19:32:18 +0000
;;;","2021-12-21 18:35;dlong;ILW = can't compile vector code in x86, seen in vector test, no workaround = MMH = P3;;;","2021-12-22 12:18;roboduke;Changeset: 9d5ae2e3
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-12-22 20:17:39 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/9d5ae2e38074c3df354aeab19ebbab7d4872165a
;;;","2022-01-04 02:55;shade;Fix Request (17u)

Fixes x86_32 bug, applies cleanly, tests pass.;;;","2022-01-04 02:59;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/51
Date: 2022-01-04 10:55:05 +0000
;;;","2022-01-04 04:10;shade;While working on backports, observed that test/hotspot/jtreg/compiler/loopopts/superword/SumRedSqrt_Double.java starts to hang. See JDK-8280526 for the additional fix.;;;","2022-02-10 06:25;goetz;[~shade], should we bring this and 8280526 to 11.0.15, too?;;;","2022-02-10 22:40;shade;Yes, I was waiting to see if this change brings any other surprises. Looks like it is fine. Leave it with me, I'll backport to 11u.;;;","2022-02-10 22:53;goetz;Thanks!;;;","2022-02-10 23:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/819
Date: 2022-02-11 07:53:05 +0000;;;","2022-02-11 00:56;shade;Fix Request (11u)

Fixes the x86_32 bug. Applies semi-cleanly, because the context is different. Passes new test. Needs JDK-8280526 as the followup.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Kitchensink.java failed with several ""No aspect with given name""",JDK-8279067,5065122,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,dcubed,dcubed,2021-12-21 06:54,2022-09-14 15:20,2023-10-01 09:57,2021-12-22 13:11,18,19,,,,,,,19,hotspot,,0,intermittent,jdk17u-na,tier7,tier8,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

applications/kitchensink/Kitchensink.java

Here's a snippet from the log file:

Kitchensink has finished. Going to analyze the results.
Starting the ResultAnalyzer
FAILURE: Monitor.total.cpu: No aspect with given name
FAILURE: Monitor.process.pcpu: No aspect with given name
FAILURE: Monitor.process.vsz: No aspect with given name
FAILURE: Monitor.process.fd: No aspect with given name
FAILURE: Monitor.process.rss: No aspect with given name
FAILED: The kitchensink run failed.
[Tue Dec 21 08:41:34 UTC 2021] Analyzer failed with: Results analysis failed.
applications.kitchensink.process.analyzer.AnalyzerException: Results analysis failed.
	at applications.kitchensink.process.analyzer.Analyzer.stop(Analyzer.java:150)
	at applications.kitchensink.process.glue.Main.analyzeResults(Main.java:403)
	at applications.kitchensink.process.glue.Main.main(Main.java:224)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: applications.kitchensink.process.analyzer.AnalyzerException: Results analysis failed.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: applications.kitchensink.process.analyzer.AnalyzerException: Results analysis failed.
----------rerun:(44/6597)*----------",,,,,,,,,,JDK-8281014,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2vgvf:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2021-12-21 14:50;lmesnik;Monitor parses output like below searching line with pid. 
 PsList v1.4 - Process information lister
        Copyright (C) 2000-2016 Mark Russinovich
        Sysinternals - www.sysinternals.com

        Process information for host:

        Name                Pid Pri Thd  Hnd   Priv        CPU Time    Elapsed Time
        java               3032   8   2   97   1524     0:00:00.609    91:38:47.737

The problem might appear when pid is 2000 or 2016. Needed to search only lines with java process.

;;;","2022-01-31 07:52;dcubed;Here's a snippet from the jdk-18+33-2080-tier8 sighting: 

applications/kitchensink/Kitchensink24HStress.java

Kitchensink has finished. Going to analyze the results.
Starting the ResultAnalyzer
FAILURE: Monitor.total.cpu: No aspect with given name
FAILURE: Monitor.process.pcpu: No aspect with given name
FAILURE: Monitor.process.vsz: No aspect with given name
FAILURE: Monitor.process.fd: No aspect with given name
FAILURE: Monitor.process.rss: No aspect with given name
FAILED: The kitchensink run failed.
[Mon Jan 31 09:32:52 UTC 2022] Analyzer failed with: Results analysis failed.
applications.kitchensink.process.analyzer.AnalyzerException: Results analysis failed.
	at applications.kitchensink.process.analyzer.Analyzer.stop(Analyzer.java:150)
	at applications.kitchensink.process.glue.Main.analyzeResults(Main.java:403)
	at applications.kitchensink.process.glue.Main.main(Main.java:224)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: applications.kitchensink.process.analyzer.AnalyzerException: Results analysis failed.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: applications.kitchensink.process.analyzer.AnalyzerException: Results analysis failed.
----------rerun:(43/7057)*----------;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
entries.remove(entry) is useless in PKCS12KeyStore,JDK-8279066,5065121,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2021-12-21 06:50,2022-09-19 07:31,2023-10-01 09:57,2021-12-21 14:14,,,,,,,,,19,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-cleanup,,,,,,,,,,,,,,,"Before password-less PKCS12 keystores are supported, certificates in a PKCS12 file are always encrypted. Therefore if one loads the keystore with a null pass, it contains `PrivateKeyEntry`s without certificates. When JDK-8076190 introduced the password-less feature I also added a line to remove such an entry.

https://github.com/openjdk/jdk/blob/a729a70c0119ed071ff490b0dfd4e3e2cb1a5ae4/src/java.base/share/classes/sun/security/pkcs12/PKCS12KeyStore.java#L2272

Unfortunately, the line is not coded correctly, it should have been `remove(key)` but here it's `remove(value)`.",,,,,,,,,,JDK-8294022,JDK-8294016,JDK-8294001,JDK-8293837,JDK-8293838,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vgv7:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-12-21 08:38;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6910
Date: 2021-12-21 16:31:57 +0000
;;;","2021-12-21 14:14;roboduke;Changeset: fb623f1d
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-12-21 22:13:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fb623f1d2ee858fbc6edfeaaa702b5fcd832a0aa
;;;","2022-09-16 04:01;goetz;Fix request [11u, 17u]

I backport this for parity with 11.0.18-oracle/17.0.6-oracle.
Low to medium risk, simple change. Easy to backport, but in security coding.
Clean backport.
SAP nightly testing passed.;;;","2022-09-16 04:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/686
Date: 2022-09-16 11:00:51 +0000;;;","2022-09-16 04:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1359
Date: 2022-09-16 11:05:46 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Intrinsics missing vzeroupper instruction,JDK-8279045,5065093,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,svkamath,svkamath,svkamath,2021-12-20 15:25,2023-05-17 08:43,2023-10-01 09:57,2021-12-21 14:10,11,17,18,19,,,,,18,hotspot,,0,amazon-interest,oracle-triage-11,oracle-triage-17,oracle-triage-18,performance,redhat-interest,,,,,,,,,,,,,,"The intrinsics added recently(AES, shift left, etc) are missing vzeroupper instruction.",,,,,,,,,,JDK-8279750,JDK-8279169,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8225625,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,,,,,"0|i2vgoz:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-12-20 16:58;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/52
Date: 2021-12-21 00:51:51 +0000
;;;","2021-12-21 07:18;chagedorn;Hi [~svkamath], how does this manifest?;;;","2021-12-21 10:34;svkamath;Hi Christian,  
The VZEROUPPER instruction resets the upper 128 bits of all Intel AVX registers. It enables faster transition between 256-bit Intel AVX and Intel SSE code.;;;","2021-12-21 14:10;roboduke;Changeset: 9ee3ccfe
Author:    Smita Kamath <svkamath@openjdk.org>
Committer: Sandhya Viswanathan <sviswanathan@openjdk.org>
Date:      2021-12-21 22:09:43 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/9ee3ccfee2c9cc54ac7dca49fbf35135e627ef18
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some Security Exception Messages Miss Spaces,JDK-8279043,5065091,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,valeriep,valeriep,2021-12-20 13:34,2022-01-03 14:47,2023-10-01 09:57,2021-12-21 10:27,,,,,,,,,19,security-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,,,"List of files whose exception message missing spaces is as below:
- src/java.base/share/classes/com/sun/crypto/provider/GaloisCounterMode.java 
- src/java.base/share/classes/com/sun/crypto/provider/TlsKeyMaterialGenerator.java 
- src/java.base/share/classes/javax/crypto/Cipher.java
- src/java.base/share/classes/sun/security/pkcs/PKCS9Attribute.java 
- src/java.base/share/classes/sun/security/pkcs12/PKCS12KeyStore.java
- src/java.base/share/classes/sun/security/rsa/RSAPadding.java 
- src/java.base/share/classes/sun/security/ssl/CertificateAuthoritiesExtension.java 
- src/java.base/share/classes/sun/security/util/DisabledAlgorithmConstraints.java
- src/java.base/share/classes/sun/security/x509/PolicyConstraintsExtension.java
- src/java.base/share/classes/sun/security/x509/PolicyInformation.java
- src/java.security.jgss/share/classes/sun/security/jgss/krb5/Krb5MechFactory.java
- test/jdk/com/sun/crypto/provider/Cipher/AEAD/GCMBufferTest.java 
- test/jdk/com/sun/crypto/provider/Cipher/AEAD/GCMShortBuffer.java
- test/jdk/sun/security/provider/PolicyParser/PrincipalExpansionError.java 
- test/jdk/sun/security/ssl/X509TrustManagerImpl/CacertsLimit.java
- test/jdk/sun/security/tools/keytool/fakegen/jdk.crypto.ec/sun/security/ec/ECKeyPairGenerator.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vgoj:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-12-21 01:46;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6894
Date: 2021-12-20 14:50:08 +0000
;;;","2021-12-21 10:26;roboduke;Changeset: f31dead6
Author:    Daniel Jelinski <djelinski1@gmail.com>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2021-12-21 18:24:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f31dead6c550444a836655ffdf97df8816e2d546
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/loopopts/TestSkeletonPredicateNegation.java times out with -XX:TieredStopAtLevel < 4,JDK-8279032,5065080,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fmatte,lmesnik,lmesnik,2021-12-20 10:55,2022-08-18 17:51,2023-10-01 09:57,2022-01-10 04:36,11.0.15-oracle,18,,,,,,,18,hotspot,,0,atr,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-18,,,,,,,,,,,,,"Test compiler/loopopts/TestSkeletonPredicateNegation.java times out during ATR when executed with -XX:TieredStopAtLevel=1,2,3

Seems requires should be added to don't run the test without C2",,,,,,,,,,JDK-8279782,JDK-8280300,JDK-8292643,JDK-8292571,,,,,,,,,,,,,,,,,,,,,,,JDK-8279695,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vgm3:",9223372036854775807,b31,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-12-21 00:36;dlong;ILW = timeout because of test bug = MML = P4;;;","2022-01-10 00:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/89
Date: 2022-01-10 08:00:14 +0000;;;","2022-01-10 03:53;fmatte;These was my findings before arriving at the suggestion,
I just reduced test case to make it bit quick, below are the results
TestSkeletonPredicateNegation instance = new TestSkeletonPredicateNegation();

-       for (int i = 0; i < 10000; ++i) {
+      for (int i = 0; i < 1000; ++i) {
           instance.mainTest(args);
       }
Interpreter -Xint - 1843.357 seconds
C1 with TieredStopAtLevel=3 - 1636.454 seconds
C2 (default) - 1.862 seconds

For me, it looks like it is not an issue with the C1 or interpreter.
The test case is designed to execute only on C2
We may need to fix the testcase with @requires vm.compiler2.enabled;;;","2022-01-10 04:36;roboduke;Changeset: 928e3477
Author:    Fairoz Matte <fmatte@openjdk.org>
Committer: Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-01-10 12:36:05 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/928e34773694dda5373027848a3363887bcaf4f4
;;;","2022-01-10 09:07;roboduke;Changeset: 928e3477
Author:    Fairoz Matte <fmatte@openjdk.org>
Committer: Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-01-10 12:36:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/928e34773694dda5373027848a3363887bcaf4f4
;;;","2022-08-10 22:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/631
Date: 2022-08-11 05:03:08 +0000;;;","2022-08-17 10:45;phh;Fix Request (17u).

On behalf of Josh Cao <joshcao@amazon.com>

Test-only fix, very low risk.;;;","2022-08-17 19:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1331
Date: 2022-08-18 02:33:37 +0000;;;","2022-08-18 09:08;phh;Fix Request (11u).

On behalf of Josh Cao <joshcao@amazon.com>

Test-only fix, very low risk. 
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove javascript references from clhsdb.html,JDK-8279024,5065070,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,cjplummer,cjplummer,cjplummer,2021-12-20 09:46,2022-12-27 01:07,2023-10-01 09:57,2021-12-21 19:56,19,,,,,,,,19,hotspot,,0,doc,jdk17u-fix-request,jdk17u-fix-yes,noreg-doc,,,,,,,,,,,,,,,,Javascript support was removed from SA as part of JDK-8244668. There are still references to it in clhsdb.html that should be removed.,,,,,,,,,,JDK-8299358,JDK-8298384,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8244668,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vgjv:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-12-20 18:22;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6903
Date: 2021-12-21 02:17:10 +0000
;;;","2021-12-21 19:56;roboduke;Changeset: d0ea7c9d
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-12-22 03:56:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d0ea7c9db9cc9ce80b60c2f94c53bb307792fc51
;;;","2022-12-22 02:01;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a doc change.
Clean backport.
SAP nightly testing passed.;;;","2022-12-22 02:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/967
Date: 2022-12-22 10:02:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JCmdTestFileSafety.java should check file time stamp for test result,JDK-8279022,5065068,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,minqi,minqi,minqi,2021-12-20 09:33,2022-09-14 14:57,2023-10-01 09:57,2021-12-22 08:18,17,18,19,,,,,,19,hotspot,,0,cds,jcmd,,,,,,,,,,,,,,,,,,"The test checks the existence of the archive file, which could result in wrong conclusion, the file may be updated.

We should check the time stamp of the archive file which is more accurate. Also the test indicates that could not use jcmd to do dynamic dump against same process --- it can now. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265465,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vgjf:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-12-20 19:11;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6904
Date: 2021-12-21 02:45:35 +0000
;;;","2021-12-22 08:18;roboduke;Changeset: 9a478b34
Author:    Yumin Qi <minqi@openjdk.org>
Date:      2021-12-22 16:17:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9a478b347e1ef7aecfc8bbc2e3c5e6ac7c23ba36
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CRC calculation in CDS should not include _version and _head_size,JDK-8279018,5065064,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,minqi,minqi,minqi,2021-12-20 09:13,2022-09-14 14:57,2023-10-01 09:57,2021-12-22 08:17,,,,,,,,,19,hotspot,,0,cds,,,,,,,,,,,,,,,,,,,"compute_crc use the buffer starting from next field of _crc to end of the header file, which includes _version and _header_size. These two fields should not be included in the calculation, the check for these two fields are separate and should not be affected by check crc.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vgij:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-12-20 12:36;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6899
Date: 2021-12-20 20:30:15 +0000
;;;","2021-12-22 08:17;roboduke;Changeset: a6903f80
Author:    Yumin Qi <minqi@openjdk.org>
Date:      2021-12-22 16:14:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a6903f806a9071b2c6c4dbb190b0041867e5bb80
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ES2Pipeline fails to detect AMD vega20 graphics card,JDK-8279013,5065027,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kcr,webbuggrp,webbuggrp,2021-12-19 09:45,2022-02-04 08:55,2023-10-01 09:57,2022-01-25 16:02,jfx17,,,,,,,,jfx19,javafx,,0,dcspn,reproducer-no,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS: Linux localhost.localdomain 5.15.7-200.fc35.x86_64 #1 SMP Wed Dec 8 19:00:47 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux

Java:
openjdk 17 2021-09-14
OpenJDK Runtime Environment (build 17+35-2724)
OpenJDK 64-Bit Server VM (build 17+35-2724, mixed mode, sharing)



A DESCRIPTION OF THE PROBLEM :
The ES2Pipleline is ignoring some AMD cards from the pre-qualification check at they de not report themselves with a string which is in the pre-qualifaction list.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Follow the instructions on the https://openjfx.io/openjfx-docs/#install-javafx page for running the example application but with added options for prism debug output:-

java -Dprism.verbose=true --module-path $PATH_TO_FX --add-modules javafx.controls HelloFX

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
A compatible graphics card would be detected and the ES2 hardware piple would be used.
ACTUAL -
The compatibility check fails and the application falls back to using the Prism SW pipeline.

CUSTOMER SUBMITTED WORKAROUND :
Adding the -Dprism.forceGPU=true option to the command line.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2vgab:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-01-25 15:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/698
Date: 2021-12-20 17:48:19 +0000;;;","2022-01-25 16:02;roboduke;Changeset: ae334c56
Author:    Paul Court <emails@paulcourt.co.uk>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-01-26 00:01:22 +0000
URL:       https://git.openjdk.java.net/jfx/commit/ae334c56687ad81cb3963f2529f93144586dd750
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: JfrChunkWriter incorrectly handles int64_t chunk size as size_t,JDK-8279011,5065057,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2021-12-20 08:05,2022-01-10 09:33,2023-10-01 09:57,2021-12-21 04:35,17,18,19,,,,,,18,hotspot,,0,datadog-interest,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,,,,"Followed up on JFR failures on x86_32, and spotted this failure:

$ CONF=linux-x86-server-fastdebug make run-test TEST=jdk/jfr/jmx/streaming/TestClose.java 

STDOUT:
test-close-1640016512165/2021_12_20_17_08_33.jfr
STDERR:
java.lang.Exception: Expected repository to be empty
	at jdk.jfr.jmx.streaming.TestClose.main(TestClose.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

Intrusive debugging shows the same picture: chunkSize is recorded as huge value, so the JFR code internally receives the EOF when reading, event handling gets borked, and the test fails, never observing the chunk flushes.

[3.141s][info][jfr,system,parser  ] Chunk: startPosition=0
[3.141s][info][jfr,system,parser  ] Chunk: major=2
[3.141s][info][jfr,system,parser  ] Chunk: minor=1
[3.141s][info][jfr,system,parser  ] Chunk: chunkSize=9896023423722239
[3.141s][info][jfr,system,parser  ] Chunk: constantPoolPosition=0
[3.141s][info][jfr,system,parser  ] Chunk: metadataPosition=0
[3.141s][info][jfr,system,parser  ] Chunk: startNanos=1640015039383595228
[3.141s][info][jfr,system,parser  ] Chunk: durationNanos=945990689
[3.141s][info][jfr,system,parser  ] Chunk: startTicks=1203376481
[3.141s][info][jfr,system,parser  ] Chunk: ticksPerSecond=1000000000
[3.141s][info][jfr,system,parser  ] Setting input size to 9896023423722239
[3.141s][info][jfr,system,parser  ] Chunk: chunkSize=9896023423722239
[3.141s][info][jfr,system,parser  ] Chunk: constantPoolPosition=2304002
[3.141s][info][jfr,system,parser  ] Chunk: metadataPosition=2103375
[3.141s][info][jfr,system,parser  ] Chunk: durationNanos =945990689
[3.141s][info][jfr,system,parser  ] Chunk: generation=2
[3.141s][info][jfr,system,parser  ] Chunk: finished=false
[3.141s][info][jfr,system,parser  ] Chunk: fileSize=9896023423722239
[3.141s][info][jfr,system,parser  ] Chunk: finalChunk=false

The problem seems to be here:

int64_t JfrChunkWriter::write_chunk_header_checkpoint(bool flushpoint) {
   const u4 checkpoint_size = current_offset() - event_size_offset;
   write_padded_at_offset<u4>(checkpoint_size, event_size_offset);
   set_last_checkpoint_offset(event_size_offset);
   const size_t sz_written = size_written();  // <-- returns int64_t
   write_be_at_offset(sz_written, chunk_size_offset); // <--- template instantiation with type=size_t
   return sz_written;
 }

This would have been nearly fine -- small size_t -> int64_t conversion is okay value-wise. But write_be_at_offset calculates the position for the writeout using sizeof(T), which silently borks the whole thing on at least 32-bit platforms, where sizeof(size_t) != sizeof(int64_t).

This might also explain timeouts in these tests, as the fix apparently resolves the timeouts there too:

# Timeouts
jdk/jfr/jmx/streaming/TestRemoteDump.java
jdk/jfr/jmx/streaming/TestSetSettings.java
jdk/jfr/jmx/streaming/TestDelegated.java
jdk/jfr/jmx/streaming/TestRotate.java
jdk/jfr/jmx/streaming/TestEnableDisable.java",,,,,,,,,,JDK-8279372,JDK-8279108,JDK-8279744,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8226511,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vggz:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-12-20 08:37;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/50
Date: 2021-12-20 16:34:07 +0000
;;;","2021-12-21 04:35;roboduke;Changeset: 467f6549
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-12-21 12:33:59 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/467f654916764751746934f80877d49a5f107194
;;;","2021-12-21 05:43;shade;Fix Request (17u)

Fixes the JFR bug that manifests on 32-bit platforms. Applies cleanly. Tests pass. (Will wait a bit for mainline testing to catch up before pushing to 17u, although the fix is pretty trivial).;;;","2021-12-21 05:48;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/24
Date: 2021-12-21 13:37:46 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS crashes when the source of an InstanceKlass is NULL,JDK-8279009,5065055,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,minqi,xlinzheng,xlinzheng,2021-12-20 06:29,2022-06-15 15:18,2023-10-01 09:57,2022-01-20 09:54,18,,,,,,,,19,hotspot,,0,cds,regression,,,,,,,,,,,,,,,,,,"Directly reproduced on TIP by using a simple `build/linux-x86_64-server-slowdebug/images/jdk/bin/java -XX:ArchiveClassesAtExit=tmp.jsa -XX:DumpLoadedClassList=tmp.lst -version`.

When dumping the klass `java/lang/invoke/DelegatingMethodHandle$Holder`, whose source is NULL, the `strcmp` logic in `ClassListWriter::write` will face a crash.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275084,JDK-8280499,,,,,"2021-12-20 06:32;xlinzheng;hs_err_pid65841.log;https://bugs.openjdk.org/secure/attachment/97416/hs_err_pid65841.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,linux,,,,,"0|i2vggj:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2021-12-20 14:16;dholmes;This seems a P2 regression to me due to the crash. This needs to be fixed in JDK 18.;;;","2021-12-20 14:17;dholmes;And in relation to the fix for JDK-8275084 we are obviously missing some testing.;;;","2021-12-20 14:34;iklam;It seems like we never tested with ""-XX:ArchiveClassesAtExit=tmp.jsa -XX:DumpLoadedClassList=tmp.lst"" since that's not a commonly used combination. The former is for dynamic CDS dumping and the latter is for static CDS dumping. These two operations are typically not done in the same command-line.;;;","2021-12-20 14:45;iklam;The problem starts in LambdaFormInvokers::regenerate_holder_classes, which creates a ClassFileStream with a NULL source. Apparently this is legal (InstanceKlass::print_class_load_logging handles it), but ClassListWriter::write() doesn't handle it.;;;","2021-12-20 14:47;iklam;Similar problem happens with ""java -Xshare:dump -XX:DumpLoadedClassList=tmp.lst""

The combination of  {-Xshare:dump, -XX:ArchiveClassesAtExit=tmp.jsa} x {-XX:DumpLoadedClassList=tmp.lst} should be added to test/hotspot/jtreg/runtime/cds/appcds/CommandLineFlagCombo.java
;;;","2021-12-20 15:01;iklam;Also this assert needs to be added:

  if (!SystemDictionaryShared::is_builtin_loader(loader_data)) {
+   assert(cfs != NULL && cfs->source() != NULL, ""already checked"");
    InstanceKlass* super = k->java_super();
;;;","2021-12-20 15:27;xlinzheng;Thank you for the above comments to explain this, Ioi :-). This problem might deserve a more professional fix instead of the workaround one due to I know nothing about CDS. Hope dear Yumin could handle this more elegantly.;;;","2022-01-13 14:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7072
Date: 2022-01-13 22:26:24 +0000;;;","2022-01-20 09:54;roboduke;Changeset: d48279b0
Author:    Yumin Qi <minqi@openjdk.org>
Date:      2022-01-20 17:52:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d48279b0bf9ee9d18ac764776a655c44fa020509
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jstatd fails to start because SecurityManager is disabled,JDK-8279007,5065053,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kevinw,mullan,mullan,2021-12-20 05:47,2022-01-10 09:34,2023-10-01 09:57,2021-12-22 03:38,18,,,,,,,,18,core-svc,,0,jstatd,regression,,,,,,,,,,,,,,,,,,"In JDK 18, attempting to run jstatd results in the following:

$ jstatd
Exception in thread ""main"" java.lang.UnsupportedOperationException: The Security Manager is deprecated and will be removed in a future release
	at java.base/java.lang.System.setSecurityManager(System.java:416)
	at jdk.jstatd/sun.tools.jstatd.Jstatd.main(Jstatd.java:136)

The workaround is to allow setting the security manager property on the command line to allow programmatic setting of the security manager:

$ jstatd -J-Djava.security.manager=allow

Alternatively, the security manager could be enabled directly on the command line:

$ jstatd -J-Djava.security.manager

Either works, though they give different warning messages.

The property should be set by the jstatd launcher instead of requiring the user to provide it.",,,,,,,,,,JDK-8279752,JDK-8279171,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270380,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vgg3:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2021-12-21 03:50;kevinw;System.setProperty anywhere in jstat itself is not early enough to set java.security.manager=allow 

System.java's initPhase3() sets the allowSecurityManager value, and is called during hotspot VM startup in Threads::create_vm()
..so no application can get there earlier.

Launching with -J-Djava.security.manager=allow does work as VM arguments are parsed earlier than the call to initPhase3().

Will need to set JAVA_ARGS in launcher makefile, simlar to JDK-8278967 for rmiregistry.
;;;","2021-12-21 03:54;alanb;make/modules/jdk.jstatd/Launcher.gmk can be used to set the system property to allow.;;;","2021-12-21 05:05;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/53
Date: 2021-12-21 13:00:26 +0000
;;;","2021-12-22 03:38;roboduke;Changeset: 73414391
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2021-12-22 11:36:53 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/734143918de540382b5a0754bb7be1500b6f3596
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RunThese24H.java failed with EXCEPTION_ACCESS_VIOLATION in __write_sample_info__,JDK-8278987,5065024,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mgronlun,dcubed,dcubed,2021-12-19 06:18,2022-08-02 08:40,2023-10-01 09:57,2021-12-22 04:32,18,,,,,,,,18,hotspot,,0,datadog-interest,intermittent,jdk17u-fix-request,jdk17u-fix-yes,noreg-hard,tier8,,,,,,,,,,,,,,"The following test failed in an Adhoc JDK18 job set:

applications/runthese/RunThese24H.java

Here's a snippet from the log file:

[stress.process.out] [26355.384s][info ][gc          ] GC(1758) Pause Young (Normal) (G1 Evacuation Pause) 1988M->1008M(2400M) 32.458ms
[stress.process.out] [26370.025s][info ][gc          ] GC(1759) Pause Young (Normal) (G1 Evacuation Pause) 1984M->1014M(2400M) 33.160ms
[stress.process.out] [26384.907s][info ][gc          ] GC(1760) Pause Young (Normal) (G1 Evacuation Pause) 2022M->1014M(2400M) 28.079ms
[stress.process.out] #
[stress.process.out] # A fatal error has been detected by the Java Runtime Environment:
[stress.process.out] #
[stress.process.out] #  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007ffa3b522a7f, pid=7060, tid=7496
[stress.process.out] #
[stress.process.out] # JRE version: Java(TM) SE Runtime Environment (18.0) (build 18-internal+0-2021-12-16-2319118.daniel.daugherty.8273107forjdk18.git)
[stress.process.out] # Java VM: Java HotSpot(TM) 64-Bit Server VM (18-internal+0-2021-12-16-2319118.daniel.daugherty.8273107forjdk18.git, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
[stress.process.out] # Problematic frame:
[stress.process.out] # V  [jvm.dll+0x682a7f]  __write_sample_info__+0xaf
[stress.process.out] #
[stress.process.out] # Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese24H_java\\scratch\\0\\hs_err_pid7060.mdmp
[stress.process.out] #
[stress.process.out] # JFR recording file will be written. Location: T:\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese24H_java\\scratch\\0\\hs_err_pid7060.jfr
[stress.process.out] #
[stress.process.out] Unsupported internal testing APIs have been used.
[stress.process.out] 
[stress.process.out] # An error report file with more information is saved as:
[stress.process.out] # T:\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese24H_java\\scratch\\0\\hs_err_pid7060.log
[stress.process.out] #
[stress.process.out] # If you would like to submit a bug report, please visit:
[stress.process.out] #   https://bugreport.java.com/bugreport/crash.jsp
[stress.process.out] #
[2021-12-18T12:07:39.857630300Z] Gathering output for process 9804
[2021-12-18T12:07:40.925926100Z] Waiting for completion for process 9804
[2021-12-18T12:07:40.925926100Z] Waiting for completion finished for process 9804
Output and diagnostic info for process 9804 was saved into 'pid-9804-output.log'
[2021-12-18T12:07:40.925926100Z] Gathering output for process 2392
[2021-12-18T12:07:41.050922500Z] Waiting for completion for process 2392
[2021-12-18T12:07:41.050922500Z] Waiting for completion finished for process 2392
Output and diagnostic info for process 2392 was saved into 'pid-2392-output.log'
[2021-12-18T12:07:41.050922500Z] Gathering output for process 9896
[2021-12-18T12:07:41.160323700Z] Waiting for completion for process 9896
[2021-12-18T12:07:41.160323700Z] Waiting for completion finished for process 9896
Output and diagnostic info for process 9896 was saved into 'pid-9896-output.log'
[2021-12-18T12:07:41.160323700Z] Gathering output for process 10212
[2021-12-18T12:07:41.332226Z] Waiting for completion for process 10212
[2021-12-18T12:07:41.332226Z] Waiting for completion finished for process 10212
Output and diagnostic info for process 10212 was saved into 'pid-10212-output.log'


Stress process failed. See stress.process.err/stress.process.out files for details.


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x000001bb7b568d10):  JavaThread ""JfrStressModule"" [_thread_in_vm, id=7496, stack(0x0000001afa600000,0x0000001afa700000)]

Stack: [0x0000001afa600000,0x0000001afa700000],  sp=0x0000001afa6fefa0,  free space=1019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x682a7f]  __write_sample_info__+0xaf  (objectSampleWriter.cpp:210)
V  [jvm.dll+0x6823a1]  ObjectSampleWriter::~ObjectSampleWriter+0xc1  (objectSampleWriter.cpp:623)
V  [jvm.dll+0x68087d]  ObjectSampleCheckpoint::_write+0x15d  (objectSampleCheckpoint.cpp:396)
V  [jvm.dll+0x2d6e8b]  EventEmitter::emit+0x1ab  (eventEmitter.cpp:64)
V  [jvm.dll+0x56473a]  LeakProfiler::emit_events+0x3a  (leakProfiler.cpp:89)
V  [jvm.dll+0x3c7efc]  jfr_emit_old_object_samples+0x9c  (jfrJniMethod.cpp:355)
C  0x000001bb2c151366

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  jdk.jfr.internal.JVM.emitOldObjectSamples(JZZ)V+0 jdk.jfr@18-internal
j  jdk.jfr.internal.OldObjectSample.emit(J)V+14 jdk.jfr@18-internal
j  jdk.jfr.internal.OldObjectSample.emit(Ljdk/jfr/internal/PlatformRecording;)V+31 jdk.jfr@18-internal
j  jdk.jfr.internal.PlatformRecorder.stop(Ljdk/jfr/internal/PlatformRecording;)V+142 jdk.jfr@18-internal
j  jdk.jfr.internal.PlatformRecording.stop(Ljava/lang/String;)Z+38 jdk.jfr@18-internal
j  jdk.jfr.Recording.stop()Z+6 jdk.jfr@18-internal
j  applications.kitchensink.process.stress.modules.JfrStressModule.execute()V+94
j  applications.kitchensink.process.stress.modules.StressModule.run()V+109
v  ~StubRoutines::call_stub

siginfo: EXCEPTION_ACCESS_VIOLATION (0xc0000005), reading address 0x0000000000000008",,,,,,,,,,JDK-8279172,JDK-8279585,JDK-8279753,,,,,,,,,,,,,,,,,,,,JDK-8279395,,,,JDK-8277919,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2vg9n:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-12-19 08:53;mgronlun;JDK-8277919 added the following to build the stacktrace blob's in the thread doing the serialization:
...

  {
    // First install stacktrace blobs for the most recently added candidates.
    MutexLocker lock(SafepointSynchronize::is_at_safepoint() ? nullptr : ClassLoaderDataGraph_lock);
    // the lock is needed to ensure the unload lists do not grow in the middle of inspection.
    install_stack_traces(sampler);
  }

ClassLoaderDataGraph_lock is taken with safepoint check. This means there is now a potential safepoint in the serialization code where previously there was none.
During the safepoint, the leak candidate objects on the list to be serialized can be gc:ed. Indeed, the crash happens when trying to get the klass for a leak candidate object. ;;;","2021-12-19 09:16;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/47
Date: 2021-12-19 17:13:39 +0000
;;;","2021-12-22 04:32;roboduke;Changeset: 713fbeb0
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2021-12-22 12:30:55 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/713fbeb050a8f79d3a662106125c3f14f3952741
;;;","2021-12-23 06:28;dcubed;The fix for this bug is in jdk-18+29-2008.;;;","2021-12-27 02:26;jbachorik;[17u] Fix Request

I would like to ask for an approval to backport this fix to JDK 17u. It is a required follow-up fix to JDK-8277919.

The fix applies cleanly.
jdk_jfr tests were run and they are all passing.

The PR will be open once JDK-8277919 backport has been integrated and this request will be updated to contain the link to that PR.;;;","2022-01-06 07:54;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/63
Date: 2022-01-06 15:48:18 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update WebKit to 613.1,JDK-8278980,5065009,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,arapte,kcr,kcr,2021-12-18 06:35,2022-04-13 06:23,2023-10-01 09:57,2022-02-04 04:28,8u331,jfx19,,,,,,,jfx19,javafx,,0,3rdparty,CPU22_04-critical-approved,CPU22_04-critical-SQE-OK,sn_111,,,,,,,,,,,,,,,,"This will update JavaFX WebKit to 613.1, based on GTK WebKit 2.34.x

[1] https://trac.webkit.org/wiki/WebKitGTK/2.34.x
[2] https://trac.webkit.org/log/webkit/releases/WebKitGTK/webkit-2.34/
",,,,,,,,,,JDK-8281661,JDK-8282656,JDK-8284826,JDK-8281372,JDK-8281264,,,,,,,,,,JDK-8275456,,JDK-8275225,,,,,,,,,,JDK-8270867,JDK-8281702,JDK-8278983,JDK-8268849,JDK-8282099,JDK-8281459,JDK-8281089,JDK-8282359,JDK-8280421,,,,JDK-8281086,JDK-8281428,JDK-8281711,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vg6b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-02-01 23:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/723
Date: 2022-02-02 07:34:55 +0000;;;","2022-02-04 04:28;roboduke;Changeset: 6f28d912
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2022-02-04 12:26:03 +0000
URL:       https://git.openjdk.java.net/jfx/commit/6f28d912024495278c4c35ab054bc2aab480b3e4
;;;","2022-02-11 09:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/33
Date: 2022-02-11 16:48:47 +0000;;;","2022-02-28 08:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/77
Date: 2022-02-28 16:46:36 +0000;;;","2022-04-13 05:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/770
Date: 2022-04-13 12:35:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] SigningPackageTest is failed with runtime exception,JDK-8278970,5064996,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,almatvee,almatvee,2021-12-17 13:44,2022-01-10 09:33,2023-10-01 09:57,2021-12-17 13:57,18,,,,,,,,18,tools,,0,jpackage,regression,regression_8263155,sn_108,sqebug,,,,,,,,,,,,,,,"Tested with JDK18 b27
Tested OS's: Mac OS 10.15, Mac OS 11.4

SigningPackageTest jtreg test is failed with runtime exception. Please refer to the attached logs and data.
SigningPackageTest artifacts DMG and PKG are created, but pkg fails to install even if the certificate is trusted.

Steps:
- Run jtreg tests.
- Verify that artifact with name SigningPackageTest-1.0.pkg is generated
- Launch SigningPackageTest-1.0.pkg

Actual result: SigningPackageTest test failed (see SigningPackageTest.out).
SigningPackageTest-1.0.pkg installation is failed.",Mac OS,,,,,,,,,JDK-8279740,JDK-8279104,,,,,,,,,,,,,,,,,,,,,JDK-8278907,,,,JDK-8263155,,,,,,,,,,,,JDK-8255207,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vg3f:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-12-17 13:46;almatvee;From log file:

STDERR:
java.lang.AssertionError: Expected [0]. Actual [1]: Check command [/usr/bin/codesign --verify --deep --strict --verbose=2 ""/Volumes/SigningPackageTest 1/.background/Contents/MacOS/SigningPackageTest""](6) exited with 0 code
	at jdk.jpackage.test.TKit.error(TKit.java:264)
	at jdk.jpackage.test.TKit.assertEquals(TKit.java:567)
	at jdk.jpackage.test.Executor$Result.assertExitCodeIs(Executor.java:183)
	at jdk.jpackage.test.Executor.execute(Executor.java:221)
	at SigningBase.codesignResult(SigningBase.java:58)
	at SigningBase.verifyCodesign(SigningBase.java:134)
	at SigningPackageTest.lambda$verifyAppImageInDMG$0(SigningPackageTest.java:79)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at jdk.jpackage.test.MacHelper.withExplodedDmg(MacHelper.java:73)
	at SigningPackageTest.verifyAppImageInDMG(SigningPackageTest.java:77)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at jdk.jpackage.test.PackageTest.lambda$addBundleVerifier$6(PackageTest.java:160)
	at jdk.jpackage.test.Functional$ThrowingBiConsumer.lambda$toBiConsumer$0(Functional.java:56)
	at jdk.jpackage.test.PackageTest$Handler.lambda$verifyPackageBundle$1(PackageTest.java:548)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest$Handler.verifyPackageBundle(PackageTest.java:548)
	at jdk.jpackage.test.PackageTest$Handler.accept(PackageTest.java:524)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:447)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:396)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at jdk.jpackage.test.PackageTest.lambda$runActions$20(PackageTest.java:360)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.lambda$runActions$21(PackageTest.java:359)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.runActions(PackageTest.java:358)
	at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:51)
	at SigningPackageTest.test(SigningPackageTest.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
	at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
	at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:139)
	at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:124)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:121)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:107)
	at jdk.jpackage.test.TKit.runTests(TKit.java:120)
	at jdk.jpackage.test.Main.runTests(Main.java:79)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:107)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
java.lang.RuntimeException: 1 FAILED TEST
	at jdk.jpackage.test.Main.reportSummary(Main.java:130)
	at jdk.jpackage.test.Main.runTests(Main.java:90)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:107)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833);;;","2021-12-17 13:55;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/42
Date: 2021-12-17 03:28:12 +0000
;;;","2021-12-17 13:57;roboduke;Changeset: 36676db2
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-12-17 21:56:55 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/36676db2fdb810f6d9fe7be8a81b86244dbdbf71
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rmiregistry fails to start because SecurityManager is disabled,JDK-8278967,5064992,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,smarks,smarks,smarks,2021-12-17 11:49,2022-01-10 09:35,2023-10-01 09:57,2021-12-22 10:57,,,,,,,,,18,core-libs,,0,noreg-trivial,regression,,,,,,,,,,,,,,,,,,"In JDK 18, attempting to run rmiregistry results in the following:

$ rmiregistry
java.lang.UnsupportedOperationException: The Security Manager is deprecated and will be removed in a future release
	at java.base/java.lang.System.setSecurityManager(System.java:416)
	at java.rmi/sun.rmi.registry.RegistryImpl.createRegistry(RegistryImpl.java:499)
	at java.rmi/sun.rmi.registry.RegistryImpl.main(RegistryImpl.java:556)

The workaround is to allow set the security manager property on the command line to allow programmatic setting of the security manager:

$ rmiregistry -J-Djava.security.manager=allow

Alternatively, the security manager could be enabled directly on the command line:

$ rmiregistry -J-Djava.security.manager

Either works, though they give different warning messages.

The property should be set by the rmiregistry launcher instead of requiring the user to provide it.
",,,,,,,,,,JDK-8279757,JDK-8279246,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270380,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vg2j:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50807e59,,,,,,,,,"2021-12-17 15:51;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/45
Date: 2021-12-17 20:01:27 +0000
;;;","2021-12-22 10:57;roboduke;Changeset: 04ee9211
Author:    Stuart Marks <smarks@openjdk.org>
Date:      2021-12-22 18:56:30 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/04ee9211fcc59178b3bfdfdda5e0def9b0f29ada
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"two microbenchmarks tests fail ""assert(!jvms->method()->has_exception_handlers()) failed: no exception handler expected"" after JDK-8275638",JDK-8278966,5064990,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,dcubed,dcubed,2021-12-17 10:19,2022-03-08 09:43,2023-10-01 09:57,2022-01-04 02:57,17,18,,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-18,problemlist,regression,tier5,tier8,,,,,,,,,,,,"The following closed tests failed in the JDK18 CI:

applications/microbenchmarks/indy/Test_3.java#id20
applications/microbenchmarks/other/Test_12.java#id0

I've started this bug off as confidential because the tests are
closed. However, after triage by the Compiler team, this bug
can be change into non-confidential if appropriate.

Here's the crashing thread's stack from Test_3.java#id20:

---------------  T H R E A D  ---------------

Current thread (0x00007fd0b80b2870):  JavaThread ""C2 CompilerThread3"" daemon [_thread_in_native, id=25560, stack(0x00007fd0cfafb000,0x00007fd0cfbfc000)]


Current CompileTask:
C2:   1671  721   !         java.lang.invoke.LambdaForm$MH/0x0000000801028000::guardWithCatch (83 bytes)

Stack: [0x00007fd0cfafb000,0x00007fd0cfbfc000],  sp=0x00007fd0cfbf6e70,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8b26bb]  LateInlineMHCallGenerator::do_late_inline_check(Compile*, JVMState*)+0x5b
V  [libjvm.so+0x8aee8f]  CallGenerator::do_late_inline_helper()+0xadf
V  [libjvm.so+0xa8979d]  Compile::inline_incrementally_one()+0x33d
V  [libjvm.so+0xa89aff]  Compile::inline_incrementally(PhaseIterGVN&)+0x18f
V  [libjvm.so+0xa8a759]  Compile::Optimize()+0x5e9
V  [libjvm.so+0xa8d3fe]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x159e
V  [libjvm.so+0x8a5d24]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x664
V  [libjvm.so+0xa9d6f8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc88
V  [libjvm.so+0xa9e4b8]  CompileBroker::compiler_thread_loop()+0x648
V  [libjvm.so+0x1925aba]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x192de80]  Thread::call_run()+0x100
V  [libjvm.so+0x1610214]  thread_native_entry(Thread*)+0x104


Here's the crashing stack trace from Test_12.java#id0:

---------------  T H R E A D  ---------------

Current thread (0x00007f2da4107ed0):  JavaThread ""C2 CompilerThread3"" daemon [_thread_in_native, id=13403, stack(0x00007f2ddc1a6000,0x00007f2ddc2a7000)]


Current CompileTask:
C2:   3828  827   !         java.lang.invoke.LambdaForm$MH/0x0000000801027800::tryFinally (77 bytes)

Stack: [0x00007f2ddc1a6000,0x00007f2ddc2a7000],  sp=0x00007f2ddc2a1e70,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8b26bb]  LateInlineMHCallGenerator::do_late_inline_check(Compile*, JVMState*)+0x5b
V  [libjvm.so+0x8aee8f]  CallGenerator::do_late_inline_helper()+0xadf
V  [libjvm.so+0xa8979d]  Compile::inline_incrementally_one()+0x33d
V  [libjvm.so+0xa89aff]  Compile::inline_incrementally(PhaseIterGVN&)+0x18f
V  [libjvm.so+0xa8a759]  Compile::Optimize()+0x5e9
V  [libjvm.so+0xa8d3fe]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x159e
V  [libjvm.so+0x8a5d24]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x664
V  [libjvm.so+0xa9d6f8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc88
V  [libjvm.so+0xa9e4b8]  CompileBroker::compiler_thread_loop()+0x648
V  [libjvm.so+0x1925aba]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x192de80]  Thread::call_run()+0x100
V  [libjvm.so+0x1610214]  thread_native_entry(Thread*)+0x104",,,,,,,,,,JDK-8282820,JDK-8280708,JDK-8279764,JDK-8279809,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278981,JDK-8279409,JDK-8275638,JDK-8279073,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,,,,,"0|i2vg23:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-12-17 15:34;dlong;ILW = assert in debug build, regression = MMH = P3;;;","2021-12-18 01:42;dlong;[~roland], the problem seems to be caused when using MethodHandles.tryFinally(), but I suspect that MethodHandles.catchException() would cause the same problem.  I think the assert should simply be removed.  Also add tryFinally and catchException test cases.;;;","2021-12-20 01:27;roland;[~dlong] Thanks for investigating. what about this as a fix: https://github.com/rwestrel/jdk18/tree/JDK-8278966 ?;;;","2021-12-20 18:23;dlong;[~roland], the test changes look good, but the new assert seems to be relying on implementations details that could change in the future.  But I'm not a java.lang.invoke expert, so if you want to keep that assert, I would get it reviewed by an expert.  [~mchung], is it safe to safe to assume that MethodHandles.tryFinally() and catchException() will always use invokeBasic and never linkToVirtual/linkToInterface?  Or more generally, can we assume that linkToVirtual/linkToInterface will never be used in a method with an exception handler.;;;","2021-12-21 01:51;roland;[~dlong] right, the assert makes assumptions about implementation details but they are the assumptions that were made in JDK-8275638 already.;;;","2021-12-21 08:47;dlong;[~roland] Maybe I'm missing the reason for the assert.  If it is to make sure we handle all cases, then I don't see how checking for linkToVirtual/linkToInterface implies that there is no null check.  If there is a way to call a MH intrinsic with both a null check and exception handler, then the workaround in JDK-8275638 is not enough.  In that case, isn't a bailout better than an assert?;;;","2021-12-21 08:56;roland;[~dlong] The assumption for the work around is that there can't be a MethodHandle invoker call to a virtual method (that requires a null check) and exception handlers in the same method (that AFAIU is a lambda form generated at runtime by the JDK). Otherwise the work around which pops the stack when there's no exception handlers doesn't work. The reason for the assert is to check that the assumption is correct.;;;","2021-12-21 09:24;mchung;> is it safe to safe to assume that MethodHandles.tryFinally() and catchException() will always use invokeBasic and never linkToVirtual/linkToInterface? Or more generally, can we assume that linkToVirtual/linkToInterface will never be used in a method with an exception handler. 

[~vlivanov][[~jvernee] are the best one to answer this.;;;","2021-12-21 19:01;dlong;[~roland] So in your test case using tryFinally and catchException, it's using invokeBasic I believe, so you assert passes, but where is the null check?  Do you think it's possible to create a MethodHandle with both a null check and a virtual call?  [~vlivanov], what do you think?;;;","2021-12-22 04:46;roland;[~dlong] AFAIU, test5() is:
try {
  test.m();
} finally {
}
expressed with method handles. test5() is passed either null or a non null test object so it does throw.
There are a number of generated adapter methods called between test5() and m() to implement the method handle invocation. One has the linkToVirtual where the exception is thrown. One has the exception handlers. They are not the same. ;;;","2021-12-22 21:52;dlong;@roland, you are probably right that the problem can't be triggered with MethodHandle transformations directly.  However, what about custom bytecodes from a .jasm file, or instrumented bytecodes from perhaps a JVMTI classloader hook?  Maybe I'm being paranoid, but a bailout seems less risky than an assert.;;;","2021-12-23 10:21;vlivanov;(Leaving JDK-8275638 fix aside for now. I have some questions I'll ask separately.)

> [~dlong] Thanks for investigating. what about this as a fix: https://github.com/rwestrel/jdk18/tree/JDK-8278966 ?

Proposed assert adjustment looks reasonable.
;;;","2022-01-03 00:23;roland;[~vlivanov] Thanks. What about Dean's concerns with custom/instrumented bytecodes? ;;;","2022-01-03 03:20;vlivanov;> What about Dean's concerns with custom/instrumented bytecodes?

I discussed it privately with Dean and, though I'm not fond of the constraint imposed by JDK-8275638 fix (has_exception_handlers() == false), I think it's fine for now to rely on the implementation details of java.lang.invoke support in JDK.

MH linkers are package-private, so it would require java.base module patching to access them from a custom class file.
It would be trivial to write a jtreg which reliably triggers the assert. (There are existing white-box tests for java.lang.invoke impl which poke into its internals.)
But all the normal/supported usages of MH linkers are fully controlled by the JDK and confined to DirectMethodHandle cases which don't have exception handlers.

Regarding bytecode instrumentation, LambdaForms are compiled to hidden classes which can't be instrumented/modified using JVMTI:

https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/invoke/MethodHandles.java#L2003

* A hidden class or interface ...
* is not {@linkplain java.lang.instrument.Instrumentation#isModifiableClass(Class)
* modifiable} by Java agents or tool agents using the <a href=""{@docRoot}/../specs/jvmti.html"">
* JVM Tool Interface</a>. 
;;;","2022-01-03 06:43;roland;[~vlivanov] Thanks. Should I proceed with the RFR for the assert tweak?;;;","2022-01-03 10:53;vlivanov;> Should I proceed with the RFR for the assert tweak?

[~roland] yes, please.;;;","2022-01-04 00:19;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/78
Date: 2022-01-04 08:15:28 +0000
;;;","2022-01-04 02:57;roboduke;Changeset: e7244c19
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-01-04 10:56:37 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/e7244c19f4e24698ab074da530bf6c403f0e22cd
;;;","2022-01-04 07:10;dcubed;The fix for this bug is in jdk-18+30-2023.;;;","2022-01-04 11:35;roboduke;Changeset: e7244c19
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-01-04 10:56:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e7244c19f4e24698ab074da530bf6c403f0e22cd
;;;","2022-01-04 19:12;dcubed;The fix for this bug is in jdk-19+4-141.;;;","2022-03-07 05:17;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle together with JDK-8275638. Applies cleanly. Test has passed.;;;","2022-03-07 05:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/201
Date: 2022-03-07 13:13:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
crash in SymbolTable::do_lookup,JDK-8278965,5064988,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,dnsimon,dnsimon,2021-12-17 09:11,2023-08-23 04:44,2023-10-01 09:57,2023-02-10 10:02,17,20,,,,,,,21,hotspot,,0,amazon-interest,classloading,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,parser,,,,,,,,,,,,,,"#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f1b8a7b34a8, pid=19661, tid=20126
#
# JRE version: Java(TM) SE Runtime Environment GraalVM 22.0.0-dev (17.0.2+4) (build 17.0.2+4-LTS-jvmci-22.0-b01)
# Java VM: Java HotSpot(TM) 64-Bit Server VM GraalVM 22.0.0-dev (17.0.2+4-LTS-jvmci-22.0-b01, mixed mode, tiered, jvmci, compressed oops, compressed class ptrs, parallel gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd424a8]  SymbolTable::do_lookup(char const*, int, unsigned long)+0xd8
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

Current thread (0x00007f1b84c9e210):  JavaThread ""ForkJoinPool-1-worker-1"" daemon [_thread_in_vm, id=20126, stack(0x00007f1af55ff000,0x00007f1af6000000)]

Stack: [0x00007f1af55ff000,0x00007f1af6000000],  sp=0x00007f1af5ffc930,  free space=10230k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd424a8]  SymbolTable::do_lookup(char const*, int, unsigned long)+0xd8
V  [libjvm.so+0xd4266e]  SymbolTable::lookup_only(char const*, int, unsigned int&)+0x9e
V  [libjvm.so+0x551193]  ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, JavaThread*)+0x763
V  [libjvm.so+0x551b55]  ClassFileParser::parse_stream(ClassFileStream const*, JavaThread*) [clone .part.0]+0x175
V  [libjvm.so+0x552eae]  ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, ClassLoadInfo const*, ClassFileParser::Publicity, JavaThread*)+0x24e
V  [libjvm.so+0xa34d40]  KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, ClassLoadInfo const&, JavaThread*)+0x290
V  [libjvm.so+0xd52670]  SystemDictionary::resolve_class_from_stream(ClassFileStream*, Symbol*, Handle, ClassLoadInfo const&, JavaThread*)+0x150
V  [libjvm.so+0x8cebee]  jvm_define_class_common(char const*, _jobject*, signed char const*, int, _jobject*, char const*, JavaThread*)+0x22e
V  [libjvm.so+0x8ceef4]  JVM_DefineClassWithSource+0xa4
C  [libjava.so+0xde62]  Java_java_lang_ClassLoader_defineClass1+0x182
J 1173  java.lang.ClassLoader.defineClass1(Ljava/lang/ClassLoader;Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; java.base@17.0.2 (0 bytes) @ 0x00007f1b734e8f4d [0x00007f1b734e8e20+0x000000000000012d]
J 1181 c1 java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; java.base@17.0.2 (43 bytes) @ 0x00007f1b6c2ace54 [0x00007f1b6c2acb00+0x0000000000000354]
J 1178 c1 java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; java.base@17.0.2 (16 bytes) @ 0x00007f1b6c2abc0c [0x00007f1b6c2abb40+0x00000000000000cc]
J 2317 c1 jdk.internal.loader.BuiltinClassLoader.defineClass(Ljava/lang/String;Ljdk/internal/loader/Resource;)Ljava/lang/Class; java.base@17.0.2 (121 bytes) @ 0x00007f1b6c4a627c [0x00007f1b6c4a53a0+0x0000000000000edc]
J 1018 c1 jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(Ljava/lang/String;)Ljava/lang/Class; java.base@17.0.2 (64 bytes) @ 0x00007f1b6c25f84c [0x00007f1b6c25e860+0x0000000000000fec]
J 2517 c2 jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(Ljava/lang/String;Z)Ljava/lang/Class; java.base@17.0.2 (143 bytes) @ 0x00007f1b735dd160 [0x00007f1b735dca60+0x0000000000000700]
J 845 c1 jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class; java.base@17.0.2 (40 bytes) @ 0x00007f1b6c20647c [0x00007f1b6c205e60+0x000000000000061c]
J 2366 c1 java.lang.ClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class; java.base@17.0.2 (121 bytes) @ 0x00007f1b6c4bddac [0x00007f1b6c4bda40+0x000000000000036c]
J 2602 c2 java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class; java.base@17.0.2 (7 bytes) @ 0x00007f1b735b0760 [0x00007f1b735b0720+0x0000000000000040]",,,,,,,,,,JDK-8303750,JDK-8304197,JDK-8304009,JDK-8303528,,,,,,,,,,,,,,,,,,,,,,,JDK-8265713,,,,,,,,,,,,JDK-8302108,JDK-8301123,,,,,"2023-01-02 14:12;dnsimon;hs_err_pid12967.log;https://bugs.openjdk.org/secure/attachment/102177/hs_err_pid12967.log","2021-12-17 09:12;dnsimon;hs_err_pid19661.log;https://bugs.openjdk.org/secure/attachment/97405/hs_err_pid19661.log","2021-12-17 09:12;dnsimon;hs_err_pid52011.log;https://bugs.openjdk.org/secure/attachment/97406/hs_err_pid52011.log","2023-01-23 09:13;never;jdk-20-ConcurrentHashTable.patch;https://bugs.openjdk.org/secure/attachment/102386/jdk-20-ConcurrentHashTable.patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vg1n:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-12-22 02:03;dnsimon;Here's more details from our investigation that may offer hints to the runtime team as to where the problem may be.

Dump of assembler code for function SymbolTable::do_lookup(char const*, int, unsigned long):

   0x0000000000d42110 <+0>:	push   %rbp
   0x0000000000d42111 <+1>:	mov    %rsp,%rbp
   0x0000000000d42114 <+4>:	push   %r15
   0x0000000000d42116 <+6>:	push   %r14
   0x0000000000d42118 <+8>:	mov    %rdx,%r14
   0x0000000000d4211b <+11>:	push   %r13
   0x0000000000d4211d <+13>:	push   %r12
   0x0000000000d4211f <+15>:	mov    %rdi,%r12
   0x0000000000d42122 <+18>:	push   %rbx
   0x0000000000d42123 <+19>:	mov    %esi,%ebx
   0x0000000000d42125 <+21>:	sub    $0x28,%rsp
   0x0000000000d42129 <+25>:	data32 lea 0x4a93af(%rip),%rdi        # 0x11eb4e0
   0x0000000000d42131 <+33>:	data32 data32 callq 0x245660 <__tls_get_addr@plt>
   0x0000000000d42139 <+41>:	mov    0x5182f0(%rip),%rcx        # 0x125a430 <_local_table>
   0x0000000000d42140 <+48>:	mov    %rcx,-0x40(%rbp)
   0x0000000000d42144 <+52>:	mov    (%rax),%rax
   0x0000000000d42147 <+55>:	mov    %rax,-0x48(%rbp)
   0x0000000000d4214b <+59>:	mov    0xf8(%rax),%rax
   0x0000000000d42152 <+66>:	mov    %rax,-0x50(%rbp)
   0x0000000000d42156 <+70>:	test   $0x1,%al
   0x0000000000d42158 <+72>:	jne    0xd4216c <SymbolTable::do_lookup(char const*, int, unsigned long)+92>
   0x0000000000d4215a <+74>:	lea    0x4f341f(%rip),%rax        # 0x1235580 <GlobalCounter::_global_counter>
   0x0000000000d42161 <+81>:	mov    0x80(%rax),%rax
   0x0000000000d42168 <+88>:	or     $0x1,%rax
   0x0000000000d4216c <+92>:	mov    -0x48(%rbp),%rsi
   0x0000000000d42170 <+96>:	lea    0xf8(%rsi),%rdx
   0x0000000000d42177 <+103>:	xchg   %rax,(%rdx)
   0x0000000000d4217a <+106>:	mov    -0x40(%rbp),%rsi
   0x0000000000d4217e <+110>:	mov    0x48(%rsi),%rax
   0x0000000000d42182 <+114>:	test   %rax,%rax
   0x0000000000d42185 <+117>:	je     0xd42190 <SymbolTable::do_lookup(char const*, int, unsigned long)+128>
   0x0000000000d42187 <+119>:	lea    0x48(%rsi),%rdx
   0x0000000000d4218b <+123>:	xor    %eax,%eax
   0x0000000000d4218d <+125>:	xchg   %rax,(%rdx)
   0x0000000000d42190 <+128>:	mov    -0x40(%rbp),%rcx
   0x0000000000d42194 <+132>:	mov    0x8(%rcx),%rax
   0x0000000000d42198 <+136>:	mov    0x18(%rax),%rdx
   0x0000000000d4219c <+140>:	mov    (%rax),%rax
   0x0000000000d4219f <+143>:	and    %r14,%rdx
   0x0000000000d421a2 <+146>:	lea    (%rax,%rdx,8),%rax
   0x0000000000d421a6 <+150>:	mov    (%rax),%rdx
   0x0000000000d421a9 <+153>:	and    $0x2,%edx
   0x0000000000d421ac <+156>:	je     0xd421bd <SymbolTable::do_lookup(char const*, int, unsigned long)+173>
   0x0000000000d421ae <+158>:	mov    0x10(%rcx),%rax
   0x0000000000d421b2 <+162>:	and    0x18(%rax),%r14
   0x0000000000d421b6 <+166>:	mov    (%rax),%rax
   0x0000000000d421b9 <+169>:	lea    (%rax,%r14,8),%rax
   0x0000000000d421bd <+173>:	mov    (%rax),%r9
   0x0000000000d421c0 <+176>:	and    $0xfffffffffffffffc,%r9
   0x0000000000d421c4 <+180>:	mov    %r9,%r15
   0x0000000000d421c7 <+183>:	mov    %r9,%r13
   0x0000000000d421ca <+186>:	je     0xd4225c <SymbolTable::do_lookup(char const*, int, unsigned long)+332>
   0x0000000000d421d0 <+192>:	movslq %ebx,%rax
   0x0000000000d421d3 <+195>:	xor    %r15d,%r15d
   0x0000000000d421d6 <+198>:	mov    %rax,-0x38(%rbp)
   0x0000000000d421da <+202>:	nopw   0x0(%rax,%rax,1)
   0x0000000000d421e0 <+208>:	mov    0x8(%r13),%r14
   0x0000000000d421e4 <+212>:	add    $0x1,%r15
   0x0000000000d421e8 <+216>:	movzwl 0x4(%r14),%eax
   0x0000000000d421ed <+221>:	cmp    %eax,%ebx
   0x0000000000d421ef <+223>:	jne    0xd42250 <SymbolTable::do_lookup(char const*, int, unsigned long)+320>
   0x0000000000d421f1 <+225>:	mov    -0x38(%rbp),%rdx
   0x0000000000d421f5 <+229>:	lea    0x6(%r14),%rdi
   0x0000000000d421f9 <+233>:	mov    %r12,%rsi
   0x0000000000d421fc <+236>:	callq  0x2459b0 <memcmp@plt>
   0x0000000000d42201 <+241>:	test   %eax,%eax
   0x0000000000d42203 <+243>:	jne    0xd42250 <SymbolTable::do_lookup(char const*, int, unsigned long)+320>
   0x0000000000d42205 <+245>:	mov    %r14,%rdi
   0x0000000000d42208 <+248>:	callq  0xd41020 <Symbol::try_increment_refcount()>
   0x0000000000d4220d <+253>:	test   %al,%al
   0x0000000000d4220f <+255>:	je     0xd42253 <SymbolTable::do_lookup(char const*, int, unsigned long)+323>
   0x0000000000d42211 <+257>:	mov    -0x40(%rbp),%rax
   0x0000000000d42215 <+261>:	mov    0x28(%rax),%rdx
   0x0000000000d42219 <+265>:	mov    0x8(%r13),%rax
   0x0000000000d4221d <+269>:	mov    -0x48(%rbp),%rbx
   0x0000000000d42221 <+273>:	mov    -0x50(%rbp),%rcx
   0x0000000000d42225 <+277>:	mov    %rcx,0xf8(%rbx)
   0x0000000000d4222c <+284>:	cmp    %rdx,%r15
   0x0000000000d4222f <+287>:	jbe    0xd42238 <SymbolTable::do_lookup(char const*, int, unsigned long)+296>
   0x0000000000d42231 <+289>:	movb   $0x1,0x518150(%rip)        # 0x125a388 <SymbolTable::_needs_rehashing>
   0x0000000000d42238 <+296>:	add    $0x28,%rsp
   0x0000000000d4223c <+300>:	pop    %rbx
   0x0000000000d4223d <+301>:	pop    %r12
   0x0000000000d4223f <+303>:	pop    %r13
   0x0000000000d42241 <+305>:	pop    %r14
   0x0000000000d42243 <+307>:	pop    %r15
   0x0000000000d42245 <+309>:	pop    %rbp
   0x0000000000d42246 <+310>:	retq   
   0x0000000000d42247 <+311>:	nopw   0x0(%rax,%rax,1)
   0x0000000000d42250 <+320>:	mov    (%r14),%eax
   0x0000000000d42253 <+323>:	mov    0x0(%r13),%r13
   0x0000000000d42257 <+327>:	test   %r13,%r13
   0x0000000000d4225a <+330>:	jne    0xd421e0 <SymbolTable::do_lookup(char const*, int, unsigned long)+208>
   0x0000000000d4225c <+332>:	mov    -0x40(%rbp),%rax
   0x0000000000d42260 <+336>:	mov    0x28(%rax),%rdx
   0x0000000000d42264 <+340>:	xor    %eax,%eax
   0x0000000000d42266 <+342>:	jmp    0xd4221d <SymbolTable::do_lookup(char const*, int, unsigned long)+269>

Crash is at:

   0x0000000000d421e8 <+216>:	movzwl 0x4(%r14),%eax

The above move is probably the read of Symbol::_length in the following call stack:

Symbol::length
Symbol::utf8_length
Symbol::equals
SymbolTableLookup::equals
ConcurrentHashTable<SymbolTableConfig, mtSymbol>::get_node
ConcurrentHashTable<SymbolTableConfig, mtSymbol>::internal_get
ConcurrentHashTable<SymbolTableConfig, mtSymbol>::get
SymbolTable::do_lookup{noformat}

which means there is a null Symbol* in the symbol table.;;;","2022-06-24 09:02;hseigel;We have not observed this error and am unable to reproduce it.;;;","2023-01-02 14:12;dnsimon;Re-opening as this continues to occur when running Native Image, albeit infrequently. I have attached a more recent hs-err log that may offer more details. In absence of a reproducer, it might help for someone to look carefully at the estimated call stack in my above comment and try reason about how a null Symbol can be present.;;;","2023-01-03 23:26;dholmes;[~dnsimon] I don't think this is a null symbol problem, the actual crash is:

siginfo: si_signo: 11 (SIGSEGV), si_code: 128 (SI_KERNEL), si_addr: 0x0000000000000000

which suggests the problem is a pointer that points outside the maximum allowable address value - ref discussion in JDK-8294003.

I wonder, based on your analysis, if we somehow have a corrupt string value and are iterating through random memory ??;;;","2023-01-09 02:03;dnsimon;I'll try some of the problematic workloads on a debug JDK 20 to see if that reveals anything.;;;","2023-01-09 13:03;iklam; It looks like the value of Node::_next (R13 in the register dump) in the very first node of a bucket in the string table is corrupted.

See https://bugs.openjdk.org/secure/attachment/97406/hs_err_pid52011.log

RAX=0x00000000075a0002 is an unknown value
RBX=0x0000000000000006 is an unknown value
R9 =0x00007fc198280620 points into unknown readable memory: 0x00007fc1a00cfb6f | 6f fb 0c a0 c1 7f 00 00 <<<< see here!!
R10=0x00007fc18e1f9f40 is pointing into the stack for thread: 0x00007fc1b00444b0
R11=0x00007fc18e1fa270 is pointing into the stack for thread: 0x00007fc1b00444b0
R12=0x00007fc238d08b7b points into unknown readable memory: 69 6e 74 65 72
R13=0x00007fc1a00cfb6f points into unknown readable memory: 00   <====== misaligned: from 0x0(R9)
R14=0x007fc1a00cfb3000 is an unknown value  <======= bad pointer
R15=0x0000000000000002 is an unknown value



@@begin_bucket

   0x0000000000d421c4 <+180>: mov %r9,%r15
   0x0000000000d421c7 <+183>: mov %r9,%r13  //   R13 is the first node in a bucket
   0x0000000000d421ca <+186>: je 0xd4225c <SymbolTable::do_lookup(char const*, int, unsigned long)+332>
   0x0000000000d421d0 <+192>: movslq %ebx,%rax
   0x0000000000d421d3 <+195>: xor %r15d,%r15d
   0x0000000000d421d6 <+198>: mov %rax,-0x38(%rbp)
   0x0000000000d421da <+202>: nopw 0x0(%rax,%rax,1)

@@check_node:

   0x0000000000d421e0 <+208>: mov 0x8(%r13),%r14   // R14 is the Symbol in this bucket.
   0x0000000000d421e4 <+212>: add $0x1,%r15

   0x0000000000d421e8 <+216>: movzwl 0x4(%r14),%eax  // EAX is Symbol::_length
   0x0000000000d421ed <+221>: cmp %eax,%ebx          // is same as expected length (in EBX)
   0x0000000000d421ef <+223>: jne 0xd42250 <SymbolTable::do_lookup(char const*, int, unsigned long)+320>
                                                     // If not go to next_node
   [.....]

   // memcmp of the string content
   0x0000000000d421fc <+236>: callq 0x2459b0 <memcmp@plt>
   0x0000000000d42201 <+241>: test %eax,%eax
   0x0000000000d42203 <+243>: jne 0xd42250 <SymbolTable::do_lookup(char const*, int, unsigned long)+320>
                                                     // memcmp fails -> go to next node
   [......]

   0x0000000000d42247 <+311>: nopw 0x0(%rax,%rax,1)

@@next_node:
   0x0000000000d42250 <+320>: mov (%r14),%eax
   0x0000000000d42253 <+323>: mov 0x0(%r13),%r13     // R13 = Node::_next
   0x0000000000d42257 <+327>: test %r13,%r13
   0x0000000000d4225a <+330>: jne 0xd421e0 <SymbolTable::do_lookup(char const*, int, unsigned long)+208>
                                                     // go to check_node again


183: R13 = R9 = 0x00007fc198280620
...
243: branch to 320
320: R13 = ((Node*)R13)->_next = *(0x00007fc198280620) = 0x00007fc1a00cfb6f <== misaligned!!!
..
339: branch to 208
208: R14 = ((Node*)R13)->_value = 0x007fc1a00cfb3000 <=== bad pointer;;;","2023-01-09 13:04;iklam;I am not sure how 0x00007fc1a00cfb6f in the above comment comes about. Since R14 looks almost like a pointer, it seems as though that someone had subtracted the Node::_next by one. Could this be the result of the atomic operation applied on  Node::_next?;;;","2023-01-23 09:17;never;I've got a setup that reproduces a failure about every hour from a release build.  I tried a fastdebug build but I think it's too slow to reproduce the problem.  fastdebug also changes the logic in small ways and performs some extra write synchronization.   The crashes are in Dictionary, StringTable and SymbolTable so it's pretty clearly a general concurrency problem in ConcurrentHashTable.  Because that's an inline template we don't really get good call stacks for the crashes.  I've modified the implementation to add some sanity checking of nodes by capturing the this in a field of Node and check it on every Node operation.  I've got a pile of hs_errs from that which show that Bucket::first commonly returns an invalid node when searching the table.  Depending on what the memory location contains we then crash is various other ways in a regular build.  These are the crashing locations from my modified build.

      2 # V  [libjvm.so+0x6e11dc]  Dictionary::add_klass(JavaThread*, Symbol*, InstanceKlass*)+0x8fc
      5 # V  [libjvm.so+0x6e13cc]  Dictionary::add_klass(JavaThread*, Symbol*, InstanceKlass*)+0xaec
      1 # V  [libjvm.so+0x6e155e]  Dictionary::add_klass(JavaThread*, Symbol*, InstanceKlass*)+0xc7e
      2 # V  [libjvm.so+0x6e1a9b]  Dictionary::find(Thread*, Symbol*, Handle)+0xfb
     14 # V  [libjvm.so+0xd819d5]  StringTable::do_lookup(unsigned short const*, int, unsigned long)+0xf5
      7 # V  [libjvm.so+0xd851df]  StringTable::grow(JavaThread*)+0x40f
     11 # V  [libjvm.so+0xe04872]  ConcurrentHashTable<SymbolTableConfig, (MEMFLAGS)11>::Node* ConcurrentHashTable<SymbolTableConfig, (MEMFLAGS)11>::get_node<SymbolTableLookup>(ConcurrentHashTable<SymbolTableConfig, (MEMFLAGS)11>::Bucket const*, SymbolTableLookup&, bool*, unsigned long*) const [clone .isra.0]+0x62
      1 # V  [libjvm.so+0xe09f80]  SymbolTable::grow(JavaThread*)+0x3f0
      1 # V  [libjvm.so+0xe0b26d]  void ConcurrentHashTable<SymbolTableConfig, (MEMFLAGS)11>::do_bulk_delete_locked_for<SymbolTableDeleteCheck, SymbolTableDoDelete>(Thread*, unsigned long, unsigned long, SymbolTableDeleteCheck&, SymbolTableDoDelete&, bool)+0x13d

The failures are while running native image to build a binary but aren't using Graal as the JIT or installing any code.  Native image walks over the class path and loads the reachable classes and methods so it's a big stress test of ConcurrentHashTable.

I've attached my current failure detection logic which is applied against a JDK build from https://github.com/graalvm/labs-openjdk-20.  Since I already have a setup to reproduce this I'm happy to make changes to try to understand the actual failure.  Any suggestions for how to track down why we're seeing bad buckets?  I'm currently trying to catch it in the debugger to examine a bad bucket in more detail.

Also, I've already tried converting all the asserts in ConcurrentHashTable to guarantees and that didn't show anything.  We still crashes without triggering any of the guarantee.  I left out the POISON_PTR changes as that's kind of a semantic change since it adds some write synchronization.;;;","2023-01-24 01:40;rehn;We have stress tests executed as the first step of testing each build:
utilities/test_concurrentHashtable.cpp

Make sure the global counter is working, which guards against ABA:
utilities/test_globalCounter.cpp

Any thread that access the cht must have a working global counter.
Meaning it must be in NonJavaThread::List or a JavaThread in ThreadsList. (crashes seem to be in Java threads)
Thus make sure ThreadsList is working, runtime/test_ThreadsListHandle.cpp.;;;","2023-01-24 11:12;never;My current thinking is that it's not a concurrency problem but a writing to freed memory problem.  I modified my guard value to be 0xf8000 so see the size of decrement is being performed and the corruption showed the value f7fff, which means that a short was being decremented.  At one point I made the guard value -1 and the problem disappeared, which makes me suspicious of Symbol::decrement_refcount which operates on a 16 bit ref count.  The refcount isn't changed when the value is 0xffff (PERM_REFCOUNT).  I've added some sanity checking to try to detect this kind of problem.

I'm also testing with dmalloc but that's not showing anything yet.;;;","2023-01-24 13:56;never;I believe the crashes I'm seeing in JDK 20 are the same as JDK-8298061.  Once I became suspicious of the order of increment/decrement in PlaceholderEntry::set_supername it was easy to find that bug. Obviously this can't be the cause of the crashes we were seeing with 17 but it might be a similar kind of bug.  The fatal errors in symbol.cpp should really be enabled in product instead of being hidden behind ifdef ASSERT.  I'm currently testing the fix against my test case and it's looking good so far.  Our next JDK 20 build will include that fix when it gets promoted.  Once I've let me test run a bit longer I'll close this issue.;;;","2023-01-24 15:14;coleenp;[~never] Thanks for doing this debugging. I'm somehow not surprised it's a Symbol refcounting bug.  JDK 17 leaked the supername Symbol so it wouldn't explain your crashes there.  There could be a different Symbol.  Do you still have reproducers for JDK 17?
Maybe the symbol refcount asserts should be guarantees.  Does your test fail if you take out the ifdef ASSERTs in Symbol::increment/decrement_refcount? That would motivate taking out the ifdefs.  If you make this into a tarball, I can have a look at that.;;;","2023-01-25 09:44;never;Once I moved the fail messages outside the ifdef block I started getting failures from the refcounting and no longer made it to the crashes in ConcurrentHashTable.  So it would have been very clear what the real problem was if they were in the product.  fastdebug could have shown this problem but I think fastdebug runs are too slow to easily catch it I think.  Once every 45 minutes with product is a pretty low reproduction rate.

We haven't been seeing the 17 crash which is why this got closed originally.  I agree that it's probably a similar bug and exposing the fail messages might catch it there, assuming it still exists.  The fails will trigger when we're exposed to accidentally freeing a Symbol while the crashes only occur if we actually do free it which I have to assume is much less frequent.  It might be worth exposing them in product in 21 to see if anything new shows up.  We're doing much less testing of 17 these days but if I have the time I'll see if a custom build that includes the fail messages will crash for 17 with any tasks that previously failed.

The test cases have been running for several hours without issue so I think this it.;;;","2023-01-25 14:53;coleenp;Sorry for the pain in debugging.  I filed an RFE JDK-8301123 to enable the symbol refcounting overflow checks in PRODUCT mode.  That was a good suggestion.;;;","2023-01-26 08:29;never;I applied the fix from the other bug and also exposed the fail messages.  It ran for much longer but I finally got a failure in the same place.

#5  0x00007f5a82cc62ab in report_fatal (error_type=error_type@entry=INTERNAL_ERROR, file=file@entry=0x7f5a836685c0 ""../../src/hotspot/share/oops/symbol.cpp"",
    line=line@entry=327, detail_fmt=detail_fmt@entry=0x7f5a8360fc72 ""refcount has gone to zero"") at ../../src/hotspot/share/utilities/debug.cpp:308
#6  0x00007f5a83477c70 in Symbol::increment_refcount (this=<optimized out>) at ../../src/hotspot/share/oops/symbol.cpp:327
#7  0x00007f5a83345fa4 in Symbol::maybe_increment_refcount (s=0x7f5a82fd2aca <jni_SetByteArrayRegion(JNIEnv*, jbyteArray, jsize, jsize, jbyte const*)+458>)
    at ../../src/hotspot/share/oops/symbol.hpp:177
#8  PlaceholderEntry::set_supername (supername=0x7f5a82fd2aca <jni_SetByteArrayRegion(JNIEnv*, jbyteArray, jsize, jsize, jbyte const*)+458>,
    this=<synthetic pointer>) at ../../src/hotspot/share/classfile/placeholders.hpp:111

Is the set_supername call being executed concurrently or is there some lock protecting the update?  If it's concurrent then this code needs to be more careful about how many reads it issues.  Or is the update assumed to be idempotent such that all writers will end up writing the same value?  In that case I think the code should perform the increment first and then the decrement.  ;;;","2023-01-26 09:58;never;I think the code should be this:

    if (supername != _supername) {
      Symbol::maybe_increment_refcount(supername);
      Symbol::maybe_decrement_refcount(_supername);
      _supername = supername;
    }

The increment should be performed before the value is published where another thread might see it and decrement it.  Or even more pedantically with a single explicit read:

  void               set_supername(Symbol* supername) {
    Symbol* old_supername = _supername;
    if (supername != old_supername) {
      Symbol::maybe_increment_refcount(supername);
      _supername = supername;
      Symbol::maybe_decrement_refcount(old_supername);
    }
  }
;;;","2023-01-26 10:59;coleenp;set_supername() is called holding the SystemDictionary_lock that protects the placeholder table but the Symbol refcounting isn't.

The supername passed in should never go to zero because the caller must have a live version of it.  Is handle_parallel_super_load in the stack of one of the other threads (or this one?)
;;;","2023-01-26 11:24;never;It was on the stack in the crashing thread.  I've modified the sources a little bit to try to keep the values which were read available in the debugger so I don't have the full stack right now.  I'm trying to catch it with better information about what the values looked like when it occurs.  It's possible the decrement to 0 problem is elsewhere but this code just happens to catch it.  If this code is operating under a lock then it seems like those updates should be fine as long.  It's possible it's the same as whatever was causing the original JDK 17 crash.  Anyway, I've only seen one instance of this crash so far.  I'll keep it running in the background and see if I can figure out what's wrong.;;;","2023-01-27 10:41;never;We think exposing the fail methods has allowed us to track down the original crash in 17 which appears to be a load standing ref count problem with parallel loading reusing the Symbol from another threads PlaceholderEntry.  I'm testing a proposed fix.;;;","2023-01-30 09:46;never;This tests ran for 2 days with the new SymbolHandle changes so I think this fix is confirmed.;;;","2023-02-09 05:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12491
Date: 2023-02-09 13:46:35 +0000;;;","2023-02-10 10:02;dukebot;Changeset: 582b9434
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-02-10 18:00:19 +0000
URL:       https://git.openjdk.org/jdk/commit/582b943439488a0f43482b67c0bc0d4975bf4023
;;;","2023-02-14 11:56;coleenp;ILW = HLM = P3;;;","2023-02-24 10:40;ccheung;JDK 20u fix request:

This fixes a JVM crash which was seen in JDK 17 and 20.
The fix is small and has a regression test.;;;","2023-03-02 09:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/11
Date: 2023-03-02 17:02:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,
"KafkaStressTest and CassandraStressTest failed with ""exit code 134""",JDK-8278964,5064987,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,dcubed,dcubed,2021-12-17 08:22,2023-06-22 04:36,2023-10-01 09:57,2021-12-17 15:03,19,,,,,,,,19,hotspot,,0,jdk17u-na,tier5,,,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

applications/kafkastress/KafkaStressTest.java

Here's a snippet from the log file:

The stress VM is running but modules are not ready yet.
Will sleep 30000 ms before next check.
The stress VM is running but modules are not ready yet.
Will sleep 30000 ms before next check.
The stress VM is running but modules are not ready yet.
Will sleep 30000 ms before next check.
The stress VM is running but modules are not ready yet.
Will sleep 30000 ms before next check.
[stress.process.err] Iteration start: ThreadDumper at Fri Dec 17 15:40:56 UTC 2021
[stress.process.err] Iteration done: ThreadDumper at Fri Dec 17 15:40:56 UTC 2021
[stress.process.err] Iteration done: Jfr at Fri Dec 17 15:40:58 UTC 2021
Got an exception, so I'll kill the stress process process
[Fri Dec 17 15:41:26 UTC 2021] Unexpected errors during GlueModule initialization: Stress process finished unexpectedly with exit code 134
java.lang.RuntimeException: Stress process finished unexpectedly with exit code 134
	at applications.kitchensink.process.glue.Main.waitUntilStressProcessReady(Main.java:422)
	at applications.kitchensink.process.glue.Main.execute(Main.java:330)
	at applications.kitchensink.process.glue.Main.main(Main.java:217)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Stress process finished unexpectedly with exit code 134
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Stress process finished unexpectedly with exit code 134
----------rerun:(36/7858)*----------

This failure mode looks very much like:

JDK-8278963 CassandraStressTest.java failed with ""exit code 134""",,,,,,,,,,JDK-8281004,,,,,,,,,,,,,,,,,,,,,,,JDK-8278963,,,JDK-8278963,JDK-8278979,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,,,,,"0|i2vg1f:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2021-12-17 08:28;dcubed;The linux-aarch64-debug had similar error msgs, but timed out instead of
exiting with ""exit code 134"":

The stress VM is running but modules are not ready yet.
Will sleep 30000 ms before next check.
The stress VM is running but modules are not ready yet.
Will sleep 30000 ms before next check.
The stress VM is running but modules are not ready yet.
Will sleep 30000 ms before next check.
The stress VM is running but modules are not ready yet.
Will sleep 30000 ms before next check.
[stress.process.err] Iteration start: ThreadDumper at Fri Dec 17 16:16:39 UTC 2021
[stress.process.err] Iteration done: ThreadDumper at Fri Dec 17 16:16:39 UTC 2021
[stress.process.err] Iteration done: Jfr at Fri Dec 17 16:16:45 UTC 2021
The stress VM is running but modules are not ready yet.
Will sleep 30000 ms before next check.
The stress VM is running but modules are not ready yet.
Will sleep 30000 ms before next check.
----------rerun:(36/7882)*----------

<snip>

result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+3-70/linux-aarch64-debug.jdk/jdk-19/fastdebug/bin/java' timed out (timeout set to 3600000ms, elapsed time including timeout handling was 3699680ms).
;;;","2021-12-18 06:27;dcubed;The fix for this bug is in jdk-19+3-80.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support for _Bool not working correctly,JDK-8278962,5064982,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-12-17 07:14,2021-12-17 14:02,2023-10-01 09:57,2021-12-17 14:02,repo-panama,,,,,,,,,tools,,0,foreign-jextract,,,,,,,,,,,,,,,,,,,The Java carrier for _Bool is computed as `byte` instead of `boolean`. This causes issue when accessing method handles/var handles and constants definitions.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vg0b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-12-17 07:23;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/panama-foreign/pull/627
Date: 2021-12-17 15:17:53 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using clang together with devkit on linux doesn't work for building,JDK-8278954,5064968,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gdub,gdub,gdub,2021-12-17 03:14,2022-01-03 14:43,2023-10-01 09:57,2021-12-17 07:38,,,,,,,,,19,infrastructure,,0,,,,,,,,,,,,,,,,,,,,"Using `--with-devkit=` to point to a typical linux devkit along with `--with-toolchain-path=` and `--with-toolchain-type=clang` to point the configure script at a clang-based toolchain results in:
```
configure:75064: checking whether the C compiler works
configure:75086: /dl/tools/clang -m64 -isysroot /dl/x86_64-linux-gnu-to-x86_64-linux-gnu/x86_64-linux-gnu/sysroot -isysroot /dl/x86_64-linux-gnu-to-x86_64-linux-gnu/x86_64-linux-gnu/sysroot -m64 -isysroot /dl/x86_64-linux-gnu-to-x86_64-linux-gnu/x86_64-linux-gnu/sysroot conftest.c  >&5
d.lld: error: cannot open crt1.o: No such file or directory
ld.lld: error: cannot open crti.o: No such file or directory
ld.lld: error: cannot open crtbegin.o: No such file or directory
ld.lld: error: unable to find library -lgcc
ld.lld: error: unable to find library -lgcc_s
ld.lld: error: unable to find library -lc
ld.lld: error: unable to find library -lgcc
ld.lld: error: unable to find library -lgcc_s
ld.lld: error: cannot open crtend.o: No such file or directory
ld.lld: error: cannot open crtn.o: No such file or directory
clang-12: error: linker command failed with exit code 1 (use -v to see invocation)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2vfx7:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-12-17 03:15;gdub;This is because clang is unable to locate the gcc installation from the devkit.
The gcc toolchain is not in the location clang expects in the sysroot (that's not how devkits are structured).
Note that it might go unnoticed on machines that have gcc installed because clang will fallback to system-gloabl locations.

We can help clang by letting it now about the gcc location in the devkit with `--gcc-toolchain=`.
However that's not enough and we then get:
```
ld.lld: error: cannot open crt1.o: No such file or directory
ld.lld: error: cannot open crti.o: No such file or directory
ld.lld: error: unable to find library -lc
ld.lld: error: cannot open crtn.o: No such file or directory
```
clang was able to locate the gcc support libraries but is not able to locate required system libraries.
That's because `-isysroot` is anyway not intended for libraries but also because `-isysroot` has no effect for clang on linux (see https://bugs.llvm.org/show_bug.cgi?id=11503).
Using `--sysroot=` in this case resolves this issue.;;;","2021-12-17 03:42;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6880
Date: 2021-12-17 11:27:43 +0000
;;;","2021-12-17 07:38;roboduke;Changeset: b17f8d5b
Author:    Gilles Duboscq <gdub@openjdk.org>
Date:      2021-12-17 15:36:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b17f8d5b6c4d4ec75bb57f1d2009e30332bdb3ce
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clarify Class.getDeclaredConstructor specification,JDK-8278953,5064967,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,prappo,prappo,2021-12-17 03:10,2022-01-03 14:45,2023-10-01 09:57,2021-12-20 16:26,19,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"     * Returns a {@code Constructor} object that reflects the specified
     * constructor of the class or interface represented by this
     * {@code Class} object...

_or interface_ does not make any sense, since an interface never has a constructor.


More broadly, the spec of `getDeclaredConstructor` (and `getConstructor`) is inadequate because it does not specify what happens if the `Class` object represents a non-class entity. It would be appropriate to clarify the `@throws` of `getDeclaredConstructor` (and `getConstructor`) as follows:

    NoSuchMethodException - if a matching method is not found***, or if this `Class` object represents an interface, a primitive type, an array class, or void`.***


Separately, the spec of `getConstructors` can be improved by wording it consistently with `getDeclaredConstructors`:

Old: ""An array of length 0 is returned if the class has no public constructors, or ***if the class is an array class, or if the class reflects a primitive type or void***.""  (The starred text is wrong because a class never reflects a primitive type or void -- doing such reflection is the job of a `Class` object, a `Field` object, a `Method` object, etc -- please search the spec of java.lang.Class for ""reflects"" and observe that this is the only place which says a class reflects anything.)

New: ""An array of length 0 is returned if the class has no public constructors, or ***if this `Class` object represents an interface, a primitive type, an array class, or void.***""",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279046,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vfwz:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-12-17 11:34;darcy;Should also review the wording of the various get[Declared]Constructor[s] methods for explicit handling of record canonical constructors, as appropriate.;;;","2021-12-20 10:51;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6897
Date: 2021-12-20 18:23:46 +0000
;;;","2021-12-20 16:26;roboduke;Changeset: 51796728
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2021-12-21 00:25:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/517967284cf607c0137e088a33ab5eb98d59542d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
containers/cgroup/PlainRead.java fails on Ubuntu 21.10,JDK-8278951,5064963,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,pchawdhary,pchawdhary,2021-12-17 00:36,2023-03-15 09:21,2023-10-01 09:57,2022-01-13 10:29,17u-cpu,18,,,,,,,19,hotspot,,0,cgroupsv2,containers,CPU22_04-critical-approved,CPU22_04-critical-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,linux-containers,sqebug,,,,,,,,"Test case: containers/cgroup/PlainRead.java
OS: Fails on Ubuntu 21.10
Regression: No, baseline testing

Exception:
java.lang.RuntimeException: '^.*CPU Shares is: *(\d+|-1|-2|Unlimited).*$' missing from stdout/stderr

        at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:340)
        at PlainRead.match(PlainRead.java:43)
        at PlainRead.isContainer(PlainRead.java:57)

JavaTest Message: Test threw exception: java.lang.RuntimeException: '^.*CPU Shares is: *(\d+|-1|-2|Unlimited).*$' missing from stdout/stderr


Reason: 
Doing a simple ./java -Xlog:os+container=trace -version gives no trace of “CPU Shares” in Ubuntu 21.10 and hence the test fails.


[0.000s][trace][os,container] OSContainer::init: Initializing Container Support
[0.000s][debug][os,container] Detected optional pids controller entry in /proc/cgroups
[0.000s][debug][os,container] Detected cgroups v2 unified hierarchy
[0.000s][trace][os,container] Path to /memory.max is /sys/fs/cgroup/user.slice/user-10770.slice/session-2189.scope/memory.max
[0.000s][trace][os,container] Raw value for memory limit is: max
[0.000s][trace][os,container] Memory Limit is: Unlimited
[0.000s][trace][os,container] Path to /cpu.max is /sys/fs/cgroup/user.slice/user-10770.slice/session-2189.scope/cpu.max
[0.000s][debug][os,container] Open of file /sys/fs/cgroup/user.slice/user-10770.slice/session-2189.scope/cpu.max failed, No such file or directory
[0.000s][trace][os,container] CPU Quota is: -2
[0.000s][trace][os,container] Path to /cpu.max is /sys/fs/cgroup/user.slice/user-10770.slice/session-2189.scope/cpu.max
[0.000s][debug][os,container] Open of file /sys/fs/cgroup/user.slice/user-10770.slice/session-2189.scope/cpu.max failed, No such file or directory
[0.000s][trace][os,container] Path to /cpu.weight is /sys/fs/cgroup/user.slice/user-10770.slice/session-2189.scope/cpu.weight
[0.000s][debug][os,container] Open of file /sys/fs/cgroup/user.slice/user-10770.slice/session-2189.scope/cpu.weight failed, No such file or directory
[0.000s][trace][os,container] OSContainer::active_processor_count: 8
[0.000s][trace][os,container] CgroupSubsystem::active_processor_count (cached): 8
[0.000s][debug][os,container] container memory limit unlimited: -1, using host value
[0.000s][debug][os,container] container memory limit unlimited: -1, using host value
[0.001s][trace][os,container] CgroupSubsystem::active_processor_count (cached): 8
[0.019s][debug][os,container] container memory limit unlimited: -1, using host value
[0.025s][trace][os,container] Path to /cpu.max is /sys/fs/cgroup/user.slice/user-10770.slice/session-2189.scope/cpu.max
[0.025s][debug][os,container] Open of file /sys/fs/cgroup/user.slice/user-10770.slice/session-2189.scope/cpu.max failed, No such file or directory
[0.025s][trace][os,container] CPU Quota is: -2
[0.025s][trace][os,container] Path to /cpu.max is /sys/fs/cgroup/user.slice/user-10770.slice/session-2189.scope/cpu.max
[0.025s][debug][os,container] Open of file /sys/fs/cgroup/user.slice/user-10770.slice/session-2189.scope/cpu.max failed, No such file or directory
[0.025s][trace][os,container] Path to /cpu.weight is /sys/fs/cgroup/user.slice/user-10770.slice/session-2189.scope/cpu.weight
[0.025s][debug][os,container] Open of file /sys/fs/cgroup/user.slice/user-10770.slice/session-2189.scope/cpu.weight failed, No such file or directory
[0.025s][trace][os,container] OSContainer::active_processor_count: 8
[0.027s][trace][os,container] Path to /memory.max is /sys/fs/cgroup/user.slice/user-10770.slice/session-2189.scope/memory.max
[0.027s][trace][os,container] Raw value for memory limit is: max
[0.027s][trace][os,container] Memory Limit is: Unlimited
[0.027s][debug][os,container] container memory limit unlimited: -1, using host value
[0.029s][debug][os,container] container memory limit unlimited: -1, using host value
java version ""18-ea"" 2022-03-22
Java(TM) SE Runtime Environment (build 18-ea+28-1975)
Java HotSpot(TM) 64-Bit Server VM (build 18-ea+28-1975, mixed mode, sharing)
[0.029s][debug][os,container] container memory limit unlimited: -1, using host value
",,,,,,,,,,JDK-8281726,JDK-8285294,JDK-8280764,JDK-8281477,JDK-8284177,JDK-8298850,JDK-8295422,,,,,,,,,,,,,,,,JDK-8304271,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i2vfw3:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-12-17 09:45;dcubed;Moved back to hotspot/runtime. Test bugs belong in
the product area and for container stuff that's hotspot/runtime.

Also, why is this bug confidential?;;;","2021-12-21 11:13;mseledtsov;ILW = MLM = P4;;;","2021-12-21 11:39;mseledtsov;Note that Ubuntu 21.10 uses cgroups v2 by default. This may be what causes this issue.;;;","2022-01-11 08:50;iklam;I can reproduce the problem on my own machine, which also is ubuntu 21.10

$ cat /etc/lsb-release 
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=21.10
DISTRIB_CODENAME=impish
DISTRIB_DESCRIPTION=""Ubuntu 21.10""
$ grep cgroup /proc/filesystems
nodev	cgroup
nodev	cgroup2
$ java -Xlog:os+container=trace -version 2>&1 egrep '(CPU.Sh)|(Detected)'
[0.000s][debug][os,container] Detected optional pids controller entry in /proc/cgroups
[0.001s][debug][os,container] Detected cgroups v2 unified hierarchy
$

================
$ cat /etc/lsb-release 
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=16.04
DISTRIB_CODENAME=xenial
DISTRIB_DESCRIPTION=""Ubuntu 16.04.6 LTS""
$ grep cgroup /proc/filesystems
nodev	cgroup
nodev	cgroup2
$ java -Xlog:os+container=trace -version 2>&1 | egrep '(CPU.Sh)|(Detected)'
[0.000s][debug][os,container] Detected optional pids controller entry in /proc/cgroups
[0.001s][debug][os,container] Detected cgroups hybrid or legacy hierarchy, using cgroups v1 controllers
[0.001s][trace][os,container] CPU Shares is: 1024
[0.025s][trace][os,container] CPU Shares is: 1024
$;;;","2022-01-11 23:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7043
Date: 2022-01-12 07:17:51 +0000;;;","2022-01-13 10:29;roboduke;Changeset: 35172cda
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-01-13 18:28:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/35172cdaf38d83cd3ed57a5436bf985dde2d802b
;;;","2022-02-11 00:56;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
Very small fix, minimal risk.
Clean backport.
SAP nightly testing passed.;;;","2022-02-11 01:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/155
Date: 2022-02-11 08:55:44 +0000;;;","2022-04-01 04:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/984
Date: 2022-04-01 10:49:49 +0000;;;","2022-04-01 05:27;jdowland;fix request [11u]

Please consider this backport to 11u as part of the cgroupv2 backport project. It's not clean but the only conflict was the copyright line. Test passes on a properly configured cgroups v2 system, and v1 systems.;;;","2022-11-04 04:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/155
Date: 2022-11-04 10:56:03 +0000;;;","2022-12-14 12:44;jdowland;Fix request (8u)

Please consider this for 8u as part of cgroups v2 support. Not clean: needed logging line changes. Thanks

(PS: I totally missed the jdk8u-ibereziuk label, apologies!);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/vectorapi/reshape/TestVectorCastAVX1.java crashes in assembler,JDK-8278948,5064959,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,qamai,qamai,qamai,2021-12-16 21:17,2022-03-08 09:44,2023-10-01 09:57,2022-01-04 15:00,17,18,19,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-19,vectorapi,,,,,,,,,,,,,,,"Casting short vector to double vector requires us to promote the input to an int vector first. In AVX1, double vectors support vector shape of 256 bit while int vectors only support vector shape of 128 bit. The current implementation mistakenly uses the vector length of the destination for intermediate promotion. As a result, casting a Short64Vector to a Double256Vector leads to unsupported vpmovsxbd ymm, xmm instruction.",,,,,,,,,,JDK-8279813,JDK-8279768,JDK-8280776,JDK-8282822,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,generic,,,,,"0|i2vfv7:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-12-17 01:38;chagedorn;ILW = Crash in assembler with vector API test, single test, disable compilation of affected method = HLM = P3;;;","2021-12-17 18:19;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/46
Date: 2021-12-18 02:15:00 +0000
;;;","2021-12-21 09:42;qamai;The crash can be observed by uncommenting line 51 in compiler/vectorapi/reshape/utils/TestCastMethods.java which tells TestCastAVX1.java to perform a cast from Short64Vector to Double256Vector. The crash happens at:

void Assembler::vpmovsxwd(XMMRegister dst, XMMRegister src, int vector_len)

due to:

assert(vector_len == AVX_128bit ? VM_Version::supports_avx() : vector_len == AVX_256bit ? VM_Version::supports_avx2() : VM_Version::supports_evex(), """");;;;","2022-01-04 15:00;roboduke;Changeset: f8f91480
Author:    Quan Anh Mai <anhmdq99@gmail.com>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2022-01-04 22:59:33 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/f8f9148016662578804479180a70e3732b08c11c
;;;","2022-01-05 17:29;roboduke;Changeset: f8f91480
Author:    Quan Anh Mai <anhmdq99@gmail.com>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2022-01-04 22:59:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f8f9148016662578804479180a70e3732b08c11c
;;;","2022-03-07 05:34;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Test has passed.;;;","2022-03-07 05:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/203
Date: 2022-03-07 13:35:24 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Win] Robot can target wrong key for punctuation and symbols,JDK-8278938,5064951,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mfox,mfox,mfox,2021-12-16 18:05,2023-04-17 17:44,2023-10-01 09:57,2023-04-11 11:51,jfx11,jfx17,,,,,,,jfx21,javafx,,0,,,,,,,,,,,,,,,,,,,,"The Windows Robot can target the wrong key when trying to generate a keyPress if the KeyCode specifies punctuation or a symbol. Internally it incorrectly uses a table which assumes a fixed relationship between the OEM keys and the characters they generate.

Your mileage my vary. On my US QWERTY keyboard a Robot will target the wrong key for back quote, back slash, and quote.

The table is also missing entries for KeyCodes that aren't present on US layouts, like KeyCode.PLUS. Any attempt to send KeyCode.PLUS with the Robot will always be a no-op even on layouts where KeyCode.PLUS is present (like German).

To reproduce:
Install a German keyboard layout
Make the German layout active
Run the included test application
Press the '+' key (on a German keyboard that is at the same location as right bracket on a US keyboard)

Result:
The test fails with this message:
* Failed: sent Plus but did not receive event

Expected:
The test should pass with the message:
Passed: sent code Plus and received it back

Alternatively run the included test app and type punctuation and symbol keys on the keyboard. Avoid dead keys as they can confuse the test.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-12-16 18:03;mfox;RobotKeySanityTest.java;https://bugs.openjdk.org/secure/attachment/97402/RobotKeySanityTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows_10,,,,,"0|i2vftf:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2021-12-23 12:55;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jfx/pull/702
Date: 2021-12-23 20:50:53 +0000
;;;","2023-04-11 11:51;dukebot;Changeset: 3d6f3288
Author:    Martin Fox <beldenfox@users.noreply.github.com>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-04-11 18:49:41 +0000
URL:       https://git.openjdk.org/jfx/commit/3d6f3288ace658900e9af11792d7dd444ad55277
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JCK test for java_awt/geom/Line2D.Float fails after 8277868,JDK-8278937,5064950,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,prr,prr,prr,2021-12-16 17:37,2022-07-26 07:59,2023-10-01 09:57,2021-12-17 07:11,19,,,,,,,,19,client-libs,,0,regression,regression_8277868,sn_108,tier3,tier5,,,,,,,,,,,,,,,"There is a JCK test which tests API on java_awt/geom/Line2D.Float
which fails after the fix for 
JDK-8277868: Use Comparable.compare() instead of surrogate code
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277868,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vft7:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-12-16 17:50;dholmes;I have to wonder whether the changes in JDK-8277868 for float/double have the exact same behaviour when it comes to +/- 0.0 and NAN ??;;;","2021-12-16 18:18;prr;The spec. for https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/geom/Line2D.html#relativeCCW(double,double,double,double,double,double)

says that a point on the line would return 0 .. and this used to be true but now isn't always true - certainly not for the following case
where one would reasonably expect that the origin of the line is on the line .. 

import java.awt.geom.Line2D;
import java.awt.geom.Line2D.Float;

public class Line2DCCW {

 public static void main(String args[]) {
   float x0 = 2.0f, y0=-3.0f, x1=-4.0f, y1=-4.0f;
   Line2D l2d = new Line2D.Float(x0, y0, x1, y1);
   System.out.println(l2d.relativeCCW(x0, y0));
 }
}

~/jdk17/Contents/Home/bin/java Line2DCCW
0

~/jdk19/build/macosx-x86_64-server-release/jdk/bin/java Line2DCCW
-1

The related part at least of this fix needs to be reverted and reconsidered but if the results can be different here it can be different for other cases too .. 
Maybe there was some ""chance"" involved that this worked out but the numbers used above aren't the only ones with which I was able to reproduce this
and
< return (ccw < 0.0) ? -1 : ((ccw > 0.0) ? 1 : 0)
> return java.lang.Double.compare(ccw, 0.0);

either is 100% compatible .. or it isn't .. 

all the uses of Double.compare() and Float.compare() in the changeset are in the desktop module.

It may be sufficient to revert these but this is a good example as to why ""change something across the entire JDK"" may not be the best thing for a single changeset.

BTW I'd like to think there's no issue with Integer.compare() !
 ;;;","2021-12-16 18:45;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6875
Date: 2021-12-17 02:40:04 +0000
;;;","2021-12-17 07:11;roboduke;Changeset: e45e0b05
Author:    Phil Race <prr@openjdk.org>
Date:      2021-12-17 15:10:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e45e0b05b9e8da8da72bf227cede319fa207a551
;;;","2021-12-17 07:20;dcubed;The fix for this bug is in jdk-19+3-75.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javac tries to compile a file twice via PackageElement.getEnclosedElements,JDK-8278930,5064942,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jjg,jjg,2021-12-16 16:35,2022-01-24 23:56,2023-10-01 09:57,2022-01-10 01:32,18,,,,,,,,18,tools,,0,,,,,,,,,,,,,,,,,,,,"I'm using the Language Model API to walk the element tree, using a mixture of system classes (i.e. in the system modules), patched with source files for public API.

javac gives a ""duplicate class"" error for a number of classes.   

Debugging the first failure, the class symbol is being completed exactly once in the JavaCompiler source completer (good), but it's still being parsed twice.

The following output shows stack traces for when the class is completed, and when the file is parsed. Note the two calls from adjacent lines in ClassFinder:

	at jdk.compiler/com.sun.tools.javac.code.ClassFinder.complete(ClassFinder.java:297)

	at jdk.compiler/com.sun.tools.javac.code.ClassFinder.complete(ClassFinder.java:298)

Here's the full output from this part of the log:
COMPLETING java.io.ExpiringCache$Entry
COMPLETING java.io.ExpiringCache
[loading /var/folders/5z/hmz538nn07v_lj4gmdn8r8sw0000gn/T/sinceChecker1808173566600546027/java.base/java/io/ExpiringCache.java]
java.lang.Exception: Stack trace
	at java.base/java.lang.Thread.dumpStack(Thread.java:1380)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.readSourceFile(JavaCompiler.java:789)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.readSourceFile(JavaCompiler.java:779)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.lambda$new$0(JavaCompiler.java:341)
	at jdk.compiler/com.sun.tools.javac.code.ClassFinder.fillIn(ClassFinder.java:372)
	at jdk.compiler/com.sun.tools.javac.code.ClassFinder.complete(ClassFinder.java:298)
	at jdk.compiler/com.sun.tools.javac.code.Symbol.complete(Symbol.java:683)
	at jdk.compiler/com.sun.tools.javac.code.Symbol$ClassSymbol.complete(Symbol.java:1411)
	at jdk.compiler/com.sun.tools.javac.code.ClassFinder.completeEnclosing(ClassFinder.java:340)
	at jdk.compiler/com.sun.tools.javac.code.ClassFinder.complete(ClassFinder.java:297)
	at jdk.compiler/com.sun.tools.javac.code.Symbol.complete(Symbol.java:683)
	at jdk.compiler/com.sun.tools.javac.code.Symbol$ClassSymbol.complete(Symbol.java:1411)
	at jdk.compiler/com.sun.tools.javac.code.Symbol.apiComplete(Symbol.java:689)
	at jdk.compiler/com.sun.tools.javac.code.Symbol$TypeSymbol.getEnclosedElements(Symbol.java:860)
	at jdk.compiler/com.sun.tools.javac.code.Symbol$TypeSymbol.getEnclosedElements(Symbol.java:798)
	at Main.checkPackage(Main.java:134)
	at Main.checkModule(Main.java:128)
	at Main.checkModules(Main.java:119)
	at Main.run(Main.java:108)
	at Main.main(Main.java:72)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:421)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
java.lang.Exception: Stack trace
	at java.base/java.lang.Thread.dumpStack(Thread.java:1380)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.parse(JavaCompiler.java:610)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.readSourceFile(JavaCompiler.java:800)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.readSourceFile(JavaCompiler.java:779)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.lambda$new$0(JavaCompiler.java:341)
	at jdk.compiler/com.sun.tools.javac.code.ClassFinder.fillIn(ClassFinder.java:372)
	at jdk.compiler/com.sun.tools.javac.code.ClassFinder.complete(ClassFinder.java:298)
	at jdk.compiler/com.sun.tools.javac.code.Symbol.complete(Symbol.java:683)
	at jdk.compiler/com.sun.tools.javac.code.Symbol$ClassSymbol.complete(Symbol.java:1411)
	at jdk.compiler/com.sun.tools.javac.code.ClassFinder.completeEnclosing(ClassFinder.java:340)
	at jdk.compiler/com.sun.tools.javac.code.ClassFinder.complete(ClassFinder.java:297)
	at jdk.compiler/com.sun.tools.javac.code.Symbol.complete(Symbol.java:683)
	at jdk.compiler/com.sun.tools.javac.code.Symbol$ClassSymbol.complete(Symbol.java:1411)
	at jdk.compiler/com.sun.tools.javac.code.Symbol.apiComplete(Symbol.java:689)
	at jdk.compiler/com.sun.tools.javac.code.Symbol$TypeSymbol.getEnclosedElements(Symbol.java:860)
	at jdk.compiler/com.sun.tools.javac.code.Symbol$TypeSymbol.getEnclosedElements(Symbol.java:798)
	at Main.checkPackage(Main.java:134)
	at Main.checkModule(Main.java:128)
	at Main.checkModules(Main.java:119)
	at Main.run(Main.java:108)
	at Main.main(Main.java:72)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:421)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
[parsing started DirectoryFileObject[/var/folders/5z/hmz538nn07v_lj4gmdn8r8sw0000gn/T/sinceChecker1808173566600546027/java.base:java/io/ExpiringCache.java]]
[parsing completed 1ms]
COMPLETING java.io.ExpiringCache
COMPLETING java.io.ExpiringCache
[loading /var/folders/5z/hmz538nn07v_lj4gmdn8r8sw0000gn/T/sinceChecker1808173566600546027/java.base/java/io/ExpiringCache.java]
java.lang.Exception: Stack trace
	at java.base/java.lang.Thread.dumpStack(Thread.java:1380)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.parse(JavaCompiler.java:610)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.readSourceFile(JavaCompiler.java:800)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.readSourceFile(JavaCompiler.java:779)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.lambda$new$0(JavaCompiler.java:341)
	at jdk.compiler/com.sun.tools.javac.code.ClassFinder.fillIn(ClassFinder.java:372)
	at jdk.compiler/com.sun.tools.javac.code.ClassFinder.complete(ClassFinder.java:298)
	at jdk.compiler/com.sun.tools.javac.code.Symbol.complete(Symbol.java:683)
	at jdk.compiler/com.sun.tools.javac.code.Symbol$ClassSymbol.complete(Symbol.java:1411)
	at jdk.compiler/com.sun.tools.javac.code.Symbol.apiComplete(Symbol.java:689)
	at jdk.compiler/com.sun.tools.javac.code.Symbol$TypeSymbol.getEnclosedElements(Symbol.java:860)
	at jdk.compiler/com.sun.tools.javac.code.Symbol$TypeSymbol.getEnclosedElements(Symbol.java:798)
	at Main.checkPackage(Main.java:134)
	at Main.checkModule(Main.java:128)
	at Main.checkModules(Main.java:119)
	at Main.run(Main.java:108)
	at Main.main(Main.java:72)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:421)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
[parsing started DirectoryFileObject[/var/folders/5z/hmz538nn07v_lj4gmdn8r8sw0000gn/T/sinceChecker1808173566600546027/java.base:java/io/ExpiringCache.java]]
[parsing completed 0ms]
/var/folders/5z/hmz538nn07v_lj4gmdn8r8sw0000gn/T/sinceChecker1808173566600546027/java.base/java/io/ExpiringCache.java:36: error: duplicate class: java.io.ExpiringCache
class ExpiringCache {
^
COMPLETING java.io.ExpiringCache$1
[loading /modules/java.base/java/io/ExpiringCache$1.class]


Bottom line: it looks like javac is having trouble reading the files in a package when that involves a source file and nested class files. it may be significant that the code first encounters a nested class file, that triggers completeEnclosingClass, and then subsequently tries to complete that enclosing class again.",,,,,,,,,,JDK-8280298,JDK-8279779,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8224922,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vfrf:",9223372036854775807,b31,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-01-06 05:53;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/85
Date: 2022-01-06 13:48:40 +0000
;;;","2022-01-10 01:32;roboduke;Changeset: 8f969a13
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-01-10 09:30:55 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/8f969a1362343df8592046a838436f41894ee471
;;;","2022-01-10 09:07;roboduke;Changeset: 8f969a13
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-01-10 09:30:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8f969a1362343df8592046a838436f41894ee471
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macOS] Unexpected text normalization on pasting from clipboard,JDK-8278908,5064915,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dbatrak,dbatrak,dbatrak,2021-12-16 07:36,2022-02-02 17:33,2023-10-01 09:57,2022-01-31 05:44,17,18,19,,,,,,19,client-libs,,0,macos,,,,,,,,,,,,,,,,,,,"When text is pasted from macOS system clipboard to a Java application, it is always converted to an NFC Unicode normalization form. This is unexpected, as it doesn't happen on pasting to native applications. To reproduce, open the attached sample.txt file in TextEdit, copy its contents to clipboard (Cmd+A, Cmd+C), then launch the following sample application:
==============
import java.awt.*;
import java.awt.datatransfer.DataFlavor;

public class ClipboardTest {
    public static void main(String[] args) throws Exception {
        String content = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
        for (int i = 0; i < content.length(); i++) {
            System.out.println(Integer.toHexString(content.charAt(i)));
        }
    }
}
==============
Expected output (decomposed form, matching sample.txt file's content):
61
308

Actual output (composed form):
e4

The issue cannot be observed when pasting from TextEdit to another native macOS application, e.g. to Xcode (the same applies to copying from Xcode to TextEdit).",macOS 12.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-12-16 07:39;dbatrak;sample.txt;https://bugs.openjdk.org/secure/attachment/97400/sample.txt",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2vflf:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-01-31 05:44;roboduke;Changeset: 091aff92
Author:    Dmitry Batrak <dbatrak@openjdk.org>
Date:      2022-01-31 13:43:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/091aff92e2213bfe0de79b3561a7613ab77e24b6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaFX: EnumConverter has a typo in the toString method,JDK-8278905,5064909,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fkirmaier,fkirmaier,fkirmaier,2021-12-16 06:27,2021-12-21 05:03,2023-10-01 09:57,2021-12-16 08:02,jfx11,jfx17,jfx18,,,,,,jfx18,javafx,,0,noreg-trivial,,,,,,,,,,,,,,,,,,,"JavaFX: EnumConverter has a typo in the toString method
(found by dirklemmermann)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vfk3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-12-16 08:02;roboduke;Changeset: 4c5bf44e
Author:    Florian Kirmaier <fkirmaier@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-12-16 16:02:14 +0000
URL:       https://git.openjdk.java.net/jfx/commit/4c5bf44e86dadf19bfd2acab65bb9caf46d3edbc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Alignment of heap segments is not enforced correctly,JDK-8278897,5064901,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-12-16 03:49,2022-01-10 17:16,2023-10-01 09:57,2022-01-05 02:48,18,,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,,,"When accessing an off-heap memory segment, we can always ensure that access conforms to some alignment constraint, as there is always some physical address value (e.g. a long) to look at.

For heap segments, no machine address exists (as heap addresses are virtualized). The implementation of the Foreign Memory Access falls back to check the _offset_ in the segment at which the access occurs - but doing so can lead to behavior that is ultimately platform-dependent: the offset of the first element in a heap segment depends on how big the header-size of an array object is. More specifically, while on 64-bit platforms, all arrays will have their first element aligned at 64-bit - the same is not true for 32-bit platforms. Because of this, copying aligned long values on a memory segment backed by a byte[] might fail depending on the platform.

For a more detailed description of this issue, please refer to:
https://mail.openjdk.java.net/pipermail/panama-dev/2021-November/015852.html",,,,,,,,,,JDK-8279815,JDK-8279770,,,,,,,,,,,,,,,,,JDK-8278898,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vfib:",9223372036854775807,b30,,,,,,,,,,,,"2022-01-05 02:48;roboduke;Changeset: 9d43d25d
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-01-05 10:47:34 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/9d43d25da8bcfff425a795dcc230914a384a5c82
;;;","2022-01-05 17:29;roboduke;Changeset: 9d43d25d
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-01-05 10:47:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9d43d25da8bcfff425a795dcc230914a384a5c82
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.naming module description is missing @uses tags to document the services that it uses,JDK-8278892,5064896,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,myano,alanb,alanb,2021-12-16 01:35,2022-01-25 00:09,2023-10-01 09:57,2022-01-18 01:05,19,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"java.naming's module-info is missing ""@uses"" for javax.naming.spi.InitialContextFactory and  javax.naming.ldap.StartTlsResponse so these service classes aren't listed in the ""Uses"" table that javadoc generates for the module.

We should also look at adding ""@provides"" for the security provider that supports the LDAP implementation of CertStore.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vfh7:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@226ed983,,,,,,,,,"2022-01-11 21:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7041
Date: 2022-01-12 05:48:26 +0000;;;","2022-01-18 01:05;roboduke;Changeset: 94522626
Author:    Masanori Yano <myano@openjdk.org>
Committer: Aleksei Efimov <aefimov@openjdk.org>
Date:      2022-01-18 09:04:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/945226265234b790b175ea312f7af1126984db68
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: [vectorapi] VectorMaskLoadStoreTest.testMaskCast() test fail,JDK-8278889,5064890,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,eliu,eliu,eliu,2021-12-15 23:00,2022-01-26 23:38,2023-10-01 09:57,2021-12-23 19:11,18,19,,,,,,,18,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-19,vectorapi,,,,,,,,,,,,,,,,"re-run test with same seed value please add ""-Djdk.test.lib.random.seed=-6639137245639943104"" to command line.
test compiler.vectorapi.VectorMaskLoadStoreTest.testMaskCast(): failure
java.lang.AssertionError: expected [15] but found [255]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:797)
at org.testng.Assert.assertEquals(Assert.java:807)
at compiler.vectorapi.VectorMaskLoadStoreTest.testShort64(VectorMaskLoadStoreTest.java:85)
at compiler.vectorapi.VectorMaskLoadStoreTest.testMaskCast(VectorMaskLoadStoreTest.java:212)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.base/java.lang.Thread.run(Thread.java:833)


MaskAllNode is missing partial version, which may result in other mask related nodes which used it performs on a wrong predicate.",,,,,,,,,,JDK-8279285,JDK-8279761,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,"0|i2vffv:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-12-16 07:11;chagedorn;ILW = Wrong result for short vector mask, low?, disable compilation of affected method = HLM = P3;;;","2021-12-20 07:39;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/49
Date: 2021-12-20 15:35:47 +0000
;;;","2021-12-23 19:11;roboduke;Changeset: 6588bedc
Author:    Eric Liu <eliu@openjdk.org>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-12-24 03:10:41 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/6588bedc19ab42cec9e5bb6f13be14fb4dc5a655
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] assert((uint)reason < 2* _trap_hist_limit) failed: oob,JDK-8278871,5064864,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dnsimon,dnsimon,dnsimon,2021-12-15 14:33,2022-02-16 06:50,2023-10-01 09:57,2021-12-17 22:49,11,17.0.2,18,19,,,,,19,hotspot,,0,hgupdate-sync,jdk11-graalvm,jdk11u-fix-request,jdk11u-fix-yes,jdk17-graalvm,jdk17u-fix-request,jdk17u-fix-yes,jdk18-fix-request,jdk18-fix-yes,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,"#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/b/b/e/main/jdk_tlda/open/src/hotspot/share/oops/methodData.hpp:1999), pid=8053, tid=8214
#  assert((uint)reason < 2* _trap_hist_limit) failed: oob
#
# JRE version: Java(TM) SE Runtime Environment GraalVM 22.1.0-dev (17.0.2+5) (fastdebug build 17.0.2+5-LTS-jvmci-22.0-b02)
# Java VM: Java HotSpot(TM) 64-Bit Server VM GraalVM 22.1.0-dev (fastdebug 17.0.2+5-LTS-jvmci-22.0-b02, mixed mode, tiered, jvmci, jvmci compiler, serial gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xad5295]  Deoptimization::query_update_method_data(MethodData*, int, Deoptimization::DeoptReason, bool, bool, Method*, unsigned int&, bool&, bool&)+0x255

The values for MethodData::_trap_hist_list and Deoptimization::Reason_LIMIT are out of sync in terms of how JVMCI uses them.",,,,,,,,,,JDK-8279599,JDK-8281668,JDK-8279506,JDK-8279963,JDK-8281063,JDK-8281997,JDK-8280294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-12-15 14:33;dnsimon;hs_err_pid8053.log;https://bugs.openjdk.org/secure/attachment/97388/hs_err_pid8053.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vfa3:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-12-15 15:25;dlong;ILW = crash with JVMCI = HMM = P2;;;","2021-12-17 22:49;roboduke;Changeset: 6f0e8da6
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2021-12-18 06:48:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6f0e8da6d3bef340299e48977d5e17d05eabe682
;;;","2022-01-11 00:55;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
Risk: a bugfix we should take.
Clean backport.
SAP nightly testing passed.;;;","2022-01-11 00:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/77
Date: 2022-01-11 08:49:50 +0000;;;","2022-01-18 23:41;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
Risk: a bugfix we should take. 
I had to resolve the change in two places.
SAP nightly testing passed.;;;","2022-01-18 23:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/776
Date: 2022-01-19 07:39:16 +0000;;;","2022-02-01 00:15;thartmann;Fix request (JDK 18):
The fix is in JDK 19 and has been backported to JDK 11u and 17u. It should be backported to JDK 18 as well, to not introduce a regression. The risk is low and the fix applies cleanly. It has been tested in the JDK 11u, 17u and 19 CI.;;;","2022-02-01 00:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/114
Date: 2022-02-01 08:20:29 +0000;;;","2022-02-01 09:07;kvn;Fix request for JDK 18 approved.;;;","2022-02-02 17:12;roboduke;Changeset: 2531c332
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-02-01 17:41:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2531c332f89c5faedf71ce1737373581c9abf905
;;;","2022-02-07 15:56;roboduke;Changeset: 2531c332
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-02-01 17:41:15 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/2531c332f89c5faedf71ce1737373581c9abf905
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Correct signer logic for jars signed with multiple digest algorithms,JDK-8278851,5064835,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,mullan,coffeys,coffeys,2021-12-15 04:51,2023-04-07 11:14,2023-10-01 09:57,2022-01-14 07:23,11.0.11,18,7u301,8u291,,,,,19,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,regression,,,,,,If a jar file is signed with multiple digest algorithms and one of the digest algorithms is treated as restricted ManifestEntryVerifier.verify(.) may incorrectly return null indicating that the jar entry has no signers.,,,,,,,,,,JDK-8281617,JDK-8281995,JDK-8282760,JDK-8283506,JDK-8283043,JDK-8281616,JDK-8283369,JDK-8281211,JDK-8285719,JDK-8285789,JDK-8305759,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273826,JDK-8249906,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vf3n:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2022-01-12 14:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7056
Date: 2022-01-12 21:57:22 +0000;;;","2022-01-14 07:23;roboduke;Changeset: 61b89443
Author:    Sean Mullan <mullan@openjdk.org>
Date:      2022-01-14 15:22:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/61b8944327e3d12cf58dc3f6bc45ecbeba4ef611
;;;","2022-02-03 03:04;coffeys;JDK 18u Fix Request:
Correct a corner case where multiple digests may be used to sign a jar file and where one or more of the digest algorithms are disabled. 
;;;","2022-02-03 06:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/19
Date: 2022-02-03 14:40:26 +0000;;;","2022-03-17 10:27;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
I had to adapt the change to work with 17.
Test passes.  SAP nightly testing passed.;;;","2022-03-17 10:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/262
Date: 2022-03-17 17:23:34 +0000;;;","2022-03-21 06:46;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
I backported the jdk17u-dev version and had to do a trivial resolve.
Test passes and fails without the change.
SAP nightly testing passed.;;;","2022-03-21 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/928
Date: 2022-03-21 13:42:18 +0000;;;","2022-04-27 03:33;yan;Fix request (15u):

I'd like to backport it for parity with major releases. 
Some context changes were necessary in source part; private toHex function was used instead of HexFormat; and I borrowed test/lib/jdk/test/lib/security/SecurityUtils.java from JDK 11.
All JDK security tests run OK.;;;","2022-04-27 03:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/202
Date: 2022-04-27 10:28:53 +0000;;;","2022-04-28 00:53;yan;Fix request (13u):

I'd like to backport it for parity with major releases.
Version from 15u (see above) applied with only old copyright change in one file. All security tests run OK.;;;","2022-04-28 01:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/345
Date: 2022-04-28 07:54:29 +0000;;;","2023-03-10 09:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/282
Date: 2023-03-10 17:35:19 +0000;;;","2023-03-15 12:50;sgehwolf;Fix Request (OpenJDK 8u):

Please approve backporting this fix to 8u. This patch fixes an issue where jars which are double-signed while one of the signatories using a deprecated digest algorithm for the entire jar to be treated as unsigned, even though a valid signature with a non-deprecated digest algorithm exists on the jar. It fixes a regression newly introduced in 8u362. The patch was not clean, but the changes were only in test code (different test infra). The patch got reviewed by Martin Balao. Risk should be moderate. jarsigner and new regression tests pass.;;;","2023-03-17 08:27;sgehwolf;A workaround is to override java.security's jdk.jar.disabledAlgorithms property to allow SHA1 signed jars.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Error ""Cannot read field ""sym"" because ""this.lvar[od]"" is null"" when compiling",JDK-8278834,5064548,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,webbuggrp,webbuggrp,2021-12-12 19:27,2023-04-02 17:06,2023-10-01 09:57,2022-01-19 17:26,17,,,,,,,,19,tools,,0,additional-information-received,dcsad,hgupdate-sync,jdk17u-fix-request,jdk17u-fix-yes,regression,reproducer-yes,webbug,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS: Ubuntu 20.04 Desktop, Manjaro 20.2 Desktop
JDK: OpenJDK, Tumurin, Corretto


A DESCRIPTION OF THE PROBLEM :
Upgrading my project to java 17. Receiving an error message when compiling. Reverting to java 16 fixes it.

REGRESSION : Last worked in version 16.0.2

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile https://github.com/ProjectEdenGG/Nexus branch ""feature/java-17"" 

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Program compiles
ACTUAL -
[ERROR] java.lang.NullPointerException: Cannot read field ""sym"" because ""this.lvar[od]"" is null
[ERROR]         at jdk.compiler/com.sun.tools.javac.jvm.Code.emitop1w(Code.java:956)
[ERROR]         at jdk.compiler/com.sun.tools.javac.jvm.Items$LocalItem.load(Items.java:401)
[ERROR]         at jdk.compiler/com.sun.tools.javac.jvm.Gen.genArgs(Gen.java:902)
[ERROR]         at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitNewClass(Gen.java:1961)
[ERROR]         at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCNewClass.accept(JCTree.java:1852)
[ERROR]         at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:877)
[ERROR]         at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitReturn(Gen.java:1837)
[ERROR]         at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCReturn.accept(JCTree.java:1709)
[ERROR]         at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
[ERROR]         at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
[ERROR]         at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:631)
[ERROR]         at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:682)
[ERROR]         at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitBlock(Gen.java:1097)
[ERROR]         at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1091)
[ERROR]         at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
[ERROR]         at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
[ERROR]         at jdk.compiler/com.sun.tools.javac.jvm.Gen.genMethod(Gen.java:967)
[ERROR]         at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitMethodDef(Gen.java:930)
[ERROR]         at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:921)
[ERROR]         at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
[ERROR]         at jdk.compiler/com.sun.tools.javac.jvm.Gen.genClass(Gen.java:2414)
[ERROR]         at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:737)
[ERROR]         at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1617)
[ERROR]         at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1585)
[ERROR]         at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
[ERROR]         at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
[ERROR]         at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
[ERROR]         at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
[ERROR]         at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)


---------- BEGIN SOURCE ----------
https://github.com/ProjectEdenGG/Nexus

The code base is so massive (130,000+ source lines), I wasnt able to pinpoint exactly what is causing the issue. 
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8280670,JDK-8280284,JDK-8301910,JDK-8301602,JDK-8305422,,,,,,,,,,,,,,,,,,,JDK-8283312,,,,,,,,,,,,,,,JDK-8269354,,,,,,"2022-01-18 21:28;adev;Test.java;https://bugs.openjdk.org/secure/attachment/97661/Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vdbv:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-12-12 21:11;adev;The codebase provided is too long. I am not able to find out the exact code that is causing the issue. 
Requested the submitter to send a simple reproducer that actually causes the issue. 

;;;","2021-12-13 21:15;adev;Also, using mvn clean compile throws following error:

[ERROR] Failed to execute goal on project Nexus: Could not resolve dependencies for project gg.projecteden:Nexus:jar:2.0: Failed to collect dependencies at me.arcaniax:HeadDatabase-API:jar:1.1.0: Failed to read artifact descriptor for me.arcaniax:HeadDatabase-API:jar:1.1.0: Could not transfer artifact me.arcaniax:HeadDatabase-API:pom:1.1.0 from/to inventive-repo (https://repo.inventivetalent.org/content/groups/public/): transfer failed for https://repo.inventivetalent.org/content/groups/public/me/arcaniax/HeadDatabase-API/1.1.0/HeadDatabase-API-1.1.0.pom, status: 502 Bad Gateway -> [Help 1]
;;;","2022-01-17 22:04;pnarayanaswa;Additional Information from submitter:
===========================
I was able to create a simple project that reproduces the error. Hopefully this helps. 

https://github.com/GriffinCodes/Java17ICE
;;;","2022-01-18 21:32;adev;The issue is reproducible. The error is similar to JDK-8269354.
Following are my observations:
======================
JDK 16 : pass
JDK 17: fails with NPE - java.lang.NullPointerException: Cannot read field ""sym"" because ""this.lvar[3]"" is null
JDK 18: fails with NPE - java.lang.NullPointerException: Cannot read field ""sym"" because ""this.lvar[3]"" is null
JDK 19: fails with NPE - java.lang.NullPointerException: Cannot read field ""sym"" because ""this.lvar[3]"" is null;;;","2022-01-19 05:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/110
Date: 2022-01-19 13:29:44 +0000;;;","2022-01-19 17:26;roboduke;Changeset: be0538d7
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-01-19 19:03:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/be0538d7c8e2cbfa599dbcb4c5c69533678a8421
;;;","2022-01-25 04:31;roboduke;Changeset: be0538d7
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-01-19 19:03:02 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/be0538d7c8e2cbfa599dbcb4c5c69533678a8421
;;;","2023-01-31 15:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/365
Date: 2023-01-31 23:13:00 +0000;;;","2023-01-31 17:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1141
Date: 2023-02-01 01:11:30 +0000;;;","2023-02-01 09:30;phh;Fix request (17u).

On behalf of @Glavo.

Oracle parity backport that fixes a javac crash. Passes included test. Point fix, low risk.
;;;","2023-02-16 02:00;goetz;[17u]
Oracle pushed this to 17.0.8. Please hold this back until we start 17.0.8 in jdk17u-dev, or give a 
detailed reason why this is needed in 17.0.7.;;;","2023-03-20 15:13;phh;17.0.8 is open in jdk17u-dev, so re-requesting backport approval.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: Inconsistency of Java frame offset definition in jdk.hotspot.agent,JDK-8278832,5064815,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fjiang,fjiang,fjiang,2021-12-14 18:14,2021-12-15 01:36,2023-10-01 09:57,2021-12-15 01:36,repo-riscv-port,,,,,,,,repo-riscv-port,hotspot,,0,debug,,,,,,,,,,,,,,,,,,,"The Java frame definition was refactored in https://github.com/openjdk/jdk-sandbox/commit/db2415748747a0912749bb8fc160a8948021a924 to made Java frame offset same as C frame. In jdk.hotspot.agent, there is another Java frame definition based on the old Java frame offset, which causes jstack stack walking error. These definitions should also be updated.

Two tests passed after this fixing:
- test/hotspot/jtreg/serviceability/sa/ClhsdbCDSCore.java
- test/hotspot/jtreg/serviceability/sa/ClhsdbFindPC.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,repo-riscv-port,,linux,,,,,"0|i2vez7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/swing/JTabbedPane/6355537/bug6355537.java testcase failed on macos 11 aarch64 for MotifLookAndFeel,JDK-8278827,5064807,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,landrews,landrews,2021-12-14 15:01,2022-10-02 23:24,2023-10-01 09:57,2022-05-30 23:49,17,18,19,,,,,,19,client-libs,,0,aarch64,macos,macos11,sn_117,sn_118,sn_119,tier5,,,,,,,,,,,,,"test/jdk/javax/swing/JTabbedPane/6355537/bug6355537.java failed on Mac OS X 11.5.2 (aarch64). The same test case passed on Mac OS Big Sure 11.6.1 X86  

----------System.out:(5/360)----------
invoking: test
Test for LookAndFeel javax.swing.plaf.metal.MetalLookAndFeel
origin java.awt.Point[x=2,y=55] bounds java.awt.Rectangle[x=2,y=2,width=21,height=18] tabCenter java.awt.Point[x=12,y=64]
normalColor java.awt.Color[r=200,g=221,b=243] prelightColor java.awt.Color[r=200,g=221,b=242]
Test for LookAndFeel com.sun.java.swing.plaf.motif.MotifLookAndFeel
----------System.err:(14/794)----------
java.lang.RuntimeException: Disabled tabs should not have prelight
	at SwingTestHelper.fail(SwingTestHelper.java:687)
	at bug6355537.test(bug6355537.java:129)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at SwingTestHelper.invoke(SwingTestHelper.java:621)
	at SwingTestHelper.controlLoop(SwingTestHelper.java:571)
	at SwingTestHelper$4.run(SwingTestHelper.java:497)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Disabled tabs should not have prelight
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Disabled tabs should not have prelight",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294701,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i2vexf:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-12-14 15:17;vdyakov;[~landrews] does it fail on JDK 17? Is it a regression introduced in 18? in which promotion build?;;;","2021-12-14 15:33;landrews;[~vdyakov], the test case fails on JDK 17 b35 too.;;;","2021-12-14 16:17;vdyakov;[~landrews]then please add it as Affects Versions to avoid an assumption that is introduced in 18;;;","2022-04-25 12:46;dcubed;Here's a log file snippet for the jdk-19+20-1335-tier5 sighting: 

javax/swing/JTabbedPane/6355537/bug6355537.java

#section:main
----------messages:(5/181)----------
command: main bug6355537
reason: User specified action: run main bug6355537 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 5.19
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(5/360)----------
invoking: test
Test for LookAndFeel javax.swing.plaf.metal.MetalLookAndFeel
origin java.awt.Point[x=2,y=47] bounds java.awt.Rectangle[x=2,y=2,width=21,height=18] tabCenter java.awt.Point[x=12,y=56]
normalColor java.awt.Color[r=200,g=221,b=242] prelightColor java.awt.Color[r=191,g=211,b=232]
Test for LookAndFeel com.sun.java.swing.plaf.motif.MotifLookAndFeel
----------System.err:(14/794)----------
java.lang.RuntimeException: Disabled tabs should not have prelight
	at SwingTestHelper.fail(SwingTestHelper.java:704)
	at bug6355537.test(bug6355537.java:129)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at SwingTestHelper.invoke(SwingTestHelper.java:638)
	at SwingTestHelper.controlLoop(SwingTestHelper.java:588)
	at SwingTestHelper$4.run(SwingTestHelper.java:514)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Disabled tabs should not have prelight
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Disabled tabs should not have prelight
----------rerun:(42/6602)*----------;;;","2022-06-01 21:06;psadhukhan;Test fails intermittently citing failure due to minor color difference
normalColor java.awt.Color[r=200,g=221,b=243] prelightColor java.awt.Color[r=200,g=221,b=242] 
with color difference of 1

A minor color tolerance check to the pixel check can be added to address this test issue.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Print error if Shenandoah flags are empty (instead of crashing),JDK-8278826,5064806,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dchuyko,dchuyko,dchuyko,2021-12-14 14:44,2022-11-20 23:57,2023-10-01 09:57,2021-12-17 01:19,11.0.9,17,18,19,8-shenandoah,,,,19,hotspot,,0,gc-shenandoah,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,,,,"Providing '-XX:ShenandoahGCMode=' or '-XX:ShenandoahGCHeuristics=' (when parsed) causes a crash without meaningful info. E.g.:

java -XX:+UseShenandoahGC -XX:ShenandoahGCMode= -version
java -XX:+UseShenandoahGC -XX:ShenandoahGCMode=satb -XX:ShenandoahGCHeuristics= -version
java -XX:+UseShenandoahGC -XX:+UnlockExperimentalVMOptions -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics= -version
java -XX:+UseShenandoahGC -XX:+UnlockDiagnosticVMOptions -XX:ShenandoahGCMode=passive -XX:ShenandoahGCHeuristics= -version

Instead it can be reported similar to '=wrong', e.g:

Error occurred during initialization of VM
Unknown -XX:ShenandoahGCMode option (null)",,,,,,,,,,JDK-8297322,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2vex7:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-12-17 01:19;roboduke;Changeset: 247ea71d
Author:    Dmitry Chuyko <dchuyko@openjdk.org>
Date:      2021-12-17 09:19:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/247ea71d24a251d29d9a5179e5b773df850e7261
;;;","2022-11-17 06:48;shade;Fix Request (17u)

Fixes a Shenandoah UX problem, applies cleanly, tests pass.;;;","2022-11-17 06:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/893
Date: 2022-11-17 14:45:23 +0000;;;","2022-11-17 10:00;goetz;Shouldn't this rather be a Bug and not an Enhancement?;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unused variable for diagnostic in Resolve,JDK-8278825,5064805,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cushon,cushon,cushon,2021-12-14 14:36,2022-01-03 14:33,2023-10-01 09:57,2021-12-14 16:27,,,,,,,,,19,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,"The fix for JDK-8067883 remove the last use of a variable holding a diagnostic, the variable can now be removed:

https://github.com/openjdk/jdk/commit/75b2a03bf9e4e83fde574f2181cd08a2cd6eaffe#diff-c7b5b2fe0339273ba04db73761f98884a30541ca66ac0af775b10f7a37223be0R2546-R2548",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vewz:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-12-14 16:27;roboduke;Changeset: 068a4509
Author:    Liam Miller-Cushon <cushon@openjdk.org>
Date:      2021-12-15 00:26:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/068a450954530d9a469db05d7cf2e7dcf1eddc8a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Uneven work distribution when scanning heap roots in G1,JDK-8278824,5064804,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,wkemper,wkemper,wkemper,2021-12-14 14:07,2022-01-11 08:05,2023-10-01 09:57,2021-12-28 09:33,15,16,17,18,19,,,,18,hotspot,,0,gc-g1,gc-g1-remset,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"During an upgrade from JDK11 to JDK15 (and JDK17) we experience an increase in garbage collection latency from approximately 10-15ms at p99.9 to approximately 45-50ms. Logs showed the object copy phase consuming most of that time.

Enabling task queue stats on the build and increasing the log level showed that one evacuation thread is doing far more work than the other threads.

For example, in this cycle we see one thread spend 67.2ms on Object Copy, while the others spend far less time:

{code}
148905 [2021-12-06T22:12:38.338+0000][debug][gc,phases        ] GC(581)     Object Copy (ms):              Min: 13.3, Avg: 16.6, Max: 67.2, Diff: 53.8, Sum: 546.7, Workers: 33
148906 [2021-12-06T22:12:38.338+0000][trace][gc,phases,task   ] GC(581)                                    14.8 15.4 15.3 16.0 14.7 14.6 16.6 15.3 16.3 15.2 67.2 13.8 14.1 16.5 14.5 14.3 14.1 14.9 15.3 15.8 13.3 15.6 15.0 15.6 14.7 15.6 14.6 14.3 15.1 15.2 14.4 13.5 14.9
{/code}

Looking back, we see a pattern in these cycles where the thread doing most of the work scans only a 2 or 3 ""blocks"" (here, just 2):
{code}
148899 [2021-12-06T22:12:38.338+0000][debug][gc,phases        ] GC(581)       Scanned Blocks:                Min: 2, Avg: 1203.9, Max: 1875, Diff: 1873, Sum: 39730, Workers: 33
148900 [2021-12-06T22:12:38.338+0000][trace][gc,phases,task   ] GC(581)                                       949  1838  1397  1548  1450  1875  821  1067  1312  1463  2  1282  1319  38  1177  1199  819  1170  897  1343  1860  1070  1059  1552  1217  1296  1068  1092  1645  1166  1002  1140  1597
{/code}

And in the task queue stats this thread performs an order of magnitude more operations on the task queue:
{code}
149005 [2021-12-06T22:12:38.339+0000][trace][gc,task,stats    ] GC(581)   8      51757      51143       9173     121241       9379          0          0
149006 [2021-12-06T22:12:38.339+0000][trace][gc,task,stats    ] GC(581)   9      37328      36045       6291     113112       8332          0          0
149007 [2021-12-06T22:12:38.339+0000][trace][gc,task,stats    ] GC(581)  10     350079      77644          0        132          0     267666     226166
149008 [2021-12-06T22:12:38.339+0000][trace][gc,task,stats    ] GC(581)  11      38889      37932       7100     110650       7940          0          0
149009 [2021-12-06T22:12:38.339+0000][trace][gc,task,stats    ] GC(581)  12      53762      53174       9375     110255       8637          0          0
{/code}

We traced the origin of this behavior to: https://bugs.openjdk.java.net/browse/JDK-8213108

We tried changing `ParGCArrayScanChunk`, but to no avail. Introducing a flag to override the ergonomics that select chunks per region was effective.",,,,,,,,,,JDK-8279577,JDK-8279808,JDK-8279763,JDK-8279867,,,,,,,,,,,,,,,,,,,,,,,JDK-8213108,,,,,,,,,,,,JDK-8224759,JDK-8278901,,,,,"2021-12-15 08:01;tschatzl;20211215-repo-task-queue-pause-times-with-fix2.png;https://bugs.openjdk.org/secure/attachment/97385/20211215-repo-task-queue-pause-times-with-fix2.png","2021-12-14 15:06;wkemper;Repro.java;https://bugs.openjdk.org/secure/attachment/97377/Repro.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,14,,,,,,,"0|i2vewr:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-12-14 15:31;wkemper;If you let the repro run for 5 minutes or so, you will begin to see the difference in pause times between JDK11 and JDK15+:

JDK17 Max Object Copy Times (ms, sorted):
 35.6
 35.2
 34.6
 34.2
 33.7
 33.3
 31.2
 26.2
 26.1
 24.1
 22.4
 22.0
 21.6
 21.2
 20.6
 19.6
 19.5
 18.7
 18.0
 17.7
 17.6
 17.1
 16.7
 15.9
 15.7
 15.7
 15.6
 15.3
 14.8
 14.5
 14.2
 14.2
 14.1
 12.0
 10.6

JDK11
 32.4
 32.3
 29.5
 28.7
 28.4
 27.7
 27.7
 27.5
 26.1
 22.3
 21.9
 21.6
 20.5
 20.5
 20.1
 19.8
 19.5
 17.3
 17.0
 16.2
 15.7
 15.2
 15.0
 14.5
 14.4
 14.3
 14.3
 13.5
 13.3
 13.1
 13.1
 12.9
 11.9
 11.8
 11.7
 11.2
 11.1

JDK17 w/ -XX:G1RemSetScanChunksPerRegion=256
 29.2
 21.6
 20.7
 20.2
 19.4
 19.4
 19.3
 19.1
 18.8
 18.7
 17.5
 17.3
 17.0
 16.1
 15.6
 15.5
 14.6
 14.5
 14.3
 14.1
 13.9
 13.6
 13.5
 12.3
 12.1
 11.1
 10.9
 10.6
 10.1
 10.1
 10.1;;;","2021-12-15 08:35;tschatzl;Thanks for reporting this issue - nice find!

This is as you correctly noted an issue with work distribution during the Object Copy phase. There are known issues with work stealing that we've been working on specifically in the last few weeks; the graph mentioned below shows the current results (fwiw, it also gives good results without this change).

So this change improves upon by making the initial distribution of work better, which so far seems a good solution for this particular case.

After reproducing this particular issue and internal discussion we think that adding a new flag is something to avoid at all here. The main reason is that improving the defaults for the number of scan chunks seems side-effect free so far - tests so far do not show a regression either, and the additional memory usage (and the effort to manage this scan chunk table memory) seems negligible.

The graph attached to the CR shows pause times for your reproducer on jdk11, jdk17, and jdk17 with values of G1RemSetScanChunksPerRegion from 64 to 1024; the selected 256 seems to work very well for this case :) and that improved-steal-multi that shows a recent prototype for the mentioned task queue changes (which covers more cases than this one).

So our suggestion is to, for the 16m regions, set the default number of chunks per region to 128 or 256, depending on further testing results, for JDK 18 (and then use this to backport to 17). When we are ready to post the task queue changes (probably JDK19), we might want to reconsider these defaults again.;;;","2021-12-22 11:52;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/66
Date: 2021-12-22 19:48:10 +0000
;;;","2021-12-28 09:33;roboduke;Changeset: b4b0328d
Author:    William Kemper <wkemper@openjdk.org>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2021-12-28 17:32:00 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/b4b0328d62d9a9646f2822c361e41001bf0d4aa0
;;;","2021-12-28 11:37;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/39
Date: 2021-12-28 19:30:51 +0000
;;;","2021-12-30 14:25;wkemper;Fix request for JDK17u.

The backport had a conflict in a comment line, but the actual code change was a clean and simple merge. This change addresses a performance regression introduced in JDK14 caused by an uneven distribution of root scanning work. This change increases the number of chunks per region, allowing a more fine grained distribution of work across the scanning threads.;;;","2022-01-04 11:35;roboduke;Changeset: b4b0328d
Author:    William Kemper <wkemper@openjdk.org>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2021-12-28 17:32:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b4b0328d62d9a9646f2822c361e41001bf0d4aa0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect behavior of FloatVector.withLane on x86,JDK-8278796,5064770,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbhateja,jbhateja,jbhateja,2021-12-14 08:46,2022-07-11 12:53,2023-10-01 09:57,2021-12-16 19:07,17,18,19,,,,,,18,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-19,,,,,,,,,,,,,,,"- Current index operand encoding passed to insertps instruction results into incorrect functionality of FloatVector.withLane operation.
- Modify existing withLane jtreg test to pass a non-zero insertion index.",,,,,,,,,,JDK-8279096,JDK-8279730,JDK-8280693,JDK-8282736,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,,,,,"0|i2vep7:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-12-14 08:57;chagedorn;Hi [~jbhateja], can you add some more details about how this is triggered and how the wrong behavior manifests?;;;","2021-12-15 07:03;chagedorn;ILW = Incorrect result with FloatVector.withLane?, low?, disable compilation of affected method = HLM = P3;;;","2021-12-16 19:07;roboduke;Changeset: 8494fec6
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2021-12-17 03:07:08 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/8494fec665bfa51d1702827bd0aa4f4547e67729
;;;","2022-03-04 03:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/196
Date: 2022-03-04 11:31:43 +0000;;;","2022-03-05 01:50;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. No new test failures observed (our nightly tests).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Infinite loop in DeflaterOutputStream.finish(),JDK-8278794,5064766,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rreddy,rreddy,rreddy,2021-12-14 07:09,2022-08-09 09:01,2023-10-01 09:57,2022-03-18 08:33,10,11,17,18,7,8,9,,19,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,redhat-interest,,,,,,,,"Fix for https://bugs.openjdk.java.net/browse/JDK-8193682 has not handled infinite loop issue in DeflaterOutputStream.finish().

Test case :

import java.io.IOException;
import java.io.OutputStream;
import java.util.Random;
import java.util.zip.ZipEntry;
import java.util.zip.DeflaterOutputStream;

public class GZipLoopTest {
private static final int FINISH_NUM = 512;

public static void main(String[] args) {
test();
}

private static void test() {

byte[] b = new byte[FINISH_NUM];
Random rand = new Random();
rand.nextBytes(b);
DeflaterOutputStream zip = new DeflaterOutputStream(new OutputStream() {
@Override
public void write(byte[] b, int off, int len) throws IOException{
throw new IOException();
}
@Override
public void write(byte b[]) throws IOException {}
@Override
public void write(int b) throws IOException {}
});
try {
zip.write(b , 0, 512);
} catch (IOException ex) {
ex.printStackTrace();
}
try {
zip.finish();
} catch (IOException ex) {
ex.printStackTrace();
}

for(int i=0;i<3;i++) {
try {
zip.write(b , 0, 512);
} catch (IOException ex) {
ex.printStackTrace();
}
}

}

}




",,,,,,,,,,JDK-8283742,JDK-8283743,JDK-8283848,JDK-8283980,JDK-8283741,JDK-8283867,JDK-8284904,JDK-8284905,JDK-8284351,,,,,,,,,,,,,,,,,,JDK-8193682,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2veob:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,Verified,,"2022-03-13 07:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7804
Date: 2022-03-13 14:08:57 +0000;;;","2022-03-18 08:33;dukebot;Changeset: ff0b0927
Author:    Ravi Reddy <rreddy@openjdk.org>
Committer: Lance Andersen <lancea@openjdk.org>
Date:      2022-03-18 15:31:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ff0b0927a2df8b36f8fd6ed41bd4e20e71a5b653
;;;","2022-03-22 00:29;rreddy;Fix request [18u]

I'd like to backport it to JDK18u to fix the infinite loop issue with DeflaterOutputStream.finish().
Backport is clean.;;;","2022-03-25 03:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/53
Date: 2022-03-25 10:18:46 +0000;;;","2022-03-28 02:24;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly except Copyright year update. Test has passed.;;;","2022-03-28 02:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/287
Date: 2022-03-28 09:30:04 +0000;;;","2022-03-31 23:04;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
Clean backport.
A small change to important code. Benefit of fix bigger than risk.
Test passes.
SAP nighlty testing passed.;;;","2022-03-31 23:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/975
Date: 2022-04-01 06:01:45 +0000;;;","2022-04-14 06:22;yan;Fix request [15u, 13u]

This is a necessary continuation to already backported JDK-8193682. Applies with only copyright differences. All relevant tests on major platforms do pass.;;;","2022-04-14 06:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/196
Date: 2022-04-14 13:18:53 +0000;;;","2022-04-14 07:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/341
Date: 2022-04-14 13:41:15 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inner loop of long loop nest runs for too few iterations,JDK-8278790,5064761,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,roland,roland,2021-12-14 06:36,2022-01-27 00:02,2023-10-01 09:57,2021-12-16 23:46,18,,,,,,,,18,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-18,performance,,,,,,,,,,,,,,,This came up with a panama micro-benchmark in which a loop has 256 iterations and a long range check with a small scale factor. A loop nest is created to transform the long range checks. The inner loop should still run for ~256 iterations but instead it only executes 256/scale iterations which has a performance impact.,,,,,,,,,,JDK-8279097,JDK-8279731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256655,JDK-8259609,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ven7:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-12-14 08:52;chagedorn;Hi Roland, do we also observe a wrong execution or is it just a performance issue?;;;","2021-12-14 08:53;roland;It's a performance issue, a fairly bad one in my opinion.;;;","2021-12-14 17:58;dlong;ILW = performance problem = MMH = P3;;;","2021-12-16 23:46;roboduke;Changeset: bb7efb35
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-12-17 07:45:44 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/bb7efb3517b0ac66a55607c14aae3aef1f11c892
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8267246 causes regression if LANG set to ru_RU,JDK-8278762,5064733,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,,vkempik,vkempik,2021-12-14 05:18,2021-12-29 02:56,2023-10-01 09:57,2021-12-29 02:56,11.0.14,,,,,,,,,infrastructure,,0,,,,,,,,,,,,,,,,,,,,"I have found JDK-8267246 to cause jtreg failure due to type of floating point in different locales, when locale is en, you have 6.25, when locate is ru_RU it's 6,25 

So it results in this error:

Running test 'jtreg:test/hotspot/jtreg:tier1'
Improperly specified VM option 'MaxRAMPercentage=6,25'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.

workaround is unset LANG before the run",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267246,JDK-8065704,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vegz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-12-14 06:55;vkempik;This can be fixed by backporting JDK-8065704 to jdk11u-dev;;;","2021-12-29 02:56;vkempik;Fixed by backporting JDK-8065704 tojdk11u-dev;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/BootstrapMethod/BSMCalledTwice.java fails with release VMs after JDK-8262134,JDK-8278758,5064731,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2021-12-14 03:05,2022-07-18 05:05,2023-10-01 09:57,2021-12-14 14:51,18,,,,,,,,18,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,noreg-self,oracle-triage-19,tencent-interest,testbug,tier6,tier8,,,,,,,,"```
STDERR:
Error: VM option 'DeoptimizeALot' is develop and is available only in debug version of VM.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
```",,,,,,,,,,JDK-8279449,JDK-8279558,JDK-8280716,JDK-8279852,JDK-8278878,JDK-8279719,JDK-8290453,JDK-8290454,,,,,,,,,,,,,,,,,,,JDK-8262134,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vegj:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-12-14 09:07;chagedorn;ILW = Test fails with release build, always, use -XX:+IgnoreUnrecognizedVMOptions = MHM = P3;;;","2021-12-14 14:51;roboduke;Changeset: f48a3e86
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-12-14 22:50:21 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/f48a3e86d0274912160f3c415f92741eefa1cb1d
;;;","2021-12-15 08:12;dcubed;This fix should be in jdk-18+28-1973.;;;","2022-01-10 06:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/74
Date: 2022-01-10 14:17:18 +0000;;;","2022-01-10 06:25;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
No risk, only a test change. Follow up of 8262134.
Clean backport.

The jdk17u-fix-request was handles in the related bug JDK-8262134;;;","2022-01-26 02:52;shade;Fix Request (11u)

Fixes the failing test. Applies cleanly. Test start to pass.;;;","2022-01-26 02:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/795
Date: 2022-01-26 10:52:06 +0000;;;","2022-07-18 04:36;yan;Fix request (13u, 15u)
test-only follow-up fix, clean patch, proved on the test;;;","2022-07-18 04:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/372
Date: 2022-07-18 11:35:34 +0000;;;","2022-07-18 04:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/235
Date: 2022-07-18 11:48:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Runtime crashes with access violation during JNI_CreateJavaVM call,JDK-8278753,5064508,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,,webbuggrp,webbuggrp,2021-12-10 13:33,2022-06-20 03:26,2023-10-01 09:57,2022-02-03 10:03,17,,,,,,,,19,hotspot,,0,additional-information-received,cds,dcsswa,regression,regression_8244495,reproducer-tp,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
This started to appear with Java 15.0 and is still present in Java 17.0.1. We have only tested on Windows 10 (20H2, 21H1, 21H2) but it may be present in Windows 8.1 and 11 too. It happens with the Temurin and Corretto runtimes as well as the Oracle runtime. Everything works fine on macOS using the 17.0.1 runtime.

A DESCRIPTION OF THE PROBLEM :
Finale is a C++ music notation application that uses a Java runtime for its MusicXML functionality. The JNI_CreateJavaVM call from the JNI Invocation API creating the runtime works through Java 14.0.2 on Windows. But it crashes the app with a fatal error access violation starting in Java 15.0 and continuing through 17.0.1.

REGRESSION : Last worked in version 14

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1) Build a custom Java 17 runtime

- On a Windows development machine or VM, download the 17.0.1 JDK MSI installer from https://www.oracle.com/java/technologies/downloads/#jdk17-windows
- Install the Java 17 JDK
- In the command prompt, cd to the bin folder of the JDK, typically ""C:\Program Files\Java\jdk-17.0.1\bin""
- Build a new Java 17 Windows runtime using

jlink --output jre --no-header-files --no-man-pages --strip-debug --strip-native-commands --compress=2 --add-modules java.base,java.desktop,java.prefs,java.xml

Use whatever output folder is convenient, but make sure the final folder name is jre.

- Save the jre folder away for later use if creating this on a VM.

2) Install Finale 27.1 (which includes a Java 11 runtime) on a clean Windows system.

- Go to https://www.finalemusic.com/free-trial/
- Click on Windows
- Log into your MakeMusic account, or create a free account if you do not have one
- FinaleDemoSetup.exe will download automatically
- Create a clean Windows VM using VMware Fusion 12.2 with 2 processor cores and 4GB memory running Windows 10 Pro 21H2.
- Run the FinaleDemoSetup installer with the default choices, accepting the license agreement and not displaying the readme. Restart the VM if asked.

3) Run Finale 27.1 to ensure that Java 11 is launching correctly.

- Launch Finale from the desktop. Click ""Remind Me Later"" in the Authorize Finale dialog. You will be able to reproduce this issue even after the 30-day trial expires.
- Click on Import MusicXML on the Finale launch window. This will create the Java 11 runtime using the JNI Invocation API.
- You should see a file selection dialog appear.
- Cancel out of the file selection dialog and exit Finale (File > Exit).

4) Replace the Java 11 runtime with an identically built Java 17 runtime

- In the File Explorer, go to the place where the embedded Java runtime is installed. This is typically ""C:\Program Files\MakeMusic\Finale\27\Plugin Components\Java"".
- Delete the jre folder.
- Copy the jre folder that you created with Java 17 into the Java folder. What this does is replace Finale's Java 11 runtime with an identically built Java 17 runtime.

5) Run Finale 27.1 with the Java 17 runtime.
 
- Start Finale again
- Click ""Remind Me Later"" in the Authorize Finale dialog.
- Click on Import MusicXML in the Finale launch window.


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The Finale file selection dialog should appear with the Java 17 runtime as it does with the Java 11 runtime.
ACTUAL -
Finale crashes due to a Java Runtime Environment error and an error log is produced on the desktop.

CUSTOMER SUBMITTED WORKAROUND :
Our workaround is to stay on Java 11. We have not found a workaround that works with Java 17.0.1.

FREQUENCY : always


",,,,,,,,,,JDK-8287286,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8244495,JDK-8254920,JDK-8237750,,,,"2021-12-16 22:32;pnarayanaswa;crash_log.log;https://bugs.openjdk.org/secure/attachment/97403/crash_log.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,"0|i2vd2z:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-12-14 00:02;sswsharm;additional information requested from submitter:
========================================
Could you please provide the crash logs (hs_err_pid.log) generated at the time of crash for JDK 17 ?
========================================;;;","2021-12-14 19:49;dholmes;If an application embeds a particular version of the JRE for its use then you cannot, externally, replace that JRE version and just expect it to work. The application needs to be updated to ensure it works on a later Java version and to then package that later Java version.;;;","2021-12-16 22:32;pnarayanaswa;Additional Information from submitter:
===========================
crash log<ATTACHED>;;;","2021-12-16 23:08;dholmes;The log is of little use and only shows a NULL pointer access sometime during VM initialization.

But I will say again you cannot just ""update"" an embedded JRE in this way.

I would close this as ""Not an issue"".;;;","2021-12-21 22:39;sswsharm;Additional Information received:
===================================================
Re: ""If an application embeds a particular version of the JRE for its use then you cannot, externally, replace that JRE version and just expect it to work. The application needs to be updated to ensure it works on a later Java version and to then package that later Java version.""

Of course this is exactly what we are trying to do. We packaged the Java 17 runtime in our development build which is when we found the problem on Windows. Everything works fine on Mac, both x64 and aarch64. The steps included are what lets Oracle reproduce the problem outside of our development builds - the end result is exactly the same.

To the best of my knowledge there have been no user-facing changes to Java Invocation API from Java 11 to Java 17. There have been no version updates to the Java Native Interface since Java 10. Java 11 code should work on a Java 17 runtime, including one invoked through Java invocation. This is a crashing bug in the Java runtime that has no workaround for an application developer using Java invocation.

I have isolated where this broke in Java 15 using the SapMachine archive of Java 15 nightly builds at https://github.com/SAP/SapMachine. Build 15+21 from May 2, 2020 is working correctly, but build 15+23 from May 15, 2020 no longer works. (SapMachine doesn’t have a nightly Windows build for 15+22 on May 12.)
=======================================================

;;;","2021-12-21 23:01;dholmes;Thanks for the update. It was not at all clear that it was the Finale developers who were trying this update process.

The crash happens very early in the VM initialization process. We've started loading java.lang.Object but it is not clear how much further we get after that. So the issue appears not to be related to the JNI invocation API, but something broken in the JDK initialization logic.;;;","2021-12-22 14:07;dholmes;This seems to be the exact same crash as was reported for JDK-8244495, but that was fixed in JDK 15-b23 (openJDK build number). But it could also be JDK-8254920, though that was fixed in 16 so should not be seen in 17.

The issue definitely appears to be with a failure to load zip.dll. As a workaround change the jlink command to use ""--compress=1"".;;;","2021-12-22 14:12;dholmes;I am re-assigning this to the deploy->packager component. I'm hoping the folk that fixed JDK-8254920 may understand why the same kind of problem appears to still be seen in the current case.;;;","2021-12-22 17:08;vdyakov;[~asemenyuk] please evaluate based on above input;;;","2021-12-23 14:45;asemenyuk;As far as I can tell, the app is not jpackaged, thus the issue doesn't belong to deploy component.
If the issue is with the failure to load zip.dll, then probably setting PATH env variable to bin folder of jre to be loaded with JNI_CreateJavaVM will help to resolve it. This is how JDK-8254920 was fixed. But it was applied to jpackage app launcher. If this particular app is using its own java launcher, they need a similar workaround.;;;","2021-12-23 15:13;dholmes;[~asemenyuk] So IIUC basically the changes involving zip.dll loading potentially broke every application that self-hosts the JVM (ie acts as its own launcher) and uses a compressed jimage. This will potentially impact all applications migrating from JDK 11 LTS release to JDK 17 LTS release! Have we documented this somewhere? Is setting PATH variable the only way to fix it?;;;","2021-12-23 15:27;asemenyuk;jpackage app launcher calls SetDllDirectory() to make sure zip.dll will be loaded from the jre on which JNI_CreateJavaVM will be called. It is not altering PATH env variable.
I think another trick that might work is to explicitly load zip.dll from the app launcher. This way LoadLibrary(""zip.dll"") will never be called from imageDecompressor.cpp
(https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/java.base/share/native/libjimage/imageDecompressor.cpp#L64).
I don't know about documenting this issue.;;;","2021-12-23 15:33;asemenyuk;This issue and JDK-8254920 are regressions from JDK-8244495 fix in which they added LoadLibrary(""zip.dll"") call.;;;","2021-12-23 16:03;dholmes;Okay I'm taking this back to hotspot->runtime.

Thanks [~asemenyuk] for all the analysis here.

So IIUC here's the situation:

1.  The enhancement we did under JDK-8237750 was flawed because it did not take into account the case of a compressed jimage. 

2. We then tried to fix that with JDK-8244495, which added an explicit `loadLibrary(""zip.dll"")` in the imageCompressor code, but that fix was also incomplete as it did not account for loadLibrary still not being able to locate zip.dll. 

3. So then JDK-8254920 fixed the jpackage case by using the `SetDllDirectory` API to ensure loadLibrary would look in the JRE's bin directory.

But this still means that a third-party ""launcher"" (which is just code that uses the JNI Invocation API) in conjunction with a compressed jimage (i.e the JRE was produced by jlink with `--compress=2`) will still hit the problem of being unable to load zip.dll.

So the workarounds for the application developers are:

1. Use `--compress=1` and avoid the need for zip.dll

2. Load the VM with the JRE bin directory in the path, via the PATH environment variable.

3. Modify the launcher code to also use SetDllDirectory as per:
https://github.com/openjdk/jdk/commit/952abea4

Meanwhile we will look at things from the VM side again.;;;","2021-12-23 16:44;iklam;In JDK 11, the zip library is always loaded at start-up:

void ClassLoader::initialize() {
  ...
  load_zip_library();
...
}

void ClassLoader::load_zip_library() {
  assert(ZipOpen == NULL, ""should not load zip library twice"");
  // First make sure native library is loaded
  os::native_java_library();
  // Load zip library
  char path[JVM_MAXPATHLEN];
  char ebuf[1024];
  void* handle = NULL;
  if (os::dll_locate_lib(path, sizeof(path), Arguments::get_dll_dir(), ""zip"")) {
    handle = os::dll_load(path, ebuf, sizeof ebuf);
  }
  ...

This looks very simple. I don't know why the extra call to SetDllDirectory (we don't call this function inside the entire HotSpot source code).

So one possible solution is to expose a new JVM_LoadZipLibrary function that libjvm can call, instead of rolling its own code inside ./java.base/share/native/libjimage/imageDecompressor.cpp

static void* findEntry(const char* name) {
    void *addr = NULL;
#ifdef WIN32
    HMODULE handle = GetModuleHandle(""zip.dll"");
    if (handle == NULL) {
      handle = LoadLibrary(""zip.dll"");
    }
    if (handle == NULL) {
      return NULL;
    }
    addr = (void*) GetProcAddress(handle, name);
    return addr;
#else
    addr = dlopen(JNI_LIB_PREFIX ""zip"" JNI_LIB_SUFFIX, RTLD_GLOBAL|RTLD_LAZY);
    if (addr == NULL) {
        return NULL;
    }
    addr = dlsym(addr, name);
    return addr;
#endif
};;;","2021-12-23 16:46;iklam;Another solution is -- inside ClassLoader::initialize(), it can detect whether the VM is loading a jimage file with at least one compressed entry. If so, always load the zip library on start-up.;;;","2021-12-23 17:02;iklam;BTW, why are we doing the DLL lookup ourselves? Can't libjvm.so and libimage.so dynamically link to libzip.so to get the ZIP_XXX functions?

[EDIT] - the manual DLL lookup may be useful to implement JDK-8249963 -
""Make the zlib implementation selectively configurable at startup"";;;","2022-01-03 13:21;mseledtsov;ILW = HLM = P3;;;","2022-01-10 02:29;sswsharm;additional information from submitter:
============================================
We will go ahead with the SetDllDirectory workaround, which seems to work fine. I also tried using compress=1 to build the JVM. While that works, it increases the size of the modules file by 50%, so that isn’t as good for us.
============================================;;;","2022-01-24 16:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7206
Date: 2022-01-25 00:20:19 +0000;;;","2022-02-03 10:03;roboduke;Changeset: cda9c301
Author:    Yumin Qi <minqi@openjdk.org>
Date:      2022-02-03 18:02:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cda9c3011beeec8df68e78e096132e712255ce1b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
KeyStore:getAttributes() not returning unmodifiable Set,JDK-8278744,5064723,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,weijun,kganapureddy,kganapureddy,2021-12-13 21:12,2022-01-27 16:03,2023-10-01 09:57,2021-12-14 10:40,18,,,,,,,,18,security-libs,,0,conformance,tck-red-18,tck-red-18.0.1,,,,,,,,,,,,,,,,,"The recently added method Keystore:getAttributes() is not returning unmodifiable Set, But the spec mentions it as - ""Returns:
an unmodifiable Set of attributes.""

Please find the attached sample to demonstrate the problem.
",,,,,,,,,,JDK-8279718,JDK-8278877,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7317057,,,,,,,,,,,,,,,,,,"2021-12-13 21:11;kganapureddy;TestGetAttributes.java;https://bugs.openjdk.org/secure/attachment/97361/TestGetAttributes.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,,,,"0|i2veer:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2021-12-14 10:40;roboduke;Changeset: 0cc989b7
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-12-14 18:39:22 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/0cc989b7d2fa3b903d71b7baab53b853455005ba
;;;","2022-01-27 16:03;rhalade;Marking it as verified using CI results of UnmodifiableAttributes.java test.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JfrJavaSupport::jfr_thread_id/exclude/include are broken in loom,JDK-8278713,5064693,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,lmesnik,lmesnik,2021-12-13 19:24,2022-03-19 12:32,2023-10-01 09:41,2022-03-19 12:32,repo-loom,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,,"JFR maps 'jobject thread' to 'JavaThread* native_thread' and use JfrThreadLocal for thread id mapping and event filtering.

However, there is no such correspondence between thread obj  (j.l.VirtualThread) and java_thread JavaThread) in loom. So JFR_ONLY(DEFINE_THREAD_LOCAL_FIELD_JFR;)    
data is shared by different threads and becomes inconsistent.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ve83:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-03-19 12:32;mgronlun;Fixed as part of https://github.com/openjdk/loom/commit/6cad8075e06060f396c10c41c66897fcb427d423;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove FLAG_IS_CMDLINE(UseSharedSpaces),JDK-8278638,5064615,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,hseigel,hseigel,hseigel,2021-12-13 13:39,2022-01-03 14:32,2023-10-01 09:57,2021-12-14 12:36,19,,,,,,,,19,hotspot,,0,cds,noreg-cleanup,tier5,,,,,,,,,,,,,,,,,"Since option UseSharedSpaces is obsolete, this code in arguments.cpp should be cleaned up to not use FLAG_IS_CMDLINE:

  if ((UseSharedSpaces && FLAG_IS_CMDLINE(UseSharedSpaces)) ||
      log_is_enabled(Info, cds)) {
    warning(""Shared spaces are not supported in this VM"");
    UseSharedSpaces = false;
    LogConfiguration::configure_stdout(LogLevel::Off, true, LOG_TAGS(cds));
  }

(noticed by [~ayang])",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277481,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vdqr:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-12-13 14:49;dholmes;UseSharedSpaces isn't even a flag now so why does this even compile?;;;","2021-12-13 15:37;jiefu;[~dholmes] We already observed build failures {zero, minimal} with GCC 7 due to this bug.
So please fix it soon thanks.
;;;","2021-12-13 20:16;dholmes;We now also see the build failures in tier 5 so bumping to P2.;;;","2021-12-14 12:36;roboduke;Changeset: 98a8d446
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2021-12-14 20:35:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/98a8d446b69fd84355731a8a3192cbd42671abb8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/jmx/streaming/TestMaxSize.java Expected only one or two chunks,JDK-8278628,5064604,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,dcubed,dcubed,2021-12-13 11:35,2022-01-25 14:22,2023-10-01 09:57,2022-01-18 08:55,19,,,,,,,,18,hotspot,,0,intermittent,tier3,,,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

jdk/jfr/jmx/streaming/TestMaxSize.java

Here's a snippet from the log file:

#section:main
----------messages:(5/272)----------
command: main jdk.jfr.jmx.streaming.TestMaxSize
reason: User specified action: run main/othervm jdk.jfr.jmx.streaming.TestMaxSize 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,jdk.management.jfr
elapsed time (seconds): 15.692
----------configuration:(3/54)----------
Boot Layer
  add modules: jdk.jfr jdk.management.jfr

----------System.out:(24/610)----------
max-size-1639423644743
Directory size: 0
Emitted 500000 events
Directory size: 5604485
Emitted 500000 events
Directory size: 9312847
Emitted 500000 events
Directory size: 16708930
Emitted 500000 events
Directory size: 21075361
Emitted 500000 events
Directory size: 27813227
Emitted 500000 events
Directory size: 33654953
Emitted 500000 events
Directory size: 39759046
Emitted 500000 events
Directory size: 45759142
Emitted 500000 events
Directory size: 51476146
Files:
max-size-1639423644743/2021_12_13_19_27_25.jfr
max-size-1639423644743/2021_12_13_19_27_35.jfr
max-size-1639423644743/2021_12_13_19_27_38.jfr
----------System.err:(11/753)----------
java.lang.Exception: Expected only one or two chunks with setMaxSize(1_000_000). Found 3
	at jdk.jfr.jmx.streaming.TestMaxSize.main(TestMaxSize.java:78)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.Exception: Expected only one or two chunks with setMaxSize(1_000_000). Found 3
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: Expected only one or two chunks with setMaxSize(1_000_000). Found 3
----------rerun:(37/7986)*----------",,,,,,,,,,JDK-8280322,JDK-8280654,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,os_x,,,,,"0|i2vdob:",9223372036854775807,b32,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-01-17 00:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/105
Date: 2022-01-17 01:20:37 +0000;;;","2022-01-18 08:55;roboduke;Changeset: bd35f974
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-01-18 16:55:06 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/bd35f9740dce8865b9a8cdb582c771279ab02d76
;;;","2022-01-25 04:30;roboduke;Changeset: bd35f974
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-01-18 16:55:06 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/bd35f9740dce8865b9a8cdb582c771279ab02d76
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: TestHeapDump test failed,JDK-8278627,5064603,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,zgu,zgu,zgu,2021-12-13 10:46,2022-06-22 17:02,2023-10-01 09:57,2021-12-21 11:02,17,18,19,,,,,,18,hotspot,,0,gc-shenandoah,jdk17u-fix-request,jdk17u-fix-yes,oraclejdk-na,redhat-interest,,,,,,,,,,,,,,,"SAP reported TestHeapDump.java test crash on ppc64le:

A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/jdk17u/src/hotspot/cpu/ppc/relocInfo_ppc.cpp:67), pid=33507, tid=33520
#  guarantee((address) (nativeMovConstReg_at(addr())->data()) == x) failed: data must match
#
# JRE version: OpenJDK Runtime Environment (17.0.1) (fastdebug build 17.0.1-internal+0-adhoc.openjdk.jdk17u)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17.0.1-internal+0-adhoc.openjdk.jdk17u, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-ppc64le)
# Problematic frame:
# V  [libjvm.so+0x16bb648]  Relocation::pd_set_data_value(unsigned char*, long, bool)+0x128

",,,,,,,,,,JDK-8279748,JDK-8279578,JDK-8279110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-12-13 10:46;zgu;hs_err_pid2134734.log;https://bugs.openjdk.org/secure/attachment/97356/hs_err_pid2134734.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i2vdo3:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-12-16 09:19;zgu;Up priority to P2, because it is a fatal bug;;;","2021-12-21 07:56;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/56
Date: 2021-12-21 15:49:56 +0000
;;;","2021-12-21 11:02;roboduke;Changeset: 1128674d
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-12-21 19:02:01 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/1128674d7f3766dda8869b213e1fc629e44ea7a8
;;;","2022-01-05 07:50;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/58
Date: 2022-01-04 19:56:31 +0000
;;;","2022-01-05 08:50;zgu;Fix Request (17u)

I would like to backport this Shenandoah specific patch to 17u, it fixes a potential fatal crash during heap dump.

The original patch does not apply cleanly, 17u patch has been reviewed by @shade.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/vectorapi/reshape/TestVectorCastAVX512.java after JDK-8259610,JDK-8278623,5064599,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kvn,dcubed,dcubed,2021-12-13 10:07,2022-01-03 14:44,2023-10-01 09:57,2021-12-17 15:44,19,,,,,,,,19,hotspot,,0,noreg-self,oracle-triage-19,problemlist,tier2,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

compiler/vectorapi/reshape/TestVectorCastAVX512.java

Here's a snippet from the log file:

Error Output
------------
WARNING: Using incubator modules: jdk.incubator.vector
Exception in thread ""main"" compiler.lib.ir_framework.shared.TestRunException: 

Test Failures (8)
-----------------
Custom Run Test: @Run: runL512toI256 - @Test: testL512toI256:
compiler.lib.ir_framework.shared.TestRunException: Method public static void compiler.vectorapi.reshape.tests.TestVectorCast.testL512toI256(byte[],byte[]) not compilable at level C2. Did you use compileonly without including all @Test methods?
	at compiler.lib.ir_framework.shared.TestRun.check(TestRun.java:32)
	at compiler.lib.ir_framework.test.AbstractTest.compileMethod(AbstractTest.java:119)
	at compiler.lib.ir_framework.test.CustomRunTest.compileSingleTest(CustomRunTest.java:113)
	at compiler.lib.ir_framework.test.CustomRunTest.compileTest(CustomRunTest.java:101)
	at compiler.lib.ir_framework.test.AbstractTest.run(AbstractTest.java:102)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:89)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:818)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:249)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:164)


Custom Run Test: @Run: runI512toS256 - @Test: testI512toS256:
compiler.lib.ir_framework.shared.TestRunException: Method public static void compiler.vectorapi.reshape.tests.TestVectorCast.testI512toS256(byte[],byte[]) not compilable at level C2. Did you use compileonly without including all @Test methods?
	at compiler.lib.ir_framework.shared.TestRun.check(TestRun.java:32)
	at compiler.lib.ir_framework.test.AbstractTest.compileMethod(AbstractTest.java:119)
	at compiler.lib.ir_framework.test.CustomRunTest.compileSingleTest(CustomRunTest.java:113)
	at compiler.lib.ir_framework.test.CustomRunTest.compileTest(CustomRunTest.java:101)
	at compiler.lib.ir_framework.test.AbstractTest.run(AbstractTest.java:102)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:89)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:818)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:249)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:164)


Custom Run Test: @Run: runL512toB64 - @Test: testL512toB64:
compiler.lib.ir_framework.shared.TestRunException: Method public static void compiler.vectorapi.reshape.tests.TestVectorCast.testL512toB64(byte[],byte[]) not compilable at level C2. Did you use compileonly without including all @Test methods?
	at compiler.lib.ir_framework.shared.TestRun.check(TestRun.java:32)
	at compiler.lib.ir_framework.test.AbstractTest.compileMethod(AbstractTest.java:119)
	at compiler.lib.ir_framework.test.CustomRunTest.compileSingleTest(CustomRunTest.java:113)
	at compiler.lib.ir_framework.test.CustomRunTest.compileTest(CustomRunTest.java:101)
	at compiler.lib.ir_framework.test.AbstractTest.run(AbstractTest.java:102)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:89)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:818)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:249)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:164)


Custom Run Test: @Run: runL512toS128 - @Test: testL512toS128:
compiler.lib.ir_framework.shared.TestRunException: Method public static void compiler.vectorapi.reshape.tests.TestVectorCast.testL512toS128(byte[],byte[]) not compilable at level C2. Did you use compileonly without including all @Test methods?
	at compiler.lib.ir_framework.shared.TestRun.check(TestRun.java:32)
	at compiler.lib.ir_framework.test.AbstractTest.compileMethod(AbstractTest.java:119)
	at compiler.lib.ir_framework.test.CustomRunTest.compileSingleTest(CustomRunTest.java:113)
	at compiler.lib.ir_framework.test.CustomRunTest.compileTest(CustomRunTest.java:101)
	at compiler.lib.ir_framework.test.AbstractTest.run(AbstractTest.java:102)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:89)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:818)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:249)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:164)


Custom Run Test: @Run: runD512toF256 - @Test: testD512toF256:
compiler.lib.ir_framework.shared.TestRunException: Method public static void compiler.vectorapi.reshape.tests.TestVectorCast.testD512toF256(byte[],byte[]) not compilable at level C2. Did you use compileonly without including all @Test methods?
	at compiler.lib.ir_framework.shared.TestRun.check(TestRun.java:32)
	at compiler.lib.ir_framework.test.AbstractTest.compileMethod(AbstractTest.java:119)
	at compiler.lib.ir_framework.test.CustomRunTest.compileSingleTest(CustomRunTest.java:113)
	at compiler.lib.ir_framework.test.CustomRunTest.compileTest(CustomRunTest.java:101)
	at compiler.lib.ir_framework.test.AbstractTest.run(AbstractTest.java:102)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:89)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:818)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:249)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:164)


Custom Run Test: @Run: runF512toI512 - @Test: testF512toI512:
compiler.lib.ir_framework.shared.TestRunException: Method public static void compiler.vectorapi.reshape.tests.TestVectorCast.testF512toI512(byte[],byte[]) not compilable at level C2. Did you use compileonly without including all @Test methods?
	at compiler.lib.ir_framework.shared.TestRun.check(TestRun.java:32)
	at compiler.lib.ir_framework.test.AbstractTest.compileMethod(AbstractTest.java:119)
	at compiler.lib.ir_framework.test.CustomRunTest.compileSingleTest(CustomRunTest.java:113)
	at compiler.lib.ir_framework.test.CustomRunTest.compileTest(CustomRunTest.java:101)
	at compiler.lib.ir_framework.test.AbstractTest.run(AbstractTest.java:102)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:89)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:818)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:249)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:164)


Custom Run Test: @Run: runI512toF512 - @Test: testI512toF512:
compiler.lib.ir_framework.shared.TestRunException: Method public static void compiler.vectorapi.reshape.tests.TestVectorCast.testI512toF512(byte[],byte[]) not compilable at level C2. Did you use compileonly without including all @Test methods?
	at compiler.lib.ir_framework.shared.TestRun.check(TestRun.java:32)
	at compiler.lib.ir_framework.test.AbstractTest.compileMethod(AbstractTest.java:119)
	at compiler.lib.ir_framework.test.CustomRunTest.compileSingleTest(CustomRunTest.java:113)
	at compiler.lib.ir_framework.test.CustomRunTest.compileTest(CustomRunTest.java:101)
	at compiler.lib.ir_framework.test.AbstractTest.run(AbstractTest.java:102)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:89)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:818)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:249)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:164)


Custom Run Test: @Run: runI512toB128 - @Test: testI512toB128:
compiler.lib.ir_framework.shared.TestRunException: Method public static void compiler.vectorapi.reshape.tests.TestVectorCast.testI512toB128(byte[],byte[]) not compilable at level C2. Did you use compileonly without including all @Test methods?
	at compiler.lib.ir_framework.shared.TestRun.check(TestRun.java:32)
	at compiler.lib.ir_framework.test.AbstractTest.compileMethod(AbstractTest.java:119)
	at compiler.lib.ir_framework.test.CustomRunTest.compileSingleTest(CustomRunTest.java:113)
	at compiler.lib.ir_framework.test.CustomRunTest.compileTest(CustomRunTest.java:101)
	at compiler.lib.ir_framework.test.AbstractTest.run(AbstractTest.java:102)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:89)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:818)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:249)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:164)



	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:853)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:249)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:164)


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.TestVMProcess.throwTestVMException(TestVMProcess.java:238)
	at compiler.lib.ir_framework.driver.TestVMProcess.checkTestVMExitCode(TestVMProcess.java:219)
	at compiler.lib.ir_framework.driver.TestVMProcess.<init>(TestVMProcess.java:74)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:697)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:669)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:322)
	at compiler.vectorapi.reshape.utils.VectorReshapeHelper.runMainHelper(VectorReshapeHelper.java:92)
	at compiler.vectorapi.reshape.TestVectorCastAVX512.main(TestVectorCastAVX512.java:42)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
----------rerun:(38/8239)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278624,,,JDK-8278920,,,,,,,,,,,,JDK-8259610,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,generic,,,,,"0|i2vdn7:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-12-13 11:24;psandoz;I also noticed this in the logs:

IR verification disabled due to using non-whitelisted JTreg VM or Javaoptions flag(s).

There are two issues:
1) The IR verification appears disabled for all the newly added rehape tests because the hotspot_vector_1 group is run under various flags in Oracle's test infrastructure.
2) The addition of -XX:+UseKNLSetting seems to be affecting a subset of the AVX512 cast tests. It's not clear if such cast tests need to be split accordingly or need not be run with this flag.;;;","2021-12-14 08:55;chagedorn;ILW = Test failure due to methods that cannot be compiled, single IR test and problem-listed already, no workaround = MLH = P4;;;","2021-12-14 09:04;kvn;Note, -XX:+UseKNLSetting flag reduce number of available avx512 instructions to amulate old Intel's CPU. So it is reasonable that some vector instructions can't be generated with it.
But my impression was that IR framework fork process to avoid such issues when conflicting flags are specified by testing.;;;","2021-12-17 15:44;roboduke;Changeset: cc44e137
Author:    merykitty <anhmdq99@gmail.com>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-12-17 23:42:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cc44e137973808436311aaaa50916d051759f705
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] test/jdk/java/awt/dnd/RemoveDropTargetCrashTest crashes with VoiceOver on macOS,JDK-8278612,5064569,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,ant,ant,ant,2021-12-13 07:26,2023-05-05 03:45,2023-10-01 09:57,2022-01-05 10:37,18,,,,,,,,18,client-libs,,0,a11y,accessibility,cssn22_07_01,jdk11u-a11y-defer,jdk17u-fix-request,jdk17u-fix-yes,macos,regression,,,,,,,,,,,,"On macOS enable VoiceOver and run the test:

test/jdk/java/awt/dnd/RemoveDropTargetCrashTest.java

it will almost immediately crash.

{code:collapse=true}
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGBUS (0xa) at pc=0x000000011eb0f646, pid=44828, tid=58371
#
# JRE version: OpenJDK Runtime Environment (19.0) (build 19-internal+0-adhoc.tav.openjdk)
# Java VM: OpenJDK 64-Bit Server VM (19-internal+0-adhoc.tav.openjdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Problematic frame:
# j  sun.lwawt.macosx.CAccessibility$9.call()Ljava/lang/Boolean;+4 java.desktop@19-internal
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: RemoveDropTargetCrashTest

Host: ""MacBookPro16,1"" x86_64 2300 MHz, 16 cores, 32G, Darwin 20.2.0, macOS 11.1 (20C69)
Time: Mon Dec 13 18:07:26 2021 MSK elapsed time: 6.274136 seconds (0d 0h 0m 6s)

---------------  T H R E A D  ---------------

Current thread (0x00007f9dae139a00):  JavaThread ""AWT-EventQueue-0"" [_thread_in_Java, id=58371, stack(0x0000700002a36000,0x0000700002b36000)]

Stack: [0x0000700002a36000,0x0000700002b36000],  sp=0x0000700002b35370,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
j  sun.lwawt.macosx.CAccessibility$9.call()Ljava/lang/Boolean;+4 java.desktop@19-internal
j  sun.lwawt.macosx.CAccessibility$9.call()Ljava/lang/Object;+1 java.desktop@19-internal
J 949 c1 sun.lwawt.macosx.LWCToolkit$CallableWrapper.run()V java.desktop@19-internal (23 bytes) @ 0x000000011f3b2354 [0x000000011f3b2240+0x0000000000000114]
J 848 c1 java.awt.event.InvocationEvent.dispatch()V java.desktop@19-internal (69 bytes) @ 0x000000011f3888cc [0x000000011f388780+0x000000000000014c]
J 864 c1 java.awt.EventQueue.dispatchEventImpl(Ljava/awt/AWTEvent;Ljava/lang/Object;)V java.desktop@19-internal (136 bytes) @ 0x000000011f391de4 [0x000000011f390300+0x0000000000001ae4]
J 867 c1 java.awt.EventQueue$4.run()Ljava/lang/Void; java.desktop@19-internal (60 bytes) @ 0x000000011f393f3c [0x000000011f393e00+0x000000000000013c]
J 866 c1 java.awt.EventQueue$4.run()Ljava/lang/Object; java.desktop@19-internal (5 bytes) @ 0x000000011f393ab4 [0x000000011f393a40+0x0000000000000074]
J 708 c1 java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;Ljava/security/AccessControlContext;)Ljava/lang/Object; java.base@19-internal (22 bytes) @ 0x000000011f342754 [0x000000011f3424c0+0x0000000000000294]
J 814 c1 java.awt.EventQueue.dispatchEvent(Ljava/awt/AWTEvent;)V java.desktop@19-internal (80 bytes) @ 0x000000011f378b9c [0x000000011f3780e0+0x0000000000000abc]
J 816 c1 java.awt.EventDispatchThread.pumpOneEventForFilters(I)V java.desktop@19-internal (113 bytes) @ 0x000000011f37479c [0x000000011f374120+0x000000000000067c]
j  java.awt.EventDispatchThread.pumpEventsForFilter(ILjava/awt/Conditional;Ljava/awt/EventFilter;)V+35 java.desktop@19-internal
j  java.awt.EventDispatchThread.pumpEventsForHierarchy(ILjava/awt/Conditional;Ljava/awt/Component;)V+11 java.desktop@19-internal
j  java.awt.EventDispatchThread.pumpEvents(ILjava/awt/Conditional;)V+4 java.desktop@19-internal
j  java.awt.EventDispatchThread.pumpEvents(Ljava/awt/Conditional;)V+3 java.desktop@19-internal
j  java.awt.EventDispatchThread.run()V+9 java.desktop@19-internal
v  ~StubRoutines::call_stub
V  [libjvm.dylib+0x51d581]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x2a1
V  [libjvm.dylib+0x51c5f7]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x147
V  [libjvm.dylib+0x51c6c3]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x63
V  [libjvm.dylib+0x5c53a8]  thread_entry(JavaThread*, JavaThread*)+0x98
V  [libjvm.dylib+0xa66dfc]  JavaThread::thread_main_inner()+0xcc
V  [libjvm.dylib+0xa653cf]  Thread::call_run()+0xcf
V  [libjvm.dylib+0x897c58]  thread_native_entry(Thread*)+0x148
C  [libsystem_pthread.dylib+0x6950]  _pthread_start+0xe0
C  [libsystem_pthread.dylib+0x247b]  thread_start+0xf


siginfo: si_signo: 10 (SIGBUS), si_code: 2 (BUS_ADRERR), si_addr: 0x00000007884092a8

Register to memory mapping:

RAX=0x0000000800c422e8 is a pointer to class: 
javax.accessibility.Accessible {0x0000000800c422e8}
 - instance size:     2
 - klass size:        61
 - access:            public interface abstract 
 - state:             fully_initialized
 - name:              'javax/accessibility/Accessible'
 - super:             'java/lang/Object'
 - sub:               
 - nof implementors:  2
 - arrays:            'javax/accessibility/Accessible'[]
 - methods:           Array<T>(0x000000013fc2fbd8)
 - method ordering:   Array<T>(0x0000000800a812d8)
 - default_methods:   Array<T>(0x0000000000000000)
 - local interfaces:  Array<T>(0x00000008005b1a30)
 - trans. interfaces: Array<T>(0x00000008005b1a30)
 - constants:         constant pool [9] {0x000000013fc2fb20} for 'javax/accessibility/Accessible' cache=0x000000013fe54728
 - class loader data:  loader data: 0x00007f9dad916ac0 of 'bootstrap'
 - source file:       'Accessible.java'
 - class annotations:       Array<T>(0x0000000000000000)
 - class type annotations:  Array<T>(0x0000000000000000)
 - field annotations:       Array<T>(0x0000000000000000)
 - field type annotations:  Array<T>(0x0000000000000000)
 - inner classes:     Array<T>(0x00000008005b19c0)
 - nest members:     Array<T>(0x00000008005b19c0)
 - permitted subclasses:     Array<T>(0x00000008005b19c0)
 - java mirror:       a 'java/lang/Class'{0x000000061fc1f358} = 'javax/accessibility/Accessible'
 - vtable length      5  (start addr: 0x0000000800c424a0)
 - itable length      0 (start addr: 0x0000000800c424c8)
 - ---- static fields (0 words):
 - ---- non-static fields (0 words):
 - non-static oop maps: 
RBX={method} {0x000000013fc2fc18} 'getAccessibleContext' '()Ljavax/accessibility/AccessibleContext;' in 'javax/accessibility/Accessible'
RCX=0x00000007884092a0 is an unallocated location in the heap
RDX=0x0000000080000001 is an unknown value
RSP=0x0000700002b35370 is pointing into the stack for thread: 0x00007f9dae139a00
RBP=0x0000700002b353c8 is pointing into the stack for thread: 0x00007f9dae139a00
RSI=0x000000061fa9c830 is an oop: sun.lwawt.macosx.CAccessibility$9 
{0x000000061fa9c830} - klass: 'sun/lwawt/macosx/CAccessibility$9'
 - ---- fields (total size 3 words):
 - final synthetic 'val$index' 'I' @12  0
 - final synthetic 'val$a' 'Ljavax/accessibility/Accessible;' @16  
[error occurred during error reporting (printing register info), id 0xa, SIGBUS (0xa) at pc=0x000000010910356f]

Registers:
RAX=0x0000000800c422e8, RBX=0x000000013fc2fc18, RCX=0x00000007884092a0, RDX=0x0000000080000001
RSP=0x0000700002b35370, RBP=0x0000700002b353c8, RSI=0x000000061fa9c830, RDI=0x000000061fa9c830
R8 =0x000000061fddb310, R9 =0x00000001099ff000, R10=0x00000001095cf160, R11=0x0000000000000210
R12=0x0000000000000000, R13=0x000000014020ca04, R14=0x0000700002b353e8, R15=0x00007f9dae139a00
RIP=0x000000011eb0f646, EFLAGS=0x0000000000010246, ERR=0x0000000000000004
  TRAPNO=0x000000000000000e

Top of Stack: (sp=0x0000700002b35370)
0x0000700002b35370:   000000011eafe6a2 00000007884092a0
0x0000700002b35380:   0000700002b35380 000000014020ca04
0x0000700002b35390:   0000700002b353e8 000000014020cb78
0x0000700002b353a0:   0000000000000000 000000061fa75d30
0x0000700002b353b0:   000000014020ca60 0000000000000000
0x0000700002b353c0:   0000700002b353e8 0000700002b35438
0x0000700002b353d0:   000000011eafe23e 0000000000000000
0x0000700002b353e0:   0000000000000000 000000061fa9c830
0x0000700002b353f0:   0000700002b353f0 000000014020cae9
0x0000700002b35400:   0000700002b35448 000000014020cb78
0x0000700002b35410:   0000000000000000 000000061fa75d30
0x0000700002b35420:   000000014020cb08 0000700002b353e8
0x0000700002b35430:   0000700002b35450 0000700002b35988
0x0000700002b35440:   000000011f3b2354 000000061fa9c830
0x0000700002b35450:   000000061fa9c748 00007f9dad905084
0x0000700002b35460:   00007f9dad905088 0000700002b354e0
0x0000700002b35470:   000000061fa9c848 0000000000021100
0x0000700002b35480:   0000700002b35988 000000011f3888cc
0x0000700002b35490:   0000000000021000 00007f9dae139a00
0x0000700002b354a0:   0000700002b30100 000000061fddb310
0x0000700002b354b0:   000000061fa9c860 000000080011f560
0x0000700002b354c0:   0000000000000012 0000700002b35610
0x0000700002b354d0:   0000700002b35988 000000011f391de4
0x0000700002b354e0:   0000700000000000 0000000000000000
0x0000700002b354f0:   0000700002b35610 00000000000000f0
0x0000700002b35500:   0000000000000000 0000000000000000
0x0000700002b35510:   0000700002b35500 00007f9dae139a00
0x0000700002b35520:   0000700002b30100 0000011600000001
0x0000700002b35530:   00000003000000f0 0000000800059490
0x0000700002b35540:   000070000000001d 000000c800000001
0x0000700002b35550:   000000010954e340 0000000000000000
0x0000700002b35560:   0000000000000000 0000000000000000 

Instructions: (pc=0x000000011eb0f646)
0x000000011eb0f546:   49 ba 00 00 00 00 08 00 00 00 4d 03 ea 4c 33 6a
0x000000011eb0f556:   08 49 f7 c5 fc ff ff ff 74 35 49 f7 c5 02 00 00
0x000000011eb0f566:   00 75 2c 48 81 7a 08 00 00 00 00 74 1e 48 81 7a
0x000000011eb0f576:   08 01 00 00 00 74 14 4c 33 6a 08 49 f7 c5 fc ff
0x000000011eb0f586:   ff ff 74 0b 48 83 4a 08 02 eb 04 4c 89 6a 08 48
0x000000011eb0f596:   83 c2 10 4c 8b 6a e8 41 83 ed 02 41 83 fd 02 0f
0x000000011eb0f5a6:   8c 80 00 00 00 4c 8b 6b 08 45 0f b7 6d 2c 4c 2b
0x000000011eb0f5b6:   2a 41 83 ed 01 4e 8b 6c ec 08 4d 85 ed 75 07 48
0x000000011eb0f5c6:   83 4a 08 01 eb 53 45 8b 6d 08 49 ba 00 00 00 00
0x000000011eb0f5d6:   08 00 00 00 4d 03 ea 4c 33 6a 08 49 f7 c5 fc ff
0x000000011eb0f5e6:   ff ff 74 35 49 f7 c5 02 00 00 00 75 2c 48 81 7a
0x000000011eb0f5f6:   08 00 00 00 00 74 1e 48 81 7a 08 01 00 00 00 74
0x000000011eb0f606:   14 4c 33 6a 08 49 f7 c5 fc ff ff ff 74 0b 48 83
0x000000011eb0f616:   4a 08 02 eb 04 4c 89 6a 08 48 83 c2 10 4c 8b 6a
0x000000011eb0f626:   d8 41 83 ed 04 41 c1 e5 03 49 03 d5 48 89 55 d8
0x000000011eb0f636:   4c 8d 6c 24 08 4c 89 6d f0 ff 63 50 4c 8b 75 c8
0x000000011eb0f646:   8b 51 08 49 ba 00 00 00 00 08 00 00 00 49 03 d2
0x000000011eb0f656:   48 8b cb 44 8b 72 10 4e 8d b4 f2 b8 01 00 00 4d
0x000000011eb0f666:   8b 2e 49 3b c5 74 15 4d 85 ed 0f 84 1a 03 00 00
0x000000011eb0f676:   49 83 c6 10 4d 8b 2e 49 3b c5 75 eb 4c 8b 6d c0
0x000000011eb0f686:   4c 8b 6d d8 4d 85 ed 0f 84 97 00 00 00 4d 8b 75
0x000000011eb0f696:   18 4c 3b f2 0f 85 0f 00 00 00 49 83 45 20 01 49
0x000000011eb0f6a6:   83 5d 20 00 e9 73 00 00 00 4d 85 f6 0f 84 43 00
0x000000011eb0f6b6:   00 00 4d 8b 75 28 4c 3b f2 0f 85 0f 00 00 00 49
0x000000011eb0f6c6:   83 45 30 01 49 83 5d 30 00 e9 4e 00 00 00 4d 85
0x000000011eb0f6d6:   f6 74 0f 49 83 45 08 01 49 83 5d 08 00 e9 3a 00
0x000000011eb0f6e6:   00 00 49 89 55 28 41 be 01 00 00 00 4d 89 75 30
0x000000011eb0f6f6:   e9 27 00 00 00 49 3b 55 28 0f 85 0f 00 00 00 49
0x000000011eb0f706:   83 45 30 01 49 83 5d 30 00 e9 0e 00 00 00 49 89
0x000000011eb0f716:   55 18 41 be 01 00 00 00 4d 89 75 20 49 83 c5 38
0x000000011eb0f726:   4c 89 6d d8 48 8b 43 08 48 8b 40 08 48 8b 40 18
0x000000011eb0f736:   8b 5b 2c 83 eb f6 f7 db 4c 8b f2 45 8b 6e 10 4f 


Stack slot to memory mapping:
stack at sp + 0 slots: 0x000000011eafe6a2 is at code_begin+2242 in an Interpreter codelet
return entry points  [0x000000011eafdde0, 0x000000011eafe8e0]  2816 bytes
stack at sp + 1 slots: 0x00000007884092a0 is an unallocated location in the heap
stack at sp + 2 slots: 0x0000700002b35380 is pointing into the stack for thread: 0x00007f9dae139a00
stack at sp + 3 slots: 0x000000014020ca04 is pointing into metadata
stack at sp + 4 slots: 0x0000700002b353e8 is pointing into the stack for thread: 0x00007f9dae139a00
stack at sp + 5 slots: 0x000000014020cb78 is pointing into metadata
stack at sp + 6 slots: 0x0 is NULL
stack at sp + 7 slots: 0x000000061fa75d30 is an oop: java.lang.Class 
{0x000000061fa75d30} - klass: 'java/lang/Class'
 - ---- fields (total size 14 words):
 - private volatile transient 'classRedefinedCount' 'I' @12  0
 - abstract internal 'klass' 'J' @16  34373295680 (cede40 8)
 - abstract internal 'array_klass' 'J' @24  0 (0 0)
 - abstract internal 'oop_size' 'I' @32  14 (e)
 - abstract internal 'static_oop_field_count' 'I' @36  0
 - private volatile transient 'cachedConstructor' 'Ljava/lang/reflect/Constructor;' @40  NULL (0)
 - private transient 'name' 'Ljava/lang/String;' @44  NULL (0)
 - private transient 'module' 'Ljava/lang/Module;' @48  a 'java/lang/Module'{0x00000007ffb5b748} (fff6b6e9)
 - private final 'classLoader' 'Ljava/lang/ClassLoader;' @52  NULL (0)
 - private transient 'classData' 'Ljava/lang/Object;' @56  NULL (0)
 - private transient 'packageName' 'Ljava/lang/String;' @60  NULL (0)
 - private final 'componentType' 'Ljava/lang/Class;' @64  NULL (0)
 - private volatile transient 'reflectionData' 'Ljava/lang/ref/SoftReference;' @68  NULL (0)
 - private volatile transient 'genericInfo' 'Lsun/reflect/generics/repository/ClassRepository;' @72  NULL (0)
 - private volatile transient 'enumConstants' '[Ljava/lang/Object;' @76  NULL (0)
 - private volatile transient 'enumConstantDirectory' 'Ljava/util/Map;' @80  NULL (0)
 - private volatile transient 'annotationData' 'Ljava/lang/Class$AnnotationData;' @84  NULL (0)
 - private volatile transient 'annotationType' 'Lsun/reflect/annotation/AnnotationType;' @88  NULL (0)
 - transient 'classValueMap' 'Ljava/lang/ClassValue$ClassValueMap;' @92  NULL (0)
 - abstract internal 'protection_domain' 'Ljava/lang/Object;' @96  NULL (0)
 - abstract internal 'signers_name' 'Ljava/lang/Object;' @100  NULL (0)
 - abstract internal 'source_file' 'Ljava/lang/Object;' @104  NULL (0)
 - signature: Lsun/lwawt/macosx/CAccessibility$9;
 - ---- static fields (0):

invokeinterface  185 invokeinterface  [0x000000011eb0efa0, 0x000000011eb0fa40]  2720 bytes
[MachCode]
  0x000000011eb0efa0: 4883 ec08 | c5fa 1104 | 24e9 2500 | 0000 4883 | ec10 c5fb | 1104 24e9 | 1700 0000 | 4883 ec10 
  0x000000011eb0efc0: 4889 0424 | 48c7 4424 | 0800 0000 | 00e9 0100 | 0000 504c | 896d c041 | 0fb7 5501 | 488b 4dd0 
  0x000000011eb0efe0: c1e2 028b | 5cd1 28c1 | eb10 81e3 | ff00 0000 | 81fb b900 | 0000 0f84 | 9e00 0000 | bbb9 0000 
  0x000000011eb0f000: 00e8 0500 | 0000 e983 | 0000 0048 | 8bf3 488d | 4424 084c | 896d c049 | 8bff c5f8 | 7749 89af 
  0x000000011eb0f020: 8002 0000 | 4989 8770 | 0200 00f7 | c40f 0000 | 000f 8412 | 0000 0048 | 83ec 08e8 | 7043 28ea 
  0x000000011eb0f040: 4883 c408 | e905 0000 | 00e8 6243 | 28ea 49c7 | 8770 0200 | 0000 0000 | 0049 c787 | 8002 0000 
  0x000000011eb0f060: 0000 0000 | 49c7 8778 | 0200 0000 | 0000 00c5 | f877 4981 | 7f08 0000 | 0000 0f84 | 0500 0000 
  0x000000011eb0f080: e97b 6bfe | ff4c 8b6d | c04c 8b75 | c8c3 410f | b755 0148 | 8b4d d0c1 | e202 488b | 44d1 3048 
  0x000000011eb0f0a0: 8b5c d138 | 8b54 d140 | 8bca 81e1 | ff00 0000 | 488b 4ccc | f844 8bea | c1ea 1c49 | ba60 f15c 
  0x000000011eb0f0c0: 0901 0000 | 0049 8b14 | d252 418b | d54c 8b6d | c044 8bf2 | 4181 e600 | 0080 000f | 8486 0300 
  0x000000011eb0f0e0: 008b c281 | e000 0010 | 000f 8470 | 0100 0048 | 3b01 488b | 45d8 4885 | c00f 8412 | 0000 0048 
  0x000000011eb0f100: 8340 0801 | 4883 5808 | 0048 83c0 | 3848 8945 | d848 8b45 | d848 85c0 | 0f84 3501 | 0000 8078 
  0x000000011eb0f120: c80b 0f85 | 2b01 0000 | 4883 c008 | 4c8b 68f8 | 4183 ed00 | 4183 fd02 | 0f8c 0a01 | 0000 4c8b 
  0x000000011eb0f140: 6b08 450f | b76d 2c4c | 2b28 4183 | ed01 4e8b | 6cec 084d | 85ed 7507 | 4883 4808 | 01eb 5345 
  0x000000011eb0f160: 8b6d 0849 | ba00 0000 | 0008 0000 | 004d 03ea | 4c33 6808 | 49f7 c5fc | ffff ff74 | 3549 f7c5 
  0x000000011eb0f180: 0200 0000 | 752c 4881 | 7808 0000 | 0000 741e | 4881 7808 | 0100 0000 | 7414 4c33 | 6808 49f7 
  0x000000011eb0f1a0: c5fc ffff | ff74 0b48 | 8348 0802 | eb04 4c89 | 6808 4883 | c010 4c8b | 68e8 4183 | ed02 4183 
  0x000000011eb0f1c0: fd02 0f8c | 8000 0000 | 4c8b 6b08 | 450f b76d | 2c4c 2b28 | 4183 ed01 | 4e8b 6cec | 084d 85ed 
  0x000000011eb0f1e0: 7507 4883 | 4808 01eb | 5345 8b6d | 0849 ba00 | 0000 0008 | 0000 004d | 03ea 4c33 | 6808 49f7 
  0x000000011eb0f200: c5fc ffff | ff74 3549 | f7c5 0200 | 0000 752c | 4881 7808 | 0000 0000 | 741e 4881 | 7808 0100 
  0x000000011eb0f220: 0000 7414 | 4c33 6808 | 49f7 c5fc | ffff ff74 | 0b48 8348 | 0802 eb04 | 4c89 6808 | 4883 c010 
  0x000000011eb0f240: 4c8b 68d8 | 4183 ed04 | 41c1 e503 | 4903 c548 | 8945 d84c | 8d6c 2408 | 4c89 6df0 | ff63 508b 
  0x000000011eb0f260: 4108 49ba | 0000 0000 | 0800 0000 | 4903 c24c | 8b75 d84d | 85f6 0f84 | 9500 0000 | 498b 5618 
  0x000000011eb0f280: 483b d00f | 850f 0000 | 0049 8346 | 2001 4983 | 5e20 00e9 | 7100 0000 | 4885 d20f | 8442 0000 
  0x000000011eb0f2a0: 0049 8b56 | 2848 3bd0 | 0f85 0f00 | 0000 4983 | 4630 0149 | 835e 3000 | e94c 0000 | 0048 85d2 
  0x000000011eb0f2c0: 740f 4983 | 4608 0149 | 835e 0800 | e938 0000 | 0049 8946 | 28ba 0100 | 0000 4989 | 5630 e926 
  0x000000011eb0f2e0: 0000 0049 | 3b46 280f | 850f 0000 | 0049 8346 | 3001 4983 | 5e30 00e9 | 0d00 0000 | 4989 4618 
  0x000000011eb0f300: ba01 0000 | 0049 8956 | 2049 83c6 | 384c 8975 | d848 8b9c | d8b8 0100 | 0048 8b55 | d848 85d2 
  0x000000011eb0f320: 0f84 3501 | 0000 807a | c80b 0f85 | 2b01 0000 | 4883 c208 | 4c8b 6af8 | 4183 ed00 | 4183 fd02 
  0x000000011eb0f340: 0f8c 0a01 | 0000 4c8b | 6b08 450f | b76d 2c4c | 2b2a 4183 | ed01 4e8b | 6cec 084d | 85ed 7507 
  0x000000011eb0f360: 4883 4a08 | 01eb 5345 | 8b6d 0849 | ba00 0000 | 0008 0000 | 004d 03ea | 4c33 6a08 | 49f7 c5fc 
  0x000000011eb0f380: ffff ff74 | 3549 f7c5 | 0200 0000 | 752c 4881 | 7a08 0000 | 0000 741e | 4881 7a08 | 0100 0000 
  0x000000011eb0f3a0: 7414 4c33 | 6a08 49f7 | c5fc ffff | ff74 0b48 | 834a 0802 | eb04 4c89 | 6a08 4883 | c210 4c8b 
  0x000000011eb0f3c0: 6ae8 4183 | ed02 4183 | fd02 0f8c | 8000 0000 | 4c8b 6b08 | 450f b76d | 2c4c 2b2a | 4183 ed01 
  0x000000011eb0f3e0: 4e8b 6cec | 084d 85ed | 7507 4883 | 4a08 01eb | 5345 8b6d | 0849 ba00 | 0000 0008 | 0000 004d 
  0x000000011eb0f400: 03ea 4c33 | 6a08 49f7 | c5fc ffff | ff74 3549 | f7c5 0200 | 0000 752c | 4881 7a08 | 0000 0000 
  0x000000011eb0f420: 741e 4881 | 7a08 0100 | 0000 7414 | 4c33 6a08 | 49f7 c5fc | ffff ff74 | 0b48 834a | 0802 eb04 
  0x000000011eb0f440: 4c89 6a08 | 4883 c210 | 4c8b 6ad8 | 4183 ed04 | 41c1 e503 | 4903 d548 | 8955 d84c | 8d6c 2408 
  0x000000011eb0f460: 4c89 6df0 | ff63 5044 | 8bf2 4181 | e600 0010 | 000f 84cb | 0100 0044 | 8b71 0849 | ba00 0000 
  0x000000011eb0f480: 0008 0000 | 004d 03f2 | 4c3b f00f | 8444 0000 | 0044 8b68 | 144b 3b04 | 2e0f 8436 | 0000 0041 
  0x000000011eb0f4a0: 83fd 200f | 8524 0000 | 0050 488b | c051 5749 | 8b7e 288b | 0f48 83c7 | 0848 85c0 | f248 af5f 
  0x000000011eb0f4c0: 5958 7509 | 4989 4620 | e908 0000 | 0049 8bd6 | e9bb 0400 | 0048 8b55 | d848 85d2 | 0f84 1200 
  0x000000011eb0f4e0: 0000 4883 | 4208 0148 | 835a 0800 | 4883 c238 | 4889 55d8 | 488b 55d8 | 4885 d20f | 8435 0100 
  0x000000011eb0f500: 0080 7ac8 | 0b0f 852b | 0100 0048 | 83c2 084c | 8b6a f841 | 83ed 0041 | 83fd 020f | 8c0a 0100 
  0x000000011eb0f520: 004c 8b6b | 0845 0fb7 | 6d2c 4c2b | 2a41 83ed | 014e 8b6c | ec08 4d85 | ed75 0748 | 834a 0801 
  0x000000011eb0f540: eb53 458b | 6d08 49ba | 0000 0000 | 0800 0000 | 4d03 ea4c | 336a 0849 | f7c5 fcff | ffff 7435 
  0x000000011eb0f560: 49f7 c502 | 0000 0075 | 2c48 817a | 0800 0000 | 0074 1e48 | 817a 0801 | 0000 0074 | 144c 336a 
  0x000000011eb0f580: 0849 f7c5 | fcff ffff | 740b 4883 | 4a08 02eb | 044c 896a | 0848 83c2 | 104c 8b6a | e841 83ed 
  0x000000011eb0f5a0: 0241 83fd | 020f 8c80 | 0000 004c | 8b6b 0845 | 0fb7 6d2c | 4c2b 2a41 | 83ed 014e | 8b6c ec08 
  0x000000011eb0f5c0: 4d85 ed75 | 0748 834a | 0801 eb53 | 458b 6d08 | 49ba 0000 | 0000 0800 | 0000 4d03 | ea4c 336a 
  0x000000011eb0f5e0: 0849 f7c5 | fcff ffff | 7435 49f7 | c502 0000 | 0075 2c48 | 817a 0800 | 0000 0074 | 1e48 817a 
  0x000000011eb0f600: 0801 0000 | 0074 144c | 336a 0849 | f7c5 fcff | ffff 740b | 4883 4a08 | 02eb 044c | 896a 0848 
  0x000000011eb0f620: 83c2 104c | 8b6a d841 | 83ed 0441 | c1e5 0349 | 03d5 4889 | 55d8 4c8d | 6c24 084c | 896d f0ff 
  0x000000011eb0f640: 6350 4c8b | 75c8 8b51 | 0849 ba00 | 0000 0008 | 0000 0049 | 03d2 488b | cb44 8b72 | 104e 8db4 
  0x000000011eb0f660: f2b8 0100 | 004d 8b2e | 493b c574 | 154d 85ed | 0f84 1a03 | 0000 4983 | c610 4d8b | 2e49 3bc5 
  0x000000011eb0f680: 75eb 4c8b | 6dc0 4c8b | 6dd8 4d85 | ed0f 8497 | 0000 004d | 8b75 184c | 3bf2 0f85 | 0f00 0000 
  0x000000011eb0f6a0: 4983 4520 | 0149 835d | 2000 e973 | 0000 004d | 85f6 0f84 | 4300 0000 | 4d8b 7528 | 4c3b f20f 
  0x000000011eb0f6c0: 850f 0000 | 0049 8345 | 3001 4983 | 5d30 00e9 | 4e00 0000 | 4d85 f674 | 0f49 8345 | 0801 4983 
  0x000000011eb0f6e0: 5d08 00e9 | 3a00 0000 | 4989 5528 | 41be 0100 | 0000 4d89 | 7530 e927 | 0000 0049 | 3b55 280f 
  0x000000011eb0f700: 850f 0000 | 0049 8345 | 3001 4983 | 5d30 00e9 | 0e00 0000 | 4989 5518 | 41be 0100 | 0000 4d89 
  0x000000011eb0f720: 7520 4983 | c538 4c89 | 6dd8 488b | 4308 488b | 4008 488b | 4018 8b5b | 2c83 ebf6 | f7db 4c8b 
  0x000000011eb0f740: f245 8b6e | 104f 8dac | eeb8 0100 | 004d 8d34 | de49 8b5d | 0048 3bc3 | 7416 4885 | db0f 842d 
  0x000000011eb0f760: 0200 0049 | 83c5 1049 | 8b5d 0048 | 3bc3 75ea | 458b 6d08 | 4b8b 1c2e | 4885 db0f | 8462 0100 
  0x000000011eb0f780: 0048 8b55 | d848 85d2 | 0f84 3501 | 0000 807a | c80b 0f85 | 2b01 0000 | 4883 c208 | 4c8b 6af8 
  0x000000011eb0f7a0: 4183 ed00 | 4183 fd02 | 0f8c 0a01 | 0000 4c8b | 6b08 450f | b76d 2c4c | 2b2a 4183 | ed01 4e8b 
  0x000000011eb0f7c0: 6cec 084d | 85ed 7507 | 4883 4a08 | 01eb 5345 | 8b6d 0849 | ba00 0000 | 0008 0000 | 004d 03ea 
  0x000000011eb0f7e0: 4c33 6a08 | 49f7 c5fc | ffff ff74 | 3549 f7c5 | 0200 0000 | 752c 4881 | 7a08 0000 | 0000 741e 
  0x000000011eb0f800: 4881 7a08 | 0100 0000 | 7414 4c33 | 6a08 49f7 | c5fc ffff | ff74 0b48 | 834a 0802 | eb04 4c89 
  0x000000011eb0f820: 6a08 4883 | c210 4c8b | 6ae8 4183 | ed02 4183 | fd02 0f8c | 8000 0000 | 4c8b 6b08 | 450f b76d 
  0x000000011eb0f840: 2c4c 2b2a | 4183 ed01 | 4e8b 6cec | 084d 85ed | 7507 4883 | 4a08 01eb | 5345 8b6d | 0849 ba00 
  0x000000011eb0f860: 0000 0008 | 0000 004d | 03ea 4c33 | 6a08 49f7 | c5fc ffff | ff74 3549 | f7c5 0200 | 0000 752c 
  0x000000011eb0f880: 4881 7a08 | 0000 0000 | 741e 4881 | 7a08 0100 | 0000 7414 | 4c33 6a08 | 49f7 c5fc | ffff ff74 
  0x000000011eb0f8a0: 0b48 834a | 0802 eb04 | 4c89 6a08 | 4883 c210 | 4c8b 6ad8 | 4183 ed04 | 41c1 e503 | 4903 d548 
  0x000000011eb0f8c0: 8955 d84c | 8d6c 2408 | 4c89 6df0 | ff63 5048 | bfe4 7d3d | 0901 0000 | 0048 83e4 | f0e8 3ef0 
  0x000000011eb0f8e0: 4fea f45b | 4c8b 6dc0 | 4c8b 75c8 | 488b f248 | 8bd1 e805 | 0000 00e9 | 8000 0000 | 488d 4424 
  0x000000011eb0f900: 084c 896d | c049 8bff | c5f8 7749 | 89af 8002 | 0000 4989 | 8770 0200 | 00f7 c40f | 0000 000f 
  0x000000011eb0f920: 8412 0000 | 0048 83ec | 08e8 c21f | 28ea 4883 | c408 e905 | 0000 00e8 | b41f 28ea | 49c7 8770 
  0x000000011eb0f940: 0200 0000 | 0000 0049 | c787 8002 | 0000 0000 | 0000 49c7 | 8778 0200 | 0000 0000 | 00c5 f877 
  0x000000011eb0f960: 4981 7f08 | 0000 0000 | 0f84 0500 | 0000 e98d | 62fe ff4c | 8b6d c04c | 8b75 c8c3 | 48bf e47d 
  0x000000011eb0f980: 3d09 0100 | 0000 4883 | e4f0 e891 | ef4f eaf4 | 5b4c 8b6d | c04c 8b75 | c848 8bf2 | e805 0000 
  0x000000011eb0f9a0: 00e9 8300 | 0000 488b | d048 8d44 | 2408 4c89 | 6dc0 498b | ffc5 f877 | 4989 af80 | 0200 0049 
  0x000000011eb0f9c0: 8987 7002 | 0000 f7c4 | 0f00 0000 | 0f84 1200 | 0000 4883 | ec08 e8a5 | 2128 ea48 | 83c4 08e9 
  0x000000011eb0f9e0: 0500 0000 | e897 2128 | ea49 c787 | 7002 0000 | 0000 0000 | 49c7 8780 | 0200 0000 | 0000 0049 
  0x000000011eb0fa00: c787 7802 | 0000 0000 | 0000 c5f8 | 7749 817f | 0800 0000 | 000f 8405 | 0000 00e9 | e061 feff 
  0x000000011eb0fa20: 4c8b 6dc0 | 4c8b 75c8 | c348 bfe4 | 7d3d 0901 | 0000 0048 | 83e4 f0e8 | e4ee 4fea | f466 6690 
[/MachCode]

Compiled method (c1)    6314  949   !   3       sun.lwawt.macosx.LWCToolkit$CallableWrapper::run (23 bytes)
 total in heap  [0x000000011f3b2090,0x000000011f3b2608] = 1400
 relocation     [0x000000011f3b21f0,0x000000011f3b2240] = 80
 main code      [0x000000011f3b2240,0x000000011f3b2500] = 704
 stub code      [0x000000011f3b2500,0x000000011f3b2540] = 64
 metadata       [0x000000011f3b2540,0x000000011f3b2548] = 8
 scopes data    [0x000000011f3b2548,0x000000011f3b2570] = 40
 scopes pcs     [0x000000011f3b2570,0x000000011f3b25c0] = 80
 dependencies   [0x000000011f3b25c0,0x000000011f3b25c8] = 8
 handler table  [0x000000011f3b25c8,0x000000011f3b25f8] = 48
 nul chk table  [0x000000011f3b25f8,0x000000011f3b2608] = 16

[Constant Pool (empty)]

[MachCode]
[Entry Point]
  # {method} {0x00000001400baca8} 'run' '()V' in 'sun/lwawt/macosx/LWCToolkit$CallableWrapper'
  #           [sp+0x40]  (sp of caller)
  0x000000011f3b2240: 448b 5608 | 49bb 0000 | 0000 0800 | 0000 4d03 | d34c 3bd0 

  0x000000011f3b2254: ;   {runtime_call ic_miss_stub}
  0x000000011f3b2254: 0f85 26f5 | 78ff 660f | 1f44 0000 
[Verified Entry Point]
  0x000000011f3b2260: 8984 2400 | c0fe ff55 | 4883 ec30 

  0x000000011f3b226c: ;   {metadata(method data for {method} {0x00000001400baca8} 'run' '()V' in 'sun/lwawt/macosx/LWCToolkit$CallableWrapper')}
  0x000000011f3b226c: 48bf d822 | 2940 0100 | 0000 8b9f | ac00 0000 | 83c3 0289 | 9fac 0000 | 0081 e3fe | 0700 0083 
  0x000000011f3b228c: fb00 0f84 | 7001 0000 | 8b7e 0c48 | c1e7 0348 | 3b07 488b 

  0x000000011f3b22a0: ;   {metadata(method data for {method} {0x00000001400baca8} 'run' '()V' in 'sun/lwawt/macosx/LWCToolkit$CallableWrapper')}
  0x000000011f3b22a0: df48 b8d8 | 2229 4001 | 0000 008b | 5b08 49ba | 0000 0000 | 0800 0000 | 4903 da48 | 3b98 0001 
  0x000000011f3b22c0: 0000 750d | 4883 8008 | 0100 0001 | e966 0000 | 0048 3b98 | 1001 0000 | 750d 4883 | 8018 0100 
  0x000000011f3b22e0: 0001 e950 | 0000 0048 | 81b8 0001 | 0000 0000 | 0000 7517 | 4889 9800 | 0100 0048 | c780 0801 
  0x000000011f3b2300: 0000 0100 | 0000 e92c | 0000 0048 | 81b8 1001 | 0000 0000 | 0000 7517 | 4889 9810 | 0100 0048 
  0x000000011f3b2320: c780 1801 | 0000 0100 | 0000 e908 | 0000 0048 | 8380 f000 | 0000 0148 | 8974 2420 | 488b f766 
  0x000000011f3b2340: 0f1f 4400 | 0048 b8f0 | b0ea ac9d 

  0x000000011f3b234c: ;   {virtual_call}
  0x000000011f3b234c: 7f00 00e8 

  0x000000011f3b2350: ; ImmutableOopMap {[32]=Oop }
                      ;*invokeinterface call {reexecute=0 rethrow=0 return_oop=0}
                      ; - sun.lwawt.macosx.LWCToolkit$CallableWrapper::run@5 (line 698)
  0x000000011f3b2350: bc4a 85ff | 410f be77 | 3883 fe00 | 488b 7424 | 200f 85c3 | 0000 004c | 8bd0 49c1 | ea03 4489 
  0x000000011f3b2370: 5610 488b | fe48 33f8 | 48c1 ef16 | 4883 ff00 | 0f85 c300 

  0x000000011f3b2384: ;   {metadata(method data for {method} {0x00000001400baca8} 'run' '()V' in 'sun/lwawt/macosx/LWCToolkit$CallableWrapper')}
  0x000000011f3b2384: 0000 48b8 | d822 2940 | 0100 0000 | ff80 2801 | 0000 4883 

  0x000000011f3b2398: ;   {poll_return}
  0x000000011f3b2398: c430 5d49 | 3ba7 3803 | 0000 0f87 | b900 0000 | c349 8b87 | c803 0000 | 4d33 d24d | 8997 c803 
  0x000000011f3b23b8: 0000 4d33 | d24d 8997 | d003 0000 | 410f be7f | 3883 ff00 | 0f85 a500 | 0000 4c8b | d049 c1ea 
  0x000000011f3b23d8: 0344 8956 | 1448 8bfe | 4833 f848 | c1ef 1648 | 83ff 000f | 85a5 0000 | 0048 83c4 

  0x000000011f3b23f4: ;   {poll_return}
  0x000000011f3b23f4: 305d 493b | a738 0300 | 000f 87ab | 0000 00c3 

  0x000000011f3b2404: ;   {metadata({method} {0x00000001400baca8} 'run' '()V' in 'sun/lwawt/macosx/LWCToolkit$CallableWrapper')}
  0x000000011f3b2404: 49ba a8ac | 0b40 0100 | 0000 4c89 | 5424 0848 | c704 24ff 

  0x000000011f3b2418: ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000011f3b2418: ffff ffe8 

  0x000000011f3b241c: ; ImmutableOopMap {rsi=Oop }
                      ;*synchronization entry
                      ; - sun.lwawt.macosx.LWCToolkit$CallableWrapper::run@-1 (line 698)
  0x000000011f3b241c: e0ca 83ff | e96f feff 

  0x000000011f3b2424: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000011f3b2424: ffe8 f670 

  0x000000011f3b2428: ; ImmutableOopMap {rsi=Oop rdi=Oop }
                      ;*invokeinterface call {reexecute=0 rethrow=0 return_oop=0}
                      ; - sun.lwawt.macosx.LWCToolkit$CallableWrapper::run@5 (line 698)
  0x000000011f3b2428: 83ff 8b7e | 1048 c1e7 | 0348 83ff | 000f 842c | ffff ff48 

  0x000000011f3b243c: ;   {runtime_call g1_pre_barrier_slow}
  0x000000011f3b243c: 893c 24e8 | bcd0 83ff | e91e ffff | ff48 83f8 | 000f 8433 | ffff ff48 

  0x000000011f3b2454: ;   {runtime_call g1_post_barrier_slow}
  0x000000011f3b2454: 8934 24e8 | a4d3 83ff | e925 ffff 

  0x000000011f3b2460: ;   {internal_word}
  0x000000011f3b2460: ff49 ba9b | 233b 1f01 | 0000 004d | 8997 5003 

  0x000000011f3b2470: ;   {runtime_call SafepointBlob}
  0x000000011f3b2470: 0000 e989 | 5c79 ff8b | 7e14 48c1 | e703 4883 | ff00 0f84 | 4aff ffff | 4889 3c24 

  0x000000011f3b248c: ;   {runtime_call g1_pre_barrier_slow}
  0x000000011f3b248c: e86f d083 | ffe9 3cff | ffff 4883 | f800 0f84 | 51ff ffff | 4889 3424 

  0x000000011f3b24a4: ;   {runtime_call g1_post_barrier_slow}
  0x000000011f3b24a4: e857 d383 | ffe9 43ff 

  0x000000011f3b24ac: ;   {internal_word}
  0x000000011f3b24ac: ffff 49ba | f623 3b1f | 0100 0000 | 4d89 9750 

  0x000000011f3b24bc: ;   {runtime_call SafepointBlob}
  0x000000011f3b24bc: 0300 00e9 | 3c5c 79ff | 488b 7424 | 20e9 dbfe | ffff 9090 | 498b 87c8 | 0300 0049 | c787 c803 
  0x000000011f3b24dc: 0000 0000 | 0000 49c7 | 87d0 0300 | 0000 0000 | 0048 83c4 

  0x000000011f3b24f0: ;   {runtime_call unwind_exception Runtime1 stub}
  0x000000011f3b24f0: 305d e989 | 907a fff4 | f4f4 f4f4 | f4f4 f4f4 
[Stub Code]
  0x000000011f3b2500: ;   {no_reloc}
  0x000000011f3b2500: 0f1f 4400 

  0x000000011f3b2504: ;   {static_stub}
  0x000000011f3b2504: 0048 bb00 | 0000 0000 

  0x000000011f3b250c: ;   {runtime_call}
  0x000000011f3b250c: 0000 00e9 | fbff ffff 
[Exception Handler]
  0x000000011f3b2514: ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x000000011f3b2514: e8e7 8d83 

  0x000000011f3b2518: ;   {external_word}
  0x000000011f3b2518: ff48 bfe4 | 7d3d 0901 | 0000 0048 

  0x000000011f3b2524: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f3b2524: 83e4 f0e8 | f4c3 c5e9 

  0x000000011f3b252c: ;   {section_word}
  0x000000011f3b252c: f449 ba2d | 253b 1f01 | 0000 0041 

  0x000000011f3b2538: ;   {runtime_call DeoptimizationBlob}
  0x000000011f3b2538: 52e9 624e | 79ff f4f4 
[/MachCode]


Compiled method (c1)    6322  848   !   3       java.awt.event.InvocationEvent::dispatch (69 bytes)
 total in heap  [0x000000011f388590,0x000000011f389000] = 2672
 relocation     [0x000000011f3886f0,0x000000011f388780] = 144
 main code      [0x000000011f388780,0x000000011f388de0] = 1632
 stub code      [0x000000011f388de0,0x000000011f388e50] = 112
 metadata       [0x000000011f388e50,0x000000011f388e58] = 8
 scopes data    [0x000000011f388e58,0x000000011f388eb0] = 88
 scopes pcs     [0x000000011f388eb0,0x000000011f388f50] = 160
 dependencies   [0x000000011f388f50,0x000000011f388f58] = 8
 handler table  [0x000000011f388f58,0x000000011f388fe8] = 144
 nul chk table  [0x000000011f388fe8,0x000000011f389000] = 24

[Constant Pool (empty)]

[MachCode]
[Entry Point]
  # {method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent'
  #           [sp+0x50]  (sp of caller)
  0x000000011f388780: 448b 5608 | 49bb 0000 | 0000 0800 | 0000 4d03 | d34c 3bd0 

  0x000000011f388794: ;   {runtime_call ic_miss_stub}
  0x000000011f388794: 0f85 e68f | 7bff 660f | 1f44 0000 
[Verified Entry Point]
  0x000000011f3887a0: 8984 2400 | c0fe ff55 | 4883 ec40 | 4889 7424 

  0x000000011f3887b0: ;   {metadata(method data for {method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent')}
  0x000000011f3887b0: 2048 bf88 | db27 4001 | 0000 008b | 9fac 0000 | 0083 c302 | 899f ac00 | 0000 81e3 | fe07 0000 
  0x000000011f3887d0: 83fb 000f | 8415 0500 | 000f be7e | 2983 ff00 

  0x000000011f3887e0: ;   {metadata(method data for {method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent')}
  0x000000011f3887e0: 48bf 88db | 2740 0100 | 0000 48bb | f000 0000 | 0000 0000 | 0f84 0a00 | 0000 48bb | 0001 0000 
  0x000000011f388800: 0000 0000 | 488b 041f | 488d 4001 | 4889 041f | 0f84 d000 | 0000 8b7e | 2c48 c1e7 | 0348 3b07 
  0x000000011f388820: ;   {metadata(method data for {method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent')}
  0x000000011f388820: 488b df48 | b888 db27 | 4001 0000 | 008b 5b08 | 49ba 0000 | 0000 0800 | 0000 4903 | da48 3b98 
  0x000000011f388840: 2001 0000 | 750d 4883 | 8028 0100 | 0001 e966 | 0000 0048 | 3b98 3001 | 0000 750d | 4883 8038 
  0x000000011f388860: 0100 0001 | e950 0000 | 0048 81b8 | 2001 0000 | 0000 0000 | 7517 4889 | 9820 0100 | 0048 c780 
  0x000000011f388880: 2801 0000 | 0100 0000 | e92c 0000 | 0048 81b8 | 3001 0000 | 0000 0000 | 7517 4889 | 9830 0100 
  0x000000011f3888a0: 0048 c780 | 3801 0000 | 0100 0000 | e908 0000 | 0048 8380 | 1001 0000 | 0148 8bf7 | 9048 b820 
  0x000000011f3888c0: 0bf2 3c9d 

  0x000000011f3888c4: ;   {virtual_call}
  0x000000011f3888c4: 7f00 00e8 

  0x000000011f3888c8: ; ImmutableOopMap {[32]=Oop }
                      ;*invokeinterface run {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.awt.event.InvocationEvent::dispatch@11 (line 308)
  0x000000011f3888c8: 44e5 87ff 

  0x000000011f3888cc: ;   {metadata(method data for {method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent')}
  0x000000011f3888cc: 48be 88db | 2740 0100 | 0000 ff86 | 4801 0000 | 488b 7424 | 20e9 7303 | 0000 8b7e | 2c48 c1e7 
  0x000000011f3888ec: 0348 3b07 

  0x000000011f3888f0: ;   {metadata(method data for {method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent')}
  0x000000011f3888f0: 488b df48 | b888 db27 | 4001 0000 | 008b 5b08 | 49ba 0000 | 0000 0800 | 0000 4903 | da48 3b98 
  0x000000011f388910: 1802 0000 | 750d 4883 | 8020 0200 | 0001 e966 | 0000 0048 | 3b98 2802 | 0000 750d | 4883 8030 
  0x000000011f388930: 0200 0001 | e950 0000 | 0048 81b8 | 1802 0000 | 0000 0000 | 7517 4889 | 9818 0200 | 0048 c780 
  0x000000011f388950: 2002 0000 | 0100 0000 | e92c 0000 | 0048 81b8 | 2802 0000 | 0000 0000 | 7517 4889 | 9828 0200 
  0x000000011f388970: 0048 c780 | 3002 0000 | 0100 0000 | e908 0000 | 0048 8380 | 0802 0000 | 0148 8bf7 | 9048 b8c0 
  0x000000011f388990: 7785 ad9d 

  0x000000011f388994: ;   {virtual_call}
  0x000000011f388994: 7f00 00e8 

  0x000000011f388998: ; ImmutableOopMap {[32]=Oop }
                      ;*invokeinterface run {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.awt.event.InvocationEvent::dispatch@47 (line 318)
  0x000000011f388998: 74e4 87ff | 488b 7424 | 20e9 b302 | 0000 498b | 87c8 0300 | 004d 33d2 | 4d89 97c8 | 0300 004d 
  0x000000011f3889b8: 33d2 4d89 | 97d0 0300 | 0048 83f8 

  0x000000011f3889c4: ;   {metadata(method data for {method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent')}
  0x000000011f3889c4: 0075 1648 | bb88 db27 | 4001 0000 | 0080 8b59 | 0100 0001 | e9d3 0000 

  0x000000011f3889dc: ;   {metadata('java/lang/Exception')}
  0x000000011f3889dc: 0048 bfe8 | 5f07 0008 | 0000 008b | 5808 49ba | 0000 0000 | 0800 0000 | 4903 da48 | 3b7b 400f 
  0x000000011f3889fc: 8593 0000 

  0x000000011f388a00: ;   {metadata(method data for {method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent')}
  0x000000011f388a00: 0048 bb88 | db27 4001 | 0000 008b | 7808 49ba | 0000 0000 | 0800 0000 | 4903 fa48 | 3bbb 7001 
  0x000000011f388a20: 0000 750d | 4883 8378 | 0100 0001 | e984 0000 | 0048 3bbb | 8001 0000 | 750d 4883 | 8388 0100 
  0x000000011f388a40: 0001 e96e | 0000 0048 | 81bb 7001 | 0000 0000 | 0000 7517 | 4889 bb70 | 0100 0048 | c783 7801 
  0x000000011f388a60: 0000 0100 | 0000 e94a | 0000 0048 | 81bb 8001 | 0000 0000 | 0000 7517 | 4889 bb80 | 0100 0048 
  0x000000011f388a80: c783 8801 | 0000 0100 | 0000 e926 | 0000 00e9 | 2100 0000 

  0x000000011f388a94: ;   {metadata(method data for {method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent')}
  0x000000011f388a94: 48bb 88db | 2740 0100 | 0000 4883 | ab60 0100 | 0001 e905 | 0000 00e9 | 0500 0000 | 4833 d2eb 
  0x000000011f388ab4: 0a48 ba01 | 0000 0000 | 0000 0083 

  0x000000011f388ac0: ;   {metadata(method data for {method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent')}
  0x000000011f388ac0: fa00 48ba | 88db 2740 | 0100 0000 | 48be 9801 | 0000 0000 | 0000 0f84 | 0a00 0000 | 48be a801 
  0x000000011f388ae0: 0000 0000 | 0000 488b | 3c32 488d | 7f01 4889 | 3c32 488b | 7424 200f | 841f 0100 | 0048 83f8 
  0x000000011f388b00: ;   {metadata(method data for {method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent')}
  0x000000011f388b00: 0075 1648 | b988 db27 | 4001 0000 | 0080 89b1 | 0100 0001 | e9d3 0000 

  0x000000011f388b18: ;   {metadata('java/lang/Exception')}
  0x000000011f388b18: 0048 bbe8 | 5f07 0008 | 0000 008b | 4808 49ba | 0000 0000 | 0800 0000 | 4903 ca48 | 3b59 400f 
  0x000000011f388b38: 8593 0000 

  0x000000011f388b3c: ;   {metadata(method data for {method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent')}
  0x000000011f388b3c: 0048 b988 | db27 4001 | 0000 008b | 5808 49ba | 0000 0000 | 0800 0000 | 4903 da48 | 3b99 c801 
  0x000000011f388b5c: 0000 750d | 4883 81d0 | 0100 0001 | e97f 0000 | 0048 3b99 | d801 0000 | 750d 4883 | 81e0 0100 
  0x000000011f388b7c: 0001 e969 | 0000 0048 | 81b9 c801 | 0000 0000 | 0000 7517 | 4889 99c8 | 0100 0048 | c781 d001 
  0x000000011f388b9c: 0000 0100 | 0000 e945 | 0000 0048 | 81b9 d801 | 0000 0000 | 0000 7517 | 4889 99d8 | 0100 0048 
  0x000000011f388bbc: c781 e001 | 0000 0100 | 0000 e921 | 0000 00e9 | 1c00 0000 

  0x000000011f388bd0: ;   {metadata(method data for {method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent')}
  0x000000011f388bd0: 48b9 88db | 2740 0100 | 0000 4883 | a9b8 0100 | 0001 e932 | 0100 00e9 | 0000 0000 | 488b d041 
  0x000000011f388bf0: 0fbe 7f38 | 83ff 000f | 8525 0100 | 004c 8bd2 | 49c1 ea03 | 4489 5638 | 488b fe48 | 33fa 48c1 
  0x000000011f388c10: ef16 4883 | ff00 0f85 | 2501 0000 | 410f be57 | 3883 fa00 | 0f85 2f01 | 0000 4c8b | d049 c1ea 
  0x000000011f388c30: 0344 8956 | 3c48 8bd6 | 4833 d048 | c1ea 1648 | 83fa 000f | 852f 0100 

  0x000000011f388c48: ;   {metadata(method data for {method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent')}
  0x000000011f388c48: 0048 ba88 | db27 4001 | 0000 00ff | 82f0 0100 | 0048 8bd6 

  0x000000011f388c5c: ;   {metadata(method data for {method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent')}
  0x000000011f388c5c: 48bf 88db | 2740 0100 | 0000 4883 | 8740 0200 | 0001 ba01 | 0000 000f 

  0x000000011f388c74: ;   {optimized virtual_call}
  0x000000011f388c74: 1f40 00e8 

  0x000000011f388c78: ; ImmutableOopMap {}
                      ;*invokevirtual finishedDispatching {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.awt.event.InvocationEvent::dispatch@54 (line 321)
  0x000000011f388c78: 8405 0000 

  0x000000011f388c7c: ;   {metadata(method data for {method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent')}
  0x000000011f388c7c: 48b8 88db | 2740 0100 | 0000 ff80 | 7802 0000 | 4883 c440 

  0x000000011f388c90: ;   {poll_return}
  0x000000011f388c90: 5d49 3ba7 | 3803 0000 | 0f87 f200 | 0000 c348 | 8b74 2420 | 498b 87c8 | 0300 004d | 33d2 4d89 
  0x000000011f388cb0: 97c8 0300 | 004d 33d2 | 4d89 97d0 | 0300 0048 

  0x000000011f388cc0: ;   {metadata(method data for {method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent')}
  0x000000011f388cc0: 8bd6 48bf | 88db 2740 | 0100 0000 | 4883 8790 | 0200 0001 | ba01 0000 | 0048 8944 

  0x000000011f388cdc: ;   {optimized virtual_call}
  0x000000011f388cdc: 2428 90e8 

  0x000000011f388ce0: ; ImmutableOopMap {[40]=Oop }
                      ;*invokevirtual finishedDispatching {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.awt.event.InvocationEvent::dispatch@63 (line 321)
  0x000000011f388ce0: 9c8d 7bff | 488b 4424 | 28e9 d700 

  0x000000011f388cec: ;   {metadata({method} {0x000000013ff67288} 'dispatch' '()V' in 'java/awt/event/InvocationEvent')}
  0x000000011f388cec: 0000 49ba | 8872 f63f | 0100 0000 | 4c89 5424 | 0848 c704 | 24ff ffff 

  0x000000011f388d04: ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000011f388d04: ffe8 f661 

  0x000000011f388d08: ; ImmutableOopMap {rsi=Oop [32]=Oop }
                      ;*synchronization entry
                      ; - java.awt.event.InvocationEvent::dispatch@-1 (line 306)
  0x000000011f388d08: 86ff e9ca 

  0x000000011f388d0c: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000011f388d0c: faff ffe8 

  0x000000011f388d10: ; ImmutableOopMap {rsi=Oop [32]=Oop rdi=Oop }
                      ;*invokeinterface run {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.awt.event.InvocationEvent::dispatch@11 (line 308)
  0x000000011f388d10: 0c08 86ff 

  0x000000011f388d14: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000011f388d14: e807 0886 

  0x000000011f388d18: ; ImmutableOopMap {rsi=Oop [32]=Oop rdi=Oop }
                      ;*invokeinterface run {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.awt.event.InvocationEvent::dispatch@47 (line 318)
  0x000000011f388d18: ff48 8904 

  0x000000011f388d1c: ;   {runtime_call throw_class_cast_exception Runtime1 stub}
  0x000000011f388d1c: 24e8 fe2b 

  0x000000011f388d20: ; ImmutableOopMap {rax=Oop rsi=Oop [32]=Oop }
                      ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.awt.event.InvocationEvent::dispatch@29 (line 312)
  0x000000011f388d20: 86ff 8b7e | 3848 c1e7 | 0348 83ff | 000f 84ca | feff ff48 

  0x000000011f388d34: ;   {runtime_call g1_pre_barrier_slow}
  0x000000011f388d34: 893c 24e8 | c467 86ff | e9bc feff | ff48 83fa | 000f 84d1 | feff ff48 

  0x000000011f388d4c: ;   {runtime_call g1_post_barrier_slow}
  0x000000011f388d4c: 8934 24e8 | ac6a 86ff | e9c3 feff | ff8b 563c | 48c1 e203 | 4883 fa00 | 0f84 c0fe | ffff 4889 
  0x000000011f388d6c: ;   {runtime_call g1_pre_barrier_slow}
  0x000000011f388d6c: 1424 e88d | 6786 ffe9 | b2fe ffff | 4883 f800 | 0f84 c7fe | ffff 4889 

  0x000000011f388d84: ;   {runtime_call g1_post_barrier_slow}
  0x000000011f388d84: 3424 e875 | 6a86 ffe9 | b9fe ffff 

  0x000000011f388d90: ;   {internal_word}
  0x000000011f388d90: 49ba 918c | 381f 0100 | 0000 4d89 | 9750 0300 

  0x000000011f388da0: ;   {runtime_call SafepointBlob}
  0x000000011f388da0: 00e9 5af3 | 7bff 9090 | 498b 87c8 | 0300 0049 | c787 c803 | 0000 0000 | 0000 49c7 | 87d0 0300 
  0x000000011f388dc0: 0000 0000 | 0048 83c4 

  0x000000011f388dc8: ;   {runtime_call unwind_exception Runtime1 stub}
  0x000000011f388dc8: 405d e9b1 | 277d fff4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 
[Stub Code]
  0x000000011f388de0: ;   {no_reloc}
  0x000000011f388de0: 0f1f 4400 

  0x000000011f388de4: ;   {static_stub}
  0x000000011f388de4: 0048 bb00 | 0000 0000 

  0x000000011f388dec: ;   {runtime_call}
  0x000000011f388dec: 0000 00e9 | fbff ffff 

  0x000000011f388df4: ;   {static_stub}
  0x000000011f388df4: 9048 bb00 | 0000 0000 

  0x000000011f388dfc: ;   {runtime_call}
  0x000000011f388dfc: 0000 00e9 | fbff ffff 

  0x000000011f388e04: ;   {static_stub}
  0x000000011f388e04: 9048 bb00 | 0000 0000 

  0x000000011f388e0c: ;   {runtime_call}
  0x000000011f388e0c: 0000 00e9 | fbff ffff 

  0x000000011f388e14: ;   {static_stub}
  0x000000011f388e14: 9048 bb00 | 0000 0000 

  0x000000011f388e1c: ;   {runtime_call}
  0x000000011f388e1c: 0000 00e9 | fbff ffff 
[Exception Handler]
  0x000000011f388e24: ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x000000011f388e24: e8d7 2486 

  0x000000011f388e28: ;   {external_word}
  0x000000011f388e28: ff48 bfe4 | 7d3d 0901 | 0000 0048 

  0x000000011f388e34: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f388e34: 83e4 f0e8 | e45a c8e9 

  0x000000011f388e3c: ;   {section_word}
  0x000000011f388e3c: f449 ba3d | 8e38 1f01 | 0000 0041 

  0x000000011f388e48: ;   {runtime_call DeoptimizationBlob}
  0x000000011f388e48: 52e9 52e5 | 7bff f4f4 
[/MachCode]


---------------  P R O C E S S  ---------------

Threads class SMR info:
_java_thread_list=0x00007f9dad9b2490, length=16, elements={
0x00007f9daf008a00, 0x00007f9dae808800, 0x00007f9d8d016200, 0x00007f9d8d018000,
0x00007f9dae05a400, 0x00007f9dad008200, 0x00007f9dae05aa00, 0x00007f9d8e010200,
0x00007f9dad008800, 0x00007f9dae824200, 0x00007f9dae05b000, 0x00007f9dae811c00,
0x00007f9dae09f400, 0x00007f9daf08cc00, 0x00007f9d8d073a00, 0x00007f9dae139a00
}

Java Threads: ( => current thread )
  0x00007f9daf008a00 JavaThread ""main"" [_thread_blocked, id=8451, stack(0x00007000010df000,0x00007000011df000)]
  0x00007f9dae808800 JavaThread ""Reference Handler"" daemon [_thread_blocked, id=15363, stack(0x00007000017f4000,0x00007000018f4000)]
  0x00007f9d8d016200 JavaThread ""Finalizer"" daemon [_thread_blocked, id=15875, stack(0x00007000018f7000,0x00007000019f7000)]
  0x00007f9d8d018000 JavaThread ""Signal Dispatcher"" daemon [_thread_blocked, id=41987, stack(0x0000700001b00000,0x0000700001c00000)]
  0x00007f9dae05a400 JavaThread ""Service Thread"" daemon [_thread_blocked, id=41731, stack(0x0000700001c03000,0x0000700001d03000)]
  0x00007f9dad008200 JavaThread ""Monitor Deflation Thread"" daemon [_thread_blocked, id=41475, stack(0x0000700001d06000,0x0000700001e06000)]
  0x00007f9dae05aa00 JavaThread ""C2 CompilerThread0"" daemon [_thread_blocked, id=41219, stack(0x0000700001e09000,0x0000700001f09000)]
  0x00007f9d8e010200 JavaThread ""C1 CompilerThread0"" daemon [_thread_blocked, id=40707, stack(0x0000700001f0c000,0x000070000200c000)]
  0x00007f9dad008800 JavaThread ""Sweeper thread"" daemon [_thread_blocked, id=23555, stack(0x000070000200f000,0x000070000210f000)]
  0x00007f9dae824200 JavaThread ""Notification Thread"" daemon [_thread_blocked, id=24067, stack(0x0000700002112000,0x0000700002212000)]
  0x00007f9dae05b000 JavaThread ""Common-Cleaner"" daemon [_thread_blocked, id=24579, stack(0x0000700002318000,0x0000700002418000)]
  0x00007f9dae811c00 JavaThread ""AppKit Thread"" daemon [_thread_in_native, id=775, stack(0x00007ffee6c12000,0x00007ffee7412000)]
  0x00007f9dae09f400 JavaThread ""AWT-Shutdown"" [_thread_blocked, id=30243, stack(0x000070000241b000,0x000070000251b000)]
  0x00007f9daf08cc00 JavaThread ""Java2D Queue Flusher"" daemon [_thread_blocked, id=54787, stack(0x0000700002830000,0x0000700002930000)]
  0x00007f9d8d073a00 JavaThread ""Java2D Disposer"" daemon [_thread_blocked, id=55859, stack(0x0000700002933000,0x0000700002a33000)]
=>0x00007f9dae139a00 JavaThread ""AWT-EventQueue-0"" [_thread_in_Java, id=58371, stack(0x0000700002a36000,0x0000700002b36000)]

Other Threads:
  0x00007f9dacf4ae60 VMThread ""VM Thread"" [stack: 0x00007000016f1000,0x00007000017f1000] [id=14851]
  0x00007f9dacf50f10 WatcherThread ""VM Periodic Task Thread"" [stack: 0x0000700002215000,0x0000700002315000] [id=40195]
  0x00007f9dad915e50 WorkerThread ""GC Thread#0"" [stack: 0x00007000011e2000,0x00007000012e2000] [id=19715]
  0x00007f9dacc08c20 ConcurrentGCThread ""G1 Main Marker"" [stack: 0x00007000012e5000,0x00007000013e5000] [id=19459]
  0x00007f9dacc09980 WorkerThread ""G1 Conc#0"" [stack: 0x00007000013e8000,0x00007000014e8000] [id=13059]
  0x00007f9dacf3fb70 ConcurrentGCThread ""G1 Refine#0"" [stack: 0x00007000014eb000,0x00007000015eb000] [id=13315]
  0x00007f9dacf40870 ConcurrentGCThread ""G1 Service"" [stack: 0x00007000015ee000,0x00007000016ee000] [id=13827]

Threads with active compile tasks:

VM state: not at safepoint (normal execution)

VM Mutex/Monitor currently owned by a thread: None

Heap address: 0x0000000600000000, size: 8192 MB, Compressed Oops mode: Zero based, Oop shift amount: 3

CDS archive(s) mapped at: [0x0000000800000000-0x0000000800ba3000-0x0000000800ba3000), size 12201984, SharedBaseAddress: 0x0000000800000000, ArchiveRelocationMode: 0.
Compressed class space mapped at: 0x0000000800c00000-0x0000000840c00000, reserved size: 1073741824
Narrow klass base: 0x0000000800000000, Narrow klass shift: 0, Narrow klass range: 0x100000000

GC Precious Log:
 CardTable entry size: 512
 Card Set container configuration: InlinePtr #cards 4 size 8 Array Of Cards #cards 32 size 80 Howl #buckets 8 coarsen threshold 7372 Howl Bitmap #cards 1024 size 144 coarsen threshold 921 Card regions per heap region 1 cards per card region 8192
 CPUs: 16 total, 16 available
 Memory: 32768M
 Large Page Support: Disabled
 NUMA Support: Disabled
 Compressed Oops: Enabled (Zero based)
 Heap Region Size: 4M
 Heap Min Capacity: 8M
 Heap Initial Capacity: 512M
 Heap Max Capacity: 8G
 Pre-touch: Disabled
 Parallel Workers: 13
 Concurrent Workers: 3
 Concurrent Refinement Workers: 13
 Periodic GC: Disabled

Heap:
 garbage-first heap   total 532480K, used 12184K [0x0000000600000000, 0x0000000800000000)
  region size 4096K, 3 young (12288K), 0 survivors (0K)
 Metaspace       used 7546K, committed 7744K, reserved 1114112K
  class space    used 863K, committed 960K, reserved 1048576K

Heap Regions: E=young(eden), S=young(survivor), O=old, HS=humongous(starts), HC=humongous(continues), CS=collection set, F=free, OA=open archive, CA=closed archive, TAMS=top-at-mark-start (previous, next)
|   0|0x0000000600000000, 0x0000000600000000, 0x0000000600400000|  0%| F|  |TAMS 0x0000000600000000, 0x0000000600000000| Untracked 
|   1|0x0000000600400000, 0x0000000600400000, 0x0000000600800000|  0%| F|  |TAMS 0x0000000600400000, 0x0000000600400000| Untracked 
|   2|0x0000000600800000, 0x0000000600800000, 0x0000000600c00000|  0%| F|  |TAMS 0x0000000600800000, 0x0000000600800000| Untracked 
|   3|0x0000000600c00000, 0x0000000600c00000, 0x0000000601000000|  0%| F|  |TAMS 0x0000000600c00000, 0x0000000600c00000| Untracked 
|   4|0x0000000601000000, 0x0000000601000000, 0x0000000601400000|  0%| F|  |TAMS 0x0000000601000000, 0x0000000601000000| Untracked 
|   5|0x0000000601400000, 0x0000000601400000, 0x0000000601800000|  0%| F|  |TAMS 0x0000000601400000, 0x0000000601400000| Untracked 
|   6|0x0000000601800000, 0x0000000601800000, 0x0000000601c00000|  0%| F|  |TAMS 0x0000000601800000, 0x0000000601800000| Untracked 
|   7|0x0000000601c00000, 0x0000000601c00000, 0x0000000602000000|  0%| F|  |TAMS 0x0000000601c00000, 0x0000000601c00000| Untracked 
|   8|0x0000000602000000, 0x0000000602000000, 0x0000000602400000|  0%| F|  |TAMS 0x0000000602000000, 0x0000000602000000| Untracked 
|   9|0x0000000602400000, 0x0000000602400000, 0x0000000602800000|  0%| F|  |TAMS 0x0000000602400000, 0x0000000602400000| Untracked 
|  10|0x0000000602800000, 0x0000000602800000, 0x0000000602c00000|  0%| F|  |TAMS 0x0000000602800000, 0x0000000602800000| Untracked 
|  11|0x0000000602c00000, 0x0000000602c00000, 0x0000000603000000|  0%| F|  |TAMS 0x0000000602c00000, 0x0000000602c00000| Untracked 
|  12|0x0000000603000000, 0x0000000603000000, 0x0000000603400000|  0%| F|  |TAMS 0x0000000603000000, 0x0000000603000000| Untracked 
|  13|0x0000000603400000, 0x0000000603400000, 0x0000000603800000|  0%| F|  |TAMS 0x0000000603400000, 0x0000000603400000| Untracked 
|  14|0x0000000603800000, 0x0000000603800000, 0x0000000603c00000|  0%| F|  |TAMS 0x0000000603800000, 0x0000000603800000| Untracked 
|  15|0x0000000603c00000, 0x0000000603c00000, 0x0000000604000000|  0%| F|  |TAMS 0x0000000603c00000, 0x0000000603c00000| Untracked 
|  16|0x0000000604000000, 0x0000000604000000, 0x0000000604400000|  0%| F|  |TAMS 0x0000000604000000, 0x0000000604000000| Untracked 
|  17|0x0000000604400000, 0x0000000604400000, 0x0000000604800000|  0%| F|  |TAMS 0x0000000604400000, 0x0000000604400000| Untracked 
|  18|0x0000000604800000, 0x0000000604800000, 0x0000000604c00000|  0%| F|  |TAMS 0x0000000604800000, 0x0000000604800000| Untracked 
|  19|0x0000000604c00000, 0x0000000604c00000, 0x0000000605000000|  0%| F|  |TAMS 0x0000000604c00000, 0x0000000604c00000| Untracked 
|  20|0x0000000605000000, 0x0000000605000000, 0x0000000605400000|  0%| F|  |TAMS 0x0000000605000000, 0x0000000605000000| Untracked 
|  21|0x0000000605400000, 0x0000000605400000, 0x0000000605800000|  0%| F|  |TAMS 0x0000000605400000, 0x0000000605400000| Untracked 
|  22|0x0000000605800000, 0x0000000605800000, 0x0000000605c00000|  0%| F|  |TAMS 0x0000000605800000, 0x0000000605800000| Untracked 
|  23|0x0000000605c00000, 0x0000000605c00000, 0x0000000606000000|  0%| F|  |TAMS 0x0000000605c00000, 0x0000000605c00000| Untracked 
|  24|0x0000000606000000, 0x0000000606000000, 0x0000000606400000|  0%| F|  |TAMS 0x0000000606000000, 0x0000000606000000| Untracked 
|  25|0x0000000606400000, 0x0000000606400000, 0x0000000606800000|  0%| F|  |TAMS 0x0000000606400000, 0x0000000606400000| Untracked 
|  26|0x0000000606800000, 0x0000000606800000, 0x0000000606c00000|  0%| F|  |TAMS 0x0000000606800000, 0x0000000606800000| Untracked 
|  27|0x0000000606c00000, 0x0000000606c00000, 0x0000000607000000|  0%| F|  |TAMS 0x0000000606c00000, 0x0000000606c00000| Untracked 
|  28|0x0000000607000000, 0x0000000607000000, 0x0000000607400000|  0%| F|  |TAMS 0x0000000607000000, 0x0000000607000000| Untracked 
|  29|0x0000000607400000, 0x0000000607400000, 0x0000000607800000|  0%| F|  |TAMS 0x0000000607400000, 0x0000000607400000| Untracked 
|  30|0x0000000607800000, 0x0000000607800000, 0x0000000607c00000|  0%| F|  |TAMS 0x0000000607800000, 0x0000000607800000| Untracked 
|  31|0x0000000607c00000, 0x0000000607c00000, 0x0000000608000000|  0%| F|  |TAMS 0x0000000607c00000, 0x0000000607c00000| Untracked 
|  32|0x0000000608000000, 0x0000000608000000, 0x0000000608400000|  0%| F|  |TAMS 0x0000000608000000, 0x0000000608000000| Untracked 
|  33|0x0000000608400000, 0x0000000608400000, 0x0000000608800000|  0%| F|  |TAMS 0x0000000608400000, 0x0000000608400000| Untracked 
|  34|0x0000000608800000, 0x0000000608800000, 0x0000000608c00000|  0%| F|  |TAMS 0x0000000608800000, 0x0000000608800000| Untracked 
|  35|0x0000000608c00000, 0x0000000608c00000, 0x0000000609000000|  0%| F|  |TAMS 0x0000000608c00000, 0x0000000608c00000| Untracked 
|  36|0x0000000609000000, 0x0000000609000000, 0x0000000609400000|  0%| F|  |TAMS 0x0000000609000000, 0x0000000609000000| Untracked 
|  37|0x0000000609400000, 0x0000000609400000, 0x0000000609800000|  0%| F|  |TAMS 0x0000000609400000, 0x0000000609400000| Untracked 
|  38|0x0000000609800000, 0x0000000609800000, 0x0000000609c00000|  0%| F|  |TAMS 0x0000000609800000, 0x0000000609800000| Untracked 
|  39|0x0000000609c00000, 0x0000000609c00000, 0x000000060a000000|  0%| F|  |TAMS 0x0000000609c00000, 0x0000000609c00000| Untracked 
|  40|0x000000060a000000, 0x000000060a000000, 0x000000060a400000|  0%| F|  |TAMS 0x000000060a000000, 0x000000060a000000| Untracked 
|  41|0x000000060a400000, 0x000000060a400000, 0x000000060a800000|  0%| F|  |TAMS 0x000000060a400000, 0x000000060a400000| Untracked 
|  42|0x000000060a800000, 0x000000060a800000, 0x000000060ac00000|  0%| F|  |TAMS 0x000000060a800000, 0x000000060a800000| Untracked 
|  43|0x000000060ac00000, 0x000000060ac00000, 0x000000060b000000|  0%| F|  |TAMS 0x000000060ac00000, 0x000000060ac00000| Untracked 
|  44|0x000000060b000000, 0x000000060b000000, 0x000000060b400000|  0%| F|  |TAMS 0x000000060b000000, 0x000000060b000000| Untracked 
|  45|0x000000060b400000, 0x000000060b400000, 0x000000060b800000|  0%| F|  |TAMS 0x000000060b400000, 0x000000060b400000| Untracked 
|  46|0x000000060b800000, 0x000000060b800000, 0x000000060bc00000|  0%| F|  |TAMS 0x000000060b800000, 0x000000060b800000| Untracked 
|  47|0x000000060bc00000, 0x000000060bc00000, 0x000000060c000000|  0%| F|  |TAMS 0x000000060bc00000, 0x000000060bc00000| Untracked 
|  48|0x000000060c000000, 0x000000060c000000, 0x000000060c400000|  0%| F|  |TAMS 0x000000060c000000, 0x000000060c000000| Untracked 
|  49|0x000000060c400000, 0x000000060c400000, 0x000000060c800000|  0%| F|  |TAMS 0x000000060c400000, 0x000000060c400000| Untracked 
|  50|0x000000060c800000, 0x000000060c800000, 0x000000060cc00000|  0%| F|  |TAMS 0x000000060c800000, 0x000000060c800000| Untracked 
|  51|0x000000060cc00000, 0x000000060cc00000, 0x000000060d000000|  0%| F|  |TAMS 0x000000060cc00000, 0x000000060cc00000| Untracked 
|  52|0x000000060d000000, 0x000000060d000000, 0x000000060d400000|  0%| F|  |TAMS 0x000000060d000000, 0x000000060d000000| Untracked 
|  53|0x000000060d400000, 0x000000060d400000, 0x000000060d800000|  0%| F|  |TAMS 0x000000060d400000, 0x000000060d400000| Untracked 
|  54|0x000000060d800000, 0x000000060d800000, 0x000000060dc00000|  0%| F|  |TAMS 0x000000060d800000, 0x000000060d800000| Untracked 
|  55|0x000000060dc00000, 0x000000060dc00000, 0x000000060e000000|  0%| F|  |TAMS 0x000000060dc00000, 0x000000060dc00000| Untracked 
|  56|0x000000060e000000, 0x000000060e000000, 0x000000060e400000|  0%| F|  |TAMS 0x000000060e000000, 0x000000060e000000| Untracked 
|  57|0x000000060e400000, 0x000000060e400000, 0x000000060e800000|  0%| F|  |TAMS 0x000000060e400000, 0x000000060e400000| Untracked 
|  58|0x000000060e800000, 0x000000060e800000, 0x000000060ec00000|  0%| F|  |TAMS 0x000000060e800000, 0x000000060e800000| Untracked 
|  59|0x000000060ec00000, 0x000000060ec00000, 0x000000060f000000|  0%| F|  |TAMS 0x000000060ec00000, 0x000000060ec00000| Untracked 
|  60|0x000000060f000000, 0x000000060f000000, 0x000000060f400000|  0%| F|  |TAMS 0x000000060f000000, 0x000000060f000000| Untracked 
|  61|0x000000060f400000, 0x000000060f400000, 0x000000060f800000|  0%| F|  |TAMS 0x000000060f400000, 0x000000060f400000| Untracked 
|  62|0x000000060f800000, 0x000000060f800000, 0x000000060fc00000|  0%| F|  |TAMS 0x000000060f800000, 0x000000060f800000| Untracked 
|  63|0x000000060fc00000, 0x000000060fc00000, 0x0000000610000000|  0%| F|  |TAMS 0x000000060fc00000, 0x000000060fc00000| Untracked 
|  64|0x0000000610000000, 0x0000000610000000, 0x0000000610400000|  0%| F|  |TAMS 0x0000000610000000, 0x0000000610000000| Untracked 
|  65|0x0000000610400000, 0x0000000610400000, 0x0000000610800000|  0%| F|  |TAMS 0x0000000610400000, 0x0000000610400000| Untracked 
|  66|0x0000000610800000, 0x0000000610800000, 0x0000000610c00000|  0%| F|  |TAMS 0x0000000610800000, 0x0000000610800000| Untracked 
|  67|0x0000000610c00000, 0x0000000610c00000, 0x0000000611000000|  0%| F|  |TAMS 0x0000000610c00000, 0x0000000610c00000| Untracked 
|  68|0x0000000611000000, 0x0000000611000000, 0x0000000611400000|  0%| F|  |TAMS 0x0000000611000000, 0x0000000611000000| Untracked 
|  69|0x0000000611400000, 0x0000000611400000, 0x0000000611800000|  0%| F|  |TAMS 0x0000000611400000, 0x0000000611400000| Untracked 
|  70|0x0000000611800000, 0x0000000611800000, 0x0000000611c00000|  0%| F|  |TAMS 0x0000000611800000, 0x0000000611800000| Untracked 
|  71|0x0000000611c00000, 0x0000000611c00000, 0x0000000612000000|  0%| F|  |TAMS 0x0000000611c00000, 0x0000000611c00000| Untracked 
|  72|0x0000000612000000, 0x0000000612000000, 0x0000000612400000|  0%| F|  |TAMS 0x0000000612000000, 0x0000000612000000| Untracked 
|  73|0x0000000612400000, 0x0000000612400000, 0x0000000612800000|  0%| F|  |TAMS 0x0000000612400000, 0x0000000612400000| Untracked 
|  74|0x0000000612800000, 0x0000000612800000, 0x0000000612c00000|  0%| F|  |TAMS 0x0000000612800000, 0x0000000612800000| Untracked 
|  75|0x0000000612c00000, 0x0000000612c00000, 0x0000000613000000|  0%| F|  |TAMS 0x0000000612c00000, 0x0000000612c00000| Untracked 
|  76|0x0000000613000000, 0x0000000613000000, 0x0000000613400000|  0%| F|  |TAMS 0x0000000613000000, 0x0000000613000000| Untracked 
|  77|0x0000000613400000, 0x0000000613400000, 0x0000000613800000|  0%| F|  |TAMS 0x0000000613400000, 0x0000000613400000| Untracked 
|  78|0x0000000613800000, 0x0000000613800000, 0x0000000613c00000|  0%| F|  |TAMS 0x0000000613800000, 0x0000000613800000| Untracked 
|  79|0x0000000613c00000, 0x0000000613c00000, 0x0000000614000000|  0%| F|  |TAMS 0x0000000613c00000, 0x0000000613c00000| Untracked 
|  80|0x0000000614000000, 0x0000000614000000, 0x0000000614400000|  0%| F|  |TAMS 0x0000000614000000, 0x0000000614000000| Untracked 
|  81|0x0000000614400000, 0x0000000614400000, 0x0000000614800000|  0%| F|  |TAMS 0x0000000614400000, 0x0000000614400000| Untracked 
|  82|0x0000000614800000, 0x0000000614800000, 0x0000000614c00000|  0%| F|  |TAMS 0x0000000614800000, 0x0000000614800000| Untracked 
|  83|0x0000000614c00000, 0x0000000614c00000, 0x0000000615000000|  0%| F|  |TAMS 0x0000000614c00000, 0x0000000614c00000| Untracked 
|  84|0x0000000615000000, 0x0000000615000000, 0x0000000615400000|  0%| F|  |TAMS 0x0000000615000000, 0x0000000615000000| Untracked 
|  85|0x0000000615400000, 0x0000000615400000, 0x0000000615800000|  0%| F|  |TAMS 0x0000000615400000, 0x0000000615400000| Untracked 
|  86|0x0000000615800000, 0x0000000615800000, 0x0000000615c00000|  0%| F|  |TAMS 0x0000000615800000, 0x0000000615800000| Untracked 
|  87|0x0000000615c00000, 0x0000000615c00000, 0x0000000616000000|  0%| F|  |TAMS 0x0000000615c00000, 0x0000000615c00000| Untracked 
|  88|0x0000000616000000, 0x0000000616000000, 0x0000000616400000|  0%| F|  |TAMS 0x0000000616000000, 0x0000000616000000| Untracked 
|  89|0x0000000616400000, 0x0000000616400000, 0x0000000616800000|  0%| F|  |TAMS 0x0000000616400000, 0x0000000616400000| Untracked 
|  90|0x0000000616800000, 0x0000000616800000, 0x0000000616c00000|  0%| F|  |TAMS 0x0000000616800000, 0x0000000616800000| Untracked 
|  91|0x0000000616c00000, 0x0000000616c00000, 0x0000000617000000|  0%| F|  |TAMS 0x0000000616c00000, 0x0000000616c00000| Untracked 
|  92|0x0000000617000000, 0x0000000617000000, 0x0000000617400000|  0%| F|  |TAMS 0x0000000617000000, 0x0000000617000000| Untracked 
|  93|0x0000000617400000, 0x0000000617400000, 0x0000000617800000|  0%| F|  |TAMS 0x0000000617400000, 0x0000000617400000| Untracked 
|  94|0x0000000617800000, 0x0000000617800000, 0x0000000617c00000|  0%| F|  |TAMS 0x0000000617800000, 0x0000000617800000| Untracked 
|  95|0x0000000617c00000, 0x0000000617c00000, 0x0000000618000000|  0%| F|  |TAMS 0x0000000617c00000, 0x0000000617c00000| Untracked 
|  96|0x0000000618000000, 0x0000000618000000, 0x0000000618400000|  0%| F|  |TAMS 0x0000000618000000, 0x0000000618000000| Untracked 
|  97|0x0000000618400000, 0x0000000618400000, 0x0000000618800000|  0%| F|  |TAMS 0x0000000618400000, 0x0000000618400000| Untracked 
|  98|0x0000000618800000, 0x0000000618800000, 0x0000000618c00000|  0%| F|  |TAMS 0x0000000618800000, 0x0000000618800000| Untracked 
|  99|0x0000000618c00000, 0x0000000618c00000, 0x0000000619000000|  0%| F|  |TAMS 0x0000000618c00000, 0x0000000618c00000| Untracked 
| 100|0x0000000619000000, 0x0000000619000000, 0x0000000619400000|  0%| F|  |TAMS 0x0000000619000000, 0x0000000619000000| Untracked 
| 101|0x0000000619400000, 0x0000000619400000, 0x0000000619800000|  0%| F|  |TAMS 0x0000000619400000, 0x0000000619400000| Untracked 
| 102|0x0000000619800000, 0x0000000619800000, 0x0000000619c00000|  0%| F|  |TAMS 0x0000000619800000, 0x0000000619800000| Untracked 
| 103|0x0000000619c00000, 0x0000000619c00000, 0x000000061a000000|  0%| F|  |TAMS 0x0000000619c00000, 0x0000000619c00000| Untracked 
| 104|0x000000061a000000, 0x000000061a000000, 0x000000061a400000|  0%| F|  |TAMS 0x000000061a000000, 0x000000061a000000| Untracked 
| 105|0x000000061a400000, 0x000000061a400000, 0x000000061a800000|  0%| F|  |TAMS 0x000000061a400000, 0x000000061a400000| Untracked 
| 106|0x000000061a800000, 0x000000061a800000, 0x000000061ac00000|  0%| F|  |TAMS 0x000000061a800000, 0x000000061a800000| Untracked 
| 107|0x000000061ac00000, 0x000000061ac00000, 0x000000061b000000|  0%| F|  |TAMS 0x000000061ac00000, 0x000000061ac00000| Untracked 
| 108|0x000000061b000000, 0x000000061b000000, 0x000000061b400000|  0%| F|  |TAMS 0x000000061b000000, 0x000000061b000000| Untracked 
| 109|0x000000061b400000, 0x000000061b400000, 0x000000061b800000|  0%| F|  |TAMS 0x000000061b400000, 0x000000061b400000| Untracked 
| 110|0x000000061b800000, 0x000000061b800000, 0x000000061bc00000|  0%| F|  |TAMS 0x000000061b800000, 0x000000061b800000| Untracked 
| 111|0x000000061bc00000, 0x000000061bc00000, 0x000000061c000000|  0%| F|  |TAMS 0x000000061bc00000, 0x000000061bc00000| Untracked 
| 112|0x000000061c000000, 0x000000061c000000, 0x000000061c400000|  0%| F|  |TAMS 0x000000061c000000, 0x000000061c000000| Untracked 
| 113|0x000000061c400000, 0x000000061c400000, 0x000000061c800000|  0%| F|  |TAMS 0x000000061c400000, 0x000000061c400000| Untracked 
| 114|0x000000061c800000, 0x000000061c800000, 0x000000061cc00000|  0%| F|  |TAMS 0x000000061c800000, 0x000000061c800000| Untracked 
| 115|0x000000061cc00000, 0x000000061cc00000, 0x000000061d000000|  0%| F|  |TAMS 0x000000061cc00000, 0x000000061cc00000| Untracked 
| 116|0x000000061d000000, 0x000000061d000000, 0x000000061d400000|  0%| F|  |TAMS 0x000000061d000000, 0x000000061d000000| Untracked 
| 117|0x000000061d400000, 0x000000061d400000, 0x000000061d800000|  0%| F|  |TAMS 0x000000061d400000, 0x000000061d400000| Untracked 
| 118|0x000000061d800000, 0x000000061d800000, 0x000000061dc00000|  0%| F|  |TAMS 0x000000061d800000, 0x000000061d800000| Untracked 
| 119|0x000000061dc00000, 0x000000061dc00000, 0x000000061e000000|  0%| F|  |TAMS 0x000000061dc00000, 0x000000061dc00000| Untracked 
| 120|0x000000061e000000, 0x000000061e000000, 0x000000061e400000|  0%| F|  |TAMS 0x000000061e000000, 0x000000061e000000| Untracked 
| 121|0x000000061e400000, 0x000000061e400000, 0x000000061e800000|  0%| F|  |TAMS 0x000000061e400000, 0x000000061e400000| Untracked 
| 122|0x000000061e800000, 0x000000061e800000, 0x000000061ec00000|  0%| F|  |TAMS 0x000000061e800000, 0x000000061e800000| Untracked 
| 123|0x000000061ec00000, 0x000000061ec00000, 0x000000061f000000|  0%| F|  |TAMS 0x000000061ec00000, 0x000000061ec00000| Untracked 
| 124|0x000000061f000000, 0x000000061f000000, 0x000000061f400000|  0%| F|  |TAMS 0x000000061f000000, 0x000000061f000000| Untracked 
| 125|0x000000061f400000, 0x000000061f5051c0, 0x000000061f800000| 25%| E|  |TAMS 0x000000061f400000, 0x000000061f400000| Complete 
| 126|0x000000061f800000, 0x000000061fc00000, 0x000000061fc00000|100%| E|CS|TAMS 0x000000061f800000, 0x000000061f800000| Complete 
| 127|0x000000061fc00000, 0x0000000620000000, 0x0000000620000000|100%| E|CS|TAMS 0x000000061fc00000, 0x000000061fc00000| Complete 
|2046|0x00000007ff800000, 0x00000007ffb74000, 0x00000007ffc00000| 86%|OA|  |TAMS 0x00000007ff800000, 0x00000007ff800000| Untracked 
|2047|0x00000007ffc00000, 0x00000007ffc72000, 0x0000000800000000| 11%|CA|  |TAMS 0x00000007ffc00000, 0x00000007ffc00000| Untracked 

Card table byte_map: [0x000000010abd1000,0x000000010bbd1000] _byte_map_base: 0x0000000107bd1000

Marking Bits (Prev, Next): (CMBitMap*) 0x00007f9dae809e10, (CMBitMap*) 0x00007f9dae809e50
 Prev Bits: [0x000000012daf5000, 0x0000000135af5000)
 Next Bits: [0x0000000135af5000, 0x000000013daf5000)

Polling page: 0x00000001099bd000

Metaspace:

Usage:
  Non-class:      6.53 MB used.
      Class:    863.98 KB used.
       Both:      7.37 MB used.

Virtual space:
  Non-class space:       64.00 MB reserved,       6.62 MB ( 10%) committed,  1 nodes.
      Class space:        1.00 GB reserved,     960.00 KB ( <1%) committed,  1 nodes.
             Both:        1.06 GB reserved,       7.56 MB ( <1%) committed. 

Chunk freelists:
   Non-Class:  1.00 MB
       Class:  3.10 MB
        Both:  4.10 MB

MaxMetaspaceSize: unlimited
CompressedClassSpaceSize: 1.00 GB
Initial GC threshold: 21.00 MB
Current GC threshold: 21.00 MB
CDS: on
MetaspaceReclaimPolicy: balanced
 - commit_granule_bytes: 65536.
 - commit_granule_words: 8192.
 - virtual_space_node_default_size: 8388608.
 - enlarge_chunks_in_place: 1.
 - new_chunks_are_fully_committed: 0.
 - uncommit_free_chunks: 1.
 - use_allocation_guard: 0.


Internal statistics:

num_allocs_failed_limit: 0.
num_arena_births: 170.
num_arena_deaths: 0.
num_vsnodes_births: 2.
num_vsnodes_deaths: 0.
num_space_committed: 121.
num_space_uncommitted: 0.
num_chunks_returned_to_freelist: 0.
num_chunks_taken_from_freelist: 198.
num_chunk_merges: 0.
num_chunk_splits: 131.
num_chunks_enlarged: 77.
num_inconsistent_stats: 0.

CodeHeap 'non-profiled nmethods': size=119168Kb used=241Kb max_used=241Kb free=118926Kb
 bounds [0x0000000126695000, 0x0000000126905000, 0x000000012daf5000]
CodeHeap 'profiled nmethods': size=119164Kb used=1532Kb max_used=1532Kb free=117631Kb
 bounds [0x000000011f236000, 0x000000011f4a6000, 0x0000000126695000]
CodeHeap 'non-nmethods': size=7428Kb used=1293Kb max_used=1309Kb free=6134Kb
 bounds [0x000000011eaf5000, 0x000000011ed65000, 0x000000011f236000]
 total_blobs=1574 nmethods=957 adapters=531
 compilation: enabled
              stopped_count=0, restarted_count=0
 full_count=0

Compilation events (20 events):
Event: 6.080 Thread 0x00007f9d8e010200  948       3       java.awt.event.InvocationEvent::<init> (14 bytes)
Event: 6.081 Thread 0x00007f9d8e010200 nmethod 948 0x000000011f3b1c90 code [0x000000011f3b1e40, 0x000000011f3b1fa0]
Event: 6.081 Thread 0x00007f9d8e010200  949   !   3       sun.lwawt.macosx.LWCToolkit$CallableWrapper::run (23 bytes)
Event: 6.081 Thread 0x00007f9d8e010200 nmethod 949 0x000000011f3b2090 code [0x000000011f3b2240, 0x000000011f3b2540]
Event: 6.081 Thread 0x00007f9d8e010200  950       3       sun.lwawt.macosx.LWCToolkit$$Lambda$127/0x0000000800cb6e98::run (8 bytes)
Event: 6.081 Thread 0x00007f9d8e010200 nmethod 950 0x000000011f3b2690 code [0x000000011f3b2840, 0x000000011f3b2a20]
Event: 6.198 Thread 0x00007f9d8e010200  951       1       java.util.ResourceBundle$BundleReference::getCacheKey (5 bytes)
Event: 6.198 Thread 0x00007f9d8e010200 nmethod 951 0x00000001266d1390 code [0x00000001266d1520, 0x00000001266d15f0]
Event: 6.200 Thread 0x00007f9d8e010200  952       3       java.util.Locale::equals (75 bytes)
Event: 6.200 Thread 0x00007f9d8e010200 nmethod 952 0x000000011f3b2b10 code [0x000000011f3b2d20, 0x000000011f3b34b0]
Event: 6.200 Thread 0x00007f9d8e010200  953       3       java.util.ResourceBundle::isValidBundle (17 bytes)
Event: 6.200 Thread 0x00007f9d8e010200 nmethod 953 0x000000011f3b3610 code [0x000000011f3b37a0, 0x000000011f3b3930]
Event: 6.265 Thread 0x00007f9d8e010200  955       3       java.awt.Container::getComponents (5 bytes)
Event: 6.266 Thread 0x00007f9d8e010200 nmethod 955 0x000000011f3b3990 code [0x000000011f3b3b40, 0x000000011f3b3e80]
Event: 6.266 Thread 0x00007f9d8e010200  956       3       java.awt.Container::getComponents_NoClientCode (16 bytes)
Event: 6.266 Thread 0x00007f9d8e010200 nmethod 956 0x000000011f3b3f90 code [0x000000011f3b4140, 0x000000011f3b4420]
Event: 6.266 Thread 0x00007f9d8e010200  954       3       java.util.Locale::hashCode (41 bytes)
Event: 6.266 Thread 0x00007f9d8e010200 nmethod 954 0x000000011f3b4510 code [0x000000011f3b46c0, 0x000000011f3b48d0]
Event: 6.269 Thread 0x00007f9d8e010200  957       3       java.awt.Button::getAccessibleContext (24 bytes)
Event: 6.269 Thread 0x00007f9d8e010200 nmethod 957 0x000000011f3b4990 code [0x000000011f3b4b60, 0x000000011f3b4fc0]

GC Heap History (0 events):
No events

Deoptimization events (16 events):
Event: 2.039 Thread 0x00007f9daf008a00 Uncommon trap: trap_request=0xffffff45 fr.pc=0x000000012669dc7c relative=0x000000000000005c
Event: 2.039 Thread 0x00007f9daf008a00 Uncommon trap: reason=unstable_if action=reinterpret pc=0x000000012669dc7c method=java.lang.String.isLatin1()Z @ 10 c2
Event: 2.039 Thread 0x00007f9daf008a00 DEOPT PACKING pc=0x000000012669dc7c sp=0x00007000011ddc90
Event: 2.039 Thread 0x00007f9daf008a00 DEOPT UNPACKING pc=0x000000011eb47099 sp=0x00007000011ddc40 mode 2
Event: 3.034 Thread 0x00007f9daf008a00 Uncommon trap: trap_request=0xffffff45 fr.pc=0x00000001266bb59c relative=0x00000000000004dc
Event: 3.034 Thread 0x00007f9daf008a00 Uncommon trap: reason=unstable_if action=reinterpret pc=0x00000001266bb59c method=java.lang.StringLatin1.toLowerCase(Ljava/lang/String;[BLjava/util/Locale;)Ljava/lang/String; @ 43 c2
Event: 3.034 Thread 0x00007f9daf008a00 DEOPT PACKING pc=0x00000001266bb59c sp=0x00007000011dd7a0
Event: 3.034 Thread 0x00007f9daf008a00 DEOPT UNPACKING pc=0x000000011eb47099 sp=0x00007000011dd730 mode 2
Event: 3.136 Thread 0x00007f9dae139a00 DEOPT PACKING pc=0x000000011f2606da sp=0x0000700002b33560
Event: 3.136 Thread 0x00007f9dae139a00 DEOPT UNPACKING pc=0x000000011eb4782f sp=0x0000700002b329a0 mode 0
Event: 4.652 Thread 0x00007f9dae139a00 DEOPT PACKING pc=0x000000011f23e3ce sp=0x0000700002b34500
Event: 4.652 Thread 0x00007f9dae139a00 DEOPT UNPACKING pc=0x000000011eb4782f sp=0x0000700002b33998 mode 0
Event: 4.652 Thread 0x00007f9dae139a00 DEOPT PACKING pc=0x000000011f23e3ce sp=0x0000700002b34500
Event: 4.652 Thread 0x00007f9dae139a00 DEOPT UNPACKING pc=0x000000011eb4782f sp=0x0000700002b33998 mode 0
Event: 4.654 Thread 0x00007f9dae139a00 DEOPT PACKING pc=0x000000011f23e3ce sp=0x0000700002b34500
Event: 4.654 Thread 0x00007f9dae139a00 DEOPT UNPACKING pc=0x000000011eb4782f sp=0x0000700002b33998 mode 0

Classes loaded (20 events):
Event: 5.865 Loading class java/awt/KeyboardFocusManager$2
Event: 5.865 Loading class java/awt/KeyboardFocusManager$2 done
Event: 5.865 Loading class sun/awt/SunToolkit$1
Event: 5.865 Loading class sun/awt/SunToolkit$1 done
Event: 5.868 Loading class javax/accessibility/AccessibleState
Event: 5.868 Loading class javax/accessibility/AccessibleState done
Event: 5.870 Loading class java/awt/Window$1DisposeAction
Event: 5.870 Loading class java/awt/Window$1DisposeAction done
Event: 5.870 Loading class sun/java2d/pipe/RegionSpanIterator
Event: 5.870 Loading class sun/java2d/pipe/SpanIterator
Event: 5.870 Loading class sun/java2d/pipe/SpanIterator done
Event: 5.870 Loading class sun/java2d/pipe/RegionSpanIterator done
Event: 5.872 Loading class java/awt/LightweightDispatcher$2
Event: 5.872 Loading class java/awt/LightweightDispatcher$2 done
Event: 5.872 Loading class java/awt/event/AWTEventListenerProxy
Event: 5.872 Loading class java/awt/event/AWTEventListenerProxy done
Event: 5.872 Loading class java/awt/Toolkit$ToolkitEventMulticaster
Event: 5.872 Loading class java/awt/Toolkit$ToolkitEventMulticaster done
Event: 5.950 Loading class sun/lwawt/macosx/CAccessibility$15
Event: 5.950 Loading class sun/lwawt/macosx/CAccessibility$15 done

Classes unloaded (0 events):
No events

Classes redefined (0 events):
No events

Internal exceptions (20 events):
Event: 1.446 Thread 0x00007f9daf008a00 Exception <a 'java/lang/NoSuchMethodError'{0x000000061fdd14f8}: 'void java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(java.lang.Object, java.lang.Object)'> (0x000000061fdd14f8) 
thrown [src/hotspot/share/interpreter/linkResolver.cpp, line 766]
Event: 1.475 Thread 0x00007f9daf008a00 Exception <a 'java/lang/NullPointerException'{0x000000061fefb850}> (0x000000061fefb850) 
thrown [src/hotspot/share/interpreter/linkResolver.cpp, line 1357]
Event: 1.496 Thread 0x00007f9daf008a00 Exception <a 'java/lang/NoSuchMethodError'{0x000000061ff25210}: 'void java.lang.invoke.Invokers$Holder.invokeExact_MT(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)'> (0x000000061ff25210) 
thrown [src/hotspot/share/interpreter/linkResolver.cpp, line 766]
Event: 1.497 Thread 0x00007f9daf008a00 Exception <a 'java/lang/NoSuchMethodError'{0x000000061ff2a198}: 'void java.lang.invoke.DirectMethodHandle$Holder.invokeStaticInit(java.lang.Object)'> (0x000000061ff2a198) 
thrown [src/hotspot/share/interpreter/linkResolver.cpp, line 766]
Event: 1.508 Thread 0x00007f9daf008a00 Exception <a 'java/lang/NoSuchMethodError'{0x000000061ff37fa8}: 'java.lang.Object java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(java.lang.Object, java.lang.Object, java.lang.Object, int, java.lang.Object)'> (0x000000061ff37fa8) 
thrown [src/hotspot/share/interpreter/linkResolver.cpp, line 766]
Event: 1.509 Thread 0x00007f9daf008a00 Exception <a 'java/lang/NoSuchMethodError'{0x000000061ff3f8d0}: 'java.lang.Object java.lang.invoke.Invokers$Holder.linkToTargetMethod(java.lang.Object, java.lang.Object, int, java.lang.Object, java.lang.Object)'> (0x000000061ff3f8d0) 
thrown [src/hotspot/share/interpreter/linkResolver.cpp, line 766]
Event: 1.527 Thread 0x00007f9daf008a00 Exception <a 'java/lang/NoSuchMethodError'{0x000000061ff50c88}: 'java.lang.Object java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, int, int, int, java.lang.Object)'> (0x000000061ff50c88) 
thrown [src/hotspot/share/interpreter/linkResolver.cpp, line 766]
Event: 1.528 Thread 0x00007f9daf008a00 Exception <a 'java/lang/NoSuchMethodError'{0x000000061ff54678}: 'void java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(java.lang.Object, java.lang.Object, long)'> (0x000000061ff54678) 
thrown [src/hotspot/share/interpreter/linkResolver.cpp, line 766]
Event: 1.534 Thread 0x00007f9dae811c00 Exception <a 'java/lang/NoSuchMethodError'{0x000000061fe51888}: 'void java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial(java.lang.Object, java.lang.Object, long)'> (0x000000061fe51888) 
thrown [src/hotspot/share/interpreter/linkResolver.cpp, line 766]
Event: 1.576 Thread 0x00007f9daf008a00 Exception <a 'java/lang/NoSuchMethodError'{0x000000061fffb630}: 'void java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial(java.lang.Object, java.lang.Object, java.lang.Object)'> (0x000000061fffb630) 
thrown [src/hotspot/share/interpreter/linkResolver.cpp, line 766]
Event: 1.753 Thread 0x00007f9daf008a00 Exception <a 'java/lang/NoSuchMethodError'{0x000000061f831ec0}: 'java.lang.Object java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)'> (0x000000061f831ec0) 
thrown [src/hotspot/share/interpreter/linkResolver.cpp, line 766]
Event: 1.759 Thread 0x00007f9daf008a00 Exception <a 'java/lang/NoSuchMethodError'{0x000000061f863900}: 'java.lang.Object java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(java.lang.Object, int, java.lang.Object)'> (0x000000061f863900) 
thrown [src/hotspot/share/interpreter/linkResolver.cpp, line 766]
Event: 1.763 Thread 0x00007f9daf008a00 Exception <a 'java/lang/ClassNotFoundException'{0x000000061f895910}: com/apple/laf/resources/spi/aquaProvider> (0x000000061f895910) 
thrown [src/hotspot/share/classfile/systemDictionary.cpp, line 255]
Event: 1.788 Thread 0x00007f9daf008a00 Exception <a 'java/lang/ClassNotFoundException'{0x000000061f907850}: com/sun/swing/internal/plaf/basic/resources/spi/basicProvider> (0x000000061f907850) 
thrown [src/hotspot/share/classfile/systemDictionary.cpp, line 255]
Event: 1.798 Thread 0x00007f9daf008a00 Exception <a 'java/lang/NoSuchMethodError'{0x000000061f926760}: 'int java.lang.invoke.Invokers$Holder.invokeExact_MT(java.lang.Object, java.lang.Object)'> (0x000000061f926760) 
thrown [src/hotspot/share/interpreter/linkResolver.cpp, line 766]
Event: 3.112 Thread 0x00007f9daf008a00 Exception <a 'java/lang/NoSuchMethodError'{0x000000061f9ef2d8}: 'void java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(java.lang.Object, long, long)'> (0x000000061f9ef2d8) 
thrown [src/hotspot/share/interpreter/linkResolver.cpp, line 766]
Event: 3.113 Thread 0x00007f9daf008a00 Exception <a 'java/lang/NoSuchMethodError'{0x000000061f9f4900}: 'java.lang.Object java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(java.lang.Object, long)'> (0x000000061f9f4900) 
thrown [src/hotspot/share/interpreter/linkResolver.cpp, line 766]
Event: 3.114 Thread 0x00007f9daf008a00 Exception <a 'java/lang/NoSuchMethodError'{0x000000061f9febc8}: 'java.lang.Object java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(java.lang.Object, java.lang.Object, int)'> (0x000000061f9febc8) 
thrown [src/hotspot/share/interpreter/linkResolver.cpp, line 766]
Event: 3.128 Thread 0x00007f9dae811c00 Exception <a 'java/lang/NoSuchMethodError'{0x000000061fe60100}: 'void java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(java.lang.Object, long)'> (0x000000061fe60100) 
thrown [src/hotspot/share/interpreter/linkResolver.cpp, line 766]
Event: 3.293 Thread 0x00007f9dae139a00 Exception <a 'java/lang/ClassNotFoundException'{0x000000061ffc4f30}: com/sun/accessibility/internal/resources/spi/accessibilityProvider> (0x000000061ffc4f30) 
thrown [src/hotspot/share/classfile/systemDictionary.cpp, line 255]

VM Operations (16 events):
Event: 0.714 Executing VM operation: HandshakeAllThreads
Event: 0.714 Executing VM operation: HandshakeAllThreads done
Event: 1.717 Executing VM operation: Cleanup
Event: 1.717 Executing VM operation: Cleanup done
Event: 1.787 Executing VM operation: HandshakeAllThreads
Event: 1.787 Executing VM operation: HandshakeAllThreads done
Event: 2.789 Executing VM operation: Cleanup
Event: 2.789 Executing VM operation: Cleanup done
Event: 3.134 Executing VM operation: HandshakeAllThreads
Event: 3.134 Executing VM operation: HandshakeAllThreads done
Event: 4.139 Executing VM operation: Cleanup
Event: 4.139 Executing VM operation: Cleanup done
Event: 5.141 Executing VM operation: Cleanup
Event: 5.141 Executing VM operation: Cleanup done
Event: 6.145 Executing VM operation: Cleanup
Event: 6.145 Executing VM operation: Cleanup done

Events (20 events):
Event: 0.391 Loaded shared library /Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libawt.dylib
Event: 0.711 Loaded shared library /Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libawt_lwawt.dylib
Event: 0.725 Loaded shared library /Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libnio.dylib
Event: 0.727 Loaded shared library /Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libjimage.dylib
Event: 1.090 Loaded shared library /Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libfontmanager.dylib
Event: 1.104 Protecting memory [0x00007ffee6c12000,0x00007ffee6c16000] with protection modes 0
Event: 1.104 Thread 0x00007f9dae811c00 Thread added: 0x00007f9dae811c00
Event: 1.174 Thread 0x00007f9dae09f400 Thread added: 0x00007f9dae09f400
Event: 1.174 Protecting memory [0x000070000241b000,0x000070000241f000] with protection modes 0
Event: 1.354 Thread 0x00007f9daf08cc00 Thread added: 0x00007f9daf08cc00
Event: 1.354 Protecting memory [0x0000700002830000,0x0000700002834000] with protection modes 0
Event: 1.448 Thread 0x00007f9d8d073a00 Thread added: 0x00007f9d8d073a00
Event: 1.448 Protecting memory [0x0000700002933000,0x0000700002937000] with protection modes 0
Event: 1.546 Thread 0x00007f9dae139a00 Thread added: 0x00007f9dae139a00
Event: 1.546 Protecting memory [0x0000700002a36000,0x0000700002a3a000] with protection modes 0
Event: 1.741 Loaded shared library /Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libosxui.dylib
Event: 4.665 Thread 0x00007f9dae173a00 Thread added: 0x00007f9dae173a00
Event: 4.665 Protecting memory [0x0000700002b39000,0x0000700002b3d000] with protection modes 0
Event: 5.903 Protecting memory [0x0000700002b39000,0x0000700002b3d000] with protection modes 3
Event: 5.903 Thread 0x00007f9dae173a00 Thread exited: 0x00007f9dae173a00


Dynamic libraries:
0x00007fff2a4bd000 	/usr/lib/libz.1.dylib
0x00000001087fa000 	/Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libjli.dylib
0x00007fff34ffb000 	/System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa
0x00007fff22238000 	/System/Library/Frameworks/Security.framework/Versions/A/Security
0x00007fff331fa000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices
0x00007fff2a585000 	/usr/lib/libSystem.B.dylib
0x00007fff2a57f000 	/usr/lib/system/libcache.dylib
0x00007fff2a53b000 	/usr/lib/system/libcommonCrypto.dylib
0x00007fff2a565000 	/usr/lib/system/libcompiler_rt.dylib
0x00007fff2a55a000 	/usr/lib/system/libcopyfile.dylib
0x00007fff2010f000 	/usr/lib/system/libcorecrypto.dylib
0x00007fff201db000 	/usr/lib/system/libdispatch.dylib
0x00007fff2038f000 	/usr/lib/system/libdyld.dylib
0x00007fff2a576000 	/usr/lib/system/libkeymgr.dylib
0x00007fff2d9b8000 	/usr/lib/system/liblaunch.dylib
0x00007fff2a519000 	/usr/lib/system/libmacho.dylib
0x00007fff29d34000 	/usr/lib/system/libquarantine.dylib
0x00007fff2a573000 	/usr/lib/system/libremovefile.dylib
0x00007fff24bcd000 	/usr/lib/system/libsystem_asl.dylib
0x00007fff200bf000 	/usr/lib/system/libsystem_blocks.dylib
0x00007fff2025c000 	/usr/lib/system/libsystem_c.dylib
0x00007fff2a56d000 	/usr/lib/system/libsystem_collections.dylib
0x00007fff29029000 	/usr/lib/system/libsystem_configuration.dylib
0x00007fff2831d000 	/usr/lib/system/libsystem_containermanager.dylib
0x00007fff2a2b5000 	/usr/lib/system/libsystem_coreservices.dylib
0x00007fff227ec000 	/usr/lib/system/libsystem_darwin.dylib
0x00007fff2a577000 	/usr/lib/system/libsystem_dnssd.dylib
0x00007fff20259000 	/usr/lib/system/libsystem_featureflags.dylib
0x00007fff203d4000 	/usr/lib/system/libsystem_info.dylib
0x00007fff2a4d0000 	/usr/lib/system/libsystem_m.dylib
0x00007fff201ae000 	/usr/lib/system/libsystem_malloc.dylib
0x00007fff24b61000 	/usr/lib/system/libsystem_networkextension.dylib
0x00007fff22c06000 	/usr/lib/system/libsystem_notify.dylib
0x00007fff2fe65000 	/usr/lib/system/libsystem_product_info_filter.dylib
0x00007fff2902d000 	/usr/lib/system/libsystem_sandbox.dylib
0x00007fff2a570000 	/usr/lib/system/libsystem_secinit.dylib
0x00007fff20354000 	/usr/lib/system/libsystem_kernel.dylib
0x00007fff203ca000 	/usr/lib/system/libsystem_platform.dylib
0x00007fff20383000 	/usr/lib/system/libsystem_pthread.dylib
0x00007fff262cb000 	/usr/lib/system/libsystem_symptoms.dylib
0x00007fff200f7000 	/usr/lib/system/libsystem_trace.dylib
0x00007fff2a547000 	/usr/lib/system/libunwind.dylib
0x00007fff200c1000 	/usr/lib/system/libxpc.dylib
0x00007fff2033b000 	/usr/lib/libc++abi.dylib
0x00007fff20220000 	/usr/lib/libobjc.A.dylib
0x00007fff2a552000 	/usr/lib/liboah.dylib
0x00007fff202e5000 	/usr/lib/libc++.1.dylib
0x00007fff20400000 	/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation
0x00007fff211ad000 	/System/Library/Frameworks/Foundation.framework/Versions/C/Foundation
0x00007fff22c5e000 	/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
0x00007fff25af4000 	/System/Library/Frameworks/CoreData.framework/Versions/A/CoreData
0x00007fff239c1000 	/System/Library/PrivateFrameworks/UIFoundation.framework/Versions/A/UIFoundation
0x00007fff2fbde000 	/System/Library/PrivateFrameworks/RemoteViewServices.framework/Versions/A/RemoteViewServices
0x00007fff289e7000 	/System/Library/PrivateFrameworks/XCTTargetBootstrap.framework/Versions/A/XCTTargetBootstrap
0x00007fff2b6c4000 	/usr/lib/libspindump.dylib
0x00007fff23c15000 	/System/Library/Frameworks/UniformTypeIdentifiers.framework/Versions/A/UniformTypeIdentifiers
0x00007fff271be000 	/usr/lib/libapp_launch_measurement.dylib
0x00007fff271c1000 	/System/Library/PrivateFrameworks/CoreAutoLayout.framework/Versions/A/CoreAutoLayout
0x00007fff28349000 	/System/Library/Frameworks/Metal.framework/Versions/A/Metal
0x00007fff29038000 	/usr/lib/liblangid.dylib
0x00007fff289eb000 	/System/Library/PrivateFrameworks/CoreSVG.framework/Versions/A/CoreSVG
0x00007fff24bfc000 	/System/Library/PrivateFrameworks/SkyLight.framework/Versions/A/SkyLight
0x00007fff24f62000 	/System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics
0x00007fff30235000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate
0x00007fff2b0ff000 	/System/Library/PrivateFrameworks/IconServices.framework/Versions/A/IconServices
0x00007fff2832e000 	/System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface
0x00007fff2647d000 	/usr/lib/libDiagnosticMessagesClient.dylib
0x00007fff289d3000 	/System/Library/PrivateFrameworks/DFRFoundation.framework/Versions/A/DFRFoundation
0x00007fff2258a000 	/usr/lib/libicucore.A.dylib
0x00007fff2cc06000 	/System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox
0x00007fff2beac000 	/System/Library/PrivateFrameworks/DataDetectorsCore.framework/Versions/A/DataDetectorsCore
0x00007fff286d3000 	/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox
0x00007fff26c16000 	/System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore
0x00007fff2fc1a000 	/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SpeechRecognition.framework/Versions/A/SpeechRecognition
0x00007fff26f26000 	/System/Library/PrivateFrameworks/CoreUI.framework/Versions/A/CoreUI
0x00007fff21b94000 	/System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio
0x00007fff26568000 	/System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration
0x00007fff2babf000 	/System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport
0x00007fff2bea3000 	/System/Library/PrivateFrameworks/InternationalSupport.framework/Versions/A/InternationalSupport
0x00007fff24b70000 	/usr/lib/libenergytrace.dylib
0x00007fff22b58000 	/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit
0x00007fff2ff67000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices
0x00007fff27154000 	/System/Library/PrivateFrameworks/PerformanceAnalysis.framework/Versions/A/PerformanceAnalysis
0x00007fff6c864000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL
0x00007fff2bf28000 	/System/Library/PrivateFrameworks/UserActivity.framework/Versions/A/UserActivity
0x00007fff255f6000 	/System/Library/Frameworks/ColorSync.framework/Versions/A/ColorSync
0x00007fff28c4f000 	/System/Library/Frameworks/CoreImage.framework/Versions/A/CoreImage
0x00007fff219ab000 	/System/Library/Frameworks/CoreText.framework/Versions/A/CoreText
0x00007fff28a15000 	/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO
0x00007fff2a58b000 	/System/Library/PrivateFrameworks/SoftLinking.framework/Versions/A/SoftLinking
0x00007fff2720a000 	/usr/lib/libxml2.2.dylib
0x00007fff2a7fd000 	/usr/lib/libcompression.dylib
0x00007fff24b71000 	/usr/lib/libMobileGestalt.dylib
0x00007fff2bdd6000 	/System/Library/PrivateFrameworks/TextureIO.framework/Versions/A/TextureIO
0x00007fff2ae22000 	/usr/lib/libate.dylib
0x00007fff2ac08000 	/usr/lib/liblzma.5.dylib
0x00007fff20ec1000 	/System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration
0x00007fff2a587000 	/usr/lib/libfakelink.dylib
0x00007fff246c3000 	/System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork
0x00007fff2a6c7000 	/usr/lib/libarchive.2.dylib
0x00007fff20f3f000 	/usr/lib/libCRFSuite.dylib
0x00007fff29d5b000 	/usr/lib/libbsm.0.dylib
0x00007fff2407f000 	/usr/lib/libnetwork.dylib
0x00007fff2a58c000 	/usr/lib/libpcap.A.dylib
0x00007fff262c4000 	/usr/lib/libdns_services.dylib
0x00007fff2ac21000 	/usr/lib/libcoretls_cfhelpers.dylib
0x00007fff2a7cb000 	/usr/lib/libapple_nghttp2.dylib
0x00007fff2a51f000 	/usr/lib/system/libkxld.dylib
0x00007fff25f2a000 	/usr/lib/libsqlite3.dylib
0x00007fff2a297000 	/System/Library/PrivateFrameworks/AppleFSCompression.framework/Versions/A/AppleFSCompression
0x00007fff29d43000 	/usr/lib/libcoretls.dylib
0x00007fff2a7f8000 	/usr/lib/libpam.2.dylib
0x00007fff2ad1d000 	/usr/lib/libxar.1.dylib
0x00007fff29034000 	/System/Library/PrivateFrameworks/AppleSystemInfo.framework/Versions/A/AppleSystemInfo
0x00007fff29986000 	/System/Library/PrivateFrameworks/IOMobileFramebuffer.framework/Versions/A/IOMobileFramebuffer
0x00007fff2a2a7000 	/usr/lib/libbz2.1.0.dylib
0x00007fff2a5c4000 	/usr/lib/libiconv.2.dylib
0x00007fff2a518000 	/usr/lib/libcharset.1.dylib
0x00007fff27190000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/FSEvents
0x00007fff227f6000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore
0x00007fff264cd000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata
0x00007fff2a2ba000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices
0x00007fff2a739000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit
0x00007fff2624e000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE
0x00007fff2089c000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices
0x00007fff2abb9000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices
0x00007fff27199000 	/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SharedFileList.framework/Versions/A/SharedFileList
0x00007fff29d37000 	/usr/lib/libCheckFix.dylib
0x00007fff24be4000 	/System/Library/PrivateFrameworks/TCC.framework/Versions/A/TCC
0x00007fff2903a000 	/System/Library/PrivateFrameworks/CoreNLP.framework/Versions/A/CoreNLP
0x00007fff26480000 	/System/Library/PrivateFrameworks/MetadataUtilities.framework/Versions/A/MetadataUtilities
0x00007fff20f75000 	/usr/lib/libmecabra.dylib
0x00007fff2a04a000 	/System/Library/Frameworks/MLCompute.framework/Versions/A/MLCompute
0x00007fff29d6c000 	/usr/lib/libmecab.dylib
0x00007fff29db6000 	/usr/lib/libgermantok.dylib
0x00007fff2a7a1000 	/usr/lib/libThaiTokenizer.dylib
0x00007fff2ad58000 	/usr/lib/libChineseTokenizer.dylib
0x00007fff2a7f6000 	/System/Library/Frameworks/MetalPerformanceShaders.framework/Versions/A/MetalPerformanceShaders
0x00007fff2656f000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage
0x00007fff2ff40000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib
0x00007fff2ad63000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib
0x00007fff2979f000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib
0x00007fff20ba0000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
0x00007fff2a81c000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib
0x00007fff29dbc000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLinearAlgebra.dylib
0x00007fff2a7e3000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparseBLAS.dylib
0x00007fff2a816000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libQuadrature.dylib
0x00007fff290e2000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBNNS.dylib
0x00007fff20e52000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparse.dylib
0x00007fff28fcd000 	/System/Library/Frameworks/MetalPerformanceShaders.framework/Versions/A/Frameworks/MPSCore.framework/Versions/A/MPSCore
0x00007fff2a206000 	/System/Library/Frameworks/MetalPerformanceShaders.framework/Versions/A/Frameworks/MPSImage.framework/Versions/A/MPSImage
0x00007fff29dd2000 	/System/Library/Frameworks/MetalPerformanceShaders.framework/Versions/A/Frameworks/MPSNeuralNetwork.framework/Versions/A/MPSNeuralNetwork
0x00007fff2a191000 	/System/Library/Frameworks/MetalPerformanceShaders.framework/Versions/A/Frameworks/MPSMatrix.framework/Versions/A/MPSMatrix
0x00007fff29ffa000 	/System/Library/Frameworks/MetalPerformanceShaders.framework/Versions/A/Frameworks/MPSRayIntersector.framework/Versions/A/MPSRayIntersector
0x00007fff2a1c8000 	/System/Library/Frameworks/MetalPerformanceShaders.framework/Versions/A/Frameworks/MPSNDArray.framework/Versions/A/MPSNDArray
0x00007fff20acc000 	/System/Library/PrivateFrameworks/MetalTools.framework/Versions/A/MetalTools
0x00007fff29032000 	/System/Library/PrivateFrameworks/AggregateDictionary.framework/Versions/A/AggregateDictionary
0x00007fff26458000 	/System/Library/PrivateFrameworks/CoreAnalytics.framework/Versions/A/CoreAnalytics
0x00007fff2a7a3000 	/System/Library/PrivateFrameworks/AppleSauce.framework/Versions/A/AppleSauce
0x00007fff28340000 	/System/Library/PrivateFrameworks/IOAccelerator.framework/Versions/A/IOAccelerator
0x00007fff6c858000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreFSCache.dylib
0x00007fff21511000 	/System/Library/PrivateFrameworks/LanguageModeling.framework/Versions/A/LanguageModeling
0x00007fff29973000 	/System/Library/PrivateFrameworks/CoreEmoji.framework/Versions/A/CoreEmoji
0x00007fff290db000 	/System/Library/PrivateFrameworks/LinguisticData.framework/Versions/A/LinguisticData
0x00007fff20e04000 	/System/Library/PrivateFrameworks/Lexicon.framework/Versions/A/Lexicon
0x00007fff2a6b5000 	/usr/lib/libcmph.dylib
0x00007fff27170000 	/System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory
0x00007fff27160000 	/System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory
0x00007fff2ac23000 	/System/Library/PrivateFrameworks/APFS.framework/Versions/A/APFS
0x00007fff29c98000 	/System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation
0x00007fff2ad2b000 	/usr/lib/libutil.dylib
0x00007fff22b1d000 	/System/Library/PrivateFrameworks/CoreServicesStore.framework/Versions/A/CoreServicesStore
0x00007fff29d2f000 	/System/Library/Frameworks/ServiceManagement.framework/Versions/A/ServiceManagement
0x00007fff2ad2f000 	/usr/lib/libxslt.1.dylib
0x00007fff29d25000 	/System/Library/PrivateFrameworks/BackgroundTaskManagement.framework/Versions/A/BackgroundTaskManagement
0x00007fff2bd20000 	/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib
0x00007fff2bd2a000 	/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib
0x00007fff2bc79000 	/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib
0x00007fff2bca0000 	/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib
0x00007fff2bd7f000 	/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib
0x00007fff2b9dc000 	/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJP2.dylib
0x00007fff2b0c6000 	/usr/lib/libexpat.1.dylib
0x00007fff2b991000 	/System/Library/PrivateFrameworks/AppleJPEG.framework/Versions/A/AppleJPEG
0x00007fff28576000 	/System/Library/PrivateFrameworks/FontServices.framework/libFontParser.dylib
0x00007fff26202000 	/System/Library/PrivateFrameworks/RunningBoardServices.framework/Versions/A/RunningBoardServices
0x00007fff2babb000 	/System/Library/PrivateFrameworks/WatchdogClient.framework/Versions/A/WatchdogClient
0x00007fff215fe000 	/System/Library/Frameworks/CoreDisplay.framework/Versions/A/CoreDisplay
0x00007fff2848c000 	/System/Library/Frameworks/CoreMedia.framework/Versions/A/CoreMedia
0x00007fff272ed000 	/System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo
0x00007fff2baf3000 	/System/Library/Frameworks/VideoToolbox.framework/Versions/A/VideoToolbox
0x00007fff26180000 	/System/Library/PrivateFrameworks/BaseBoard.framework/Versions/A/BaseBoard
0x00007fff2b20b000 	/System/Library/PrivateFrameworks/PersistentConnection.framework/Versions/A/PersistentConnection
0x00007fff25f13000 	/System/Library/PrivateFrameworks/ProtocolBuffer.framework/Versions/A/ProtocolBuffer
0x00007fff26167000 	/System/Library/PrivateFrameworks/CommonUtilities.framework/Versions/A/CommonUtilities
0x00007fff2b926000 	/System/Library/PrivateFrameworks/Bom.framework/Versions/A/Bom
0x00007fff2bd19000 	/System/Library/PrivateFrameworks/GPUWrangler.framework/Versions/A/GPUWrangler
0x00007fff2bcfe000 	/System/Library/PrivateFrameworks/IOPresentment.framework/Versions/A/IOPresentment
0x00007fff2bd24000 	/System/Library/PrivateFrameworks/DSExternalDisplay.framework/Versions/A/DSExternalDisplay
0x00007fff2bd84000 	/System/Library/PrivateFrameworks/CMCaptureCore.framework/Versions/A/CMCaptureCore
0x00007fff2b6ab000 	/System/Library/PrivateFrameworks/AppServerSupport.framework/Versions/A/AppServerSupport
0x00007fff2d757000 	/System/Library/PrivateFrameworks/perfdata.framework/Versions/A/perfdata
0x00007fff29c87000 	/System/Library/PrivateFrameworks/AssertionServices.framework/Versions/A/AssertionServices
0x00007fff21735000 	/System/Library/PrivateFrameworks/AudioToolboxCore.framework/Versions/A/AudioToolboxCore
0x00007fff2846f000 	/System/Library/PrivateFrameworks/caulk.framework/Versions/A/caulk
0x00007fff3d3e4000 	/System/Library/PrivateFrameworks/SystemPolicy.framework/Versions/A/SystemPolicy
0x00007fff2aebb000 	/usr/lib/libIOReport.dylib
0x00007fff2cf79000 	/usr/lib/libSMC.dylib
0x00007fff2bc46000 	/usr/lib/libAudioToolboxUtility.dylib
0x00007fff3dd4e000 	/usr/lib/libmis.dylib
0x00007fff6c8b4000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib
0x00007fff6c877000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib
0x00007fff6ca86000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib
0x00007fff6c880000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib
0x00007fff6c874000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCVMSPluginSupport.dylib
0x00007fff6c85f000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib
0x00007fff6dec7000 	/System/Library/Frameworks/OpenCL.framework/Versions/A/OpenCL
0x00007fff2b235000 	/System/Library/PrivateFrameworks/GraphVisualizer.framework/Versions/A/GraphVisualizer
0x00007fff2b244000 	/System/Library/PrivateFrameworks/FaceCore.framework/Versions/A/FaceCore
0x00007fff2b660000 	/System/Library/PrivateFrameworks/OTSVG.framework/Versions/A/OTSVG
0x00007fff26ee4000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib
0x00007fff2b6b2000 	/System/Library/PrivateFrameworks/FontServices.framework/libhvf.dylib
0x00007fff2b072000 	/System/Library/PrivateFrameworks/AppleVA.framework/Versions/A/AppleVA
0x00007fff2cdc2000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS
0x00007fff2d0d4000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSyncLegacy.framework/Versions/A/ColorSyncLegacy
0x00007fff256ed000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices
0x00007fff2d0b9000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis
0x00007fff2bd8e000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore
0x00007fff2d0dc000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD
0x00007fff2cdb2000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis
0x00007fff2bd4f000 	/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATSUI.framework/Versions/A/ATSUI
0x00007fff2d059000 	/usr/lib/libcups.2.dylib
0x00007fff2d0c9000 	/System/Library/PrivateFrameworks/NetAuth.framework/Versions/A/NetAuth
0x00007fff2d773000 	/System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos
0x00007fff2d783000 	/System/Library/Frameworks/GSS.framework/Versions/A/GSS
0x00007fff2ce2e000 	/usr/lib/libresolv.9.dylib
0x00007fff2b6c7000 	/System/Library/PrivateFrameworks/Heimdal.framework/Versions/A/Heimdal
0x00007fff334fa000 	/System/Library/Frameworks/Kerberos.framework/Versions/A/Libraries/libHeimdalProxy.dylib
0x00007fff262d3000 	/System/Library/Frameworks/Network.framework/Versions/A/Network
0x00007fff2b0e0000 	/usr/lib/libheimdal-asn1.dylib
0x00007fff2d7d3000 	/System/Library/PrivateFrameworks/CommonAuth.framework/Versions/A/CommonAuth
0x00007fff2733a000 	/System/Library/PrivateFrameworks/login.framework/Versions/A/Frameworks/loginsupport.framework/Versions/A/loginsupport
0x00007fff2cd37000 	/System/Library/PrivateFrameworks/AudioSession.framework/Versions/A/AudioSession
0x00007fff2cd9f000 	/usr/lib/libAudioStatistics.dylib
0x00007fff2b16d000 	/System/Library/PrivateFrameworks/MediaExperience.framework/Versions/A/MediaExperience
0x00007fff2cbd4000 	/System/Library/PrivateFrameworks/AudioSession.framework/libSessionUtility.dylib
0x00007fff2d764000 	/usr/lib/libperfcheck.dylib
0x00007fff2d0e8000 	/System/Library/PrivateFrameworks/AudioResourceArbitration.framework/Versions/A/AudioResourceArbitration
0x00007fff2b0ea000 	/System/Library/PrivateFrameworks/IconFoundation.framework/Versions/A/IconFoundation
0x00007fff2fc0a000 	/System/Library/PrivateFrameworks/SpeechRecognitionCore.framework/Versions/A/SpeechRecognitionCore
0x000000010887c000 	/Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/server/libjvm.dylib
0x00000001099b2000 	/Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libjimage.dylib
0x00000001099c7000 	/Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libjava.dylib
0x000000010cca7000 	/Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libawt.dylib
0x000000010cd61000 	/Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libmlib_image.dylib
0x00007fff6f6f8000 	/System/Library/Frameworks/JavaRuntimeSupport.framework/Versions/A/JavaRuntimeSupport
0x00007fff3d15c000 	/System/Library/Frameworks/Carbon.framework/Versions/A/Carbon
0x00007fff31bd0000 	/System/Library/PrivateFrameworks/CoreSymbolication.framework/Versions/A/CoreSymbolication
0x00007fff36462000 	/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CommonPanels.framework/Versions/A/CommonPanels
0x00007fff32fb5000 	/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Help.framework/Versions/A/Help
0x00007fff36466000 	/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/ImageCapture.framework/Versions/A/ImageCapture
0x00007fff3643e000 	/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/OpenScripting.framework/Versions/A/OpenScripting
0x00007fff3645e000 	/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Ink.framework/Versions/A/Ink
0x00007fff3d158000 	/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Print.framework/Versions/A/Print
0x00007fff3645a000 	/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SecurityHI.framework/Versions/A/SecurityHI
0x00007fff31b93000 	/System/Library/PrivateFrameworks/DebugSymbols.framework/Versions/A/DebugSymbols
0x000000010cdf8000 	/Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libawt_lwawt.dylib
0x000000010cf26000 	/Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libosxapp.dylib
0x00007fff3c51c000 	/System/Library/Frameworks/ExceptionHandling.framework/Versions/A/ExceptionHandling
0x000000010cf5a000 	/Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libnio.dylib
0x000000010cf70000 	/Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libnet.dylib
0x000000010cf84000 	/Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libfontmanager.dylib
0x000000010d10a000 	/Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libfreetype.dylib
0x00007fff22ade000 	/System/Library/PrivateFrameworks/CoreServicesInternal.framework/Versions/A/CoreServicesInternal
0x00007fff310f0000 	/System/Library/Frameworks/FileProvider.framework/Versions/A/FileProvider
0x00007fff260ea000 	/System/Library/Frameworks/Accounts.framework/Versions/A/Accounts
0x00007fff31211000 	/System/Library/PrivateFrameworks/GenerationalStorage.framework/Versions/A/GenerationalStorage
0x00007fff30b0f000 	/System/Library/PrivateFrameworks/SymptomDiagnosticReporter.framework/Versions/A/SymptomDiagnosticReporter
0x00007fff2e41c000 	/System/Library/PrivateFrameworks/AppContainer.framework/Versions/A/AppContainer
0x00007fff23c28000 	/System/Library/PrivateFrameworks/DesktopServicesPriv.framework/Versions/A/DesktopServicesPriv
0x00007fff22c12000 	/usr/lib/libsandbox.1.dylib
0x00007fff27366000 	/System/Library/PrivateFrameworks/UserManagement.framework/Versions/A/UserManagement
0x00007fff29c64000 	/System/Library/PrivateFrameworks/MobileKeyBag.framework/Versions/A/MobileKeyBag
0x00007fff34563000 	/System/Library/PrivateFrameworks/ChunkingLibrary.framework/Versions/A/ChunkingLibrary
0x00007fff2e431000 	/System/Library/PrivateFrameworks/SecCodeWrapper.framework/Versions/A/SecCodeWrapper
0x00007fff2aec3000 	/System/Library/PrivateFrameworks/CrashReporterSupport.framework/Versions/A/CrashReporterSupport
0x00007fff482c6000 	/System/Library/PrivateFrameworks/OSAnalytics.framework/Versions/A/OSAnalytics
0x00007fff783df000 	/usr/lib/libRosetta.dylib
0x00007fff32f46000 	/System/Library/PrivateFrameworks/RemoteServiceDiscovery.framework/Versions/A/RemoteServiceDiscovery
0x00007fff52284000 	/System/Library/PrivateFrameworks/Symbolication.framework/Versions/A/Symbolication
0x00007fff32f56000 	/System/Library/PrivateFrameworks/RemoteXPC.framework/Versions/A/RemoteXPC
0x00007fff39453000 	/System/Library/PrivateFrameworks/OSAServicesClient.framework/Versions/A/OSAServicesClient
0x00007fff3dd2d000 	/System/Library/PrivateFrameworks/MallocStackLogging.framework/Versions/A/MallocStackLogging
0x00007fff2e1b3000 	/System/Library/PrivateFrameworks/Sharing.framework/Versions/A/Sharing
0x00007fff32b23000 	/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Apple80211
0x00007fff2a2e8000 	/System/Library/PrivateFrameworks/AuthKit.framework/Versions/A/AuthKit
0x00007fff29a64000 	/System/Library/PrivateFrameworks/CoreUtils.framework/Versions/A/CoreUtils
0x00007fff29991000 	/System/Library/Frameworks/CoreWLAN.framework/Versions/A/CoreWLAN
0x00007fff2e2fb000 	/System/Library/Frameworks/IOBluetooth.framework/Versions/A/IOBluetooth
0x00007fff32b87000 	/System/Library/PrivateFrameworks/CoreWiFi.framework/Versions/A/CoreWiFi
0x00007fff2d85b000 	/System/Library/PrivateFrameworks/CorePhoneNumbers.framework/Versions/A/CorePhoneNumbers
0x00007fff30c17000 	/System/Library/PrivateFrameworks/DiskManagement.framework/Versions/A/DiskManagement
0x00007fff30b2d000 	/System/Library/PrivateFrameworks/AppleIDAuthSupport.framework/Versions/A/AppleIDAuthSupport
0x00007fff2d838000 	/System/Library/PrivateFrameworks/KeychainCircle.framework/Versions/A/KeychainCircle
0x00007fff30be3000 	/System/Library/PrivateFrameworks/MediaKit.framework/Versions/A/MediaKit
0x00007fff30b3a000 	/System/Library/Frameworks/DiscRecording.framework/Versions/A/DiscRecording
0x00007fff2afe6000 	/usr/lib/libCoreStorage.dylib
0x00007fff32fc1000 	/usr/lib/libcsfde.dylib
0x00007fff2e435000 	/System/Library/PrivateFrameworks/ProtectedCloudStorage.framework/Versions/A/ProtectedCloudStorage
0x00007fff32fb9000 	/System/Library/PrivateFrameworks/EFILogin.framework/Versions/A/EFILogin
0x00007fff335ad000 	/System/Library/Frameworks/AudioUnit.framework/Versions/A/AudioUnit
0x00007fff30aac000 	/System/Library/Frameworks/CoreBluetooth.framework/Versions/A/CoreBluetooth
0x00007fff2afde000 	/usr/lib/libMatch.1.dylib
0x00007fff43f62000 	/System/Library/CoreServices/RawCamera.bundle/Contents/MacOS/RawCamera
0x00007fff2d7e4000 	/System/Library/PrivateFrameworks/MobileAsset.framework/Versions/A/MobileAsset
0x00007fff335d2000 	/System/Library/PrivateFrameworks/StreamingZip.framework/Versions/A/StreamingZip
0x00007fff2bf87000 	/System/Library/Frameworks/MediaToolbox.framework/Versions/A/MediaToolbox
0x00007fff310c2000 	/System/Library/PrivateFrameworks/CoreAVCHD.framework/Versions/A/CoreAVCHD
0x00007fff30276000 	/System/Library/Frameworks/MediaAccessibility.framework/Versions/A/MediaAccessibility
0x00007fff310be000 	/System/Library/PrivateFrameworks/Mangrove.framework/Versions/A/Mangrove
0x00007fff30282000 	/System/Library/PrivateFrameworks/AlgosScoreFramework.framework/Versions/A/AlgosScoreFramework
0x00007fff31a83000 	/System/Library/PrivateFrameworks/AppleVPA.framework/Versions/A/AppleVPA
0x00007fff30d03000 	/System/Library/PrivateFrameworks/CoreAUC.framework/Versions/A/CoreAUC
0x00007fff41954000 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/Libraries/libCGInterfaces.dylib
0x000000010e53f000 	/usr/lib/libobjc-trampolines.dylib
0x00007fff27068000 	/System/Library/PrivateFrameworks/ViewBridge.framework/Versions/A/ViewBridge
0x00007fff2b788000 	/System/Library/PrivateFrameworks/login.framework/Versions/A/login
0x00007fff70127000 	/System/Library/PrivateFrameworks/AccessibilityBundles.framework/Versions/A/AccessibilityBundles
0x00007fff6ca91000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/Resources/GLEngine.bundle/GLEngine
0x00007fff6c8f1000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLProgrammability.dylib
0x00007fff5fc21000 	/System/Library/Extensions/AppleIntelKBLGraphicsGLDriver.bundle/Contents/MacOS/AppleIntelKBLGraphicsGLDriver
0x00007fff46c5a000 	/System/Library/PrivateFrameworks/GPUSupport.framework/Versions/A/Libraries/libGPUSupportMercury.dylib
0x0000000151e11000 	/System/Library/Extensions/AMDRadeonX6000GLDriver.bundle/Contents/MacOS/AMDRadeonX6000GLDriver
0x00007fff6ee42000 	/System/Library/Extensions/AMDRadeonX6000GLDriver.bundle/Contents/MacOS/ATIRadeonX6000SCLib.dylib
0x00007fff5eec5000 	/System/Library/Extensions/AMDShared.bundle/Contents/PlugIns/libSC.dylib
0x00007fff6cc0d000 	/System/Library/Frameworks/OpenGL.framework/Versions/A/Resources/GLRendererFloat.bundle/GLRendererFloat
0x00000001523df000 	/Users/tav/openjdk/build/macosx-x86_64-server-release/images/jdk/lib/libosxui.dylib


VM Arguments:
java_command: RemoveDropTargetCrashTest
java_class_path (initial): .
Launcher Type: SUN_STANDARD

[Global flags]
     intx CICompilerCount                          = 12                                        {product} {ergonomic}
     uint ConcGCThreads                            = 3                                         {product} {ergonomic}
     uint G1ConcRefinementThreads                  = 13                                        {product} {ergonomic}
   size_t G1HeapRegionSize                         = 4194304                                   {product} {ergonomic}
    uintx GCDrainStackTargetSize                   = 64                                        {product} {ergonomic}
   size_t InitialHeapSize                          = 536870912                                 {product} {ergonomic}
   size_t MarkStackSize                            = 4194304                                   {product} {ergonomic}
   size_t MaxHeapSize                              = 8589934592                                {product} {ergonomic}
   size_t MaxNewSize                               = 5150605312                                {product} {ergonomic}
   size_t MinHeapDeltaBytes                        = 4194304                                   {product} {ergonomic}
   size_t MinHeapSize                              = 8388608                                   {product} {ergonomic}
    uintx NonNMethodCodeHeapSize                   = 7602480                                {pd product} {ergonomic}
    uintx NonProfiledCodeHeapSize                  = 122027880                              {pd product} {ergonomic}
    uintx ProfiledCodeHeapSize                     = 122027880                              {pd product} {ergonomic}
    uintx ReservedCodeCacheSize                    = 251658240                              {pd product} {ergonomic}
     bool SegmentedCodeCache                       = true                                      {product} {ergonomic}
   size_t SoftMaxHeapSize                          = 8589934592                             {manageable} {ergonomic}
     bool UseCompressedClassPointers               = true                           {product lp64_product} {ergonomic}
     bool UseCompressedOops                        = true                           {product lp64_product} {ergonomic}
     bool UseG1GC                                  = true                                      {product} {ergonomic}
     bool UseNUMA                                  = false                                     {product} {ergonomic}
     bool UseNUMAInterleaving                      = false                                     {product} {ergonomic}

Logging:
Log output configuration:
 #0: stdout all=warning uptime,level,tags foldmultilines=false
 #1: stderr all=off uptime,level,tags foldmultilines=false

Environment Variables:
JAVA_HOME=/Users/tav/Downloads/jdk-17.jdk/Contents/Home
PATH=/Users/tav/opt/anaconda3/bin:/Users/tav/opt/anaconda3/condabin:/Users/tav/dev/ant-1.9.14/bin:/Users/tav/dev/cmake-3.19.1-Darwin-x86_64/CMake.app/Contents/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin
SHELL=/bin/bash
DISPLAY=/private/tmp/com.apple.launchd.uZJom5XVjL/org.macosforge.xquartz:0
LC_CTYPE=UTF-8

Signal Handlers:
   SIGSEGV: crash_handler in libjvm.dylib, mask=11100110000111110111111111111111, flags=SA_RESTART|SA_SIGINFO
    SIGBUS: crash_handler in libjvm.dylib, mask=11100110000111110111111111111111, flags=SA_RESTART|SA_SIGINFO
    SIGFPE: crash_handler in libjvm.dylib, mask=11100110000111110111111111111111, flags=SA_RESTART|SA_SIGINFO
   SIGPIPE: javaSignalHandler in libjvm.dylib, mask=11100110000111110111111111111111, flags=SA_RESTART|SA_SIGINFO
   SIGXFSZ: javaSignalHandler in libjvm.dylib, mask=11100110000111110111111111111111, flags=SA_RESTART|SA_SIGINFO
    SIGILL: crash_handler in libjvm.dylib, mask=11100110000111110111111111111111, flags=SA_RESTART|SA_SIGINFO
   SIGUSR2: SR_handler in libjvm.dylib, mask=00000000000000000000000000000000, flags=SA_RESTART|SA_SIGINFO
    SIGHUP: UserHandler in libjvm.dylib, mask=11100110000111110111111111111111, flags=SA_RESTART|SA_SIGINFO
    SIGINT: UserHandler in libjvm.dylib, mask=11100110000111110111111111111111, flags=SA_RESTART|SA_SIGINFO
   SIGTERM: UserHandler in libjvm.dylib, mask=11100110000111110111111111111111, flags=SA_RESTART|SA_SIGINFO
   SIGQUIT: UserHandler in libjvm.dylib, mask=11100110000111110111111111111111, flags=SA_RESTART|SA_SIGINFO
   SIGTRAP: crash_handler in libjvm.dylib, mask=11100110000111110111111111111111, flags=SA_RESTART|SA_SIGINFO


---------------  S Y S T E M  ---------------

OS:
uname: Darwin 20.2.0 Darwin Kernel Version 20.2.0: Wed Dec  2 20:39:59 PST 2020; root:xnu-7195.60.75~1/RELEASE_X86_64 x86_64
OS uptime: 18 days 19:44 hours
rlimit (soft/hard): STACK 8192k/65532k , CORE 0k/infinity , NPROC 5568/8352 , NOFILE 10240/infinity , AS infinity/infinity , CPU infinity/infinity , DATA infinity/infinity , FSIZE infinity/infinity , MEMLOCK infinity/infinity , RSS infinity/infinity
load average: 2.16 2.72 3.12

CPU: total 16 (initial active 16) (8 cores per cpu, 2 threads per core) family 6 model 158 stepping 13 microcode 0xde, cx8, cmov, fxsr, ht, mmx, 3dnowpref, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, lzcnt, tsc, tscinvbit, avx, avx2, aes, erms, clmul, bmi1, bmi2, adx, fma, vzeroupper, clflush, clflushopt

Memory: 4k page, physical 33554432k(117200k free), swap 8388608k(954368k free)

vm_info: OpenJDK 64-Bit Server VM (19-internal+0-adhoc.tav.openjdk) for bsd-amd64 JRE (19-internal+0-adhoc.tav.openjdk), built on Dec 13 2021 17:17:54 by ""tav"" with clang Apple LLVM 12.0.0 (clang-1200.0.32.27)

END.
{code}",,,,,,,,,,JDK-8279817,JDK-8279772,JDK-8287780,JDK-8288408,JDK-8289571,JDK-8289922,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i2vdgj:",9223372036854775807,b31,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,Verified,,"2021-12-22 04:48;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/65
Date: 2021-12-22 12:42:30 +0000
;;;","2022-01-05 10:37;roboduke;Changeset: 590fa9d8
Author:    Anton Tarasov <ant@openjdk.org>
Date:      2022-01-05 18:37:00 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/590fa9d8d75b4cf401fe5a1556f4f0b7145a77ab
;;;","2022-01-05 17:29;roboduke;Changeset: 590fa9d8
Author:    Anton Tarasov <ant@openjdk.org>
Date:      2022-01-05 18:37:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/590fa9d8d75b4cf401fe5a1556f4f0b7145a77ab
;;;","2022-07-04 01:02;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Clean backport
SAP nighlty testing passed.;;;","2022-07-04 01:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/524
Date: 2022-07-04 08:03:43 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] accessibility frame is misplaced on a secondary monitor on macOS,JDK-8278609,5064566,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ant,ant,ant,2021-12-13 06:49,2023-05-05 03:45,2023-10-01 09:57,2021-12-20 03:43,18,,,,,,,,18,client-libs,,0,a11y,accessibility,cssn22_07_01,jdk11u-a11y-defer,jdk17u-fix-request,jdk17u-fix-yes,macos,regression,,,,,,,,,,,,"When an app is displayed on a secondary monitor whose vertical resolution differs from the primary monitor, accessibility outline frame gets misplaced while navigating UI elements.

This can be easily reproduced with SwingSet2, for instance.",,,,,,,,,,JDK-8279106,JDK-8279742,JDK-8287779,JDK-8288407,JDK-8289518,JDK-8289929,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i2vdfv:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2021-12-17 10:55;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6815
Date: 2021-12-13 15:33:48 +0000
;;;","2021-12-20 01:31;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/48
Date: 2021-12-20 09:26:31 +0000
;;;","2021-12-20 03:43;roboduke;Changeset: ad128284
Author:    Aleksandr Veselov <aleksandr.veselov@jetbrains.com>
Committer: Anton Tarasov <ant@openjdk.org>
Date:      2021-12-20 11:40:58 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/ad1282842c5eefdad151afe6f4db97a09d643546
;;;","2022-07-01 02:19;jdowland;Fix request (17u)

Please consider this backport for openjdk17u for Oracle parity. It applies clean.
Note that the patch does not add or modify any tests. I haven't yet been able to reproduce the original issue, but running swingset2 after the patch exercises the various toolkit widgets and they all seemed fine.;;;","2022-07-01 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/520
Date: 2022-07-01 09:17:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Misc issues in foreign API javadoc,JDK-8278607,5064564,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-12-13 06:15,2022-01-10 09:31,2023-10-01 09:57,2021-12-15 04:25,18,,,,,,,,18,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"Some additional review of the foreign API javadoc discovered some issues and typos. Some examples:

* @link instead of @linkplain not used to refer to method types (in CLinker)
* ""lookup"" instead of ""look up"" is incorrectly used as a verb
",,,,,,,,,,JDK-8279722,JDK-8278880,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vdff:",9223372036854775807,b28,,,,,,,,,,,,"2021-12-15 04:25;roboduke;Changeset: d6b5544e
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2021-12-15 12:25:25 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/d6b5544e74d46c1ca464a1994e73ddd323ef5c2b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SwingSet2 table demo does not have accessible description set for images,JDK-8278604,5064560,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenov,kizune,kizune,2021-12-13 04:35,2022-02-01 06:01,2023-10-01 09:57,2021-12-17 11:32,17,18,,,,,,,18,client-libs,,0,a11y,accessibility,demo,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,The SwingSet2 demo often used to check the accessibility for different Swing components and has some shortcomings. The major one is that images within the table demo do not have accessible description set which makes accessibility perform differently on different platforms when navigating the table with screen narrator enabled.,,,,,,,,,,JDK-8281044,JDK-8280833,JDK-8279101,JDK-8279737,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vdej:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2a9c6101,,,,,,,,,"2021-12-17 11:32;roboduke;Changeset: 8fbe1724
Author:    Artem Semenov <asemenov@openjdk.org>
Date:      2021-12-17 19:31:51 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/8fbe1724e0f783132a65c45503addad9d98a329e
;;;","2022-01-27 01:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/125
Date: 2022-01-27 09:13:00 +0000;;;","2022-01-27 02:33;asemenov;Fix request (17u)
Hi all,

This pull request contains a backport of commit 8fbe1724 from the openjdk/jdk repository.

The commit being backported was authored by Artem Semenov on 17 Dec 2021 and was reviewed by Anton Tarasov, Alexander Zuev and Pankaj Bansal.

Thanks!

pr: https://github.com/openjdk/jdk17u-dev/pull/125;;;","2022-01-27 06:54;goetz;Hi Artem, 
please describe why you want to backport this, and argue about the risk of the backport. See also point 6a) here: https://wiki.openjdk.java.net/display/JDKUpdates/How+to+contribute+a+fix
;;;","2022-01-28 07:32;asemenov;@goetz SwingSet2 is often used to validate the correct operation of accessibility and without this fix, validation results will be unrepresentative.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ThreadInfo::getLockInfo on carrier thread returns LockInfo when virtual thread waiting,JDK-8278603,5064559,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rpressler,alanb,alanb,2021-12-13 03:26,2022-02-14 02:28,2023-10-01 09:57,2022-02-14 02:28,repo-loom,,,,,,,,repo-loom,core-svc,,0,,,,,,,,,,,,,,,,,,,,"A virtual thread is blocked in Object.wait, this pins its carrier thread.  ThreadMXBean.getThreadInfo is called with the thread id of the carrier thread, then its getLockInfo is called to get lock info. The LockInfo makes it appear that the carrier thread is waiting.

I attach a test case to demonstrate.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-12-13 03:43;alanb;Test.java;https://bugs.openjdk.org/secure/attachment/97349/Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vdeb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2022-02-14 02:28;rpressler;Fixed by 9d59c01;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS dynamic dump may access unloaded classes,JDK-8278602,5064558,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,mbaesken,mbaesken,2021-12-13 03:22,2022-01-10 17:07,2023-10-01 09:57,2022-01-03 20:54,18,19,,,,,,,19,hotspot,,0,cds,noreg-hard,,,,,,,,,,,,,,,,,,"I am still seeing the assertion ""assert(ZAddress::is_marked(addr)) failed: Should be marked"" in current jdk/jdk (but on macOS darwinaarch64). Appeared in test runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java#custom-cl-zgc

# Internal Error (/openjdk/nb/darwinaarch64/jdk-dev/src/hotspot/share/gc/z/zBarrier.cpp:41), pid=84433, tid=42755
# assert(ZAddress::is_marked(addr)) failed: Should be marked

Current thread (0x0000000125efafd0): VMThread ""VM Thread"" [stack: 0x000000016f3f4000,0x000000016f5f7000] [id=42755]

Stack: [0x000000016f3f4000,0x000000016f5f7000], sp=0x000000016f5f6520, free space=2057k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V [libjvm.dylib+0x115135c] VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x5d4
V [libjvm.dylib+0x1151a9c] VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40
V [libjvm.dylib+0x5a245c] report_vm_error(char const*, int, char const*, char const*, ...)+0x80
V [libjvm.dylib+0x11aa71c] unsigned long ZBarrier::mark<false, true, false, true>(unsigned long)+0x98
V [libjvm.dylib+0x81fac0] oop ZBarrier::barrier<&(ZBarrier::is_good_or_null_fast_path(unsigned long)), &(ZBarrier::load_barrier_on_oop_slow_path(unsigned long))>(oop volatile*, oop)+0xa0
V [libjvm.dylib+0x996eb4] AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<548932ull, ZBarrierSet>, (AccessInternal::BarrierType)2, 548932ull>::oop_access_barrier(void*)+0x94
V [libjvm.dylib+0x84fb2c] InstanceKlass::signers() const+0x34
V [libjvm.dylib+0x1073b0c] SystemDictionaryShared::check_for_exclusion_impl(InstanceKlass*)+0x28c
V [libjvm.dylib+0x1073834] SystemDictionaryShared::check_for_exclusion(InstanceKlass*, DumpTimeClassInfo*)+0x188
V [libjvm.dylib+0x1075b8c] SystemDictionaryShared::check_excluded_classes()+0x250
V [libjvm.dylib+0x668bd0] DynamicArchiveBuilder::doit()+0xd8
V [libjvm.dylib+0x668a64] VM_PopulateDynamicDumpSharedSpace::doit()+0xac
V [libjvm.dylib+0x1157b40] VM_Operation::evaluate()+0x104
V [libjvm.dylib+0x1173880] VMThread::evaluate_operation(VM_Operation*)+0x12c
V [libjvm.dylib+0x1174440] VMThread::inner_execute(VM_Operation*)+0x33c
V [libjvm.dylib+0x1173558] VMThread::loop()+0xb4
V [libjvm.dylib+0x1173340] VMThread::run()+0xc0
V [libjvm.dylib+0x10a5fd0] Thread::call_run()+0x21c
V [libjvm.dylib+0xdaa074] thread_native_entry(Thread*)+0x160
C [libsystem_pthread.dylib+0x7878] _pthread_start+0x140",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277998,,,,,,,,,,,,,,,,,,"2021-12-15 12:53;iklam;LotsUnload.java;https://bugs.openjdk.org/secure/attachment/97387/LotsUnload.java","2021-12-15 12:53;iklam;Makefile;https://bugs.openjdk.org/secure/attachment/97386/Makefile",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2vde3:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-12-13 03:23;mbaesken;Similar issue was dicussed here : https://bugs.openjdk.java.net/browse/JDK-8277998;;;","2021-12-13 08:56;iklam;[~mbaesken] do you have a core file that shows what the offending class is?;;;","2021-12-13 18:07;iklam;It looks like the fix in JDK-8277998 was not effective. The class that caused the crash was probably a hidden class that got unloaded when we are in the middle of the VM_PopulateDynamicDumpSharedSpace operation. I can't reproduce the problem even with modifying the VM code. However, I think we can do this to make the CDS code safe from class unloading:

***
EDIT - the following proposal is withdrawn. Please see the PR for the actual fix
https://github.com/openjdk/jdk/pull/6859
***

Proposed fix:

1. When we start to dump a CDS archive, mark all currently alive class loaders. Use OopHandles to keep these loaders alive during the entire CDS dumping process.
2. When walking the SystemDictionaryShared::_dumptime_table , skip all classes whose loader is not marked in step 1.
3. Clear the OopHandles after the CDS dump is finished.

As a result, whenever we look at a class during the CDS dump process, we can be guaranteed that this class is not unloaded.;;;","2021-12-13 23:56;mbaesken;Sorry I have no core file.
Regarding
>The class that caused the crash was probably a hidden class that got unloaded when we are in the middle of the VM_PopulateDynamicDumpSharedSpace operation
Indeed I see in the hs_err :
VM_Operation (0x000000016db5a788): PopulateDumpSharedSpace, mode: safepoint, requested by thread 0x000000012700e020

A couple of class load/unload events are logged as well (not sure if those hidden classes would be logged?).

Classes loaded (20 events):
Event: 0.211 Loading class sun/net/www/protocol/jrt/Handler
Event: 0.211 Loading class sun/net/www/protocol/jrt/Handler done
Event: 0.216 Loading class sun/net/www/protocol/jrt/JavaRuntimeURLConnection
Event: 0.216 Loading class sun/net/www/protocol/jrt/JavaRuntimeURLConnection done
Event: 0.217 Loading class sun/net/www/protocol/jrt/JavaRuntimeURLConnection$1
Event: 0.217 Loading class sun/net/www/protocol/jrt/JavaRuntimeURLConnection$1 done
Event: 0.219 Loading class jdk/internal/jimage/ImageBufferCache
Event: 0.219 Loading class jdk/internal/jimage/ImageBufferCache done
Event: 0.219 Loading class jdk/internal/jimage/ImageBufferCache$1
Event: 0.219 Loading class jdk/internal/jimage/ImageBufferCache$1 done
Event: 0.219 Loading class jdk/internal/jimage/ImageBufferCache$2
Event: 0.219 Loading class jdk/internal/jimage/ImageBufferCache$2 done
Event: 0.219 Loading class java/util/AbstractMap$SimpleEntry
Event: 0.219 Loading class java/util/AbstractMap$SimpleEntry done
Event: 0.296 Loading class java/lang/Throwable$WrappedPrintStream
Event: 0.296 Loading class java/lang/Throwable$PrintStreamOrWriter
Event: 0.296 Loading class java/lang/Throwable$PrintStreamOrWriter done
Event: 0.296 Loading class java/lang/Throwable$WrappedPrintStream done
Event: 0.296 Loading class java/lang/StackTraceElement$HashedModules
Event: 0.296 Loading class java/lang/StackTraceElement$HashedModules done

Classes unloaded (4 events):
Event: 0.381 Thread 0x000000014600ea20 Unloading class 0x0000000800c05800 'jdk/test/lib/Asserts'
Event: 0.381 Thread 0x000000014600ea20 Unloading class 0x0000000800c01cd8 'MyHttpHandler'
Event: 0.381 Thread 0x000000014600ea20 Unloading class 0x0000000800c01a00 'com/sun/net/httpserver/HttpExchange'
Event: 0.381 Thread 0x000000014600ea20 Unloading class 0x0000000800c01800 'LoaderConstraintsApp'

Classes redefined (0 events):
No events;;;","2021-12-14 11:09;mseledtsov;ILW = HLM = P3;;;","2021-12-15 12:58;iklam;Reproducer:

(1) Download LotsUnload.java and Makefile from the attachments
(2) Apply the following patch to JDK to increase the likelihood of the crash

diff --git a/src/hotspot/share/gc/z/zDriver.cpp b/src/hotspot/share/gc/z/zDriver.cpp
index 30fdeb6804f..18b5a013399 100644
--- a/src/hotspot/share/gc/z/zDriver.cpp
+++ b/src/hotspot/share/gc/z/zDriver.cpp
@@ -457,6 +457,8 @@ void ZDriver::gc(const ZDriverRequest& request) {
     concurrent(mark_continue);
   }
 
+  os::naked_sleep(NewCodeParameter);
+
   // Phase 4: Concurrent Mark Free
   concurrent(mark_free);

(3) make run   (read the Makefile for details)

(4) Run a command like the following. You may need to adjust the

i=0; while /my/build/fastdebug/images/jdk/bin/java -cp LotsUnload.jar -XX:ArchiveClassesAtExit=dyn.jsa -Xmx64m -Xms32m -XX:+UseZGC     -XX:SharedArchiveFile=ZGCBaseArchive.jsa   -XX:NewCodeParameter=90 LotsUnload 4 150; do i=$(expr $i + 1); echo -n ""$i ""; done

For me, I got a crash in less than a minute.


======
I marked the bug as noreg-hard

The test case requires a patch in ZGC to add arbitrary delays. Therefore, it's not suitable to be integrated into the regression test suite.

I am unable to write a reproducer for an unpatched JVM. [~stefank] also tried manipulating the ZGC command-line flags but was unsuccessful.;;;","2021-12-15 18:35;dholmes;[~iklam] Marking the classloader as alive won't help for hidden classes that are not created as STRONG as they do not depend on their classloader for liveness.;;;","2021-12-15 19:54;iklam;[~dholmes] In my latest version, we no longer mark the class loader oop. Instead, we call Klass::is_loader_alive() to check if a class has been unloaded. See https://github.com/openjdk/jdk/pull/6859

=======

BTW, this function probably should be renamed in a separate RFE. It checks if the class_loader_data() is alive. If a non-strong hidden class is unloaded, Klass::is_loader_alive() will report false.

inline bool Klass::is_loader_alive() const {
  return class_loader_data()->is_alive();
}
;;;","2021-12-15 20:18;dholmes;That is confusing. So `is_loader_alive()` has nothing to do with the loader at all? At what point during class unloading does an actual klass instance become unusable? Are we guaranteed that if we find the klass instance then we can ask it `is_loader_alive()` and be certain that that state can't change? (I see you've put in assertions to catch that).;;;","2021-12-15 22:56;iklam;As far as I know, a class can become unloaded (e.g., Klass::java_mirror() no longer works) only sometime after class_loader_data()->is_alive() becomes false. 

I believe the current patch is safe because:

For any class K seen by DumpTimeSharedClassTable::IterationHelper::do_entry()

- The iteration loop holds the DumpTimeTable_lock. Before an InstanceKlass is deallocated, it must grab the DumpTimeTable_lock and remove itself from the _dumptime_table. Therefore, if we can get K from the _dumptime_table, we know that K is still valid.

- We also know that K->class_loader_data() is valid -- it will remain valid until all of its classes have been deallocated. But K has not be deallocated yet.

- The iteration happens only inside a safepoint, where ClassLoaderData::is_alive() will never transit from true to false, for any ClassLoaderData  (according to [~coleenp] and [~stefank]).

Therefore, we know that if K->class_loader_data()->is_alive() is true, this class has not be unloaded, and will not be unloaded as long as we are in the safepoint (i.e., VM_PopulateDynamicDumpSharedSpace::doit()).;;;","2021-12-16 02:01;dholmes;> As far as I know, a class can become unloaded (e.g., Klass::java_mirror() no longer works) only sometime after class_loader_data()->is_alive() becomes false. 

That's true for regular classes but non-STRONG hidden classes can be unloaded independent of their classloader.;;;","2021-12-16 05:27;coleenp;> That's true for regular classes but non-STRONG hidden classes can be unloaded independent of their classloader.

is_loader_alive() handles this because it looks at the class ""holder"" which is either the class loader OR the mirror of the non-strong hidden classes.  This name purposely does not expose this implementation detail.  You can think of the 'loader' as the mirror for this special case.;;;","2021-12-16 09:20;iklam;> That's true for regular classes but non-STRONG hidden classes can be unloaded independent of their classloader.

David, I think you are confused by the terminology. That's the reason I think Klass::is_loader_alive() should be renamed to something more precise.

ClassLoaderData is not the same as java.lang.ClassLoader, and there's no one-to-one relationship between them. Consider this test:

========
import java.lang.invoke.MethodType;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodHandles.Lookup;
import static java.lang.invoke.MethodHandles.Lookup.ClassOption.*;

public class Foo {
    public static void main(String args[]) throws Throwable {
        System.out.println(""Foo.getClassLoader() = "" + Foo.class.getClassLoader());
        String resname = ""FooHidden.class"";
        byte[] classdata = Foo.class.getClassLoader().getResourceAsStream(resname).readAllBytes();
        Lookup lookup = MethodHandles.lookup();
        Class<?> cl = lookup.defineHiddenClass(classdata, false, NESTMATE).lookupClass();
        cl.newInstance();
    }
}

class FooHidden {
    public FooHidden() {
        System.out.println(""FooHidden.getClassLoader() = "" + FooHidden.class.getClassLoader());
    }
}
========
$ java -cp . -Xlog:class+load=debug::none Foo

Foo source: file:/test/
 klass: 0x0000000800c00800 super: 0x0000000800000d08 loader: [loader data: 0x00007efdc4147c70 for instance a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000007ff756d40}] bytes: 1686 checksum: 574fe204
Foo.getClassLoader() = jdk.internal.loader.ClassLoaders$AppClassLoader@46fbb2c1

FooHidden/0x0000000800c01000 source: Foo
 klass: 0x0000000800c01000 super: 0x0000000800000d08 loader: [loader data: 0x00007efdc415b0b0 for instance a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000007ff756d40} has a 
FooHidden.getClassLoader() = jdk.internal.loader.ClassLoaders$AppClassLoader@46fbb2c1
========

Both classes share the same java.lang.ClassLoader instance. However, their ClassLoaderDatas are different (0x00007efdc4147c70 vs 0x00007efdc415b0b0). When the hidden class is unloaded, it's ClassLoaderData (0x00007efdc415b0b0) is no longer alive. That's the condition tested by my patch.;;;","2021-12-16 21:05;dholmes;>  You can think of the 'loader' as the mirror for this special case. 

I think Coleen meant ""you can think of the mirror as the 'loader' in this special case."" ?

But I'm still unclear on the actual process here. What marks a class_loader_data as not alive and based on what criteria? And when does that happen in relation to the unloading of the class? Which is the chicken and which is the egg? :);;;","2021-12-17 05:37;coleenp;> I think Coleen meant ""you can think of the mirror as the 'loader' in this special case."" ?

Not sure the distinction here, but for non-strong hidden classes the mirror == loader or more accurately mirror == _holder_

// Unloading support
bool ClassLoaderData::is_alive() const {
  bool alive = keep_alive()         // null class loader and incomplete non-strong hidden class.
      || (_holder.peek() != NULL);  // and not cleaned by the GC weak handle processing.

  return alive;
}

If the holder is (class loader or mirror) reference has been cleared by GC, it is no longer alive and this ClassLoaderData can be unloaded.  The criteria for clearing the holder differs per GC but effectively, if there are no references outside of the ClassLoaderData object itself, and GC has reached the phase where it has cleared WeakHandles in OopStorage, the ClassLoaderData is dead and can be unloaded.  Does this help?;;;","2022-01-03 20:54;roboduke;Changeset: 09cf5f19
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-01-04 04:52:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/09cf5f19d76b17790ffb899aad247f821a27d46b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AlignmentReserve is repeatedly reinitialized,JDK-8278598,5064554,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,stefank,stefank,2021-12-13 03:01,2022-06-09 22:15,2023-10-01 09:57,2022-06-02 10:20,19,,,,,,,,19,hotspot,,0,gc-pending-review,,,,,,,,,,,,,,,,,,,"See:
```
class PLAB: public CHeapObj<mtGC> {
...
  static size_t AlignmentReserve;
```

```
PLAB::PLAB(size_t desired_plab_sz_) :
  _word_sz(desired_plab_sz_), _bottom(NULL), _top(NULL),
  _end(NULL), _hard_end(NULL), _allocated(0), _wasted(0), _undo_wasted(0)
{
  AlignmentReserve = Universe::heap()->tlab_alloc_reserve();
  assert(min_size() > AlignmentReserve,
         ""Minimum PLAB size "" SIZE_FORMAT "" must be larger than alignment reserve "" SIZE_FORMAT "" ""
         ""to be able to contain objects"", min_size(), AlignmentReserve);
}
```

It's also not clear if AlignementReserve is always initialized when used. See this code in Shenandoah:
```
  static void initialize_gclab(Thread* thread) {
    assert (thread->is_Java_thread() || thread->is_Worker_thread(), ""Only Java and GC worker threads are allowed to get GCLABs"");
    assert(data(thread)->_gclab == NULL, ""Only initialize once"");
    data(thread)->_gclab = new PLAB(PLAB::min_size());
    data(thread)->_gclab_size = 0;
  }
```
```
size_t PLAB::min_size() {
  // Make sure that we return something that is larger than AlignmentReserve
  return align_object_size(MAX2(MinTLABSize / HeapWordSize, (size_t)oopDesc::header_size())) + AlignmentReserve;
}
```
The PLAB::min_size() call comes before the PLAB constructor call.

I wonder if putting AlignmentReserve initialization in set_object_alignment, would sort this out?

Note how it is currently set up:
AlignmentReserve = Universe::heap()->tlab_alloc_reserve();

I don't think we need to go through the CollectedHeap to initialize it. The only dynamic property in tlab_alloc_reserve seems to be MinObjAlignment.

And if AlignmentReserve gets initialized early, then we could probably use it in the TLAB code as well:
```
size_t ThreadLocalAllocBuffer::end_reserve() {
  size_t reserve_size = Universe::heap()->tlab_alloc_reserve();
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vdd7:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-20 05:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8808
Date: 2022-05-20 12:54:33 +0000;;;","2022-06-02 10:20;dukebot;Changeset: 1fcbaa41
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-06-02 17:16:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1fcbaa411628c46ca6980942b6f6a5ef7062e16f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove outdated comments regarding RMISecurityManager in HotSpotAgent.java,JDK-8278597,5064553,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2021-12-13 02:30,2022-01-25 00:04,2023-10-01 09:57,2022-01-13 01:29,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,"The HotSpotAgent.java setupDebugger method has a commmented out section relating to possibly using RMISecurityManager.

The comment is old, from pre-jdk7, and as RMISecurityManagerhas been deprecated for a while the comments should be removed.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vdcz:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-01-12 07:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7050
Date: 2022-01-12 15:04:04 +0000;;;","2022-01-13 01:29;roboduke;Changeset: 69339346
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2022-01-13 09:29:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/693393463385a966f9bf8a4569074c185c1f2863
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/uncommontrap/TestDeoptOOM.java failing in loom repo,JDK-8278596,5064551,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,rpressler,alanb,alanb,2021-12-13 01:09,2022-01-10 12:42,2023-10-01 09:57,2022-01-10 12:42,repo-loom,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,,"This test is failing in the loom repo on all platforms with:

CompileCommand: exclude compiler/uncommontrap/TestDeoptOOM.main bool exclude = true
CompileCommand: exclude compiler/uncommontrap/TestDeoptOOM.m9_1 bool exclude = true
overlapping storage
 0x00007f99aef5b4c8: 0x00000000f87073b8 param 8 array for #3
 0x00007f99aef5b4c8: 0x00000000f87073b8 local 0
overlapping storage
 0x00007f99aef5b4c8: 0x00000000f87073b8 param 8 array for #3
 0x00007f99aef5b4c8: 0x00000000f87073b8 oop for #2
overlapping storage
 0x00007f99aef5b4c0: 0x0000000000000000 param 7 array for #3
 0x00007f99aef5b4c0: 0x0000000000000000 local 1
overlapping storage
 0x00007f99aef5b4c0: 0x0000000000000000 param 7 array for #3
 0x00007f99aef5b4c0: 0x0000000000000000 oop for #2
overlapping storage
 0x00007f99aef5b4b8: 0x0000000000000000 param 6 boolean for #3
 0x00007f99aef5b4b8: 0x0000000000000000 local 2
overlapping storage
 0x00007f99aef5b4b8: 0x0000000000000000 param 6 boolean for #3
 0x00007f99aef5b4b8: 0x0000000000000000 oop for #2
overlapping storage
 0x00007f99aef5b4b0: 0x00000000f8706f18 param 5 object for #3
 0x00007f99aef5b4b0: 0x00000000f8706f18 local 3
overlapping storage
 0x00007f99aef5b4b0: 0x00000000f8706f18 param 5 object for #3
 0x00007f99aef5b4b0: 0x00000000f8706f18 oop for #2
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/frame.cpp:1582
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/open/src/hotspot/share/runtime/frame.cpp:1582), pid=671, tid=675
#  assert(!error) failed: invalid layout
#
# JRE version: Java(TM) SE Runtime Environment (18.0+8) (fastdebug build 18-loom+8-317)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-loom+8-317, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd39ddc]  FrameValues::validate()+0x1bc
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1/scratch/4/core.671)
#
# An error report file with more information is saved as:
# /testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1/scratch/4/hs_err_pid671.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vdcj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-10 12:42;rpressler;Fixed by ee65eb9;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Drop unused code from OSThread,JDK-8278585,5064538,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2021-12-11 23:02,2022-01-03 14:31,2023-10-01 09:57,2021-12-13 21:47,19,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,OSThread contains some unused members which can be dropped.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vd9n:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-12-13 21:46;roboduke;Changeset: 3f9638d1
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-12-14 05:45:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3f9638d124076019f49eb77bc3ff8b466e4beb53
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"compiler/vectorapi/VectorMaskLoadStoreTest.java failed with ""Error: ShouldNotReachHere()""",JDK-8278584,5064535,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,dcubed,dcubed,2021-12-11 19:38,2022-01-25 03:14,2023-10-01 09:57,2021-12-14 14:50,19,,,,,,,,19,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-19,regression,tencent-interest,tier7,tier8,vectorapi,,,,,,,,,,,,"The following test is failing in the JDK19 CI:

compiler/vectorapi/VectorMaskLoadStoreTest.java

Here's a snippet from the log file:

#section:testng
----------messages:(5/384)----------
command: testng -XX:-TieredCompilation -XX:CompileThreshold=100 compiler.vectorapi.VectorMaskLoadStoreTest
reason: User specified action: run testng/othervm -XX:-TieredCompilation -XX:CompileThreshold=100 compiler.vectorapi.VectorMaskLoadStoreTest 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
elapsed time (seconds): 49.941
----------configuration:(3/48)----------
Boot Layer
  add modules: jdk.incubator.vector

----------System.out:(26/2368)----------
For random generator using seed: 7390143994744694725
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=7390143994744694725"" to command line.
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/x86.ad:1228
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13725/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7d45d565-bba6-4b59-9947-09b2f8377689/runs/2fda05e7-cb3a-4ad2-87f4-a3380ec0269b/workspace/open/src/hotspot/cpu/x86/x86.ad:1228), pid=30502, tid=30517
#  Error: ShouldNotReachHere()
#
# JRE version: Java(TM) SE Runtime Environment (19.0+1) (fastdebug build 19-ea+1-10)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+1-10, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x469aa9]  long_to_maskGT8_avxNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x259
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13765/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d04033f1-d9e2-4f4e-9b23-8b996a656faf/runs/e0fc0dab-9c6a-453a-984f-9701800702f6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler/scratch/4/core.30502)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13765/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d04033f1-d9e2-4f4e-9b23-8b996a656faf/runs/e0fc0dab-9c6a-453a-984f-9701800702f6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler/scratch/4/hs_err_pid30502.log
#
# Compiler replay data is saved as:
# /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13765/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d04033f1-d9e2-4f4e-9b23-8b996a656faf/runs/e0fc0dab-9c6a-453a-984f-9701800702f6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler/scratch/4/replay_pid30502.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(1/55)----------
WARNING: Using incubator modules: jdk.incubator.vector
----------rerun:(47/7888)*----------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f457432f120):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=30517, stack(0x00007f4555afb000,0x00007f4555bfc000)]


Current CompileTask:
C2:  40424 6396    b        compiler.vectorapi.VectorMaskLoadStoreTest::testByte128 (23 bytes)

Stack: [0x00007f4555afb000,0x00007f4555bfc000],  sp=0x00007f4555bf6980,  free space=1006k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x469aa9]  long_to_maskGT8_avxNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x259
V  [libjvm.so+0x1635c68]  PhaseOutput::scratch_emit_size(Node const*)+0x438
V  [libjvm.so+0x162c0d8]  PhaseOutput::shorten_branches(unsigned int*)+0x2e8
V  [libjvm.so+0x163ed0a]  PhaseOutput::Output()+0xc6a
V  [libjvm.so+0xa84737]  Compile::Code_Gen()+0x427
V  [libjvm.so+0xa90b1e]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x166e
V  [libjvm.so+0x8a9364]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x664
V  [libjvm.so+0xaa0d48]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc88
V  [libjvm.so+0xaa1b08]  CompileBroker::compiler_thread_loop()+0x648
V  [libjvm.so+0x1929eaa]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x1932270]  Thread::call_run()+0x100
V  [libjvm.so+0x1614624]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277997,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,windows,,,,"0|i2vd8z:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-12-13 04:35;chagedorn;ILW = C2 assertion failure in matching, single test, disable compilation of affected method = HLM = P3;;;","2021-12-14 14:50;roboduke;Changeset: 2def7e91
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-12-14 22:49:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2def7e913207af788e582ed5bde21b28883183de
;;;","2021-12-15 07:46;dcubed;The fix for this bug is in jdk-19+2-42.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
X509KeyManagerImpl::getAliases might return a good key with others,JDK-8278560,5064496,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2021-12-10 10:34,2022-01-03 14:42,2023-10-01 09:57,2021-12-17 04:15,18,,,,,,,,19,security-libs,,0,,,,,,,,,,,,,,,,,,,,"After JDK-8262186, the method is called only once with multiple keyTypes. This means that if an entry is a perfect match (CheckResult.OK) but the keyType for it is not the 1st one, it will be returned along with other possibly non-perfect ones. Thus we cannot only look at the 1st result to determine if there's perfect match inside. See https://github.com/openjdk/jdk/blob/3d657eb0a626e33995af5d5ddf12b26d06317962/src/java.base/share/classes/sun/security/ssl/X509KeyManagerImpl.java#L385.

That said, this is not a fatal error. After all the results are collected they are sorted by matching status and keyIndex, and the perfect match will be picked up anyway.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262186,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vd0b:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-12-17 04:15;roboduke;Changeset: 6412d57a
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-12-17 12:14:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6412d57a0a92ba08cc3db085b371ae1f7ba35ad5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
appcds/redefineClass/RedefineRunningMethods_Shared.java test fails in loom repo,JDK-8278559,5064495,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,ccheung,ccheung,2021-12-10 10:25,2022-01-03 08:22,2023-10-01 09:57,2021-12-26 23:40,repo-loom,,,,,,,,repo-loom,hotspot,,0,cds,,,,,,,,,,,,,,,,,,,"appcds/redefineClass/RedefineRunningMethods_Shared.java fails in the loom repo as follows:

Exception in thread ""main"" java.lang.RuntimeException: Test set-up problem. This class should be shared but isn't: RedefineRunningMethods
        at RedefineRunningMethods_SharedHelper.main(RedefineRunningMethods_SharedHelper.java:39)
]
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0]

        at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:489)
        at jdk.test.lib.cds.CDSTestUtils.checkExec(CDSTestUtils.java:468)
        at jdk.test.lib.cds.CDSTestUtils.checkExec(CDSTestUtils.java:457)
        at RedefineRunningMethods_Shared.main(RedefineRunningMethods_Shared.java:76)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:1493)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Expected to get exit value of [0]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vd03:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-12-14 17:45;ccheung;The test failure is due to the RedefineRunningMethods was not included in the CDS archive because of the following:

[0.636s][warning][cds] java.lang.UnsupportedClassVersionError: Preview features are not enabled for RedefineRunningMethods (class file version 62.65535). Try running with '--enable-preview'
[0.636s][warning][cds] Preload Warning: Cannot find RedefineRunningMethods

A workaround is to run the test with the following jtreg option:
    -vmoptions:'--enable-preview';;;","2021-12-15 00:06;alanb;Which VM produces that output? Asking because RedefineRunningMethods is launched by TestCommon.exec with --enable-preview.;;;","2021-12-15 07:59;ccheung;[~alanb] The test was run with the fastdebug VM built from my loom repo.;;;","2021-12-18 00:41;alanb;I'm running the test with this command, fastdebug build too.
  make run-test TEST=runtime/cds/appcds/redefineClass/RedefineRunningMethods_Shared.java

I checked the .jtr file and I don't get the warnings that you see. The test was modified some time ago to compile/launch with --enable-preview. The output that I get is:

[logging stdout toXXXX//test-support/jtreg_open_test_hotspot_jtreg_runtime_cds_appcds_redefineClass_RedefineRunningMethods_Shared_java/scratch/0/runtime.cds.appcds.redefineClass.RedefineRunningMethods_Shared.java-0001-exec.stdout]
[logging stderr to XXXX/test-support/jtreg_open_test_hotspot_jtreg_runtime_cds_appcds_redefineClass_RedefineRunningMethods_Shared_java/scratch/0/runtime.cds.appcds.redefineClass.RedefineRunningMethods_Shared.java-0001-exec.stderr]
[STDERR]
java version ""19-internal"" 2022-09-20
Java(TM) SE Runtime Environment (fastdebug build 19-internal+0-2021-12-18-0819215.XXXXX...)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 19-internal+0-2021-12-18-0819215.XXXXX..., mixed mode, sharing)
Exception in thread ""main"" java.lang.RuntimeException: Test set-up problem. This class should be shared but isn't: RedefineRunningMethods
        at RedefineRunningMethods_SharedHelper.main(RedefineRunningMethods_SharedHelper.java:39)

[2021-12-18T08:34:16.818355Z] Waiting for completion for process 61397
[2021-12-18T08:34:16.818638Z] Waiting for completion finished for process 61397
[2021-12-18T08:34:16.818762Z] Waiting for completion for process 61397
[2021-12-18T08:34:16.818867Z] Waiting for completion finished for process 61397
[2021-12-18T08:34:16.841546Z] Waiting for completion for process 61397
[2021-12-18T08:34:16.841631Z] Waiting for completion finished for process 61397;;;","2021-12-23 15:49;ccheung;The CDS warning messages mentioned in my previous comment was from the dump time log.
Specifically, the following file:
    runtime.cds.appcds.redefineClass.RedefineRunningMethods_Shared.java-0000-dump.stdout

I checked the .jtr file from my run, the --enable-preview option was there for compile and run time; it wasn't there
for dump time. The test passed after adding the --enable-preview option for dump time.

diff --git a/test/hotspot/jtreg/runtime/cds/appcds/redefineClass/RedefineRunningMethods_Shared.java b/test/hotspot/jtreg/runtime/cds/appcds/redefineClass/RedefineRunningMethods_Shared.java
index ba64cd1ec09..f7d1097a678 100644
--- a/test/hotspot/jtreg/runtime/cds/appcds/redefineClass/RedefineRunningMethods_Shared.java
+++ b/test/hotspot/jtreg/runtime/cds/appcds/redefineClass/RedefineRunningMethods_Shared.java
@@ -59,6 +59,7 @@ public class RedefineRunningMethods_Shared {
         OutputAnalyzer output;
         TestCommon.testDump(appJar, shared_classes,
                             // command-line arguments ...
+                            ""--enable-preview"",
                             use_whitebox_jar);
 
         // RedefineRunningMethods.java contained this:

If the above change is applicable to the main line, I can integrate a fix there and it will be synced to the loom repo.
If not, I can integrate a fix into the loom repo.;;;","2021-12-23 19:44;iklam;This seems to be a bug either in jtreg or the test libraries:

TestCommon.testDump() eventually calls

    ArrayList<String> cmd = ....;
    ProcessBuilder pb = ProcessTools.createTestJvm(cmd);

If --enable-preview is passed when compiling and running the test cases, then  ProcessTools.createTestJvm() should automatically add  --enable-preview. We shouldn't need to do this in every individual test.

There are many test cases that call ProcessTools.createTestJvm. How do they work under loom?;;;","2021-12-23 20:09;dholmes;--enable-preview is being passed to jtreg via @compile but not @run. The test itself is run in driver mode and explicitly adds --enable-preview for the actual execution part, but doesn't pass it explicitly for the dump part.;;;","2021-12-24 01:01;alanb;I think this may be the only AppCDS test that is dumping classes that are part of a preview feature. As David says, it compiles with --enable-preview but it can't specify that option to run because it's a driver test. Maybe we have to look further into TestCommon and ProcessTools to see --enable-preview is being dropped somewhere.
;;;","2021-12-24 01:07;alanb;Ah, I see Calvin's comment about adding --enable-preview to the options specified to TestCommon.testDump. Great!  I assume we should just fix this in the loom repo for now as there isn't any reason for this test to enable preview feature in the main line.;;;","2021-12-26 23:40;alanb;This test is now fixed in the loom repo:
https://github.com/openjdk/loom/commit/e0dc5387afb7d773c09d4f4caca055f87ceae267
;;;","2022-01-03 08:22;ccheung;[~alanb] Thanks for integrating the fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove @SuppressWarnings for --source 1.2 code,CODETOOLS-7903077,5065006,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P2,Fixed,jjg,jjg,jjg,2021-12-17 16:30,2021-12-21 09:24,2023-10-01 09:57,2021-12-21 09:24,jtreg6.0,,,,,,,,jtreg6.0,tools,,0,,,,,,,,,,,,,,,,,,,,"AppletWrapper is still compiled with  --source 1.2 in jtreg 6.*.
It should not have annotations like @SuppressWarnings.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vg5n:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2021-12-17 16:48;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jtreg/pull/46
Date: 2021-12-18 00:44:15 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
