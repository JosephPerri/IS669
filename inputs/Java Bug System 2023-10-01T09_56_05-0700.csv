Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Inward issue link (Blocks),Inward issue link (Blocks),Outward issue link (Blocks),Outward issue link (CSR),Inward issue link (Cloners),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Duplicate),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field ( Type of Bug [Challenge] ),Custom field (CPU),Custom field (CPU),Custom field (Cost of Delay),Custom field (Epic Link),Custom field (Imported),Custom field (Indexed),Custom field (Introduced In Build),Custom field (Introduced In Version),Custom field (Number of Tests Affected [Challenge]),Custom field (OS),Custom field (OS),Custom field (Oracle Evaluation),Custom field (Original story points),Custom field (Parent Link),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Resolved In Build),Custom field (Story Points),Custom field (Subcomponent),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Time Spent),Custom field (Understanding),Custom field (Value),Custom field (Verification),Custom field (external_bug),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Add GitHub user marchof,SKARA-1524,5080925,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,marchof,marchof,2022-08-03 05:53,2022-08-03 06:37,2023-10-01 09:56,2022-08-03 06:10,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,"Hi, my name is Marc Hoffmann, my OpenJDK handle is marchof (like my Github handle). I have the OpenJDK status ""Author"" and would like to proceed with this PR: https://github.com/openjdk/jdk/pull/9727.

Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y5b7:",9223372036854775807,,,,,,,,,,,,"2022-08-03 06:10;kcr;Done.;;;","2022-08-03 06:37;marchof;Thanks Kevin! :);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MailmanListReader misses new month on the 1st,SKARA-1519,5080719,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-08-01 14:08,2022-08-01 15:13,2023-10-01 09:56,2022-08-01 15:13,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"After expanding the tests for MailmanListReader in SKARA-1513, I've discovered that some tests started failing on the 1st of the month. These failures actually uncovered a real problem, where the current logic would not start querying a new month archive until the 2nd of the new month.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y41f:",9223372036854775807,,,,,,,,,,,,"2022-08-01 14:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1345
Date: 2022-08-01 21:32:25 +0000;;;","2022-08-01 15:13;roboduke;Changeset: 0f737485
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-08-01 22:13:22 +0000
URL:       https://git.openjdk.org/skara/commit/0f737485aea2da1740db62547e8e17a8f7b64c80
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Command 'git pr integrate' gets error message 'time out',SKARA-1516,5080642,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,gli,gli,gli,2022-07-30 02:49,2022-08-10 07:13,2023-10-01 09:56,2022-08-09 10:38,,,,,,,1.0,cli,,0,,,,,,,,,,,,,,,,,,"I tried the command `git pr integrate 1341` to integrate SKARA-1495 [1]. The command replies `error: timed out waiting for response to /integrate command`. It is because the bot replies `@lgxbslgx Pushed as commit XXX.` so this line is not started with `Pushed as commit`. And then, the following conditional branch in class `GitPrIntegrate` doesn't be run.

```
                    for (var line : lines) {
                        if (line.startsWith(""Pushed as commit"")) {
                            var output = removeTrailing(line, ""."");
                            System.out.println(output);
                            System.exit(0);
                        } else if (line.startsWith(""Your change (at version "") &&
                                   line.endsWith("") is now ready to be sponsored by a Committer."")) {
                            var output = removeTrailing(line, ""."");
                            System.out.println(output);
                            System.exit(0);
                        }
                    }
```

The command `git pr sponsor` has the same bug.

[1] https://github.com/openjdk/skara/pull/1341",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y3kb:",9223372036854775807,,,,,,,,,,,,"2022-08-09 06:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1352
Date: 2022-08-09 13:05:17 +0000;;;","2022-08-09 10:38;roboduke;Changeset: 98ca8935
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2022-08-09 17:38:16 +0000
URL:       https://git.openjdk.org/skara/commit/98ca89358932bddab90af35531f0860639a89aa9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mailing list parsing of PR links broken since openjdk.org transition,SKARA-1515,5080602,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2022-07-29 06:47,2022-08-05 06:24,2023-10-01 09:56,2022-08-05 06:24,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"The mlbridge bot uses PR links in emails to identify which PR an email thread belongs to. This is then used to correctly post emails from the archive as comments on PRs. These links are rewritten to an openjdk style URL, for which we have a redirect to github, as a measure to stay provider independent:

github.com/openjdk -> git.openjdk.org

The URL matching logic knows about this rewrite and tries to reverse it before matching PR links. The problem is that before June 9, the rewritten URLs were git.openjdk.java.net. The current logic can't handle multiple different rewrite patterns, so any emails found with the old URL can't be matched correctly to PRs.

We need to make it possible to define multiple rewrite patterns or PR link patterns so that mlbridge can correctly match all emails in the mail archive history.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y3bf:",9223372036854775807,,,,,,,,,,,,"2022-08-01 15:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1346
Date: 2022-08-01 22:52:29 +0000;;;","2022-08-05 06:24;roboduke;Changeset: da062e7b
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-08-05 13:24:25 +0000
URL:       https://git.openjdk.org/skara/commit/da062e7bd6f7716e66135c0248cb2dab7cfd4651
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add metrics for mailing list archive polling,SKARA-1514,5080544,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-07-28 11:26,2022-07-29 05:32,2023-10-01 09:56,2022-07-29 05:32,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"To be able to evaluate if SKARA-1513 has any effect, we need to gather data. To do that I will add metrics for the polling frequency of the mailing list archives. By deploying that first, we can see if the fix makes any meaningful difference, and help inform us if any further action is needed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1513,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y2yj:",9223372036854775807,,,,,,,,,,,,"2022-07-28 11:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1342
Date: 2022-07-28 18:48:25 +0000;;;","2022-07-29 05:32;roboduke;Changeset: 8e68f8b9
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-07-29 12:31:36 +0000
URL:       https://git.openjdk.org/skara/commit/8e68f8b9108080d612b14547a0c5827bf35c4602
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reduce polling of mailing list archives,SKARA-1513,5080457,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2022-07-27 14:13,2022-07-29 14:57,2023-10-01 09:56,2022-07-29 14:57,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"The mailinglist bridge bot currently polls the mailing list archives quite frequently, which may be causing issues for the hosting server. We need to look into ways of reducing the polling frequency.

We already use e-tag to avoid requesting full responses when nothing has changed. We also traverse the mboxes month by month starting with the latest. Once we find one that returns 304 (indicating that nothing has changed) we stop going further back and just use cached results. This scheme is clever, but misses one crucial situation, when no mails exist in a certain mbox. In that case we get 404 back, and this response is not cached.

Caching 404 is trickier as we will need to be aware of how old the particular archive is and define a cutoff for when 404 should not be retried anymore.

I also think we need to investigate more exactly how frequent calls to the server are in normal operation.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1514,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y2f7:",9223372036854775807,,,,,,,,,,,,"2022-07-27 15:34;erikj;Looking closer at the current implementation, I think it can miss emails in certain situations. This becomes more likely right after a new month has begun and for mailing lists with low traffic. Say after a new month has begun, one or more emails are received for the new month, then shortly after, a delayed email is received from the previous month. If the reader ran and collected all emails from the current month before the delayed email arrived, then it will never attempt to read the previous month's archive until another new email is received, and so may never see that delayed email.

The current implementation will work well enough for email lists with lots of traffic, but we do have lists where traffic is very low, so this doesn't seem that unlikely to happen. A restart of the bot will re-read all months, so in practice this may not be as big of an issue. On the other hand, we restart bots less and less frequently.

I think for correctness, we need to always poll the current and the previous month's archive. Anything older than that should be safe to always read from cache.

Another challenge here is that this area does not have any tests. I will need to expand on the test implementations of MailmanServer to handle monthly archives so that this functionality can be verified.;;;","2022-07-29 06:51;erikj;With the metrics now added, it has become apparent that the etag logic is pointless, as our mailman server is not using it. This means that we currently aren't caching any results and it makes me more convinced that my suggested strategy is a lot better. With that I mean alway rechecking the current and previous month, and always trusting cached results of anything older than that. ;;;","2022-07-29 10:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1343
Date: 2022-07-29 17:31:23 +0000;;;","2022-07-29 14:57;roboduke;Changeset: 515f2e14
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-07-29 21:56:55 +0000
URL:       https://git.openjdk.org/skara/commit/515f2e14d99b02494fcfee4ea01203429b2f8e0b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MirrorBot may get stuck failing to clone repository,SKARA-1512,5080391,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,zsong,erikj,erikj,2022-07-27 10:43,2022-09-23 12:59,2023-10-01 09:56,2022-09-23 12:57,,,,,,,1.0,bots,,0,starter,,,,,,,,,,,,,,,,,"When the MirrorBot runs for the first time, it needs to clone the repository to be mirrored. When doing this, it first creates a directory to clone into, and then attempts cloning. If the cloning fails (or if the bot happens to die at that point), the directory stays around. Then on the next (and all subsequent runs), the bot finds this directory and expects the repo to be present. If it's not, the bot fails.

This needs to be handled better.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y20j:",9223372036854775807,,,,,,,,,,,,"2022-09-22 16:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1374
Date: 2022-09-13 21:14:07 +0000;;;","2022-09-23 12:57;roboduke;Changeset: 7cf47ca0
Author:    Zhao Song <zhao.song@oracle.com>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-09-23 19:57:06 +0000
URL:       https://git.openjdk.org/skara/commit/7cf47ca037f9157195d330d746ffd7164edffea2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user andy-goryachev-oracle,SKARA-1508,5079517,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,angorya,angorya,2022-07-19 11:12,2022-07-19 11:18,2023-10-01 09:56,2022-07-19 11:18,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,"Please associate my GitHub username with my OpenJDK ID

github: andy-goryachev-oracle
https://db.openjdk.org/people/angorya

Thank you.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xwmr:",9223372036854775807,,,,,,,,,,,,"2022-07-19 11:18;kcr;Done.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
build: update JUnit to 5.8.2 completely,SKARA-1497,5078891,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,gli,gli,2022-07-08 23:14,2022-07-09 09:27,2023-10-01 09:56,2022-07-09 09:27,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,"The patch [1] updated the JUnit to 5.8.2 but it is not complete. The file `test/build.gradle` need to be revised too.

A good example is this patch [2].

[1] https://github.com/openjdk/skara/commit/abe48a5d
[2] https://github.com/openjdk/skara/commit/ad1bc216",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xsrn:",9223372036854775807,,,,,,,,,,,,"2022-07-08 23:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1340
Date: 2022-07-09 06:21:12 +0000;;;","2022-07-09 09:27;roboduke;Changeset: 281ff1b9
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2022-07-09 16:27:09 +0000
URL:       https://git.openjdk.org/skara/commit/281ff1b91eb6881cbbbaf6a634f11c30ddafe0ed
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user driverkt,SKARA-1496,5078670,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,kdriver,kdriver,2022-07-06 14:27,2022-07-07 09:14,2023-10-01 09:56,2022-07-07 09:14,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xrhn:",9223372036854775807,,,,,,,,,,,,"2022-07-07 09:08;kdriver;I'm now appearing in the census.;;;","2022-07-07 09:14;kcr;The GitHub association is now done.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
/backport should be allowed in PRs which have been integrated,SKARA-1495,5078531,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,ihse,ihse,2022-07-05 07:04,2022-07-29 11:24,2023-10-01 09:56,2022-07-29 11:24,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"A common misconception is that one can create a backport by issuing `/backport` as a command on the PR, rather than the actual commit. I've lost count how many times someone ask why this does not work.

Ideally, I think this should be allowed, and interpreted as having entered `/backport` on the commit associated with the PR, but if this is too tricky to implement, we should at the very least add a response like:

""(!) You cannot issue `/backport` on a pull request. Instead, give that command on the actual commit you want to backport.""

instead of an invalid command response.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xqmz:",9223372036854775807,,,,,,,,,,,,"2022-07-09 09:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1341
Date: 2022-07-09 16:14:21 +0000;;;","2022-07-29 11:24;roboduke;Changeset: 809dc978
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2022-07-29 18:23:47 +0000
URL:       https://git.openjdk.org/skara/commit/809dc978a107c65ae3b38c7d45d995eaf38e9980
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user ysramakrishna,SKARA-1491,5078101,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,ysr,ysr,2022-06-28 12:02,2022-06-29 08:22,2023-10-01 09:56,2022-06-28 12:10,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,"Please associate my github account `ysramakrishna` , https://github.com/ysramakrishna , with my openjdk account `ysr`, https://openjdk.org/census#ysr.

I am a signatory of the OCA, as is my current employer Amazon.

My primary initial contributions are expected to be in the `shenandoah` project/repository, and subsequently in other JDK repositories over time.

Please let me know if you have any questions.

PS: Unfortunately, my openjdk account appears to be associated with the github account `ysr`, https://github.com/ysr , which does not belong to me as far as I could tell.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xnzf:",9223372036854775807,,,,,,,,,,,,"2022-06-28 12:10;kcr;This is done. Prior to this request I don't see any association for your OpenJDK ID (I see no indication that it was ever associated with a GitHub account whose name happens to match that of your OpenJDK ID). Now it is associated with 'ysramakrishna' as requested.;;;","2022-06-28 12:29;ysr;Thank you @kcr ! I am all set now after joining the @openjdk project on github.

The prior association that I mentioned above was on the OCA signatories list (search for `ysr` at https://oca.opensource.oracle.com/?ojr=contrib-list ) which links to the stated github account `ysr`. Not sure whether or not that link is important for any reason, or if it can continue pointing to github.com/ysr , which isn't mine afaict.;;;","2022-06-28 12:49;kcr;I see. This might be worth correcting.

[~robilad] What would be the best way to do this?;;;","2022-06-28 15:31;robilad;I've asked the OCA team to update the information on the OCA site. I'll let you know when it's done.;;;","2022-06-28 18:34;ysr;Thanks, Dalibor and Kevin!;;;","2022-06-29 08:22;robilad;Done.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user mahendrachhipa,SKARA-1486,5077817,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,mchhipa,mchhipa,2022-06-24 06:30,2022-06-24 06:46,2023-10-01 09:56,2022-06-24 06:46,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xm8r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RFR emails for jdk19 are missing the repo name in the Subject,SKARA-1485,5077772,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,anantsi,kcr,kcr,2022-06-23 15:03,2022-06-27 01:22,2023-10-01 09:56,2022-06-27 01:22,,,,,,,,bots,,0,,,,,,,,,,,,,,,,,,"The RFR and integration emails for jdk19 code reviews are missing the repo name in the Subject. This makes it hard to distinguish reviews targeted to the jdk19 repo from those targeted to the jdk mainline repo. Previous stabilization repos, such as jdk18, did include the repo name in the subject line.

This is a Skara repo configuration issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xlyr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update all openjdk.java.net->openjdk.org,SKARA-1480,5077021,Bug,Resolved,SKARA,Skara,software,darcy,,,P1,Fixed,erikj,erikj,erikj,2022-06-14 10:09,2023-03-13 13:31,2023-10-01 09:56,2022-06-15 01:57,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,The Skara source tree contains a lot of references to openjdk.java.net. All of them need to be updated to the new URL openjdk.org. Some of these are essential for core functionality such as jcheck so this is quite urgent.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1839,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xhc3:",9223372036854775807,,,,,,,,,,,,"2022-06-14 10:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1338
Date: 2022-06-14 17:11:22 +0000;;;","2022-06-15 01:57;roboduke;Changeset: 3ff26a61
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-06-15 08:56:53 +0000
URL:       https://git.openjdk.org/skara/commit/3ff26a61f7f9fdd486e5c2d6260429b19099d0ae
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Backports are resolved with Dukebot as assignee,SKARA-1479,5077008,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2022-06-14 07:21,2022-11-11 06:10,2023-10-01 09:56,2022-09-20 12:19,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"Skara sometimes resolves issues, or at least backports, with Dukebot as assignee. I haven't yet figured out what causes this, but this needs to be investigated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1640,SKARA-1674,SKARA-1641,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xh97:",9223372036854775807,,,,,,,,,,,,"2022-07-10 02:11;gli;I have dived into the related code several times and can't find the cause. I suspect the bug occurs at the JBS which contains the customized restful api `/rest/jbs/1.0/backport/`. This customized api seems not be an official api of the JIRA and may have unexpected bug. [~erikj] do you have permission to read the related code about the restful api `/rest/jbs/1.0/backport/` of the JBS?;;;","2022-07-12 01:15;gli;It seems that this bug is related to special persons. All of my [~gli] backport issues which are created by the bot are resolved with Dukebot as assignee. And I read the backports of several persons, all the backports of one person are resolved with Dukebot as assignee or all are not.;;;","2022-09-19 14:55;erikj;I'm back to investigating this. It does indeed seem like this is an issue with /rest/jbs/1.0/backport/. I have run the notifier for a commit where this happened against bugs-stage and verified that Skara is setting the correct user in the API call. It can also be reproduced using the WebUI ""More->Create Backport"" if I set the same user. In both cases, the new backport ends up having the current user as assignee.

I believe we can work around this from Skara by checking if the Backport is owned by the current user, and if so, explicitly assign the correct user.;;;","2022-09-19 15:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1378
Date: 2022-09-19 22:37:39 +0000;;;","2022-09-20 12:19;roboduke;Changeset: 59482d09
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-09-20 18:06:41 +0000
URL:       https://git.openjdk.org/skara/commit/59482d093c92b6234a6fa43c8cb581e528b6e2d7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to commit to openjdk/jdk-sandbox,SKARA-1477,5076831,Bug,Closed,SKARA,Skara,software,darcy,,,P3,Fixed,kcr,asotona,asotona,2022-06-13 00:02,2022-06-24 08:55,2023-10-01 09:56,2022-06-24 08:36,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,"As openjdk/jdk committer I'm unable to commit to openjdk/jdk-sandbox.

Error message is:
remote: Permission to openjdk/jdk-sandbox.git denied to asotona.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1205,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xg5v:",9223372036854775807,,,,,,,,,,,,"2022-06-14 01:39;gli;May be related to SKARA-1205.;;;","2022-06-24 08:36;kcr;I manually fixed this.

And yes, the root cause might be related to SKARA-1205.;;;","2022-06-24 08:38;kcr;[~asotona] When did you become a Committer in the 'jdk' project? Knowing whether it was before or after the initial population of the roles in the jdk-sandbox repo would be helpful.;;;","2022-06-24 08:46;asotona;Thanks [~kcr] !
I become JDK committer in March 2021 
;;;","2022-06-24 08:55;kcr;In that case this is almost certainly the same issue as SKARA-1205. I'll update that bug.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMC 8.3.0 Update Site Pages require changes,JMC-7870,5081013,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,vpurnam,bbanathur,bbanathur,2022-08-04 03:03,2023-01-11 02:36,2023-10-01 09:56,2022-09-21 04:13,8.3.0,,,,,,8.3.0,Infrastructure,,0,regression,sqe-8.3.0,,,,,,,,,,,,,,,,"The links, JMC, and Eclipse version numbers change on the Update Site pages.

[Newsgroup |https://community.oracle.com/community/java/java_hotspot_virtual_machine/java_mission_control]

*Note:* If you are looking for the update site for the eclipse plug-in version of Mission Control, go to the[eclipse|https://download.oracle.com/technology/products/missioncontrol/updatesites/oracle/8.2.0/ide/] update site.

*Requirements*
 * Requires JDK Mission Control RCP (stand alone) Edition 8.2.0

*Requirements*
 * Requires Eclipse 4.20 or later.
 * Requires any previously installed versions of JMC 4.x, 5.x, 6.x or 7.x to be uninstalled before installing JMC 8.
 * Note that you need to run your Eclipse on a JDK (version 11 or above) installation for all features to work. For more information on this, please see the [Run Eclipse on JDK HOWTO|file:///Users/bbanathu/Desktop/Quick/8.3.0/Build/b01/plugins/ide/supported/run-on-jdk-instructions/index.html].

 * _JConsole plug-in support for the Management Console._

!8AAK4fDwAAACH5BAAAAAAALAAAAAAJAAkAAAIRlI pAivREJgQhQuCyks7VAAAOw==! [Newsgroup |https://community.oracle.com/community/java/java_hotspot_virtual_machine/java_mission_control]

*Prerequisites*
JDK Mission Control is a set of plug-ins for Eclipse 4.20 or later.

4.20 

!image-2022-08-04-15-28-04-082.png|width=824,height=505!

 

*Note:* If you are looking for the update site for the stand alone version, go to the [rcp|https://download.oracle.com/technology/products/missioncontrol/updatesites/oracle/8.1.0/rcp/] update site.

*Requirements*
 * Requires JMC 8.2.0 (running in Eclipse).
 * Requires Eclipse 4.21 or later.
 * Requires Eclipse running on JDK 11 or above.

*https://download.oracle.com/technology/products/missioncontrol/updatesites/oracle/8.2.0/ide/*



*Step-by-Step Instructions*

Before starting, make sure that you have downloaded and installed Eclipse 4.21 or later and installed the [JDK Mission Control base Plug-ins|https://download.oracle.com/technology/products/missioncontrol/updatesites/oracle/8.2.0/ide/].

 

Fill in the following URL in the *Work with:* text field:

*https://download.oracle.com/technology/products/missioncontrol/updatesites/oracle/8.2.0/ide/*

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7897,,,,,,,,,,,"2022-08-04 02:58;bbanathur;image-2022-08-04-15-28-04-082.png;https://bugs.openjdk.org/secure/attachment/100304/image-2022-08-04-15-28-04-082.png",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y5tv:",9223372036854775807,,,,,,,,,,,,"2022-09-19 05:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/426
Date: 2022-09-19 12:32:22 +0000;;;","2022-09-21 04:13;roboduke;Changeset: 359f6abe
Author:    vpurnam <vpurnam@VPURNAM-7420.in.oracle.com>
Committer: Suchita Chaturvedi <schaturvedi@openjdk.org>
Date:      2022-09-21 11:12:36 +0000
URL:       https://git.openjdk.org/jmc/commit/359f6abe17d81131e6091fa5596d6f45f56613d7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Platform-definitions-2022-06.target file has space in pde version,JMC-7862,5080596,Bug,Closed,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,bpatil,bpatil,bpatil,2022-07-29 04:30,2023-01-11 02:35,2023-10-01 09:56,2022-07-29 05:28,,,,,,,8.3.0,docs,,0,,,,,,,,,,,,,,,,,, jmc/releng/platform-definitions/platform-definition-2022-06/platform-definition-2022-06.target file has space before  3.14.1200.v20220607-0700. All platform builds are failing due to this. Remove space in this file.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y3a3:",9223372036854775807,,,,,,,,,,,,"2022-07-29 04:52;bpatil;Pull request raised: https://github.com/openjdk/jmc/pull/417;;;","2022-07-29 05:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/417
Date: 2022-07-29 11:43:02 +0000;;;","2022-07-29 05:28;roboduke;Changeset: eabb8615
Author:    Bhogesh Patil <bhogesh.patil@oracle.com>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2022-07-29 12:23:51 +0000
URL:       https://git.openjdk.org/jmc/commit/eabb8615a3f73360626374748b36324f77a6cef3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR Writer incorrectly uses epoch nanoseconds as the start ticks,JMC-7855,5079234,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,jbachorik,jbachorik,jbachorik,2022-07-14 11:03,2023-01-11 02:36,2023-10-01 09:56,2022-10-11 01:14,8.1.1,8.2.1,,,,,8.3.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,"The start ticks are supposed to be `System.nanoTime()` value.

Due to the usage of epoch nanos the recording duration is nonsensical and can become even a negative value.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xuvv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@20bacb6c,,,,,,,,,"2022-07-15 04:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/412
Date: 2022-07-14 18:44:14 +0000;;;","2022-10-11 01:14;roboduke;Changeset: b1494d2c
Author:    Jaroslav Bachorik <jbachorik@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-10-11 08:13:56 +0000
URL:       https://git.openjdk.org/jmc/commit/b1494d2cd81a5225e8bd79a55c507ef577476c38
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMC agent: policy file is missing entry for test on Windows,JMC-7842,5079052,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,rschmelter,rschmelter,rschmelter,2022-07-12 07:41,2023-01-11 02:35,2023-10-01 09:56,2022-07-14 05:43,,,,,,,8.3.0,Infrastructure,,0,agent,windows,,,,,,,,,,,,,,,,"In the JMC agent build on Windows the TestPermissionChecks agent test fails, since the surefire plugin puts the files it needs into the temp directory on Windows. On other platforms it uses target/surefire and this is included in the policy file used for the test. So for Windows to work, an entry for access to the temp directory (and all its subdirectories) is needed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2xtrf:",9223372036854775807,,,,,,,,,,,,"2022-07-12 07:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/410
Date: 2022-07-12 14:44:35 +0000;;;","2022-07-14 05:43;roboduke;Changeset: 056139f0
Author:    Ralf Schmelter <rschmelter@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-07-14 12:40:57 +0000
URL:       https://git.openjdk.org/jmc/commit/056139f05ae8406c7203a68543c9e9041240427f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AES-CTR cipher state corruption with AVX-512,JDK-8292158,5079989,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,svkamath,webbuggrp,webbuggrp,2022-07-25 15:50,2023-01-23 13:48,2023-10-01 09:56,2022-09-27 17:14,11,17,19,20,,,20,hotspot,,0,20ea,dcsaw,dcs-processed,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,oracle-triage-20,regression,reproducer-yes,webbug,,"A DESCRIPTION OF THE PROBLEM :
The internal state of the ""AES/CTR/NoPadding"" cipher can become corrupted when encrypting/decrypting byte arrays with a size less than 16. This only occurs when the AVX-512 AES CTR intrinsic is enabled.

REGRESSION : Last worked in version 8u341

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run provided test code with -XX:UseAVX=3


---------- BEGIN SOURCE ----------
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.Key;
import java.security.SecureRandom;
import java.util.Arrays;

public class Main {
    private static final int LOOPS = 1000;

    public static void main(String[] args) throws Exception {
        SecureRandom random = new SecureRandom();

        byte[] keyBytes = new byte[32];
        random.nextBytes(keyBytes);
        Key key = new SecretKeySpec(keyBytes, ""AES"");

        byte[] ivBytes = new byte[16];
        random.nextBytes(ivBytes);
        IvParameterSpec iv = new IvParameterSpec(ivBytes);

        Cipher encrypt = Cipher.getInstance(""AES/CTR/NoPadding"");
        Cipher decrypt = Cipher.getInstance(""AES/CTR/NoPadding"");

        while (true) {
            byte[][] unencryptedStuff = new byte[LOOPS][];
            byte[][] encryptedStuff = new byte[LOOPS][];

            encrypt.init(Cipher.ENCRYPT_MODE, key, iv);
            for (int i = 0; i < LOOPS; i++) {
                int size = (i % 15) + 1;

                byte[] unencrypted = new byte[size];
                random.nextBytes(unencrypted);
                unencryptedStuff[i] = unencrypted;

                byte[] encrypted = encrypt.update(unencrypted);
                encryptedStuff[i] = encrypted;
            }

            decrypt.init(Cipher.DECRYPT_MODE, key, iv);
            for (int i = 0; i < LOOPS; i++) {
                byte[] decrypted = decrypt.update(encryptedStuff[i]);
                byte[] original = unencryptedStuff[i];

                if (!Arrays.equals(original, decrypted)) {
                    throw new Exception(""Array mismatch. "" + Arrays.toString(original) + "" "" + Arrays.toString(decrypted));
                }
            }
        }
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Set -XX:UseAVX=2 or -XX:+UnlockDiagnosticVMOptions -XX:-UseAESCTRIntrinsics

FREQUENCY : often


",,,,,,,,,,JDK-8295465,JDK-8295905,JDK-8295781,JDK-8295296,JDK-8295297,JDK-8295464,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8233741,,,,,,,"2022-08-09 21:12;tongwan;Main-1.java;https://bugs.openjdk.org/secure/attachment/100364/Main-1.java","2022-08-04 01:14;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/100300/Main.java",,,,,,,,,,,x86_64,,,,,,,,,,,,,,"0|i2xzj7:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-07-27 01:38;tongwan;Got the following error:
Java HotSpot(TM) 64-Bit Server VM warning: UseAVX=3 is not supported on this CPU, setting it to UseAVX=2;;;","2022-08-08 20:58;tongwan;The observations on Windows 10:
JDK 8: Passed.
JDK 11: Failed, Exception observed.
JDK 17: Failed.
JDK 19: Failed.
JDK 20ea+9: Failed.;;;","2022-08-10 05:37;rcastanedalo;  Reproduced on the following configurations:

  - CPU: x86_64, Intel Tiger Lake, using Intel's Software Development Emulator. But all x86_64 processors with AVX-512 and VAES (Ice Lake, Tiger Lake, Rocket Lake, Alder Lake, Sapphire Rapids, AMD Zen 4) should be affected.

  - JDK: 11.0.17, 17.0.5, 20-ea+9. All JDK versions 11.0.x where x >= 9 and 14-20 should be affected.

  - OS: Linux Ubuntu 20.04 (but should be OS-independent).;;;","2022-08-10 05:46;rcastanedalo;ILW = miscompilation; happens in almost every run of the test using small encrypting/decrypting byte arrays; use -XX:+UnlockDiagnosticVMOptions -XX:-UseAESCTRIntrinsics = HML = P2;;;","2022-08-10 05:50;rcastanedalo;Hi [~svkamath], this bug seems to have been present since the introduction of JDK-8233741, could you please have a look?;;;","2022-08-10 14:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9635
Date: 2022-07-26 03:12:10 +0000;;;","2022-08-15 10:51;svkamath;Hi [~rcastanedalo], I will take a look. Thank you.;;;","2022-09-27 17:14;dukebot;Changeset: 9d76ac8a
Author:    AJ Ferguson <AJ-Ferguson@users.noreply.github.com>
Committer: Sandhya Viswanathan <sviswanathan@openjdk.org>
Date:      2022-09-28 00:12:23 +0000
URL:       https://git.openjdk.org/jdk/commit/9d76ac8a4453bc51d9dca2ad6c60259cfb2c4203
;;;","2022-10-09 21:16;svkamath;Fix Request 11u
 
Backporting this patch fixes the data corruption error that happens when encrypting/decrypting byte arrays with a size less than 16. The fix is in MacroAssembler::aesctr_encrypt method.
Patch does not apply cleanly to 11u as the method has moved from
src/hotspot/cpu/x86/macroAssembler_x86_aes.cpp  to a new file src/hotspot/cpu/x86/stubGenerator_x86_64_aes.cpp. The included regression test case also had to be modified. 

Link to PR: https://github.com/openjdk/jdk11u-dev/pull/1408
Included test passes.;;;","2022-10-09 21:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1408
Date: 2022-10-08 06:55:36 +0000;;;","2022-10-11 10:35;kvn;[~svkamath] Do you consider to backport it to JDK 17u too?
;;;","2022-10-11 10:43;svkamath;[~kvn] yes, I was planning to backport it to 17u as well. ;;;","2022-10-12 13:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/787
Date: 2022-10-12 17:28:31 +0000;;;","2022-10-12 16:34;svkamath;Fix Request 17u

I'd like to request backport of this bug fix to 17u. The patch doesn't apply cleanly to 17u. I have modified the included test case as well. Could you kindly take a look and approve? Thanks.

;;;","2022-10-20 23:04;thartmann;Fix Request (JDK 19u)
Fixes a data corruption. The fix is low risk but does not apply cleanly due to a file name change. Already tested and backported to Oracle JDK 11u and 17u.;;;","2022-10-20 23:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/51
Date: 2022-10-21 06:05:18 +0000;;;","2022-10-21 02:54;yan;Fix request (15u)

I'd like to backport this fix for the issue presumably existing in 15u, too. The code part is similar to 17u backport version, in the test I have to change one line mentioning ClassFileInstaller. Sanity-tested with hotspot/jtreg/compiler tests.;;;","2022-10-21 03:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/290
Date: 2022-10-21 09:56:57 +0000;;;","2023-01-23 13:48;epavlova;Regression test codegen/aes/Test8292158.java passed in JDK20 ATR;;;",,,,,,,,,,,,,,
Incorrect decoding near EOF for stateful decoders like UTF-16,JDK-8292043,5081155,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2022-08-06 10:42,2023-05-19 08:26,2023-10-01 09:56,2022-08-22 09:31,11,17,18,19,20,8,20,core-libs,,0,19ea,amazon-interest,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Reproduced with 1.8.0_74, 11.0.14, 17.0.3 and 19-ea+34 on Ubuntu 18.04.

A DESCRIPTION OF THE PROBLEM :
StreamDecoder.implRead() resets the decoder at [1] after seeing the EOF, but before doing the final decoding round, so any stateful decoder will use its initial state when decoding the remaining input, which can lead to a wrong result.

The reproducer demonstrates the bug by making the UTF-16 decoder forget the autodetected BOM before decoding the final two bytes.

[1] https://github.com/openjdk/jdk/blob/ae52053757ca50c4b56989c9b0c6890e504e4088/src/java.base/share/classes/sun/nio/cs/StreamDecoder.java#L381

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile and run the following code.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Exception in thread ""main"" java.nio.charset.MalformedInputException: Input length = 2
        at java.base/java.nio.charset.CoderResult.throwException(CoderResult.java:274)
        at java.base/sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:339)
        at java.base/sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
        at java.base/sun.nio.cs.StreamDecoder.read0(StreamDecoder.java:127)
        at java.base/sun.nio.cs.StreamDecoder.read(StreamDecoder.java:112)
        at java.base/java.io.InputStreamReader.read(InputStreamReader.java:164)
        at Test.main(Test.java:16)

ACTUAL -
216
-1
65279
Exception in thread ""main"" java.nio.charset.MalformedInputException: Input length = 2
        at java.base/java.nio.charset.CoderResult.throwException(CoderResult.java:274)
        at java.base/sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:339)
        at java.base/sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
        at java.base/sun.nio.cs.StreamDecoder.read0(StreamDecoder.java:127)
        at java.base/sun.nio.cs.StreamDecoder.read(StreamDecoder.java:112)
        at java.base/java.io.InputStreamReader.read(InputStreamReader.java:164)
        at Test.main(Test.java:23)


---------- BEGIN SOURCE ----------
import java.io.*;
import java.nio.charset.Charset;
import java.nio.charset.CodingErrorAction;

public class Test {
    public static void main(String[] args) throws IOException {
        byte[] input = {
            (byte) 0xff, (byte) 0xfe, // BOM (in UTF-16LE)
            0, (byte) 0xd8, // High surrogate (in UTF-16LE)
        };
        InputStreamReader r;

        r = new InputStreamReader(
                new ByteArrayInputStream(input),
                Charset.forName(""UTF-16"").newDecoder().onMalformedInput(CodingErrorAction.REPORT));
        System.out.println(r.read()); // \u00d8 (wrong, uses UTF-16BE)
        System.out.println(r.read()); // EOF

        r = new InputStreamReader(
                new ByteArrayInputStream(input),
                Charset.forName(""UTF-16LE"").newDecoder().onMalformedInput(CodingErrorAction.REPORT));
        System.out.println(r.read()); // BOM
        System.out.println(r.read()); // MalformedInputException (correct)
    }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-08-08 05:26;tongwan;Test.java;https://bugs.openjdk.org/secure/attachment/100346/Test.java",,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2y6pf:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3962510e,,,,,,,Verified,,"2022-08-08 05:25;tongwan;The observations on Windows 10:
JDK 8: Failed, incorrect results observed.
JDK 11: Failed.
JDK 17: Failed.
JDK 18: Failed.
JDK 19ea+32: Failed.
JDK 20ea+4: Failed.
;;;","2022-08-19 09:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9945
Date: 2022-08-19 16:32:02 +0000;;;","2022-08-22 09:31;dukebot;Changeset: aa9b8f04
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-08-22 16:26:37 +0000
URL:       https://git.openjdk.org/jdk/commit/aa9b8f04bf74d5fa00f2b27895e7369abea3a930
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong text artifacts in table header,JDK-8292009,5081150,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mhanl,mpaus,mpaus,2022-08-06 04:42,2022-12-09 16:13,2023-10-01 09:56,2022-12-08 11:13,jfx19,,,,,,jfx20,javafx,,0,regression,,,,,,,,,,,,,,,,,"Some changes in recent versions of JavaFX have broken my table display. A part of the last table row seems to be duplicated in the header section of the table. This always worked until 19-ea+4 and was first broken in 19-ea+5. Then it seemed to be fixed in 19-ea+9 (maybe just hidden because of other issue) but is now broken again in 19-ea+10 (and also 20-ea+1) The attached screen shots show the effect.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289357,,,,,,,"2022-08-09 11:16;mpaus;table_with_19-ea+10-p805.png;https://bugs.openjdk.org/secure/attachment/100361/table_with_19-ea%2B10-p805.png","2022-08-06 04:42;mpaus;table_with_19-ea+10.png;https://bugs.openjdk.org/secure/attachment/100327/table_with_19-ea%2B10.png","2022-08-06 04:42;mpaus;table_with_19-ea+4.png;https://bugs.openjdk.org/secure/attachment/100330/table_with_19-ea%2B4.png","2022-08-06 04:42;mpaus;table_with_19-ea+5.png;https://bugs.openjdk.org/secure/attachment/100329/table_with_19-ea%2B5.png","2022-08-06 04:42;mpaus;table_with_19-ea+9.png;https://bugs.openjdk.org/secure/attachment/100328/table_with_19-ea%2B9.png",,,,,,,,,,,,,,,,,,,,,,"0|i2y6ob:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-08-09 04:41;mhanl;Can you perhaps check if this PR fixes this?
https://github.com/openjdk/jfx/pull/805;;;","2022-08-09 07:25;mpaus;I would do that if you could tell me the right gradle spells to get a build without lengthy tests and then install the result to mavenLocal.

My build seems to work but not the installation to the maven local repo and without that I can't test against my application. I already
tried ""publishToMavenLocal"" according to the docs but that only resulted in a ""Task 'publishToMavenLocal' not found in root project 'jfx'."".

Edit:
Obviously I am not allone with my question. See: https://stackoverflow.com/questions/71664637/how-to-build-openjfx-and-make-a-maven-artifact;;;","2022-08-09 11:20;mpaus;After some hacking to get the artifact into my local maven repo I can now confirm that the above mentioned pull request seems to fix the problem. See https://bugs.openjdk.org/secure/attachment/100361/table_with_19-ea%2B10-p805.png I switched between the two builds several times and the PR reliably fixed the problem.;;;","2022-08-10 01:37;mhanl;Thanks for checking out. 
In this case the problem is that one table row is remaining in the skin after the initial autosizing triggered from TableColumnHeader#resizeColumnToFitContent.
For some reason it overlays your table. Normally this does not happen. In any case, my PR removes the row after autosizing, which will fix this.

I actually never tried publish the sdk directly into the local maven repository. I'm always going the 'old school' way by adding the sdk directly as 'Library' in IntelliJ, which in the end will have the same effect as adding a maven/gradle dependency.;;;","2022-08-10 01:48;mpaus;The ""Library"" approach works for little test programs but not if you want to check a new JavaFX against a large production program which is completely configured by Maven. But anyway, I am glad this issue can be fixed now. I hope this will make it into 19. Otherwise I would have to skip that release.;;;","2022-08-10 06:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/805
Date: 2022-06-28 17:06:39 +0000;;;","2022-08-24 10:51;mpaus;Will this pull request make it into 19? Otherwise 19 will break my software. 20-ea+2 still contains the bug.;;;","2022-08-24 11:13;kcr;It's too late for 19.;;;","2022-12-08 11:13;dukebot;Changeset: c900a00c
Author:    Marius Hanl <mhanl@openjdk.org>
Date:      2022-12-08 19:11:00 +0000
URL:       https://git.openjdk.org/jfx/commit/c900a00c7527f290e8047792fef4b45002930892
;;;",,,,,,,,,,,,,,,,,,,,,,,,
[REDO2] ProblemList multiple tests in -Xcomp mode due to JDK-8291649,JDK-8291992,5081132,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,dcubed,dcubed,dcubed,2022-08-05 14:43,2022-09-20 22:58,2023-10-01 09:56,2022-08-05 14:59,20,,,,,,20,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-20,tier6,tier8,,,,,,,,,,,,,"Redoing this one with the correct ProblemList-Xcomp.txt file...
and remembering to commit the correct file also.

In order to reduce the noise in the JDK20 CI, I'm ProblemListing: 

java/util/zip/TestCRC32C.java 
java/util/zip/TestChecksum.java 
java/lang/Long/BitTwiddle.java 
java/lang/Integer/BitTwiddle.java 

in -Xcomp mode for generic-x64.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291926,JDK-8291990,,,JDK-8291649,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,generic,,,,,"0|i2y6kb:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-08-05 14:43;dcubed;Context diff for the proposed fix:

$ git diff
diff --git a/test/jdk/ProblemList-Xcomp.txt b/test/jdk/ProblemList-Xcomp.txt
index df1b9da12b0..7569ca406e9 100644
--- a/test/jdk/ProblemList-Xcomp.txt
+++ b/test/jdk/ProblemList-Xcomp.txt
@@ -29,3 +29,8 @@
 
 java/lang/invoke/MethodHandles/CatchExceptionTest.java 8146623 generic-all
 java/lang/ref/ReferenceEnqueue.java 8284236 generic-all
+
+java/lang/Integer/BitTwiddle.java 8291649 generic-x64
+java/lang/Long/BitTwiddle.java    8291649 generic-x64
+java/util/zip/TestCRC32C.java     8291649 generic-x64
+java/util/zip/TestChecksum.java   8291649 generic-x64;;;","2022-08-05 14:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9786
Date: 2022-08-05 21:45:53 +0000;;;","2022-08-05 14:59;dukebot;Changeset: b66a0d16
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-08-05 21:56:54 +0000
URL:       https://git.openjdk.org/jdk/commit/b66a0d1613302aa4130328fb08116de778a49a77
;;;","2022-08-07 21:58;thartmann;ILW = Same as JDK-8291926 = P2;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PrivateCredentialPermission should not use local variable to enable debugging,JDK-8291974,5081107,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mpowers,mpowers,mpowers,2022-08-05 07:51,2023-01-31 03:45,2023-10-01 09:56,2022-10-31 12:58,,,,,,,20,security-libs,,0,starter-bug,,,,,,,,,,,,,,,,,Use sun.security.util.Debug instead.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293653,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y6er:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5c1d831a,,,,,,,Verified,,"2022-08-05 09:13;mullan;Unfortunately, the ""testing"" variable is not transient, so you will need to preserve the serial format. You could just leave it as-is but unused (with an appropriate comment explaining why).;;;","2022-08-26 07:32;mpowers;What about using the Debug class, or is that overkill?;;;","2022-08-30 06:57;mullan;Or possibly just remove it. It feels more like information leftover from a debugging session.;;;","2022-09-06 10:24;mpowers;Yes to removing it. There are already jtreg tests for this code.;;;","2022-09-12 09:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10206
Date: 2022-09-07 19:49:53 +0000;;;","2022-10-31 12:58;dukebot;Changeset: 8480f870
Author:    Mark Powers <mpowers@openjdk.org>
Committer: Sean Mullan <mullan@openjdk.org>
Date:      2022-10-31 19:55:47 +0000
URL:       https://git.openjdk.org/jdk/commit/8480f87044f72e0312add190e75ee27030b7e10a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix double copy of arguments when thawing two interpreted frames,JDK-8291972,5081105,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pchilanomate,pchilanomate,pchilanomate,2022-08-05 06:57,2022-10-23 22:04,2023-10-01 09:56,2022-08-15 07:36,20,,,,,,20,hotspot,,0,loom,,,,,,,,,,,,,,,,,"When thawing two consecutive interpreted frames the current code makes room in the stack and copies the callee arguments twice, once in the caller and once in the callee. This duplication could use more stack space than the calculation made in prepare_thaw() for the maximum stack space that will be needed during thaw.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y6eb:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-05 08:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9774
Date: 2022-08-05 14:41:56 +0000;;;","2022-08-15 07:36;dukebot;Changeset: dd2034b0
Author:    Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2022-08-15 14:34:54 +0000
URL:       https://git.openjdk.org/jdk/commit/dd2034b00725f0fc777c1706b1db898475e89c5c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileFontStrike#initNative does not properly initialize IG Table on Windows,JDK-8291959,5081089,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2022-08-05 02:45,2022-08-17 17:59,2023-10-01 09:56,2022-08-11 12:30,20,,,,,,20,client-libs,,0,,,,,,,,,,,,,,,,,,"FileFontStrike#initNative calls memset with LCDLUTCOUNT (the maximum length) as the number of bytes to zero out, which is incorrect as the elements are not 1 byte in size (unsigned char*), and will result in only part of the IG Table being correctly zeroed. This is more correctly resolved by passing sizeof igLUTable to memset instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288293,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2y6ar:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-08-05 02:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9772
Date: 2022-08-05 09:46:13 +0000;;;","2022-08-11 12:30;dukebot;Changeset: 3d20a8b2
Author:    Julian Waters <jwaters@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-08-11 19:27:24 +0000
URL:       https://git.openjdk.org/jdk/commit/3d20a8b20a636e4c11ad1568b011191726b45b90
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Redundant import statements in sun.security.ec,JDK-8291957,5081088,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jjiang,jjiang,jjiang,2022-08-05 01:21,2022-08-10 19:13,2023-10-01 09:56,2022-08-07 19:53,,,,,,,20,security-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,"There are some redundant import statements in sun.security.ec, like the below,

# ECKeyPairGenerator
import java.io.IOException;
import java.math.BigInteger;

# SunEC
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import sun.security.ec.ed.EdDSAAlgorithmParameters;
import sun.security.util.KnownOIDs;

# XDHPublicKeyImpl
import java.security.PublicKey;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y6aj:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,,,"2022-08-06 08:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9792
Date: 2022-08-06 15:12:44 +0000;;;","2022-08-07 19:53;dukebot;Changeset: 8e2c006c
Author:    raspberry-hu <76903172+raspberry-hu@users.noreply.github.com>
Committer: John Jiang <jjiang@openjdk.org>
Date:      2022-08-08 02:49:44 +0000
URL:       https://git.openjdk.org/jdk/commit/8e2c006cd14905c06e8c2cc30f13de249d54ed79
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cleanup the JNI invocation API spec and code examples,JDK-8291955,5081085,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,dholmes,dholmes,2022-08-04 23:58,2022-08-23 13:16,2023-10-01 09:56,2022-08-16 14:10,20,,,,,,20,hotspot,,0,jni,noreg-doc,,,,,,,,,,,,,,,,"There are a number of inconsistencies in parameter naming e.g. penv vs. p_env, and vm vs p_vm, that should be made consistent across the invocation API. Some grammatical improvements in parameter descriptions can also be made e.g.

`vm`: the VM to which the current thread will be attached, must not be `NULL`.

should read:

`vm`: the VM to which the current thread will be attached. It must not be `NULL`. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289253,,,,JDK-8290482,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y69v:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unexpected extending of SupportedGroups,JDK-8291949,5081076,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-08-04 21:58,2022-08-23 13:14,2023-10-01 09:56,2022-08-15 10:02,,,,,,,20,security-libs,,0,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,,"In the SunJSSE implementation, there are a few unexpected extending of static class SupportedGroups.  It may be nice to clean them up so that the code is easier to read.

For example,
     private static final class CHSupportedGroupsProducer
-            extends SupportedGroups implements HandshakeProducer {
+            implements HandshakeProducer {",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y67v:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-08-04 22:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9765
Date: 2022-08-05 05:23:15 +0000;;;","2022-08-15 10:02;dukebot;Changeset: ea2c82e7
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-08-15 17:00:15 +0000
URL:       https://git.openjdk.org/jdk/commit/ea2c82e74f5580f396920f9e561cbec80c03f373
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: fail to build after JDK-8290840,JDK-8291947,5081073,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,yadongwang,yadongwang,yadongwang,2022-08-04 19:23,2023-07-09 19:14,2023-10-01 09:56,2022-08-05 02:16,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,"JDK-8290840 moved icache_flush from os_linux_riscv.cpp to icache_riscv.cpp, and we got 2 icache_flush there, and then caused a compilation error of ""overloaded function with no contextual type information"" in generate_icache_flush, which simply used the function name as a function address.

We put icache_flush in os files because it was just a linux implementation, and we saw some test failures on Hifive Unleashed when using the ""portable"" version of __builtin__clear_cache provided by compilers about 2 years ago. The problem doesn't exist anymore, so we can revert to the previous implementation of just using the builtin clear cache function.",,,,,,,,,,JDK-8311712,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290840,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,20,,linux,,,,,"0|i2y677:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-04 20:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9763
Date: 2022-08-05 03:27:41 +0000;;;","2022-08-05 02:16;dukebot;Changeset: 88c96dd3
Author:    Yadong Wang <yadongwang@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-08-05 09:12:29 +0000
URL:       https://git.openjdk.org/jdk/commit/88c96dd3eb28a273305d07fb2b0a36122484189c
;;;","2023-03-15 20:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/15
Date: 2023-03-16 03:10:55 +0000;;;","2023-06-19 20:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
generated constructors are considered compact when they shouldn't,JDK-8291914,5081034,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-08-04 09:07,2022-11-14 11:31,2023-10-01 09:56,2022-10-20 08:38,19,20,,,,,20,tools,,0,conformance,javac-record,,,,,,,,,,,,,,,,"Given a declaration like:

record R() {}

javac is considering the generated constructor both canonical and compact, it should only be canonical as there is no explicit compact constructor declaration",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289249,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y5yj:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-10-18 21:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10756
Date: 2022-10-19 04:52:29 +0000;;;","2022-10-20 10:07;dukebot;Changeset: 95dd376b
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2022-10-20 14:58:56 +0000
URL:       https://git.openjdk.org/jdk/commit/95dd376ba249b9eb8ab40a957238dfd79e60112f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/io/File/GetXSpace.java fails with ""53687091200 != 161051996160""",JDK-8291911,5081030,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bpb,dcubed,dcubed,2022-08-04 07:53,2022-12-06 07:35,2023-10-01 09:56,2022-11-14 10:10,11,17,19,20,,,20,core-libs,,0,CPU23_01-critical-approved,CPU23_01-critical-SQE-OK,intermittent,noreg-self,tier2,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

java/io/File/GetXSpace.java

Here's a snippet from the log file:

#section:main
----------messages:(4/211)----------
command: main -Djava.security.manager=allow GetXSpace
reason: User specified action: run main/othervm -Djava.security.manager=allow GetXSpace 
Mode: othervm [/othervm specified]
elapsed time (seconds): 0.41
----------configuration:(0/0)----------
----------System.out:(32/1682)*----------
--- Testing df
C:/cygwin        157277340 106383716  50893624      68% /


SecurityManager = null
C:/cygwin:
  df   total= 161051996160 free =            0 usable =  52115070976
  getX total= 161051996160 free =  52115070976 usable =  52115070976

SecurityManager = GetXSpace$Allow
C:/cygwin:
  df   total= 161051996160 free =            0 usable =  52115070976
  getX total= 161051996160 free =  52115070976 usable =  52115070976

SecurityManager = GetXSpace$DenyFSA
C:/cygwin:
   getTotalSpace: ""java.lang.SecurityException: sorry - getFileSystemAttributes"" thrown as expected
    getFreeSpace: ""java.lang.SecurityException: sorry - getFileSystemAttributes"" thrown as expected
  getUsableSpace: ""java.lang.SecurityException: sorry - getFileSystemAttributes"" thrown as expected

SecurityManager = GetXSpace$DenyRead
C:/cygwin:
   getTotalSpace: ""java.lang.SecurityException: sorry - checkRead()"" thrown as expected
    getFreeSpace: ""java.lang.SecurityException: sorry - checkRead()"" thrown as expected
  getUsableSpace: ""java.lang.SecurityException: sorry - checkRead()"" thrown as expected
all 26 tests passed
--- Testing c:\\sb\\prod\\1659592958\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\tmp\\4552725401030746762\\8312758356040035656\\foo14892501083129272171.tmp
C:                52428800 1535176  50893624       3% /cygdrive/c

c:\\sb\\prod\\1659592958\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\tmp\\4552725401030746762\\8312758356040035656\\foo14892501083129272171.tmp:
  df   total=  53687091200 free =            0 usable =  52115070976
  getX total= 161051996160 free =  52115070976 usable =  52115070976
----------System.err:(17/1469)*----------
WARNING: A terminally deprecated method in java.lang.System has been called
WARNING: System::setSecurityManager has been called by GetXSpace (file:/C:/sb/prod/1659592958/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/classes/3/java/io/File/GetXSpace.d/)
WARNING: Please consider reporting this to the maintainers of GetXSpace
WARNING: System::setSecurityManager will be removed in a future release
FAILED: 'c:\\sb\\prod\\1659592958\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\tmp\\4552725401030746762\\8312758356040035656\\foo14892501083129272171.tmp': 53687091200 != 161051996160
4 tests: 1 failure(s); first: java.lang.RuntimeException: 'c:\\sb\\prod\\1659592958\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\tmp\\4552725401030746762\\8312758356040035656\\foo14892501083129272171.tmp': 53687091200 != 161051996160
java.lang.RuntimeException: 1 test(s) failed
	at GetXSpace.main(GetXSpace.java:452)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 1 test(s) failed
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: 1 test(s) failed
----------rerun:(40/5672)*----------

Please note that this failure msg:

FAILED: 'c:\\sb\\prod\\1659592958\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\tmp\\4552725401030746762\\8312758356040035656\\foo14892501083129272171.tmp': 53687091200 != 161051996160

is not very helpful. We have two values that are expected to
match, but we have no idea from this output what the values
represent. 

I'm starting this bug off as a P3 since this is a Tier2 failure.",,,,,,,,,,JDK-8297177,JDK-8297178,JDK-8297770,JDK-8297758,JDK-8298179,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297187,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2y5xn:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2022-08-12 07:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9856
Date: 2022-08-12 14:52:23 +0000;;;","2022-11-14 10:09;dukebot;Changeset: 749335d3
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-11-14 18:08:33 +0000
URL:       https://git.openjdk.org/jdk/commit/749335d34ac570760279ac81308d5d323aba4067
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VirtualFlow creates unneeded empty cells,JDK-8291908,5081027,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvos,jvos,jvos,2022-08-04 07:19,2023-03-12 11:20,2023-10-01 09:56,2022-08-16 05:31,jfx18,jfx19,,,,,jfx20,javafx,,0,,,,,,,,,,,,,,,,,,"When the VirtualFlow is asked to scroll to a specific item, that item is (in the next layoutChildren invocation) initially placed at the first row of the flow (1). 
If there are not enough items left to fill the remainder of the flow, and if the specific item is not the first one in the list, the contents of the flow are shifted down (2).

Between (1) and (2) the remainder of the flow (the cells that won't be filled with real items) is filled with empty cells (because  addTrailingCells() is called).

Because of phase (2), these empty cells are never rendered (they are outside the viewport when the layoutChildren method returns) but their allocation and presence consume resources (e.g. methods to calculate the size are invoked).

It would be better to do the check on empty rows after the specified item before we start filling the flow with empty cells. That way, addTrailingCells will only add empty cells when they are really required.
",,,,,,,,,,JDK-8304023,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291467,,,,,,JDK-8291467,JDK-8296871,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y5wz:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-08-04 07:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/863
Date: 2022-08-04 14:30:40 +0000;;;","2022-08-04 08:30;jvos;This issue can also cause the contents of the VirtualFlow not to be rendered correctly. There is a test in addTrailingCells which checks if there are a large number of rows to be added, in which case it will return with a logged warning (due to https://bugs.openjdk.org/browse/JDK-8093564).
In case many trailing cells need to be added because the current one happens to be the last cell, and it is rendered at the top of the flow, this check will cause the layout cycle to fail.;;;","2022-08-15 05:40;kcr;Bumping to P3 to match the priority of JDK-8291467 which was just closed as a duplicate.;;;","2022-08-16 05:31;dukebot;Changeset: eaddb0fb
Author:    Johan Vos <jvos@openjdk.org>
Date:      2022-08-16 12:29:02 +0000
URL:       https://git.openjdk.org/jfx/commit/eaddb0fbeeb99900636f9704758f6c004860ff9a
;;;","2023-03-12 09:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/116
Date: 2023-03-12 16:04:06 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bindings.createXxxBinding inherit incorrect method docs,JDK-8291906,5081025,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,nlisker,nlisker,nlisker,2022-08-04 07:14,2022-08-23 16:39,2023-10-01 09:56,2022-08-19 17:40,jfx18,,,,,,jfx19,javafx,,0,noreg-doc,,,,,,,,,,,,,,,,,"The bindings created by Bindings.createXxxBinding reimplement the getDependencies and dispose methods, but the inherited docs specify that the implementation is empty, while it is not true anymore.",,,,,,,,,,JDK-8292805,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y5wj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2022-08-18 17:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/881
Date: 2022-08-19 00:18:37 +0000;;;","2022-08-19 17:40;dukebot;Changeset: 5c007833
Author:    Nir Lisker <nlisker@openjdk.org>
Date:      2022-08-20 00:38:41 +0000
URL:       https://git.openjdk.org/jfx/commit/5c00783352940b08f6254d2250524ef804984267
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: Preference menu disappears after JDK-8288750,JDK-8291901,5081020,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,tholenstein,tholenstein,2022-08-04 06:29,2022-09-20 22:55,2023-10-01 09:56,2022-08-08 01:06,20,,,,,,20,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,"JDK-8288750 removed the Tools menu because it was always empty on macOS. Unfortunately, this is not the case on Linux: the Options window could be accessed via the Tools menu. On macOS there is an additional application menu where ""Preference.."" opens the Options window.

Either hide the empty Tools menu on macOS only or show the Tools -> Options menu on macOS as well",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289503,,,,,,,,,,,,,,,,,,,,,,,,"2022-08-04 06:28;tholenstein;options on mac.png;https://bugs.openjdk.org/secure/attachment/100307/options+on+mac.png",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y5vf:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-08-04 12:57;dlong;ILW = UI issue; always; no workaround = LHH = P4;;;","2022-08-05 03:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9771
Date: 2022-08-05 09:40:43 +0000;;;","2022-08-08 01:06;dukebot;Changeset: 20123ea4
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2022-08-08 08:03:21 +0000
URL:       https://git.openjdk.org/jdk/commit/20123ea4de702ccbaf4c500ff7a1000ca7ee9c90
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Zero VM is broken on MacOS after JDK-8290840 due to os::setup_fpu() is missing,JDK-8291899,5081017,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-08-04 04:56,2022-08-10 19:10,2023-10-01 09:56,2022-08-04 15:26,20,,,,,,20,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,"
Undefined symbols for architecture x86_64:
  ""os::setup_fpu()"", referenced from:
      attach_current_thread(JavaVM_*, void**, void*, bool) in jni.o
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make[3]: *** [/Users/fool/workspace/jdk/build/macosx-x86_64-zero-fastdebug/support/modules_libs/java.base/zero/libjvm.dylib] Error 1
make[3]: *** Waiting for unfinished jobs....
make[2]: *** [hotspot-zero-libs] Error 2

ERROR: Build failed for target 'images' in configuration 'macosx-x86_64-zero-fastdebug' (exit code 2)
Stopping sjavac server

=== Output from failing command(s) repeated here ===
* For target hotspot_variant-zero_libjvm_objs_BUILD_LIBJVM_link:
Undefined symbols for architecture x86_64:
  ""os::setup_fpu()"", referenced from:
      attach_current_thread(JavaVM_*, void**, void*, bool) in jni.o
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
~                                                                                ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290840,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y5ur:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-04 05:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9744
Date: 2022-08-04 12:02:01 +0000;;;","2022-08-04 15:25;dukebot;Changeset: 1edc2455
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-08-04 22:23:56 +0000
URL:       https://git.openjdk.org/jdk/commit/1edc24557482e04800e774bb3702e3de31783e60
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TerminatingThreadLocal(s) not registered from virtual thread(s),JDK-8291897,5081016,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,plevart,plevart,plevart,2022-08-04 03:34,2023-01-31 03:45,2023-10-01 09:56,2022-08-08 05:40,19,20,,,,,20,core-libs,,0,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,loom,,,,,,,,,,,,,,"TerminatingThreadLocal is a JDK internal variant of ThreadLocal wihth a cleanup action to be called when a thread with bound value for a particular TerminatingThreadLocal instance is terminating. It is used internaly in JDK for prompt cleanup of thread-local caches of native ByteBuffer(s) and NativeBuffer(s). TerminatingThreadLocal is only ever used in the context of carrier threads. If a virtual thread is accessing a value, it is actually its currently bound carrier thread that is selected to hold the value. But if only virtual threads are creating the value(s) such TerminatingThreadLocal(s) are never registered and cleanup action is not called when the carrier thread exits:

```
    public static void register(TerminatingThreadLocal<?> tl) {
        if (!Thread.currentThread().isVirtual())
            REGISTRY.get().add(tl);
    }
```

You may say that carrier threads live forever, but that's not true. When the ""virtual thread scheduler"" (ForkJoinPool) is compensating for a pinned carrier thread that blocks, new carrier thread is created. After keep-alive period (30 seconds currently) of inactivity, such excessive carrier threads are terminated.
",,,,,,,,,,JDK-8293731,JDK-8293689,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292051,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y5uj:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-08-04 04:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9743
Date: 2022-08-04 10:57:53 +0000;;;","2022-08-04 04:17;alanb;An oversight. Virtual threads use the carrier's TL buffer cache and the intention was that the first usage would register the carrier's ""terminating TL"" so that that the resources are freed when the carrier thread terminates. As you note, carrier threads terminate when idle for 30 seconds and compensating makes it more likely that resources will have to wait for resource processing to be freed.;;;","2022-08-08 05:40;dukebot;Changeset: 861cc671
Author:    Peter Levart <plevart@openjdk.org>
Date:      2022-08-08 12:38:21 +0000
URL:       https://git.openjdk.org/jdk/commit/861cc671e2e4904d94f50710be99a511e2f9bb68
;;;","2022-09-12 14:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/23
Date: 2022-09-12 21:51:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Match exceptions using types of javax.lang.model, not strings",JDK-8291869,5080977,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-08-03 15:24,2022-11-28 14:46,2023-10-01 09:56,2022-11-16 01:45,20,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,"When inheriting exception documentation, javadoc matches exceptions from an overridden method with those of the overriding method using string names, not even FQNs. This is misguided and leads to incorrect results. We should use appropriate types, not strings. (ThrowsTaglet is ""stringly"" typed.)",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285488,,JDK-8291803,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y5mr:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-08-03 15:44;prappo;I indicated that this issue blocks JDK-8291803. The blocking is ""soft"" in the sense that both issues need the same functionality.

To build a set of exceptions documented by a method, Utils.isSimpleOverride (JDK-8291803) needs to translate exception names found in @throws tags to elements or type mirrors. Such translation is exactly what this issue is concerned with. ;;;","2022-10-18 10:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10746
Date: 2022-10-18 15:05:16 +0000;;;","2022-11-16 01:45;dukebot;Changeset: 499406c7
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-11-16 09:43:21 +0000
URL:       https://git.openjdk.org/jdk/commit/499406c764ba0ce57079b1f612297be5b148e5bb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[CSS] ClassCastException in CssStyleHelper calculateValue,JDK-8291853,5080958,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2022-08-03 13:00,2023-07-21 08:17,2023-10-01 09:56,2022-11-14 10:25,8,jfx11,jfx20,,,,jfx20,javafx,,0,css,sn_131,,,,,,,,,,,,,,,,"This issue can be reproduce always by executing TableViewMouseInputTest using the following command:

```
/bin/sh gradlew -PSTUB_RUNTIME=../caches/modular-sdk -PFULL_TEST=true -PUSE_ROBOT=true --no-daemon --info --stacktrace cleanTest :controls:test --tests TableViewMouseInputTest -x :web:test --stacktrace 2>&1 | tee ~/`date +""test-%Y-%m%d-%H%M%S""`.log
```

output:
TableViewMouseInputTest > test_rt21444_down_row STANDARD_ERROR
    Aug 02, 2022 11:06:00 AM javafx.scene.CssStyleHelper calculateValue
    WARNING: Caught 'java.lang.ClassCastException: class java.lang.String cannot be cast to class javafx.scene.paint.Paint (java.lang.String is in module java.base of loader 'bootstrap'; javafx.scene.paint.Paint is in module javafx.graphics@20-internal of loader 'app')' while converting value for '-fx-background-color' from rule '*.table-row-cell' in stylesheet file:/Users/angorya/Projects/jfx/build/shims/javafx.controls/com/sun/javafx/scene/control/skin/modena/modena.bss
    Aug 02, 2022 11:06:00 AM javafx.scene.CssStyleHelper calculateValue
    WARNING: Caught 'java.lang.ClassCastException: class java.lang.String cannot be cast to class javafx.scene.paint.Paint (java.lang.String is in module java.base of loader 'bootstrap'; javafx.scene.paint.Paint is in module javafx.graphics@20-internal of loader 'app')' while converting value for '-fx-border-color' from rule '*.table-cell' in stylesheet file:/Users/angorya/Projects/jfx/build/shims/javafx.controls/com/sun/javafx/scene/control/skin/modena/modena.bss


I have seen similar messages when running a javafx application in the field.  Also, similar issue was reported in stackoverflow:
https://stackoverflow.com/questions/27311222/javafx-getting-class-cast-exception-in-css-for-blend-mode

Also, see JDK-8088468

----------------------------------------------------

Minimal reproducable example:
### START ###
import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class CssWarningBug extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {
        Scene scene = new Scene(new StackPane(buildTableView()));
        stage.setScene(scene);

        stage.show();
    }

    private TableView<String> buildTableView() {
        TableView<String> tableView = new TableView<>();

        TableColumn<String, String> column = new TableColumn<>(""column"");
        column.setCellValueFactory(param -> new SimpleStringProperty(param.getValue()));
        column.setCellFactory(param -> new ScenePropertyTableCell<>());

        tableView.getColumns().add(column);
        tableView.getItems().addAll(""item1"", ""item2"", ""item3"");

        return tableView;
    }

    private static class ScenePropertyTableCell<S> extends TableCell<S, String> {
        public ScenePropertyTableCell() {
            sceneProperty().addListener((obs, oldScene, newScene) -> {
                if (newScene == null || newScene.getRoot().getProperties().containsKey(""new.root"")) {
                    return;
                }

                StackPane newRoot = new StackPane();
                newRoot.getProperties().put(""new.root"", true);
                Parent oldRoot = newScene.getRoot();

                newScene.setRoot(newRoot);

                // CLASS CAST EXCEPTION
                // If this call is before newScene.setRoot(newRoot);, nothing will happen. 
                // Maybe because -fx-table-cell-border-color is not yet parsed because we changed the root?
                newRoot.getChildren().setAll(oldRoot);
            });
        }
    }
}
### END ###",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8198604,,,,,,,,JDK-8268657,JDK-8296810,JDK-8296825,,JDK-8097038,JDK-8088468,,,,,,"2022-11-08 13:55;angorya;Screen Shot 2022-11-08 at 13.46.03.png;https://bugs.openjdk.org/secure/attachment/101505/Screen+Shot+2022-11-08+at+13.46.03.png","2022-08-03 13:09;angorya;test-2022-0802-110514.log;https://bugs.openjdk.org/secure/attachment/100296/test-2022-0802-110514.log",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y5ij:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-08-03 13:24;kcr;This is either a graphics bug (in the css parsing) or a controls bug (either in the stylesheet or in the test), assuming controls for now.
;;;","2022-08-03 14:41;angorya;Caused by StrokeBorderPaintConverter.convert() trying to interpret a ParsedValue (value=""-fx-table-cell-border-color"") which is a String not a Color.

StrokeBorderPaintConverter : 59

```
[0]= ParsedValueImpl<V,T>  (id=149)	
	containsLookups= false	
	converter= null	
	hash= -2147483648	
	lookup= false	
	value= Color  (id=95)	
[1]= ParsedValueImpl<V,T>  (id=150)	
	containsLookups= true	
	converter= null	
	hash= 1198030133	
	lookup= true	
	value= ""-fx-table-cell-border-color"" (id=151)	
```;;;","2022-08-04 06:35;fastegal;I'm seeing similar warnings in Eclipse: currently f.i. a few in TableViewTest,  many in TableViewMouseInputTest - started to dig into them over time but without reasonable result (so ignored them *cough)

Seeing activity here, I tried again (TableViewTest only) 

- add a breakpoint to where the helper throws the ClassCastException (line 1634)
- debug the test run

doing this, I'm getting warnings from

- testAnchorRemainsWhenAddingMoreItemsBelow (twice)
- test_rt_40319 with useMouse == true
- test_ChangeToStringMouseMultipleSelectionCellMode
- test_rt_37058 with content == false

for the first three the warning is thrown from MouseEventFirer in a sequence:

     Cell cell = VirtualFlowUtils.getCell(...);
     MouseEventFirer mouse = new MouseEventFirer(cell);

when the implicitly created StageLoader in the firer is shown. Note that there are two implicitly created stageloaders:

- one is created (and disposed, if not explicitly kept) in utils.getCell(...)
- one is created in the firer if the cell isn't attached to a scene

We can get rid off the warning of keeping the stageLoader created by the utils .. at the price of a failing test. Edit: looks like the test failure is a know test bug - using the alternative MouseFirer constructor get's rid of it. Replacing the two lines above with the following seems (beware: not formally tested ;) to not throw a warning and keeps the test passing:

     VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = true;
     Cell endCell = VirtualFlowTestUtils.getCell(t, endIndex, toRight ? 1 : 0);
     VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = false;
     MouseEventFirer mouse = new MouseEventFirer(endCell, true);

on the dark side: we can't trust our tests ... 

Actually, there are several variants of test_rt_34685_XX which keep the stageLoader created by the utils. They don't throw warnings, and are passing.

So we might have a real bug here, if we are lucky only in the test infrastructure (or its usage).





;;;","2022-08-09 04:26;mhanl;I saw some warnings like this also in a real application but couldn't narrow it down.
But it looks like it happened because of the ControlsFX validation framework.
The interesting point is, that the ControlsFX validation framework is setting a so called 'decoration pane' as root node for the scene, which will handle the validation decoration. And this seems to trigger this warnings.

This also matches with the observation from Jeanette as the StageLoader also deals with a scene and a root node.
Maybe we can narrow it down with that information.;;;","2022-09-15 15:26;mhanl;I managed to create a minimal reproducable example with the information I also wrote above.
This warning really happens if you change the root of a scene.

Interesting is though, that if in the example above we first call:
newRoot.getChildren().setAll(oldRoot);
and then:
newScene.setRoot(newRoot);
everything is fine. But the other way around will produce the ClassCastException warnings.;;;","2022-11-08 13:57;angorya;On thing I noticed is that the hierarchy of ParsedValues seem to show invalid combination of lookup/containsLookup flags, perhaps a bug in CssStyleHelper.resolveLookups():

(see https://bugs.openjdk.org/secure/attachment/101505/Screen%20Shot%202022-11-08%20at%2013.46.03.png)

notice that the parent ParsedValue (id=110) has containsLookup=false, yet its child ParsedValue (id=153) contains both lookup=true and containsLookup=true.;;;","2022-11-10 11:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/947
Date: 2022-11-10 17:52:50 +0000;;;","2022-11-14 10:25;dukebot;Changeset: 7ec0852c
Author:    Andy Goryachev <angorya@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-11-14 18:21:19 +0000
URL:       https://git.openjdk.org/jfx/commit/7ec0852cca60a4093db0f68cf91da1291a9cf978
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
jvmti/RedefineClasses/StressRedefine failed: assert(!is_null(v)) failed: narrow klass value can never be zero,JDK-8291830,5080934,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,coleenp,dcubed,dcubed,2022-08-03 08:10,2023-09-28 05:37,2023-10-01 09:56,2023-09-28 05:37,19,,,,,,20,hotspot,,0,gc-parallel,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,tier6,,,,,,,,,,,"The following test failed in the JDK19 CI:

vmTestbase/nsk/jvmti/RedefineClasses/StressRedefine/TestDescription.java

Here's a snippet from the log file:

Got expected exception: java.lang.reflect.InvocationTargetException
Got expected exception: java.lang.reflect.InvocationTargetException
Got expected exception: java.lang.reflect.InvocationTargetException
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\oops/compressedOops.inline.hpp:133
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\\sb\\prod\\1659451653\\workspace\\open\\src\\hotspot\\share\\oops/compressedOops.inline.hpp:133), pid=32764, tid=35388
#  assert(!is_null(v)) failed: narrow klass value can never be zero
#
# JRE version: Java(TM) SE Runtime Environment (19.0+34) (fastdebug build 19-ea+34-2227)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+34-2227, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, windows-amd64)
# Core dump will be written. Default location: C:\\sb\\prod\\1659511560\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti_quick\\scratch\\3\\hs_err_pid32764.mdmp
#
# An error report file with more information is saved as:
# C:\\sb\\prod\\1659511560\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti_quick\\scratch\\3\\hs_err_pid32764.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
ee the JVMTI spec.
>>>>>>>> Invoke RedefineClasses():
	new class byte count=2353
<<<<<<<< RedefineClasses() is successfully done
>>>>>>>> Invoke RedefineClasses():
	new class byte count=2353
<<<<<<<< RedefineClasses() is successfully done
>>>>>>>> Invoke RedefineClasses():
	new class byte count=2353
c:\\sb\\prod\\1659451653\\workspace\\open\\test\\hotspot\\jtreg\\vmTestbase\\nsk\\jvmti\\RedefineClasses\\StressRedefine\\stressRedefine.cpp: Failed to call RedefineClasses():
	the function returned error 62: JVMTI_ERROR_FAILS_VERIFICATION
	For more info about this error see the JVMTI spec.
>>>>>>>> Invoke RedefineClasses():
	new class byte count=2353
c:\\sb\\prod\\1659451653\\workspace\\open\\test\\hotspot\\jtreg\\vmTestbase\\nsk\\jvmti\\RedefineClasses\\StressRedefine\\stressRedefine.cpp: Failed to call RedefineClasses():
	the function returned error 60: JVMTI_ERROR_INVALID_CLASS_FORMAT
	For more info about this error see the JVMTI spec.
>>>>>>>> Invoke RedefineClasses():
	new class byte count=2353
<<<<<<<< RedefineClasses() is successfully done
>>>>>>>> Invoke RedefineClasses():
	new class byte count=2353
c:\\sb\\prod\\1659451653\\workspace\\open\\test\\hotspot\\jtreg\\vmTestbase\\nsk\\jvmti\\RedefineClasses\\StressRedefine\\stressRedefine.cpp: Failed to call RedefineClasses():
	the function returned error 67: JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED
	For more info about this error see the JVMTI spec.
>>>>>>>> Invoke RedefineClasses():
	new class byte count=2353
<<<<<<<< RedefineClasses() is successfully done
>>>>>>>> Invoke RedefineClasses():
	new class byte count=2353
c:\\sb\\prod\\1659451653\\workspace\\open\\test\\hotspot\\jtreg\\vmTestbase\\nsk\\jvmti\\RedefineClasses\\StressRedefine\\stressRedefine.cpp: Failed to call RedefineClasses():
	the function returned error 60: JVMTI_ERROR_INVALID_CLASS_FORMAT
	For more info about this error see the JVMTI spec.
>>>>>>>> Invoke RedefineClasses():
	new class byte count=2353
<<<<<<<< RedefineClasses() is successfully done
c:\\sb\\prod\\1659451653\\workspace\\open\\test\\hotspot\\jtreg\\vmTestbase\\nsk\\jvmti\\RedefineClasses\\StressRedefine\\stressRedefine.cpp: Failed to call RedefineClasses():
	the function returned error 62: JVMTI_ERROR_FAILS_VERIFICATION
	For more info about this error see the JVMTI spec.
>>>>>>>> Invoke RedefineClasses():
	new class byte count=2353
c:\\sb\\prod\\1659451653\\workspace\\open\\test\\hotspot\\jtreg\\vmTestbase\\nsk\\jvmti\\RedefineClasses\\StressRedefine\\stressRedefine.cpp: Failed to call RedefineClasses():
	the function returned error 62: JVMTI_ERROR_FAILS_VERIFICATION
	For more info about this error see the JVMTI spec.
>>>>>>>> Invoke RedefineClasses():
	new class byte count=2353
c:\\sb\\prod\\1659451653\\workspace\\open\\test\\hotspot\\jtreg\\vmTestbase\\nsk\\jvmti\\RedefineClasses\\StressRedefine\\stressRedefine.cpp: Failed to call RedefineClasses():
	the function returned error 62: JVMTI_ERROR_FAILS_VERIFICATION
	For more info about this error see the JVMTI spec.
>>>>>>>> Invoke RedefineClasses():
	new class byte count=2353
----------System.err:(11/3643)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x000001bff51b5c00):  VMThread ""VM Thread"" [stack: 0x0000003db8000000,0x0000003db8100000] [id=35388]

Stack: [0x0000003db8000000,0x0000003db8100000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc853f1]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xee78eb]  VMError::report+0x10eb  (vmError.cpp:835)
V  [jvm.dll+0xee942e]  VMError::report_and_die+0x7fe  (vmError.cpp:1687)
V  [jvm.dll+0xee9bb4]  VMError::report_and_die+0x64  (vmError.cpp:1468)
V  [jvm.dll+0x5a72a7]  report_vm_error+0xb7  (debug.cpp:283)
V  [jvm.dll+0x22af2]  oopDesc::klass+0x52  (oop.inline.hpp:86)
V  [jvm.dll+0x812c16]  java_lang_Class::set_klass+0x76  (javaClasses.cpp:1508)
V  [jvm.dll+0x7c5faf]  InstanceKlass::deallocate_contents+0x6f  (instanceKlass.cpp:583)
V  [jvm.dll+0x5022f1]  ClassLoaderData::free_deallocate_list+0x381  (classLoaderData.cpp:866)
V  [jvm.dll+0x505d6d]  ClassLoaderDataGraph::clean_deallocate_lists+0x7d  (classLoaderDataGraph.cpp:164)
V  [jvm.dll+0xa5232d]  VM_RedefineClasses::doit+0x1ed  (jvmtiRedefineClasses.cpp:298)
V  [jvm.dll+0xef0927]  VM_Operation::evaluate+0xc7  (vmOperations.cpp:71)
V  [jvm.dll+0xef2575]  VMThread::evaluate_operation+0xb5  (vmThread.cpp:283)
V  [jvm.dll+0xef2d26]  VMThread::inner_execute+0x256  (vmThread.cpp:432)
V  [jvm.dll+0xef30a4]  VMThread::run+0x154  (vmThread.cpp:175)
V  [jvm.dll+0xe59e0c]  Thread::call_run+0x1ac  (thread.cpp:366)
V  [jvm.dll+0xc83c99]  thread_native_entry+0xb9  (os_windows.cpp:545)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]

VM_Operation (0x0000003dbb7feff0): RedefineClasses, mode: safepoint, requested by thread 0x000001bffbbee7c0, redefining class MyClass

There's a much older unresolved bug that mentions the same assert:

JDK-8203350 Crash in vmTestbase/nsk/jvmti/scenarios/hotswap/HS201/hs201t002/TestDescription.java",,,,,,,,,,JDK-8306908,JDK-8311480,JDK-8310519,JDK-8306910,JDK-8307676,,,,,,,,,,,,,,,,,,,,,,,JDK-8203350,,,,,,JDK-8203350,,,,JDK-8296915,JDK-8249822,JDK-8293584,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2y5d7:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,Verified,,"2022-10-18 23:57;sspitsyn;It looks like this test is not healthy and allows JVMTI RedefineClasses to silently fail.

We can see in the test log that he RedefineClasses returned many error codes
which are not checked at all:
  JVMTI_ERROR_FAILS_VERIFICATION
  JVMTI_ERROR_INVALID_CLASS_FORMAT
  JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED

I'm not sure yet why is it so.
It happens in the native method makeRedefinition():

    err = jvmti->RedefineClasses(1, &classDef);
    if (err != JVMTI_ERROR_NONE) {
        printf(""%s: Failed to call RedefineClasses():\n"", __FILE__);
        printf(""\tthe function returned error %d: %s\n"",
            err, TranslateError(err));
        printf(""\tFor more info about this error see the JVMTI spec.\n"");
        return STATUS_FAILED;  <== !!! STATUS_FAILED is returned here !!!
    }

However, the result value from this method is never checked:

        public void run() {
            while (stresser.continueExecution()) {
                byte[] badBytecode = bytecode.clone();
                if (random.nextDouble() < corruptingBytecodeProbability) {
                    badBytecode[random.nextInt(bytecode.length)] = 42;
                }
                makeRedefinition(2, myClass, badBytecode);  <== ??? Failing status not checked ???
            }

;;;","2022-10-19 03:45;sspitsyn;This issue is reproducible with a little bit different asserts on Windows:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\sb\prod\1665797520\workspace\open\src\hotspot\share\oops/compressedOops.inline.hpp:135), pid=29756, tid=23788
#  assert(check_alignment(result)) failed: address not aligned: 0x00000008deafbabe
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-internal-2022-10-15-0130374.serguei.spitsyn.jdk20.1)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-internal-2022-10-15-0130374.serguei.spitsyn.jdk20.1, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, windows-amd64)
# Core dump will be written. Default location: C:\sb\prod\1666172024\testoutput\test-support\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti_RedefineClasses_StressRedefine\scratch\0\hs_err_pid29756.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=c:\sb\prod\1666172024\testoutput\test-support\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti_RedefineClasses_StressRedefine\tmp -XX:+CreateCoredumpOnCrash -XX:+UseParallelGC -XX:+UseNUMA -Djava.library.path=c:\ade\mesos\work_dir\jib-master\install\2022-10-15-0130374.serguei.spitsyn.jdk20.1\windows-x64-debug.test\hotspot\jtreg\native -agentlib:stressRedefine nsk.jvmti.RedefineClasses.StressRedefine ./bin

Host: win2016-x64-169294, AMD EPYC 7J13 64-Core Processor                , 12 cores, 23G,  Windows Server 2016 , 64 bit Build 14393 (10.0.14393.3630)
Time: Wed Oct 19 10:34:36 2022 /GM elapsed time: 14.256130 seconds (0d 0h 0m 14s)

---------------  T H R E A D  ---------------

Current thread (0x000002927aa6e960):  VMThread ""VM Thread"" [stack: 0x000000bc06200000,0x000000bc06300000] [id=23788]

Stack: [0x000000bc06200000,0x000000bc06300000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc3ad41]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe8db97]  VMError::report+0x10e7  (vmError.cpp:838)
V  [jvm.dll+0xe8f72e]  VMError::report_and_die+0x65e  (vmError.cpp:1686)
V  [jvm.dll+0xe8fea4]  VMError::report_and_die+0x64  (vmError.cpp:1467)
V  [jvm.dll+0x583027]  report_vm_error+0xb7  (debug.cpp:284)
V  [jvm.dll+0x18eaf]  oopDesc::klass+0x9f  (oop.inline.hpp:86)
V  [jvm.dll+0x7eeaf6]  java_lang_Class::set_klass+0x76  (javaClasses.cpp:1472)
V  [jvm.dll+0x79eeff]  InstanceKlass::deallocate_contents+0x6f  (instanceKlass.cpp:585)
V  [jvm.dll+0x4e29d1]  ClassLoaderData::free_deallocate_list+0x381  (classLoaderData.cpp:854)
V  [jvm.dll+0x4e5e7d]  ClassLoaderDataGraph::clean_deallocate_lists+0x7d  (classLoaderDataGraph.cpp:164)
V  [jvm.dll+0xa0e165]  VM_RedefineClasses::doit+0x1f5  (jvmtiRedefineClasses.cpp:304)
V  [jvm.dll+0xe96f2d]  VM_Operation::evaluate+0xcd  (vmOperations.cpp:72)
V  [jvm.dll+0xe98b26]  VMThread::evaluate_operation+0xa6  (vmThread.cpp:283)
V  [jvm.dll+0xe992c6]  VMThread::inner_execute+0x256  (vmThread.cpp:432)
V  [jvm.dll+0xe99630]  VMThread::run+0x150  (vmThread.cpp:175)
V  [jvm.dll+0xe079b7]  Thread::call_run+0x257  (thread.cpp:229)
V  [jvm.dll+0xc39688]  thread_native_entry+0xb8  (os_windows.cpp:547)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]

VM_Operation (0x000000bc087ff040): RedefineClasses, mode: safepoint, requested by thread 0x000002921ce44f40, redefining class MyClass



---------------  P R O C E S S  ---------------

Threads class SMR info:
_java_thread_list=0x000002921bf25bf0, length=73, elements={
0x000002927844ff20, 0x000002927aa7dab0, 0x000002927b920f00, 0x000002927b9234a0,
0x000002927b924310, 0x000002927b925d40, 0x000002927b9278c0, 0x000002927b935980,
0x000002927b938f90, 0x000002927bb6cb30, 0x000002927bba1810, 0x000002921bba57e0,
0x000002921c291300, 0x000002921c7d69f0, 0x000002921caff4d0, 0x000002921caa32d0,
0x000002921cf330a0, 0x000002921cf33680, 0x000002921c7183b0, 0x000002921c718990,
0x000002921c403c50, 0x000002921c735050, 0x000002921c733810, 0x000002921c731fd0,
0x000002921c7325e0, 0x000002921c733e20, 0x000002921c732bf0, 0x000002921c734430,
0x000002921c733200, 0x000002921c7319c0, 0x000002921c734a40, 0x000002921ce3f450,
0x000002921ce3d600, 0x000002921ce412a0, 0x000002921ce44f40, 0x000002921ce43d10,
0x000002921ce418b0, 0x000002921ce43700, 0x000002921ce40680, 0x000002921ce3e830,
0x000002921ce44320, 0x000002921ce42ae0, 0x000002921ce3dc10, 0x000002921ce41ec0,
0x000002921ce424d0, 0x000002921ce40c90, 0x000002921ce430f0, 0x000002921ce44930,
0x000002921ce3e220, 0x000002921ce3ee40, 0x000002921ce3fa60, 0x000002921ce40070,
0x000002921ce8ea20, 0x000002921ce8f030, 0x000002921ce8cbd0, 0x000002921ce8ad80,
0x000002921ce8bfb0, 0x000002921ce8fc50, 0x000002921ce8c5c0, 0x000002921ce8de00,
0x000002921ce8d1e0, 0x000002921ce8d7f0, 0x000002921ce8e410, 0x000002921ce8a160,
0x000002921ce91490, 0x000002921ce8f640, 0x000002921ce90260, 0x000002921ce8b390,
0x000002921ce8b9a0, 0x000002921ce90870, 0x000002921ce91aa0, 0x000002921ce8a770,
0x000002921ce90e80
}
_java_thread_list_alloc_cnt=78, _java_thread_list_free_cnt=76, _java_thread_list_max=73, _nested_thread_list_max=0
_tlh_cnt=2682, _tlh_times=1227, avg_tlh_time=0.46, _tlh_time_max=17
_deleted_thread_cnt=2, _deleted_thread_times=0, avg_deleted_thread_time=0.00, _deleted_thread_time_max=0
_delete_lock_wait_cnt=0, _delete_lock_wait_max=0
_to_delete_list_cnt=0, _to_delete_list_max=2

Java Threads: ( => current thread )
  0x000002927844ff20 JavaThread ""main"" [_thread_blocked, id=21100, stack(0x000000bc06000000,0x000000bc06100000)]
  0x000002927aa7dab0 JavaThread ""Reference Handler"" daemon [_thread_blocked, id=58312, stack(0x000000bc06300000,0x000000bc06400000)]
  0x000002927b920f00 JavaThread ""Finalizer"" daemon [_thread_blocked, id=26504, stack(0x000000bc06400000,0x000000bc06500000)]
  0x000002927b9234a0 JavaThread ""Signal Dispatcher"" daemon [_thread_blocked, id=51492, stack(0x000000bc06500000,0x000000bc06600000)]
  0x000002927b924310 JavaThread ""Attach Listener"" daemon [_thread_blocked, id=14644, stack(0x000000bc06600000,0x000000bc06700000)]
  0x000002927b925d40 JavaThread ""Service Thread"" daemon [_thread_blocked, id=25256, stack(0x000000bc06700000,0x000000bc06800000)]
  0x000002927b9278c0 JavaThread ""Monitor Deflation Thread"" daemon [_thread_blocked, id=34844, stack(0x000000bc06800000,0x000000bc06900000)]
  0x000002927b935980 JavaThread ""C2 CompilerThread0"" daemon [_thread_blocked, id=15720, stack(0x000000bc06900000,0x000000bc06a00000)]
  0x000002927b938f90 JavaThread ""C1 CompilerThread0"" daemon [_thread_blocked, id=25832, stack(0x000000bc06a00000,0x000000bc06b00000)]
  0x000002927bb6cb30 JavaThread ""Notification Thread"" daemon [_thread_blocked, id=36708, stack(0x000000bc06b00000,0x000000bc06c00000)]
  0x000002927bba1810 JavaThread ""Common-Cleaner"" daemon [_thread_blocked, id=32720, stack(0x000000bc06d00000,0x000000bc06e00000)]
  0x000002921bba57e0 JavaThread ""C2 CompilerThread1"" daemon [_thread_blocked, id=31772, stack(0x000000bc07000000,0x000000bc07100000)]
  0x000002921c291300 JavaThread ""C2 CompilerThread2"" daemon [_thread_blocked, id=37780, stack(0x000000bc07100000,0x000000bc07200000)]
  0x000002921c7d69f0 JavaThread ""Thread-0"" [_thread_blocked, id=43688, stack(0x000000bc07200000,0x000000bc07300000)]
  0x000002921caff4d0 JavaThread ""Thread-1"" [_thread_blocked, id=7748, stack(0x000000bc07300000,0x000000bc07400000)]
  0x000002921caa32d0 JavaThread ""Thread-2"" [_thread_blocked, id=50660, stack(0x000000bc07400000,0x000000bc07500000)]
  0x000002921cf330a0 JavaThread ""Thread-3"" [_thread_blocked, id=20604, stack(0x000000bc07500000,0x000000bc07600000)]
  0x000002921cf33680 JavaThread ""Thread-4"" [_thread_blocked, id=12628, stack(0x000000bc07600000,0x000000bc07700000)]
  0x000002921c7183b0 JavaThread ""Thread-5"" [_thread_blocked, id=10332, stack(0x000000bc07700000,0x000000bc07800000)]
  0x000002921c718990 JavaThread ""Thread-6"" [_thread_blocked, id=21580, stack(0x000000bc07800000,0x000000bc07900000)]
  0x000002921c403c50 JavaThread ""Thread-7"" [_thread_blocked, id=48600, stack(0x000000bc07900000,0x000000bc07a00000)]
  0x000002921c735050 JavaThread ""Thread-8"" [_thread_blocked, id=57392, stack(0x000000bc07a00000,0x000000bc07b00000)]
  0x000002921c733810 JavaThread ""Thread-9"" [_thread_blocked, id=17356, stack(0x000000bc07b00000,0x000000bc07c00000)]
  0x000002921c731fd0 JavaThread ""Thread-10"" [_thread_blocked, id=47704, stack(0x000000bc07c00000,0x000000bc07d00000)]
  0x000002921c7325e0 JavaThread ""Thread-11"" [_thread_blocked, id=42748, stack(0x000000bc07d00000,0x000000bc07e00000)]
  0x000002921c733e20 JavaThread ""Thread-12"" [_thread_blocked, id=35352, stack(0x000000bc07e00000,0x000000bc07f00000)]
  0x000002921c732bf0 JavaThread ""Thread-13"" [_thread_blocked, id=8432, stack(0x000000bc07f00000,0x000000bc08000000)]
  0x000002921c734430 JavaThread ""Thread-14"" [_thread_blocked, id=15460, stack(0x000000bc08000000,0x000000bc08100000)]
  0x000002921c733200 JavaThread ""Thread-15"" [_thread_blocked, id=53332, stack(0x000000bc08100000,0x000000bc08200000)]
  0x000002921c7319c0 JavaThread ""Thread-16"" [_thread_blocked, id=25608, stack(0x000000bc08200000,0x000000bc08300000)]
  0x000002921c734a40 JavaThread ""Thread-17"" [_thread_blocked, id=51356, stack(0x000000bc08300000,0x000000bc08400000)]
  0x000002921ce3f450 JavaThread ""Thread-18"" [_thread_blocked, id=3692, stack(0x000000bc08400000,0x000000bc08500000)]
  0x000002921ce3d600 JavaThread ""Thread-19"" [_thread_blocked, id=21380, stack(0x000000bc08500000,0x000000bc08600000)]
  0x000002921ce412a0 JavaThread ""Thread-20"" [_thread_blocked, id=35300, stack(0x000000bc08600000,0x000000bc08700000)]
  0x000002921ce44f40 JavaThread ""Thread-21"" [_thread_blocked, id=30564, stack(0x000000bc08700000,0x000000bc08800000)]
  0x000002921ce43d10 JavaThread ""Thread-22"" [_thread_blocked, id=21060, stack(0x000000bc08800000,0x000000bc08900000)]
  0x000002921ce418b0 JavaThread ""Thread-23"" [_thread_blocked, id=18556, stack(0x000000bc08900000,0x000000bc08a00000)]
  0x000002921ce43700 JavaThread ""Thread-24"" [_thread_blocked, id=34800, stack(0x000000bc08a00000,0x000000bc08b00000)]
  0x000002921ce40680 JavaThread ""Thread-25"" [_thread_blocked, id=48240, stack(0x000000bc08b00000,0x000000bc08c00000)]
  0x000002921ce3e830 JavaThread ""Thread-26"" [_thread_blocked, id=47312, stack(0x000000bc08c00000,0x000000bc08d00000)]
  0x000002921ce44320 JavaThread ""Thread-27"" [_thread_blocked, id=50956, stack(0x000000bc08d00000,0x000000bc08e00000)]
  0x000002921ce42ae0 JavaThread ""Thread-28"" [_thread_blocked, id=18484, stack(0x000000bc08e00000,0x000000bc08f00000)]
  0x000002921ce3dc10 JavaThread ""Thread-29"" [_thread_blocked, id=34568, stack(0x000000bc08f00000,0x000000bc09000000)]
  0x000002921ce41ec0 JavaThread ""Thread-30"" [_thread_blocked, id=36576, stack(0x000000bc09000000,0x000000bc09100000)]
  0x000002921ce424d0 JavaThread ""Thread-31"" [_thread_blocked, id=19404, stack(0x000000bc09100000,0x000000bc09200000)]
  0x000002921ce40c90 JavaThread ""Thread-32"" [_thread_blocked, id=28276, stack(0x000000bc09200000,0x000000bc09300000)]
  0x000002921ce430f0 JavaThread ""Thread-33"" [_thread_blocked, id=20636, stack(0x000000bc09300000,0x000000bc09400000)]
  0x000002921ce44930 JavaThread ""Thread-34"" [_thread_blocked, id=22132, stack(0x000000bc09400000,0x000000bc09500000)]
  0x000002921ce3e220 JavaThread ""Thread-35"" [_thread_blocked, id=9884, stack(0x000000bc09500000,0x000000bc09600000)]
  0x000002921ce3ee40 JavaThread ""Thread-36"" [_thread_blocked, id=10132, stack(0x000000bc09f00000,0x000000bc0a000000)]
  0x000002921ce3fa60 JavaThread ""Thread-37"" [_thread_blocked, id=58224, stack(0x000000bc0a000000,0x000000bc0a100000)]
  0x000002921ce40070 JavaThread ""Thread-38"" [_thread_blocked, id=13140, stack(0x000000bc0a100000,0x000000bc0a200000)]
  0x000002921ce8ea20 JavaThread ""Thread-39"" [_thread_blocked, id=57368, stack(0x000000bc0a200000,0x000000bc0a300000)]
  0x000002921ce8f030 JavaThread ""Thread-40"" [_thread_blocked, id=24464, stack(0x000000bc0a300000,0x000000bc0a400000)]
  0x000002921ce8cbd0 JavaThread ""Thread-41"" [_thread_blocked, id=35392, stack(0x000000bc0a400000,0x000000bc0a500000)]
  0x000002921ce8ad80 JavaThread ""Thread-42"" [_thread_blocked, id=30728, stack(0x000000bc0a500000,0x000000bc0a600000)]
  0x000002921ce8bfb0 JavaThread ""Thread-43"" [_thread_blocked, id=32604, stack(0x000000bc0a600000,0x000000bc0a700000)]
  0x000002921ce8fc50 JavaThread ""Thread-44"" [_thread_blocked, id=27280, stack(0x000000bc0a700000,0x000000bc0a800000)]
  0x000002921ce8c5c0 JavaThread ""Thread-45"" [_thread_blocked, id=47656, stack(0x000000bc0a800000,0x000000bc0a900000)]
  0x000002921ce8de00 JavaThread ""Thread-46"" [_thread_blocked, id=16436, stack(0x000000bc0a900000,0x000000bc0aa00000)]
  0x000002921ce8d1e0 JavaThread ""Thread-47"" [_thread_blocked, id=32940, stack(0x000000bc0aa00000,0x000000bc0ab00000)]
  0x000002921ce8d7f0 JavaThread ""Thread-48"" [_thread_blocked, id=12096, stack(0x000000bc0ab00000,0x000000bc0ac00000)]
  0x000002921ce8e410 JavaThread ""Thread-49"" [_thread_blocked, id=40720, stack(0x000000bc0ac00000,0x000000bc0ad00000)]
  0x000002921ce8a160 JavaThread ""Thread-50"" [_thread_blocked, id=13512, stack(0x000000bc0ad00000,0x000000bc0ae00000)]
  0x000002921ce91490 JavaThread ""Thread-51"" [_thread_blocked, id=50144, stack(0x000000bc0ae00000,0x000000bc0af00000)]
  0x000002921ce8f640 JavaThread ""Thread-52"" [_thread_blocked, id=42784, stack(0x000000bc0af00000,0x000000bc0b000000)]
  0x000002921ce90260 JavaThread ""Thread-53"" [_thread_blocked, id=19292, stack(0x000000bc0b000000,0x000000bc0b100000)]
  0x000002921ce8b390 JavaThread ""Thread-54"" [_thread_blocked, id=14160, stack(0x000000bc0b100000,0x000000bc0b200000)]
  0x000002921ce8b9a0 JavaThread ""Thread-55"" [_thread_blocked, id=38204, stack(0x000000bc0b200000,0x000000bc0b300000)]
  0x000002921ce90870 JavaThread ""Thread-56"" [_thread_blocked, id=27736, stack(0x000000bc0b300000,0x000000bc0b400000)]
  0x000002921ce91aa0 JavaThread ""Thread-57"" [_thread_blocked, id=10424, stack(0x000000bc0b400000,0x000000bc0b500000)]
  0x000002921ce8a770 JavaThread ""Thread-58"" [_thread_blocked, id=2184, stack(0x000000bc0b500000,0x000000bc0b600000)]
  0x000002921ce90e80 JavaThread ""Thread-59"" [_thread_blocked, id=22508, stack(0x000000bc0b600000,0x000000bc0b700000)]

Other Threads:
=>0x000002927aa6e960 VMThread ""VM Thread"" [stack: 0x000000bc06200000,0x000000bc06300000] [id=23788]
  0x000002927bb7fef0 WatcherThread ""VM Periodic Task Thread"" [stack: 0x000000bc06c00000,0x000000bc06d00000] [id=8916]
  0x0000029278471890 WorkerThread ""GC Thread#0"" [stack: 0x000000bc06100000,0x000000bc06200000] [id=27700]
  0x000002921ceb0b60 WorkerThread ""GC Thread#1"" [stack: 0x000000bc09600000,0x000000bc09700000] [id=48256]
  0x000002921cea2b10 WorkerThread ""GC Thread#2"" [stack: 0x000000bc09700000,0x000000bc09800000] [id=9788]
  0x000002921c735980 WorkerThread ""GC Thread#3"" [stack: 0x000000bc09800000,0x000000bc09900000] [id=9468]
  0x000002921cbdf060 WorkerThread ""GC Thread#4"" [stack: 0x000000bc09900000,0x000000bc09a00000] [id=52536]
  0x000002921cbdf380 WorkerThread ""GC Thread#5"" [stack: 0x000000bc09a00000,0x000000bc09b00000] [id=56164]
  0x000002921c105b80 WorkerThread ""GC Thread#6"" [stack: 0x000000bc09b00000,0x000000bc09c00000] [id=55336]
  0x000002921c1062b0 WorkerThread ""GC Thread#7"" [stack: 0x000000bc09c00000,0x000000bc09d00000] [id=44164]
  0x000002921c1069d0 WorkerThread ""GC Thread#8"" [stack: 0x000000bc09d00000,0x000000bc09e00000] [id=28296]
  0x000002921c106cf0 WorkerThread ""GC Thread#9"" [stack: 0x000000bc09e00000,0x000000bc09f00000] [id=11832]

Threads with active compile tasks:
C2 CompilerThread0    14433 1574       4       jdk.internal.math.DoubleToDecimal::append8Digits (42 bytes)
C2 CompilerThread1    14433 2247       4       java.lang.invoke.LambdaForm$MH/0x00000008011da800::invoke (86 bytes)
C2 CompilerThread2    14433 1650       4       java.lang.Integer::formatUnsignedInt (40 bytes)

VM state: at safepoint (normal execution)

VM Mutex/Monitor currently owned by a thread:  ([mutex/lock_event])
[0x0000029278446a70] Threads_lock - owner thread: 0x000002927aa6e960

Heap address: 0x00000000c0000000, size: 1024 MB, Compressed Oops mode: 32-bit

CDS archive(s) mapped at: [0x0000000800000000-0x0000000800ce0000-0x0000000800ce0000), size 13500416, SharedBaseAddress: 0x0000000800000000, ArchiveRelocationMode: 0.
Compressed class space mapped at: 0x0000000801000000-0x0000000841000000, reserved size: 1073741824
Narrow klass base: 0x0000000800000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
 . . . . . . . . . . . . . . . .;;;","2022-10-19 03:48;sspitsyn;One more hs_err log on Windows:

#
#  Internal Error (c:\sb\prod\1665797520\workspace\open\src\hotspot\share\oops/compressedOops.inline.hpp:135), pid=31072, tid=5952
#  assert(check_alignment(result)) failed: address not aligned: 0x0000000800000001
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-internal-2022-10-15-0130374.serguei.spitsyn.jdk20.1)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-internal-2022-10-15-0130374.serguei.spitsyn.jdk20.1, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, windows-amd64)
# Core dump will be written. Default location: C:\sb\prod\1666164744\testoutput\test-support\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti_RedefineClasses_StressRedefine\scratch\0\hs_err_pid31072.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=c:\sb\prod\1666164744\testoutput\test-support\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti_RedefineClasses_StressRedefine\tmp -XX:+CreateCoredumpOnCrash -XX:+UseParallelGC -XX:+UseNUMA -Djava.library.path=c:\ade\mesos\work_dir\jib-master\install\2022-10-15-0130374.serguei.spitsyn.jdk20.1\windows-x64-debug.test\hotspot\jtreg\native -agentlib:stressRedefine nsk.jvmti.RedefineClasses.StressRedefine ./bin

Host: win2016-x64-280751, AMD EPYC 7J13 64-Core Processor                , 12 cores, 23G,  Windows Server 2016 , 64 bit Build 14393 (10.0.14393.3630)
Time: Wed Oct 19 08:34:38 2022 /GM elapsed time: 11.616775 seconds (0d 0h 0m 11s)

---------------  T H R E A D  ---------------

Current thread (0x000002756738e220):  VMThread ""VM Thread"" [stack: 0x000000f06d900000,0x000000f06da00000] [id=5952]

Stack: [0x000000f06d900000,0x000000f06da00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc3ad41]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe8db97]  VMError::report+0x10e7  (vmError.cpp:838)
V  [jvm.dll+0xe8f72e]  VMError::report_and_die+0x65e  (vmError.cpp:1686)
V  [jvm.dll+0xe8fea4]  VMError::report_and_die+0x64  (vmError.cpp:1467)
V  [jvm.dll+0x583027]  report_vm_error+0xb7  (debug.cpp:284)
V  [jvm.dll+0x18eaf]  oopDesc::klass+0x9f  (oop.inline.hpp:86)
V  [jvm.dll+0x7eeaf6]  java_lang_Class::set_klass+0x76  (javaClasses.cpp:1472)
V  [jvm.dll+0x79eeff]  InstanceKlass::deallocate_contents+0x6f  (instanceKlass.cpp:585)
V  [jvm.dll+0x4e29d1]  ClassLoaderData::free_deallocate_list+0x381  (classLoaderData.cpp:854)
V  [jvm.dll+0x4e5e7d]  ClassLoaderDataGraph::clean_deallocate_lists+0x7d  (classLoaderDataGraph.cpp:164)
V  [jvm.dll+0xa0e165]  VM_RedefineClasses::doit+0x1f5  (jvmtiRedefineClasses.cpp:304)
V  [jvm.dll+0xe96f2d]  VM_Operation::evaluate+0xcd  (vmOperations.cpp:72)
V  [jvm.dll+0xe98b26]  VMThread::evaluate_operation+0xa6  (vmThread.cpp:283)
V  [jvm.dll+0xe992c6]  VMThread::inner_execute+0x256  (vmThread.cpp:432)
V  [jvm.dll+0xe99630]  VMThread::run+0x150  (vmThread.cpp:175)
V  [jvm.dll+0xe079b7]  Thread::call_run+0x257  (thread.cpp:229)
V  [jvm.dll+0xc39688]  thread_native_entry+0xb8  (os_windows.cpp:547)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]

VM_Operation (0x000000f070cfef00): RedefineClasses, mode: safepoint, requested by thread 0x000002756f427ec0, redefining class MyClass
;;;","2022-10-19 04:05;sspitsyn;I've checked if this issue can be a dup of JDK-8293584.
My observation is that it is not a dup but it is somehow related.
Please, see the following comment with the temporary fix and hs_err dumps.;;;","2022-10-19 10:46;sspitsyn;I've applied the following fix to check if this bug is a dup of JDK-8293584:

diff --git a/src/hotspot/share/code/codeCache.cpp b/src/hotspot/share/code/codeCache.cpp
index 40bc3bf602a..d883af9a9e4 100644
--- a/src/hotspot/share/code/codeCache.cpp
+++ b/src/hotspot/share/code/codeCache.cpp
@@ -1308,9 +1308,7 @@ void CodeCache::old_nmethods_do(MetadataClosure* f) {
     for (int i = 0; i < length; i++) {
       CompiledMethod* cm = old_compiled_method_table->at(i);
       // Only walk !is_unloading nmethods, the other ones will get removed by the GC.
-      if (!cm->is_unloading()) {
-        old_compiled_method_table->at(i)->metadata_do(f);
-      }
+      old_compiled_method_table->at(i)->metadata_do(f);
     }
   }
   log_debug(redefine, class, nmethod)(""Walked %d nmethods for mark_on_stack"", length);

The results is that the original assert is still reproducible.
But two new assert kind of crash modes were discovered (see below).

============================================================
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\sb\prod\1666178691\workspace\open\src\hotspot\share\classfile\javaClasses.cpp:1474), pid=57604, tid=17392
#  assert(is_instance(java_class)) failed: must be a Class object
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-internal-2022-10-19-1112210.serguei.spitsyn.jdk20)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-internal-2022-10-19-1112210.serguei.spitsyn.jdk20, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, windows-amd64)
# Core dump will be written. Default location: C:\sb\prod\1666188271\testoutput\test-support\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti_RedefineClasses_StressRedefine\scratch\0\hs_err_pid57604.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=c:\sb\prod\1666188271\testoutput\test-support\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti_RedefineClasses_StressRedefine\tmp -XX:+CreateCoredumpOnCrash -XX:+UseParallelGC -XX:+UseNUMA -Djava.library.path=c:\ade\mesos\work_dir\jib-master\install\2022-10-19-1112210.serguei.spitsyn.jdk20\windows-x64-debug.test\hotspot\jtreg\native -agentlib:stressRedefine nsk.jvmti.RedefineClasses.StressRedefine ./bin

Host: win2016-x64-401196, AMD EPYC 7J13 64-Core Processor                , 12 cores, 23G,  Windows Server 2016 , 64 bit Build 14393 (10.0.14393.3630)
Time: Wed Oct 19 15:05:21 2022 /GM elapsed time: 11.400167 seconds (0d 0h 0m 11s)

---------------  T H R E A D  ---------------

Current thread (0x000001992ddfea30):  VMThread ""VM Thread"" [stack: 0x00000040d7300000,0x00000040d7400000] [id=17392]

Stack: [0x00000040d7300000,0x00000040d7400000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc090e1]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe6b99e]  VMError::report+0x10be  (vmError.cpp:841)
V  [jvm.dll+0xe6d494]  VMError::report_and_die+0x644  (vmError.cpp:1700)
V  [jvm.dll+0xe6dbd4]  VMError::report_and_die+0x64  (vmError.cpp:1481)
V  [jvm.dll+0x57c5a7]  report_vm_error+0xb7  (debug.cpp:285)
V  [jvm.dll+0x7e77aa]  java_lang_Class::set_klass+0xba  (javaClasses.cpp:1474)
V  [jvm.dll+0x797cdf]  InstanceKlass::deallocate_contents+0x6f  (instanceKlass.cpp:584)
V  [jvm.dll+0x4dbc01]  ClassLoaderData::free_deallocate_list+0x381  (classLoaderData.cpp:860)
V  [jvm.dll+0x4df0dd]  ClassLoaderDataGraph::clean_deallocate_lists+0x7d  (classLoaderDataGraph.cpp:173)
V  [jvm.dll+0xa08705]  VM_RedefineClasses::doit+0x1f5  (jvmtiRedefineClasses.cpp:304)
V  [jvm.dll+0xe74d08]  VM_Operation::evaluate+0xc8  (vmOperations.cpp:72)
V  [jvm.dll+0xe768ec]  VMThread::evaluate_operation+0x9c  (vmThread.cpp:282)
V  [jvm.dll+0xe77026]  VMThread::inner_execute+0x256  (vmThread.cpp:431)
V  [jvm.dll+0xe77390]  VMThread::run+0x150  (vmThread.cpp:175)
V  [jvm.dll+0xde65f7]  Thread::call_run+0x257  (thread.cpp:229)
V  [jvm.dll+0xc079f8]  thread_native_entry+0xb8  (os_windows.cpp:547)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]

VM_Operation (0x00000040db2ff220): RedefineClasses, mode: safepoint, requested by thread 0x000001994f8d78a0, redefining class MyClass

==============================================================

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\sb\prod\1666178691\workspace\open\src\hotspot\share\gc/parallel/psClosure.inline.hpp:94), pid=19092, tid=8140
#  assert(PSScavenge::should_scavenge(p, true)) failed: revisiting object?
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-internal-2022-10-19-1112210.serguei.spitsyn.jdk20)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-internal-2022-10-19-1112210.serguei.spitsyn.jdk20, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, windows-amd64)
# Core dump will be written. Default location: C:\sb\prod\1666187694\testoutput\test-support\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti_RedefineClasses_StressRedefine\scratch\0\hs_err_pid19092.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=c:\sb\prod\1666187694\testoutput\test-support\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti_RedefineClasses_StressRedefine\tmp -XX:+CreateCoredumpOnCrash -XX:+UseParallelGC -XX:+UseNUMA -Djava.library.path=c:\ade\mesos\work_dir\jib-master\install\2022-10-19-1112210.serguei.spitsyn.jdk20\windows-x64-debug.test\hotspot\jtreg\native -agentlib:stressRedefine nsk.jvmti.RedefineClasses.StressRedefine ./bin

Host: win2016-x64-970318, AMD EPYC 7J13 64-Core Processor                , 12 cores, 23G,  Windows Server 2016 , 64 bit Build 14393 (10.0.14393.3630)
Time: Wed Oct 19 14:55:52 2022 /GM elapsed time: 17.756780 seconds (0d 0h 0m 17s)

---------------  T H R E A D  ---------------

Current thread (0x000001ce179f2e10):  WorkerThread ""GC Thread#4"" [stack: 0x0000003c1c300000,0x0000003c1c400000] [id=8140]

Stack: [0x0000003c1c300000,0x0000003c1c400000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc090e1]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe6b99e]  VMError::report+0x10be  (vmError.cpp:841)
V  [jvm.dll+0xe6d494]  VMError::report_and_die+0x644  (vmError.cpp:1700)
V  [jvm.dll+0xe6dbd4]  VMError::report_and_die+0x64  (vmError.cpp:1481)
V  [jvm.dll+0x57c5a7]  report_vm_error+0xb7  (debug.cpp:285)
V  [jvm.dll+0xc8010c]  PSScavengeFromCLDClosure::do_oop+0x1cc  (psClosure.inline.hpp:94)
V  [jvm.dll+0x4dd1ec]  ClassLoaderData::ChunkedHandleList::oops_do_chunk+0x4c  (classLoaderData.cpp:213)
V  [jvm.dll+0x4dd08c]  ClassLoaderData::ChunkedHandleList::oops_do+0x3c  (classLoaderData.cpp:225)
V  [jvm.dll+0xc7f98a]  PSScavengeCLDClosure::do_cld+0x6a  (psClosure.inline.hpp:136)
V  [jvm.dll+0x4df04b]  ClassLoaderDataGraph::cld_do+0x3b  (classLoaderDataGraph.cpp:278)
V  [jvm.dll+0xc827ae]  ScavengeRootsTask::work+0x23e  (psScavenge.cpp:330)
V  [jvm.dll+0xeae7b7]  WorkerThread::run+0x97  (workerThread.cpp:164)
V  [jvm.dll+0xde65f7]  Thread::call_run+0x257  (thread.cpp:229)
V  [jvm.dll+0xc079f8]  thread_native_entry+0xb8  (os_windows.cpp:547)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]
;;;","2022-10-20 18:31;coleenp;The odd thing is that all these failures are UseParallelGC and so is JDK-8294744.  JDK-8294744 has redefinition but it fails in InterpreterRuntime::exception_handler_for_exception on linux-aarch64-debug.;;;","2022-10-21 19:24;sspitsyn;I'll check if the problems are still reproducible without UseParallelGC.
Also, I'm not sure the use of -XX:+UseNUMA is necessary for reproducibility.;;;","2022-10-25 12:35;coleenp;> It looks like this test is not healthy and allows JVMTI RedefineClasses to silently fail.

This StressRedefine test case randomly flips bits in the new classfiles so that it is supposed to give errors during the redefinition.  It's on purpose.;;;","2022-10-25 21:53;sspitsyn;Yes. I've already figured it out.
It generates bad bytecodes with the probability 75%.
This issue is not reproducible without the option -XX:+UseParallelGC.
The option -XX:+UseNUMA is not really needed to reproduce this issue.;;;","2022-10-26 21:57;sspitsyn;This issue is reproducible with the -XX:+UseParallelGC only.
I was not able to reproduce it in 1000 runs with:
  -XX:+UseSerialGC, -XX:+UseG1GC and -XX:+UseZGC.
With -XX:+UseParallelGC it is normally reproducible in 400 runs on windows-x64.;;;","2022-10-26 22:00;sspitsyn;Coleen, how important is the -XX:+UseParallelGC for us?
Should it be a priority?;;;","2022-10-27 05:38;coleenp;I can't imagine ParallelGC having changed to cause this but we should reassign this bug to GC to evaluate.  It could just be a timing thing but it's odd.;;;","2022-10-31 16:55;sspitsyn;Some details on one of the asserts:

The hs_err dump is:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\sb\prod\1666691125\workspace\open\src\hotspot\share\oops/compressedOops.inline.hpp:135), pid=128744, tid=11628
#  assert(check_alignment(result)) failed: address not aligned: 0x00000008deafbabe
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-internal-2022-10-25-0943383.serguei.spitsyn.jdk20)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-internal-2022-10-25-0943383.serguei.spitsyn.jdk20, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, windows-amd64)
# Core dump will be written. Default location: C:\sb\prod\1666692652\testoutput\test-support\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti_RedefineClasses_StressRedefine\scratch\0\hs_err_pid128744.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=c:\sb\prod\1666692652\testoutput\test-support\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti_RedefineClasses_StressRedefine\tmp -XX:+CreateCoredumpOnCrash -XX:+UseParallelGC -XX:+UseNUMA -Djava.library.path=c:\ade\mesos\work_dir\jib-master\install\2022-10-25-0943383.serguei.spitsyn.jdk20\windows-x64-debug.test\hotspot\jtreg\native -agentlib:stressRedefine nsk.jvmti.RedefineClasses.StressRedefine ./bin

Host: win2016-x64-683836, AMD EPYC 7J13 64-Core Processor                , 12 cores, 23G,  Windows Server 2016 , 64 bit Build 14393 (10.0.14393.3630)
Time: Tue Oct 25 11:11:44 2022 /GM elapsed time: 13.948147 seconds (0d 0h 0m 13s)

---------------  T H R E A D  ---------------

Current thread (0x0000022bbb62f390):  VMThread ""VM Thread"" [stack: 0x00000089ec800000,0x00000089ec900000] [id=11628]

Stack: [0x00000089ec800000,0x00000089ec900000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc084a1]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe6ccce]  VMError::report+0x10be  (vmError.cpp:841)
V  [jvm.dll+0xe6e7c4]  VMError::report_and_die+0x644  (vmError.cpp:1700)
V  [jvm.dll+0xe6ef04]  VMError::report_and_die+0x64  (vmError.cpp:1481)
V  [jvm.dll+0x57c8d7]  report_vm_error+0xb7  (debug.cpp:285)
V  [jvm.dll+0x18dcf]  oopDesc::klass+0x9f  (oop.inline.hpp:86)
V  [jvm.dll+0x7e78d6]  java_lang_Class::set_klass+0x76  (javaClasses.cpp:1416)
V  [jvm.dll+0x797dee]  InstanceKlass::deallocate_contents+0xae  (instanceKlass.cpp:609)
V  [jvm.dll+0x4dbafd]  ClassLoaderData::free_deallocate_list+0x3bd  (classLoaderData.cpp:861)
V  [jvm.dll+0x4df22f]  ClassLoaderDataGraph::clean_deallocate_lists+0x10f  (classLoaderDataGraph.cpp:180)
V  [jvm.dll+0xa08ae5]  VM_RedefineClasses::doit+0x1f5  (jvmtiRedefineClasses.cpp:304)
V  [jvm.dll+0xe76058]  VM_Operation::evaluate+0xc8  (vmOperations.cpp:72)
V  [jvm.dll+0xe77c3c]  VMThread::evaluate_operation+0x9c  (vmThread.cpp:282)
V  [jvm.dll+0xe78376]  VMThread::inner_execute+0x256  (vmThread.cpp:431)
V  [jvm.dll+0xe786e0]  VMThread::run+0x150  (vmThread.cpp:175)
V  [jvm.dll+0xde7077]  Thread::call_run+0x257  (thread.cpp:229)
V  [jvm.dll+0xc06db8]  thread_native_entry+0xb8  (os_windows.cpp:547)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]

VM_Operation (0x00000089eedfec80): RedefineClasses, mode: safepoint, requested by thread 0x0000022bc305f860, redefining class MyClass

The InstanceKlass being deallocated is the tested class MyClass.
These are the corresponding tracing lines:
DBG: CLDG::cld_do: thr: 0000022BC36A3F00 ld: 0000022BC2601AF0
. . . . . . . . .
DBG: CLD::free_deallocate_list: free_metadata thr: 0000022BBB62F390 ld: 0000022BC2601AF0 ik: 000000080115D000 name: MyClass
DBG: IK::deallocate_contents: thr: 0000022BBB62F390 ld: 0000022BC2601AF0 ik: 000000080115D000 name: MyClass

So, it seems the same class loader data ""ld: 0000022BC2601AF0"" is concurrently deallocated by ClassLoaderDataGraph::cld_do() and ClassLoaderData::free_deallocate_list().

The matching mach5 link of the test result with tracing is:
   https://mach5.us.oracle.com/mdash/jobs/sspitsyn-nsk-jvmti-StressRedefine-20221025-0945-37775426/results?search=status%3Afailed%20AND%20-state%3Ainvalid;;;","2022-11-03 11:58;coleenp;There might be a timing hole between failed class loading in redefinition and creating the mirror, assigning to myself. Edit. probably not.

cld_do() isn't deallocating the class because I don't think this class loader is ever unloaded, it should be walking the oops/mirrors in the classes and keeping them alive.

Yes, there are no classes that get unloaded with this test.;;;","2022-11-03 14:54;coleenp;I actually think there is something wrong with ParallelGC because of this and JDK-8294744 and there have been changes in parallel fairly recently.  I'll see if I can get anymore info out of these crashes before passing it back to gc/Unassigned.;;;","2022-11-23 05:25;tschatzl;Not sure about what ""there are no classes that get unloaded with this test"" means, but given JDK-8297499 classes might get unloaded forcibly ;) It might be worth rechecking with that fix in.;;;","2022-11-29 07:23;tschatzl;Just verification, still crashing with JDK-8297499 and JDK-8293584 resolved.;;;","2022-11-29 10:26;tschatzl;Running with -XX:+VerifyBeforeGC and -XX:+VerifyAfterGC, the VM fails during after-gc verification with the following error/stack trace:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (klass.cpp:791), pid=45952, tid=33520
#  guarantee(oopDesc::is_oop(java_mirror_no_keepalive())) failed: should be instance
#
[...]
Current thread (0x000002e3545fdbb0):  VMThread ""VM Thread"" [stack: 0x000000f62aa00000,0x000000f62ab00000] [id=26096]

Stack: [0x000000f62aa00000,0x000000f62ab00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x6ba2ca]  os::win32::platform_print_native_stack+0xca  (os_windows_x86.cpp:236)
V  [jvm.dll+0x84aeb9]  VMError::report+0xc19  (vmError.cpp:814)
V  [jvm.dll+0x84c92e]  VMError::report_and_die+0x5fe  (vmError.cpp:1572)
V  [jvm.dll+0x84cfd7]  VMError::report_and_die+0x47  (vmError.cpp:1353)
V  [jvm.dll+0x280d5a]  report_vm_error+0x8a  (debug.cpp:286)
V  [jvm.dll+0x59b01b]  Klass::verify_on+0x14b  (klass.cpp:791)
V  [jvm.dll+0x3ccf1a]  InstanceKlass::verify_on+0x2a  (instanceKlass.cpp:3738)
V  [jvm.dll+0x227210]  ClassLoaderData::verify+0xf0  (classLoaderData.cpp:1027)
V  [jvm.dll+0x2287c7]  ClassLoaderDataGraph::verify+0xa7  (classLoaderDataGraph.cpp:648)
V  [jvm.dll+0x814b15]  Universe::verify+0x2d5  (universe.cpp:1155)
V  [jvm.dll+0x6fa666]  PSScavenge::invoke_no_policy+0xe26  (psScavenge.cpp:664)
V  [jvm.dll+0x6f9784]  PSScavenge::invoke+0x34  (psScavenge.cpp:243)
V  [jvm.dll+0x6c5813]  ParallelScavengeHeap::failed_mem_allocate+0x33  (parallelScavengeHeap.cpp:470)

So it seems that we are missing some roots somewhere (as this is a young/scavenge gc which does not unload classes) in case of (probably) unsuccessful class redefinition.;;;","2022-11-29 14:07;coleenp;I've been running this and it only fails on Windows.  I got a new symptom of : 
#  assert(PSScavenge::should_scavenge(p, true)) failed: revisiting object?
Also walking the CLDG handle list.;;;","2022-11-29 15:44;coleenp;I added VerifyBeforeGC/VerifyAfterGC and My crash looks like yours.  It's a VerifyAfterGC where the mirror is broken.

V  [jvm.dll+0xc7d54f]  PSScavenge::invoke_no_policy+0x163f  (psScavenge.cpp:664)  <== VerifyAfterGC

V  [jvm.dll+0x185bf]  oopDesc::klass+0x9f  (oop.inline.hpp:86)
V  [jvm.dll+0xa20688]  Klass::verify_on+0x1b8  (klass.cpp:791)
V  [jvm.dll+0x7a19cb]  InstanceKlass::verify_on+0x4b  (instanceKlass.cpp:3738)
V  [jvm.dll+0x4d58f7]  ClassLoaderData::verify+0x1b7  (classLoaderData.cpp:1043)
V  [jvm.dll+0x4d7541]  ClassLoaderDataGraph::verify+0xc1  (classLoaderDataGraph.cpp:649)
V  [jvm.dll+0xe2c9b8]  Universe::verify+0x2d8  (universe.cpp:1155)
V  [jvm.dll+0xc7d54f]  PSScavenge::invoke_no_policy+0x163f  (psScavenge.cpp:664)
V  [jvm.dll+0xc7be57]  PSScavenge::invoke+0x187  (psScavenge.cpp:243)
V  [jvm.dll+0xc18246]  ParallelScavengeHeap::failed_mem_allocate+0x146  (parallelScavengeHeap.cpp:470)
V  [jvm.dll+0xc7e0ac]  VM_ParallelGCFailedAllocation::doit+0x4c  (psVMOperations.cpp:45)
V  [jvm.dll+0xe8cbe8]  VM_Operation::evaluate+0xc8  (vmOperations.cpp:72)

I changed Klass::verify_on() to have a more specific test so I got the deafbabe is unaligned crash.
  if (java_mirror_no_keepalive() != NULL) {
    guarantee(java_lang_Class::is_instance(java_mirror_no_keepalive()), ""should be instance"");
  }

I also added more verification to ClassLoaderData::verify() (verifying InstanceKlasses in deallocate lists, and an oops_do for the OopHandles).

This is assigned to GC so I'm going to take my name off because I can't do anything further.  I did verify that the deallocate lists are working like I think they should work.  When we create a class when parsing, we added it to the ClassLoaderData::_klasses list almost immediately.  When the mirror is created, it's added to the _handle list and to the Klass.  If that fails, it's null.  I don't see a possibility for partial initialization in this respect.

Windows debugging doesn't work for me otherwise, I'd love to know if the whole CLD klasses are bad and why it only happens on windows.;;;","2022-11-29 15:47;coleenp;There are more bad oops in CLDs with G1 also.  See linked bug.  These all seem related.;;;","2022-11-30 03:13;tschatzl;Fwiw, if there ever had been doubt, the broken mirror is from a ""MyClass"" klass that is being redefined (verified by some additional logging).;;;","2022-11-30 05:05;tschatzl;[~coleenp]: I did some tracking of the mirror of one of the klasses and would like to confirm whether what I'm seeing makes sense to you:

Every GC is represented by two gc,verify log lines in my changes, one for before-gc verification, one for after-gc verification. Every log line shows the klass address and the mirror address.

[10.751s][debug][gc,verify] GC(3) k: 0x0000000801166c00 MyClass mirror 0x0000000000000000
[10.856s][debug][gc,verify] GC(3) k: 0x0000000801166c00 MyClass mirror 0x0000000000000000

Redefinition VM Op happens here

[11.677s][debug][gc,verify] GC(4) k: 0x0000000801166c00 MyClass mirror 0x0000000000000000
[11.785s][debug][gc,verify] GC(4) k: 0x0000000801166c00 MyClass mirror 0x0000000000000000
[12.443s][debug][gc,verify] GC(5) k: 0x0000000801166c00 MyClass mirror 0x0000000000000000
[12.547s][debug][gc,verify] GC(5) k: 0x0000000801166c00 MyClass mirror 0x0000000000000000
[13.194s][debug][gc,verify] GC(6) k: 0x0000000801166c00 MyClass mirror 0x0000000000000000
[13.323s][debug][gc,verify] GC(6) k: 0x0000000801166c00 MyClass mirror 0x0000000000000000
[13.964s][debug][gc,verify] GC(7) k: 0x0000000801166c00 MyClass mirror 0x0000000000000000
[14.140s][debug][gc,verify] GC(7) k: 0x0000000801166c00 MyClass mirror 0x0000000000000000

[... mutator poking mirror...]

[14.846s][debug][gc,verify] GC(8) k: 0x0000000801166c00 MyClass mirror 0x00000000c00122d0   (old gen)
[14.991s][debug][gc,verify] GC(8) k: 0x0000000801166c00 MyClass mirror 0x00000000c00122d0   (old gen)
[15.636s][debug][gc,verify] GC(9) k: 0x0000000801166c00 MyClass mirror 0x00000000c00122d0   (old gen)
[15.777s][debug][gc,verify] GC(9) k: 0x0000000801166c00 MyClass mirror 0x00000000c00122d0   (old gen)

[... mutator poking mirror again...]

[16.721s][debug][gc,verify] GC(10) k: 0x0000000801166c00 MyClass mirror 0x00000000f52b8098  (to-space??)
[16.906s][debug][gc,verify] GC(10) k: 0x0000000801166c00 MyClass mirror 0x00000000f52b8098  (from-space??)

So it looks like some mutator code (class redefinition) sets the mirror twice for this klass. Since there is no klass unloading going on due to zero full gcs, I believe that this is always the same klass that is being updated.

Can you confirm that what I'm seeing with logging is reasonable from an execution order and steps taken during class redefinition (in some case)?

Note that in GC(10), what is poked by the mutator in is an invalid, outdated pointer in to-space(!). Existing verification (for performance reasons) only checks whether a reference is in committed areas. From the hs_err file I can't see a reason for to-space being occupied (that would immediately trigger a full gc which never happens).

So actually, this is a before-gc verification error, making this smell like a naked oop in jvmti/class redefintion. Can you check again - this is really a code area out of my expertise and probably you could find that much quicker.;;;","2022-11-30 05:27;coleenp;It's trying to redefine MyClass over and over with various broken classfiles.  It is the same class that is being updated.  I'm confused why is the mirror zero though?  Actually this is a good clue.  We poke the scratch class mirror into the real class to run the verifier (class file verifier).  I'll look at that code.;;;","2022-11-30 05:28;coleenp;This same failure happens with JDK 19.  Edit: I see it was logged against JDK 19.  I was trying to see if it was a regression in JDK 20 (so, not a regression).;;;","2022-11-30 17:53;coleenp;For class file verification, RedefineClasses replaces the mirror in the scratch class with the mirror in the class we are redefining because of some issue with verification.
This code should copy the OopHandle, and not replace the oop that the OopHandle points to.  It seems like when we do this GC misses the oop (even though we save it in a Handle).
This was broken in JDK 16 with JDK-8249822.;;;","2022-12-01 06:39;coleenp;I know why this failed.  The oop that we replace in the OopHandle is in a Handle so should be safe, but the ClassLoaderData has an optimization that sets modified_oops to avoid CLDG walking and the replace for RedefineClases doesn't set that.;;;","2022-12-01 07:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11444
Date: 2022-12-01 02:01:54 +0000;;;","2022-12-02 11:10;dukebot;Changeset: fb6fd032
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-12-02 19:09:05 +0000
URL:       https://git.openjdk.org/jdk/commit/fb6fd03233b0eb001e2995d20a079b6af31d2b9b
;;;","2023-06-20 09:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1478
Date: 2023-06-20 15:52:53 +0000;;;","2023-06-20 09:04;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.9-oracle. Applies cleanly. The related issues don't seem to be caused by this change and are not backported atm.;;;","2023-07-03 05:02;lucy;Fix request [11u] 

I backport this for parity with 11.0.21-oracle. The change does not at all apply cleanly. See PR for details.

SAP nightly tests did not reveal any issue related to this PR.
;;;","2023-07-03 08:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2019
Date: 2023-07-03 15:41:39 +0000;;;"
java/time/nontestng/java/time/zone/CustomZoneNameTest.java fails if defaultLocale and defaultFormatLocale are different,JDK-8291825,5080929,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2022-08-03 06:51,2023-02-02 12:10,2023-10-01 09:56,2022-08-04 00:07,20,,,,,,20,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,ursqe-triaged,,,,,,,,,,,,,,"spotted on my dev (Windows) machine; the test fails with:

testFormatting. Pattern: yyyy-MM-dd HH:mm:ss.SSS v, expected: 2019-12-06 22:06:12.372 Custom Time, formatted: 2019-12-06 22:06:12.372 Custom/Timezone

CustomTimeZoneNameProvider#getAvailableLocales uses Locale.getDefault() which returns en_US. DateTimeFormatterBuilder#toFormatter uses Locale.getDefault(Locale.Category.FORMAT) which returns pl_PL.",,,,,,,,,,JDK-8301707,JDK-8299471,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y5c3:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2022-08-03 07:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9729
Date: 2022-08-03 13:55:04 +0000;;;","2022-08-04 00:05;dukebot;Changeset: 4772354f
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-08-04 06:57:35 +0000
URL:       https://git.openjdk.org/jdk/commit/4772354f4caf5eb314eda81217e5bc48a62d485b
;;;","2023-01-31 07:41;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Mentioned test passes. SAP nighlty testing passed.;;;","2023-01-31 07:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1135
Date: 2023-01-31 15:47:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"IGV: Fix ""Save selected groups""",JDK-8291823,5080926,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,tholenstein,tholenstein,2022-08-03 06:21,2022-09-20 22:58,2023-10-01 09:56,2022-08-05 00:10,20,,,,,,20,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,"In IGV the button ""Save selected groups to XML file..."" is broken and never activated. Make it work again",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289503,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y5bf:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-08-03 07:06;thartmann;ILW = Selective save is broken in IGV, never worked, no workaround = MLH = P4;;;","2022-08-04 00:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9730
Date: 2022-08-03 15:31:51 +0000;;;","2022-08-05 00:10;dukebot;Changeset: b0d69528
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2022-08-05 07:04:37 +0000
URL:       https://git.openjdk.org/jdk/commit/b0d6952811c2b29115b69427fe148ee6bce41710
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ARM32: Build errors with GCC 11 in frame::saved_oop_result,JDK-8291822,5080924,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,marchof,marchof,marchof,2022-08-03 05:44,2022-08-08 23:39,2023-10-01 09:56,2022-08-03 09:43,19,20,,,,,20,hotspot,,0,jacoco-found,noreg-build,,,,,,,,,,,,,,,,"When building for Arm32 with GCC 11 (as shipped with latest Ubuntu versions) there are plenty compiler warnings like:

Creating support/modules_libs/java.base/server/libjvm.so from 926 file(s)
In file included from /workspace/src/hotspot/share/runtime/frame.inline.hpp:45,
                 from /workspace/src/hotspot/cpu/arm/abstractInterpreter_arm.cpp:34:
/workspace/src/hotspot/cpu/arm/frame_arm.inline.hpp: In member function 'oopDesc* frame::saved_oop_result(RegisterMap*) const':
/workspace/src/hotspot/cpu/arm/frame_arm.inline.hpp:200:54: warning: 'this' pointer is null [-Wnonnull]
  200 |   oop* result_adr = (oop*) map->location(R0->as_VMReg(), nullptr);
 
These warnings have already been ignored for other platforms in JDK-8270083 and JDK-8271869.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270083,JDK-8271869,,,,,,,,,,,,,,,,,,arm,,,,,,,,,linux,,,,,"0|i2y5az:",9223372036854775807,b09,,,,,,,,,,,"2022-08-03 05:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9727
Date: 2022-08-03 12:49:01 +0000;;;","2022-08-03 09:42;dukebot;Changeset: 4d6e6f67
Author:    Marc R. Hoffmann <marchof@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2022-08-03 16:40:03 +0000
URL:       https://git.openjdk.org/jdk/commit/4d6e6f6741170a7f083a84e3e9f4b5f67099a433
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VMRegImpl::print_on is broken after JDK-8289060,JDK-8291798,5080898,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2022-08-03 03:24,2022-09-20 22:58,2023-10-01 09:56,2022-08-03 23:48,20,,,,,,20,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,,,,,,,,,,,,,,"After JDK-8289060, the stack slot value printed by VMRegImpl::print_on is garbage:

0x00007fa97503a12f:   callq  0x00007fa97c6615a0           ; ImmutableOopMap {[825414996]=Oop }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289060,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y557:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-03 03:31;thartmann;ILW = Debug printing of VMRegs is broken (regression), when printing compiled code, no workaround = MMH = P3;;;","2022-08-03 03:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9723
Date: 2022-08-03 10:48:09 +0000;;;","2022-08-03 23:47;dukebot;Changeset: 1a6c83b7
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-08-04 05:02:16 +0000
URL:       https://git.openjdk.org/jdk/commit/1a6c83b7718e00cf2284903434766dc6d4bf7755
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[11u] Corrections after backport of JDK-8212028,JDK-8291794,5080894,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gdams,gdams,gdams,2022-08-03 02:50,2022-08-10 02:29,2023-10-01 09:56,2022-08-04 00:31,11,,,,,,11.0.17,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,"When JDK-8212028 was backported to 11u, it partly broke the backports of JDK-8211727 and JDK-8214003.

It introduced section ""Setup global test running parameters"" in RunTests.gmk again with the old code.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8212028,JDK-8214003,JDK-8211727,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y54b:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-08-03 02:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1302
Date: 2022-08-02 12:44:24 +0000;;;","2022-08-04 00:00;gdams;Fix request (11u)

Changes have been throughly tested by Microsoft and SAP.

This fix rectifies some duplicate source code - risk is low;;;","2022-08-04 00:29;dukebot;Changeset: 761e5684
Author:    George Adams <georgeadams1995@gmail.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-08-04 07:22:23 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/761e56849f1289693c59ebd2ccb2c476031616c6
;;;","2022-08-10 02:29;dukebot;Changeset: 761e5684
Author:    George Adams <georgeadams1995@gmail.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-08-04 07:22:23 +0000
URL:       https://git.openjdk.org/jdk11u/commit/761e56849f1289693c59ebd2ccb2c476031616c6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultStyledDocument.setCharacterAttributes accepts negative length,JDK-8291792,5080891,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,psadhukhan,psadhukhan,2022-08-03 02:14,2022-09-06 17:29,2023-10-01 09:56,2022-08-30 01:39,11,17,19,20,,,20,client-libs,,0,sn_125,sn_126,,,,,,,,,,,,,,,,"DefaultStyledDocument.setCharacterAttributes() takes in length parameter which as per spec
length - the length >= 0

but in implementation, it only checks for
if (length == 0) {
            return;
        }

It should be length < 0 as text length cannot be -ve.
Also, need to check if length = 0 is valid or not.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292557,,,,,,,,,,,,,,,,,,,,,,,"2022-08-03 02:20;psadhukhan;TextEditTest.java;https://bugs.openjdk.org/secure/attachment/100273/TextEditTest.java",,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2y53n:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-08-16 23:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9830
Date: 2022-08-11 05:21:48 +0000;;;","2022-08-30 01:39;dukebot;Changeset: 4a28f379
Author:    Tejesh R <tr@openjdk.org>
Committer: Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-08-30 08:36:58 +0000
URL:       https://git.openjdk.org/jdk/commit/4a28f3798d25b64d44aad557f94d1045c253cdfb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(!is_visited) failed: visit only once with -XX:+SuperWordRTDepCheck,JDK-8291781,5080486,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fgao,webbuggrp,webbuggrp,2022-07-27 20:35,2022-11-14 11:42,2023-10-01 09:56,2022-10-28 00:30,20,,,,,,20,hotspot,,0,c2,c2-superword,dcsswa,oracle-triage-11,oracle-triage-17,oracle-triage-20,reproducer-yes,webbug,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
This configuration fails:

$ CONF=linux-x86_64-server-fastdebug make test TEST=compiler/c2/irTests/TestVectorizeTypeConversion.java TEST_VM_OPTS=""-XX:+SuperWordRTDepCheck""

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/loopnode.cpp:5284
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/root/jdk_source/jdk/src/hotspot/share/opto/loopnode.cpp:5284), pid=33529, tid=33798
#  assert(!is_visited) failed: visit only once
#
# JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-internal-adhoc.root.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-internal-adhoc.root.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12b349c]  PhaseIdealLoop::build_loop_early(VectorSet&, Node_List&, Node_Stack&)+0x5ac
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/root/jdk_source/jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_compiler/scratch/31/core.33529)
#


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291881,,,,,,,,,,JDK-8296030,JDK-8283091,,,,,,"2022-08-03 01:17;sswsharm;hs_err_pid8010.log;https://bugs.openjdk.org/secure/attachment/100268/hs_err_pid8010.log","2022-08-03 01:17;sswsharm;replay_pid8010.log;https://bugs.openjdk.org/secure/attachment/100267/replay_pid8010.log",,,,,,,,,,,generic,,,,,,b03,20,,generic,,,,,"0|i2y2ln:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-03 01:20;sswsharm;Issue is reproduced.
TestVectorizeTypeConversion.java is resulting in crash with
 Problematic frame:
# V  [libjvm.so+0x14aea7c]  PhaseIdealLoop::build_loop_early(VectorSet&, Node_List&, Node_Stack&)+0x68c
 when ""-XX:+SuperWordRTDepCheck"" is used.

(hs_err_pid8010.log and replay_pid8010.log are attached)

OS : Ubuntu 18.04
JDK 20 fastdebug internal build :Fail

ILW: crash,single test method,disable compilation of affected method=HLM = P3

Moving it to dev team for further analysis;;;","2022-08-03 04:18;thartmann;Seems to be a regression in JDK 20 b03, most likely JDK-8283091, running tests to verify.;;;","2022-08-03 04:19;thartmann;ILW = Assert during C2 compilation (regression in JDK 20), with single test and non-default debug flag, no workaround but disable superword or compilation of affected method = HLM = P3;;;","2022-08-03 05:01;thartmann;I verified that this was introduced by JDK-8283091 in JDK 20 b03. [~fgao], could you please take a look?;;;","2022-08-03 19:05;fgao;Thanks for your verification, [~thartmann]. I reproduced the error locally. I'll investigate the root cause ASAP.;;;","2022-08-04 00:21;thartmann;I found another, unrelated issue with -XX:+SuperWordRTDepCheck: JDK-8291881;;;","2022-08-04 00:54;fgao;It seems that -XX:+SuperWordRTDepCheck is a develop flag and misses proper implementation (only involved here https://github.com/openjdk/jdk/blob/0bc804d6ef66426f93f4bef4641a377a4400827d/src/hotspot/share/opto/superword.cpp#L1114). But when enabled, sometimes it can influence dependency graph in SuperWord.;;;","2022-10-24 05:04;thartmann;[~fgao], should we simply remove the flag?;;;","2022-10-24 09:49;kvn;We can convert this flag to pure debug to avoid effect on code generation by next change:

         if (SuperWordRTDepCheck &&
             p1.base() != p2.base() && p1.valid() && p2.valid()) {
-          // Create a runtime check to disambiguate
+          // Trace disjoint pointers
           OrderedPair pp(p1.base(), p2.base());
           _disjoint_ptrs.append_if_missing(pp);
-        } else if (!SWPointer::not_equal(cmp)) {
+        }
+        if (!SWPointer::not_equal(cmp)) {
           // Possibly same address
           _dg.make_edge(s1, s2);
;;;","2022-10-24 19:32;fgao;Hi [~thartmann] and [~kvn], thanks for your advice! I'd like to convert it to pure debug code as [~kvn] suggested in case we need it in the future. I'll propose a small fix to resolve the issue. Thanks.;;;","2022-10-25 03:59;thartmann;Okay, sounds good. Thanks!;;;","2022-10-26 01:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10868
Date: 2022-10-26 08:17:00 +0000;;;","2022-10-28 00:30;dukebot;Changeset: 4b89fce0
Author:    Fei Gao <fgao@openjdk.org>
Committer: Pengfei Li <pli@openjdk.org>
Date:      2022-10-28 07:27:02 +0000
URL:       https://git.openjdk.org/jdk/commit/4b89fce0831f990d4b6af5e6e208342f68aed614
;;;",,,,,,,,,,,,,,,,,,,,
C2: assert(r != __null && r->is_Region()) failed: this phi must have a region,JDK-8291775,5080324,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,webbuggrp,webbuggrp,2022-07-27 05:23,2022-10-04 23:54,2023-10-01 09:56,2022-08-18 00:38,17,18,19,20,,,20,hotspot,,0,c2,dcsswa,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,oracle-triage-11,oracle-triage-20,reproducer-yes,webbug,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS: Ubuntu18.04
$ java -version
openjdk version ""20-internal"" 2023-03-21
OpenJDK Runtime Environment (fastdebug build 20-internal-adhoc.root.jdk)
OpenJDK 64-Bit Server VM (fastdebug build 20-internal-adhoc.root.jdk, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
This configuration fails:

$ CONF=linux-x86_64-server-fastdebug make test TEST=compiler/c2/Test7179138_1.java TEST_VM_OPTS=""-XX:+AlwaysIncrementalInline""

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/cfgnode.cpp:1946
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/root/jdk/src/hotspot/share/opto/cfgnode.cpp:1946), pid=24389, tid=24404
#  assert(r != __null && r->is_Region()) failed: this phi must have a region
#
# JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-internal-adhoc.root.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-internal-adhoc.root.jdk, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x8af375]  PhiNode::Ideal(PhaseGVN*, bool)+0x85

Besides, the following cases failed with ""-XX:+AlwaysIncrementalInline"":
compiler/ciReplay/TestInliningProtectionDomain.java 
compiler/intrinsics/klass/CastNullCheckDroppingsTest.java 
compiler/uncommontrap/Decompile.java 


",,,,,,,,,,JDK-8294180,JDK-8294446,JDK-8294822,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293798,,,,JDK-8256540,JDK-8271341,,,,,,"2022-08-03 00:49;sswsharm;hs_err_pid1968.log;https://bugs.openjdk.org/secure/attachment/100265/hs_err_pid1968.log","2022-08-03 00:49;sswsharm;replay_pid1968.log;https://bugs.openjdk.org/secure/attachment/100266/replay_pid1968.log",,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2y1ln:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-03 00:53;sswsharm;Issue is reproduced.
Test7179138_1.java  is resulting in crash with 
 Problematic frame:
# V  [libjvm.so+0x961edc]  PhiNode::Ideal(PhaseGVN*, bool)+0x5c
 when ""-XX:+AlwaysIncrementalInline"" is used.

(hs_err_pid1968.log and replay_pid1968.log are attached)

OS : Ubuntu 18.04
JDK 20 fastdebug internal build :Fail

ILW: MMM = P3

Moving it to dev team for further analysis

;;;","2022-08-03 04:38;thartmann;I can reproduce this since JDK 17, probably related to JDK-8271341.

With JDK 17 and 18, a different assert is triggered though:

#  Internal Error (/workspace/open/src/hotspot/share/opto/cfgnode.hpp:179), pid=3019922, tid=3019935
#  Error: assert(!r || r->is_Region()) failed
#
# JRE version: Java(TM) SE Runtime Environment (17.0.5+3) (fastdebug build 17.0.5-ea+3-LTS-161)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17.0.5-ea+3-LTS-161, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x147e60f]  MergeMemNode::Ideal(PhaseGVN*, bool)+0x80f

Current CompileTask:
C2:   2076  393 %  b        Test::main @ 38 (214 bytes)

Stack: [0x00007efff6734000,0x00007efff6835000],  sp=0x00007efff682f8d0,  free space=1006k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x147e60f]  MergeMemNode::Ideal(PhaseGVN*, bool)+0x80f
V  [libjvm.so+0x16402ae]  PhaseGVN::transform_no_reclaim(Node*)+0x5e
V  [libjvm.so+0x1470bb4]  step_through_mergemem(PhaseGVN*, MergeMemNode*, TypePtr const*, TypePtr const*, outputStream*)+0xa4
V  [libjvm.so+0x14726a8]  MemNode::Ideal_common(PhaseGVN*, bool)+0x498
V  [libjvm.so+0x14789b5]  LoadNode::Ideal(PhaseGVN*, bool)+0x25
V  [libjvm.so+0x16402ae]  PhaseGVN::transform_no_reclaim(Node*)+0x5e
V  [libjvm.so+0x1466fbd]  LoadNode::make(PhaseGVN&, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool, unsigned char)+0x96d
V  [libjvm.so+0xd81038]  GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool, unsigned char)+0xb8
V  [libjvm.so+0x67966a]  BarrierSetC2::load_at_resolved(C2Access&, Type const*) const+0x13a
V  [libjvm.so+0xc26b8f]  G1BarrierSetC2::load_at_resolved(C2Access&, Type const*) const+0xcf
V  [libjvm.so+0x677dbd]  BarrierSetC2::load_at(C2Access&, Type const*) const+0xed
V  [libjvm.so+0xd94757]  GraphKit::load_String_value(Node*, bool)+0x217
V  [libjvm.so+0xd947f3]  GraphKit::load_String_length(Node*, bool)+0x23
V  [libjvm.so+0x17cce2d]  PhaseStringOpts::replace_string_concat(StringConcat*)+0x14bd
V  [libjvm.so+0x17cfe4f]  PhaseStringOpts::PhaseStringOpts(PhaseGVN*, Unique_Node_List*)+0x66f
V  [libjvm.so+0xa252ec]  Compile::inline_string_calls(bool)+0x3bc
V  [libjvm.so+0xa38ac4]  Compile::inline_incrementally(PhaseIterGVN&)+0x364
V  [libjvm.so+0xa39349]  Compile::Optimize()+0x3e9
V  [libjvm.so+0xa3bffe]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x163e
V  [libjvm.so+0x84dad6]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa4c04a]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xb7a
V  [libjvm.so+0xa4cd48]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x18ebf56]  JavaThread::thread_main_inner()+0x256
V  [libjvm.so+0x18f20f0]  Thread::call_run()+0x100
V  [libjvm.so+0x15b6664]  thread_native_entry(Thread*)+0x104
;;;","2022-08-03 04:44;thartmann;ILW = Assert during C2 compilation, reproducible with single test and stress options, no workaround but disable compilation of affected method = HLM = P3;;;","2022-08-09 00:31;chagedorn;Assert is only hit with Test7179138_1.java. The other mentioned tests are assertion failures which seem to be test failures. These should be fixed as part of JDK-8256540.;;;","2022-08-15 05:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9878
Date: 2022-08-15 12:42:04 +0000;;;","2022-08-18 00:38;dukebot;Changeset: 32d675ca
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-08-18 07:35:14 +0000
URL:       https://git.openjdk.org/jdk/commit/32d675ca607d341ca3428efc32e212701775e3c6
;;;","2022-09-22 06:28;thartmann;Fix Request (JDK 19u)
Fixes an assert during C2 compilation. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 17u. 
;;;","2022-09-22 06:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/33
Date: 2022-09-22 13:29:00 +0000;;;","2022-09-30 05:56;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
Small fix to C2, low risk.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-09-30 06:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/760
Date: 2022-09-30 12:58:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
PipelineLeaksFD.java still fails: More or fewer pipes than expected,JDK-8291760,5080861,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rriggs,dcubed,dcubed,2022-08-02 17:29,2023-01-31 03:44,2023-10-01 09:56,2022-08-26 12:07,20,,,,,,20,core-libs,,0,intermittent,problemlist,tier4,tier5,tier6,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

java/lang/ProcessBuilder/PipelineLeaksFD.java

Here's a snippet from the log file:

#section:testng
----------messages:(4/165)----------
command: testng PipelineLeaksFD
reason: User specified action: run testng/othervm PipelineLeaksFD 
Mode: othervm [/othervm specified]
elapsed time (seconds): 35.384
----------configuration:(0/0)----------
----------System.out:(44/2744)----------
test PipelineLeaksFD.checkForLeaks(java.util.ImmutableCollections$List12@1fd37c7a): success
Missing from pipesAfter: [0]
Extra pipes in pipesAfter: [1]
/proc/3140753/fd/17 : pipe:[29162414]
test PipelineLeaksFD.checkForLeaks(java.util.ImmutableCollections$List12@76a90a33): failure
java.lang.AssertionError: More or fewer pipes than expected
	at org.testng.Assert.fail(Assert.java:99)
	at PipelineLeaksFD.checkForLeaks(PipelineLeaksFD.java:103)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)
test PipelineLeaksFD.checkForLeaks(java.util.ImmutableCollections$ListN@3407b7c8): success

===============================================
java/lang/ProcessBuilder/PipelineLeaksFD.java
Total tests run: 3, Passes: 2, Failures: 1, Skips: 0
===============================================

----------System.err:(12/672)----------
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.Exception: failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: failures: 1
----------rerun:(44/6231)*----------


This failure occurred in jdk-20+9-485-tier6 and the fix for:

JDK-8290885 java/lang/ProcessBuilder/PipelineLeaksFD.java fail: More or fewer pipes than expected

is integrated in jdk-20+9-480.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291761,,,,,,,,,,JDK-8291986,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,,,,,"0|i2y4wz:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-08-17 08:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9905
Date: 2022-08-17 15:31:14 +0000;;;","2022-08-26 12:07;dukebot;Changeset: 4e457acd
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2022-08-26 19:06:29 +0000
URL:       https://git.openjdk.org/jdk/commit/4e457acda09be57dbb49b5c89123bf79bf81f38c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
find_method_handle_intrinsic leaks Method*,JDK-8291736,5080832,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,coleenp,coleenp,2022-08-02 10:03,2022-09-12 16:40,2023-10-01 09:56,2022-09-06 07:05,20,,,,,,20,hotspot,,0,classloading,,,,,,,,,,,,,,,,,"If two threads create a Method* via make_method_handle_intrinsic, the first adds it to the hashtable and the second thread leaks the method.  Adding the Method* to the deallocate list isn't sufficient because it's also linked in the code cache through a native wrapper.
If performance is not affected, holding a lock through the process would be the simplest solution, but we should evaluate the performance with this change.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290370,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y4qj:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-19 09:22;coleenp;There shouldn't be a performance difference.  If we put a lock around the code in find_method_handle_intrinsic:

  methodHandle m = Method::make_method_handle_intrinsic(iid, signature, CHECK_NULL);
  if (!Arguments::is_interpreter_only() || iid == vmIntrinsics::_linkToNative) {
      // Generate a compiled form of the MH intrinsic
      // linkToNative doesn't have interpreter-specific implementation, so always has to go through compiled version.
      AdapterHandlerLibrary::create_native_wrapper(m);   <== global lock HERE
      // Check if have the compiled code.
      if (!m->has_compiled_code()) {
        THROW_MSG_NULL(vmSymbols::java_lang_VirtualMachineError(),
                       ""Out of space in CodeCache for method handle intrinsic"");
      }
  }

This AdapterHandlerLibrary code takes out the AdapterHandlerLibrary_lock, a global lock, so multiple threads creating multiple different method handle intrinsic functions will already be serialized on that lock.  The make_metadata_handle_intrinsic call does some Metadata allocations and a link_method, which also takes out the global AdapterHandlerLibrary_lock.  Not enough code that doing in parallel would make a difference.

Simplifying the code to hold the lock through the allocation prevents us from leaking both Method* metadata and a native wrapper that points to this never unloaded Method*.

;;;","2022-08-23 08:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9983
Date: 2022-08-23 15:29:58 +0000;;;","2022-09-06 07:05;dukebot;Changeset: c05015bc
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-09-06 14:01:17 +0000
URL:       https://git.openjdk.org/jdk/commit/c05015bc93916303ff1f16dec5d9391d2d773f41
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
methods_do() always run at exit,JDK-8291735,5080831,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,coleenp,coleenp,2022-08-02 09:57,2023-03-28 01:08,2023-10-01 09:56,2023-02-16 04:57,11,17,20,,,,21,hotspot,,0,oracle-triage-20,starter,,,,,,,,,,,,,,,,"This should have more parenthesis in java.cpp.  The lack of parenthesis makes this always true, and we always run SystemDictionary::methods_do.  The collect_profiled_methods function has a conditional that won't add the method, so this is a useless iteration through the methods at exit.

void print_method_profiling_data() {
  if (ProfileInterpreter COMPILER1_PRESENT(|| C1UpdateMethodData) &&
     (PrintMethodData || CompilerOracle::should_print_methods())) {
    ResourceMark rm;
    collected_profiled_methods = new GrowableArray<Method*>(1024);
    SystemDictionary::methods_do(collect_profiled_methods);
    collected_profiled_methods->sort(&compare_methods);

There are no tests for -XX:+PrintMethodData so one should be added with this bug fix.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y4qb:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-02 15:21;dlong;ILW = typo causes unnecessary work at exit; always, at exit; no workaround = LHH = P4;;;","2023-02-15 08:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12389
Date: 2023-02-02 15:12:12 +0000;;;","2023-02-16 04:57;dukebot;Changeset: c29a1367
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2023-02-16 12:55:01 +0000
URL:       https://git.openjdk.org/jdk/commit/c29a13678744522503f899bdf5f4c13f130942f7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Leftover marks when VM shutdown aborts bitmap clearing make mixed gc fail,JDK-8291725,5080820,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,thartmann,thartmann,2022-08-02 08:30,2023-01-20 14:45,2023-10-01 09:56,2022-09-06 06:42,20,,,,,,20,hotspot,,0,gc-g1,gc-pending-review,noreg-hard,,,,,,,,,,,,,,,"While trying to reproduce JDK-8288970, I hit the following assert when executing runtime/cds/appcds/dynamicArchive/LotsUnloadTest3.java (attached to JDK-8288970):

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/open/src/hotspot/share/gc/g1/g1RemSet.cpp:1270), pid=310717, tid=310802
#  assert(bitmap->get_next_marked_addr(hr->bottom(), hr->end()) == hr->end()) failed: Bitmap should have no mark for region 2
#
# JRE version: Java(TM) SE Runtime Environment (20.0+9) (fastdebug build 20-ea+9-487)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+9-487, compiled mode, tiered, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xe598e2]  G1MergeHeapRootsTask::G1ClearBitmapClosure::do_heap_region(HeapRegion*)+0xa2

Stack: [0x00007fae651ec000,0x00007fae652ec000],  sp=0x00007fae652eab00,  free space=1018k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xe598e2]  G1MergeHeapRootsTask::G1ClearBitmapClosure::do_heap_region(HeapRegion*)+0xa2
V  [libjvm.so+0xd87843]  G1CollectedHeap::par_iterate_regions_array(HeapRegionClosure*, HeapRegionClaimer*, unsigned int const*, unsigned long, unsigned int) const+0xe3
V  [libjvm.so+0xe71231]  G1MergeHeapRootsTask::work(unsigned int)+0x1e1
V  [libjvm.so+0x1be5a00]  WorkerThread::run()+0x80
V  [libjvm.so+0x1a8ebf0]  Thread::call_run()+0x100
V  [libjvm.so+0x174c663]  thread_native_entry(Thread*)+0x103

The test was executed with:
-Xcomp -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,java.lang.invoke.MethodHandles::* -XX:CompileCommand=compileonly,java.lang.invoke.MethodType::*",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8210708,JDK-8274007,JDK-8293431,,,,,"2022-08-02 08:28;thartmann;hs_err_pid310717.log;https://bugs.openjdk.org/secure/attachment/100252/hs_err_pid310717.log",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y4nv:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-08-03 02:13;tschatzl;This seems to be an issue where we get the Concurrent Abort (that before-verification should be in Full GC?) after ""Concurrent Cleanup for Next Mark"" (i.e. bitmap clear) but before the cycle has actually been done (i.e. we reset the state).

It is still fishy that there is a mark somewhere on the bitmaps after ""Concurrent Cleanup for Next Mark"".

[15.406s][info ][gc,verify ] GC(246) Verifying During GC (Cleanup Before) 21.432ms
[15.429s][info ][gc,verify ] GC(246) Verifying During GC (Cleanup After) 23.529ms
[15.429s][info ][gc        ] GC(246) Pause Cleanup 57M->57M(62M) 45.367ms
[15.429s][info ][gc,marking] GC(246) Concurrent Cleanup for Next Mark
[15.430s][info ][gc,marking] GC(246) Concurrent Cleanup for Next Mark 0.055ms
[15.453s][info ][gc,verify ] GC(247) Verifying Before GC 22.825ms
[15.484s][info ][gc,verify ] GC(247) Verifying After GC 28.856ms
[15.484s][info ][gc        ] GC(247) Pause Young (Prepare Mixed) (G1 Preventive Collection) 57M->56M(63M) 54.101ms
[15.485s][info ][gc,marking] GC(246) Concurrent Mark Abort
[15.485s][info ][gc        ] GC(246) Concurrent Mark Cycle 174.276ms
[15.510s][info ][gc,verify ] GC(248) Verifying Before GC 22.662ms;;;","2022-08-03 02:16;tschatzl;Likely related to recent JDK 20 changes to the marking cycle (JDK-8210708);;;","2022-08-03 12:28;tschatzl;(The dwarf2 debug info seems to be broken for that build, getting a few ""<error reading variable: dwarf2_find_location_expression: Corrupted DWARF expression.>"" messages in gdb

So we are not in full gc, but in a mixed gc; we for some reason aborted marking just now, so the old gen regions do not have their bitmap cleared for eventual evacuation failure as in  G1MergeHeapRootsTask::G1ClearBitmapClosure there is this optimization to only clear when during the ""concurrent cleanup for next mark phase"" (which has been aborted).

Would be nice to understand why the concurrent cycle aborted in a mixed gc; note that the abort message also comes after having completed the "" [15.430s][info ][gc,marking] GC(246) Concurrent Cleanup for Next Mark 0.055ms "", so the bitmap should be clear already...

Concurrent cycle is pretty standard:
GC(245) is the concurrent start gc
GC(246) the concurrent cycle
which is interrupted only by that GC(247) Prepare mixed gc.

That mixed gc (GC(248)) seems to be in the merging of the initial evacuation too (if the stack trace can be trusted)

;;;","2022-08-03 12:30;tschatzl;From the time stamps it looks a bit like that the concurrent cycle is somehow aborted by the Prepare Mixed gc...;;;","2022-08-03 12:52;tschatzl;The concurrent cycle abort likely comes from the VM shutting down as the hs_err log contains the following lines that some threads already terminated:

[...]
  0x00007fae90058080 ConcurrentGCThread ""G1 Main Marker"" terminated
[...]
  0x00007fae900a2900 ConcurrentGCThread ""G1 Refine#0"" terminated
  0x00007fae900a3af0 ConcurrentGCThread ""G1 Service"" terminated

Then the problem makes sense - VM shuts down, aborts concurrent marking/clearing the bitmap. However an additional gc (in this case mixed) gets scheduled with a dirty bitmap.
;;;","2022-08-03 12:59;tschatzl;I think similar to full gc there needs to be special handling in G1MergeHeapRootsTask::G1ClearBitmapClosure() during shutdown.;;;","2022-08-03 13:33;tschatzl;JDK-8274007 is basically the same issue for full gcs during VM shutdown.;;;","2022-08-03 13:35;tschatzl;The issue cropped up because of an optimization for bitmap clearing during young gc added in JDK-8210708. So this is a JDK 20 issue.;;;","2022-08-04 08:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9735
Date: 2022-08-03 20:36:44 +0000;;;","2022-09-06 06:42;dukebot;Changeset: b2067e63
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-09-06 13:41:37 +0000
URL:       https://git.openjdk.org/jdk/commit/b2067e63da116235740f5891f6218c9e1fd7b527
;;;",,,,,,,,,,,,,,,,,,,,,,,
assert(!phase->exceeding_node_budget()) failed: sanity after JDK-8223389,JDK-8291713,5080659,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,webbuggrp,webbuggrp,2022-07-31 20:12,2022-11-02 23:41,2023-10-01 09:56,2022-08-23 00:31,11.0.16,,,,,,11.0.17,hotspot,,0,c2,dcsswa,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,oraclejdk-na,oracle-triage-20,reproducer-yes,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS: Ubuntu18.04

CPU: Intel(R) Xeon(R) Gold 6240 CPU @ 2.60GHz with AVX3

$ java -version
openjdk version ""11.0.16-internal"" 2022-07-19
OpenJDK Runtime Environment (fastdebug build 11.0.16-internal+0-adhoc.root.jdk11u)
OpenJDK 64-Bit Server VM (fastdebug build 11.0.16-internal+0-adhoc.root.jdk11u, mixed mode)

A DESCRIPTION OF THE PROBLEM :
JVM crashed on JDK11 after JDK-8223389: assert(!phase->exceeding_node_budget()) failed: sanity

Reproduce:
$ java -Xbatch -XX:-TieredCompilation Test
i b3 = 707,1
Test.instanceCount Test.iFld Test.byFld = 7400137408519306837,-203456939,-61
Test.dArrFld Test.byArrFld = 4864304302062057596,-150
vMeth_check_sum: -6062343821366732397
iMeth1_check_sum: 4593536440981602581
iMeth_check_sum: -6401354753651026650
i b3 = 707,1
Test.instanceCount Test.iFld Test.byFld = 7400137408519306837,-203456939,-61
Test.dArrFld Test.byArrFld = 4868807901689427806,-150
vMeth_check_sum: 6322056430976086822
iMeth1_check_sum: 9187072881963205162
iMeth_check_sum: 5644034566407498316
i b3 = 707,1
Test.instanceCount Test.iFld Test.byFld = 7400137408519306837,-203456939,-61
Test.dArrFld Test.byArrFld = 4871268053754073728,-150
vMeth_check_sum: 259712609609354425
iMeth1_check_sum: -4666134750764743873
iMeth_check_sum: -757320187243528334
i b3 = 707,1
Test.instanceCount Test.iFld Test.byFld = 7400137408519306837,-203456939,-61
Test.dArrFld Test.byArrFld = 4873311501316798245,-150
vMeth_check_sum: -5802631211757377972
iMeth1_check_sum: -72598309783141292
iMeth_check_sum: -7158674940894554984
i b3 = 707,1
Test.instanceCount Test.iFld Test.byFld = 7400137408519306837,-203456939,-61
Test.dArrFld Test.byArrFld = 4874541577349121206,-150
vMeth_check_sum: 6581769040585441247
iMeth1_check_sum: 4520938131198461289
iMeth_check_sum: 4886714379163969982
i b3 = 707,1
Test.instanceCount Test.iFld Test.byFld = 7400137408519306837,-203456939,-61
Test.dArrFld Test.byArrFld = 4875771653381444167,-150
vMeth_check_sum: 519425219218708850
iMeth1_check_sum: 9114474572180063870
iMeth_check_sum: -1514640374487056668
i b3 = 707,1
Test.instanceCount Test.iFld Test.byFld = 7400137408519306837,-203456939,-61
Test.dArrFld Test.byArrFld = 4877001729413767129,-150
vMeth_check_sum: -5542918602148023547
iMeth1_check_sum: -4738733060547885165
iMeth_check_sum: -7915995128138083318
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/loopTransform.cpp:981
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jdk_source/jdk11u/src/hotspot/share/opto/loopTransform.cpp:981), pid=6557, tid=6606
#  assert(!phase->exceeding_node_budget()) failed: sanity
#
# JRE version: OpenJDK Runtime Environment (11.0.16) (fastdebug build 11.0.16-internal+0-adhoc.root.jdk11u)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 11.0.16-internal+0-adhoc.root.jdk11u, mixed mode, compressed oops, g1 gc, linux-amd64)
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/JavaFuzzer/tests/0023/core.6557)
#
# An error report file with more information is saved as:
# /home/JavaFuzzer/tests/0023/hs_err_pid6557.log
#
# Compiler replay data is saved as:
# /home/JavaFuzzer/tests/0023/replay_pid6557.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Current thread is 6606
Dumping core ...


---------- BEGIN SOURCE ----------

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294433,,,,,,,,,,JDK-8223389,,,,,,,"2022-08-02 05:47;sswsharm;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/100246/FuzzerUtils.java","2022-08-02 05:47;sswsharm;Test.java;https://bugs.openjdk.org/secure/attachment/100248/Test.java","2022-08-02 05:47;sswsharm;hs_err_pid6557.log;https://bugs.openjdk.org/secure/attachment/100247/hs_err_pid6557.log",,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2y3o3:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-02 05:42;sswsharm;Issue is not reproduced.
No crash is observed on JDK 11.0.16

OS: Ubuntu 20.04
JDK 11.0.16: Pass

Output:
i b3 = 707,1
Test.instanceCount Test.iFld Test.byFld = 7400137408519306837,-203456939,-61
Test.dArrFld Test.byArrFld = 4864304302062057596,-150
vMeth_check_sum: -6062343821366732397
iMeth1_check_sum: 4593536440981602581
iMeth_check_sum: -6401354753651026650
i b3 = 707,1
Test.instanceCount Test.iFld Test.byFld = 7400137408519306837,-203456939,-61
Test.dArrFld Test.byArrFld = 4868807901689427806,-150
vMeth_check_sum: 6322056430976086822
iMeth1_check_sum: 9187072881963205162
iMeth_check_sum: 5644034566407498316
i b3 = 707,1
Test.instanceCount Test.iFld Test.byFld = 7400137408519306837,-203456939,-61
Test.dArrFld Test.byArrFld = 4871268053754073728,-150
vMeth_check_sum: 259712609609354425
iMeth1_check_sum: -4666134750764743873
iMeth_check_sum: -757320187243528334
i b3 = 707,1
Test.instanceCount Test.iFld Test.byFld = 7400137408519306837,-203456939,-61
Test.dArrFld Test.byArrFld = 4873311501316798245,-150
vMeth_check_sum: -5802631211757377972
iMeth1_check_sum: -72598309783141292
iMeth_check_sum: -7158674940894554984
i b3 = 707,1
Test.instanceCount Test.iFld Test.byFld = 7400137408519306837,-203456939,-61
Test.dArrFld Test.byArrFld = 4874541577349121206,-150
vMeth_check_sum: 6581769040585441247
iMeth1_check_sum: 4520938131198461289
iMeth_check_sum: 4886714379163969982
i b3 = 707,1
Test.instanceCount Test.iFld Test.byFld = 7400137408519306837,-203456939,-61
Test.dArrFld Test.byArrFld = 4875771653381444167,-150
vMeth_check_sum: 519425219218708850
iMeth1_check_sum: 9114474572180063870
iMeth_check_sum: -1514640374487056668
i b3 = 707,1
Test.instanceCount Test.iFld Test.byFld = 7400137408519306837,-203456939,-61
Test.dArrFld Test.byArrFld = 4877001729413767129,-150
vMeth_check_sum: -5542918602148023547
iMeth1_check_sum: -4738733060547885165
iMeth_check_sum: -7915995128138083318
i b3 = 707,1
Test.instanceCount Test.iFld Test.byFld = 7400137408519306837,-203456939,-61
Test.dArrFld Test.byArrFld = 4877815100944168623,-150
vMeth_check_sum: 6841481650194795672
iMeth1_check_sum: -145196619566282584
iMeth_check_sum: 4129394191920441648
i b3 = 707,1
Test.instanceCount Test.iFld Test.byFld = 7400137408519306837,-203456939,-61
Test.dArrFld Test.byArrFld = 4878430138960330104,-150
vMeth_check_sum: 779137828828063275
iMeth1_check_sum: 4448339821415319997
iMeth_check_sum: -2271960561730585002
i b3 = 707,1
Test.instanceCount Test.iFld Test.byFld = 7400137408519306837,-203456939,-61
Test.dArrFld Test.byArrFld = 4879045176976491585,-150
vMeth_check_sum: -5283205992538669122
iMeth1_check_sum: 9041876262396922578
iMeth_check_sum: -8673315315381611652

crash is reported on fastdebug build so moving it to dev team for further analysis.;;;","2022-08-02 06:33;thartmann;We did not backport JDK-8223389 to Oracle JDK 11u because the fix is Shenandoah GC specific. This issue occurs with G1 though and must therefore be unrelated.;;;","2022-08-02 06:42;thartmann;I can reproduce this with OpenJDK 11u but not with Oracle JDK 11u.;;;","2022-08-02 22:48;thartmann;ILW = Assert during C2 compilation, with generated test, disable compilation of affected method = HLM = P3;;;","2022-08-02 22:52;thartmann;[~roland], I'm assigning this to you in case you want to have a look since this seems to only affect OpenJDK 11u. Feel free to just unassign.;;;","2022-08-03 15:53;dlong;The problem in OpenJDK 11u seems to start here:

commit f3708bb16926b0765cd68e5447651c03d9fb3d6f
Author: Martin Doerr <mdoerr@openjdk.org>
Date:   Mon Mar 14 11:27:50 2022 +0000

    8225475: Node budget asserts on x86_32/64
    
    Make the (ad-hoc) loop cloning size estimate more pessimistic.
    
    Backport-of: ca29203cac651af295d78e6fff6dfdd8a614ff86
;;;","2022-08-18 06:30;roland;Backport https://github.com/openjdk/jdk11u/commit/5f40afc10909061b5b4e17ec59856611e160e474 was not quite right:

diff --git a/src/hotspot/share/opto/loopnode.hpp b/src/hotspot/share/opto/loopnode.hpp
index ef2454e9c34..0f72990ecff 100644
--- a/src/hotspot/share/opto/loopnode.hpp
+++ b/src/hotspot/share/opto/loopnode.hpp
@@ -1392,7 +1392,6 @@ SHENANDOAHGC_ONLY(private:)
 
   uint require_nodes(uint require, uint minreq = REQUIRE_MIN) {
     precond(require > 0);
-    _nodes_required += MAX2(100u, require); // Keep requests at minimum 100.
     _nodes_required += MAX2(require, minreq);
     return _nodes_required;
   }
;;;","2022-08-19 01:54;thartmann;I just verified that Oracle JDK 11u is not affected.;;;","2022-08-19 06:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1335
Date: 2022-08-19 12:54:38 +0000;;;","2022-08-22 01:01;roland;11u fix request: this fixes a bug in a backport (a line of code was left in when it should have been deleted). The bug can cause that assert but it also affects c2 heuristics and as such could have a performance impact. I tested the fix with tier1.;;;","2022-08-23 00:31;dukebot;Changeset: 5d344f1a
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-08-23 07:28:25 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/5d344f1a2fb974e9e315ce81b6d9ec68ef9834ef
;;;","2022-08-24 12:59;dukebot;Changeset: 5d344f1a
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-08-23 07:28:25 +0000
URL:       https://git.openjdk.org/jdk11u/commit/5d344f1a2fb974e9e315ce81b6d9ec68ef9834ef
;;;",,,,,,,,,,,,,,,,,,,,,
Bump version numbers for 17.0.4.0.1+1,JDK-8291707,5080803,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rpatil,rpatil,rpatil,2022-08-02 04:52,2022-08-04 00:50,2023-10-01 09:56,2022-08-02 06:26,,,,,,,17.0.4.0.1-oracle,infrastructure,,0,,,,,,,,,,,,,,,,,,"Update JDK version numbers for BPR 17.0.4.0.1+1 in the files:
- "".jcheck/conf""
- ""make/autoconf/version-numbers""

And update AU_SECURE_ID in closed/make/autoconf/closed-version-numbers ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291540,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y4k3:",9223372036854775807,b01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javac assertion when compiling a method call with switch expression as argument,JDK-8291657,5080726,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abimpoudis,clanger,clanger,2022-08-01 15:21,2022-09-19 11:10,2023-10-01 09:56,2022-09-13 23:53,17,18,19,20,,,20,tools,,0,,,,,,,,,,,,,,,,,,"Code:
public class SwitchBug {
    interface A { }
    interface B { }
    static void f(final B b) { }

    public static void main(final String... args) {
        f((B) switch (new Object()) {
            case Object obj -> new A() {};
        });
    }
}

Fails compilation, with e.g. `javac --enable-preview -source 17 SwitchBug.java`

java.lang.AssertionError
        at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
        at jdk.compiler/com.sun.tools.javac.util.Assert.check(Assert.java:46)
        at jdk.compiler/com.sun.tools.javac.jvm.Code$State.forceStackTop(Code.java:1776)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitYield(Gen.java:1802)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCYield.accept(JCTree.java:1658)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:631)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:682)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:666)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.handleSwitch(Gen.java:1373)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.doHandleSwitchExpression(Gen.java:1238)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitSwitchExpression(Gen.java:1202)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitchExpression.accept(JCTree.java:1380)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:877)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitLetExpr(Gen.java:2381)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$LetExpr.accept(JCTree.java:3287)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:877)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitTypeCast(Gen.java:2228)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCTypeCast.accept(JCTree.java:2185)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:877)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genArgs(Gen.java:902)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitApply(Gen.java:1880)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1797)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:877)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitExec(Gen.java:1748)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCExpressionStatement.accept(JCTree.java:1584)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:631)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:682)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitBlock(Gen.java:1097)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1091)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genMethod(Gen.java:967)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitMethodDef(Gen.java:930)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:921)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genClass(Gen.java:2420)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:737)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1617)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1585)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)

Reproduced with javac of 17.0.4, 18.0.2, 19 and current head (jdk20+8).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y42z:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-09-09 05:25;abimpoudis;Minimized a bit more

    class A { }
    interface B { }

    public B test(Object o) {
        return (B) switch (o) {
            default -> new A();
        };
    };;;","2022-09-09 08:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10232
Date: 2022-09-09 15:04:13 +0000;;;","2022-09-13 23:53;dukebot;Changeset: 1169a159
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-09-14 06:48:01 +0000
URL:       https://git.openjdk.org/jdk/commit/1169a1593660242375400e9d6b9ca11a872cdf02
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: assert from JDK-8287393 causes crashes,JDK-8291654,5080723,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,eastigeevich,eastigeevich,eastigeevich,2022-08-01 14:57,2022-09-20 22:57,2023-10-01 09:56,2022-08-02 05:06,20,,,,,,20,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,,,,,,,,,,,,,,"https://github.com/openjdk/jdk/commit/6cbc234ad17c5a0c4b3d6ea76f807c27c1dc8330 adds the assert:

assert(StubRoutines::aarch64::complete() && Thread::current()->is_Compiler_thread() && Compile::current()->output() != __null)

It might fail if C1 uses trampoline_call. The assert is not needed as the calculation of in_scratch_emit_size is short-circuited to false if it is C1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291752,,,,JDK-8287393,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2y42b:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-01 15:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9709
Date: 2022-08-01 22:13:53 +0000;;;","2022-08-01 18:56;dlong;ILW = new assert fails; aarch64 debug builds only; no workaround = MMH = P3;;;","2022-08-02 05:06;dukebot;Changeset: af76c0c1
Author:    Evgeny Astigeevich <eastig@amazon.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2022-08-02 12:01:25 +0000
URL:       https://git.openjdk.org/jdk/commit/af76c0c1991f6051ba95f05b79121a7eeef8e7d3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1 refinement incorrectly expects always-valid HeapRegion out of the Hot Card Cache,JDK-8291653,5080722,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,dcubed,dcubed,2022-08-01 14:52,2023-01-20 19:26,2023-10-01 09:56,2022-08-05 09:22,20,,,,,,20,hotspot,,0,gc-g1,gc-pending-review,intermittent,tier4,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

vmTestbase/gc/gctests/StringInternSyncWithGC2/TestDescription.java

Here's a snippet from the log file:

#section:main
----------messages:(4/385)----------
command: main -Xlog:gc:gc.log gc.gctests.StringInternSyncWithGC.StringInternSyncWithGC -ms high -memUsage 3 -appTimeout 30 -capacityVerPart 2
reason: User specified action: run main/othervm -Xlog:gc:gc.log gc.gctests.StringInternSyncWithGC.StringInternSyncWithGC -ms high -memUsage 3 -appTimeout 30 -capacityVerPart 2 
Mode: othervm [/othervm specified]
elapsed time (seconds): 79.265
----------configuration:(0/0)----------
----------System.out:(56/4132)----------
Stress time: 120 seconds
Stress iterations factor: 1
Stress threads factor: 1
Stress runs factor: 1
Max memory: 1432354816
Sleep time: 500
Iterations: 0
Number of threads: 24
Run GC thread: false
Run mem diag thread: false
Run forever: false
The overall size of interned strings  : 136M
The count of interned strings : 490532
Starting Thread[#32,gc.gctests.StringInternSyncWithGC.StringGenerator@49d83ca0,5,MainThreadGroup]
Starting Thread[#33,gc.gctests.StringInternSyncWithGC.StringGenerator@36b0c064,5,MainThreadGroup]
Starting Thread[#34,gc.gctests.StringInternSyncWithGC.StringGenerator@3e85d72e,5,MainThreadGroup]
Starting Thread[#35,gc.gctests.StringInternSyncWithGC.StringGenerator@52549452,5,MainThreadGroup]
Starting Thread[#36,gc.gctests.StringInternSyncWithGC.StringGenerator@108a6070,5,MainThreadGroup]
Starting Thread[#37,gc.gctests.StringInternSyncWithGC.StringGenerator@200921e5,5,MainThreadGroup]
Starting Thread[#38,gc.gctests.StringInternSyncWithGC.StringGenerator@30a5ae6d,5,MainThreadGroup]
Starting Thread[#39,gc.gctests.StringInternSyncWithGC.StringGenerator@46255a2f,5,MainThreadGroup]
Starting Thread[#40,gc.gctests.StringInternSyncWithGC.StringGenerator@56f3b7b,5,MainThreadGroup]
Starting Thread[#41,gc.gctests.StringInternSyncWithGC.StringGenerator@6c80243a,5,MainThreadGroup]
Starting Thread[#42,gc.gctests.StringInternSyncWithGC.StringGenerator@714b3901,5,MainThreadGroup]
Starting Thread[#43,gc.gctests.StringInternSyncWithGC.StringGenerator@1dd3e125,5,MainThreadGroup]
Starting Thread[#44,gc.gctests.StringInternSyncWithGC.StringGenerator@619bb507,5,MainThreadGroup]
Starting Thread[#45,gc.gctests.StringInternSyncWithGC.StringGenerator@c57fcfa,5,MainThreadGroup]
Starting Thread[#46,gc.gctests.StringInternSyncWithGC.StringGenerator@24fc5f40,5,MainThreadGroup]
Starting Thread[#47,gc.gctests.StringInternSyncWithGC.StringGenerator@26a45833,5,MainThreadGroup]
Starting Thread[#48,gc.gctests.StringInternSyncWithGC.StringGenerator@1aabe26d,5,MainThreadGroup]
Starting Thread[#49,gc.gctests.StringInternSyncWithGC.StringGenerator@29287dee,5,MainThreadGroup]
Starting Thread[#50,gc.gctests.StringInternSyncWithGC.StringGenerator@6f6821d4,5,MainThreadGroup]
Starting Thread[#51,gc.gctests.StringInternSyncWithGC.StringGenerator@6b0989ca,5,MainThreadGroup]
Starting Thread[#52,gc.gctests.StringInternSyncWithGC.StringGenerator@2ef4b64c,5,MainThreadGroup]
Starting Thread[#53,gc.gctests.StringInternSyncWithGC.StringGenerator@44597971,5,MainThreadGroup]
Starting Thread[#54,gc.gctests.StringInternSyncWithGC.StringGenerator@6a1196af,5,MainThreadGroup]
Starting Thread[#55,gc.gctests.StringInternSyncWithGC.StringGenerator@4d7105fe,5,MainThreadGroup]
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/heapRegionManager.inline.hpp:47
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S40241/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/bca6c5e3-5b22-4227-a4e4-83459ae15e11/runs/c0eb0ff8-ee63-4658-a17e-97e873c9e944/workspace/open/src/hotspot/share/gc/g1/heapRegionManager.inline.hpp:47), pid=93178, tid=17923
#  assert(is_available(index)) failed: pre-condition
#
# JRE version: Java(TM) SE Runtime Environment (20.0+9) (fastdebug build 20-ea+9-468)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+9-468, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Core dump will be written. Default location: core.93178
#
# An error report file with more information is saved as:
# /System/Volumes/Data/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S39191/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1363ad05-dce9-4c9f-8400-34775be7542a/runs/74179673-c73e-4975-968e-bc2e687b243e/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_gc_misc/scratch/2/hs_err_pid93178.log
[thread 35075 also had an error]
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(32/7796)*----------


Here's the crashing thread:

---------------  T H R E A D  ---------------

Current thread (0x00007fccf31d3610):  ConcurrentGCThread ""G1 Refine#0"" [stack: 0x000070000f3f8000,0x000070000f4f8000] [id=17923]

Stack: [0x000070000f3f8000,0x000070000f4f8000],  sp=0x000070000f4f7920,  free space=1022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x12bc1d9]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6e9
V  [libjvm.dylib+0x12bc85b]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V  [libjvm.dylib+0x6c58ed]  report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V  [libjvm.dylib+0x7ddfe8]  HeapRegionManager::at(unsigned int) const+0x68
V  [libjvm.dylib+0x89c8fc]  G1RemSet::clean_card_before_refine(unsigned char**)+0x17c
V  [libjvm.dylib+0x842625]  G1RefineBufferedCards::clean_cards()+0xc5
V  [libjvm.dylib+0x841f03]  G1DirtyCardQueueSet::refine_buffer(BufferNode*, unsigned int, G1ConcurrentRefineStats*)+0xe3
V  [libjvm.dylib+0x8420ce]  G1DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long, G1ConcurrentRefineStats*)+0x3e
V  [libjvm.dylib+0x83f030]  G1ConcurrentRefineThread::run_service()+0x250
V  [libjvm.dylib+0x6672eb]  ConcurrentGCThread::run()+0x1b
V  [libjvm.dylib+0x120d057]  Thread::call_run()+0x177
V  [libjvm.dylib+0xfada30]  thread_native_entry(Thread*)+0x150
C  [libsystem_pthread.dylib+0x68fc]  _pthread_start+0xe0
C  [libsystem_pthread.dylib+0x2443]  thread_start+0xf",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290715,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y423:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Not verified,,"2022-08-03 02:37;tschatzl;The problem is G1RemSet::clean_card_before_refine() using

     r = _g1h->heap_region_containing(start);

when handling cards from the hot card cache - they may be pointing to stale regions.

Previously you got a HeapRegion* out of it that always happens to be neither old nor humongous nor archive (actually Free), so things just (errorneously) worked out. But after JDK-8290715 heap_region_containing() checks whether the given address is actually into an uncommitted region.

The fix is to change this call to heap_region_containing_or_null() and handle the null case appropriately.;;;","2022-08-03 02:39;tschatzl;This is a correct assert failure, but in release builds this would be no issue as you would still get a valid HeapRegion*;;;","2022-08-03 05:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9724
Date: 2022-08-03 11:36:51 +0000;;;","2022-08-05 09:19;dcubed;Here's hs_err_pid snippets from the jdk-20+10-524-tier5 sighting: 

applications/microbenchmarks/jsr335/Test_1.java#id8

#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8494/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b7c6af48-7687-4d25-920c-9d1a31d64e2c/runs/70f14ad2-303a-45d2-bc04-b40d19a3a915/workspace/open/src/hotspot/share/gc/g1/heapRegionManager.inline.hpp:47), pid=3606161, tid=3606167
#  assert(is_available(index)) failed: pre-condition
#
# JRE version: Java(TM) SE Runtime Environment (20.0+10) (fastdebug build 20-ea+10-524)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+10-524, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd45f2c]  HeapRegionManager::at(unsigned int) const+0xdc

<snip>

---------------  T H R E A D  ---------------

Current thread (0x00007f86541f7130):  ConcurrentGCThread ""G1 Refine#0"" [stack: 0x00007f86485e6000,0x00007f86486e6000] [id=3606167]

Stack: [0x00007f86485e6000,0x00007f86486e6000],  sp=0x00007f86486e4c10,  free space=1019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd45f2c]  HeapRegionManager::at(unsigned int) const+0xdc
V  [libjvm.so+0xe528a3]  G1RemSet::clean_card_before_refine(unsigned char**)+0x183
V  [libjvm.so+0xdd2be4]  G1DirtyCardQueueSet::refine_buffer(BufferNode*, unsigned int, G1ConcurrentRefineStats*)+0xd4
V  [libjvm.so+0xdd341d]  G1DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long, G1ConcurrentRefineStats*)+0x5d
V  [libjvm.so+0xdcf257]  G1ConcurrentRefineThread::run_service()+0x127
V  [libjvm.so+0xb3752b]  ConcurrentGCThread::run()+0x1b
V  [libjvm.so+0x1a8f7f0]  Thread::call_run()+0x100
V  [libjvm.so+0x174cd73]  thread_native_entry(Thread*)+0x103;;;","2022-08-05 09:22;dukebot;Changeset: f9bb3676
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-08-05 16:20:27 +0000
URL:       https://git.openjdk.org/jdk/commit/f9bb3676e3d2c5fe0ae505d3bcbf434f7acb524f
;;;","2023-01-20 19:26;lmesnik;There are no existing failures in Mach5 to estimate frequency. Not reproduced in Mach5 CI and Adhoc.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"CleanerTest.java fails with ""Cleanable was cleaned""",JDK-8291651,5080720,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rriggs,dcubed,dcubed,2022-08-01 14:32,2023-02-01 07:41,2023-10-01 09:56,2022-09-01 07:04,19,,,,,,20,core-libs,,0,tier6,,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

java/lang/ref/CleanerTest.java

Here's a snippet from the log file:

Case: java.lang.ref.PhantomReference, expect: EV_CLEAR, events: [EV_CLEAR, EV_CLEAN, EV_UNREF], throwEx: false
[64.770s][info][gc] GC(126) Pause Full (WhiteBox Initiated Full GC) 3M->2M(32M) 84.185ms
 Cleanable cleaned in cycle: 0
[65.041s][info][gc] GC(127) Pause Young (Concurrent Start) (CodeCache GC Threshold) 3M->2M(272M) 3.007ms
[65.041s][info][gc] GC(128) Concurrent Mark Cycle
[65.095s][info][gc] GC(128) Pause Remark 2M->2M(32M) 46.545ms
[65.100s][info][gc] GC(128) Pause Cleanup 2M->2M(32M) 0.101ms
[65.101s][info][gc] GC(128) Concurrent Mark Cycle 59.216ms
test CleanerTest.testRefSubtypes(CleanerTest$$Lambda$101/0x00000008010354b0@178f34f9): failure
java.lang.AssertionError: Cleanable was cleaned: expected [false] but found [true]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:819)
	at CleanerTest.checkCleaned(CleanerTest.java:299)
	at CleanerTest.verify(CleanerTest.java:223)
	at CleanerTest.generateCases(CleanerTest.java:189)
	at CleanerTest.generateCases(CleanerTest.java:195)
	at CleanerTest.generateCases(CleanerTest.java:195)
	at CleanerTest.generateCasesInternal(CleanerTest.java:159)
	at CleanerTest.testRefSubtypes(CleanerTest.java:136)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2y41n:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-08-03 13:29;rriggs;Since the Loom updates, there are two cleaners active during the test.
Most of the references are handled by a generated cleaner using each of virtual threads and normal threads. 
However, a separate COMMON cleaner is used when verifying that the cleanable has been released. The test checking the state of the references expects that reference related events are serialized.

The same cleaner should be used for all test related reference processing.;;;","2022-08-25 09:19;rriggs;The test fails when the Cleaner used for the test is created using Thread.ofVirtual().factory().
The failures also have in common, -Xcomp and linux-aarch64-debug.;;;","2022-08-26 12:12;rriggs;The test relies on changes to the states of PhantomReference objects and the cleaner.
The existing interval (10ms) to make repeat GC requests is insufficient to reliably make the changes to the Reference object stages visible.  The internal is extended to 200ms.;;;","2022-08-26 12:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10048
Date: 2022-08-26 19:09:45 +0000;;;","2022-09-01 07:04;dukebot;Changeset: 2d10d4f5
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2022-09-01 14:02:06 +0000
URL:       https://git.openjdk.org/jdk/commit/2d10d4f54ebd9d46f70a18695bf60f30dda92522
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
multiple tests failing with -Xcomp after JDK-8290034,JDK-8291649,5080717,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jbhateja,dlong,dlong,2022-08-01 13:33,2023-07-09 22:02,2023-10-01 09:56,2022-08-30 22:06,20,,,,,,20,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-20,problemlist,regression,tier6,tier8,Xcomp,,,,,,,,,"java/lang/Long/BitTwiddle.java:

java.lang.RuntimeException: lzx: 1
	at BitTwiddle.main(BitTwiddle.java:107)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1589)

java/util/zip/TestCRC32C.java:

java.lang.RuntimeException: Calculated checksum result was invalid. Expected e3069283, but got fa64cc41.
	at ChecksumBase.checkChecksum(ChecksumBase.java:92)
	at ChecksumBase.testBytes(ChecksumBase.java:56)
	at ChecksumBase.testAll(ChecksumBase.java:37)
	at TestCRC32C.main(TestCRC32C.java:37)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1589)

java/util/zip/TestChecksum.java:
java.lang.RuntimeException: Calculated checksum result was invalid. Expected e3069283, but got fa64cc41.
	at ChecksumBase.checkChecksum(ChecksumBase.java:92)
	at ChecksumBase.testBytes(ChecksumBase.java:56)
	at ChecksumBase.testAll(ChecksumBase.java:37)
	at TestChecksum.main(TestChecksum.java:35)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1589)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293039,,,,,,JDK-8291992,,,,JDK-8290034,,,,,,,,,,,,,,,,,,,x86_64,,,,,,b09,20,,,,,,,"0|i2y40z:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-08-01 13:38;dlong;Possibly related to one of these changes:
  8290034 Auto vectorize reverse bit operations.
  8287794 Reverse*VNode::Identity problem

[~jbhateja], please take a look.;;;","2022-08-01 18:51;dlong;ILW = multiple tests failing; with C2 -Xcomp only; -XX:DisableIntrinsic=_reverse_l -XX:DisableIntrinsic=_reverse_i = MLM = P4 ;;;","2022-08-01 23:29;thartmann;I think impact should be ""high"" because compiled code produces a wrong result. Raising priority to P3.;;;","2022-08-04 12:16;dcubed;Regressions normally start out at P2 so I'm bumping
this bug from P3 -> P2. Also these failures are very
noisy in the JDK20 CI. More than 300 sightings in just
a few days.;;;","2022-08-05 13:56;dcubed;The four tests were ProblemListed in jdk-20+10-522 using:

JDK-8291926 ProblemList multiple tests in -Xcomp mode due to JDK-8291649

However, this latest failure sighting is in jdk-20+10-530-tier6. I don't see how that's possible.

Update: I added the entries to the wrong ProblemList-Xcomp.txt file.;;;","2022-08-08 13:31;dlong;Problem-listed in jdk-20+10-542.;;;","2022-08-21 04:40;jbhateja;Hi all, I noticed it late, problem is in the constant value folding computation routine where bit reversal is not followed by byte reversal, will be posting a fix shortly.;;;","2022-08-23 17:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9987
Date: 2022-08-23 17:58:39 +0000;;;","2022-08-24 11:26;kvn;My initial testing (still running) results show failures in next tests running with -Xcomp -ea -esa -XX:CompileThreshold=100 -XX:-TieredCompilation on Windows with AMD cpu (AVX2, based on hs_err file):

java/lang/Long/BitTwiddle.java
java/lang/Integer/BitTwiddle.java

#  Internal Error (\workspace\\open\\src\\hotspot\\share\\opto\\phaseX.cpp:1741), pid=33724, tid=37720
#  assert(t->meet(t0) == t) failed: Not monotonic

Current CompileTask:
C2: 129489 8846 %  b        BitTwiddle::main @ 203 (1005 bytes)

Stack: [0x000000ecbe900000,0x000000ecbea00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc3bcb1]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe8f92e]  VMError::report+0x10de  (vmError.cpp:839)
V  [jvm.dll+0xe9135e]  VMError::report_and_die+0x65e  (vmError.cpp:1687)
V  [jvm.dll+0xe91ad4]  VMError::report_and_die+0x64  (vmError.cpp:1468)
V  [jvm.dll+0x586527]  report_vm_error+0xb7  (debug.cpp:284)
V  [jvm.dll+0xc7866b]  PhaseCCP::analyze+0x4ab  (phaseX.cpp:1777)
V  [jvm.dll+0xc76122]  PhaseCCP::PhaseCCP+0xd2  (phaseX.cpp:1728)
V  [jvm.dll+0x51a698]  Compile::Optimize+0xc88  (compile.cpp:2389)
V  [jvm.dll+0x5178fd]  Compile::Compile+0x14ad  (compile.cpp:824)
V  [jvm.dll+0x43d885]  C2Compiler::compile_method+0x145  (c2compiler.cpp:116)

compiler/loopopts/superword/ReductionPerf.java

#  Internal Error (\workspace\\open\\src\\hotspot\\share\\opto\\loopTransform.cpp:2204), pid=31540, tid=46180
#  Error: assert(opaq->outcnt() == 1 && opaq->in(1) == limit) failed


Current CompileTask:
C2:   1226  255             java.net.URI::<init> (42 bytes)

Stack: [0x000000e40b200000,0x000000e40b300000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc3bcb1]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe8f92e]  VMError::report+0x10de  (vmError.cpp:839)
V  [jvm.dll+0xe9135e]  VMError::report_and_die+0x65e  (vmError.cpp:1687)
V  [jvm.dll+0xe91ad4]  VMError::report_and_die+0x64  (vmError.cpp:1468)
V  [jvm.dll+0x586527]  report_vm_error+0xb7  (debug.cpp:284)
V  [jvm.dll+0xa89cd0]  PhaseIdealLoop::do_unroll+0x4c0  (loopTransform.cpp:2204)
V  [jvm.dll+0xa90cd1]  IdealLoopTree::iteration_split_impl+0x7c1  (loopTransform.cpp:3840)
V  [jvm.dll+0xa903d0]  IdealLoopTree::iteration_split+0x160  (loopTransform.cpp:3864)
V  [jvm.dll+0xa9029f]  IdealLoopTree::iteration_split+0x2f  (loopTransform.cpp:3848)
V  [jvm.dll+0xa904f0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3880)
V  [jvm.dll+0xa904f0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3880)
V  [jvm.dll+0xa904f0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3880)
V  [jvm.dll+0xa904f0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3880)
V  [jvm.dll+0xa904f0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3880)
V  [jvm.dll+0xa904f0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3880)
V  [jvm.dll+0xa9e971]  PhaseIdealLoop::build_and_optimize+0x1131  (loopnode.cpp:4531)
V  [jvm.dll+0x51aaea]  Compile::Optimize+0x10da  (compile.cpp:2408)
V  [jvm.dll+0x5178fd]  Compile::Compile+0x14ad  (compile.cpp:824)
V  [jvm.dll+0x43d885]  C2Compiler::compile_method+0x145  (c2compiler.cpp:116)
;;;","2022-08-30 22:06;dukebot;Changeset: 38377d5e
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2022-08-31 05:02:56 +0000
URL:       https://git.openjdk.org/jdk/commit/38377d5eb785829525739479a77dec250c477efc
;;;","2023-01-23 17:11;epavlova;Failed tests passed in JDK 20 ATR.
New regression test also passed in JDK 20 ATR (see gtest/GTestWrapper.java).;;;",,,,,,,,,,,,,,,,,,,,,,
java/foreign/TestMatrix.java -few tests are failing due to JDK-8287158.,JDK-8291642,5080709,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,sshivang,sshivang,2022-08-01 10:41,2022-12-08 15:27,2023-10-01 09:56,2022-11-30 12:01,19,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,"The test TestMatrix.java was failing in JDK 19.0.1 b03 due to the changes done by https://bugs.openjdk.org/browse/JDK-8287158

java/foreign/TestMatrix.java#Downcall-F
java/foreign/TestMatrix.java#Downcall-T

The class TestDownCall.java is removed and new classes has been added as part of JDK-8287158. After doing the necessary changes in the test , it is passing.

Few more test in TestMatrix.java is failing, due to the change in src/java.base/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java which has been done to reject certain type of call shapes to prevent undefined behavior down the line.

java/foreign/TestMatrix.java#UpcallStack-FF
java/foreign/TestMatrix.java#UpcallStack-FT
java/foreign/TestMatrix.java#UpcallStack-TF
java/foreign/TestMatrix.java#UpcallStack-TT
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287158,,,,,,,,,,,,,,,,,,,aarch64,,,,,,b24,19,,os_x,,,,,"0|i2y3z7:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-08-03 08:07;jvernee;The 4 UpcallStack tests are expected to fail on macosx-aarch64. We could add them to the problem list, as we've done for the top-level UpcallStack/DowncallStack tests, and then this manual test would have to be run with the right problem list.

But, this is more of a helper test that can be used during development than something we want to consistently keep passing I think. So it doesn't seem worth it to jump through too many hoops.

I'm working on a fix for the underlying issue as well [1, 2], so this issue should be transient.

[~sshivang] how are you running this test? It should be excluded by default (when running through `make`).

[1]: https://bugs.openjdk.org/browse/JDK-8275644
[2]: https://bugs.openjdk.org/browse/JDK-8275584;;;","2022-11-30 09:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11398
Date: 2022-11-28 21:03:33 +0000;;;","2022-11-30 12:01;dukebot;Changeset: 1a2ff587
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2022-11-30 19:59:43 +0000
URL:       https://git.openjdk.org/jdk/commit/1a2ff58761d755c2330dec46e3eb53bc6d9a9839
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/beans/XMLDecoder/8028054/Task.java should use the 3-arg Class.forName,JDK-8291640,5080706,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aoqi,aoqi,aoqi,2022-08-01 09:09,2023-06-15 11:16,2023-10-01 09:56,2022-08-11 12:34,,,,,,,20,client-libs,,0,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,loom,noreg-self,testbug,,,,,,,,,,,,"The issue comes from https://github.com/openjdk/jdk/pull/9677#issuecomment-1200811357. 

If Loom is not supported, two XMLDecoder tests would fail. The issue could be reproduced by zero, for example:

--------------------------------------------------
TEST: java/beans/XMLDecoder/8028054/TestConstructorFinder.java
...
Caused by: java.lang.UnsupportedOperationException: VM does not support continuations
	at java.base/jdk.internal.vm.ContinuationSupport.ensureSupported(ContinuationSupport.java:49)
	at java.base/jdk.internal.vm.Continuation.<clinit>(Continuation.java:52)
	... 9 more
...

--------------------------------------------------
TEST: java/beans/XMLDecoder/8028054/TestMethodFinder.java
...
Caused by: java.lang.UnsupportedOperationException: VM does not support continuations
	at java.base/jdk.internal.vm.ContinuationSupport.ensureSupported(ContinuationSupport.java:49)
	at java.base/jdk.internal.vm.Continuation.<clinit>(Continuation.java:52)
	... 9 more
...
--------------------------------------------------",,,,,,,,,,JDK-8293670,JDK-8293729,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y3yj:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41b965df,,,,,,,,,"2022-08-01 10:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9704
Date: 2022-08-01 16:23:59 +0000;;;","2022-08-11 12:33;dukebot;Changeset: dedc05cb
Author:    Ao Qi <aoqi@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-08-11 19:30:20 +0000
URL:       https://git.openjdk.org/jdk/commit/dedc05cb40617f7b7e2cc235528b1892dcba4cd3
;;;","2022-08-24 10:31;aoqi;Fix request (19u)

Low risk, only test changes. Clean backport. The changed tests passed.;;;","2022-08-24 10:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/15
Date: 2022-08-24 17:27:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Keep-Alive timeout of 0 should close connection immediately,JDK-8291638,5080703,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,michaelm,rgangadhar,rgangadhar,2022-08-01 08:19,2023-03-31 04:11,2023-10-01 09:56,2022-10-13 01:36,11,17,,,,,20,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sqebug,,,,,,,,,,,,,"If a server sends the following response header:

Connection: keep-alive
Keep-alive: timeout=0

then this should be interpreted as immediate closure, but we fall back to the various defaults (property setting or hardcoded default)

Long standing issue",,,,,,,,,,JDK-8300739,JDK-8302953,JDK-8300738,JDK-8305376,JDK-8305374,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y3xv:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-10-12 04:01;michaelm;PR will be published as soon as JDK-8291226 is integrated;;;","2022-10-12 07:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10678
Date: 2022-10-12 14:18:49 +0000;;;","2022-10-13 01:36;dukebot;Changeset: 26ac8366
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2022-10-13 08:32:48 +0000
URL:       https://git.openjdk.org/jdk/commit/26ac8366360685ef0cf3447ee7db16ba7a7fa1ec
;;;","2023-03-28 05:34;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.20-orcle,17.0.8-oracle.
Small risk, obvious change.
Clean backport.
Test passes and fails without the patch SAP nightly testing passed.;;;","2023-03-29 05:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1229
Date: 2023-03-29 12:34:28 +0000;;;","2023-03-29 05:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1821
Date: 2023-03-29 12:34:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpClient default keep alive timeout not followed if server sends invalid value ,JDK-8291637,5080702,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,michaelm,rgangadhar,rgangadhar,2022-08-01 08:15,2023-03-29 00:32,2023-10-01 09:56,2022-08-05 07:55,11.0.17-oracle,17.0.5-oracle,,,,,20,core-libs,,0,CPU22_10-defer-approved,CPU22_10-defer-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sqebug,,,,,,,,,,,"If a server sends the following response header:

Connection: keep-alive
Keep-alive: timeout=-20

then this should be interpreted as an invalid value and the keep alive time should be taken from the system property or hardcoded default.",,,,,,,,,,JDK-8305155,JDK-8302553,JDK-8305151,JDK-8302934,JDK-8302540,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y3xn:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-08-04 09:05;michaelm;We are not trapping the negative timeout value which ends up getting converted to a negative timestamp, relative to the current time when the keep alive timer thread starts. Therefore, as soon as the thread wakes up the first time (after five seconds) it's always going to close the connection regardless of what the property is set to.;;;","2022-08-04 23:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9755
Date: 2022-08-04 20:41:33 +0000;;;","2022-08-05 07:55;dukebot;Changeset: b17a745d
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2022-08-05 14:51:58 +0000
URL:       https://git.openjdk.org/jdk/commit/b17a745d7f55941f02b0bdde83866aa5d32cce07
;;;","2023-03-28 05:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1223
Date: 2023-03-28 12:29:03 +0000;;;","2023-03-28 05:35;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.20-orcle,17.0.8-oracle.
Small risk, obvious change.
Clean backport.
Test passes and fails without the patch  SAP nighlty testing passed;;;","2023-03-28 05:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1819
Date: 2023-03-28 12:38:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Build failures with GCC 11, Alpine 3 due to incompatible casts from nullptr",JDK-8291633,5080698,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,mbaesken,mbaesken,2022-08-01 06:55,2022-10-04 05:36,2023-10-01 09:56,2022-08-03 09:51,20,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,,,,,,,,,,,,,"On Alpine 3.16 (using gcc version 11.2.1 20220219 (Alpine 11.2.1_git20220219)) I run into the following build error :


/openjdk/build/make-support/failure-logs # more hotspot_variant-server_libjvm_objs_abstractDisassembler.o.log
In file included from /openjdk/src/jdk/src/hotspot/share/gc/shared/barrierSetConfig.inline.hpp:40,
                 from /openjdk/src/jdk/src/hotspot/share/oops/access.inline.hpp:31,
                 from /openjdk/src/jdk/src/hotspot/share/oops/oop.inline.hpp:31,
                 from /openjdk/src/jdk/src/hotspot/share/compiler/abstractDisassembler.cpp:32:
/openjdk/src/jdk/src/hotspot/share/gc/shenandoah/shenandoahBarrierSet.inline.hpp: In instantiation of 'oopDesc* ShenandoahBarrierSet::oop_xchg(DecoratorSet, T*, oop) [with T = oopDesc*; oop = oopDesc*; DecoratorSet = long unsigned int]':
/openjdk/src/jdk/src/hotspot/share/gc/shenandoah/shenandoahBarrierSet.inline.hpp:305:22:   required from 'static oopDesc* ShenandoahBarrierSet::AccessBarrier<decorators, BarrierSetT>::oop_atomic_xchg_in_heap(T*, oop) [with T = oopDesc*; long unsigned int decorators = 549924; BarrierSetT = ShenandoahBarrierSet; oop = oopDesc*]'
/openjdk/src/jdk/src/hotspot/share/oops/access.inline.hpp:101:54:   required from 'static oopDesc* AccessInternal::PostRuntimeDispatch<GCBarrierType, AccessInternal::BARRIER_ATOMIC_XCHG, decorators>::oop_access_barrier(void*, oop) [with GCBarrierType = ShenandoahBarrierSet::AccessBarrier<549924, ShenandoahBarrierSet>; long unsigned int decorators = 549924; oop = oopDesc*]'
/openjdk/src/jdk/src/hotspot/share/oops/access.inline.hpp:222:9:   required from 'static typename EnableIf<HasDecorator<ds, 4>::value, FunctionPointerT>::type AccessInternal::BarrierResolver<decorators, FunctionPointerT, barrier_type>::resolve_barrier_gc() [with long unsigned int ds = 549924; long unsigned int decorators = 549892; FunctionPointerT = oopDesc* (*)(void*, oopDesc*); AccessInternal::BarrierType barrier_type = AccessInternal::BARRIER_ATOMIC_XCHG; typename EnableIf<HasDecorator<ds, 4>::value, FunctionPointerT>::type = oopDesc* (*)(void*, oopDesc*); EnableIf<HasDecorator<ds, 4>::value, FunctionPointerT> = std::enable_if<true, oopDesc* (*)(void*, oopDesc*)>]'
/openjdk/src/jdk/src/hotspot/share/oops/access.inline.hpp:257:55:   required from 'static FunctionPointerT AccessInternal::BarrierResolver<decorators, FunctionPointerT, barrier_type>::resolve_barrier_rt() [with long unsigned int decorators = 549892; FunctionPointerT = oopDesc* (*)(void*, oopDesc*); AccessInternal::BarrierType barrier_type = AccessInternal::BARRIER_ATOMIC_XCHG]'
/openjdk/src/jdk/src/hotspot/share/oops/access.inline.hpp:264:32:   required from 'static FunctionPointerT AccessInternal::BarrierResolver<decorators, FunctionPointerT, barrier_type>::resolve_barrier() [with long unsigned int decorators = 549892; FunctionPointerT = oopDesc* (*)(void*, oopDesc*); AccessInternal::BarrierType barrier_type = AccessInternal::BARRIER_ATOMIC_XCHG]'
/openjdk/src/jdk/src/hotspot/share/oops/access.inline.hpp:321:96:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/openjdk/src/jdk/src/hotspot/share/oops/accessBackend.hpp:538:31:   required from 'static T AccessInternal::RuntimeDispatch<decorators, T, AccessInternal::BARRIER_ATOMIC_XCHG>::atomic_xchg(void*, T) [with long unsigned int decorators = 549892; T = oopDesc*]'
/openjdk/src/jdk/src/hotspot/share/oops/accessBackend.hpp:850:80:   required from 'static typename EnableIf<(! HasDecorator<decorators, 2048>::value), T>::type AccessInternal::PreRuntimeDispatch::atomic_xchg(void*, T) [with long unsigned int decorators = 549892; T = oopDesc*; typename EnableIf<(! HasDecorator<decorators, 2048>::value), T>::type = oopDesc*; EnableIf<(! HasDecorator<decorators, 2048>::value), T> = std::enable_if<true, oopDesc*>]'
/openjdk/src/jdk/src/hotspot/share/oops/accessBackend.hpp:1014:64:   required from 'T AccessInternal::atomic_xchg_reduce_types(T*, T) [with long unsigned int decorators = 549892; T = oopDesc*]'
/openjdk/src/jdk/src/hotspot/share/oops/accessBackend.hpp:1198:57:   required from 'T AccessInternal::atomic_xchg(P*, T) [with long unsigned int decorators = 525316; P = oopDesc*; T = oopDesc*]'
/openjdk/src/jdk/src/hotspot/share/oops/access.hpp:269:75:   required from 'static T Access<decorators>::oop_atomic_xchg(P*, T) [with P = oopDesc*; T = oopDesc*; long unsigned int decorators = 525312]'
/openjdk/src/jdk/src/hotspot/share/oops/oopHandle.inline.hpp:65:51:   required from here
/openjdk/src/jdk/src/hotspot/share/gc/shenandoah/shenandoahBarrierSet.inline.hpp:214:62: error: invalid cast from type 'std::nullptr_t' to type 'oopDesc**'
  214 |   previous = load_reference_barrier<T>(decorators, previous, reinterpret_cast<T*>(NULL));
      |                                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~

",,,,,,,,,,JDK-8292527,JDK-8294761,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,linux_alpine,,,,,"0|i2y3wr:",9223372036854775807,b09,,,,,,,,,,,"2022-08-01 08:20;shade;reinterpret_cast from nullptr not valid here, as error says. I think we can drop the cast entirely, or do static_cast for additional clarity for template instantiations.;;;","2022-08-01 08:53;shade;There are many others outside Shenandoah code too.;;;","2022-08-01 11:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9705
Date: 2022-08-01 17:01:51 +0000;;;","2022-08-03 09:50;dukebot;Changeset: c89556f6
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-08-03 16:43:20 +0000
URL:       https://git.openjdk.org/jdk/commit/c89556f6cd4d0b64f3e9e2f1dc7c51634522f205
;;;","2022-08-12 02:15;mbaesken;jdk17u backport request
I would like to have the patch in jdk17u-dev as well, because the issue is present there too. The patch applies cleanly.;;;","2022-08-12 02:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/632
Date: 2022-08-12 09:10:27 +0000;;;","2022-09-27 02:25;mbaesken;jdk19u backport request
I would like to have the patch in jdk19u as well, because the issue is present there too and causes build issues on modern Alpine. The patch applies cleanly.;;;","2022-09-27 02:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/41
Date: 2022-09-27 09:23:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Update attribution in webkit.md file,JDK-8291630,5080694,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2022-08-01 06:26,2022-11-29 06:07,2023-10-01 09:56,2022-08-12 05:53,8u351,jfx20,,,,,jfx20,javafx,,0,CPU22_10-critical-approved,CPU22_10-critical-SQE-OK,noreg-doc,sn_124,,,,,,,,,,,,,,"We need to update the attribution in the third-party webkit.md file.
",,,,,,,,,,JDK-8292519,JDK-8293225,JDK-8293371,JDK-8292290,,,,,,,,,,,,,,,JDK-8289935,,,,,,,,,,,,,,,JDK-8285881,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y3vv:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-08-12 04:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/868
Date: 2022-08-12 11:44:49 +0000;;;","2022-08-12 05:53;dukebot;Changeset: 33534cb9
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-08-12 12:51:22 +0000
URL:       https://git.openjdk.org/jfx/commit/33534cb9e0524e91ed717b22fab667b284c52252
;;;","2022-09-01 07:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/82
Date: 2022-09-01 14:47:17 +0000;;;","2022-09-05 10:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/112
Date: 2022-09-05 17:23:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DialogPane without header nor headerText nor graphic node adds padding to the left of the content pane,JDK-8291625,5080687,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpereda,jpereda,jpereda,2022-08-01 03:28,2022-11-29 06:08,2023-10-01 09:56,2022-08-22 09:51,jfx18,,,,,,jfx20,javafx,,0,,,,,,,,,,,,,,,,,,"Creating an Alert with alert type NONE, without header node, without header text and without graphic node, should not have/show a header but only show the content node and button bar.

However, in the case DialogPane::isHeader is false, that happens when there is no header node (DialogPane::getHeader is null), there is no header text  (DialogPane::getHeaderText is null or empty) and DialogPane::getGraphic is null, the empty container for the graphic is laid out to the left of the content pane (as expected when there is a graphic node and isHeader is false), with some padding.

The following pic illustrate the issue, as a result of running the attached test:

- alertTypeNone.png: the empty stack pane with the graphic-container style class has some padding and pushes the content pane to the right (padding is 10.8 pixels, snapped to 11, see alertTypeNonePadding.png).

Removing such padding will push the content pane to the left, as it should be expected.

The issue can be reproduced with any JavaFX version.",,,,,,,,,,JDK-8295768,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292740,,,,,,,"2022-08-01 04:37;jpereda;AlertNoneNoHeaderTest.java;https://bugs.openjdk.org/secure/attachment/100227/AlertNoneNoHeaderTest.java","2022-08-01 03:23;jpereda;alertTypeNone.png;https://bugs.openjdk.org/secure/attachment/100225/alertTypeNone.png","2022-08-01 04:43;jpereda;alertTypeNonePadding.png;https://bugs.openjdk.org/secure/attachment/100228/alertTypeNonePadding.png",,,,,,,,,,,,,,,,,,,,,,,,"0|i2y3ub:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-08-02 05:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/859
Date: 2022-08-02 10:45:54 +0000;;;","2022-08-22 09:51;dukebot;Changeset: bee2dfb8
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2022-08-22 16:47:31 +0000
URL:       https://git.openjdk.org/jfx/commit/bee2dfb848c908c62764a1fa9c071d2cfcf9c1f4
;;;","2022-10-20 10:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/84
Date: 2022-10-20 16:55:22 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assertion in PhaseIdealLoop::skeleton_predicate_has_opaque after JDK-8289127,JDK-8291599,5080660,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,rschmelter,rschmelter,2022-07-31 23:35,2022-10-05 00:14,2023-10-01 09:56,2022-09-12 00:32,17,19,20,,,,20,hotspot,,1,c2,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,oracle-triage-11,oracle-triage-20,,,,,,,,,,"When running JMC (HEAD) with a slowdebug OpenJDK build (HEAD), the following assertion is hit loading a big JFR recording:
assert(init == verif_init && stride == verif_stride) failed: missed opaque node

This happens since the fix for bug JDK-8289127 was submitted (which introduced the triggering assertion).

The values of 'init' and 'stride' are 0, but the values of 'verify_init' and 'verify_stride' are 1.

The 'current compile task' is always for the same OSR compilation (for entry of the last while loop in the code):
C2: 392782 11513 %     4       org.openjdk.jmc.flightrecorder.internal.parser.v1.ChunkLoaderV1::call @ 119 (220 bytes)

Stack:
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xe2b0c3]  os::platform_print_native_stack+0x63  (os_windows_x86.cpp:234)
V  [jvm.dll+0x111e145]  VMError::report+0x1235  (vmError.cpp:836)
V  [jvm.dll+0x11209ae]  VMError::report_and_die+0x6ce  (vmError.cpp:1684)
V  [jvm.dll+0x1121011]  VMError::report_and_die+0x81  (vmError.cpp:1469)
V  [jvm.dll+0x61179d]  report_vm_error+0x9d  (debug.cpp:285)
V  [jvm.dll+0xc69339]  PhaseIdealLoop::skeleton_predicate_has_opaque+0x309  (loopTransform.cpp:1451)
V  [jvm.dll+0xc59f86]  PhaseIdealLoop::get_skeleton_predicates+0x1e6  (loopPredicate.cpp:385)
V  [jvm.dll+0xc8bde1]  PhaseIdealLoop::collect_potentially_useful_predicates+0x261  (loopnode.cpp:4067)
V  [jvm.dll+0xc8be05]  PhaseIdealLoop::collect_potentially_useful_predicates+0x285  (loopnode.cpp:4070)
V  [jvm.dll+0xc8bbb7]  PhaseIdealLoop::collect_potentially_useful_predicates+0x37  (loopnode.cpp:4038)
V  [jvm.dll+0xc8bea4]  PhaseIdealLoop::eliminate_useless_predicates+0x94  (loopnode.cpp:4086)
V  [jvm.dll+0xc84689]  PhaseIdealLoop::build_and_optimize+0xbc9  (loopnode.cpp:4419)
V  [jvm.dll+0x59da2e]  PhaseIdealLoop::PhaseIdealLoop+0xee  (loopnode.hpp:1086)
V  [jvm.dll+0x5a0089]  PhaseIdealLoop::optimize+0x49  (loopnode.hpp:1166)
V  [jvm.dll+0x58e553]  Compile::optimize_loops+0x93  (compile.cpp:2173)
V  [jvm.dll+0x592efe]  Compile::Optimize+0xebe  (compile.cpp:2408)
V  [jvm.dll+0x58fe8e]  Compile::Compile+0x142e  (compile.cpp:824)
V  [jvm.dll+0x498f85]  C2Compiler::compile_method+0x145  (c2compiler.cpp:115)
V  [jvm.dll+0x5a46d6]  CompileBroker::invoke_compiler_on_method+0x7a6  (compileBroker.cpp:2314)
V  [jvm.dll+0x5a7a8a]  CompileBroker::compiler_thread_loop+0x35a  (compileBroker.cpp:1982)
V  [jvm.dll+0x5c5aa4]  CompilerThread::thread_entry+0x54  (compilerThread.cpp:60)
V  [jvm.dll+0x999888]  JavaThread::thread_main_inner+0x138  (javaThread.cpp:700)
V  [jvm.dll+0x999737]  JavaThread::run+0x127  (javaThread.cpp:683)
V  [jvm.dll+0x1086b6c]  Thread::call_run+0x15c  (thread.cpp:229)
V  [jvm.dll+0xe238e8]  thread_native_entry+0x108  (os_windows.cpp:546)
C  [ucrtbase.dll+0x21bb2]
C  [KERNEL32.DLL+0x17034]
C  [ntdll.dll+0x52651]
",,,,,,,,,,JDK-8294445,JDK-8294176,JDK-8294831,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289127,,,,,,,,,,,"2022-08-21 00:24;rschmelter;replay_pid7612.log;https://bugs.openjdk.org/secure/attachment/100488/replay_pid7612.log",,,,,,,,,,,,x86,,,,,,,,,windows_10,,,,,"0|i2y3ob:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-01 20:14;dlong;ILW = new assert fails; with JMC; disable compilation of affected method = MMM = P3;;;","2022-08-01 20:15;dlong;[~roland], please take a look.;;;","2022-08-18 05:40;roland;[~rschmelter] Can you attach the hs_err_pidxxx.log/replay_pidxxx.log files?
;;;","2022-08-22 01:42;roland;[~rschmelter] thanks for the replay file but I had no luck with it. How hard would it be for me to reproduce this by running jmc? Can you share the jfr recording and the required steps?;;;","2022-08-22 04:48;rschmelter;[~roland]
It's not too hard to reproduce. Just clone the jmc repository (https://github.com/openjdk/jmc), set JAVA_HOME to a JDK11 and have the VM and maven in the path. Then call
  build.[sh|bat] --packageJmc
Then in another shell set JAVA_HOME to the test JDK and have it in the path. Then call
  build.[sh|bat] --run
Start jconsole in parallel. In the JMC select the jconsole process in the event browser and start flight recording. Select 'Continious recording' and keep the rest as as it is. Wait a few minutes and then select 'Dump whole recoding' from the context menu of the flight recording run until you get the crash (takes 2 dumps for me usually).;;;","2022-08-22 06:55;roland;[~rschmelter] thanks. I managed to reproduce it.;;;","2022-08-25 07:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10022
Date: 2022-08-25 12:30:02 +0000;;;","2022-09-12 00:32;dukebot;Changeset: 37df5f56
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-09-12 07:30:47 +0000
URL:       https://git.openjdk.org/jdk/commit/37df5f56259429482cfdbe38e8b6256f1efaf9e8
;;;","2022-09-22 06:22;thartmann;Fix Request (JDK 19u)
Fixes an assert in C2 (regression in JDK 19). The fix is medium risk and applies cleanly. Already tested and backported to Oracle JDK 17u. ;;;","2022-09-22 06:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/29
Date: 2022-09-22 13:22:31 +0000;;;","2022-10-04 07:44;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
Typical risk of C2 change. Medium. 
Clean backport.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2022-10-04 08:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/770
Date: 2022-10-04 15:05:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,
[17u] Delete files missed in backport of 8269039,JDK-8291595,5080649,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,goetz,goetz,goetz,2022-07-31 09:00,2022-08-10 02:28,2023-10-01 09:56,2022-08-03 08:41,,,,,,,17.0.5,security-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,When backporting JDK-8269039 to 17u deleting test/jdk/java/security/Security/signedfirst/exp.jar keystore.jks was missed. This are test files unused after the change.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288965,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y3lv:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-08-01 06:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/617
Date: 2022-07-31 16:10:06 +0000;;;","2022-08-03 08:40;dukebot;Changeset: c430a945
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2022-08-03 08:23:10 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/c430a9457698fd57a7926e6fab065a639ccfdeb4
;;;","2022-08-10 02:23;dukebot;Changeset: c430a945
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2022-08-03 08:23:10 +0000
URL:       https://git.openjdk.org/jdk17u/commit/c430a9457698fd57a7926e6fab065a639ccfdeb4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update boot JDK to 18.0.2,JDK-8291588,5080634,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,arapte,kcr,kcr,2022-07-29 16:30,2023-01-19 15:05,2023-10-01 09:56,2022-08-01 08:44,jfx19,,,,,,jfx19,javafx,2022-08-03 00:00,0,noreg-build,,,,,,,,,,,,,,,,,"Now that JDK 18.0.2 has released we should update the boot JDK for JavaFX to use JDK 18.0.2.

It would be good to get this into JavaFX 19 before RDP2.",,,,,,,,,,JDK-8291727,,,,,,,,,,,,,,,,,,,,,,JDK-8300705,,,,,,,,,,,,,,,JDK-8285253,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y3ij:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-08-01 06:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/857
Date: 2022-08-01 12:06:31 +0000;;;","2022-08-01 08:43;dukebot;Changeset: 8fa89199
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2022-08-01 15:38:41 +0000
URL:       https://git.openjdk.org/jfx/commit/8fa89199e2d07763a3aaab3f3a7904c73457d4a0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Broken links in JVMTI specification,JDK-8291586,5080632,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,rgallard,rgallard,2022-07-29 15:03,2022-09-08 07:33,2023-10-01 09:56,2022-09-05 01:52,19,,,,,,20,hotspot,,0,doc-only,noreg-doc,,,,,,,,,,,,,,,,"The following anchors are broken in the JVMTI specification:

specs/jvmti.html#VirtualThreadMount
    [used in 1 file]
    specs/jvmti.html
specs/jvmti.html#VirtualThreadUnmount
    [used in 1 file]
    specs/jvmti.html
specs/jvmti/jvmti.html#GetClassLoaderClasses
    [used in 1 file]
    api/jdk.jdi/com/sun/jdi/ClassLoaderReference.html
specs/jvmti/jvmti.html#GetLoadedClasses
    [used in 1 file]
    api/jdk.jdi/com/sun/jdi/VirtualMachine.html
specs/security/standard-names.html#cipher-algorithm-names
    [used in 2 files]
    api/java.base/javax/crypto/Cipher.html
    api/java.base/java/security/KeyStore.PasswordProtection.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293333,JDK-8293334,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y3i3:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-08-04 08:05;alanb;VirtualThreadMount and VirtualThreadUnmount should be elided, meaning they shouldn't show up in the spec.;;;","2022-09-01 21:20;sspitsyn;Somehow the VirtualThreadMount and VirtualThreadUnmount found a way to appear in the capabilities section of the jvmti.html:
                    <th scope=""row""><a href=""#jvmtiCapabilities.can_support_virtual_threads""><code>can_support_virtual_threads</code></a></th><td><a href=""#VirtualThreadStart""><code>VirtualThreadStart</code></a>
                        <br>
                        <a href=""#VirtualThreadEnd""><code>VirtualThreadEnd</code></a>
                        <br>
                        <a href=""#VirtualThreadMount""><code>VirtualThreadMount</code></a>
                        <br>
                        <a href=""#VirtualThreadUnmount""><code>VirtualThreadUnmount</code></a>
                        <br>
                    </td>
                </tr>

I guess, some check is missed in the .xsl files.
;;;","2022-09-01 21:24;sspitsyn;The following has no relation to the hotspot/jvmti:
specs/jvmti/jvmti.html#GetClassLoaderClasses
    [used in 1 file]
    api/jdk.jdi/com/sun/jdi/ClassLoaderReference.html
specs/jvmti/jvmti.html#GetLoadedClasses
    [used in 1 file]
    api/jdk.jdi/com/sun/jdi/VirtualMachine.html
specs/security/standard-names.html#cipher-algorithm-names
    [used in 2 files]
    api/java.base/javax/crypto/Cipher.html
    api/java.base/java/security/KeyStore.PasswordProtection.html

The first two belong to the core-svc/debugger.
The last item belongs to the security, so I have no idea why it appeared in this bug.;;;","2022-09-02 17:17;sspitsyn;I have filed related bugs:
  JDI spec: JDK-8293333
  Security:  JDK-8293334

So that this bug only covers hotspot/jvmti spec only.;;;","2022-09-02 17:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10153
Date: 2022-09-03 00:52:56 +0000;;;","2022-09-05 01:52;dukebot;Changeset: 4067321e
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-09-05 08:51:25 +0000
URL:       https://git.openjdk.org/jdk/commit/4067321ef413cc6c934aa5e7ec652c56dfdf81eb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove JMX related tests from ProblemList-svc-vthreads.txt,JDK-8291578,5080624,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2022-07-29 12:38,2022-08-08 11:06,2023-10-01 09:56,2022-08-02 14:18,19,20,,,,,20,core-svc,,0,noreg-self,,,,,,,,,,,,,,,,,"The following problem list entries do not belong in ProblemList-svc-vthreads.txt. This problem list is meant for tests that fail when the debuggee is run with the virtual thread wrapper. These tests are not setup to run in that mode, and therefore never are. They fail when the test itself is run with the jtreg virtual thread wrapper. That support is only in the loom repo, and tests that fail due to the jtreg virtual thread wrapper belong in ProblemList-vthread.txt in the loom repo.

####
## NSK JMX Tests

####
## Unsupported functionality

vmTestbase/nsk/monitoring/ThreadMXBean/GetThreadAllocatedBytes/baseBehaviorTest_server_default/TestDescription.java 8285419 generic-all
vmTestbase/nsk/monitoring/ThreadMXBean/GetThreadAllocatedBytes/baseBehaviorTest_server_custom/TestDescription.java 8285419 generic-all
vmTestbase/nsk/monitoring/ThreadMXBean/GetThreadAllocatedBytes/baseBehaviorTest_directly/TestDescription.java 8285419 generic-all
vmTestbase/nsk/monitoring/ThreadMXBean/GetThreadAllocatedBytes/baseBehaviorTest_proxy_custom/TestDescription.java 8285419 generic-all
vmTestbase/nsk/monitoring/ThreadMXBean/GetThreadAllocatedBytes/baseBehaviorTest_proxy_default/TestDescription.java 8285419 generic-all


####
## No ThreadInfo for vthreads

vmTestbase/nsk/monitoring/ThreadInfo/isInNative/isinnative001/TestDescription.java 8285420 generic-all
vmTestbase/nsk/monitoring/ThreadInfo/getLockOwnerName/getlockownername001/TestDescription.java 8285420 generic-all
vmTestbase/nsk/monitoring/ThreadInfo/getLockName/getlockname001/TestDescription.java 8285420 generic-all
vmTestbase/nsk/monitoring/ThreadInfo/from_c/from_c001/TestDescription.java 8285420 generic-all
vmTestbase/nsk/monitoring/MemoryUsage/from/from001/TestDescription.java 8285420 generic-all
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285419,JDK-8285420,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y3gb:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2022-08-01 13:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9707
Date: 2022-08-01 20:05:02 +0000;;;","2022-08-02 14:18;dukebot;Changeset: 5acf2d7c
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-08-02 21:15:01 +0000
URL:       https://git.openjdk.org/jdk/commit/5acf2d7cb42d004e1d35834ae321f531c46594db
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] Part of JDK-8250984 absent from 11u,JDK-8291570,5080616,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,andrew,andrew,andrew,2022-07-29 11:52,2023-03-15 09:18,2023-10-01 09:56,2022-08-30 18:09,11.0.16,,,,,,11.0.17,hotspot,,0,15-na,16-na,17-na,18-na,19-na,20-na,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,oraclejdk-na,,,,,,"When JDK-8250984 was backported to 11u, JDK-8231111 (CGroups v2 support) was not present.

JDK-8231111 was added to 11u in 11.0.16. The change to test/hotspot/jtreg/containers/cgroup/PlainRead.java that was omitted in the original backport of JDK-8250984 now needs to be added to 11u so it can recognise OSCONTAINER_ERROR (=-2) as a valid value.

-    static final String good_value = ""(\\d+|-1|Unlimited)"";
+    static final String good_value = ""(\\d+|-1|-2|Unlimited)"";
",,,,,,,,,,JDK-8304271,JDK-8298937,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8231111,JDK-8250984,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,b01,11.0.16,,generic,,,,,"0|i2y3ej:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-07-29 13:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1289
Date: 2022-07-29 20:24:05 +0000;;;","2022-08-29 17:33;andrew;Fix Request [11u]:

Test only fix to sync an existing test with changes in 11.0.16. Test fails without this fix, and passes with.;;;","2022-08-30 18:09;dukebot;Changeset: 2f0f34ce
Author:    Andrew John Hughes <andrew@openjdk.org>
Date:      2022-08-31 01:07:29 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/2f0f34ce4cbe0f51a1bcc3145eb4d7ade9287d5d
;;;","2022-08-31 21:50;dukebot;Changeset: 2f0f34ce
Author:    Andrew John Hughes <andrew@openjdk.org>
Date:      2022-08-31 01:07:29 +0000
URL:       https://git.openjdk.org/jdk11u/commit/2f0f34ce4cbe0f51a1bcc3145eb4d7ade9287d5d
;;;","2022-11-15 02:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/175
Date: 2022-11-15 10:08:51 +0000;;;","2022-12-16 02:49;jdowland;FIx Request (8u)

Please consider this for 8u as part of cgroups v2 support. It's clean. Thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Bump update version of OpenJDK: 8u345,JDK-8291568,5080614,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,andrew,andrew,andrew,2022-07-29 11:03,2022-08-01 13:20,2023-10-01 09:56,2022-07-30 09:48,,,,,,,openjdk8u345,infrastructure,,0,jdk8u-critical-request,jdk8u-critical-yes,,,,,,,,,,,,,,,,"An interim release is required to revert JDK-8194154 which breaks compatibility with the use of  the `user.dir`  system property.

This version bump will take place in the jdk8u repository only and be superseded by JDK-8287521 when 8u-dev is promoted.
",,,,,,,,,,JDK-8291647,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8194154,JDK-8287521,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,b01,openjdk8u342,,generic,,,,,"0|i2y3e3:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@271b8dfc,,,,,,,,,"2022-07-29 13:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u/pull/15
Date: 2022-07-29 20:33:47 +0000;;;","2022-07-30 09:37;andrew;Critical Fix Request [8u]:

Necessary admin for the interim release. Self-approving as this is trivial.;;;","2022-07-30 09:48;dukebot;Changeset: 244f98e4
Author:    Andrew John Hughes <andrew@openjdk.org>
Date:      2022-07-30 16:46:45 +0000
URL:       https://git.openjdk.org/jdk8u/commit/244f98e4eb5cd16d2b8ff11b6aa98787ed7c2a10
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
x86: compiler/vectorization/TestReverseBitsVector.java fails,JDK-8291559,5080601,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-07-29 06:39,2022-08-03 20:45,2023-10-01 09:56,2022-07-31 11:51,20,,,,,,20,hotspot,,0,c2,oracle-triage-20,testbug,,,,,,,,,,,,,,,"Newly added test fails on x86_32:

$ CONF=linux-x86-server-fastdebug make test TEST=compiler/vectorization/TestReverseBitsVector.java

Failed IR Rules (2) of Methods (2)
----------------------------------
1) Method ""public void compiler.vectorization.TestReverseBitsVector.test_reverse_int1(int[],int[])"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={""avx2"", ""true""}, counts={""ReverseV"", "" > 0 ""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: ReverseV
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!

2) Method ""public void compiler.vectorization.TestReverseBitsVector.test_reverse_long1(long[],long[])"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={""avx2"", ""true""}, counts={""ReverseV"", "" > 0 ""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: ReverseV
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290034,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y3b7:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-29 07:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9685
Date: 2022-07-29 13:49:59 +0000;;;","2022-07-31 11:51;dukebot;Changeset: acbe093a
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-07-31 18:49:21 +0000
URL:       https://git.openjdk.org/jdk/commit/acbe093a66d86904266e390c9dc5da2da34d8982
;;;","2022-08-01 11:42;dlong;ILW = new test fails; x86_32 only; no workaround = MMH = P3;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
unify print_jni_name_prefix_on and print_jni_name_suffix_on on posix platforms,JDK-8291558,5080600,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-07-29 06:35,2022-08-08 11:02,2023-10-01 09:56,2022-08-01 06:30,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,print_jni_name_prefix_on and print_jni_name_suffix_on can be unified on the OpenJDK  posix platforms.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2y3az:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-07-29 07:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9686
Date: 2022-07-29 14:24:13 +0000;;;","2022-08-01 06:29;dukebot;Changeset: 464085ed
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-08-01 13:24:31 +0000
URL:       https://git.openjdk.org/jdk/commit/464085ed901029d2380d207e53a00106bc91109a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RISC-V: jdk uses misaligned memory access when AvoidUnalignedAccess enabled,JDK-8291550,5080590,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vkempik,vkempik,vkempik,2022-07-29 03:08,2023-06-03 05:42,2023-10-01 09:56,2023-05-13 23:57,19,20,21,,,,21,hotspot,,0,oraclejdk-na,oracle-triage-20,,,,,,,,,,,,,,,,"I have tried riscv builds of jdk on risc-v core ( running on fpga) without misaligned memory access support and without misaligned access emulation support in m-mode.
I have seen few errors ( SIG_ILL, ILL_ILLTRP), first one is in MacroAssembler::stop()

void MacroAssembler::stop(const char* msg) {
 BLOCK_COMMENT(msg);
 illegal_instruction(Assembler::csr::time);
 emit_int64((uintptr_t)msg);
}

the issue happens in inlined emit_int64. it's code:
 void emit_int64( int64_t x)  { *((int64_t*) end()) = x; set_end(end() + sizeof(int64_t)); }

but the end() pointer is shared between multiple methods, like emit_int32, emit_int8, and non of them cares about natural type alignment, for example:
 void emit_int32(int32_t x) {
   address curr = end();
   *((int32_t*) curr) = x;
   set_end(curr + sizeof(int32_t));
 }

 void emit_int8(int8_t x1) {
   address curr = end();
   *((int8_t*)  curr++) = x1;
   set_end(curr);
 }

I have worked around this issue by replacing one emit_int64 by two emit_int32 ( on lower and upper parts of msg ptr). It allowed me to pass this error, then next one appeared. 
In templateInterpreter, in code generated for putStatic:
it has multiple entrance headers ( for stack setup) and one of them uses misaligned access ( lhu a3, 1(s6); it loads 16-bit value from address s6+1; where s6 is a pointer with even value).

0x3f89d033c0:  ff8a0a13          addi          s4,s4,-8
0x3f89d033c4:  00aa3023          sd            a0,0(s4)
0x3f89d033c8:  0380006f          j             56                              # 0x3f89d03400
0x3f89d033cc:  ff8a0a13          addi          s4,s4,-8
0x3f89d033d0:  00aa2027          fsw           fa0,0(s4)
0x3f89d033d4:  02c0006f          j             44                              # 0x3f89d03400
0x3f89d033d8:  ff0a0a13          addi          s4,s4,-16
0x3f89d033dc:  00aa3027          fsd           fa0,0(s4)
0x3f89d033e0:  0200006f          j             32                              # 0x3f89d03400
0x3f89d033e4:  ff0a0a13          addi          s4,s4,-16
0x3f89d033e8:  000a3423          sd            zero,8(s4)
0x3f89d033ec:  00aa3023          sd            a0,0(s4)
0x3f89d033f0:  0100006f          j             16                              # 0x3f89d03400
0x3f89d033f4:  ff8a0a13          addi          s4,s4,-8
0x3f89d033f8:  0005053b          addw          a0,a0,zero
0x3f89d033fc:  00aa3023          sd            a0,0(s4)
0x3f89d03400:  001b5683          lhu           a3,1(s6). <— MISALLIGNED ACCESS
0x3f89d03404:  00569613          slli          a2,a3,5
0x3f89d03408:  00cd0633          add           a2,s10,a2
0x3f89d0340c:  02860493          addi          s1,a2,40
0x3f89d03410:  00048493          mv            s1,s1
0x3f89d03414:  0ff0000f          fence         iorw,iorw
0x3f89d03418:  0004e483          lwu           s1,0(s1)
0x3f89d0341c:  0af0000f          fence         ir,iorw",risc-v cpu core without misaligned memory access support,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309405,,,,JDK-8305056,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,"0|i2y38r:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-31 19:23;qamai;I suggest changing the title to ""Unaligned accesses are undefined behaviours"" and making the issue not specific to riscv;;;","2022-08-01 13:27;vkempik;why do you think so ?
Openjdk on riscv has option - AvoidUnalignedAccess which is enabled by default, and still jdk is not avoiding it properly.;;;","2023-04-25 08:30;vkempik;8305056 fixes issues in shared code, this bug is risc-v specific;;;","2023-04-25 08:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13645
Date: 2023-04-25 15:37:30 +0000;;;","2023-05-13 23:57;dukebot;Changeset: 37093441
Author:    Vladimir Kempik <vkempik@openjdk.org>
Date:      2023-05-14 06:56:03 +0000
URL:       https://git.openjdk.org/jdk/commit/37093441661c26f333aac00d16aea00c3341d314
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/jfr/event/runtime/TestClassLoaderStatsEvent.java Value not equal to 2, field='hiddenClassCount', value='0'",JDK-8291524,5080560,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,lmesnik,lmesnik,2022-07-28 21:58,2022-08-08 11:10,2023-10-01 09:56,2022-08-02 07:46,19,,,,,,19,hotspot,,0,atr,imt,noreg-self,,,,,,,,,,,,,,,"Test
jdk/jfr/event/runtime/TestClassLoaderStatsEvent.java 
fails with 
Value not equal to 2, field='hiddenClassCount', value='0'

log:
Hello
Event:jdk.ClassLoaderStatistics {
  startTime = 11:01:31.294 (2022-07-05)
  classLoader = jdk.internal.loader.ClassLoaders$PlatformClassLoader (id = 2)
  parentClassLoader = N/A
  classLoaderData = 0x7F74801C8B40
  classCount = 108
  chunkSize = 64.3 kB
  blockSize = 62.6 kB
  hiddenClassCount = 0
  hiddenChunkSize = 0 bytes
  hiddenBlockSize = 0 bytes
}


Event:jdk.ClassLoaderStatistics {
  startTime = 11:01:31.294 (2022-07-05)
  classLoader = N/A
  parentClassLoader = N/A
  classLoaderData = 0x7F7480063950
  classCount = 1836
  chunkSize = 704.0 kB
  blockSize = 615.1 kB
  hiddenClassCount = 90
  hiddenChunkSize = 34.1 kB
  hiddenBlockSize = 22.0 kB
}


Event:jdk.ClassLoaderStatistics {
  startTime = 11:01:31.294 (2022-07-05)
  classLoader = jdk.jfr.event.runtime.TestClassLoaderStatsEvent$DummyClassLoader (id = 4)
  parentClassLoader = jdk.internal.loader.ClassLoaders$AppClassLoader (id = 3)
  classLoaderData = 0x7F744C008500
  classCount = 2
  chunkSize = 768 bytes
  blockSize = 567 bytes
  hiddenClassCount = 0
  hiddenChunkSize = 0 bytes
  hiddenBlockSize = 0 bytes
}


Error: Value not equal to 2, field='hiddenClassCount', value='0': expected 0 to equal 2
Failed event:
jdk.ClassLoaderStatistics {
  startTime = 11:01:31.294 (2022-07-05)
  classLoader = jdk.jfr.event.runtime.TestClassLoaderStatsEvent$DummyClassLoader (id = 4)
  parentClassLoader = jdk.internal.loader.ClassLoaders$AppClassLoader (id = 3)
  classLoaderData = 0x7F744C008500
  classCount = 2
  chunkSize = 768 bytes
  blockSize = 567 bytes
  hiddenClassCount = 0
  hiddenChunkSize = 0 bytes
  hiddenBlockSize = 0 bytes
}


----------System.err:(16/1133)----------
java.lang.RuntimeException: Value not equal to 2, field='hiddenClassCount', value='0': expected 0 to equal 2
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.jfr.EventField.lambda$equal$0(EventField.java:52)
	at jdk.test.lib.jfr.EventField.doAssert(EventField.java:116)
	at jdk.test.lib.jfr.EventField.equal(EventField.java:52)
	at jdk.jfr.event.runtime.TestClassLoaderStatsEvent.main(TestClassLoaderStatsEvent.java:83)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1596)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Value not equal to 2, field='hiddenClassCount', value='0': expected 0 to equal 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Value not equal to 2, field='hiddenClassCount', value='0': expected 0 to equal 2
----------rerun:(32/2329)*----------",,,,,,,,,,JDK-8291779,JDK-8291747,JDK-8291724,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y323:",9223372036854775807,b34,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-08-01 10:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/158
Date: 2022-08-01 14:53:33 +0000;;;","2022-08-02 07:45;dukebot;Changeset: 54c093ab
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-08-02 14:41:38 +0000
URL:       https://git.openjdk.org/jdk19/commit/54c093ab0e71cfa80e62e54c5cb7aa12059e821b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/api/event/TestShouldCommit.java failed with Unexpected value of shouldCommit(),JDK-8291519,5080554,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,lmesnik,lmesnik,2022-07-28 19:16,2022-10-17 13:54,2023-10-01 09:56,2022-10-11 03:08,19,,,,,,20,hotspot,,0,atr,imt,,,,,,,,,,,,,,,,"Test jdk/jfr/api/event/TestShouldCommit.java failed while executed outside of Mach5 on OL 7.9, Windows 2012 and OL 6.10
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y30r:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-08-01 05:46;egahlin;This is likely related to clock timing. 

In the past we have seen issus with fast time on older systems, which can be fixed by using -XX:-UseFastUnorderedTimeStamps. See https://bugs.openjdk.org/browse/JDK-8191415
;;;","2022-08-04 15:22;egahlin;This look similar to JDK-8291890;;;","2022-10-07 12:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10611
Date: 2022-10-07 17:41:10 +0000;;;","2022-10-11 03:08;dukebot;Changeset: fba763f8
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-10-11 10:06:17 +0000
URL:       https://git.openjdk.org/jdk/commit/fba763f82528d2825831a26b4ae4e090c602208f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Redefinition of EXIT_FAILURE in libw2k_lsa_auth,JDK-8291511,5080539,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2022-07-28 10:22,2022-08-23 13:13,2023-10-01 09:56,2022-08-15 09:30,,,,,,,20,security-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,"EXIT_FAILURE is defined as -1 in NativeCreds.c, and is not only unused, but also incorrect, as it incorrectly redefines the existing EXIT_FAILURE, which is actually 1 on Windows, not -1. Can be safely commented out as it isn't used anywhere, except for in a call to ExitProcess which has also been commented out as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y2xf:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-07-28 10:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9678
Date: 2022-07-28 17:23:05 +0000;;;","2022-08-15 09:30;dukebot;Changeset: b00eedeb
Author:    Julian Waters <jwaters@openjdk.org>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2022-08-15 16:27:45 +0000
URL:       https://git.openjdk.org/jdk/commit/b00eedeb029445417f99e8aa4e8fca12e5c69155
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minor cleanup could be done in sun.security,JDK-8291509,5080537,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mpowers,mpowers,mpowers,2022-07-28 09:23,2022-09-21 23:08,2023-10-01 09:56,2022-09-15 13:03,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,"JDK-8273046 is the umbrella bug for this bug. The changes were too large for a single code review, so it was decided to split JDK-8273046 into smaller chunks. This is one such chunk for files under open/src/java.base/share/classes/jsun/security (sun.security).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273046,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y2wz:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-08-22 20:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9972
Date: 2022-08-22 21:45:39 +0000;;;","2022-09-15 13:03;dukebot;Changeset: 4cec141a
Author:    Mark Powers <mpowers@openjdk.org>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2022-09-15 19:59:53 +0000
URL:       https://git.openjdk.org/jdk/commit/4cec141a90bc5d3b8ec17c024291d9c74a112cd4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Fix some tests with ""requires vm.jvmti & vm.continuations""",JDK-8291508,5080536,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aoqi,aoqi,aoqi,2022-07-28 08:57,2022-09-27 06:08,2023-10-01 09:56,2022-08-03 10:36,19,,,,,,20,hotspot,,0,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,loom,noreg-self,testbug,,,,,,,,,,,,"vmTestbase/nsk/jvmti/GetThreadInfo/thrinfo001/TestDescription.java and vmTestbase/nsk/jvmti/RedefineClasses/StressRedefineVirtual/StressRedefineVirtual.java are added or modified by JDK-8284161, and they are failed if Loom or JVMTI is not supported.

The issue could be reproduced by zero. For example:
--------------------------------------------------
TEST: vmTestbase/nsk/jvmti/GetThreadInfo/thrinfo001/TestDescription.java
...
STDOUT:
exec [/home/aoqi/tag_req/d-default-zero-release/images/jdk/bin/java, -XX:MaxRAMPercentage=0.892857, -Djava.io.tmpdir=/home/aoqi/tag_req/d-default-zero-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jvmti_GetThreadInfo_thrinfo001_TestDescription_java/tmp, -cp, /home/aoqi/tag_req/d-default-zero-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jvmti_GetThreadInfo_thrinfo001_TestDescription_java/classes/0/vmTestbase/nsk/jvmti/GetThreadInfo/thrinfo001/TestDescription.d:/home/aoqi/tag_req/d-default-zero-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jvmti_GetThreadInfo_thrinfo001_TestDescription_java/classes/0/vmTestbase:/home/aoqi/tag_req/d-default-zero-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jvmti_GetThreadInfo_thrinfo001_TestDescription_java/classes/0/test/lib, -Djava.library.path=/home/aoqi/tag_req/d-default-zero-release/images/test/hotspot/jtreg/native, --enable-preview, -agentlib:thrinfo001, nsk.jvmti.GetThreadInfo.thrinfo001]
Error occurred during initialization of VM
agent library failed to init: thrinfo001
Wrong result of a valid call to GetEnv !
...
--------------------------------------------------
TEST: vmTestbase/nsk/jvmti/RedefineClasses/StressRedefineVirtual/StressRedefineVirtual.java
...
STDOUT:
exec [/home/aoqi/tag_req/d-default-zero-release/images/jdk/bin/java, -XX:MaxRAMPercentage=0.892857, -Djava.io.tmpdir=/home/aoqi/tag_req/d-default-zero-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jvmti_RedefineClasses_StressRedefineVirtual_StressRedefineVirtual_java/tmp, -cp, /home/aoqi/tag_req/d-default-zero-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jvmti_RedefineClasses_StressRedefineVirtual_StressRedefineVirtual_java/classes/0/vmTestbase/nsk/jvmti/RedefineClasses/StressRedefineVirtual/StressRedefineVirtual.d:/home/aoqi/tag_req/d-default-zero-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jvmti_RedefineClasses_StressRedefineVirtual_StressRedefineVirtual_java/classes/0/vmTestbase:/home/aoqi/tag_req/d-default-zero-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jvmti_RedefineClasses_StressRedefineVirtual_StressRedefineVirtual_java/classes/0/test/lib, -Djava.library.path=/home/aoqi/tag_req/d-default-zero-release/images/test/hotspot/jtreg/native, --enable-preview, -agentlib:stressRedefine, nsk.jvmti.RedefineClasses.StressRedefine, ./bin, -corruptingBytecodeProbability, 0.0, -virtualThreads]
Error occurred during initialization of VM
agent library failed to init: stressRedefine
test/hotspot/jtreg/vmTestbase/nsk/jvmti/RedefineClasses/StressRedefine/stressRedefine.cpp: Failed to call GetEnv: error=-3
...
--------------------------------------------------",,,,,,,,,,JDK-8294458,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284161,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y2wr:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-07-28 09:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9677
Date: 2022-07-28 16:11:12 +0000;;;","2022-08-01 09:15;aoqi;The original two XMLDecoder tests are split into JDK-8291640.;;;","2022-08-03 10:36;dukebot;Changeset: 0cc49fd9
Author:    Ao Qi <aoqi@openjdk.org>
Committer: Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-08-03 17:33:11 +0000
URL:       https://git.openjdk.org/jdk/commit/0cc49fd9eac5259543a3c41b7a32b6e01a1b0ad5
;;;","2022-08-24 10:32;aoqi;Fix request (19u)

Low risk, only test changes. Clean backport. The changed tests passed.;;;","2022-08-24 10:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/14
Date: 2022-08-24 17:27:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mouse or touch presses on a non-focusable region don't clear the focusVisible flag of the current focus owner,JDK-8291502,5080530,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mstrauss,mstrauss,mstrauss,2022-07-28 07:25,2022-08-05 13:51,2023-10-01 09:56,2022-08-02 07:35,jfx19,,,,,,jfx19,javafx,,0,,,,,,,,,,,,,,,,,,"The `focusVisible` flag is only set on a node when it acquires input focus using a keyboard interaction, and it is cleared by mouse and touch interactions.

It is not necessary for a node to lose input focus in order to lose focusVisible. Currently, clicking on a region of the scene that does not contain a focusable node does not clear the focusVisible flag.",,,,,,,,,,JDK-8291728,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268225,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y2vf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-07-28 08:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/852
Date: 2022-07-28 14:59:06 +0000;;;","2022-08-02 07:35;dukebot;Changeset: 5febacae
Author:    Michael Strauß <mstrauss@openjdk.org>
Date:      2022-08-02 14:33:38 +0000
URL:       https://git.openjdk.org/jfx/commit/5febacae1bf6776a31e151ef223739576dab67e6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allocating card table before heap causes underflow asserts in CardTable::addr_for(),JDK-8291496,5080524,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,thartmann,thartmann,2022-07-28 06:26,2023-05-19 00:49,2023-10-01 09:56,2022-08-10 02:43,11,17,18,19,20,9,19,hotspot,,0,amazon-interest,gc-g1,gc-pending-review,jdk19-fix-request,jdk19-fix-yes,,,,,,,,,,,,,"While trying to reproduce JDK-8288970 with rr's chaos mode, I hit the following assert:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8390/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/797c2d6c-cad2-4366-a6f2-60684f87e042/runs/2190c5db-12ca-4203-9eb8-a16739c5beae/workspace/open/src/hotspot/share/utilities/globalDefinitions.hpp:453), pid=2484426, tid=2484446
#  assert(left >= right) failed: avoid underflow - left: 0x000000006ffed800 right: 0xffffffc388dc3000
#
# JRE version: Java(TM) SE Runtime Environment (20.0+7) (fastdebug build 20-ea+7-335)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+7-335, mixed mode, tiered, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x950acf]  CardTable::addr_for(unsigned char const*) const+0xef
#

Stack: [0x0000549120646000,0x0000549120747000],  sp=0x0000549120744920,  free space=1018k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x950acf]  CardTable::addr_for(unsigned char const*) const+0xef
V  [libjvm.so+0xd88c64]  G1CardCounts::clear_range(MemRegion)+0x54
V  [libjvm.so+0xf58304]  HeapRegionManager::expand_exact(unsigned int, unsigned int, WorkerThreads*)+0x154
V  [libjvm.so+0xf58a6d]  HeapRegionManager::expand_and_allocate_humongous(unsigned int)+0x5d
V  [libjvm.so+0xda625b]  G1CollectedHeap::humongous_obj_allocate(unsigned long)+0x1ab
V  [libjvm.so+0xda7bcd]  G1CollectedHeap::attempt_allocation_humongous(unsigned long)+0x17d
V  [libjvm.so+0x15ed18e]  MemAllocator::allocate() const+0x17e
V  [libjvm.so+0x1aca087]  TypeArrayKlass::allocate_common(int, bool, JavaThread*)+0x307
V  [libjvm.so+0x1727905]  oopFactory::new_typeArray(BasicType, int, JavaThread*)+0xb5
V  [libjvm.so+0x1016026]  InterpreterRuntime::newarray(JavaThread*, BasicType, int)+0xb6
j  DefinedAsHiddenKlass+0x0000388665c83800.<clinit>()V+2
v  ~StubRoutines::call_stub 0x000058810ea51d76
V  [libjvm.so+0x10364e4]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x514
V  [libjvm.so+0xfe1890]  InstanceKlass::call_class_initializer(JavaThread*)+0x270
V  [libjvm.so+0xfe5401]  InstanceKlass::initialize_impl(JavaThread*)+0x6f1
V  [libjvm.so+0x1adfd4b]  Unsafe_EnsureClassInitialized0+0x13b
j  jdk.internal.misc.Unsafe.ensureClassInitialized0(Ljava/lang/Class;)V+0 java.base@20-ea
j  jdk.internal.misc.Unsafe.ensureClassInitialized(Ljava/lang/Class;)V+14 java.base@20-ea
j  jdk.internal.reflect.MethodHandleAccessorFactory.ensureClassInitialized(Ljava/lang/Class;)V+14 java.base@20-ea
j  jdk.internal.reflect.MethodHandleAccessorFactory.newConstructorAccessor(Ljava/lang/reflect/Constructor;)Ljdk/internal/reflect/ConstructorAccessorImpl;+16 java.base@20-ea
j  jdk.internal.reflect.ReflectionFactory.newConstructorAccessor(Ljava/lang/reflect/Constructor;)Ljdk/internal/reflect/ConstructorAccessor;+67 java.base@20-ea
j  java.lang.reflect.Constructor.acquireConstructorAccessor()Ljdk/internal/reflect/ConstructorAccessor;+58 java.base@20-ea
j  java.lang.reflect.Constructor.newInstanceWithCaller([Ljava/lang/Object;ZLjava/lang/Class;)Ljava/lang/Object;+33 java.base@20-ea
j  java.lang.reflect.ReflectAccess.newInstance(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;+4 java.base@20-ea
j  jdk.internal.reflect.ReflectionFactory.newInstance(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;+7 java.base@20-ea
j  java.lang.Class.newInstance()Ljava/lang/Object;+117 java.base@20-ea
j  LotsUnloadApp.run()V+27
j  java.lang.Thread.run()V+13 java.base@20-ea
v  ~StubRoutines::call_stub 0x000058810ea51d76
V  [libjvm.so+0x10364e4]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x514
V  [libjvm.so+0x1036d84]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x4b4
V  [libjvm.so+0x10371f7]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x77
V  [libjvm.so+0x11c76eb]  thread_entry(JavaThread*, JavaThread*)+0x12b
V  [libjvm.so+0x106d7e8]  JavaThread::thread_main_inner()+0x238
V  [libjvm.so+0x1a8c5e0]  Thread::call_run()+0x100
V  [libjvm.so+0x174f474]  thread_native_entry(Thread*)+0x104
",,,,,,,,,,JDK-8292501,JDK-8292228,JDK-8292516,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-07-28 06:27;thartmann;hs_err_pid2484426.log;https://bugs.openjdk.org/secure/attachment/100196/hs_err_pid2484426.log",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y2u3:",9223372036854775807,b35,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-07-28 06:27;thartmann;To reproduce, run the following (required 16 iterations for me):
rr record -h jdk-20/fastdebug/bin/java -cp /oracle/jdk3/open/JTwork/classes/runtime/cds/appcds/dynamicArchive/LotsUnloadTest3_id7.d:/oracle/jdk3/open/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive:/oracle/jdk3/open/JTwork/classes/test/lib:/oracle/jdk3/open/test/lib:/oracle/jdk3/open/JTwork/classes/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/test-classes:/oracle/jdk3/open/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/test-classes:/home/tobias/programs/jtreg/lib/javatest.jar:/home/tobias/programs/jtreg/lib/jtreg.jar -XX:+VerifyBeforeGC -XX:+VerifyAfterGC -XX:+VerifyDuringGC -Xmx64m -Xms32m -Xlog:gc,gc+marking=trace,cds,gc+verify,class+init -XX:-UseCompressedOops -XX:+UnlockDiagnosticVMOptions -XX:-UseCompressedOops -XX:+IgnoreUnrecognizedVMOptions -Xshare:off -XX:+VerifyDuringGC -XX:+VerifyBeforeGC -XX:+VerifyAfterGC -XX:+UseG1GC -Xshare:off -cp /oracle/jdk3/open/JTwork/scratch/LotsUnloadApp.jar LotsUnloadApp;;;","2022-07-28 06:39;thartmann;I can reproduce this reliably in 1/20 runs on average.;;;","2022-07-28 06:56;thartmann;With JDK 17.0.5 and 18.0.2 the stack trace is different:

#  Internal Error (/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S66830/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3d5f8ab6-9afc-494f-b522-99fb95c4992c/runs/5797d95c-314c-4c3b-af67-87deb4e0b374/workspace/open/src/hotspot/share/utilities/globalDefinitions.hpp:424), pid=2644358, tid=2644381
#  assert(left >= right) failed: avoid underflow - left: 0x000000006ffeb640 right: 0xfffffff5a1d5e000
#
# JRE version: Java(TM) SE Runtime Environment (18.0.2+9) (fastdebug build 18.0.2+9-61)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18.0.2+9-61, mixed mode, tiered, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd93292]  G1PostEvacuateCollectionSetCleanupTask2::RedirtyLoggedCardsTask::do_work(unsigned int)+0x492

Stack: [0x00007fe062ae1000,0x00007fe062be1000],  sp=0x00007fe062bdfcd0,  free space=1019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd93292]  G1PostEvacuateCollectionSetCleanupTask2::RedirtyLoggedCardsTask::do_work(unsigned int)+0x492
V  [libjvm.so+0xc7fb16]  G1BatchedTask::work(unsigned int)+0x1a6
V  [libjvm.so+0x1a9220e]  WorkerThread::run()+0x6e
V  [libjvm.so+0x1934c30]  Thread::call_run()+0x100
V  [libjvm.so+0x16147e4]  thread_native_entry(Thread*)+0x104
;;;","2022-07-28 12:32;ayang;From the hs file:

```
Card table byte_map: [0x000000006ffdd000,0x000000006fffd000] _byte_map_base: 0xffffffc388dc3000

Heap:
 garbage-first heap   total 33792K, used 32155K [0x000079ce43400000, 0x000079ce47400000)
```
Note that `byte_map` is below heap-start, `0x000000006ffdd000` < `0x000079ce43400000`.

That's usually not the case. For example, on my box:
```
$ java -Xms32m -Xmx64m -Xlog:gc+barrier=trace,gc+heap+exit --version 
[0.027s][trace][gc,barrier] G1CardTable::G1CardTable: 
[0.027s][trace][gc,barrier]     &_byte_map[0]: 0x00007f9cb20fc000  &_byte_map[_last_valid_index]: 0x00007f9cb211bfff
[0.027s][trace][gc,barrier]     _byte_map_base: 0x00007f9cb191c000
...
[0.428s][info ][gc,heap,exit] Heap
[0.428s][info ][gc,heap,exit]  garbage-first heap   total 32768K, used 5120K [0x00000000fc000000, 0x0000000100000000)
```

(I suspect the address ordering flip is caused by the use of CDS.)

The relevant code is `G1CardTable::initialize` and `CardTable::addr_for`:

`_byte_map_base = _byte_map - (uintptr_t(low_bound) >> _card_shift);`

vs

`size_t delta = pointer_delta(p, _byte_map_base, sizeof(CardValue));`

Note that `pointer_delta` is *not* used at the initialization of `_byte_map_base`. One simple fix would be `size_t delta = p - _byte_map_base;` on the use-site. IOW, this is a ""false"" assertion and should not affect product builds.
;;;","2022-08-04 08:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/160
Date: 2022-08-03 16:13:50 +0000;;;","2022-08-08 02:08;tschatzl;Fix Request:

- Impact: the change fixes a VM crash due to a wrong assert in debug mode 

- Risk estimation: minimal. The problem and the fix are well understood - it removes a wrong assert. No difference in the product.

- Test coverage: for reproduction this needs changes (a hack) to the VM that allocates the card table (a GC data structure) below the java heap; as in existing code we always allocate the card table after the java heap, this does not seem to occur in practice without using either a debug tool (rr in chaos mode) or hacking the VM. Tier 1-5 run.
The bug has been in the VM *at least* since JDK 9 and we have seen no reports about it.

- Patch/Reviewers: [~kbarrett]; see also PR request at https://git.openjdk.org/jdk19/pull/160;;;","2022-08-10 02:43;dukebot;Changeset: 5fce02e3
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-08-10 09:40:43 +0000
URL:       https://git.openjdk.org/jdk19/commit/5fce02e39a6f50e97d7a5c6003ae0220e62933b5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(false) failed: infinite loop in PhaseIterGVN::transform_old with -XX:+StressIGVN,JDK-8291466,5080495,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pli,shade,shade,2022-07-28 01:12,2022-09-21 04:33,2023-10-01 09:56,2022-08-29 06:09,20,,,,,,20,hotspot,,0,c2,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,,,,,,,,,,,,"On attached Fuzzer test:

$ build/linux-x86_64-server-fastdebug/images/jdk/bin/java -XX:-TieredCompilation -XX:+StressIGVN -Xcomp -XX:CompileOnly=Test  -cp 0004/ Test

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/opto/phaseX.cpp:1162), pid=3177918, tid=3177931
#  assert(false) failed: infinite loop in PhaseIterGVN::transform_old


Current CompileTask:
C2:    158   11    b        Test::sMeth (250 bytes)

Stack: [0x00007fab2e4b4000,0x00007fab2e5b5000],  sp=0x00007fab2e5af5a0,  free space=1005k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x17b3771]  PhaseIterGVN::transform_old(Node*)+0x381
V  [libjvm.so+0x17ac69e]  PhaseIterGVN::optimize()+0x7e
V  [libjvm.so+0xb2d8aa]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x6fa
V  [libjvm.so+0xb2a3ac]  Compile::Optimize()+0x47c
V  [libjvm.so+0xb2c474]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x12a4
V  [libjvm.so+0x9426cb]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x69b
V  [libjvm.so+0xb3b708]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xac8
V  [libjvm.so+0xb3c418]  CompileBroker::compiler_thread_loop()+0x578
V  [libjvm.so+0x1055ec0]  JavaThread::thread_main_inner()+0x240
V  [libjvm.so+0x1b7a374]  Thread::call_run()+0x104
V  [libjvm.so+0x172bd3c]  thread_native_entry(Thread*)+0x10c

Bisection points to JDK-8289996.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289996,JDK-8291710,,,,,,,,,,"2022-07-28 01:12;shade;0004.zip;https://bugs.openjdk.org/secure/attachment/100182/0004.zip","2022-08-04 20:26;pli;Test.java;https://bugs.openjdk.org/secure/attachment/100313/Test.java",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y2nn:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-28 04:25;thartmann;[~pli], could you please have a look?;;;","2022-07-28 04:26;thartmann;ILW = Assert during C2 compilation due to infinite loop, with generated test and stress option, no workaround but disable compilation of affected method = HLM = P3;;;","2022-08-01 23:11;thartmann;The change that introduced this regression will be backed out. Closing this as duplicate of the backout (JDK-8291597).;;;","2022-08-04 20:26;pli;Without my patch, this assertion still fails (with lower probability). It's not introduced by my patch. I have attached a small test case to reproduce.

java -Xbatch -XX:-TieredCompilation -XX:+StressIGVN Test

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/phaseX.cpp:1162
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/penli01/jdk_src/src/hotspot/share/opto/phaseX.cpp:1162), pid=3199330, tid=3199348
#  assert(false) failed: infinite loop in PhaseIterGVN::transform_old
#
# JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-internal-adhoc.penli01.jdksrc)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-internal-adhoc.penli01.jdksrc, mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1827484]  PhaseIterGVN::transform_old(Node*)+0x374
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /mnt/local/tmp/core.3199330)
#
# An error report file with more information is saved as:
# /mnt/local/tmp/hs_err_pid3199330.log
#
# Compiler replay data is saved as:
# /mnt/local/tmp/replay_pid3199330.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
;;;","2022-08-04 20:27;pli;I will propose a patch to fix this next week.;;;","2022-08-10 02:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9820
Date: 2022-08-10 09:33:58 +0000;;;","2022-08-29 06:09;dukebot;Changeset: a88a9e34
Author:    Pengfei Li <pli@openjdk.org>
Date:      2022-08-29 13:06:20 +0000
URL:       https://git.openjdk.org/jdk/commit/a88a9e344f66bca21f3a01dbbcea19b52af14865
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
assert(false) failed: bad AD file,JDK-8291461,5079914,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlong,webbuggrp,webbuggrp,2022-07-24 20:12,2022-10-16 22:52,2023-10-01 09:56,2022-08-11 00:52,11.0.16,11.0.17,11.0.2,,,,11.0.18-oracle,hotspot,,0,dcsswa,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-20,reproducer-yes,sustaining,webbug,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Reproduce:
$ java -version
openjdk version ""11.0.16-internal"" 2022-07-19
OpenJDK Runtime Environment (fastdebug build 11.0.16-internal+0-adhoc.root.jdk11u)
OpenJDK 64-Bit Server VM (fastdebug build 11.0.16-internal+0-adhoc.root.jdk11u, mixed mode)

$ java -XX:-TieredCompilation Test
i i1 f = 149,332,1126610698
i13 i14 i15 = 167,-366,3
i16 i17 i18 = 154974697,2,-13
i19 i20 i21 = 1,-1602967,152
i22 i23 i24 = -55,2,67
lArr dArr1 = -20088,4675172230091494219
Test.instanceCount dFld Test.iArrFld = -22316356368,-4522503712511210029,-31771
vMeth1_check_sum: 6995061562579910024
lMeth_check_sum: 1071291809
vMeth_check_sum: 4634577747107210838
i i1 f = 149,332,1126610698
i13 i14 i15 = 167,-366,3
i16 i17 i18 = 466825686,2,-13
i19 i20 i21 = 1,-1602967,152
i22 i23 i24 = -55,2,67
lArr dArr1 = -20088,4675172230091494219
Test.instanceCount dFld Test.iArrFld = -67222898784,-4518000112215972118,-31771
vMeth1_check_sum: -4456620948549731568
lMeth_check_sum: 2142583618
vMeth_check_sum: 112073740385900265
o5672	StoreL	=== o5671 o618 o1105 o5658  [[o5679  359 ]]  @java/lang/Class:exact+120 *, name=instanceCount, idx=8;  Memory: @java/lang/Class:exact+120 *, name=instanceCount, idx=8;

--N: o5672	StoreL	=== o5671 o618 o1105 o5658  [[o5679  359 ]]  @java/lang/Class:exact+120 *, name=instanceCount, idx=8;  Memory: @java/lang/Class:exact+120 *, name=instanceCount, idx=8;

   --N: o1105	AddP	=== _ o1544 o1544 o1545  [[o4055 o620 o4277 o776 o599 o4160 o5672 ]]   Oop:java/lang/Class:exact+120 *
   ANY_REGP  215  addP_rReg_imm
   RREGP  215  addP_rReg_imm
   NO_RAX_REGP  215  addP_rReg_imm
   NO_RBP_REGP  215  addP_rReg_imm
   NO_RAX_RBX_REGP  215  addP_rReg_imm
   RAX_REGP  215  addP_rReg_imm
   RBX_REGP  215  addP_rReg_imm
   RSI_REGP  215  addP_rReg_imm
   RDI_REGP  215  addP_rReg_imm
   R15_REGP  215  addP_rReg_imm
   REX_REGP  215  addP_rReg_imm
   INDIRECT  215  addP_rReg_imm
   INDOFFSET8  105  INDOFFSET8
   INDOFFSET32  115  INDOFFSET32
   INDINDEX  180  INDINDEX
   STACKSLOTP  315  storeSSP
   MEMORY  105  INDOFFSET8
   _AddP_any_RegP_rRegL  170  _AddP_any_RegP_rRegL

      --N: o1544	ConP	=== o0  [[o1105 o1105 o1255 o1255 o1251 o1251 o2049 o2049 o1247 o1247 ]]  #java/lang/Class:exact *  Oop:java/lang/Class:exact *
      IMMP  10  IMMP
      ANY_REGP  100  loadConP
      RREGP  100  loadConP
      NO_RAX_REGP  100  loadConP
      NO_RBP_REGP  100  loadConP
      NO_RAX_RBX_REGP  100  loadConP
      RAX_REGP  100  loadConP
      RBX_REGP  100  loadConP
      RSI_REGP  100  loadConP
      RDI_REGP  100  loadConP
      R15_REGP  100  loadConP
      REX_REGP  100  loadConP
      INDIRECT  100  loadConP
      STACKSLOTP  200  storeSSP
      MEMORY  100  INDIRECT

      --N: o1545	ConL	=== o0  [[o1105 ]]  #long:120
      IMML  20  IMML
      IMML8  5  IMML8
      IMMUL32  10  IMMUL32
      IMML32  15  IMML32
      IMML_127  10  IMML_127
      RREGL  70  loadConUL32
      NO_RAX_RDX_REGL  70  loadConUL32
      NO_RAX_REGL  70  loadConUL32
      NO_RCX_REGL  70  loadConUL32
      RAX_REGL  70  loadConUL32
      RCX_REGL  70  loadConUL32
      RDX_REGL  70  loadConUL32
      STACKSLOTL  170  storeSSL

   --N: o5658	MulReductionVL	=== _ o5669 o5659  [[o5669 o5672 o5678 ]] 
   RREGI  0  RREGI
   RAX_REGI  0  RAX_REGI
   RBX_REGI  0  RBX_REGI
   RCX_REGI  0  RCX_REGI
   RDX_REGI  0  RDX_REGI
   RDI_REGI  0  RDI_REGI
   NO_RCX_REGI  0  NO_RCX_REGI
   NO_RAX_RDX_REGI  0  NO_RAX_RDX_REGI
   STACKSLOTI  100  storeSSI

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/matcher.cpp:1591
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/root/jdk_source/jdk11u/src/hotspot/share/opto/matcher.cpp:1591), pid=72808, tid=72823
#  assert(false) failed: bad AD file
#
# JRE version: OpenJDK Runtime Environment (11.0.16) (fastdebug build 11.0.16-internal+0-adhoc.root.jdk11u)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 11.0.16-internal+0-adhoc.root.jdk11u, mixed mode, compressed oops, g1 gc, linux-amd64)
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/jiahx/JavaFuzzer/tests/0026/core.72808)
#


---------- BEGIN SOURCE ----------

---------- END SOURCE ----------

",,,,,,,,,,JDK-8295289,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8076276,,,,,,,"2022-07-27 23:46;sswsharm;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/100179/FuzzerUtils.java","2022-07-27 23:46;sswsharm;Test.java;https://bugs.openjdk.org/secure/attachment/100178/Test.java",,,,,,,,,,,x86_64,,,,,,,,,generic,,,,,"0|i2xz2j:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-27 23:49;sswsharm;Issue is not reproduced on Oracle JDK 

OS: Windows 10
JDK 11.0.16: Pass

Output:

i i1 i12 = 324,-24004,82
i13 i14 l4 = 32701,2,-2937970868
Test.instanceCount Test.sFld Test.fFld = 362,-24004,1267333898
Test.bFld Test.dFld Test.fArrFld = 0,4625908408568622067,4669315665381261312
iArrFld = 0
vMeth2_check_sum: 3569551855281928832
vMeth1_check_sum: 48986661321104
vMeth_check_sum: 2243603341394172741
i i1 i12 = 324,-24614,82
i13 i14 l4 = 32701,2,-2937970868
Test.instanceCount Test.sFld Test.fFld = 362,-24614,1267333594
Test.bFld Test.dFld Test.fArrFld = 0,4625908408568622067,4669315665381261312
iArrFld = 0
vMeth2_check_sum: 7139103710563857664
vMeth1_check_sum: 97989935177680
vMeth_check_sum: 4487206682788178621
i i1 i12 = 324,-25224,82
i13 i14 l4 = -35,2,-2937970868
Test.instanceCount Test.sFld Test.fFld = 362,-25224,1267333288
Test.bFld Test.dFld Test.fArrFld = 0,4625908408568622067,4669315665381261312
iArrFld = 0
vMeth2_check_sum: -7738088507863765120
vMeth1_check_sum: 146973005588240
vMeth_check_sum: 6730810024181998449
i i1 i12 = 324,-25834,82
i13 i14 l4 = -59,2,-2937970868
Test.instanceCount Test.sFld Test.fFld = 362,-25834,1267332984
Test.bFld Test.dFld Test.fArrFld = 0,4625908408568622067,4669315665381261312
iArrFld = 0
vMeth2_check_sum: -4168536652581836288
vMeth1_check_sum: 195954356171184
vMeth_check_sum: 8974413365575632229
i i1 i12 = 324,-26444,82
i13 i14 l4 = -65,2,-2937970868
Test.instanceCount Test.sFld Test.fFld = 362,-26444,1267332678
Test.bFld Test.dFld Test.fArrFld = 0,4625908408568622067,4669315665381261312
iArrFld = 0
vMeth2_check_sum: -598984797299907456
vMeth1_check_sum: 244334904376160
vMeth_check_sum: -7228727366740471659
i i1 i12 = 324,-27054,82
i13 i14 l4 = -66,2,-2937970868
Test.instanceCount Test.sFld Test.fFld = 362,-27054,1267332374
Test.bFld Test.dFld Test.fArrFld = 0,4625908408568622067,4669315665381261312
iArrFld = 0
vMeth2_check_sum: 2970567057982021376
vMeth1_check_sum: 293312556187248
vMeth_check_sum: -4985124025347209979
i i1 i12 = 324,-27664,82
i13 i14 l4 = 16318,2,-2937970868
Test.instanceCount Test.sFld Test.fFld = 362,-27664,1267332068
Test.bFld Test.dFld Test.fArrFld = 0,4625908408568622067,4669315665381261312
iArrFld = 0
vMeth2_check_sum: 6540118913263950208
vMeth1_check_sum: 342289565585552
vMeth_check_sum: -2741520683954134351
i i1 i12 = 324,-28274,82
i13 i14 l4 = 28606,2,-2937970868
Test.instanceCount Test.sFld Test.fFld = 362,-28274,1267331764
Test.bFld Test.dFld Test.fArrFld = 0,4625908408568622067,4669315665381261312
iArrFld = 0
vMeth2_check_sum: -8337073305163672576
vMeth1_check_sum: 391263633559760
vMeth_check_sum: -497917342561244771
i i1 i12 = 324,-28884,82
i13 i14 l4 = 31678,2,-2937970868
Test.instanceCount Test.sFld Test.fFld = 362,-28884,1267331458
Test.bFld Test.dFld Test.fArrFld = 0,4625908408568622067,4669315665381261312
iArrFld = 0
vMeth2_check_sum: -4767521449881743744
vMeth1_check_sum: 440235914440608
vMeth_check_sum: 1745685998831458757
i i1 i12 = 324,-29494,82
i13 i14 l4 = 24254,2,-2937970868
Test.instanceCount Test.sFld Test.fFld = 362,-29494,1267331154
Test.bFld Test.dFld Test.fArrFld = 0,4625908408568622067,4669315665381261312
iArrFld = 0
vMeth2_check_sum: -1197969594599814912
vMeth1_check_sum: 489224786231168
vMeth_check_sum: 3989289340223976237

Crash is reported in OpenJDK 11.0.16, moving it to JDK for the community to look at it.;;;","2022-07-28 00:50;fmatte;[~sswsharm] issue reported on fastdebug build as there is assert failure. Did you try on fastdebug build?;;;","2022-07-28 01:10;sswsharm;[~fmatte] Tested with JDK 11.0.16+9 fastdebug build, issue is not reproduced.

;;;","2022-07-28 09:19;dcubed;Moving from hotspot/runtime -> hotspot/compiler
since the AD file belongs to the HotSpot Compiler team.;;;","2022-07-28 12:57;dlong;Reproduces with Oracle JDK for me.  I think it depends on the hardware.  I ran on a machine with AVX512.  If I pass -XX:UseAVX=2 the test passes.;;;","2022-07-28 13:50;dlong;ILW = crash in debug build; one test; disable compilation on affected method = MLM = P4;;;","2022-08-08 17:02;dlong;The problem starts with this changeset in OpenJDK 11u:

commit dfdfc8fce6852840cbccfa721423958964962012
Author: Sandhya Viswanathan <sandhya.viswanathan@intel.com>
Date:   Sat Oct 27 10:33:58 2018 -0700

    8210764: Update avx512 implementation
    8211251: Default mask register for avx512 instructions
    8211272: x86_32 build failures after JDK-8210764 (Update avx512 implementation)
    8211375: Minimal VM build failures after JDK-8211251 (Default mask register for avx512 instructions)
    
    Co-authored-by: Aleksey Shipilev <shade@redhat.com>
    Reviewed-by: kvn
;;;","2022-08-08 18:43;dlong;It looks like this is an old bug in MulReductionVLNode::ideal_reg() introduced by JDK-8076276 but never noticed, because a vector reduction test for long multiplication is missing.  This bug seems to be fixed (perhaps accidentally) in later releases by JDK-8240248 and JDK-8223347.;;;","2022-10-13 23:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1459
Date: 2022-10-13 16:58:38 +0000;;;","2022-10-14 00:58;mdoerr;Fix Request (11u): 
Should get fixed for parity with 11.0.18-oracle. Fix is trivial, tested and reviewed (see PR).;;;",,,,,,,,,,,,,,,,,,,,,,,
"JVM crash with GenerateOopMap::error_work(char const*, __va_list_tag*)",JDK-8291459,5079734,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,hseigel,webbuggrp,webbuggrp,2022-07-20 21:56,2022-12-14 09:54,2023-10-01 09:56,2022-08-08 05:22,11,17,18,20,,,20,hotspot,,0,dcsswa,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,reproducer-yes,webbug,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS:
LSB Version:    security-9.20170808ubuntu1-noarch
Distributor ID: Ubuntu
Description:    Ubuntu 18.04.5 LTS
Release:        18.04
Codename:       bionic

JDK：
openjdk version ""19-ea"" 2022-09-20
OpenJDK Runtime Environment (build 19-ea+31-2203)
OpenJDK 64-Bit Server VM (build 19-ea+31-2203, mixed mode, sharing)

openjdk version ""20-ea"" 2023-03-21
OpenJDK Runtime Environment (build 20-ea+6-304)
OpenJDK 64-Bit Server VM (build 20-ea+6-304, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
Hotspot JVM(JDK 19,20) fails to run this test case while Openj9 can pass. HotSpot JVM fails with the following message:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (generateOopMap.cpp:2159), pid=83663, tid=30199
#  fatal error: Illegal class file encountered. Try running with -Xverify:all in method getAlphanumericCode
#
# JRE version: OpenJDK Runtime Environment (20.0+6) (build 20-ea+6-304)
# Java VM: OpenJDK 64-Bit Server VM (20-ea+6-304, interpreted mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x7fa1b5]  GenerateOopMap::error_work(char const*, __va_list_tag*)+0x105
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /data/jit/fuzzJIT/hs_err_pid83663.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp

Note that:
The buggy classfile is bug_file/com/google/zxing/qrcode/encoder/Encoder.class
This buggy classfile is generated by fuzzer

ERROR MESSAGES/STACK TRACES THAT OCCUR :
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (generateOopMap.cpp:2159), pid=83663, tid=30199
#  fatal error: Illegal class file encountered. Try running with -Xverify:all in method getAlphanumericCode
#
# JRE version: OpenJDK Runtime Environment (20.0+6) (build 20-ea+6-304)
# Java VM: OpenJDK 64-Bit Server VM (20-ea+6-304, interpreted mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x7fa1b5]  GenerateOopMap::error_work(char const*, __va_list_tag*)+0x105
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /data/jit/fuzzJIT/hs_err_pid83663.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1.Download bug_generateOopMap.zip from the following link:
https://drive.google.com/file/d/11uPuOHBNYAJU9g1TOumvt4USfJ6X9wmY/view?usp=sharing
2. Extract bug_generateOopMap.zip and enter bug_generateOopMap.
3. run the following command:
java -jar junit-platform-console-standalone-1.8.2.jar -cp ./util:./bug_file:./classes:./test-classes -m
 com.google.zxing.qrcode.encoder.EncoderTestCase#testChooseMode

ACTUAL -
If run the command:

java -jar junit-platform-console-standalone-1.8.2.jar -cp ./util:./bug_file:./classes:./test-classes -m 
 com.google.zxing.qrcode.encoder.EncoderTestCase#testChooseMode

it crashes.
If run this command:

java -jar junit-platform-console-standalone-1.8.2.jar -cp ./classes:./test-classes -m com.google.zxing.qrcode.encoder.EncoderTestCase#testChooseMode

It passes. That is, remove the buggy classfile from classpath.

CUSTOMER SUBMITTED WORKAROUND :
run the following command:

java -jar junit-platform-console-standalone-1.8.2.jar -cp ./classes:./test-classes -m com.google.zxing.qrcode.encoder.EncoderTestCase#testChooseMode

FREQUENCY : always


",,,,,,,,,,JDK-8292085,JDK-8292084,JDK-8294804,JDK-8294805,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-4622146,JDK-8291790,,,JDK-8283441,,,,,,,"2022-07-27 23:26;sswsharm;hs_err_pid9292.log;https://bugs.openjdk.org/secure/attachment/100175/hs_err_pid9292.log",,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xxyz:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-07-27 23:35;sswsharm;Issue is reproduced.
Crash is observed with 
java -jar junit-platform-console-standalone-1.8.2.jar -cp ./util:./bug_file:./classes:./test-classes -m com.google.zxing.qrcode.encoder.EncoderTestCase#testChooseMode 

It works when the classfile is removed from classpath.

OS: Windows 10
JDK 8u341: Fail
JDK 11.0.16:Fail
JDK 17.0.4:Fail
JDK 18.0.2:Fail
JDK 20ea6:Fail

Moving it to Dev team for further analysis.;;;","2022-08-02 11:22;mseledtsov;ILW = HML = P2;;;","2022-08-04 07:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9745
Date: 2022-08-04 14:29:23 +0000;;;","2022-08-08 05:22;dukebot;Changeset: 8d88be23
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2022-08-08 12:19:15 +0000
URL:       https://git.openjdk.org/jdk/commit/8d88be233bc0d27d78e51c4eff0ba1ee47f4617a
;;;","2022-09-29 09:27;goetz;Fix request [11u, 17u]

I backport this for parity with 11.0.18-oracle, 17.0.6-oracle.
Low risk although it is C2, it only omits a pointless oopmap.
Clean backport.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2022-09-29 09:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/757
Date: 2022-09-29 16:26:20 +0000;;;","2022-09-29 09:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1380
Date: 2022-09-29 16:30:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/jdi/ClassUnloadEventTest.java failed with: Wrong number of class unload events: expected 10 got 4,JDK-8291456,5080487,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,cjplummer,cjplummer,2022-07-27 21:15,2023-02-13 23:44,2023-10-01 09:56,2022-10-19 21:23,20,,,,,,20,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,tier3,tier6,,,,,,,,,,,,,"com/sun/jdi/ClassUnloadEventTest.java is a new test that was added by JDK-8256811.

java.lang.RuntimeException: Wrong number of class unload events: expected 10 got 4
	at ClassUnloadEventTest.runDebugger(ClassUnloadEventTest.java:166)
	at ClassUnloadEventTest.main(ClassUnloadEventTest.java:59)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

This was with a linux-x64-debug build using the following flags: -XX:+CreateCoredumpOnCrash -XX:+UseParallelGC -XX:+UseNUMA

However, I don't think the flags are related to the failure. I see another failure in an ad-hoc job that only used the -server flag. It also was on linux-x64-debug.",,,,,,,,,,JDK-8302024,JDK-8302421,JDK-8296041,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256811,JDK-8293010,,,JDK-8292879,,,,,,,"2022-07-28 11:19;cjplummer;ClassUnloadEventTest.jtr;https://bugs.openjdk.org/secure/attachment/100197/ClassUnloadEventTest.jtr",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y2lv:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-07-28 06:03;zgu;I were not able to reproduce locally (AMD Ryzen 7 5800X, 8 cores with Ubuntu). 

I wonder we should add ""-Xlog:class+unload"" to debuggee's launch options, that should help us to diagnose if the failure is due to class unloading or event posting.

        arguments.get(""options"").setValue(""--add-exports java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xlog:class+unload"");

Also, could you attach ClassUnloadEventTest.jtr file.

Thanks
;;;","2022-07-28 17:39;cjplummer;I see we have a 2nd CI failure with the same flags, but I've been unable to reproduce it. If done 700 runs of just the one test, and 240 runs of all of :jdk_jdi, which is how the test task the reproduces the two failures was run.

I have made changes to run the debuggee with -Xlog:class+unload, but since it's not failing, it's not really helping to track down the problem. If we continue to see CI failures, perhaps I'll push that change.;;;","2022-07-29 07:45;zgu;After digging a bit, I believe JDK-8256811 did not fix missing events completely.

Jvmti posts VMDeathEvent [1] event much earlier than I expected during JVM exits. Upon receiving VMDeathEvent, event handler discards subsequent events. 

I wonder why VMDeathEvent has to be delivered so early, can it wait until all JavaThreads reach vm_exit safepoint? or after ServiceThread exits (similar to WatcherThread and StringDedupThread, etc.)

[1] https://github.com/openjdk/jdk/blob/master/src/hotspot/share/runtime/java.cpp#L499

;;;","2022-07-29 13:34;cjplummer;It sounds like this is a test bug. The debugger and debuggee need some sort of synchronization so the debuggee doesn't exit until the debugger has received the expected events. However, I don't think the debugger really knows when it is done, so it relies on the VMThreadDeath event. Perhaps we should just add a short delay in the debuggee before it exits.;;;","2022-07-29 14:49;cjplummer;I'm not sure if this is related at all, but in someone's adhoc job and a CI job (both on macosx) I see the following assert in the debuggee, causing this test to fail:

#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S26308/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/616729ac-37b4-4df2-a696-d00537a3d62a/runs/7a6bcbc7-a6e2-4c6e-b352-8e64a14c814c/workspace/open/src/hotspot/share/prims/jvmtiExport.cpp:1700), pid=64461, tid=42499
#  assert(env->is_enabled(JVMTI_EVENT_OBJECT_FREE)) failed: checking

Current thread (0x00007f86bc81ba10):  JavaThread ""Service Thread"" daemon [_thread_in_vm, id=42499, stack(0x000070000c131000,0x000070000c231000)]

Stack: [0x000070000c131000,0x000070000c231000],  sp=0x000070000c230820,  free space=1022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x12b9169]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6e9
V  [libjvm.dylib+0x12b97eb]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V  [libjvm.dylib+0x6c841d]  report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V  [libjvm.dylib+0xccd81f]  JvmtiExport::post_object_free(JvmtiEnv*, GrowableArray<long>*)+0x17f
V  [libjvm.dylib+0xcf7be2]  JvmtiTagMap::post_dead_objects(GrowableArray<long>*)+0x92
V  [libjvm.dylib+0xcf8123]  JvmtiTagMap::remove_and_post_dead_objects()+0x103
V  [libjvm.dylib+0xcf837f]  JvmtiTagMap::flush_object_free_events()+0x16f
V  [libjvm.dylib+0xcfaeaa]  JvmtiTagMap::flush_all_object_free_events()+0x12a
V  [libjvm.dylib+0x10af97d]  ServiceThread::service_thread_entry(JavaThread*, JavaThread*)+0x57d
V  [libjvm.dylib+0xa247e5]  JavaThread::thread_main_inner()+0x235
V  [libjvm.dylib+0x1209f07]  Thread::call_run()+0x177
V  [libjvm.dylib+0xfafbe0]  thread_native_entry(Thread*)+0x150
C  [libsystem_pthread.dylib+0x6109]  _pthread_start+0x94
C  [libsystem_pthread.dylib+0x1b8b]  thread_start+0xf;;;","2022-07-29 16:31;zgu;Are they M1 machines? could be the problem of unsynchronized setting/getting the flag?

[~cjplummer] [~sspitsyn] I am pretty sure that original reported failure is *not* a test bug, as JVM shutdown can race ServiceThread to post VMDeadEvent, so JDK-8256811 did not fix missing events.

Given the incomplete fix and a couple of issues seen in tests, e.g. JDK-8290908, probably should consider backout JDK-8256811 for now and reconsider the solution.





 ;;;","2022-07-29 16:48;cjplummer;Not M1. X64.

Your changes for JDK-8256811 are fixing the issue of delayed ClassUnload events, meaning ClassUnload events that won't arrive until some other event is processed, or even worse won't arrive until after the next GC and another event is processed. I think you are pointing out that your fix does not guarantee all ClassUnload events will be delivered before VMDeath. I'm not so sure this is a bug, and even if it is, that doesn't mean there isn't value in the JDK-8256811 fix as it currently stands (although the asserts need to be fixed, and at the very least we need to modify this test so it doesn't fail).;;;","2022-08-03 02:47;sspitsyn;At the moment, I agree with Chris that the fix of JDK-8256811 is still valuable.
I kind of expected some regressions because it was hard to ensure there are no new intermittent test failures.
So, it is okay to address this issue separately. Please, note we are still in the early release stage.
I'm still thinking about the best way to address this.;;;","2022-08-04 01:09;sspitsyn;About the assert mentioned by Chris above:
 # assert(env->is_enabled(JVMTI_EVENT_OBJECT_FREE)) failed: checking

The function JvmtiTagMap::flush_object_free_events() checks for the `is_enabled(JVMTI_EVENT_OBJECT_FREE)` condition before call to the `remove_and_post_dead_objects()`:

void JvmtiTagMap::flush_object_free_events() {
  assert_not_at_safepoint();
  if (env()->is_enabled(JVMTI_EVENT_OBJECT_FREE)) {
    {
      MonitorLocker ml(lock(), Mutex::_no_safepoint_check_flag);
      // If another thread is posting events, let it finish
      while (_posting_events) {
        ml.wait();
      }

      if (!_needs_cleaning || is_empty()) {
        _needs_cleaning = false;
        return;
      }
      _posting_events = true;
    } // Drop the lock so we can do the cleaning on the VM thread.
    // Needs both cleaning and event posting (up to some other thread
    // getting there first after we dropped the lock).
    remove_and_post_dead_objects();

However, it is not protected by any lock, so it is racy with the JVMTI `SetEventNotificationMode()`.
So that the `is_enabled(JVMTI_EVENT_OBJECT_FREE)` condition can be disabled before the `JvmtiExport::post_object_free()` is called.
I think, this assert should be either removed or replaced with the double check of this condition.;;;","2022-08-05 13:40;sspitsyn;[~cjplummer] wrote:
> It sounds like this is a test bug. The debugger and debuggee need some sort of synchronization
> so the debuggee doesn't exit until the debugger has received the expected events.
> However, I don't think the debugger really knows when it is done, so it relies on the VMThreadDeath event.
> Perhaps we should just add a short delay in the debuggee before it exits.

There is a way for debug agent to flush ObjectFree events. I'm not sure it will result in flushing ClassUnload events though.
It is possible by disabling the ObjectFree events with the JVMTI SetEventNotificationMode in the VMThreadDeath event handler.
There is a risk however that this can potentially cause some deadlocks, so that this needs to be done carefully.;;;","2022-08-05 15:32;cjplummer;[~sspitsyn] 
JVMTI should be generating ObjectFree events for each unloaded classes. Each of these ObjectFree events causes the debug agent to immediately synthesize and enqueue a ClassUnload event. If SUSPEND_ALL or SUSPEND_EVENT_THREAD are used (which the test is using), the debug agent will not return to JVMTI until after the event has been delivered and the debugger has resumed all threads. So there should never be any ClassUnload events for the debug agent to flush.

When the VMDeath comes in (on a different thread) the debug agent disables all callbacks, so no more ObjectFree events will arrive. Note however that before processing the VMDeath, cbVMDeath first waits for any pending callbacks to complete. So all ""in process"" ClassUnload events will be sent and their thread resumed before the VMDeath shuts down any further event processing by the debug agent. Note this is what Zyngu said:

>  Jvmti posts VMDeathEvent [1] event much earlier than I expected during JVM exits. Upon receiving VMDeathEvent, event handler discards subsequent events. 

So the subsequent events would be ObjectFree events that arrive after the VMDeathEvent (or more accurately, would have arrived if not for the debug agent disabling callbacks due to the VMDeathEvent)

So I believe the issue is that when the app exits, JVMTI is still in the process of posting ObjectFree events for each unloaded class. This gets shut down due to the VMDeathEvent, leaving some ObjectFree events never being posted (because the debug agent has disabled callbacks). So the solution would be for JVMTI to defer posting the VMDeath until after it is done processing the unloaded classes and posting ObjectFree events for all of them. I don't see how to solve this in the debug agent.;;;","2022-08-10 01:35;sspitsyn;Assigned to myself for more analysis in 20. Some investigation can be needed.;;;","2022-08-18 10:58;cjplummer;The delay at the end of the test I added in JDK-8256811 does seem to have quieted down the failures quite a bit, but I see we are still seeing them. Seems they are now ""expected 10 got 0"" instead of ""expected 10 got 4"". Also, both are tier6 with -Xcomp on Windows. Possibly we just need a longer delay at the end of the test due to the -Xcomp, although the fact that we got 0 ClassUnloadEvents make me suspicious that unloading of the classes is just not being triggered. ;;;","2022-08-24 11:38;cjplummer;The following failures:

 > java.lang.RuntimeException: Wrong number of class unload events: expected 10 got 0 

Appear to be a different issue. Note the ""expected 10 got 0"" instead of ""expected 10 got 4"", and always occurring on windows. Please see JDK-8292879.;;;","2022-08-24 17:14;cjplummer;Since JDK-8291456  added some useful debuggee logging to this test, I decided to remove the delay that was added to the debuggee to work around the problem and see what the logging output showed. It was as expected based on previous conclusions of the root cause. It shows all 10 of the classes being unloaded, but in this case only 5 classes have ClassUnloadEvents generated for them.

----------System.out:(25/1931)----------
Running debugger
EventSet: event set, policy:2, count:1 = {VMStartEvent in thread main}
EventSet: event set, policy:0, count:2 = {ClassUnloadEvent, ClassUnloadEvent}
EventSet: event set, policy:0, count:1 = {ClassUnloadEvent}
EventSet: event set, policy:0, count:1 = {ClassUnloadEvent}
EventSet: event set, policy:0, count:1 = {ClassUnloadEvent}
EventSet: event set, policy:0, count:2 = {ClassUnloadEvent, ClassUnloadEvent}
EventSet: event set, policy:0, count:1 = {VMDeathEvent}
stdout: [0.013s][info][gc] Using G1
stdout: Running debuggee
stdout: [0.432s][info][class,unload] unloading class SampleClass__9 0x0000000801003c30
stdout: [0.432s][info][class,unload] unloading class SampleClass__8 0x0000000801003a28
stdout: [0.432s][info][class,unload] unloading class SampleClass__7 0x0000000801003820
stdout: [0.432s][info][class,unload] unloading class SampleClass__6 0x0000000801003618
stdout: [0.432s][info][class,unload] unloading class SampleClass__5 0x0000000801003410
stdout: [0.432s][info][class,unload] unloading class SampleClass__Alt__4 0x0000000801003208
stdout: [0.432s][info][class,unload] unloading class SampleClass__Alt__3 0x0000000801003000
stdout: [0.432s][info][class,unload] unloading class SampleClass__Alt__2 0x0000000801002c10
stdout: [0.432s][info][class,unload] unloading class SampleClass__Alt__1 0x0000000801002a08
stdout: [0.432s][info][class,unload] unloading class SampleClass__Alt__0 0x0000000801002800
stdout: [0.432s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801001c00 0x0000000801001c00
stdout: [0.432s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801001800 0x0000000801001800
stdout: [0.432s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801001000 0x0000000801001000
stdout: [0.506s][info][gc          ] GC(0) Pause Full (WhiteBox Initiated Full GC) 6M->4M(40M) 88.199ms
stdout: Exiting debuggee
----------System.err:(12/800)----------
java.lang.RuntimeException: Wrong number of class unload events: expected 10 got 5
	at ClassUnloadEventTest.runDebugger(ClassUnloadEventTest.java:191)
	at ClassUnloadEventTest.main(ClassUnloadEventTest.java:64)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589);;;","2022-10-12 17:52;sspitsyn;I'm thinking if disabling the ClassUnload events with the JVMTI SetEventNotificationMode should flush the pending ClassUnload events. This approach has to be less dead lock prone than flushing the ClassUnload events in the JVMTI VMDeath event. Then the test will need to explicitly disable ClassUnload events with the JVMTI SetEventNotificationMode function. There will be a symmetry between flushing ObjectFree and ClassUnload events as pending events for both event types will be flushed with the SetEventNotificationMode.
Does this looks reasonable?;;;","2022-10-12 18:13;cjplummer;I think so. We need to make sure is documented in the JVMTI spec.;;;","2022-10-12 19:40;sspitsyn;Agreed, it is a good suggestion to document it in the JVMTI spec.
The only events that need this kind of flushing are those that are not posted on the current thread.;;;","2022-10-12 22:31;sspitsyn;Forgot that the ClassUnload is an extension event.
In fact, the extension events implementation is very confusing.
I'm even not sure if SetEventNotificationMode can really enable these events.
Extension events enabling/disabling is triggered by the SetExtensionEventCallback.
We may have useless calls to SetEventNotificationMode to enable extension events in our vthread tests.;;;","2022-10-12 23:05;cjplummer;Oh, that's right. It's ObjectFree events that we need to make sure get flushed since they trigger the JDWP CLASS_UNLOAD events.

Is ClassUnload actually an extension event, or just something with remnants in the JVMTI implementation, but not actually functional.;;;","2022-10-12 23:56;sspitsyn;The ObjectFree events are flushed by the SetEventNotificationMode when disabled.
The ClassLoad events were initially implemented as normal events but then reimplemented as an extension.
They are enabled and disabled with the JVMTI SetExtensionEventCallback.
The SetExtensionEventCallback spec says:
  ""Sets the callback function for an extension event and enables the event.
   Or, if the callback is NULL, disables the event. Note that unlike standard events,
   setting the callback and enabling the event are a single operation.""
We still can flush the ClassUnload events when they are disabled with the SetExtensionEventCallback.;;;","2022-10-13 09:56;cjplummer;> The ObjectFree events are flushed by the SetEventNotificationMode when disabled. 

I'm not sure if this will help the test, or in general help the JDI user. The JVMTI ObjectFree events trigger the JDWP ClassUnload events. The JDI user expects to get all the ClassUnload events before the debuggee exits. We already know that doesn't happen unless the debuggee has a short delay before exiting (the current workaround in the test implemented by JDK-8291650). What you are suggesting is that the JDI user somehow trigger the JVMTI SetEventNotificationMode to disable ObjectFree events so they will be flushed. There is no way for the JDI user to do this. The ObjectFree events are always enabled so the debug agent can track loaded classes. Even if the JDI user disables the ClassUnloadRequest, ObjectFree events will still be enabled by the debug agent.;;;","2022-10-13 16:56;sspitsyn;Will check if JVMTI can force flushing all pending ObjectFree events at the VM shutdown.
I'm not sure yet it can be deadlock prone.;;;","2022-10-17 18:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10736
Date: 2022-10-18 01:20:15 +0000;;;","2022-10-19 21:00;sspitsyn;This is changeset:
  https://github.com/openjdk/jdk/commit/c5e0464098f8f7cd9c568c7b1c3a06139453eaab;;;","2022-10-19 21:24;sspitsyn;I don't know why but auto-resolve of this issue did not happen after the fix was integrated.;;;","2022-10-20 10:06;dukebot;Changeset: c5e04640
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-10-20 01:18:39 +0000
URL:       https://git.openjdk.org/jdk/commit/c5e0464098f8f7cd9c568c7b1c3a06139453eaab
;;;","2022-10-25 04:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/832
Date: 2022-10-25 11:06:21 +0000;;;","2022-10-28 01:11;goetz;Fix request [17u]
on behalf of Andrew Dinn

Required follow up of JDK-8256811.;;;",,,,
Missing check for JLI C runtime library in CoreLibraries.gmk,JDK-8291454,5080484,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2022-07-27 19:17,2022-08-15 16:44,2023-10-01 09:56,2022-08-08 05:22,,,,,,,20,infrastructure,,0,,,,,,,,,,,,,,,,,,"CoreLibraries.gmk is missing a check for MSVCR_DLL. This results in a defined, but empty macro if it is not defined in the build system, which is incorrect",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y2l7:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-07-28 04:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9669
Date: 2022-07-28 02:20:26 +0000;;;","2022-08-08 05:22;dukebot;Changeset: 8a804f65
Author:    Julian Waters <jwaters@openjdk.org>
Committer: Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-08-08 12:17:48 +0000
URL:       https://git.openjdk.org/jdk/commit/8a804f653d21e6e0ed4c1df48a14aa7ad3876dbe
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GHA builds/tests won't run manually if disabled from automatic running,JDK-8291444,5080475,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,dholmes,dholmes,2022-07-27 16:22,2023-07-05 02:22,2023-10-01 09:56,2023-06-30 12:10,20,,,,,,20,infrastructure,,0,build-infra,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,"Since ""day one"" I have had my OpenJDK PF configured with the secret ""JDK_SUBMIT_FILTER"" so that the GHA are not automatically run. Instead  I manually run the workflow and that worked fine with the old submit.yml.

Yesterday was my first attempt at a manual run since the GHA rewrite under JDK-8287906, and while the initial part of the sanity workflow ran manually it then skipped all the builds and tests. E.g.

https://github.com/dholmes-ora/jdk/actions/runs/2744359973

I had to remove the secret to get a manual workflow run to actual proceed.",,,,,,,,,,JDK-8311486,JDK-8311267,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298811,,,,,,,,JDK-8287906,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y2j7:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-20 07:37;ihse;Let me see if I'm following you correctly here. Are you saying that if you have JDK_SUBMIT_FILTER set, then this will (correctly) block automatic runs, but also (incorrectly) block manual runs?;;;","2022-10-20 16:34;dholmes;That appears to be the case - yes.;;;","2022-11-25 05:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11365
Date: 2022-11-25 13:24:09 +0000;;;","2022-12-02 03:05;dukebot;Changeset: 5c0ff26f
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-12-02 11:03:53 +0000
URL:       https://git.openjdk.org/jdk/commit/5c0ff26f321ad36daa34bfc5b2d013b6c4a03810
;;;","2022-12-07 16:37;dholmes;Sorry but this still doesn't work for me. A manual run is still doing nothing:

https://github.com/dholmes-ora/jdk/actions/runs/3644100183;;;","2022-12-14 14:34;dholmes;This did not fix the problem I reported.;;;","2023-06-30 12:11;clanger;Seems to be fixed after all, as per JDK-8298811.;;;","2023-06-30 12:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1525
Date: 2023-06-30 19:27:17 +0000;;;","2023-07-04 00:12;clanger;Fix request (17u, 11u)
Requesting backport of this GHA fix. The reported issue seems to be fixed after there was some initial doubt. So, it's worthwile bringing this to update releases. Testing: GHA only.;;;","2023-07-04 05:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2024
Date: 2023-07-04 12:50:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
java/lang/Thread/virtual/ThreadAPI.java timed out on single core system,JDK-8291429,5080460,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alanb,msheppar,msheppar,2022-07-27 15:35,2022-10-25 15:52,2023-10-01 09:56,2022-10-07 01:17,19,,,,,,20,core-libs,,0,atr-corelibs,imt,loom,noreg-external,noreg-self,sqe,,,,,,,,,,,,"OL 9 externally rundest JDK19 b26

looks like Groundhog Day

log extract

test ThreadAPI.testJoin32(): success
test ThreadAPI.testJoin33(): success
-- VirtualThread[#115]/runnable --
  java.base/jdk.internal.vm.Continuation.yield(Continuation.java:357)
  java.base/java.lang.VirtualThread.yieldContinuation(VirtualThread.java:370)
  java.base/java.lang.VirtualThread.parkNanos(VirtualThread.java:532)
  java.base/java.lang.System$2.parkVirtualThread(System.java:2605)
  java.base/jdk.internal.misc.VirtualThreads.park(VirtualThreads.java:67)
  java.base/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:267)
  java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:717)
  java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1074)
  java.base/java.util.concurrent.CountDownLatch.await(CountDownLatch.java:276)
  java.base/java.lang.VirtualThread.joinNanos(VirtualThread.java:746)
  java.base/java.lang.Thread.join(Thread.java:2272)
  ThreadAPI.testJoin33(ThreadAPI.java:740)
  jdk.test.lib.thread.VThreadRunner.lambda$run$0(VThreadRunner.java:75)
  java.base/java.lang.VirtualThread.run(VirtualThread.java:287)
  java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:174)
  java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:327)
  java.base/jdk.internal.vm.Continuation.enter(Continuation.java:320)
-- VirtualThread[#115]/runnable --
  java.base/jdk.internal.vm.Continuation.yield(Continuation.java:357)
  java.base/java.lang.VirtualThread.yieldContinuation(VirtualThread.java:370)
  java.base/java.lang.VirtualThread.parkNanos(VirtualThread.java:532)
  java.base/java.lang.System$2.parkVirtualThread(System.java:2605)
  java.base/jdk.internal.misc.VirtualThreads.park(VirtualThreads.java:67)
  java.base/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:267)
  java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:717)
  java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1074)
  java.base/java.util.concurrent.CountDownLatch.await(CountDownLatch.java:276)
  java.base/java.lang.VirtualThread.joinNanos(VirtualThread.java:746)
  java.base/java.lang.Thread.join(Thread.java:2272)
  ThreadAPI.testJoin33(ThreadAPI.java:740)
  jdk.test.lib.thread.VThreadRunner.lambda$run$0(VThreadRunner.java:75)
  java.base/java.lang.VirtualThread.run(VirtualThread.java:287)
  java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:174)
  java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:327)
  java.base/jdk.internal.vm.Continuation.enter(Continuation.java:320)
-- VirtualThread[#115]/runnable --

ETC.  ETC.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291426,,,,,,JDK-8285416,JDK-8291426,JDK-8282383,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2y2fv:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-08-04 03:15;alanb;Is the external hosted OL9 a single core system by any chance? ThreadAPI.testJoin34 assumes at least two carrier threads so it will appear to hang if it runs on a single core system with a single carrier thread.;;;","2022-08-04 04:31;msheppar;[root@localhost Desktop]# lscpu

Architecture:            x86_64
  CPU op-mode(s):        32-bit, 64-bit
  Address sizes:         46 bits physical, 48 bits virtual
  Byte Order:            Little Endian
  CPU(s):                  2
  On-line CPU(s) list:   0,1
  Vendor ID:               GenuineIntel
  BIOS Vendor ID:        Intel
  Model name:            Intel(R) Xeon(R) CPU E5-2620 0 @ 2.00GHz
  CPU family:          6
  Model:               45
  Thread(s) per core:  1
  Core(s) per socket:  1
  Socket(s):           2
  Stepping:            7
  BogoMIPS:            4000.03
;;;","2022-08-04 04:58;alanb;I'm wondering how to read ""On-line CPU(s) list: 0,1"", does it mean that CPU 0 is offline and CPU 1 is online? What does `lscpu --extended` print? (asking because the output with --extended makes me clear which CPUs are online and offline).;;;","2022-08-04 05:13;alanb;Also, since you have access to this system, can you say if it duplicates easily and if it duplicates if run with -Djdk.virtualThreadScheduler.parallelism=2 ?;;;","2022-08-08 04:54;msheppar;lscpu -extended

CPU NODE SOCKET CORE L1d:L1i:L2:L3  ONLINE
 0       0          0              0          0:0:0:0               yes
 1       0          1              1           2:2:2:2              yes
;;;","2022-08-11 03:48;alanb;This output suggests there are two CPUs online. It is possible that the original test run was done with only one CPU online? Does it duplicate on the system right now, with two CPUs?;;;","2022-09-01 05:22;alanb;msheppar provided more details on the information and it seems to be a single core system. In that case, this appears to be a test issue as this test requires parallelism to be at least two.  We can update the test to ensure this is the case.

;;;","2022-09-01 06:50;msheppar;note the test results are reported for two different test machine with different cpu architectures:

the (external IMT)  x64 was 2 CPU machine
the OCI aarch64 is a single CPU machine


both exhibiting the same failure for OL9 
;;;","2022-10-05 00:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10562
Date: 2022-10-04 17:59:36 +0000;;;","2022-10-07 01:17;dukebot;Changeset: 1fda8421
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-10-07 08:14:43 +0000
URL:       https://git.openjdk.org/jdk/commit/1fda8421b976dc19b6f977e38d8d87f493e1a1fd
;;;",,,,,,,,,,,,,,,,,,,,,,,
JFR: 'jfr print' displays incorrect timestamps during DST ,JDK-8291428,5080459,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-07-27 15:22,2022-10-05 23:20,2023-10-01 09:56,2022-09-30 10:37,11,17,20,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,"'jfr print' doesn't take into account daylight savings time. This can most easily be seen when printing to JSON or XML.

This happens because JFR writes TimeZone::getRawOffset() to the file, which is then used to construct OffsetDateTime objects. The use of getRawOffset() is legacy from before java.time existed.

Example, a recording created in July 27, 23:42:50 in the CET time zone results in this:

      ""type"": ""jdk.LongFlag"", 
      ""values"": {
        ""startTime"": ""2022-07-27T22:42:50.804383083+01:00"", 
        ""name"": ""ThreadStackSize"", 
        ""value"": 2048, 
        ""origin"": ""Default""
      }

It should be:

      ""type"": ""jdk.LongFlag"", 
      ""values"": {
        ""startTime"": ""2022-07-27T23:42:50.804383083+02:00"", 
        ""name"": ""ThreadStackSize"", 
        ""value"": 2048, 
        ""origin"": ""Default""
      }

The raw offset today is stored in a field called ""gmtOffset"" in the Metadata event.

One way to fix this is to add TimeZone::getDSTSavings() to ""gmtOffset"" when the recording is written. 

Another is to add a new ""dst"" field (will not break the file format) and then update the parser so it adds gmtOffset and dst before constructing an OffsetDateTime.

A benefit of the first way is that older version of the JDK can print newer recordings correctly. A drawback is that meaning of gmtOffset field is changed. It will not break JMC, because it doesn't read the field, but it doesn't seem proper to change the meaning, possibly in an update release if the fix is backported. If the file format is documented, the meaning of the field value will differ depending on the (update) release. With a new ""dst"" field, it's just another attribute that may or may not exist. If an updated version of 'jfr print"" reads an older recording, it will default to dst being 0. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y2fn:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-09-27 08:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9666
Date: 2022-07-27 22:58:54 +0000;;;","2022-09-30 10:37;dukebot;Changeset: 48674d4f
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-09-30 17:34:52 +0000
URL:       https://git.openjdk.org/jdk/commit/48674d4f363900abd625350b32236de406d45d7a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Specification of method j.l.foreign.VaList::skip still deserves clarification,JDK-8291359,5080388,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,dbessono,dbessono,2022-07-27 10:12,2023-01-19 01:08,2023-10-01 09:56,2022-12-02 14:17,19,,,,,,20,core-libs,,0,conformance,,,,,,,,,,,,,,,,,"This is a follow up to JDK-8289333
(see https://bugs.openjdk.org/browse/JDK-8289333?focusedCommentId=14513533&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14513533 )

Specificaition of method VaList::skip is still rather short

>   Skips a number of elements with the given memory layouts, and advances this variable argument list's position.

It's not perfectly clear what would for example produce the following code 

        try (var session = MemorySession.openConfined()) {
            VaList vaList = VaList.make(builder -> builder.addVarg(ValueLayout.JAVA_INT, 77)
                    .addVarg(ValueLayout.JAVA_LONG, -78),
                    session);
            vaList.skip(ValueLayout.JAVA_DOUBLE, ValueLayout.JAVA_BOOLEAN);
            System.out.println(vaList.nextVarg(ValueLayout.JAVA_INT));
        }


UPD: On MacOS aarch64 for pre-JDK20b08 the result is


Exception in thread ""main"" java.util.NoSuchElementException: No such element: i32
	at java.base/jdk.internal.foreign.abi.SharedUtils.newVaListNSEE(SharedUtils.java:387)
	at java.base/jdk.internal.foreign.abi.aarch64.macos.MacOsAArch64VaList.checkElement(MacOsAArch64VaList.java:152)
	at java.base/jdk.internal.foreign.abi.aarch64.macos.MacOsAArch64VaList.read(MacOsAArch64VaList.java:122)
	at java.base/jdk.internal.foreign.abi.aarch64.macos.MacOsAArch64VaList.read(MacOsAArch64VaList.java:93)
	at java.base/jdk.internal.foreign.abi.aarch64.macos.MacOsAArch64VaList.nextVarg(MacOsAArch64VaList.java:68)

Specification
""Skips a number of elements with the given memory layouts"" 
leaves a space for interpretations of whether skipping with unmatching memory layouts would be successful or not.

The spec of ::skip might benefit from more detailed explanation or some references or hints or any ""undefined behaviour"" disclaimer.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297873,,,JDK-8289333,,,JDK-8300605,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y1zv:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-07-27 11:27;mcimadamore;On Linux, this fails as expected with this:

```
Exception java.util.NoSuchElementException: No such element: d64
|        at SharedUtils.newVaListNSEE (SharedUtils.java:373)
|        at SysVVaList.checkRegSaveAreaElement (SysVVaList.java:293)
|        at SysVVaList.skip (SysVVaList.java:316)
|        at (#2:5)
```

Which makes sense, since we only have added integral values, but trying to extract a floating point value. I'm honestly a bit surprised that this works on Mac x86 - since the underlying implementation is the same used for Linux, so should fail in exactly same way (Mac aarch64 is a completely different impl on the other hand). Are you sure the test above has been run on a JDK that contains the fix for JDK-8289333 ?

As for the javadoc itself, I suppose we could add that calling skip with N layouts, it's like calling nextVarg N times (with the corresponding accessors).;;;","2022-07-27 12:42;dbessono;Sorry, I've copied the description without additionally checking the code sample. 

On Mac aarch64 for the current state of OpenJDK mainline the skipping seems to be OK, 
while NoSuchElementException is thrown by `nextVarg`

Exception in thread ""main"" java.util.NoSuchElementException: No such element: i32
	at java.base/jdk.internal.foreign.abi.SharedUtils.newVaListNSEE(SharedUtils.java:387)
	at java.base/jdk.internal.foreign.abi.aarch64.macos.MacOsAArch64VaList.checkElement(MacOsAArch64VaList.java:152)
	at java.base/jdk.internal.foreign.abi.aarch64.macos.MacOsAArch64VaList.read(MacOsAArch64VaList.java:122)
	at java.base/jdk.internal.foreign.abi.aarch64.macos.MacOsAArch64VaList.read(MacOsAArch64VaList.java:93)
	at java.base/jdk.internal.foreign.abi.aarch64.macos.MacOsAArch64VaList.nextVarg(MacOsAArch64VaList.java:68)

I've updated the description emphasizing that ::skip spec might possibly benefit from some hints or disclaimers;;;","2022-07-29 08:42;jvernee;In general this relies on the implied behaviour that we can not read elements from a VaList that are not in the VaList. This goes for other methods as well, such as nextVarg.

I agree that we could specify this better, perhaps in the class javadoc as a general comment, but I don't think it's high enough priority to handle as p2 for 19, so we've decide to defer to 20.;;;","2022-07-29 08:56;dbessono;Yes, absolutely. 
This doesn't seem to be looking as a blocker for 19 and not as a P2 ;;;","2022-11-30 10:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11440
Date: 2022-11-30 18:35:47 +0000;;;","2022-12-02 14:17;dukebot;Changeset: 562bc171
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2022-12-02 22:15:27 +0000
URL:       https://git.openjdk.org/jdk/commit/562bc171b971091421ee0a93665880682ae96c09
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Fix the ""overridding"" typo",JDK-8291358,5080387,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,prappo,prappo,prappo,2022-07-27 10:02,2022-08-03 19:45,2023-10-01 09:56,2022-07-27 14:56,20,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,"Accidentally found in:
* test/langtools/jdk/javadoc/doclet/testExternalOverriddenMethod/pkg/XReader.java
* test/langtools/jdk/javadoc/doclet/testVisibleMembers/TestVisibleMembers.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y1zn:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-07-27 10:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9660
Date: 2022-07-27 17:17:54 +0000;;;","2022-07-27 14:56;dukebot;Changeset: c1a3347f
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-07-27 21:48:59 +0000
URL:       https://git.openjdk.org/jdk/commit/c1a3347f1731d96621f0769363c10e76156cdf19
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gc/TestPLABAdaptToMinTLABSize fails after JDK-8289137,JDK-8291289,5080313,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2022-07-27 04:57,2022-08-01 10:34,2023-10-01 09:56,2022-07-27 05:50,20,,,,,,20,hotspot,,0,gc-serial,gc-shenandoah,noreg-self,tier2,zgc,,,,,,,,,,,,,The test fails after integration of JDK-8289137.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289137,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y1j7:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-07-27 05:07;tschatzl;None of the affected collectors have PLABs (use Young/OldPLABSize), so the constraint function is not executed leading to the test failure.;;;","2022-07-27 05:50;dukebot;Changeset: e804236f
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-07-27 12:39:28 +0000
URL:       https://git.openjdk.org/jdk/commit/e804236f05ff8f7bf941dcbc26284474d2cbc67b
;;;","2022-07-27 05:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9654
Date: 2022-07-27 12:21:27 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RenderPerfTest: missing content while rendering some primitives,JDK-8291266,5080289,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,avu,avu,avu,2022-07-27 03:11,2022-12-21 05:14,2023-10-01 09:56,2022-08-12 02:52,20,,,,,,20,client-libs,,0,macos,regression,regression_8288948,,,,,,,,,,,,,,,RenderPerfTest reports missing frames on the latest OpenJDK builds. The problem is similar to JDK-8287600. It came back after the integration of JDK-8288948. The problem is reproducible only on M1 hardware.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288948,JDK-8287600,,,JDK-8299207,,,,,,,"2022-08-04 05:40;avu;DrawTest.java;https://bugs.openjdk.org/secure/attachment/100305/DrawTest.java","2022-07-27 03:11;avu;render_perf.txt;https://bugs.openjdk.org/secure/attachment/100164/render_perf.txt","2022-07-27 07:49;avu;render_perf_fixed.txt;https://bugs.openjdk.org/secure/attachment/100166/render_perf_fixed.txt",,,,,,,,,,aarch64,,,,,,,20,,os_x,,,,,"0|i2y1dv:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-07-27 03:12;avu;We need to wait until the content is rendered after switching rendering surfaces;;;","2022-07-27 07:44;avu;The proposed solution provides slightly better numbers in RenderPerfTest on M1 except for the following tests:
java -Dsun.java2d.metal=true  renderperf.RenderPerfTest ClipFlatBox LinGrad3RotatedOval RadGrad3RotatedOval

Before:
ClipFlatBox : 27.27 FPS
LinGrad3RotatedOval : 18.40 FPS
RadGrad3RotatedOval : 16.65 FPS

After:
ClipFlatBox : 20.64 FPS
LinGrad3RotatedOval : 11.80 FPS
RadGrad3RotatedOval : 10.99 FPS;;;","2022-08-04 05:41;avu;Here is a standalone test (DrawTest.java) reproducing the problem;;;","2022-08-04 14:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9756
Date: 2022-08-04 21:07:02 +0000;;;","2022-08-04 14:17;avu;The new solution does not have any regressions in RenderPerfTest;;;","2022-08-12 02:52;dukebot;Changeset: 871b7dab
Author:    Alexey Ushakov <avu@openjdk.org>
Date:      2022-08-12 09:48:57 +0000
URL:       https://git.openjdk.org/jdk/commit/871b7dab143fd92f14724563d448126a537fa5d1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK can't be built without G1,JDK-8291238,5080260,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccheung,vkempik,vkempik,2022-07-27 01:57,2022-08-15 17:00,2023-10-01 09:56,2022-08-09 09:35,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,"Doing a minimalistic build ( for buildjdk, as part of cross-compilation process) with only parallelGC (  --with-jvm-features=-zgc,-compiler2,-epsilongc,-g1gc,-jfr,-jni-check,-jvmci,-jvmti,-shenandoahgc ) and getting this error:

/jdk/src/hotspot/share/cds/filemap.cpp: In member function 'void FileMapHeader::populate(FileMapInfo*, size_t, size_t, size_t, size_t)':
/jdk/src/hotspot/share/cds/filemap.cpp:258:32: error: 'G1CollectedHeap' has not been declared
  258 |       address start = (address)G1CollectedHeap::heap()->reserved().start();
      |                                ^~~~~~~~~~~~~~~
/jdk/src/hotspot/share/cds/filemap.cpp:259:30: error: 'G1CollectedHeap' has not been declared
  259 |       address end = (address)G1CollectedHeap::heap()->reserved().end();
      |                              ^~~~~~~~~~~~~~~
/jdk/src/hotspot/share/cds/filemap.cpp: In member function 'void FileMapInfo::write_region(int, char*, size_t, bool, bool)':
/jdk/src/hotspot/share/cds/filemap.cpp:1525:48: error: 'G1CollectedHeap' has not been declared
 1525 |       mapping_offset = requested_base - (char*)G1CollectedHeap::heap()->reserved().start();
      |                                                ^~~~~~~~~~~~~~~


cds is using G1 classes unconditionally",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y17f:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-08 07:12;stefank;CDS needs to guards its G1 code usage.;;;","2022-08-08 20:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9800
Date: 2022-08-09 03:42:11 +0000;;;","2022-08-09 09:35;dukebot;Changeset: 8d0d9eaa
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-08-09 16:30:44 +0000
URL:       https://git.openjdk.org/jdk/commit/8d0d9eaa9c4b250d90e18e709aff7bdfd70b3395
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create Test Cases to cover scenarios for JDK-8278067,JDK-8291226,5080248,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rgangadhar,rgangadhar,rgangadhar,2022-07-27 01:25,2023-03-29 00:34,2023-10-01 09:56,2022-10-12 04:48,11.0.17-oracle,17.0.5-oracle,19.0.1,,,,20,core-libs,,0,CPU23_01-regtest-request,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,ursqe-triaged,,,,,,,,,,,,,,,,,,,,JDK-8302575,JDK-8302574,JDK-8305156,JDK-8302936,JDK-8305154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295218,,,,JDK-8278067,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y14r:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-08-22 01:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9958
Date: 2022-08-22 08:26:19 +0000;;;","2022-10-12 04:48;dukebot;Changeset: 86ec158d
Author:    Ramesh Bhagavatam Gangadhar <rgangadhar@openjdk.org>
Committer: Michael McMahon <michaelm@openjdk.org>
Date:      2022-10-12 11:44:44 +0000
URL:       https://git.openjdk.org/jdk/commit/86ec158dfb7a770fe9a74ff8617bac938d0bb90f
;;;","2023-03-28 07:01;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.20,17.0.8-oracle.
No risk, only a test change.
Clean backport.
Test passes with 8291637, 8291638 applied. Will backport these, need this as prereq.  SAP nighlty testing passed;;;","2023-03-28 07:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1224
Date: 2023-03-28 14:04:07 +0000;;;","2023-03-28 07:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1820
Date: 2023-03-28 14:17:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create a non static nested class without enclosing class throws VerifyError  ,JDK-8291154,5079883,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,acobbs,webbuggrp,webbuggrp,2022-07-22 21:50,2023-03-29 23:15,2023-10-01 09:56,2023-03-24 07:15,17,18,,,,,21,tools,,0,dcsad,regression,reproducer-yes,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Creation of a static child class(AA) of an non static class(A) without enclosing class (EnclosingClass) throws VerifyError at runtime instead of an compiler error at compile time. 

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the code provided

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
compile time error
ACTUAL -
VerifyError at runtime:
Exception in thread ""main"" java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    EnclosingClass$A$AA.<init>()V @2: getfield
  Reason:
    Type uninitializedThis (current frame, stack[1]) is not assignable to 'EnclosingClass$A$AA'
  Current Frame:
    bci: @2
    flags: { flagThisUninit }
    locals: { uninitializedThis }
    stack: { uninitializedThis, uninitializedThis }
  Bytecode:
    0000000: 2a2a b400 01b7 0007 b1                 

	at EnclosingClass$A.create(EnclosingClass.java:12)
	at EnclosingClass.main(EnclosingClass.java:18)

---------- BEGIN SOURCE ----------
public class EnclosingClass {

    public abstract class A {

        public static class AA extends A {

        }

        public static A create() {
            return new AA();
        }

    }

    public static void main(String[] args) {
        A.create();
    }

}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Make A static  - it should not compile this way.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8254321,,,,,,,"2022-07-26 21:50;adev;EnclosingClass.java;https://bugs.openjdk.org/secure/attachment/100161/EnclosingClass.java",,,,,,,,,,,,generic,,,,,,,16,,generic,,,,,"0|i2xyvn:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-07-26 21:53;adev;The issue is reproducible.
After successful compilation, VerifyError is thrown when executing the application:

Exception in thread ""main"" java.lang.VerifyError: Bad type on operand stack;;;","2022-07-26 22:00;adev;Some observations:
Compilation error is thrown from JDK 8 till JDK 15: 

.\EnclosingClass.java:5: error: modifier static not allowed here
        public static class AA extends A {
                      ^
.\EnclosingClass.java:10: error: non-static variable this cannot be referenced from a static context
            return new AA();
                   ^
.\EnclosingClass.java:9: error: Illegal static declaration in inner class EnclosingClass.A
        public static A create() {
                        ^
  modifier 'static' is only allowed in constant variable declarations
3 errors


Since JDK 16+, there is no compilation issue. But VerifyError is thrown while executing the application. This is a regression issue.;;;","2023-01-11 13:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11954
Date: 2023-01-11 21:33:08 +0000;;;","2023-03-24 07:15;dukebot;Changeset: f96aee74
Author:    Archie L. Cobbs <archie.cobbs@gmail.com>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2023-03-24 14:13:21 +0000
URL:       https://git.openjdk.org/jdk/commit/f96aee74010476a850175f7012c196e40a31c188
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong position of focus of screen reader on Windows with screen scale > 1,JDK-8291087,5080009,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,webbuggrp,webbuggrp,2022-07-26 00:10,2023-05-18 17:09,2023-10-01 09:56,2022-08-09 04:34,8,jfx19,,,,,jfx20,javafx,,0,8bpr-critical-approved,a11y,accessibility,bugdb_34486244,esc_acc,hidpi,noreg-hard,sn_124,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10 with display scaling != 100%

A DESCRIPTION OF THE PROBLEM :
When we use a scaling in Windows which is not 100% (e.g. 150% or 300%) the narrator focus will be displayed not on the focussed element itself but far away from it.

Our workaround is to disable hiDpi (Dprism.allowhidpi=false), but this comes with other problems.

We provide a screenshot an a standalone test here: https://intechcorecom-my.sharepoint.com/:u:/g/personal/m_tratschuk_intechcore_com/Eb2-lGrljqlHlpQ8Qce-cTMBjDaYsiW7sK3jZVs0GCfQLw?e=QdI7DF


FREQUENCY : always


",,,,,,,,,,JDK-8294808,JDK-8292241,JDK-8297422,JDK-8297456,JDK-8293415,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292340,JDK-8308191,JDK-8291590,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,"0|i2xznn:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7a09e639,,,,,,,,,"2022-07-26 17:08;kcr;This is reproducible on all versions of JavaFX with HiDPI scaling (i.e., screen scale > 100%).;;;","2022-07-28 08:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/853
Date: 2022-07-28 15:01:34 +0000;;;","2022-08-09 04:33;dukebot;Changeset: 38324a70
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-08-09 11:30:01 +0000
URL:       https://git.openjdk.org/jfx/commit/38324a70c3054e75cb22865e7ffcc5375b62939d
;;;","2022-11-21 15:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/93
Date: 2022-11-21 23:43:01 +0000;;;","2022-11-22 12:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/121
Date: 2022-11-22 20:32:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Some sun/tools/jstatd/TestJstatd* tests fail with ""Not a percentage\: 68.31\: expected true, was false""",JDK-8291081,5080098,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2022-07-26 16:47,2022-08-17 17:53,2023-10-01 09:56,2022-08-10 17:35,19,,,,,,20,core-svc,,0,atr,imt,,,,,,,,,,,,,,,,"These tests failed with:
Start jstat:
[C:\\Users\\ti3nloi\\Downloads\\Nu\\jdk-19_windows-x64_bin-debug\\jdk-19\\fastdebug\\bin\\jstat.exe -J-XX:+UsePerfData -J-Duser.language=en -gcutil 520@WIN-05AK1RV1CLP:55149 250 5]
[2022-07-05T02:14:49.330472500Z] Gathering output for process 3296
[2022-07-05T02:14:51.943333300Z] Waiting for completion for process 3296
[2022-07-05T02:14:51.944328500Z] Waiting for completion finished for process 3296
Output and diagnostic info for process 3296 was saved into 'pid-3296-output.log'
  S0     S1     E      O      M     CCS    YGC     YGCT     FGC    FGCT     CGC    CGCT       GCT   
  0.00  68.31   0.00  28.80  93.79  80.42      5     0.056     0     0.000     0     0.000     0.056
  0.00  68.31   0.00  28.80  93.79  80.42      5     0.056     0     0.000     0     0.000     0.056
  0.00  68.31   0.00  28.80  93.79  80.42      5     0.056     0     0.000     0     0.000     0.056
  0.00  68.31   0.00  28.80  93.79  80.42      5     0.056     0     0.000     0     0.000     0.056
  0.00  68.31   0.00  28.80  93.79  80.42      5     0.056     0     0.000     0     0.000     0.056

[2022-07-05T02:14:51.946328400Z] Waiting for completion for process 3296
[2022-07-05T02:14:51.946328400Z] Waiting for completion finished for process 3296
ProcessThread.stopProcess() will kill process
[2022-07-05T02:14:51.967771100Z] Gathering output for process 520
[2022-07-05T02:14:51.985681900Z] Waiting for completion for process 520
[2022-07-05T02:14:51.985681900Z] Waiting for completion finished for process 520
--- ProcessLog ---
cmd: C:\\Users\\ti3nloi\\Downloads\\Nu\\jdk-19_windows-x64_bin-debug\\jdk-19\\fastdebug\\bin\\jstatd.exe -J-XX:+UsePerfData -p 55149
exitvalue: 1
stderr: 
stdout: 

----------System.err:(19/1147)----------
java.lang.RuntimeException: Not a percentage: 68.31: expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at JstatGCUtilParser$GcStatistics.verify(JstatGCUtilParser.java:109)
	at JstatGCUtilParser.parse(JstatGCUtilParser.java:145)
	at JstatdTest.verifyJstatOutput(JstatdTest.java:207)
	at JstatdTest.runToolsAndVerify(JstatdTest.java:215)
	at JstatdTest.runTest(JstatdTest.java:347)
	at JstatdTest.doTest(JstatdTest.java:315)
	at TestJstatdPort.main(TestJstatdPort.java:39)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1596)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291082,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y07f:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2022-08-02 10:54;mwthomps;[~lmesnik] Please provide details on how to reproduce this issue;;;","2022-08-08 13:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9798
Date: 2022-08-08 19:52:47 +0000;;;","2022-08-10 17:35;dukebot;Changeset: 36ef4c1a
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-08-11 00:30:19 +0000
URL:       https://git.openjdk.org/jdk/commit/36ef4c1a92348b392b6009ea8b3e5636bfa1b726
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Creating a VarHandle for a static field triggers class initialization,JDK-8291065,5080081,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,liach,cwimmer,cwimmer,2022-07-26 14:20,2023-08-10 09:07,2023-10-01 09:56,2023-07-17 17:59,11,17,19,21,22,,22,core-libs,,0,amazon-interest,release-note=yes,,,,,,,,,,,,,,,,"The specification (= JavaDoc) of MethodHandles.Lookup#findStaticVarHandle and MethodHandles.Lookup#unreflectVarHandle state

```
If the returned VarHandle is operated on, the declaring class will be
initialized, if it has not already been initialized.
```
(from https://github.com/openjdk/jdk/blob/160944bc6bd94d2927f398cf7732027c1b836a42/src/java.base/share/classes/java/lang/invoke/MethodHandles.java#L3194)

I interpret ""is operated on"" as ""creating the VarHandle itself does not trigger class initialization, only the first usage of the VarHandle will initialize the class"".

But class initialization is always triggered already when the VarHandle for a static field is created. This is fairly obvious from the JDK code: https://github.com/openjdk/jdk/blob/160944bc6bd94d2927f398cf7732027c1b836a42/src/java.base/share/classes/java/lang/invoke/VarHandles.java#L115

So the current implementation is not in sync with the specification, either one of them need to be fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311075,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2y03n:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2022-08-25 11:52;mchung;It's a bug in the implementation that should initialize the class when VarHandle is accessed if the class hasn't been initialized.  As noted in the comment (https://github.com/openjdk/jdk/blob/160944bc6bd94d2927f398cf7732027c1b836a42/src/java.base/share/classes/java/lang/invoke/VarHandles.java#L108), it should do something like the direct method handle to set up static field access with a <clinit> barrier and then use the barrier-free form after the class is initialized.;;;","2023-05-04 21:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13821
Date: 2023-05-05 04:48:09 +0000;;;","2023-07-17 17:59;dukebot;Changeset: 201e3bcf
Author:    Chen Liang <liach@openjdk.org>
Committer: Mandy Chung <mchung@openjdk.org>
Date:      2023-07-18 00:58:25 +0000
URL:       https://git.openjdk.org/jdk/commit/201e3bcf52cac64510d50fbdfcd522638d1d0442
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve thread safety of FileTime.toString and toInstant,JDK-8291061,5080077,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2022-07-26 13:32,2022-08-10 19:12,2023-10-01 09:56,2022-08-04 23:58,17,19,20,,,,20,core-libs,,0,noreg-hard,,,,,,,,,,,,,,,,,"Class java.nio.file.attribute.FileTime is immutable with 2 fields which are initialized lazily.
We need to read fields instant/valueAsString once, as to dodge/resolve the data race on reading lazily-initialized fields.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8011647,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y02r:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-07-26 13:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9608
Date: 2022-07-22 07:34:19 +0000;;;","2022-08-04 23:58;dukebot;Changeset: 6e7cd762
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-08-05 06:56:20 +0000
URL:       https://git.openjdk.org/jdk/commit/6e7cd7627d7e5c885b34afb1cb9458221a279e08
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update boot JDK to 17.0.4,JDK-8291051,5080065,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,kcr,kcr,kcr,2022-07-26 09:52,2022-08-19 05:48,2023-10-01 09:56,2022-08-18 16:09,jfx17.0.5,,,,,,jfx17.0.5,javafx,,0,18-na,noreg-build,,,,,,,,,,,,,,,,"The specified boot JDK used to build JavaFX 17.0.x is currently specified as JDK 16.0.2, which is way past EOL. We should update the boot JDK used to build JavaFX to JDK 17.0.4. Note that this won't affect the minimum JDK needed to build or run JavaFX 17.0.x, which remains at JDK 11.

This will also help when building Mac aarch64 binaries.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y003:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-08-17 07:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/78
Date: 2022-08-17 14:28:16 +0000;;;","2022-08-18 16:09;roboduke;Changeset: 9947198c
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-08-18 23:05:29 +0000
URL:       https://git.openjdk.org/jfx17u/commit/9947198cfab960f0453cf97ba537ec54f0a7bf4b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
x86: compiler/c2/irTests/TestAutoVectorization2DArray.java fails with lower SSE,JDK-8291048,5080062,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-07-26 09:00,2022-08-03 19:42,2023-10-01 09:56,2022-07-27 10:03,20,,,,,,20,hotspot,,0,c2,noreg-self,oracle-triage-20,,,,,,,,,,,,,,,"This configuration fails:

$ CONF=linux-x86-server-fastdebug make test TEST=compiler/c2/irTests/TestAutoVectorization2DArray.java TEST_VM_OPTS=""-XX:UseAVX=0 -XX:UseSSE=0""

Failed IR Rules (3) of Methods (1)
----------------------------------
1) Method ""private static void compiler.c2.irTests.TestAutoVectorization2DArray.testDouble(double[][],double[][],double[][])"" - [Failed IR rules: 3]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""(\\d+(\\s){2}(LoadVector.*)+(\\s){2}===.*)"", "" >0 ""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\d+(\s){2}(LoadVector.*)+(\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!
   * @IR rule 2: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""(\\d+(\\s){2}(AddVD.*)+(\\s){2}===.*)"", "" >0 ""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\d+(\s){2}(AddVD.*)+(\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!
   * @IR rule 3: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""(\\d+(\\s){2}(StoreVector.*)+(\\s){2}===.*)"", "" >0 ""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\d+(\s){2}(StoreVector.*)+(\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!

Bisect points to JDK-8289801, which whitelisted the UseSSE/UseAVX flags, but missed update in the test.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289801,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xzzf:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-26 10:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9646
Date: 2022-07-26 17:24:38 +0000;;;","2022-07-27 00:05;dlong;ILW = test failure; one test; no workaround = MLH = P4;;;","2022-07-27 10:03;dukebot;Changeset: dc74ea21
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-07-27 16:58:49 +0000
URL:       https://git.openjdk.org/jdk/commit/dc74ea21f104f49c137476142b6f6340fd34af62
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Testbug] DefaultButtonTest.java is failing always on linux platforms with 8u361,JDK-8291020,5080032,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mvs,rgupta,rgupta,2022-07-26 04:21,2023-01-29 22:11,2023-10-01 09:56,2023-01-23 06:50,8u361,,,,,,8u371,client-libs,,0,colocation-client-bugs,sqebug,testbug,,,,,,,,,,,,,,,"Testsuite name: Regression
Test name(s): jdk/test/javax/swing/JRootPane/DefaultButtonTest.java

Product(s) tested: 8u361
OS/architecture: Linux (tested on Ubuntu 22.04, 20.10, 18.04)
Reproducible: Always

Is it a Regression: No. Test is introduced in 8u361 (JDK-8291156)  as part of test-colocation efforts.
Is it reproducible on other trains: Tried it on JDK11u, 19u and not reproducible.
Is it a platform specific issue: Yes, issue is seen only with Linux and not reproducible on Windows, Mac platforms",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291156,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2xzsr:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/foreign/TestUnsupportedPlatform fails after JDK-8290455,JDK-8291006,5080018,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-07-26 02:39,2023-07-23 04:23,2023-10-01 09:56,2022-07-27 02:56,19,,,,,,19,core-libs,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,"The fix for JDK-8290455 fixes the behavior of Linker with unsupported platform, so that it throws UnsupportedOperationException instead of IllegalStateException (this is all per Java SE spec).

Unfortunately, a stray test still depends on the old behavior, and now fails with unsupported platforms.",,,,,,,,,,JDK-8291722,JDK-8291332,JDK-8291744,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290455,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xzpn:",9223372036854775807,b33,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-07-26 02:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/155
Date: 2022-07-26 09:44:53 +0000;;;","2022-07-27 02:56;dukebot;Changeset: 36c00fdd
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-07-27 09:50:58 +0000
URL:       https://git.openjdk.org/jdk19/commit/36c00fdd74692b85e63e57e192f42c14561efd01
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ARM32: constant_table.size assertion,JDK-8291003,5080014,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,bulasevich,bulasevich,bulasevich,2022-07-26 02:01,2022-08-03 20:22,2023-10-01 09:56,2022-07-28 23:26,20,,,,,,20,hotspot,,0,c2,oraclejdk-na,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,"ARM32 fastdebug build fails with assertion caused by consts_size miscalculation.

$ ./jdk-20/fastdebug/bin/java -Xcomp -version

#  Internal Error (/home/user/jdk/src/hotspot/cpu/arm/arm.ad:240), pid=24155, tid=24168
#  assert(constant_table.size() == consts_size) failed: must be: 208 == 200
#
# JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-internal-adhoc.user.jdk)
# Java VM: OpenJDK Server VM (fastdebug 20-internal-adhoc.user.jdk, mixed mode, g1 gc, linux-arm)
# Problematic frame:
# V  [libjvm.so+0xe2ed8]  MachConstantBaseNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x22b
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287373,,,,,,,,,,,,,,,,,,,arm,,,,,,,,,,,,,,"0|i2xzor:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-26 02:36;thartmann;ILW = Assert during C2 compilation, easy to reproduce on ARM 32, no workaround but disable compilation = HMM = P2;;;","2022-07-28 04:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9672
Date: 2022-07-28 08:24:22 +0000;;;","2022-07-28 23:25;dukebot;Changeset: 18cd16d2
Author:    Boris Ulasevich <bulasevich@openjdk.org>
Date:      2022-07-29 06:21:48 +0000
URL:       https://git.openjdk.org/jdk/commit/18cd16d2eae2ee624827eb86621f3a4ffd98fe8c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clear .root style class from a root node that is removed from a Scene/SubScene,JDK-8290990,5079999,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mstrauss,mstrauss,mstrauss,2022-07-25 19:41,2022-11-29 06:06,2023-10-01 09:56,2022-07-28 05:56,jfx18,,,,,,jfx20,javafx,,0,css,,,,,,,,,,,,,,,,,"When a `Node` is set as the root node of a `Scene` or `SubScene`, the ""root"" style class is automatically added to the node, but not cleared when the node is later removed from the scene.

This can lead to an incorrectly set ""root"" style class when the removed node is inserted in the scene graph below the root node, or to duplicate ""root"" style class entries when the removed node is again set as the root node of the scene.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xzlf:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-07-25 19:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/849
Date: 2022-07-26 02:46:15 +0000;;;","2022-07-28 05:56;dukebot;Changeset: 0b74ee80
Author:    Michael Strauß <mstrauss@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-07-28 12:52:15 +0000
URL:       https://git.openjdk.org/jfx/commit/0b74ee80e39a2b240eb7776feaea1711dfb29c7a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minor cleanup could be done in javax.security,JDK-8290975,5079980,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mpowers,mpowers,mpowers,2022-07-25 11:26,2022-08-15 16:50,2023-10-01 09:56,2022-08-08 10:34,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,"JDK-8273046 is the umbrella bug for this bug. The changes were too large for a single code review, so it was decided to split JDK-8273046 into smaller chunks. This is one such chunk for files under open/src/java.base/share/classes/javax/security (javax.security).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273046,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xzh7:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5c1d831a,,,,,,,,,"2022-07-28 07:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9664
Date: 2022-07-27 20:24:19 +0000;;;","2022-08-08 10:34;dukebot;Changeset: 08274e6f
Author:    Mark Powers <mpowers@openjdk.org>
Committer: Bradford Wetmore <wetmore@openjdk.org>
Date:      2022-08-08 17:30:22 +0000
URL:       https://git.openjdk.org/jdk/commit/08274e6fea982e71ccc5964f4919c65501b048e1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"In AffineTransform, equals(Object) is inconsistent with hashCode()",JDK-8290973,5079963,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,webbuggrp,webbuggrp,2022-07-25 06:25,2022-10-19 06:20,2023-10-01 09:56,2022-10-06 09:08,11,17,8,,,,20,client-libs,,0,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The equals(Object) method is inconsistent with hashCode() in the AffineTransform class. This bug prevents the use of AffineTransform as keys in HashMap, unless AffineTransform construction is well-controlled or some workaround is applied before any use as key. 

More specifically, AffineTransform breaks two contracts documented in Object.equals(Object) javadoc:

* A.equals(A) returns false if at least one affine transform coefficient is NaN.
* A.equals(B) should imply A.hashCode() == B.hashCode(), but it is not the case if a coefficient is zero with an opposite sign in A and B.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Following code should print ""true"" but prints ""false"":

AffineTransform a = new AffineTransform(1, 0, 0, 1, Double.NaN, 0);
System.out.println(a.equals(a));

Following code should print either ""true, true"" or ""false, <anything>"" but print ""true, false"":

AffineTransform a = new AffineTransform(2, 0, 0, 3, 0, +0.0);
AffineTransform b = new AffineTransform(2, 0, 0, 3, 0, -0.0);
System.out.println(a.equals(b));
System.out.println(a.hashCode() == b.hashCode());


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
true
true
true

or

true
false
<anything>

ACTUAL -
false
true
false


---------- BEGIN SOURCE ----------
import java.awt.geom.AffineTransform;

public class Test {
    public static void main(String[] args) {
        AffineTransform r = new AffineTransform(1, 0, 0, 1, Double.NaN, 0);
        System.out.println(r.equals(r));

        AffineTransform a = new AffineTransform(2, 0, 0, 3, 0, +0.0);
        AffineTransform b = new AffineTransform(2, 0, 0, 3, 0, -0.0);
        System.out.println(a.equals(b));
        System.out.println(a.hashCode() == b.hashCode());
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Before any use of AffineTransform as a key in an HashMap:

private static double pz(double value) {
    return (value != 0) ? value : 0;
}

private static void fix(AffineTransform a) {
    a.setTransform(
        pz(a.getScaleX()),     pz(a.getShearY()),
        pz(s.getShearX()),     pz(a.getScaleY()),
        pz(a.getTranslateX()), pz(a.getTranslateY()));
}


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8226930,,,,JDK-8289389,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xzdf:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-07-25 10:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9121
Date: 2022-06-10 09:39:48 +0000;;;","2022-10-06 09:07;dukebot;Changeset: 5c030ccc
Author:    Martin Desruisseaux <martin.desruisseaux@geomatys.com>
Committer: Jayathirth D V <jdv@openjdk.org>
Date:      2022-10-06 16:03:36 +0000
URL:       https://git.openjdk.org/jdk/commit/5c030cccae6cd7862b7ecc563fde4b7670f25c10
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DumpClassListCLDClosure incorrectly uses ResizeableResourceHashtable,JDK-8290969,5079971,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,eastigeevich,eastigeevich,eastigeevich,2022-07-25 08:23,2022-08-01 10:29,2023-10-01 09:56,2022-07-26 05:13,18,19,20,,,,20,hotspot,,0,performance,,,,,,,,,,,,,,,,,"DumpClassListCLDClosure wants to use a hash table for dumped classes with the initial size of 1987 and the maximum size of 61333. It chose ResizeableResourceHashtable (open hashing table) which it uses incorrectly:
1. An instance of ResizeableResourceHashtable is constructed with ResizeableResourceHashtable(INITIAL_TABLE_SIZE) which means ResizeableResourceHashtable(/* size= */ INITIAL_TABLE_SIZE, /* max_size= */ 0). It should be ResizeableResourceHashtable(INITIAL_TABLE_SIZE, MAX_TABLE_SIZE) instead.
2. It calls ResizeableResourceHashtable::maybe_grow(int load_factor). ResizeableResourceHashtable::maybe_grow  increases the hash table size and re-balances it depending on the provided load factor. If the hash table maximum size is set to 0, it does nothing. As the table for dumped classes is created with the max size set to 0, the call does nothing. If the table is created with ResizeableResourceHashtable(INITIAL_TABLE_SIZE, MAX_TABLE_SIZE) the call will still be incorrect. The function is called with MAX_TABLE_SIZE which makes the function to use 61333 as a load factor. The hash table load factor is number_of_entries / table size. The call will work when number_of_entries > 61333*1987=121,868,671. This does not look reasonable. The correct call should be without arguments (the default load factor) or with a reasonable load factor.

This bug can cause the search in the dumped classes table to become linear and slow down DumpClassListCLDClosure::dump.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b10,18,,,,,,,"0|i2xzf7:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-07-25 11:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9632
Date: 2022-07-25 18:13:23 +0000;;;","2022-07-26 05:12;dukebot;Changeset: 330adc03
Author:    Evgeny Astigeevich <eastig@amazon.com>
Committer: Volker Simonis <simonis@openjdk.org>
Date:      2022-07-26 12:10:56 +0000
URL:       https://git.openjdk.org/jdk/commit/330adc03a9314b188d05b3f8d06f97826b7a3847
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2 compilation fails with assert ""non-reduction loop contains reduction nodes""",JDK-8290964,5079961,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rcastanedalo,thartmann,thartmann,2022-07-25 05:12,2023-01-09 08:35,2023-10-01 09:56,2022-10-05 02:47,11.0.16,17,19,20,,,20,hotspot,,0,c2,c2-superword,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,oracle-triage-20,tier6,tier8,,,,,"Similar to JDK-8286177:

#  Internal Error (/oracle/jdk3/open/src/hotspot/share/opto/superword.cpp:2452), pid=1970381, tid=1970394
#  assert(!lpt()->has_reduction_nodes() || cl->is_reduction_loop()) failed: non-reduction loop contains reduction nodes
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-internal-2022-07-25-1155399.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-internal-2022-07-25-1155399.tobias..., compiled mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1a4948e]  SuperWord::output()+0xc0e

Current CompileTask:
C2:    305   31    b  4       Test::mainTest (617 bytes)

Stack: [0x00007f294ad5d000,0x00007f294ae5e000],  sp=0x00007f294ae57e00,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1a4948e]  SuperWord::output()+0xc0e
V  [libjvm.so+0x1a4c4b2]  SuperWord::transform_loop(IdealLoopTree*, bool)+0x262
V  [libjvm.so+0x14ffed2]  PhaseIdealLoop::build_and_optimize()+0x12b2
V  [libjvm.so+0xb1c5e3]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x293
V  [libjvm.so+0xb18e37]  Compile::Optimize()+0xda7
V  [libjvm.so+0xb1b020]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x15c0
V  [libjvm.so+0x925373]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x683
V  [libjvm.so+0xb2a138]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xbb8
V  [libjvm.so+0xb2b068]  CompileBroker::compiler_thread_loop()+0x638
V  [libjvm.so+0x10a5c88]  JavaThread::thread_main_inner()+0x238
V  [libjvm.so+0x1ada4e0]  Thread::call_run()+0x100
V  [libjvm.so+0x17974a4]  thread_native_entry(Thread*)+0x104",,,,,,,,,,JDK-8297511,JDK-8296357,JDK-8296254,JDK-8299822,JDK-8299467,,,,,,,,,,,,,,,,,,,,,JDK-8292766,,,,,,,,JDK-8286177,,,,JDK-8287087,JDK-8279622,,,,,,"2022-07-25 05:17;thartmann;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/100128/FuzzerUtils.java","2022-08-02 23:33;thartmann;Test-1.java;https://bugs.openjdk.org/secure/attachment/100258/Test-1.java","2022-09-07 23:13;chagedorn;Test-2.java;https://bugs.openjdk.org/secure/attachment/100707/Test-2.java","2022-07-25 05:17;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/100127/Test.java","2022-08-07 06:28;dcubed;hs_err_pid31368.log;https://bugs.openjdk.org/secure/attachment/100331/hs_err_pid31368.log","2022-08-07 06:28;dcubed;hs_err_pid45332.log;https://bugs.openjdk.org/secure/attachment/100332/hs_err_pid45332.log",,,,,,,,,,,,,,,,,,,,,"0|i2xzcz:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-25 05:12;thartmann;ILW = Same as JDK-8286177 = P3;;;","2022-07-25 05:19;thartmann;Looks like the fix for JDK-8286177 was incomplete (maybe the re-design described in JDK-8287087 is required). [~rcastanedalo], could you please have a look?

I can not reproduce this with JDK 17u or 11u but those version should be affected as well.;;;","2022-08-02 23:34;thartmann;I attached another Test that the JavaFuzzer just found.;;;","2022-08-03 00:09;rcastanedalo;Thanks for the report [~thartmann], I plan to propose a patch for JDK-8287087 for JDK 20, that should address these failures and prevent the potential miscompilations that the assertion warns about.;;;","2022-08-06 07:06;dcubed;Here's some hs_err_pid snippets for the jdk-20+10-537-tier6 sighting:

applications/javafuzzer/MediumTest.java

#  Internal Error (c:\sb\prod\1659691166\workspace\open\src\hotspot\share\opto\superword.cpp:2453), pid=19524, tid=6852
#  assert(!lpt()->has_reduction_nodes() || cl->is_reduction_loop()) failed: non-reduction loop contains reduction nodes
#
# JRE version: Java(TM) SE Runtime Environment (20.0+10) (fastdebug build 20-ea+10-537)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+10-537, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, windows-amd64)

<snip>

---------------  T H R E A D  ---------------

Current thread (0x0000023aba10a2d0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=6852, stack(0x0000008584400000,0x0000008584500000)]


Current CompileTask:
C2:    734   78    b        Test::mainTest (618 bytes)

Stack: [0x0000008584400000,0x0000008584500000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc5e081]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xebb29e]  VMError::report+0x10de  (vmError.cpp:839)
V  [jvm.dll+0xebccce]  VMError::report_and_die+0x65e  (vmError.cpp:1687)
V  [jvm.dll+0xebd444]  VMError::report_and_die+0x64  (vmError.cpp:1468)
V  [jvm.dll+0x59c427]  report_vm_error+0xb7  (debug.cpp:284)
V  [jvm.dll+0xdd62ad]  SuperWord::output+0xed  (superword.cpp:2452)
V  [jvm.dll+0xdc6dfc]  SuperWord::SLP_extract+0x52c  (superword.cpp:584)
V  [jvm.dll+0xddd3e6]  SuperWord::transform_loop+0x3e6  (superword.cpp:179)
V  [jvm.dll+0xab60ca]  PhaseIdealLoop::build_and_optimize+0x135a  (loopnode.cpp:4597)
V  [jvm.dll+0x53014a]  Compile::Optimize+0x10da  (compile.cpp:2408)
V  [jvm.dll+0x52cf5d]  Compile::Compile+0x14ad  (compile.cpp:824)
V  [jvm.dll+0x452b45]  C2Compiler::compile_method+0x145  (c2compiler.cpp:115)
V  [jvm.dll+0x547050]  CompileBroker::invoke_compiler_on_method+0x980  (compileBroker.cpp:2314)
V  [jvm.dll+0x5445fc]  CompileBroker::compiler_thread_loop+0x25c  (compileBroker.cpp:1982)
V  [jvm.dll+0x81385f]  JavaThread::thread_main_inner+0x29f  (javaThread.cpp:700)
V  [jvm.dll+0xe34af7]  Thread::call_run+0x257  (thread.cpp:229)
V  [jvm.dll+0xc5c9a8]  thread_native_entry+0xb8  (os_windows.cpp:546)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791];;;","2022-08-07 06:27;dcubed;Here's snippets from the first hs_err_pid file in the jdk-19+34-2229-tier8 sighting: 

applications/javafuzzer/BigTest.java

#  Internal Error (c:\sb\prod\1659537137\workspace\open\src\hotspot\share\opto\superword.cpp:2422), pid=31368, tid=28736
#  assert(!lpt()->has_reduction_nodes() || cl->is_reduction_loop()) failed: non-reduction loop contains reduction nodes
#
# JRE version: Java(TM) SE Runtime Environment (19.0+34) (fastdebug build 19-ea+34-2229)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+34-2229, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, windows-amd64)

<snip>

---------------  T H R E A D  ---------------

Current thread (0x000002566f332ca0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=28736, stack(0x0000007e92e00000,0x0000007e92f00000)]


Current CompileTask:
C2:    319    3   !b        Test::mainTest (634 bytes)

Stack: [0x0000007e92e00000,0x0000007e92f00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc85441]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xee793b]  VMError::report+0x10eb  (vmError.cpp:835)
V  [jvm.dll+0xee947e]  VMError::report_and_die+0x7fe  (vmError.cpp:1687)
V  [jvm.dll+0xee9c04]  VMError::report_and_die+0x64  (vmError.cpp:1468)
V  [jvm.dll+0x5a72a7]  report_vm_error+0xb7  (debug.cpp:283)
V  [jvm.dll+0xdfa49d]  SuperWord::output+0xed  (superword.cpp:2421)
V  [jvm.dll+0xdeb86c]  SuperWord::SLP_extract+0x52c  (superword.cpp:582)
V  [jvm.dll+0xe01629]  SuperWord::transform_loop+0x419  (superword.cpp:179)
V  [jvm.dll+0xae155d]  PhaseIdealLoop::build_and_optimize+0x13ad  (loopnode.cpp:4597)
V  [jvm.dll+0x53971a]  Compile::Optimize+0x111a  (compile.cpp:2300)
V  [jvm.dll+0x536492]  Compile::Compile+0x1472  (compile.cpp:818)
V  [jvm.dll+0x45d795]  C2Compiler::compile_method+0x145  (c2compiler.cpp:115)
V  [jvm.dll+0x54fc31]  CompileBroker::invoke_compiler_on_method+0x791  (compileBroker.cpp:2313)
V  [jvm.dll+0x54d2b9]  CompileBroker::compiler_thread_loop+0x279  (compileBroker.cpp:1981)
V  [jvm.dll+0xe64e44]  JavaThread::thread_main_inner+0x2a4  (thread.cpp:1332)
V  [jvm.dll+0xe59e5c]  Thread::call_run+0x1ac  (thread.cpp:366)
V  [jvm.dll+0xc83ce9]  thread_native_entry+0xb9  (os_windows.cpp:545)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]


Here's snippets from the second hs_err_pid file in the jdk-19+34-2229-tier8 sighting: 

#  Internal Error (c:\sb\prod\1659537137\workspace\open\src\hotspot\share\opto\superword.cpp:2422), pid=45332, tid=39028
#  assert(!lpt()->has_reduction_nodes() || cl->is_reduction_loop()) failed: non-reduction loop contains reduction nodes
#
# JRE version: Java(TM) SE Runtime Environment (19.0+34) (fastdebug build 19-ea+34-2229)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+34-2229, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)

<snip>

---------------  T H R E A D  ---------------

Current thread (0x000002bc30b35df0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=39028, stack(0x000000e4dbf00000,0x000000e4dc000000)]


Current CompileTask:
C2:    340    6   !b  4       Test::mainTest (634 bytes)

Stack: [0x000000e4dbf00000,0x000000e4dc000000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc85441]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xee793b]  VMError::report+0x10eb  (vmError.cpp:835)
V  [jvm.dll+0xee947e]  VMError::report_and_die+0x7fe  (vmError.cpp:1687)
V  [jvm.dll+0xee9c04]  VMError::report_and_die+0x64  (vmError.cpp:1468)
V  [jvm.dll+0x5a72a7]  report_vm_error+0xb7  (debug.cpp:283)
V  [jvm.dll+0xdfa49d]  SuperWord::output+0xed  (superword.cpp:2421)
V  [jvm.dll+0xdeb86c]  SuperWord::SLP_extract+0x52c  (superword.cpp:582)
V  [jvm.dll+0xe01629]  SuperWord::transform_loop+0x419  (superword.cpp:179)
V  [jvm.dll+0xae155d]  PhaseIdealLoop::build_and_optimize+0x13ad  (loopnode.cpp:4597)
V  [jvm.dll+0x53971a]  Compile::Optimize+0x111a  (compile.cpp:2300)
V  [jvm.dll+0x536492]  Compile::Compile+0x1472  (compile.cpp:818)
V  [jvm.dll+0x45d795]  C2Compiler::compile_method+0x145  (c2compiler.cpp:115)
V  [jvm.dll+0x54fc31]  CompileBroker::invoke_compiler_on_method+0x791  (compileBroker.cpp:2313)
V  [jvm.dll+0x54d2b9]  CompileBroker::compiler_thread_loop+0x279  (compileBroker.cpp:1981)
V  [jvm.dll+0xe64e44]  JavaThread::thread_main_inner+0x2a4  (thread.cpp:1332)
V  [jvm.dll+0xe59e5c]  Thread::call_run+0x1ac  (thread.cpp:366)
V  [jvm.dll+0xc83ce9]  thread_native_entry+0xb9  (os_windows.cpp:545)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791];;;","2022-08-07 06:29;dcubed;I've attached both hs_err_pid files the jdk-19+34-2229-tier8 sighting: 

$ ls -ltr hs_err_pid*
-rw-r--r--@ 1 dcubed  green  80651 Aug  7 09:23 hs_err_pid31368.log
-rw-r--r--@ 1 dcubed  green  80488 Aug  7 09:23 hs_err_pid45332.log;;;","2022-09-05 04:24;chagedorn;I've attached another fuzzer fail (Test-2.java).

To reproduce:
$ java -Xcomp -XX:CompileOnly=Test Test-2.java;;;","2022-09-05 06:01;chagedorn;Attachment <Test-2.java> could not be scanned. The system has removed attachment. Please check the file before attempting to upload it again;;;","2022-09-05 08:09;smahaliswamy;Attachment <Test-2.java> could not be scanned. The system has removed attachment. Please check the file before attempting to upload it again;;;","2022-10-03 07:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10535
Date: 2022-10-03 13:41:07 +0000;;;","2022-10-05 02:47;dukebot;Changeset: 4bdd1c91
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2022-10-05 09:43:31 +0000
URL:       https://git.openjdk.org/jdk/commit/4bdd1c914859e221c64208d47ef309d463609953
;;;","2022-11-22 08:02;thartmann;Fix Request (JDK 19u)
Fixes an assertion during C2 compilation. The fix is low risk (only removes assertion code) and applies cleanly. Already tested and backported to Oracle JDK 11u and 17u.;;;","2022-11-22 08:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/84
Date: 2022-11-22 16:02:35 +0000;;;","2022-12-30 09:42;goetz;Fix request [11u, 17u]

I backport this for parity with 11.0.19-/17.0.7-oracle.
No risk, removes assertions in C2.
Clean backport. SAP nightly testing passed.;;;","2022-12-30 09:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1008
Date: 2022-12-30 17:46:16 +0000;;;","2023-01-03 10:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1630
Date: 2023-01-03 17:47:05 +0000;;;",,,,,,,,,,,,,,,,
Fix several IR test issues on SVE after JDK-8289801,JDK-8290943,5079936,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,haosun,haosun,haosun,2022-07-25 01:40,2022-08-03 19:47,2023-10-01 09:56,2022-07-27 16:49,20,,,,,,20,hotspot,,0,noreg-self,oracle-triage-20,,,,,,,,,,,,,,,,"This test case failed on SVE-based machine with ""UseSVE=0"" specified.

How to reproduce:
make test TEST=""test/hotspot/jtreg/compiler/vectorization/TestPopCountVectorLong.java"" JTREG=""VM_OPTIONS=-XX:UseSVE=0 -Djdk.incubator.vector.test.loop-iterations=300""

Error message:
STDERR:Command Line:
~/work/build-dev/images/jdk/bin/java -DReproduce=true -cp ~/work/build-dev/test-support/jtreg_test_hotspot_jtreg_compiler_vectorization_TestPopCountVectorLong_java/classes/0/compiler
/vectorization/TestPopCountVectorLong.d:~/work/jdk-src/test/hotspot/jtreg/compiler/vectorization:~/work/build-dev/test-support/jtreg_test_hotspot_jtreg_compiler_vectorization_TestPop
CountVectorLong_java/classes/0/test/lib:~/work/build-dev/test-support/jtreg_test_hotspot_jtreg_compiler_vectorization_TestPopCountVectorLong_java/classes/0:~/work/jtreg/lib/javatest.
jar:~/work/jtreg/lib/jtreg.jar:~/work/jtreg/lib/junit.jar:~/work/jtreg/lib/hamcrest.jar:~/work/jtreg/lib/testng.jar:~/work/jtreg/lib/jcommander
.jar:~/work/jtreg/lib/guice.jar -Djava.library.path=~/work/build-dev/images/test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPe
rcentage=1.5625 -Djava.io.tmpdir=~/work/build-dev/test-support/jtreg_test_hotspot_jtreg_compiler_vectorization_TestPopCountVectorLong_java/tmp -XX:UseSVE=0 -Djdk.incubator.vector.test.loop-iterat
ions=300 -Dir.framework.server.port=33733 -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompileCommand=log,compiler.vectorization.TestPopCountVectorLong::* -XX:CompileCommand=op
tion,compiler.vectorization.TestPopCountVectorLong::*,bool,PrintIdeal,true -XX:CompileCommand=option,compiler.vectorization.TestPopCountVectorLong::*,bool,PrintOptoAssembly,true -XX:-OmitStackTraceInFastThrow
 -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.vectorization.TestPopCountVectorLongOne or more @IR rules failed:Failed IR Rules (1) of Methods (1)
----------------------------------
1) Method ""public void compiler.vectorization.TestPopCountVectorLong.vectorizeBitCount()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""PopCountVL"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyI
fNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: PopCountVL
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289801,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,"0|i2xz7f:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-25 01:54;thartmann;ILW = Test fails due to unexpected C2 IR (test bug), single test on SVE supporting machines with UseSVE = 0, no workaround = MLH = P4;;;","2022-07-26 01:51;haosun;Both CPU feature CPU_SVE and VM option UseSVE should be checked to
determine whether the SVE codegen part is available.
This test failure can be easily resolved via adding the full check in
the ""requires"" annotation.

We further revisited all the SVE-oriented JTREG test cases and found two
potential issues.

1) AllBitsSetVectorMatchRuleTest.java
It's designed to test both NEON and SVE codegen. Since 1) ASIMD is the
mandatory feature on SVE platforms and 2) SVE codegen would be selected
by default on SVE platforms, it's no need to require SVE feature.

2) TestPopulateIndex.java
Similar to TestPopCountVectorLong.java, this case is expected to fail as
well on SVE with UseSVE=0. However, it didn't fail. The root cause is
that it's not correct to simply check the ""PopulateIndex"" string because
the test name i.e. TestPopulateIndex.java contains this string as well.
Instead, we turn to check IRNode name.

I'd like to address these issues in one patch. Hence, the title of this JBS is changed to ""Fix several IR test issues on SVE after JDK-8289801"".;;;","2022-07-27 00:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9653
Date: 2022-07-27 07:04:25 +0000;;;","2022-07-27 16:48;dukebot;Changeset: 16a12752
Author:    Hao Sun <haosun@openjdk.org>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2022-07-27 23:42:11 +0000
URL:       https://git.openjdk.org/jdk/commit/16a127524c78b85f17a13ba1072707bd9e851002
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sspi_bridge.dll not built if BUILD_CRYPTO is false,JDK-8290920,5079910,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,weijun,shadowbug,shadowbug,2022-07-24 18:38,2023-02-08 08:08,2023-10-01 09:56,2022-09-27 18:30,17.0.3,,,,,,20,security-libs,,0,bugdb_34388383,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,licbug,noreg-build,,,,,,,,,,,sspi_bridge.dll should be also built no matter what BUILD_CRYPTO is.,,,,,,,,,,JDK-8302076,JDK-8295410,JDK-8298433,JDK-8298230,JDK-8296465,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6722928,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xz1n:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-07-26 11:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9647
Date: 2022-07-26 18:12:33 +0000;;;","2022-09-27 18:30;dukebot;Changeset: 5e1e449c
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-09-28 01:27:57 +0000
URL:       https://git.openjdk.org/jdk/commit/5e1e449c116d44fb77a21ce4cd5187cfc55263f2
;;;","2022-11-03 12:30;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
Small risk, a build-only change.
Clean backport.
SAP nightly build and testing passes (includes win).;;;","2022-11-03 12:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/857
Date: 2022-11-03 19:31:38 +0000;;;","2023-01-23 08:37;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Small build fix, thus low risk.
Clean backport modulo renaming the file patched.
SAP nightly testing passed.;;;","2023-01-23 08:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1679
Date: 2023-01-23 16:37:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Initial nroff manpage generation for JDK 21,JDK-8290918,5079907,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,dholmes,dholmes,2022-07-24 16:08,2023-03-19 15:50,2023-10-01 09:56,2023-01-23 22:30,21,,,,,,21,infrastructure,,0,build-infra,doc,manage,noreg-doc,,,,,,,,,,,,,,"The manpages initially have JDK 20 version information, so we should regenerate them all. The version will be 21-ea and the copyright year 2023.

NOTE: this should be done after the final manpage update for JDK 20 -  JDK-8290919",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290919,,,,JDK-8304478,,JDK-8290489,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xz0z:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-01-23 15:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12154
Date: 2023-01-23 22:59:22 +0000;;;","2023-01-23 22:30;dukebot;Changeset: 6dd8723f
Author:    David Holmes <dholmes@openjdk.org>
Date:      2023-01-24 06:27:54 +0000
URL:       https://git.openjdk.org/jdk/commit/6dd8723f66a22e626d98c74cff0b0b344a62626d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
x86: Memory-operand arithmetic instructions have too low costs,JDK-8290917,5079903,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,qamai,qamai,qamai,2022-07-24 10:26,2023-05-19 09:01,2023-10-01 09:56,2022-09-16 13:10,17,20,,,,,20,hotspot,,0,amazon-interest,c2-cg,oracle-triage-11,oracle-triage-17,oracle-triage-20,performance,,,,,,,,,,,,"Arithmetic nodes with memory operands are assigned costs which are too low, which results in patterns like AddI(LoadI ConI) being matched into a constant load and an add with a memory operand instead of a memory load and an add with immediate.

For example, this function

public class Sample {
    int loadInt;

    public int testInt() {
        return loadInt + 100;
    }
}

results in compiled code:

movl    $0x64, %eax
addl    0xc(%rsi), %eax

while the desired output should be:

movl    0xc(%rsi), %eax
addl    $0x64, %eax

Also, we can do some small clean-ups in x86_64.ad:

- The mulHiL rules have unnecessary constraints on the input registers, these can be removed. The no_rax_RegL operand as a consequence can also be removed.
- The rules involving long division by a constant can be removed because it has been covered by the optimiser during idealisation.
- The pattern SubI src imm and the likes never match because they are converted to AddI src -imm by the optimiser. As a result, these rules can be removed
- The rules involving shifting the argument by 1 are covered by and exactly the same as the corresponding rules of shifting by an immediate. As a result, they can be removed.
- Some rules involving and-ing with a bit mask have unnecessary constraints on the target register.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2xz03:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-25 02:07;thartmann;ILW = Suboptimal code generation of C2, arithmetic nodes with memory operands, no workaround = MLH = P4;;;","2022-08-06 03:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9791
Date: 2022-08-06 09:53:01 +0000;;;","2022-09-16 13:10;dukebot;Changeset: 01e7b881
Author:    Quan Anh Mai <anhmdq99@gmail.com>
Committer: Sandhya Viswanathan <sviswanathan@openjdk.org>
Date:      2022-09-16 20:07:59 +0000
URL:       https://git.openjdk.org/jdk/commit/01e7b8819918906082e315870e667b15910cee99
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong memory state is picked in SuperWord::co_locate_pack(),JDK-8290910,5079889,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fgao,dcubed,dcubed,2022-07-23 07:00,2022-10-17 06:36,2023-10-01 09:56,2022-09-22 18:30,20,,,,,,20,hotspot,,0,c2,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,tier8,,,,,,,,,,,"The following test failed in the JDK20 CI:

applications/javafuzzer/BigTest.java

Here's a snippet from the log file:

----------System.out:(36/2680)----------
Using JRuby executable: /opt/mach5/mesos/work_dir/jib-master/install/org/jruby/jruby-dist/9.2.12.0/jruby-dist-9.2.12.0-bin.zip/jruby-9.2.12.0/bin/jruby
For random generator using seed: 2738850881927052418
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=2738850881927052418"" to command line.
Starting JavaFuzzer: '/bin/bash /opt/mach5/mesos/work_dir/jib-master/install/com/oracle/jpg/bigapps/javafuzzer/javafuzzer/1.0/javafuzzer-1.0.zip/mrt.sh -R /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S45783/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d852ccfd-f943-484a-a98a-a27ec0e23007/runs/e5bf1a13-986b-4657-8197-10a42c357763/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_javafuzzer_BigTest_java/scratch/0 -NT 300 -NP 12 -A -conf config.yml'
[2022-07-22T22:09:57.905914816Z] Gathering output for process 7686
[2022-07-23T07:20:56.583665013Z] Waiting for completion for process 7686
[2022-07-23T07:20:56.583810329Z] Waiting for completion finished for process 7686
Output and diagnostic info for process 7686 was saved into 'pid-7686-output.log'

Summary of the JavaFuzzer run:
------------------------------
Host:     ol8-x64-641327
Tests:    12 x 300
Args:     -conf config.yml

Started  at: Fri Jul 22 22:09:58 UTC 2022


r6- 300: 177 passed, 0 crashes, 2 fails, 0 hangs, 0 incorrect tests, 122 Reference Java failures
r8- 300: 189 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 111 Reference Java failures
r3- 300: 179 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 121 Reference Java failures
r5- 300: 187 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 113 Reference Java failures
r12- 300: 178 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 122 Reference Java failures
r4- 300: 177 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 123 Reference Java failures
r11- 300: 177 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 123 Reference Java failures
r1- 300: 178 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 122 Reference Java failures
r7- 300: 180 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 120 Reference Java failures
r9- 300: 182 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 118 Reference Java failures
r2- 300: 184 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 116 Reference Java failures
r10- 300: 173 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 127 Reference Java failures

Finished at: Sat Jul 23 07:20:56 UTC 2022


[2022-07-23T07:20:56.606831515Z] Waiting for completion for process 7686
[2022-07-23T07:20:56.606973042Z] Waiting for completion finished for process 7686
----------System.err:(13/728)----------
java.lang.RuntimeException: assertEquals: expected 1 to equal 2
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:189)
	at applications.javafuzzer.JavaFuzzerRunner.main(JavaFuzzerRunner.java:235)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: assertEquals: expected 1 to equal 2


I downloaded the test run's artifacts and there are no hs_err_pid files.
Taking a closer look at the above:

r6- 300: 177 passed, 0 crashes, 2 fails, 0 hangs, 0 incorrect tests, 122 Reference Java failures

so we have ""2 fails"", but they didn't result in crashes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294348,JDK-8291054,JDK-8293216,,,,,,,,JDK-8283091,,,,,,,"2022-07-25 03:29;thartmann;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/100115/FuzzerUtils.java","2022-07-25 03:29;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/100116/Test.java",,,,,,,,,,,x86_64,,,,,,b03,20,,linux,,,,,"0|i2xywz:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-25 03:13;thartmann;ILW = Incorrect execution of compiled code (regression in JDK 20 b3), with generated test and -Xcomp, no workaround but disable C2 compilation of affected method = HLM = P3;;;","2022-07-25 03:29;thartmann;This is a regression from JDK-8283091. [~fgao] could you please have a look?;;;","2022-07-25 03:30;thartmann;To reproduce, simply run the attached Test.java with -Xcomp and -Xint and compare the output. You can use creduce (https://embed.cs.utah.edu/creduce/) to simplify the test.;;;","2022-07-25 18:52;fgao;Thanks for your report and testcase[~thartmann]. I reproduced the error on X86. I'll investigate the root cause ASAP.;;;","2022-08-03 18:26;fgao;After JDK-8283091, the loop below can be vectorized partially. Statement 1 can be vectorized but statement 2 can't.
```
// int[] iArr; long[] lArrFld; int i1,i2;
for (i1 = 6; i1 < 227; i1++) {
  iArr[i1] += lArrFld[i1-1]++; // statement 1
  iArr[i1 + 1] -= (i2++); // statement 2
}
```

When scheduling packs in SuperWord::co_locate_pack() for statement 1, SLP visits them in the order: StoreL->LoadL->LoadI->StoreI. When finding the memory state of the LoadI pack of iArr, because of the dependency between LoadI pack and unscheduled StoreI pack, SLP goes into the branch picking the memory state of first load[1]. Then, SLP visits the StoreI pack and finds that last_mem (the memory state of last load) should be scheduled before the StoreI pack. In this way, the vector packs of iArr are scheduled incorrectly like:
```
load_vector iArr in statement 1
unvectorized loads/stores in statement 2
store_vector iArr in statement 1
```
We cannot pick the memory state from the first load for LoadI pack here, as the LoadI vector operation must load the new values in memory after iArr writes 'iArr[i1 + 1] - (i2++)' to 'iArr[i1 + 1]'(statement 2). We must take the memory state of the last load where we have assigned new values ('iArr[i1 + 1] - (i2++)') to the iArr array.

[1]https://github.com/openjdk/jdk/blob/0ae834105740f7cf73fe96be22e0f564ad29b18d/src/hotspot/share/opto/superword.cpp#L2380;;;","2022-08-04 02:35;fgao;To fix it, I think we can add an additional check here [1], to check if the store is in a pack. If the store is in a pack, we still take the memory state of the last load rather than the first load. The reason is, as designed[2], to schedule the store pack, all memory operations in another single pack should be moved in the same direction. We know that the store in the pack depends on one of loads in the load pack, so, whichever we pick, the memory state of the first load or the last load, the load pack should be scheduled before the store pack. And the load pack depends on the sandwiched last_mem so the last_mem must be scheduled before the load pack and also before the store pack. Therefore, we need to take the memory state of the last load for the load pack under the situation.
[1] https://github.com/openjdk/jdk/blob/26e5c112daa30697a42047e78744c1c533611e10/src/hotspot/share/opto/superword.cpp#L2373
[2] https://github.com/openjdk/jdk/blob/26e5c112daa30697a42047e78744c1c533611e10/src/hotspot/share/opto/superword.cpp#L2233;;;","2022-08-17 00:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9898
Date: 2022-08-17 07:48:47 +0000;;;","2022-09-22 18:30;dukebot;Changeset: a4dc035a
Author:    Fei Gao <fgao@openjdk.org>
Committer: Ningsheng Jian <njian@openjdk.org>
Date:      2022-09-23 01:26:21 +0000
URL:       https://git.openjdk.org/jdk/commit/a4dc035a9731a32083bbd3fa28408bfaa3474b54
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"MemoryPoolMBean/isUsageThresholdExceeded tests failed with ""isUsageThresholdExceeded() returned false, and is still false, while threshold = MMMMMMM and used peak = NNNNNNN""",JDK-8290909,5079888,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,dcubed,dcubed,2022-07-23 06:48,2022-08-24 23:19,2023-10-01 09:56,2022-08-20 07:26,20,,,,,,20,core-svc,,0,intermittent,tier5,tier6,tier7,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

vmTestbase/nsk/monitoring/MemoryPoolMBean/isUsageThresholdExceeded/isexceeded004/TestDescription.java

Here's a snippet from the log file:

#section:main
----------messages:(4/303)----------
command: main nsk.monitoring.MemoryPoolMBean.isUsageThresholdExceeded.isexceeded001 -testMode=proxy
reason: User specified action: run main/othervm nsk.monitoring.MemoryPoolMBean.isUsageThresholdExceeded.isexceeded001 -testMode=proxy 
Mode: othervm [/othervm specified]
elapsed time (seconds): 6.72
----------configuration:(0/0)----------
----------System.out:(93/4689)----------
[2.986s][info][jfr,startup] Started recording 1. No limit specified, using maxsize=250MB as default.
[2.986s][info][jfr,startup] 
[2.986s][info][jfr,startup] Use jcmd 21828 JFR.dump name=1 filename=FILEPATH to copy recording data to file.
MemoryMonitor   > Test mode:	access to MBean through proxy
MemoryMonitor   > MBeanServer:	DEFAULT
MemoryMonitor   > Memory:	heap	(This setting is used in lowmem* tests only)
MemoryMonitor   > Monitoring:	notification	(This setting is used in lowmem* tests only)
MemoryMonitor   > Threshold:	usage	(This setting is used in lowmem* tests only)
MemoryMonitor   > Timeout:	30	(This setting is used in lowmem* tests only)
0 pool Metaspace of type: Non-heap memory
     used value is 6295168      max is -1 isExceeded = false
  threshold set to 6295169
  threshold count  1
  reset peak usage. peak usage = 6554672 isExceeded = true
  Allocated heap.  isExceeded = true
     used value is 6597064      max is -1 isExceeded = true
peak used value is 6597064 peak max is -1
  threshold set to 6295169
  threshold count  1
  thresholdCount increasing outside our control for non-heap Pool: skip
1 pool CodeHeap 'non-nmethods' of type: Non-heap memory
     used value is 1787776      max is 5898240 isExceeded = false
  threshold set to 1787777
  threshold count  0
  reset peak usage. peak usage = 1787776 isExceeded = false
  Allocated heap.  isExceeded = false
     used value is 1794560      max is 5898240 isExceeded = false
peak used value is 1794560 peak max is 5898240
  threshold set to 1787777
  threshold count  0
# ERROR: isUsageThresholdExceeded() returned false, and is still false, while threshold = 1787777 and used peak = 1794560
The following stacktrace is for failure analysis.
nsk.share.TestFailure: isUsageThresholdExceeded() returned false, and is still false, while threshold = 1787777 and used peak = 1794560
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.monitoring.MemoryPoolMBean.isUsageThresholdExceeded.isexceeded001.run(isexceeded001.java:140)
	at nsk.monitoring.MemoryPoolMBean.isUsageThresholdExceeded.isexceeded001.main(isexceeded001.java:42)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)
2 pool CodeHeap 'profiled nmethods' of type: Non-heap memory
     used value is 3219072      max is 122880000 isExceeded = false
  threshold set to 3219073
  threshold count  0
  reset peak usage. peak usage = 3224320 isExceeded = true
  Allocated heap.  isExceeded = true
     used value is 3224320      max is 122880000 isExceeded = true
peak used value is 3224320 peak max is 122880000
  threshold set to 3219073
  threshold count  0
3 pool Compressed Class Space of type: Non-heap memory
     used value is 691904      max is 1073741824 isExceeded = false
  threshold set to 691905
  threshold count  0
  reset peak usage. peak usage = 691904 isExceeded = false
  Allocated heap.  isExceeded = false
     used value is 691904      max is 1073741824 isExceeded = false
peak used value is 691904 peak max is 1073741824
  threshold set to 691905
  threshold count  0
4 pool G1 Eden Space of type: Heap memory
  does not support usage thresholds: skip
5 pool G1 Old Gen of type: Heap memory
     used value is 2341376      max is 1073741824 isExceeded = false
  threshold set to 2341377
  threshold count  0
  reset peak usage. peak usage = 2341376 isExceeded = false
  Allocated heap.  isExceeded = false
     used value is 2341376      max is 1073741824 isExceeded = false
peak used value is 2341376 peak max is 1073741824
  threshold set to 2341377
  threshold count  0
6 pool G1 Survivor Space of type: Heap memory
  does not support usage thresholds: skip
7 pool CodeHeap 'non-profiled nmethods' of type: Non-heap memory
     used value is 1313920      max is 122880000 isExceeded = false
  threshold set to 1313921
  threshold count  0
  reset peak usage. peak usage = 1313920 isExceeded = false
  Allocated heap.  isExceeded = false
     used value is 1313920      max is 122880000 isExceeded = false
peak used value is 1313920 peak max is 122880000
  threshold set to 1313921
  threshold count  0
TEST FAILED


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: isUsageThresholdExceeded() returned false, and is still false, while threshold = 1787777 and used peak = 1794560
----------System.err:(0/0)----------
----------rerun:(39/6729)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,windows,,,,"0|i2xywr:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2022-07-23 06:50;dcubed;The JVM args in the jdk-20+8-398-tier7 test task are:

-XX:-UseCompressedOops -XX:StartFlightRecording=dumponexit=true;;;","2022-07-27 07:53;dcubed;Here's a log file snippet for the jdk-20+8-429-tier5 sighting:

vmTestbase/nsk/monitoring/MemoryPoolMBean/isUsageThresholdExceeded/isexceeded002/TestDescription.java

#section:main
----------messages:(4/306)----------
command: main nsk.monitoring.MemoryPoolMBean.isUsageThresholdExceeded.isexceeded001 -testMode=server
reason: User specified action: run main/othervm nsk.monitoring.MemoryPoolMBean.isUsageThresholdExceeded.isexceeded001 -testMode=server 
Mode: othervm [/othervm specified]
elapsed time (seconds): 7.201
----------configuration:(0/0)----------
----------System.out:(93/4936)----------
[3.316s][info][jfr,startup] Started recording 1. No limit specified, using maxsize=250MB as default.
[3.316s][info][jfr,startup] 
[3.316s][info][jfr,startup] Use jcmd 3132 JFR.dump name=1 filename=FILEPATH to copy recording data to file.
MemoryMonitor   > Test mode:	access to MBean through MBeanServer
MemoryMonitor   > MBeanServer:	DEFAULT
MemoryMonitor   > Memory:	heap	(This setting is used in lowmem* tests only)
MemoryMonitor   > Monitoring:	notification	(This setting is used in lowmem* tests only)
MemoryMonitor   > Threshold:	usage	(This setting is used in lowmem* tests only)
MemoryMonitor   > Timeout:	30	(This setting is used in lowmem* tests only)
0 pool java.lang:name=Metaspace,type=MemoryPool of type: Non-heap memory
     used value is 6347672      max is -1 isExceeded = false
  threshold set to 6347673
  threshold count  1
  reset peak usage. peak usage = 6599816 isExceeded = true
  Allocated heap.  isExceeded = true
     used value is 6636512      max is -1 isExceeded = true
peak used value is 6636512 peak max is -1
  threshold set to 6347673
  threshold count  1
  thresholdCount increasing outside our control for non-heap Pool: skip
1 pool java.lang:name=CodeHeap 'non-nmethods',type=MemoryPool of type: Non-heap memory
     used value is 1797248      max is 5898240 isExceeded = false
  threshold set to 1797249
  threshold count  0
  reset peak usage. peak usage = 1797248 isExceeded = false
  Allocated heap.  isExceeded = false
     used value is 1811072      max is 5898240 isExceeded = false
peak used value is 1811072 peak max is 5898240
  threshold set to 1797249
  threshold count  0
# ERROR: isUsageThresholdExceeded() returned false, and is still false, while threshold = 1797249 and used peak = 1811072
The following stacktrace is for failure analysis.
nsk.share.TestFailure: isUsageThresholdExceeded() returned false, and is still false, while threshold = 1797249 and used peak = 1811072
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.monitoring.MemoryPoolMBean.isUsageThresholdExceeded.isexceeded001.run(isexceeded001.java:140)
	at nsk.monitoring.MemoryPoolMBean.isUsageThresholdExceeded.isexceeded001.main(isexceeded001.java:42)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)
2 pool java.lang:name=CodeHeap 'profiled nmethods',type=MemoryPool of type: Non-heap memory
     used value is 4295680      max is 122880000 isExceeded = false
  threshold set to 4295681
  threshold count  0
  reset peak usage. peak usage = 4295680 isExceeded = false
  Allocated heap.  isExceeded = false
     used value is 4295680      max is 122880000 isExceeded = false
peak used value is 4295680 peak max is 122880000
  threshold set to 4295681
  threshold count  0
3 pool java.lang:name=Compressed Class Space,type=MemoryPool of type: Non-heap memory
     used value is 681680      max is 1073741824 isExceeded = false
  threshold set to 681681
  threshold count  0
  reset peak usage. peak usage = 681680 isExceeded = false
  Allocated heap.  isExceeded = false
     used value is 681680      max is 1073741824 isExceeded = false
peak used value is 681680 peak max is 1073741824
  threshold set to 681681
  threshold count  0
4 pool java.lang:name=G1 Eden Space,type=MemoryPool of type: Heap memory
  does not support usage thresholds: skip
5 pool java.lang:name=G1 Old Gen,type=MemoryPool of type: Heap memory
     used value is 386048      max is 1073741824 isExceeded = false
  threshold set to 386049
  threshold count  0
  reset peak usage. peak usage = 386048 isExceeded = false
  Allocated heap.  isExceeded = false
     used value is 386048      max is 1073741824 isExceeded = false
peak used value is 386048 peak max is 1073741824
  threshold set to 386049
  threshold count  0
6 pool java.lang:name=G1 Survivor Space,type=MemoryPool of type: Heap memory
  does not support usage thresholds: skip
7 pool java.lang:name=CodeHeap 'non-profiled nmethods',type=MemoryPool of type: Non-heap memory
     used value is 1458048      max is 122880000 isExceeded = false
  threshold set to 1458049
  threshold count  0
  reset peak usage. peak usage = 1458944 isExceeded = true
  Allocated heap.  isExceeded = true
     used value is 1459712      max is 122880000 isExceeded = true
peak used value is 1459712 peak max is 122880000
  threshold set to 1458049
  threshold count  0
TEST FAILED


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: isUsageThresholdExceeded() returned false, and is still false, while threshold = 1797249 and used peak = 1811072
----------System.err:(0/0)----------
----------rerun:(37/6641)*----------

The JVM args in the jdk-20+8-429-tier5 test task are: -XX:StartFlightRecording=dumponexit=true;;;","2022-08-03 08:37;kevinw;(I recently pushed: 8198668: MemoryPoolMBean/isUsageThresholdExceeded/isexceeded001/TestDescription.java still failing )

That was an effort to stabilize the test.  This is not a great test as it tests memory pools that it has no control over, and makes a small Java allocation assuming it can impact a pool being tested.

The update worked partly in that I see in these failure logs it has correctly chosen to skip a pool:
  thresholdCount increasing outside our control for non-heap Pool: skip

...but another non-heap pool it doesn't skip, and fails.  I'm checking if these latest failures tell us something interesting.. If not, we could simply skip all non-heap memory pools as the test has no control over their activity.
;;;","2022-08-11 13:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9842
Date: 2022-08-11 18:27:12 +0000;;;","2022-08-20 07:26;dukebot;Changeset: 3601e30d
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2022-08-20 14:20:29 +0000
URL:       https://git.openjdk.org/jdk/commit/3601e30df794db122d8d04fb3c04868ccbaa0baf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
misc tests fail: assert(!thread->owns_locks()) failed: must release all locks when leaving VM,JDK-8290908,5079887,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,dcubed,dcubed,2022-07-23 06:41,2023-02-13 23:41,2023-10-01 09:56,2022-08-02 15:46,20,,,,,,20,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,regression,tier5,tier6,,,,,,,,,,,,"The following test failed in the JDK20 CI:

vm/jvmti/ObjectFree/ofre001/ofre00101/ofre00101.html

Here's a snippet from the log file:

#section:testExecute
----------messages:(1/1037)----------
command: com.sun.jck.lib.ExecJCKTestOtherJVMCmd LD_LIBRARY_PATH=/opt/mach5/mesos/work_dir/jib-master/install/jck/19/b18/extra/bundles/JCK-extra-19.zip/JCK-extra-19/binaries/linux-aarch64/lib /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+8-406/linux-aarch64-debug.jdk/jdk-20/fastdebug/bin/java --enable-preview -Djava.awt.headless=true -XX:+CreateCoredumpOnCrash -XX:+UseSerialGC -XX:MaxRAMPercentage=6.25 --show-version -Xms32m -Xmx1024m -Djdk.attach.allowAttachSelf=true -Djava.security.properties=/opt/mach5/mesos/work_dir/jib-master/install/jck/19/b18/extra/bundles/JCK-extra-19.zip/JCK-extra-19/extra.security.properties -agentlib:jckjvmti=ofre00101 -classpath :/opt/mach5/mesos/work_dir/jib-master/install/jck/19/b18/bundles/JCK-runtime-19.jar/JCK-runtime-19/classes: -Djava.security.policy=/opt/mach5/mesos/work_dir/jib-master/install/jck/19/b18/bundles/JCK-runtime-19.jar/JCK-runtime-19/lib/jck.policy javasoft.sqe.tests.vm.jvmti.ofre001.ofre00101.ofre00101 -platform.jvmtiSupported true -platform.nativeLibsLinkage dynamic
----------out1:(0/0)----------
----------out2:(24/2040)----------
java 20-ea 2023-03-21
Java(TM) SE Runtime Environment (fastdebug build 20-ea+8-406)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 20-ea+8-406, mixed mode, sharing)
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/interfaceSupport.inline.hpp:182
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S10191/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e31097f9-3ce4-4ac2-99e7-51c0b1efd6b2/runs/05232410-acaf-412b-9e40-7b683475a67e/workspace/open/src/hotspot/share/runtime/interfaceSupport.inline.hpp:182), pid=1290327, tid=1290331
#  assert(!thread->owns_locks()) failed: must release all locks when leaving VM
#
# JRE version: Java(TM) SE Runtime Environment (20.0+8) (fastdebug build 20-ea+8-406)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+8-406, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, serial gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x12c60a8]  JvmtiJavaThreadEventTransition::JvmtiJavaThreadEventTransition(JavaThread*)+0x148
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S10129/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/95922504-7250-440e-bdd3-057f810cf226/runs/b1e3cd30-b0a4-4610-816e-8cffc4b2885c/testoutput/test-support/jck_runtime_vm_jvmti/core.1290327)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S10129/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/95922504-7250-440e-bdd3-057f810cf226/runs/b1e3cd30-b0a4-4610-816e-8cffc4b2885c/testoutput/test-support/jck_runtime_vm_jvmti/hs_err_pid1290327.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
result: Failed. unexpected exit code: exit code 134


Unfortunately, the failures artifact link does not show an hs_err_pid file.",,,,,,,,,,JDK-8302415,JDK-8296029,JDK-8302020,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256811,,,,,,,"2022-07-24 14:47;dholmes;hs_err_pid1290327.log;https://bugs.openjdk.org/secure/attachment/100113/hs_err_pid1290327.log",,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,windows,,,,"0|i2xywj:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-07-24 14:47;dholmes;hs_err file was higher up in the directory under test-support:

---------------  T H R E A D  ---------------

Current thread (0x0000fffea002a3d0):  JavaThread ""main"" [_thread_in_vm, id=1290331, stack(0x0000fffea49a0000,0x0000fffea4ba0000)]

Stack: [0x0000fffea49a0000,0x0000fffea4ba0000],  sp=0x0000fffea4b9dca0,  free space=2039k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12c60a8]  JvmtiJavaThreadEventTransition::JvmtiJavaThreadEventTransition(JavaThread*)+0x148
V  [libjvm.so+0x12bb9e4]  JvmtiExport::post_object_free(JvmtiEnv*, GrowableArray<long>*)+0x124
V  [libjvm.so+0x12f0bc8]  JvmtiTagMap::post_dead_objects(GrowableArray<long>*)+0xa8
V  [libjvm.so+0x12f1318]  JvmtiTagMap::remove_and_post_dead_objects()+0x154
V  [libjvm.so+0x12f1aa4]  JvmtiTagMap::flush_object_free_events()+0x1d4
V  [libjvm.so+0x12b1518]  JvmtiEventControllerPrivate::set_user_enabled(JvmtiEnvBase*, JavaThread*, Handle, jvmtiEvent, bool)+0x144
V  [libjvm.so+0x12b21a0]  JvmtiEventController::set_user_enabled(JvmtiEnvBase*, JavaThread*, oop, jvmtiEvent, bool)+0x14c
V  [libjvm.so+0x1284afc]  JvmtiEnv::SetEventNotificationMode(jvmtiEventMode, jvmtiEvent, _jobject*, ...)+0x18c
V  [libjvm.so+0x123e238]  jvmti_SetEventNotificationMode+0x114
C  [libjckjvmti.so+0x8d438]  Java_javasoft_sqe_tests_vm_jvmti_ofre001_ofre00101_ofre00101_notification+0x5c
j  javasoft.sqe.tests.vm.jvmti.ofre001.ofre00101.ofre00101.notification(Z)V+0
j  javasoft.sqe.tests.vm.jvmti.ofre001.ofre00101.ofre00101.run([Ljava/lang/String;Ljava/io/PrintStream;)I+80
j  javasoft.sqe.tests.vm.jvmti.ofre001.ofre00101.ofre00101.main([Ljava/lang/String;)V+8
v  ~StubRoutines::call_stub 0x0000fffe8fc101bc
V  [libjvm.so+0xfa22dc]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x5ac
V  [libjvm.so+0x10e1d80]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .constprop.1]+0x1bc
V  [libjvm.so+0x10e5100]  jni_CallStaticVoidMethod+0x180
C  [libjli.so+0x4828]  JavaMain+0xc54;;;","2022-07-24 14:53;dholmes;I was sure I saw a similar failure report somewhere very recently but cannot find an associated JBS issue - [~sspitsyn] does this ring a bell?;;;","2022-07-26 10:34;cjplummer;This ap01t001 test was failing during an earlier version of https://github.com/openjdk/jdk/pull/9168. See my comment (and the comments that follow) https://github.com/openjdk/jdk/pull/9168#issuecomment-1181272100. The issue was fixed, but seems this test is sensitive the ObjectFree changes made by this PR.;;;","2022-07-26 12:59;zgu;It is caused by JDK-8256811, as JvmtiExport::post_object_free() call does not expect under any lock. 

I think we can move following code outside of lock, as flush_obect_free_events() races ServiceThread's JvmtiTagMap::flush_all_object_free_events() call anyway.

  if (event_type == JVMTI_EVENT_OBJECT_FREE) {
    flush_object_free_events(env);
  }


It is odd that this failure did not show up in JDK-8256811 tests.
;;;","2022-07-29 12:39;sspitsyn;[~zgu] Zhengyu, do you want to fix it yourself? Are you able to tun this test?
We did not run the JCK tests. It is why we did not catch this.
Please, note, the failure is noisy, so it is better to fix is sooner.
;;;","2022-07-29 13:09;zgu;[~sspitsyn] I would like to, but timing is bad. Today is my last day at Red Hat, not sure when I will be able to contribute again ... ;;;","2022-07-29 16:25;sspitsyn;[~zgu] Okay, no problem. I will try to prepare a fix today. In fact, I agree with your suggestion.;;;","2022-07-29 16:55;sspitsyn;In fact, I don't know how to reproduce the problem.
My local test runs of this tests with the listed VM options are always passed.;;;","2022-08-01 00:36;sspitsyn;[~cjplummer] I've already tried it but no luck. The JCK tests are passed on all platforms with and w/o the VM options listed in description.;;;","2022-08-01 06:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9699
Date: 2022-08-01 07:41:50 +0000;;;","2022-08-02 15:46;dukebot;Changeset: 0ae83410
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-08-02 22:41:17 +0000
URL:       https://git.openjdk.org/jdk/commit/0ae834105740f7cf73fe96be22e0f564ad29b18d
;;;","2022-08-02 15:51;sspitsyn;> bash jib.sh mach5 -- --build-id jdk-20+8-406 -b linux-aarch64-debug --test jck:vm/jvmti -a ""-XX:+CreateCoredumpOnCrash -XX:+UseSerialGC""
I ran the same based on my local repo (unfixed) for 3 debug platforms but it did not fail.
My guess is that this issue is intermittent.;;;","2022-08-02 17:18;dcubed;The fix for this bug is integrated in jdk-20+9-493.;;;","2022-08-17 09:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/636
Date: 2022-08-17 15:54:39 +0000;;;","2022-08-18 03:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/637
Date: 2022-08-18 10:18:57 +0000;;;","2022-10-28 01:11;goetz;Fix request [17u]
on behalf of Andrew Dinn

Required follow up of JDK-8256811.
;;;",,,,,,,,,,,,,,,,,
Build failure with Clang 14+ due to function warning attribute,JDK-8290900,5079877,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,manc,manc,manc,2022-07-22 16:30,2022-10-07 16:56,2023-10-01 09:56,2022-07-22 19:58,19,,,,,,20,hotspot,,0,google-interest,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,,,,,,,,,,,,,,"After JDK-8214976, OpenJDK cannot build with Clang 14 or newer. This is because Clang 14+ currently does not support merging warning attributes of functions. Build failure looks like:
```
jdkGitHead/src/hotspot/share/utilities/globalDefinitions.hpp:165:1: error: 'warning' attribute does not appear on the first declaration
FORBID_C_FUNCTION(void exit(int), ""use os::exit"");
^                                                                                                                                                                            
jdkGitHead/src/hotspot/share/utilities/compilerWarnings_gcc.hpp:85:29: note: expanded from macro 'FORBID_C_FUNCTION'
  extern ""C"" __attribute__((__warning__(alternative))) signature;
                            ^                                                         
/usr/include/stdlib.h:617:13: note: previous declaration is here                                                                                                             
extern void exit (int __status) __THROW __attribute__ ((__noreturn__));
```

https://github.com/llvm/llvm-project/issues/56519 has been opened and will be fixed in a future Clang release. I propose we temporarily disable the warning attribute when building with Clang, until the LLVM issue #56519 is fixed and released.",,,,,,,,,,JDK-8295004,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8214976,,,,JDK-8290903,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xyub:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-07-22 16:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9621
Date: 2022-07-22 23:40:08 +0000;;;","2022-07-22 19:58;dukebot;Changeset: 0599a05f
Author:    Man Cao <manc@openjdk.org>
Date:      2022-07-23 02:54:07 +0000
URL:       https://git.openjdk.org/jdk/commit/0599a05f8c7e26d4acae0b2cc805a65bdd6c6f67
;;;","2022-10-04 17:01;manc;Fix Request [19u]

This bug prevents building JDK 19 with Clang 14. Backport applies to 19u cleanly.;;;","2022-10-04 17:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/44
Date: 2022-10-05 00:08:07 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/lang/String/StringRepeat.java test requests too much heap on windows x86,JDK-8290899,5079874,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-07-22 15:28,2022-12-21 17:19,2023-10-01 09:56,2022-12-15 16:45,11,,,,,,21,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,"This test was updated twice after integration:

https://bugs.openjdk.org/browse/JDK-8221400 - the xmx4g was replaced by the xmx2g
https://bugs.openjdk.org/browse/JDK-8265421 - the ""os.maxMemory >= 2G"" was added

Unfortunately, this test still may fail on Windows x86:
Could not reserve enough space for xxx object heap.
",,,,,,,,,,JDK-8299071,JDK-8299073,JDK-8299011,JDK-8299010,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,windows,,,,,"0|i2xytn:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-07-22 15:29;serb;All version are affected since jdk11 but only the builds for x86 on windows.;;;","2022-12-12 20:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11639
Date: 2022-12-13 00:06:00 +0000;;;","2022-12-15 16:45;dukebot;Changeset: 2bb727c4
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-12-16 00:43:56 +0000
URL:       https://git.openjdk.org/jdk/commit/2bb727c4eaf8a948f17f6416a1e6fbaeade4d7ce
;;;","2022-12-16 02:26;serb;Fix request (11u, 17u)

Clean backport. The fix for a test bug.
Review 11u-dev: https://github.com/openjdk/jdk11u-dev/pull/1599
Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/955;;;","2022-12-16 02:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/955
Date: 2022-12-16 06:42:25 +0000;;;","2022-12-16 02:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1599
Date: 2022-12-16 06:44:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK 19 RDP2 L10n resource files update - msgdrop 10,JDK-8290889,5079862,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,achung,achung,achung,2022-07-22 10:40,2023-05-31 17:15,2023-10-01 09:56,2022-08-09 15:29,19,,,,,,19,globalization,,0,jdk19-fix-request,jdk19-fix-yes,sn_123,sn_124,,,,,,,,,,,,,,"This bug is to track the message drop 10 for JDK 19 RDP2.
",,,,,,,,,,JDK-8292227,JDK-8292515,JDK-8292500,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309049,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xyqz:",9223372036854775807,b35,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@52b4192d,,,,,,,,,"2022-07-22 20:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/154
Date: 2022-07-23 03:03:25 +0000;;;","2022-08-09 10:27;achung;Fix Request
This is the localization update. It contains changes to strings and wxl files in install and build. ;;;","2022-08-09 10:33;kcr;Fix request approved;;;","2022-08-09 15:29;dukebot;Changeset: 0def5316
Author:    Alisen Chung <achung@openjdk.org>
Committer: Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2022-08-09 22:27:58 +0000
URL:       https://git.openjdk.org/jdk19/commit/0def5316cd2ec7699c649bf67bf58e6315c3010b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unused private method in TrustManagerFactoryImpl,JDK-8290887,5079859,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mpowers,mpowers,mpowers,2022-07-22 07:23,2022-08-01 10:32,2023-10-01 09:56,2022-07-26 13:29,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,private static FileInputStream getFileInputStream() is unused,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xyqb:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-07-22 13:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9616
Date: 2022-07-22 17:59:51 +0000;;;","2022-07-22 13:54;mpowers;Not worth the effort for something that is already deprecated for removal.;;;","2022-07-22 13:55;mpowers;closed wrong bug;;;","2022-07-26 13:28;dukebot;Changeset: 4d796ee8
Author:    Mark Powers <mark.powers@oracle.com>
Committer: Sean Mullan <mullan@openjdk.org>
Date:      2022-07-26 20:23:55 +0000
URL:       https://git.openjdk.org/jdk/commit/4d796ee8abd4eabc5d5d3034f236e8f4289ca048
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[11u]: Backport of JDK-8266250 introduced test failures,JDK-8290886,5079858,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gdams,gdams,gdams,2022-07-22 07:21,2022-08-03 13:52,2023-10-01 09:56,2022-07-25 04:36,11,,,,,,11.0.17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,My recent backport of JDK-8266250 introduced a patch which contained both records and switch expressions which aren't supported in JDK11. This test case will need rewriting in order to prevent compilation failures.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xyq3:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-07-22 07:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1265
Date: 2022-07-22 14:23:01 +0000;;;","2022-07-24 23:31;gdams;Fix request (11u)

This needs landing in jdk11u to bump to jtreg 6;;;","2022-07-25 02:58;goetz;Hi George.
Next time, please add complete Fix request comments. They should state
* Why you do the change in 11 (Tests fail!)
* The risk of the change (test fix, no risk)
* How you tested the change (Test passes with and without jtreg 6)
Here, one should think this is of not so much importance, but you  obviously omitted 
running the tests in the preceding backport.;;;","2022-07-25 04:36;dukebot;Changeset: a1a04592
Author:    George Adams <georgeadams1995@gmail.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-07-25 11:34:32 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/a1a045921d738bb3e69fbe362ae986471229c18a
;;;","2022-08-03 13:52;dukebot;Changeset: a1a04592
Author:    George Adams <georgeadams1995@gmail.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-07-25 11:34:32 +0000
URL:       https://git.openjdk.org/jdk11u/commit/a1a045921d738bb3e69fbe362ae986471229c18a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/lang/ProcessBuilder/PipelineLeaksFD.java fail: More or fewer pipes than expected,JDK-8290885,5079857,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rriggs,dcubed,dcubed,2022-07-22 07:18,2023-02-01 07:41,2023-10-01 09:56,2022-08-01 06:45,20,,,,,,20,core-libs,,0,intermittent,tier4,tier5,tier6,tier8,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

java/lang/ProcessBuilder/PipelineLeaksFD.java

Here's a snippet from the log file:

#section:testng
----------messages:(4/164)----------
command: testng PipelineLeaksFD
reason: User specified action: run testng/othervm PipelineLeaksFD 
Mode: othervm [/othervm specified]
elapsed time (seconds): 1.615
----------configuration:(0/0)----------
----------System.out:(57/3218)----------
DEBUG: All Pipes After: [3]
/proc/331141/fd/2   : pipe:[145268395]
/proc/331141/fd/1   : pipe:[145268394]
/proc/331141/fd/0   : pipe:[145268393]
test PipelineLeaksFD.checkForLeaks(java.util.ImmutableCollections$List12@2c7c90ec): success
DEBUG: All Pipes After: [3]
/proc/331141/fd/2   : pipe:[145268395]
/proc/331141/fd/1   : pipe:[145268394]
/proc/331141/fd/0   : pipe:[145268393]
test PipelineLeaksFD.checkForLeaks(java.util.ImmutableCollections$List12@6c785de8): success
DEBUG: All Pipes After: [4]
/proc/331141/fd/2   : pipe:[145268395]
/proc/331141/fd/19  : pipe:[145251206]
/proc/331141/fd/1   : pipe:[145268394]
/proc/331141/fd/0   : pipe:[145268393]
Missing from pipesAfter: [0]
Extra pipes in pipesAfter: [1]
/proc/331141/fd/19  : pipe:[145251206]
test PipelineLeaksFD.checkForLeaks(java.util.ImmutableCollections$ListN@41670a46): failure
java.lang.AssertionError: More or fewer pipes than expected
	at org.testng.Assert.fail(Assert.java:99)
	at PipelineLeaksFD.checkForLeaks(PipelineLeaksFD.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

===============================================
java/lang/ProcessBuilder/PipelineLeaksFD.java
Total tests run: 3, Passes: 2, Failures: 1, Skips: 0
===============================================

----------System.err:(12/672)----------
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.Exception: failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: failures: 1
----------rerun:(35/5780)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289643,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,,,,,"0|i2xypv:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-07-24 06:20;dcubed;java/lang/ProcessBuilder/PipelineLeaksFD.java is a
new test added by the following fix:

JDK-8289643 File descriptor leak with ProcessBuilder.startPipeline;;;","2022-07-24 06:24;dcubed;[~rriggs] - Please take a look at this test you added recently.;;;","2022-07-25 10:02;rriggs;fyi, this test only runs on Linux, it depends on Linux /proc/self/fd/*.

;;;","2022-07-29 09:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9687
Date: 2022-07-29 16:49:36 +0000;;;","2022-08-01 06:45;dukebot;Changeset: 226b8e68
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2022-08-01 13:44:21 +0000
URL:       https://git.openjdk.org/jdk/commit/226b8e680a82096b3d268703872d30182c10e326
;;;","2022-08-02 09:14;dcubed;The fix for this bug is integrated in jdk-20+9-480.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Race freeing remembered set segments,JDK-8290867,5079834,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,tschatzl,tschatzl,2022-07-22 01:43,2022-08-09 15:23,2023-10-01 09:56,2022-08-03 07:34,18,19,20,,,,19,hotspot,,0,gc-g1,gc-pending-review,jdk19-fix-request,jdk19-fix-yes,,,,,,,,,,,,,,"There is a race in remembered set memory management that can lead to crashes:

- Thread A executes G1SegmentedArray::create_new_segment and tries to pop an element from the _free_segment_list. For that, thread A executes LockFreeStack::pop()
- Thread A reads LockFreeStack::top()
- Thread B executes LockFreeStack::pop(), also reads LockFreeStack::top() and pops that element from the stack
- Thread B executes Atomic::cmpxchg(&_first, prev, next); in G1SegmentedArray::create_new_segment but it fails because another thread already registered a different segment
- Thread B calls G1SegmentedArraySegment::delete_segment and frees the value
- Thread A tries to access top()->next in LockFreeStack::pop(), which causes a segfault because top() was freed by thread B

(Reported by [~chaeubl])",,,,,,,,,,JDK-8292125,JDK-8292149,JDK-8291870,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292030,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,,,,"0|i2xyl7:",9223372036854775807,b34,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-07-22 03:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/152
Date: 2022-07-22 10:43:19 +0000;;;","2022-07-25 01:39;tschatzl;Fix Request:

- Impact: the change fixes an avoidable VM crash that while not occurring a lot with glibc, it is more common with muslc as the latter much more aggressively reuses memory.
- Risk estimation: minimal. The problem and the fix are well understood, but at worst if the change is incorrect, it adds some useless synchronization (i.e. negligible performance hit)
- Test coverage: for reproduction this needs changes (a hack) to the VM that significantly widens the time between the last two steps in the problem descriptions (read: ms delays). With that reproduction change, the BigRAMTester (remembered set management) stress test crashes in a few seconds, with the fix applied there is no issue for tens of minutes (note that without the reproduction hack BigRAMTester does not crash either). The original reporter also confirmed this fix making the crashes disappear on their application both on glibc and muslc.
- Patch/Reviewers: [~kbarrett]; see also PR request at https://git.openjdk.org/jdk19/pull/152;;;","2022-08-03 07:33;dukebot;Changeset: e265b2a2
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-08-03 14:26:06 +0000
URL:       https://git.openjdk.org/jdk19/commit/e265b2a2918f39a1d9afdb6a473c2d8d657cbb8c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Apple Color Emoji turns gray after JavaFX version 18,JDK-8290866,5079824,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,webbuggrp,webbuggrp,2022-07-21 18:47,2023-03-13 02:34,2023-10-01 09:56,2023-02-24 14:46,jfx18,,,,,,jfx21,javafx,,0,dcsnr,dcspn,regression,regression_8236689,reproducer-yes,sn_138,webbug,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS: MacOS 12.4
JDK: openjdk version ""11.0.13"" 2021-10-19 LTS

A DESCRIPTION OF THE PROBLEM :
Apple Color Emoji do not has color after JavaFX 18,  JavaFX 17.0.* and before works well.

I did some tests,  the following commit trigger this problem:
8236689: macOS 10.15 Catalina: LCD text renders badly
The emojis become colorful again when revert this commit.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile the source code and run, a window having a emojis text label will display.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The emojis show with color.
ACTUAL -
Emojis is gray, with no color.

---------- BEGIN SOURCE ----------
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.text.Font;
import javafx.stage.Stage;

public class Test extends Application {

    @Override
    public void start(Stage stage) {
        Label label = new Label(""🐶🔥🎎"");
        label.setFont(new Font(30));
        Scene scene = new Scene(label);
        stage.setWidth(400);
        stage.setHeight(100);
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291469,,,,,,JDK-8291469,JDK-8304041,,,JDK-8263583,JDK-8236689,JDK-8303494,,,,,"2022-07-21 21:33;pnarayanaswa;Test.java;https://bugs.openjdk.org/secure/attachment/100093/Test.java","2022-07-22 00:41;pnarayanaswa;Windows10_Capture.PNG;https://bugs.openjdk.org/secure/attachment/100100/Windows10_Capture.PNG",,,,,,,,,,,generic,,,,,,,jfx18,,os_x,,,,,"0|i2xyiz:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-07-22 00:42;pnarayanaswa;Checked with attached test case in Windows 10, observed with no color, gray emojis<attached screenshot>
Test Result - no color emoji's observed in 8u341, openjfx11, openjfx17, openjfx18, openjfx19.;;;","2022-08-04 14:02;prr;This is just about macOS + color Emojis. I am sure this was an unintended consequence of disabling LCD text.
Probably this means we can't disable it in such a straightforward way. OTOH it is fortunate we didn't remove the support ..  ;;;","2022-08-23 14:58;prr;I can also confirm that this means that in all previous releases if you specified -Dprism.lcdtext=off that Emojis are greyscale. It also means the user workaround to this in FX 18 is -Dprism.lcdtext=true.

;;;","2022-12-12 14:17;prr;As another data point (issue), javafx.scene.Text defaults to GRAY .. and in those earlier releases in such
a case Emojis are also gray.
Basically the original implementation of Emoji was not correct, and this bug is a consequence of that.;;;","2022-12-14 18:46;prr;More problems. Even if we go back to when it is supposed to ""work"", it doesn't work.
The Emoji is rendered with the wrong colors. That is because the shader is designed
for text and so the text color property set is the base for the rendering and is blended
into the value in the Emoji image.
On top of that there's a gamma adjustment applied in the LCD text shader which
is needed when these are glyph images to reduce fringing but just adds an (albeit small)
distortment to the color of edge pixels.

So I don't think we should be using the same shader here.

FWIW if I force the software pipeline the colours are correct .. hmm ..

So this leads us to need to
1) Identify when we have a Color Glyph
2) 'Break' the string drawing at that point
3) Render the color glyphs as images, using the image data from the font and
    drawn at an appropriate offset based on glyph metrics
  This could be segmented string drawing, or it could be ""just"" swapping out shaders,
   within a Graphics.drawString call. both likely have their own drawbacks and consequences
   and we need to see how it works for non-shader cases.
4) Continue this for subsequent emojis, then resume rendering text segments
5) Rinse and repeat until done.

Right now I don't know how to do #1 .. I haven't found any glyph info that
macOS provides to distinguish it.

Also if I print a node with Emoji characters, they are not printed.
This may be something on the Java 2D side of printing, that affects doing
this via glyph ids, since Java 2D definitely prints these using character codes (I verified).

Then there's https://bugs.openjdk.org/browse/JDK-8291469 - emojis are half size on retina.

So basically nothing about Emojis works properly, not in any release.

;;;","2023-02-23 12:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1047
Date: 2023-02-23 20:43:29 +0000;;;","2023-02-24 14:46;dukebot;Changeset: 0de08379
Author:    Phil Race <prr@openjdk.org>
Date:      2023-02-24 22:44:59 +0000
URL:       https://git.openjdk.org/jfx/commit/0de083793407481a5c86923f9537482f850cdb65
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Update the documentation of Virtualized controls to include the best practice of not using Nodes directly in the item list,JDK-8290863,5079832,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,aghaisas,aghaisas,2022-07-22 00:10,2023-07-12 08:02,2023-10-01 09:56,2023-02-01 19:51,jfx19,,,,,,jfx20,javafx,,0,noreg-doc,sn_123,sn_124,sn_125,sn_126,sn_127,sn_129,sn_130,sn_132,sn_133,sn_134,sn_135,sn_136,,,,,"This has come up while analyzing JDK-8277437.

It is potentially problematic if an Application creates a list of Nodes that it passes into the ListView as the item list. This approach can cause problems with virtualized controls such as ComboBox, ListView, TableView, and TreeTableView, and is not a recommended pattern.


The documentation for ComboBox is verbose on this.
--------------------------------------------------
A recommended way of using a custom cell factory is documented for ComboBox at:
https://openjfx.io/javadoc/18/javafx.controls/javafx/scene/control/ComboBox.html

Specifically, see the section titled ""A warning about inserting Nodes into the ComboBox items list"", which is accompanied by a code snippet showing a
best practice:

""Putting nodes into the items list is strongly not recommended. 
--------------------------------------------------


This bug is to update documentation to articulate this recommendation for other Virtualized controls such as ListView, TableView, and TreeTableView.",,,,,,,,,,JDK-8301689,,,,,,,,,,,,,,,,,,,,,JDK-8301002,,,,,,,,,,,,JDK-8299958,JDK-8277437,JDK-8090254,,JDK-8280442,,,,,,,"2022-08-03 04:57;aghaisas;ListViewDocChangePatch.txt;https://bugs.openjdk.org/secure/attachment/100278/ListViewDocChangePatch.txt",,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xykr:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-08-03 04:58;aghaisas;I have attached a sample patch containing ListView doc changes.;;;","2023-01-13 04:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/995
Date: 2023-01-13 12:32:53 +0000;;;","2023-02-01 19:51;dukebot;Changeset: 39d87471
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2023-02-02 03:49:14 +0000
URL:       https://git.openjdk.org/jfx/commit/39d874712205f96befe4af07a332f1e747f3ecc2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: create_new_if_for_predicate() does not clone pinned phi input nodes resulting in a broken graph,JDK-8290850,5079821,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,dcubed,dcubed,2022-07-21 16:41,2023-05-02 07:25,2023-10-01 09:56,2022-12-08 03:25,17,18,19,20,,,20,hotspot,,0,c2,intermittent,javafuzzer,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-20,tier8,,,,,,,,,,"The following test failed in the JDK19 CI:

applications/javafuzzer/BigTest.java

Here are snippets from the hs_err_pid22431.log:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8380/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/88248b69-8047-48f5-b430-1f3ab95724f1/runs/d2b0a451-db74-42e5-988b-bdc60803b0cd/workspace/open/src/hotspot/share/opto/loopnode.cpp:5856), pid=22431, tid=22444
#  assert(false) failed: Bad graph detected in build_loop_late
#
# JRE version: Java(TM) SE Runtime Environment (19.0+32) (fastdebug build 19-ea+32-2213)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+32-2213, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x14cc687]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x187

<snip>

---------------  T H R E A D  ---------------

Current thread (0x00007fc8882e1360):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=22444, stack(0x00007fc861dfe000,0x00007fc861eff000)]


Current CompileTask:
C2:   2644   77    b  4       Test::mainTest (505 bytes)

Stack: [0x00007fc861dfe000,0x00007fc861eff000],  sp=0x00007fc861ef8fa0,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x14cc687]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x187
V  [libjvm.so+0x14cce42]  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)+0xb2
V  [libjvm.so+0x14cd8d7]  PhaseIdealLoop::build_and_optimize()+0x617
V  [libjvm.so+0xb05d5a]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x27a
V  [libjvm.so+0xb02587]  Compile::Optimize()+0x1027
V  [libjvm.so+0xb04710]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1520
V  [libjvm.so+0x91bd7a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x62a
V  [libjvm.so+0xb13278]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xbb8
V  [libjvm.so+0xb14268]  CompileBroker::compiler_thread_loop()+0x6f8
V  [libjvm.so+0x1aa2258]  JavaThread::thread_main_inner()+0x238
V  [libjvm.so+0x1aad8f0]  Thread::call_run()+0x100
V  [libjvm.so+0x175e844]  thread_native_entry(Thread*)+0x104",,,,,,,,,,JDK-8299027,JDK-8300218,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271954,JDK-8252372,,,,,,"2022-07-21 18:35;dlong;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/100090/FuzzerUtils.java","2022-11-22 02:22;chagedorn;Reduced-1.java;https://bugs.openjdk.org/secure/attachment/101726/Reduced-1.java","2022-11-22 04:38;chagedorn;Reduced-2.java;https://bugs.openjdk.org/secure/attachment/101731/Reduced-2.java","2022-11-22 08:50;chagedorn;Reduced-3.java;https://bugs.openjdk.org/secure/attachment/101742/Reduced-3.java","2022-11-22 01:57;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/101724/Reduced.java","2022-07-25 06:04;thartmann;Test-1.java;https://bugs.openjdk.org/secure/attachment/100129/Test-1.java","2022-11-22 04:39;chagedorn;Test-2.java;https://bugs.openjdk.org/secure/attachment/101732/Test-2.java","2022-11-22 08:50;chagedorn;Test-3.java;https://bugs.openjdk.org/secure/attachment/101743/Test-3.java","2022-07-21 18:35;dlong;Test.java;https://bugs.openjdk.org/secure/attachment/100089/Test.java","2022-07-21 16:46;dcubed;hs_err_pid22431.log;https://bugs.openjdk.org/secure/attachment/100087/hs_err_pid22431.log","2022-07-21 16:46;dcubed;hs_err_pid22827.log;https://bugs.openjdk.org/secure/attachment/100088/hs_err_pid22827.log",,x86_64,,,,,,,,,linux,,,,,"0|i2xyib:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-21 18:36;dlong;ILW = same as JDK-8288941 = P3;;;","2022-07-21 18:41;dlong;[~chagedorn], it looks like it could be a duplicate of JDK-8288941.;;;","2022-07-25 06:09;thartmann;I attached another JavaFuzzer found test (Test-1.java) that triggers the same assert. I traced it back to JDK-8273612 in JDK 18 b18 but that patch only changed the behavior with -Xcomp.;;;","2022-11-22 04:39;chagedorn;Reduced.java is a reduced version of Test.java:
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Reduced Reduced.java

Reduced-1.java is a reduced version of Test-1.java:
$ java -Xcomp -XX:CompileOnly=Reduced Reduced-1.java

Reduced-2.java is a reduced version of Test-2.java
$ java -Xcomp -XX:CompileOnly=Reduced Reduced-2.java
;;;","2022-11-22 04:54;chagedorn;All 3 cases are related and reveal the same problem which is, however, unrelated to JDK-8288941.

These cases can be traced back to the RFE to sink nodes out of a loop (JDK-8252372). They are closely related to JDK-8271954 but do not apply to loop unswitching but to loop predication instead. I think we can reuse parts of the fix for this new case here.

Updated ILW = C2 assertion due to broken graph, only few fuzzer generated tests, use -XX:-SplitIfBlocks or disable compilation of affected method = HLM = P3;;;","2022-11-22 08:53;chagedorn;Attached another test case Test-3.java with its reduced version Reduced-3.java taken from JDK-8293941:
$ java -Xcomp -XX:CompileOnly=Reduced -XX:-TieredCompilation Reduced.java;;;","2022-12-01 06:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11452
Date: 2022-12-01 12:26:56 +0000;;;","2022-12-08 03:25;dukebot;Changeset: 49b86224
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-12-08 11:23:42 +0000
URL:       https://git.openjdk.org/jdk/commit/49b86224aacc7fd8b4d3354a85d72ef636a18a12
;;;","2023-01-11 02:21;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
A bigger change to C2 with the typical risk of changing the compiler. 
As the test well reproduces we definitely should take this.
I had to do a trivial resolve due to context.
Test passes and fails without the fix. SAP nighlty testing passed.;;;","2023-01-11 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1056
Date: 2023-01-11 10:20:01 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
"LoadLibraryUnload.java still fails with ""Too few cleared WeakReferences""",JDK-8290848,5079819,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rriggs,dcubed,dcubed,2022-07-21 16:24,2023-02-01 07:41,2023-10-01 09:56,2022-07-27 07:57,20,,,,,,20,core-libs,,0,tier6,tier8,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

java/lang/ClassLoader/loadLibraryUnload/LoadLibraryUnload.java

Here's a snippet from the log file:

#section:main
----------messages:(4/201)----------
command: main -Xcheck:jni LoadLibraryUnload
reason: User specified action: run main/othervm/native -Xcheck:jni LoadLibraryUnload 
Mode: othervm [/othervm specified]
elapsed time (seconds): 350.911
----------configuration:(0/0)----------
----------System.out:(7/178)----------
Native library loaded.
Native library loaded from Class1.
Native library loaded from Class1.
GlobalRef created
GlobalRef deleted
Native library unloaded.
0 dequeued: null
----------System.err:(12/715)----------
java.lang.RuntimeException: Too few cleared WeakReferences
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at LoadLibraryUnload.main(LoadLibraryUnload.java:172)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Too few cleared WeakReferences
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Too few cleared WeakReferences
----------rerun:(50/6100)*----------


This test failure occurred in jdk-20+7-356-tier6 which includes the fix for:

JDK-8290397 LoadLibraryUnload.java failed with ""Too few cleared WeakReferences""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293282,JDK-8290397,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,windows,,,,"0|i2xyhv:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ae6d091,,,,,,,Verified,,"2022-07-26 14:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9649
Date: 2022-07-26 21:44:19 +0000;;;","2022-07-27 07:51;dukebot;Changeset: c1040897
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2022-07-27 14:47:17 +0000
URL:       https://git.openjdk.org/jdk/commit/c1040897cd6d5bc6e76c971035cc36c9d35b31e6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sun/tools/jstatd/JstatdTest* tests should use VM options,JDK-8290846,5079817,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2022-07-21 15:30,2022-08-03 19:51,2023-10-01 09:56,2022-07-27 17:11,20,,,,,,20,core-svc,,0,,,,,,,,,,,,,,,,,,"The test
test/jdk/sun/tools/jstatd/JstatdTest.java
and other similar tests run tested process (jstatd) without any additional options. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xyhf:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2022-07-21 15:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9604
Date: 2022-07-21 22:33:36 +0000;;;","2022-07-27 17:11;dukebot;Changeset: 348a0521
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-07-28 00:04:17 +0000
URL:       https://git.openjdk.org/jdk/commit/348a0521e1cd602c4093955310f838cf4ce4daae
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Consider an alternative item separator for multi-item option values,JDK-8290845,5079816,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,prappo,prappo,2022-07-21 14:44,2022-11-28 14:58,2023-10-01 09:56,2022-11-18 14:31,20,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,"Javadoc options, such as `noqualifier`, `exclude`, `tag`, etc., use `:` (colon) to separate items in their multi-item value. For example:

    -exclude java.net:java.lang:java.io

Unix uses `:` to separate file paths. For example:

```
-docletpath dir1:dir2\subdir2
```

While the character is the same, the separators it represents are semantically different. The path separator changes with the platform, whereas the value separator does not. These superficial similarity of separators on Unix might trick users into thinking that they must change both when on another platform.

We could define an alternative value separator that does not clash with the path separator on any of the supported platforms. For example, `,` (comma). We could also define the value separator once (in the man page and elsewhere) and refer to it in every affected option. We just have to make sure that an individual item cannot contain `,` for every multi-item option value.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295858,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xyh7:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-10-20 09:51;jjg;Instead of introducing a new separator, we could allow `;` as well as `:`.

Or, any of the above.;;;","2022-10-20 10:03;jjg;The command-line help indicates the following options use `:` as an internal separator:

$ ./build/macosx-aarch64/images/jdk/bin/javadoc --help | grep ':'
Usage:
where options include:
Provided by the Standard doclet:
    -excludedocfilessubdir <name>:...
    -group <name> <g1>:<g2>...
    -noqualifier <name1>:<name2>:...
    -tag <name>:<locations>:<header>

In all cases, it looks like we could broaden the spec to allow semicolon `;` and comma `,` as well as colon `:`;;;","2022-10-20 17:51;jjg;Having implemented this, I'm not sure that this is 100% a good idea.

We cannot stop supporting : in all these options, so any solution is just to allow more/alternative characters.

For the first 3 options, the argument using ':' is a list of like items, so using ',' is a natural replacement.  For -group and -noqualifier, it is a safe compatible change, since the components cannot contain comma.  For -excludedocfilessubdir, the components of the list are directory names, which conceivably could contain commas, although that is probably highly unlikely.

For -tag, the argument is a structured value of up to 3 parts, not a list of like items, so comma seems less suitable. In addition, not much is specified about the restrictions of a tag name, so much so that the existing code supports an escape mechanism to permit ':' to appear in the tag name ... and there is even a semi-real-world example of that in the langtools test suite, @ejb:bean.

The solution is probably not one-size-fits all for all 4 options.

For the list-like options, accept comma, and document that as the recommended form, while still permitting colon, and documenting that it is supported for historical reasons.

For -tag, I'm inclined to go with ""no change"" except to clearly document that the separator is always colon on all systems, and should not be confused with a path separator.

The alternative is no code change, but just ensure that the docs clarify the use of the colon character.;;;","2022-11-15 15:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11178
Date: 2022-11-15 23:06:27 +0000;;;","2022-11-18 14:31;dukebot;Changeset: 52494df4
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-11-18 22:30:09 +0000
URL:       https://git.openjdk.org/jdk/commit/52494df4f74a17fad51f4420c6ade724cb6aa715
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[BACKOUT] ""JDK-8288136 Temporarily disable building of JavaUninstallTool.exe"" when JDK-8290569 is fixed",JDK-8290842,5079813,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,asemenyuk,dcubed,dcubed,2022-07-21 13:43,2022-08-01 10:19,2023-10-01 09:56,2022-07-27 09:29,19,20,,,,,20,infrastructure,,0,,,,,,,,,,,,,,,,,,"We will need to [BACKOUT] the fix for:

    JDK-8288136 Temporarily disable building of JavaUninstallTool.exe

when the following bug is fixed:

    JDK-8290569 Building of windows-x64-uninstalltool profile with enabled signing fails",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290569,JDK-8288136,JDK-8290568,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2xygj:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Notify menu event after a long press gesture on Android is not dispatched,JDK-8290841,5079812,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpereda,jpereda,jpereda,2022-07-21 12:41,2022-11-29 06:08,2023-10-01 09:56,2022-08-30 02:47,jfx18,,,,,,jfx20,javafx,,0,,,,,,,,,,,,,,,,,,"A long press gesture on Android should trigger a menu notification event. 

Currently the AndroidInputProcessor class processes key events, forwarding them to MonocleView::notifyKey.

In a similar way, it should forward menu notifications to MonocleView::notifyMenu.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,android,,,,,"0|i2xygb:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-07-21 16:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/843
Date: 2022-07-21 23:03:31 +0000;;;","2022-08-30 02:47;dukebot;Changeset: f7198493
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2022-08-30 09:44:40 +0000
URL:       https://git.openjdk.org/jfx/commit/f71984938c686e52d61fd9c8470df4b453a253b6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/jfr/event/compiler/TestJitRestart.java failed with ""RuntimeException: No JIT restart event found: expected true, was false""",JDK-8290839,5079810,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,dcubed,dcubed,2022-07-21 12:08,2022-11-24 01:34,2023-10-01 09:56,2022-07-28 03:50,20,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,tier5,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

jdk/jfr/event/compiler/TestJitRestart.java

Here's a snippet from the log file:

#section:main
----------messages:(5/501)----------
command: main -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+SegmentedCodeCache -XX:-UseLargePages jdk.jfr.event.compiler.TestJitRestart
reason: User specified action: run main/othervm -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+SegmentedCodeCache -XX:-UseLargePages jdk.jfr.event.compiler.TestJitRestart 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,jdk.management.jfr
elapsed time (seconds): 2.618
----------configuration:(3/54)----------
Boot Layer
  add modules: jdk.jfr jdk.management.jfr

----------System.out:(87/3716)----------
[1.618s][warning][codecache] CodeHeap 'non-profiled nmethods' is full. Compiler has been disabled.
[1.618s][warning][codecache] Try increasing the code heap size using -XX:NonProfiledCodeHeapSize=
CodeHeap 'non-profiled nmethods': size=120028Kb used=665Kb max_used=665Kb free=119362Kb
 bounds [0x00007f98f01e9000, 0x00007f98f7720000, 0x00007f98f7720000]
CodeHeap 'profiled nmethods': size=120028Kb used=1866Kb max_used=1866Kb free=118161Kb
 bounds [0x00007f98e8720000, 0x00007f98efc57000, 0x00007f98efc57000]
CodeHeap 'non-nmethods': size=5704Kb used=1677Kb max_used=1703Kb free=4027Kb
 bounds [0x00007f98efc57000, 0x00007f98efec7000, 0x00007f98f01e9000]
 total_blobs=1792 nmethods=974 adapters=737
 compilation: disabled (not enough contiguous free space left)
              stopped_count=1, restarted_count=0
 full_count=1
# events:1
jdk.CodeCacheFull {
  startTime = 18:07:31.272 (2022-07-21)
  codeBlobType = ""CodeHeap 'non-profiled nmethods'""
  startAddress = 0x7F98F01E9000
  commitedTopAddress = 0x7F98F7720000
  reservedTopAddress = 0x7F98F7720000
  entryCount = 351
  methodCount = 351
  adaptorCount = 0
  unallocatedCapacity = 116.6 MB
  fullCount = 1
  codeCacheMaxCapacity = 240.0 MB
  eventThread = ""MainThread"" (javaThreadId = 22)
}


[2.370s][warning][codecache] CodeHeap 'profiled nmethods' is full. Compiler has been disabled.
[2.370s][warning][codecache] Try increasing the code heap size using -XX:ProfiledCodeHeapSize=
CodeHeap 'non-profiled nmethods': size=120028Kb used=684Kb max_used=702Kb free=119343Kb
 bounds [0x00007f98f01e9000, 0x00007f98f7720000, 0x00007f98f7720000]
CodeHeap 'profiled nmethods': size=120028Kb used=549Kb max_used=1866Kb free=119478Kb
 bounds [0x00007f98e8720000, 0x00007f98efc57000, 0x00007f98efc57000]
CodeHeap 'non-nmethods': size=5704Kb used=1709Kb max_used=1795Kb free=3994Kb
 bounds [0x00007f98efc57000, 0x00007f98efec7000, 0x00007f98f01e9000]
 total_blobs=1382 nmethods=521 adapters=781
 compilation: disabled (not enough contiguous free space left)
              stopped_count=2, restarted_count=1
 full_count=2
# events:1
jdk.CodeCacheFull {
  startTime = 18:07:32.024 (2022-07-21)
  codeBlobType = ""CodeHeap 'profiled nmethods'""
  startAddress = 0x7F98E8720000
  commitedTopAddress = 0x7F98EFC57000
  reservedTopAddress = 0x7F98EFC57000
  entryCount = 218
  methodCount = 218
  adaptorCount = 0
  unallocatedCapacity = 116.7 MB
  fullCount = 1
  codeCacheMaxCapacity = 240.0 MB
  eventThread = ""MainThread"" (javaThreadId = 22)
}


[2.426s][warning][codecache] CodeHeap 'non-nmethods' is full. Compiler has been disabled.
[2.426s][warning][codecache] Try increasing the code heap size using -XX:NonNMethodCodeHeapSize=
CodeHeap 'non-profiled nmethods': size=120028Kb used=684Kb max_used=702Kb free=119343Kb
 bounds [0x00007f98f01e9000, 0x00007f98f7720000, 0x00007f98f7720000]
CodeHeap 'profiled nmethods': size=120028Kb used=569Kb max_used=1866Kb free=119458Kb
 bounds [0x00007f98e8720000, 0x00007f98efc57000, 0x00007f98efc57000]
CodeHeap 'non-nmethods': size=5704Kb used=1709Kb max_used=1795Kb free=3994Kb
 bounds [0x00007f98efc57000, 0x00007f98f01e9000, 0x00007f98f01e9000]
 total_blobs=1383 nmethods=522 adapters=781
 compilation: disabled (not enough contiguous free space left)
              stopped_count=2, restarted_count=1
 full_count=3
# events:1
jdk.CodeCacheFull {
  startTime = 18:07:32.080 (2022-07-21)
  codeBlobType = ""CodeHeap 'non-nmethods'""
  startAddress = 0x7F98EFC57000
  commitedTopAddress = 0x7F98F01E9000
  reservedTopAddress = 0x7F98F01E9000
  entryCount = 861
  methodCount = 0
  adaptorCount = 781
  unallocatedCapacity = 3.9 MB
  fullCount = 1
  codeCacheMaxCapacity = 240.0 MB
  eventThread = ""MainThread"" (javaThreadId = 22)
}


----------System.err:(19/1497)----------
Java HotSpot(TM) 64-Bit Server VM warning: CodeHeap 'non-profiled nmethods' is full. Compiler has been disabled.
Java HotSpot(TM) 64-Bit Server VM warning: Try increasing the code heap size using -XX:NonProfiledCodeHeapSize=
Java HotSpot(TM) 64-Bit Server VM warning: CodeHeap 'profiled nmethods' is full. Compiler has been disabled.
Java HotSpot(TM) 64-Bit Server VM warning: Try increasing the code heap size using -XX:ProfiledCodeHeapSize=
Java HotSpot(TM) 64-Bit Server VM warning: CodeHeap 'non-nmethods' is full. Compiler has been disabled.
Java HotSpot(TM) 64-Bit Server VM warning: Try increasing the code heap size using -XX:NonNMethodCodeHeapSize=
java.lang.RuntimeException: No JIT restart event found: expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at jdk.jfr.event.compiler.TestJitRestart.main(TestJitRestart.java:61)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: No JIT restart event found: expected true, was false
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: No JIT restart event found: expected true, was false
----------rerun:(41/6658)*----------",,,,,,,,,,JDK-8297251,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289524,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2xyfv:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-07-21 12:12;dcubed;This test was recently added via:

    JDK-8289524 Add JFR JIT restart event;;;","2022-07-21 18:04;dlong;Changing to hotspot/jfr for initial evaluation.  [~mbaesken], please take a look.;;;","2022-07-21 23:28;mbaesken;Hello [~dlong], when proposing JDK-8289524  my first idea was to not add the test but add the event to the list of ""hard to test"" JFR events. Because I think this event is hard to test.
A compromise would be to  check the JitRestart event fields when the test is able to trigger the event;  but otherwise not to fail and just output ""event could not be triggered"" and stop trying.  This is not ideal not probably better than no test and also better than generating unnecessary test errors.
;;;","2022-07-22 00:05;mbaesken;One more question, I only find tier1 - tier4 in https://github.com/openjdk/jdk/blob/master/test/jdk/TEST.groups  so what is exactly tier5 ? Is there some description I missed ?;;;","2022-07-22 01:19;dlong;If the sweeper is the only place where we do a JIT restart then plans to remove the sweeper might impact how often we see this event (see JDK-8290025).

""tier5"" is a testing tier5 Oracle uses.  For this bug, the test seems to be run with the same flags in tier5 and tier3.  I counted 1 failure out of 258 runs across all tiers, so the failure rate seems pretty low.

Testing recovery from out-of-memory conditions is always tricky.  This events seems to fall into that category, and yes, I agree, ""hard to test"".;;;","2022-07-22 01:27;dlong;How about changing the test to look at CodeCacheFull, compilation, and JitRestart events.  It can test that no compilation events happen after CodeCacheFull unless a JitRestart comes first. So it would be testing the order of events and not absolute counts.;;;","2022-07-22 05:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9612
Date: 2022-07-22 11:55:04 +0000;;;","2022-07-28 03:50;dukebot;Changeset: 5d1ad396
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-07-28 10:48:45 +0000
URL:       https://git.openjdk.org/jdk/commit/5d1ad3968416f2d1740453825445a0deb295f5de
;;;","2022-11-16 05:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/886
Date: 2022-11-16 13:50:53 +0000;;;","2022-11-16 05:59;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well because it is a test related follow up to JDK-8289524 . The patch applies cleanly and is low risk.;;;","2022-11-18 00:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/899
Date: 2022-11-18 08:25:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Improve potentially confusing documentation on collection of profiling information,JDK-8290834,5079805,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jwaters,jwaters,jwaters,2022-07-21 11:36,2022-08-01 10:26,2023-10-01 09:56,2022-07-25 15:48,11,17,19,20,,,20,hotspot,,0,oracle-triage-20,,,,,,,,,,,,,,,,,"Documentation on the MethodData object incorrectly states that it is used when profiling in tiers 0 and 1, when it only does so for tier 0 (Interpreter) and tier 3, while tier 1 (Fully optimizing C1) does not collect any profile data at all. Additionally, the description for the different execution tiers is slightly confusing. This cleanup attempts to slightly better clarify how profiling is tied together between the Interpreter and C1, explain what MDO is an abbreviation for (MethodData object), and corrects the documentation for MethodData as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291002,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xyer:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-21 11:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9598
Date: 2022-07-21 18:36:43 +0000;;;","2022-07-25 03:01;thartmann;ILW = Incorrect/confusing comments in code, doc on MethodData, no workaround = LLH = P5;;;","2022-07-25 15:48;dukebot;Changeset: 0ca5cb13
Author:    Julian Waters <jwaters@openjdk.org>
Committer: Dean Long <dlong@openjdk.org>
Date:      2022-07-25 22:46:19 +0000
URL:       https://git.openjdk.org/jdk/commit/0ca5cb13a38105a4334ac3508a9c7155fc00cac3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"It is no longer possible to change ""user.dir"" in the JDK8",JDK-8290832,5079803,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,serb,serb,serb,2022-07-21 10:16,2022-09-06 18:00,2023-10-01 09:56,2022-07-30 21:05,openjdk8u342,,,,,,openjdk8u345,core-libs,,0,11-na,jdk8u-critical-request,jdk8u-critical-yes,regression,regression_8194154,,,,,,,,,,,,,"The last release of jdk8u includes the fix for JDK-8194154 which disabled the possibility to change the ""user.dir"" property.

Changing the ""user.dir"" was not recommended from the beginning but it was not forbidden, so there are some old applications that rely on the old behavior. One of the app which sets the ""user.dir"" is Gradle. The Gradle has a notice in the documentation for the user:
""Never use new File(relative path) because this creates a path relative to the current working directory (CWD). Gradle can make no guarantees about the location of the CWD, which means builds that rely on it may break at any time"".

But for compatibility reasons they still set the ""user.dir"" property, so the old plugins will work. 
Now that compatibility is broken due to the fix I mention. We found such apps immediately after the release.

I think we should roll it back as soon as possible. Here we can discuss it further.

See some discussion here:
https://mail.openjdk.org/pipermail/jdk8u-dev/2022-July/015249.html",,,,,,,,,,JDK-8291648,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8194154,JDK-8293461,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xyeb:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2022-07-21 14:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/88
Date: 2022-07-21 19:46:44 +0000;;;","2022-07-22 13:58;serb;Fix request (8u)

- Justification: This is a request to restore the old behavior and revert the fix for https://bugs.openjdk.org/browse/JDK-8194154 in the jdk8u, since it is caused some issues. The test added by the initial version of PR was used for fix verification: https://github.com/openjdk/jdk8u-dev/pull/88/commits/1f51111d8abe078c325ab6b761596a4c7769c180 This test will be contributed via separate PR as suggested in the PR.

- Risk Analysis: Low 
PR: https://github.com/openjdk/jdk8u-dev/pull/88;;;","2022-07-28 21:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u/pull/14
Date: 2022-07-29 03:46:56 +0000;;;","2022-07-30 21:05;dukebot;Changeset: 2dadc2bf
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-07-31 04:01:56 +0000
URL:       https://git.openjdk.org/jdk8u/commit/2dadc2bf312d5f947e0735d5ec13c285824db31d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
validate-source failures after JDK-8290016,JDK-8290826,5079797,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,dcubed,dcubed,dcubed,2022-07-21 08:15,2023-01-18 18:09,2023-10-01 09:56,2022-07-21 08:46,20,,,,,,20,hotspot,,0,noreg-build,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,"[2022-07-21T15:00:30,968Z] BAD COPYRIGHT LINE: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8579/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d0e7064a-8a41-473f-bce2-7628ed1985f7/runs/e2a3917c-3199-4d21-a51c-7578d895190e/workspace/open/src/utils/IdealGraphVisualizer/View/src/main/java/com/sun/hotspot/igv/view/actions/CustomizablePanAction.java
[2022-07-21T15:00:30,968Z] 1 header format error(s).
[2022-07-21T15:00:30,970Z] HandleGplSource.gmk:146: recipe for target '/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8579/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d0e7064a-8a41-473f-bce2-7628ed1985f7/runs/e2a3917c-3199-4d21-a51c-7578d895190e/workspace/build/validate-source/support/header_validated/_src_utils_validated' failed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290016,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xycz:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-21 08:21;dcubed;Context diff for the proposed fix:

$ git diff
diff --git a/src/utils/IdealGraphVisualizer/View/src/main/java/com/sun/hotspot/igv/view/actions/CustomizablePanAction.java b/src/utils/IdealGraphVisualizer/View/src/main/java/com/sun/hotspot/igv/view/actions/CustomizablePanAction.java
index b94951f54d1..8152762a575 100644
--- a/src/utils/IdealGraphVisualizer/View/src/main/java/com/sun/hotspot/igv/view/actions/CustomizablePanAction.java
+++ b/src/utils/IdealGraphVisualizer/View/src/main/java/com/sun/hotspot/igv/view/actions/CustomizablePanAction.java
@@ -1,7 +1,7 @@
 /*
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
  *
- * Copyright (c) 1997, 2015, 2022, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2022, Oracle and/or its affiliates. All rights reserved.
  *
  * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
  * Other names may be trademarks of their respective owners.;;;","2022-07-21 08:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9594
Date: 2022-07-21 15:23:36 +0000;;;","2022-07-21 08:46;dukebot;Changeset: 6346c333
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-07-21 15:43:00 +0000
URL:       https://git.openjdk.org/jdk/commit/6346c3338c23255a43b179cbd618990c31c2eabc
;;;","2022-07-21 16:34;dlong;ILW = build fails in copyright check; always; no workaround = HHH = P1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert in PhaseIdealLoop::do_unroll() is subject to undefined behavior,JDK-8290822,5079793,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,roland,roland,2022-07-21 07:32,2023-04-27 07:04,2023-10-01 09:56,2023-02-17 06:29,11,17,20,8,,,21,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-20,starter,,,,,,,,,,"While working on JDK-8290789, I noticed the following assert:
    assert(stride_con > 0 && ((limit_type->_hi - stride_con) < limit_type->_hi) ||
           stride_con < 0 && ((limit_type->_lo - stride_con) > limit_type->_lo),
           ""sanity"");

doesn't fire because of UB",,,,,,,,,,JDK-8306158,JDK-8307032,JDK-8305553,JDK-8305128,JDK-8306994,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290789,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xyc3:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-21 07:35;thartmann;ILW = Assert does not trigger in problematic case due to UB, edge case, no workaround = MLH = P4;;;","2023-02-16 04:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12576
Date: 2023-02-15 16:13:21 +0000;;;","2023-02-17 06:29;dukebot;Changeset: cd77fcfb
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2023-02-17 14:27:17 +0000
URL:       https://git.openjdk.org/jdk/commit/cd77fcfb5f9156e5f0909fa15a842dde6c25c66a
;;;","2023-03-29 04:46;thartmann;Fix Request (JDK 20u)
Resolves an issue with an assert. The fix is low risk, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.;;;","2023-03-29 04:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/41
Date: 2023-03-29 11:45:45 +0000;;;","2023-04-26 07:03;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
No risk, relaxes an assertion.
Clean backport.
SAP nightly testing passed.;;;","2023-04-26 07:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1300
Date: 2023-04-26 14:14:23 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/nashorn/api/scripting/test/ScriptObjectMirrorTest.java fails: assertEquals is ambiguous,JDK-8290813,5079784,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gdams,gdams,gdams,2022-07-21 05:55,2023-07-17 02:16,2023-10-01 09:56,2022-07-22 02:51,11,,,,,,11.0.17,core-libs,,0,blocks-jtreg-6,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,"Using jtreg 6, It has been noted that jdk/nashorn/api/scripting/test/ScriptObjectMirrorTest.java fails:

test/nashorn/src/jdk/nashorn/api/scripting/test/ScriptObjectMirrorTest.java:285: error: reference to assertEquals is ambiguous
assertEquals(42.0, obj.to(Double.class));",,,,,,,,,,JDK-8312162,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xya3:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@51b0542d,,,,,,,,,"2022-07-21 07:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1255
Date: 2022-07-21 14:17:32 +0000;;;","2022-07-21 08:02;gdams;Fix Request (jdk11u)

This is a small fix that will allow us to bump to jtreg 6 for jdk11u;;;","2022-07-22 02:51;dukebot;Changeset: 5a1377da
Author:    George Adams <george.adams@microsoft.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-07-22 09:47:28 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/5a1377dafc5ef24a30c73a20eb44a06afb328212
;;;","2022-08-03 13:20;dukebot;Changeset: 5a1377da
Author:    George Adams <george.adams@microsoft.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-07-22 09:47:28 +0000
URL:       https://git.openjdk.org/jdk11u/commit/5a1377dafc5ef24a30c73a20eb44a06afb328212
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Segfault at PhaseIdealLoop::clone_loop_handle_data_uses,JDK-8290781,5079411,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,webbuggrp,webbuggrp,2022-07-18 11:40,2023-03-12 23:33,2023-10-01 09:56,2022-08-31 02:25,11.0.16-oracle,17,19,20,,,20,hotspot,,0,c2,dcsswa,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,oracle-triage-20,regression,reproducer-yes,webbug,,,,,"ADDITIONAL SYSTEM INFORMATION :
Arch: x86_64
OS: Ubuntu 20.04.4 LTS
HotSpot
- openjdk version ""11.0.17-internal"" 2022-10-18
- OpenJDK Runtime Environment (fastdebug build 11.0.17-internal+0-adhoc.congli.my-jdk11u)
- OpenJDK 64-Bit Server VM (fastdebug build 11.0.17-internal+0-adhoc.congli.my-jdk11u, mixed mode)
javac: javac 11.0.17-internal


A DESCRIPTION OF THE PROBLEM :
The problem was found in the repo https://github.com/openjdk/jdk11u-dev (commit 97a472ce), OpenJDK 11.0.17 internal. 

**Note** 
1. The given test may take **~1min** to make HotSpot crash. So please be patient.
2. Sorry, we cannot reduce the test further otherwise it cannot be reproduced.

The following is part of the log:
```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fcd302ff9fe, pid=900700, tid=900712
#
# JRE version: OpenJDK Runtime Environment (11.0.17) (build 11.0.17-internal+0-adhoc.congli.jdk11u-dev)
# Java VM: OpenJDK 64-Bit Server VM (11.0.17-internal+0-adhoc.congli.jdk11u-dev, mixed mode, tiered, compressed oops, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xabf9fe]  PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&, IdealLoopTree*, IdealLoopTree*, Node_List*&, Node_List*&, Node_List*&, Node_List&, unsigned int, PhaseIdealLoop::CloneLoopMode)+0x51e
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xmx1G -XX:-BackgroundCompilation -XX:-PrintWarnings --illegal-access=deny Test

Host: Intel(R) Core(TM) i7-9700K CPU @ 3.60GHz, 8 cores, 15G, Ubuntu 20.04.4 LTS
Time: Mon Jul 18 20:30:48 2022 CEST elapsed time: 1.335015 seconds (0d 0h 0m 1s)

---------------  T H R E A D  ---------------

Current thread (0x00007fcd281d2000):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=900712, stack(0x00007fcd100ae000,0x00007fcd101af000)]


Current CompileTask:
C2:   1335   84 % !b  4       Test::vMeth1 @ 178 (244 bytes)

Stack: [0x00007fcd100ae000,0x00007fcd101af000],  sp=0x00007fcd101a9830,  free space=1006k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xabf9fe]  PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&, IdealLoopTree*, IdealLoopTree*, Node_List*&, Node_List*&, Node_List*&, Node_List&, unsigned int, PhaseIdealLoop::CloneLoopMode)+0x51e
V  [libjvm.so+0xac0f0b]  PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&, int, PhaseIdealLoop::CloneLoopMode, Node*)+0x100b
V  [libjvm.so+0xa9bfee]  PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&, bool)+0x20e
V  [libjvm.so+0xaa1a44]  IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&)+0x514
V  [libjvm.so+0xaa1cd6]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x1d6
V  [libjvm.so+0xaa1b33]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x33
V  [libjvm.so+0xaa1b33]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x33
V  [libjvm.so+0xab6332]  PhaseIdealLoop::build_and_optimize()+0x922
V  [libjvm.so+0x634215]  Compile::optimize_loops(int&, PhaseIterGVN&, LoopOptsMode) [clone .part.0]+0x1d5
V  [libjvm.so+0x636849]  Compile::Optimize()+0xc79
V  [libjvm.so+0x638112]  Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0xf92
V  [libjvm.so+0x55f93f]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)+0x15f
V  [libjvm.so+0x6414b5]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x3b5
V  [libjvm.so+0x642658]  CompileBroker::compiler_thread_loop()+0x428
V  [libjvm.so+0xd963cf]  JavaThread::thread_main_inner()+0x10f
V  [libjvm.so+0xd92dd0]  Thread::call_run()+0x140
V  [libjvm.so+0xc009ae]  thread_native_entry(Thread*)+0xee
```

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. javac Test.java
2. java -Xmx1G -XX:-BackgroundCompilation -XX:-PrintWarnings --illegal-access=deny Test


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
No segfault
ACTUAL -
Segfault

---------- BEGIN SOURCE ----------
class Test {
  int N = 256;
  long instanceCount;
  int iFld;

  void vMeth1() {
    int i3, i4, i5 = 9020, i6, i7 = 4, i8, i10, i11 = 2, iArr1[] = new int[N];
    float[] fArr = new float[N];
    long[] lArr = new long[N];
    for (i4 = 3; ; ) {
      try {
        i5 = i5 % iArr1[i4];
      } catch (ArithmeticException a_e) {
      }
      for (i6 = 1; i6 < 5; i6++)
        for (i8 = 1; 2 > i8; i8 += 2) {
          iArr1[i8 - 1] = i6;
          fArr[i6] += i6;
          lArr[i4] <<= i5;
          try {
            iArr1[i8] = 467471596 / iArr1[i8 - 1];
            i7 = iArr1[i4 + 1] % i6;
          } catch (ArithmeticException a_e) {
          }
        }
      for (i10 = 1; i10 < 5; i10++) {
        iArr1[i4 + 1] >>= i7;
        iArr1[i10] = (int) instanceCount;
      }
      for (int ax$13 = 2362; ax$13 < 7036; ax$13 += 1)
        try {
          boolean[][] ax$7 = new boolean[2329][1];
          for (int ax$9 = 0; ; ax$9++) ax$7[i11][ax$9] = ax$9 == '.';
        } catch (Throwable ax$12) {
        } finally {
        }
    }
  }

  int iMeth(long l) {
    float fArr1[] = new float[N];
    vMeth1();
    long meth_res = Double.doubleToLongBits(checkSum(fArr1));
    return (int) meth_res;
  }

  void vMeth(int i2) {
    i2 = iMeth(instanceCount);
  }

  void mainTest(String[] strArr1) {
    vMeth(iFld);
  }

  public static void main(String[] strArr) {
    Test _instance = new Test();
    _instance.mainTest(strArr);
  }

  public static double checkSum(float[] a) {
    double sum = 0;
    for (int j = 0; j < a.length; j++) {
      sum += (a[j] / (j + 1) + a[j] % (j + 1));
    }
    return sum;
  }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8294173,JDK-8294789,JDK-8294791,JDK-8294444,JDK-8294120,,,,,,,,,,,,,,,,,,,,,,,JDK-8287806,,,,,,JDK-8287806,,,,JDK-8263303,,,,,,,"2022-07-21 02:09;sswsharm;Test.java;https://bugs.openjdk.org/secure/attachment/100075/Test.java","2022-07-22 01:42;roland;TestLSMBadControlOverride.java;https://bugs.openjdk.org/secure/attachment/100101/TestLSMBadControlOverride.java","2022-07-21 02:09;sswsharm;hs_err_pid1012.log;https://bugs.openjdk.org/secure/attachment/100076/hs_err_pid1012.log","2022-07-21 02:09;sswsharm;replay_pid1012.log;https://bugs.openjdk.org/secure/attachment/100074/replay_pid1012.log",,,,,,,,,generic,,,,,,b26,17,,generic,,,,,"0|i2xvz7:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-21 02:11;sswsharm;Issue is reproduced on JDK 11.0.16

OS: Windows 10
JDK 11.0.15.1: Pass
JDK 11.0.16: Fail
JDK 17.0.4: Pass
JDK 18.0.2: Pass
JDK 20ea6: Pass

Crash is observed on JDK 11.0.16, hs_err_pid.log file is attached, moving it to dev team for further analysis;;;","2022-07-21 04:12;thartmann;Running the test with a debug build crashes like this:

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f9911c06827, pid=826177, tid=826189
#
# JRE version: Java(TM) SE Runtime Environment 18.9 (11.0.17+3) (fastdebug build 11.0.17-ea+3-LTS-226)
# Java VM: Java HotSpot(TM) 64-Bit Server VM 18.9 (fastdebug 11.0.17-ea+3-LTS-226, mixed mode, tiered, compressed oops, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x128f827]  Node::in(unsigned int) const [clone .isra.25] [clone .constprop.107]+0x7

Current CompileTask:
C2:   6225  807 % !   4       Test::vMeth1 @ 178 (244 bytes)

Stack: [0x00007f98d5cfd000,0x00007f98d5dfe000],  sp=0x00007f98d5df7470,  free space=1001k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x128f827]  Node::in(unsigned int) const [clone .isra.25] [clone .constprop.107]+0x7
V  [libjvm.so+0x1297ae6]  PhaseIdealLoop::set_ctrl(Node*, Node*)+0x56
V  [libjvm.so+0x12e2c05]  PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&, int, PhaseIdealLoop::CloneLoopMode, Node*)+0x225
V  [libjvm.so+0x12a6c6c]  PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&, bool)+0x2bc
V  [libjvm.so+0x12af7a5]  IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&)+0x515
V  [libjvm.so+0x12afb48]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x308
V  [libjvm.so+0x12af9bd]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x17d
V  [libjvm.so+0x12afb33]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x2f3
V  [libjvm.so+0x12af9bd]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x17d
V  [libjvm.so+0x12d6259]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0xf59
V  [libjvm.so+0xa39411]  Compile::optimize_loops(int&, PhaseIterGVN&, LoopOptsMode) [clone .part.440]+0x2d1
V  [libjvm.so+0xa3cdc7]  Compile::Optimize()+0xca7
V  [libjvm.so+0xa3df50]  Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0xf60
V  [libjvm.so+0x83a9eb]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)+0xfb
V  [libjvm.so+0xa4b504]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x304
V  [libjvm.so+0xa4c6f8]  CompileBroker::compiler_thread_loop()+0x568
V  [libjvm.so+0x180ee3b]  JavaThread::thread_main_inner()+0x20b
V  [libjvm.so+0x180a81a]  Thread::call_run()+0x19a
V  [libjvm.so+0x151a25e]  thread_native_entry(Thread*)+0xfe;;;","2022-07-21 05:39;thartmann;ILW = Crash during C2 compilation (related to loop strip mining JDK-8186027), with generated test, disable loop strip mining (-XX:LoopStripMiningIter=0) = HLM = P3;;;","2022-07-22 01:44;roland;This applies to latest jdk as well I think. I attached a test that crashes the same way with a recent build as well when run with:
java -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:CompileOnly=TestLSMBadControlOverride::test TestLSMBadControlOverride;;;","2022-07-22 02:34;thartmann;According to binary search with TestLSMBadControlOverride, the issue was introduced by JDK-8263303 in JDK 17 b26.;;;","2022-08-24 01:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9997
Date: 2022-08-24 07:58:11 +0000;;;","2022-08-31 02:25;dukebot;Changeset: 4c90e87a
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-08-31 09:23:41 +0000
URL:       https://git.openjdk.org/jdk/commit/4c90e87a6fa83a66fdb8767b999879600629f1f6
;;;","2022-09-22 06:25;thartmann;Fix Request (JDK 19u)
Fixes a crash during C2 compilation. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 11u and 17u.;;;","2022-09-22 06:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/31
Date: 2022-09-22 13:25:44 +0000;;;","2022-10-02 00:12;vrudomet;Fix request [11u]

Backport for parity with 11.0.18-oracle.
Fixes a crash during C2 compilation. The fix is low risk and applies cleanly. Already tested and backported to JDK 19u, Oracle JDK 11u and Oracle JDK 17u.

Tested by
* running jtreg tier1, tier2, jck runtime on linux x64, x86, aarch64
* manually ran test from the JBS description with specified parameters

Risk of the backport to break the VM: low ;;;","2022-10-02 00:13;vrudomet;Fix request [17u]

Backport for parity with 17.0.6-oracle.
Fixes a crash during C2 compilation. The fix is low risk and applies cleanly. Already tested and backported to JDK 19u, Oracle JDK 11u and Oracle JDK 17u.

Tested by
* running jtreg tier1, tier2, jck runtime on linux x64, aarch64
* manually ran test from the JBS description with specified parameters

Risk of the backport to break the VM: low;;;","2022-10-02 00:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1382
Date: 2022-10-02 07:08:48 +0000;;;","2022-10-02 00:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/764
Date: 2022-10-02 07:09:09 +0000;;;",,,,,,,,,,,,,,,,,,,,
AArch64: Crash in c2 nmethod running RunThese30M.java,JDK-8290780,5079749,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,aph,dlong,dlong,2022-07-21 02:03,2023-01-23 13:26,2023-10-01 09:56,2022-07-25 05:43,20,,,,,,20,hotspot,,0,intermittent,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,tier4,,,,,,,,,,,,"#  SIGSEGV (0xb) at pc=0x0000ffff55964edc, pid=2843096, tid=2850366
#
# JRE version: Java(TM) SE Runtime Environment (20.0+7) (fastdebug build 20-ea+7-377)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+7-377, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# J 91101 c2 java.io.ObjectOutputStream.enableReplaceObject(Z)Z java.base@20-ea (47 bytes) @ 0x0000ffff55964edc [0x0000ffff55964e80+0x000000000000005c]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289743,,,,,,,"2022-07-21 03:59;aph;8290780.txt;https://bugs.openjdk.org/secure/attachment/100081/8290780.txt","2022-07-21 02:17;dlong;hs_err_pid2843096.log;https://bugs.openjdk.org/secure/attachment/100077/hs_err_pid2843096.log","2022-07-21 02:17;dlong;hs_err_pid3138936.log;https://bugs.openjdk.org/secure/attachment/100078/hs_err_pid3138936.log","2022-07-21 16:13;dlong;patch.txt;https://bugs.openjdk.org/secure/attachment/100086/patch.txt",,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2xy2b:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-07-21 02:11;dlong;Of the two crashes so far, both are crashing on memory addresses with 49 significant bits: 0x0001fffe44003d2c and 0x0001fffe34102ed4.
Looking at the disassembly, the high bit is being generated by an ADRP instruction.

[~aph], could this be related to the recent JDK-8289743 change?;;;","2022-07-21 02:32;aph;ARMv8 is specified as having a 48-bit address space, and that's what the AArch64 HotSpot port was written for. 

ARMv8.2 LVA (Large Virtual Addressing) and ARMv8.2 LPA (Large Physical Addressing) allow larger address spaces, but I have never seen them in user space. The only way to get higher addresses AFAIK is to use an mmap hint parameter that is larger than 48 bits.

It may well be that this crash is caused by some additions I made (only used with ASSERT enabled) to stress the relocation logic. Unfortunately there's no disassembly in the log (may I suggest that your test builds fix this?) but I can disassemble it.

;;;","2022-07-21 04:00;aph;I've attached the disassembly. It almost certainly is caused by my changes.;;;","2022-07-21 04:05;thartmann;ILW = Crash in C2 compiled code (regression), on aarch64 with long running stress test, no known workaround = HLH = P2;;;","2022-07-21 13:57;dcubed;The fix for:

    JDK-8289743 AArch64: Clean up patching logic

was integrated in jdk-20+7-372. The first Tier4 after jdk-20+7-372 was jdk-20+7-375-tier4
which did not have any test failures. This failure did occur in jdk-20+7-377-tier4 and
jdk-20+7-378-tier4 and then most recently in jdk-20+7-385-tier4. jdk-20+7-379-tier4,
jdk-20+7-381-tier4 and jdk-20+7-383-tier4 did not have any failures. So in the last 7
Tier4 job sets, we have seen 3 sightings of this failure. Definitely intermittent so I have
added that label.;;;","2022-07-21 16:15;dlong;I have attached a patch that might solve the problem, but I'm not sure if it's the correct approach. ;;;","2022-07-21 21:14;dholmes;JDK-8289743 did pass tiers 1-4 before being integrated.;;;","2022-07-22 06:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9615
Date: 2022-07-22 13:50:28 +0000;;;","2022-07-25 05:43;dukebot;Changeset: 1e270ea4
Author:    Andrew Haley <aph@openjdk.org>
Date:      2022-07-25 12:40:21 +0000
URL:       https://git.openjdk.org/jdk/commit/1e270ea4f5e8f9539e85430b9be5cf21a89b4d8f
;;;","2022-07-25 08:51;dcubed;The fix for this bug is integrated in jdk-20+8-414.;;;","2023-01-23 13:26;epavlova;This issue was not observed in JDK20 ATR. There are 5 failures of applications/runthese/RunThese30M.java in JDK20 ATR but they are because of new issue tracked by JDK-8300079.;;;",,,,,,,,,,,,,,,,,,,,,,
Some doc errors in DerOutputStream.java,JDK-8290775,5079746,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2022-07-21 01:10,2022-08-23 13:14,2023-10-01 09:56,2022-08-16 07:49,,,,,,,20,security-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"File this issue on behalf of Jianquan Cai (https://github.com/jquanc)

There are some doc errors in sun.security.util.DerOutputStream, like the followings,

/**
 * Private helper routine for writing DER encoded string values.
 * @param s the string to write
 * @param stringTag one of the DER string tags that indicate which
 * encoding should be used to write the string out.
 * @param enc the name of the encoder that should be used corresponding
 * to the above tag.
 */
private void writeString(String s, byte stringTag, Charset charset) throws IOException
The parameter is charset, but not enc.


/**
 * Marshals a DER integer on the output stream.
 *
 * @param i the integer in bytes, equivalent to BigInteger::toByteArray.
 */
public void putInteger(byte[] buf) throws IOException {
The parameter is buf, but not i.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xy1n:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,,,"2022-07-21 14:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9585
Date: 2022-07-21 08:53:31 +0000;;;","2022-08-16 07:49;dukebot;Changeset: 3e122419
Author:    jquanC <jack_cai.sh@foxmail.com>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2022-08-16 14:46:14 +0000
URL:       https://git.openjdk.org/jdk/commit/3e122419b2979235f57c0dd549ca63647ea73753
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Catalog not used when the handler is null,JDK-8290740,5079703,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,joehw,joehw,joehw,2022-07-20 14:54,2022-08-03 20:39,2023-10-01 09:56,2022-07-29 18:47,,,,,,,20,xml,,0,,,,,,,,,,,,,,,,,,"The use case:
    A SAX parser is created;
    A Catalog is set on the parser;
    The XML to be parsed contains XInclude file;
    Since we're using the Catalog, the parsing was started without a handler (handler = null).

The result was the file was not parsed successfully, instead an Exception was thrown:
org.xml.sax.SAXParseException; lineNumber: 3; columnNumber: 25; An include with href 'test.xml'failed, and no fallback element was found.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xxs3:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,,,"2022-07-28 19:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9682
Date: 2022-07-29 02:38:25 +0000;;;","2022-07-29 18:47;dukebot;Changeset: 470c0eb2
Author:    Joe Wang <joehw@openjdk.org>
Date:      2022-07-30 01:42:05 +0000
URL:       https://git.openjdk.org/jdk/commit/470c0eb2163a62e5743aefe62c6725e92beea54d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JNI DestroyJavaVM can start shutdown when one non-daemon thread remains,JDK-8290732,5079694,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,smarks,smarks,2022-07-20 11:20,2022-08-17 18:04,2023-10-01 09:56,2022-08-11 23:45,11,17,20,8,,,20,hotspot,,0,jni,,,,,,,,,,,,,,,,,"DestroyJavaVM is supposed to wait until all non-daemon threads have exited before starting the shutdown sequence. The logic in Threads::destroy_vm seems to assume that the caller is a non-daemon thread. If the caller is a daemon thread, shutdown will start when one non-daemon thread is still running. See reproducer in attached Main.java and start.c files.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-07-20 11:19;smarks;Main.java;https://bugs.openjdk.org/secure/attachment/100055/Main.java","2022-07-20 11:19;smarks;start.c;https://bugs.openjdk.org/secure/attachment/100056/start.c",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xxq3:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-07-20 17:32;dholmes;This is a rare usecase but there is no reason it should not work correctly. Likely a ""day one"" issue but probably of little value to backport.;;;","2022-07-21 09:16;smarks;My hunch is that it was introduced when JDK-4496330 was integrated (JDK 1.4, 2001). This added the ability for a native thread to attach as a daemon thread, which I don't think was a possibility before this. (Not that it really matters.);;;","2022-07-21 19:28;dholmes;Thanks for the archaeology [~smarks] :);;;","2022-08-08 23:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9803
Date: 2022-08-09 06:10:40 +0000;;;","2022-08-11 23:45;dukebot;Changeset: 6eb7c3ad
Author:    David Holmes <dholmes@openjdk.org>
Date:      2022-08-12 06:41:22 +0000
URL:       https://git.openjdk.org/jdk/commit/6eb7c3ad0ee6fc187172e68cc838797981203b39
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"compiler/vectorization/TestAutoVecIntMinMax.java failed with ""IRViolationException: There were one or multiple IR rule failures.""",JDK-8290730,5079692,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,ngasson,dcubed,dcubed,2022-07-20 11:12,2023-01-23 13:17,2023-10-01 09:56,2022-07-25 02:13,20,,,,,,20,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,tier2,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

compiler/vectorization/TestAutoVecIntMinMax.java

Here's a snippet from the log file:

----------System.err:(107/10880)*----------

Command Line:
/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+7-374/linux-x64-debug.jdk/jdk-20/fastdebug/bin/java -DReproduce=true -cp /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S31292/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7941945e-18a6-4e35-a9d5-3d1dcd3f8b4d/runs/f7d890b6-bce0-4938-8c7b-64a28ac45e13/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/5/compiler/vectorization/TestAutoVecIntMinMax.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+7-374/src.full/open/test/hotspot/jtreg/compiler/vectorization:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S31292/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7941945e-18a6-4e35-a9d5-3d1dcd3f8b4d/runs/f7d890b6-bce0-4938-8c7b-64a28ac45e13/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/5/test/lib:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S31292/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7941945e-18a6-4e35-a9d5-3d1dcd3f8b4d/runs/f7d890b6-bce0-4938-8c7b-64a28ac45e13/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/5:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar -Djava.library.path=/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+7-374/linux-x64-debug.test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S31292/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7941945e-18a6-4e35-a9d5-3d1dcd3f8b4d/runs/f7d890b6-bce0-4938-8c7b-64a28ac45e13/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/tmp -XX:UseAVX=0 -XX:UseSSE=3 -Dir.framework.server.port=37149 -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompileCommand=log,compiler.c2.irTests.TestAutoVecIntMinMax::* -XX:CompileCommand=option,compiler.c2.irTests.TestAutoVecIntMinMax::*,bool,PrintIdeal,true -XX:CompileCommand=option,compiler.c2.irTests.TestAutoVecIntMinMax::*,bool,PrintOptoAssembly,true -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.c2.irTests.TestAutoVecIntMinMax

One or more @IR rules failed:

Failed IR Rules (12) of Methods (4)
-----------------------------------
1) Method ""private static void compiler.c2.irTests.TestAutoVecIntMinMax.testIntMax(int[],int[])"" - [Failed IR rules: 3]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(LoadVector.*)+(\\\\s){2}===.*)"", "" >0 ""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(LoadVector.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!
   * @IR rule 2: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(MaxV.*)+(\\\\s){2}===.*)"", "" >0 ""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(MaxV.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!
   * @IR rule 3: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(StoreVector.*)+(\\\\s){2}===.*)"", "" >0 ""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(StoreVector.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!

2) Method ""private static void compiler.c2.irTests.TestAutoVecIntMinMax.testIntMin(int[],int[])"" - [Failed IR rules: 3]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(LoadVector.*)+(\\\\s){2}===.*)"", "" >0 ""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(LoadVector.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!
   * @IR rule 2: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(MinV.*)+(\\\\s){2}===.*)"", "" >0 ""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(MinV.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!
   * @IR rule 3: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(StoreVector.*)+(\\\\s){2}===.*)"", "" >0 ""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(StoreVector.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!

3) Method ""private static void compiler.c2.irTests.TestAutoVecIntMinMax.testIntStrictMax(int[],int[])"" - [Failed IR rules: 3]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(LoadVector.*)+(\\\\s){2}===.*)"", "" >0 ""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(LoadVector.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!
   * @IR rule 2: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(MaxV.*)+(\\\\s){2}===.*)"", "" >0 ""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(MaxV.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!
   * @IR rule 3: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(StoreVector.*)+(\\\\s){2}===.*)"", "" >0 ""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(StoreVector.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!

4) Method ""private static void compiler.c2.irTests.TestAutoVecIntMinMax.testIntStrictMin(int[],int[])"" - [Failed IR rules: 3]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(LoadVector.*)+(\\\\s){2}===.*)"", "" >0 ""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(LoadVector.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!
   * @IR rule 2: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(MinV.*)+(\\\\s){2}===.*)"", "" >0 ""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(MinV.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!
   * @IR rule 3: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(StoreVector.*)+(\\\\s){2}===.*)"", "" >0 ""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(StoreVector.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!

>>> Check stdout for compilation output of the failed methods


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.throwIfNoSafepointWhilePrinting(IRMatcher.java:91)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.reportFailures(IRMatcher.java:82)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.applyIRRules(IRMatcher.java:54)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.<init>(IRMatcher.java:43)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:732)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:701)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:332)
	at compiler.lib.ir_framework.TestFramework.run(TestFramework.java:218)
	at compiler.lib.ir_framework.TestFramework.run(TestFramework.java:207)
	at compiler.c2.irTests.TestAutoVecIntMinMax.main(TestAutoVecIntMinMax.java:60)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288107,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2xxpn:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-07-20 11:16;dcubed;This is starting to look like a regression starting in jdk-20+7-374
so I'm bumping the priority from P3 -> P2.
;;;","2022-07-20 17:13;kvn;[~ngasson] Please, assign ask Bhavana to look on this (I can't assign bug to him).
The test was added by him for JDK-8288107
;;;","2022-07-20 17:41;kvn;Test failed with -XX:UseAVX=0 -XX:UseSSE=3 flags passed from testing environment.
After JDK-8289801 we start running IR tests with different AVX and SSE setting. @requires is not enough.
You need additional cpu features checks in tests. Example: https://github.com/openjdk/jdk/pull/9559
;;;","2022-07-20 19:56;dlong;ILW = tier2 test failure; with uncommon feature flags; no workaround = HLH = P2;;;","2022-07-21 01:14;ngasson;Bhavana's looking at it now (she doesn't have a JBS account).;;;","2022-07-22 02:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9610
Date: 2022-07-22 09:40:37 +0000;;;","2022-07-25 02:13;dukebot;Changeset: 80dc6ceb
Author:    Bhavana Kilambi <bhavana.kilambi@arm.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-07-25 09:08:23 +0000
URL:       https://git.openjdk.org/jdk/commit/80dc6cebc90f7ed5c4a262e2dcd3bd54ce71eab1
;;;","2023-01-23 13:17;epavlova;Failed compiler/vectorization/TestAutoVecIntMinMax.java test passed in JDK20 ATR.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Fix incorrect uses of G1CollectedHeap::heap_region_containing(),JDK-8290715,5079674,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2022-07-20 06:58,2022-08-03 20:26,2023-10-01 09:56,2022-07-29 08:46,20,,,,,,20,hotspot,,0,gc-g1,gc-pending-review,,,,,,,,,,,,,,,,"G1CollectedHeap::heap_region_containing() currently returns HeapRegion* of uncommitted heap regions which it should actually error out on.
At least some callers (marking code, verification code) explicitly check for nullptr on return which suggests that the intention has been to use G1CollectedHeap::heap_region_containing_or_null() instead.

That G1CollectedHeap::heap_region_containing_or_null() method explicitly mentions that it would return nullptr on uncommitted  regions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290713,,,,,,JDK-8291653,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xxln:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-07-21 01:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9584
Date: 2022-07-21 08:06:04 +0000;;;","2022-07-29 08:46;dukebot;Changeset: f58e08e2
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-07-29 15:43:43 +0000
URL:       https://git.openjdk.org/jdk/commit/f58e08e2585186e1b3ca2cad20b342d83a8ab133
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make com.sun.jndi.dns.DnsClient virtual threads friendly,JDK-8290714,5079673,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aefimov,aefimov,aefimov,2022-07-20 06:08,2022-11-16 23:36,2023-10-01 09:56,2022-11-10 11:24,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,"Running simple JNDI application with DNS context lookup done from virtual thread and the -Djdk.tracePinnedThreads=full system property set yields the following trace output:
Thread[#21,ForkJoinPool-1-worker-1,5,CarrierThreads]
    java.base/java.lang.VirtualThread$VThreadContinuation.onPinned(VirtualThread.java:180)
    java.base/jdk.internal.vm.Continuation.onPinned0(Continuation.java:398)
    java.base/jdk.internal.vm.Continuation.yield0(Continuation.java:390)
    java.base/jdk.internal.vm.Continuation.yield(Continuation.java:357)
    java.base/java.lang.VirtualThread.yieldContinuation(VirtualThread.java:370)
    java.base/java.lang.VirtualThread.parkNanos(VirtualThread.java:532)
    java.base/java.lang.System$2.parkVirtualThread(System.java:2605)
    java.base/jdk.internal.misc.VirtualThreads.park(VirtualThreads.java:67)
    java.base/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:408)
    java.base/sun.nio.ch.Poller.poll2(Poller.java:137)
    java.base/sun.nio.ch.Poller.poll(Poller.java:102)
    java.base/sun.nio.ch.Poller.poll(Poller.java:87)
    java.base/sun.nio.ch.DatagramChannelImpl.park(DatagramChannelImpl.java:486)
    java.base/sun.nio.ch.DatagramChannelImpl.trustedBlockingReceive(DatagramChannelImpl.java:734)
    java.base/sun.nio.ch.DatagramChannelImpl.blockingReceive(DatagramChannelImpl.java:661)
    java.base/sun.nio.ch.DatagramSocketAdaptor.receive(DatagramSocketAdaptor.java:241) <== monitors:1
    java.base/java.net.DatagramSocket.receive(DatagramSocket.java:714)
    jdk.naming.dns/com.sun.jndi.dns.DnsClient.doUdpQuery(DnsClient.java:430) <== monitors:1
    jdk.naming.dns/com.sun.jndi.dns.DnsClient.query(DnsClient.java:216)
    jdk.naming.dns/com.sun.jndi.dns.Resolver.query(Resolver.java:81)
    jdk.naming.dns/com.sun.jndi.dns.DnsContext.c_lookup(DnsContext.java:290)
    java.naming/com.sun.jndi.toolkit.ctx.ComponentContext.p_lookup(ComponentContext.java:542)
    java.naming/com.sun.jndi.toolkit.ctx.PartialCompositeContext.lookup(PartialCompositeContext.java:177)
    java.naming/com.sun.jndi.toolkit.ctx.PartialCompositeContext.lookup(PartialCompositeContext.java:166)
    java.naming/javax.naming.InitialContext.lookup(InitialContext.java:409)
    DnsWithVTs.doLookup(DnsWithVTs.java:26)
    DnsWithVTs.lambda$doDnsCtxLookup$0(DnsWithVTs.java:15)
    java.base/java.lang.VirtualThread.run(VirtualThread.java:287)
    java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:174)
    java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:327)
    java.base/jdk.internal.vm.Continuation.enter(Continuation.java:320)

com.sun.jndi.dns.DnsClient class needs to be updated to use DatagramChannel and j.u.c.l locks to be virtual thread friendly by avoiding pinning carrier threads.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xxlf:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@226ed983,,,,,,,,,"2022-11-06 08:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11007
Date: 2022-11-06 16:39:48 +0000;;;","2022-11-10 11:24;dukebot;Changeset: 9ef7852b
Author:    Aleksei Efimov <aefimov@openjdk.org>
Date:      2022-11-10 19:20:33 +0000
URL:       https://git.openjdk.org/jdk/commit/9ef7852be38ed78a5405e162d160f1ce72a7755b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(false) failed: infinite loop in PhaseIterGVN::optimize,JDK-8290711,5079670,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,roland,roland,2022-07-20 05:20,2022-10-10 09:27,2023-10-01 09:56,2022-08-26 01:01,11,17,19,20,,,20,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,oracle-triage-20,,,,,,,,,"Running attached test case with:

$ java -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:-TieredCompilation -XX:+PrintCompilation -XX:CompileOnly=TestInfiniteIGVNAfterCCP::test -XX:-PrintInlining -XX:CompileCommand=quiet -XX:PrintIdealGraphFile=graph.xml -XX:PrintIdealGraphLevel=2 -XX:-TraceLoopOpts -XX:-UseLoopPredicate -XX:-UseProfiledLoopPredicate -XX:-LoopUnswitching TestInfiniteIGVNAfterCCP

I get:

  11  Parm  === 3  [[ 117 127 123 127 59 ]] Parm1: TestInfiniteIGVNAfterCCP$A *  Oop:TestInfiniteIGVNAfterCCP$A * !jvms: TestInfiniteIGVNAfterCCP::test @ bci:-1 (line 25)
 122  IfTrue  === 119  [[ 135 123 ]] #1 !jvms: TestInfiniteIGVNAfterCCP::testHelper @ bci:6 (line 32) TestInfiniteIGVNAfterCCP::test @ bci:23 (line 27)
 282  IfTrue  === 281  [[ 287 ]] #1 !orig=[293] !jvms: TestInfiniteIGVNAfterCCP::testHelper @ bci:57 (line 46) TestInfiniteIGVNAfterCCP::test @ bci:23 (line 27)
 283  IfFalse  === 281  [[ 287 ]] #0 !jvms: TestInfiniteIGVNAfterCCP::testHelper @ bci:57 (line 46) TestInfiniteIGVNAfterCCP::test @ bci:23 (line 27)
  28  ConI  === 0  [[ 378 319 337 311 345 ]]  #int:1
 305  AddP  === _ 303 303 304  [[ 311 ]]   Oop:java/lang/Class:exact+116 * !jvms: TestInfiniteIGVNAfterCCP::testHelper @ bci:65 (line 51) TestInfiniteIGVNAfterCCP::test @ bci:23 (line 27)
 159  Phi  === 396 7 395  [[ 360 309 360 309 386 386 306 347 347 ]]  #memory  Memory: @BotPTR *+bot, idx=Bot; !orig=[175],181 !jvms: TestInfiniteIGVNAfterCCP::testHelper @ bci:18 (line 40) TestInfiniteIGVNAfterCCP::test @ bci:23 (line 27)
 308  Proj  === 306  [[ 309 311 ]] #2  Memory: @BotPTR *+bot, idx=Bot; !jvms: TestInfiniteIGVNAfterCCP::testHelper @ bci:65 (line 51) TestInfiniteIGVNAfterCCP::test @ bci:23 (line 27)
 306  MemBarRelease  === 287 1 159 1 1  [[ 307 308 ]]  !jvms: TestInfiniteIGVNAfterCCP::testHelper @ bci:65 (line 51) TestInfiniteIGVNAfterCCP::test @ bci:23 (line 27)
 123  CastPP  === 122 11  [[ 391 ]]  #TestInfiniteIGVNAfterCCP$A:NotNull *  Oop:TestInfiniteIGVNAfterCCP$A:NotNull * !orig=[132] !jvms: TestInfiniteIGVNAfterCCP::testHelper @ bci:6 (line 32) TestInfiniteIGVNAfterCCP::test @ bci:23 (line 27)
 287  Region  === 287 283 282  [[ 287 306 391 296 ]]  !jvms: TestInfiniteIGVNAfterCCP::testHelper @ bci:64 (line 51) TestInfiniteIGVNAfterCCP::test @ bci:23 (line 27)
 311  StoreB  === 307 308 305 28  [[ 312 309 ]]  @java/lang/Class:exact+116 *, name=barrier, idx=7; Volatile!  Memory: @java/lang/Class:exact+116 *, name=barrier, idx=7; !jvms: TestInfiniteIGVNAfterCCP::testHelper @ bci:65 (line 51) TestInfiniteIGVNAfterCCP::test @ bci:23 \
(line 27)
 309  MergeMem  === _ 1 308 1 1 1 1 311 1 1 159 159  [[ 312 ]]  { - - - - N311:java/lang/Class:exact+116 * - - N159:java/lang/Object:NotNull:exact *,iid=165 N159:java/lang/Object:NotNull:exact+8 *,iid=165 [narrowklass] }  Memory: @BotPTR *+bot, idx=Bot; !jvms: TestInfinite\
IGVNAfterCCP::testHelper @ bci:65 (line 51) TestInfiniteIGVNAfterCCP::test @ bci:23 (line 27)
 307  Proj  === 306  [[ 312 311 ]] #0 !jvms: TestInfiniteIGVNAfterCCP::testHelper @ bci:65 (line 51) TestInfiniteIGVNAfterCCP::test @ bci:23 (line 27)
 375  ConL  === 0  [[ 376 ]]  #long:12
 391  CastPP  === 287 123  [[ 376 346 376 ]]  #TestInfiniteIGVNAfterCCP$A * strong dependency  Oop:TestInfiniteIGVNAfterCCP$A * !orig=[295] !jvms: TestInfiniteIGVNAfterCCP::testHelper @ bci:61 (line 47) TestInfiniteIGVNAfterCCP::test @ bci:23 (line 27)
 312  MemBarVolatile  === 307 1 309 1 1 311  [[ 313 314 ]]  !jvms: TestInfiniteIGVNAfterCCP::testHelper @ bci:65 (line 51) TestInfiniteIGVNAfterCCP::test @ bci:23 (line 27)
 376  AddP  === _ 391 391 375  [[ 377 380 ]]   Oop:TestInfiniteIGVNAfterCCP$A+12 * !jvms: TestInfiniteIGVNAfterCCP::testHelper @ bci:86 (line 54) TestInfiniteIGVNAfterCCP::test @ bci:23 (line 27)
 314  Proj  === 312  [[ 386 318 321 377 347 350 380 360 ]] #2  Memory: @BotPTR *+bot, idx=Bot; !jvms: TestInfiniteIGVNAfterCCP::testHelper @ bci:65 (line 51) TestInfiniteIGVNAfterCCP::test @ bci:23 (line 27)
 377  LoadI  === _ 314 376  [[ 378 ]]  @TestInfiniteIGVNAfterCCP$A+12 *, name=field1, idx=9; #int !jvms: TestInfiniteIGVNAfterCCP::testHelper @ bci:86 (line 54) TestInfiniteIGVNAfterCCP::test @ bci:23 (line 27)
    0-->  380  StoreI  === 357 314 376 378  [[ 386 ]]  @TestInfiniteIGVNAfterCCP$A+12 *, name=field1, idx=9;  Memory: @TestInfiniteIGVNAfterCCP$A+12 *, name=field1, idx=9; !jvms: TestInfiniteIGVNAfterCCP::testHelper @ bci:91 (line 54) TestInfiniteIGVNAfterCCP::test @ bci:2\
3 (line 27)
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/phaseX.cpp:1162
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/roland/jdk-jdk/src/hotspot/share/opto/phaseX.cpp:1162), pid=499468, tid=499481
#  assert(false) failed: infinite loop in PhaseIterGVN::optimize
#
# JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-internal-adhoc.roland.jdk-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-internal-adhoc.roland.jdk-jdk, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x17ea077]  PhaseIterGVN::optimize()+0x6b7
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h"" (or dumping to /mnt/old/roland/tmp/core.499468)
#
# An error report file with more information is saved as:
# /mnt/old/roland/tmp/hs_err_pid499468.log
#
# Compiler replay data is saved as:
# /mnt/old/roland/tmp/replay_pid499468.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted (core dumped)

(I first ran into this running some ctw tests and wrote the test case)",,,,,,,,,,JDK-8294449,JDK-8295042,JDK-8294177,JDK-8294119,JDK-8295075,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287217,,,,JDK-8265973,,,,,,,"2022-07-20 05:20;roland;TestInfiniteIGVNAfterCCP.java;https://bugs.openjdk.org/secure/attachment/100049/TestInfiniteIGVNAfterCCP.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xxkr:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-20 05:38;thartmann;Similar to JDK-8265973.;;;","2022-07-20 05:43;thartmann;ILW = Assert due to infinite loop in C2, edge case but reproducible with targeted test, no workaround but disable C2 compilation of affected method = HLM = P3;;;","2022-08-22 03:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9961
Date: 2022-08-22 09:52:47 +0000;;;","2022-08-26 01:01;dukebot;Changeset: 6354a57b
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-08-26 07:57:40 +0000
URL:       https://git.openjdk.org/jdk/commit/6354a57b5cb85d31ea70a998202470467402b669
;;;","2022-09-22 07:39;thartmann;Fix Request (JDK 19u)
Fixes an assert due to an infinite loop in C2. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 11u and 17u. 
;;;","2022-09-22 07:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/38
Date: 2022-09-22 14:37:35 +0000;;;","2022-09-30 06:55;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
A bit bigger C2 fix, typical risk to break C2, we should take it as it is a fix.
I had to do a simple resolve.
Test passes but passes also without the fix.  SAP nightly testing passed.;;;","2022-09-30 07:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/761
Date: 2022-09-30 13:54:23 +0000;;;","2022-10-03 17:02;vrudomet;Fix request [11u] 

Backport this for parity with 17.0.6-oracle, fixes vm crash
Backport not clean, however the resolve is trivial.

How it was tested: 
* was able to reproduce test failure. Test fails on fastdebug build without the fix, passes with the fix. 
* jtreg tier1, tier 2, jck runtime is fine;;;","2022-10-03 21:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1387
Date: 2022-10-04 04:12:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
Incorrect dominance error for unconditional pattern vs. null,JDK-8290709,5079666,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abimpoudis,jlahoda,jlahoda,2022-07-20 03:28,2022-09-08 07:32,2023-10-01 09:56,2022-09-01 09:12,19,20,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,"As reported here:
https://mail.openjdk.org/pipermail/amber-spec-experts/2022-July/003479.html

Consider this code:
---
public class Main {
  public static void main(String[] args) {
    Integer x = null;
    switch (x) {
      case Integer i -> System.out.println(i);
      case null -> System.out.println(""null is supplied!"");
    }
  }
}
---

This should compile, but does not:
---
$ javac --enable-preview -source 20 /tmp/Main.java 
/tmp/Main.java:6: error: this case label is dominated by a preceding case label
case null -> System.out.println(""null is supplied!"");
     ^
Note: /tmp/Main.java uses preview features of Java SE 20.
Note: Recompile with -Xlint:preview for details.
1 error
---
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xxjv:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-08-03 10:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9732
Date: 2022-08-03 16:12:55 +0000;;;","2022-09-01 09:12;dukebot;Changeset: 9444a081
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-09-01 16:09:03 +0000
URL:       https://git.openjdk.org/jdk/commit/9444a081cc9873caa7b5c6a78df0d1aecda6e4f1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"runtime/cds/appcds/dynamicArchive/DynamicLambdaWithUseImplMethodHandle.java fails with ""Can't find sun.hotspot.whitebox""",JDK-8290707,5079662,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2022-07-20 02:52,2022-07-25 14:05,2023-10-01 09:56,2022-07-20 05:39,20,,,,,,20,hotspot,,0,noreg-self,tier2,tier3,tier4,,,,,,,,,,,,,,"See description, using wrong (not any more available) version of whitebox; test introduced in JDK-8290417",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290417,JDK-8271707,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xxiz:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-07-20 03:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9568
Date: 2022-07-20 10:02:35 +0000;;;","2022-07-20 05:39;dukebot;Changeset: 984cd02d
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-07-20 12:34:55 +0000
URL:       https://git.openjdk.org/jdk/commit/984cd02dfb403830c1e8212b94f21f6c9b48348b
;;;","2022-07-20 07:35;dcubed;The fix for this bug is in jdk-20+7-370.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"StringConcat::validate_mem_flow asserts with ""unexpected user: StoreI""",JDK-8290705,5078948,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,webbuggrp,webbuggrp,2022-07-11 07:17,2022-10-04 11:42,2023-10-01 09:56,2022-07-27 03:50,11,17,18,19,20,8,20,hotspot,,0,c2,dcsswa,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,oracle-triage-20,reproducer-yes,webbug,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Microsoft Windows 10 Professional
10.0.19044 Build 19044
AMD Ryzen 5 5600G with Radeon Graphics 3.90 GHz
Memory 32 GB

openjdk version ""1.8.0_322""
OpenJDK Runtime Environment BiSheng (build 1.8.0_322-b06)
OpenJDK 64-Bit Server VM BiSheng (build 25.322-b06, mixed mode)

openjdk version ""11.0.14"" 2022-01-18
OpenJDK Runtime Environment BiSheng (build 11.0.14+9)
OpenJDK 64-Bit Server VM BiSheng (build 11.0.14+9, mixed mode)

A DESCRIPTION OF THE PROBLEM :
When we try to execute the test case using Hotspot, we may get incorrect output. In the test case, we executed the checksum 100,000 times, so we got the correct output of 98900000. But when we execute the test case using Hotspot, the output is 98900989. 
In addition, we also tried to set the -Xint tag at execution, and we could get the correct output.  So we think the issue may be related to JIT optimization

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :

The current issue can be replicated in both JDK8 and JDK11.
hotspot8/bin/java testCase12
hotspot8/bin/java -Xint testCase12
hotspot11/bin/java testCase12 
hotspot11/bin/java -Xint testCase12

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
98900000
98900000
98900000
98900000
ACTUAL -
98900989
98900000
98900989
98900000

FREQUENCY : always


",,,,,,,,,,JDK-8294802,JDK-8294448,JDK-8294117,JDK-8294175,JDK-8294801,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-07-20 07:18;thartmann;Helper.jasm;https://bugs.openjdk.org/secure/attachment/100051/Helper.jasm","2022-07-20 07:18;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/100052/Test.java","2022-07-20 02:30;sswsharm;TestCase12.zip;https://bugs.openjdk.org/secure/attachment/100045/TestCase12.zip","2022-07-20 04:56;thartmann;hs_err_pid643280.log;https://bugs.openjdk.org/secure/attachment/100047/hs_err_pid643280.log",,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xt4b:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-20 02:34;sswsharm;Issue is reproduced.
the attached testcase provides different results with and without -Xint

OS: Windows 10
JDK 8u341:fail
JDK 11.0.14: Fail
JDK 17.0.4: Fail
JDK 18.0.2: Fail
JDK 20ea6: Fail

Pass Output: 98900000
Failed Output: 98900989

Moving it to dev team for further analysis;;;","2022-07-20 04:56;thartmann;With a debug build, we hit the following assert:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8390/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/797c2d6c-cad2-4366-a6f2-60684f87e042/runs/2190c5db-12ca-4203-9eb8-a16739c5beae/workspace/open/src/hotspot/share/opto/stringopts.cpp:886), pid=643280, tid=643293
#  assert(use == copy || use == iff || use == curr || use->is_CheckCastPP() || use->is_Load()) failed: unexpected user: StoreI
#
# JRE version: Java(TM) SE Runtime Environment (20.0+7) (fastdebug build 20-ea+7-335)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+7-335, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x19757d0]  StringConcat::validate_mem_flow()+0xb60

Current CompileTask:
C2:    164   32   !   4       testCase12::stringmakerBUG (55 bytes)

Stack: [0x00007fb6139fa000,0x00007fb613afb000],  sp=0x00007fb613af7660,  free space=1013k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x19757d0]  StringConcat::validate_mem_flow()+0xb60
V  [libjvm.so+0x197d4b6]  PhaseStringOpts::build_candidate(CallStaticJavaNode*)+0x916
V  [libjvm.so+0x197d8c8]  PhaseStringOpts::PhaseStringOpts(PhaseGVN*)+0x218
V  [libjvm.so+0xb08e27]  Compile::inline_string_calls(bool)+0x3b7
V  [libjvm.so+0xb121a5]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x2325
V  [libjvm.so+0x9215c3]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x683
V  [libjvm.so+0xb201b8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xbb8
V  [libjvm.so+0xb21178]  CompileBroker::compiler_thread_loop()+0x6c8
V  [libjvm.so+0x106d7e8]  JavaThread::thread_main_inner()+0x238
V  [libjvm.so+0x1a8c5e0]  Thread::call_run()+0x100
V  [libjvm.so+0x174f474]  thread_native_entry(Thread*)+0x104
;;;","2022-07-20 04:57;thartmann;This is an issue with C2's string concat optimization. Workaround: -XX:-OptimizeStringConcat;;;","2022-07-20 04:58;thartmann;ILW = Incorrect result with C2 compiled code, reproducible with generated test (edge case), -XX:-OptimizeStringConcat = HLM = P3;;;","2022-07-20 07:19;thartmann;I attached a simple test that reproduces this (Test.java + Helper.jasm).;;;","2022-07-21 04:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9589
Date: 2022-07-21 10:55:41 +0000;;;","2022-07-27 03:50;dukebot;Changeset: 61e072d1
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-07-27 10:43:52 +0000
URL:       https://git.openjdk.org/jdk/commit/61e072d11c8e0cb5879bb733ed1fdd2144326bfd
;;;","2022-09-22 06:30;thartmann;Fix Request (JDK 19u)
Fixes an incorrect result with C2 compiled code. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 11u and 17u. ;;;","2022-09-22 06:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/34
Date: 2022-09-22 13:30:51 +0000;;;","2022-09-27 10:22;goetz;Fix request [11u, 17u]

I backport this for parity with 11.0.18-oracle, 17.0.6-oracle.
Typical risk of a C2 fix, but we should take it. Fixing overweights risk.
Clean backport.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2022-09-27 10:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/747
Date: 2022-09-27 17:27:45 +0000;;;","2022-09-27 11:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1376
Date: 2022-09-27 18:24:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,
serviceability/sa/TestClassDump.java could leave files owned by root on macOS,JDK-8290687,5079642,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,azeller,azeller,2022-07-20 00:55,2023-05-04 11:05,2023-10-01 09:56,2022-07-21 14:38,,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,"When running the hotspot jtreg test serviceability/sa/TestClassDump on a macOS that allows for passwordless sudo the test will leave some files in the working directories that are owned by root and cannot be deleted by normal users.

On macOS the test start the class dump with sudo if possible. The dumped class files are owned by root. They are located in $JTwork/scratch/jtreg_classes and $JTwork/scratch/jtreg_classes2.

It would be nice for test automation if the test could cleanup after running or at least change the file permissions.",,,,,,,,,,JDK-8294800,JDK-8293687,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307347,,,,JDK-8307347,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i2xxej:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-07-20 10:31;cjplummer;I confirmed the behavior. Should be easy for the test to delete the directories using sudo.;;;","2022-07-20 13:33;cjplummer;Actually jtreg does normally delete these directories, but cannot when they were created while under sudo. Having the test delete them is not quite so simple. It can't be done from within the test process itself since it is not run with sudo. That means spawning a sudo process to do the delete. I don't think this is worth the effort. Instead I'm just going to have the test throw SkippedException if adding sudo privileges is required.;;;","2022-07-20 15:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9579
Date: 2022-07-20 22:21:52 +0000;;;","2022-07-21 14:38;dukebot;Changeset: 59d85bad
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-07-21 21:34:26 +0000
URL:       https://git.openjdk.org/jdk/commit/59d85bad348f7787533ff38942dab2811c4eb623
;;;","2022-09-27 10:14;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nightly testing passed.;;;","2022-09-27 10:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/746
Date: 2022-09-27 17:17:24 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix wording in sun.security.ec,JDK-8290669,5079624,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jjiang,jjiang,jjiang,2022-07-20 00:27,2022-08-01 10:31,2023-10-01 09:56,2022-07-26 08:09,,,,,,,20,security-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,"File this issue on behalf of longxu@mail.ustc.edu.cn (https://github.com/longxu0509)

1. ECOperations.java#154
// Get 64 extra bits and reduce in to the nonce
.. in to -> .. into

2. XECOperations.java#148
* The extra high-order bits are masked off, the highest valid bit it set, and the
the highest valid bit it set -> the highest valid bit is set

3. EdDSAKeyPairGenerator.java#28
//import java.security.*;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xxaj:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,,,"2022-07-24 05:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9606
Date: 2022-07-22 02:15:44 +0000;;;","2022-07-26 08:08;dukebot;Changeset: 2ae8e311
Author:    longxu0509 <longxu@mail.ustc.edu.cn>
Committer: John Jiang <jjiang@openjdk.org>
Date:      2022-07-26 15:04:49 +0000
URL:       https://git.openjdk.org/jdk/commit/2ae8e3118385bdf93c50bca550334734b69bc2b6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
keytool manpage contains a special character,JDK-8290626,5079581,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hchao,dholmes,dholmes,2022-07-19 22:32,2023-05-16 16:06,2023-10-01 09:56,2023-05-10 08:53,,,,,,,21,security-libs,,0,docs-only,noreg-doc,,,,,,,,,,,,,,,,"The phrase ""signer's private key"" seems to have been entered using an editor that put in a smart-quote character instead of a simple apostrophe. This appears as a unicode symbol when viewing the source and as ?? in the nroff output.

Other occurrences of ""signer's"" are also affected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264956,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xx0z:",9223372036854775807,b22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test jdk/javadoc/tool/CheckManPageOptions.java after manpage update,JDK-8290625,5079580,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dholmes,dholmes,dholmes,2022-07-19 22:17,2022-07-27 17:17,2023-10-01 09:56,2022-07-20 06:10,19,,,,,,19,tools,,0,noreg-self,,,,,,,,,,,,,,,,,JDK-8278274 just brought the nroff manpage into sync with its markdown source. But this test examines the nroff manpage and needs to be updated.,,,,,,,,,,JDK-8291448,JDK-8290744,JDK-8291327,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278274,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,"0|i2xx0r:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-07-19 22:19;dholmes;Trivial fix: the --date option is no longer missing;;;","2022-07-19 22:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/149
Date: 2022-07-20 05:24:12 +0000;;;","2022-07-20 06:10;dukebot;Changeset: 17e65bbd
Author:    David Holmes <dholmes@openjdk.org>
Date:      2022-07-20 13:09:31 +0000
URL:       https://git.openjdk.org/jdk19/commit/17e65bbd23789d42255ba79e01cc6a5dc7e591c9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ThreadMXBean.getThread{Cpu,User}Time fails with -XX:-VMContinuations",JDK-8290562,5079512,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,alanb,kganapureddy,kganapureddy,2022-07-19 10:06,2022-08-10 18:56,2023-10-01 09:56,2022-08-05 00:43,19,,,,,,19,core-svc,,0,conformance,jdk19-fix-request,jdk19-fix-yes,loom,tck-red-19,,,,,,,,,,,,,"The conformance tests validating the GetThreadCpuTime and GetThreadUserTime fails when run with 
Specific VM options: ""-XX:+UnlockExperimentalVMOptions -XX:-VMContinuations""

As per the spec - ""If the thread of the specified ID is a virtual thread thease methods supposed to return -1.""
The tests works fine in general, but fails when run with ""-XX:+UnlockExperimentalVMOptions -XX:-VMContinuations""

Attached the code snipped to demonstrate the issue.

Validation logs:
===
Regular Run:

/scratch/jdk-cache/19/31/jdk-19/bin/javac -source 19 --enable-preview TestThreadUserAndCpuTime.java
Note: TestThreadUserAndCpuTime.java uses preview features of Java SE 19.
Note: Recompile with -Xlint:preview for details.
/scratch/jdk-cache/19/31/jdk-19/bin/java --enable-preview  TestThreadUserAndCpuTime
 OK - Expected
 OK - Expected

With operating mode (-XX:+UnlockExperimentalVMOptions -XX:-VMContinuations)
=======
/scratch/jdk-cache/19/31/jdk-19/bin/java --enable-preview -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations TestThreadUserAndCpuTime
 Not OK for getThreadUserTime() -  expected -1 but returned 0
 Not OK for getThreadCpuTime() :  expected -1 but returned 344055
====
",,,,,,,,,,JDK-8292152,JDK-8291994,JDK-8292131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7317945,,,,,,,"2022-07-19 10:07;kganapureddy;TestThreadUserAndCpuTime.java;https://bugs.openjdk.org/secure/attachment/100039/TestThreadUserAndCpuTime.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xwln:",9223372036854775807,b35,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2022-07-26 00:39;alanb;Yes, there is a bug here. The jmm_GetThreadCpuTimeWithKind functions need to check the thread type. Missed because the unit test exercises the methods with the current (virtual) thread and this is special cased by the implementation.;;;","2022-08-01 05:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/157
Date: 2022-08-01 09:16:41 +0000;;;","2022-08-03 02:33;alanb;Fix Request

This is a conformance issue with the operating mode ""-XX:+UnlockExperimentalVMOptions -XX:-VMContinuations"". It's also an issue with builds that don't have a port of the VM continuations implementation.

The implementation change is low risk and limited to the code for the ThreadMXBean.getThread{Cpu,User}Time methods. We added tests for these methods as part of the JEP 425 implementation but didn't have enough tests to cover all code paths (the ThreadMXBean implementation has different code paths for the ""current thread"" vs. ""other thread"" cases). The test is expanded as part of this change so we have improved confidence that we haven't missed anything else.;;;","2022-08-04 13:30;sspitsyn;Fix request approved

The implementation change is low risk. Approved.;;;","2022-08-05 00:43;dukebot;Changeset: 5963300c
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-08-05 07:39:43 +0000
URL:       https://git.openjdk.org/jdk19/commit/5963300c0c9dfd34c6338fa8195ae18d7b41840c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"tools/jpackage/share/AddLauncherTest.java#id1 failed with ""ERROR: Failed: Check icon file""",JDK-8290557,5079507,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,dcubed,dcubed,2022-07-19 09:43,2022-08-04 11:38,2023-10-01 09:56,2022-07-25 14:56,20,,,,,,20,tools,,0,sn_123,tier2,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

tools/jpackage/share/AddLauncherTest.java#id1

Here's a snippet from the log file:

[16:21:52.537] TRACE: assertEquals(0): Check command [powershell -NoLogo -NoProfile -Command ""[System.Reflection.Assembly]::LoadWithPartialName('System.Drawing');[System.Drawing.Icon]::ExtractAssociatedIcon('C:\\sb\\prod\\1658245847\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\scratch\\5\\bug8230933\\icons.0\\no-icon.exe\\container.exe').ToBitmap().Save('C:\\sb\\prod\\1658245847\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\scratch\\5\\bug8230933\\icons.0\\no-icon.exe\\expected.bmp', [System.Drawing.Imaging.ImageFormat]::Bmp)""](5) exited with 0 code
[16:21:52.537] TRACE: exec: Execute [powershell -NoLogo -NoProfile -Command ""[System.Reflection.Assembly]::LoadWithPartialName('System.Drawing');[System.Drawing.Icon]::ExtractAssociatedIcon('C:\\sb\\prod\\1658245847\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\scratch\\5\\bug8230933\\out-32620\\bug8230933AddLauncherTest\\no-icon.exe').ToBitmap().Save('C:\\sb\\prod\\1658245847\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\scratch\\5\\bug8230933\\icons.0\\no-icon.exe\\actual.bmp', [System.Drawing.Imaging.ImageFormat]::Bmp)""](5); discard I/O...
[16:21:52.834] TRACE: exec: Done. Exit code: 0
[16:21:52.834] TRACE: assertEquals(0): Check command [powershell -NoLogo -NoProfile -Command ""[System.Reflection.Assembly]::LoadWithPartialName('System.Drawing');[System.Drawing.Icon]::ExtractAssociatedIcon('C:\\sb\\prod\\1658245847\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\scratch\\5\\bug8230933\\out-32620\\bug8230933AddLauncherTest\\no-icon.exe').ToBitmap().Save('C:\\sb\\prod\\1658245847\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\scratch\\5\\bug8230933\\icons.0\\no-icon.exe\\actual.bmp', [System.Drawing.Imaging.ImageFormat]::Bmp)""](5) exited with 0 code
[16:21:52.850] ERROR: Failed: Check icon file [.\\bug8230933\\icons.0\\no-icon.exe\\actual.bmp] of no-icon launcher is a copy of source icon file [.\\bug8230933\\icons.0\\no-icon.exe\\expected.bmp]
[16:21:52.850] [  FAILED  ] AddLauncherTest.bug8230933; checks=43

Starting this bug as a P3 since this is a Tier2 failure.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289634,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2xwkj:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-07-22 13:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9618
Date: 2022-07-22 20:21:57 +0000;;;","2022-07-25 14:56;dukebot;Changeset: 7c3cfd13
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2022-07-25 21:51:26 +0000
URL:       https://git.openjdk.org/jdk/commit/7c3cfd13e3d67c185d15abb1c935853c856e8a42
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Adjust PKCS11Exception and handle more PKCS11 error codes,JDK-8290532,5079483,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-07-19 05:57,2022-09-28 06:22,2023-10-01 09:56,2022-07-28 00:36,20,,,,,,20,security-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"The issue https://bugs.openjdk.org/browse/JDK-8282538  gave an example of the following PKCS11 exception (see attached jtr files) :

.... Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: 0xCE534351

Unfortunately the error code 0xCE534351 is currently not in the RV/errorMap table of PKCS11Exception, That's why we get this
hex code and no more descriptive output, this could be improved.

For the error code name + hexcode see also https://bugzilla.mozilla.org/show_bug.cgi?id=495097 .",,,,,,,,,,JDK-8294524,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xwf7:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2022-07-19 06:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9555
Date: 2022-07-19 13:14:17 +0000;;;","2022-07-28 00:36;dukebot;Changeset: 07f0612c
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-07-28 07:30:51 +0000
URL:       https://git.openjdk.org/jdk/commit/07f0612c9aa5641491516d9a0232392689d4c1ca
;;;","2022-09-20 07:53;mbaesken;jdk17u backport request
I would like to have the patch in jdk17u-dev as well, because it would be beneficial there too. The patch applies cleanly and is low risk.;;;","2022-09-20 07:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/700
Date: 2022-09-20 14:51:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(BoolTest(btest).is_canonical()) failure,JDK-8290529,5079475,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,roland,roland,2022-07-19 04:54,2023-01-23 12:53,2023-10-01 09:56,2022-09-02 06:38,11,17,20,,,,20,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,oracle-triage-20,regression,,,,,,,,"I found this running some ctw tests:

#  Internal Error (/home/roland/jdk-jdk/src/hotspot/share/opto/parse2.cpp:1493), pid=3306856, tid=3306871
#  assert(BoolTest(btest).is_canonical()) failed: sanity

It can be reproduced with the following test case:
public class TestUnsignedCompareIntoEqualityNotCanonical {
    public static void main(String[] args) {
        for (int i = 0; i < 20_000; i++) {
            test(0);
            test(1);
        }
    }

    private static int test(int x) {
        if (Integer.compareUnsigned(0, x) >= 0) {
            return 42;
        }
        return -42;
    }
}",,,,,,,,,,JDK-8294826,JDK-8294265,JDK-8294126,JDK-8294559,JDK-8295389,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283726,,,,JDK-8276162,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xwdf:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-07-19 05:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9553
Date: 2022-07-19 12:28:10 +0000;;;","2022-07-19 06:19;thartmann;ILW = Assert during C2 compilation, easy to reproduce, disable compareUnsigned intrinsic = HML = P2;;;","2022-09-02 06:38;dukebot;Changeset: 77e21c57
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-09-02 13:35:11 +0000
URL:       https://git.openjdk.org/jdk/commit/77e21c57ce00463db4cc3d87f93729cbfe2c96b4
;;;","2022-09-22 07:25;thartmann;Fix Request (JDK 19u)
Fixes an assert during C2 compilation. The fix is low risk and applies cleanly (except for a change to surrounding code in IRNode.java). Already tested and (about to be) backported to Oracle JDK 11u and 17u. ;;;","2022-09-22 07:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/37
Date: 2022-09-22 14:23:24 +0000;;;","2022-10-03 09:26;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
Typical C2 risk, medium as only a small change.
I had to resolve a test.
Tests pass but also without the fix.;;;","2022-10-03 09:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/766
Date: 2022-10-03 16:24:39 +0000;;;","2022-10-13 07:26;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
Typical C2 risk, medium as only a small change. 
I skipped a test because it requires support not available in 11 test repo.
Backported test passes. SAP nighlty testing passed.;;;","2022-10-13 08:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1457
Date: 2022-10-13 14:25:13 +0000;;;","2023-01-23 12:53;epavlova;Regression test compiler/c2/TestUnsignedCompareIntoEqualityNotCanonical.java as well as ctw tests passed in JDK20 ATR;;;",,,,,,,,,,,,,,,,,,,,,,,
Bump macOS GitHub actions to macOS 11,JDK-8290527,5079473,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2022-07-19 04:34,2022-11-29 06:02,2023-10-01 09:56,2022-07-27 08:26,jfx17,jfx19,,,,,jfx20,javafx,,0,noreg-build,sn_123,,,,,,,,,,,,,,,,"Cloned from JDK-8290000. We need to do the same for jfx builds.

macOS 10.15 has been deprecated for some time and will be removed completely on August 30th. See https://github.com/actions/virtual-environments#available-environments and actions/virtual-environments#5583 for context.
",,,,,,,,,,JDK-8296165,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290000,,,,,,,,,,,,,JDK-8292549,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i2xwcz:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-07-22 05:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/844
Date: 2022-07-22 12:23:47 +0000;;;","2022-07-27 08:26;dukebot;Changeset: 49a2efbb
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-07-27 15:23:40 +0000
URL:       https://git.openjdk.org/jfx/commit/49a2efbbfba017101e5f57b590bf820307863bc3
;;;","2022-10-31 13:10;kcr;Regrading the importance of the 17u backport, GItHub has confirmed that macOS 10.15 will no longer be supported starting 2022-12-01 (which is a slight delay from earlier indications, so we are somewhat lucky that support isn't already gone). See the timeline in the following README:

https://github.com/actions/runner-images/blob/main/images/macos/macos-10.15-Readme.md

One thing to note is that jobs using 10.15 will temporarily fail during a few scheduled ""brownout"" periods, which occur on the next several Fridays until the service is finally stopped.;;;","2022-11-01 06:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/87
Date: 2022-11-01 12:56:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in javadoc of MemorySegment/MemoryAddress,JDK-8290524,5079470,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-07-19 04:05,2022-07-27 15:59,2023-10-01 09:56,2022-07-19 07:35,19,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"Several {@code} tags in MemorySegment/MemoryAddress contain a typo. Example:

{@code toRowLongValue() + offset}",,,,,,,,,,JDK-8291324,JDK-8290686,JDK-8291442,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xwcb:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-07-19 04:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/148
Date: 2022-07-19 11:07:27 +0000;;;","2022-07-19 07:35;dukebot;Changeset: e062dff1
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-07-19 14:33:53 +0000
URL:       https://git.openjdk.org/jdk19/commit/e062dff1bfd1abd5f14e8915dc5417cc22d622ac
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/vectorapi/TestMaskedMacroLogicVector.java fails IR verification,JDK-8290511,5079454,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,thartmann,thartmann,2022-07-19 01:29,2022-07-25 14:00,2023-10-01 09:56,2022-07-19 15:51,20,,,,,,20,hotspot,,0,noreg-self,oracle-triage-20,tencent-interest,tier2,,,,,,,,,,,,,,"Failed IR Rules (3) of Methods (3)
----------------------------------
1) Method ""public void compiler.vectorapi.TestMaskedMacroLogicVector.testInt4_Int128(int[],int[],int[],int[],boolean[])"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={""UseAVX"", ""3""}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""AndV"", "" > 0 "", ""XorV"", "" > 0 ""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: AndV
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!

2) Method ""public void compiler.vectorapi.TestMaskedMacroLogicVector.testInt4_Int256(int[],int[],int[],int[],boolean[])"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={""UseAVX"", ""3""}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""AndV"", "" > 0 "", ""XorV"", "" > 0 ""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: AndV
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!

3) Method ""public void compiler.vectorapi.TestMaskedMacroLogicVector.testInt4_Int512(int[],int[],int[],int[],boolean[])"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={""UseAVX"", ""3""}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""AndV"", "" > 0 "", ""XorV"", "" > 0 ""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: AndV
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!

VM options: -XX:UseAVX=0 -XX:UseSSE=2

Happened on an Intel_R__Xeon_R__Platinum_8358_CPU___2.60GHz with the following cpu_features:
fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant tsc arch perfmon rep good nopl xtopology cpuid tsc known freq pni pclmulqdq vmx ssse3 fma cx16 pdcm pcid sse4 1 sse4 2 x2apic movbe popcnt tsc deadline timer aes xsave avx f16c rdrand hypervisor lahf lm abm 3dnowprefetch cpuid fault invpcid single ssbd ibrs ibpb stibp ibrs enhanced tpr shadow vnmi flexpriority ept vpid ept ad fsgsbase tsc adjust bmi1 avx2 smep bmi2 erms invpcid avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves nt good wbnoinvd arat avx512vbmi umip pku ospke avx512 vbmi2 gfni vaes vpclmulqdq avx512 vnni avx512 bitalg avx512 vpopcntdq la57 rdpid md clear arch capabilities",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289801,,,,,,,"2022-07-19 01:41;thartmann;log.txt;https://bugs.openjdk.org/secure/attachment/100036/log.txt",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xw8r:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-19 01:31;thartmann;Most likely a regression from JDK-8289801.;;;","2022-07-19 01:33;thartmann;ILW = Test fails IR verification (probably test bug), intermittent with single test at tier2 with -XX:UseAVX=0 -XX:UseSSE=2, no workaround = MMH = P3;;;","2022-07-19 01:41;thartmann;[~jiefu], could you please have a look? Thanks.;;;","2022-07-19 02:08;thartmann;I can reproduce this on an AVX=3 capable system, setting -XX:UseSSE=2 is sufficient.;;;","2022-07-19 03:41;jiefu;OK, I'll take it.;;;","2022-07-19 08:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9559
Date: 2022-07-19 15:04:38 +0000;;;","2022-07-19 15:51;dukebot;Changeset: 43588648
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-07-19 22:50:00 +0000
URL:       https://git.openjdk.org/jdk/commit/43588648cacaa79a586ace8540dfe43eb64f9a46
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Close streams returned by ModuleReader::list,JDK-8290504,5079447,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rjernst,chegar,chegar,2022-07-19 00:46,2023-09-20 19:36,2023-10-01 09:56,2022-07-21 11:02,17,20,,,,,20,core-libs,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,"This issue has been filed to follow the advise, added by JDK-8290353,
to close streams returned by ModuleReader::list.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290353,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xw77:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@34132c1c,,,,,,,,,"2022-07-19 07:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9557
Date: 2022-07-19 14:07:17 +0000;;;","2022-07-21 11:02;dukebot;Changeset: 80bd8c35
Author:    Ryan Ernst <ryan@iernst.net>
Committer: Chris Hegarty <chegar@openjdk.org>
Date:      2022-07-21 18:01:25 +0000
URL:       https://git.openjdk.org/jdk/commit/80bd8c35494c85491963d590e7b78ea499fb691d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"new File(parent, ""/"") breaks normalization – creates File with slash at the end",JDK-8290499,5079424,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bpb,webbuggrp,webbuggrp,2022-07-18 16:55,2023-07-21 07:35,2023-10-01 09:56,2023-05-30 09:18,11,15,17,18,19,8,21,core-libs,,0,amazon-interest,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :

new File(parent, ""/"") breaks normalization – creates File with slash at the end
and subsequently it may lead to File with doubled slash in path

new File(parent, ""/"") will produce the File with slash as an trailing char of the path
If in turn we will try to create yet another child from that File e.g. new File(new File(parent, ""/""), ""some-file"") - it will contain double slash in path. Please see unit-test at Source code section.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
See Source code section.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
File path should never contain double slashes, because it always stores normalized path.
ACTUAL -
Double slash in path.

---------- BEGIN SOURCE ----------
public class FileTest {

    @Test
    public void doubleSlash() {
        File parent = new File(""//some-dir//"");
        Assert.assertEquals(""/some-dir"", parent.getAbsolutePath()); // passed
        Assert.assertEquals(""/some-dir/some-file"", new File(parent, ""//some-file//"").getAbsolutePath()); // passed
        Assert.assertEquals(""/some-dir/some-file"", new File(parent, ""some-file"").getAbsolutePath()); // passed

        // This assert fails, actual value contains doubled slash: /some-dir//some-file""
        Assert.assertEquals(""/some-dir/some-file"", new File(new File(parent, ""/""), ""some-file"").getAbsolutePath());
    }

}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-07-18 22:55;tongwan;FileTest.java;https://bugs.openjdk.org/secure/attachment/100022/FileTest.java",,,,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i2xw23:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,Verified,,"2022-07-18 22:59;tongwan;The observations on Ubnutu:
JDK 8: Failed, the last test failed.
JDK 11: Failed.
JDK 15: Failed.
JDK 17: Failed.
JDK 18: Failed.
JDK 19ea+11: Failed.
;;;","2022-07-20 01:05;michaelm;Not clear if this is a bug. This constructor doesn't define how an absolute child pathname is converted to a relative path (it is system dependent);;;","2023-05-18 15:39;bpb;While having a trailing ""/"" is not contrary to the specification, it is inconsistent with java.nio.file.Path:

jshell> var f = new File(""/foo"", ""/"")
f ==> /foo/

jshell> var p = f.toPath()
p ==> /foo

jshell> java.nio.file.Path.of(""/foo"", ""/"")
$3 ==> /foo;;;","2023-05-23 15:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14109
Date: 2023-05-23 22:49:57 +0000;;;","2023-05-30 09:18;dukebot;Changeset: 21af8bae
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-05-30 16:16:45 +0000
URL:       https://git.openjdk.org/jdk/commit/21af8bae38dd845d5cbeb2b2770e537b5b9bad22
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
some tests in com/sun/jdi fail on localized Windows platform,JDK-8290497,5079442,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tkiriyama,tkiriyama,tkiriyama,2022-07-18 23:19,2023-08-07 14:47,2023-10-01 09:56,2022-08-01 01:16,20,,,,,,20,core-svc,,0,,,,,,,,,,,,,,,,,,"The environment in which I ran tests is as follows:  
JDK: 20-ea
OS: Windows 10
Locale: ja

The following test failed on localized Windows platform:

com/sun/jdi/CatchCaughtTest.java
com/sun/jdi/CatchPatternTest.java
com/sun/jdi/JdbExprTest.java
com/sun/jdi/JdbMethodExitTest.java
com/sun/jdi/JdbStepTest.java
com/sun/jdi/JdbReadTwiceTest.sh
com/sun/jdi/JdbStepTest.java
com/sun/jdi/JdbStopInNotificationThreadTest.java
com/sun/jdi/JdbStopThreadidTest.java
com/sun/jdi/JdbStopThreadTest.java
com/sun/jdi/JdbVarargsTest.java
com/sun/jdi/RedefineTTYLineNumber.java

Here's a snippet from the log file of CatchCaughtTest.java:

java.lang.RuntimeException: 'Usage: catch' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at CatchCaughtTest.runCases(CatchCaughtTest.java:73)
	at lib.jdb.JdbTest.run(JdbTest.java:96)
	at CatchCaughtTest.main(CatchCaughtTest.java:52)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1596)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313854,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2xw63:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-07-18 23:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9549
Date: 2022-07-19 06:30:09 +0000;;;","2022-08-01 01:15;dukebot;Changeset: d61c0c79
Author:    KIRIYAMA Takuya <kiriyama.takuya@fujitsu.com>
Committer: Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-08-01 08:12:25 +0000
URL:       https://git.openjdk.org/jdk/commit/d61c0c79cf9d7bc038efab0fdfe1a306f2b0e0b7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: Fix build warnings-as-errors with GCC 11,JDK-8290496,5079438,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fyang,fyang,fyang,2022-07-18 23:02,2023-07-09 19:13,2023-10-01 09:56,2022-07-20 01:31,19,20,,,,,20,hotspot,,0,jdk19u-fix-request,jdk19u-fix-yes,oraclejdk-na,oracle-triage-20,,,,,,,,,,,,,,"GCC version:
------------------------------------------------------------------------------------------
$ gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/riscv64-linux-gnu/11/lto-wrapper
Target: riscv64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 11.2.0-7ubuntu2' --with-bugurl=file:///usr/share/doc/gcc-11/README.Bugs --enable-languages=c,ada,c++,go,d,fortran,objc,obj-c++,m2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-11 --program-prefix=riscv64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-libitm --disable-libquadmath --disable-libquadmath-support --enable-plugin --enable-default-pie --with-system-zlib --enable-libphobos-checking=release --with-target-system-zlib=auto --enable-objc-gc=auto --enable-multiarch --disable-werror --disable-multilib --with-arch=rv64imafdc --with-abi=lp64d --enable-checking=release --build=riscv64-linux-gnu --host=riscv64-linux-gnu --target=riscv64-linux-gnu --with-build-config=bootstrap-lto-lean --enable-link-serialization=4
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 11.2.0 (Ubuntu 11.2.0-7ubuntu2)
------------------------------------------------------------------------------------------

OpenJDK build warnings-as-errors message:
------------------------------------------------------------------------------------------
Building target 'default (exploded-image)' in configuration 'linux-riscv64-server-release'
Updating support/modules_libs/java.base/server/libjvm.so due to 6 file(s)
In file included from /home/fyang/openjdk-jdk/src/hotspot/share/c1/c1_LIRAssembler.hpp:28,
                 from /home/fyang/openjdk-jdk/src/hotspot/share/c1/c1_LIRAssembler.cpp:30:
In member function 'void PatchingStub::install(MacroAssembler*, LIR_PatchCode, Register, CodeEmitInfo*)',
    inlined from 'void PatchingStub::install(MacroAssembler*, LIR_PatchCode, Register, CodeEmitInfo*)' at /home/fyang/openjdk-jdk/src/hotspot/share/c1/c1_CodeStubs.hpp:423:8,
    inlined from 'void LIR_Assembler::patching_epilog(PatchingStub*, LIR_PatchCode, Register, CodeEmitInfo*)' at /home/fyang/openjdk-jdk/src/hotspot/share/c1/c1_LIRAssembler.cpp:46:17:
/home/fyang/openjdk-jdk/src/hotspot/share/c1/c1_CodeStubs.hpp:440:25: error: 'this' pointer is null [-Werror=nonnull]
  440 |       n_move->set_offset(field_offset);
      |       ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
In file included from /home/fyang/openjdk-jdk/src/hotspot/share/code/nativeInst.hpp:30,
                 from /home/fyang/openjdk-jdk/src/hotspot/share/c1/c1_CodeStubs.hpp:33,
                 from /home/fyang/openjdk-jdk/src/hotspot/share/c1/c1_LIRAssembler.hpp:28,
                 from /home/fyang/openjdk-jdk/src/hotspot/share/c1/c1_LIRAssembler.cpp:30:
/home/fyang/openjdk-jdk/src/hotspot/cpu/riscv/nativeInst_riscv.hpp: In member function 'void LIR_Assembler::patching_epilog(PatchingStub*, LIR_PatchCode, Register, CodeEmitInfo*)':
/home/fyang/openjdk-jdk/src/hotspot/cpu/riscv/nativeInst_riscv.hpp:420:8: note: in a call to non-static member function 'void NativeMovRegMem::set_offset(int)'
  420 |   void set_offset(int x);
      |        ^~~~~~~~~~
cc1plus: all warnings being treated as errors
gmake[3]: *** [lib/CompileJvm.gmk:149: /home/fyang/openjdk-jdk/build/linux-riscv64-server-release/hotspot/variant-server/libjvm/objs/c1_LIRAssembler.o] Error 1
gmake[3]: *** Waiting for unfinished jobs....
gmake[2]: *** [make/Main.gmk:252: hotspot-server-libs] Error 2
----------------------------------------------------------------------------------------

Workaround:
    Use configure flag --disable-warnings-as-errors",,,,,,,,,,JDK-8311710,JDK-8294457,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288733,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,19,,linux,,,,,"0|i2xw57:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-18 23:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9550
Date: 2022-07-19 06:35:28 +0000;;;","2022-07-19 00:45;thartmann;ILW = Build warning, on riscv, use configure flag --disable-warnings-as-errors = MML = P4;;;","2022-07-20 01:31;dukebot;Changeset: 5425573b
Author:    Fei Yang <fyang@openjdk.org>
Date:      2022-07-20 08:26:35 +0000
URL:       https://git.openjdk.org/jdk/commit/5425573bb4de1a2434201bc7ec3700b527ce346b
;;;","2022-09-26 00:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/40
Date: 2022-09-26 06:57:37 +0000;;;","2022-09-26 04:36;fjiang;Request to backport to JDK19u

Fix build warnings-as-errors with GCC 11. The fix passes the build without --disable-warnings-as-errors and should be safe.;;;","2023-02-27 22:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/2
Date: 2023-02-28 06:35:49 +0000;;;","2023-06-19 20:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Initial nroff manpage generation for JDK 20,JDK-8290489,5079433,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,dholmes,dholmes,2022-07-18 19:28,2022-07-27 19:59,2023-10-01 09:56,2022-07-21 21:43,20,,,,,,20,infrastructure,,0,build-infra,doc,manage,noreg-doc,,,,,,,,,,,,,,"The manpages initially have JDK 19 version information, so we should regenerate them all. The version will be 20-ea and the copyright year 2023.

NOTE: this should be done after the final manpage update for JDK 19 -  JDK-8278274",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290918,,JDK-8278275,,,,,,,,,,,,,JDK-8290742,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xw43:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-07-20 17:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9581
Date: 2022-07-21 00:34:53 +0000;;;","2022-07-21 21:43;dukebot;Changeset: e9f97b2e
Author:    David Holmes <dholmes@openjdk.org>
Date:      2022-07-22 04:40:15 +0000
URL:       https://git.openjdk.org/jdk/commit/e9f97b2e8cf301ba6b69101e5efc5c71d26bc87b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IBM864 character encoding implementation bug,JDK-8290488,5079107,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2022-07-13 00:07,2022-08-08 11:11,2023-10-01 09:56,2022-08-03 09:10,11,17,18,19,8,,20,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
No limit，Works with all hardware System and OS

A DESCRIPTION OF THE PROBLEM :
1、The file where the bug is located
class file: sun.nio.cs.ext.IBM864.class
jar package file: charsets.jar

2、The main phenomenon of the bug
Test string: ""<%adc""
(1) Using utf-8 character set encoding, its hexadecimal value sequence is: 
3c 25 61 64 63
(2) Using IBM864 character set encoding, its hexadecimal value sequence is: 
3c 3f 61 64 63
When using IBM864 character set encoding, the second character '%' in the string is encoded as 3f, which is '?' in the encoding set, instead of the expected value of 25, which is '%', there is an encoding wrong problem.

3、The root cause for the bug
After analysis, it is found that the encoding problem of the character set for the character '%' is caused by the fact that in the IBM864.java file, the fields b2cTable and b2c in the IBM864 class define the character (%) as the character ( ٪), rather than a character (%), causing the encoding to be inconsistent with the specification and expectations. Character set definition specification of IBM864, please refer to: https://www.compart.com/en/unicode/charsets/IBM864

REGRESSION : Last worked in version 19

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Running the test program given below: TestIBM864 can reproduce the problem stably.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
str = <%adc, encoding = UTF-8 
3c 25 61 64 63 
str = <%adc, encoding = IBM864 
3c 25 61 64 63 
ACTUAL -
str = <%adc, encoding = UTF-8 
3c 25 61 64 63 
str = <%adc, encoding = IBM864 
3c 3f 61 64 63 

---------- BEGIN SOURCE ----------
public class TestIBM864 {

    public static void printBytesArray(byte[] bytesArr) throws Exception{
        for(byte b: bytesArr){
            System.out.printf(""%x "", b);
        }
        System.out.println();
    }
    public static void testEncode(String encoding) throws Exception {
        String str = ""<%adc"";
        System.out.printf(""str = %s, encoding = %s \n"", str, encoding);
        printBytesArray(str.getBytes(encoding));
    }

    public static void main(String[] args) throws Exception {
        testEncode(""UTF-8"");
        testEncode(""IBM864"");
    }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-07-18 18:43;tongwan;TestIBM864.java;https://bugs.openjdk.org/secure/attachment/100020/TestIBM864.java",,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xu3n:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3962510e,,,,,,,,,"2022-07-18 18:46;tongwan;The observations on Windows 10:
JDK 8: Failed, the output of IBM864 is different from UTF-8
JDK 11: Failed.
JDK 17: Failed.
JDK 18: Failed.
JDK 19ea+25: Failed.;;;","2022-07-19 11:04;naoto;Charset `IBM864` is defined as follows in `charsets` file:
```
charset IBM864 IBM864
    package sun.nio.cs.ext
    type    sbcs
    hisname Cp864
    ascii   false
    alias   cp864                # JDK historical
    alias   ibm864
    alias   ibm-864
    alias   864
    alias   csIBM864
```
Means that JDK historical mapping is `cp864`. According to Unicode site, the cp864 mapping does convert 0x25 to U+066A: (https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/PC/CP864.TXT). However as the submitter pointed out, IBM's 864 code page seems to not use that Arabic percent sign (this is from ICU's converter): (https://github.com/unicode-org/icu/blob/main/icu4c/source/data/mappings/ibm-864_X110-1999.ucm). So making it as an alias of cp864 seems to be the root cause. 
;;;","2022-07-27 11:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9661
Date: 2022-07-27 17:47:36 +0000;;;","2022-08-03 09:09;dukebot;Changeset: e52a340d
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-08-03 15:59:43 +0000
URL:       https://git.openjdk.org/jdk/commit/e52a340d7fca161539524eedc0c2d48283f4f0a7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Update JNI Specification of DestroyJavaVM for better alignment with JLS, JVMS, and Java SE API Specifications",JDK-8290482,5079427,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,smarks,smarks,2022-07-18 17:56,2023-03-08 12:59,2023-10-01 09:56,2022-09-27 16:50,20,,,,,,20,hotspot,,0,jni,noreg-doc,,,,,,,,,,,,,,,,"There are some updates pending to the JVMS, JLS, and the specification of java.lang.Runtime in the Java SE API that clarify the JDK shutdown sequence, JVM halt, and program exit. The JNI Specification will need some updates to align with these changes.

Specific points include:

* The Overview in Chapter 5 includes a small section ""Terminating the VM"" which refers to ""JNI_DestroyJavaVM"" (name isn't quite right) which mentions ""user threads"" and the possibility of ""holding system resources"" and how the VM cannot automatically free them. It seems like this discussion isn't very helpful. Probably all that's necessary here is a forward reference to the DestroyJavaVM function later in this chapter.

* The specification of the DestroyJavaVM function mentions that it ""terminates"" the VM and makes a ""best-effort attempt to release resources"". It should mention something about initiating the _shutdown sequence_ (to be defined in the java.lang.Runtime class specification). Adding a link here is probably sufficient here.

* I don't think this function actually halts the VM itself; I believe it waits for something on the JDK side to halt the VM. (The JDK calls Runtime.halt at the end of the shutdown sequence, or any thread can call Runtime.halt directly.) But what this function actually does should be specified.

* The discussion about DestroyJavaVM waiting for the current thread to be the only non-daemon thread should be clarified to cover the case where the current thread is a daemon thread.

* There probably should be some statement about the state of the VM after this call returns. Presumably on success it means that the JVM has halted (no Java code is being executed) or similar.

* The main table of contents has an entry in Chapter 5, Overview, ""Unloading the VM"" which points to nowhere (but probably is intended to point to the ""Terminating the VM"" section.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292897,,,,,,,,,,,,JDK-8291955,,,,JDK-8290036,JDK-8291585,JDK-8303841,JDK-8290196,JDK-8290388,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xw2r:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-07-18 17:59;smarks;[~abuckley] [~dholmes] please take note.;;;","2022-07-18 21:29;dholmes;> * I don't think this function actually halts the VM itself; I believe it waits for something on the JDK side to halt the VM. (The JDK calls Runtime.halt at the end of the shutdown sequence, or any thread can call Runtime.halt directly.) But what this function actually does should be specified. 

halt() is only called after the shutdown sequence via Runtime.exit(). halt() does not happen with DestroyJavaVM, nor should it. But by definition the VM has terminated by that stage as per latest JLS 12.8 text. We basically have:

Runtime.exit -> shutdown sequence (ie run hooks and wait for them, tell VM to ""exit"") -> halt()

DestroyJavaVM -> wait (if necessary) until no non-daemon thread running -> shutdown sequence (ie run hooks and wait for them, tell VM to ""exit"")

> The main table of contents has an entry in Chapter 5, Overview, ""Unloading the VM"" which points to nowhere (but probably is intended to point to the ""Terminating the VM"" section. 

Yes oversight on my part when I re-did the wording to not talk about ""unloading the VM"" - which we never did and would be technically extremely challenging. The mention of thread resources etc goes back to this old text. The new text about best-effort allows a complaint implementation to fully unload the JVM but doesn't place any actual requirements on an implementation in that regard.;;;","2022-07-19 09:49;abuckley;- The section ""Terminating the VM"" ought to give _some_ motivation for the wait-until-no-nondaemon-thread-running behavior.

- Re: ""halt() does not happen with DestroyJavaVM, nor should it. But by definition the VM has terminated by that stage as per latest JLS 12.8 text."" -- the latest 12.8 text in JDK-8290196 _avoids_ saying what happens to the VM, and speaks _only_ of what happens to the (threads of the) program: ""Upon program exit, any daemon or non-daemon thread that has not yet exited will execute no further Java code.""  It is incumbent on the JNI Spec to explain that the reason why threads are ""blocked"" from executing further Java code is because the VM has terminated. It would also be helpful for the JNI Spec to note that the VM terminates and DestroyJavaVM returns, versus when the VM halts and Runtime.halt does not return.;;;","2022-07-19 17:26;dholmes;> - The section ""Terminating the VM"" ought to give _some_ motivation for the wait-until-no-nondaemon-thread-running behavior. 

That is the termination/exit condition defined by the JLS for how/when a program normally exits, so the motivation can/should come from there.

> - Re: ""halt() does not happen with DestroyJavaVM, nor should it. But by definition the VM has terminated by that stage as per latest JLS 12.8 text.""

Although it is not stated, there is an understanding that Runtime.halt(), or in general ""halting the VM"" implies termination of the process hosting the VM. If we start talking about ""halt"" with DestroyJavaVM it will cause a lot of confusion.
;;;","2022-07-19 21:15;smarks;I did some more poking at DestroyJavaVM. Here are some observations that I think ought to be addressed in the spec and maybe in the implementation, depending on how the spec changes.

* It seems like it ought to be illegal if DestroyJavaVM is called from native code while Java frames are on the stack. (For example, from a native method called from Java.) At least, when I tried it, it went through the shutdown sequence, and then the JVM crashed. The JVM is shut down but the caller attempts to return to Java code, which of course doesn't make sense. The spec might need a precondition that this function be called only when no Java frames are on the stack. Or the behavior could be unspecified. And perhaps some checking could be done to ensure this case won't happen.

* The code in Threads::destroy_vm() waits until the non-daemon thread count drops to one before proceeding with the shutdown sequence and then exiting the VM. The assumption seems to be that DestroyJavaVM is called on a non-daemon thread. The launcher does this; this provides the expected behavior of awaiting termination of all the application's non-daemon threads before shutdown. However, if DestroyJavaVM is called from a daemon thread, it starts the shutdown sequence while one of the application's non-daemon threads is still executing. This is easily demonstrated by having the main native thread detach and then reattach as a daemon thread. I'm not sure whether this is a bug somewhere or whether there should be a requirement that DestroyJavaVM be called on a non-daemon thread.

* It would be good to clarify the circumstances under which DestroyJavaVM returns. I think that at the end of the shutdown sequence, it will stop (or block, or whatever) all the Java threads, do all the stuff in the comment at Threads::destroy_vm(), and then return. If something prevents the shutdown sequence from completing, DestroyJavaVM will never return. This differs from Runtime::halt which doesn't start the shutdown sequence, but which does minimal cleanup and then exits the entire process. (From native code this can be done by JVM_Halt(), but that's not part of JNI AFAICS, so yes discussion of it probably doesn't belong here.)

(I may have said in the past that the JVM halts at the end of the shutdown sequence. From Java threads' point of view this might be the indistinguishable from calling Runtime::halt, but it's quite different from the JNI perspective.);;;","2022-07-19 23:28;dholmes;> I did some more poking at DestroyJavaVM.

Don't poke too hard, this is more tissue paper than keflar. ;-)

> * It seems like it ought to be illegal if DestroyJavaVM is called from native code while Java frames are on the stack.

True, this makes no sense. Though it shouldn't crash it should just hang if you try to return to the VM. There is not much resilience here e.g. if two threads call DestroyJavaVM then things would also get ""interesting"". We could add more guidance on usage and perhaps some additional checks - though JNI typically requires the user to use it correctly.

> The assumption seems to be that DestroyJavaVM is called on a non-daemon thread.

I'd call this a bug. The real assumption is that DestroyJavaVM is called from an unattached thread in the first place, so it will attach as a non-daemon. But we don't require that it be an unattached thread so it should work.

>  It would be good to clarify the circumstances under which DestroyJavaVM returns

At a high level yes. It initiates the shutdown sequence and logically waits for that to complete, so if it doesn't complete then neither does DestroyJavaVM.
;;;","2022-07-20 11:22;smarks;[calling DestroyJavaVM from a native method with Java frames on the stack]
> Though it shouldn't crash it should just hang if you try to return to the VM.

If the caller is a non-daemon thread it indeed just hangs. If the caller is a daemon thread then
it crashes in malloc() with an invalid pointer, in the JavaThread destructor, I think in the ""delete thread""
statement of Threads::destroy_vm(). This is right after a comment, ""Deleting the shutdown thread here
is safe."" :-) This is anyway of little import since it's clear that calling DestroyJavaVM this way
is nonsensical.

I've filed bug JDK-8290732 regarding the behavior when DestroyJavaVM is called on a daemon thread.

I'll defer to your judgment as to how the specification should handle this and other issues.;;;","2022-07-30 23:27;dholmes;The broken link in the top-level TOC is fixed under JDK-8291585;;;","2022-08-15 19:02;dholmes;> It seems like it ought to be illegal if DestroyJavaVM is called from native code while Java frames are on the stack. (For example, from a native
> method called from Java.) At least, when I tried it, it went through the shutdown sequence, and then the JVM crashed. 

I investigated the crash to see whether it was something easily avoided, such that the thread would just hang as expected (blocking at the termination safepoint as it tries to transition from the native method back to Java code). But it is not easily avoided at all. The current logic treats things as a termination of the thread, as well as termination of the VM. Logically this is incorrect when there are Java frames on the stack as the thread has not terminated by JLS definition. If we try to proceed with thread termination then we crash when freeing the VM Thread/JavaThread resources as these are not in a valid state when Java frames still exist - we don't try to terminate live threads. If we try to skip that aspect of the termination then other parts of the VM termination code will encounter problems as it can only be executed by a terminated JavaThread. We would have to actually introduce a new (third) termination process to make this work. The second process used for Runtime.exit() can take a lot of short-cuts (that don't require the thread to be terminated) because we know we are blowing away the entire process.

Given we have to tread carefully in mandating specific behaviours in the JNI spec, we should probably just adjust the spec to allow an implementation to constrain calls to DestroyJavaVM to be made from threads with no active Java frames, or else report JNI_ERR and do nothing.

Update: Actually there is a simpler path here. DestroyJavaVM is already specified such that trying to detach a thread with active Java frames is not allowed and returns JNI_ERR. So if we clarify that DestroyJavaVM would also detach the current thread, then implicitly it too cannot have any active Java frames. ... except that is only stated in the overview section NOT the actual method specification, so that needs to be fixed too.
;;;","2022-08-15 21:59;dholmes;I will also make some minor clarifications (not changes) to JNI_CreateJavaVM and the AttachCurrentThread* functions as needed e.g. to clearly state that the thread that calls JNI_CreateJavaVM and becomes the ""main thread"" is attached to the VM.
;;;","2022-08-16 19:33;dholmes;I've tweaked the overview section but still retained it as it summarises the use of the invocation API.

The spec for DestroyJavaVM should now be much clearer with regards to exactly how it operates.

I've added the change that the thread must not have any Java frames on the call stack (and also fixed that in DetachCurrentThread).;;;","2022-09-19 18:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10352
Date: 2022-09-20 00:55:32 +0000;;;","2022-09-27 16:59;dukebot;Changeset: e5b65c40
Author:    David Holmes <dholmes@openjdk.org>
Date:      2022-09-27 23:57:32 +0000
URL:       https://git.openjdk.org/jdk/commit/e5b65c40ea032c6955311593e02ed44f14dfe80a
;;;",,,,,,,,,,,,,,,,,,,,
"update Eclipse .classpath in apps, buildSrc",JDK-8290473,5079416,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2022-07-18 14:55,2022-11-29 06:08,2023-10-01 09:56,2022-08-18 00:17,jfx20,,,,,,jfx20,javafx,,0,noreg-cleanup,sn_122,,,,,,,,,,,,,,,,"The goal of this PR is to be able to import openjfx project in Eclipse such that it compiles with 0 errors, including apps/ and buildSrc/.

See also JDK-8221708
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289255,,,,,,,,,,,,,JDK-8098391,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xw0b:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-08-01 13:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/858
Date: 2022-08-01 16:53:29 +0000;;;","2022-08-18 00:17;dukebot;Changeset: 5c47295c
Author:    Andy Goryachev <angorya@openjdk.org>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2022-08-18 07:13:23 +0000
URL:       https://git.openjdk.org/jfx/commit/5c47295cf7ff9404b3bddaa2c30772fa2eff461c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add new positioning options to PassFailJFrame test framework,JDK-8290469,5079412,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2022-07-18 11:57,2023-09-29 08:45,2023-10-01 09:56,2022-08-24 09:26,,,,,,,20,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_123,sn_124,sn_125,testbug,,,,,,,,,,,A new position option and a method to obtain test instruction frame bounds can be added to PassFailJFrame to aid custom positioning of multiple test frames.,,,,,,,,,,JDK-8309868,JDK-8311167,JDK-8310092,JDK-8309869,JDK-8310163,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289075,JDK-8289077,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xvzf:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-07-18 12:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9525
Date: 2022-07-16 01:00:43 +0000;;;","2022-07-18 13:55;honkar;The test instruction frame might be overlapped when there are multiple test windows, specially on smaller screens. In order to fix this, a new Position option and a method to obtain test instruction frame bounds is added to PassFailJFrame to handle multiple test window positioning.;;;","2022-08-24 09:26;dukebot;Changeset: 568be58e
Author:    Harshitha Onkar <honkar@openjdk.org>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-08-24 16:23:23 +0000
URL:       https://git.openjdk.org/jdk/commit/568be58e8521e5e87baca1872ba8cc1941607bb7
;;;","2023-06-28 08:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1506
Date: 2023-06-28 15:07:26 +0000;;;","2023-06-30 01:33;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.9-oracle. ModalDialogTest.java, PrintAllPagesTest.java and HtmlScriptTagParserTest.java are not in 17u. The rest applies cleanly (already reviewed). Tested manually.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove gc/gctests/mallocWithGC tests,JDK-8290468,5079410,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lmesnik,lmesnik,lmesnik,2022-07-18 11:31,2022-07-25 14:11,2023-10-01 09:56,2022-07-20 12:21,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,"These tests duplicate vmTestbase/gc/lock/malloc test.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xvyz:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-07-18 11:33;lmesnik;Also, I am not sure that both of them make any sense these days.
VM doesn't use malloc and even use the testing of synchronization between mallocs have a very little sense.;;;","2022-07-19 13:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9563
Date: 2022-07-19 20:44:12 +0000;;;","2022-07-20 12:21;dukebot;Changeset: b1817a30
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-07-20 19:19:57 +0000
URL:       https://git.openjdk.org/jdk/commit/b1817a30a00d74f70b247c783047bfbb49515dda
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix several comment typos in sun.security.ec,JDK-8290463,5079404,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2022-07-18 08:57,2022-07-25 13:27,2023-10-01 09:56,2022-07-18 18:52,20,,,,,,20,security-libs,,0,noreg-doc,noreg-trivial,,,,,,,,,,,,,,,,"On behalf of HollowMan6 [1] to file this issue.

Some comment typos in sun.security.ec
inifinity -> infinity
nonnce -> nonce
hasg -> hash

[1] https://github.com/HollowMan6",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xvxn:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,,,"2022-07-18 17:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9541
Date: 2022-07-18 15:22:16 +0000;;;","2022-07-18 18:51;dukebot;Changeset: af86cd3d
Author:    Hollow Man <hollowman@opensuse.org>
Committer: Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-07-19 01:49:20 +0000
URL:       https://git.openjdk.org/jdk/commit/af86cd3d8c0f8a874d1b738ad0caeeb7cd4c61d0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
remove os::print_statistics(),JDK-8290456,5079389,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-07-18 05:33,2022-08-31 15:29,2023-10-01 09:56,2022-07-19 00:19,20,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,os::print_statistics() is now empty on all platforms so it can be removed.,,,,,,,,,,JDK-8293155,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xvub:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-07-18 06:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9537
Date: 2022-07-18 13:00:52 +0000;;;","2022-07-19 00:18;dukebot;Changeset: 612d8c6c
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-07-19 07:15:08 +0000
URL:       https://git.openjdk.org/jdk/commit/612d8c6cb1d0861957d3f6af96556e2739283800
;;;","2022-08-29 03:20;mbaesken;jdk17 fix request
I would like to have the change in jdk17u-dev as well because the cleanup would be good there too.  The change applies cleanly, Risk is low.;;;","2022-08-29 03:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/648
Date: 2022-08-29 10:12:20 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jck test api/java_lang/foreign/VaList/Empty.html fails on some platforms,JDK-8290455,5079388,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mbaesken,mbaesken,2022-07-18 05:21,2022-08-05 12:00,2023-10-01 09:56,2022-07-25 14:34,19,,,,,,19,core-libs,,0,conformance,jdk19-fix-request,jdk19-fix-yes,panama,tck-red-19,,,,,,,,,,,,,"The JCK test jck test api/java_lang/foreign/VaList/Empty.html fails on Linux ppc64le with this exception  (probably other platforms without handling in src/java.base/share/classes/jdk/internal/foreign/CABI.java might have the same issue):

Testcase ""empty_Address"" has thrown an unexpected exception java.lang.ExceptionInInitializerError
java.lang.ExceptionInInitializerError
at java.base/jdk.internal.foreign.abi.SharedUtils$1.(SharedUtils.java:236)
at java.base/jdk.internal.foreign.abi.SharedUtils.emptyVaList(SharedUtils.java:365)
at java.base/java.lang.foreign.VaList.empty(VaList.java:240)
at javasoft.sqe.tests.api.java.lang.foreign.VaList.Empty.getEmptyVaList(Empty.java:50)
at javasoft.sqe.tests.api.java.lang.foreign.VaList.Empty.empty_Address(Empty.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at com.oracle.tck.lib.autd2.processors.tc.DefaultNoArgTestCaseMethodSetting.lambda$process$0(DefaultNoArgTestCaseMethodSetting.java:68)
at com.oracle.tck.lib.autd2.processors.tc.DefaultThreadRunning.process(DefaultThreadRunning.java:61)
at com.oracle.tck.lib.autd2.processors.tc.DefaultThreadRunning.process(DefaultThreadRunning.java:16)
at com.oracle.tck.lib.autd2.AUTD2Utils.iterateThroughProcessorsUntilAllAreDone(AUTD2Utils.java:200)
at com.oracle.tck.lib.autd2.AUTD2Utils.iterateLifePhases(AUTD2Utils.java:39)
at com.oracle.tck.lib.autd2.AUTD2Utils.iterateTestCaseLifePhase(AUTD2Utils.java:379)
at com.oracle.tck.lib.autd2.processors.tg.RunningTestCases.runTestCaseAsNeeded(RunningTestCases.java:63)
at com.oracle.tck.lib.autd2.processors.tg.RunningTestCases.lambda$process$0(RunningTestCases.java:41)
at java.base/java.lang.Iterable.forEach(Iterable.java:75)
at com.oracle.tck.lib.autd2.processors.tg.RunningTestCases.process(RunningTestCases.java:33)
at com.oracle.tck.lib.autd2.processors.tg.RunningTestCases.process(RunningTestCases.java:22)
at com.oracle.tck.lib.autd2.AUTD2Utils.iterateThroughProcessorsUntilAllAreDone(AUTD2Utils.java:200)
at com.oracle.tck.lib.autd2.AUTD2Utils.iterateLifePhases(AUTD2Utils.java:39)
at com.oracle.tck.lib.autd2.TestRunner.performRun(TestRunner.java:112)
at com.oracle.tck.lib.autd2.TestRunner.run(TestRunner.java:314)
at com.oracle.tck.lib.autd2.AUTD2.run(AUTD2.java:55)
at com.oracle.tck.lib.autd2.AUTD2.run(AUTD2.java:24)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at com.sun.jck.lib.ExecJCKTestSameJVMCmd$Version2Test.execute(ExecJCKTestSameJVMCmd.java:603)
at com.sun.jck.lib.ExecJCKTestSameJVMCmd$StandardTest.run(ExecJCKTestSameJVMCmd.java:560)
at com.sun.jck.lib.ExecJCKTestSameJVMCmd.execute(ExecJCKTestSameJVMCmd.java:444)
at com.sun.jck.lib.ExecJCKTestSameJVMCmd.run(ExecJCKTestSameJVMCmd.java:374)
at com.sun.jck.lib.ExecInSeparateThreadCmd$StatusCallable.call(ExecInSeparateThreadCmd.java:76)
at com.sun.jck.lib.ExecInSeparateThreadCmd$StatusCallable.call(ExecInSeparateThreadCmd.java:60)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at java.base/java.lang.Thread.run(Thread.java:1596)
Caused by: java.lang.UnsupportedOperationException: Unsupported os, arch, or address size: Linux, ppc64le, 64
at java.base/jdk.internal.foreign.CABI.(CABI.java:59)
... 34 more

looks like on this platform without support of foreign memory API the handling is still wrong.",,,,,,,,,,JDK-8291331,JDK-8291450,JDK-8291329,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291006,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xvu3:",9223372036854775807,b33,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2022-07-18 07:04;azeller;The javadoc to java.lang.foreign.VaList.empty() says:

static VaListPREVIEW empty()
Returns an empty variable argument list, associated with the globalPREVIEW memory session. The resulting variable argument list does not contain any argument, and throws UnsupportedOperationException on all operations, except for address(), copy() and session().
Returns:
an empty variable argument list.
Throws:
UnsupportedOperationException - if the underlying native platform is not supported.

I guess it would be good if there would be no ExceptionInInitializerError thrown but instead jdk.internal.foreign.abi.SharedUtils would throw the UnsupportedOperationException that comes from CABI.;;;","2022-07-18 07:58;mbaesken;Maybe it would be better to avoid throwing the  UnsupportedOperationException in the static initializer of CABI (seems this is ""packed"" into ExceptionInInitializerError   ?).
https://github.com/openjdk/jdk19u/blob/master/src/java.base/share/classes/jdk/internal/foreign/CABI.java#L59
Instead set current to null  and  throw the UnsupportedOperationException  in method  public static CABI current()  ?;;;","2022-07-18 13:18;jvernee;VaList was moved to a separate file from being a nest class of CLinker. That class has the javadoc comment: ""On unsupported platforms this class will fail to initialize with an ExceptionInInitializerError.""

Possible fix is to add the same comment to the VaList class.

Another fix is to have some `Unknown` enum constant in CABI. All clients of CABI::current() switch on the returned value, so they could handle `Unknown` by throwing UOE. (There's also PlatformLayout which does this in an unused `pick` method. That can just be removed).

That would allow failing more lazily on (C)Linker as well.

I'd prefer the latter option, but it's not as trivial.;;;","2022-07-18 13:33;jvernee;Sorry, that ExceptionInInitializerError comment in the javadoc in CLinker is no longer present in the JDK 19 code.

It looks like all the relevant methods already have the right comment about UOE being thrown in case the underlying platform is not supported. It's just that the current implementation wraps it in an ExceptionInInitializerError.

I think what [~mbaesken] suggests would also be a good solution.;;;","2022-07-19 10:17;mcimadamore;Any reason why something like this shouldn't work?

```
diff --git a/src/java.base/share/classes/jdk/internal/foreign/CABI.java b/src/java.base/share/classes/jdk/internal/foreign/CABI.java
index 1ab38dbfa96..de1e34995ba 100644
--- a/src/java.base/share/classes/jdk/internal/foreign/CABI.java
+++ b/src/java.base/share/classes/jdk/internal/foreign/CABI.java
@@ -56,12 +56,22 @@ public enum CABI {
                 current = LinuxAArch64;
             }
         } else {
-            throw new UnsupportedOperationException(
-                ""Unsupported os, arch, or address size: "" + os + "", "" + arch + "", "" + addressSize);
+            current = null;
         }
     }
 
     public static CABI current() {
+        if (current == null) {
+            throw unsupportedPlatform();
+        }
         return current;
     }
+
+    public static UnsupportedOperationException unsupportedPlatform() {
+        String arch = privilegedGetProperty(""os.arch"");
+        String os = privilegedGetProperty(""os.name"");
+        long addressSize = ADDRESS.bitSize();
+        return new UnsupportedOperationException(
+                ""Unsupported os, arch, or address size: "" + os + "", "" + arch + "", "" + addressSize);
+    }
 }
diff --git a/src/java.base/share/classes/jdk/internal/foreign/PlatformLayouts.java b/src/java.base/share/classes/jdk/internal/foreign/PlatformLayouts.java
index 4b7c33694df..ab99b1fabeb 100644
--- a/src/java.base/share/classes/jdk/internal/foreign/PlatformLayouts.java
+++ b/src/java.base/share/classes/jdk/internal/foreign/PlatformLayouts.java
@@ -29,13 +29,6 @@ import java.lang.foreign.MemoryLayout;
 import java.lang.foreign.ValueLayout;
 
 public class PlatformLayouts {
-    public static <Z extends MemoryLayout> Z pick(Z sysv, Z win64, Z aarch64) {
-        return switch (CABI.current()) {
-            case SysV -> sysv;
-            case Win64 -> win64;
-            case LinuxAArch64, MacOsAArch64 -> aarch64;
-        };
-    }
 
     /**
      * This class defines layout constants modelling standard primitive types supported by the x64 SystemV ABI.
```

I've tried it by deliberately making Linux an unsupported platform, and tested with jshell:

```
jshell> Linker.nativeLinker();
WARNING: A restricted method in java.lang.foreign.Linker has been called
WARNING: java.lang.foreign.Linker::nativeLinker has been called by the unnamed module
WARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for this module

|  Exception java.lang.UnsupportedOperationException: Unsupported os, arch, or address size: Linux, amd64, 64
|        at CABI.unsupportedPlatform (CABI.java:74)
|        at CABI.current (CABI.java:65)
|        at SharedUtils.getSystemLinker (SharedUtils.java:237)
|        at Linker.nativeLinker (Linker.java:198)
|        at (#2:1)

jshell> VaList.empty()
|  Exception java.lang.UnsupportedOperationException: Unsupported os, arch, or address size: Linux, amd64, 64
|        at CABI.unsupportedPlatform (CABI.java:74)
|        at CABI.current (CABI.java:65)
|        at SharedUtils.emptyVaList (SharedUtils.java:366)
|        at VaList.empty (VaList.java:260)
|        at (#3:1)

jshell> VaList.ofAddress(MemoryAddress.NULL, Memo
MemoryAddress   MemoryLayout    MemorySegment   MemorySession   
jshell> VaList.ofAddress(MemoryAddress.NULL, MemorySession.global());
|  Exception java.lang.UnsupportedOperationException: Unsupported os, arch, or address size: Linux, amd64, 64
|        at CABI.unsupportedPlatform (CABI.java:74)
|        at CABI.current (CABI.java:65)
|        at SharedUtils.newVaListOfAddress (SharedUtils.java:357)
|        at VaList.ofAddress (VaList.java:222)
|        at (#4:1)

jshell> VaList.make(builder -> {}, MemorySession.global());
|  Exception java.lang.UnsupportedOperationException: Unsupported os, arch, or address size: Linux, amd64, 64
|        at CABI.unsupportedPlatform (CABI.java:74)
|        at CABI.current (CABI.java:65)
|        at SharedUtils.newVaList (SharedUtils.java:348)
|        at VaList.make (VaList.java:249)
|        at (#5:1)
```

Which seems like what we want? SystemLookup initialization is a bit trickier, but note that you can only get to SystemLookup from Linker::defaultLookup (an instance method), so, if you have a Linker instance on your hand, you can never get an UOE.;;;","2022-07-21 05:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/150
Date: 2022-07-21 12:06:37 +0000;;;","2022-07-21 08:41;mcimadamore;Fix Request
We believe that this low-risk fix is worth integrating because it fixes a conformance issue in the API implementation (where the thrown exception doesn't match the one described in the javadoc), which might lead to tck test failures on platforms where the Linker API is not supported.;;;","2022-07-25 10:35;briangoetz;Fix request approved.;;;","2022-07-25 14:34;dukebot;Changeset: 8c9d5ad4
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-07-25 21:32:44 +0000
URL:       https://git.openjdk.org/jdk19/commit/8c9d5ad4f89e7af18f4ee3b8f236083491d7f6fa
;;;","2022-07-26 00:14;azeller;I am sorry to say, but it seems there is a test that tested the old behavior:
java/foreign/TestUnsupportedPlatform.java
It fails now with this error on unsupported platforms:
test TestUnsupportedPlatform.testNoInitialization(): failure
org.testng.TestException: 
Expected exception of type class java.lang.ExceptionInInitializerError but got java.lang.UnsupportedOperationException: Unsupported os, arch, or address size: Linux, ppc64le, 64
	at org.testng.internal.ExpectedExceptionsHolder.wrongException(ExpectedExceptionsHolder.java:68)
	at org.testng.internal.TestInvoker.considerExceptions(TestInvoker.java:737)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:635)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)
Caused by: java.lang.UnsupportedOperationException: Unsupported os, arch, or address size: Linux, ppc64le, 64
	at java.base/jdk.internal.foreign.CABI.current(CABI.java:69)
	at java.base/jdk.internal.foreign.abi.SharedUtils.getSystemLinker(SharedUtils.java:237)
	at java.base/java.lang.foreign.Linker.nativeLinker(Linker.java:198)
	at TestUnsupportedPlatform.testNoInitialization(TestUnsupportedPlatform.java:42)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	... 25 more;;;","2022-07-26 02:29;mcimadamore;[~azeller] this seems a test bug. It would be better to file a new bug for that - as it seems the test relies on unspecified behavior (the javadoc has always specified UnsupportedOperationException).;;;","2022-07-26 02:40;mcimadamore;Filed: https://bugs.openjdk.org/browse/JDK-8291006;;;",,,,,,,,,,,,,,,,,,,,,
Incorrect result when switching to C2 OSR compilation from C1,JDK-8290451,5079018,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,webbuggrp,webbuggrp,2022-07-11 23:47,2023-05-28 22:12,2023-10-01 09:56,2022-08-30 00:29,11,17,19,20,8,,20,hotspot,,0,c1,dcsswa,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,oracle-triage-20,reproducer-yes,webbug,,"ADDITIONAL SYSTEM INFORMATION :
Microsoft Windows 10 Professional
10.0.19044 Build 19044
AMD Ryzen 5 5600G with Radeon Graphics 3.90 GHz
Memory 32 GB

openjdk version ""1.8.0_332""
OpenJDK Runtime Environment (Temurin)(build 1.8.0_332-b09)
OpenJDK 64-Bit Server VM (Temurin)(build 25.332-b09, mixed mode)

openjdk version ""11.0.15"" 2022-04-19
OpenJDK Runtime Environment Temurin-11.0.15+10 (build 11.0.15+10)
OpenJDK 64-Bit Server VM Temurin-11.0.15+10 (build 11.0.15+10, mixed mode)

A DESCRIPTION OF THE PROBLEM :
When we try to use Hotspot to execute test cases, we may get incorrect output. In the test case, we computed the checksum within the loop, but optimizing the loop might have resulted in us getting the wrong output. The test case execution result is not fixed.
In addition, we tried to set the -Xint flag at execution time so that we would get the correct output. So we think the issue may be related to JIT optimization.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
I shared the test case via Google Drive. You can download the test case using the link below.
https://drive.google.com/file/d/1CY_mcL3pWMc4KsCpcUd-Ps6hs8JB631H/view?usp=sharing


FREQUENCY : always


",,,,,,,,,,JDK-8294450,JDK-8297940,JDK-8297939,JDK-8294181,JDK-8294824,JDK-8309024,JDK-8294825,JDK-8306894,JDK-8294118,,,,,,,,,,,,,,,,,,,JDK-8296510,JDK-8298461,JDK-8306724,JDK-8306725,JDK-8290445,JDK-8298620,JDK-8296510,,,,,,,,,,,"2022-07-18 09:08;thartmann;Helper.class;https://bugs.openjdk.org/secure/attachment/100018/Helper.class","2022-07-18 09:04;thartmann;Helper.jasm;https://bugs.openjdk.org/secure/attachment/100015/Helper.jasm","2022-07-18 09:05;thartmann;Test2.java;https://bugs.openjdk.org/secure/attachment/100016/Test2.java","2022-07-18 09:05;thartmann;check_sum.class;https://bugs.openjdk.org/secure/attachment/100017/check_sum.class","2022-07-18 04:23;sswsharm;testCase14.zip;https://bugs.openjdk.org/secure/attachment/100002/testCase14.zip",,,,,,,,,,,,,,,,,,,,,,"0|i2xtjv:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-18 04:28;sswsharm;Issue is reproduced.
When executing the testcase with -Xint, the output is -1744717296 for all JDKs,
 output is different for all JDKs when executing the testcase without -Xint

OS: Windows 10

JDK 8u333: Fail
Output with -Xint : -1744717296
Output without -Xint: -1744717016

JDK 19ea31: Fail
Output with -Xint : -1744717296
Output without -Xint: -1744716550

JDK 17.0.3.1: Fail
Output with -Xint : -1744717296
Output without -Xint: -1744716480;;;","2022-07-18 07:42;thartmann;ILW = Incorrect execution of compiled code (old issue), single test with bytecode not generated by javac, disable compilation of affected method = HLM = P3;;;","2022-07-18 07:43;thartmann;Might be related to JDK-8290445.;;;","2022-07-18 09:06;thartmann;I can reproduce this with all the latest JDK versions and attached a jasm version of the test:
java -jar asmtools.jar jasm Helper.jasm
java -XX:CompileCommand=compileonly,Helper::test -Xcomp Test2

Exception in thread ""main"" java.lang.RuntimeException: Unexpected result: 25502548
	at Test2.main(Test2.java:10)

It seems to be a C2 issue with irreducible loops.;;;","2022-07-21 04:38;roland;I believe the fix is:

diff --git a/src/hotspot/share/c1/c1_Canonicalizer.cpp b/src/hotspot/share/c1/c1_Canonicalizer.cpp
index a8a29797404..a19acff4d14 100644
--- a/src/hotspot/share/c1/c1_Canonicalizer.cpp
+++ b/src/hotspot/share/c1/c1_Canonicalizer.cpp
@@ -790,7 +790,7 @@ void Canonicalizer::do_If(If* x) {
         else if (lss_sux == gtr_sux) { cond = If::neq; tsux = lss_sux; fsux = eql_sux; }
         else if (eql_sux == gtr_sux) { cond = If::geq; tsux = eql_sux; fsux = lss_sux; }
         else                         { ShouldNotReachHere();                           }
-        If* canon = new If(cmp->x(), cond, nan_sux == tsux, cmp->y(), tsux, fsux, cmp->state_before(), x->is_safepoint());
+        If* canon = new If(cmp->x(), cond, nan_sux == tsux, cmp->y(), tsux, fsux, x->state_before(), x->is_safepoint());
         if (cmp->x() == cmp->y()) {
           do_If(canon);
         } else {

Deoptimization triggered by tiered compilation at a backedge doesn't have the right state.;;;","2022-08-19 01:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9938
Date: 2022-08-19 08:16:42 +0000;;;","2022-08-30 00:29;dukebot;Changeset: afa5d4ce
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-08-30 07:27:51 +0000
URL:       https://git.openjdk.org/jdk/commit/afa5d4ced38b7f3752932c28af96d8fc600d1df7
;;;","2022-09-22 06:26;thartmann;Fix Request (JDK 19u)
Fixes an incorrect execution of C1 compiled code. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 11u and 17u. ;;;","2022-09-22 06:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/32
Date: 2022-09-22 13:27:10 +0000;;;","2022-10-03 08:52;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.18-oracle, 17.0.6-oracle.
A C2 change but fix very obvious so low risk.
Clean backport.
Test passes and fails without fix.  SAP nightly testing passed.;;;","2022-10-03 09:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/765
Date: 2022-10-03 15:53:05 +0000;;;","2022-10-03 09:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1383
Date: 2022-10-03 16:04:25 +0000;;;","2022-12-01 00:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/309
Date: 2022-12-01 08:14:47 +0000;;;","2022-12-01 02:39;yan;Fix request (13u, 15u):

Clean backport of a C2 change for parity with LTS releases. 
All non-problemlisted/non-ignored compiler tests do pass.;;;","2022-12-01 02:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/435
Date: 2022-12-01 10:37:58 +0000;;;",,,,,,,,,,,,,,,,,,
C2 compilation fails with assert(node->_last_del == _last) failed: must have deleted the edge just produced,JDK-8290432,5079370,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,yyang,thartmann,thartmann,2022-07-18 02:23,2022-12-13 23:39,2023-10-01 09:56,2022-12-06 19:09,18,19,20,,,,20,hotspot,,0,c2,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,tier6,,,,,,,,,,,"java -XX:-TieredCompilation -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:+StressCCP -Xcomp -XX:CompileOnly=Test -XX:CompileCommand=quiet Test.java

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/open/src/hotspot/share/opto/node.cpp:129), pid=38742, tid=38756
#  assert(node->_last_del == _last) failed: must have deleted the edge just produced

Current CompileTask:
C2:   1648  152    b        Test::vMeth (299 bytes)

Stack: [0x00007f0285334000,0x00007f0285435000],  sp=0x00007f028542eeb0,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x16d434e]  DUIterator::verify_resync()+0x4e
V  [libjvm.so+0x14af8c1]  PhaseIdealLoop::replace_parallel_iv(IdealLoopTree*)+0x5f1
V  [libjvm.so+0x14b6df8]  IdealLoopTree::counted_loop(PhaseIdealLoop*)+0x108
V  [libjvm.so+0x14b6e13]  IdealLoopTree::counted_loop(PhaseIdealLoop*)+0x123
V  [libjvm.so+0x14bc8ba]  PhaseIdealLoop::build_and_optimize()+0xa0a
V  [libjvm.so+0xb12a8a]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x27a
V  [libjvm.so+0xb0f217]  Compile::Optimize()+0x1027
V  [libjvm.so+0xb11440]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x15c0
V  [libjvm.so+0x9215c3]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x683
V  [libjvm.so+0xb201b8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xbb8
V  [libjvm.so+0xb21178]  CompileBroker::compiler_thread_loop()+0x6c8
V  [libjvm.so+0x106d7e8]  JavaThread::thread_main_inner()+0x238
V  [libjvm.so+0x1a8c5e0]  Thread::call_run()+0x100
V  [libjvm.so+0x174f474]  thread_native_entry(Thread*)+0x104

Does not reproduce with latest JDK 17u.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297307,,,,JDK-8273585,,,,,,,"2022-07-18 02:24;thartmann;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/99996/FuzzerUtils.java","2022-07-18 06:39;thartmann;Test-1.java;https://bugs.openjdk.org/secure/attachment/100004/Test-1.java","2022-09-08 00:59;chagedorn;Test-2.java;https://bugs.openjdk.org/secure/attachment/100710/Test-2.java","2022-07-18 02:24;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/99997/Test.java","2022-07-18 02:37;thartmann;hs_err_pid40764.log;https://bugs.openjdk.org/secure/attachment/99998/hs_err_pid40764.log","2022-07-18 02:37;thartmann;replay_pid40764.log;https://bugs.openjdk.org/secure/attachment/99999/replay_pid40764.log",,,,,,,,,,,,,b21,18,,,,,,,"0|i2xvq3:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-18 04:38;thartmann;ILW = Assert during C2 compilation, reproducible with a JavaFuzzer generated test and stress options, no known workaround but disable disable loop opts or compilation of affected method = HLM = P3;;;","2022-07-18 06:40;thartmann;I attached a simplified Test-1.java:
java -XX:-TieredCompilation -Xcomp -XX:CompileCommand=compileonly,Test::test -XX:CompileCommand=quiet -XX:CompileCommand=dontinline,Test::* Test.java;;;","2022-07-18 08:34;thartmann;I was able to narrow this down to JDK-8273585 in JDK 18 b21. [~yyang], could you please have a look? Thanks.;;;","2022-07-31 19:23;yyang;Hi [~thartmann], the reason is that unexpected parallel IV was recognized after JDK-8273585. I submit a PR, please take a look once you have time. Thank you!;;;","2022-08-01 06:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9695
Date: 2022-07-31 09:28:59 +0000;;;","2022-09-08 01:00;chagedorn;Attached another reduced fuzzer failure (Test-2.java).

To reproduce:
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test -XX:CompileCommand=dontinline,Test::* Test-2.java

[~yyang] Maybe you want to add this test to your fix as well.;;;","2022-12-06 19:09;dukebot;Changeset: acf96c64
Author:    Yi Yang <yyang@openjdk.org>
Date:      2022-12-07 03:08:07 +0000
URL:       https://git.openjdk.org/jdk/commit/acf96c64b750b1a7badbb2cd1c7021dad36aae1e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
CDS cannot archive lamda proxy with useImplMethodHandle,JDK-8290417,5079352,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,iklam,iklam,2022-07-17 13:24,2022-08-04 01:25,2023-10-01 09:56,2022-07-18 21:41,17,18,19,20,,,19,hotspot,,0,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,"See Test.java from the attachment for the reproduction steps:

$ java17 -showversion -cp test.jar -XX:ArchiveClassesAtExit=test.jsa \
  -Djdk.internal.lambda.dumpProxyClasses=DUMP_CLASS_FILES \
  -Xlog:cds Test

$ java17 -showversion -cp test.jar -XX:SharedArchiveFile=test.jsa -Xlog:cds Test
[....]
java version ""17"" 2021-09-14 LTS
Java(TM) SE Runtime Environment (build 17+35-LTS-2724)
Java HotSpot(TM) 64-Bit Server VM (build 17+35-LTS-2724, mixed mode, sharing)
Exception in thread ""main"" java.lang.NullPointerException
	at java.base/java.util.Optional.ifPresent(Optional.java:178)
	at Tester.test(Unknown Source)
	at Test.main(Unknown Source)

=========================================
Note that the generated lambd proxy class used ""ldc ... Dynamic"" for getting a MethodHandle to  Base::provideDownstreamSubscription, because the target method is a protected method in a different package. While this method is accessible from Tester (it's from a super type of Tester), it's not accessible from the lambda proxy class.

See here for more info: https://github.com/openjdk/jdk/blob/522b65743ca10fcba0a27d25b8fa11319999e228/src/java.base/share/classes/java/lang/invoke/InnerClassLambdaMetafactory.java#L183-L191

$ find DUMP_CLASS_FILES | grep Tester
DUMP_CLASS_FILES/Tester$$Lambda$1.class
$ javap -c -private 'DUMP_CLASS_FILES/Tester$$Lambda$1.class'
final class Tester$$Lambda$1 implements java.util.function.Consumer {
  private final Tester arg$1;

  private Tester$$Lambda$1(Tester);
    Code:
       0: aload_0
       1: invokespecial #13                 // Method java/lang/Object.""<init>"":()V
       4: aload_0
       5: aload_1
       6: putfield      #15                 // Field arg$1:LTester;
       9: return

  public void accept(java.lang.Object);
    Code:
       0: ldc           #28                 // Dynamic #0:_:Ljava/lang/invoke/MethodHandle;
       2: aload_0
       3: getfield      #15                 // Field arg$1:LTester;
       6: aload_1
       7: checkcast     #30                 // class java/lang/String
      10: invokevirtual #36                 // Method java/lang/invoke/MethodHandle.invokeExact:(LTester;Ljava/lang/String;)V
      13: return
}

",,,,,,,,,,JDK-8290683,JDK-8290904,JDK-8291321,JDK-8291886,JDK-8291547,JDK-8291440,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290707,,,,,,,,,,,"2022-07-17 16:36;iklam;Base.java;https://bugs.openjdk.org/secure/attachment/99988/Base.java","2022-07-17 16:36;iklam;Test.java;https://bugs.openjdk.org/secure/attachment/99990/Test.java","2022-07-17 16:36;iklam;test.jar;https://bugs.openjdk.org/secure/attachment/99989/test.jar",,,,,,,,,,,,,,,,,,,,,,,,"0|i2xvm3:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-07-17 18:36;iklam;The fix is simple. Will try to target to JDK 19 during RDP1 (ending 2022/07/21);;;","2022-07-17 20:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/146
Date: 2022-07-18 03:15:02 +0000;;;","2022-07-18 21:41;dukebot;Changeset: 4dc421ca
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-07-19 04:37:28 +0000
URL:       https://git.openjdk.org/jdk19/commit/4dc421caa02caedd7061ede6a5ec44dbb6ec738e
;;;","2022-07-21 03:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/575
Date: 2022-07-21 10:50:01 +0000;;;","2022-07-21 04:48;yan;Fix request (17u):
on behalf of Jan Kratohvil:
This bug has been faced by a customer and this backport does work for them. I have run the testsuite on Linux x86_64 and there is no change of the results. Two new testcases are added and they are both Passing. The testcases are still Passing after backporting them to 17u-dev.;;;","2022-08-03 08:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/251
Date: 2022-08-03 14:33:12 +0000;;;","2022-08-04 00:58;dcherepanov;Fix request (15u):
on behalf of Jan Kratohvil:
This bug has been backport to 17u already. I have run the testsuite on Linux x86_64 and there is no change of the results. Two new testcases are added and they are both Passing. The testcases are still Passing after backporting them to 15u-dev.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
jpackage exe uninstallers don't return correct exit code in case of failure,JDK-8290402,5079335,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenyuk,asemenyuk,asemenyuk,2022-07-16 14:44,2022-07-25 13:37,2023-10-01 09:56,2022-07-19 10:08,,,,,,,20,tools,,0,sn_123,,,,,,,,,,,,,,,,,"exe installers created by jpackage don't propagate a status code of uninstallation command. They return 0 in case of clean uninstall and -1 otherwise. There is no way to figure out the reason for uninstallation failure from the exit code of exe installer.

In case of uninstallation failure, a message box is displayed. This defeats the ability to use jpackage-generated exe installers in batch execution.

The fix must transform the uninstallation status code into exe installer's exit code and exe installer must not have UI when used for uninstallation.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xvib:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-07-16 14:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9532
Date: 2022-07-16 21:47:43 +0000;;;","2022-07-19 10:08;dukebot;Changeset: d67e7ccd
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2022-07-19 17:01:01 +0000
URL:       https://git.openjdk.org/jdk/commit/d67e7ccda56998d1d60bdaa4e5940a0c501ead23
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Aqua LAF does not fire an action event if combo box menu is displayed,JDK-8290399,5079332,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,alans,alans,2022-07-16 14:19,2022-08-25 04:59,2023-10-01 09:56,2022-07-27 23:47,11,17,18,8,,,20,client-libs,,0,macos,sn_123,sn_124,,,,,,,,,,,,,,,"When the user types Enter in an editable combo box, Aqua LAF fails to fire an action event if the menu is displayed. Other LAFs that I have tested do fire an action event, as do native NSComboBox instances. (Actually, they fire two action events, but that is a separate issue.) That means the user must type Enter twice to get the desired effect of a single Enter when using the Aqua LAF. The first Enter dismisses the menu. The second Enter fires the event(s). See attached test program.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8055411,,,,,,,,,,,,,,,,,"2022-07-16 14:12;alans;TestEditableComboBox.java;https://bugs.openjdk.org/secure/attachment/99983/TestEditableComboBox.java",,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2xvhn:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-07-19 01:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9551
Date: 2022-07-19 08:13:23 +0000;;;","2022-07-27 23:47;dukebot;Changeset: 93f96d8c
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-07-28 06:44:49 +0000
URL:       https://git.openjdk.org/jdk/commit/93f96d8c9eb2c7e1579cc99002eefb6bf019742b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jpackage exe installers are not installed in jtreg tests,JDK-8290398,5079331,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,asemenyuk,asemenyuk,2022-07-16 14:11,2022-07-25 13:39,2023-10-01 09:56,2022-07-19 12:48,15,17,19,20,,,20,tools,,0,sn_123,,,,,,,,,,,,,,,,,"exe installers created by jpackage in jtreg tests are not installed if unpack action is in the action sequence which is the default setting.

Unpacking is only supported for msi installers. There is no handler for unpack action for exe installers. This results in premature abortion of actions sequenced for test execution. ""unpack"" action goes before ""install"" in the default action sequence, thus exe installers are never installed.

The issue was introduced in JDK-823370 when support for the unpacking of installers was added.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8233270,,,,,,,,,,,"2022-07-16 14:13;asemenyuk;log.txt;https://bugs.openjdk.org/secure/attachment/99982/log.txt",,,,,,,,,,,,generic,,,,,,,,,windows,,,,,"0|i2xvhf:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-07-16 14:16;asemenyuk;Attached log file (log.txt) demonstrating the problem.

The fix for the issue shall be not to abort all sequenced actions if there is no handler for ""unpack"" action, but abort only the first ""install-verify"" action that is directly affected by the output of ""unpack"" action.
Apply the same fix for similar actions as well.;;;","2022-07-16 14:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9530
Date: 2022-07-16 21:22:46 +0000;;;","2022-07-19 12:48;dukebot;Changeset: c2cbeb3e
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2022-07-19 19:46:51 +0000
URL:       https://git.openjdk.org/jdk/commit/c2cbeb3ee875936c98bb15ec32d692f7d866df76
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"LoadLibraryUnload.java failed with ""Too few cleared WeakReferences""",JDK-8290397,5079330,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,rriggs,dcubed,dcubed,2022-07-16 11:29,2023-01-26 14:39,2023-10-01 09:56,2022-07-19 04:54,20,,,,,,20,core-libs,,0,regression,tier6,tier8,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

java/lang/ClassLoader/loadLibraryUnload/LoadLibraryUnload.java

Here's a snippet from the log file:

#section:main
----------messages:(4/200)----------
command: main -Xcheck:jni LoadLibraryUnload
reason: User specified action: run main/othervm/native -Xcheck:jni LoadLibraryUnload 
Mode: othervm [/othervm specified]
elapsed time (seconds): 98.677
----------configuration:(0/0)----------
----------System.out:(7/178)----------
Native library loaded.
Native library loaded from Class1.
Native library loaded from Class1.
GlobalRef created
GlobalRef deleted
Native library unloaded.
0 dequeued: null
----------System.err:(12/715)----------
java.lang.RuntimeException: Too few cleared WeakReferences
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at LoadLibraryUnload.main(LoadLibraryUnload.java:172)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Too few cleared WeakReferences
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Too few cleared WeakReferences
----------rerun:(50/6100)*----------

These failures first appeared in jdk-20+7-329-tier6 which includes the fix for:

JDK-8289919 [test] LoadLibraryUnloadTest.java failed with ""Failed to unload native library""

so [~rriggs] will probably be interested in this bug.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289919,JDK-8290848,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,windows,,,,"0|i2xvh7:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ae6d091,,,,,,,Verified,,"2022-07-16 16:14;dcubed;This is looking like a regression due to:

JDK-8289919 [test] LoadLibraryUnloadTest.java failed with ""Failed to unload native library""

so I'm bumping this from P4 -> P2.;;;","2022-07-18 15:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9545
Date: 2022-07-18 22:31:13 +0000;;;","2022-07-19 04:54;dukebot;Changeset: e02627ca
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2022-07-19 11:51:28 +0000
URL:       https://git.openjdk.org/jdk/commit/e02627ca0a3381b3a52a71aef41ce5ba3329142b
;;;","2022-07-19 07:03;dcubed;The fix for this bug is integrated in jdk-20+7-355.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Code sample in javadoc of ObservableValue flatMap is incorrect,JDK-8290393,5079321,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jhendrikx,jhendrikx,jhendrikx,2022-07-16 04:31,2022-09-12 06:27,2023-10-01 09:56,2022-07-16 07:18,jfx19,,,,,,jfx19,javafx,,0,noreg-doc,,,,,,,,,,,,,,,,,Docs define a variable `isShowing` but the sample uses it as a method.,,,,,,,,,,JDK-8290396,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277456,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,jfx19,,,,,,,"0|i2xvf7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2022-07-16 05:50;kcr;As a doc bug, this can go into JavaFX 19 during RDP1 or RDP2.;;;","2022-07-16 06:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/831
Date: 2022-07-16 13:24:22 +0000;;;","2022-07-16 07:18;dukebot;Changeset: 92cefceb
Author:    John Hendrikx <jhendrikx@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-07-16 14:15:47 +0000
URL:       https://git.openjdk.org/jfx/commit/92cefceb68aa8c521fb95dfba3439e0fa30dcfc6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Parse error with parenthesized pattern and guard using an array,JDK-8290379,5079301,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,abimpoudis,abimpoudis,2022-07-15 07:51,2022-07-25 13:31,2023-10-01 09:56,2022-07-19 02:06,20,,,,,,20,tools,,0,conformance,tck-red-20,,,,,,,,,,,,,,,,"This fails:

    public int test(Object o)
    {
        int[] arr = {1, 2};

        return switch (o) {
            case (String s) when (arr[0] == 1) -> 0;
            default -> 1;
        };
    }

with 

    ParenthesizedCombo.java:36: error: -> expected
                case (String s) when (arr[0] == 1) -> 0;

but not when e.g.,

    case (String s) when (s.isEmpty()) -> 0;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7317934,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xvar:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-07-15 09:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9519
Date: 2022-07-15 16:15:52 +0000;;;","2022-07-19 02:06;dukebot;Changeset: f5a7de86
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-07-19 09:03:28 +0000
URL:       https://git.openjdk.org/jdk/commit/f5a7de86278ce019ffe44a92921dbb4018451a73
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Introduce LDAP and RMI protocol-specific object factory filters to JNDI implementation,JDK-8290368,5079287,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,aefimov,aefimov,aefimov,2022-07-15 04:26,2023-06-20 15:28,2023-10-01 09:56,2022-10-20 10:04,,,,,,,20,core-libs,,0,release-note=yes,,,,,,,,,,,,,,,,,"JDK has a global factory filter used by JNDI runtime implementation (RI) to control the set of object factory classes allowed to instantiate objects from remote object references. This filter's scope is all protocols supported by JNDI RI:
https://docs.oracle.com/en/java/javase/18/docs/api/java.naming/module-summary.html

Adding filters specific to JNDI/LDAP and JNDI/RMI provider implementations would allow finer-grained control over object factories used to instantiate objects in LDAP and RMI systems.
The default values of these new object filters will only allow object factory classes defined by JDK's RMI and LDAP implementations.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302008,JDK-8291556,,,,JDK-8292472,,JDK-8279464,,,,,,JDK-8292473,SKARA-1640,JDK-8292472,,JDK-8279465,JDK-8279466,JDK-8279470,JDK-8279469,JDK-8279468,JDK-8292474,JDK-8279467,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xv7n:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@226ed983,,,,,,,Verified,,"2022-10-05 08:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10578
Date: 2022-10-05 15:23:43 +0000;;;","2022-10-20 10:04;dukebot;Changeset: d37ce4cd
Author:    Aleksei Efimov <aefimov@openjdk.org>
Date:      2022-10-19 14:41:28 +0000
URL:       https://git.openjdk.org/jdk/commit/d37ce4cdd18afc4facf996598f79e72aae68f4ff
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update default value and extend the scope of com.sun.jndi.ldap.object.trustSerialData system property,JDK-8290367,5079286,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,aefimov,aefimov,aefimov,2022-07-15 04:24,2023-06-20 15:28,2023-10-01 09:56,2022-09-16 03:09,,,,,,,20,core-libs,,0,release-note=yes,,,,,,,,,,,,,,,,,"The LDAP Naming Service Provider implementation's default settings can be improved by disallowing the reconstruction of Java objects from different LDAP attributes (RFC 2713). Changes include the following modifications:
- Extend the scope of the system property to cover the creation of RMI remote objects from the 'javaRemoteLocation' LDAP attribute.
- Update the default value of com.sun.jndi.ldap.object.trustSerialData system property to ""false"". That will prevent the deserialization of java objects from the 'javaSerializedData' and the 'javaRemoteLocation' LDAP attributes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302008,JDK-8290369,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xv7f:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@226ed983,,,,,,,Verified,,"2022-09-09 04:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10228
Date: 2022-09-09 11:03:14 +0000;;;","2022-09-16 03:09;dukebot;Changeset: 7765942a
Author:    Aleksei Efimov <aefimov@openjdk.org>
Date:      2022-09-16 10:04:51 +0000
URL:       https://git.openjdk.org/jdk/commit/7765942aeee25cbeb5fd932a93b3d8f9d4ca3655
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ensure that all directory streams are closed in jdk.link,JDK-8290359,5079278,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rjernst,chegar,chegar,2022-07-15 02:43,2022-07-27 19:40,2023-10-01 09:56,2022-07-20 23:26,17,20,,,,,20,tools,,0,noreg-other,,,,,,,,,,,,,,,,,"There are a number of places where the internal implementation
indirectly uses directory streams but neglects to explicitly close them.
It is recommended to always close directory streams to ensure that any
resources held for the open directory are freed.

The usage of directory streams (not closed) is through the following
calls: Files::list, Files::walk, and Files::find. Specifically a number
of unclosed calls are in DefaultImageBuilder, JmodTask, and DirArchive.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290316,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xv5n:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2022-07-15 09:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9520
Date: 2022-07-15 16:18:17 +0000;;;","2022-07-20 23:25;dukebot;Changeset: 3582fd9e
Author:    Ryan Ernst <ryan@iernst.net>
Committer: Chris Hegarty <chegar@openjdk.org>
Date:      2022-07-21 06:19:55 +0000
URL:       https://git.openjdk.org/jdk/commit/3582fd9e93d9733c6fdf1f3848e0a093d44f6865
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IP_DONTFRAGMENT doesn't set DF bit in IPv4 header,JDK-8290349,5079266,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2022-07-15 01:25,2022-08-10 19:07,2023-10-01 09:56,2022-08-04 03:57,,,,,,,20,core-libs,,0,noreg-hard,,,,,,,,,,,,,,,,,"Environment: Windows 10, 21H2

To reproduce, use Wireshark to capture the traffic on loopback interface while running the following code:

        DatagramChannel channel = DatagramChannel.open();
        channel.setOption(ExtendedSocketOptions.IP_DONTFRAGMENT, true);
        channel.send(ByteBuffer.allocate(0),
                new InetSocketAddress(""127.0.0.1"", 1234));

Check the IPv4 header of the captured packet.

Expected result:

Internet Protocol Version 4, Src: 127.0.0.1, Dst: 127.0.0.1
...
    Flags: 0x40, Don't fragment

Actual result:
Internet Protocol Version 4, Src: 127.0.0.1, Dst: 127.0.0.1
...
    Flags: 0x00

Workaround:
Open an IPv4 channel:
        DatagramChannel channel = DatagramChannel.open(StandardProtocolFamily.INET);",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291923,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xv2z:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-07-19 03:36;djelinski;The observed behavior can be explained by this comment in DatagramChannelImpl:

            // Some platforms require both IPV6_XXX and IP_XXX socket options to
            // be set when the channel's socket is IPv6 and it is used to send
            // IPv4 multicast datagrams. The IP_XXX socket options are set on a
            // best effort basis.

The DF socket option clearly falls into that category. I confirmed that Windows, Linux and MacOSX all behave in the same way, i.e. when IPv6 socket is used to send IPv4 datagrams, the DF flag is not set.

This can be fixed on Windows and Linux by setting the IPv4 option on IPv6 socket. This fix does not work on Mac OS X - setting the IPv4 option fails.;;;","2022-07-20 12:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9575
Date: 2022-07-20 17:19:50 +0000;;;","2022-08-04 03:56;dukebot;Changeset: ce61eb6f
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-08-04 10:52:15 +0000
URL:       https://git.openjdk.org/jdk/commit/ce61eb6ff99eaaece463091b8481e27f84f80684
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TreeTableView jumping to top,JDK-8290348,5079265,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jvos,jvos,jvos,2022-07-15 01:24,2022-11-16 04:55,2023-10-01 09:56,2022-07-21 05:45,jfx19,,,,,,jfx19,javafx,,0,regression,regression_8277785,,,,,,,,,,,,,,,,"After the fix for JDK-8277785, there is a new issue with TreeTableView: the tree jumps to the top when a TreeItem is expanded or collapsed.
",,,,,,,,,,JDK-8297135,JDK-8290847,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293018,JDK-8291467,,,JDK-8277785,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xv2r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-07-15 06:20;kcr;This seems like a serious regression, which should be fixed in jfx19.;;;","2022-07-17 11:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/836
Date: 2022-07-17 17:56:11 +0000;;;","2022-07-21 05:45;dukebot;Changeset: 6da05c2c
Author:    Johan Vos <jvos@openjdk.org>
Date:      2022-07-21 12:42:21 +0000
URL:       https://git.openjdk.org/jfx/commit/6da05c2c7ed8f3911a43f51cbce2a5988a011c7d
;;;","2022-11-16 00:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/89
Date: 2022-11-16 08:13:46 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Start/stop displaysync affects performance in metal rendering pipeline,JDK-8290344,5079261,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,avu,avu,avu,2022-07-15 00:20,2022-09-06 17:29,2023-10-01 09:56,2022-08-30 01:25,17,18,19,,,,20,client-libs,,0,Lanai,,,,,,,,,,,,,,,,,"Currently to perform each update metal starts and then stops CVDisplayLink. This is not a common scenario for the display link api (it's used for video playback for example) therefore, constant starting and stopping affect performance. The current solution can be improved by reusing the same CVDisplayLink thread for subsequent updates. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287694,,,,,,,,,,,"2022-08-24 06:25;avu;m1_perf_upd.pdf;https://bugs.openjdk.org/secure/attachment/100532/m1_perf_upd.pdf","2022-07-15 04:27;avu;m1_results.pdf;https://bugs.openjdk.org/secure/attachment/99976/m1_results.pdf",,,,,,,,,,,,,,,,,,17,,os_x,,,,,"0|i2xv1v:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-07-15 04:28;avu;Please see RenderPerfTest on MBP(13-inch, M1, 2020);;;","2022-07-15 04:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9512
Date: 2022-07-15 11:32:20 +0000;;;","2022-08-24 06:29;avu;Here are (m1_perf_upd.pdf) updated performance results on MBP(13-inch, M1, 2020). It's more precise measurements (median of 5 runs).;;;","2022-08-30 01:25;dukebot;Changeset: f766d927
Author:    Alexey Ushakov <avu@openjdk.org>
Date:      2022-08-30 08:23:58 +0000
URL:       https://git.openjdk.org/jdk/commit/f766d92755276a40f0cdc087db32c285548572fe
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update FreeType to 2.12.1,JDK-8290334,5079251,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,vdyakov,vdyakov,2022-07-14 20:09,2023-04-25 18:16,2023-10-01 09:56,2022-07-18 09:10,11,17,19,20,,,20,client-libs,,0,11-bp,17-bp,3rdparty,freetype,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,noreg-other,sn_123,"Freetype 2.12.1 was released on May 1, 2022

",,,,,,,,,,JDK-8291489,JDK-8291623,JDK-8291288,JDK-8290884,JDK-8290922,JDK-8291339,JDK-8291172,JDK-8291741,,,,,,,,,,,,,JDK-8218098,,JDK-8306881,,JDK-8285686,,,JDK-8295488,,,,,,JDK-8290540,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xuzn:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-07-15 15:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9524
Date: 2022-07-15 21:59:57 +0000;;;","2022-07-18 09:10;dukebot;Changeset: ea8b75cf
Author:    Phil Race <prr@openjdk.org>
Date:      2022-07-18 16:05:03 +0000
URL:       https://git.openjdk.org/jdk/commit/ea8b75cfe453f5806a96ca85dd5e31724750a88f
;;;","2022-07-18 16:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/7
Date: 2022-07-18 23:45:55 +0000;;;","2022-07-19 08:12;prr;Fix Request
Backport to 19u requested of this upgrade of freetype in line with policy to keep all update releases trains in sync
Fix applies cleanly and testing passes : 19u PR here :https://git.openjdk.org/jdk19u/pull/7;;;","2022-07-25 08:03;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
One of the recurring update of external libs we should consume, too.
Clean backport.
SAP nightly testing passed.;;;","2022-07-25 08:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/595
Date: 2022-07-25 15:12:43 +0000;;;","2022-07-26 07:38;yan;Fix request (15u, 13u)

backporting for parity with major releases.
Clean backport.;;;","2022-07-26 07:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/241
Date: 2022-07-26 14:38:43 +0000;;;","2022-07-27 04:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/379
Date: 2022-07-27 11:23:12 +0000;;;","2022-07-28 07:11;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
One of the recurring update of external libs we should consume, too.
Clean backport. 
SAP nightly testing passed;;;","2022-07-28 08:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1281
Date: 2022-07-28 15:45:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Binding value left null when immediately revalidated in invalidation listener,JDK-8290331,5079248,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jhendrikx,jhendrikx,jhendrikx,2022-07-14 16:31,2022-08-01 06:34,2023-10-01 09:56,2022-07-15 16:38,jfx19,,,,,,jfx19,javafx,,0,regression,regression_8274771,,,,,,,,,,,,,,,,"I just discovered a bug that was introduced as part of the fluent bindings PR.  It affects all ObjectBinding's.

Below program will print ""null"" for binding.getValue(), which is incorrect (it should be false).

        SimpleObjectProperty<Boolean> condition = new SimpleObjectProperty<>(true);
        ObservableValue<String> binding = condition.map(Object::toString);

        binding.addListener(o -> { binding.getValue(); });

        condition.set(false);

        System.out.println("">>> binding: "" + binding.getValue());

This is caused by the clearing of the cached value in ObjectBinding when a binding is being invalidated.  This clearing however did not take into account that the binding might become valid again while it is informing its listeners.

This is fixed by checking if the binding is still invalid after calling listeners before clearing the value:

    @Override
    public final void invalidate() {
        if (valid) {
            valid = false;
            onInvalidating();
            ExpressionHelper.fireValueChangedEvent(helper);

            if (!valid) {  // if still invalid after calling listeners...
                value = null;  // clear cached value to avoid hard reference to stale data
            }
        }
    }

I think this must be fixed in jfx 19 or the fluent bindings PR must be reverted.

I will open a PR in a moment which solves the issue.",,,,,,,,,,JDK-8290395,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291552,,,,,,,,,,JDK-8274771,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xuyz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2022-07-14 16:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/829
Date: 2022-07-14 23:37:31 +0000;;;","2022-07-15 16:38;dukebot;Changeset: 4959f1bc
Author:    John Hendrikx <jhendrikx@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-07-15 23:36:41 +0000
URL:       https://git.openjdk.org/jfx/commit/4959f1bce6078230353af4ed6552e1415b1adfaa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ensure that all directory streams are closed in java.base,JDK-8290316,5079226,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rjernst,chegar,chegar,2022-07-14 09:03,2022-07-27 19:39,2023-10-01 09:56,2022-07-20 23:25,17,20,,,,,20,core-libs,,0,noreg-other,,,,,,,,,,,,,,,,,"There are a number of places where the internal implementation
indirectly uses directory streams but neglects to explicitly close them.
It is recommended to always close directory streams to ensure that any
resources held for the open directory are freed.

The usage of directory streams (not closed) is through the following
calls: Files::list, Files::walk, and Files::find. Specifically a number
of unclosed calls are in ModulePatcher, ModuleReferences, ModulePath,
ExplodedImage, and HijrahChronology.

These unclosed streams may not be all that much of a problem in the
happy case (where the stream is exhausted), but can certainly, and have
been noticed, leaking file descriptors in the case where an error occurs
deep in the directory hierarchy. Either way, it is best practice to
ensure that they are always closed.

(note: there are a small number of similar issues in the jlink area, but
they'll be addressed separately)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290359,JDK-8290353,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xuu3:",9223372036854775807,b08,,,,,,,,,,,"2022-07-15 01:53;alanb;ModulePatcher.patchIfNeeded, ModulePath.explodedPackages, and ModuelHashes.computeHash should be fixed but I don't think we should rush in to change the ModuleReader.list implementations. ModuleReader::list was intended to allow for lazy implementation but doesn't make it clear in the javadoc that the returned stream should be closed to avoid a resource leak. So it might be that the spec for the list method needs to be clarified on this point.

;;;","2022-07-15 02:25;chegar;Yeap. In my local repo I had marked `ModuleReader.list` as having a couple of possibilities; spec clarification requiring the returned stream to be closed or, eagerly consume the dir stream and return a stream over a collection, etc.  But we're in agreement, this needs discussion. To that end let's separate out ModuleReader::list, since it is more involved. I filed a separate issue, JDK-8290353, track this.

Specifically, this issue will *not* propose any changes to ModuleReferences.ExplodedModuleReader::list. That will be addressed by JDK-8290353.;;;","2022-07-15 09:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9518
Date: 2022-07-15 16:06:21 +0000;;;","2022-07-20 23:25;dukebot;Changeset: 53fc495e
Author:    Ryan Ernst <ryan@iernst.net>
Committer: Chris Hegarty <chegar@openjdk.org>
Date:      2022-07-21 06:19:00 +0000
URL:       https://git.openjdk.org/jdk/commit/53fc495e3aca7d89af697639d727051fb9adf9c7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Produce warning when user specified java.io.tmpdir directory doesn't exist,JDK-8290313,5079222,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,wxiao,shadowbug,shadowbug,2022-07-14 07:38,2023-09-08 14:11,2023-10-01 09:56,2022-11-23 09:12,,,,,,,20,core-libs,,0,bugdb_34382783,Internal,release-note=yes,,,,,,,,,,,,,,,"submitter hit an error in use of the java.io.File.createTempFile API - following exception produced:

java.io.IOException: No such file or directory
        at java.io.UnixFileSystem.createFileExclusively(Native Method)
        at java.io.File.createTempFile(File.java:2001)
        at java.io.File.createTempFile(File.java:2047)

turns out that they had supplied a bad, non-existent, directory for the 'java.io.tmpdir' system property

We should investigate if any hint of this can be passed to end user exception",,,,,,,,,,JDK-8300779,JDK-8300778,JDK-8300780,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297528,JDK-8315960,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xut7:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,Verified,,"2022-08-23 23:26;alanb;I don't think emitting a warning is the right thing to do here. However, there are a number of things that could be explored:

1. Extend jdk.includeInExceptions to include ""file"", meaning opt-in in secure deployments to include the tmp directory in the exception.

2. A warning at startup if -Djava.io.tmpdir is specified on the command line and the directory does not exist.

3. Emit a JFR event.;;;","2022-09-07 08:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9989
Date: 2022-08-23 18:32:30 +0000;;;","2022-11-15 12:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11174
Date: 2022-11-15 19:02:30 +0000;;;","2022-11-23 09:12;dukebot;Changeset: 8df3bc4e
Author:    Weibing Xiao <weibing.xiao@oracle.com>
Committer: Sean Coffey <coffeys@openjdk.org>
Date:      2022-11-23 17:10:05 +0000
URL:       https://git.openjdk.org/jdk/commit/8df3bc4ec57a15d5bca844e030c8cc3f8c077a49
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaDoc of index parameter of method JTabbedPane.insertTab,JDK-8290278,5078839,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,webbuggrp,webbuggrp,2022-07-08 00:57,2022-08-15 16:53,2023-10-01 09:56,2022-08-09 04:57,11,17,18,19,8,,20,client-libs,,0,dcspn,noreg-doc,sn_124,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
JavaDoc of index parameter of method JTabbedPane.insertTab(String title, Icon icon, Component component, String tip, int index) incorrectly states that index must be greater than 0, when in fact it may be 0. 

Currently: index - the position to insert this new tab (> 0 and <= getTabCount())
Must be: index - the position to insert this new tab (>= 0 and <= getTabCount())


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290420,,,,,,,,,,,,,,,,,,,,,,,"2022-07-13 22:46;pnarayanaswa;TabbedPaneDemo.java;https://bugs.openjdk.org/secure/attachment/99962/TabbedPaneDemo.java",,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xsg3:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-07-13 22:43;pnarayanaswa;From the testcase attached, checked with passing 0 as an index -the position to insert new tab.
Moving to JDK Project of more review.;;;","2022-07-14 09:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9496
Date: 2022-07-14 15:58:18 +0000;;;","2022-07-17 21:06;tr;InsertTab() method takes the parameter index which specifies the position of new Tab to be inserted. The Java Doc for the Index range of lower bounds has been updated from < 0 to <= 0, which is expected.;;;","2022-08-09 04:57;dukebot;Changeset: cbc9040f
Author:    Tejesh R <tr@openjdk.org>
Committer: Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-08-09 11:53:41 +0000
URL:       https://git.openjdk.org/jdk/commit/cbc9040f3a3a86942fa8277860eedc1f5142b64b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gc/shenandoah/TestVerifyJCStress.java fails due to invalid tag: required after JDK-8290023,JDK-8290269,5079165,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-07-13 16:02,2022-07-21 02:34,2023-10-01 09:56,2022-07-14 01:35,20,,,,,,20,hotspot,,0,gc-shenandoah,tencent-interest,testbug,,,,,,,,,,,,,,,TEST RESULT: Error. Parse Exception: Invalid tag: required,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290023,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xugj:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-07-13 16:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9485
Date: 2022-07-13 23:09:19 +0000;;;","2022-07-14 01:34;dukebot;Changeset: be58cbc4
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-07-14 08:31:05 +0000
URL:       https://git.openjdk.org/jdk/commit/be58cbc417ba5e08aa2118f9522c72c96c181a86
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/util/concurrent/locks/Lock/OOMEInAQS.java fails with ""exit code: 0""",JDK-8290264,5079158,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,dl,dcubed,dcubed,2022-07-13 13:16,2023-01-26 14:43,2023-10-01 09:56,2022-07-14 12:57,20,,,,,,20,core-libs,,0,intermittent,tier1,tier4,tier6,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

java/util/concurrent/locks/Lock/OOMEInAQS.java

Here's a snippet from the log file:

#section:main
----------messages:(4/238)----------
command: main -XX:-UseGCOverheadLimit -Xmx24M -XX:-UseTLAB OOMEInAQS
reason: User specified action: run main/othervm -XX:-UseGCOverheadLimit -Xmx24M -XX:-UseTLAB OOMEInAQS 
Mode: othervm [/othervm specified]
elapsed time (seconds): 0.707
----------configuration:(0/0)----------
----------System.out:(0/0)----------
----------System.err:(0/0)----------
----------rerun:(37/5493)*----------

<snip>

result: Failed. Unexpected exit from test [exit code: 0]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8066859,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2xuez:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,Verified,,"2022-07-13 13:24;dcubed;java/util/concurrent/locks/Lock/OOMEInAQS.java is a new test that was
added in jdk-20+6-302 as part of the fix for:

JDK-8066859 java/lang/ref/OOMEInReferenceHandler.java failed with java.lang.Exception: Reference Handler thread died

This failure did not show up in jdk-20+6-30[234]-tier1 so I'm
labeling this bug as 'intermittent'.;;;","2022-07-13 13:26;dcubed;[~dl] - This new test that you recently added has failed with
""exit code: 0"" on linux-aarch64 in Tier1. Can you please take
a look?;;;","2022-07-13 13:52;dl;Is System.exit(0) not counted as a success? Because this is an OutOfMemoryError test, this is the simplest way to accommodate OOM failures that aren't being tested. Is there an alternative?;;;","2022-07-13 14:06;martin;No.
https://openjdk.org/jtreg/faq.html#should-a-test-call-the-system.exit-method;;;","2022-07-13 14:15;martin;It seems difficult to write a non-flaky test that checks recoverability in the presence of OOME.
The OOME could cause any operation of the JVM to fail (e.g. in the finalizer thread).

I imagine some bytecode modification tool that could cause AQS allocations to fail with a synthetic OOME, but that would be a lot of work to implement, given that we don't have any support for writing tests this way.;;;","2022-07-13 14:31;dl;On further thought, it should not be hard to avoid System.exit, by deallocating and GCing et thee end of every path. Will do.;;;","2022-07-13 19:08;dholmes;The way to write OOME inducing tests that are more reliable is to reserve a large chunk of heap via direct allocation, then run the code you want to encounter the OOME, catch it and release the memory reserve try to remove the potential for further OOME in unexpected places. Whilst there are many threads in a running VM most of them are blocked most of the time and so won't get hit with the OOME unless the test also causes them to run. This is OOME-resistant rather than OOME-proof. :);;;","2022-07-14 04:53;dl;An update avoiding use of System.exit to cover cases where OOMEs occur outside of the cases covered by the test is at https://github.com/DougLea/jdk/tree/JDK-8290264 I don't know of a proof that it can never mis-report failure though.;;;","2022-07-14 05:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9491
Date: 2022-07-14 11:57:37 +0000;;;","2022-07-14 12:57;dukebot;Changeset: 890bcedd
Author:    Doug Lea <dl@openjdk.org>
Date:      2022-07-14 19:53:31 +0000
URL:       https://git.openjdk.org/jdk/commit/890bcedd49fb791074862cc295c0e6bf64ef4d81
;;;","2022-07-15 07:07;dcubed;This fix is integrated in jdk-20+7-320.;;;",,,,,,,,,,,,,,,,,,,,,,
"gc/g1/TestVerificationInConcurrentCycle.java#id1 fails with ""Error. can't find sun.hotspot.WhiteBox in test directory or libraries""",JDK-8290253,5079145,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,dcubed,dcubed,2022-07-13 10:47,2022-07-18 13:18,2023-10-01 09:56,2022-07-13 11:35,20,,,,,,20,hotspot,,0,gc-g1,regression,testbug,tier2,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

gc/g1/TestVerificationInConcurrentCycle.java#id1

Here's a snippet from the log file:

#section:script_messages
----------messages:(7/717)----------
JDK under test: /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+6-301/linux-aarch64.jdk/jdk-20
java version ""20-ea"" 2023-03-21
Java(TM) SE Runtime Environment (build 20-ea+6-301)
Java HotSpot(TM) 64-Bit Server VM (build 20-ea+6-301, mixed mode, sharing)
Library /test/lib; kind: packages
   source directory: /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+6-301/src.full/open/test/lib
   class directory: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S10144/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0224600a-a053-4a3a-860f-9033a276539a/runs/6c977ba8-79a1-4561-816a-385add23acfc/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_gc/classes/1/test/lib

#section:build
----------messages:(2/99)----------
command: build sun.hotspot.WhiteBox
reason: User specified action: run build sun.hotspot.WhiteBox 
result: Not run. Test running...


test result: Error. can't find sun.hotspot.WhiteBox in test directory or libraries",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275662,JDK-8290023,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xuc3:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-07-13 10:53;dcubed;The failing test, gc/g1/TestVerificationInConcurrentCycle.java, is modified
by the following fix in jdk-20+6-301-tier2:

JDK-8290023: Remove use of IgnoreUnrecognizedVMOptions in gc tests;;;","2022-07-13 10:54;dcubed;[~tschatzl] - Please take a look at this new failure.
I suspect you have a merge error with [~coleenp]'s
removal of the HotSpot white box stuff.;;;","2022-07-13 11:03;dcubed;This was the bug that removed the HotSpot white box stuff:

JDK-8275662: remove test/lib/sun/hotspot;;;","2022-07-13 11:10;dcubed;This is likely the fix:

$ diff test/hotspot/jtreg/gc/g1/TestVerificationInConcurrentCycle.java{,.new}
51,52c51,52
<  * @build sun.hotspot.WhiteBox
<  * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox
---
>  * @build jdk.test.whitebox.WhiteBox
>  * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox

I building a test repo now...;;;","2022-07-13 11:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9483
Date: 2022-07-13 18:25:18 +0000;;;","2022-07-13 11:34;dukebot;Changeset: 5e3ecff7
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-07-13 18:31:03 +0000
URL:       https://git.openjdk.org/jdk/commit/5e3ecff7a60708aaf4a3c63f85907e4fb2dcbc9e
;;;","2022-07-13 11:54;dcubed;Reproduced the failure on my MBP13 with 'release' bits and verified that
the test passes with the fix in place.;;;","2022-07-13 12:10;dcubed;The fix for this bug is integrated in jdk-20+6-303.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Add TEST.properties to java/nio/channels/FileChannel and move tests out of largeMemory sub-dir,JDK-8290252,5079144,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-07-13 10:24,2022-07-27 15:48,2023-10-01 09:56,2022-07-14 08:29,19,,,,,,19,core-libs,,0,noreg-self,test-only,,,,,,,,,,,,,,,,"Add a file TEST.properties with content

exclusiveAccess.dirs=.

so that FileChannel tests do not run in parallel with each other, and move the tests from the largeMemory sub-directory to their original locations and remove that sub-dir.",,,,,,,,,,JDK-8291435,JDK-8291311,JDK-8290410,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290095,JDK-8289526,JDK-8289470,JDK-8278469,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xubv:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-07-13 10:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/139
Date: 2022-07-13 17:40:48 +0000;;;","2022-07-14 08:29;dukebot;Changeset: fb27ddcb
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-07-14 15:23:42 +0000
URL:       https://git.openjdk.org/jdk19/commit/fb27ddcbe5a503ddd841e55baaa9a10f8422b736
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: disable Loom for iu mode,JDK-8290250,5079142,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2022-07-13 09:58,2022-07-27 15:50,2023-10-01 09:56,2022-07-14 10:23,19,,,,,,19,hotspot,,0,gc-shenandoah,loom,redhat-interest,,,,,,,,,,,,,,,"Loom is not stable with Shenandoah iu mode. Let's disable it for 19, and address it in 20+",,,,,,,,,,JDK-8291313,JDK-8291436,JDK-8290411,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xubf:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-07-13 11:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/140
Date: 2022-07-13 18:39:51 +0000;;;","2022-07-14 10:23;dukebot;Changeset: c8e03151
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-07-14 17:19:27 +0000
URL:       https://git.openjdk.org/jdk19/commit/c8e03151142c444710321c2e8a41e242283922a4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"test fails ""assert(init != __null) failed: initialization not found""",JDK-8290246,5079136,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kvn,dcubed,dcubed,2022-07-13 08:57,2022-09-27 05:37,2023-10-01 09:56,2022-07-14 22:09,11,17,19,20,,,20,hotspot,,0,c2,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,oracle-triage-20,tier2,tier3,,,,,,"The following test failed in the JDK20 CI:

applications/ctw/modules/java_desktop_2.java

Here's snippets from the failure's hs_err_pid file:

#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S5094/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fcd64a19-1dac-41a4-99ab-c89a68e285a9/runs/e3c63533-f3c5-4084-a257-bfdbff386962/workspace/open/src/hotspot/share/opto/callnode.cpp:1629), pid=17206, tid=38403
#  assert(init != __null) failed: initialization not found
#
# JRE version: Java(TM) SE Runtime Environment (20.0+6) (fastdebug build 20-ea+6-298)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+6-298, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)

<snip>

---------------  T H R E A D  ---------------

Current thread (0x000000013a811810):  JavaThread ""C2 CompilerThread1"" daemon [_thread_in_native, id=38403, stack(0x000000016de70000,0x000000016e073000)]


Current CompileTask:
C2:  11097 4096    b        javax.swing.plaf.basic.BasicPopupMenuUI$BasicMenuKeyListener::menuKeyPressed (312 bytes)

Stack: [0x000000016de70000,0x000000016e073000],  sp=0x000000016e06f150,  free space=2044k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x11abfb4]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x5d8
V  [libjvm.dylib+0x11ac6f0]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40
V  [libjvm.dylib+0x604720]  report_vm_error(char const*, int, char const*, char const*, ...)+0x80
V  [libjvm.dylib+0x47c1e0]  AllocateArrayNode::make_ideal_length(TypeOopPtr const*, PhaseTransform*, bool)+0x180
V  [libjvm.dylib+0xdb4a3c]  LoadRangeNode::Ideal(PhaseGVN*, bool)+0x180
V  [libjvm.dylib+0xee4f9c]  PhaseIterGVN::transform_old(Node*)+0x140
V  [libjvm.dylib+0xee48a0]  PhaseIterGVN::optimize()+0xdc
V  [libjvm.dylib+0x5701d8]  Compile::Optimize()+0x22c
V  [libjvm.dylib+0x56ed28]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x12e4
V  [libjvm.dylib+0x46ac38]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x180
V  [libjvm.dylib+0x58b094]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x6c8
V  [libjvm.dylib+0x58a7e0]  CompileBroker::compiler_thread_loop()+0x2a0
V  [libjvm.dylib+0x969b0c]  JavaThread::thread_main_inner()+0x238
V  [libjvm.dylib+0x1103f24]  Thread::call_run()+0x220
V  [libjvm.dylib+0xe8d64c]  thread_native_entry(Thread*)+0x160
C  [libsystem_pthread.dylib+0x7240]  _pthread_start+0x94
",,,,,,,,,,JDK-8291488,JDK-8294451,JDK-8291008,JDK-8291013,JDK-8291622,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-07-13 20:06;kvn;Test8290246.java;https://bugs.openjdk.org/secure/attachment/99959/Test8290246.java","2022-07-13 11:51;kvn;replay_modules_java_desktop_2876_27013.log;https://bugs.openjdk.org/secure/attachment/99955/replay_modules_java_desktop_2876_27013.log",,,,,,,,,,,aarch64,x86_64,,,,,,,,os_x,windows,,,,"0|i2xua3:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-13 08:58;dcubed;Starting this bug off as a P3 since it is a Tier2 test failure.;;;","2022-07-13 11:45;dcubed;Interesting... the failures did NOT reproduce in the next Tier2:
jdk-20+6-301-tier2, but did reproduce in jdk-20+6-298-tier3 which
followed the original sighting in jdk-20+6-298-tier2. This is very
strange and I'm not sure what to think.;;;","2022-07-13 11:52;kvn;I attached replay from one of failures on mac-x64.
Nothing pushing recently which may caused and the assert is old. I don't know what recent change may cause it.;;;","2022-07-13 12:32;kvn;I reproduced it with replay file. It could be related to random seed we use for testing:  -XX:StressSeed=1743550013;;;","2022-07-13 12:37;kvn;The failure is reproduced with

java -XX:+StressIGVN -XX:StressSeed=1743550013 -XX:-CreateCoredumpOnCrash -XX:+ReplayCompiles -XX:ReplayDataFile=replay_modules_java_desktop_2876_27013.log -XX:+ReplayIgnoreInitErrors sun.hotspot.tools.ctw.CompileTheWorld modules:java.desktop
;;;","2022-07-13 12:50;dcubed;Nice! I presume that will allow you to triage which build-ID introduced this failure mode?;;;","2022-07-13 13:00;dlong;I tried to reproduce the mac-arm failure with the replay file, but it didn't crash, and there's no core file.  I couldn't get it to crash on windows with the replay files either.;;;","2022-07-13 13:37;kvn;I reproduced it always on linux-x86 with attached replay file. Note, Allocation node can not have related Initialize node. It is normal. So the assert and code may have to be adjusted.;;;","2022-07-13 14:44;dlong;ILW = crash; intermittent in CTW tests only; no workaround = HLH = P2;;;","2022-07-13 15:08;kvn;The part of graph is dead - Allocate node's control is TOP:

  659  AllocateArray  === 1 591 592 8 1 (651 641 655 234 658 10 36 65 129 153 232 219 45 219 1 302 422 1 ) [[ 660 661 662 671 670 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int, bool ) BasicPopupMenuUI$BasicMenuKeyListener::menuKeyPressed @ bci:143 (line 360) !jvms: BasicPopupMenuUI$BasicMenuKeyListener::menuKeyPressed @ bci:143 (line 360)
;;;","2022-07-13 15:28;kvn;The code is this:
https://github.com/openjdk/jdk/blob/master/src/java.desktop/share/classes/javax/swing/plaf/basic/BasicPopupMenuUI.java#L355

                    if (matches == 0) {
                        firstMatch = j;
                        matches++;
                    } else {
                        if (indexes == null) {
                            indexes = new int[items.length];
                            indexes[0] = firstMatch;
                        }
                        indexes[matches++] = j;
                    }

Based on state of nodes in the the part of graph `indexes` is `null` and `matches` is `0`. So `new int[items.length]` is not executed and this subgraph indeed is dead:

   45  ConI  === 0  [[ ... ]]  #int:0
  620  If  === 615 45  [[ 621 622 ]] P=0.900000, C=-1.000000 !jvms: BasicPopupMenuUI$BasicMenuKeyListener::menuKeyPressed @ bci:122 (line 355)
  621  IfTrue  === 620  [[ 631 ]] #1 !orig=637 !jvms: BasicPopupMenuUI$BasicMenuKeyListener::menuKeyPressed @ bci:122 (line 355)
  631  If  === 621 45  [[ 637 ]] P=0.900000, C=-1.000000 !jvms: BasicPopupMenuUI$BasicMenuKeyListener::menuKeyPressed @ bci:137 (line 359)
  637  IfFalse  === 631  [[ 659 ]] #0 !jvms: BasicPopupMenuUI$BasicMenuKeyListener::menuKeyPressed @ bci:137 (line 359)
  659  AllocateArray  === 637 591 592 8 1 (651 641 655 234 658 10 36 65 129 153 232 219 45 300 1 302 422 1 ) [[ 660 661 662 669 670 671 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int, bool ) BasicPopupMenuUI$BasicMenuKeyListener::menuKeyPressed @ bci:143 (line 360) !jvms: BasicPopupMenuUI$BasicMenuKeyListener::menuKeyPressed @ bci:143 (line 360)
;;;","2022-07-13 15:38;kvn;The stress flag shuffles nodes in worklist:

  if (StressIGVN) {
    shuffle_worklist();
  }

I think we need to check for TOP control in AllocateNode::Ideal_allocation().;;;","2022-07-13 15:43;kvn;Or attach CastII(length) to Allocate node control projection if Initialize node is not present. As I said before we may have legal cases like that (as I remember when working on EA).
;;;","2022-07-13 16:35;kvn;I choose second solution. Now I need to create regression test.
;;;","2022-07-13 18:27;kvn;I was not able to create reproducible standalone test. It is very hard to schedule LoadRange node processing before path goes dead.
;;;","2022-07-13 18:34;kvn;Standalone test requires -XX:+StressIGVN -XX:StressSeed=X where X is unknown. I tried iterate about 1000 values without luck.;;;","2022-07-13 18:40;kvn;I reproduced it by using WB and CTW classes after local run jtreg command (jtreg -testjdk:/jdk_git/build/fastdebug/images/jdk/ applications/ctw/modules/java_desktop_2.java)

java -XX:-CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -XX:-TieredCompilation -Djava.awt.headless=true -Xbatch -XX:-UseCounterDecay -XX:-ShowMessageBoxOnError -XX:+UnlockDiagnosticVMOptions -XX:+DisplayVMOutputToStderr -DCompileTheWorldStartAt=2500 -DCompileTheWorldStopAt=3000 -XX:+WhiteBoxAPI -Xbootclasspath/a:/jdk_git/open/test/hotspot/jtreg/JTwork/classes/testlibrary/ctw/src:/jdk_git/open/test/hotspot/jtreg/JTwork/classes/test/lib -XX:CompileCommand=exclude,java/lang/invoke/MethodHandle.* -XX:+IgnoreUnrecognizedVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:+StressCCP -XX:StressSeed=1743550013 sun.hotspot.tools.ctw.CompileTheWorld modules:java.desktop;;;","2022-07-13 20:14;kvn;I attached Test8290246.java which I tried to failed without success.

The idea is: uncommon_trap in loop indicates that loop will be executed only once, locals values are known (`matches = 0`, `indexes = null`) for first iteration, as result the branch with allocation  (`new int[items.length]`) is not taking - dead. The hard part is to re-arrange IGVN worklist so that LoadRangeNode is processed after InitializeNode is removed.;;;","2022-07-13 20:17;kvn;I will file PR without test. The only reliable way to reproduce failure is to use attached replay file for now.;;;","2022-07-14 11:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9497
Date: 2022-07-14 18:09:49 +0000;;;","2022-07-14 22:09;dukebot;Changeset: 70fce07a
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2022-07-15 05:07:21 +0000
URL:       https://git.openjdk.org/jdk/commit/70fce07a382896a8091413d7269bb16f33122505
;;;","2022-07-27 08:54;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Simple C2 change, typical but low risk of changing the compiler.
Clean backport.  SAP nightly testing passed.;;;","2022-07-27 09:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/601
Date: 2022-07-27 15:57:42 +0000;;;","2022-07-28 07:09;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
Simple C2 change, typical but low risk of changing the compiler.
Clean backport.
SAP nightly testing passed.;;;","2022-07-28 08:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1282
Date: 2022-07-28 15:46:18 +0000;;;","2022-09-22 06:33;thartmann;Fix Request (JDK 19u)
Fixes an assert in C2. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 11u and 17u. ;;;","2022-09-22 06:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/35
Date: 2022-09-22 13:33:24 +0000;;;",,,,,,
move seeTagToContent from HtmlDocletWriter to TagletWriterImpl,JDK-8290243,5079133,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-07-13 08:26,2022-08-03 20:36,2023-10-01 09:56,2022-07-29 14:57,19,,,,,,20,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,"HtmlDocletWriter contains a non-trivial method, `seeTagToContent`, to handle `@see` and `{@link...}` tags, converting them to `Content`.

This is strange in two ways:

1. The method handles both kinds of tags. While there is a lot of commonality in the handling of `{@link...}` and one of the forms of `@see`, the latter has additional forms that are not related to `{@link...}`. This suggests splitting the method into two ""front-end"" methods and a shared ""back-end"" method to handle the case of a `ReferenceTree`, which is the shared common case.

2. The ""standard"" place for code to translate tags to `Content` is `TagletWriter[Impl]`.  This suggests the overall functionality of `seeTagToContent` should be in `TagletWriterImpl`, possibly with appropriate interface methods defined in `TagletWriter`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281969,,JDK-8290330,,,,,,,JDK-8273721,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xu9f:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-07-13 11:53;prappo;Jon, when working on this, consider a similar method, which started as a copy-paste of seeTagToContent, linkToContent. It would be good, if you factor it in your work: 

    // TODO: this method and seeTagToContent share much of the code; consider factoring common pieces out
    public Content linkToContent(Element referrer, Element target, String targetSignature, String text)
;;;","2022-07-13 14:25;jjg;[~prappo] Already on it ...;;;","2022-07-14 12:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9499
Date: 2022-07-14 19:44:22 +0000;;;","2022-07-15 09:17;jjg;Actually, blocked by the pending backport of JDK-8281969 to JDK mainline.;;;","2022-07-29 14:57;dukebot;Changeset: 8179a191
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-07-29 21:55:20 +0000
URL:       https://git.openjdk.org/jdk/commit/8179a191f017540e19916a35040236ea2a13878b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] use JVMCIKlassHandle to protect raw Klass* values from concurrent G1 scanning,JDK-8290234,5079122,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,dnsimon,dnsimon,2022-07-13 05:16,2022-07-25 07:26,2023-10-01 09:56,2022-07-13 12:20,20,,,,,,20,hotspot,,0,jdk11-graalvm,jdk17-graalvm,jdk19-graalvm,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,A bug was introduced in JDK-8289094 whereby a Klass* value is not properly handlized with a JVMCIKlassHandle while in the process of creating a HotSpotResolvedObjectTypeImpl to wrap it.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289094,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xu6z:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-13 05:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9480
Date: 2022-07-13 12:24:50 +0000;;;","2022-07-13 12:20;dukebot;Changeset: 74ac5df9
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2022-07-13 19:15:53 +0000
URL:       https://git.openjdk.org/jdk/commit/74ac5df96fb4344f005180f8643cb0c9223b1556
;;;","2022-07-13 14:54;dlong;ILW = possible crash; unknown; no workaround = MMH = P3;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/foreign/malloc/TestMixedMallocFree.java crashed in JDK19 ATR run,JDK-8290231,5079119,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jvernee,msheppar,msheppar,2022-07-13 03:30,2023-02-24 06:30,2023-10-01 09:56,2022-11-30 12:03,19,,,,,,20,core-libs,,0,atr,imt,sqe,,,,,,,,,,,,,,,JDK19 ATR externally run test on sanity check platforms,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282608,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xu6b:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2022-07-14 03:49;jvernee;This test allocates on the native side with malloc, and then tries to free that memory on the Java side. The library that we look up on the Java side is either ucrtbase.dll, or msvcrt.dll as a fallback. The fact that we're seeing this crash probably means that the test machine doesn't have ucrtbase.dll, but it does have a newer standard runtime library other than msvcrt.dll (one of the msvcp*.dll libraries).

So, what happens is: the native code in the test ends up being linked against this newer runtime library. We allocate using the newer runtime library's malloc function. Look up free from Java, don't find ucrtbase.dll so fall back to msvcrt.dll. Call `free` from msvcrt.dll which is not the right one, and then crash due to the allocator mismatch.

I think we should maybe just remove this test. In practice, we can not guarantee that native code is linked against the same dll as the one we pick to be the default library (for instance, the native code could have been linked against an older dll, even while ucrtbase.dll is present on the system).

Trying to mach up the 2 libraries was important when we had public allocateMemory and freeMemory functions, but those were removed from the API.

Using matching allocate & free pairs, which some of the other tests do, still works.;;;","2022-11-29 08:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11417
Date: 2022-11-29 15:40:53 +0000;;;","2022-11-30 12:03;dukebot;Changeset: 1722f9cc
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2022-11-30 20:00:59 +0000
URL:       https://git.openjdk.org/jdk/commit/1722f9cce346563923fcebd92b32ea2cb30ea744
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AIX build failure by JDK-8289780,JDK-8290218,5079104,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,itakiguchi,itakiguchi,itakiguchi,2022-07-12 23:50,2023-01-12 10:38,2023-10-01 09:56,2022-07-13 21:38,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,"AIX build was failed by following messages:

* For target hotspot_variant-server_libjvm_objs_BUILD_LIBJVM_link:
ld: 0711-317 ERROR: Undefined symbol: collector_func_load
ld: 0711-317 ERROR: Undefined symbol: .collector_func_load
ld: 0711-344 See the loadmap file /home/jdkbld/git/jdk/build/aix-ppc64-server-release/hotspot/variant-server/libjvm/objs/libjvm.loadmap for more information.

In my investigation, JDK-8289780 affects this issue on src/hotspot/share/prims/forte.cpp.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290567,,,,,,,,JDK-8289780,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,20,,aix,,,,,"0|i2xu2z:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-07-13 10:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9482
Date: 2022-07-13 16:55:38 +0000;;;","2022-07-13 21:37;dukebot;Changeset: 5d588eda
Author:    Ichiroh Takiguchi <itakiguchi@openjdk.org>
Date:      2022-07-14 04:35:54 +0000
URL:       https://git.openjdk.org/jdk/commit/5d588eda97aeab0c8fda6ad8d332d6a4cae31b05
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jcup.md missing additional text,JDK-8290209,5079088,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,joehw,jehung,jehung,2022-07-12 15:43,2022-09-19 07:38,2023-10-01 09:56,2022-07-13 14:05,11-pool,17-pool,19,8,,,19,xml,,0,CPU22_10-critical-approved,CPU22_10-critical-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-doc,,,,,,,,,,,"Some license text is missing from the end of the jcup.md file:

This is an open source license. It is also GPL-Compatible (see entry for ""Standard ML of New Jersey""). The portions of CUP output which are hard-coded into the CUP source code are (naturally) covered by this same license, as is the CUP runtime code linked with the generated parser.",,,,,,,,,,JDK-8292164,JDK-8292163,JDK-8291433,JDK-8292364,JDK-8290318,JDK-8292291,JDK-8293900,JDK-8294024,JDK-8292165,JDK-8292288,JDK-8291307,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xtzf:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,,,"2022-07-13 12:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/141
Date: 2022-07-13 19:34:30 +0000;;;","2022-07-13 14:04;dukebot;Changeset: 2bf6285c
Author:    Joe Wang <joehw@openjdk.org>
Date:      2022-07-13 21:02:45 +0000
URL:       https://git.openjdk.org/jdk19/commit/2bf6285c80f078d8451afb5682ee307bb13be179
;;;","2022-09-15 03:33;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle to 17.0.6. I think there is no need to go for critical request for this.
No risk, only docu change.
Clean backport.
SAP nighlyt testing passes. ;;;","2022-09-15 03:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/673
Date: 2022-09-15 10:31:57 +0000;;;","2022-09-19 03:46;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle to 11.0.18. I think there is no need to go for critical request for this.
No risk, only docu change.
Clean backport.
SAP nighlyt testing passes. ;;;","2022-09-19 03:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1360
Date: 2022-09-19 10:45:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing notice in dom.md,JDK-8290207,5079086,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,joehw,jehung,jehung,2022-07-12 15:35,2022-09-19 07:09,2023-10-01 09:56,2022-07-13 10:35,11-pool,17-pool,19,8,,,19,xml,,0,CPU22_10-critical-approved,CPU22_10-critical-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-doc,,,,,,,,,,,"Missing notice in dom.md.  Please add:

### W3C Software Notice
Copyright © 2004 World Wide Web Consortium, (Massachusetts Institute of Technology, European Research Consortium for Informatics and Mathematics, Keio University). All Rights Reserved.

The DOM bindings are published under the W3C Software Copyright Notice and License. The software license requires ""Notice of any changes or modifications to the W3C files, including the date changes were made."" Consequently, modified versions of the DOM bindings must document that they do not conform to the W3C standard; in the case of the IDL definitions, the pragma prefix can no longer be 'w3c.org'; in the case of the Java language binding, the package names can no longer be in the 'org.w3c' package. ",,,,,,,,,,JDK-8293898,JDK-8291305,JDK-8292162,JDK-8294015,JDK-8292292,JDK-8292161,JDK-8292222,JDK-8291432,JDK-8292254,JDK-8290317,JDK-8292160,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xtyz:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,,,"2022-07-12 17:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/138
Date: 2022-07-13 00:04:24 +0000;;;","2022-07-13 10:35;dukebot;Changeset: 73b83e01
Author:    Joe Wang <joehw@openjdk.org>
Date:      2022-07-13 17:32:02 +0000
URL:       https://git.openjdk.org/jdk19/commit/73b83e018838d3870733970b2bb22a8394b53330
;;;","2022-09-14 02:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/665
Date: 2022-09-14 09:53:50 +0000;;;","2022-09-15 03:29;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle to 17.0.6.  I think there is no need to go for critical request for this.
No risk, only docu change.
Clean backport.
SAP nighlyt testing passes.;;;","2022-09-16 00:41;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle to 11.0.18. I think there is no need to go for critical request for this.
No risk, only docu change.
Clean backport. 
SAP nightly testing passed.;;;","2022-09-16 00:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1358
Date: 2022-09-16 07:40:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"com/sun/jdi/InvokeHangTest.java fails with ""Debuggee appears to be hung""",JDK-8290200,5079079,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,dcubed,dcubed,2022-07-12 13:23,2023-05-27 06:43,2023-10-01 09:56,2023-03-21 11:02,19,21,,,,,21,core-svc,,0,intermittent,loom,noreg-self,problemlist,tier5,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

com/sun/jdi/InvokeHangTest.java

Here's a snippet from the log file:

#section:driver 
----------messages:(5/146)---------- 
command: driver InvokeHangTest 
reason: User specified action: run driver InvokeHangTest 
Mode: agentvm 
Agent id: 18 
elapsed time (seconds): 80.47 
----------configuration:(16/2115)---------- 

<snip> 

----------System.err:(42/2753)---------- 
[0ms] run args: [InvokeHangTarg] 
  Debugger: Breakpoint hit at InvokeHangTarg:97 
  Debugger: Invoking in threadinstance of InvokeHangTarg(name='Thread 1', id=291) 
[80371ms] failure: Debuggee appears to be hung 
java.lang.Exception: InvokeHangTest: failed; bkpts = 1 
at InvokeHangTest.runTests(InvokeHangTest.java:278) 
at TestScaffold.startTests(TestScaffold.java:433) 
at InvokeHangTest.main(InvokeHangTest.java:145) 
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104) 
at java.base/java.lang.reflect.Method.invoke(Method.java:578) 
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312) 
at java.base/java.lang.Thread.run(Thread.java:1589) 

com.sun.jdi.VMDisconnectedException 
at jdk.jdi/com.sun.tools.jdi.TargetVM.waitForReply(TargetVM.java:304) 
at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.waitForTargetReply(VirtualMachineImpl.java:1176) 
at jdk.jdi/com.sun.tools.jdi.PacketStream.waitForReply(PacketStream.java:89) 
at jdk.jdi/com.sun.tools.jdi.JDWP$ObjectReference$InvokeMethod.waitForReply(JDWP.java:4838) 
at jdk.jdi/com.sun.tools.jdi.ObjectReferenceImpl.invokeMethod(ObjectReferenceImpl.java:410) 
at InvokeHangTest.doInvoke(InvokeHangTest.java:153) 
at InvokeHangTest.breakpointReached(InvokeHangTest.java:199) 
at TestScaffold$EventHandler.notifyEvent(TestScaffold.java:194) 
at TestScaffold$EventHandler.run(TestScaffold.java:278) 
at java.base/java.lang.Thread.run(Thread.java:1589) 
JavaTest Message: Test threw exception: java.lang.Exception 
[80397ms] failure: Exception 
JavaTest Message: shutting down test 

[80397ms] FAILED: Exception occured in eventHandler: com.sun.jdi.VMDisconnectedException: connection is closed 
com.sun.jdi.VMDisconnectedException: connection is closed 
at jdk.jdi/com.sun.tools.jdi.TargetVM.send(TargetVM.java:293) 
at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.sendToTarget(VirtualMachineImpl.java:1172) 
at jdk.jdi/com.sun.tools.jdi.PacketStream.send(PacketStream.java:79) 
at jdk.jdi/com.sun.tools.jdi.JDWP$EventRequest$Set.enqueueCommand(JDWP.java:7104) 
at jdk.jdi/com.sun.tools.jdi.JDWP$EventRequest$Set.process(JDWP.java:7074) 
at jdk.jdi/com.sun.tools.jdi.EventRequestManagerImpl$EventRequestImpl.set(EventRequestManagerImpl.java:229) 
at jdk.jdi/com.sun.tools.jdi.EventRequestManagerImpl$EventRequestImpl.setEnabled(EventRequestManagerImpl.java:194) 
at jdk.jdi/com.sun.tools.jdi.EventRequestManagerImpl$EventRequestImpl.enable(EventRequestManagerImpl.java:179) 
at InvokeHangTest.breakpointReached(InvokeHangTest.java:204) 
at TestScaffold$EventHandler.notifyEvent(TestScaffold.java:194) 
at TestScaffold$EventHandler.run(TestScaffold.java:278) 
at java.base/java.lang.Thread.run(Thread.java:1589) 
----------System.out:(10/724)---------- 
vmOpts: '-Xmx768m -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/System/Volumes/Data/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S27793/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/4c77ad86-5a7b-46a4-b43a-f6bef3595f25/runs/fce5fb04-4a16-4fe1-b13c-a2ee88fd61b4/testoutput/test-support/jtreg_open_test_jdk_jdk_jdi/tmp -ea -esa' 
javaOpts: '-Dmain.wrapper=Virtual -XX:-VerifyContinuations' 
JVM version:19-ea 
JDI version: 19.0 
JVM description: Java Debug Interface (Reference Implementation) version 19.0 
Java Debug Wire Protocol (Reference Implementation) version 19.0 
JVM Debug Interface version 19.0 
JVM version 19-ea (Java HotSpot(TM) 64-Bit Server VM, mixed mode, sharing) 
Howdy! 
bkpts = 1 
result: Failed. Execution failed: `main' threw exception: java.lang.Exception: InvokeHangTest: failed; bkpts = 1


There is an existing unresolved bug for the same test:

JDK-8218463 com/sun/jdi/InvokeHangTest.java fail ""java.lang.Exception: InvokeHangTest: failed; bkpts = 64""

This bug has a different failure mode.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8218463,,,,,,,,,,,"2022-11-20 08:10;dcubed;jdk-20+24_macosx-aarch64.8290200.zip;https://bugs.openjdk.org/secure/attachment/101695/jdk-20%2B24_macosx-aarch64.8290200.zip",,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2xtxf:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-11-20 08:10;dcubed;Here's the log file from my sighting in jdk-20+24 stress testing:

$ unzip -l jdk-20+24_macosx-aarch64.8290200.zip
Archive:  jdk-20+24_macosx-aarch64.8290200.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    42738  11-19-2022 18:34   jdk-20+24_3/failures.macosx-aarch64/InvokeHangTest.jtr.slowdebug
---------                     -------
    42738                     1 file;;;","2023-03-10 09:54;dcubed;Here's a log file snippet from the jdk-21+14-1072-tier5 sighting:

com/sun/jdi/InvokeHangTest.java

----------System.err:(19/1027)----------
[0ms] run args: [InvokeHangTarg]
  Debugger: Breakpoint hit at InvokeHangTarg:93
  Debugger: Invoking in threadinstance of java.lang.VirtualThread(name='Thread 1', id=285)
[80366ms] failure: Debuggee appears to be hung
	at java.base/java.lang.Thread.getStackTrace(Thread.java:2514)
	at TestScaffold.failure(TestScaffold.java:457)
	at InvokeHangTest$1.run(InvokeHangTest.java:245)
java.lang.Exception: InvokeHangTest: failed; bkpts = 1
	at InvokeHangTest.runTests(InvokeHangTest.java:274)
	at TestScaffold.startTests(TestScaffold.java:434)
	at InvokeHangTest.main(InvokeHangTest.java:141)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

----------System.out:(10/664)*----------
vmOpts: '-Xmx768m -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk\\19\\36\\bundles\\windows-x64\\jdk-19_windows-x64_bin.zip\\jdk-19 -Djava.io.tmpdir=c:\\sb\\prod\\1678414644\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_jdi\\tmp -ea -esa'
javaOpts: '-Dmain.wrapper=Virtual -XX:-VerifyContinuations'
JVM version:21-ea
JDI version: 21.0
JVM description: Java Debug Interface (Reference Implementation) version 21.0 
Java Debug Wire Protocol (Reference Implementation) version 21.0
JVM Debug Interface version 21.0
JVM version 21-ea (Java HotSpot(TM) 64-Bit Server VM, mixed mode, sharing)
Howdy!
bkpts = 1
result: Failed. Execution failed: `main' threw exception: java.lang.Exception: InvokeHangTest: failed; bkpts = 1


Please note that this failure mode looks more like this bug:

JDK-8218463 com/sun/jdi/InvokeHangTest.java fail ""java.lang.Exception: InvokeHangTest: failed; bkpts = 64 ""

However, this sighting is using the Virtual wrapper and this bug is for Loom
related sightings.;;;","2023-03-10 13:31;cjplummer;JDK-8303702 just updated this test to make the debuggee threads all virtual when using the Virtual main.wrapper. You can see in the above output:

   Debugger: Invoking in threadinstance of java.lang.VirtualThread(name='Thread 1', id=285) 

Previously it was:

   Debugger: Invoking in threadinstance of InvokeHangTarg(name='Thread 1', id=291) 

And InvokeHangTarg is a platform thread. Note this issue happened both before and after JDK-8303702, but we hadn't seen it fail in our CI since the initial failures on 2022-07-12, so possibly JDK-8303702 is instigating new failures.

And just to be clear, even before JDK-8303702 the main debuggee thread was a virtual thread. JDK-8303702 just made it so the two threads that the debuggee creates are also virtual threads.;;;","2023-03-15 12:32;cjplummer;The debuggee main method creates two threads and then starts them:

    public static void main(String[] args) {
        System.out.println(""Howdy!"");
        Thread t1 = TestScaffold.newThread(new InvokeHangTarg(), name1);
        Thread t2 = TestScaffold.newThread(new InvokeHangTarg(), name2);

        t1.start();
        t2.start();
    }

These threads will hit breakpoints which the debugger handles and issues an invoke on the breakpoint thread. The threads run until they generate 100 breakpoints. There is an issue when these two threads are virtual threads. Virtual threads are daemon threads. That means the JVM can exit while they are still running. The above main() method is not waiting for these two threads to exit, so main() exits immediately and the JVM starts the shutdown process. It first must wait for all non-daemon threads to exit, but there are none, so the JVM exits right away before the two threads are completed. When these two threads are platform threads, the JVM has to wait until they complete before it exits, so they will always complete. The end result of this early exit is that sometimes the invoke done by the debugger never completes because the JVM has already issued a VMDeath event and the debuggee has been disconnected.

This bug is easily fixed by doing a join with t1 and t2. This forces the main() method to block until they have completed.;;;","2023-03-16 14:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13068
Date: 2023-03-16 21:02:09 +0000;;;","2023-03-21 11:02;dukebot;Changeset: 0deb6489
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-03-21 18:00:35 +0000
URL:       https://git.openjdk.org/jdk/commit/0deb648985b018653ccdaf193dc13b3cf21c088a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: a few Shenandoah tests failure after  JDK-8214799 11u backport ,JDK-8290198,5079076,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2022-07-12 12:53,2022-08-03 05:06,2023-10-01 09:56,2022-07-14 05:30,11,,,,,,11.0.17,hotspot,,0,gc-shenandoah,jdk11u-fix-request,jdk11u-fix-yes,redhat-interest,,,,,,,,,,,,,,"gc/shenandoah/jni/CriticalNativeStress.java
gc/shenandoah/jni/CriticalNativeArgs.java
gc/stress/gcbasher/TestGCBasherWithShenandoah.java
gc/stress/gclocker/TestGCLockerWithShenandoah.java
gc/stress/gclocker/TestGCLockerWithShenandoah.java
gc/stress/gcold/TestGCOldWithShenandoah.java
gc/stress/gcold/TestGCOldWithShenandoah.java
gc/stress/gcold/TestGCOldWithShenandoah.java
gc/stress/systemgc/TestSystemGCWithShenandoah.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289738,,,,,,,,,,JDK-8214799,JDK-8289738,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xtwr:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-07-12 14:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1220
Date: 2022-07-12 21:43:51 +0000;;;","2022-07-13 08:52;zgu;Fix Request (11u)

I would like to fix Shenandoah test failures in 11u. The fixes are test only, therefore, it is low risk.
;;;","2022-07-14 05:30;dukebot;Changeset: 9d0b5e59
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-07-14 12:26:04 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/9d0b5e59f41dd6ed6b6eca57996346b038863c68
;;;","2022-08-03 03:42;dukebot;Changeset: 9d0b5e59
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-07-14 12:26:04 +0000
URL:       https://git.openjdk.org/jdk11u/commit/9d0b5e59f41dd6ed6b6eca57996346b038863c68
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"test/jdk/java/nio/file/Files/probeContentType/Basic.java fails on some systems for the "".rar"" extension",JDK-8290197,5079073,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,lancea,lancea,2022-07-12 11:00,2023-03-01 06:51,2023-10-01 09:56,2022-07-13 08:17,,,,,,,20,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,"Test test/jdk/java/nio/file/Files/probeContentType/Basic.java fails on some platforms with:

For extension rar we got content type: application/x-rar-compressed; expected: [application/rar, application/vnd.rar, application/x-rar]



The following should be updated within the test (line 183) to include  application/x-rar-compressed in the List added to ExType:

                new ExType(""rar"", List.of(""application/rar"", ""application/vnd.rar"", ""application/x-rar"")),
",,,,,,,,,,JDK-8300743,JDK-8303460,JDK-8303461,JDK-8302445,JDK-8302370,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xtw3:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-07-12 15:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9475
Date: 2022-07-12 20:37:56 +0000;;;","2022-07-13 08:17;dukebot;Changeset: 44fb92e2
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-07-13 15:13:27 +0000
URL:       https://git.openjdk.org/jdk/commit/44fb92e2aa8a708b94c568e3d39217cb4c39f6bf
;;;","2023-02-28 06:37;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.19-oracle,17.0.8-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-02-28 06:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1189
Date: 2023-02-28 14:36:20 +0000;;;","2023-02-28 06:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1783
Date: 2023-02-28 14:38:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/runtime/TestConstantsInError.java fails on riscv ,JDK-8290164,5079034,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fjiang,fjiang,fjiang,2022-07-12 02:11,2023-07-09 19:13,2023-10-01 09:56,2022-07-13 20:36,20,,,,,,20,hotspot,,0,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,,,,,,,,,,,,,,,"compiler/runtime/TestConstantsInError.java fails on riscv with the following error:

```
TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 'made not entrant' found in stdout
```

Similar to AArch64, RISCV64 does not patch C1 compiled code (see JDK-8223613), so we should add `Platform.isRISCV64` too for the test.

This test @requires vm.flagless. According to JDK-8246494, tests with @requires vm.flagless will be excluded from runs w/ any other X / XX flags passed via -vmoption / -javaoption.
Since we added `-Xmx` option for all jtreg tests, so this failure does not menifest before.

",,,,,,,,,,JDK-8311709,JDK-8297722,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,20,,linux,,,,,"0|i2xtnf:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-07-12 02:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9463
Date: 2022-07-12 09:36:37 +0000;;;","2022-07-13 20:36;dukebot;Changeset: 3471ac9a
Author:    Feilong Jiang <fjiang@openjdk.org>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2022-07-14 03:32:52 +0000
URL:       https://git.openjdk.org/jdk/commit/3471ac9a907780d894d05bd58cf883c4c8d8838d
;;;","2022-11-26 06:16;fjiang;Fix request(19u): I would like to backport this into jdk19u.  Fix test failing on RISC-V platform.
compiler/runtime/TestConstantsInError.java passed with this backport.;;;","2022-11-26 06:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/95
Date: 2022-11-26 14:14:28 +0000;;;","2023-02-28 17:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/3
Date: 2023-03-01 01:12:21 +0000;;;","2023-06-19 20:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Reset recursion counter missed in fix of JDK-8224267,JDK-8290162,5079031,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2022-07-12 01:38,2022-07-18 13:14,2023-10-01 09:56,2022-07-12 22:09,20,,,,,,20,client-libs,,0,sn_122,,,,,,,,,,,,,,,,,"recursionCount counter is only reset when limit is reached so it will behave incorrectly if JOptionPane.showMessageDialog continuously with the same message, so it needs to be reset also at appropriate location.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8224267,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xtmr:",9223372036854775807,b06,,,,,,,,,,,"2022-07-12 02:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9464
Date: 2022-07-12 09:44:52 +0000;;;","2022-07-12 22:09;dukebot;Changeset: 6e18883d
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-07-13 05:06:04 +0000
URL:       https://git.openjdk.org/jdk/commit/6e18883d8ffd9a7b7d495da05e9859dc1d1a2677
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/nio/file/Files/probeContentType/Basic.java fails on Windows Server 2019/2022,JDK-8290149,5079016,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tkiriyama,tkiriyama,tkiriyama,2022-07-11 23:31,2022-12-14 23:26,2023-10-01 09:56,2022-07-14 00:29,20,,,,,,20,core-libs,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,"java/nio/file/Files/probeContentType/Basic.java fails on below environment.

OS: Windows Server 2022 Standard / Windows Server 2019 Standard
JDK: 20-ea

openjdk version ""20-ea"" 2023-03-21
OpenJDK Runtime Environment (build 20-ea+4-158)
OpenJDK 64-Bit Server VM (build 20-ea+4-158, mixed mode, sharing)
Failed message:
For extension js we got content type: text/plain; expected: [text/javascript, application/javascript]
java.lang.RuntimeException: Test failed!
        at Basic.main(Basic.java:203)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:1589)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2xtjf:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-07-11 23:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9459
Date: 2022-07-12 06:41:35 +0000;;;","2022-07-14 00:29;dukebot;Changeset: adf40d25
Author:    KIRIYAMA Takuya <kiriyama.takuya@fujitsu.com>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2022-07-14 07:00:33 +0000
URL:       https://git.openjdk.org/jdk/commit/adf40d25a1c53ac4804d013c78558c58edb20b85
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Add a check in JavadocTester for ""javadoc should not crash""",JDK-8290126,5078989,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-07-11 14:13,2022-09-08 07:32,2023-10-01 09:56,2022-09-01 15:45,18,,,,,,20,tools,,0,noreg-self,,,,,,,,,,,,,,,,,"It would be useful to check by default that javadoc has not crashed, by looking for evidence of a stack trace on stderr.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xtdf:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-07-11 17:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9458
Date: 2022-07-12 00:09:41 +0000;;;","2022-09-01 15:45;dukebot;Changeset: 0fb9469d
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-09-01 22:41:27 +0000
URL:       https://git.openjdk.org/jdk/commit/0fb9469d93bffd662848b63792406717f7b4ec0d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ArrayCopyObject JMH has wrong package,JDK-8290115,5078975,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ecaspole,ecaspole,ecaspole,2022-07-11 09:48,2022-07-27 19:50,2023-10-01 09:56,2022-07-21 10:51,20,,,,,,20,performance,,0,benchmark,benchmarks,,,,,,,,,,,,,,,,"This looks like a small mistake related to this JMH contributed with JDK-8252847.

Although it was added for specific AVX testing I think it would be better to have package java.lang like all the other ArrayCopy* JMH.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252847,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,16,,,,,,,"0|i2xtab:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2df4ae44,,,,,,,,,"2022-07-12 10:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9472
Date: 2022-07-12 17:04:47 +0000;;;","2022-07-21 10:51;dukebot;Changeset: 15f4b304
Author:    Eric Caspole <ecaspole@openjdk.org>
Date:      2022-07-21 17:49:22 +0000
URL:       https://git.openjdk.org/jdk/commit/15f4b30459d936f721fc984c20cf3ada7b7f5d4a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/nio/channels/FileChannel/largeMemory/LargeGatheringWrite.java timed out,JDK-8290095,5078954,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bpb,dcubed,dcubed,2022-07-11 09:17,2022-12-22 03:37,2023-10-01 09:56,2022-07-12 13:54,19,,,,,,19,core-libs,,0,intermittent,noreg-self,test-only,tier2,ursqe-triaged,,,,,,,,,,,,,"The following test timed out in the JDK19 CI:

java/nio/channels/FileChannel/largeMemory/LargeGatheringWrite.java

Here's a snippet from the log file:

#section:main
----------messages:(6/253)----------
command: main -Xmx4G LargeGatheringWrite
reason: User specified action: run main/othervm/timeout=240 -Xmx4G LargeGatheringWrite 
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
elapsed time (seconds): 1119.014
----------configuration:(0/0)----------
----------System.out:(15/428)----------
Seed from RandomFactory = -8916152547217752015L
Writing 5368709122 bytes of data...
Wrote 5368709122 bytes
Total of 5368709122 bytes written
Checking length 1073741824
Timeout refired 960 times
Checking length 1073741824
Checking length 536870912
Checking length 536870912
Checking length 536870912
Checking length 536870912
Checking length 536870912
Checking length 536870912
Checking length 1
Checking length 1
----------System.err:(1/16)----------
STATUS:Passed.
----------rerun:(40/6196)*----------

<snip>

result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-19+31-2188\windows-x64.jdk\jdk-19\bin\java' timed out (timeout set to 960000ms, elapsed time including timeout handling was 1118905ms).


Please note that the test PASSed while the timeout handler was running.",,,,,,,,,,JDK-8290287,JDK-8291299,JDK-8291424,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289470,,,,JDK-8290252,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2xt5n:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-07-11 14:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/135
Date: 2022-07-11 21:28:10 +0000;;;","2022-07-12 07:52;msheppar;perhaps it is not the test per se but an issue in jtreg when reaping the othervm child process .... in a number of cases the test logs indicate the test has passed but the cleanup seems to run into difficulties. As such extending the test timeout may not rectify these difficulties

----------------------------------------
[2022-07-12 13:28:01] [C:\cygwin\bin\bash.exe, -c, wmic process where ParentProcessId=38288 get ProcessId | tail -n+2] timeout=20000
----------------------------------------
----------------------------------------
[2022-07-12 13:28:01] exit code: 0 time: 123 ms
----------------------------------------
WARNING: can't parse child pid No Instance(s) Available. : For input string: ""No Instance(s) Available.""
java.lang.NumberFormatException: For input string: ""No Instance(s) Available.""
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Long.parseLong(Long.java:711)
	at java.base/java.lang.Long.valueOf(Long.java:1159)
	at jdk.test.failurehandler.action.ActionHelper.getChildren(ActionHelper.java:105)
	at jdk.test.failurehandler.ToolKit.gatherProcessInfo(ToolKit.java:92)
	at jdk.test.failurehandler.jtreg.GatherProcessInfoTimeoutHandler.runGatherer(GatherProcessInfoTimeoutHandler.java:112)
	at jdk.test.failurehandler.jtreg.GatherProcessInfoTimeoutHandler.runActions(GatherProcessInfoTimeoutHandler.java:87)
	at com.sun.javatest.regtest.TimeoutHandler.handleTimeout(TimeoutHandler.java:120)
	at com.sun.javatest.regtest.exec.ProcessCommand$2.run(ProcessCommand.java:317)
;;;","2022-07-12 12:14;dcubed;> The test directory is in the value of exclusiveAccess.dirs but this doesn't prevent it from running
> concurrently with tests that are in locations not listed in exclusiveAccess.dirs. 

This is because the tests in java/nio/channels/FileChannel/largeMemory are still run as part of:

    open/test/jdk/:tier2_part2

If they were excluded from that test group and then run in their own test group with their own
test task, then they would not run in parallel with other tests. I don't know if that is how [~cjplummer]
solved the problem with his ""resourcehogs"" test group or not. It's been too long since I've seen
those changes.;;;","2022-07-12 13:54;dukebot;Changeset: 128c6c64
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-07-12 20:48:23 +0000
URL:       https://git.openjdk.org/jdk19/commit/128c6c648c24c37ab20a7c902d67d245e2b4ca72
;;;","2022-07-13 00:23;alanb;A lot of the tests in the java/nio/channels/FileChannel need to create large files in other to test some operation. This bug has signalled out one test but there are many more that potentially take longer to run than this one. I did a few experiments and the best approach seems to separate task for channels/FileChannel or also add a TEST.properties to that directory with exclusiveAccess.dirs=. so that a FileChannel test doesn't run concurrently with other FileChannel tests in the directory. Either way, the largeMemory directory isn't needed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Temporary files are kept when call Clipboard.getSystemClipboard().getImage() ,JDK-8290092,5078676,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lkostyra,webbuggrp,webbuggrp,2022-07-06 17:26,2023-02-10 07:01,2023-10-01 09:56,2023-02-08 04:15,8,jfx11,jfx17,jfx18,jfx19,,jfx21,javafx,,0,additional-information-requested,dcspn,reproducer-no,sn_135,sn_136,sn_137,webbug,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
javafx18.0.1/Win10/Java18.0.1

A DESCRIPTION OF THE PROBLEM :
One temporary file like ""~DF9C122A94A842C2B6.TMP"" is created for each calling of Clipboard.getSystemClipboard().getImage(). These files are not removed automatically even after call System.gc() or exit the application. This means they occupy space of Java temporary path continually.
Example, size of temporary file is 32+ MB on my platform. When my application is monitoring images in system clipboard, it calls Clipboard.getSystemClipboard().getImage() in a interval like 1 second, which write 32+ MB file in every second, then 120G space is eaten up after some time.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1) Define a button to look at image in system clipboard, like following:
@FXML
 public void refreshAction() {
        Clipboard clipboard = Clipboard.getSystemClipboard();
        if (!clipboard.hasImage()) {
            return;
        }
        clipboard.getImage();
    }

2) Click this button, and watch files created under Java temporary path(System.getProperty(""java.io.tmpdir"")).
3) Call System.gc() and check whether the temporary files are cleared.
4) Exit the application and check whether the temporary files are cleared.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Temporary files should be cleared automatically.
ACTUAL -
Temporary files are persistent and occupy space of Java temporary path continually.

CUSTOMER SUBMITTED WORKAROUND :
Call following before and after  Clipboard.getSystemClipboard().getImage().

public static void clearTmpClips() {
        try {
            System.gc();
            File path = new File(System.getProperty(""java.io.tmpdir""));
            File[] files = path.listFiles();
            if (files == null) {
                return;
            }
            for (File file : files) {
                try {
                    if (file.isFile() && file.getName().endsWith("".TMP"")) {
                        FileUtils.deleteQuietly(file);
                    }
                } catch (Exception e) {
                }
            }
        } catch (Exception e) {
        }
    }


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-08-04 06:35;pnarayanaswa;App.java;https://bugs.openjdk.org/secure/attachment/100308/App.java","2022-07-11 07:52;pnarayanaswa;JavaFXSnapshot.java;https://bugs.openjdk.org/secure/attachment/99936/JavaFXSnapshot.java","2022-08-04 06:35;pnarayanaswa;PrimaryController.java;https://bugs.openjdk.org/secure/attachment/100310/PrimaryController.java","2022-08-04 06:35;pnarayanaswa;primary.fxml;https://bugs.openjdk.org/secure/attachment/100309/primary.fxml",,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,"0|i2xriz:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-07-11 07:58;pnarayanaswa;Checked with attached testcase in Windows 10, Issue is not reproducible,

Test Result
============
8u333: Pass
openjfx11: Pass
openjfx17: Pass
openjfx18: Pass
openjfx19ea8: Pass

Mail Submitter:
============
please share short clipping of the issue.;;;","2022-08-04 06:35;pnarayanaswa;Additional information from submitter
===========================
Attached small project has been verified on my Windows10.
===========================
Checked with attached testcase(App.java, primary.fxml, PrimaryController.java), issue is reproducible , simple PrintScreen button from keyboard , created a TMP file of (8MB)
Test Result
========
8: Fail
8u341: Fail
openjfx11: Fail
openjfx17: Fail
openjfx18: Fail
openjfx19ea10:Fail;;;","2023-01-12 03:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/994
Date: 2023-01-12 11:11:23 +0000;;;","2023-02-08 04:14;dukebot;Changeset: 73ed7b6a
Author:    Lukasz Kostyra <lkostyra@openjdk.org>
Committer: Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2023-02-08 12:09:42 +0000
URL:       https://git.openjdk.org/jfx/commit/73ed7b6a92bca217ad602ccb6c5de64efa30f856
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResponseBodyBeforeError: AssertionError or SSLException: Unsupported or unrecognized SSL message,JDK-8290083,5078942,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2022-07-11 06:51,2023-02-10 00:40,2023-10-01 09:56,2022-07-12 03:03,20,,,,,,20,core-libs,,0,httpclient,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,"java.io.UncheckedIOException: Unexpected
	at ResponseBodyBeforeError$ReplyingServer.run(ResponseBodyBeforeError.java:379)
Caused by: javax.net.ssl.SSLException: Unsupported or unrecognized SSL message
	at java.base/sun.security.ssl.SSLSocketInputRecord.handleUnknownRecord(SSLSocketInputRecord.java:450)
	at java.base/sun.security.ssl.SSLSocketInputRecord.decode(SSLSocketInputRecord.java:175)
	at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:111)
	at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1510)
	at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1425)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:455)
	at java.base/sun.security.ssl.SSLSocketImpl.ensureNegotiated(SSLSocketImpl.java:925)
	at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:1016)
	at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:976)
	at ResponseBodyBeforeError$ReplyingServer.readRequestMethod(ResponseBodyBeforeError.java:390)
	at ResponseBodyBeforeError$ReplyingServer.run(ResponseBodyBeforeError.java:353)
STATUS:Failed.`main' threw exception: java.io.UncheckedIOException: Unexpected

Another type of failure that this fix should also fix:
java.lang.AssertionError
	at ResponseBodyBeforeError$ReplyingServer.run(ResponseBodyBeforeError.java:360)
STATUS:Failed.`main' threw exception: java.lang.AssertionError

",,,,,,,,,,JDK-8302196,JDK-8298911,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xt2z:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-07-11 06:56;dfuchs;This is probably again a case of some other process / agent / service trying to connect to our server.
The ReplyingServer should probably be hardened to simply close the socket if an IOException occurs. Possibly there could be a maximum number of unexpected exception that the server should expect.;;;","2022-07-11 07:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9454
Date: 2022-07-11 14:35:55 +0000;;;","2022-07-12 03:03;dukebot;Changeset: 3b9059a1
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-07-12 09:59:29 +0000
URL:       https://git.openjdk.org/jdk/commit/3b9059a1471ba74af8bf6a3c0e5b2e1140eb4afd
;;;","2023-02-09 08:41;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.
;;;","2023-02-09 08:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1153
Date: 2023-02-09 16:45:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[PPC64] ZGC C2 load barrier stub needs to preserve vector registers,JDK-8290082,5078941,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mdoerr,mdoerr,mdoerr,2022-07-11 06:25,2023-01-24 13:22,2023-10-01 09:56,2022-07-12 06:35,17,19,20,,,,20,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-20,zgc,,,,,,,,,,,,,"JDK-8289856 has uncovered a PPC64 bug which affects ZGC C2 load barriers:
#  Internal Error (src/hotspot/cpu/ppc/gc/z/zBarrierSetAssembler_ppc.cpp:485), pid=3200250, tid=3200674
#  fatal error: Register type is not known

V  [libjvm.so+0x1bf4944]  ZSaveLiveRegisters::iterate_over_register_mask(ZSaveLiveRegisters::IterationAction)+0x5b4
V  [libjvm.so+0x1bf1f54]  ZBarrierSetAssembler::generate_c2_load_barrier_stub(MacroAssembler*, ZLoadBarrierStubC2*) const+0xf4
V  [libjvm.so+0x1bf8b98]  ZBarrierSetC2::emit_stubs(CodeBuffer&) const+0x128

Vector registers may be live and get killed by ZGC load barrier stub.
Workaround: Use -XX:-SuperwordUseVSX when enabling ZGC.
",,,,,,,,,,JDK-8290305,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274851,JDK-8188139,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,"0|i2xt2r:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-11 07:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9453
Date: 2022-07-11 14:09:58 +0000;;;","2022-07-11 15:38;dlong;ILW = crash; with ZGC; use -XX:-SuperwordUseVSX = HMM = P2;;;","2022-07-12 04:04;mdoerr;Note: This crash only happens with JDK-8289856 (jdk20). The code for preserving vector registers was missing since the initial implementation of ZGC on PPC64. Seems like GCC doesn't use them for the C++ code which is called at this point, so, no problems were observed in older jdk releases.;;;","2022-07-12 06:35;dukebot;Changeset: 393dc7ad
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-07-12 13:31:51 +0000
URL:       https://git.openjdk.org/jdk/commit/393dc7ade716485f4452d0185caf9e630e4c6139
;;;","2022-07-12 08:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/547
Date: 2022-07-12 15:15:53 +0000;;;","2022-07-12 08:44;mdoerr;Fix Request (17u):
Fixes possible problem with vector registers (if gcc decides to use them). Required for JDK-8289856 to avoid errors in debug build. Applies cleanly. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc for MemorySegment/MemoryAddress getter/setters contains some typos,JDK-8290071,5078928,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-07-11 02:44,2022-07-27 13:46,2023-10-01 09:56,2022-07-12 07:19,19,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"The javadoc for the accessors in MemorySegment and MemoryAddress contain some typos (e.g. uses ""from"" instead of ""into"" for the write operations).",,,,,,,,,,JDK-8291296,JDK-8291421,JDK-8290284,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xszv:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-07-11 02:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/131
Date: 2022-07-11 09:46:11 +0000;;;","2022-07-12 07:19;dukebot;Changeset: 0fd1b689
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-07-12 14:16:22 +0000
URL:       https://git.openjdk.org/jdk19/commit/0fd1b68972995d5071eed21088e0997ac1171ca3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] only check HotSpotCompiledCode stream is empty if installation succeeds,JDK-8290065,5078921,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,dnsimon,dnsimon,2022-07-11 01:43,2022-07-25 07:12,2023-10-01 09:56,2022-07-11 09:52,19,20,,,,,20,hotspot,,0,jdk11-graalvm,jdk17-graalvm,jdk19-graalvm,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,"Decoding the HotSpotCompiledCode stream (see JDK-8289094) can be short circuited if certain limits are encountered such as the code cache being full or the JVMCINMethodSizeLimit being exceeded. In this case, the check that the complete stream has been read should be emitted. Otherwise, it will fail as follows:

    Exception raised in scope JVMCI-native CompilerThread2.CodeInstall.CodeInstall: jdk.vm.ci.common.JVMCIError: 1 bytes remaining in stream
    at 0x00007fb038010c49 in HotSpotCompiledCode stream",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289094,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xsyb:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-11 02:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9446
Date: 2022-07-11 08:59:20 +0000;;;","2022-07-11 09:52;dukebot;Changeset: 21db9a50
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2022-07-11 16:47:05 +0000
URL:       https://git.openjdk.org/jdk/commit/21db9a507b441dbf909720b0b394f563e03aafc3
;;;","2022-07-11 15:33;dlong;ILW = exception thrown causes failure; when certain limits encountered; no workaround = MMH = P3;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Do not use std::thread in panama tests,JDK-8290059,5078913,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jvernee,stuefe,stuefe,2022-07-11 00:05,2022-08-15 01:44,2023-10-01 09:56,2022-07-28 07:56,19,20,,,,,20,core-libs,,0,panama,,,,,,,,,,,,,,,,,"Use of std::thread causes problems in non-glibc systems (e.g. Alpine).

std::thread makes no assumption about the stack size of the created threads. There is no way to specify a stack size via std::thread for philosophical C++ reasons [1][2].

On Linux, std::thread is implemented by libstdc++, which just does a pthread_create() without setting the stack size. Therefore, we use whatever the system default is for pthread stack size. That one is implementation-dependent: on glibc, it depends on the RLIMIT_STACK of the calling thread. On muslc, being written with small memory footprints in mind, the default stack size is hard-wired to 128k [3].  

Of course, both variants allow overwriting the stack size prior to thread creation with pthread_attr_setstacksize(). So if we were to use Posix threads, we'd have no problem. The problem is that std::thread does not offer this ability.

Therefore, if we want to be portable across systems, we must not use std::thread.

----

The small muslc stack size leads to problems across multiple Panama tests that do asynchronous upcall into the JVM and then crash out in varying places with SOE:

```
config TestUpcallBase.setup(): success
test TestUpcallAsync.testUpcallsAsync(0, ""f0_V__"", VOID, [], []): success
----------System.err:(13/1115)----------
java.lang.StackOverflowError
	at java.base/java.lang.ClassLoader.defineClass0(Native Method)
	at java.base/java.lang.System$2.defineClass(System.java:2369)
	at java.base/java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(MethodHandles.java:2449)
	at java.base/java.lang.invoke.InvokerBytecodeGenerator.loadMethod(InvokerBytecodeGenerator.java:321)
	at java.base/java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(InvokerBytecodeGenerator.java:753)
	at java.base/java.lang.invoke.LambdaForm.compileToBytecode(LambdaForm.java:849)
	at java.base/java.lang.invoke.Invokers.varHandleMethodGenericLinkerHandleForm(Invokers.java:423)
	at java.base/java.lang.invoke.Invokers.varHandleInvokeLinkerMethod(Invokers.java:370)
	at java.base/java.lang.invoke.MethodHandleNatives.varHandleOperationLinkerMethod(MethodHandleNatives.java:578)
	at java.base/java.lang.invoke.MethodHandleNatives.linkMethodImpl(MethodHandleNatives.java:482)
	at java.base/java.lang.invoke.MethodHandleNatives.linkMethod(MethodHandleNatives.java:470)
	at java.base/java.lang.foreign.MemorySegment.set(MemorySegment.java:1420)
```

I see this at least for
- java/foreign/enablenativeaccess/TestEnableNativeAccess.jtr 
- java/foreign/TestUpcallAsync.java.

but there are more uses of std::thread.

--------
[1] https://www.reddit.com/r/cpp/comments/8izd5g/really_no_way_to_set_stack_size_of_stdthread_what/
[2] https://stackoverflow.com/a/13871812/3689118
[3] https://wiki.musl-libc.org/functional-differences-from-glibc.html#Thread-stack-size

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292352,JDK-8290460,,,,,,,,,,,,,,,,,,,,,,,,,,,linux_alpine,,,,,"0|i2xswj:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-07-11 01:21;stuefe;Both tests use `std::thread` (which I am surprised we use). 

The default stack size of `std::thread` depends on the implementation. glibc seems to use the default stack size for the primordial thread (rlimit), on my machine 8M. muslc uses 122k regardless of rlimit.

Unfortunately, std::thread has no way to specify the stack size because C++ considers the stack size to be a platform detail. 

I think these tests should not use std::thread. They should use the normal posix thread api.;;;","2022-07-11 01:34;dholmes;I agree with [~stuefe], we don't use std::thread in our codebase. Maybe one day we will but until then ...

But I'm a bit perplexed as well. If muslc uses 122K and there is no way to specify the stack size for std::thread, then how does any non-toy program uses std::thread on muslc? Programs must have a way around this limitation.;;;","2022-07-11 02:01;stuefe;I was confused as well. Not being able to set the thread stack size is such a strange decision decoupled from reality. Many people seem surprised: https://www.reddit.com/r/cpp/comments/8izd5g/really_no_way_to_set_stack_size_of_stdthread_what/

Maybe std::thread is just not that widely used. And musl is certainly no mainstream platform.;;;","2022-07-18 15:25;jvernee;std::thread was chosen since we needed a platform independent way of testing upcalls from a thread that is not currently attached to the VM. So, native code needs to spawn a thread that does the upcall.

Switching to the posix thread API might be a long term solution, but if std::thread is to be avoided altogether we'd also need to use the Windows thread API.

It might be nice to have a small test library that exposes an interface similar to std::thread which abstracts over the platform's thread API, but with the ability to set the size of the stack. I'm not sure if such native test libraries are really supported in the build system at the moment though...;;;","2022-07-19 10:58;mcimadamore;Something to keep in mind in the future. While I'm not an expert in the field, it seems to me that perhaps the only portable option here is to use pthread directly - but if we do that we lose ability to work with Windows. 

Existing hotspot tests seem to get by using a combo of pthread.h (on POSIX) + Process.h (on windows):

https://github.com/openjdk/jdk/blob/master/test/hotspot/jtreg/vmTestbase/nsk/share/native/native_thread.cpp;;;","2022-07-19 11:28;stuefe;You don't need much to rewrite the affected tests, just create and join. I had a patch for the pthread side of things but ran out of time, which is why I disassigned myself. If you want, I can dig it up. But its not terribly complex, the most onerous part was just plugging the pthread API into the heavily templatized tests.;;;","2022-07-20 13:19;mcimadamore;[~stuefe] thanks for the offer. I believe that rewriting using pthread is doable, but I think the code I linked (a library used in VM tests) is already doing what we need - e.g. providing primitives for thread creation and join which work across platform, so I think we should just use that code (it is a bit sad that we might have to copy/paste).;;;","2022-07-21 10:05;jvernee;It looks like that existing code can not be used. I'm not sure how it's working today, if at all. To join a thread it spins in a busy loop calling Sleep for 1 second. This makes the test take forever, but the condition flag that it checks to see if the thread is done is not volatile, so I'm not sure how it could see the updated value. The test ends up timing out.

I'm not sure why this doesn't just use pthread_join. Maybe because it has to work on Solaris as well. I think we can use a more modern library instead. I'll cook something up.;;;","2022-07-21 19:59;dholmes;That code is ancient and awful - pretend you never saw it :) It looks like an attempt at a handcrafted platform-independent join(). The C compiler is unlikely to try any aggressive optimisations that would require the flag to be volatile.;;;","2022-07-22 06:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9599
Date: 2022-07-21 18:48:14 +0000;;;","2022-07-28 07:56;dukebot;Changeset: 54a2c5a6
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2022-07-28 14:53:26 +0000
URL:       https://git.openjdk.org/jdk/commit/54a2c5a6d148fecbe87f861933e4ae9459bacf65
;;;",,,,,,,,,,,,,,,,,,,,,,
Committers should be able to review for Shenandoah 8u,JDK-8290049,5078899,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,andrew,andrew,andrew,2022-07-10 10:30,2022-11-18 09:38,2023-10-01 09:56,2022-07-13 18:26,shenandoah8u332,,,,,,shenandoah8u332,infrastructure,,0,,,,,,,,,,,,,,,,,,"According to Roman Kennke, Shenandoah lead, it should be sufficient to be a Committer to review Shenandoah PRs. We should update the .jcheck configuration to reflect this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xstf:",9223372036854775807,b01,,,,,,,,,,,"2022-07-10 10:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah-jdk8u/pull/4
Date: 2022-07-10 17:37:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"(fs) FileSystem.getPathMatcher does not check for "":"" at last index",JDK-8290047,5078897,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,alanb,alanb,2022-07-09 23:07,2022-08-15 17:01,2023-10-01 09:56,2022-08-09 10:10,20,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,"The implementations of the getPathMatcher in the default, zipfs, and jrtfs implementations have the following code:

int pos = syntaxAndInput.indexOf(':');
if (pos <= 0 || pos == syntaxAndInput.length())
    throw new IllegalArgumentException();

Checking pos == syntaxAndInput.length() is not needed here as pos is alway less than length.

First reported here:
https://mail.openjdk.org/pipermail/core-libs-dev/2022-April/088000.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291730,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xssz:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-07-21 12:07;bpb;The check should be for a colon "":"" at the last position of the parameter which should provoke an IAE per the specification

""IllegalArgumentException - If the parameter does not take the form: syntax:pattern"";;;","2022-07-21 13:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9595
Date: 2022-07-21 15:29:10 +0000;;;","2022-08-08 21:14;kganapureddy;[~bpb] May be the fix version needs to be updated?;;;","2022-08-09 10:10;dukebot;Changeset: 4040927d
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-08-09 17:07:14 +0000
URL:       https://git.openjdk.org/jdk/commit/4040927d1750dd00611cc6465507dd0bc694a18f
;;;","2022-08-09 10:11;bpb;[~kganapureddy] The fix version is updated automatically by the bot when the PR is integrated.;;;","2022-08-09 10:13;kganapureddy;[~bpb] Thank you.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
ModuleDescriptor.hashCode is inconsistent,JDK-8290041,5078861,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jpai,webbuggrp,webbuggrp,2022-07-08 07:38,2023-05-12 15:45,2023-10-01 09:56,2022-08-16 01:33,18,,,,,,20,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The ModuleDescriptor hashCode implementation internally calls a modsHashCode method which assumes that sets iterate in a consistent order. By multiplying each sub hash by 43, the computation isn't commutative, leading to inconsistent results.

Under some conditions, this can cause two ModuleDescriptor instances which are equal to in fact be reported as not equal. The compareTo method still returns 0 in that case. The likelihood of this occurring is random, since it depends on enum hash codes, which vary between JVM sessions. This can cause hash collisions, resulting in inconsistent set ordering. In particular, the requires modifier sets are most sensitive to this.

This bug was introduced by https://bugs.openjdk.org/browse/JDK-8275509 which partially addressed the problem. The correct fix is to remove the multiply by 43. Note that the AbstactSet.hashCode method simply adds up the sub hashes without any multiplication step.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Construct two ModuleDescriptor instances which have modifier sets which have the same elements but iteration order differs.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The hash codes for equal ModuleDescriptors should be the same.
ACTUAL -
The hash codes are different:

551086747
1012586953


---------- BEGIN SOURCE ----------
import java.lang.module.ModuleDescriptor;

import java.util.Set;

public class Bug {
    public static void main(String[] args) throws Exception {
        var md1 = ModuleDescriptor.newModule(""test"")
            .opens(Set.of(ModuleDescriptor.Opens.Modifier.SYNTHETIC,
                          ModuleDescriptor.Opens.Modifier.MANDATED),
                   ""a.p1"", Set.of(""a.m1""))
            .build();

        var md2 = ModuleDescriptor.newModule(""test"")
            .opens(Set.of(ModuleDescriptor.Opens.Modifier.MANDATED,
                          ModuleDescriptor.Opens.Modifier.SYNTHETIC),
                   ""a.p1"", Set.of(""a.m1""))
            .build();

        System.out.println(md1.equals(md2));
        System.out.println(md1.compareTo(md2));
        System.out.println(md1.hashCode());
        System.out.println(md2.hashCode());
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
In cases where the equals method is affected, the compareTo method can be called instead.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xskz:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@34132c1c,,,,,,,Verified,,"2022-07-09 00:30;alanb;The submitter is correct, the hash code of the modifiers is still problematic.;;;","2022-08-06 01:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9790
Date: 2022-08-06 08:08:43 +0000;;;","2022-08-16 01:33;dukebot;Changeset: 4cc6cb9d
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-08-16 08:31:36 +0000
URL:       https://git.openjdk.org/jdk/commit/4cc6cb9d9ddbcc540baac7b81398f2af83f93340
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock in leakprofiler::emit_events during shutdown ,JDK-8290020,5078867,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lujaniuk,lujaniuk,lujaniuk,2022-07-08 08:13,2022-07-21 03:56,2023-10-01 09:56,2022-07-12 08:59,17.0.3-oracle,,,,,,20,hotspot,,0,datadog-interest,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"We've observed a deadlock in leakprofiler::emit_events when the JVM is shut down with Runtime.getRuntime().halt(). 

Suggestion for resolution:
During investigation, [~egahlin] has commented that JfrEmergencyDump::on_vm_shutdown didn't seem to be designed for being run from Java. Nevertheless, it can be reached from a Java call to Runtime.getRuntime().halt() [1]. To resolve, add a boolean parameter to Jfr::on_vm_shutdown do differentiate the ""called from java"" case, and in that case to not call JfrEmergencyDump::on_vm_shutdown.

[1] code path:
Runtime.getRuntime().halt()
JVM_Halt
before_exit
Jfr::on_vm_shutdown
JfrEmergencyDump::on_vm_shutdown
post_events
LeakProfiler::emit_events",,,,,,,,,,JDK-8290805,JDK-8290222,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282361,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b03,15u-cpu,,,,,,,"0|i2xsmb:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-07-12 04:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9465
Date: 2022-07-12 10:39:05 +0000;;;","2022-07-12 08:58;dukebot;Changeset: e8568b89
Author:    Ludvig Janiuk <ludvig.j.janiuk@oracle.com>
Committer: Erik Gahlin <egahlin@openjdk.org>
Date:      2022-07-12 15:54:36 +0000
URL:       https://git.openjdk.org/jdk/commit/e8568b890a829f3481a57f4eb5cf1796e363858b
;;;","2022-07-20 01:07;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Low risk, jfr bugfix.
I had to adapt the test.
Test passes.  SAP nightly testing passed.;;;","2022-07-20 01:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/568
Date: 2022-07-20 08:06:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: Fix graph panning when mouse dragged outside of window,JDK-8290016,5078862,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,tholenstein,tholenstein,2022-07-08 07:40,2022-08-16 23:45,2023-10-01 09:56,2022-07-21 07:56,20,,,,,,20,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,"A graph in IGV can be moved around (called panning action) by left-click-dragging of the mouse. When the mouse leaves the visible window of the graph while dragging, the graph starts to move in the opposite direction. This is useful when doing a selection (see screenshot), but annoying otherwise. 

Disable this behaviour when not doing a selection. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289503,,,,,,,,,,,,,JDK-8290826,,,,,,,,,,,"2022-07-08 07:39;tholenstein;expected panning for selection.png;https://bugs.openjdk.org/secure/attachment/99920/expected+panning+for+selection.png","2022-07-08 07:39;tholenstein;panning.png;https://bugs.openjdk.org/secure/attachment/99919/panning.png","2022-07-08 07:39;tholenstein;unexpected reverse panning.png;https://bugs.openjdk.org/secure/attachment/99918/unexpected+reverse+panning.png",,,,,,,,,,,,,,,,,,,,,,,,"0|i2xsl7:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-07-08 16:03;dlong;ILW = MLH = P4 ;;;","2022-07-12 07:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9470
Date: 2022-07-12 13:48:16 +0000;;;","2022-07-21 07:55;dukebot;Changeset: 604a115a
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2022-07-21 14:54:27 +0000
URL:       https://git.openjdk.org/jdk/commit/604a115a5b8a4c8917a496f3bddb67f9f6468b99
;;;","2022-07-21 08:08;rriggs;The copyright in CustomizablePanAction.java is badly formed, there should only be two copyright dates. Please fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"serviceability/jvmti/GetLocalVariable/GetLocalWithoutSuspendTest.java failed ""assert(!in_vm) failed: Undersized StackShadowPages""",JDK-8290013,5078858,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,dcubed,dcubed,2022-07-08 07:14,2022-07-25 13:18,2023-10-01 09:56,2022-07-18 08:07,19,20,,,,,20,hotspot,,0,problemlist,tier6,tier7,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

serviceability/jvmti/GetLocalVariable/GetLocalWithoutSuspendTest.java

Here's a snippet from the log file:

#section:main
----------messages:(4/284)----------
command: main -agentlib:GetLocalWithoutSuspendTest -Xbatch GetLocalWithoutSuspendTest
reason: User specified action: run main/othervm/native -agentlib:GetLocalWithoutSuspendTest -Xbatch GetLocalWithoutSuspendTest 
Mode: othervm [/othervm specified]
elapsed time (seconds): 25.137
----------configuration:(0/0)----------
----------System.out:(25/1580)*----------
AGENT: Agent_OnLoad started.
AGENT: Agent_Initialize started
AGENT: Agent_Initialize finished
AGENT: VM init event
AGENT: Start new thread that performs GetLocalObject calls on a running target thread
### Java-Test: Set target thread for get local variable calls by agent.
### Java-Test: Test how many frames fit on the stack by performing recursive calls until
### Java-Test: StackOverflowError is thrown
### Java-Test: Testing with target depth: 20472
### Java-Test: Begin Test.
### Java-Test: 0 ms  Iteration : 0  waitTime : 1
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\os_windows.cpp:2587
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\\sb\\prod\\1657141214\\workspace\\open\\src\\hotspot\\os\\windows\\os_windows.cpp:2587), pid=27992, tid=39380
#  assert(!in_vm) failed: Undersized StackShadowPages
#
# JRE version: Java(TM) SE Runtime Environment (19.0+30) (fastdebug build 19-ea+30-2169)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+30-2169, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: C:\\sb\\prod\\1657256586\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\3\\hs_err_pid27992.mdmp
#
# An error report file with more information is saved as:
# C:\\sb\\prod\\1657256586\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\3\\hs_err_pid27992.log
----------System.err:(0/0)----------
----------rerun:(48/6480)*----------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00000280481a01b0):  JavaThread ""MainThread"" [_thread_in_vm, id=39380, stack(0x00000081c0500000,0x00000081c0600000)]

Stack: [0x00000081c0500000,0x00000081c0600000]

[error occurred during error reporting (printing native stack), id 0xe0000000, Internal Error (c:\sb\prod\1657141214\workspace\open\src\hotspot\os\windows\os_windows.cpp:2587)]

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~RuntimeStub::resolve_static_call 0x000002803aaeb2a7
J 2752 c2 GetLocalWithoutSuspendTest.recursiveMethod(II)I (37 bytes) @ 0x000002803afcec38 [0x000002803afcebc0+0x0000000000000078]
J 2752 c2 GetLocalWithoutSuspendTest.recursiveMethod(II)I (37 bytes) @ 0x000002803afcec08 [0x000002803afcebc0+0x0000000000000048]
J 2752 c2 GetLocalWithoutSuspendTest.recursiveMethod(II)I (37 bytes) @ 0x000002803afcec08 [0x000002803afcebc0+0x0000000000000048]
J 2752 c2 GetLocalWithoutSuspendTest.recursiveMethod(II)I (37 bytes) @ 0x000002803afcec08 [0x000002803afcebc0+0x0000000000000048]
J 2752 c2 GetLocalWithoutSuspendTest.recursiveMethod(II)I (37 bytes) @ 0x000002803afcec08 [0x000002803afcebc0+0x0000000000000048]

<snip>

J 2752 c2 GetLocalWithoutSuspendTest.recursiveMethod(II)I (37 bytes) @ 0x000002803afcec08 [0x000002803afcebc0+0x0000000000000048]
J 2752 c2 GetLocalWithoutSuspendTest.recursiveMethod(II)I (37 bytes) @ 0x000002803afcec08 [0x000002803afcebc0+0x0000000000000048]
J 2752 c2 GetLocalWithoutSuspendTest.recursiveMethod(II)I (37 bytes) @ 0x000002803afcec08 [0x000002803afcebc0+0x0000000000000048]
J 2752 c2 GetLocalWithoutSuspendTest.recursiveMethod(II)I (37 bytes) @ 0x000002803afcec08 [0x000002803afcebc0+0x0000000000000048]
J 2752 c2 GetLocalWithoutSuspendTest.recursiveMethod(II)I (37 bytes) @ 0x000002803afcec08 [0x000002803afcebc0+0x0000000000000048]
j  GetLocalWithoutSuspendTest.runTest()V+84
j  GetLocalWithoutSuspendTest.main([Ljava/lang/String;)V+7
J 2305 c2 java.lang.invoke.LambdaForm$DMH+0x0000000801001800.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V java.base@19-ea (14 bytes) @ 0x000002803af1f618 [0x000002803af1f5e0+0x0000000000000038]
J 2612 c2 java.lang.invoke.LambdaForm$MH+0x0000000801002c00.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; java.base@19-ea (38 bytes) @ 0x000002803af39f54 [0x000002803af39ea0+0x00000000000000b4]
J 2627 c2 java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; java.base@19-ea (24 bytes) @ 0x000002803ab5eef8 [0x000002803ab5ee80+0x0000000000000078]
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 java.base@19-ea
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 java.base@19-ea
J 2255 c2 java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@19-ea (108 bytes) @ 0x000002803aef81e0 [0x000002803aef7fe0+0x0000000000000200]
j  com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V+172
J 2225 c2 java.lang.Thread.run()V java.base@19-ea (19 bytes) @ 0x000002803aeda194 [0x000002803aeda140+0x0000000000000054]
v  ~StubRoutines::call_stub 0x000002803a9c10a7
--------------------------------------------------------------------------------
Decoding CodeBlob, name: resolve_static_call, at  [0x000002803aaeb220, 0x000002803aaeb3e0]  448 bytes
[MachCode]
  0x000002803aaeb220: 55

And the hs_err_pid file stops here... ouch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288949,JDK-8279663,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2xskb:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-07-08 15:14;sspitsyn;This issue is related to the addressed Windows issue: JDK-8279663.;;;","2022-07-08 15:33;sspitsyn;Temporarily assinging this bug to Coleen for evaluation.
Coleen, please, feel free to assign it back to me if necessary.
It seems that the last reserved page size adjustment was not enough when executed with -Xcomp on Windows.;;;","2022-07-08 15:54;coleenp;Ok, I'll have a look next week.  I increased StackShadowPages once for windows.;;;","2022-07-09 07:15;dcubed;serviceability/jvmti/GetLocalVariable/GetLocalWithoutSuspendTest.java passed using
jdk-19+30-2167 bits. jdk-19+30-2168 only contains a ProblemListing changeset.

The serviceability/jvmti/GetLocalVariable/GetLocalWithoutSuspendTest.java failures
are reproducible with jdk-19+30-2169 and it only contains one non-ProblemList
changeset:

JDK-8288949 serviceability/jvmti/vthread/ContStackDepthTest/ContStackDepthTest.java failing

So if this is a size related failure, then the fix for JDK-8288949
pushed us over some limit.;;;","2022-07-15 11:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9514
Date: 2022-07-15 12:31:44 +0000;;;","2022-07-18 08:07;dukebot;Changeset: 6882f0eb
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-07-18 15:04:08 +0000
URL:       https://git.openjdk.org/jdk/commit/6882f0eb39a1a1db1393925fab4143a725a96b6a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: Fix UndoRedo Action,JDK-8290010,5078855,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,tholenstein,tholenstein,2022-07-08 06:47,2022-11-14 11:35,2023-10-01 09:56,2022-10-24 08:09,20,,,,,,20,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-20,starter,,,,,,,,,,,,,"The history of the Undo Action should start zero when opening a new graph and node include node select actions. 

Currently in the ""Show sea of nodes"" view you can press Undo once before doing any changes. In the ""Show control view graph"" you can even go back many times when opening a new graph, ending up in wired stated of the graph (see screenshot). 

Further selecting a nodes is also added to the history. You can click on X different nodes in a row and then go back X times in history. Because the selection is not restored, for X steps back nothing happens. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289503,,,,,,,,,,,,,,,,,,,,,,,,"2022-07-08 06:43;tholenstein;Screenshot 2022-07-08 at 15.42.27.png;https://bugs.openjdk.org/secure/attachment/99917/Screenshot+2022-07-08+at+15.42.27.png",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xsjn:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-07-08 16:02;dlong;ILW = MLH = P4 ;;;","2022-07-11 00:49;tholenstein;Switching between views should also not be part of the history;;;","2022-10-21 05:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10813
Date: 2022-10-21 11:53:31 +0000;;;","2022-10-24 08:09;dukebot;Changeset: 5ac6f185
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2022-10-24 15:04:35 +0000
URL:       https://git.openjdk.org/jdk/commit/5ac6f185eec9efb063bf271516df6529b732a043
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/jndi/ldap/LdapCBPropertiesTest.java failling with NullPointerException,JDK-8290005,5078850,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdonovan,pjana,pjana,2022-07-08 03:58,2023-08-28 15:57,2023-10-01 09:56,2023-07-17 04:19,11.0.17,21,,,,,22,security-libs,,0,mach5-11u,noreg-self,sbr,sqebug,,,,,,,,,,,,,,"jdk-11.0.17+1-190 CI Job task failed with  below error: 
--------------------------------------------------------------------------
java.lang.NullPointerException
	at java.base/sun.security.ssl.SSLSocketImpl.duplexCloseOutput(SSLSocketImpl.java:569)
	at java.base/sun.security.ssl.SSLSocketImpl.close(SSLSocketImpl.java:503)
	at BaseLdapServer.closeSilently(BaseLdapServer.java:331)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
	at BaseLdapServer.close(BaseLdapServer.java:289)
	at LdapCBPropertiesTest.<init>(LdapCBPropertiesTest.java:105)
	at LdapCBPropertiesTest.main(LdapCBPropertiesTest.java:89)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:834)

Testcase input values: com/sun/jndi/ldap/LdapCBPropertiesTest.d/main.5.jta false true jdk.internal.sasl.tlschannelbinding value
result: Failed. Execution failed: `main' threw exception: java.lang.NullPointerException

Note: This issue is not happening in subsequent build, need to investigate more on this.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xsij:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2023-01-26 13:16;rhalade;Thanks for confirming. SSLSocketImpl has a null check at https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/sun/security/ssl/SSLSocketImpl.java#L649

But it may need to be performed with socketLock. Moving it back to security-libs;;;","2023-05-01 10:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13742
Date: 2023-05-01 17:39:02 +0000;;;","2023-06-08 11:43;rhalade;Review is not complete yet so targeted this fix to JDK 22. It is P4 as the impact is low, failure is not seen except two reported incidents.;;;","2023-07-17 04:19;dukebot;Changeset: afcf8e47
Author:    Matthew Donovan <mdonovan@openjdk.org>
Date:      2023-07-17 11:16:19 +0000
URL:       https://git.openjdk.org/jdk/commit/afcf8e4751c3d6c33abc34b5a04b7282e84f7cce
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[PPC64] JfrGetCallTrace: assert(_pc != nullptr) failed: must have PC,JDK-8290004,5078849,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mdoerr,mdoerr,2022-07-08 03:50,2022-11-02 03:57,2023-10-01 09:56,2022-07-11 02:22,11,17,19,20,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,"The assertion was hit in JavaThread::pd_get_top_frame_for_profiling (thread_linux_ppc.cpp:52) while testing jdk/jfr/startupargs/TestMultipleStartupRecordings.java.

We need to load last_Java_sp first. Otherwise, last_Java_pc can be 0 causing the assertion.
",,,,,,,,,,JDK-8290113,JDK-8290328,JDK-8291411,JDK-8291254,JDK-8290301,,,,,,,,,,,,,,,,,,JDK-8293998,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,"0|i2xsib:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-07-08 04:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/124
Date: 2022-07-08 11:14:14 +0000;;;","2022-07-11 02:22;dukebot;Changeset: cb6e9cb7
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-07-11 09:21:05 +0000
URL:       https://git.openjdk.org/jdk19/commit/cb6e9cb7286f609dec1fe1157bf95afc503870a9
;;;","2022-07-11 12:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/545
Date: 2022-07-11 19:43:16 +0000;;;","2022-07-12 03:54;mdoerr;Fix Request (17u, 11u):
Memory barrier is also missing in the LTS releases. Fix applies cleanly, but only the memory barrier addition should get backported. Not the cleanup part. (11u requires a trivial adaptation, see PR https://git.openjdk.org/jdk11u-dev/pull/1223 )
;;;","2022-07-14 03:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1221
Date: 2022-07-14 10:17:28 +0000;;;","2022-07-14 04:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1222
Date: 2022-07-14 11:00:36 +0000;;;","2022-07-14 04:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1223
Date: 2022-07-14 11:12:03 +0000;;;","2022-07-28 01:08;mbaesken;Still see today  in jdk20  a similar crash / assertion on  linuxppc64le when running jdk/jfr/tool/TestMetadata.java  :

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/nb/linuxppc64le/jdk-dev/src/hotspot/cpu/ppc/frame_ppc.inline.hpp:40), pid=3783436, tid=3783494
#  assert(_pc != nullptr) failed: must have PC
#
# JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-internal-adhoc.openjdk.jdk-dev)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-internal-adhoc.openjdk.jdk-dev, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-ppc64le)
# Problematic frame:
# V  [libjvm.so+0xfc611c]  JavaThread::pd_get_top_frame_for_profiling(frame*, void*, bool)+0x57c
#
# Core dump will be written. Default location: /output_openjdk20_dev_dbgU_linuxppc64le/jtreg_jdk_tier3_work/JTwork/scratch/core.3783436
#
# JFR recording file will be written. Location: /output_openjdk20_dev_dbgU_linuxppc64le/jtreg_jdk_tier3_work/JTwork/scratch/hs_err_pid3783436.jfr
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------
Host: xxxxxx, POWER9 (architected), altivec supported, 64 cores, 61G, Red Hat Enterprise Linux release 8.4 (Ootpa)
Time: Thu Jul 28 01:59:46 2022 CEST elapsed time: 3.569280 seconds (0d 0h 0m 3s)

---------------  T H R E A D  ---------------

Current thread (0x00007fff300050b0):  JfrThreadSampler ""JFR Thread Sampler"" [stack: 0x00007fff29600000,0x00007fff29800000] [id=3783494] _threads_hazard_ptr=0x00007fff0c279900, _nested_threads_hazard_ptr_cnt=0

Stack: [0x00007fff29600000,0x00007fff29800000],  sp=0x00007fff297fdd90,  free space=2039k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xfc611c]  JavaThread::pd_get_top_frame_for_profiling(frame*, void*, bool)+0x57c
V  [libjvm.so+0xfce3e0]  JfrGetCallTrace::get_topframe(void*, frame&)+0x40
V  [libjvm.so+0x10c4080]  OSThreadSampler::protected_task(SuspendedThreadTaskContext const&)+0x180
V  [libjvm.so+0x19bacdc]  SuspendedThreadTask::internal_do_task()+0x6c
V  [libjvm.so+0x1ab6218]  SuspendedThreadTask::run()+0x28
V  [libjvm.so+0x10c4324]  JfrThreadSampleClosure::sample_thread_in_java(JavaThread*, JfrStackFrame*, unsigned int)+0x94
V  [libjvm.so+0x10c5a88]  JfrThreadSampleClosure::do_sample_thread(JavaThread*, JfrStackFrame*, unsigned int, JfrSampleType)+0x378
V  [libjvm.so+0x10ce180]  JfrThreadSampler::task_stacktrace(JfrSampleType, JavaThread**) [clone .constprop.99]+0x2a0
V  [libjvm.so+0x10ced80]  JfrThreadSampler::run()+0x260
V  [libjvm.so+0x1b379e8]  Thread::call_run()+0x148
V  [libjvm.so+0x16499f4]  thread_native_entry(Thread*)+0x174
C  [libpthread.so.0+0x87c8]  start_thread+0xf8;;;","2022-11-02 03:57;mdoerr;You're right. This fix did not really fix the issue. The acquire barrier is not really needed. Real fix is adding a null check: JDK-8295872;;;",,,,,,,,,,,,,,,,,,,,,,,,
(se) AssertionError in SelectorImpl.implCloseSelector,JDK-8290002,5078847,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,dfuchs,dfuchs,2022-07-08 03:39,2022-07-18 12:30,2023-10-01 09:56,2022-07-11 07:45,20,,,,,,20,core-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,"java.lang.AssertionError
	at java.base/sun.nio.ch.SelectorImpl.implCloseSelector(SelectorImpl.java:199)
	at java.base/java.nio.channels.spi.AbstractSelector.close(AbstractSelector.java:127)
	at ...

This was observed on Windows while testing a prototype application.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2xshv:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-07-08 03:46;alanb;I think the assert is wrong, missed by JDK-8201315 when the spec was changed to allow channels be registered while selection operations are in progress. It's okay to assert that selectedKeys is empty but you can't assert that keys is empty here.
;;;","2022-07-11 00:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9442
Date: 2022-07-10 06:54:56 +0000;;;","2022-07-11 07:45;dukebot;Changeset: fc01666a
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-07-11 14:41:13 +0000
URL:       https://git.openjdk.org/jdk/commit/fc01666a5824d55b2549c81c0c3602aafdec693c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gc/g1/TestVerificationInConcurrentCycle.java fails due to use of debug-only option,JDK-8289997,5078842,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2022-07-08 01:23,2022-07-13 23:42,2023-10-01 09:56,2022-07-08 01:53,20,,,,,,20,hotspot,,0,gc-g1,gc-pending-review,testbug,tier2,,,,,,,,,,,,,,"gc/g1/TestVerificationInConcurrentCycle.java fails with

Error: VM option 'G1VerifyBitmaps' is develop and is available only in debug version of VM.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xsgr:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-07-08 01:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9424
Date: 2022-07-08 08:33:02 +0000;;;","2022-07-08 01:53;dukebot;Changeset: f1967cfa
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-07-08 08:49:17 +0000
URL:       https://git.openjdk.org/jdk/commit/f1967cfaabb30dba82eca0ab028f43020fe50c2b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Files:isDirectory and isRegularFile methods not throwing SecurityException,JDK-8289984,5078828,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,lancea,kganapureddy,kganapureddy,2022-07-07 23:01,2023-01-27 05:40,2023-10-01 09:56,2022-07-08 11:57,20,,,,,,20,core-libs,,0,conformance,regression,tck-red-20,,,,,,,,,,,,,,,"Couple of JCK tests are failing validating the assertion:
""https://download.java.net/java/early_access/jdk19/docs/api/java.base/java/nio/file/Files.html#isDirectory(java.nio.file.Path,java.nio.file.LinkOption...)""

""Throws:
SecurityException - In the case of the default provider, and a security manager is installed, its checkRead method denies read access to the file.""

The tests are failing - 
api/java_nio/file/Files/FilesTests.html[isDirectory_03, isRegularFile_03]

possibly regression caused by - https://bugs.openjdk.org/browse/JDK-8283335  in JDKb20-b05

Attached a standalone code which runs with supplied SecurityManager.

Note - It works fine with JDK20-b04.

JDKb20-b04 - Throws SecurityException As expected and checkRead invoked.
====
/scratch/jdk-cache/20/4/jdk-20/bin/java -Djava.security.manager=MySecurityManager TestFilesSecEx
WARNING: A command line option has enabled the Security Manager
WARNING: The Security Manager is deprecated and will be removed in a future release
 The value is java.system.class.loader
 The value is setContextClassLoader
 The value is modifyThreadGroup
 The value is sun.jnu.encoding
 -- CheckRead is invoked --
 The value is /scratch/kganapur/TestFIles/TestFilesSecEx.class
 -- CheckRead is invoked --
 The value is /scratch/kganapur/TestFIles/TestFilesSecEx.class
 -- CheckRead is invoked --
 The value is /scratch/kganapur/TestFIles/TestFilesSecEx.class
 -- CheckRead is invoked --
 The value is C:\Diffs
Exception in thread ""main"" java.lang.SecurityException: MyException
        at MySecurityManager.checkPermission(MySecurityManager.java:8)
        at java.base/java.lang.SecurityManager.checkRead(SecurityManager.java:751)
        at MySecurityManager.checkRead(MySecurityManager.java:14)
        at java.base/sun.nio.fs.UnixPath.checkRead(UnixPath.java:780)
        at java.base/sun.nio.fs.UnixFileSystemProvider.isDirectory(UnixFileSystemProvider.java:521)
        at java.base/java.nio.file.Files.isDirectory(Files.java:2316)
        at TestFilesSecEx.test01(TestFilesSecEx.java:12)
        at TestFilesSecEx.main(TestFilesSecEx.java:7)

============
JDKb20-b05 -  Does not Throws SecurityException as checkRead is not invoked.

/scratch/jdk-cache/20/5/jdk-20/bin/java -Djava.security.manager=MySecurityManager TestFilesSecEx
WARNING: A command line option has enabled the Security Manager
WARNING: The Security Manager is deprecated and will be removed in a future release
 The value is java.system.class.loader
 The value is setContextClassLoader
 The value is modifyThreadGroup
 The value is sun.jnu.encoding
 -- CheckRead is invoked --
 The value is /scratch/kganapur/TestFIles/TestFilesSecEx.class
 -- CheckRead is invoked --
 The value is /scratch/kganapur/TestFIles/TestFilesSecEx.class
 -- CheckRead is invoked --
 The value is /scratch/kganapur/TestFIles/TestFilesSecEx.class






",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300039,JDK-8283335,,,,,,,,,,"2022-07-07 23:53;alanb;8289984.patch;https://bugs.openjdk.org/secure/attachment/99915/8289984.patch","2022-07-07 23:04;kganapureddy;MySecurityManager.java;https://bugs.openjdk.org/secure/attachment/99913/MySecurityManager.java","2022-07-07 23:04;kganapureddy;TestFilesSecEx.java;https://bugs.openjdk.org/secure/attachment/99914/TestFilesSecEx.java",,,,,,,,,,,,,,,,b05,,,,,,,,"0|i2xsdf:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2022-07-07 23:45;alanb;The new UnixFileSystemProvider.readAttribtuesIfExists method is missing file.checkRead().The jtreg tests for checking Files methods with a SM is test/jdk/java/nio/file/Files/CheckPermissions.java. It didn't catch this because it pre-dates the new delegation and provider methods. I've added a preliminary patch that should fix it.;;;","2022-07-08 11:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9433
Date: 2022-07-08 18:13:56 +0000;;;","2022-07-08 11:57;dukebot;Changeset: 6aaf141f
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2022-07-08 18:56:04 +0000
URL:       https://git.openjdk.org/jdk/commit/6aaf141f61416104020107c371592812a4c723d9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: Assert failed in PhaseCFG::verify() after JDK-8183390,JDK-8289954,5078793,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pli,dlong,dlong,2022-07-07 16:10,2022-07-27 15:53,2023-10-01 09:56,2022-07-18 05:21,19,,,,,,19,hotspot,,0,c2,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-20,tier8,,,,,,,,,,,,"#  Internal Error (\workspace\open\src\hotspot\share\opto\block.cpp:1251), pid=34716, tid=13156
#  assert(n->is_Root() || n->is_Region() || n->is_Phi() || n->is_MachMerge() || def_block->dominates(block)) failed: uses must be dominated by definitions
",,,,,,,,,,JDK-8291319,JDK-8291439,JDK-8290477,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291025,,,,JDK-8183390,,,,,,,"2022-07-07 16:16;dlong;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/99911/FuzzerUtils.java","2022-07-07 16:16;dlong;Test.java;https://bugs.openjdk.org/secure/attachment/99912/Test.java","2022-07-26 01:14;fyang;hs_err_pid2130903.log;https://bugs.openjdk.org/secure/attachment/100138/hs_err_pid2130903.log","2022-07-07 16:16;dlong;hs_err_pid34716.log;https://bugs.openjdk.org/secure/attachment/99909/hs_err_pid34716.log","2022-07-26 01:15;fyang;replay_pid2130903.log;https://bugs.openjdk.org/secure/attachment/100139/replay_pid2130903.log","2022-07-07 16:16;dlong;replay_pid34716.log;https://bugs.openjdk.org/secure/attachment/99910/replay_pid34716.log",,,,,,,,,,,,,b24,,,,,,,,"0|i2xs5n:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-07 16:18;dlong;ILW = same as JDK-8288112, JDK-8288112 = P3;;;","2022-07-08 14:07;dlong;I bisected the start of the problem to JDK-8183390.  [~pli], please take a look.;;;","2022-07-08 23:42;pli;Hi [~dlong], 

Thanks for reporting this. I have reproduced this issue. Cause is that I deleted a loop type check in SuperWord::unrolling_analysis() by mistake in while re-enabling the post loop vectorization. I will fix it ASAP. BTW: I modified the JBS title because previous title is too long.;;;","2022-07-11 01:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/130
Date: 2022-07-11 08:41:21 +0000;;;","2022-07-18 05:21;dukebot;Changeset: 2677dd6d
Author:    Pengfei Li <pli@openjdk.org>
Date:      2022-07-18 12:18:06 +0000
URL:       https://git.openjdk.org/jdk19/commit/2677dd6d2318afb4afffde46f8e8e20276cb2894
;;;","2022-07-26 01:16;fyang;[~pli] :
Seems that the same assertion failure is still happening when running compiler/loopopts/TestUnreachableInnerLoop.java with fastdebug build on linux-riscv64 platform.
I have attached the hs_err and reply files (hs_err_pid2130903.log & replay_pid2130903.log).  Please take a look.  Thanks.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Visual Studio libs msvcp140_1.dll and msvcp140_2.dll missing from build,JDK-8289952,5078791,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,kcr,kcr,kcr,2022-07-07 16:05,2022-08-17 07:24,2023-10-01 09:56,2022-07-11 05:52,8,jfx11,jfx17,jfx19,,,jfx19,javafx,,0,noreg-build,sn_122,,,,,,,,,,,,,,,,"On Windows platforms we redistribute the Visual Studio runtime libraries with the JavaFX build so that JavaFX applications can run on systems that don't have them installed already. The main C++ runtime library is msvcp140.dll. Additional C++ functionality has been added to msvcp140_1.dll and msvcp140_2.dll neither of which are shipped.

Recently, WebKit has started using some functions that are only found in msvcp140_2.dll. We need to include these libraries as part of the JavaFX build along with msvcp140.dll (which is already included).",,,,,,,,,,JDK-8292553,JDK-8292184,JDK-8290132,,,,,,,,,,,,,,,,JDK-8281089,,JDK-8285881,,,,,,,JDK-8289944,,,,,,JDK-8290462,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2xs57:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-07-07 16:07;kcr;This is a latent bug in the build system. It will block the upcoming WebKit 614.1 update, JDK-8285881.;;;","2022-07-07 16:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/818
Date: 2022-07-07 23:16:12 +0000;;;","2022-07-07 16:23;kcr;NOTE: This really should have been done back when we updated to Visual Studio 2019, but we didn't do that because of JDK-8281089, which would have caused a jlinked application to fail. Now that JDK-8281089 is fixed, we can now include these libraries and expect them to work even when using the JMODs with jlink.

;;;","2022-07-11 05:51;dukebot;Changeset: cbb53b22
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-07-11 12:47:57 +0000
URL:       https://git.openjdk.org/jfx/commit/cbb53b22fc87e880d59ac3e217a86a4733d2b0f3
;;;","2022-08-09 05:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/75
Date: 2022-08-09 12:18:51 +0000;;;","2022-08-17 06:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/107
Date: 2022-08-17 13:35:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve Thread description of inherited AccessControlContext,JDK-8289930,5078765,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2022-07-07 08:16,2022-07-27 13:51,2023-10-01 09:56,2022-07-12 07:48,19,,,,,,19,core-libs,,0,loom,noreg-doc,,,,,,,,,,,,,,,,"""Inheritance when creating threads"" is a new section in the Thread class description to list the things that are inherited when creating a Thread. The description of the inherited AccessControlContext looks like it wants to be in its own section. The javadoc should be tweaked to remove the intro """"Inheritance when creating threads"" and replace it with a sentence to say that the captured caller context is the new thread's ""inherited AccessControlContext"".",,,,,,,,,,JDK-8290286,JDK-8291298,JDK-8291423,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xrzf:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-07-08 00:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/121
Date: 2022-07-07 16:11:11 +0000;;;","2022-07-12 07:48;dukebot;Changeset: 59d0c739
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-07-12 14:46:15 +0000
URL:       https://git.openjdk.org/jdk19/commit/59d0c739ac983414bd429cf2b14c29b61cef5481
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[test] LoadLibraryUnloadTest.java failed with ""Failed to unload native library""",JDK-8289919,5078754,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,rriggs,dcubed,dcubed,2022-07-07 06:59,2023-01-31 03:44,2023-10-01 09:56,2022-07-15 11:29,20,,,,,,20,core-libs,,0,intermittent,tier1,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

java/lang/ClassLoader/loadLibraryUnload/LoadLibraryUnloadTest.java

Here's a snippet from the log file:

#section:main
----------messages:(4/202)----------
command: main -Xcheck:jni LoadLibraryUnloadTest
reason: User specified action: run main/othervm/native -Xcheck:jni LoadLibraryUnloadTest 
Mode: othervm [/othervm specified]
elapsed time (seconds): 0.52
----------configuration:(0/0)----------
----------System.out:(6/785)----------
COMMAND: /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+5-233/linux-x64.jdk/jdk-20/bin/java -Dtest.classes=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8821/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/4d2ecfd7-5b3c-4cee-a8fe-e83c7eb61723/runs/66c051d6-e171-4cb6-b2a2-f611590d7184/testoutput/test-support/jtreg_open_test_jdk_tier1_part1/classes/4/java/lang/ClassLoader/loadLibraryUnload/LoadLibraryUnloadTest.d -Djava.library.path=/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+5-233/linux-x64.test/jdk/jtreg/native LoadLibraryUnload
[2022-07-06T21:51:04.485063487Z] Gathering output for process 365633
Native library loaded.
Native library loaded from Class1.
Native library loaded from Class1.
Native library loaded in 1 threads
----------System.err:(13/846)----------
java.lang.RuntimeException: Failed to unload native library: expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at LoadLibraryUnloadTest.main(LoadLibraryUnloadTest.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Failed to unload native library: expected true, was false
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Failed to unload native library: expected true, was false
----------rerun:(36/6735)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290397,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,,,,,"0|i2xrwz:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ae6d091,,,,,,,Verified,,"2022-07-07 12:23;mchung;This failure might be caused by JDK-8287596.;;;","2022-07-07 12:28;mchung;[~rriggs] [~xuelei] do u mind taking a look?;;;","2022-07-08 00:06;xuelei;I can see test failures in my laptop (MacBook), but with a different log.  The failure happens before ForceGC is called.

Exception in thread ""main"" java.lang.RuntimeException: Expected to see 8 failing threads: expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at LoadLibraryUnload.main(LoadLibraryUnload.java:143)
STDERR:
java.lang.RuntimeException: Native library expected to be loaded in 2 threads.: expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at LoadLibraryUnloadTest.main(LoadLibraryUnloadTest.java:90)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Native library expected to be loaded in 2 threads.: expected true, was false
;;;","2022-07-08 13:58;rriggs;I suspect a race between the Cleaner that is going to call JNI_OnUnload (in NativeLibraries.java:377) 
when the ClassLoader is no longer referenced and 
the test code that exits as soon as it detects that the p.Class1 is no longer referenced.

At least in one of the failures, it fails because a printf(""Native library unloaded.\n"") 
from the JNI_OnUnload is not found in the process output.

A somewhat fragile way to increase the reliability of the test is to add a `sleep(5 sec)` before exiting LoadLibraryUnloadTest.

Supposing the library had a native method to stash an object reference in a JNI Global reference.
The Global reference would be explicitly deleted when _OnUnload was called.
The Test could then wait for a WeakReference to the same object to be cleared before it exited.
Or something simpler...;;;","2022-07-13 06:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9474
Date: 2022-07-12 20:00:22 +0000;;;","2022-07-15 11:29;dukebot;Changeset: 0184f46b
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2022-07-15 18:27:44 +0000
URL:       https://git.openjdk.org/jdk/commit/0184f46bdfe4441ea6ef28c658c6677c4c736ee9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Metadata for regionsRefilled of G1EvacuationStatistics event is wrong,JDK-8289917,5078752,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rschmelter,rschmelter,rschmelter,2022-07-07 06:29,2023-07-31 10:27,2023-10-01 09:56,2022-07-12 07:56,,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jfr,,,,,,,,,,,,,,,"The regionsRefilled field of the G1EvacuationStatistics JFR event has wrong metadata. Specifically the type is specified as bytes and the description is copied from the regionEndWaste field.
",,,,,,,,,,JDK-8313423,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xrwj:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-07-11 04:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9448
Date: 2022-07-11 11:02:04 +0000;;;","2022-07-12 07:56;dukebot;Changeset: 728157fa
Author:    Ralf Schmelter <rschmelter@openjdk.org>
Date:      2022-07-12 14:51:55 +0000
URL:       https://git.openjdk.org/jdk/commit/728157fa03913991088f6bb257a8bc16706792a9
;;;","2023-06-28 00:41;rschmelter;Fix request 17u

The risk of the change is very low. It only changes description o two fields and a content type in a JFR event.
The change was tested running the nighty SAP testsuite of jdk17u-dev which includes tier1, tier2 and tier3 tests.;;;","2023-06-30 00:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1520
Date: 2023-06-30 07:09:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
unify os::message_box across posix platforms,JDK-8289910,5078740,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-07-07 03:42,2022-08-17 00:03,2023-10-01 09:56,2022-07-12 05:14,20,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,os::message_box can be unified across the posix platforms.,,,,,,,,,,JDK-8292528,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xrtv:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-07-07 04:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9409
Date: 2022-07-07 11:52:27 +0000;;;","2022-07-12 05:14;dukebot;Changeset: e5491a26
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-07-12 12:10:28 +0000
URL:       https://git.openjdk.org/jdk/commit/e5491a2605177a9dca87a060d99aa5ea4fd4a239
;;;","2022-08-10 04:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/629
Date: 2022-08-10 11:37:40 +0000;;;","2022-08-10 05:29;mbaesken;jdk17u backport request
I would like to have the patch in jdk17u-dev as well because the cleanup would be beneficial there too. Risk is low , patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
A NullPointerException thrown from guard expression,JDK-8289894,5078719,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2022-07-07 00:39,2022-07-27 13:25,2023-10-01 09:56,2022-07-11 02:03,19,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,"Consider code like:
---
public class SwitchGuard {
    public static void main(String... args) {
        test(null);
    }
    private static void test(Object o) {
        switch (o) {
            case null, String s when s.isEmpty() -> System.err.println(""OK."");
            default -> {}
        }
    }
}
---

when ran, this should print ""OK."", but it fails with a NPE:
---
$ java --enable-preview SwitchGuard
Exception in thread ""main"" java.lang.NullPointerException: Cannot invoke ""String.isEmpty()"" because ""<local3>"" is null
        at SwitchGuard.test(SwitchGuard.java:7)
        at SwitchGuard.main(SwitchGuard.java:3)
---
",,,,,,,,,,JDK-8291252,JDK-8290110,JDK-8291409,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xrp7:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-07-07 07:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/120
Date: 2022-07-07 14:48:09 +0000;;;","2022-07-11 02:03;dukebot;Changeset: 25f4b043
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-07-11 08:59:32 +0000
URL:       https://git.openjdk.org/jdk19/commit/25f4b04365e40a91ba7a06f6f9fe99e1785ce4f4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wrong wording in @param doc for HashMap.newHashMap et. al.,JDK-8289872,5078675,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smarks,smarks,smarks,2022-07-06 17:22,2022-07-27 13:13,2023-10-01 09:56,2022-07-08 10:08,19,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"For the new static factory methods introduced by JDK-8186958, the @param doc for the type parameter K has the wrong wording. It says

    K - the type of keys maintained by this map

instead it should say

    K - the type of keys maintained by the new map
",,,,,,,,,,JDK-8291404,JDK-8290103,JDK-8291247,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284780,JDK-8186958,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xrir:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2022-07-06 23:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/118
Date: 2022-07-07 06:06:42 +0000;;;","2022-07-08 10:07;dukebot;Changeset: eeaf0bba
Author:    Stuart Marks <smarks@openjdk.org>
Date:      2022-07-08 17:03:48 +0000
URL:       https://git.openjdk.org/jdk19/commit/eeaf0bbabc6632c181b191854678e72a333ec0a5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[PPC64] SIGSEGV in C2Compiler::init_c2_runtime() after JDK-8289060,JDK-8289856,5078654,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,mdoerr,mdoerr,mdoerr,2022-07-06 13:39,2023-01-18 18:11,2023-10-01 09:56,2022-07-07 03:22,20,,,,,,20,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oraclejdk-na,oracle-triage-20,,,,,,,,,,,"VM crashes with SIGSEGV during initialization in C2Compiler::init_c2_runtime() while trying to write into an array with negative index: ""OptoReg::vm2opto[r->value()] = i;"" (c2compiler.cpp:70).
""r"" is a nullptr and the new implementation of ""r->value()"" yields a negative value. (Calling nullptr->value() is undefined behavior!)

Note: Vector registers are OptoRegs but don't have a VMReg representation on PPC64.
",,,,,,,,,,JDK-8290311,JDK-8290303,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289060,,,,JDK-8188139,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,"0|i2xre3:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-06 13:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9403
Date: 2022-07-06 20:48:14 +0000;;;","2022-07-06 17:00;dlong;ILW = crash; always; no workaround = HHH = P1;;;","2022-07-07 03:22;dukebot;Changeset: e05b2f2c
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-07-07 10:21:25 +0000
URL:       https://git.openjdk.org/jdk/commit/e05b2f2c3b9b0276099766bc38a55ff835c989e1
;;;","2022-07-11 13:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1205
Date: 2022-07-07 20:13:38 +0000;;;","2022-07-12 08:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/536
Date: 2022-07-07 20:05:39 +0000;;;","2022-07-12 08:41;mdoerr;Fix Request (11u, 17u):
Fixes undefined behavior. (Currently no real known problem in the LTS releases, but should better get fixed.) In addition, required for other backports (JDK-8289060, JDK-8290082). Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Update HarfBuzz to 4.4.1,JDK-8289853,5078651,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,prr,prr,2022-07-06 13:28,2023-02-07 09:17,2023-10-01 09:56,2022-07-11 12:21,11,17,20,,,,20,client-libs,,0,3rdparty,harfbuzz,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,noreg-other,sn_122,,,"The harfbuzz OpenType font layout engine was last updated in JDK 17
Since then it has had numerous updates and we should upgrade JDK to the latest",,,,,,,,,,JDK-8290537,JDK-8290952,JDK-8290953,JDK-8291239,JDK-8290538,JDK-8291257,JDK-8290392,JDK-8290879,,,,,,,,,,,,,JDK-8215065,,JDK-8301998,,,,,,,,,,,JDK-8290547,,,,JDK-8291053,JDK-8261169,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xrdf:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-07-06 13:29;prr;Latest at https://github.com/harfbuzz/harfbuzz/releases right now is 4.4.1 ;;;","2022-07-07 17:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9420
Date: 2022-07-07 23:06:26 +0000;;;","2022-07-11 12:21;dukebot;Changeset: f42dab85
Author:    Phil Race <prr@openjdk.org>
Date:      2022-07-11 19:19:27 +0000
URL:       https://git.openjdk.org/jdk/commit/f42dab85924d6a74d1c2c87bca1970e2362f45ea
;;;","2022-07-11 16:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/6
Date: 2022-07-11 22:55:25 +0000;;;","2022-07-11 17:06;prr;Fix Request
I'd like to backport this to JDK19u - as an update to a 3rd party lib it should and will
be backported to 11u and 17u so we also need it in 19u for parity for anyone upgrading.
The backport applied cleanly as can be seen here https://github.com/openjdk/jdk19u/pull/6 ;;;","2022-07-21 12:22;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
An update of an external lib we need in 17.
Clean backport.
SAP nighlty testing passed.;;;","2022-07-21 12:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/581
Date: 2022-07-21 19:48:13 +0000;;;","2022-07-22 05:28;yan;Fix request (15u, 13u)

backporting for parity with major releases.
Clean backport.
First round of testing is OK, more to follow on schedule.;;;","2022-07-22 05:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/239
Date: 2022-07-22 12:28:31 +0000;;;","2022-07-24 00:58;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
An update of an external lib we need in 11.
Clean backport. SAP nighlty testing passed.;;;","2022-07-24 05:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1270
Date: 2022-07-24 07:57:47 +0000;;;","2022-07-26 11:05;shade;Note this breaks older GCCs: JDK-8291053.;;;","2022-07-27 01:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/378
Date: 2022-07-27 08:33:33 +0000;;;",,,,,,,,,,,,,,,,,,,,
Update Standard Algorithm Names document in accordance with JDK-8289602,JDK-8289848,5078642,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kdriver,kdriver,kdriver,2022-07-06 12:41,2022-07-13 23:18,2023-10-01 09:56,2022-07-07 07:46,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,The description of ISO10126Padding in this document should be updated and should remove references to xmlenc.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289602,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xrbn:",9223372036854775807,b06,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZGC: OOM before clearing all SoftReferences,JDK-8289838,5078626,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,eosterlund,dcubed,dcubed,2022-07-06 06:54,2023-05-15 01:33,2023-10-01 09:56,2022-11-02 09:40,17,20,,,,,20,hotspot,,0,tier5,zgc,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

vmTestbase/gc/gctests/SoftReference/SoftReferenceTest/SoftReferenceTest.java

Here's a snippet from the log file:

#section:main
----------messages:(4/282)----------
command: main gc.gctests.SoftReference.SoftReferenceTest.SoftReferenceTest -stressTime 600
reason: User specified action: run main/othervm gc.gctests.SoftReference.SoftReferenceTest.SoftReferenceTest -stressTime 600 
Mode: othervm [/othervm specified]
elapsed time (seconds): 1.821
----------configuration:(0/0)----------
----------System.out:(23/1163)----------
Stress time: 2400 seconds
Stress iterations factor: 1
Stress threads factor: 1
Stress runs factor: 1
Max memory: 1038090240
Sleep time: 500
Iterations: 0
Number of threads: 24
Run GC thread: false
Run mem diag thread: false
Run forever: false
For random generator using seed: 7240189110735516863
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=7240189110735516863"" to command line.
nsk.share.TestFailure: 2994 out of 160065 SoftReferences was not null at time of OutOfMemoryError
	at gc.gctests.SoftReference.SoftReferenceTest.SoftReferenceTest.run(SoftReferenceTest.java:134)
	at nsk.share.test.Tests$TestRunner.execute(Tests.java:82)
	at nsk.share.test.Tests$TestRunner.run(Tests.java:96)
	at nsk.share.gc.GC.runTest(GC.java:114)
	at gc.gctests.SoftReference.SoftReferenceTest.SoftReferenceTest.main(SoftReferenceTest.java:147)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)
----------System.err:(14/802)----------
nsk.share.TestFailure: Test exit code: 97
	at nsk.share.test.Tests$TestRunner.execute(Tests.java:90)
	at nsk.share.test.Tests$TestRunner.run(Tests.java:96)
	at nsk.share.gc.GC.runTest(GC.java:114)
	at gc.gctests.SoftReference.SoftReferenceTest.SoftReferenceTest.main(SoftReferenceTest.java:147)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: nsk.share.TestFailure: Test exit code: 97
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: nsk.share.TestFailure: Test exit code: 97
----------rerun:(34/8259)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308009,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,generic,,,,,"0|i2xr83:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2022-07-22 05:52;eosterlund;I looked at the relevant code with [~aboldtch].

should_clear_soft_references() in mainline ZGC is based purely on the cause of the GC, but the GC cause being used to catch that we need to clear soft references is asynchronous. Anothe GC could start an instant before it is requested, such as a metadata threshold GC for example. Then the metadata threshold GC will be used instead.

Even if the other async GC that was requested is also of the kind that requires soft references to be cleared, such as a concurrently requested _z_allocation_stall GC, it is possible that the async GC request is performed after a soft reference was created, after a concurrent thread requests a _z_allocation_stall GC, but before that GC has reached mark_start, implying that the sequence number will look like it already got to run an entire GC before throwing, while in fact it did not.;;;","2022-07-22 06:21;eosterlund;This sleep pretty much deterministically provokes the problem:

diff --git a/src/hotspot/share/gc/z/zDriver.cpp b/src/hotspot/share/gc/z/zDriver.cpp
index f216c71217d..f165a7e8aa1 100644
--- a/src/hotspot/share/gc/z/zDriver.cpp
+++ b/src/hotspot/share/gc/z/zDriver.cpp
@@ -414,6 +414,8 @@ public:
     const bool clear = should_clear_soft_references(request);
     ZHeap::heap()->set_soft_reference_policy(clear);

+    os::naked_short_sleep(999);
+
     // Select number of worker threads to use
     const uint nworkers = select_active_worker_threads(request);
     ZHeap::heap()->set_active_workers(nworkers);;;;","2022-07-22 07:12;eosterlund;This patch solves the problem:

diff --git a/src/hotspot/share/gc/z/zHeap.cpp b/src/hotspot/share/gc/z/zHeap.cpp
index f0441046999..01dcc3f693d 100644
--- a/src/hotspot/share/gc/z/zHeap.cpp
+++ b/src/hotspot/share/gc/z/zHeap.cpp
@@ -221,6 +221,14 @@ void ZHeap::flip_to_remapped() {
 void ZHeap::mark_start() {
   assert(SafepointSynchronize::is_at_safepoint(), ""Should be at safepoint"");

+  if (ZHeap::heap()->has_alloc_stalled()) {
+    // If there are stalled allocations, ensure that regardless of the
+    // cause of the GC, we have to clear soft references, as we are just
+    // about to increment the sequence number, and all previous allocations
+    // will throw if not presented with enough memory.
+    ZHeap::heap()->set_soft_reference_policy(true);
+  }
+
   // Flip address view
   flip_to_marked();;;;","2022-10-11 02:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10646
Date: 2022-10-11 09:48:39 +0000;;;","2022-11-02 09:40;dukebot;Changeset: 491d43c1
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2022-11-02 16:36:38 +0000
URL:       https://git.openjdk.org/jdk/commit/491d43c1876fcb55d090e36a46ff0c02d3a2b3eb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1: G1CollectionSet::finalize_young_part clears survivor list too early,JDK-8289800,5078587,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iwalulya,iwalulya,iwalulya,2022-07-05 23:50,2022-07-13 23:34,2023-10-01 09:56,2022-07-07 08:11,20,,,,,,20,hotspot,,0,ergonomics,gc-g1,,,,,,,,,,,,,,,,"In G1CollectionSet::finalize_young_part 

```
// Clear the fields that point to the survivor list - they are all young now.
  survivors->convert_to_eden();
  .
  .
   double predicted_base_time_ms = _policy->predict_base_elapsed_time_ms(pending_cards);
```
clears the list of survivor regions before we predict the evacuation costs of these regions. 

The predict_survivor_regions_evac_time(); called by predict_base_elapsed_time_ms  attempts to iterate the survivor regions list after it has been cleared, thus it returns 0 survivor_regions_evac_time.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xqzf:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-07-06 09:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9401
Date: 2022-07-06 16:10:27 +0000;;;","2022-07-07 08:11;dukebot;Changeset: 74ca6ca2
Author:    Ivan Walulya <iwalulya@openjdk.org>
Date:      2022-07-07 15:09:30 +0000
URL:       https://git.openjdk.org/jdk/commit/74ca6ca25ba3ece0c92bf2c6e4f940996785c9a3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build warning in methodData.cpp memset zero-length parameter,JDK-8289799,5078586,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stuefe,stuefe,stuefe,2022-07-05 23:49,2022-07-27 13:04,2023-10-01 09:41,2022-07-07 02:44,11,17,18,19,20,,20,hotspot,,0,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,"Seen in our CI on Fedora 12 with gcc 8.3:

```
void Copy::pd_zero_to_bytes(void*, size_t)' at /home/ubuntu/client_home/workspace/build-user-branch-linux_x86_64/SapMachine/src/hotspot/cpu/x86/copy_x86.hpp:59:15,
    inlined from 'static void Copy::zero_to_bytes(void*, size_t)' at /home/ubuntu/client_home/workspace/build-user-branch-linux_x86_64/SapMachine/src/hotspot/share/utilities/copy.hpp:298:21,
    inlined from 'void MethodData::initialize()' at 

/home/ubuntu/client_home/workspace/build-user-branch-linux_x86_64/SapMachine/src/hotspot/share/oops/methodData.cpp:1248:22:
/opt/devkits/devkit-fedora-gcc-12-8.3.0/x86_64-linux-gnu/sysroot/usr/include/bits/string3.h:82:30: error: call to '__warn_memset_zero_len' declared with attribute warning: memset used with constant zero length parameter; this could be due to transposed parameters [-Werror]
       __warn_memset_zero_len ();
       ~~~~~~~~~~~~~~~~~~~~~~~^~
```",,,,,,,,,,JDK-8290235,JDK-8291244,JDK-8291401,JDK-8289991,JDK-8289995,JDK-8289990,JDK-8290245,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xqz7:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-07-06 00:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9390
Date: 2022-07-06 07:23:17 +0000;;;","2022-07-07 02:44;dukebot;Changeset: cce77a70
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-07-07 09:42:14 +0000
URL:       https://git.openjdk.org/jdk/commit/cce77a700141a854bafaa5ccb33db026affcf322
;;;","2022-07-07 06:55;stuefe;Fix Request (11, 17)

Would like to fix this in JDK 11 and 17 since it breaks our builds in certain CI systems with GCC 8.3.

Fix carries no risk and applies cleanly.;;;","2022-07-07 06:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/119
Date: 2022-07-07 13:50:36 +0000;;;","2022-07-07 07:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/535
Date: 2022-07-07 13:51:04 +0000;;;","2022-07-07 07:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1204
Date: 2022-07-07 13:51:18 +0000;;;","2022-07-11 09:24;dukebot;Changeset: ea21c465
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-07-08 08:13:20 +0000
URL:       https://git.openjdk.org/jdk/commit/ea21c46531e8095c12153f787a24715eb8efbb03
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
tools/launcher/I18NArgTest.java fails on Japanese Windows environment,JDK-8289797,5078584,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tkiriyama,tkiriyama,tkiriyama,2022-07-05 23:30,2023-08-09 06:23,2023-10-01 09:56,2022-09-27 09:07,20,,,,,,20,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,"tools/launcher/I18NArgTest.java runs only on Japanese Windows environment. But this test fails with following output:

++++Test Output++++
  NOTE: Picked up JDK_JAVA_OPTIONS: -Dtest.src=C:\\Users\\clouduser\\git\\openjdk_build\\test\\jdk\\tools\\launcher -Dtest.classes=C:\\Users\\clouduser\\git\\tmp\\JTwork\\classes\\tools\\launcher\\I18NArgTest.d -cp C:\\Users\\clouduser\\git\\tmp\\JTwork\\classes\\tools\\launcher\\I18NArgTest.d I18NArgTest ""?\\"" 30bd
  Error: Cannot specify main class in environment variable JDK_JAVA_OPTIONS
++++Test Stack Trace++++
java.lang.Throwable: current stack of the test
  TestHelper.doExec(TestHelper.java:480)
  TestHelper.doExec(TestHelper.java:445)
  I18NArgTest.execTest(I18NArgTest.java:105)
  I18NArgTest.execTest(I18NArgTest.java:53)
  I18NArgTest.main(I18NArgTest.java:45)
  java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
  java.base/java.lang.reflect.Method.invoke(Method.java:578)
  com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
  java.base/java.lang.Thread.run(Thread.java:1596)
++++End of Test Info++++

This test specifies JDK_JAVA_OPTIONS environment variable with main class. But now, JDK_JAVA_OPTIONS is not
allowed including main class as described below.
https://docs.oracle.com/en/java/javase/18/docs/specs/man/java.html#using-the-jdk_java_options-launcher-environment-variable

In order to mitigate potential misuse of JDK_JAVA_OPTIONS behavior, options that specify the main class (such as -jar) 
or cause the java launcher to exit without executing the main class (such as -h) are disallowed in the environment variable. 
If any of these options appear in the environment variable, the launcher will abort with an error message.

So, I would like to remove this test section.",,,,,,,,,,JDK-8312609,JDK-8314039,JDK-8313471,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xqyr:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5d8045fc,,,,,,,,,"2022-07-05 23:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9389
Date: 2022-07-06 06:40:32 +0000;;;","2022-09-27 09:07;dukebot;Changeset: a11477ce
Author:    KIRIYAMA Takuya <kiriyama.takuya@fujitsu.com>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2022-09-27 16:03:33 +0000
URL:       https://git.openjdk.org/jdk/commit/a11477ce259d6d2a053117a2300ebb171145cfde
;;;","2023-08-08 05:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1646
Date: 2023-08-08 12:16:12 +0000;;;","2023-08-08 05:53;mdoerr;Fix Request (17u): 
Should get backported for parity with 17.0.9-oracle. Applies cleanly. Test has passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Map::replaceAll javadoc has redundant @throws clauses,JDK-8289779,5078564,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,smarks,smarks,smarks,2022-07-05 16:09,2022-07-27 12:52,2023-10-01 09:56,2022-07-07 09:58,11,17,18,19,8,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"The javadoc for Map::replaceAll has duplicate @throws clauses for ClassCastException and NullPointerException. This is mostly benign but it causes problems with a pending change to javadoc (JDK-6509045).

In the current javadoc output, the contents of both clauses are rendered. The duplicate clauses mostly say the same thing, though, so aside from some minor wording changes, I'd consider this to be an editorial change.",,,,,,,,,,JDK-8289971,JDK-8291234,JDK-8291396,,,,,,,,,,,,,,,,,,JDK-6509045,,,,,,,JDK-8255426,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,,,,,,,"0|i2xqub:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2022-07-05 17:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/111
Date: 2022-07-06 00:32:00 +0000;;;","2022-07-07 09:58;dukebot;Changeset: a8eb7286
Author:    Stuart Marks <smarks@openjdk.org>
Date:      2022-07-07 16:54:15 +0000
URL:       https://git.openjdk.org/jdk19/commit/a8eb728680529e81bea0584912dead394c35b040
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZGC: incorrect use of os::free() for mountpoint string handling after JDK-8289633,JDK-8289778,5078563,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-07-05 16:03,2022-07-13 23:32,2023-10-01 09:56,2022-07-07 05:55,20,,,,,,20,hotspot,,0,tencent-interest,zgc,,,,,,,,,,,,,,,,"NMT Block at 0x00007fcfc00a0ce0, corruption at: 0x00007fcfc00a0ce0:
0x00007fcfc00a0c60:   40 de 29 c8 cf 7f 00 00 85 00 00 00 00 00 00 00
0x00007fcfc00a0c70:   31 35 20 33 37 20 30 3a 31 34 20 2f 20 2f 73 79
0x00007fcfc00a0c80:   73 20 72 77 2c 72 65 6c 61 74 69 6d 65 20 73 68
0x00007fcfc00a0c90:   61 72 65 64 3a 36 20 2d 20 73 79 73 66 73 20 73
0x00007fcfc00a0ca0:   79 73 66 73 20 72 77 0a 00 00 00 00 00 00 00 00
0x00007fcfc00a0cb0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x00007fcfc00a0cc0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x00007fcfc00a0cd0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x00007fcfc00a0ce0:   00 00 00 00 00 00 00 00 25 00 00 00 00 00 00 00
0x00007fcfc00a0cf0:   2f 73 79 73 00 7f 00 00 78 00 00 c0 cf 7f 00 00
0x00007fcfc00a0d00:   00 00 00 00 00 00 00 00 55 00 00 00 00 00 00 00
0x00007fcfc00a0d10:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x00007fcfc00a0d20:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x00007fcfc00a0d30:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x00007fcfc00a0d40:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x00007fcfc00a0d50:   00 00 00 00 00 00 00 00 25 00 00 00 00 00 00 00
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/mallocTracker.cpp:151
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jvm/jdk/src/hotspot/share/services/mallocTracker.cpp:151), pid=72206, tid=72207
#  fatal error: NMT corruption: Block at 0x00007fcfc00a0ce0: header canary broken
#
# JRE version:  (20.0) (slowdebug build )
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 20-internal-adhoc.jvm.jdk, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1042bfb]  MallocHeader::assert_block_integrity() const+0x95
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#

Stack: [0x00007fcfc8c12000,0x00007fcfc8d13000],  sp=0x00007fcfc8d103b0,  free space=1016k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1042bfb]  MallocHeader::assert_block_integrity() const+0x95
V  [libjvm.so+0x104311e]  MallocTracker::record_free(void*)+0xa8
V  [libjvm.so+0x1147366]  MemTracker::record_free(void*)+0x67
V  [libjvm.so+0x11436c5]  os::free(void*)+0x3b
V  [libjvm.so+0x1529907]  ZMountPoint::get_mountpoint(char const*, char const*) const+0x91
V  [libjvm.so+0x1529a0c]  ZMountPoint::get_mountpoints(char const*, GrowableArrayCHeap<char*, (MEMFLAGS)5>*) const+0xea
V  [libjvm.so+0x1529c67]  ZMountPoint::find_mountpoint(char const*, char const**) const+0x4b
V  [libjvm.so+0x152982e]  ZMountPoint::ZMountPoint(char const*, char const**)+0x78
V  [libjvm.so+0x1539fa1]  ZPhysicalMemoryBacking::create_file_fd(char const*) const+0x89
V  [libjvm.so+0x153a4f0]  ZPhysicalMemoryBacking::create_fd(char const*) const+0x98
V  [libjvm.so+0x15397bd]  ZPhysicalMemoryBacking::ZPhysicalMemoryBacking(unsigned long)+0x75
V  [libjvm.so+0x1538275]  ZPhysicalMemoryManager::ZPhysicalMemoryManager(unsigned long)+0x23
V  [libjvm.so+0x1530f13]  ZPageAllocator::ZPageAllocator(ZWorkers*, unsigned long, unsigned long, unsigned long)+0x9d
V  [libjvm.so+0x15119b5]  ZHeap::ZHeap()+0x65
V  [libjvm.so+0x150a91e]  ZCollectedHeap::ZCollectedHeap()+0x76
V  [libjvm.so+0x14fc861]  ZArguments::create_heap()+0x3b
V  [libjvm.so+0x14349b6]  Universe::initialize_heap()+0x5a
V  [libjvm.so+0x1434798]  universe_init()+0x9a
V  [libjvm.so+0xc41f37]  init_globals()+0x35
V  [libjvm.so+0x1415107]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x393
V  [libjvm.so+0xd58416]  JNI_CreateJavaVM_inner(JavaVM_**, void**, void*)+0x10c
V  [libjvm.so+0xd5876c]  JNI_CreateJavaVM+0x32
C  [libjli.so+0x7181]  InitializeJVM+0x13a
C  [libjli.so+0x3f79]  JavaMain+0xdc
C  [libjli.so+0xaad7]  ThreadJavaMain+0x27",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289633,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xqu3:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-07-05 19:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9387
Date: 2022-07-06 02:17:39 +0000;;;","2022-07-07 05:55;dukebot;Changeset: 77ad998b
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-07-07 12:52:04 +0000
URL:       https://git.openjdk.org/jdk/commit/77ad998b6e741f7cd7cdd52155c024bbc77f2027
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"JDI EventSet/resume/resume008 failed with ""ERROR: suspendCounts don't match for : VirtualThread-unparker""",JDK-8289765,5078548,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,dcubed,dcubed,2022-07-05 11:53,2023-05-27 06:40,2023-10-01 09:56,2023-03-09 13:56,19,20,21,,,,21,core-svc,,0,intermittent,loom,noreg-self,tier5,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

vmTestbase/nsk/jdi/EventSet/resume/resume008/TestDescription.java

Here's a snippet from the log file:

debugger> :::::: case: # 2
debugger> ......waiting for new ThreadStartEvent : 2
EventHandler> waitForRequestedEventSet: enabling remove of listener nsk.share.jdi.EventHandler$7@60ddc97
EventHandler> Adding listener nsk.share.jdi.EventHandler$7@60ddc97
EventHandler> waitForRequestedEventSet: vm.resume called
debugee.stderr> **> debuggee:   'run': exit   :: threadName == thread1
debugee.stderr> **> debuggee:   'run': enter  :: threadName == thread2
debugee.stderr> **> debuggee:   'run': exit   :: threadName == thread2
EventHandler> Received event set with policy = SUSPEND_ALL
EventHandler> waitForRequestedEventSet: Received event set for request: thread start request  (enabled)
EventHandler> Event: ThreadStartEventImpl req thread start request  (enabled)
EventHandler> Removing listener nsk.share.jdi.EventHandler$7@60ddc97
debugger>        got new ThreadStartEvent with propety 'number' == ThreadStartRequest3
debugger> ......checking up on EventSet.resume()
debugger> ......--> vm.suspend();
debugger>         getting : Map<String, Integer> suspendsCounts1
debugger> {VirtualThread-unparker=2, Common-Cleaner=2, ForkJoinPool-1-worker-1=2, main=2, old-m-a-i-n=2, Signal Dispatcher=2, ForkJoinPool-1-worker-4=2, ForkJoinPool-1-worker-5=2, Notification Thread=2, ForkJoinPool-1-worker-2=2, ForkJoinPool-1-worker-3=2, Reference Handler=2, Finalizer=2}
debugger>         eventSet.resume;
debugger>         getting : Map<String, Integer> suspendsCounts2
EventHandler> Received event set with policy = SUSPEND_ALL
EventHandler> Event: BreakpointEventImpl req breakpoint request nsk.jdi.EventSet.resume.resume008a:75 (enabled)
debugger> Received communication breakpoint event.
debugger> {VirtualThread-unparker=2, Common-Cleaner=2, ForkJoinPool-1-worker-1=2, main=2, old-m-a-i-n=2, Signal Dispatcher=2, ForkJoinPool-1-worker-4=2, ForkJoinPool-1-worker-5=2, Notification Thread=2, ForkJoinPool-1-worker-2=2, ForkJoinPool-1-worker-3=2, Reference Handler=2, Finalizer=2}
debugger>         getting : int policy = eventSet.suspendPolicy();
debugger>         case SUSPEND_ALL
debugger> checking VirtualThread-unparker
# ERROR: debugger> ERROR: suspendCounts don't match for : VirtualThread-unparker
The following stacktrace is for failure analysis.
nsk.share.TestFailure: debugger> ERROR: suspendCounts don't match for : VirtualThread-unparker
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.TestDebuggerType1.complain(TestDebuggerType1.java:78)
	at nsk.jdi.EventSet.resume.resume008.testRun(resume008.java:243)
	at nsk.share.jdi.TestDebuggerType1.runThis(TestDebuggerType1.java:119)
	at nsk.jdi.EventSet.resume.resume008.run(resume008.java:84)
	at nsk.jdi.EventSet.resume.resume008.main(resume008.java:79)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)
# ERROR: debugger> before resuming : 2
# ERROR: debugger> after  resuming : 2
debugger> ......--> vm.resume()
debugger> shouldRunAfterBreakpoint: entered
debugger> shouldRunAfterBreakpoint: received breakpoint event.
debugger> shouldRunAfterBreakpoint: received instruction from debuggee to finish.
debugger> shouldRunAfterBreakpoint: exited with false.
debugger> TESTING ENDS
debugger> Waiting for debuggee's exit...
EventHandler> waitForVMDisconnect
debugee.stderr> **> debuggee: debuggee exits
EventHandler> Received event set with policy = SUSPEND_NONE
EventHandler> Event: VMDeathEventImpl req null
EventHandler> receieved VMDeath
EventHandler> Removing listener nsk.share.jdi.EventHandler$3@7b74fdf
EventHandler> Received event set with policy = SUSPEND_NONE
EventHandler> Event: VMDisconnectEventImpl req null
EventHandler> receieved VMDisconnect
EventHandler> Removing listener nsk.share.jdi.EventHandler$4@53166b0e
EventHandler> finished
EventHandler> waitForVMDisconnect: done
debugger> Event handler thread exited.
debugger> Debuggee PASSED.


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: debugger> ERROR: suspendCounts don't match for : VirtualThread-unparker
# ERROR: debugger> before resuming : 2
# ERROR: debugger> after  resuming : 2
----------System.err:(0/0)----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308187,,,,JDK-8302516,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2xqqr:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-07-05 16:21;cjplummer;The the log just before the failure has important clues:

debugger> {VirtualThread-unparker=2, Common-Cleaner=2, ForkJoinPool-1-worker-1=2, main=2, old-m-a-i-n=2, Signal Dispatcher=2, ForkJoinPool-1-worker-4=2, ForkJoinPool-1-worker-5=2, Notification Thread=2, ForkJoinPool-1-worker-2=2, ForkJoinPool-1-worker-3=2, Reference Handler=2, Finalizer=2}
debugger>         eventSet.resume;
debugger>         getting : Map<String, Integer> suspendsCounts2
EventHandler> Received event set with policy = SUSPEND_ALL
EventHandler> Event: BreakpointEventImpl req breakpoint request nsk.jdi.EventSet.resume.resume008a:75 (enabled)
debugger> Received communication breakpoint event.
debugger> {VirtualThread-unparker=2, Common-Cleaner=2, ForkJoinPool-1-worker-1=2, main=2, old-m-a-i-n=2, Signal Dispatcher=2, ForkJoinPool-1-worker-4=2, ForkJoinPool-1-worker-5=2, Notification Thread=2, ForkJoinPool-1-worker-2=2, ForkJoinPool-1-worker-3=2, Reference Handler=2, Finalizer=2}

The first line is a snapshot of suspend counts before the eventSet.resume() and the last line is the snapshort afterwords. Since we are dealing with a SUSPEND_ALL, all of the suspend counts should have been decremented by one after the resuem, but they aren't. The reason is because in between you can see a BreakpiontEvent was received, and it did a SUSPEND_ALL, which bumped al the suspend counts up by one more than expected. The breakpoint is not expected at this time. The debuggee thread that hit it should still have a suspend count of 1 after the resume, and therefore not progressed to the breakpoint, but for some reason it was resumed. main is the thread hitting the breakpoint (or at least should be). It's a virtualthread and is showing up with a suspendCount of 2, so I'm not sure why it is getting resumed.

Another odd thing in the log is the presence of the following a bit earlier:

debugee.stderr> **> debuggee:   'run': enter  :: threadName == thread2
debugee.stderr> **> debuggee:   'run': exit   :: threadName == thread2

These should have turned up much later, and thread2 should still be in the list of known threads when the two snapshots were taken. So between ""main"" having been resumed when it shouldn't have been, and also now ""thread2"", it looks like we have an issue with virtual threads being resumed when they are not suppose to be.;;;","2022-07-06 14:38;cjplummer;The could possibly be related to JDK-8282379, which fails due to:

 Verifying threads status after method invocation:
# ERROR: TEST FAILED: wrong invocation:
# ERROR: invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tMainThr', id=272)
# ERROR: is not suspended again after the invocation 

It's similar in that we are dealing with a virtual thread not being suspended when it should be.

[UPDATE]: It's not related to JDK-8282379, which is the result of using INVOKE_SINGLE_THREADED when using JDI to invoke a debuggee method. There no invoking going on in this test, so it can't be the same issue.;;;","2022-07-06 14:39;cjplummer;I've been unable to reproduce this. Will keep an eye on it to see if it pops up again.;;;","2022-08-02 10:05;dcubed;Here's a log file snippet from the jdk-20+9-485-tier5 sighting:

vmTestbase/nsk/jdi/EventSet/resume/resume008/TestDescription.java

debugger> :::::: case: # 2
debugger> ......waiting for new ThreadStartEvent : 2
EventHandler> waitForRequestedEventSet: enabling remove of listener nsk.share.jdi.EventHandler$7@5df16b4a
EventHandler> Adding listener nsk.share.jdi.EventHandler$7@5df16b4a
EventHandler> waitForRequestedEventSet: vm.resume called
debugee.stderr> **> debuggee:   'run': enter  :: threadName == thread2
debugee.stderr> **> debuggee:   'run': exit   :: threadName == thread2
EventHandler> Received event set with policy = SUSPEND_ALL
EventHandler> waitForRequestedEventSet: Received event set for request: thread start request  (enabled)
EventHandler> Event: ThreadStartEventImpl req thread start request  (enabled)
EventHandler> Removing listener nsk.share.jdi.EventHandler$7@5df16b4a
debugger>        got new ThreadStartEvent with propety 'number' == ThreadStartRequest3
debugger> ......checking up on EventSet.resume()
debugger> ......--> vm.suspend();
debugger>         getting : Map<String, Integer> suspendsCounts1
debugger> {Reference Handler=2, VirtualThread-unparker=2, Common-Cleaner=2, ForkJoinPool-1-worker-1=2, main=2, old-m-a-i-n=2, Signal Dispatcher=2, Finalizer=2, ForkJoinPool-1-worker-4=2, Notification Thread=2, ForkJoinPool-1-worker-2=2, ForkJoinPool-1-worker-3=2}
debugger>         eventSet.resume;
EventHandler> Received event set with policy = SUSPEND_ALL
debugger>         getting : Map<String, Integer> suspendsCounts2
EventHandler> Event: BreakpointEventImpl req breakpoint request nsk.jdi.EventSet.resume.resume008a:75 (enabled)
debugger> Received communication breakpoint event.
debugger> {Reference Handler=2, VirtualThread-unparker=2, Common-Cleaner=2, ForkJoinPool-1-worker-1=2, main=2, old-m-a-i-n=2, Signal Dispatcher=2, Finalizer=2, ForkJoinPool-1-worker-4=2, Notification Thread=2, ForkJoinPool-1-worker-2=2, ForkJoinPool-1-worker-3=2}
debugger>         getting : int policy = eventSet.suspendPolicy();
debugger>         case SUSPEND_ALL
debugger> checking Reference Handler
# ERROR: debugger> ERROR: suspendCounts don't match for : Reference Handler
The following stacktrace is for failure analysis.
nsk.share.TestFailure: debugger> ERROR: suspendCounts don't match for : Reference Handler
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.TestDebuggerType1.complain(TestDebuggerType1.java:78)
	at nsk.jdi.EventSet.resume.resume008.testRun(resume008.java:243)
	at nsk.share.jdi.TestDebuggerType1.runThis(TestDebuggerType1.java:119)
	at nsk.jdi.EventSet.resume.resume008.run(resume008.java:84)
	at nsk.jdi.EventSet.resume.resume008.main(resume008.java:79)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)
# ERROR: debugger> before resuming : 2
# ERROR: debugger> after  resuming : 2
debugger> ......--> vm.resume()
debugger> shouldRunAfterBreakpoint: entered
debugger> shouldRunAfterBreakpoint: received breakpoint event.
debugger> shouldRunAfterBreakpoint: received instruction from debuggee to finish.
debugger> shouldRunAfterBreakpoint: exited with false.
debugger> TESTING ENDS
debugger> Waiting for debuggee's exit...
EventHandler> waitForVMDisconnect
debugee.stderr> **> debuggee: debuggee exits
EventHandler> Received event set with policy = SUSPEND_NONE
EventHandler> Event: VMDeathEventImpl req null
EventHandler> receieved VMDeath
EventHandler> Removing listener nsk.share.jdi.EventHandler$3@48e51d82
EventHandler> Received event set with policy = SUSPEND_NONE
EventHandler> Event: VMDisconnectEventImpl req null
EventHandler> receieved VMDisconnect
EventHandler> Removing listener nsk.share.jdi.EventHandler$4@62a36c19
EventHandler> finished
EventHandler> waitForVMDisconnect: done
debugger> Event handler thread exited.
debugger> Debuggee PASSED.


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: debugger> ERROR: suspendCounts don't match for : Reference Handler
# ERROR: debugger> before resuming : 2
# ERROR: debugger> after  resuming : 2
----------System.err:(0/0)----------
----------rerun:(34/7959)*----------;;;","2023-02-06 10:36;dcubed;Here's a log file snippet from the jdk-21+9-610-tier5 sighting:

vmTestbase/nsk/jdi/EventSet/resume/resume008/TestDescription.java

debugger> :::::: case: # 2
debugger> ......waiting for new ThreadStartEvent : 2
EventHandler> waitForRequestedEventSet: enabling remove of listener nsk.share.jdi.EventHandler$7@71c8e853
EventHandler> Adding listener nsk.share.jdi.EventHandler$7@71c8e853
EventHandler> waitForRequestedEventSet: vm.resume called
debugee.stderr> **> debuggee:   'run': exit   :: threadName == thread1
debugee.stderr> **> debuggee:   'run': enter  :: threadName == thread2
debugee.stderr> **> debuggee:   'run': exit   :: threadName == thread2
EventHandler> Received event set with policy = SUSPEND_ALL
EventHandler> waitForRequestedEventSet: Received event set for request: thread start request  (enabled)
EventHandler> Event: ThreadStartEventImpl req thread start request  (enabled)
EventHandler> Removing listener nsk.share.jdi.EventHandler$7@71c8e853
debugger>        got new ThreadStartEvent with propety 'number' == ThreadStartRequest3
debugger> ......checking up on EventSet.resume()
debugger> ......--> vm.suspend();
debugger>         getting : Map<String, Integer> suspendsCounts1
debugger> {Reference Handler=2, VirtualThread-unparker=2, Common-Cleaner=2, ForkJoinPool-1-worker-1=2, main=2, old-m-a-i-n=2, Signal Dispatcher=2, Finalizer=2, ForkJoinPool-1-worker-4=2, Notification Thread=2, ForkJoinPool-1-worker-2=2, ForkJoinPool-1-worker-3=2}
debugger>         eventSet.resume;
debugger>         getting : Map<String, Integer> suspendsCounts2
EventHandler> Received event set with policy = SUSPEND_ALL
EventHandler> Event: BreakpointEventImpl req breakpoint request nsk.jdi.EventSet.resume.resume008a:75 (enabled)
debugger> Received communication breakpoint event.
debugger> {Reference Handler=2, VirtualThread-unparker=2, Common-Cleaner=2, ForkJoinPool-1-worker-1=2, main=2, old-m-a-i-n=2, Signal Dispatcher=2, Finalizer=2, ForkJoinPool-1-worker-4=2, Notification Thread=2, ForkJoinPool-1-worker-2=2, ForkJoinPool-1-worker-3=2}
debugger>         getting : int policy = eventSet.suspendPolicy();
debugger>         case SUSPEND_ALL
debugger> checking Reference Handler
# ERROR: debugger> ERROR: suspendCounts don't match for : Reference Handler
The following stacktrace is for failure analysis.
nsk.share.TestFailure: debugger> ERROR: suspendCounts don't match for : Reference Handler
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.TestDebuggerType1.complain(TestDebuggerType1.java:78)
	at nsk.jdi.EventSet.resume.resume008.testRun(resume008.java:243)
	at nsk.share.jdi.TestDebuggerType1.runThis(TestDebuggerType1.java:119)
	at nsk.jdi.EventSet.resume.resume008.run(resume008.java:84)
	at nsk.jdi.EventSet.resume.resume008.main(resume008.java:79)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
# ERROR: debugger> before resuming : 2
# ERROR: debugger> after  resuming : 2
debugger> ......--> vm.resume()
debugger> shouldRunAfterBreakpoint: entered
debugger> shouldRunAfterBreakpoint: received breakpoint event.
debugger> shouldRunAfterBreakpoint: received instruction from debuggee to finish.
debugger> shouldRunAfterBreakpoint: exited with false.
debugger> TESTING ENDS
debugger> Waiting for debuggee's exit...
EventHandler> waitForVMDisconnect
debugee.stderr> **> debuggee: debuggee exits
EventHandler> Received event set with policy = SUSPEND_NONE
EventHandler> Event: VMDeathEventImpl req null
EventHandler> receieved VMDeath
EventHandler> Removing listener nsk.share.jdi.EventHandler$3@24b8ea66
EventHandler> Received event set with policy = SUSPEND_NONE
EventHandler> Event: VMDisconnectEventImpl req null
EventHandler> receieved VMDisconnect
EventHandler> Removing listener nsk.share.jdi.EventHandler$4@28bfc7e
EventHandler> finished
EventHandler> waitForVMDisconnect: done
debugger> Event handler thread exited.
debugger> Debuggee PASSED.


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: debugger> ERROR: suspendCounts don't match for : Reference Handler
# ERROR: debugger> before resuming : 2
# ERROR: debugger> after  resuming : 2
----------System.err:(0/0)----------
----------rerun:(36/8557)*----------;;;","2023-02-12 19:50;cjplummer;Short story is that this is caused by the arrival of unexpected ThreadStartEvents, which messes up the debugger side. The events are for threads we normally only see getting created when using virtual threads, such as carrier threads and the VirtualThread-unparker thread. Theoretically this issue could happen without virtual threads due to other VM threads starting up such as Common-Cleaner, but we haven't seen it fail for that reason yet.

The test is testing proper thread suspension for ThreadStartEvent using each of the 3 suspension policy types. The debuggee creates a sequence of 3 debuggee threads, each ones timing coordinated with some complicated synchronization with the debugger using breakpoints and the setting of fields in the debuggee (and careful placement of suspen/resume in the debugger). The ThreadStartRequests that the debugger sets up always use a ""count filter"" of 1, which means the requests are good for delivering exactly 1 ThreadStartEvent, and any that come after the first will get filtered out. So when an an unexpected ThreadStartEvent arrives for something like a carrier thread, this prematurely moves the debugger on to the next step, and the synchronization with the debuggee gets messed up.

This bug has proved very hard to fix. The synchronization is fragile, and there is a lot of common library code involved with the event handling, which really makes it hard to special case these unexpected ThreadStartEvent. I've changed the debugger side so the ThreadStartRequest will allow any number of ThreadStartEvents, and keeps processing them until the expected one arrives, but that just creates other issues with event processing, mostly with respect the thread resumption. I've also added a somewhat global filter for any of these ThreadStartEvents events that we tend to see in tests, but that also leads to some event processing issues and thread suspend/resume issues I still haven't fully addressed. I've made progress, but issues still linger that I don't have a good understanding of yet.;;;","2023-03-03 12:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12861
Date: 2023-03-03 18:16:25 +0000;;;","2023-03-09 13:56;dukebot;Changeset: 8b0eb729
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-03-09 21:55:15 +0000
URL:       https://git.openjdk.org/jdk/commit/8b0eb7299a5d0e142453ed5c7a17308077e27993
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"gc/lock tests failed with ""OutOfMemoryError: Java heap space: failed reallocation of scalar replaced objects""",JDK-8289764,5078547,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rsunderbabu,dcubed,dcubed,2022-07-05 11:34,2022-09-06 17:23,2023-10-01 09:56,2022-08-24 18:40,19,20,,,,,20,hotspot,,0,tier7,zgc,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

vmTestbase/gc/lock/jniref/jnilocalreflock02/TestDescription.java

Here's a snippet from the log file:

Starting Thread[#81,gc.lock.LockerTest$Worker@40e5fd76,5,MainThreadGroup]
Starting Thread[#82,gc.lock.LockerTest$Worker@1ca29e16,5,MainThreadGroup]
Exception in 
gc.lock.LockerTest$Worker@794fed6b
java.lang.OutOfMemoryError: Java heap space: failed reallocation of scalar replaced objects
Exception in 
Exception in 
gc.lock.LockerTest$Worker@f7107ea
java.lang.OutOfMemoryError: Java heap space: failed reallocation of scalar replaced objects
Exception in 
Exception in 
Exception in 
Exception in 
gc.lock.LockerTest$Worker@4096fc72
java.lang.OutOfMemoryError: Java heap space: failed reallocation of scalar replaced objects
gc.lock.LockerTest$Worker@7e2fceaf
java.lang.OutOfMemoryError: Java heap space: failed reallocation of scalar replaced objects
Exception in 
Exception in 
Exception in 
Exception in 
Exception in 
gc.lock.LockerTest$Worker@3164868f
java.lang.OutOfMemoryError: Java heap space: failed reallocation of scalar replaced objects
Exception in 
Exception in 
java.lang.OutOfMemoryError: Java heap space: failed reallocation of scalar replaced objects
gc.lock.LockerTest$Worker@5580a850
java.lang.OutOfMemoryError: Java heap space: failed reallocation of scalar replaced objects
gc.lock.LockerTest$Worker@f8f46ab
java.lang.OutOfMemoryError: Java heap space: failed reallocation of scalar replaced objects
----------System.err:(2/128)----------
java.lang.OutOfMemoryError: Java heap space
STATUS:Failed.`main' threw exception: java.lang.OutOfMemoryError: Java heap space
----------rerun:(41/6353)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289206,,,,,,,,JDK-8292946,,,,JDK-8227309,JDK-8289206,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2xqqj:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-07-06 11:20;dcubed;[~lkorinth] - As mentioned above, I intentionally did not use:

JDK-8289206 vmTestbase/gc/lock tests fail with OutOfMemoryError: Java heap space: failed reallocation of scalar replaced objects 

because that bug is focused on the JDK11u sighting and [~kbarrett]'s analysis
of that bug is focused on it being related to specific bugs that are already fixed.
This bug is focused on sightings in JDK20.

Update: And now JDK19 also.;;;","2022-07-22 12:24;dcubed;So far this failure mode has been seen in 13 different tests in the JDK19 and JDK20 CIs.
With a single sighting per test:

$ sort /tmp/8289764.list | uniq -c
   1 vmTestbase/gc/lock/jni/jnilock003/TestDescription.java
   1 vmTestbase/gc/lock/jniref/jniglobalreflock01/TestDescription.java
   1 vmTestbase/gc/lock/jniref/jniglobalreflock04/TestDescription.java
   1 vmTestbase/gc/lock/jniref/jnilocalreflock02/TestDescription.java
   1 vmTestbase/gc/lock/jniref/jnilocalreflock03/TestDescription.java
   1 vmTestbase/gc/lock/jniref/jnilocalreflock04/TestDescription.java
   1 vmTestbase/gc/lock/jniref/jnireflock01/TestDescription.java
   1 vmTestbase/gc/lock/jniref/jnireflock02/TestDescription.java
   1 vmTestbase/gc/lock/jniref/jnireflock03/TestDescription.java
   1 vmTestbase/gc/lock/jniref/jniweakglobalreflock01/TestDescription.java
   1 vmTestbase/gc/lock/jniref/jniweakglobalreflock02/TestDescription.java
   1 vmTestbase/gc/lock/jniref/jniweakglobalreflock04/TestDescription.java
   1 vmTestbase/gc/lock/jvmti/alloc/jvmtialloclock03/TestDescription.java

So the individual sightings don't meet our normal criteria for ProblemListing,
but the total count of sightings for this bug (JDK-8289764) are definitely noisy.
This is a frustrating situation.;;;","2022-07-22 19:09;rsunderbabu;All gc/lock/ tests are more or less the same and most are not even related to GC locker. They verify that GC is appropriately synchronized with certain class of functions.
gc/lock/jni - uses JNI GetPrimitiveArrayCritical and GetStringCritical
gc/lock/jniref - uses JNI NewGlobalRef, NewLocalRef, NewWeakGlobalRef
gc/lock/malloc - uses malloc()
gc/lock/jvmti - uses JVMTI Allocate

There is already vmTestbase/nsk/stress/jni/gclocker/gcl001.java testing JNI's GetPrimitiveArrayCritical, the only call that is related to GC locker.

Dropping these tests looks reasonable. We might still choose to retain the tests to check GC's interaction with native memory access, in which case, one test is enough against a class of function.
;;;","2022-07-27 07:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9658
Date: 2022-07-27 14:03:34 +0000;;;","2022-08-24 18:40;dukebot;Changeset: 7b81a9c7
Author:    Ramkumar Sunderbabu <rsunderbabu@openjdk.org>
Committer: Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-08-25 01:37:54 +0000
URL:       https://git.openjdk.org/jdk/commit/7b81a9c75d60f6eb2727515bacfffcf7cf15e128
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove --enable-reproducible-build from jib profile,JDK-8289755,5078538,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-07-05 08:51,2022-08-03 20:17,2023-10-01 09:56,2022-07-28 15:39,20,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,"Since JDK-8288396, the flag ` --enable-reproducible-build` is deprecated, and does nothing but print a warning. It is still included in the jib profiles, which make they output a warning.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xqoj:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-07-05 09:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9379
Date: 2022-07-05 16:01:50 +0000;;;","2022-07-28 15:39;dukebot;Changeset: eeac3da7
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-07-28 22:34:03 +0000
URL:       https://git.openjdk.org/jdk/commit/eeac3da79565064a2e2c2d5a325f45250a90681d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multiple unit test failures after JDK-8251483,JDK-8289751,5078534,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mhanl,kcr,kcr,2022-07-05 07:54,2023-09-05 13:49,2023-10-01 09:56,2022-07-05 16:24,jfx19,,,,,,jfx19,javafx,,0,regression,,,,,,,,,,,,,,,,,"The recently-integrated fix for JDK-8251483 has caused the following test failures:

    TableCellTest. testEditCancelEventAfterModifyItems
    TableCellTest. testRowItemIsNotNullForNonEmptyCell
    TableViewKeyInputTest. test_jdk_8160858
    TableViewKeyInputTest. test_rt19053_pageDown
    TableViewKeyInputTest. test_rt19053_pageUp
    TableViewKeyInputTest. test_rt20915
    TableViewKeyInputTest. test_rt21375_scenario_1a_down
    TableViewKeyInputTest. test_rt21375_scenario_1a_up
    TableViewKeyInputTest. test_rt21375_scenario_1b_down
    TableViewKeyInputTest. test_rt21375_scenario_1b_up
    TableViewKeyInputTest. test_rt21375_scenario_2_down
    TableViewKeyInputTest. test_rt21375_scenario_2_up
    TableViewKeyInputTest. test_rt21375_scenario_3_down
    TableViewKeyInputTest. test_rt21375_scenario_3_up
    TableViewKeyInputTest. test_rt21444_down
    TableViewKeyInputTest. test_rt21444_up
    TableViewKeyInputTest. test_rt27710_pageDown_singleSelection_cell
    TableViewKeyInputTest. test_rt27710_pageUp_singleSelection_cell
    TableViewKeyInputTest. test_rt32383_pageDown
    TableViewKeyInputTest. test_rt32383_pageUp
    TableViewKeyInputTest. test_rt33301_multipleSelection_down
    TableViewKeyInputTest. test_rt33301_multipleSelection_up
    TableViewKeyInputTest. test_rt33301_singleSelection_down
    TableViewKeyInputTest. test_rt33301_singleSelection_up
    TableViewKeyInputTest. test_rt33613_down_multipleColumn_right
    TableViewKeyInputTest. test_rt33613_down_oneColumn
    TableViewKeyInputTest. test_rt33613_up_multipleColumn_left
    TableViewKeyInputTest. test_rt33613_up_multipleColumn_right
    TableViewKeyInputTest. test_rt33613_up_oneColumn
    TableViewKeyInputTest. test_rt33894
    TableViewKeyInputTest. test_rt34200
    TableViewKeyInputTest. test_rt34369_cellSelection
    TableViewKeyInputTest. test_rt34369_rowSelection
    TableViewKeyInputTest. test_rt34407_up_up_down
    TableViewKeyInputTest. test_rt34425
    TableViewKeyInputTest. test_rt_24865_moveDownwards
    TableViewKeyInputTest. test_rt_24865_moveUpwards
    TableViewMouseInputTest. test_rt_37069
    TableViewTest. testInvisibleScrollbarDoesNotScrollTableToBeginning
    TableViewTest. test_8139460_heightDoesntShrinkAfterRemovingNestedColumns
    TableViewTest. test_addingNewItemsDoesNotChangePseudoClassSelectedState
    TableViewTest. test_rt25679_cellSelection
    TableViewTest. test_rt25679_rowSelection
    TableViewTest. test_rt31165
    TableViewTest. test_rt31471
    TableViewTest. test_rt36220
    TableViewTest. test_rt36290
    TableViewTest. test_rt_22599
    TableViewTest. test_rt_29650
    TableViewTest. test_rt_29849
    TableViewTest. test_rt_31200_tableCell
    TableViewTest. test_rt_31200_tableRow
    TableViewTest. test_rt_32708_removeFromColumnsList
    TableViewTest. test_rt_32708_toggleVisible
    TableViewTest. test_rt_34493
    TableViewTest. test_rt_34685_directEditCall_cellSelectionMode
    TableViewTest. test_rt_34685_directEditCall_rowSelectionMode
    TableViewTest. test_rt_34685_mouseDoubleClick_cellSelectionMode
    TableViewTest. test_rt_34685_mouseDoubleClick_rowSelectionMode
    TableViewTest. test_rt_35224
    TableViewTest. test_rt_36669
    TableViewTest. test_rt_36670
    TableViewTest. test_rt_37054_noScroll
    TableViewTest. test_rt_37054_scroll
    TableViewTest. test_rt_37058_noContent
    TableViewTest. test_rt_37058_withContent
    TableViewTest. test_rt_38491
    TextInputControlTest. UndoRedoReverseSpaceSequence[0]
    TextInputControlTest. UndoRedoReverseSpaceSequence[1]
    TextInputControlTest. UndoRedoReverseSpaceSequence[2]
    TextInputControlTest. UndoRedoSpaceSequence[0]
    TextInputControlTest. UndoRedoSpaceSequence[1]
    TextInputControlTest. UndoRedoSpaceSequence[2]
    TextInputControlTest. UndoRedoTimestampBased[0]
    TextInputControlTest. UndoRedoTimestampBased[1]
    TextInputControlTest. UndoRedoTimestampBased[2]
    TextInputControlTest. UndoRedoWords[0]
    TextInputControlTest. UndoRedoWords[1]
    TextInputControlTest. UndoRedoWords[2]
    TextInputControlTest. caretPositionUndo[0]
    TextInputControlTest. caretPositionUndo[1]
    TextInputControlTest. caretPositionUndo[2]
    TitledPaneTest. keyboardFocusOnNonCollapsibleTitledPane_RT19660
    TitledPaneTest. mouseFocusOnNonCollapsibleTitledPane_RT19660
    ToolBarHorizontalArrowsTest. testBackwardFocusArrows[0]
    ToolBarHorizontalArrowsTest. testBackwardFocusArrows[1]
    ToolBarHorizontalArrowsTest. testBackwardFocusArrows_toggleOrientation[0]
    ToolBarHorizontalArrowsTest. testBackwardFocusArrows_toggleOrientation[1]
    ToolBarHorizontalArrowsTest. testBackwardFocus[0]
    ToolBarHorizontalArrowsTest. testBackwardFocus[1]
    ToolBarHorizontalArrowsTest. testFocusExtremeNodesOfToolBar[0]
    ToolBarHorizontalArrowsTest. testFocusExtremeNodesOfToolBar[1]
    ToolBarHorizontalArrowsTest. testForwardFocusArrows[0]
    ToolBarHorizontalArrowsTest. testForwardFocusArrows[1]
    ToolBarHorizontalArrowsTest. testForwardFocusArrows_toggleOrientation[0]
    ToolBarHorizontalArrowsTest. testForwardFocusArrows_toggleOrientation[1]
    ToolBarHorizontalArrowsTest. testForwardFocus[0]
    ToolBarHorizontalArrowsTest. testForwardFocus[1]
    ToolBarHorizontalArrowsTest. testMixedFocusArrows_toggleOrientation[0]
    ToolBarHorizontalArrowsTest. testMixedFocusArrows_toggleOrientation[1]
    ToolbarTest. toolBarFocusTraversalTest
    TreeCellTest. testEditCancelEventAfterCollapse
    TreeCellTest. testEditCancelEventAfterModifyItems
    TreeCellTest. testEditCancelEventAfterRemoveEditingItem
    TreeCellTest. testEditCancelMemoryLeakAfterRemoveEditingItem
    TreeCellTest. testEditCommitMemoryLeakAfterRemoveEditingItem
    TreeTableCellTest. testEditCancelEventAfterCollapse
    TreeTableCellTest. testEditCancelEventAfterModifyItems
    TreeTableCellTest. testEditCancelEventAfterRemoveEditingItem
    TreeTableCellTest. testEditCancelMemoryLeakAfterRemoveEditingItem
    TreeTableCellTest. testRowItemIsNotNullForNonEmptyCell
    TreeTableViewKeyInputTest. test_jdk_8152106
    TreeTableViewKeyInputTest. test_jdk_8160858
    TreeTableViewKeyInputTest. test_rt19053_pageDown
    TreeTableViewKeyInputTest. test_rt19053_pageUp
    TreeTableViewKeyInputTest. test_rt20915
    TreeTableViewKeyInputTest. test_rt21375_scenario_1a_down
    TreeTableViewKeyInputTest. test_rt21375_scenario_1a_up
    TreeTableViewKeyInputTest. test_rt21375_scenario_1b_down
    TreeTableViewKeyInputTest. test_rt21375_scenario_1b_up
    TreeTableViewKeyInputTest. test_rt21375_scenario_2_down
    TreeTableViewKeyInputTest. test_rt21375_scenario_2_up
    TreeTableViewKeyInputTest. test_rt21375_scenario_3_down
    TreeTableViewKeyInputTest. test_rt21375_scenario_3_up
    TreeTableViewKeyInputTest. test_rt27710_pageDown_singleSelection_cell
    TreeTableViewKeyInputTest. test_rt27710_pageUp_singleSelection_cell
    TreeTableViewKeyInputTest. test_rt32383_pageDown
    TreeTableViewKeyInputTest. test_rt32383_pageUp
    TreeTableViewKeyInputTest. test_rt33301_multipleSelection_down
    TreeTableViewKeyInputTest. test_rt33301_multipleSelection_up
    TreeTableViewKeyInputTest. test_rt33301_singleSelection_down
    TreeTableViewKeyInputTest. test_rt33301_singleSelection_up
    TreeTableViewKeyInputTest. test_rt33613_down_multipleColumn_left
    TreeTableViewKeyInputTest. test_rt33613_down_multipleColumn_right
    TreeTableViewKeyInputTest. test_rt33613_down_oneColumn
    TreeTableViewKeyInputTest. test_rt33613_up_multipleColumn_left
    TreeTableViewKeyInputTest. test_rt33613_up_multipleColumn_right
    TreeTableViewKeyInputTest. test_rt33613_up_oneColumn
    TreeTableViewKeyInputTest. test_rt33894
    TreeTableViewKeyInputTest. test_rt34200
    TreeTableViewKeyInputTest. test_rt34369_cellSelection
    TreeTableViewKeyInputTest. test_rt34369_rowSelection
    TreeTableViewKeyInputTest. test_rt34407_up_up_down
    TreeTableViewKeyInputTest. test_rt34425
    TreeTableViewKeyInputTest. test_rt_24865_moveDownwards
    TreeTableViewKeyInputTest. test_rt_24865_moveUpwards
    TreeTableViewMouseInputTest. test_rt30394
    TreeTableViewMouseInputTest. test_rt_37069
    TreeTableViewSelectionModelImplTest. test_rt34103_cellSelection
    TreeTableViewSelectionModelImplTest. test_rt34103_rowSelection
    TreeTableViewTest. test_jdk_8147483
    TreeTableViewTest. test_jdk_8152396
    TreeTableViewTest. test_rt25679_cellSelection
    TreeTableViewTest. test_rt25679_rowSelection
    TreeTableViewTest. test_rt26718
    TreeTableViewTest. test_rt26721_collapseGrandParent
    TreeTableViewTest. test_rt26721_collapseParent_firstRootChild
    TreeTableViewTest. test_rt26721_collapseParent_lastRootChild
    TreeTableViewTest. test_rt29390
    TreeTableViewTest. test_rt31471
    TreeTableViewTest. test_rt34694
    TreeTableViewTest. test_rt35213
    TreeTableViewTest. test_rt35763
    TreeTableViewTest. test_rt36452
    TreeTableViewTest. test_rt_22599
    TreeTableViewTest. test_rt_29650
    TreeTableViewTest. test_rt_29849
    TreeTableViewTest. test_rt_31200_tableCell
    TreeTableViewTest. test_rt_31200_tableRow
    TreeTableViewTest. test_rt_34493
    TreeTableViewTest. test_rt_34685_directEditCall_cellSelectionMode
    TreeTableViewTest. test_rt_34685_directEditCall_rowSelectionMode
    TreeTableViewTest. test_rt_34685_mouseDoubleClick_cellSelectionMode
    TreeTableViewTest. test_rt_34685_mouseDoubleClick_rowSelectionMode
    TreeTableViewTest. test_rt_35395_testCell_fixedCellSize
    TreeTableViewTest. test_rt_35395_testCell_notFixedCellSize
    TreeTableViewTest. test_rt_37054_noScroll
    TreeTableViewTest. test_rt_37054_scroll
    TreeViewKeyInputTest. test_jdk_8160858
    TreeViewKeyInputTest. test_rt19053_pageDown
    TreeViewKeyInputTest. test_rt19053_pageUp
    TreeViewKeyInputTest. test_rt20915
    TreeViewKeyInputTest. test_rt21375_scenario_1a_down
    TreeViewKeyInputTest. test_rt21375_scenario_1a_up
    TreeViewKeyInputTest. test_rt21375_scenario_1b_down
    TreeViewKeyInputTest. test_rt21375_scenario_1b_up
    TreeViewKeyInputTest. test_rt21375_scenario_2_down
    TreeViewKeyInputTest. test_rt21375_scenario_2_up
    TreeViewKeyInputTest. test_rt21375_scenario_3_down
    TreeViewKeyInputTest. test_rt21375_scenario_3_up
    TreeViewKeyInputTest. test_rt32383_pageDown
    TreeViewKeyInputTest. test_rt32383_pageUp
    TreeViewKeyInputTest. test_rt32683
    TreeViewKeyInputTest. test_rt33301_multipleSelection_down
    TreeViewKeyInputTest. test_rt33301_multipleSelection_up
    TreeViewKeyInputTest. test_rt33301_singleSelection_down
    TreeViewKeyInputTest. test_rt33301_singleSelection_up
    TreeViewKeyInputTest. test_rt33894
    TreeViewKeyInputTest. test_rt34200
    TreeViewKeyInputTest. test_rt34407_up_up_down
    TreeViewKeyInputTest. test_rt34425
    TreeViewKeyInputTest. test_rt4369
    TreeViewKeyInputTest. test_rt_24865_moveDownwards
    TreeViewKeyInputTest. test_rt_24865_moveUpwards
    TreeViewMouseInputTest. test_rt_37069
    TreeViewTest. test_rt25679
    TreeViewTest. test_rt26718
    TreeViewTest. test_rt26721_collapseGrandParent
    TreeViewTest. test_rt26721_collapseParent_firstRootChild
    TreeViewTest. test_rt26721_collapseParent_lastRootChild
    TreeViewTest. test_rt29390
    TreeViewTest. test_rt31165
    TreeViewTest. test_rt31471
    TreeViewTest. test_rt34103
    TreeViewTest. test_rt34694
    TreeViewTest. test_rt35213
    TreeViewTest. test_rt_22599
    TreeViewTest. test_rt_31200_tableRow
    TreeViewTest. test_rt_37502
    CheckBoxSkinTest. maxHeightTracksPreferred
    CheckBoxSkinTest. maxWidthTracksPreferred
    CheckBoxSkinTest. testPadding
    ColorPickerSkinTest. ensureCanSelectColorFromPalette
    ColorPickerSkinTest. testEscapeClosesCustomColorDialog
    EditAndScrollTest. testListViewEditingAfterMouseOnHorizontalScrollBar
    EditAndScrollTest. testListViewEditingAfterMouseOnVerticalScrollBar
    EditAndScrollTest. testListViewFocusedAfterMouseOnHorizontalScrollBar
    EditAndScrollTest. testListViewFocusedAfterMouseOnVerticalScrollBar
    EditAndScrollTest. testTableViewEditingAfterMouseOnHorizontalScrollBar
    EditAndScrollTest. testTableViewEditingAfterMouseOnVerticalScrollBar
    EditAndScrollTest. testTableViewFocusedAfterMouseOnHorizontalScrollBar
    EditAndScrollTest. testTableViewFocusedAfterMouseOnVerticalScrollBar
    EditAndScrollTest. testTreeTableViewEditingAfterMouseOnHorizontalScrollBar
    EditAndScrollTest. testTreeTableViewEditingAfterMouseOnVerticalScrollBar
    EditAndScrollTest. testTreeTableViewFocusedAfterMouseOnHorizontalScrollBar
    EditAndScrollTest. testTreeTableViewFocusedAfterMouseOnVerticalScrollBar
    EditAndScrollTest. testTreeViewEditingAfterMouseOnHorizontalScrollBar
    EditAndScrollTest. testTreeViewEditingAfterMouseOnVerticalScrollBar
    EditAndScrollTest. testTreeViewFocusedAfterMouseOnHorizontalScrollBar
    EditAndScrollTest. testTreeViewFocusedAfterMouseOnVerticalScrollBar
    LabelSkinTest. labelMnemonicTest
    MenuBarSkinTest. testInvisibleMenuNavigation
    ProgressBarSkinTest. testWidthListener
    SkinCleanupTest. testTableRowChildCountFixedCellSizeReplaceSkin
    SkinCleanupTest. testTableRowChildCountReplaceSkin
    SkinCleanupTest. testTableRowItemListener
    SkinCleanupTest. testTableRowVirtualFlowWidthListenerReplaceSkin
    SkinCleanupTest. testTextAreaSetScrollLeftUpdate
    SkinCleanupTest. testTextFieldAlignmentUpdate
    SkinCleanupTest. testTreeTableRowChildCountFixedCellSizeReplaceSkin
    SkinCleanupTest. testTreeTableRowChildCountReplaceSkin
    SkinCleanupTest. testTreeTableRowGraphicListener
    SkinCleanupTest. testTreeTableRowVirtualFlowWidthListenerReplaceSkin
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[0]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[10]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[11]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[12]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[13]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[14]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[15]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[16]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[17]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[18]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[19]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[1]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[20]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[21]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[22]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[23]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[24]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[2]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[3]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[4]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[5]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[6]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[7]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[8]
    SkinMemoryLeakTest. testMemoryLeakAlternativeSkinShowing[9]
    TabPaneHeaderScrollTest. testAddBefore
    TabPaneHeaderScrollTest. testChangeSide
    TabPaneHeaderScrollTest. testDecreaseHeight
    TabPaneHeaderScrollTest. testDecreaseWidth
    TabPaneHeaderScrollTest. testInitialSelect
    TabPaneHeaderScrollTest. testMoveBySetAll
    TabPaneHeaderScrollTest. testMoveByTabObservableList
    TabPaneHeaderScrollTest. testRemoveBefore
    TabPaneHeaderScrollTest. testRemoveLastIfSelectedIsSecondLast
    TabPaneHeaderScrollTest. testRemoveSelectedAsLast
    TabPaneHeaderScrollTest. testSelect
    TabPaneHeaderScrollTest. testShowAlternativeTabPane
    TabPaneHeaderScrollTest. testShowTabPane
    TabPaneHeaderScrollTest. testTabsFitHorizontal
    TabPaneHeaderScrollTest. testTabsFitVertical
    TableColumnHeaderTest. testColumnRightClickDoesAllowResizing
    TableColumnHeaderTest. testColumnRightClickDoesAllowResizingWhenConsumed
    TableColumnHeaderTest. test_resizeColumnToFitContent
    TableColumnHeaderTest. test_resizeColumnToFitContentCustomRowSkin
    TableColumnHeaderTest. test_resizeColumnToFitContentDecrease
    TableColumnHeaderTest. test_resizeColumnToFitContentHeader
    TableColumnHeaderTest. test_resizeColumnToFitContentIncrease
    TableColumnHeaderTest. test_resizeColumnToFitContentMaxRow
    TableColumnHeaderTest. test_resizeColumnToFitContentRowStyle
    TableRowSkinTest. invisibleColumnsShouldRemoveCorrespondingCellsInRow
    TableRowSkinTest. invisibleColumnsShouldRemoveCorrespondingCellsInRowFixedCellSize
    TableRowSkinTest. removedColumnsShouldRemoveCorrespondingCellsInRow
    TableRowSkinTest. removedColumnsShouldRemoveCorrespondingCellsInRowFixedCellSize
    TableViewSkinTest. test_JDK_8188164
    TreeTableColumnHeaderTest. test_resizeColumnToFitContentCustomRowSkin
    TreeTableColumnHeaderTest. test_resizeColumnToFitContentRowStyle
    TreeTableViewDisclosureNodeTest. testExpandCollapsedChild
    TreeTableViewDisclosureNodeTest. testSelectChildLeaf
    TreeTableViewDisclosureNodeTest. testSelectChildLeafAfterExpand
    TreeTableViewDisclosureNodeTest. testSelectRootLeaf
    TreeTableViewIndentationTest. testIndentationOfCell
    TreeTableViewIndentationTest. testIndentationOfCellWithGraphic
    TreeTableViewIndentationTest. testIndentationOfCellWithGraphicAndText
    TreeTableViewIndentationTest. testIndentationOfCellWithText

This needs to be fixed ASAP. If a fix cannot be found right away, JDK-8251483 will need to be backed out and a new ""REDO"" bug filed.",,,,,,,,,,JDK-8315724,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289357,JDK-8251483,,,,,,,,,,,,,,,,,,,,,,,,,,,,,jfx19,,,,,,,"0|i2xqnn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-07-05 07:57;kcr;I see that there were no unit test failures reported for the GHA run of the PR for JDK-8251483 -- see https://github.com/openjdk/jfx/pull/741/checks -- but the source branch was very out of date at the time the run was done.
;;;","2022-07-05 13:55;mhanl;Ok, so I found out that all the tests are fixed by the PR I made some days ago: https://github.com/openjdk/jfx/pull/805 (just merged master in it as well)

More specifically, the following change does:

*TableColumnHeader.java*
708 + tableRow.updateTableView(tv);
...
807 + treeTableRow.updateTreeTableView(ttv);

Unfortunately this leads to a NPE in the (Tree)TableRowSkin, therefore the following changes are also needed (as also done in my PR):

*TableRowSkin.java*
126 - registerChangeListener(getVirtualFlow().widthProperty(), e -> tableView.requestLayout());
126 + VirtualFlow<TableRow<T>> virtualFlow = getVirtualFlow();
127 + if (virtualFlow != null) {
128 +     registerChangeListener(virtualFlow.widthProperty(), e -> tableView.requestLayout());
129 + }

*TreeTableRowSkin.java*
150 - registerChangeListener(getVirtualFlow().widthProperty(), e -> treeTableView.requestLayout());
150 + VirtualFlow<TreeTableRow<T>> virtualFlow = getVirtualFlow();
151 + if (virtualFlow != null) {
152 +     registerChangeListener(virtualFlow.widthProperty(), e -> treeTableView.requestLayout());
153 + }

-----
Not sure how we wan't to proceed from here.
I can make a PR with only the necessary changes (written abobe) or we review and try to get https://github.com/openjdk/jfx/pull/805 merged.;;;","2022-07-05 14:03;kcr;> I can make a PR with only the necessary changes (written abobe)

Let's do this (meaning a targeted fix with just the necessary changes).

PR #805, which is a fix for JDK-8289357 looks complicated enough that it won't be a trivial review to get it in.;;;","2022-07-05 14:49;mhanl;Looks like I was a bit too fast. Unfortunately this is not enough, another test now fails and can only be fixed by updating the index of the row to -1 after.

*TableColumnHeader*
L671 + tableRow.updateIndex(-1);
L768 + treeTableRow.updateIndex(-1);

But at this point we are close to my PR again...
The problem is that once we completely setup the row with the table, we need to fix the above mentioned VirtualFlow NPE and update the index of the row to -1 after to prevent it from receiving listener notifications (e.g. cancelEdit()) (as also stated in the comment in TableColumnHeader Line 671).

Another idea is to disable/ignore the two failing tests and reenable them in PR #805:
TableCellTest.java#testRowItemIsNotNullForNonEmptyCell
TreeTableCellTest.java#testRowItemIsNotNullForNonEmptyCell

EDIT: just tested it and indeed all tests work again.;;;","2022-07-05 15:11;kcr;Is ignoring just those two tests sufficient? In other words, is this really just a test bug or do the failing tests point to a problem that an application could run into?
;;;","2022-07-05 15:13;kcr;Separately, it seems that we have some fragile tests, since a failure like this in one test shouldn't cause cascading failures in other tests. Either the failing tests should clean up after itself in an `@After` method or the subsequent tests that fail should initialize things better in an `@Before` method (or both). We should probably file a (lower priority) follow-on test bug to look into this.;;;","2022-07-05 15:34;mhanl;The situation is as follows:
With the fix for JDK-8251483 the table row item is never null in a non empty table cell.
In the meantime with JDK-8251480 and JDK-8285197 we changed the table column header autosizing to be more complete by adding the table row to the setup. 
Unfortunately we don't set the table view for the table row, therefore it can not know the underlying item (he knows the index but not where he can get the corresponding data for that index) -> table row item can be null in a non empty table cell (again).

So to answer the question, this will also happen in application code, although it only happens in the autosizing.
The bug described in JDK-8251483 is still fixed, but we still can't guarantee that the table row item will be non null in all cases (just like before, but now it only happens in the autosizing)

I agree. It is weird that even completely unrelated tests (e.g. TextFieldTests) fail here.
As far as I can see the stageLoader and the uncaught exception handler are reset, not sure why this is happening.;;;","2022-07-05 15:40;kcr;My main concern is that we want to ensure that we don't cause regressions in apps that work today. If the failing case is already broken, but just in a different way, that's one thing. If an application that works in JDK 18 now breaks in autosize, then that's another.

If this regression will break working applications, then ignoring the failing tests is insufficient and we need to backout the fix for JDK-8251483. That fix could then be redone in connection with JDK-8289357.;;;","2022-07-05 15:50;mhanl;I agree, we need to be careful here.

I don't think this causes any regression, the table row item was null during autosizing before JDK-8251483 and is still after.
The only difference is now, that the table row item will not be null for a non empty cell when adding new items.

EDIT: For reference TableRow#updateItem(int oldIndex) and TreeTableRow#updateItem() can be checked. Both will return if no table view was set, which is happening in the case of the autosizing now. There item will therefore never change to something else than null.;;;","2022-07-05 16:02;kcr;I see. In that case, I think your approach of disabling the two newly added failing tests to fix this issue, and then re-enabling them in JDK-8289357, is fine.;;;","2022-07-05 16:14;kcr;I confirmed that this works for me locally, so once you produce a PR, and the GHA tests have passed on all three platforms, I'll approve it. Since it is a test-only fix, a single reviewer will suffice.;;;","2022-07-05 16:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/811
Date: 2022-07-05 23:09:37 +0000;;;","2022-07-05 16:24;dukebot;Changeset: b9f39076
Author:    Marius Hanl <mhanl@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-07-05 23:23:10 +0000
URL:       https://git.openjdk.org/jfx/commit/b9f39076bbd4065da61f0c4610d6823a48c6eb46
;;;","2023-09-05 13:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/153
Date: 2023-09-05 20:12:36 +0000;;;",,,,,,,,,,,,,,,,,,,
C2 compiled code crashes with SIGFPE with -XX:+StressLCM and -XX:+StressGCM,JDK-8289748,5078530,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tholenstein,chagedorn,chagedorn,2022-07-05 06:59,2023-06-20 13:42,2023-10-01 09:56,2023-01-20 06:22,11,17,18,19,20,21,21,hotspot,,0,c2,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-20,tier8,,,,,,,"Note: Please change bug title to something more descriptive ones the problem is known.

The attached Java Fuzzer test crashes with SIGFPE:

// Maybe needs to be run several times if chosen seed is not working.
$ java -XX:-TieredCompilation -XX:+StressLCM -XX:+StressGCM -Xcomp -XX:CompileOnly=Test Test.java 

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGFPE (0x8) at pc=0x00007fe778b8d916, pid=72086, tid=72087
#
# JRE version: Java(TM) SE Runtime Environment (20.0+4) (fastdebug build 20-ea+4-158)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+4-158, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# J 107 c2 Test.mainTest([Ljava/lang/String;)V (546 bytes) @ 0x00007fe778b8d916 [0x00007fe778b8d6e0+0x0000000000000236]
..........
Command Line: -XX:-TieredCompilation -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:+StressCCP -Xcomp -XX:CompileOnly=Test --add-modules=ALL-DEFAULT jdk.compiler/com.sun.tools.javac.launcher.Main Test.java
..........
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
J 107 c2 Test.mainTest([Ljava/lang/String;)V (546 bytes) @ 0x00007fe778b8d916 [0x00007fe778b8d6e0+0x0000000000000236]
J 105 c2 Test.main([Ljava/lang/String;)V (45 bytes) @ 0x00007fe778b90e60 [0x00007fe778b90de0+0x0000000000000080]
j  java.lang.invoke.LambdaForm$DMH+0x0000000801030000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 java.base@20-ea
j  java.lang.invoke.LambdaForm$MH+0x0000000801149800.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 java.base@20-ea
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 java.base@20-ea
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 java.base@20-ea
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 java.base@20-ea
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 java.base@20-ea
j  com.sun.tools.javac.launcher.Main.execute(Ljava/lang/String;[Ljava/lang/String;Lcom/sun/tools/javac/launcher/Main$Context;)V+128 jdk.compiler@20-ea
j  com.sun.tools.javac.launcher.Main.run([Ljava/lang/String;[Ljava/lang/String;)V+54 jdk.compiler@20-ea
j  com.sun.tools.javac.launcher.Main.main([Ljava/lang/String;)V+17 jdk.compiler@20-ea
v  ~StubRoutines::call_stub 0x00007fe778b42d47
V  [libjvm.so+0x1015fe4]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x514
V  [libjvm.so+0x1169515]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .constprop.1]+0x385
V  [libjvm.so+0x116ca25]  jni_CallStaticVoidMethod+0x1b5
C  [libjli.so+0x47e5]  JavaMain+0xd65
C  [libjli.so+0x7a19]  ThreadJavaMain+0x9",,,,,,,,,,JDK-8301954,JDK-8305551,JDK-8302406,JDK-8307030,JDK-8301966,JDK-8310207,JDK-8310481,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281429,JDK-8301959,,,,,,"2022-07-05 06:52;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/99827/FuzzerUtils.java","2022-11-16 03:45;tholenstein;Reproduce.java;https://bugs.openjdk.org/secure/attachment/101632/Reproduce.java","2022-07-05 06:52;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/99829/Test.java","2022-07-05 06:52;chagedorn;hs_err_pid72086.log;https://bugs.openjdk.org/secure/attachment/99828/hs_err_pid72086.log",,,,,,,,,,,,,,,,,,,,,,,"0|i2xqmr:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-05 07:02;chagedorn;ILW = Crash in C2 compiled code, only single Java Fuzzer test with Stress flags, disable compilation of affected method = HLM = P3;;;","2022-11-16 03:46;tholenstein;also crashes with `jdk/build/linux-x64-debug/jdk/bin/java -XX:-TieredCompilation -Xcomp -XX:CompileOnly=Reproduce::main Reproduce.java`;;;","2022-12-09 07:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/8
Date: 2022-12-09 11:12:35 +0000;;;","2022-12-13 01:21;thartmann;Deferred to JDK 21, see justification in PR: https://github.com/openjdk/jdk20/pull/8#issuecomment-1347957252;;;","2023-01-16 08:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11990
Date: 2023-01-13 15:15:43 +0000;;;","2023-01-20 06:22;dukebot;Changeset: 97c611d0
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2023-01-20 14:20:32 +0000
URL:       https://git.openjdk.org/jdk/commit/97c611d029b614bb462a8f5398ea75b2715c3f07
;;;","2023-03-29 04:11;thartmann;Fix Request (JDK 20u)
Resolves an issue with a SIGSEGV in C2 compiled code. The fix is medium risk, was already backported to Oracle JDK 17u / 11u and tested in the JDK 21 and 17u / 11u CIs. The backport applies cleanly.
;;;","2023-03-29 04:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/34
Date: 2023-03-29 11:10:36 +0000;;;","2023-06-14 01:29;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Typical risk of a C2 change.
I had to adapt the code and I include follow-up JDK-8301959.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2023-06-14 01:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1436
Date: 2023-06-14 08:25:58 +0000;;;","2023-06-16 05:51;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle.
Typical C2 risk. Small change, but needed adaption.
Test passes, but I cannot reproduce the issue without the fix.
SAP nighlty testing passed.;;;","2023-06-16 05:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1951
Date: 2023-06-16 12:50:31 +0000;;;",,,,,,,,,,,,,,,,,,,,,
[lworld] Remove injected interfaces from CDS tests,JDK-8289747,5078528,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dsimms,dsimms,dsimms,2022-07-05 06:00,2022-07-05 07:06,2023-10-01 09:56,2022-07-05 07:06,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lw4,lworld,,,,,,,,,,,,,,,,Remove injected interfaces from CDS tests (revert previous test changes that accommodated interface injection) ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271154,JDK-8272793,JDK-8281537,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xqmb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-07-05 07:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/720
Date: 2022-07-05 13:47:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JfrStructCopyFailed uses heap words instead of bytes for object sizes,JDK-8289745,5078526,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rschmelter,rschmelter,rschmelter,2022-07-05 05:43,2023-09-28 02:23,2023-10-01 09:56,2022-07-12 07:57,,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jfr,,,,,,,,,,,,,,,"The values for smallestSize, firstSize and totalSize in the CopyFailed type are set as the number of heap words, but should be number of bytes. This leads to wrong values in the PromotionFailed and EvacuationFailed events containing this type.
 ",,,,,,,,,,JDK-8317226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xqlv:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-07-05 07:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9378
Date: 2022-07-05 14:08:24 +0000;;;","2022-07-12 07:56;dukebot;Changeset: 7f0e9bd6
Author:    Ralf Schmelter <rschmelter@openjdk.org>
Date:      2022-07-12 14:53:46 +0000
URL:       https://git.openjdk.org/jdk/commit/7f0e9bd632198c7fd34d27b85ca51ea0e2442e4d
;;;","2023-07-04 00:35;rschmelter;Fix request 17u

The risk of the change is very low. It only changes the the values of two JFR event fields from heapwords to bytes (which are the documented type).
The change was tested running the nighty SAP testsuite of jdk17u-dev which includes tier1, tier2 and tier3 tests.
;;;","2023-07-18 01:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1592
Date: 2023-07-18 07:54:40 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove unused imports from DTDBuilder.java,JDK-8289741,5078521,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jpai,jwaters,jwaters,2022-07-05 04:32,2022-08-15 16:52,2023-10-01 09:56,2022-08-09 01:42,,,,,,,20,infrastructure,,0,,,,,,,,,,,,,,,,,,"Several imports in DTDBuilder.java aren't used any longer, although none of them cause any severe issues, it would be good for codebase conciseness if they were removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290070,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xqkr:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-07-05 05:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9360
Date: 2022-07-04 07:04:40 +0000;;;","2022-08-09 01:41;dukebot;Changeset: 2712bc3f
Author:    ScientificWare <info@scientificware.com>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2022-08-09 08:40:24 +0000
URL:       https://git.openjdk.org/jdk/commit/2712bc3f79990f27fe9a624a7a818ba1c2c74b67
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UTIL_LOOKUP_PROGS fails on pathes with space,JDK-8289735,5078513,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,ihse,ihse,2022-07-05 03:41,2023-05-15 18:18,2023-10-01 09:56,2023-04-25 07:22,20,,,,,,21,infrastructure,,0,build-infra,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,,,,,,,,,,"According to user reports, having a path with spaces in $PATH can cause UTIL_LOOKUP_PROGS to fail:

""In my PATH env in Cygwin I have: ...:/cygdrive/c/Program Files/Git/cmd:...

checking for git...  Files/Git/cmd/git""",,,,,,,,,,JDK-8307115,JDK-8307419,JDK-8307113,JDK-8308137,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306976,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xqiz:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-07-05 23:03;clanger;The issue can be workarounded by installing cygwin's git package. If you remove it and only have the Windows Git client installed with default settings, one should be able to reproduce the problem.;;;","2023-04-24 13:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13629
Date: 2023-04-24 20:11:50 +0000;;;","2023-04-25 07:22;dukebot;Changeset: bad6aa68
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-04-25 14:20:50 +0000
URL:       https://git.openjdk.org/jdk/commit/bad6aa68e4d491e819ab22e91dd5d65bb094120e
;;;","2023-04-25 13:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/63
Date: 2023-04-25 20:25:55 +0000;;;","2023-04-26 01:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1298
Date: 2023-04-26 07:59:29 +0000;;;","2023-04-26 01:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1851
Date: 2023-04-26 08:11:35 +0000;;;","2023-04-26 04:56;clanger;Fix request (20u, 17u, 11u):
Requesting this build system fix for configurations where tools are installed on Windows with spaces in path names. In SapMachine we have such a configuration so at least in our setup the fix will be helpful. Risk is low but not completely negligible as always with build system changes. Testing: GHA and SAP nightlies.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Deprecated code sample in java.lang.ClassCastException,JDK-8289730,5078435,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,aturbanov,webbuggrp,webbuggrp,2022-07-04 01:34,2023-02-24 08:43,2023-10-01 09:56,2022-07-06 01:24,19,,,,,,20,core-libs,,0,19ea,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
A code sample in src/java.base/share/classes/java/lang/ClassCastException.java 
uses the deprecated Integer constructor and should be replaced with Integer.valueOf(int)

@deprecated(since=""9"")
public Integer​(int value)

https://github.com/openjdk/jdk/pull/9359

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xq1n:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-07-05 02:24;tongwan;Can not find the code snip in the report at https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/ClassCastException.java;;;","2022-07-05 03:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9359
Date: 2022-07-04 06:57:12 +0000;;;","2022-07-06 01:24;dukebot;Changeset: 4ad18cf0
Author:    ScientificWare <info@scientificware.com>
Committer: Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-07-06 08:19:40 +0000
URL:       https://git.openjdk.org/jdk/commit/4ad18cf088e12f3582b8f6117a44ae4607f69839
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1: Incorrect verification logic in G1ConcurrentMark::clear_next_bitmap,JDK-8289729,5078505,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ayang,ayang,ayang,2022-07-05 02:08,2022-07-27 13:23,2023-10-01 09:56,2022-07-11 00:59,16,17,18,19,,,19,hotspot,,0,gc-g1,,,,,,,,,,,,,,,,,"In `G1ConcurrentMark::clear_next_bitmap`:

```
guarantee(!may_yield || cl.is_complete(), ""Must have completed iteration when not yielding."");
```

From the msg and the surroundong context, the intent is to check sth like:

```
if (!may_yield) {
  assert(is_complete);
}
```

which should be `may_yield || is_complete`.

With the current code on master, this verification will trigger in a situation where a Full GC tries to start while concurrent-mark is in its final phase, i.e.

```
  // Phase 7: Clear bitmap for next mark.
  phase_clear_bitmap_for_next_mark();
```",,,,,,,,,,JDK-8290108,JDK-8291251,JDK-8291408,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xqh7:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-07-05 02:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9374
Date: 2022-07-05 09:45:15 +0000;;;","2022-07-06 07:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/113
Date: 2022-07-06 14:07:14 +0000;;;","2022-07-11 00:59;dukebot;Changeset: b542bcba
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2022-07-11 07:58:03 +0000
URL:       https://git.openjdk.org/jdk19/commit/b542bcba57a1ac79b9b7182dbf984b447754fafc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
fatal error: stuck in JvmtiVTMSTransitionDisabler::disable_VTMS_transitions,JDK-8289709,5078483,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,dholmes,dholmes,2022-07-04 14:45,2022-07-27 13:38,2023-10-01 09:56,2022-07-11 15:47,19,,,,,,19,hotspot,,0,loom,noreg-self,tier4,,,,,,,,,,,,,,,"Test: serviceability/jvmti/events/FramePop/framepop02/framepop02.java#id1

Platform Linux-x64

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8474/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3feffd74-39e8-4315-8e6c-546de4d7327a/runs/5b18ae64-056c-4afb-af81-49a84dc0e0a7/workspace/open/src/hotspot/share/prims/jvmtiThreadState.cpp:301), pid=4958, tid=5017
#  fatal error: stuck in JvmtiVTMSTransitionDisabler::disable_VTMS_transitions
#
# JRE version: Java(TM) SE Runtime Environment (19.0+30) (fastdebug build 19-ea+30-2158)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+30-2158, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x13d92e7]  JvmtiVTMSTransitionDisabler::disable_VTMS_transitions()+0x4a7

---------------  T H R E A D  ---------------

Current thread (0x00007f8ad837e0a0):  JavaThread ""Common-Cleaner"" daemon [_thread_in_vm, id=5017, stack(0x00007f8abc88c000,0x00007f8abc98d000)]

Stack: [0x00007f8abc88c000,0x00007f8abc98d000],  sp=0x00007f8abc98b320,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x13d92e7]  JvmtiVTMSTransitionDisabler::disable_VTMS_transitions()+0x4a7
V  [libjvm.so+0x135c4d0]  JvmtiEnv::GetFrameCount(_jobject*, int*)+0xe0
V  [libjvm.so+0x12fe7c3]  jvmti_GetFrameCount+0x103
C  [libframepop02.so+0x2b01]  MethodEntry+0x81
V  [libjvm.so+0x13958a8]  JvmtiExport::post_method_entry(JavaThread*, Method*, frame)+0x198
V  [libjvm.so+0xff77f7]  InterpreterRuntime::post_method_entry(JavaThread*)+0xd7
j  java.lang.ref.ReferenceQueue.remove(J)Ljava/lang/ref/Reference;+0 java.base@19-ea
j  jdk.internal.ref.CleanerImpl.run()V+45 java.base@19-ea
J 1128 c2 jdk.internal.misc.InnocuousThread.run()V java.base@19-ea (24 bytes) @ 0x00007f8acd3b0a60 [0x00007f8acd3b09c0+0x00000000000000a0]
v  ~StubRoutines::call_stub 0x00007f8accff1d47
V  [libjvm.so+0x10142e5]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x505
V  [libjvm.so+0x1014b74]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x4b4
V  [libjvm.so+0x1014fe7]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x77
V  [libjvm.so+0x11983eb]  thread_entry(JavaThread*, JavaThread*)+0x12b
V  [libjvm.so+0x1aa0c2c]  JavaThread::thread_main_inner()+0x23c
V  [libjvm.so+0x1aac290]  Thread::call_run()+0x100
V  [libjvm.so+0x175ddf4]  thread_native_entry(Thread*)+0x104

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.lang.ref.ReferenceQueue.remove(J)Ljava/lang/ref/Reference;+0 java.base@19-ea
j  jdk.internal.ref.CleanerImpl.run()V+45 java.base@19-ea
J 1128 c2 jdk.internal.misc.InnocuousThread.run()V java.base@19-ea (24 bytes) @ 0x00007f8acd3b0a60 [0x00007f8acd3b09c0+0x00000000000000a0]
v  ~StubRoutines::call_stub 0x00007f8accff1d47
Registers:
RAX=0x00007f8ae293d000, RBX=0x00007f8abc98b3e8, RCX=0x00007f8ae1811270, RDX=0x000000000000012d
RSP=0x00007f8abc98b320, RBP=0x00007f8abc98b370, RSI=0x00007f8ae1810d60, RDI=0x00000000e0000000
R8 =0x00007f8abc98b190, R9 =0x00007ffe9076d0b0, R10=0x00000000627e4ef2, R11=0x000b5f6f55d67db3
R12=0x0000000000000000, R13=0x00007f8ad837e0a0, R14=0x00007f8ad837e0a0, R15=0x00007f8ad837e0a0
RIP=0x00007f8ae0db12e7, EFLAGS=0x0000000000010206, CSGSFS=0x002b000000000033, ERR=0x0000000000000006
  TRAPNO=0x000000000000000e",,,,,,,,,,JDK-8290184,JDK-8291291,JDK-8291415,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,19,,linux,,,,,"0|i2xqcb:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-07-05 00:54;alanb;The mount appears to be blocked here:

[528.843s][error][jvmti] ForkJoinPool-1-worker-2(ForkJoinPool-1-worker-2) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 1
[528.843s][error][jvmti]   java.lang.ref.Reference java.lang.ref.NativeReferenceQueue.poll():69
[528.843s][error][jvmti]   void java.lang.invoke.MethodType$ConcurrentWeakInternSet.expungeStaleElements():1458
[528.843s][error][jvmti]   java.lang.Object java.lang.invoke.MethodType$ConcurrentWeakInternSet.get(java.lang.Object):1418
[528.843s][error][jvmti]   java.lang.invoke.MethodType java.lang.invoke.MethodType.makeImpl(java.lang.Class, java.lang.Class[], boolean):393
[528.843s][error][jvmti]   java.lang.invoke.MethodType java.lang.invoke.MethodType.methodType(java.lang.Class, java.lang.Class[], boolean):374
[528.843s][error][jvmti]   java.lang.invoke.MethodType java.lang.invoke.MethodHandleNatives.findMethodHandleType(java.lang.Class, java.lang.Class[]):396
[528.843s][error][jvmti]   boolean jdk.internal.vm.Continuation.compareAndSetMounted(boolean, boolean):464
[528.843s][error][jvmti]   void jdk.internal.vm.Continuation.mount():227
[528.843s][error][jvmti]   void jdk.internal.vm.Continuation.run():240
[528.843s][error][jvmti]   void java.lang.VirtualThread.runContinuation():213
[528.843s][error][jvmti]   void java.lang.VirtualThread$$Lambda$7/0x000000080104f440.run():-1
[528.843s][error][jvmti]   boolean java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec():1423
[528.843s][error][jvmti]   int java.util.concurrent.ForkJoinTask.doExec():387
[528.843s][error][jvmti]   void java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(java.util.concurrent.ForkJoinTask, java.util.concurrent.ForkJoinPool$WorkQueue):1311
[528.843s][error][jvmti]   int java.util.concurrent.ForkJoinPool.scan(java.util.concurrent.ForkJoinPool$WorkQueue, int, int):1840
[528.843s][error][jvmti]   void java.util.concurrent.ForkJoinPool.runWorker(java.util.concurrent.ForkJoinPool$WorkQueue):1806
[528.843s][error][jvmti]   void java.util.concurrent.ForkJoinWorkerThread.run():177

The ReferenceHandler thread seems in NativeReferenceQueue.signal so it's holding the monitor that ForkJoinPool-1-worker-2 is trying to enter. Is it ""stuck"" in a JVM TI callback so it blocks the FJP worker indefinitely, and eventually the transition time expires and the assert triggered?
;;;","2022-07-06 17:34;sspitsyn;Thanks, Alan. I agree with your analysis in general.
One correction:
The ReferenceHandler thread seems in java.lang.ref.ReferenceQueue.remove(J), not NativeReferenceQueue.signal():

V  [libjvm.so+0x13d92e7]  JvmtiVTMSTransitionDisabler::disable_VTMS_transitions()+0x4a7
V  [libjvm.so+0x135c4d0]  JvmtiEnv::GetFrameCount(_jobject*, int*)+0xe0
V  [libjvm.so+0x12fe7c3]  jvmti_GetFrameCount+0x103
C  [libframepop02.so+0x2b01]  MethodEntry+0x81
V  [libjvm.so+0x13958a8]  JvmtiExport::post_method_entry(JavaThread*, Method*, frame)+0x198
V  [libjvm.so+0xff77f7]  InterpreterRuntime::post_method_entry(JavaThread*)+0xd7
j  java.lang.ref.ReferenceQueue.remove(J)Ljava/lang/ref/Reference;+0 java.base@19-ea
j  jdk.internal.ref.CleanerImpl.run()V+45 java.base@19-ea

I think, the post_method_entry is reporting entry of native method remove0(J).

Now, I'm puzzled on what approach to take to fix this.
I doubt, it is feasible to get rid of the call to java.lang.ref.ReferenceQueue.remove(J) in the Common-Cleaner thread code path.
Should we disable JVMTI events over these calls?:
    public Reference<? extends T> poll() {
        . . .
        synchronized(lock) {
            return poll0();      <= Should we JVMTI disable events around this call?
        }
    }

We may have more such sync-based deadlock issues.
So, we need a more general approach to avoid them.

Also, the framepop02 test should filter out the MethodEntry events for non-tested threads.
;;;","2022-07-07 01:12;alanb;Are you sure the ReferenceHandler is in remove0, is this the core file?
One thing that I think would help this case is to change Continuation to use Unsafe rather than VarHandle. That would at least avoid interaction with the method type cache.;;;","2022-07-07 04:06;sspitsyn;Sorry, the ReferenceHandler thread is in signal.
But the Common-Cleaner thread is executing Reference.remove(J).
I'll check what is on the ReferenceHandler thread.;;;","2022-07-07 04:28;sspitsyn;Alan, you are right.
The Reference Handler thread grabbed the lock in the method java.lang.ref.NativeReferenceQueue.enqueue():
    boolean enqueue(Reference<? extends T> r) { /* Called only by Reference class */
        lock.lock();
        try {
            return enqueue0(r);
        } finally {
            lock.unlock();
        }
    }

The stack trace is:

""Reference Handler"" #8 daemon prio=10 tid=0x00007f8ad8335b30 nid=4968 runnable [0x00007f8abdba7000]
   java.lang.Thread.State: RUNNABLE
   JavaThread state: _thread_blocked
 - java.lang.ref.NativeReferenceQueue.signal() @bci=0, line=44 (Interpreted frame)
 - java.lang.ref.ReferenceQueue.enqueue0(java.lang.ref.Reference) @bci=93, line=106 (Interpreted frame)
 - java.lang.ref.NativeReferenceQueue.enqueue(java.lang.ref.Reference) @bci=9, line=59 (Interpreted frame)
	- locked <0x00000000c280f3a8> (a java.lang.ref.NativeReferenceQueue$Lock)
 - java.lang.ref.Reference.enqueueFromPending() @bci=14, line=234 (Interpreted frame)
 - java.lang.ref.Reference.processPendingReferences() @bci=83, line=265 (Interpreted frame)
 - java.lang.ref.Reference$ReferenceHandler.run() @bci=8, line=207 (Interpreted frame)
;;;","2022-07-08 02:07;alanb;I think we should minimally change Continuation to use Unsafe rather than VarHandles as that will remove many of the issues here.;;;","2022-07-08 19:21;sspitsyn;The problem is that the Reference Handler thread is blocked on RawMonitorEnter in the JVMTI agent MethodEntry callback:

Thread 19 (Thread 0x7f8abdba8700 (LWP 4968)):
#0  0x00007f8ae22f7a35 in pthread_cond_wait@@GLIBC_2.3.2 ()
#1  0x00007f8ae1144d8b in os::PlatformEvent::park()
#2  0x00007f8ae0d85465 in JvmtiRawMonitor::simple_enter(Thread*)
#3  0x00007f8ae0d86b94 in JvmtiRawMonitor::raw_enter(Thread*)
#4  0x00007f8ae0d3db8b in JvmtiEnv::RawMonitorEnter(JvmtiRawMonitor*)
#5  0x00007f8ae2935ad8 in MethodEntry ()
#6  0x00007f8ae0d6d8a8 in JvmtiExport::post_method_entry(JavaThread*, Method*, frame)
#7  0x00007f8ae09cf7f7 in InterpreterRuntime::post_method_entry(JavaThread*)

So, the deadlock dependencies are:
(1)  The Common-Cleaner thread is executing the JVMTI agent MethodEntry event callback
       which grabbed the agent_lock raw monitor and calls JVMTI GetFrameCount.
       The GetFrameCount is blocked in disabling VTMS transitions because the FJP-1-worker-2 is at mount (VTMS) transition.
(2) The FJP-1-worker-2 is at mount (VTMS) transition and blocked in java.lang.ref.NativeReferenceQueue.poll()
      when acquiring the NativeReferenceQueue lock which is held by the Reference Handler thread.
(3) The Reference Handler thread grabbed the NativeReferenceQueue lock and is entering the signal() method.
      It triggered a JVMTI MethodEntry event. The JVMTI agent MethodEntry event callback is blocked
      on grabbing the agent_lock raw monitor which is held by the Common-Cleaner thread.

The conclusion is that it is a test bug. The test should filter out non-tested threads to avoid generating this kind of deadlocks.
;;;","2022-07-08 19:33;sspitsyn;The suggested fix is:

diff --git a/test/hotspot/jtreg/serviceability/jvmti/events/FramePop/framepop02/libframepop02.cpp b/test/hotspot/jtreg/serviceability/jvmti/events/FramePop/framepop02/libframepop02.cpp
index d15c998fa91..a65c565c6c1 100644
--- a/test/hotspot/jtreg/serviceability/jvmti/events/FramePop/framepop02/libframepop02.cpp
+++ b/test/hotspot/jtreg/serviceability/jvmti/events/FramePop/framepop02/libframepop02.cpp
@@ -174,6 +174,10 @@ void JNICALL MethodEntry(jvmtiEnv *jvmti, JNIEnv *jni,
 
   if (watch_events == JNI_FALSE) return;
 
+  if (!isTestThread(jni, jvmti, thr)) {
+    return; // not a tested thread
+  }
+
   RawMonitorLocker rml(jvmti, jni, agent_lock);
 
   if (!callbacksEnabled) {
@@ -183,18 +187,16 @@ void JNICALL MethodEntry(jvmtiEnv *jvmti, JNIEnv *jni,
   check_jvmti_status(jni, jvmti->GetFrameCount(thr, &frameCount), ""Error in GetFrameCount"");
   check_jvmti_status(jni, jvmti->IsMethodNative(method, &isNative), ""Error in IsMethodNative."");
 
-  if (isTestThread(jni, jvmti, thr)) {
-    if (printdump == JNI_TRUE) {
-      print_current_time();
-      fflush(0);
-      LOG("">>> %sMethod entry\n>>>"", (isNative == JNI_TRUE) ? ""Native "" : """");
-      printInfo(jni, jvmti, thr, method, frameCount);
-    }
-    if (isNative == JNI_FALSE) {
-      RawMonitorLocker rml(jvmti, jni, event_lock);
-      push(jni, thr, method, frameCount);
-      check_jvmti_status(jni, jvmti->NotifyFramePop(thr, 0), ""Error in NotifyFramePop."");
-    }
+  if (printdump == JNI_TRUE) {
+    print_current_time();
+    fflush(0);
+    LOG("">>> %sMethod entry\n>>>"", (isNative == JNI_TRUE) ? ""Native "" : """");
+    printInfo(jni, jvmti, thr, method, frameCount);
+  }
+  if (isNative == JNI_FALSE) {
+    RawMonitorLocker rml(jvmti, jni, event_lock);
+    push(jni, thr, method, frameCount);
+    check_jvmti_status(jni, jvmti->NotifyFramePop(thr, 0), ""Error in NotifyFramePop."");
   }
 };;;","2022-07-08 23:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/129
Date: 2022-07-09 06:43:12 +0000;;;","2022-07-11 15:47;dukebot;Changeset: c3806b93
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-07-11 22:44:03 +0000
URL:       https://git.openjdk.org/jdk19/commit/c3806b93c48f826e940eecd0ba29995d7f0c796b
;;;",,,,,,,,,,,,,,,,,,,,,,,
AArch64: Need to relativize extended_sp in frame,JDK-8289698,5078467,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,aph,aph,aph,2022-07-04 08:32,2023-05-11 11:31,2023-10-01 09:56,2022-07-05 00:57,,,,,,,20,hotspot,,0,noreg-hard,regression,tier1,tier2,tier3,tier4,tier5,tier6,,,,,,,,,,"With the the addition of the extended_sp field in interpreter frames, we need to make sure it is de-relativized and re-relativized when freezing and thawing a vthread.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289761,,,,,,JDK-8307956,JDK-8294744,JDK-8289761,,JDK-8288971,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2xq8r:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Not verified,,"2022-07-04 08:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9367
Date: 2022-07-04 15:39:40 +0000;;;","2022-07-05 00:57;dukebot;Changeset: a5934cdd
Author:    Andrew Haley <aph@openjdk.org>
Date:      2022-07-05 07:54:38 +0000
URL:       https://git.openjdk.org/jdk/commit/a5934cddca9b962d8e1b709de23c169904b95525
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
buffer overflow in MTLVertexCache.m: MTLVertexCache_AddGlyphQuad,JDK-8289697,5078466,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vkempik,vkempik,vkempik,2022-07-04 08:08,2022-09-13 01:34,2023-10-01 09:56,2022-07-08 02:16,17,18,19,,,,20,client-libs,,0,hgupdate-sync,jdk17u-fix-request,jdk17u-fix-yes,macos,,,,,,,,,,,,,,"Found this with asan, MTLVertexCache_AddGlyphQuad adds 6 vertexes to the buffer while checking space only for one vertex:
    if (vertexCacheIndex >= MTLVC_MAX_INDEX)
...
    MTLVC_ADD_TRIANGLES(tx1, ty1, tx2, ty2,
                        dx1, dy1, dx2, dy2);

where
#define MTLVC_ADD_TRIANGLES(TX1, TY1, TX2, TY2, DX1, DY1, DX2, DY2) \
    do { \
        MTLVC_ADD_VERTEX(TX1, TY1, DX1, DY1, 0); \
        MTLVC_ADD_VERTEX(TX2, TY1, DX2, DY1, 0); \
        MTLVC_ADD_VERTEX(TX2, TY2, DX2, DY2, 0); \
        MTLVC_ADD_VERTEX(TX2, TY2, DX2, DY2, 0); \
        MTLVC_ADD_VERTEX(TX1, TY2, DX1, DY2, 0); \
        MTLVC_ADD_VERTEX(TX1, TY1, DX1, DY1, 0); \
    } while (0)

where 

#define MTLVC_ADD_VERTEX(TX, TY, DX, DY, DZ) \
    do { \
        J2DVertex *v = &vertexCache[vertexCacheIndex++]; \
        v->txtpos[0] = TX; \
        v->txtpos[1] = TY; \
        v->position[0]= DX; \
        v->position[1] = DY; \
    } while (0)
",,,,,,,,,,JDK-8292885,JDK-8290029,JDK-8291405,JDK-8290042,JDK-8290339,JDK-8291248,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284378,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2xq8j:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-07-04 08:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9368
Date: 2022-07-04 15:40:56 +0000;;;","2022-07-08 02:16;dukebot;Changeset: d852e99a
Author:    Vladimir Kempik <vkempik@openjdk.org>
Date:      2022-07-08 09:14:51 +0000
URL:       https://git.openjdk.org/jdk/commit/d852e99ae9de4c611438c50ce37ea1806f58cbdf
;;;","2022-07-08 10:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/538
Date: 2022-07-08 17:28:24 +0000;;;","2022-07-08 10:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/125
Date: 2022-07-08 17:28:32 +0000;;;","2022-07-08 10:42;vkempik;Fix request(17u): this fixes a bug in Metal rendering engine where the our native code can corrupt native heap by writing out of our array bounds
;;;","2022-07-11 09:26;dukebot;Changeset: c142fbbb
Author:    Vladimir Kempik <vkempik@openjdk.org>
Date:      2022-07-08 17:49:53 +0000
URL:       https://git.openjdk.org/jdk/commit/c142fbbbafcaa728cbdc56467c641eeed511f161
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] TestMemoryAwareness.java fails on cgroups v2 and crun,JDK-8289695,5078463,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,sgehwolf,sgehwolf,2022-07-04 07:14,2023-06-29 06:25,2023-10-01 09:56,2022-07-06 01:28,11.0.17,,,,,,20,core-svc,,0,cgroupsv2,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,"Running test test/hotspot/jtreg/containers/docker/TestMemoryAwareness.java on a cgroup v2 system and with podman (which uses crun by default) it fails the AttempOOM test case since it uses --memory-swappiness 0 which is not supported on cgroups v2.

----------System.err:(22/1176)----------
 stdout: [];
 stderr: [Error: OCI runtime error: crun: cannot set memory swappiness with cgroupv2
]
 exitValue = 126

java.lang.RuntimeException: 'Entering AttemptOOM main' missing from stdout/stderr

        at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:163)
        at TestMemoryAwareness.testOOM(TestMemoryAwareness.java:134)
        at TestMemoryAwareness.main(TestMemoryAwareness.java:65)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:829)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 'Entering AttemptOOM main' missing from stdout/stderr
",,,,,,,,,,JDK-8299083,JDK-8292962,JDK-8303430,JDK-8299983,JDK-8303295,JDK-8303050,JDK-8303429,,,,,,,,,,,,,,,,,,,JDK-8279176,,,,,,,,JDK-8229182,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i2xq7v:",9223372036854775807,b06,,,,,,,,,,,"2022-07-04 07:17;sgehwolf;Docker (which uses runc) doesn't have that problem, since it merely prints a warning and continues.

# docker run -ti --memory 256m --memory-swappiness 0 fedora:36 echo success
WARNING: Your kernel does not support memory swappiness capabilities or the cgroup is not mounted. Memory swappiness discarded.
success

Small reproducer:

# podman run --runtime runc -ti --memory 256m --memory-swappiness 0 fedora:36 echo success
success
# podman run --runtime crun -ti --memory 256m --memory-swappiness 0 fedora:36 echo success
Error: OCI runtime error: crun: cannot set memory swappiness with cgroupv2

# podman info | grep cgroupVersion
  cgroupVersion: v2;;;","2022-07-04 08:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9366
Date: 2022-07-04 15:03:41 +0000;;;","2022-07-04 08:16;sgehwolf;An alternative fix (if it's really needed to keep --memory-swappiness 0 for cgroups v1), is to only add that option on a cgroups v1 system a la TestMemoryWithCgroupV1.java;;;","2022-07-05 04:42;sgehwolf;Testing confirmed that the OOM test succeeds on the affected system without using memory-swappiness. So removing it is the preferred option.;;;","2022-07-06 01:28;dukebot;Changeset: ac6be165
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-07-06 08:24:47 +0000
URL:       https://git.openjdk.org/jdk/commit/ac6be165196457a26d837760b5f5030fe010d633
;;;","2022-08-25 09:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/645
Date: 2022-08-25 14:28:58 +0000;;;","2022-08-25 09:37;sgehwolf;Fix Request (OpenJDK 17u):

Please approve this test-only change (applies clean). Setting --memory and --memory-swap to the same value (what the test already does) is sufficient to turn off swap. Test continues to pass with this (cg1 and cg2). Low risk.;;;","2022-12-19 09:40;sgehwolf;Fix Request (OpenJDK 11u):

Please approve this test-only change (applies clean). Issue observable on 11.0.17+ too which has cg v2 support. Setting --memory and --memory-swap to the same value (what the test already does) is sufficient to turn off swap. Test continues to pass with this (cg1 and cg2). Low risk.;;;","2022-12-19 09:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1602
Date: 2022-12-19 17:32:22 +0000;;;","2022-12-20 09:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/217
Date: 2022-12-20 16:59:18 +0000;;;","2022-12-20 09:56;sgehwolf;Fix Request (OpenJDK 8u):

Please approve this test-only change (applies clean, modulo path changes). Issue observable on 8u372-dev too once JDK-8229182 integrates. 8u372-dev has cg v2 support. Setting --memory and --memory-swap to the same value (what the test already does) is sufficient to turn off swap. Test continues to pass with this (cg1 and cg2). Low risk.;;;",,,,,,,,,,,,,,,,,,,,,,
JFR: Thread checkpoint no longer enforce mutual exclusion post Loom integration ,JDK-8289692,5078457,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,mgronlun,mgronlun,2022-07-04 05:22,2022-12-05 05:31,2023-10-01 09:56,2022-07-11 02:14,19,20,,,,,19,hotspot,,0,loom,,,,,,,,,,,,,,,,,"Before integrating Loom and Virtual Threads, threads writing checkpoint meta-information claimed a checkpoint buffer from a list categorized as thread-local.
Buffers on this list are not reset eagerly as part of a flushpoint but only as part of chunk rotation, where the JFR Recorder Thread has exclusive access by issuing a prior epoch shift.

With Loom, the thread-local buffers are exclusively dedicated to meta-information for Virtual Threads.
The meta-information about the JVM thread, for example, the carrier thread, is written to a buffer located on the list categorized as global. Buffers on this list are reset eagerly during flushpoints. Before Loom, an invariant for this global list was that only the JFR Recorder Thread used it.
This invariant no longer holds. The JFR Recorder Thread will reset buffers on this list without protection and can do so in the middle of another thread's attempted writes. Some consequences are asserts in debug builds and data loss in product builds.

Some mutex mechanism for the buffers on the global list must be re-introduced to prevent the JFR Recorder Thread from resetting buffers currently in use.",,,,,,,,,,JDK-8291410,JDK-8290111,JDK-8291253,,,,,,,,,,,,,,,,,,,,,,,JDK-8288592,,,,,,,,JDK-8287699,JDK-8293864,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,"0|i2xq6j:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-07-05 03:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/109
Date: 2022-07-05 10:47:48 +0000;;;","2022-07-11 02:14;dukebot;Changeset: 04942914
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2022-07-11 09:11:58 +0000
URL:       https://git.openjdk.org/jdk19/commit/0494291490b6cd23d228f39199a3686cc9731ec0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Backport of 8248414 is not proper in assembler_aarch64.hpp,JDK-8289690,5078454,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fmatte,fmatte,fmatte,2022-07-04 04:49,2022-07-08 01:46,2023-10-01 09:56,2022-07-04 20:49,,,,,,,8u351,hotspot,,0,,,,,,,,,,,,,,,,,,"uintptr_t is wrongly reffer as uint64_t 
the below patch should fix it, according to original patch 8248414 

diff --git a/hotspot/src/cpu/aarch64/vm/assembler_aarch64.hpp b/hotspot/src/cpu/aarch64/vm/assembler_aarch64.hpp
index ac9230e982..2ef849b66c 100644
--- a/hotspot/src/cpu/aarch64/vm/assembler_aarch64.hpp
+++ b/hotspot/src/cpu/aarch64/vm/assembler_aarch64.hpp
@@ -630,10 +630,10 @@ typedef enum {
 class Assembler : public AbstractAssembler {

 #ifndef PRODUCT
-  static const uint64_t asm_bp;
+  static const uintptr_t asm_bp;

   void emit_long(jint x) {
-    if ((uint64_t)pc() == asm_bp)
+    if ((uintptr_t)pc() == asm_bp)
       asm volatile (""nop"");
     AbstractAssembler::emit_int32(x);",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2xq5v:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jfr command hangs when it processes invalid file,JDK-8289688,5078451,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2022-07-04 04:29,2023-06-20 06:07,2023-10-01 09:56,2022-07-29 16:34,17,18,19,20,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"jfr command was in infinite loop when I passed invalid file which are in JFR repository of GraalVM Native Image (I attached the recording file in this ticket).

CPU usage was 100% when jfr hanged, and I got following thread stacks:

```
""main"" #1 prio=5 os_prio=0 cpu=10333.35ms elapsed=10.67s tid=0x00007f4994013810 nid=10079 runnable  [0x00007f499adfe000]
   java.lang.Thread.State: RUNNABLE
        at java.io.RandomAccessFile.seek0(java.base@18.0.1/Native Method)
        at java.io.RandomAccessFile.seek(java.base@18.0.1/RandomAccessFile.java:591)
        at jdk.jfr.internal.consumer.RecordingInput.positionPhysical(jdk.jfr@18.0.1/RecordingInput.java:102)
        at jdk.jfr.internal.consumer.ChunkHeader.refresh(jdk.jfr@18.0.1/ChunkHeader.java:124)
        at jdk.jfr.internal.consumer.ChunkHeader.<init>(jdk.jfr@18.0.1/ChunkHeader.java:108)
        at jdk.jfr.internal.consumer.ChunkHeader.<init>(jdk.jfr@18.0.1/ChunkHeader.java:66)
        at jdk.jfr.internal.consumer.ChunkParser.<init>(jdk.jfr@18.0.1/ChunkParser.java:117)
        at jdk.jfr.internal.consumer.ChunkParser.<init>(jdk.jfr@18.0.1/ChunkParser.java:113)
        at jdk.jfr.consumer.RecordingFile.findNext(jdk.jfr@18.0.1/RecordingFile.java:256)
        at jdk.jfr.consumer.RecordingFile.<init>(jdk.jfr@18.0.1/RecordingFile.java:89)
        at jdk.jfr.internal.tool.EventPrintWriter.print(jdk.jfr@18.0.1/EventPrintWriter.java:72)
        at jdk.jfr.internal.tool.Print.execute(jdk.jfr@18.0.1/Print.java:164)
        at jdk.jfr.internal.tool.Main.main(jdk.jfr@18.0.1/Main.java:87)
```

And also I got following log with `-J-Xlog:""jfr*=info""` - chunk size was 0, and the parser hanged in processing first chunk (id = 0):

```
$ jfr -J-Xlog:""jfr*=info"" print ~/2022_07_04_18_05_11.jfr
[0.353s][info][jfr,system,parser] Chunk: 0
[0.353s][info][jfr,system,parser] Chunk: file=/home/ysuenaga/2022_07_04_18_05_11.jfr
[0.353s][info][jfr,system,parser] Chunk: startPosition=0
[0.353s][info][jfr,system,parser] Chunk: major=2
[0.353s][info][jfr,system,parser] Chunk: minor=0
[0.353s][info][jfr,system,parser] Chunk: chunkSize=0
[0.353s][info][jfr,system,parser] Chunk: constantPoolPosition=0
[0.353s][info][jfr,system,parser] Chunk: metadataPosition=0
[0.353s][info][jfr,system,parser] Chunk: startNanos=0
[0.353s][info][jfr,system,parser] Chunk: durationNanos=0
[0.354s][info][jfr,system,parser] Chunk: startTicks=9410187
[0.354s][info][jfr,system,parser] Chunk: ticksPerSecond=1000000000
```

We should abort the process when invalid chunk was detected.",,,,,,,,,,JDK-8307801,JDK-8310373,JDK-8308064,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-07-04 04:23;ysuenaga;2022_07_04_18_05_11.jfr;https://bugs.openjdk.org/secure/attachment/99783/2022_07_04_18_05_11.jfr",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xq57:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-07-04 07:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9363
Date: 2022-07-04 11:33:51 +0000;;;","2022-07-29 16:34;dukebot;Changeset: dd9bd31b
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2022-07-29 23:30:58 +0000
URL:       https://git.openjdk.org/jdk/commit/dd9bd31b86b732bc84a4db9a4d9c2b15e8142c90
;;;","2023-06-19 08:56;mdoerr;Fix Request (17u): 
Should get backported for parity with 17.0.9-oracle. Applies cleanly.;;;","2023-06-19 09:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1472
Date: 2023-06-19 15:57:54 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] bug in HotSpotResolvedJavaMethodImpl.equals,JDK-8289687,5078447,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,dnsimon,dnsimon,2022-07-04 04:00,2022-07-25 07:10,2023-10-01 09:56,2022-07-05 11:25,20,,,,,,20,hotspot,,0,jdk11-graalvm,jdk17-graalvm,jdk19-graalvm,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,,,,,,,,,,"A bug[1] slipped in with JDK-8289094 that broke HotSpotResolvedJavaMethodImpl.equals.

Instead of:

            return getMethodPointer() == getMethodPointer();

it should obviously be:

            return that.getMethodPointer() == getMethodPointer();

[1] https://github.com/openjdk/jdk/commit/ba670ecbb9efdbcaa783d4a933499ca191fb58c5#diff-b39038af11e0ac6774aa1b7e66c1b11fa265194649762a4768446f74d6fbf2cdR169",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289094,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xq4b:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-04 06:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9364
Date: 2022-07-04 12:30:57 +0000;;;","2022-07-04 23:50;chagedorn;ILW = Broken HotSpotResolvedJavaMethodImpl.equals with JVMCI, single equals method, no workaround = MMH = P3;;;","2022-07-05 11:25;dukebot;Changeset: c45d613f
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2022-07-05 18:25:12 +0000
URL:       https://git.openjdk.org/jdk/commit/c45d613faa8b8658c714513da89852f1f9ff0a4a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Unnecessary buffering because constant getters with scalarized arg are not C2 compiled,JDK-8289686,5078446,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2022-07-04 03:46,2022-07-04 05:19,2023-10-01 09:56,2022-07-04 05:19,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lw4,lworld,performance,,,,,,,,,,,,,,,The fix for JDK-8275825 is incomplete.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275825,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xq43:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-04 05:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/719
Date: 2022-07-04 12:05:54 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AssertionError during annotation processing of record related tests,JDK-8289647,5078407,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,abimpoudis,kganapureddy,kganapureddy,2022-07-03 20:52,2023-02-24 14:09,2023-10-01 09:56,2022-07-29 09:08,20,,,,,,20,tools,,0,conformance,CPU23_04-critical-approved,CPU23_04-critical-SQE-OK,javac-record,jdk17u-fix-request,jdk17u-fix-yes,regression,tck-red-17.0.7-oracle,tck-red-20,,,,,,,,,"Attached the standalone sample with sample annotation processor and the source annot02005.java to demonstrate the problem.

The source works well with JDKb20-b03 but throws AssertionError with JDKb20-b04.

with JDK20-b04:
====
javac.exe --enable-preview --release 20 --enable-preview -processor TestProcTypeAlreadyExistsWarning annot02005.java
Inside TestProcTypeAlreadyExistsWarning::process com.sun.tools.javac.model.JavacElements@add0edd
SUCCESS
An exception has occurred in the compiler (20-ea). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError
        at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
        at jdk.compiler/com.sun.tools.javac.util.Assert.check(Assert.java:46)
        at jdk.compiler/com.sun.tools.javac.comp.Annotate.lambda$annotateLater$0(Annotate.java:253)

.....

With JDKb20-b03
============
javac.exe --enable-preview --release 20 --enable-preview -processor TestProcTypeAlreadyExistsWarning annot02005.java
Inside TestProcTypeAlreadyExistsWarning::process com.sun.tools.javac.model.JavacElements@1460a8c0
SUCCESS
Inside TestProcTypeAlreadyExistsWarning::process com.sun.tools.javac.model.JavacElements@1460a8c0
SUCCESS ",,,,,,,,,,JDK-8303204,JDK-8302534,JDK-8302039,JDK-8302546,JDK-8302424,,,,,,,,,,,,,,,,,,,,JCK-7317880,,,JDK-8301571,,,,,,,,,,JDK-8288130,,,,,,,"2022-07-04 05:51;kganapureddy;sample-Code.zip;https://bugs.openjdk.org/secure/attachment/99788/sample-Code.zip",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xpvf:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2022-07-03 20:58;kganapureddy;Possibly caused by - https://bugs.openjdk.org/browse/JDK-8288130 fix.;;;","2022-07-19 07:29;abimpoudis;Minimized

    import java.lang.annotation.ElementType;
    import java.lang.annotation.Target;

    @Target(ElementType.PARAMETER)
    @interface annotPARAMETER {
    }

    @Target(ElementType.FIELD)
    @interface annotFIELD {
    }

    record annot02005TestRecord(@annotFIELD @annotPARAMETER int i) {
        public annot02005TestRecord(int i) {
            this.i = 10;
        }
    };;;","2022-07-20 07:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9570
Date: 2022-07-20 13:56:07 +0000;;;","2022-07-20 07:08;abimpoudis;Instead of adding the whole source as part of our test suite, I computed it, as part of the existing unit test for records.;;;","2022-07-29 09:08;dukebot;Changeset: 64a1a08f
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2022-07-29 16:02:18 +0000
URL:       https://git.openjdk.org/jdk/commit/64a1a08ff9f120648e466449f65750991cbf673c
;;;","2023-02-13 05:51;jlahoda;I tried a build jdk-20+4, and a current JDK 20 build, can reproduce before in jdk-20+4, cannot reproduce in JDk 20, seems fixed indeed.;;;","2023-02-20 08:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1181
Date: 2023-02-20 16:50:51 +0000;;;","2023-02-22 11:30;akozlov;Fix Request 17u

Backport to fix a JCK failure. The fix was also backported to Oracle 17.0.7. Applies almost cleanly except @bug list in the test change. The JCK failure is fixed after the change applied, GHA testing has passed.

;;;",,,,,,,,,,,,,,,,,,,,,,,,,
configure script failed on WSL,JDK-8289646,5078406,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2022-07-03 20:51,2023-08-10 11:23,2023-10-01 09:56,2022-07-07 17:08,20,,,,,,20,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"configure failed as following when I run it on WSL 1.

```
checking for version string... 20-internal-adhoc.yasuenag.jdk
configure: Found potential Boot JDK using configure arguments
configure: The command for java_to_test, which resolves as ""/mnt/d/java/jdk-18/bin/java"", can not be found.
configure: error: Cannot locate /mnt/d/java/jdk-18/bin/java
configure exiting with result code 1
```

fixpath.sh would attempt to add "".exe"" (e.g. ""java"" -> ""java.exe"") if `wslpath -w"" failed (returns non-zero value). However it returns zero even if the path does not exist in recent WSL (v0.61.4 at least).

WSL v0.60.0.0
```
$ wslpath -w silver-bullet
wslpath: silver-bullet: No such file or directory
$ echo $?
1
```

WSL v0.61.4.0
```
$ wslpath -w silver-bullet
silver-bullet
$ echo $?
0
```

We should add "".exe"" at the tail of path regardless of return value from wslpath.",,,,,,,,,,JDK-8314128,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2xpv7:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-07-03 23:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9357
Date: 2022-07-04 03:56:03 +0000;;;","2022-07-07 17:08;dukebot;Changeset: 3f1174aa
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2022-07-08 00:04:46 +0000
URL:       https://git.openjdk.org/jdk/commit/3f1174aa4709aabcfde8b40deec88b8ed466cc06
;;;","2023-06-08 04:57;rmarchenko;I'd like to backport this to [17u];;;","2023-06-09 02:24;rmarchenko;Fix request (17u):
clean backport, no tier1 regressions
Tested build on WSL manually.
;;;","2023-06-09 02:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1418
Date: 2023-06-09 09:25:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
File descriptor leak with ProcessBuilder.startPipeline,JDK-8289643,5077883,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rriggs,webbuggrp,webbuggrp,2022-06-26 13:55,2023-05-19 08:19,2023-10-01 09:56,2022-07-21 12:01,17,,,,,,20,core-libs,,0,additional-information-received,amazon-interest,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Ubuntu 21.10 / Debian GNU/Linux 10 (buster)
Java: 17.0.3/11.0.15

A DESCRIPTION OF THE PROBLEM :
When using ProcessBuilder.startPipeline the pipes (or pipe if only 2 ProcessBuilder instance used) created are never closed.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
the pipes created by ProcessBuilder.startPipeline are closed
ACTUAL -
the pipes created by ProcessBuilder.startPipeline are never closed

---------- BEGIN SOURCE ----------
List<ProcessBuilder> processBuilders = new LinkedList<>();
processBuilders.add(new ProcessBuilder(""ls""));
processBuilders.add(new ProcessBuilder(""grep"", ""a""));
List<Process> processes = ProcessBuilder.startPipeline(processBuilders);
Process last = processes.get(processes.size()-1);
last.waitFor();

try (InputStream inputStream = last.getInputStream()) {
    inputStream.readAllBytes();
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290885,,,,,,,,,,,"2022-07-03 19:35;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/99775/Main.java",,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2xmnf:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-06-27 22:55;tongwan;Can not observe the problems described in the report.
Requested more details of the pipes which are never closed from the submitter.;;;","2022-07-03 19:36;tongwan;No response from the submitter.;;;","2022-07-04 04:28;michaelm;I guess the streams must be getting closed as the pipeline would not work correctly, as it appears to do, if they weren't being closed.

Though after the processes have terminated, you can still get the output streams and write to them (with no effect). Not sure if this is a bug as you might expect an IOException in that situation. Will assign the bug for further investigation.;;;","2022-07-05 05:27;tongwan;Additional information from the submitter:
I tested the provided sample with both Oracle JDK 17.0.3 and 11.0.15.
The commands used could be any, I just used ""ls"" and ""grep"" in provided sample because are available on any linux system.

Taking provided sample as reference, before the execution of ""List<Process> processes = ProcessBuilder.startPipeline(processBuilders);"" only stdin, stdout and stderr pipes are available listing ""/proc/<PID>/fd/""

lr-x------ 1 user user 64 lug  5 12:47 0 -> 'pipe:[92826]'
l-wx------ 1 user user 64 lug  5 12:47 1 -> 'pipe:[92827]'
l-wx------ 1 user user 64 lug  5 12:47 2 -> 'pipe:[92828]'

After the execution of ""ProcessBuilder.startPipeline"", ""waitFor"", reading everything from ""last"" stdout (i also tried to close input, output and error stream of every process), one of the pipes created for the execution of the provided commands is not closed/released

lr-x------ 1 user user 64 lug  5 12:47 9 -> 'pipe:[92838]'


Also if I add another ProcessBuilder in the list used by startPipeline like below, 2 of the pipes created are not closed/release

processBuilders.add(new ProcessBuilder(""ls""));
processBuilders.add(new ProcessBuilder(""grep"", ""a""));
processBuilders.add(new ProcessBuilder(""grep"", ""b""));

lr-x------ 1 user user 64 lug  5 13:19 7 -> 'pipe:[102558]'
lr-x------ 1 user user 64 lug  5 13:19 9 -> 'pipe:[102553]'


To summarize the behavior, for every ""ProcessBuilder.startPipeline(processBuilders)"" N pipes are not closed/release where N = processBuilders.size() - 1
;;;","2022-07-07 11:51;rriggs;The process calling pipelineStart() is creating the Unix `pipe`s between the stages.
As each process is launched, the file descriptor is inherited by the child process and 
the child process `dup`s them to the respective stdin/stdout/stderr fd.

Between the launching of each Process, the file descriptor for the read-side of the output of the previous stage is kept open (in the parent process invoking `pipelineStart`.
What's missing is the `close` of that fd after it has been used as the input for the next Process.;;;","2022-07-07 12:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9414
Date: 2022-07-07 19:08:35 +0000;;;","2022-07-21 12:01;dukebot;Changeset: 620c8a04
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2022-07-21 18:57:23 +0000
URL:       https://git.openjdk.org/jdk/commit/620c8a045f92126c2552347b9f369405ab2d6d36
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Forbid raw C-heap allocation functions in hotspot and fix findings,JDK-8289633,5078389,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-07-03 00:57,2022-07-07 01:25,2023-10-01 09:56,2022-07-04 21:30,11,17,19,20,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,"JDK-8214976 introduced a way to forbid functions from being called outside of explicitly allowed contexts. Kim Barrett proposed [1] to use that functionality to forbid raw malloc and friends. That would have prevented JDK-8289477, where on Alpine the muslc sneaked in raw malloc and free calls via C-runtime defined standard macros.

[1] https://mail.openjdk.org/pipermail/hotspot-dev/2022-July/061602.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8214976,JDK-8289477,JDK-8289632,,JDK-8289778,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xprf:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-07-03 03:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9356
Date: 2022-07-03 08:04:09 +0000;;;","2022-07-04 21:30;dukebot;Changeset: 688712f7
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-07-05 04:26:45 +0000
URL:       https://git.openjdk.org/jdk/commit/688712f75cd54caa264494adbe4dfeefc079e1dd
;;;","2022-07-06 09:17;stuefe;Note Backporters: Needs follow-up patch: https://bugs.openjdk.org/browse/JDK-8289778;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gtest/MetaspaceUtilsGtests.java failed with unexpected stats values,JDK-8289620,5078372,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,dcubed,dcubed,2022-07-02 07:51,2022-07-13 23:30,2023-10-01 09:56,2022-07-06 22:33,20,,,,,,20,hotspot,,0,metaspace,tier6,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

gtest/MetaspaceUtilsGtests.java

Here's a snippet from the log file:

----------System.out:(36/2327)*----------
Command line: [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-20+5-193\\windows-x64-open.test\\hotspot\\gtest\\server\\gtestLauncher.exe -jdk c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-20+5-193\\windows-x64-open.jdk\\jdk-20 --gtest_output=xml:test_result.xml --gtest_catch_exceptions=0 --gtest_filter=MetaspaceUtils* -XX:-UseCompressedClassPointers]
[2022-07-02T14:43:50.865805200Z] Gathering output for process 84116
[2022-07-02T14:43:51.008966700Z] Waiting for completion for process 84116
[2022-07-02T14:43:51.008966700Z] Waiting for completion finished for process 84116
Output and diagnostic info for process 84116 was saved into 'pid-84116-output.log'
Note: Google Test filter = MetaspaceUtils*
[==========] Running 6 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 6 tests from MetaspaceUtils
[ RUN      ] MetaspaceUtils.reserved_vm
[       OK ] MetaspaceUtils.reserved_vm (0 ms)
[ RUN      ] MetaspaceUtils.reserved_compressed_class_pointers_vm
[       OK ] MetaspaceUtils.reserved_compressed_class_pointers_vm (0 ms)
[ RUN      ] MetaspaceUtils.committed_vm
[       OK ] MetaspaceUtils.committed_vm (0 ms)
[ RUN      ] MetaspaceUtils.committed_compressed_class_pointers_vm
[       OK ] MetaspaceUtils.committed_compressed_class_pointers_vm (0 ms)
[ RUN      ] MetaspaceUtils.non_compressed_class_pointers_vm
[       OK ] MetaspaceUtils.non_compressed_class_pointers_vm (0 ms)
[ RUN      ] MetaspaceUtils.get_statistics_vm
s\\open\\test\\hotspot\\gtest\\metaspace\\test_metaspaceUtils.cpp(93): error: Expected: (stats.used()) < (stats.committed()), actual: 3932160 vs 3932160
s\\open\\test\\hotspot\\gtest\\metaspace\\test_metaspaceUtils.cpp(93): error: Expected: (stats.used()) < (stats.committed()), actual: 3932160 vs 3932160
[  FAILED  ] MetaspaceUtils.get_statistics_vm (1 ms)
[----------] 6 tests from MetaspaceUtils (113 ms total)

[----------] Global test environment tear-down
[==========] 6 tests from 1 test case ran. (113 ms total)
[  PASSED  ] 5 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] MetaspaceUtils.get_statistics_vm

 1 FAILED TEST
ERROR: RUN_ALL_TESTS() failed. Error 1

[2022-07-02T14:43:51.008966700Z] Waiting for completion for process 84116
[2022-07-02T14:43:51.008966700Z] Waiting for completion finished for process 84116
----------System.err:(10/633)----------
java.lang.AssertionError: gtest execution failed; exit code = 2. the failed tests: [MetaspaceUtils::get_statistics_vm, MetaspaceUtils::get_statistics_vm]
	at GTestWrapper.main(GTestWrapper.java:98)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.AssertionError
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.AssertionError: gtest execution failed; exit code = 2. the failed tests: [MetaspaceUtils::get_statistics_vm, MetaspaceUtils::get_statistics_vm]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2xpnn:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-07-05 11:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9381
Date: 2022-07-05 18:35:34 +0000;;;","2022-07-06 22:33;dukebot;Changeset: 569de453
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-07-07 05:30:10 +0000
URL:       https://git.openjdk.org/jdk/commit/569de453c3267089d04befd756b81470693cf2de
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JVMTI SelfSuspendDisablerTest.java failed with RuntimeException: Test FAILED: Unexpected thread state,JDK-8289619,5078371,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,sspitsyn,dcubed,dcubed,2022-07-02 07:19,2022-07-27 12:18,2023-10-01 09:56,2022-07-02 13:46,19,20,,,,,19,hotspot,,0,intermittent,noreg-self,regression,tier1,tier3,tier4,tier6,tier7,,,,,,,,,,"The following test failed in the JDK19 CI:

serviceability/jvmti/vthread/SelfSuspendDisablerTest/SelfSuspendDisablerTest.java

Here's a snippet from the log file:

#section:main
----------messages:(6/337)----------
command: main --enable-preview -agentlib:SelfSuspendDisablerTest SelfSuspendDisablerTest
reason: User specified action: run main/othervm/native --enable-preview -agentlib:SelfSuspendDisablerTest SelfSuspendDisablerTest 
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
elapsed time (seconds): 500.874
----------configuration:(0/0)----------
----------System.out:(9/371)----------
Agent init started
Agent init finished
Expected platform thread state: 000000 got: 000000
Expected virtual  thread state: 000000 got: 000000
Expected platform thread state: 000005 got: 000005
Expected virtual  thread state: 000005 got: 000005
Expected platform thread state: 100005 got: 100005
Expected platform thread state: 000005 got: 000002
Timeout refired 480 times
----------System.err:(7/551)----------
Exception in thread """" java.lang.RuntimeException: Test FAILED: Unexpected thread state
	at SelfSuspendDisablerTest.testJvmtiThreadState(SelfSuspendDisablerTest.java:67)
	at SelfSuspendDisablerTest.lambda$main$1(SelfSuspendDisablerTest.java:87)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:287)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:174)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:327)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:320)
----------rerun:(34/7634)*----------

This test failure first occurred in jdk-19+30-2154-tier1 and
the fix for the following bug was integrated in jdk-19+30-2153:

JDK-8288703 GetThreadState returns 0 for virtual thread that has terminated

The fix for JDK-8288703 modified this test so it looks like that
fix is the probable cause for this regression. Also since the test
didn't fail in jdk-19+30-2153-tier1, I've labeled it as intermittent.",,,,,,,,,,JDK-8289861,JDK-8291216,JDK-8291379,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288703,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2xpnf:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-07-02 07:21;dcubed;Please take a look at this new failure that started happening after:

JDK-8288703 GetThreadState returns 0 for virtual thread that has terminated;;;","2022-07-02 12:03;sspitsyn;I have posted my PR. Please, do not problem list this test.;;;","2022-07-02 12:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/105
Date: 2022-07-02 19:16:19 +0000;;;","2022-07-02 13:46;dukebot;Changeset: c4dcce4b
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-07-02 20:43:11 +0000
URL:       https://git.openjdk.org/jdk19/commit/c4dcce4bca8808f8f733128f2e2b1dd48a28a322
;;;","2022-07-05 11:28;dcubed;The fix for this bug is integrated in jdk-19+30-2155.;;;","2022-07-07 07:12;dcubed;The fix for this bug is sync'ed from JDK19 in jdk-20+5-232.;;;","2022-07-08 08:25;dcubed;The fix for this bug was sync'ed from JDK19 in jdk-20+5-232.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
MouseLocationOnScreenTest sometimes fails on Mac M1,JDK-8289611,5078363,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,kcr,kcr,2022-07-02 05:27,2022-11-29 06:01,2023-10-01 09:56,2022-07-15 08:06,8,jfx19,,,,,jfx20,javafx,,0,8-bp,noreg-self,sn_122,test_sprint,testbug,,,,,,,,,,,,,"The robot test MouseLocationOnScreenTest consistently fails on Mac M1. On my system, the following error occurs:

MouseLocationOnScreenTest > testMouseLocation FAILED
    java.lang.AssertionError: expected:<657> but was:<656>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:647)
        at org.junit.Assert.assertEquals(Assert.java:633)
        at test.robot.javafx.scene.MouseLocationOnScreenTest.validate(MouseLocationOnScreenTest.java:130)
        at test.robot.javafx.scene.MouseLocationOnScreenTest.edge(MouseLocationOnScreenTest.java:139)
        at test.robot.javafx.scene.MouseLocationOnScreenTest.lambda$testMouseLocation$1(MouseLocationOnScreenTest.java:84)

This test moves the mouse to all locations along the edge of the screen. The problem is that the M1 has a cutout for the camera, which prevents the mouse from being moved into that area.

A probable fix is to use the visual bounds of the screen instead of the bounds.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xpln:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2022-07-13 13:19;angorya;Interestingly, a standalone MouseLocationOnScreenTest does not fail on my Mac M1, notch and everything.
Tried with all screen scaling options available via Settings -> Display; in Eclipse and via gradle CLI.;;;","2022-07-13 13:25;kcr;It doesn't always fail for me, either. I'm not sure what else is in play here. I only see it fail consistently when running the full test suite.;;;","2022-07-13 15:21;angorya;the thing is, it never fails for me.  but it does fail consistently when running the full test suite.
I tried to run gradle CLI with preceding test(s)  - as far as I could tell, had to enable --debug - still passes:

/bin/sh gradlew -PFULL_TEST=true -PUSE_ROBOT=true :systemTests:test --tests JDK8183100Test --tests MouseLocationOnScreenTest
/bin/sh gradlew -PFULL_TEST=true -PUSE_ROBOT=true :systemTests:test --tests DoubleShortcutProcessingTest --tests JDK8183100Test --tests MouseLocationOnScreenTest;;;","2022-07-13 15:50;angorya;1. the test suite auto-hides the dock.  tried with the dock hidden, still cannot reproduce.
2. even though the test suite fails with two monitors, tried running single test in Eclipse in a single monitor configuration, still cannot reproduce.;;;","2022-07-14 06:44;kcr;It must be something that one of the previous tests does that puts it in a state where the test fails. I just now ran a full set of tests on the latest jfx master, and it reproduces the problem. After the failure, if I just run the MouseLocationOnScreenTest it fails consistently for me. I observe that in the state my machine is currently in, the mouse cursor jumps from one side of the notch to the other when I manually move it up there. So this is another indication that some previous test has left the system in a non-default state to cause this. The suggested fix of using the visible bounds of the screen works for me. It's the right thing to do anyway, since we shouldn't expect either drawing into a window or moving the mouse outside that visible region to necessarily work.;;;","2022-07-14 07:13;kcr;And right after I did this, some interaction I had with the system reset the state so that it now will move into the notched area. Very odd. In any case, you might try a full test run from the command line to reproduce it:
;;;","2022-07-14 12:40;angorya;Using visual bounds fixes the test.

It is still unclear why MouseLocationOnScreenTest test passes when running standalone (in Eclipse or on command line), while the full test suite fails.  One possible difference is that the test suite hides the dock (I cannot find where it might be done in build.gradle, perhaps it's a function of native gradlew?), but running gradle on command line should, in theory, produce the same configuration.  A theory that some test run earlier changes the configuration somehow is alarming, as it is unclear what could be changed.

Another commend I'd like to make is that we might consider adding Screen.get[Visual]Shape() to return the actual shape of the (visible) area.  We already have screens with camera cutout, circular screens etc.

And lastly, javadoc for Screen.getVisualBounds could be improved to say explicitly that visual bounds ""exclude"" rather than ""account for"", and refer to Screen.getBounds() rather than Screen.bounds in the last sentence (bounds property is not accessible). 
;;;","2022-07-14 14:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/828
Date: 2022-07-14 20:55:25 +0000;;;","2022-07-15 08:05;dukebot;Changeset: 6d76dea2
Author:    Andy Goryachev <andy.goryachev@oracle.com>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-07-15 15:02:51 +0000
URL:       https://git.openjdk.org/jfx/commit/6d76dea2e207566c85315d7beb6bf4f722ac984f
;;;",,,,,,,,,,,,,,,,,,,,,,,,
CustomSecurityManagerTest fails on Mac M1,JDK-8289606,5078356,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,kcr,kcr,2022-07-01 16:35,2022-07-18 16:29,2023-10-01 09:56,2022-07-13 13:57,8,jfx19,,,,,jfx19,javafx,,0,8-bp,noreg-self,sn_122,test_sprint,testbug,,,,,,,,,,,,,"The system test CustomSecurityManagerTest fails on a Mac M1:

CustomSecurityManagerTest > testFullScreenAfterPermissiveSecurityManager FAILED
    junit.framework.AssertionFailedError: expected:rgba(0,255,0,255) but was:rgba(0,0,0,255)
        at test.robot.testharness.VisualTestBase.assertColorEquals(VisualTestBase.java:183)
        at test.robot.helloworld.CustomSecurityManagerTest.lambda$doTestFullScreenCommon$6(CustomSecurityManagerTest.java:203)

CustomSecurityManagerTest > testFullScreenInitPermissiveSecurityManager FAILED
    junit.framework.AssertionFailedError: expected:rgba(0,255,0,255) but was:rgba(0,0,0,255)
        at test.robot.testharness.VisualTestBase.assertColorEquals(VisualTestBase.java:183)
        at test.robot.helloworld.CustomSecurityManagerTest.lambda$doTestFullScreenCommon$6(CustomSecurityManagerTest.java:203)

CustomSecurityManagerTest > testFullScreenInitNoSecurityManager FAILED
    junit.framework.AssertionFailedError: expected:rgba(0,255,0,255) but was:rgba(0,0,0,255)
        at test.robot.testharness.VisualTestBase.assertColorEquals(VisualTestBase.java:183)
        at test.robot.helloworld.CustomSecurityManagerTest.lambda$doTestFullScreenCommon$6(CustomSecurityManagerTest.java:203)

CustomSecurityManagerTest > testFullScreenAfterNoSecurityManager FAILED
    junit.framework.AssertionFailedError: expected:rgba(0,255,0,255) but was:rgba(0,0,0,255)
        at test.robot.testharness.VisualTestBase.assertColorEquals(VisualTestBase.java:183)
        at test.robot.helloworld.CustomSecurityManagerTest.lambda$doTestFullScreenCommon$6(CustomSecurityManagerTest.java:203)

This is because we are trying to sample too close to the edge, outside the visible screen bounds (it is a full screen test). Since all we care about is whether ot not we went into full screen, the easiest fix is to move away from the edges.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xpk3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2022-07-01 16:36;kcr;Here is a possible fix:

diff --git a/tests/system/src/test/java/test/robot/helloworld/CustomSecurityManagerTest.java b/tests/system/src/test/java/test/robot/helloworld/CustomSecurityManagerTest.java
index 8d26416eda..534e597e43 100644
--- a/tests/system/src/test/java/test/robot/helloworld/CustomSecurityManagerTest.java
+++ b/tests/system/src/test/java/test/robot/helloworld/CustomSecurityManagerTest.java
@@ -195,9 +195,9 @@ public class CustomSecurityManagerTest extends VisualTestBase {
                 assertFalse(propertyState);
             }
             for (int row = 0; row < 2; row++) {
-                int y = row == 0 ? 1 : screenHeight.get() - 2;
+                int y = row == 0 ? 50 : screenHeight.get() - 50 - 1;
                 for (int col = 0; col < 2; col++) {
-                    int x = col == 0 ? 1 : screenWidth.get() - 2;
+                    int x = col == 0 ? 50 : screenWidth.get() - 50 - 1;
                     Color color = getColor(x, y);
                     if (expectedFullScreen) {
                         assertColorEquals(Color.LIME, color, TOLERANCE);
;;;","2022-07-13 12:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/826
Date: 2022-07-13 19:48:21 +0000;;;","2022-07-13 13:57;dukebot;Changeset: eb8e9ef5
Author:    Andy Goryachev <andy.goryachev@oracle.com>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-07-13 20:55:13 +0000
URL:       https://git.openjdk.org/jfx/commit/eb8e9ef5c1d5da024734c0d43dad184e54c28f56
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Robot capture tests fail intermittently on Mac M1,JDK-8289605,5078355,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,kcr,kcr,2022-07-01 16:30,2022-11-29 06:06,2023-10-01 09:56,2022-08-01 13:59,8,jfx19,,,,,jfx20,javafx,,0,8-bp,noreg-self,sn_124,test_sprint,testbug,,,,,,,,,,,,,"When running the full test suite, including robot tests on an M1 MacBook Pro, we get a few failures in screen capture test. It looks like the failures are caused by the cursor being in the area that is being read using the robot screen capture APIs (suggesting that the cursor is captured, which seems odd).

The following tests fail:

RobotTest > testScreenCapture FAILED
RegionBackgroundImageUITest > alignedImage_RoundSpace FAILED
RegionBackgroundImageUITest > unalignedImage_PositionCenterBottom FAILED
RegionBackgroundImageUITest > alignedImage_PositionBottomRightRepeatX FAILED
RegionBackgroundImageUITest > unalignedImage_PositionCenterTop FAILED
RegionBackgroundImageUITest > alignedImage FAILED
RegionBackgroundImageUITest > unalignedImage_RepeatX FAILED
RegionBackgroundImageUITest > alignedImage_PositionCenterLeftRepeatX FAILED
RegionBackgroundImageUITest > alignedImage_PositionCenterRightRepeatX FAILED
RegionBackgroundImageUITest > alignedImage_RepeatX FAILED
RegionBackgroundImageUITest > alignedImage_PositionCenterFiftyPercentRepeatX FAILED
RegionBackgroundImageUITest > alignedImage_PositionCenterRepeatX FAILED
RegionBackgroundImageUITest > unalignedImage_PositionCenterTopRepeatX FAILED
RegionBackgroundImageUITest > unalignedImage_PositionCenterLeftRepeatX FAILED
RegionBackgroundImageUITest > alignedImage_PositionCenterFiftyPercent FAILED
RegionBackgroundImageUITest > alignedImage_PositionCenter FAILED
RegionBackgroundImageUITest > unalignedImage_PositionCenterBottomRepeatX FAILED
RegionBackgroundImageUITest > alignedImage_Round FAILED
RegionBackgroundImageUITest > alignedImage_Space FAILED
RegionBackgroundImageUITest > alignedImage_PositionCenterTopRepeatX FAILED
RegionBackgroundImageUITest > alignedImage_PositionCenterTopRepeatY FAILED
RegionBackgroundImageUITest > alignedImage_PositionCenterBottom FAILED
RegionBackgroundImageUITest > unalignedImage_PositionBottomRightRepeatX FAILED
RegionBackgroundImageUITest > alignedImage_PositionCenterBottomRepeatX FAILED
RegionBackgroundImageUITest > alignedImage_PositionCenterBottomRepeatY FAILED
RegionBackgroundImageUITest > alignedImage_PositionCenterTop FAILED


If I run just the RegionBackgroundImageUITest it passes. If I manually move the mouse out of the way after running a test that laves the cursor in the ""wrong"" place before the RegionBackgroundImageUITest run, then it passes.

That isn't possible for RobotTest, since other tests in the same class move the mouse.

The proposed fix is to call mouseMove(0, 0) in an `@Before` method of all tests that do screen capture. Further, the RobotTest should create it's initial Stage with a Scene so that it doesn't end up at (0,0) which can cause other problems.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297213,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xpjv:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2022-07-02 05:18;kcr;Btw, adding the mouseMove to VisualTestBase::doSetup will fix those tests that extend from that class (this includes RegionBackgroundImageUITest). RobotTest does not extend from VisualTestBase so will need to be fixed separately.;;;","2022-07-29 14:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/854
Date: 2022-07-29 21:11:53 +0000;;;","2022-07-29 14:20;angorya;moving mouse pointer outside of the stage area should fix the problem.;;;","2022-07-29 14:26;prr;have you tried disabling Settings->Accessibility->Display->""Shake mouse pointer to locate"" ?

That makes it bigger and there's a theory that Robot zipping a pointer around sometimes  triggers it
and it installs a s/w cursor which then shows up on screen capture .. ;;;","2022-07-29 14:42;angorya;[~prr]:
Interesting notion.  You mean ""enabled"", right?

I do have this option enabled.  It actually takes a lot of shaking to trigger the large pointer, something that I think robot will not do.  I've never seen large pointer when running robot tests.;;;","2022-07-29 14:49;prr;> Interesting notion. You mean ""enabled"", right? 

No, I mean what I wrote  - disable it - ie change it from the (default) enabled to disabled.

the shaking action is basically the same as the rapid ""move from here to there"" that the robot does.
Since the robot isn't moving it continuously then it probably doesn't display the large pointer but it
may trigger the b/g work which disables the use of the compositing layer that avoids the cursor appearing in the captures.;;;","2022-07-29 14:56;angorya;I see.  
I think the root cause is the mouse pointer being positioned inside the current stage (by the previous test).
Alternatively, one can move the mouse pointer inside the stage while test is running, which causes the failure.

Another possibility is to hide the mouse pointer in @before and re-enabling it in @after, but that looked more fragile to me (need to save the current cursor, what would happen if an exception gets thrown, etc.);;;","2022-07-29 15:22;prr;You can try all of that if you want.
But the pointer *ever* appearing in a screen capture seems to be ""unusual"" so I'm just trying to suggest why it might be happening
and IF that's the reason, then what the solution is. You can test the theory .. ;;;","2022-07-29 15:51;kcr;I just tested this theory on my M1 by disabling that accessibility setting and running the existing code. It didn't make any difference. The fix proposed in the PR does fix the problem (although I have a suggested improvement). Let's continue the discussion on the proposed fix in the PR.
;;;","2022-08-01 13:59;dukebot;Changeset: 08ec9c87
Author:    Andy Goryachev <angorya@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-08-01 20:55:11 +0000
URL:       https://git.openjdk.org/jfx/commit/08ec9c8781a57b49a13a2b7febbe33172ebc1a5a
;;;",,,,,,,,,,,,,,,,,,,,,,,
compiler/vectorapi/VectorLogicalOpIdentityTest.java failed on x86 AVX1 system,JDK-8289604,5078354,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xgong,dcubed,dcubed,2022-07-01 15:13,2022-07-07 01:25,2023-10-01 09:56,2022-07-05 23:17,20,,,,,,20,hotspot,,0,intermittent,noreg-self,oracle-triage-20,tier3,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

compiler/vectorapi/VectorLogicalOpIdentityTest.java

Here's a snippet from the log file:

----------System.err:(47/5875)*----------
WARNING: Using incubator modules: jdk.incubator.vector

Command Line:
/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+5-193/macosx-x64-debug.jdk/jdk-20/fastdebug/bin/java -DReproduce=true -cp /System/Volumes/Data/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S4130/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/96643a06-773a-480b-ab73-caebe4cd758e/runs/c612c19b-0a8c-4cb1-bbba-5bbe8727ea2f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler/classes/2/compiler/vectorapi/VectorLogicalOpIdentityTest.d:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+5-193/src.full/open/test/hotspot/jtreg/compiler/vectorapi:/System/Volumes/Data/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S4130/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/96643a06-773a-480b-ab73-caebe4cd758e/runs/c612c19b-0a8c-4cb1-bbba-5bbe8727ea2f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler/classes/2/test/lib:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+5-193/src.full/open/test/lib:/System/Volumes/Data/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S4130/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/96643a06-773a-480b-ab73-caebe4cd758e/runs/c612c19b-0a8c-4cb1-bbba-5bbe8727ea2f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler/classes/2:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+5-193/src.full/open/test/hotspot/jtreg:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar -Djava.library.path=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+5-193/macosx-x64-debug.test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=6.25 -Djava.io.tmpdir=/System/Volumes/Data/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S4130/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/96643a06-773a-480b-ab73-caebe4cd758e/runs/c612c19b-0a8c-4cb1-bbba-5bbe8727ea2f/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler/tmp -XX:+CreateCoredumpOnCrash -ea -esa -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -Dir.framework.server.port=56658 --add-modules=jdk.incubator.vector -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompileCommand=log,compiler.vectorapi.VectorLogicalOpIdentityTest::* -XX:CompileCommand=option,compiler.vectorapi.VectorLogicalOpIdentityTest::*,bool,PrintIdeal,true -XX:CompileCommand=option,compiler.vectorapi.VectorLogicalOpIdentityTest::*,bool,PrintOptoAssembly,true -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.vectorapi.VectorLogicalOpIdentityTest

One or more @IR rules failed:

Failed IR Rules (1) of Methods (1)
----------------------------------
1) Method ""public static void compiler.vectorapi.VectorLogicalOpIdentityTest.testMaskAndZero()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(StoreVector.*)+(\\\\s){2}===.*)"", "">=1""}, failOn={""(\\\\d+(\\\\s){2}(AndV.*)+(\\\\s){2}===.*)"", ""(\\\\d+(\\\\s){2}(AndVMask.*)+(\\\\s){2}===.*)""}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(StoreVector.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

>>> Check stdout for compilation output of the failed methods


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.throwIfNoSafepointWhilePrinting(IRMatcher.java:91)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.reportFailures(IRMatcher.java:82)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.applyIRRules(IRMatcher.java:54)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.<init>(IRMatcher.java:43)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:729)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:698)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:329)
	at compiler.lib.ir_framework.TestFramework.runWithFlags(TestFramework.java:237)
	at compiler.vectorapi.VectorLogicalOpIdentityTest.main(VectorLogicalOpIdentityTest.java:510)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
----------rerun:(40/8663)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288294,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x_10.15,,,,,"0|i2xpjn:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-07-01 16:00;kvn;[~xgong] Please look. New test from JDK-8288294 failed.;;;","2022-07-01 16:03;kvn;Test failed on old x86 Mac which have only 'AVX1.0'
;;;","2022-07-03 21:02;xgong;Hi [~kvn], thanks for the log! As I don't have the environment to reproduce, could you please show me more details, like:
 
 1) What is the flag value is for ""UseSSE"", ""UseAVX"" ?
 2) Except this case, does other case (i.e ""testMaskAndSame"" or ""testMaskAndMinusOne"") fail with the same log?

I'm not sure whether it is the CPU feature issue or not. More details could be helpful. Thanks so much for your time!;;;","2022-07-04 05:03;chagedorn;ILW = IR matching failure on mac OS, only single test, no workaround = MLH = P4;;;","2022-07-04 19:10;xgong;The root cause is the VectorMask.fromArray/intoArray is not intrinsified when ""UseAVX=1"" for long type vectors which have only two elements. See the match rule supported check for ""VectorLoadMask/VectorStoreMask"": https://github.com/openjdk/jdk/blob/master/src/hotspot/cpu/x86/x86.ad#L1861
I will fix it soon. Thanks for pointing out it!;;;","2022-07-05 00:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9373
Date: 2022-07-05 07:47:58 +0000;;;","2022-07-05 23:17;dukebot;Changeset: fafe8b3f
Author:    Xiaohong Gong <xgong@openjdk.org>
Date:      2022-07-06 06:15:04 +0000
URL:       https://git.openjdk.org/jdk/commit/fafe8b3f8dc1bdb7216f2b02416487a2c5fd9a26
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8170762 had incorrect copyright format,JDK-8289603,5078352,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,kdriver,weijun,weijun,2022-07-01 14:46,2022-07-07 01:21,2023-10-01 09:56,2022-07-01 15:06,,,,,,,20,security-libs,,0,noreg-other,,,,,,,,,,,,,,,,,An extra year is added to the copyright line.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8170762,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xpj7:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,Verified,,"2022-07-01 15:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9352
Date: 2022-07-01 21:47:37 +0000;;;","2022-07-01 15:06;dukebot;Changeset: 44e8c462
Author:    Kevin Driver <kevin.driver@oracle.com>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2022-07-01 22:01:55 +0000
URL:       https://git.openjdk.org/jdk/commit/44e8c462b459a7db530dbc23c5ba923439c419b4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SegmentAllocator::allocateUtf8String(String str) should be clarified for strings containing \0,JDK-8289601,5078350,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,lkuskov,lkuskov,2022-07-01 13:51,2022-07-27 13:09,2023-10-01 09:56,2022-07-08 08:24,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"* Converts a Java string into a UTF-8 encoded, null-terminated C string, storing the result into a memory segment.
String s1 = String.valueOf(""123”);
String s2 = new String(new char[]{0, 0, 0});
seg1 = session.allocateUtf8String(s1);
seg2 = session.allocateUtf8String(s2);
seg1.byteSize() == seg2.byteSize() == 4 
From C point of view seg2 == “\0\0\0\0” isn’t C string it’s a string literal.A null-terminated byte string - is a sequence of zero or more characters followed by a byte with value zero

Also, potentially, it is place to get loss of data integrity

String s1 = new String(new char[]{'a', 'b', 0, 'd'});
segment = session.allocateUtf8String(s1);
String s2 = segment.getUtf8String(0);
s1 != s2 
",,,,,,,,,,JDK-8291403,JDK-8291246,JDK-8290102,,,,,,,,,,,,,,,,,,,JDK-8289693,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xpir:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-07-04 06:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/107
Date: 2022-07-04 13:01:34 +0000;;;","2022-07-08 08:23;dukebot;Changeset: 460d879a
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2022-07-08 15:21:11 +0000
URL:       https://git.openjdk.org/jdk19/commit/460d879a75133fc071802bbc2c742b4232db604e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IllegalArgumentException: Color.rgb's red parameter (-16776961) expects color values 0-255,JDK-8289587,5078330,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jpereda,jpereda,jpereda,2022-07-01 09:44,2022-08-17 07:23,2023-10-01 09:56,2022-07-07 15:24,8u291,jfx11.0.11,jfx17,jfx18,,,jfx19,javafx,,0,regression,,,,,,,,,,,,,,,,,"Calling the WebKit's ChooseColor component from a WebView like:

WebView web = new WebView();
web.getEngine().loadContent(""<head></head><body><input type=\""color\"" value=\""#000000\""></body>"");

fails with the exception:

Exception in thread ""JavaFX Application Thread"" java.lang.IllegalArgumentException: Color.rgb's red parameter (-16776961) expects color values 0-255
        at javafx.graphics@19-internal/javafx.scene.paint.Color.checkRGB(Color.java:232)
        at javafx.graphics@19-internal/javafx.scene.paint.Color.rgb(Color.java:179)
        at javafx.web@19-internal/com.sun.webkit.ColorChooser.fwkCreateAndShowColorChooser(ColorChooser.java:71)
        at javafx.web@19-internal/com.sun.webkit.WebPage.twkProcessMouseEvent(Native Method)
        at javafx.web@19-internal/com.sun.webkit.WebPage.dispatchMouseEvent(WebPage.java:843)
        at javafx.web@19-internal/javafx.scene.web.WebView.processMouseEvent(WebView.java:1098)


It works fine since JavaFX 11 up until 16, starts failing with any JavaFX 17+ and LTS JavaFX 11.0.11+.

This narrows it down to JDK-8259635, where the changes to version 610.2 of WebKit added a few changes in all related Color classes.

In particular, in ColorChooserJava.cpp, the call to fwkCreateAndShowColorChooser changed from using 
color.red(), color.green(), color.blue(), to use the constants color.red, color.green, color.blue, which are defined as:

static constexpr auto red = SRGBA<uint8_t> { 255, 0, 0 };
static constexpr auto green = SRGBA<uint8_t> { 0, 255, 0 };
static constexpr auto blue = SRGBA<uint8_t> { 0, 0, 255 };
    
Therefore, not only the conversion from SRGBA to int passes always the same three values:
r = -16776961, g = -16711936, b = -65536
to fwkCreateAndShowColorChooser in ColorChooser.java, no matter the ""value"" set in the html input, but also it throws the above exception, as these three values are out of range for Color.rgb(r, g, b);
",,,,,,,,,,JDK-8292552,JDK-8290430,JDK-8292183,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8u311,,,,,,,"0|i2xpeb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-07-05 12:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/809
Date: 2022-07-05 19:23:13 +0000;;;","2022-07-07 15:24;dukebot;Changeset: fc6a6023
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2022-07-07 22:23:11 +0000
URL:       https://git.openjdk.org/jfx/commit/fc6a60234b0feec80b05257cc93407f651805303
;;;","2022-08-09 05:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/74
Date: 2022-08-09 12:16:43 +0000;;;","2022-08-17 06:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/106
Date: 2022-08-17 13:34:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
14.11.1: Typo in grammar for guarded pattern,JDK-8289583,5078324,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbierman,gbierman,gbierman,2022-07-01 08:30,2022-07-26 23:35,2023-10-01 09:56,2022-07-01 14:59,19,,,,,,19,specification,,0,noreg-doc,,,,,,,,,,,,,,,,,"The grammar for a guarded pattern is given as:

Pattern { Guard }

whereas it should clearly be

Pattern [ Guard ]

(The rest of the specification talks of *the* guard.)",,,,,,,,,,JDK-8291174,JDK-8289621,JDK-8291079,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xpcz:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7441ef8d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SegmentAllocator:allocateUtf8String(String str) default behavior mismatch to spec,JDK-8289570,5078306,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,kganapureddy,kganapureddy,2022-07-01 00:34,2022-07-27 12:08,2023-10-01 09:56,2022-07-01 14:48,19,,,,,,19,core-libs,,0,conformance,,,,,,,,,,,,,,,,,"As per the spec of 
https://download.java.net/java/early_access/jdk19/docs/api/java.base/java/lang/foreign/SegmentAllocator.html#allocateUtf8String(java.lang.String)

the default implementation for this method copies the contents of the provided Java string into a new memory segment obtained by calling this.allocate(str.length() + 1).

Expectations :

invoking allocateUtf8String(String str) shall delegate a call to allocate(long)

Actual :

The method allocate(long) not invoked, instead allocate(long, long) is invoked.
",,,,,,,,,,JDK-8291212,JDK-8291375,JDK-8289626,,,,,,,,,,,,,,,,,,,,,,JDK-8289188,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xp8z:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-07-01 04:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/99
Date: 2022-07-01 11:28:10 +0000;;;","2022-07-01 14:48;dukebot;Changeset: 8e01ffb3
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-07-01 21:46:07 +0000
URL:       https://git.openjdk.org/jdk19/commit/8e01ffb3a7914a67a66ce284029f19cdf845b626
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[test] java/lang/ProcessBuilder/Basic.java fails on Alpine/musl,JDK-8289569,5078305,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-07-01 00:27,2022-08-18 17:45,2023-10-01 09:56,2022-07-04 01:58,17,19,20,,,,20,core-libs,,0,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,"Currently the ProcessBuilder/Basic.java test fails on musl.
We run into
>'java.io.IOException: Cannot run program ""./prog"": error=8, Exec format error
	at java.base/java.lang.ProcessBuilder.start(ProcessBuilder.java:1143)
	at java.base/java.lang.ProcessBuilder.start(ProcessBuilder.java:1073)
	at Basic.run(Basic.java:2771)
	at Basic$JavaChild.main(Basic.java:498)
Caused by: java.io.IOException: error=8, Exec format error
	at java.base/java.lang.ProcessImpl.forkAndExec(Native Method)
	at java.base/java.lang.ProcessImpl.<init>(ProcessImpl.java:319)
	at java.base/java.lang.ProcessImpl.start(ProcessImpl.java:249)
	at java.base/java.lang.ProcessBuilder.start(ProcessBuilder.java:1110)
	... 3 more

This seems to be a musl/Alpine specific issue with some process execs.
So adding !vm.musl  to the test might make sense.",,,,,,,,,,JDK-8289696,JDK-8291219,JDK-8292642,JDK-8291382,JDK-8289888,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux_alpine,,,,,"0|i2xp8r:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-07-04 00:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9361
Date: 2022-07-04 07:05:03 +0000;;;","2022-07-04 01:58;dukebot;Changeset: a8edd7a1
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-07-04 08:56:35 +0000
URL:       https://git.openjdk.org/jdk/commit/a8edd7a12f955fe843c7c9ad4273e9c653a80c5a
;;;","2022-07-04 03:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/106
Date: 2022-07-04 10:39:20 +0000;;;","2022-07-05 04:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/527
Date: 2022-07-05 11:02:20 +0000;;;","2022-07-05 04:12;mbaesken;jdk17u backport request
I would like to have the fix in jdk17u-dev as well because the issue is present there too. Patch does not apply cleanly because of differences in the stride.  The patch is low risk (only test change). PR: https://github.com/openjdk/jdk17u-dev/pull/527;;;","2022-07-06 14:07;dukebot;Changeset: 0dff3276
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-07-04 14:45:48 +0000
URL:       https://git.openjdk.org/jdk/commit/0dff3276e863fcbf496fe6decd3335cd43cab21f
;;;","2022-08-13 08:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1324
Date: 2022-08-13 15:07:40 +0000;;;","2022-08-17 17:08;phh;Fix Request (11u).

On behalf of Josh Cao <joshcao@amazon.com>

Clean net of context differences, test-only backport from 17u, test passes, low risk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Change bugs.java.com and bugreport.java.com URL's to https,JDK-8289562,5078298,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcherian,fmatte,fmatte,2022-06-30 21:10,2023-02-15 05:58,2023-10-01 09:56,2022-08-19 01:59,11,17,19,20,8,,20,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,"There are references in jdk source, still pointing to http URL's. This need to be updated to https.
Example - 
An exception has occurred in the compiler (1.8.0_351-internal). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program and the following diagnostic in your report. Thank you.",,,,,,,,,,JDK-8295479,JDK-8294893,JDK-8302578,JDK-8294908,JDK-8292653,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xp77:",9223372036854775807,b12,,,,,,,,,,,"2022-08-01 06:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9445
Date: 2022-07-11 08:04:20 +0000;;;","2022-08-19 01:59;dukebot;Changeset: 1f484dae
Author:    Joe <joe.cherian@oracle.com>
Committer: Fairoz Matte <fmatte@openjdk.org>
Date:      2022-08-19 08:55:58 +0000
URL:       https://git.openjdk.org/jdk/commit/1f484dae4efaa60cf18a3d4df947c05f1497bd5b
;;;","2022-10-16 23:54;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only changing text output.
I had to resolve 3 files, and skipped 4 not in 17.
SAP nightly testing passed.;;;","2022-10-17 00:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/801
Date: 2022-10-17 06:53:21 +0000;;;","2022-10-18 00:52;mbaesken;Should we adjust the remaining http://*java.com  in the test sources as well?  Examples :

grep -nH -r ""java\.com""   *  | grep ""http:""
hotspot/jtreg/runtime/ErrorHandling/TestCrashOnOutOfMemoryError.java:83:           #   http://bugreport.java.com/bugreport/crash.jsp
jaxp/javax/xml/jaxp/unittest/catalog/catalog.xml:23:    <delegateSystem systemIdStartString=""http://java.com/xml/catalog/dtd/"" catalog=""files/delegatecatalog.xml""/>
jaxp/javax/xml/jaxp/unittest/catalog/catalog_uri.xml:15:    <delegateURI uriStartString=""http://java.com/xml/catalog/dtd/"" catalog=""files/delegatecatalog_uri.xml""/>
jaxp/javax/xml/jaxp/unittest/catalog/delegatepublic.xml:3:     ""http://java.com/xml/catalog/dtd/delegatepublic.dtd"">
jaxp/javax/xml/jaxp/unittest/catalog/delegatesystem.xml:3:     ""http://java.com/xml/catalog/dtd/delegatesystem.dtd"">
jaxp/javax/xml/jaxp/unittest/catalog/delegateuri.xml:3:     ""http://java.com/xml/catalog/dtd/delegateuri.dtd"">
jaxp/javax/xml/jaxp/unittest/catalog/files/delegatecatalog.xml:23:    <system systemId=""http://java.com/xml/catalog/dtd/delegatesystem.dtd"" uri=""delegatesystem.dtd""/>
jaxp/javax/xml/jaxp/unittest/catalog/files/delegatecatalog_uri.xml:5:    <uri name=""http://java.com/xml/catalog/dtd/delegateuri.dtd"" uri=""delegateuri.dtd""/>
jaxp/javax/xml/jaxp/unittest/sax/NSSupportTest.java:49:        nssupport.declarePrefix("""", ""http://www.java.com"");
jaxp/javax/xml/jaxp/unittest/sax/NSSupportTest.java:59:        Assert.assertTrue(parts[0].equals(""http://www.java.com""));
jaxp/javax/xml/jaxp/unittest/sax/toys.xml:20:<ns1:toys xmlns:ns1=""http://ns1.java.com"">
jaxp/javax/xml/jaxp/unittest/sax/toys_error.xml:20:<ns1:toys xmlns:ns1=""http://ns1.java.com"">
jaxp/javax/xml/jaxp/unittest/stream/StreamReaderDelegateTest.java:57:     * attr2=""defaultAttr2"" attr3=""defaultAttr3"" xmlns:ns1=""http://ns1.java.com""
jaxp/javax/xml/jaxp/unittest/stream/StreamReaderDelegateTest.java:58:     * xmlns:ns2=""http://ns2.java.com""> <!--description--> content text
jaxp/javax/xml/jaxp/unittest/stream/StreamReaderDelegateTest.java:83:                        Assert.assertTrue(delegate.getAttributeValue(""http://ns1.java.com"", ""attr1"").equals(""ns1Attr1""));
jaxp/javax/xml/jaxp/unittest/stream/StreamReaderDelegateTest.java:84:                        Assert.assertTrue(delegate.getAttributeValue(""http://ns2.java.com"", ""attr1"").equals(""ns2Attr1""));
jaxp/javax/xml/jaxp/unittest/stream/StreamReaderDelegateTest.java:90:                        Assert.assertTrue(delegate.getAttributeNamespace(1).equals(""http://ns1.java.com""));
jaxp/javax/xml/jaxp/unittest/stream/StreamReaderDelegateTest.java:135:     * <ns1:foo xmlns:ns=""http://ns1.java.com"" xmlns:ns1=""http://ns1.java.com""
jaxp/javax/xml/jaxp/unittest/stream/StreamReaderDelegateTest.java:136:     * xmlns:ns2=""http://ns2.java.com"" > <!--description-->content text
jaxp/javax/xml/jaxp/unittest/stream/StreamReaderDelegateTest.java:158:                        Assert.assertTrue(delegate.getNamespaceURI().equals(""http://ns1.java.com""));
jaxp/javax/xml/jaxp/unittest/stream/StreamReaderDelegateTest.java:159:                        Assert.assertTrue(delegate.getNamespaceURI(2).equals(""http://ns2.java.com""));
jaxp/javax/xml/jaxp/unittest/stream/StreamReaderDelegateTest.java:160:                        Assert.assertTrue(delegate.getNamespaceURI(""ns"").equals(""http://ns1.java.com""));
jaxp/javax/xml/jaxp/unittest/stream/StreamReaderDelegateTest.java:166:                        Iterator prefixes = nsCtx.getPrefixes(""http://ns1.java.com"");
jaxp/javax/xml/jaxp/unittest/stream/StreamReaderDelegateTest.java:203:     * xmlns:ns1=""http://ns1.java.com"" xmlns:ns2=""http://ns2.java.com"">
jaxp/javax/xml/jaxp/unittest/stream/testfile1.xml:2:<ns1:foo  attr1=""defaultAttr1"" ns1:attr1=""ns1Attr1"" ns2:attr1=""ns2Attr1"" attr2=""defaultAttr2"" attr3=""defaultAttr3"" xmlns:ns1=""http://ns1.java.com""  xmlns:ns2=""http://ns2.java.com"">
jaxp/javax/xml/jaxp/unittest/stream/testfile2.xml:2:<ns1:foo xmlns:ns=""http://ns1.java.com"" xmlns:ns1=""http://ns1.java.com""  xmlns:ns2=""http://ns2.java.com"" >
jaxp/javax/xml/jaxp/unittest/stream/testfile3.xml:2:<ns1:foo  xmlns:ns1=""http://ns1.java.com""  xmlns:ns2=""http://ns2.java.com"">                  
jaxp/javax/xml/jaxp/unittest/stream/testfile4.xml:2:<ns1:foo  attr1=""defaultAttr1"" xmlns:ns1=""http://ns1.java.com""  xmlns:ns2=""http://ns2.java.com"">
jdk/javax/xml/crypto/dsig/SecureValidationPolicy.java:40:            ""http://java.com"", ""https://java.com"");;;;","2023-02-13 02:45;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle from head.
No risk, only changing text output.
I had to resolve 6 files, and skipped 4 not in 11.  I should have backported the 17 version,
this would have caused less conflicts.
SAP nighlty testing passed.;;;","2023-02-13 02:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1720
Date: 2023-02-13 10:43:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"java/lang/instrument/NativeMethodPrefixAgent.java fails with ""ERROR: Injection failure: java.lang.UnsupportedOperationException: Records requires ASM8""",JDK-8289561,5078296,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,dcubed,dcubed,2022-06-30 19:29,2022-10-12 23:09,2023-10-01 09:56,2022-10-07 10:16,19,,,,,,20,core-svc,,0,intermittent,noreg-self,tier6,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

java/lang/instrument/NativeMethodPrefixAgent.java

Here's a snippet from the log file:

----------System.err:(318/26936)----------
ERROR: Injection failure: java.lang.UnsupportedOperationException: Records requires ASM8
java.lang.UnsupportedOperationException: Records requires ASM8
	at java.base/jdk.internal.org.objectweb.asm.ClassVisitor.visit(ClassVisitor.java:139)
	at asmlib.Instrumentor$2.visit(Instrumentor.java:134)
	at java.base/jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:601)
	at java.base/jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:456)
	at asmlib.Instrumentor.apply(Instrumentor.java:189)
	at NativeMethodPrefixAgent$Tr.transform(NativeMethodPrefixAgent.java:78)
	at java.instrument/java.lang.instrument.ClassFileTransformer.transform(ClassFileTransformer.java:244)
	at java.instrument/sun.instrument.TransformerManager.transform(TransformerManager.java:188)
	at java.instrument/sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:541)
	at java.base/jdk.internal.misc.ThreadTracker.begin(ThreadTracker.java:70)
	at java.base/java.util.jar.JarFile.beginInit(JarFile.java:1042)
	at java.base/java.util.jar.JarFile.ensureInitialization(JarFile.java:1056)
	at java.base/java.util.jar.JavaUtilJarAccessImpl.ensureInitialization(JavaUtilJarAccessImpl.java:72)
	at java.base/jdk.internal.loader.URLClassPath$JarLoader$2.getManifest(URLClassPath.java:883)
	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:848)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:760)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:495)
	at java.base/java.lang.Class.forName(Class.java:474)
	at java.base/sun.launcher.LauncherHelper.loadMainClass(LauncherHelper.java:790)
	at java.base/sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:685)
Returning bad class file, to cause test failure
ERROR: Injection failure: java.lang.UnsupportedOperationException: Records requires ASM8
java.lang.UnsupportedOperationException: Records requires ASM8
	at java.base/jdk.internal.org.objectweb.asm.ClassVisitor.visit(ClassVisitor.java:139)
	at asmlib.Instrumentor$2.visit(Instrumentor.java:134)
	at java.base/jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:601)
	at java.base/jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:456)
	at asmlib.Instrumentor.apply(Instrumentor.java:189)
	at NativeMethodPrefixAgent$Tr.transform(NativeMethodPrefixAgent.java:78)
	at java.instrument/java.lang.instrument.ClassFileTransformer.transform(ClassFileTransformer.java:244)
	at java.instrument/sun.instrument.TransformerManager.transform(TransformerManager.java:188)
	at java.instrument/sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:541)
	at java.base/jdk.internal.misc.ThreadTracker.begin(ThreadTracker.java:70)
	at java.base/java.util.jar.JarFile.beginInit(JarFile.java:1042)
	at java.base/java.util.jar.JarFile.ensureInitialization(JarFile.java:1056)
	at java.base/java.util.jar.JavaUtilJarAccessImpl.ensureInitialization(JavaUtilJarAccessImpl.java:72)
	at java.base/jdk.internal.loader.URLClassPath$JarLoader$2.getManifest(URLClassPath.java:883)
	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:848)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:760)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:495)
	at java.base/java.lang.Class.forName(Class.java:474)
	at java.base/sun.launcher.LauncherHelper.loadMainClass(LauncherHelper.java:790)
	at java.base/sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:685)
Returning bad class file, to cause test failure
ERROR: Injection failure: java.lang.ArrayIndexOutOfBoundsException: Index 6 out of bounds for length 0
java.lang.ArrayIndexOutOfBoundsException: Index 6 out of bounds for length 0
	at java.base/jdk.internal.org.objectweb.asm.ClassReader.readShort(ClassReader.java:3640)
	at java.base/jdk.internal.org.objectweb.asm.ClassReader.<init>(ClassReader.java:229)
	at java.base/jdk.internal.org.objectweb.asm.ClassReader.<init>(ClassReader.java:212)
	at java.base/jdk.internal.org.objectweb.asm.ClassReader.<init>(ClassReader.java:198)
	at asmlib.Instrumentor.<init>(Instrumentor.java:99)
	at asmlib.Instrumentor.instrFor(Instrumentor.java:89)
	at NativeMethodPrefixAgent$Tr.transform(NativeMethodPrefixAgent.java:70)
	at java.instrument/java.lang.instrument.ClassFileTransformer.transform(ClassFileTransformer.java:244)
	at java.instrument/sun.instrument.TransformerManager.transform(TransformerManager.java:188)
	at java.instrument/sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:541)
	at java.base/jdk.internal.misc.ThreadTracker.begin(ThreadTracker.java:70)
	at java.base/java.util.jar.JarFile.beginInit(JarFile.java:1042)
	at java.base/java.util.jar.JarFile.ensureInitialization(JarFile.java:1056)
	at java.base/java.util.jar.JavaUtilJarAccessImpl.ensureInitialization(JavaUtilJarAccessImpl.java:72)
	at java.base/jdk.internal.loader.URLClassPath$JarLoader$2.getManifest(URLClassPath.java:883)
	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:848)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:760)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:495)
	at java.base/java.lang.Class.forName(Class.java:474)
	at java.base/sun.launcher.LauncherHelper.loadMainClass(LauncherHelper.java:790)
	at java.base/sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:685)
Returning bad class file, to cause test failure
start
Tracked #2: getVersion0
Tracked #1: wrapped_tr2_getVersion0
Tracked #0: wrapped_tr1_wrapped_tr2_getVersion0
Tracked #2: initOptionalSupportFields
Tracked #1: wrapped_tr2_initOptionalSupportFields
Tracked #0: wrapped_tr1_wrapped_tr2_initOptionalSupportFields
Tracked #2: getNativeMap
Tracked #1: wrapped_tr2_getNativeMap
Tracked #0: wrapped_tr1_wrapped_tr2_getNativeMap
ERROR: Injection failure: java.lang.UnsupportedOperationException: PermittedSubclasses requires ASM9
java.lang.UnsupportedOperationException: PermittedSubclasses requires ASM9
	at java.base/jdk.internal.org.objectweb.asm.ClassVisitor.visitPermittedSubclass(ClassVisitor.java:293)
	at java.base/jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:738)
	at java.base/jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:456)
	at asmlib.Instrumentor.apply(Instrumentor.java:189)
	at NativeMethodPrefixAgent$Tr.transform(NativeMethodPrefixAgent.java:78)
	at java.instrument/java.lang.instrument.ClassFileTransformer.transform(ClassFileTransformer.java:244)
	at java.instrument/sun.instrument.TransformerManager.transform(TransformerManager.java:188)
	at java.instrument/sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:541)
	at java.base/java.nio.DirectByteBuffer.asIntBuffer(DirectByteBuffer.java:762)
	at java.base/jdk.internal.jimage.BasicImageReader.intBuffer(BasicImageReader.java:220)
	at java.base/jdk.internal.jimage.BasicImageReader.<init>(BasicImageReader.java:154)
	at java.base/jdk.internal.jimage.ImageReader$SharedImageReader.<init>(ImageReader.java:229)
	at java.base/jdk.internal.jimage.ImageReader$SharedImageReader.open(ImageReader.java:243)
	at java.base/jdk.internal.jimage.ImageReader.open(ImageReader.java:67)
	at java.base/jdk.internal.jimage.ImageReader.open(ImageReader.java:71)
	at java.base/jdk.internal.jimage.ImageReaderFactory$1.apply(ImageReaderFactory.java:70)
	at java.base/jdk.internal.jimage.ImageReaderFactory$1.apply(ImageReaderFactory.java:67)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
	at java.base/jdk.internal.jimage.ImageReaderFactory.get(ImageReaderFactory.java:61)
	at java.base/jdk.internal.jimage.ImageReaderFactory.getImageReader(ImageReaderFactory.java:85)
	at java.base/jdk.internal.module.SystemModuleFinders$SystemImage.<clinit>(SystemModuleFinders.java:385)
	at java.base/jdk.internal.module.SystemModuleFinders$SystemModuleReader.containsImageLocation(SystemModuleFinders.java:446)
	at java.base/jdk.internal.module.SystemModuleFinders$SystemModuleReader.find(SystemModuleFinders.java:457)
	at java.base/jdk.internal.loader.BuiltinClassLoader$2.run(BuiltinClassLoader.java:464)
	at java.base/jdk.internal.loader.BuiltinClassLoader$2.run(BuiltinClassLoader.java:459)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findMiscResource(BuiltinClassLoader.java:458)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findResources(BuiltinClassLoader.java:385)
	at java.base/jdk.internal.loader.BootLoader.findResources(BootLoader.java:190)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.nextProviderClass(ServiceLoader.java:1198)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNextService(ServiceLoader.java:1228)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNext(ServiceLoader.java:1273)
	at java.base/java.util.ServiceLoader$2.hasNext(ServiceLoader.java:1309)
	at java.base/java.util.ServiceLoader$3.hasNext(ServiceLoader.java:1393)
	at java.management/java.lang.management.ManagementFactory$PlatformMBeanFinder$1.run(ManagementFactory.java:933)
	at java.management/java.lang.management.ManagementFactory$PlatformMBeanFinder$1.run(ManagementFactory.java:929)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:460)
	at java.management/java.lang.management.ManagementFactory$PlatformMBeanFinder.<clinit>(ManagementFactory.java:928)
	at java.management/java.lang.management.ManagementFactory.getPlatformMXBean(ManagementFactory.java:688)
	at java.management/java.lang.management.ManagementFactory.getRuntimeMXBean(ManagementFactory.java:366)
	at NativeMethodPrefixApp.run(NativeMethodPrefixApp.java:48)
	at NativeMethodPrefixApp.main(NativeMethodPrefixApp.java:40)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)
Returning bad class file, to cause test failure
ERROR: Injection failure: java.lang.UnsupportedOperationException: PermittedSubclasses requires ASM9
java.lang.UnsupportedOperationException: PermittedSubclasses requires ASM9
	at java.base/jdk.internal.org.objectweb.asm.ClassVisitor.visitPermittedSubclass(ClassVisitor.java:293)
	at java.base/jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:738)
	at java.base/jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:456)
	at asmlib.Instrumentor.apply(Instrumentor.java:189)
	at NativeMethodPrefixAgent$Tr.transform(NativeMethodPrefixAgent.java:78)
	at java.instrument/java.lang.instrument.ClassFileTransformer.transform(ClassFileTransformer.java:244)
	at java.instrument/sun.instrument.TransformerManager.transform(TransformerManager.java:188)
	at java.instrument/sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:541)
	at java.base/java.nio.DirectByteBuffer.asIntBuffer(DirectByteBuffer.java:762)
	at java.base/jdk.internal.jimage.BasicImageReader.intBuffer(BasicImageReader.java:220)
	at java.base/jdk.internal.jimage.BasicImageReader.<init>(BasicImageReader.java:154)
	at java.base/jdk.internal.jimage.ImageReader$SharedImageReader.<init>(ImageReader.java:229)
	at java.base/jdk.internal.jimage.ImageReader$SharedImageReader.open(ImageReader.java:243)
	at java.base/jdk.internal.jimage.ImageReader.open(ImageReader.java:67)
	at java.base/jdk.internal.jimage.ImageReader.open(ImageReader.java:71)
	at java.base/jdk.internal.jimage.ImageReaderFactory$1.apply(ImageReaderFactory.java:70)
	at java.base/jdk.internal.jimage.ImageReaderFactory$1.apply(ImageReaderFactory.java:67)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
	at java.base/jdk.internal.jimage.ImageReaderFactory.get(ImageReaderFactory.java:61)
	at java.base/jdk.internal.jimage.ImageReaderFactory.getImageReader(ImageReaderFactory.java:85)
	at java.base/jdk.internal.module.SystemModuleFinders$SystemImage.<clinit>(SystemModuleFinders.java:385)
	at java.base/jdk.internal.module.SystemModuleFinders$SystemModuleReader.containsImageLocation(SystemModuleFinders.java:446)
	at java.base/jdk.internal.module.SystemModuleFinders$SystemModuleReader.find(SystemModuleFinders.java:457)
	at java.base/jdk.internal.loader.BuiltinClassLoader$2.run(BuiltinClassLoader.java:464)
	at java.base/jdk.internal.loader.BuiltinClassLoader$2.run(BuiltinClassLoader.java:459)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findMiscResource(BuiltinClassLoader.java:458)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findResources(BuiltinClassLoader.java:385)
	at java.base/jdk.internal.loader.BootLoader.findResources(BootLoader.java:190)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.nextProviderClass(ServiceLoader.java:1198)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNextService(ServiceLoader.java:1228)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNext(ServiceLoader.java:1273)
	at java.base/java.util.ServiceLoader$2.hasNext(ServiceLoader.java:1309)
	at java.base/java.util.ServiceLoader$3.hasNext(ServiceLoader.java:1393)
	at java.management/java.lang.management.ManagementFactory$PlatformMBeanFinder$1.run(ManagementFactory.java:933)
	at java.management/java.lang.management.ManagementFactory$PlatformMBeanFinder$1.run(ManagementFactory.java:929)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:460)
	at java.management/java.lang.management.ManagementFactory$PlatformMBeanFinder.<clinit>(ManagementFactory.java:928)
	at java.management/java.lang.management.ManagementFactory.getPlatformMXBean(ManagementFactory.java:688)
	at java.management/java.lang.management.ManagementFactory.getRuntimeMXBean(ManagementFactory.java:366)
	at NativeMethodPrefixApp.run(NativeMethodPrefixApp.java:48)
	at NativeMethodPrefixApp.main(NativeMethodPrefixApp.java:40)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)
Returning bad class file, to cause test failure
ERROR: Injection failure: java.lang.ArrayIndexOutOfBoundsException
java.lang.ArrayIndexOutOfBoundsException
Returning bad class file, to cause test failure
ERROR: Injection failure: java.lang.UnsupportedOperationException: PermittedSubclasses requires ASM9
java.lang.UnsupportedOperationException: PermittedSubclasses requires ASM9
	at java.base/jdk.internal.org.objectweb.asm.ClassVisitor.visitPermittedSubclass(ClassVisitor.java:293)
	at java.base/jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:738)
	at java.base/jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:456)
	at asmlib.Instrumentor.apply(Instrumentor.java:189)
	at NativeMethodPrefixAgent$Tr.transform(NativeMethodPrefixAgent.java:78)
	at java.instrument/java.lang.instrument.ClassFileTransformer.transform(ClassFileTransformer.java:244)
	at java.instrument/sun.instrument.TransformerManager.transform(TransformerManager.java:188)
	at java.instrument/sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:541)
	at java.base/java.nio.DirectByteBuffer.asIntBuffer(DirectByteBuffer.java:762)
	at java.base/jdk.internal.jimage.BasicImageReader.intBuffer(BasicImageReader.java:220)
	at java.base/jdk.internal.jimage.BasicImageReader.<init>(BasicImageReader.java:154)
	at java.base/jdk.internal.jimage.ImageReader$SharedImageReader.<init>(ImageReader.java:229)
	at java.base/jdk.internal.jimage.ImageReader$SharedImageReader.open(ImageReader.java:243)
	at java.base/jdk.internal.jimage.ImageReader.open(ImageReader.java:67)
	at java.base/jdk.internal.jimage.ImageReader.open(ImageReader.java:71)
	at java.base/jdk.internal.jimage.ImageReaderFactory$1.apply(ImageReaderFactory.java:70)
	at java.base/jdk.internal.jimage.ImageReaderFactory$1.apply(ImageReaderFactory.java:67)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
	at java.base/jdk.internal.jimage.ImageReaderFactory.get(ImageReaderFactory.java:61)
	at java.base/jdk.internal.jimage.ImageReaderFactory.getImageReader(ImageReaderFactory.java:85)
	at java.base/jdk.internal.module.SystemModuleFinders$SystemImage.<clinit>(SystemModuleFinders.java:385)
	at java.base/jdk.internal.module.SystemModuleFinders$SystemModuleReader.containsImageLocation(SystemModuleFinders.java:446)
	at java.base/jdk.internal.module.SystemModuleFinders$SystemModuleReader.find(SystemModuleFinders.java:457)
	at java.base/jdk.internal.loader.BuiltinClassLoader$2.run(BuiltinClassLoader.java:464)
	at java.base/jdk.internal.loader.BuiltinClassLoader$2.run(BuiltinClassLoader.java:459)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findMiscResource(BuiltinClassLoader.java:458)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findResources(BuiltinClassLoader.java:385)
	at java.base/jdk.internal.loader.BootLoader.findResources(BootLoader.java:190)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.nextProviderClass(ServiceLoader.java:1198)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNextService(ServiceLoader.java:1228)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNext(ServiceLoader.java:1273)
	at java.base/java.util.ServiceLoader$2.hasNext(ServiceLoader.java:1309)
	at java.base/java.util.ServiceLoader$3.hasNext(ServiceLoader.java:1393)
	at java.management/java.lang.management.ManagementFactory$PlatformMBeanFinder$1.run(ManagementFactory.java:933)
	at java.management/java.lang.management.ManagementFactory$PlatformMBeanFinder$1.run(ManagementFactory.java:929)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:460)
	at java.management/java.lang.management.ManagementFactory$PlatformMBeanFinder.<clinit>(ManagementFactory.java:928)
	at java.management/java.lang.management.ManagementFactory.getPlatformMXBean(ManagementFactory.java:688)
	at java.management/java.lang.management.ManagementFactory.getRuntimeMXBean(ManagementFactory.java:366)
	at NativeMethodPrefixApp.run(NativeMethodPrefixApp.java:48)
	at NativeMethodPrefixApp.main(NativeMethodPrefixApp.java:40)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)
Returning bad class file, to cause test failure
ERROR: Injection failure: java.lang.UnsupportedOperationException: PermittedSubclasses requires ASM9
java.lang.UnsupportedOperationException: PermittedSubclasses requires ASM9
	at java.base/jdk.internal.org.objectweb.asm.ClassVisitor.visitPermittedSubclass(ClassVisitor.java:293)
	at java.base/jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:738)
	at java.base/jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:456)
	at asmlib.Instrumentor.apply(Instrumentor.java:189)
	at NativeMethodPrefixAgent$Tr.transform(NativeMethodPrefixAgent.java:78)
	at java.instrument/java.lang.instrument.ClassFileTransformer.transform(ClassFileTransformer.java:244)
	at java.instrument/sun.instrument.TransformerManager.transform(TransformerManager.java:188)
	at java.instrument/sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:541)
	at java.base/java.nio.DirectByteBuffer.asIntBuffer(DirectByteBuffer.java:762)
	at java.base/jdk.internal.jimage.BasicImageReader.intBuffer(BasicImageReader.java:220)
	at java.base/jdk.internal.jimage.BasicImageReader.<init>(BasicImageReader.java:154)
	at java.base/jdk.internal.jimage.ImageReader$SharedImageReader.<init>(ImageReader.java:229)
	at java.base/jdk.internal.jimage.ImageReader$SharedImageReader.open(ImageReader.java:243)
	at java.base/jdk.internal.jimage.ImageReader.open(ImageReader.java:67)
	at java.base/jdk.internal.jimage.ImageReader.open(ImageReader.java:71)
	at java.base/jdk.internal.jimage.ImageReaderFactory$1.apply(ImageReaderFactory.java:70)
	at java.base/jdk.internal.jimage.ImageReaderFactory$1.apply(ImageReaderFactory.java:67)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
	at java.base/jdk.internal.jimage.ImageReaderFactory.get(ImageReaderFactory.java:61)
	at java.base/jdk.internal.jimage.ImageReaderFactory.getImageReader(ImageReaderFactory.java:85)
	at java.base/jdk.internal.module.SystemModuleFinders$SystemImage.<clinit>(SystemModuleFinders.java:385)
	at java.base/jdk.internal.module.SystemModuleFinders$SystemModuleReader.containsImageLocation(SystemModuleFinders.java:446)
	at java.base/jdk.internal.module.SystemModuleFinders$SystemModuleReader.find(SystemModuleFinders.java:457)
	at java.base/jdk.internal.loader.BuiltinClassLoader$2.run(BuiltinClassLoader.java:464)
	at java.base/jdk.internal.loader.BuiltinClassLoader$2.run(BuiltinClassLoader.java:459)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findMiscResource(BuiltinClassLoader.java:458)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findResources(BuiltinClassLoader.java:385)
	at java.base/jdk.internal.loader.BootLoader.findResources(BootLoader.java:190)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.nextProviderClass(ServiceLoader.java:1198)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNextService(ServiceLoader.java:1228)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNext(ServiceLoader.java:1273)
	at java.base/java.util.ServiceLoader$2.hasNext(ServiceLoader.java:1309)
	at java.base/java.util.ServiceLoader$3.hasNext(ServiceLoader.java:1393)
	at java.management/java.lang.management.ManagementFactory$PlatformMBeanFinder$1.run(ManagementFactory.java:933)
	at java.management/java.lang.management.ManagementFactory$PlatformMBeanFinder$1.run(ManagementFactory.java:929)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:460)
	at java.management/java.lang.management.ManagementFactory$PlatformMBeanFinder.<clinit>(ManagementFactory.java:928)
	at java.management/java.lang.management.ManagementFactory.getPlatformMXBean(ManagementFactory.java:688)
	at java.management/java.lang.management.ManagementFactory.getRuntimeMXBean(ManagementFactory.java:366)
	at NativeMethodPrefixApp.run(NativeMethodPrefixApp.java:48)
	at NativeMethodPrefixApp.main(NativeMethodPrefixApp.java:40)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)
Returning bad class file, to cause test failure
ERROR: Injection failure: java.lang.ArrayIndexOutOfBoundsException
java.lang.ArrayIndexOutOfBoundsException
Returning bad class file, to cause test failure
Tracked #2: MATCHED -- getStartupTime
Tracked #1: MATCHED -- wrapped_tr2_getStartupTime
Tracked #0: MATCHED -- wrapped_tr1_wrapped_tr2_getStartupTime
Oracle Corporation
Exception in thread ""Reference Handler"" java.lang.ClassCircularityError: java/util/concurrent/locks/AbstractQueuedSynchronizer$ExclusiveNode
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.tryInitializeHead(AbstractQueuedSynchronizer.java:567)
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.enqueue(AbstractQueuedSynchronizer.java:582)
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.doSignal(AbstractQueuedSynchronizer.java:1454)
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.signalAll(AbstractQueuedSynchronizer.java:1490)

Exception: ja	at java.base/java.lang.ref.ReferenceQueue.signal(ReferenceQueue.java:63)
va	at java.base/java.lang.ref.ReferenceQueue.enqueue0(ReferenceQueue.java:106)
.lang.ClassCircularityError thrown from the UncaughtExceptionHandler in thread ""main""
	at java.base/java.lang.ref.ReferenceQueue.enqueue(ReferenceQueue.java:165)
	at java.base/java.lang.ref.Reference.enqueueFromPending(Reference.java:234)
	at java.base/java.lang.ref.Reference.processPendingReferences(Reference.java:265)
	at java.base/java.lang.ref.Reference$ReferenceHandler.run(Reference.java:207)
----------rerun:(47/5429)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284777,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2xp6r:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@dc685aa,,,,,,,,,"2022-06-30 19:33;dcubed;There's another unresolved issue for the same test:

JDK-8284777 Tests fail with java.lang.ClassCircularityError: java/util/concurrent/locks/AbstractQueuedSynchronizer$ExclusiveNode

The above failure doesn't mention:

ERROR: Injection failure: java.lang.UnsupportedOperationException: Records requires ASM8

but this failure and JDK-8284777 both mention:

Exception in thread ""Reference Handler"" java.lang.ClassCircularityError: java/util/concurrent/locks/AbstractQueuedSynchronizer$ExclusiveNode;;;","2022-07-02 22:57;sspitsyn;Added label noreg-self.
It seems the classfiles with records require new version ASM8 of the ASM tool used as an injector for class retransformation.
Targeting it to 20.;;;","2022-10-05 12:05;amenkov;The test verifies Instrumentation.setNativeMethodPrefix functionality instrumenting ALL loaded classes.
It uses ASM library, but creates ClassVisitor with ASM7 version, so the visitors cannot handle classes with records (requires ASM8) and permits (requires ASM9) attributes.
Accordingly the output the test assumes that returning bad class bytes (empty array) should cause test failure, but this is not correct. java.lang.instrument silently handles errors.
So this ""Injection failures"" produce noice in the test output, but do not cause the test failure.
When the test passes, it logs the same ""Injection failure"" reports.

The actual failure reason is ClassCircularityError on ""Reference Handler"" thread:

Exception in thread ""Reference Handler"" java.lang.ClassCircularityError: java/util/concurrent/locks/AbstractQueuedSynchronizer$ExclusiveNode
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.tryInitializeHead(AbstractQueuedSynchronizer.java:567)
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.enqueue(AbstractQueuedSynchronizer.java:582)
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.doSignal(AbstractQueuedSynchronizer.java:1454)
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.signalAll(AbstractQueuedSynchronizer.java:1490)
	at java.base/java.lang.ref.ReferenceQueue.signal(ReferenceQueue.java:63)
	at java.base/java.lang.ref.ReferenceQueue.enqueue0(ReferenceQueue.java:106)
	at java.base/java.lang.ref.ReferenceQueue.enqueue(ReferenceQueue.java:165)
	at java.base/java.lang.ref.Reference.enqueueFromPending(Reference.java:234)
	at java.base/java.lang.ref.Reference.processPendingReferences(Reference.java:265)
	at java.base/java.lang.ref.Reference$ReferenceHandler.run(Reference.java:207)

It looks similar to JDK-8284777 (class is the same, but thread is different)

Some observations:
When the test passes, ExclusiveNode class is loaded before the test starts instrumentation.
When the test fails, ExclusiveNode class is instrumented, but log contains reports only from 2 transformers (of 3):

failure 1:
tr2: Loading com/sun/javatest/regtest/agent/AStatus
tr1: Loading com/sun/javatest/regtest/agent/AStatus
tr2: Loading java/util/concurrent/locks/AbstractQueuedSynchronizer$ExclusiveNode
tr0: Loading com/sun/javatest/regtest/agent/AStatus
tr0: Loading java/util/concurrent/locks/AbstractQueuedSynchronizer$ExclusiveNode
tr2: Loading java/util/IdentityHashMap$IdentityHashMapIterator
tr1: Loading java/util/IdentityHashMap$IdentityHashMapIterator
tr0: Loading java/util/IdentityHashMap$IdentityHashMapIterator

failure 2:
tr2: Loading com/sun/javatest/regtest/agent/AStatus
tr1: Loading com/sun/javatest/regtest/agent/AStatus
tr0: Loading com/sun/javatest/regtest/agent/AStatus
tr1: Loading java/util/concurrent/locks/AbstractQueuedSynchronizer$ExclusiveNode
tr0: Loading java/util/concurrent/locks/AbstractQueuedSynchronizer$ExclusiveNode
tr2: Loading java/util/IdentityHashMap$IdentityHashMapIterator
tr1: Loading java/util/IdentityHashMap$IdentityHashMapIterator
tr0: Loading java/util/IdentityHashMap$IdentityHashMapIterator

Also the order of transformer calls is inconsistent.
;;;","2022-10-05 19:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10589
Date: 2022-10-06 02:24:12 +0000;;;","2022-10-07 10:16;dukebot;Changeset: c1166a30
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2022-10-07 17:13:30 +0000
URL:       https://git.openjdk.org/jdk/commit/c1166a304dcff6033b8a37ef944b9efa7ab0608d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/awt/a11y/AccessibleJPopupMenuTest.java test fails with java.lang.NullPointerException,JDK-8289559,5078292,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-06-30 16:21,2023-06-14 09:15,2023-10-01 09:56,2022-07-13 15:44,11,17,,,,,20,client-libs,,0,a11y,amazon-interest,atr,imt,jdk11u-a11y-defer,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,"java/awt/a11y/AccessibleJPopupMenuTest.java test fails following exception.
This test was added as part of https://bugs.openjdk.org/browse/JDK-8284014. 

Step to reproduce
1) Run java/awt/a11y/AccessibleJPopupMenuTest.java 
2) Once the Test UI is visible click on either 'Pass' or 'Fail' button and check the jtr file and you will see the following exception.
If you see the same then the bug is reproduced.

----------System.err:(38/3360)----------
java.lang.NullPointerException: Cannot invoke ""java.util.concurrent.CountDownLatch.countDown()"" because ""AccessibleComponentTest.countDownLatch"" is null
	at AccessibleComponentTest$1.actionPerformed(AccessibleComponentTest.java:79)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1972)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2313)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:279)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6620)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3398)
	at java.desktop/java.awt.Component.processEvent(Component.java:6385)
	at java.desktop/java.awt.Container.processEvent(Container.java:2266)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4995)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2324)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4827)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4948)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4575)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4516)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2310)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2780)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4827)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:775)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:97)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:747)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:744)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)",,,,,,,,,,JDK-8291628,JDK-8294571,JDK-8291627,JDK-8291629,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xp5v:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-06-30 17:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9342
Date: 2022-06-30 23:58:44 +0000;;;","2022-07-13 15:44;dukebot;Changeset: 3216d198
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-07-13 22:42:13 +0000
URL:       https://git.openjdk.org/jdk/commit/3216d198f382e991522600086bb2691abfe5f067
;;;","2022-09-27 09:56;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a trivial test change.
Clean backport.
SAP nightly testing passed.;;;","2022-09-27 10:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/745
Date: 2022-09-27 16:58:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Need spec clarification of j.l.foreign.*Layout,JDK-8289558,5078291,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,lkuskov,lkuskov,2022-06-30 16:10,2022-07-27 12:50,2023-10-01 09:56,2022-07-07 02:09,19,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,"1. ValueLayout.arrayElementVarHandle
UnsupportedOperationException - if the layout path has one or more elements with incompatible alignment constraints.
This exception can’t be thrown and the assertion should be removed. 
The condition can’t be constructed.

2. ValueLayout && all ValueLayout.Of* etc.
public boolean isPadding()
the specification of this method is superfluous in ValueLayout and its subclases. This method always return false for them and could be omitted in the spec for ValueLayouts classes  as well as for all MemoryLayout subclasses.
Actually isPadding() method return true only for 20% of layouts. 
Do we need to propagate it everywhere?
The spec only contians isPadding(), isStruct() and isUnion() for all types of Layouts: ValueLayout, SequenceLayout, GroupLayout: (StructLayout, UnionLayout) and hidden PaddingLayout. From my point of view PaddingLayout can be made public and isPadding removed.

3. ValueLayout && ValueLayout.Of*
public ByteOrder order()
From the other hand the method order() is missing in specification. Although it’s worth to mention it there.

4. SequenceLayout.SequenceLayout 
public reshape(long... elementCounts)
Throws: UnsupportedOperationException - if this sequence layout does not have an element count. 
This exception can’t be thrown and the assertion should be removed. The condition can’t be met.

5. SequenceLayout.SequenceLayout 
public flatten()
Throws:
UnsupportedOperationException - if this sequence layout, or one of the nested sequence layouts being flattened, does not have an element count.
This exception can’t be thrown and the assertion should be removed. The condition can’t be met.

6. SequenceLayout.
public boolean equals(Object that)
* two value layouts are considered equal if they have the same byte order (see ValueLayout.order()) 
* two group layouts are considered equal if they are of the same kind (see GroupLayout.isStruct(), GroupLayout.isUnion()) and if their member layouts (see GroupLayout.memberLayouts()) are also equal

These statement should be removed - order(), isStruct(), isUnion() && memberLayouts() are not applicable to SequenceLayout 

7. PathElement.groupElement(null) throws NPE - this should be mentioned in the spec.

",,,,,,,,,,JDK-8289970,JDK-8291233,JDK-8291395,,,,,,,,,,,,,,,,,,,JDK-8289577,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xp5n:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-07-01 02:50;mcimadamore;This issue is covering quite a lot of issues, some of which are javadoc/specification issues, while others are more like API suggestions.

1. This doesn't seem to be true:

jshell> ValueLayout.JAVA_INT.withBitAlignment(64).arrayElementVarHandle();
|  Exception java.lang.UnsupportedOperationException: Alignment requirements for layout 64%i32 do not match stride 32
|        at LayoutPath.checkAlignment (LayoutPath.java:236)
|        at LayoutPath.dereferenceHandle (LayoutPath.java:146)
|        at MemoryLayout.computePathOp (MemoryLayout.java:457)
|        at MemoryLayout.varHandle (MemoryLayout.java:386)
|        at ValueLayout.arrayElementVarHandle (ValueLayout.java:201)
|        at (#3:1)

But I agree that the text should be simplified to:

""if {@code bitAlignment() > bitSize()}""


2. I don't think there's anything wrong with isPadding in the sense that, as there's no PaddingLayout class, there's a predicate that exists in all layouts. The method returns the correct value true/false in all cases. The fact that the method shows up in the javadoc is an unfortunate consequence of how javadoc processes the API implementation (there's a package-private AbstractLayout class in there, and every layout class that inherit from it will show all the methods defined there - even though it is not overridden). 

3. ValueLayout::order is listed in the javadoc - it is not re-added in the subclasses (e.g. ValueLayout::OfInt) because it is not overridden - what you are observing is a difference in how javadoc handles overriding when non-public types (such as the AbstractLayout) are involved. There's not much the implementation can do here.

6. again, the javadoc here is just the same as MemoryLayout::equals - it says that in the javadoc:

""Specified by:    equals in interface MemoryLayout""

Although I noticed an issue in that the equals method says nothing about ValueLayou carriers - which should be rectified


7. This is covered in the package javadoc (this was suggested during the CSR):

""* For every class in this package, unless specified otherwise, any method arguments of reference
 * type must not be null, and any null argument will elicit a {@code NullPointerException}.  This fact is not individually
 * documented for methods of this API.""

That is, all the methods in the API are null-hostile, unless otherwise specified.

(4, 5, 6) are issues, and should be fixed.;;;","2022-07-01 04:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/98
Date: 2022-07-01 11:03:23 +0000;;;","2022-07-07 02:09;dukebot;Changeset: 889150b4
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-07-07 09:08:09 +0000
URL:       https://git.openjdk.org/jdk19/commit/889150b47a7a33d302c1883320d2cfbb915c52e7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ISO 4217 Amendment 172 Update,JDK-8289549,5078282,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,naoto,naoto,naoto,2022-06-30 14:28,2023-04-17 06:48,2023-10-01 09:56,2022-07-01 09:09,,,,,,,19,core-libs,,0,CPU22_10-critical-approved,CPU22_10-critical-SQE-OK,iso4217,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-trivial,,,,"Effective from 1 October 2022, the following change will be made to “List three: Codes for historic denominations of currencies and funds”:

Entity: SIERRA LEONE
Currency: Leone
Alphabetic code: SLL
Numeric code: 694
Minor unit: 2",,,,,,,,,,JDK-8291121,JDK-8291812,JDK-8292432,JDK-8291777,JDK-8291530,JDK-8291818,JDK-8291122,JDK-8291128,JDK-8290772,JDK-8291789,JDK-8291373,JDK-8300350,JDK-8299877,JDK-8306098,JDK-8292433,JDK-8292450,JDK-8292020,JDK-8289624,,,,,,,,,,,,,,,,JDK-8294307,,,,JDK-8283277,,,,,,,"2022-06-30 14:30;naoto;AMENDMENT NUMBER 172.pdf;https://bugs.openjdk.org/secure/attachment/99756/AMENDMENT+NUMBER+172.pdf",,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xp3n:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2022-06-30 14:35;naoto;Since the new currency for Sierra Leone (SLE/925) is already implemented with JDK-8283277, no practical changes are needed,  except for the change to the amendment number (171 -> 172);;;","2022-06-30 15:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/96
Date: 2022-06-30 22:05:38 +0000;;;","2022-07-01 09:09;dukebot;Changeset: 604ea90d
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-07-01 16:07:23 +0000
URL:       https://git.openjdk.org/jdk19/commit/604ea90d55ac8354fd7287490ef59b8e3ce020d1
;;;","2022-08-04 07:02;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
A recurring update we should take. 
Clean backport except for a file move.
SAP nightly testing passed.;;;","2022-08-04 07:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/627
Date: 2022-08-04 13:59:10 +0000;;;","2022-08-07 13:42;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
A recurring update we should take.
Clean backport from 17.;;;","2022-08-07 13:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1318
Date: 2022-08-07 20:41:49 +0000;;;","2022-08-16 01:31;yan;Fix request (13u, 15u)

backporting this regular change to be on par with supported releases. 
The only difference is, CurrencyData.properties is still in make. 
Currency, resources tests run fine.;;;","2022-08-16 01:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/388
Date: 2022-08-16 08:39:07 +0000;;;","2022-08-16 02:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/254
Date: 2022-08-16 08:50:57 +0000;;;","2023-01-06 04:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/224
Date: 2023-01-06 12:14:00 +0000;;;","2023-01-06 09:18;andrew;Fix Request [8u]

Regular currency data update, in this case only a fileversion bump. Patch has been reviewed and Currency tests pass.;;;",,,,,,,,,,,,,,,,,,,,,
Update javax/swing/Popup/TaskbarPositionTest.java,JDK-8289547,5078279,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkannathpari,aivanov,aivanov,2022-06-30 13:22,2023-07-17 09:49,2023-10-01 09:56,2023-05-29 05:55,14,20,8,9,,,21,client-libs,,0,cssn23_01_01,cssn23_02_01,cssn23_02_02,cssn23_04_02,cssn23_05_01,jdk11u-sap-interest,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,"On macOS, the submenu in menu 2 doesn't get selected by the mnemonic, focus doesn't move to combo1. Therefore not all popups are shown.

Right-click doesn't show the popup.

The test doesn't verify the position of combo popups. There's a comment in the code:

// How do we check combo boxes?


There are many warnings in the test: deprecated constants from InputEvent, nested classes which can be made static...",,,,,,,,,,JDK-8309358,JDK-8309447,JDK-8309300,JDK-8311503,JDK-8309298,,,,,,,,,,,,,,,,,,,,,,,JDK-8165207,,,,,,JDK-8310689,JDK-8065097,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,os_x,,,,"0|i2xp2z:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-12-13 06:17;rkannathpari;Back ported to jdk 11 and 17;;;","2022-12-14 08:07;aivanov;[~rkannathpari] “Back ported to jdk 11 and 17” — what does it mean?

The bug hasn't been fixed yet. How can it be backported to 11 and 17?;;;","2022-12-14 22:26;rkannathpari;Hi [~aivanov],

     I have back-ported the fix JDK-8065097 with your sponsor ship, in mach5 all 3 platform test passes. Seems like you are looking something more by this bug. Please let me know what more need to be added.   ;;;","2022-12-15 06:18;aivanov;[~rkannathpari] JDK-8065097 has nothing to do with this one, except that it refers to the same test. Perhaps, JDK-8065097 is a prerequisite for this one.

The purpose of this bug is to clean up the code, ensure submenu 2 gets selected by mnemonic, verify the position of the combo box pop-ups.

As such the initial comment makes no sense here: you backported JDK-8065097. Well done!

This bug still remains unresolved. Backporting changes for JDK-8065097 does not resolve this bug.;;;","2022-12-16 03:07;rkannathpari;Thanks @Alexey for clarifying, Now its clear for me you are looking for improvement in test coverage and cleanup the code.;;;","2023-04-21 06:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13578
Date: 2023-04-21 12:58:58 +0000;;;","2023-05-29 05:54;dukebot;Changeset: d73fc70e
Author:    Renjith <renjith.kannath.pariyangad@oracle.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-05-29 12:52:15 +0000
URL:       https://git.openjdk.org/jdk/commit/d73fc70ea272be6bf4f1c82608c73ff0a8f6032d
;;;","2023-07-04 09:02;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Clean backport.
Test passes.;;;","2023-07-04 09:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1541
Date: 2023-07-04 16:04:24 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
Update JPEG Image Decoding Software to 9e,JDK-8289542,5078275,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,arapte,vdyakov,vdyakov,2022-06-30 10:51,2022-11-29 06:08,2023-10-01 09:56,2022-08-24 09:07,8,jfx20,,,,,jfx20,javafx,2018-09-28 00:00,0,3rdparty,sn_125,,,,,,,,,,,,,,,,"We have IJG libjpeg version 9d in rt\modules\javafx.graphics\src\main\native-iio.
Latest version http://www.ijg.org is 9e released on 16-Jan-2022",,,,,,,,,,JDK-8293112,JDK-8297484,JDK-8297439,,,,,,,,,,,,,,,,,,JDK-8275313,,,,JDK-8239107,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xp23:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-08-17 05:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/874
Date: 2022-08-17 12:02:04 +0000;;;","2022-08-24 09:07;dukebot;Changeset: f95f09f5
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2022-08-24 16:04:35 +0000
URL:       https://git.openjdk.org/jfx/commit/f95f09f5af561e3a6f3804a4f54aff83e9d2bb0b
;;;","2022-11-22 08:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/97
Date: 2022-11-22 16:03:03 +0000;;;","2022-11-22 10:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/116
Date: 2022-11-22 18:36:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update ICU4C to 71.1,JDK-8289541,5078274,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,hmeda,vdyakov,vdyakov,2022-06-30 10:46,2023-04-18 13:07,2023-10-01 09:56,2022-09-22 04:23,8,jfx20,,,,,jfx20,javafx,,0,3rdparty,noreg-other,sn_126,sn_127,sn_128,,,,,,,,,,,,,Need to upgrade ICU4C to the latest patched release,,,,,,,,,,JDK-8297497,JDK-8297418,JDK-8294336,,,,,,,,,,,,,,,,,,JDK-8275179,,JDK-8306329,,JDK-8260245,,,,,,,,,,,,,JDK-8289618,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xp1v:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-09-08 08:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/893
Date: 2022-09-07 18:13:43 +0000;;;","2022-09-22 04:23;dukebot;Changeset: 82db6cc3
Author:    Hima Bindu Meda <hmeda@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-09-22 11:21:49 +0000
URL:       https://git.openjdk.org/jfx/commit/82db6cc342e7de4391f14c70877e77b0e52fbfff
;;;","2022-11-21 15:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/92
Date: 2022-11-21 23:42:26 +0000;;;","2022-11-22 12:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/118
Date: 2022-11-22 20:27:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/nio/channels/FileChannel/MapTest.java times out,JDK-8289526,5078258,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,dcubed,dcubed,2022-06-30 06:19,2022-07-27 12:58,2023-10-01 09:56,2022-07-07 15:40,19,20,,,,,19,core-libs,,0,intermittent,noreg-self,tier2,tier7,,,,,,,,,,,,,,"The following test timed out in the JDK20 CI:

java/nio/channels/FileChannel/MapTest.java

Here's a snippet from the log file:

#section:main
----------messages:(6/214)----------
command: main MapTest
reason: User specified action: run main/othervm/timeout=240 MapTest 
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
elapsed time (seconds): 1044.15
----------configuration:(0/0)----------
----------System.out:(8/248)*----------
Test file c:\\sb\\prod\\1656591314\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\tmp\\blah5364480891587285313.tmp initialized
Zero size: OK
Read: OK
Write: OK
High offset: OK
Timeout refired 960 times
Force: OK
Exceptions: OK
----------System.err:(1/16)----------
STATUS:Passed.
----------rerun:(39/4788)*----------

<snip>

result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-20+5-181\windows-x64.jdk\jdk-20\bin\java' timed out (timeout set to 960000ms, elapsed time including timeout handling was 1044150ms).


Please note that the test PASSed while the timeout handler was running.",,,,,,,,,,JDK-8291398,JDK-8290097,JDK-8291236,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278469,JDK-8289470,,,JDK-8290252,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2xoyb:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-07-02 07:29;dcubed;Here's a log file snippet from the jdk-19+30-2145-tier7 sighting: 

java/nio/channels/FileChannel/MapTest.java

#section:main
----------messages:(6/215)----------
command: main MapTest
reason: User specified action: run main/othervm/timeout=240 MapTest 
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
elapsed time (seconds): 1094.965
----------configuration:(0/0)----------
----------System.out:(8/245)*----------
Test file c:\\sb\\prod\\1656751853\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_nio\\tmp\\blah12808570219490195179.tmp initialized
Zero size: OK
Read: OK
Write: OK
High offset: OK
Timeout refired 960 times
Force: OK
Exceptions: OK
----------System.err:(1/16)----------
STATUS:Passed.
----------rerun:(42/5403)*----------

Please note that the test PASSed while the timeout handler was running.;;;","2022-07-05 13:05;bpb;In all three sightings reported thus far, the test PASSed while the timeout handler was running.;;;","2022-07-06 07:03;dcubed;Here's a log file snippet from the jdk-20+5-210-tier7 sighting: 

java/nio/channels/FileChannel/MapTest.java

#section:main
----------messages:(6/214)----------
command: main MapTest
reason: User specified action: run main/othervm/timeout=240 MapTest 
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
elapsed time (seconds): 1370.12
----------configuration:(0/0)----------
----------System.out:(6/217)*----------
Test file c:\\sb\\prod\\1657109651\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_nio\\tmp\\blah4842916556999674799.tmp initialized
Zero size: OK
Read: OK
Write: OK
High offset: OK
Timeout refired 960 times
----------System.err:(0/0)----------
----------rerun:(42/5375)*----------

In this sighting, the test did not pass while the timeout handler was running.;;;","2022-07-07 14:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9416
Date: 2022-07-07 20:36:43 +0000;;;","2022-07-07 15:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/122
Date: 2022-07-07 22:25:10 +0000;;;","2022-07-07 15:39;dukebot;Changeset: 11319c2a
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-07-07 22:36:08 +0000
URL:       https://git.openjdk.org/jdk19/commit/11319c2aeb16ef2feb0ecab0e2811a52e845739d
;;;","2022-07-08 08:02;dcubed;The fix for this bug is integrated in jdk-19+31-2177. It has not yet been synced to JDK20.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Fix GCC 12 warnings for adlc output_c.cpp,JDK-8289512,5078242,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-06-30 02:19,2023-08-06 18:17,2023-10-01 09:56,2022-07-01 06:48,11,17,19,20,,,20,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,noreg-build,oracle-triage-20,,,,,,,,,,,,,"GCC 12 warns about output buffer size:

```
/shared/projects/openjdk/jdk-jdk/source/src/hotspot/share/adlc/output_c.cpp: In function 'int pipeline_res_mask_initializer(FILE*, PipelineForm*, NameList&, NameList&, PipeClassForm*)':
/shared/projects/openjdk/jdk-jdk/source/src/hotspot/share/adlc/output_c.cpp:529:36: error: '%*d' directive writing between 1 and 2147483647 bytes into a region of size between 0 and 2147483637 [-Werror=format-overflow=]
  529 |     sprintf(args, ""0x%0*x, 0x%0*x, %*d"",
      |                                    ^~~
```

GCC complains that the output buffer for sprintf is too short. We allocate a buffer fitting the fixed parts of the format string, the terminating zero, and the variable widths, then print into it:

```
    char* args = new char [9 + 2*masklen + maskdigit];

    sprintf(args, ""0x%0*x, 0x%0*x, %*d"",
      masklen, resources_used,
      masklen, resources_used_exclusively,
      maskdigit, element_count);
```

masklen is a constant and known to the compiler. maskdigit is not. For all the compiler knows, it could be 0. Format specified is ""%*s"", which we feed maskdigit as width, element_count as argument to print. 

If maskdigit is too small, sprintf will not truncate. The result is that for all the compiler knows, the output array could be 10 characters too small (since element_count is unsigned 32bit, 10 digits).

There are similar errors like that:

```
/shared/projects/openjdk/jdk-jdk/source/src/hotspot/share/adlc/output_c.cpp: In function 'void check_peepconstraints(FILE*, FormDict&, PeepMatch*, PeepConstraint*)':
/shared/projects/openjdk/jdk-jdk/source/src/hotspot/share/adlc/output_c.cpp:1171:42: error: '_idx' directive writing 4 bytes into a region of size between 2 and 12 [-Werror=format-overflow=]               
 1171 |           sprintf(left_reg_index,"",inst%d_idx%d"", (int)left_index, left_op_index);                                                                                                                   
/shared/projects/openjdk/jdk-jdk/source/src/hotspot/share/adlc/output_c.cpp:1184:45: error: '_idx' directive writing 4 bytes into a region of size between 2 and 12 [-Werror=format-overflow=]
 1184 |             sprintf(right_reg_index,"",inst%d_idx%d"", (int)right_index, right_op_index);                                                                                                              
```

these are a bit simpler, since they don't have variable sized widths. The compiler just complains about the buffer. Buffer does not allow the parameters to be beyond 9999, which is asserted, but the GCC does not understand this.
",,,,,,,,,,JDK-8313748,JDK-8313848,JDK-8312129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xour:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-30 02:57;stuefe;While this is straightforward in theory, I find it difficult to fix, since GCC 12 seems to have problems groking the buffer size correctly (the ""new char[..]"" expression). Increasing it does not fix the warning. 

gcc 12 understands *some* changes to the buffer size: e.g. setting it to a constant value, 1024, will make him complain about fitting everything into a 1024 sized array. But more complex buffer size calculations involving additions with constant values seem to overtax him.

Just switching to snprintf works though. That could be done in addition to using the correct buffer size.;;;","2022-06-30 07:04;chagedorn;ILW = warning during build with not yet officially supported GCC 12 version, only with GCC 12, disable warning = MLH = P4;;;","2022-06-30 07:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9335
Date: 2022-06-30 13:51:00 +0000;;;","2022-07-01 06:48;dukebot;Changeset: a8fe2d97
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-07-01 13:43:45 +0000
URL:       https://git.openjdk.org/jdk/commit/a8fe2d97a2ea1d3ce70d6095740c4ac7ec113761
;;;","2023-07-12 10:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1574
Date: 2023-07-12 17:16:03 +0000;;;","2023-07-13 15:56;btaylor;Fix request 17u - allows building with GCC 13. Clean backport, passes jtreg tier1 & tier2;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve XSLT XPath operators count efficiency,JDK-8289486,5078217,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,joehw,joehw,joehw,2022-06-29 16:21,2023-01-12 10:17,2023-10-01 09:56,2022-07-07 12:11,,,,,,,19,xml,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,"While the XPath impl reports error as soon as the operator count exceeds the limit, the XSLT XPath impl wait till the Lexer completes. It would be more efficient for the XSLT XPath impl to do the same as the XPath impl does and report any error earlier.",,,,,,,,,,JDK-8291086,JDK-8290228,JDK-8290229,JDK-8290325,JDK-8290804,JDK-8291334,JDK-8289963,JDK-8290795,JDK-8291464,JDK-8291179,,,,,,,,,,,,,,,,JDK-8289107,,,,,,,,JDK-8285081,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xop7:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,Verified,,"2022-07-01 10:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/101
Date: 2022-07-01 17:04:10 +0000;;;","2022-07-07 12:11;dukebot;Changeset: 3212dc9c
Author:    Joe Wang <joehw@openjdk.org>
Date:      2022-07-07 19:07:04 +0000
URL:       https://git.openjdk.org/jdk19/commit/3212dc9c6f3538e1d0bd1809efd5f33ad8b47701
;;;","2022-07-20 00:11;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Simple change, low risk. 
Clean backport.
SAP nighlty testing passed.;;;","2022-07-20 00:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/566
Date: 2022-07-20 07:11:10 +0000;;;","2022-07-20 02:25;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
Simple change, low risk.
Clean backport. 
SAP nightly testing passed.;;;","2022-07-20 02:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1246
Date: 2022-07-20 09:39:30 +0000;;;","2022-07-27 07:06;yan;Fix request (15u, 13u)

backporting for parity with major releases.
Clean backport. All relevant tests passed.;;;","2022-07-27 07:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/380
Date: 2022-07-27 14:07:40 +0000;;;","2022-07-27 23:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/242
Date: 2022-07-28 06:49:13 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
"Memory corruption with CPU_ALLOC, CPU_FREE on muslc",JDK-8289477,5078203,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stuefe,stuefe,stuefe,2022-06-29 09:23,2022-07-27 12:40,2023-10-01 09:56,2022-06-29 23:28,11,17,18,19,20,,20,hotspot,,0,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sap-interest,,,,,,,,,,,,"On Alpine, I see:

```
 stdout: 
[[0.001s][trace][os] active_processor_count: using dynamic path (forced) - configured processors: 16
[0.001s][trace][os] active_processor_count: sched_getaffinity processor count: 16
NMT Block at 0x00007fc5a35db9f0, corruption at: 0x00007fc5a35db9f0: 
0x00007fc5a35db970:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x00007fc5a35db980:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x00007fc5a35db990:   f8 a1 c8 1b ea 55 00 00 00 00 00 00 00 c0 00 00
0x00007fc5a35db9a0:   00 a4 c8 1b ea 55 00 00 01 00 00 00 00 c0 00 00
0x00007fc5a35db9b0:   d8 a3 c8 1b ea 55 00 00 1d 00 00 00 00 a0 00 00
0x00007fc5a35db9c0:   2d 63 70 00 00 00 00 00 08 00 00 00 00 61 01 00
0x00007fc5a35db9d0:   2d 76 65 72 73 69 6f 6e 00 00 00 00 00 82 02 00
0x00007fc5a35db9e0:   2d 73 65 72 76 65 72 00 00 00 00 00 00 83 03 00
0x00007fc5a35db9f0:   2d 63 6c 69 65 6e 74 00 00 00 00 00 00 84 04 00
0x00007fc5a35dba00:   ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x00007fc5a35dba10:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x00007fc5a35dba20:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x00007fc5a35dba30:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x00007fc5a35dba40:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x00007fc5a35dba50:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x00007fc5a35dba60:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/mallocTracker.cpp:151
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/ubuntu/client_home/workspace/build-user-branch-linux_alpine_x86_64/SapMachine/src/hotspot/share/services/mallocTracker.cpp:151), pid=219496, tid=219512
#  fatal error: NMT corruption: Block at 0x00007fc5a35db9f0: header canary broken
#
# JRE version:  (20.0) (fastdebug build )
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-snapshotbeta-2022-06-29, mixed mode, sharing, tiered, unknown gc, linux-amd64)
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/ubuntu/client_home/workspace/build-user-branch-linux_alpine_x86_64/test_report_hotspot/JTwork/scratch/8/core.219496)
#
```

Reason:

In `os::Linux::active_processor_count()`, we use the CPU_xxx macros to manage sets of CPU information.

muslc defines those macros to call `calloc(3)` and `free(3)`:

```
#define CPU_ALLOC(n) ((cpu_set_t *)calloc(1,CPU_ALLOC_SIZE(n)))
#define CPU_FREE(set) free(set)
```

whereas glibc uses intermediate functions:

```
#define __CPU_ALLOC(count) __sched_cpualloc (count)
#define __CPU_FREE(cpuset) __sched_cpufree (cpuset)
```

which in the end also takes from C-heap, but those calls are not inlined.

So, on muslc we call `calloc()` and `free()`. Call happens inside the `os::Linux` namespace, `free()` resolves to `os::free()`. We have no wrapper in os for calloc though, so `calloc()` calls into muslc right away.

That means we have raw ::malloc() -> os::free(), which is unbalanced. Raw `::malloc()` does not write the header `os::free()` expects. If NMT is on, we assert now, because NMT does not find its header in os::free(). 

This can be very easily reproduced by starting an Alpine VM with NMT on (or, a debug VM) and ` -XX:+UnlockDiagnosticVMOptions -XX:+UseCpuAllocPath`.

The position of the musl devs is that ""calloc"" and ""free"" are reserved words in C, and should not be used [1]. I think they are right. The way we reuse known C- and Posix symbol names in the os namespace has bitten me in the past in similar cases.

[1] https://www.openwall.com/lists/musl/2022/06/29/3",,,,,,,,,,JDK-8291225,JDK-8289916,JDK-8290254,JDK-8289823,JDK-8291388,JDK-8289915,JDK-8290242,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289633,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2xom3:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-29 10:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9328
Date: 2022-06-29 16:58:57 +0000;;;","2022-06-29 21:42;stuefe;This will lead to memory corruptions in JDK11 and 17 if NMT is switched on or we run a debug VM. In later JVMs, this will lead to above assert (which is a guarantee, so it also happens in release).;;;","2022-06-29 23:28;dukebot;Changeset: da6d1fc0
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-06-30 06:19:25 +0000
URL:       https://git.openjdk.org/jdk/commit/da6d1fc0e0aeb1fdb504aced4b0dba0290ec240f
;;;","2022-07-05 23:40;stuefe;Fix Request (11, 17)

I'd like to backport this fix since it can lead to memory corruption (up to JDK17) or assert/guarantees (in JDK18 and later) on Alpine if we run with more than 1024 CPUs or with  -XX:+UseCpuAllocPath

Fix is very minimal and very safe and applies cleanly in JDK11, 17 and 19.;;;","2022-07-05 23:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/112
Date: 2022-07-06 06:35:59 +0000;;;","2022-07-05 23:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/531
Date: 2022-07-06 06:36:50 +0000;;;","2022-07-05 23:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1201
Date: 2022-07-06 06:37:05 +0000;;;","2022-07-06 14:11;dukebot;Changeset: 0526402a
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-07-06 10:15:38 +0000
URL:       https://git.openjdk.org/jdk/commit/0526402a023d5725bf32ef6587001ad05e28c10f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Issue in Initialization of keys in ErrorMsg.java and XPATHErrorResources.java,JDK-8289471,5078194,Bug,Closed,JDK,JDK,software,duke,,,P5,Fixed,tsteele,tsteele,tsteele,2022-06-29 07:22,2023-02-09 15:30,2023-10-01 09:56,2022-07-22 15:16,,,,,,,20,xml,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,"Reported on behalf of Shruthi:

src/java.xml/share/classes/com/sun/org/apache/xalan/internal/xsltc/compiler/util/ErrorMsg.java has a key initialization issue for DESERIALIZE_TRANSLET_ERR
DESERIALIZE_TRANSLET_ERR is assigned as below
public static final String DESERIALIZE_TRANSLET_ERR = ""DESERIALIZE_TEMPLATES_ERR"";
instead of 
public static final String DESERIALIZE_TRANSLET_ERR = ""DESERIALIZE_TRANSLET_ERR"";

src/java.xml/share/classes/com/sun/org/apache/xpath/internal/res/XPATHErrorResources.java has a key initialization issue for ER_XPATH_GROUP_LIMIT and ER_XPATH_OPERATOR_LIMIT
ER_XPATH_GROUP_LIMIT and ER_XPATH_OPERATOR_LIMIT are assigned as below
  public static final String ER_XPATH_GROUP_LIMIT = ""XPATH_GROUP_LIMIT"";
  public static final String ER_XPATH_OPERATOR_LIMIT = ""XPATH_OPERATOR_LIMIT"";
instead of
  public static final String ER_XPATH_GROUP_LIMIT = ""ER_XPATH_GROUP_LIMIT"";
  public static final String ER_XPATH_OPERATOR_LIMIT = ""ER_XPATH_OPERATOR_LIMIT""; ",,,,,,,,,,JDK-8291834,JDK-8291847,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xok3:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42d7a890,,,,,,,Verified,,"2022-07-04 21:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9369
Date: 2022-07-04 17:21:14 +0000;;;","2022-07-22 15:15;dukebot;Changeset: 987656d6
Author:    Shruthi <Shruthi.Shruthi1@ibm.com>
Committer: Joe Wang <joehw@openjdk.org>
Date:      2022-07-22 22:10:43 +0000
URL:       https://git.openjdk.org/jdk/commit/987656d69065b5b61d658cec3704a181a4aef18b
;;;","2022-07-26 21:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1273
Date: 2022-07-26 07:32:29 +0000;;;","2022-07-26 21:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/598
Date: 2022-07-26 07:49:51 +0000;;;","2022-08-02 09:23;phh;Fix Request (17u)

On behalf of shruacha1234, aka Shruthi.

Clean backport, low risk, fixes error messages.;;;","2022-08-02 09:25;phh;Fix Request (11u)

On behalf of shruacha1234, aka Shruthi.

Clean backport, low risk, fixes error messages. 
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
more references of unsigned long in aarch64 code,JDK-8289456,5078175,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fmatte,fmatte,fmatte,2022-06-29 06:12,2022-07-08 01:44,2023-10-01 09:56,2022-06-29 21:46,8u351,,,,,,8u351,hotspot,,0,sustaining,,,,,,,,,,,,,,,,,"aarch64/vm has references to ""unsigned long"" that need to be removed with reference to JDK-8248414 and JDK-8289452
grep -rl ""unsigned long "" .
./templateInterpreter_aarch64.cpp
./bytecodeInterpreter_aarch64.inline.hpp
./interpreter_aarch64.cpp
./sharedRuntime_aarch64.cpp
./macroAssembler_aarch64.cpp",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2xofv:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64 remove uses of unsigned long int from c1_LIRAssembler_aarch64.cpp,JDK-8289452,5078171,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fmatte,fmatte,fmatte,2022-06-29 05:27,2022-07-08 01:44,2023-10-01 09:56,2022-06-29 06:16,8u351,,,,,,8u351,hotspot,,0,,,,,,,,,,,,,,,,,,There are few more usages of unsuigned long int in c1_LIRAssembler_aarch64.cpp that need to be removed with reference to JDK-8248414,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2xoez:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove vmTestbase/nsk/monitoring/MemoryPoolMBean/isCollectionUsageThresholdExceeded/isexceeded003 from ProblemList.txt,JDK-8289440,5078156,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2022-06-29 02:41,2023-02-01 01:31,2023-10-01 09:56,2022-06-30 13:21,,,,,,,20,core-svc,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,"The test nsk/monitoring/MemoryPoolMBean/isCollectionUsageThresholdExceeded/isexceeded003 was on the ProblemList when open-sourced ( 8199375 ).

The test in question was noted to fail, but that was many years ago.  Logs of failures from so many years ago are no longer available. 

A historical closed issue JDK-8153598 has a suggestion in 2016 to unproblemlist it.

The isCollectionUsageThresholdExceeded/isexceeded00* tests all test well, e.g. 50 passes in each platform, we should unproblemlist this.


The original bug 8153598 for nsk/monitoring/MemoryPoolMBean/isCollectionUsageThresholdExceeded/isexceeded003 contains comments that were possibly meant to be in 8198668 for MemoryPoolMBean/isUsageThresholdExceeded/isexceeded001/TestDescription.java 
as they mention that test by name, and not isCollectionUsageThresholdExceeded.

i.e. isCollectionUsageThresholdExceeded may have been unfairly/mistakenly labelled with more failures than really happened.


This test has some of the same issues as 8198668, such as making an allocation and watching for changes in a memory pool being a flawed idea.  However it does give a sanity check, i.e. that a pool does not cross a threshold, and does not claim to cross a threshold.  It checks for a correct UnsupportedOperationException if !monitor.isCollectionThresholdSupported(pool)).  

Also this problemlist change only covers 1 of 5 tests, there are isexceeded001 to 005 inclusive, only 003 is problemlisted.",,,,,,,,,,JDK-8297388,JDK-8301591,,,,,,,,,,,,,,,,,,,,,,,,JDK-8153598,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xobn:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2022-06-29 03:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9325
Date: 2022-06-29 09:57:29 +0000;;;","2022-06-30 13:20;dukebot;Changeset: 00d06d4a
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2022-06-30 20:18:52 +0000
URL:       https://git.openjdk.org/jdk/commit/00d06d4a82c5cbc8cc5fde97caa8cb56279c441a
;;;","2023-01-30 10:05;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-01-30 10:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1128
Date: 2023-01-30 18:05:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clarify relationship between ThreadStart/ThreadEnd and can_support_virtual_threads capability ,JDK-8289439,5078155,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alanb,alanb,alanb,2022-06-29 02:21,2022-07-27 12:35,2023-10-01 09:56,2022-07-05 23:43,19,,,,,,19,hotspot,,0,loom,noreg-doc,,,,,,,,,,,,,,,,"The description of the ThreadStart/End events needs to re-visited to more clearly explain if these events are sent for virtual threads, the difference between these events and the VirtualThreadStart/End events, and the connection to the can_support_virtual_threads capability.

The spec needs to make it clear that agents that enable ThreadStart and/or ThreadEnd, but do not enable the can_support_virtual_threads capability, will receive these events for virtual threads. 

On the other hand, if the can_support_virtual_threads capability is enabled, the events for virtual threads are VirutalThreadStart and VirutalThreadEnd so a ""virtual thread aware"" agent gets fine control on the the events and can use the same or a different callback for these events.




",,,,,,,,,,JDK-8289868,JDK-8291387,JDK-8291224,,,,,,,,,,,,,,,,,,,JDK-8289574,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xobf:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-07-01 02:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/94
Date: 2022-06-30 13:20:22 +0000;;;","2022-07-05 23:42;dukebot;Changeset: b3a0e482
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-07-06 06:40:07 +0000
URL:       https://git.openjdk.org/jdk19/commit/b3a0e482adc32946d03b10589f746bb31f9c9e5b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/compilercontrol/jcmd/ClearDirectivesFileStackTest.java failed with null setting,JDK-8289427,5078143,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tkiriyama,tkiriyama,tkiriyama,2022-06-28 23:32,2022-07-07 01:25,2023-10-01 09:56,2022-07-04 23:39,11,17,18,19,20,,20,hotspot,,0,compilercontrol,oracle-triage-20,,,,,,,,,,,,,,,,"ClearDirectivesFileStackTest was excluded in JDK-8225370, but this problem does not occurs on Windows 10 x86_64 in JDK19. However, another exception occurs.

java.lang.RuntimeException: Expected to get exit value of [0]
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:489)
	at compiler.compilercontrol.share.scenario.Scenario.execute(Scenario.java:118)
	at compiler.compilercontrol.jcmd.ClearDirectivesFileStackTest.test(ClearDirectivesFileStackTest.java:88)
	at compiler.compilercontrol.jcmd.ClearDirectivesFileStackTest.main(ClearDirectivesFileStackTest.java:61)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1596)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xo8r:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-28 23:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9318
Date: 2022-06-29 06:47:07 +0000;;;","2022-06-29 07:45;chagedorn;ILW = VM abort due to null settings in directives, only with directives, use non-null values = MLM = P4;;;","2022-07-04 23:39;dukebot;Changeset: 1b997db7
Author:    KIRIYAMA Takuya <kiriyama.takuya@fujitsu.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-07-05 06:38:10 +0000
URL:       https://git.openjdk.org/jdk/commit/1b997db734315f6cd08af94149e6622a8afbe88c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No-PCH build for Minimal VM was broken by JDK-8287001,JDK-8289421,5078136,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,ysuenaga,dholmes,dholmes,2022-06-28 18:52,2022-07-07 01:15,2023-10-01 09:56,2022-06-29 04:45,20,,,,,,20,hotspot,,0,noreg-build,oracle-triage-11,oracle-triage-17,oracle-triage-20,tier1,,,,,,,,,,,,,"src/hotspot/share/compiler/disassembler.cpp:841:5: error: 'log_warning' was not declared in this scope; did you mean 'warning'?
[2022-06-29T01:25:45,429Z]   841 |     log_warning(os)(""Loading hsdis library failed"");
[2022-06-29T01:25:45,429Z]       |     ^~~~~~~~~~~
[2022-06-29T01:25:45,429Z]       |     warning

Missing include of log.hpp",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287001,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,"0|i2xo77:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-28 23:05;chagedorn;ILW = build failure, only when no-PCH, use precompiled headers = HMM = P2;;;","2022-06-28 23:07;chagedorn;Please have a look [~ysuenaga], thanks!;;;","2022-06-28 23:41;ysuenaga;Ok, I will fix it ASAP.;;;","2022-06-29 00:29;ysuenaga;[~dholmes] I tried to build upstream OpenJDK (head: b96ba198078) with --disable-precompiled-headers on following environment, however I couldn't see any warn/error. Can you share the environment which you can see?

* Linux
    * Fedora 36
    * gcc-12.1.1-1.fc36.x86_64
* Windows
    * Windows 11 (WSL 2)
    * Visual Studio Community 2022 (17.2.5);;;","2022-06-29 01:21;jiefu;I think we can fix it like this.

diff --git a/src/hotspot/share/compiler/disassembler.cpp b/src/hotspot/share/compiler/disassembler.cpp
index 2c29576..a2bd7bd 100644
--- a/src/hotspot/share/compiler/disassembler.cpp
+++ b/src/hotspot/share/compiler/disassembler.cpp
@@ -32,6 +32,7 @@
 #include ""gc/shared/cardTable.hpp""
 #include ""gc/shared/cardTableBarrierSet.hpp""
 #include ""gc/shared/collectedHeap.hpp""
+#include ""logging/log.hpp""
 #include ""memory/resourceArea.hpp""
 #include ""memory/universe.hpp""
 #include ""oops/oop.inline.hpp"";;;","2022-06-29 01:32;ysuenaga;[~jiefu] I know what should we do to fix (as you said), but I wonder why I cannot reproduce the problem even if I remove build directory before building. I cannot evaluate the fix without reproducer.;;;","2022-06-29 01:43;jiefu;You can reproduce it with --with-jvm-variants=minimal --disable-precompiled-headers .;;;","2022-06-29 02:02;ysuenaga;Thanks [~jiefu] ! I've sent PR for this issue: https://github.com/openjdk/jdk/pull/9323;;;","2022-06-29 02:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9323
Date: 2022-06-29 08:57:54 +0000;;;","2022-06-29 02:04;mbaesken;reproducing should be easy , you see it in the github actions (linux-x64-hs-minimal / build (debug));;;","2022-06-29 04:45;dukebot;Changeset: 167ce4da
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2022-06-29 11:43:45 +0000
URL:       https://git.openjdk.org/jdk/commit/167ce4dae248024ffda0439c3ccc6b12404eadaf
;;;","2022-06-29 05:21;dholmes;[~ysuenaga] we saw the failure with linux-x64 debug  and macOS slowdebug, together with --disable-precompiled-headers

Thanks for fixing.;;;","2022-06-29 10:21;chagedorn;Thanks [~ysuenaga] for taking care of it so quickly!;;;",,,,,,,,,,,,,,,,,,,,
Fix warnings: Possible accidental assignment in place of a comparison. A condition expression should not be reduced to an assignment,JDK-8289397,5078111,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2022-06-28 12:43,2022-11-29 06:06,2023-10-01 09:56,2022-07-29 10:52,jfx19,,,,,,jfx20,javafx,,0,noreg-cleanup,sn_122,sn_123,,,,,,,,,,,,,,,"Eclipse Version 2022-06 (4.24.0) reports this warning in the following places:

```
Possible accidental assignment in place of a comparison. A condition expression should not be reduced to an assignment	PrEffectHelper.java	line 168	/graphics/src/main/java/com/sun/scenario/effect/impl/prism
Possible accidental assignment in place of a comparison. A condition expression should not be reduced to an assignment	StyleManager.java	line 1275	/graphics/src/main/java/com/sun/javafx/css
Possible accidental assignment in place of a comparison. A condition expression should not be reduced to an assignment	Utils.java	line 875	/graphics/src/main/java/com/sun/javafx/util
```
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289379,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xo1n:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-07-26 14:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/851
Date: 2022-07-26 21:14:58 +0000;;;","2022-07-29 10:52;dukebot;Changeset: 4b4deaef
Author:    Andy Goryachev <angorya@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-07-29 17:49:55 +0000
URL:       https://git.openjdk.org/jfx/commit/4b4deaef96ac9efcb2f0cb57891ef617234bee8a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix warnings: Null pointer access: The variable instance can only be null at this location,JDK-8289396,5078110,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2022-06-28 12:41,2022-07-09 07:28,2023-10-01 09:56,2022-07-06 10:07,,,,,,,jfx19,javafx,,0,sn_122,testbug,,,,,,,,,,,,,,,,"Eclipse Version 2022-06 (4.24.0) reports this warning in the following places:

```
Null pointer access: The variable instance can only be null at this location	RuleTest.java	line 175	/graphics/src/test/java/test/javafx/css
```

This code cannot be right:

    @Ignore(""JDK-8234154"")
    @Test
    public void testToString() {
        System.out.println(""toString"");
        Rule instance = null;
        String expResult = """";
        String result = instance.toString(); // <---- NPE
        assertEquals(expResult, result);
        fail(""The test case is a prototype."");
    }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289379,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xo1f:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-07-05 13:50;angorya;The test in question does nothing and ignored.  The referenced ticket https://bugs.openjdk.org/browse/JDK-8234154 feels like a template.

Removing the test case.;;;","2022-07-05 13:59;kcr;Yes, the test looks like a placeholder. I believe that JDK-8234154 was filed (long after the fact) so that all `@Ignored` tests would have an associated bug ID.;;;","2022-07-06 08:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/813
Date: 2022-07-06 15:14:03 +0000;;;","2022-07-06 10:07;dukebot;Changeset: 704baa31
Author:    Andy Goryachev <andy.goryachev@oracle.com>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-07-06 17:04:18 +0000
URL:       https://git.openjdk.org/jfx/commit/704baa31abb87025241feecfb4474efd33775d9d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix warnings: Varargs methods should only override or be overridden by other varargs methods,JDK-8289395,5078109,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2022-06-28 12:37,2022-09-10 06:51,2023-10-01 09:56,2022-07-11 12:46,jfx19,,,,,,jfx19,javafx,,0,noreg-cleanup,sn_122,,,,,,,,,,,,,,,,"Eclipse Version 2022-06 (4.24.0) reports this warning in the following places:

```
Varargs methods should only override or be overridden by other varargs methods unlike AudioEqualizer.Bands.onProposedChange(List<EqualizerBand>, int[]) and VetoableListDecorator<EqualizerBand>.onProposedChange(List<EqualizerBand>, int...)	AudioEqualizer.java	line 211	/media/src/main/java/javafx/scene/media
Varargs methods should only override or be overridden by other varargs methods unlike new VetoableListDecorator<Image>(){}.onProposedChange(List<Image>, int[]) and VetoableListDecorator<Image>.onProposedChange(List<Image>, int...)	Stage.java	line 699	/graphics/src/main/java/javafx/stage
Varargs methods should only override or be overridden by other varargs methods unlike new VetoableListDecorator<Node>(){}.onProposedChange(List<Node>, int[]) and VetoableListDecorator<Node>.onProposedChange(List<Node>, int...)	Parent.java	line 469	/graphics/src/main/java/javafx/scene
Varargs methods should only override or be overridden by other varargs methods unlike new VetoableListDecorator<Person>(){}.onProposedChange(List<Person>, int[]) and VetoableListDecorator<Person>.onProposedChange(List<Person>, int...)	SourceAdapterChangeTest.java	line 59	/base/src/test/java/test/javafx/collections
Varargs methods should only override or be overridden by other varargs methods unlike new VetoableListDecorator<String>(){}.onProposedChange(List, int[]) and VetoableListDecorator<String>.onProposedChange(List<String>, int...)	TestedObservableLists.java	line 46	/base/src/test/java/test/javafx/collections
Varargs methods should only override or be overridden by other varargs methods unlike new VetoableListDecorator<String>(){}.onProposedChange(List<String>, int[]) and VetoableListDecorator<String>.onProposedChange(List<String>, int...)	VetoableObservableListTest.java	line 83	/base/src/test/java/test/javafx/collections
Varargs methods should only override or be overridden by other varargs methods unlike ObservableFloatArrayImpl.setAll(float[]) and ObservableFloatArray.setAll(float...)	ObservableFloatArrayImpl.java	line 155	/base/src/main/java/com/sun/javafx/collections
Varargs methods should only override or be overridden by other varargs methods unlike ObservableIntegerArrayImpl.setAll(int[]) and ObservableIntegerArray.setAll(int...)	ObservableIntegerArrayImpl.java	line 155	/base/src/main/java/com/sun/javafx/collections
```
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289379,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xo17:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-07-06 12:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/816
Date: 2022-07-06 18:52:08 +0000;;;","2022-07-11 12:46;dukebot;Changeset: 13f3e1f7
Author:    Andy Goryachev <andy.goryachev@oracle.com>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2022-07-11 19:43:53 +0000
URL:       https://git.openjdk.org/jfx/commit/13f3e1f7457c4e0af0002bf9157704c67f7eb576
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix warnings: Unlikely argument type,JDK-8289394,5078108,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2022-06-28 12:34,2022-11-29 06:01,2023-10-01 09:56,2022-07-19 08:30,jfx19,,,,,,jfx20,javafx,,0,noreg-cleanup,,,,,,,,,,,,,,,,,"Eclipse Version 2022-06 (4.24.0) reports this warning in the following places:

```
Unlikely argument type CssMetaData for containsKey(Object) on a Map<String,List<CascadingStyle>>	Node_cssStyleMap_Test.java	line 291	/graphics/src/test/java/test/javafx/css
Unlikely argument type CssMetaData for containsKey(Object) on a Map<String,List<CascadingStyle>>	Node_cssStyleMap_Test.java	line 295	/graphics/src/test/java/test/javafx/css
Unlikely argument type for equals(): Color seems to be unrelated to LinearGradient	LinearGradientTest.java	line 115	/graphics/src/test/java/test/javafx/scene/paint
Unlikely argument type for equals(): Color seems to be unrelated to LinearGradient	LinearGradientTest.java	line 116	/graphics/src/test/java/test/javafx/scene/paint
Unlikely argument type for equals(): Color seems to be unrelated to RadialGradient	RadialGradientTest.java	line 118	/graphics/src/test/java/test/javafx/scene/paint
Unlikely argument type for equals(): Color seems to be unrelated to RadialGradient	RadialGradientTest.java	line 119	/graphics/src/test/java/test/javafx/scene/paint
Unlikely argument type for equals(): Integer seems to be unrelated to List<String>	ObservableSubListTest.java	line 159	/base/src/test/java/test/javafx/collections
Unlikely argument type for equals(): int seems to be unrelated to Duration	TimelineController.java	line 79	/samples/3DViewer/src/main/java/com/javafx/experiments/jfx3dviewer
Unlikely argument type for equals(): Property<T> seems to be unrelated to BidirectionalBinding	BidirectionalBindingTest.java	line 217	/base/src/test/java/test/com/sun/javafx/binding
Unlikely argument type for equals(): String seems to be unrelated to Background	BackgroundTest.java	line 346	/graphics/src/test/java/test/javafx/scene/layout
Unlikely argument type for equals(): String seems to be unrelated to BackgroundFill	BackgroundFillTest.java	line 86	/graphics/src/test/java/test/javafx/scene/layout
Unlikely argument type for equals(): String seems to be unrelated to BackgroundImage	BackgroundImageTest.java	line 218	/graphics/src/test/java/test/javafx/scene/layout
Unlikely argument type for equals(): String seems to be unrelated to BackgroundPosition	BackgroundPositionTest.java	line 153	/graphics/src/test/java/test/javafx/scene/layout
Unlikely argument type for equals(): String seems to be unrelated to BackgroundSize	BackgroundSizeTest.java	line 246	/graphics/src/test/java/test/javafx/scene/layout
Unlikely argument type for equals(): String seems to be unrelated to Border	BorderTest.java	line 562	/graphics/src/test/java/test/javafx/scene/layout
Unlikely argument type for equals(): String seems to be unrelated to BorderStrokeStyle	BorderStrokeStyleTest.java	line 175	/graphics/src/test/java/test/javafx/scene/layout
Unlikely argument type for equals(): String seems to be unrelated to BorderWidths	BorderWidthsTest.java	line 206	/graphics/src/test/java/test/javafx/scene/layout
Unlikely argument type Integer for contains(Object) on a Collection<String>	ObservableSubListTest.java	line 141	/base/src/test/java/test/javafx/collections
Unlikely argument type Property<capture#1-of ?> for get(Object) on a Map<StyleableProperty<?>,List<Style>>	Node_cssStyleMap_Test.java	line 78	/graphics/src/test/java/test/javafx/css
Unlikely argument type String for remove(Object) on a Collection<File>	GetEvent.java	line 104	/graphics/src/main/java/com/sun/glass/ui/monocle
```
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289379,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xo0z:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-07-08 13:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/823
Date: 2022-07-08 20:31:31 +0000;;;","2022-07-08 13:58;angorya;Fixes ""Unlikely argument type"" warning generated by the latest Eclipse IDE.

This warning should be reclassified as an error, as it catches bugs missed by javac.  In this case, the following places seem to contain bugs:
- apps/samples/3DViewer/src/main/java/com/javafx/experiments/jfx3dviewer/TimelineController.java
- modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/GetEvent.java

The fixes include:
- using objects of the right type
- adding @SuppressWarnings(""unlikely-arg-type"") in places where intended (e.g. assertFalse)

There was an earlier discussion about using IDE-specific @SuppressWarnings in the code.  While I might disagree (I think it is ok to use IDE-specific @SuppressWarnings), the tests can be reworked to avoid @SuppressWarnings.  Please let me know.  Thanks!;;;","2022-07-19 08:30;dukebot;Changeset: cb7460df
Author:    Andy Goryachev <andy.goryachev@oracle.com>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-07-19 15:27:14 +0000
URL:       https://git.openjdk.org/jfx/commit/cb7460dfd5e537c457451991e4459eb1044e0956
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix warnings: type parameter E is hiding the type E,JDK-8289390,5078104,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2022-06-28 12:20,2022-09-10 06:52,2023-10-01 09:56,2022-07-06 10:07,jfx19,,,,,,jfx19,javafx,,0,noreg-cleanup,sn_122,,,,,,,,,,,,,,,,"Eclipse Version 2022-06 (4.24.0) reports this warning in the following places:

```
The type parameter E is hiding the type E	FXCollections.java	line 1638	/base/src/main/java/javafx/collections
The type parameter E is hiding the type E	FXCollections.java	line 1824	/base/src/main/java/javafx/collections
The type parameter T is hiding the type T	FXCollections.java	line 1058	/base/src/main/java/javafx/collections
The type parameter T is hiding the type T	FXCollections.java	line 1342	/base/src/main/java/javafx/collections
```
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289379,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xo03:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2022-07-06 07:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/812
Date: 2022-07-06 14:45:13 +0000;;;","2022-07-06 10:07;dukebot;Changeset: 77ecfb71
Author:    Andy Goryachev <andy.goryachev@oracle.com>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-07-06 17:05:29 +0000
URL:       https://git.openjdk.org/jfx/commit/77ecfb7115abe54e8e29c1110717c8f5a2ffef18
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix warnings: type should also implement hashCode() since it overrides Object.equals(),JDK-8289389,5078103,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2022-06-28 12:18,2022-11-29 06:02,2023-10-01 09:56,2022-07-25 15:20,jfx19,,,,,,jfx20,javafx,,0,noreg-cleanup,sn_122,sn_123,,,,,,,,,,,,,,,"Eclipse Version 2022-06 (4.24.0) reports this warning in the following places:

```
The type CalculatedValue should also implement hashCode() since it overrides Object.equals()	CalculatedValue.java	line 29	/graphics/src/main/java/com/sun/javafx/css
The type FXMLLoader should also implement hashCode() since it overrides Object.equals()	FXMLLoader.java	line 107	/fxml/src/main/java/javafx/fxml
The type IntSet should also implement hashCode() since it overrides Object.equals()	IntSet.java	line 33	/graphics/src/main/java/com/sun/glass/ui/monocle
The type ListViewTest.RT22599_DataType should also implement hashCode() since it overrides Object.equals()	ListViewTest.java	line 1700	/controls/src/test/java/test/javafx/scene/control
The type NativeMediaAudioClipPlayer.SchedulerEntry should also implement hashCode() since it overrides Object.equals()	NativeMediaAudioClipPlayer.java	line 454	/media/src/main/java/com/sun/media/jfxmediaimpl
The type NativeMediaAudioClipPlayer should also implement hashCode() since it overrides Object.equals()	NativeMediaAudioClipPlayer.java	line 47	/media/src/main/java/com/sun/media/jfxmediaimpl
The type TableViewTest.RT22599_DataType should also implement hashCode() since it overrides Object.equals()	TableViewTest.java	line 5076	/controls/src/test/java/test/javafx/scene/control
The type TreeTableViewTest.RT22599_DataType should also implement hashCode() since it overrides Object.equals()	TreeTableViewTest.java	line 5732	/controls/src/test/java/test/javafx/scene/control
The type TreeViewTest.RT22599_DataType should also implement hashCode() since it overrides Object.equals()	TreeViewTest.java	line 3062	/controls/src/test/java/test/javafx/scene/control
The type WCRectangle should also implement hashCode() since it overrides Object.equals()	WCRectangle.java	line 28	/web/src/main/java/com/sun/webkit/graphics
```
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289379,,,,,,,,,,,,,JDK-8290973,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xnzv:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-07-08 12:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/821
Date: 2022-07-08 19:46:20 +0000;;;","2022-07-25 15:19;dukebot;Changeset: 075cc80b
Author:    Andy Goryachev <angorya@openjdk.org>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2022-07-25 22:14:51 +0000
URL:       https://git.openjdk.org/jfx/commit/075cc80b57095729fb43c17195f6b17322248748
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix warnings: method is overriding a synchronized method without being synchronized,JDK-8289388,5078102,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2022-06-28 12:12,2022-11-29 06:02,2023-10-01 09:56,2022-07-26 13:57,jfx19,,,,,,jfx20,javafx,,0,noreg-cleanup,,,,,,,,,,,,,,,,,"Eclipse Version 2022-06 (4.24.0) reports this warning in the following places:

```
The method FXDnDInteropN.FXDragGestureRecognizer.setComponent(Component) is overriding a synchronized method without being synchronized	FXDnDInteropN.java	line 187	/swing/src/main/java/com/sun/javafx/embed/swing/newimpl
The method PrismImage.deref() is overriding a synchronized method without being synchronized	PrismImage.java	line 64	/web/src/main/java/com/sun/javafx/webkit/prism
The method SeparateThreadTimer.notifyTick() is overriding a synchronized method without being synchronized	Timer.java	line 167	/web/src/main/java/com/sun/webkit
```
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289379,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xnzn:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-07-08 12:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/819
Date: 2022-07-08 19:00:25 +0000;;;","2022-07-26 13:56;dukebot;Changeset: a122cef5
Author:    Andy Goryachev <angorya@openjdk.org>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2022-07-26 20:55:17 +0000
URL:       https://git.openjdk.org/jfx/commit/a122cef52be12c83363e82346a3ff8bf9c689436
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix warnings: The assignment to variable has no effect,JDK-8289381,5078094,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2022-06-28 11:24,2022-09-10 06:53,2023-10-01 09:56,2022-07-08 14:14,jfx19,,,,,,jfx19,javafx,,0,noreg-cleanup,,,,,,,,,,,,,,,,,"Eclipse Version 2022-06 (4.24.0) reports this warning in the following places:

```
Description	Resource	Location	Path
The assignment to variable b has no effect	ClassWithCollection.java	line 46	/fxml/src/test/java/test/com/sun/javafx/fxml/builder
The assignment to variable mode has no effect	Shape.java	line 406	/graphics/src/main/java/javafx/scene/shape (see JDK-8279297)
The assignment to variable value has no effect	BooleanTypeTest.java	line 56	/graphics/src/test/java/test/com/sun/javafx/css
```
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289379,,,,,,,,,,,,,,,,,JDK-8279297,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xnxv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-07-08 13:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/822
Date: 2022-07-08 20:11:22 +0000;;;","2022-07-08 14:14;dukebot;Changeset: 187fbe1e
Author:    Andy Goryachev <andy.goryachev@oracle.com>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2022-07-08 21:09:45 +0000
URL:       https://git.openjdk.org/jfx/commit/187fbe1e4f41de023fdff245f48370d146d671aa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SegmentAllocator:allocateArray(MemoryLayout,  count) does not throw IAEx when count is -1",JDK-8289365,5078076,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,kganapureddy,kganapureddy,2022-06-28 09:48,2022-07-27 13:48,2023-10-01 09:56,2022-07-12 07:27,19,,,,,,19,core-libs,,0,conformance,,,,,,,,,,,,,,,,,"The spec : https://download.java.net/java/early_access/jdk19/docs/api/java.base/java/lang/foreign/SegmentAllocator.html#allocate(java.lang.foreign.MemoryLayout)
""Throws:
IllegalArgumentException - if count < 0.""

Expecting the below code shall throw IAEx.

 try {
            SegmentAllocator.implicitAllocator().allocateArray(ValueLayout.JAVA_BYTE, -1);
        }catch (IllegalArgumentException ex){
            System.out.println(""OK - Expected Exception "");
        }catch (Exception ex){
            System.out.println(""NOT OK - exception thrown is ""+ex.getMessage());
        }

Actual Result :
java.lang.OutOfMemoryError: Cannot reserve 1152921504606846975 bytes...


Note - For other negative numbers the implementation throws IAEx.
",,,,,,,,,,JDK-8291297,JDK-8290285,JDK-8291422,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282192,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xntv:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-07-11 07:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/132
Date: 2022-07-11 14:45:42 +0000;;;","2022-07-12 07:27;dukebot;Changeset: 4545ed68
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-07-12 14:22:42 +0000
URL:       https://git.openjdk.org/jdk19/commit/4545ed6842b1882d64f62f96b7abdfc2b3d043b8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(Tree)TableView is null in (Tree)TableRowSkin during autosize,JDK-8289357,5078068,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mhanl,mhanl,mhanl,2022-06-28 09:44,2022-12-09 16:13,2023-10-01 09:56,2022-12-08 11:13,jfx19,,,,,,jfx20,javafx,,0,regression,,,,,,,,,,,,,,,,,"Since JDK-8251480 and JDK-8285197, we use a (Tree)TableRow for measuring the preferred column size.
Both don't initialize the (Tree)TableView, leading to a NPE if the table view is accessed inside the (Tree)TableRowSkin.

  private static class CustomTableRowSkin<T> extends TableRowSkin<T> {
        public CustomTableRowSkin(TableRow<T> tableRow) {
            super(tableRow);
            tableRow.getTableView().getFixedCellSize(); // THROWS NPE
        }
    }

Fix is to initialize the `(Tree)TableView` when creating the measure row for autosizing.
This will guarantee, that we can access the `(Tree)TableView` in the `(Tree)TableRowSkin`, which is currently only null during the autosizing (It is always set otherwise).

With the above mentioned change, a NPE is happening as the `(Tree)TableRow` currently assumes, that there must be a `VirtualFlow` somewhere in the scene (parent). Ticket which described that behaviour as well: https://bugs.openjdk.org/browse/JDK-8274065

Finally, the `(Tree)TableRow` must be removed after the autosizing and the index must be set to `-1` (as for the cell) so that e.g. `cancelEdit()` is not triggered. Some tests catched that (see `test_rt_31015`). This did not happen before as the table row setup was not complete, but now the row does know the table and therefore installs some listener on it in order to fire corresponding edit events.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292009,,,,JDK-8289751,JDK-8251483,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xns3:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-06-28 10:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/805
Date: 2022-06-28 17:06:39 +0000;;;","2022-12-08 11:13;dukebot;Changeset: c900a00c
Author:    Marius Hanl <mhanl@openjdk.org>
Date:      2022-12-08 19:11:00 +0000
URL:       https://git.openjdk.org/jfx/commit/c900a00c7527f290e8047792fef4b45002930892
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Specification of method j.l.foreign.VaList::skip deserves clarification,JDK-8289333,5078043,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,dbessono,dbessono,2022-06-28 08:22,2022-07-27 13:42,2023-10-01 09:56,2022-07-12 04:29,19,,,,,,19,core-libs,,0,conformance,,,,,,,,,,,,,,,,,"Specificaition of method VaList::skip is rather short

>   Skips a number of elements with the given memory layouts, and advances this variable argument list's position.

It's not perfectly clear what would for example produce the following code 

        try (var session = MemorySession.openConfined()) {
            VaList vaList = VaList.make(builder -> builder.addVarg(ValueLayout.JAVA_INT, 77)
                    .addVarg(ValueLayout.JAVA_LONG, -78),
                    session);
            vaList.skip(ValueLayout.JAVA_DOUBLE, ValueLayout.JAVA_BOOLEAN);
            System.out.println(vaList.nextVarg(ValueLayout.JAVA_INT));
        }

On MacOS x86 the result is

-78

In the OpenJDK implementation behaves correctly, the spec of ::skip would benefit from more detailed explaination or some references or hints.",,,,,,,,,,JDK-8291417,JDK-8290186,JDK-8291293,,,,,,,,,,,,,,,,,,,,JDK-8291359,,JDK-8289148,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xnmj:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-07-04 04:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/91
Date: 2022-06-29 13:40:01 +0000;;;","2022-07-12 04:29;dukebot;Changeset: 3164c98f
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2022-07-12 11:25:45 +0000
URL:       https://git.openjdk.org/jdk19/commit/3164c98f4c02a48cad62dd4f9b6cc55d64ac6d83
;;;","2022-07-27 10:11;dbessono;It seems that this bug is covered formally by https://github.com/openjdk/jdk19/pull/91 and CSR https://bugs.openjdk.org/browse/JDK-8289540

However PR is :

""This patch changes all VaList implementations to throw NoSuchElementException when out of bounds reads occur on a VaList that is created using the Java builder API. The docs are updated accordingly.""

and CSR is :

Summary ""Change the VaList::nextVarg methods to try and detect out-of-bounds reads, and throw NoSuchElementException in such cases.""

It's still not clear from the existing specification of ::skip() what is the expected output for the code sample provided.

Filed JDK-8291359
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
P11Cipher should not throw out of bounds exception during padding,JDK-8289301,5078010,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,valeriep,zzambers,zzambers,2022-06-28 05:53,2023-03-21 04:35,2023-10-01 09:56,2022-07-07 11:21,,,,,,,20,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,"SunPkcs11 provider throws out of bounds exception during encryption when specific conditions are met.

Exception:
Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException: Array index out of range: 32
	at java.base/java.util.Arrays.rangeCheck(Arrays.java:725)
	at java.base/java.util.Arrays.fill(Arrays.java:3308)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11Cipher$PKCS5Padding.setPaddingBytes(P11Cipher.java:96)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11Cipher.implDoFinal(P11Cipher.java:813)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11Cipher.engineDoFinal(P11Cipher.java:585)
	at java.base/javax.crypto.Cipher.doFinal(Cipher.java:2417)
...

Details:
This problems happens when reqBlockUpdates is true and implUpdate, which does not end on block boundary, is performed followed by final implUpdate, which ends exactly on block boundary. In that case final implUpdate fills padBuffer and then just returns. [1] Following implDoFinal then tries to add padding and throws OOB exception. Problem is, that in this case (input is multiple of block size) whole padding block should be added, but there is no space for it in padBuffer causing OOB exception.

Solution:
Solution is to detect this case (implDoFinal is called with full padBuffer) and to perform additional C_EncryptUpdate to free up padBuffer so that padBuffer can than be used to add whole new padding block.

[1] https://github.com/openjdk/jdk/blob/master/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11Cipher.java#L622",,,,,,,,,,JDK-8304653,JDK-8297459,JDK-8303956,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xnfn:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,Verified,,"2022-06-28 06:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9310
Date: 2022-06-28 12:57:21 +0000;;;","2022-07-05 14:21;valeriep;Already reviewing the external PR.;;;","2022-07-07 11:21;dukebot;Changeset: 3e60e828
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Valerie Peng <valeriep@openjdk.org>
Date:      2022-07-07 18:18:04 +0000
URL:       https://git.openjdk.org/jdk/commit/3e60e828148a0490a4422d0724d15f3eccec17f0
;;;","2022-09-21 04:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/706
Date: 2022-09-21 11:07:26 +0000;;;","2022-09-21 04:38;zzambers;Fix request (17u): 

Fix for possible OOB exception by P11Cipher.
Clean backport, passed jdk_security tests. (should be low risk);;;","2023-03-01 06:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1786
Date: 2023-03-01 14:02:25 +0000;;;","2023-03-01 06:11;zzambers;Fix request (11u):

Fix for possible OOB exception by P11Cipher.
Clean backport, passed jdk_security tests. (should be low risk);;;","2023-03-15 08:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/287
Date: 2023-03-15 15:12:36 +0000;;;","2023-03-15 11:20;zzambers;Fix request (8u):

Fix for possible OOB exception by P11Cipher.
jdk_security OK. (added test passes, no regressions; should be low risk) ;;;",,,,,,,,,,,,,,,,,,,,,,,,
"HttpServer sets incorrect value for ""max"" parameter in Keep-Alive header value",JDK-8289291,5078001,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2022-06-28 04:15,2022-07-07 01:17,2023-10-01 09:56,2022-06-29 18:46,11,17,19,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,"The sun.net.httpserver.ServerImpl which is used by HttpServer and HttpsServer, sets the Keep-Alive header value. This header value is set with a ""timeout"" parameter and a ""max"" parameter. Right now, the implementation sets the value for ""max"" as the number of maximum idle connections that have been configured for the server. This is incorrect.

RFC-2068 in it's section 19.7.1.1 states that HTTP/1.1 specification doesn't specify any parameters that are meant to be set in the Keep-Alive header https://www.rfc-editor.org/rfc/rfc2068#section-19.7.1.1, so that spec doesn't specify the ""max"" parameter.
Other references for this parameter, like the Mozilla developer network states that the ""max"" value represents ""An integer that is the maximum number of requests that can be sent on this connection before closing it."" 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xndn:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-06-29 03:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9326
Date: 2022-06-29 10:20:42 +0000;;;","2022-06-29 18:46;dukebot;Changeset: dddd4e7c
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-06-30 01:43:11 +0000
URL:       https://git.openjdk.org/jdk/commit/dddd4e7c81fccd82b0fd37ea4583ce1a8e175919
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk.tracePinnedThreads output confusing when pinned due to native frame,JDK-8289284,5077996,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2022-06-28 03:07,2023-01-31 03:44,2023-10-01 09:56,2022-07-13 08:06,19,20,,,,,20,core-libs,,0,loom,,,,,,,,,,,,,,,,,"Running with -Djdk.tracePinnedThreads=full or -Djdk.tracePinnedThreads=short provides a stack trace when parking a virtual thread pins its carrier. If the reason for the pinning is a native frame, the output is currently:

$CLASS.$METHOD(Native Method)) <== monitors:0

The ""<== monitors"" suffix should not be printed for native frames.

A secondary issue is that there is no stack trace when there is Panama downcall as there isn't a ""native frame"" to show in the output.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xncj:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-06-28 07:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9308
Date: 2022-06-28 10:44:01 +0000;;;","2022-07-13 08:06;dukebot;Changeset: f528124f
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-07-13 15:03:37 +0000
URL:       https://git.openjdk.org/jdk/commit/f528124f571a29da49defbef30eeca04ab4a00ce
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Suspend/ResumeAllVirtualThreads need both can_suspend and can_support_virtual_threads ,JDK-8289278,5077990,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alanb,alanb,alanb,2022-06-28 00:24,2022-07-27 12:03,2023-10-01 09:56,2022-06-30 01:52,19,,,,,,19,hotspot,,0,loom,noreg-doc,,,,,,,,,,,,,,,,"This issue was spotted by David Holmes.

SuspendAllVirtualThreads and ResumeAllVirtualThreads require the can_suspend and can_support_virtual_threads capabilities but the JVMTI spec is generated with:

""One of the following capabilities (as returned by GetCapabilities) must be true to use this function""

It should say ""The following capabilities ..."".  The issue seems to be in the XSL used to generate the spec. ",,,,,,,,,,JDK-8289560,JDK-8291371,JDK-8291208,,,,,,,,,,,,,,,,,,,JDK-8289287,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xnb7:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-06-29 06:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/82
Date: 2022-06-28 09:02:59 +0000;;;","2022-06-30 01:52;dukebot;Changeset: c20b3aa9
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-06-30 08:49:32 +0000
URL:       https://git.openjdk.org/jdk19/commit/c20b3aa9c5ada4c87b3421fbc3290f4d6a4706ac
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove incorrect __declspec(dllimport) attributes from pointers in jdk.crypto.cryptoki,JDK-8289275,5077989,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2022-06-28 00:06,2022-07-27 19:56,2023-10-01 09:56,2022-07-21 12:15,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,"Several instances of function pointers in jdk.crypto.cryptoki are marked with the dllimport attribute, which should only be applied to symbol declarations, as stated in the official documentation:

""A program that uses public symbols defined by a DLL is said to import them. When you create header files for applications that use your DLLs to build with, use __declspec(dllimport) on the declarations of the public symbols. The keyword __declspec(dllimport) works whether you export with .def files or with the __declspec(dllexport) keyword.""

In addition to being incorrect, at least on the versions of Visual C++ the JDK supports today, it is also redundant; Typically they are used to avoid an indirect stub that jumps to the proper entry in the import address table, but usage of these typedefs involves loading the address of a function and directly (Usually through GetProcAddress) and assigning it to the pointer before immediately dispatching when called, which bypasses this procedure entirely and making the attribute pointless.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xnaz:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2022-06-28 00:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9304
Date: 2022-06-28 07:12:07 +0000;;;","2022-07-01 19:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9353
Date: 2022-07-02 02:12:15 +0000;;;","2022-07-21 12:14;dukebot;Changeset: 0dda3c14
Author:    Julian Waters <jwaters@openjdk.org>
Committer: Valerie Peng <valeriep@openjdk.org>
Date:      2022-07-21 19:11:40 +0000
URL:       https://git.openjdk.org/jdk/commit/0dda3c14ebe040158dcc5a87d349d5286c48b573
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BigDecimal movePointLeft() and movePointRight() do not follow their API spec,JDK-8289260,5077869,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,webbuggrp,webbuggrp,2022-06-25 07:31,2023-01-31 03:44,2023-10-01 09:56,2022-07-06 09:24,17,18,19,,,,20,core-libs,,0,dcsaw,release-note=yes,reproducer-yes,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
A previous bug report was filed as JDK-8183912 which was fixed and now causes these two functions to not allocate a new BigDecimal if called with n==0 argument. However, this behavior can be wrong according to the java docs for each function. The last sentence of movePointLeft() says ""The BigDecimal returned by this call has value (this × 10-n) and scale max(this.scale()+n, 0).""

Example:
    new BigDecimal(""1e3"").movePointLeft(0);
result on jdk 17 is 1e3 (scale -3)
However, the expected scale according to the java docs is max(this.scale()+n, 0) which is max(-3, 0) or scale of 0.
Therefore the expected value is 1000 (scale 0). This behavior seems to be correct in older versions of Java.


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289504,,,,,,,,,,,,JDK-8289934,,,,JDK-8183912,,,,,,,"2022-06-27 22:21;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/99714/Main.java",,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xmkb:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28853e3d,,,,,,,Verified,,"2022-06-27 22:19;tongwan;The observations on Windows 10:
JDK 11: The result is 1000
JDK 17: The result is 1E+3
JDK 18: The result is 1E+3
JDK 19ea+25: The result is 1E+3;;;","2022-06-28 02:02;rgiulietti;The reporter is right.

JDK-8183912 should be partially reverted back and part the old behavior restored. That is,
BigDecimal.valueOf(1, -3).movePointLeft(0)
should return 1000, not 1E+3.

However,
BigDecimal.valueOf(1, 3).movePointLeft(0)
can avoid returning a copy.

Alternatively, the spec of BD.movePoint[Left|Right]() should be reviewed, in particular the last sentence about the scale of the result.;;;","2022-06-28 03:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9307
Date: 2022-06-28 10:09:36 +0000;;;","2022-07-06 09:24;dukebot;Changeset: 35387d5c
Author:    Raffaello Giulietti <rgiulietti@openjdk.org>
Committer: Joe Darcy <darcy@openjdk.org>
Date:      2022-07-06 16:22:18 +0000
URL:       https://git.openjdk.org/jdk/commit/35387d5cb6aa9e59d62b8e1b137b53ec88521310
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some custom loader tests failed due to symbol refcount not decremented,JDK-8289257,5077972,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,tr,tr,2022-06-27 21:34,2022-10-04 11:33,2023-10-01 09:56,2022-07-01 09:13,20,,,,,,20,hotspot,,0,cds,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,parallel,problemlist,tier3,tier6,zgc,,,,,,,,,"Failing tests:

runtime/cds/appcds/customLoader/HelloCustom.java 
 runtime/cds/appcds/customLoader/HelloCustom_JFR.java
 runtime/cds/appcds/dynamicArchive/HelloDynamicCustomUnload.java

In Windows, Linux and MacOS.
",,,,,,,,,,JDK-8294799,JDK-8292366,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288651,,,,JDK-8289184,,,,,,,,,,,,,,,,,,,generic,,,,,,,20,,generic,,,,,"0|i2xn77:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-27 21:47;ccheung;Failures only reproducible with ZGC.

class CustomLoadee
java.net.URLClassLoader@6b884d57
Refcount of symbol HelloClassLoader1656391539612 is 2
Is CustomLoadee alive? false
Refcount of symbol HelloClassLoader1656391539612 is 2

Exception in thread ""main"" jdk.test.lib.classloader.ClassUnloadCommon$TestFailure: Test failed: Refcount must be decremented
        at jdk.test.lib.classloader.ClassUnloadCommon.failIf(ClassUnloadCommon.java:50)
        at HelloUnload.main(HelloUnload.java:116)
]
 exitValue = 1;;;","2022-06-27 21:49;ccheung;Will problem list it in ProblemList-zgc.txt.;;;","2022-06-29 08:07;dcubed;Here's a log file snippet for the jdk-20+4-164-tier3 sighting:

runtime/cds/appcds/dynamicArchive/HelloDynamicCustomUnload.java

[0.277s][info ][class,load] java.lang.invoke.LambdaForm$MH/0x0000000801005c00 source: __JVM_LookupDefineClass__
Refcount of symbol HelloClassLoader1656512778654 is 2
[0.307s][info ][class,unload] unloading class CustomLoadee 0x0000000801002000
[0.321s][info ][class,load  ] java.lang.invoke.LambdaForm$MH/0x0000000801002000 source: __JVM_LookupDefineClass__
[0.322s][info ][class,load  ] java.lang.invoke.LambdaForm$MH/0x0000000801002400 source: __JVM_LookupDefineClass__
[0.323s][info ][class,load  ] java.lang.invoke.LambdaForm$MH/0x0000000801006000 source: __JVM_LookupDefineClass__
[0.323s][info ][class,load  ] java.lang.invoke.LambdaForm$MH/0x0000000801006400 source: __JVM_LookupDefineClass__
[0.324s][info ][class,load  ] java.lang.invoke.LambdaForm$MH/0x0000000801006800 source: __JVM_LookupDefineClass__
Is CustomLoadee alive? false
Refcount of symbol HelloClassLoader1656512778654 is 2
[0.326s][info ][class,load  ] java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode source: shared objects file (top)
[0.326s][info ][class,load  ] java.io.RandomAccessFile$1 source: shared objects file
[0.327s][info ][class,load  ] java.lang.invoke.LambdaForm$MH/0x0000000801006c00 source: __JVM_LookupDefineClass__
[0.327s][info ][class,load  ] java.lang.Throwable$PrintStreamOrWriter source: jrt:/java.base
[0.327s][info ][class,load  ] java.lang.Throwable$WrappedPrintStream source: jrt:/java.base
[0.328s][info ][class,load  ] java.util.IdentityHashMap$IdentityHashMapIterator source: shared objects file
[0.328s][info ][class,load  ] java.util.IdentityHashMap$KeyIterator source: shared objects file
[0.329s][info ][class,load  ] java.lang.Shutdown source: shared objects file
[0.329s][info ][class,load  ] java.lang.Shutdown$Lock source: shared objects file
];
 stderr: [Exception in thread ""main"" jdk.test.lib.classloader.ClassUnloadCommon$TestFailure: Test failed: Refcount must be decremented
	at jdk.test.lib.classloader.ClassUnloadCommon.failIf(ClassUnloadCommon.java:50)
	at HelloUnload.main(HelloUnload.java:116)
]
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)
	at HelloDynamicCustomUnload.lambda$doTest$1(HelloDynamicCustomUnload.java:93)
	at jdk.test.lib.cds.CDSTestUtils$Result.assertNormalExit(CDSTestUtils.java:149)
	at HelloDynamicCustomUnload.doTest(HelloDynamicCustomUnload.java:90)
	at HelloDynamicCustomUnload.testDefaultBase(HelloDynamicCustomUnload.java:57)
	at DynamicArchiveTestBase.runTest(DynamicArchiveTestBase.java:76)
	at HelloDynamicCustomUnload.main(HelloDynamicCustomUnload.java:52)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
----------rerun:(37/9653)*----------

The test task's JVM args are:

-XX:+CreateCoredumpOnCrash -XX:+UseParallelGC -XX:+UseNUMA

so this bug also happens with ParallelGC.

;;;","2022-06-29 16:54;ccheung;The failure with ParallelGC is intermittent; I couldn't reproduce it running 20 times on the same host.;;;","2022-06-30 15:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9340
Date: 2022-06-30 22:28:26 +0000;;;","2022-07-01 05:17;coleenp;Why isn't the refcount decremented?  Ok, assume that it's because concurrent symbol table cleaning hasn't happened yet.

I linked another bug to this.  I think triggerUnloading() is wholly insufficient for making sure classes are unloaded.  Not sure what the fix is.  Maybe adding WB.fullGC() to triggerUnloading()?;;;","2022-07-01 09:13;dukebot;Changeset: c43bdf71
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-07-01 16:11:17 +0000
URL:       https://git.openjdk.org/jdk/commit/c43bdf716596053ebe473c3b3bd5cf89482b9b01
;;;","2022-09-29 07:21;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport except for ProblemLIst. Depends on JDK-8288651.
Tests mentioned above pass. SAP nightly testing passed.;;;","2022-09-29 07:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/756
Date: 2022-09-29 14:19:49 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
update Eclipse .classpath and other configuration files,JDK-8289255,5077970,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2022-06-27 15:30,2022-09-10 06:50,2023-10-01 09:56,2022-07-11 12:50,,,,,,,jfx19,javafx,,0,noreg-cleanup,sn_121,sn_122,,,,,,,,,,,,,,,"Attempting to build jfx with the latest Eclipse Version: 2022-06 (4.24.0) results in 13,517 errors and 63 warnings, mostly due to misconfigured *.classpath* files.

Example:

```
Description	Resource	Location	Path
AfterAll cannot be resolved to a type	DoubleShortcutProcessingTest.java	line 78	/systemTests/src/test/java/test/robot/javafx/scene
Assertions cannot be resolved	DoubleShortcutProcessingTest.java	line 68	/systemTests/src/test/java/test/robot/javafx/scene
Assertions cannot be resolved	DoubleShortcutProcessingTest.java	line 159	/systemTests/src/test/java/test/robot/javafx/scene
Assertions cannot be resolved	DoubleShortcutProcessingTest.java	line 162	/systemTests/src/test/java/test/robot/javafx/scene
Assumptions cannot be resolved	DoubleShortcutProcessingTest.java	line 64	/systemTests/src/test/java/test/robot/javafx/scene
BeforeAll cannot be resolved to a type	DoubleShortcutProcessingTest.java	line 72	/systemTests/src/test/java/test/robot/javafx/scene
Test cannot be resolved to a type	DoubleShortcutProcessingTest.java	line 62	/systemTests/src/test/java/test/robot/javafx/scene
The import org.junit.jupiter cannot be resolved	DoubleShortcutProcessingTest.java	line 33	/systemTests/src/test/java/test/robot/javafx/scene
The import org.junit.jupiter cannot be resolved	DoubleShortcutProcessingTest.java	line 34	/systemTests/src/test/java/test/robot/javafx/scene
```

NOTES

1. This is my first PR, so any feedback will be greatly appreciated!
2. jfx/ should be imported in Eclipse workspace as a gradle project.  After it is imported, all modified files need to be *reverted*
3. The list of supported projects is:
- base
- controls
- fxml
- graphics
- jfx
- media
- swing
- swt
- systemTests (can be dropped in favor ot tests
- tests
- web
4. the list of projects not (yet) supported:
- apps
- apps/*
- buildSrc
These projects need to be removed from the workspace or simply closed.  The work on these projects might continue together with apps cleanup, see JDK-8221708
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289379,,JDK-8290473,,,,,,,,,,,,,,,JDK-8221708,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xn6r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-06-29 08:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/804
Date: 2022-06-27 23:19:36 +0000;;;","2022-07-11 12:50;dukebot;Changeset: 437c078a
Author:    Andy Goryachev <andy.goryachev@oracle.com>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2022-07-11 19:45:50 +0000
URL:       https://git.openjdk.org/jfx/commit/437c078abe32b1aa8a4a99987454efeae5358c6b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Recommend Locale.of() method instead of the constructor,JDK-8289252,5077965,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2022-06-27 14:53,2022-07-27 12:02,2023-10-01 09:56,2022-06-29 08:51,19,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"In `Locale.Builder` class, there are a couple of locations that recommend the 3-arg `Locale` constructor. This should be replaced with the 3-arg `Locale.of()` method as the constructors are now deprecated.",,,,,,,,,,JDK-8291370,JDK-8291207,JDK-8289489,,,,,,,,,,,,,,,,,,,JDK-8289254,,,,,,,,,,,,,,,,JDK-8282819,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xn5n:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2022-06-28 10:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/85
Date: 2022-06-28 17:11:31 +0000;;;","2022-06-29 08:51;dukebot;Changeset: cf715449
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-06-29 15:47:26 +0000
URL:       https://git.openjdk.org/jdk19/commit/cf7154498fffba202b74b41a074f25c657b2e591
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Refactoring changes to PassFailJFrame Test Framework,JDK-8289238,5077947,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2022-06-27 11:32,2023-07-06 03:08,2023-10-01 09:56,2022-06-29 11:39,,,,,,,20,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_121,testbug,,,,,,,,,,,,,"Currently the PassFailJFrame.positionTestFrame() and PassFailJFrame.addTestFrame() takes Frame as input parameter, this can be changed to Window. 

Additionally refactor these method names to reflect the functionality & input parameter type -
addTestFrame() to addTestWindow()
positionTestFrame() to positionTestWindow()

Benefits of the change -

- Since Window is a superclass, this would allow the test frame to be a Window/Frame/Dialog and not be restricted to a Frame. 

- Code reusability - no need to have separate methods to manage Frame and Window

- Additionally it would allow proper clean-up of window and its container subclasses which are added to the PassFailJFrame.",,,,,,,,,,JDK-8309892,JDK-8309789,JDK-8309664,JDK-8311028,JDK-8309651,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289077,JDK-8288444,JDK-8300134,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xn1n:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-06-27 11:43;honkar;This bug changes need to be integrated first before integrating JDK-8288444 changes;;;","2022-06-27 12:31;honkar;Add a test fail reason in ForceFail to avoid NPE https://github.com/openjdk/jdk/blob/master/test/jdk/java/awt/regtesthelpers/PassFailJFrame.java#L316-L319;;;","2022-06-27 18:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9300
Date: 2022-06-28 00:58:42 +0000;;;","2022-06-29 11:39;dukebot;Changeset: 15efb2bd
Author:    Harshitha Onkar <honkar@openjdk.org>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-06-29 18:36:38 +0000
URL:       https://git.openjdk.org/jdk/commit/15efb2bdeb73e4e255dcc864be1a83450a2beaa8
;;;","2023-06-23 08:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1495
Date: 2023-06-23 15:41:49 +0000;;;","2023-06-27 07:31;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.9-oracle. PrintAllPagesTest.java and HtmlScriptTagParserTest.java are not in 17u. Rest applies cleanly (already reviewed).;;;","2023-06-29 07:58;goetz;[11u hint]
If you adress backporting this, please first backport 8286620:;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
SegmentAllocator::allocateArray null handling is too lax,JDK-8289228,5077935,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-06-27 09:33,2022-10-09 23:38,2023-10-01 09:56,2022-06-28 03:08,19,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,"When fixing JDK-8289188, a change was made to make SegmentAllocator::allocateArray accept nulls (and infer array size == 0). This change was not necessary, as the static compiler always creates zero-length arrays for empty varargs.",,,,,,,,,,JDK-8291193,JDK-8289413,JDK-8291350,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xmyz:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-06-27 09:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/76
Date: 2022-06-27 16:47:32 +0000;;;","2022-06-28 03:08;dukebot;Changeset: adbd200d
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-06-28 10:06:42 +0000
URL:       https://git.openjdk.org/jdk19/commit/adbd200dc59c31ad582b51468ec39af5a64db664
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem Listing test failure jdk/test/java/awt/Focus/8000326/SetFocusTraversalKeysEnabledTest.java,JDK-8289225,5077931,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-06-27 07:46,2022-07-08 01:46,2023-10-01 09:56,2022-07-05 23:40,8,,,,,,8u351,client-libs,,0,noreg-self,,,,,,,,,,,,,,,,,"https://bugs.openjdk.org/browse/JDK-8289214 is causing the test to fail and till the time that it is resolved we need to mark it  appropriately in the Problem List file.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289214,,,,JDK-8282046,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xmy3:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test failure jdk/test/java/awt/Focus/8000326/SetFocusTraversalKeysEnabledTest.java,JDK-8289214,5077917,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-06-27 04:54,2023-04-09 13:43,2023-10-01 09:56,2023-03-23 21:48,8,,,,,,8u381,client-libs,,0,noreg-self,sqebug,testbug,,,,,,,,,,,,,,,"Test is failing due to a timing issue only on jdk8u-cpu for linux platform. 
The test need to be tweaked to ensure there is sufficient delay before the UI comes up and validates the focus in the test code.

",,,,,,,,,,JDK-8305034,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289225,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2xmuz:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test DrawRotatedStringUsingRotatedFont.java occasionally crashes on MacOS,JDK-8289208,5077909,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mkartashev,mkartashev,mkartashev,2022-06-27 03:28,2022-08-17 18:06,2023-10-01 09:56,2022-08-12 08:41,17,18,19,20,,,20,client-libs,,0,,,,,,,,,,,,,,,,,,"To reproduce:

$ __jtreg_home=[path to jtreg home]
$ __test_jdk=[path to test jdk home]
$ __test=test/jdk/java/awt/Graphics2D/DrawString/DrawRotatedStringUsingRotatedFont.java
$ while true; do $__jtreg_home/bin/jtreg -v -a -testjdk:$__test_jdk $__test || break; done

It could take anywhere between 10 seconds and 20 minutes to crash on MacOS.

With additional logging and malloc debugging on (export MallocDebugReport=crash), the error appears to come from a ""bad"" free():

java(75464,0x700010d80000) malloc: *** error for object 0x7ff636c574a0: pointer being freed was not allocated
java(75464,0x700010d80000) malloc: *** set a breakpoint in malloc_error_break to debug

allocated from here
0x0000000107afc4e0(0x00007ff636c574a0)
java.lang.Exception
	at java.desktop/sun.java2d.DefaultDisposerRecord.<init>(DefaultDisposerRecord.java:55)
	at java.desktop/sun.java2d.Disposer.addRecord(Disposer.java:107)
	at java.desktop/sun.awt.image.BufImgSurfaceData.initRaster(Native Method)
	at java.desktop/sun.awt.image.BufImgSurfaceData.createDataIC(BufImgSurfaceData.java:274)
	at java.desktop/sun.awt.image.BufImgSurfaceData.createData(BufImgSurfaceData.java:92)
	at java.desktop/sun.awt.image.BufImgSurfaceData.createData(BufImgSurfaceData.java:74)
	at java.desktop/sun.awt.image.BufImgSurfaceManager.<init>(BufImgSurfaceManager.java:55)
	at java.desktop/sun.awt.image.SurfaceManager.getManager(SurfaceManager.java:79)
	at java.desktop/sun.java2d.SurfaceData.getPrimarySurfaceData(SurfaceData.java:275)
	at java.desktop/sun.java2d.SunGraphicsEnvironment.createGraphics(SunGraphicsEnvironment.java:170)
	at java.desktop/java.awt.image.BufferedImage.createGraphics(BufferedImage.java:1183)
	at DrawRotatedStringUsingRotatedFont.createImage(DrawRotatedStringUsingRotatedFont.java:130)
	at DrawRotatedStringUsingRotatedFont.main(DrawRotatedStringUsingRotatedFont.java:74)


Also getting errors like this (with additional stacktrace added) that are probably related:
Exception while disposing deferred rec: java.lang.NullPointerException: Cannot invoke ""sun.java2d.DisposerRecord.dispose()"" because ""rec"" is null
java.lang.NullPointerException: Cannot invoke ""sun.java2d.DisposerRecord.dispose()"" because ""rec"" is null
	at java.desktop/sun.java2d.Disposer.clearDeferredRecords(Disposer.java:176)
	at java.desktop/sun.java2d.Disposer.run(Disposer.java:151)
	at java.base/java.lang.Thread.run(Thread.java:833)

With SIGABRT caught by HotSpot (again, additional code not present in OpenJDK), this is the usual crash log excerpt:

Current thread (0x00007fa048172c00):  JavaThread ""Java2D Disposer"" daemon [_thread_in_native, id=60939, stack(0x0000700002c44000,0x0000700002d44000)]

Stack: [0x0000700002c44000,0x0000700002d44000],  sp=0x0000700002d43778,  free space=1021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libsystem_kernel.dylib+0x732a]  __pthread_kill+0xa
C  [libsystem_c.dylib+0x7f808]  abort+0x78
C  [libsystem_malloc.dylib+0xf50b]  has_default_zone0+0x0
C  [libsystem_malloc.dylib+0x1240f]  malloc_report+0x97
j  sun.java2d.DefaultDisposerRecord.invokeNativeDispose(JJ)V+0 java.desktop@17.0.3-internal
j  sun.java2d.DefaultDisposerRecord.dispose()V+8 java.desktop@17.0.3-internal
j  sun.java2d.Disposer.clearDeferredRecords()V+40 java.desktop@17.0.3-internal
j  sun.java2d.Disposer.run()V+35 java.desktop@17.0.3-internal
j  java.lang.Thread.run()V+11 java.base@17.0.3-internal
v  ~StubRoutines::call_stub
V  [libjvm.dylib+0x5199f1]  _ZN9JavaCalls11call_helperEP9JavaValueRK12methodHandleP17JavaCallArgumentsP10JavaThread+0x2a1
V  [libjvm.dylib+0x518a67]  _ZN9JavaCalls12call_virtualEP9JavaValueP5KlassP6SymbolS5_P17JavaCallArgumentsP10JavaThread+0x147
V  [libjvm.dylib+0x518b33]  _ZN9JavaCalls12call_virtualEP9JavaValue6HandleP5KlassP6SymbolS6_P10JavaThread+0x63
V  [libjvm.dylib+0x5c4c94]  _ZL12thread_entryP10JavaThreadS0_+0xb4
V  [libjvm.dylib+0xa9d2f7]  _ZN10JavaThread17thread_main_innerEv+0x147
V  [libjvm.dylib+0xa9b70a]  _ZN6Thread8call_runEv+0x11a
V  [libjvm.dylib+0x8aa978]  _ZL19thread_native_entryP6Thread+0x148
C  [libsystem_pthread.dylib+0x6109]  _pthread_start+0x94
C  [libsystem_pthread.dylib+0x1b8b]  thread_start+0xf

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  sun.java2d.DefaultDisposerRecord.invokeNativeDispose(JJ)V+0 java.desktop@17.0.3-internal
j  sun.java2d.DefaultDisposerRecord.dispose()V+8 java.desktop@17.0.3-internal
j  sun.java2d.Disposer.clearDeferredRecords()V+40 java.desktop@17.0.3-internal
j  sun.java2d.Disposer.run()V+35 java.desktop@17.0.3-internal
j  java.lang.Thread.run()V+11 java.base@17.0.3-internal
v  ~StubRoutines::call_stub

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292304,JDK-6899078,JDK-6554048,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,"0|i2xmt7:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-06-28 08:48;mkartashev;This looks like a regression caused by JDK-6899078.;;;","2022-07-04 02:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9362
Date: 2022-07-04 09:31:05 +0000;;;","2022-08-12 08:41;dukebot;Changeset: 00decca4
Author:    Maxim Kartashev <mkartashev@openjdk.org>
Committer: Alexey Ushakov <avu@openjdk.org>
Date:      2022-08-12 15:37:18 +0000
URL:       https://git.openjdk.org/jdk/commit/00decca46a77ea9390081655b069008aacfea525
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[17u] Push of backport of 8286177 did not remove assertion,JDK-8289197,5077896,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,goetz,goetz,goetz,2022-06-27 00:00,2023-04-27 04:29,2023-10-01 09:56,2022-06-27 00:58,17.0.5,,,,,,17.0.5,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,oraclejdk-na,oracle-triage-20,,,,,,,,,,,,,,"When backport of 8286177 was pushed removing the assertion was missed.
compiler/loopopts/superword/TestHoistedReductionNode.java runs into this assertion.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286177,JDK-8289130,,,,,,,,,,,,,,,,,,,,,,,,,17.0.5,,,,,,,"0|i2xmqb:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-27 00:02;goetz;Fix request [17u]

Required fix for a backport I pushed wrongly.
No risk, trivial change.;;;","2022-06-27 00:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/509
Date: 2022-06-27 07:07:41 +0000;;;","2022-06-27 00:58;dukebot;Changeset: 0ea78e56
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2022-06-27 07:55:30 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/0ea78e56d86badb2e0cf831b65059fe3b1c0ad1d
;;;","2022-08-03 13:32;dukebot;Changeset: 0ea78e56
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2022-06-27 07:55:30 +0000
URL:       https://git.openjdk.org/jdk17u/commit/0ea78e56d86badb2e0cf831b65059fe3b1c0ad1d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Pattern domination not working properly for record patterns,JDK-8289196,5077895,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jlahoda,jlahoda,jlahoda,2022-06-26 23:58,2022-08-09 05:15,2023-10-01 09:56,2022-07-07 00:56,19,,,,,,19,tools,,0,conformance,tck-red-19,,,,,,,,,,,,,,,,"Consider this code:
---
class RecordPatternDomination {
    void test(Object o) {
        switch (o) {
            case R(int i) -> {}
            case R(int i) -> {} //error here - the pattern is dominated
            default -> {}
        }
    }
    record R(int i) {}
}
---

This should produce an error, because the second `R(int i)` pattern dominates the first one (JLS 14.30.3), but it does no produce it.",,,,,,,,,,JDK-8291232,JDK-8289969,JDK-8291394,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xmq3:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2022-06-28 06:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/84
Date: 2022-06-28 13:11:25 +0000;;;","2022-07-07 00:56;dukebot;Changeset: 8dd94a2c
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-07-07 07:54:18 +0000
URL:       https://git.openjdk.org/jdk19/commit/8dd94a2c14f7456b3eaf3e02f38d9e114eb8acc3
;;;","2022-08-09 05:15;jlahoda;Result from JDK 19:
$ javac --enable-preview -source 19 /tmp/RecordPatternDomination.java 
/tmp/RecordPatternDomination.java:5: error: this case label is dominated by a preceding case label
            case R(int i) -> {} //error here - the pattern is dominated
                 ^
Note: /tmp/RecordPatternDomination.java uses preview features of Java SE 19.
Note: Recompile with -Xlint:preview for details.
1 error
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SegmentAllocator:allocateArray(*) default behavior mismatch to spec,JDK-8289188,5077876,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,kganapureddy,kganapureddy,2022-06-26 04:13,2022-07-27 09:27,2023-10-01 09:56,2022-06-27 08:41,19,,,,,,19,core-libs,,0,conformance,,,,,,,,,,,,,,,,,"As per the spec of 
https://download.java.net/java/early_access/jdk19/docs/api/java.base/java/lang/foreign/SegmentAllocator.html#allocateArray(java.lang.foreign.ValueLayout.OfByte,byte...)

""Implementation Requirements:
the default implementation for this method calls this.allocateArray(layout, array.length).""

Expectations :

invoking SegmentAllocator:allocateArray(*) shall delegate a call to allocateArray(MemoryLayout elementLayout,  long count)

Actual :

The method allocateArray(MemoryLayout elementLayout,
 long count) not invoked
",,,,,,,,,,JDK-8291345,JDK-8289408,JDK-8291160,,,,,,,,,,,,,,,,,,,,JDK-8289570,,,,,,,,,,,JDK-8282192,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xmlv:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-06-27 06:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/74
Date: 2022-06-27 11:01:59 +0000;;;","2022-06-27 08:41;dukebot;Changeset: 2c8ada68
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-06-27 15:37:08 +0000
URL:       https://git.openjdk.org/jdk19/commit/2c8ada689f7bcfc39a04b0bf36c9aea156d47690
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"runtime/ClassUnload/DictionaryDependsTest.java failed with ""Test failed: should be unloaded""",JDK-8289184,5077868,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,dcubed,dcubed,2022-06-25 06:29,2022-07-18 12:32,2023-10-01 09:56,2022-07-11 08:39,20,,,,,,20,hotspot,,0,classloading,tier7,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

runtime/ClassUnload/DictionaryDependsTest.java

Here's a snippet from the log file:

#section:main
----------messages:(5/486)----------
command: main -Xbootclasspath/a:. -Xmn8m -XX:+UnlockDiagnosticVMOptions -Xlog:class+unload -XX:+WhiteBoxAPI DictionaryDependsTest
reason: User specified action: run main/othervm -Xbootclasspath/a:. -Xmn8m -XX:+UnlockDiagnosticVMOptions -Xlog:class+unload -XX:+WhiteBoxAPI DictionaryDependsTest 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,java.compiler --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
elapsed time (seconds): 1.082
----------configuration:(4/111)----------
Boot Layer
  add modules: java.base java.compiler     
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(6/219)----------
name is DictionaryDependsTest$c1r
name is p2.c2
c2 method2 called
c2 method2 called
Should not unload anything before here because class DictionaryDependsTest$c1r is still alive.
Should unload MyTest and p2.c2 just now
----------System.err:(12/830)----------
jdk.test.lib.classloader.ClassUnloadCommon$TestFailure: Test failed: should be unloaded
	at jdk.test.lib.classloader.ClassUnloadCommon.failIf(ClassUnloadCommon.java:50)
	at DictionaryDependsTest.main(DictionaryDependsTest.java:87)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: jdk.test.lib.classloader.ClassUnloadCommon$TestFailure: Test failed: should be unloaded
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: jdk.test.lib.classloader.ClassUnloadCommon$TestFailure: Test failed: should be unloaded
----------rerun:(42/8447)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271707,,,,,,,,,JDK-8290116,,,,,,JDK-8289257,JDK-8290116,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x_10.15,,,,,"0|i2xmk3:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-30 08:43;coleenp;This test looks like the GC hadn't run class unloading because of timing.  From ClassUnloadCommon.java, all these tests use this function to trigger class unloading but this doesn't seem like it's guaranteed to actually do class unloading if the GC isn't ready to do so.  Maybe it should have another System.gc() ?  Maybe triggerUnloading() should use WhiteBox to make sure class unloading is done.

    public static void triggerUnloading() {
        allocateMemory(16 * 1024); // force young collection
        System.gc();
    };;;","2022-07-07 05:23;coleenp;Making ClassUnloadCommon.triggerUnloading() call WhiteBox.fullGC() is a more reliable way of making sure that the classes are unloaded.  Unfortunately, there are two versions of WhiteBox and we're trying to migrate towards the jdk.test.whitebox.WhiteBox version. The fan-out from including this version in ClassUnloadCommon is huge.  This is dependent on fixing JDK-8271707 first.;;;","2022-07-08 14:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9435
Date: 2022-07-08 21:49:38 +0000;;;","2022-07-11 08:39;dukebot;Changeset: 0c1aa2bc
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-07-11 15:34:17 +0000
URL:       https://git.openjdk.org/jdk/commit/0c1aa2bc8a1c23d8da8673a4fac574813f373f57
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
" jdk.jfr.consumer.RecordedThread.getId references Thread::getId, should be Thread::threadId",JDK-8289183,5077866,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,alanb,alanb,2022-06-24 23:27,2022-07-27 12:20,2023-10-01 09:56,2022-07-03 12:32,19,,,,,,19,hotspot,,0,noreg-doc,,,,,,,,,,,,,,,,,"Thread::getId has been deprecated in Java 19, its replacement is the final Thread:threadId method. We should update the reference in RecordedThread.getId to link to the replacement method.",,,,,,,,,,JDK-8291380,JDK-8291217,JDK-8289862,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xmjn:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-06-29 14:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/93
Date: 2022-06-29 20:57:30 +0000;;;","2022-07-03 12:31;dukebot;Changeset: dc4edd3f
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-07-03 19:28:39 +0000
URL:       https://git.openjdk.org/jdk19/commit/dc4edd3fe83038b03cad6b3652d12aff987f3987
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Blank final field 'dialog' may not have been initialized in scene.control.Dialog:521,JDK-8289171,5077852,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2022-06-24 14:14,2022-09-12 05:03,2023-10-01 09:56,2022-07-07 07:25,jfx18,,,,,,jfx19,javafx,,0,noreg-cleanup,sn_121,sn_122,,,,,,,,,,,,,,,"Eclipse emits the following error:

The blank final field dialog may not have been initialized	Dialog.java	line 521	/controls/src/main/java/javafx/scene/control

This is caused by the final 'dialog' field being accessed from within a property listener which is initialized before the constructor, where 'dialog' field itself is initialized.

Suggested fix: move the 'dialog' field initialization outside of the constructor to force a proper initialization sequence.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289379,,,,,,,,,,,,,JDK-8289777,,,,JDK-8097791,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xmgj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-06-24 16:42;kcr;This seems like a case of Eclipse being more strict than javac, since we don't get a build warning for that file during a gradle build (although we might if we turned on the right lint option).

The reference in question to this.dialog is in a lambda, so unless that lambda gets executed during the construction of the property (which it doesn't look like it does), this isn't really a bug in practice, although it is fragile.

We still should consider fixing it, though, since it is a questionable pattern.
;;;","2022-07-02 19:08;nlisker;This is known and has been brought up a couple of times in the mailing list, which is why I added a note about it in the Wiki: https://wiki.openjdk.org/display/OpenJFX/Using+an+IDE#UsinganIDE-ConfigureEclipsetousethelatestJDK.

It's a bug in Eclipse's compiler. The working solution is to fix it locally and ignore it when submitting. git-stash can be helpful here.

There is no merit to fix this just for Eclipse, but if it's bad in general and should be fixed, then Eclipse users will benefit doubly.;;;","2022-07-05 08:40;angorya;[~nlisker]:

I believe it *is* a bug, one missed by the javac compiler.  The key word 'final' suggests that the field 'dialog', being initialized in the constructor body, is not null.  

However, is *it* null before the constructor call, i.e. when other fields are initialized.  So if someone adds another field that depends on dialogPane, for instance, or if a change is made to HeavyweightDialog which results in an access to dialogPane, a NPE will be thrown.

Funny thing, I have encountered a similar issue before.
;;;","2022-07-05 14:19;nlisker;If you think it's a bug in javac I suggest you contact the compiler group. Eclipse treats the error as a bug. From what I understood, the specs don't cover this case.;;;","2022-07-05 14:28;angorya;I agree, I will contact javac group.

For the purposes of this PR, I would like this fixed, since I consider this a problem.
Here is a draft PR (has other dependencies, so please ignore files other than Dialog.java):
https://github.com/openjdk/jfx/pull/810/files#diff-50a78b9ef58130ff0c9c09f967605bd81ade4a80320d96e97dec60838afe441e;;;","2022-07-05 16:05;angorya;Created https://bugs.openjdk.org/browse/JDK-8289777 against javac.;;;","2022-07-06 11:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/815
Date: 2022-07-06 18:16:02 +0000;;;","2022-07-07 07:25;dukebot;Changeset: 4dcd9e06
Author:    Andy Goryachev <andy.goryachev@oracle.com>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2022-07-07 14:21:41 +0000
URL:       https://git.openjdk.org/jfx/commit/4dcd9e0656a84ff6afb62656ac1cb81ff09a0f6b
;;;","2022-07-07 07:30;nlisker;I updated the wiki to remove the note about this error in Eclipse.;;;",,,,,,,,,,,,,,,,,,,,,,,,
j.l.foreign.VaList::skip call could throw java.lang.IndexOutOfBoundsException: Out of bound access on segment,JDK-8289156,5077832,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,dbessono,dbessono,2022-06-24 09:02,2022-07-27 13:43,2023-10-01 09:56,2022-07-12 04:30,19,,,,,,19,core-libs,,0,conformance,,,,,,,,,,,,,,,,,"The following code or similar when run on MacOS AArch64

        VaList vaList = VaList.make(b -> b.addVarg(ValueLayout.JAVA_LONG, 1), MemorySession.openShared());
        vaList.skip(ValueLayout.JAVA_LONG);
        vaList.skip(ValueLayout.JAVA_LONG);
        vaList.skip(ValueLayout.JAVA_LONG);
        vaList.skip(ValueLayout.JAVA_LONG);
        vaList.skip(ValueLayout.JAVA_LONG);

leads to 

Exception in thread ""main"" java.lang.IndexOutOfBoundsException: Out of bound access on segment MemorySegment{ id=0x3a2eb306 limit: 0 }; new offset = 8; new length = 0
	at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.outOfBoundException(AbstractMemorySegmentImpl.java:416)
	at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.checkBounds(AbstractMemorySegmentImpl.java:400)
	at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.asSlice(AbstractMemorySegmentImpl.java:115)
	at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.asSlice(AbstractMemorySegmentImpl.java:67)
	at java.base/jdk.internal.foreign.abi.aarch64.macos.MacOsAArch64VaList.skip(MacOsAArch64VaList.java:134)

Specification could deserve clarification - for example mention of IndexOutOfBoundsException

https://download.java.net/java/early_access/jdk19/docs/api/java.base/java/lang/foreign/VaList.html#skip(java.lang.foreign.MemoryLayout...)

",,,,,,,,,,JDK-8291419,JDK-8290187,JDK-8291294,,,,,,,,,,,,,,,,,,,,,,JDK-8289148,JDK-8289148,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2xmc3:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-06-24 09:56;dbessono;The point and the request is to specify possible java.lang.IndexOutOfBoundsException thrown by method ::skip
;;;","2022-06-27 03:15;mcimadamore;This is actually a bit worse: while on Windows and MacOS (M1), the VaList implementation is simple enough (a single segment) so that an IOOBE is generated, this exception is not thrown on all platforms. On Linux (both x64 and aarch64), since the overflow area is saved in a separate segment for which the size is lost at construction time (as the overflow segment address is written inside the valist segment), it is currently not possible to check against size.;;;","2022-07-04 04:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/91
Date: 2022-06-29 13:40:01 +0000;;;","2022-07-12 04:30;dukebot;Changeset: 3164c98f
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2022-07-12 11:25:45 +0000
URL:       https://git.openjdk.org/jdk19/commit/3164c98f4c02a48cad62dd4f9b6cc55d64ac6d83
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
j.l.foreign.VaList::nextVarg call could throw IndexOutOfBoundsException or even crash the VM,JDK-8289148,5077824,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,dbessono,dbessono,2022-06-24 07:36,2022-07-27 13:40,2023-10-01 09:56,2022-07-12 04:29,19,,,,,,19,core-libs,,0,conformance,,,,,,,,,,,,,,,,,"The following code or similar

        VaList vaList = VaList.make(builder -> builder.addVarg(ValueLayout.JAVA_LONG, 1L), MemorySession.openConfined());
        for (int i = 0; i  < 10000; i ++) {
            System.out.println(""nextVarg number "" + i);
            vaList.nextVarg(ValueLayout.JAVA_LONG);
        }

leads to 

nextVarg number 0
nextVarg number 1
nextVarg number 2
nextVarg number 3
nextVarg number 4
Exception in thread ""main"" java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length -7
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:124)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:448)
	at java.base/java.util.Objects.checkIndex(Objects.java:461)
	at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.checkBounds(AbstractMemorySegmentImpl.java:397)
	at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.checkAccess(AbstractMemorySegmentImpl.java:355)
	at java.base/java.lang.invoke.VarHandleSegmentAsLongs.checkAddress(VarHandleSegmentAsLongs.java:81)
	at java.base/java.lang.invoke.VarHandleSegmentAsLongs.get(VarHandleSegmentAsLongs.java:108)
	at java.base/jdk.internal.foreign.abi.aarch64.macos.MacOsAArch64VaList.read(MacOsAArch64VaList.java:121)
	at java.base/jdk.internal.foreign.abi.aarch64.macos.MacOsAArch64VaList.read(MacOsAArch64VaList.java:94)
	at java.base/jdk.internal.foreign.abi.aarch64.macos.MacOsAArch64VaList.nextVarg(MacOsAArch64VaList.java:74)

On MacOS AArch64 or even to 

openjdk 19-ea 2022-09-20
OpenJDK Runtime Environment (build 19-ea+28-2110)
OpenJDK 64-Bit Server VM (build 19-ea+28-2110, mixed mode, sharing)
nextVarg number 0
nextVarg number 1
nextVarg number 2
nextVarg number 3
nextVarg number 4
nextVarg number 5
nextVarg number 6
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f7ac193094b, pid=2247746, tid=2247750
#
# JRE version: OpenJDK Runtime Environment (19.0+28) (build 19-ea+28-2110)
# Java VM: OpenJDK 64-Bit Server VM (19-ea+28-2110, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xe6e94b]  Unsafe_GetLong+0x8b
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h %e"" (or dumping to ..... core.2247746)
#
# An error report file with more information is saved as:
# ..... hs_err_pid2247746.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

On Linux X64

It looks like at least the specification for 
https://download.java.net/java/early_access/jdk19/docs/api/java.base/java/lang/foreign/VaList.html
or the #nextVarg methods deserves improvement and clarification - for example mention possibility of IndexOutOfBoundsException


",,,,,,,,,,JDK-8290185,JDK-8291416,JDK-8291292,,,,,,,,,,,,,,,,,,,JDK-8289540,JDK-8289333,JDK-8289156,,,,JDK-8289156,,,,,,,,,,JCK-7317896,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xmab:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-06-24 09:41;lkuskov;The test is little bit incorrect. it's similar to:
 
void method(int nArgs, ...) {
    va_list arg_list;
    va_start(arg_list, nArgs);
//    for (int i = 0; i < nArgs; ++i) {     // must be
    for (int i = 0; i < 10000; ++i) {       // your code
       _do(va_arg(arg_list, long));
    }
    va_end(arg_list);
}

void test(void) {
    method(1, 1l);
};;;","2022-06-24 09:55;dbessono;I do agree. The point and the request is to specify 

java.lang.IndexOutOfBoundsException

, and possibly avoid VM crash;;;","2022-06-30 09:40;jvernee;Thanks for finding these issues. I'm working on a patch to address these use cases.;;;","2022-07-04 04:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/91
Date: 2022-06-29 13:40:01 +0000;;;","2022-07-12 04:29;dukebot;Changeset: 3164c98f
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2022-07-12 11:25:45 +0000
URL:       https://git.openjdk.org/jdk19/commit/3164c98f4c02a48cad62dd4f9b6cc55d64ac6d83
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
unify os::infinite_sleep on posix platforms,JDK-8289147,5077822,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-06-24 07:07,2022-07-15 00:49,2023-10-01 09:56,2022-06-26 23:53,20,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"os::infinite_sleep could be unified on the POSIX platforms (linux, bsd, aix).",,,,,,,,,,JDK-8290346,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xm9v:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-24 07:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9279
Date: 2022-06-24 14:50:25 +0000;;;","2022-06-26 23:53;dukebot;Changeset: 62e1e795
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-06-27 06:50:11 +0000
URL:       https://git.openjdk.org/jdk/commit/62e1e7950b37deaede3573a4b37542199552aea3
;;;","2022-07-07 00:02;mbaesken;jdk17u backport request
I would like to have the fix in jdk17u-dev as well because the small cleanup would be helpful there too. The patch does apply cleanly and is low risk.;;;","2022-07-07 00:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/533
Date: 2022-07-07 06:59:43 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
containers/docker/TestMemoryWithCgroupV1.java fails on linux ppc64le machine with missing Memory and Swap Limit output,JDK-8289146,5077821,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-06-24 06:59,2023-02-27 19:54,2023-10-01 09:56,2022-07-06 00:13,19,,,,,,20,hotspot,,0,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oraclejdk-na,testbug,,,,,,,,,,"On a SLES12 Linux ppc64le machine , the test fails with 

 stderr: [WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
]
 exitValue = 0

java.lang.RuntimeException: 'Memory and Swap Limit is: 157286400' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at TestMemoryWithCgroupV1.testMemoryLimitWithSwappiness(TestMemoryWithCgroupV1.java:84)
	at TestMemoryWithCgroupV1.main(TestMemoryWithCgroupV1.java:61)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1596)


Could this be related to ""kernel does not support swap limit capabilities"",
we've seen similar issues on other Linux ppc64 lle machines in some tests before?",,,,,,,,,,JDK-8293651,JDK-8302973,JDK-8303049,JDK-8303290,JDK-8302974,JDK-8293401,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297274,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,linux,,,,,"0|i2xm9n:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-29 00:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9319
Date: 2022-06-29 07:47:20 +0000;;;","2022-07-04 02:09;sgehwolf;In the review it was pointed out that configuring the system to allow memory accounting for cgroups fixes this issue as well:

GRUB_CMDLINE_LINUX_DEFAULT / GRUB_CMDLINE_LINUX in /etc/default/grub file
by adding cgroup_enable=memory swapaccount=1

can solve the issue on Linux ppc64le machines (see https://www.suse.com/support/kb/doc/?id=000018585 ).;;;","2022-07-06 00:13;dukebot;Changeset: d8f4e97b
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-07-06 07:12:32 +0000
URL:       https://git.openjdk.org/jdk/commit/d8f4e97bd3f4e50902e80b4b6b4eb3268c6d4a9d
;;;","2022-08-29 00:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/647
Date: 2022-08-29 07:33:34 +0000;;;","2022-08-29 00:40;mbaesken;jdk17u backport request
After the predecessor https://bugs.openjdk.org/browse/JDK-8284950 is in jdk17u-dev it makes sense to backport this too. The patch applies cleanly, risk should be low (only test change).;;;","2022-09-08 02:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1356
Date: 2022-09-08 09:18:27 +0000;;;","2022-09-08 02:38;pxie;Fix request 

I'd like to backport this patch to jdk11u. 
It will fix containers/docker/TestMemoryWithCgroupV1.java fails on linux ppc64le machine with missing Memory and Swap Limit output. 
The patch apply clean. 
This risk is low.
I've already run the test case in jdk11u;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[BACKOUT] JDK-8287281 adjust guarantee in Handshake::execute for the case of target thread being current,JDK-8289129,5077802,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,dcubed,alanb,alanb,2022-06-24 02:20,2022-08-23 15:19,2023-10-01 09:56,2022-06-24 07:20,20,,,,,,20,hotspot,,0,regression,tier1,tier2,tier3,tier4,,,,,,,,,,,,,"Lots of failures in all tiers right now, seem to be after JDK-8287281.

It seems to be mostly JDI tests but some indy tests are failing too, example hs_err

#  Internal Error (/workspace/open/src/hotspot/share/runtime/javaThread.cpp:342), pid=4525, tid=23815
#  assert(false) failed: Possible safepoint reached by thread that does not allow it


Stack: [0x0000700007cee000,0x0000700007dee000],  sp=0x0000700007debd80,  free space=1015k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x12e5739]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6e9
V  [libjvm.dylib+0x12e5dbb]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V  [libjvm.dylib+0x6c182d]  report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V  [libjvm.dylib+0xa15815]  JavaThread::check_possible_safepoint()+0x45
V  [libjvm.dylib+0x3c7311]  ThreadBlockInVMPreprocess<void (JavaThread*)>::ThreadBlockInVMPreprocess(JavaThread*, void (&)(JavaThread*), bool)+0xe1
V  [libjvm.dylib+0x931c65]  HandshakeSpinYield::process()+0xf5
V  [libjvm.dylib+0x9312cd]  Handshake::execute(HandshakeClosure*, ThreadsListHandle*, JavaThread*)+0x2dd
V  [libjvm.dylib+0xced92c]  JvmtiEventControllerPrivate::enter_interp_only_mode(JvmtiThreadState*)+0x1bc
V  [libjvm.dylib+0xcee4f6]  JvmtiEventControllerPrivate::recompute_thread_enabled(JvmtiThreadState*)+0x1c6
V  [libjvm.dylib+0xcf053b]  JvmtiEventControllerPrivate::set_frame_pop(JvmtiEnvThreadState*, JvmtiFramePop)+0x15b
V  [libjvm.dylib+0xce4dfa]  JvmtiEnvBase::set_frame_pop(JvmtiThreadState*, javaVFrame*, int)+0x15a
V  [libjvm.dylib+0xce91dd]  SetFramePopClosure::doit(Thread*, bool)+0x15d
V  [libjvm.dylib+0x930db7]  HandshakeOperation::do_handshake(JavaThread*)+0x47
V  [libjvm.dylib+0x931810]  HandshakeState::try_process(HandshakeOperation*)+0x290
V  [libjvm.dylib+0x931311]  Handshake::execute(HandshakeClosure*, ThreadsListHandle*, JavaThread*)+0x321
V  [libjvm.dylib+0xcd6338]  JvmtiEnv::NotifyFramePop(_jobject*, int)+0x3d8
V  [libjvm.dylib+0xc7fafc]  jvmti_NotifyFramePop(_jvmtiEnv*, _jobject*, int)+0xfc
C  [libjdwp.dylib+0x23de2]  initState+0x92
C  [libjdwp.dylib+0x2417c]  stepControl_beginStep+0x13c
C  [libjdwp.dylib+0x1696c]  eventFilter_setStepFilter+0x7c
C  [libjdwp.dylib+0x6e5c]  setCommand+0x40c
C  [libjdwp.dylib+0x14053]  debugLoop_run+0x1f3
C  [libjdwp.dylib+0x2a1a6]  attachThread+0x76
V  [libjvm.dylib+0xd08a81]  JvmtiAgentThread::call_start_function()+0x1d1
V  [libjvm.dylib+0xa169d4]  JavaThread::thread_main_inner()+0x264
V  [libjvm.dylib+0x1237f67]  Thread::call_run()+0x177
V  [libjvm.dylib+0xfdc5d0]  thread_native_entry(Thread*)+0x150
C  [libsystem_pthread.dylib+0x6109]  _pthread_start+0x94
C  [libsystem_pthread.dylib+0x1b8b]  thread_start+0xf",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287281,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xm5f:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-06-24 02:49;shade;Bisection confirms this to be caused/triggered by JDK-8287281. Easiest way to reproduce:

$ CONF=linux-x86_64-server-fastdebug make images run-test TEST=com/sun/jdi;;;","2022-06-24 07:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9277
Date: 2022-06-24 14:00:45 +0000;;;","2022-06-24 07:20;dukebot;Changeset: 0d2952e5
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-06-24 14:17:22 +0000
URL:       https://git.openjdk.org/jdk/commit/0d2952e5b37312f4ec08786a9802594115f0f8a1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Apache Lucene triggers: DEBUG MESSAGE: duplicated predicate failed which is impossible,JDK-8289127,5077800,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,uschindler,uschindler,2022-06-24 02:11,2023-05-22 00:46,2023-10-01 09:56,2022-07-18 00:10,17,18,19,,,,19,hotspot,,0,apache-lucene,apache-lucene-found,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-20,,,,,,,,,,,,"When running Apache Lucene tests on the branch to introduce memory segment support in Apache Lucene (for Java 19 with --enable-preview), we have seen the following error:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (macroAssembler_x86.cpp:845), pid=3260852, tid=3260993
#  fatal error: DEBUG MESSAGE: duplicated predicate failed which is impossible
#
# JRE version: OpenJDK Runtime Environment (19.0+27) (build 19-ea+27-2074)
# Java VM: OpenJDK 64-Bit Server VM (19-ea+27-2074, mixed mode, sharing, tiered, compressed class ptrs, serial gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xb6e5b1]  MacroAssembler::debug64(char*, long, long*)+0x41
#

The used branch in Lucene is this one:
https://github.com/uschindler/lucene/tree/draft/jdk-foreign-mmap-jdk19

When digging into hs_err the following correlation to project panama seems to occur:

While hitting this error it looks like it compiles org.apache.lucene.codecs.lucene90.ForUtil::decode14 (code: 
https://github.com/uschindler/lucene/blob/draft/jdk-foreign-mmap-jdk19/lucene/core/src/java/org/apache/lucene/codecs/lucene90/ForUtil.java#L726-L740).
This calls DataInput::readLong, implemented by MemorySegmentIndexInput (https://github.com/uschindler/lucene/blob/draft/jdk-foreign-mmap-jdk19/lucene/core/src/java19/org/apache/lucene/store/MemorySegmentIndexInput.java#L182-L194)

In standrad Lucene builds we have not seen this error, so it could really be related to project Panama.",Failing Jenkins build: https://jenkins.thetaphi.de/job/Lucene-MMAPv2-Linux/114/,,,,,,,,,JDK-8291438,JDK-8290877,JDK-8291317,JDK-8290476,JDK-8292540,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290789,,,,JDK-8286625,JDK-8291599,,,,,,"2022-07-01 05:31;uschindler;hs_err_pid3047355.log;https://bugs.openjdk.org/secure/attachment/99766/hs_err_pid3047355.log","2022-06-24 02:10;uschindler;hs_err_pid3260852.log;https://bugs.openjdk.org/secure/attachment/99690/hs_err_pid3260852.log","2022-06-28 01:35;uschindler;hs_err_pid76853.log.txt;https://bugs.openjdk.org/secure/attachment/99719/hs_err_pid76853.log.txt","2022-06-28 01:35;uschindler;hs_err_pid927074.log.txt;https://bugs.openjdk.org/secure/attachment/99720/hs_err_pid927074.log.txt","2022-07-01 05:31;uschindler;replay_pid3047355_compid7571.log;https://bugs.openjdk.org/secure/attachment/99767/replay_pid3047355_compid7571.log","2022-07-01 05:31;uschindler;replay_pid3047355_compid7604.log;https://bugs.openjdk.org/secure/attachment/99765/replay_pid3047355_compid7604.log",,,,,,,x86_64,,,,,,b27,19,,linux,,,,,"0|i2xm4z:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Not verified,,"2022-06-28 01:35;uschindler;Hi,
it also happens with JDK 19 preview builds on the non-Panama branches of Apache Lucene: https://jenkins.thetaphi.de/job/Lucene-main-Linux/35387/

I uploaded more hs_err files.;;;","2022-06-28 01:38;uschindler;It looks like this was introduced after JDK 19 build 24 and was triggered now regularily in Apache Lucene test runs with build 27.;;;","2022-06-28 01:41;uschindler;Always happens when compiling this method: org.apache.lucene.codecs.lucene90.ForUtil::decode14
See: https://github.com/apache/lucene/blob/3e74ebbc0d4b5ed1b1847d8ada9157586d774307/lucene/core/src/java/org/apache/lucene/codecs/lucene90/ForUtil.java#L726-L740

All other methods in this class (they are generated by a script) are not (yet) affected.;;;","2022-06-28 16:31;dlong;ILW = crash; with Lucene; disable compilation of affected method = HMM = P2;;;","2022-06-28 16:32;dlong;[~uschindler], do you have any replay file from the crashes?;;;","2022-06-29 02:25;uschindler;Hi,
it did not create a replay file by default, only hs_err. What command line parameters should I add to give you more insights? The error happens all the time, so every 50% of all Lucene builds with 19-ea+27, so it is easy to reproduce.;;;","2022-06-29 13:26;dlong;My mistake, it's crashing while executing the compiled code, not while compiling the method.
You can try ""-XX:CompileCommand=DumpReplay,org.apache.lucene.codecs.lucene90.ForUtil::decode14"" to capture a replay file for successful compiles.;;;","2022-06-30 05:04;uschindler;Hi, I added this to the Jenkins config file. Once another crash occurs I will upload the file. I will also do some local testing.;;;","2022-07-01 05:34;uschindler;I attached 3 files:
- hs_err_pid3047355.log
- replay_pid3047355_compid7571.log
- replay_pid3047355_compid7604.log

Hope this helps to reproduce or understand. To reproduce, just run Lucene's Gradle build with JAVA_HOME set to JDK-17 (thats for bootstrapping the build, because unfortunately Gradle does not run with later versions) and also set RUNTIME_JAVA_HOME to an JDK-19 instance. It will then run the test suite with RUNTIME_JAVA_HOME:

$ gradlew :lucene:core:test

If you repeat this often enough it will crash like above.;;;","2022-07-01 18:00;dlong;I have tried both the jdk-foreign-mmap-jdk19 branch and non-Panama main branch with jdk19+27, and I can't reproduce the crash.;;;","2022-07-02 04:27;uschindler;You need to run it in a loop, there are possibilities to do this also in an automated way. We had a similar problem with another bug, but Tobias Hartmann was able to reproduce and he works on a fix, see JDK-8285835 for details.;;;","2022-07-02 04:53;uschindler;Hi again, when ooking at the hserr log files, it seems to happen always in Lucene's Join module in exactly one test execution. So better run tests on join module not on the Lucene core library (this adds more complexity, possibly making it fail earlier):

$ cd /path/to/lucene-checkout
$ export JAVA_HOME=/path/to/jdk17
$ export RUNTIME_JAVA_HOME=/path/to/jdk19-ea+27
$ ./gradlew :lucene:join:test -Ptests.multiplier=3

This may be anoyoing to run and it does a lot of stuff.

As all failures were in one test and one test method, it is better to just run this over and over, with additional data. Sorry for not giving that information before. Our Jenkins server already uses 3 times more random data during tests (parameter '-Ptests.multiplier=3""). To reproduce it easier (still takes some time), you may use this command line, which only runs the single test which always fails in a loop. The Gradle task is ""beast"" for doing ""beasting"" named after the famous ""beast"" Machine with 128 cores by Mike McCandless:

$ ./gradlew :lucene:join:beast -Ptests.multiplier=6 -Ptests.dups=100 -Ptests.jvmargs=""-XX:CompileCommand=DumpReplay,org.apache.lucene.codecs.lucene90.ForUtil::decode14"" --tests TestBlockJoin.testMultiChildQueriesOfDiffParentLevels

You see also how to pass the extra JVM command line args. The above command line will do the following:
- Run test ""TestBlockJoin.testMultiChildQueriesOfDiffParentLevels"" 100 times, each in a separate JVM
- Use a test multiplier of 6: this will use 6 times more random indexing/query data to add more computational complexity to the test
- Pass the compile cmmand to get a replay file

The replay and hserr files will be in: ./lucene/join/build/tmp/tests-cwd

This command failed for me on the second iteration of 100 after like 2 minutes. I was doing this on my local windows laptop, so it also affects Intel CPUs (the Jenkins server was AMD Ryzen) and Windows.;;;","2022-07-05 01:36;dlong;That last command-line did the trick.  I was able to reproduce it.  Thanks.;;;","2022-07-08 20:38;dlong;When I bisect the failure, the changeset that seems to introduce the problem is this one:

Author: Roland Westrelin <roland@openjdk.org>
Date:   Wed Jun 8 06:35:28 2022 +0000

    8286625: C2 fails with assert(!n->is_Store() && !n->is_LoadStore()) failed: no node with a side effect
    
    Reviewed-by: thartmann, chagedorn

[~roland], please take a look at this.;;;","2022-07-12 05:28;roland;Fix is this:
diff --git a/src/hotspot/share/opto/loopTransform.cpp b/src/hotspot/share/opto/loopTransform.cpp
index b3a7594ec88..739e92fb343 100644
--- a/src/hotspot/share/opto/loopTransform.cpp
+++ b/src/hotspot/share/opto/loopTransform.cpp
@@ -1390,6 +1390,7 @@ static bool skeleton_follow_inputs(Node* n, int op) {
           op == Op_OrL ||
           op == Op_RShiftL ||
           op == Op_LShiftL ||
+          op == Op_LShiftI ||
           op == Op_AddL ||
           op == Op_AddI ||
           op == Op_MulL ||

A predicate is not updated when copied above the main loop.;;;","2022-07-15 05:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/143
Date: 2022-07-15 12:30:56 +0000;;;","2022-07-15 15:25;uschindler;Thanks. Do we need to backport this to JDK 17? It looks like the change JDK-8286625 in the commit of Wed Jun 8 06:35:28 2022 +0000 (mentioned above by Dean) was backported to jdk-17? Or was this caused by something else?;;;","2022-07-15 17:47;dlong;[~uschindler], I haven't been able to reproduce this with jdk17.  I would think the fix would be safe to back-port, however.;;;","2022-07-15 23:22;uschindler;Did you test 17.0.5, because JDK-8286625 was backported to this branch. So 17.0.4 should not have the problem .
I just want to make sure we don't get our users affected by this bug if they upgrade.
If it is unrelated and not a regression introduced by JDK-8286625, I don't care.;;;","2022-07-17 23:57;dlong;[~uschindler], yes I tried 17.0.5, but please give it a try yourself.  You might have better luck.;;;","2022-07-18 00:10;dukebot;Changeset: 4f3f74c1
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-07-18 07:08:49 +0000
URL:       https://git.openjdk.org/jdk19/commit/4f3f74c14121d0a80f0dcf1d593b4cf1c3e4a64c
;;;","2022-07-18 05:58;uschindler;Dean,
I'd suggest to  leave it up to Roland to clarify if this is a regression introduced by JDK-8286625 or what else could have caused this. JDK-8286625 was backported to 17.0.5 and 17.0.5-oracle (see JIRA), so it is important to check.
I will try to reproduce it with 17.x, but I am a bit busy at moment.
Uwe;;;","2022-07-18 08:57;roland;[~uschindler] it doesn't seem to reproduce with 17 but could be by chance. Let me take a closer look.;;;","2022-07-19 04:40;roland;First, this bug only affects fastdebug builds. A release build wouldn't be affected.
The bug doesn't reproduce on 17 because there are other changes in 19 that affect loop optimizations and are needed for the bug to occur with this particular test case. So the bug is there in 17, doesn't reproduce with this test case but could possibly happen with another code shape.
I think it's a nasty bug and it's better to have it backported anyway.;;;","2022-07-19 23:44;uschindler;> First, this bug only affects fastdebug builds. A release build wouldn't be affected.

We have seen the bug in standard builds downloaded from https://jdk.java.net/19/ - maybe there were some builds which have this assertion enabled, although I assumed that the EA builds are standard production builds! The exact version that we used was posted above, see the hs_err.pid at end: e.g., https://bugs.openjdk.org/secure/attachment/99766/hs_err_pid3047355.log

But anyway, thanks for backporting!

Uwe;;;","2022-07-19 23:48;roland;Thanks for correcting me on the fact that it affects all builds. You're obviously right.;;;","2022-07-21 08:55;roland;17u backport request:

I'd like to backport this 17u. It applies cleanly. The bug does not reproduce with 17u out of the box but I could get it to reproduce by tweaking c2. It's quite possible this would never happen in the wild but it's a nasty bug that's hard to diagnose and causes crashes. The fix is low risk. Tested with tier1.;;;","2022-07-21 08:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/579
Date: 2022-07-21 15:50:26 +0000;;;","2023-05-19 06:00;mdoerr;#  Internal Error (macroAssembler_x86.cpp:864), pid=5584, tid=5316
#  fatal error: DEBUG MESSAGE: duplicated predicate failed which is impossible
has been hit with a product build which contains this fix:
OpenJDK 64-Bit Server VM (17.0.7+7-LTS) for windows-amd64;;;","2023-05-22 00:46;thartmann;[~mdoerr] must be a different issues then. I see that you also commented on JDK-8305428 -> JDK-8288981 (paging [~chagedorn]).;;;",,,
Add model of class file versions to core reflection,JDK-8289106,5077783,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2022-06-23 18:36,2022-09-15 09:25,2023-10-01 09:56,2022-08-16 11:46,20,,,,,,20,core-libs,,1,,,,,,,,,,,,,,,,,,"To address anticipated needs for core reflection and its client, an API model of changing class file versions would be helpful.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289419,,,,,,,,,,,,JDK-8292499,JDK-8266670,JDK-8292498,JDK-8293871,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xm17:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2022-06-28 15:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9299
Date: 2022-06-27 20:26:52 +0000;;;","2022-08-16 11:46;dukebot;Changeset: e44e3f0c
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-08-16 18:43:58 +0000
URL:       https://git.openjdk.org/jdk/commit/e44e3f0c1976a513c6637545f49f49de84cbac02
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
clean up ported serviceability/jvmti tests,JDK-8289098,5077773,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2022-06-23 15:20,2022-06-29 23:11,2023-10-01 09:56,2022-06-24 11:18,19,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,"serviceability/jvmti tests require some cleanup
Mostly to remove JCK and NSK mentions",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xlyz:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-06-23 17:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9267
Date: 2022-06-24 00:09:50 +0000;;;","2022-06-24 11:18;dukebot;Changeset: 4cdb9789
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-06-24 18:13:23 +0000
URL:       https://git.openjdk.org/jdk/commit/4cdb97893c93d7c921b7e4c18b6ec332364c2481
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) UnixCopyFile build error on linux-x86,JDK-8289095,5077769,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-06-23 13:50,2022-06-29 23:11,2023-10-01 09:56,2022-06-24 07:28,20,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,"/home/runner/work/jdk/jdk/src/java.base/unix/native/libnio/fs/UnixCopyFile.c:83:17: error: cast to pointer from integer of different size [-Werror=int-to-pointer-cast]
   83 |     char* buf = (char*)address;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289143,,,,,,JDK-8289073,JDK-6980847,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,linux,,,,,"0|i2xly3:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-06-23 14:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9265
Date: 2022-06-23 21:46:43 +0000;;;","2022-06-24 07:28;dukebot;Changeset: 239b4bb0
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-06-24 14:24:28 +0000
URL:       https://git.openjdk.org/jdk/commit/239b4bb0201fda8c40daf2f3e733dab0086d356c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BlockLocationPrinter fails to decode addresses with G1,JDK-8289093,5077767,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tschatzl,tschatzl,tschatzl,2022-06-23 13:46,2022-07-27 09:25,2023-10-01 09:56,2022-06-27 04:45,18,19,20,,,,19,hotspot,,0,gc-g1,gc-pending-review,,,,,,,,,,,,,,,,"The BlockLocationPrinter used for decoding/printing addresses in hs_err files may call G1CollectedHeap::block_start on random addresses in the heap.

Recently, in JDK-8270540 we changed G1's BOT block_start method to reject addresses between top() and end() of a region.

This causes the hs_err file address decoder to fail, which decreases the usefulness of that hs_err file (it prints something like ""error decoding..."") and unnecessarily complicates backtraces (i.e. adds lots of additional stack frames to thread's backtraces when this fails).

",,,,,,,,,,JDK-8289406,JDK-8291159,JDK-8291344,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270540,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xlxn:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-06-24 11:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/68
Date: 2022-06-24 12:04:49 +0000;;;","2022-06-27 04:45;dukebot;Changeset: 699ad45b
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-06-27 11:41:24 +0000
URL:       https://git.openjdk.org/jdk19/commit/699ad45b4339940980314d4cd6e4606a66183fda
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
move oop safety check from SharedRuntime::get_java_tid() to JavaThread::threadObj(),JDK-8289091,5077765,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dcubed,dcubed,dcubed,2022-06-23 13:23,2023-08-30 10:55,2023-10-01 09:56,2022-07-05 13:44,17,19,,,,,19,hotspot,,0,amazon-interest,,,,,,,,,,,,,,,,,"In the code review for:
    JDK-8288139 JavaThread touches oop after GC barrier is detached

this topic came up: 

https://github.com/openjdk/jdk19/pull/21#discussion_r898495754

Here's [~dholmes]' comment:

> I think the oop-touching-safety check should be done in
> threadObj() itself so that all callers are protected.

During the review, I agreed that threadObj() was a better placement,
but I didn't want to make that change yet because I thought it might
result in more issues that would need to be investigated. JDK-8288139
is about the failure due to the call to SharedRuntime::get_java_tid() and
I wanted to focus my fix on that exact failure mode.

This bug is for investigating moving the oop safety check from
SharedRuntime::get_java_tid() to JavaThread::threadObj().",,,,,,,,,,JDK-8289866,JDK-8291385,JDK-8291222,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292302,JDK-8288139,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xlx7:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-23 13:29;dcubed;Moving the oop safety check logic from SharedRuntime::get_java_tid()
to JavaThread::threadObj() is the easy part. The hard part is running
all the testing to verify that threadObj() doesn't reveal any more
unexpected oop accesses after the thread's GC barrier has been
detached.;;;","2022-06-23 13:37;dcubed;It's also useful to verify that the revised placement of the oop safety check still catches the
original failure mode from ""JDK-8288139 JavaThread touches oop after GC barrier is detached"".

Here's a temporary debugging patch:

$ git diff
diff --git a/src/hotspot/share/runtime/thread.cpp b/src/hotspot/share/runtime/thread.cpp
index fdcfb7fe4b4..ec43fb473a2 100644
--- a/src/hotspot/share/runtime/thread.cpp
+++ b/src/hotspot/share/runtime/thread.cpp
@@ -3598,12 +3598,14 @@ void Threads::remove(JavaThread* p, bool is_daemon) {
   // that we do not remove thread without safepoint code notice
   { MonitorLocker ml(Threads_lock);
 
+if (UseNewCode) {
     if (ThreadIdTable::is_initialized()) {
       // This cleanup must be done before the current thread's GC barrier
       // is detached since we need to touch the threadObj oop.
       jlong tid = SharedRuntime::get_java_tid(p);
       ThreadIdTable::remove_thread(tid);
     }
+}
 
     // BarrierSet state must be destroyed after the last thread transition
     // before the thread terminates. Thread transitions result in calls to
diff --git a/src/hotspot/share/runtime/threadSMR.cpp b/src/hotspot/share/runtime/threadSMR.cpp
index 377fc05c42c..f0fbe53b2a2 100644
--- a/src/hotspot/share/runtime/threadSMR.cpp
+++ b/src/hotspot/share/runtime/threadSMR.cpp
@@ -1000,6 +1000,12 @@ void ThreadsSMRSupport::release_stable_list_wake_up(bool is_nested) {
 }
 
 void ThreadsSMRSupport::remove_thread(JavaThread *thread) {
+if (!UseNewCode) {
+  if (ThreadIdTable::is_initialized()) {
+    jlong tid = SharedRuntime::get_java_tid(thread);
+    ThreadIdTable::remove_thread(tid);
+  }
+}
   ThreadsList *new_list = ThreadsList::remove_thread(ThreadsSMRSupport::get_java_thread_list(), thread);
   if (EnableThreadSMRStatistics) {
     ThreadsSMRSupport::inc_java_thread_list_alloc_cnt();

that restores the errant code that was moved by JDK-8288139.

Testing with runtime/Thread/ThreadObjAccessAtExit.java reveals that the
errant threadObj() call is caught by release, fastdebug and slowdebug bits:

$ do_java_test runtime/Thread/ThreadObjAccessAtExit.java
INFO: GNUMAKE=make
INFO: GNUMAKE version is: GNU Make 3.81

INFO: JTREG options:
INFO:   JOBS=4
INFO:   TEST_MODE=agentvm
INFO:   EXTRA_PROBLEM_LISTS=ProblemList-extra.txt
INFO:   VM_OPTIONS=
INFO: test_val=runtime/Thread/ThreadObjAccessAtExit.java
Test Config: macosx-x86_64-normal-server-release
    INFO: TIMEOUT_FACTOR=4
    Done testing
    Test Run macosx-x86_64-normal-server-release time: 1.01 minutes.

    TEST                                              TOTAL  PASS  FAIL ERROR
    jtreg:open/test/hotspot/jtreg/runtime/Thread/ThreadObjAccessAtExit.java
    >>                                                       1     0     1     0 <<

    1 failure(s) found in log=do_java_test.macosx-x86_64-normal-server-release.log

    TEST: runtime/Thread/ThreadObjAccessAtExit.java
    LOG: build/macosx-x86_64-normal-server-release/test-support/jtreg_open_test_hotspot_jtreg_runtime_Thread_ThreadObjAccessAtExit_java/runtime/Thread/ThreadObjAccessAtExit.jtr
    Saving build/macosx-x86_64-normal-server-release/test-support/jtreg_open_test_hotspot_jtreg_runtime_Thread_ThreadObjAccessAtExit_java/runtime/Thread/ThreadObjAccessAtExit.jtr as /work/shared/bug_hunt/8288139_threadObj_for_jdk19.git/test_failures.2022-06-23-153746/ThreadObjAccessAtExit.jtr.release
    WARNING: hs_err_pid file named in the log does not exist: '/System/Volumes/Data/work/shared/bug_hunt/8288139_threadObj_for_jdk19.git/build/macosx-x86_64-normal-server-release/test-support/jtreg_open_test_hotspot_jtreg_runtime_Thread_ThreadObjAccessAtExit_java/scratch/0/hs_err_pid45320.log'
    WARNING: using found hs_err_pid instead: build/macosx-x86_64-normal-server-release/test-support/jtreg_open_test_hotspot_jtreg_runtime_Thread_ThreadObjAccessAtExit_java/runtime/Thread/ThreadObjAccessAtExit/hs_err_pid45320.log
    Saving build/macosx-x86_64-normal-server-release/test-support/jtreg_open_test_hotspot_jtreg_runtime_Thread_ThreadObjAccessAtExit_java/runtime/Thread/ThreadObjAccessAtExit/hs_err_pid45320.log as /work/shared/bug_hunt/8288139_threadObj_for_jdk19.git/test_failures.2022-06-23-153746/hs_err_pid45320.log


Test Config: macosx-x86_64-normal-server-fastdebug
    INFO: TIMEOUT_FACTOR=6
    Done testing
    Test Run macosx-x86_64-normal-server-fastdebug time: 1.20 minutes.

    TEST                                              TOTAL  PASS  FAIL ERROR
    jtreg:open/test/hotspot/jtreg/runtime/Thread/ThreadObjAccessAtExit.java
    >>                                                       1     0     1     0 <<

    1 failure(s) found in log=do_java_test.macosx-x86_64-normal-server-fastdebug.log

    TEST: runtime/Thread/ThreadObjAccessAtExit.java
    LOG: build/macosx-x86_64-normal-server-fastdebug/test-support/jtreg_open_test_hotspot_jtreg_runtime_Thread_ThreadObjAccessAtExit_java/runtime/Thread/ThreadObjAccessAtExit.jtr
    Saving build/macosx-x86_64-normal-server-fastdebug/test-support/jtreg_open_test_hotspot_jtreg_runtime_Thread_ThreadObjAccessAtExit_java/runtime/Thread/ThreadObjAccessAtExit.jtr as /work/shared/bug_hunt/8288139_threadObj_for_jdk19.git/test_failures.2022-06-23-153746/ThreadObjAccessAtExit.jtr.fastdebug
    WARNING: hs_err_pid file named in the log does not exist: '/System/Volumes/Data/work/shared/bug_hunt/8288139_threadObj_for_jdk19.git/build/macosx-x86_64-normal-server-fastdebug/test-support/jtreg_open_test_hotspot_jtreg_runtime_Thread_ThreadObjAccessAtExit_java/scratch/0/hs_err_pid45526.log'
    WARNING: using found hs_err_pid instead: build/macosx-x86_64-normal-server-fastdebug/test-support/jtreg_open_test_hotspot_jtreg_runtime_Thread_ThreadObjAccessAtExit_java/runtime/Thread/ThreadObjAccessAtExit/hs_err_pid45526.log
    Saving build/macosx-x86_64-normal-server-fastdebug/test-support/jtreg_open_test_hotspot_jtreg_runtime_Thread_ThreadObjAccessAtExit_java/runtime/Thread/ThreadObjAccessAtExit/hs_err_pid45526.log as /work/shared/bug_hunt/8288139_threadObj_for_jdk19.git/test_failures.2022-06-23-153746/hs_err_pid45526.log


Test Config: macosx-x86_64-normal-server-slowdebug
    INFO: TIMEOUT_FACTOR=12
    Done testing
    Test Run macosx-x86_64-normal-server-slowdebug time: 1.91 minutes.

    TEST                                              TOTAL  PASS  FAIL ERROR
    jtreg:open/test/hotspot/jtreg/runtime/Thread/ThreadObjAccessAtExit.java
    >>                                                       1     0     1     0 <<

    1 failure(s) found in log=do_java_test.macosx-x86_64-normal-server-slowdebug.log

    TEST: runtime/Thread/ThreadObjAccessAtExit.java
    LOG: build/macosx-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_runtime_Thread_ThreadObjAccessAtExit_java/runtime/Thread/ThreadObjAccessAtExit.jtr
    Saving build/macosx-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_runtime_Thread_ThreadObjAccessAtExit_java/runtime/Thread/ThreadObjAccessAtExit.jtr as /work/shared/bug_hunt/8288139_threadObj_for_jdk19.git/test_failures.2022-06-23-153746/ThreadObjAccessAtExit.jtr.slowdebug
    WARNING: hs_err_pid file named in the log does not exist: '/System/Volumes/Data/work/shared/bug_hunt/8288139_threadObj_for_jdk19.git/build/macosx-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_runtime_Thread_ThreadObjAccessAtExit_java/scratch/0/hs_err_pid45768.log'
    WARNING: using found hs_err_pid instead: build/macosx-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_runtime_Thread_ThreadObjAccessAtExit_java/runtime/Thread/ThreadObjAccessAtExit/hs_err_pid45768.log
    Saving build/macosx-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_runtime_Thread_ThreadObjAccessAtExit_java/runtime/Thread/ThreadObjAccessAtExit/hs_err_pid45768.log as /work/shared/bug_hunt/8288139_threadObj_for_jdk19.git/test_failures.2022-06-23-153746/hs_err_pid45768.log


Total test time: 4.12 minutes.

Here are hs_err_pid snippets from the fastdebug config:

#  Internal Error (/System/Volumes/Data/work/shared/bug_hunt/8288139_threadObj_for_jdk19.git/open/src/hotspot/share/runtime/thread.cpp:799), pid=45526, tid=25859 
#  guarantee(current != this || JavaThread::cast(current)->is_oop_safe()) failed: current cannot touch oops after its GC barrier is detached.

---------------  T H R E A D  ---------------

Current thread (0x00007fc2cb032e10):
[error occurred during error reporting (printing current thread), id 0xe0000000, Internal Error (/System/Volumes/Data/work/shared/bug_hunt/8288139_threadObj_for_jdk19.git/open/src/hotspot/share/runtime/thread.cpp:799)]

Stack: [0x0000700010f77000,0x0000700011077000],  sp=0x0000700011075180,  free space=1016k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x12e2749]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6e9
V  [libjvm.dylib+0x12e2dcb]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V  [libjvm.dylib+0x6c047d]  report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V  [libjvm.dylib+0x122c76d]  JavaThread::threadObj() const+0xdd
V  [libjvm.dylib+0x1233054]  JavaThread::get_thread_name_string(char*, int) const+0x24
V  [libjvm.dylib+0x12331e7]  JavaThread::print_on_error(outputStream*, char*, int) const+0x37
V  [libjvm.dylib+0x12df5ef]  VMError::report(outputStream*, bool)+0xf2f
V  [libjvm.dylib+0x12e2749]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6e9
V  [libjvm.dylib+0x12e2dcb]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V  [libjvm.dylib+0x6c047d]  report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V  [libjvm.dylib+0x122c76d]  JavaThread::threadObj() const+0xdd
V  [libjvm.dylib+0x10d5ad4]  SharedRuntime::get_java_tid(Thread*)+0x64
V  [libjvm.dylib+0x12422f9]  ThreadsSMRSupport::remove_thread(JavaThread*)+0x29
V  [libjvm.dylib+0x123016f]  Threads::remove(JavaThread*, bool)+0xff
V  [libjvm.dylib+0x122ff4a]  JavaThread::exit(bool, JavaThread::ExitType)+0xbda
V  [libjvm.dylib+0x122f2a7]  JavaThread::post_run()+0x17
V  [libjvm.dylib+0x122be48]  Thread::call_run()+0x1f8

Please note that we not only catch the errant use in SharedRuntime::get_java_tid(),
but we also catch the errant use in JavaThread::get_thread_name_string() which is
called to report the crashing thread's name as part of the hs_err_pid report.

I think that this means that if a JavaThread crashes after it has detached the GC
barrier, then we'll get a secondary crash when we try to report the primary crash.

Update: The errant use of threadObj() in JavaThread::get_thread_name_string()
occurs when we're trying to print this part of the hs_err_pid:

Java Threads: ( => current thread )
<snip>

  0x00007ff8dc024210 JavaThread ""GCThread"" [_thread_blocked, id=24835, stack(0x000070000a97c000,0x000070000aa7c000)]
=>0x00007ff8dc00e210
[error occurred during error reporting (printing all threads), id 0xe0000000, Internal Error (/System/Volumes/Data/work/shared/bug_hunt/8288139_threadObj_for_jdk19.git/open/src/hotspot/share/runtime/thread.cpp:799)]

So we crash when we reach the point in the ""Java Threads:"" section where
we find the crashing thread and we try to print info about that thread. The
code is using threadObj() to access the crashing thread's name, but that's
not safe when the crashing thread is after the point where the GC barrier
has been detached.;;;","2022-06-24 12:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/69
Date: 2022-06-24 19:53:31 +0000;;;","2022-07-05 13:44;dukebot;Changeset: 30e134e9
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-07-05 20:42:42 +0000
URL:       https://git.openjdk.org/jdk19/commit/30e134e909c53423acd1ec20c106f4200bc10285
;;;","2022-09-09 12:35;dcubed;Please note that much of this fix is being backed out by:

JDK-8292302 Windows GetLastError value overwritten by ThreadLocalStorage::thread;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/lang/Thread/jni/AttachCurrentThread/AttachTest.java#id1 failed with ""RuntimeException: Test failed""",JDK-8289079,5077753,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,dcubed,dcubed,2022-06-23 11:51,2022-07-27 09:22,2023-10-01 09:56,2022-06-27 03:22,19,,,,,,19,core-libs,,0,loom,noreg-self,tier8,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

java/lang/Thread/jni/AttachCurrentThread/AttachTest.java#id1

Here's a snippet from the log file:

#section:main
----------messages:(5/274)----------
command: main AttachTest --enable-preview --enable-native-access=ALL-UNNAMED ImplicitAttach 1
reason: User specified action: run main AttachTest --enable-preview --enable-native-access=ALL-UNNAMED ImplicitAttach 1 
Mode: agentvm
Agent id: 307
elapsed time (seconds): 38.026
----------configuration:(16/2053)----------
Boot Layer
  class path: /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar 
  patch:      java.base /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8763/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e2b6c9f-97f5-4dfd-874c-f4a97859fcf2/runs/bf95d698-c936-43da-a59f-ae950830bdbd/testoutput/test-support/jtreg_open_test_jdk_jdk_lang/patches/java.base

Test Layer
  class path: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8763/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e2b6c9f-97f5-4dfd-874c-f4a97859fcf2/runs/bf95d698-c936-43da-a59f-ae950830bdbd/testoutput/test-support/jtreg_open_test_jdk_jdk_lang/classes/4/java/lang/Thread/jni/AttachCurrentThread/AttachTest_id1.d
              /opt/mach5/mesos/work_dir/jib-master/install/jdk-19+28-2110/src.full/open/test/jdk/java/lang/Thread/jni/AttachCurrentThread
              /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8763/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e2b6c9f-97f5-4dfd-874c-f4a97859fcf2/runs/bf95d698-c936-43da-a59f-ae950830bdbd/testoutput/test-support/jtreg_open_test_jdk_jdk_lang/classes/4/test/lib
              /opt/mach5/mesos/work_dir/jib-master/install/jdk-19+28-2110/src.full/open/test/lib

----------rerun:(30/6037)*----------

<snip>

----------System.out:(10/3125)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+28-2110/linux-x64-debug.jdk/jdk-19/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8763/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e2b6c9f-97f5-4dfd-874c-f4a97859fcf2/runs/bf95d698-c936-43da-a59f-ae950830bdbd/testoutput/test-support/jtreg_open_test_jdk_jdk_lang/classes/4/java/lang/Thread/jni/AttachCurrentThread/AttachTest_id1.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+28-2110/src.full/open/test/jdk/java/lang/Thread/jni/AttachCurrentThread:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8763/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e2b6c9f-97f5-4dfd-874c-f4a97859fcf2/runs/bf95d698-c936-43da-a59f-ae950830bdbd/testoutput/test-support/jtreg_open_test_jdk_jdk_lang/classes/4/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar -Xmx768m -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8763/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e2b6c9f-97f5-4dfd-874c-f4a97859fcf2/runs/bf95d698-c936-43da-a59f-ae950830bdbd/testoutput/test-support/jtreg_open_test_jdk_jdk_lang/tmp -ea -esa -Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:-UseCompressedOops -cp /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8763/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e2b6c9f-97f5-4dfd-874c-f4a97859fcf2/runs/bf95d698-c936-43da-a59f-ae950830bdbd/testoutput/test-support/jtreg_open_test_jdk_jdk_lang/classes/4/java/lang/Thread/jni/AttachCurrentThread/AttachTest_id1.d -Djava.library.path=/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+28-2110/linux-x64-debug.test/jdk/jtreg/native --enable-preview --enable-native-access=ALL-UNNAMED ImplicitAttach 1 ]
[2022-06-23T18:05:16.769697758Z] Gathering output for process 591805
[2022-06-23T18:05:50.614112530Z] Waiting for completion for process 591805
[2022-06-23T18:05:50.774330474Z] Waiting for completion finished for process 591805
Output and diagnostic info for process 591805 was saved into 'pid-591805-output.log'
Thread[#30,Thread-0,5,main]


[2022-06-23T18:05:50.878509029Z] Waiting for completion for process 591805
[2022-06-23T18:05:50.878684541Z] Waiting for completion finished for process 591805
----------System.err:(10/507)----------
java.lang.RuntimeException: Test failed
	at AttachTest.main(AttachTest.java:68)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Test failed

The ""RuntimeException: Test failed"" failure mode is not very helpful.

I'm going to start this failure off in hotspot/runtime since my guess
is that this is a JNI attach test failure.",,,,,,,,,,JDK-8291342,JDK-8289245,JDK-8291152,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287982,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,19,,linux,,,,,"0|i2xluj:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-06-23 21:35;dholmes;This is the new test introduced by JDK-8287982 so reassigning to core-libs and [~alanb].;;;","2022-06-23 21:39;dholmes;I agree with [~dcubed] comment about the unhelpful failure mode. This:

        int exitValue = outputAnalyzer.getExitValue();
        if (exitValue != 0)
            throw new RuntimeException(""Test failed"");

should be

outputAnalyzer.shouldHaveExitValue(0);

so we at least get a diagnostic report. And mea culpa for not catching that in the review.;;;","2022-06-23 23:53;alanb;Any stdout/stderr from the child process should be in the .jtr but we are missing the child process exit code (133 in this case).

The test runs ImplicitAttach three times to create 1, 2, and 4 threads. The failed case the first one where is creates 1 thread. We see this output from the child process:

Thread[#30,Thread-0,5,main]

so this means the thread was created (with pthread_create) and the upcall invoked the ""callback"" method. 

I don't see this thread in the jhsdb output but it since it is very short lived then it may have terminated. The main thread just waits for all threads (one thread in this case) to phone home but the main thread seems to be here:

----------------- 591806 -----------------
""main"" #1 prio=5 tid=0x00007f1ec4029d90 nid=591806 waiting on condition [0x00007f1ece2f3000]
   java.lang.Thread.State: RUNNABLE
   JavaThread state: _thread_blocked
0x00007f1ecdcbd45c	__pthread_cond_wait + 0x1fc
0x00007f1eccb12040	os::PlatformMonitor::wait(long) + 0x110
0x00007f1ecca627df	Monitor::wait(long) + 0x28f
0x00007f1ecbeb3cba	CompileBroker::wait_for_completion(CompileTask*) + 0xfa
0x00007f1ecbeb5f23	CompileBroker::compile_method(methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, DirectiveSet*, JavaThread*) + 0x613
0x00007f1ecbeb6282	CompileBroker::compile_method(methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, JavaThread*) + 0x82
0x00007f1ecbe815e0	CompilationPolicy::compile(methodHandle const&, int, CompLevel, JavaThread*) + 0x110
0x00007f1ecbe836f8	CompilationPolicy::event(methodHandle const&, methodHandle const&, int, int, CompLevel, CompiledMethod*, JavaThread*) + 0x3a8
0x00007f1ecbc762eb	Runtime1::counter_overflow(JavaThread*, int, Method*) + 0x26b
0x00007f1eb456cbb1	<RuntimeStub>
0x00007f1ead0ec94b	* java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNextIfShared(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node) bci:0 line:618 (Compiled frame)
                  	* java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long) bci:184 line:684 (Interpreted frame)
0x00007f1ead2b314c	* java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(int) bci:21 line:1047 (Compiled frame)
                  	* java.util.concurrent.CountDownLatch.await() bci:5 line:230 (Compiled frame)
                  	* ImplicitAttach.main(java.lang.String[]) bci:134 line:65 (Compiled frame)
0x00007f1ecc3b7fa5	JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*) + 0x505
0x00007f1ecc4febb5	jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .constprop.1] + 0x385
0x00007f1ecc5020c5	jni_CallStaticVoidMethod + 0x1b5
0x00007f1ece2fb7e5	JavaMain + 0xd65
0x00007f1ece2fea19	ThreadJavaMain + 0x9

I'll see if I can get anything from the core file. The gdb output just shows a SIGTRAP, which I assumed was gdb attaching but maybe it's something else. As I understand it, SIGTRAP is used by some ports for implicit null or polling but not x64.


;;;","2022-06-26 00:41;alanb;I think I see the issue with the test. The upcall stub is created in a implicit memory session which can be GC'ed and freed before/while the native threads are running.  It needs to be changed to use a shared memory session or adding a reachability fence to keep the upcall stub alive.;;;","2022-06-26 03:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/73
Date: 2022-06-26 09:50:11 +0000;;;","2022-06-27 03:22;dukebot;Changeset: 7e13cdb7
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-06-27 10:22:04 +0000
URL:       https://git.openjdk.org/jdk19/commit/7e13cdb799ff21cfcc350e518095dda9ce815b30
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Add manual tests to open,JDK-8289077,5077750,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2022-06-23 11:00,2023-08-29 02:27,2023-10-01 09:56,2023-02-06 15:28,,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_127,sn_128,sn_129,sn_130,sn_135,sn_136,sn_137,,,,,,,,Move manual test cases to open,,,,,,,,,,JDK-8311389,JDK-8310300,JDK-8311148,JDK-8311230,,,,,,,,,,,,,,,JDK-8300134,JDK-8299285,,,,,,,,,,,,,,JDK-8311786,,,,JDK-8289238,JDK-8311787,JDK-8289075,JDK-8290469,JDK-8299281,,,"2022-10-07 10:38;honkar;GenerateIcons.java;https://bugs.openjdk.org/secure/attachment/100992/GenerateIcons.java",,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xltv:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-10-07 10:38;honkar;Java2D was used to recreate the icons. File added to the attachment - GenerateIcons.java;;;","2023-02-06 11:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12447
Date: 2023-02-06 19:22:05 +0000;;;","2023-02-06 15:46;dukebot;Changeset: 787e16bb
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-02-06 23:43:18 +0000
URL:       https://git.openjdk.org/jdk/commit/787e16bb444ee3b63803f5d1701d0f0a68b5d474
;;;","2023-06-29 08:52;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Clean backport.
Test passes.;;;","2023-06-29 08:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1508
Date: 2023-06-29 15:51:54 +0000;;;","2023-08-29 02:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2102
Date: 2023-08-29 09:20:54 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) UnsatisfiedLinkError for sun.nio.fs.UnixCopyFile.bufferedCopy0(),JDK-8289073,5077746,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-06-23 10:33,2022-06-29 23:09,2023-10-01 09:56,2022-06-23 10:51,,,,,,,20,core-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,Name change of UnixCopyFile.bufferCopy0() to UnixCopyFile.bufferedCopy0() in the commit https://github.com/openjdk/jdk/pull/9161/commits/6c7ac10c4a98e0d11cb487dfe816f460f7381002# of the pull request https://github.com/openjdk/jdk/pull/9161 was not propagated to the corresponding C implementation. The error was not caught as there is no platform in the build and test infrastructure for which this branch is encountered.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6980847,,,,JDK-8289095,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,other,,,,,"0|i2xlsz:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-06-23 10:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9262
Date: 2022-06-23 17:36:25 +0000;;;","2022-06-23 10:51;dukebot;Changeset: 13cbb3a4
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-06-23 17:48:45 +0000
URL:       https://git.openjdk.org/jdk/commit/13cbb3a4169fdbf882da70beaa1b88faca2bc9c8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Very slow C1 arraycopy jcstress tests after JDK-8279886,JDK-8289069,5077742,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iveresov,shade,shade,2022-06-23 09:48,2022-07-27 09:49,2023-10-01 09:56,2022-06-28 09:29,19,,,,,,19,hotspot,,0,c1,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,,,,,,,,,,,,,"Seeing this now with JDK 19:

```
$ ~/trunks/jdk/build/linux-x86_64-server-release/images/jdk/bin/java -jar tests-chapter-2a/target/jcstress.jar -m sanity -af NONE -sc false -t copy --jvmArgs ""-XX:TieredStopAtLevel=1""

..... [TIMEOUT] o.o.j.t.copy.manual.arrays.large.volatiles.ShortTest
                            
  Scheduling class:                        
    actor1: package group free, core group free
    actor2: package group free, core group free                       

  CPU allocation: unspecified

  Compilation: unified across all actors

  JVM args: [-XX:TieredStopAtLevel=1]
  Fork: #1

  Messages:
    Timeout waiting for tasks to complete: 30013 ms
    Have stale threads, forcing VM to exit for proper cleanup.
```

The tests eventually succeed, if we bump the timeouts to much larger values (requires jcstress recompilation, unfortunately).

JDK 17 does these tests in 5 seconds. JDK 19 does these tests in 3.5 minutes, that is more than 40x slower.",,,,,,,,,,JDK-8291356,JDK-8291202,JDK-8289417,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290423,,,,,,,,,,JDK-8279886,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xls3:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-23 10:29;shade;Bisection points to JDK-8279886, and there is similar report in comments there.;;;","2022-06-23 11:30;shade;Profiling shows we spend exorbitant amount of time in ResourceMark::initialize, which I attribute to this block from JDK-8279886:

BitMap& BlockListBuilder::mark_loops(BlockBegin* block, bool in_subroutine) {
...
  ResourceMark rm;
  ResourceBitMap loop_state(BlockBegin::number_of_blocks());
  for (int i = number_of_successors(block) - 1; i >= 0; i--) {
    // recursively process all successors
    loop_state.set_union(mark_loops(successor_at(block, i), in_subroutine));
  }
...


Now that we have ResourceBitMap for all blocks every time we recursively descend to `mark_loops`, this starts to look something like O(n^2) of number of blocks, if we get unlucky?;;;","2022-06-23 12:02;iveresov;It actually is O(n). Every block is visited only once. The regression in compile speed should happen only for methods that contain irreducible loops. For these the alternative is either to spend more time on them (as a result of inserting a lot unnecessary phis) or bail out.;;;","2022-06-23 17:33;dlong;ILW = performance regression; seen in jcstress; no workaround = MMH = P3;;;","2022-06-24 16:32;iveresov;It looks like there is a quadratic aspect to it. I used BlockBegin::number_of_blocks() to size the bitmaps, however that is a total number of blocks. Since mark_loops() is called after every inlining (for every inlinee - no need to reanalyze the whole method), the bitmaps get progressively larger, and have to be zeroed. The solution is to appropriately size the bitmaps and keep the whole thing linear.;;;","2022-06-24 21:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/72
Date: 2022-06-25 04:35:59 +0000;;;","2022-06-28 09:29;dukebot;Changeset: 9b7805e3
Author:    Igor Veresov <iveresov@openjdk.org>
Date:      2022-06-28 16:26:08 +0000
URL:       https://git.openjdk.org/jdk19/commit/9b7805e3b4b3b5248a5cf8a5a5f3cf2260784a3b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Undefined Behaviour in class VMReg,JDK-8289060,5077729,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aph,aph,aph,2022-06-23 07:56,2022-08-04 03:19,2023-10-01 09:56,2022-07-06 08:25,11,17,18,19,20,8,20,hotspot,,0,oracle-triage-20,,,,,,,,,,,,,,,,,"VMReg has the same issues as Assembler, for the same reason.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291895,,,,JDK-8289856,JDK-8291798,JDK-8289046,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,"0|i2xlp7:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-23 16:40;dlong;ILW = Same as JDK-8289046 = P4 ;;;","2022-06-24 07:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9276
Date: 2022-06-24 13:58:29 +0000;;;","2022-07-06 08:25;dukebot;Changeset: dfb24ae4
Author:    Andrew Haley <aph@openjdk.org>
Date:      2022-07-06 15:22:00 +0000
URL:       https://git.openjdk.org/jdk/commit/dfb24ae4b7d32c0c625a9396429d167d9dcca183
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
x86_32 build fails with GCC 11 due to newString646_US warning,JDK-8289049,5077721,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,chagedorn,chagedorn,2022-06-23 03:48,2022-09-20 23:00,2023-10-01 09:56,2022-08-17 06:21,20,,,,,,20,hotspot,,0,noreg-build,oraclejdk-na,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,"While building x86 with GCC 10.3 works, we get some compilation errors with GCC 11 (tested with GCC 11.2.0):

/home/test/shipilev-jdk/src/java.base/share/native/libjava/jni_util.c: In function 'newString646_US':
/home/test/shipilev-jdk/src/java.base/share/native/libjava/jni_util.c:487:15: error: 'str1' may be used uninitialized [-Werror=maybe-uninitialized]
  487 |     result = (*env)->NewString(env, str1, len);
      |              ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/test/shipilev-jdk/src/java.base/share/native/libjava/jni_util.c:487:15: note: by argument 2 of type 'const jchar *' {aka 'const short unsigned int *'} to 'struct _jobject *(const struct JNINativeInterface_ **, const jchar *, jsize)' {aka 'struct _jobject *(const struct JNINativeInterface_ **, const short unsigned int *, int)'}

Some of the build failures seem to be related to JDK-8289046 ('this' pointer is null). Fixing JDK-8289046 should also fix these specific failures.",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289046,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2xlnf:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-23 03:50;chagedorn;ILW = x86 build failure, only with GCC 11 which treats some warnings as errors, disable warnings = HLM = P3;;;","2022-08-01 06:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9702
Date: 2022-08-01 11:46:52 +0000;;;","2022-08-17 06:21;dukebot;Changeset: 0c67fba1
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-08-17 12:52:17 +0000
URL:       https://git.openjdk.org/jdk/commit/0c67fba11f444cc3739f66c8a2d57564b5dcca72
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Undefined Behaviour in x86 class Assembler,JDK-8289046,5077716,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aph,aph,aph,2022-06-23 03:10,2022-08-04 03:19,2023-10-01 09:56,2022-08-01 02:03,11,17,18,19,20,8,20,hotspot,,0,oracle-triage-20,,,,,,,,,,,,,,,,,"All instances of type Register exhibit UB in the form of wild pointer (including null pointer) dereferences. This isn't very hard to fix: we should make Registers pointers to something rather than aliases of small integers.

JDK-8276563 fixed this for Aarch64 while this bug should fix it for x86.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289049,,,,,JDK-8289002,,,,,,,,JDK-8291895,JDK-8289060,,,JDK-8276563,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,generic,,,,,"0|i2xlmb:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-23 03:31;chagedorn;ILW = Same as JDK-8276563 = P4;;;","2022-06-23 08:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9261
Date: 2022-06-23 14:52:54 +0000;;;","2022-08-01 02:03;dukebot;Changeset: 86ef7b20
Author:    Andrew Haley <aph@openjdk.org>
Date:      2022-08-01 08:57:49 +0000
URL:       https://git.openjdk.org/jdk/commit/86ef7b20eb45899a91cf9ee83f723336c9477694
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ARM32: missing LIR_Assembler::cmove metadata type support,JDK-8289044,5077714,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bulasevich,bulasevich,bulasevich,2022-06-23 02:13,2023-03-24 07:46,2023-10-01 09:56,2022-06-27 11:34,17,19,20,,,,19,hotspot,,0,azul-interest,c1,jdk17u-fix-request,jdk17u-fix-yes,oraclejdk-na,oracle-triage-11,oracle-triage-17,oracle-triage-20,redhat-interest,,,,,,,,,"ARM32 Jtreg tests fails since https://github.com/openjdk/jdk/commit/8cd87e73
> compiler/floatingpoint/TestFloatJNIArgs.java#id0.TestFloatJNIArgs_id0
> runtime/logging/MonitorMismatchTest.java.MonitorMismatchTest

The output:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c1_LIRAssembler_arm.cpp:1482), pid=21156, tid=21171
#  Error: ShouldNotReachHere()",,,,,,,,,,JDK-8291322,JDK-8291149,JDK-8289145,JDK-8293312,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288303,,,,,,,,,,,,,,,,,,,arm,,,,,,,,,,,,,,"0|i2xllv:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-23 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9258
Date: 2022-06-23 09:20:43 +0000;;;","2022-06-23 04:04;chagedorn;Converting to a bug since we crash with ShouldNotReachHere().

ILW = C1 assertion in LIRAssembler, ARM32 only with two tests, disable compilation of affected method = HLM = P3;;;","2022-06-24 03:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/67
Date: 2022-06-24 10:46:59 +0000;;;","2022-06-26 22:25;thartmann;[~bulasevich] Please fix the incorrect backport creation according to https://openjdk.org/guide/#how-to-fix-an-incorrect-backport-creation-in-jbs. Thanks.;;;","2022-06-27 11:34;dukebot;Changeset: 20f55abd
Author:    Boris Ulasevich <bulasevich@openjdk.org>
Date:      2022-06-24 13:37:22 +0000
URL:       https://git.openjdk.org/jdk/commit/20f55abd2744323a756872e080885d107e6c56e5
;;;","2022-06-28 07:26;bulasevich;Fix was pushed while main bug was targeted to 20. Reset the main bug to fixed in 19.;;;","2022-09-01 14:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/651
Date: 2022-09-01 21:10:53 +0000;;;","2022-09-01 15:20;snazarki;Fix Request (17u)
Several jtreg tests fails on jdk17 as well.
Patch applies cleanly, reproducers now pass, tier1 passes. 

I doubt whether this fix should be added to 17.0.5 or 17.0.6.;;;","2023-03-24 07:46;jwilhelm;This one became messier than usual as it was pushed to JDK 19 after the RDP 1 fork, as indicated by Boris above. But it was also forwardported to JDK 20 before Boris did the cleanup dance, resulting in this issue being used for the JDK 20 change. The end result being that there was no JBS record for the JDK 20 backport. This main bug is supposed to be the JDK 19 record, so the JDK 19 change is here:

Changeset: 20f55abd
Author: Boris Ulasevich <bulasevich@openjdk.org>
Date: 2022-06-24 13:37:22 +0000
URL: https://git.openjdk.org/jdk19/commit/20f55abd2744323a756872e080885d107e6c56e5

The JDK 20 (mainline) change comment above is copied to the backport now targeted to JDK 20.;;;",,,,,,,,,,,,,,,,,,,,,,,,
C2: Vector constant materialization attempt,JDK-8289043,5077553,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,webbuggrp,webbuggrp,2022-06-21 09:20,2022-10-16 22:50,2023-10-01 09:56,2022-08-04 11:21,11.0.15,12,13,14,15,,11.0.18-oracle,hotspot,,0,additional-information-received,c2,dcsswa,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-20,reproducer-yes,sustaining,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Arch: x86_64
OS: Ubuntu 20.04.4 LTS
HotSpot
- openjdk version ""11.0.17-internal"" 2022-10-18
- OpenJDK Runtime Environment (fastdebug build 11.0.17-internal+0-adhoc.congli.my-jdk11u)
- OpenJDK 64-Bit Server VM (fastdebug build 11.0.17-internal+0-adhoc.congli.my-jdk11u, mixed mode)
javac: javac 11.0.17-internal

A DESCRIPTION OF THE PROBLEM :
The problem was found in the repo https://github.com/openjdk/jdk11u-dev (commit f915a327), OpenJDK 11.0.17 (internal). 

**Note** 
1. The given test may take **~1min** to make HotSpot crash. So please be patient.
2. Sorry, we cannot reduce the test further otherwise it cannot be reproduced.

The following is part of the log:
```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/zdata/congli/my-jdk11u/src/hotspot/share/opto/matcher.cpp:1591), pid=3346525, tid=3346783
#  assert(false) failed: bad AD file
#
# JRE version: OpenJDK Runtime Environment (11.0.17) (fastdebug build 11.0.17-internal+0-adhoc.congli.my-jdk11u)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 11.0.17-internal+0-adhoc.congli.my-jdk11u, mixed mode, tiered, compressed oops, g1 gc, linux-amd64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xmx1G -Xbatch Test

Host: amdsuplus3.inf.ethz.ch, AMD Ryzen Threadripper 3990X 64-Core Processor, 128 cores, 251G, Ubuntu 20.04.4 LTS
Time: Tue Jun 21 18:15:28 2022 CEST elapsed time: 1.182462 seconds (0d 0h 0m 1s)

---------------  T H R E A D  ---------------

Current thread (0x00007fddd86ed800):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=3346783, stack(0x00007fdda4513000,0x00007fdda4614000)]


Current CompileTask:
C2:   1182  122   !b  4       Test::lMeth (198 bytes)

Stack: [0x00007fdda4513000,0x00007fdda4614000],  sp=0x00007fdda460ea70,  free space=1006k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1a756ca]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x1ca
V  [libjvm.so+0x1a76835]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x35
V  [libjvm.so+0xc3626a]  report_vm_error(char const*, int, char const*, char const*, ...)+0x10a
V  [libjvm.so+0x1518490]  Matcher::Label_Root(Node const*, State*, Node*, Node*&)+0x5c0
V  [libjvm.so+0x15184fa]  Matcher::Label_Root(Node const*, State*, Node*, Node*&)+0x62a
V  [libjvm.so+0x15184fa]  Matcher::Label_Root(Node const*, State*, Node*, Node*&)+0x62a
V  [libjvm.so+0x1518f1b]  Matcher::match_tree(Node const*)+0x1bb
V  [libjvm.so+0x151db92]  Matcher::xform(Node*, int)+0xd42
V  [libjvm.so+0x15222d8]  Matcher::match()+0xbf8
V  [libjvm.so+0xb46065]  Compile::Code_Gen()+0xb5
V  [libjvm.so+0xb4c1ae]  Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1bbe
V  [libjvm.so+0x91bfc4]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)+0x334
V  [libjvm.so+0xb5d210]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x540
V  [libjvm.so+0xb5e8b8]  CompileBroker::compiler_thread_loop()+0x678
V  [libjvm.so+0x19ab8d2]  JavaThread::thread_main_inner()+0x252
V  [libjvm.so+0x19a42ab]  Thread::call_run()+0x7b
V  [libjvm.so+0x169a5b6]  thread_native_entry(Thread*)+0x106
```

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. javac Test.java
2. java -Xmx1G -Xbatch Test

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
No crashes
ACTUAL -
Crashed

---------- BEGIN SOURCE ----------
class Test {
  int N;
  int iFld;

  static long lMeth(int i, double d1, int i1) {
    int i21;
    float f2 = 54.993F;
    for (i21 = 5; i21 < 125; ++i21) {
      int i28 = 4;
      f2 += 65008;
      java.io.PrintStream ax$7 = System.out;
      java.io.PrintStream ax$8 = System.err;
      java.io.PrintStream ax$9 =
          new java.io.PrintStream(
              new java.io.OutputStream() {
                public void write(int b) {}
              });
      System.setOut(ax$9);
      for (int ax$5 = -3790; ax$5 < 3069; ax$5 += 1) {
        int ax$3 = i28;
        try {
          int[] ax$1 = {10, 20, 45, 38, 88};
          int[] ax$0 = new int[20];
          for (int ax$2 = 0; ax$2 < ax$0.length && ax$2 < ax$1.length; ax$2++)
            i28 += ax$0[ax$2] + ax$1[ax$2];
        } finally {
          i28 = ax$3;
        }
      }
      System.setOut(ax$7);
      System.setErr(ax$8);
    }
    long meth_res = Float.floatToIntBits(f2);
    return meth_res;
  }

  void mainTest(String[] strArr1) {
    double d = 2.2304;
    N <<= lMeth(iFld, d, iFld);
  }

  public static void main(String[] strArr) {
    Test _instance = new Test();
    for (int i; ; ) _instance.mainTest(strArr);
  }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8295174,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8223347,,,,,,,"2022-07-22 00:26;thartmann;Test-1.java;https://bugs.openjdk.org/secure/attachment/100099/Test-1.java","2022-06-23 01:53;sswsharm;Test.java;https://bugs.openjdk.org/secure/attachment/99668/Test.java","2022-06-23 21:14;pnarayanaswa;hotspot-bug-85.tar.gz;https://bugs.openjdk.org/secure/attachment/99682/hotspot-bug-85.tar.gz",,,,,,,,,,x86_64,,,,,,,,,linux_ubuntu,,,,,"0|i2xkm3:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-23 01:55;sswsharm;Not able to reproduce this issue on either GA build or fastdebug builds.

OS: Windows 10
JDK 8u333: Pass
JDK 11.0.15.1: Pass
JDK 17.0.3: Pass
JDK 18.0.1.1: Pass

Moving it to JDK for further analysis.

;;;","2022-06-23 21:15;pnarayanaswa;Additional Information from submitter:
======================================
The test we've provided for this issue thread is reduced by us. If you cannot reproduce the problem, please download the original unreduced test (i.e., Test.java and FuzzerUtils.java) from the following link:

<attached>

Note:
1. we are running using openjdk 11.0.17-internal built on commit f915a327, instead of either 11.0.15 (debug) or 11.0.15 (release)
2. the link also contains a hs_err_pidxxxxxx.log and replay_pidxxxxxx.log, which are generated by running the original unreduced test instead of the reduced one

Hope these can help you to diagnose the problem

          ;;;","2022-07-21 07:16;thartmann;I can reproduce this with the attached test up to JDK 13.02.;;;","2022-07-22 00:27;thartmann;I attached a simplified test (Test-1.java) that reproduces the issue up to JDK-8223347 in JDK 16 b21.;;;","2022-07-22 00:30;thartmann;ILW = Assert/crash during C2 compilation, with generated test, disable compilation of affected method = HLM = P3;;;","2022-07-22 01:22;thartmann;The problematic graph looks like this:

o970	ConL	=== o0  [[o748 o1674 o1625 o1114 o3945 ]]  #long:20
o89	CheckCastPP	=== o207 o4172  [[o3496 o3945 o3508 o184 o184 o3508 o183 o185 o3445 o3945 o4163 o3433 o3445  298 ]]  #int[int:5]:NotNull:exact *
o347	Initialize	=== o4126 o1 o549 o1 o1 o1 o4127  [[o209 o172  292 ]] 
o3551	If	=== o3547 o3550 o3549  [[o3527 o3552  269 ]] P=0,999999, C=-1,000000
o3945	AddP	=== _ o89 o89 o970  [[o4093 ]] 
o172	Proj	=== o347  [[o62 o62 o4093 o98 o3432 o3434 o384 o377 o426 o3495 o379 o496 o3497 o382 o382 o98 o99 o377 o588 o379  261 ]] #2  Memory: @rawptr:BotPTR, idx=Raw;
o3552	IfTrue	=== o3551  [[o3535 o4093  268 ]] #1
o4093	LoadVector	=== o3552 o172 o3945  [[o4094 ]]  @int[int:5]:NotNull:exact+any *, idx=10; mismatched #vectorx[4]:{int}
o4094	AddVI	=== _ o1 o4093  [[o4095 ]]  #vectorx[4]:{int}

The AddVI has a top input. It's LoadVector input is replaced during IGVN because its type is TOP:

 3945	AddP	=== _  89  89  970  [[ 4093 ]]  !orig=[3727],[606] !jvms: Writer::<init> @ bci:18 BufferedWriter::<init> @ bci:2 BufferedWriter::<init> @ bci:5 PrintStream::<init> @ bci:41 PrintStream::<init> @ bci:11 PrintStream::<init> @ bci:3 Test::test @ bci:262
 3943	AddP	=== _  90  90  970  [[ 4092 ]]  !orig=[3729],[585] !jvms: Writer::<init> @ bci:18 BufferedWriter::<init> @ bci:2 BufferedWriter::<init> @ bci:5 PrintStream::<init> @ bci:41 PrintStream::<init> @ bci:11 PrintStream::<init> @ bci:3 Test::test @ bci:262
 172	Proj	===  347  [[ 62  62  4093  4092  3432  3434  384  377  426  3495  379  496  3497  382  382  98  99  377  588  379  98 ]] #2  Memory: @rawptr:BotPTR, idx=Raw; !orig=[4835],[4842] !jvms: Test::test @ bci:32
 3552	IfTrue	===  3551  [[ 4092  4093  3535 ]] #1 !orig=[3608] !jvms: OutputStreamWriter::<init> @ bci:14 PrintStream::<init> @ bci:26 PrintStream::<init> @ bci:11 PrintStream::<init> @ bci:3 Test::test @ bci:262
 4093	LoadVector	===  3552  172  3945  [[ 4094 ]]  @int[int:5]:NotNull:exact+any *, idx=10; mismatched #vectorx[4]:{int} !orig=[3944],[3726],[405] !jvms: Writer::<init> @ bci:18 BufferedWriter::<init> @ bci:2 BufferedWriter::<init> @ bci:5 PrintStream::<init> @ bci:41 PrintStream::<init> @ bci:11 PrintStream::<init> @ bci:3 Test::test @ bci:262
 4092	LoadVector	===  3552  172  3943  [[ 4094 ]]  @int[int:20]:NotNull:exact+any *, idx=10; mismatched #top !orig=[3942],[3728],[380],3768 !jvms: BufferedWriter::<init> @ bci:21 BufferedWriter::<init> @ bci:5 PrintStream::<init> @ bci:41 PrintStream::<init> @ bci:11 PrintStream::<init> @ bci:3 Test::test @ bci:262
 4094	AddVI	=== _  4092  4093  [[ 4095 ]]  #vectorx[4]:{int} !orig=[3941],[3725],[204] !jvms: Writer::<init> @ bci:18 BufferedWriter::<init> @ bci:2 BufferedWriter::<init> @ bci:5 PrintStream::<init> @ bci:41 PrintStream::<init> @ bci:11 PrintStream::<init> @ bci:3 Test::test @ bci:262
;;;","2022-07-22 01:23;thartmann;[~vlivanov], could you please have a look?;;;","2022-08-02 14:19;vlivanov;The bug is fixed in 16 by JDK-8223347.;;;","2022-08-02 14:23;vlivanov;The problem arises in MemNode::can_see_stored_value() when trying to materialize zero constant for a vector type. Since vector memory nodes report T_VOID as their MemNode::memory_type(), it results in TOP constant being returned for phase->zerocon(memory_type()).;;;","2022-10-13 23:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1445
Date: 2022-10-11 21:42:00 +0000;;;","2022-10-14 00:56;mdoerr;Fix Request (11u): 
Should get fixed for parity with 11.0.18-oracle. Fix is small, tested and reviewed (see PR).;;;",,,,,,,,,,,,,,,,,,,,,,
[macos] app image signature invalid when creating DMG or PKG,JDK-8289030,5077698,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,almatvee,almatvee,almatvee,2022-06-22 18:05,2022-09-06 18:31,2023-10-01 09:56,2022-07-07 17:21,19,20,,,,,19,tools,,0,regression,regression_8250950,sn_121,sn_122,,,,,,,,,,,,,,"Signature is invalid on app-image after it was install/deployed via DMG or PKG.

PKG issue:
1) jpackage --type pkg -i input -n Test --main-class components.DynamicTreeDemo --main-jar DynamicTreeDemo.jar --mac-sign
2) Install pkg file
3) Verify signature and it will not be valid signature.
codesign -vvvv /Applications/Test.app 
/Applications/Test.app: a sealed resource is missing or invalid
file added: /Applications/Test.app/Contents/app/.package
file missing: /Applications/Test.app/Contents/app/.jpackage.xml

DMG issue:
1) jpackage --type dmg -i input -n Test --main-class components.DynamicTreeDemo --main-jar DynamicTreeDemo.jar --mac-sign
2) Mount DMG file
3) Verify signature and it will not be valid signature.
codesign -vvvv /Volumes/Test/Test.app
/Volumes/Test/Test.app: a sealed resource is missing or invalid
file added: /Volumes/Test/Test.app/Contents/app/.package
file missing: /Volumes/Test/Test.app/Contents/app/.jpackage.xml

App-image DMG issue:
1) jpackage --type app-image -i input -n Test --main-class components.DynamicTreeDemo --main-jar DynamicTreeDemo.jar --mac-sign
2) jpackage --type dmg --app-image Test.app
3) Verify signature and it will not be valid signature.
codesign -vvv /Volumes/Test/Test.app 
/Volumes/Test/Test.app: a sealed resource is missing or invalid
file added: /Volumes/Test/Test.app/Contents/app/.package
file modified: /Volumes/Test/Test.app/Contents/runtime/Contents/Home/legal/java.compiler/COPYRIGHT
.....
file modified: /Volumes/Test/Test.app/Contents/runtime/Contents/Home/legal/jdk.zipfs/LICENSE
file missing: /Volumes/Test/Test.app/Contents/app/.jpackage.xml

App-image PKG issue:
Same as ""App-image DMG issue"".",,,,,,,,,,JDK-8290100,JDK-8291400,JDK-8291243,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8250950,JDK-8293462,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xlib:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,Verified,,"2022-06-28 20:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/89
Date: 2022-06-29 03:03:15 +0000;;;","2022-07-07 17:21;dukebot;Changeset: 64286074
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-07-08 00:17:11 +0000
URL:       https://git.openjdk.org/jdk19/commit/64286074ba763d4a1e8879d8af69eee34d32cfa6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minimal x86_64 VM build fails with GCC 11: 'this' pointer is null,JDK-8289002,5077668,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,iklam,iklam,2022-06-22 13:14,2022-08-15 17:08,2023-10-01 09:56,2022-08-10 06:30,20,,,,,,20,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,,,,,"This is only partially solved by JDK-8289046. The remaining error is:

```
In file included from /home/test/shipilev-jdk/src/hotspot/share/oops/arrayKlass.hpp:28,
                 from /home/test/shipilev-jdk/src/hotspot/share/oops/typeArrayKlass.hpp:28,
                 from /home/test/shipilev-jdk/src/hotspot/share/oops/typeArrayOop.hpp:29,
                 from /home/test/shipilev-jdk/src/hotspot/share/oops/constantPool.hpp:34,
                 from /home/test/shipilev-jdk/src/hotspot/share/oops/fieldInfo.hpp:28,
                 from /home/test/shipilev-jdk/src/hotspot/share/oops/instanceKlass.hpp:31,
                 from /home/test/shipilev-jdk/src/hotspot/share/classfile/javaClasses.hpp:29,
                 from /home/test/shipilev-jdk/src/hotspot/share/precompiled/precompiled.hpp:35:
In member function 'bool Klass::is_instance_klass() const',
    inlined from 'static const InstanceKlass* InstanceKlass::cast(const Klass*)' at /home/test/shipilev-jdk/src/hotspot/share/oops/instanceKlass.hpp:1006:5,
    inlined from 'static InstanceKlass* InstanceKlass::cast(Klass*)' at /home/test/shipilev-jdk/src/hotspot/share/oops/instanceKlass.hpp:1001:43,
    inlined from 'static void DCmdFactory::send_notification_internal(JavaThread*)' at /home/test/shipilev-jdk/src/hotspot/share/services/diagnosticFramework.cpp:465:58:
/home/test/shipilev-jdk/src/hotspot/share/oops/klass.hpp:623:134: error: 'this' pointer is null [-Werror=nonnull]
  623 | bool is_instance_klass() const { return assert_same_query(_kind <= InstanceStackChunkKlassKind, is_instance_klass_slow()); }
      | ~~~~~~~~~~~~~~~~~~~~~~^~ 
```

This is specific to Minimal VM, because it disables ""management"" feature, and paths like these start to return NULL:

```
  static InstanceKlass* com_sun_management_internal_DiagnosticCommandImpl_klass(TRAPS)
      NOT_MANAGEMENT_RETURN_(NULL);
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289046,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,,,,,"0|i2xlbn:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-02 11:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9718
Date: 2022-08-02 18:11:33 +0000;;;","2022-08-10 06:30;dukebot;Changeset: 37d3146c
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-08-10 13:26:56 +0000
URL:       https://git.openjdk.org/jdk/commit/37d3146cca2c40dd53fcebd9cb78595f018b3489
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect @since tags for @value update in JDK-8286101,JDK-8288994,5077660,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-06-22 09:59,2022-06-29 23:08,2023-10-01 09:56,2022-06-22 13:49,20,,,,,,20,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,"The update for @value in JDK-8286101 was deferred from JDK 19 to JDK 20.
The @since tags need to be updated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xl9v:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-06-22 12:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9250
Date: 2022-06-22 19:47:53 +0000;;;","2022-06-22 13:49;dukebot;Changeset: 3b1ec3e6
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-06-22 20:48:31 +0000
URL:       https://git.openjdk.org/jdk/commit/3b1ec3e660b9905f59373022b287de77196b407c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make AwtFramePackTest generic by removing @requires tag,JDK-8288993,5077659,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,honkar,honkar,honkar,2022-06-22 09:58,2023-09-22 00:50,2023-10-01 09:56,2022-06-27 14:07,20,,,,,,20,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_121,,,,,,,,,,,,"The following test can be made generic as the condition frame.getSize() == frame.getPreferredSize() should hold on all platforms when frame.pack() is used.

Since the PR was already integrated before the review comment, this bug was created to make and track the change.
https://github.com/openjdk/jdk/pull/9118#discussion_r897553780",,,,,,,,,,JDK-8313852,JDK-8313784,JDK-8316714,JDK-8314497,JDK-8316574,JDK-8314817,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265586,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xl9n:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-06-22 12:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9248
Date: 2022-06-22 18:50:49 +0000;;;","2022-06-27 14:07;dukebot;Changeset: 40bf3b11
Author:    Harshitha Onkar <honkar@openjdk.org>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-06-27 21:02:11 +0000
URL:       https://git.openjdk.org/jdk/commit/40bf3b11679f1d4e9418c64a10fe6104e88086f1
;;;","2023-09-15 00:46;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
No risk, test only.
Clean backport, included in backport of  JDK-8265586.
Test passes on win. SAP nighlty testing passed.;;;","2023-09-15 00:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1743
Date: 2023-09-15 07:41:53 +0000;;;","2023-09-21 04:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2138
Date: 2023-09-21 10:56:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: CMN should be handled the same way as CMP,JDK-8288992,5077658,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aph,aph,aph,2022-06-22 09:37,2022-09-27 05:37,2023-10-01 09:56,2022-07-06 06:51,11,17,19,20,,,20,hotspot,,0,cleanup,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,oracle-triage-20,,,,,,,,,,,"At present, cmp(r8, -1) fails at comple time, but cmn(r8, -1) fails at runtime. We should fix cmn() to be the same as cmp().",,,,,,,,,,JDK-8294452,JDK-8291621,JDK-8291012,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8206895,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2xl9f:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-22 10:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9246
Date: 2022-06-22 17:03:42 +0000;;;","2022-06-23 01:30;chagedorn;ILW = Missing compile time check could lead to surprises at runtime when overflowing, no known cases, no workaround = MLH = P4;;;","2022-07-06 06:50;dukebot;Changeset: cc2b7927
Author:    Andrew Haley <aph@openjdk.org>
Date:      2022-07-06 13:49:46 +0000
URL:       https://git.openjdk.org/jdk/commit/cc2b79270445ccfb2181894fed2edfd4518a2904
;;;","2022-07-28 01:02;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
C2 change, simple cleanup, aarch only. Low risk.
Clean backport.
SAP nightly testing passed.;;;","2022-07-28 01:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/602
Date: 2022-07-28 08:07:24 +0000;;;","2022-09-22 06:34;thartmann;Fix Request (JDK 19u)
Simple C2 cleanup. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 17u. ;;;","2022-09-22 06:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/36
Date: 2022-09-22 13:35:17 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
P11TlsKeyMaterialGenerator should work with ChaCha20-Poly1305,JDK-8288985,5077653,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,valeriep,zzambers,zzambers,2022-06-22 08:40,2023-01-31 03:46,2023-10-01 09:56,2022-06-29 10:23,,,,,,,20,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,"TLS *_CHACHA20_POLY1305_* cipher suites are currently broken when configuration with SunPKCS11 provider is used. I discovered this by my ssl-tests testsuite [1].

make TEST_PKCS11_FIPS=1 SSLTESTS_SSL_CONFIG_FILTER=SunJSSE,Default,TLSv1.2,TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 SSLTESTS_CUSTOM_JAVA_PARAMS=-Djdk.tls.ephemeralDHKeySize=2048 ssl-tests
...
javax.net.ssl.SSLException: Unknown algorithm: ChaCha20-Poly1305
	at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:132)
	at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:371)
	at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:314)
	at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:309)
	at java.base/sun.security.ssl.SSLSocketImpl.handleException(SSLSocketImpl.java:1712)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:470)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:426)
	at SSLSocketClient.test(SSLSocketClient.java:72)
	at SSLSocketTester.testConfiguration(SSLSocketTester.java:392)
	at SSLSocketTester.testConfigurations(SSLSocketTester.java:322)
	at SSLSocketTester.testProvider(SSLSocketTester.java:234)
	at SSLSocketTester.testProviders(SSLSocketTester.java:190)
	at Main.main(Main.java:30)
Caused by: java.security.ProviderException: Unknown algorithm: ChaCha20-Poly1305
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11TlsKeyMaterialGenerator.engineGenerateKey(P11TlsKeyMaterialGenerator.java:168)
	at java.base/javax.crypto.KeyGenerator.generateKey(KeyGenerator.java:564)
	at java.base/sun.security.ssl.SSLTrafficKeyDerivation$LegacyTrafficKeyDerivation.<init>(SSLTrafficKeyDerivation.java:282)
	at java.base/sun.security.ssl.SSLTrafficKeyDerivation$T12TrafficKeyDerivationGenerator.createKeyDerivation(SSLTrafficKeyDerivation.java:117)
	at java.base/sun.security.ssl.SSLTrafficKeyDerivation.createKeyDerivation(SSLTrafficKeyDerivation.java:79)
	at java.base/sun.security.ssl.DHClientKeyExchange$DHClientKeyExchangeProducer.produce(DHClientKeyExchange.java:221)
	at java.base/sun.security.ssl.ClientKeyExchange$ClientKeyExchangeProducer.produce(ClientKeyExchange.java:65)
	at java.base/sun.security.ssl.SSLHandshake.produce(SSLHandshake.java:440)
	at java.base/sun.security.ssl.ServerHelloDone$ServerHelloDoneConsumer.consume(ServerHelloDone.java:182)
	at java.base/sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:396)
	at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:480)
	at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:458)
	at java.base/sun.security.ssl.TransportContext.dispatch(TransportContext.java:201)
	at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:172)
	at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1510)
	at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1425)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:455)
	... 7 more

FAILED: SunJSSE/Default: TLSv1.2 + TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256

Problem:
Exception is thrown by P11TlsKeyMaterialGenerator.engineGenerateKey method [2], based on result of P11SecretKeyFactory.getKeyType method [3], which only ""knows"" ""ChaCha20"" key algorithm, but does not accept ""ChaCha20-Poly1305"" as algorithm. Algorithm value is passed from SSLTrafficKeyDerivation.LegacyTrafficKeyDerivation class [4], which leads to algorithm field in SSLCipher class [5]. Value of that field comes from cipher name in JsseJce class [6] (ending at first slash, if any).

Fix:
This fix basically modifies P11SecretKeyFactory.getKeyType method to accept ""ChaCha20-Poly1305"" as alias for ""ChaCha20"".

Testing:
I ran jdk_security tests locally and they passed. Also failure in ssl-tests gets fixed.

[1] https://github.com/zzambers/ssl-tests
[2] https://github.com/openjdk/jdk/blob/b7a34f728d0653d55ef01da045c9aad4c0471143/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11TlsKeyMaterialGenerator.java#L168
[3] https://github.com/openjdk/jdk/blob/b7a34f728d0653d55ef01da045c9aad4c0471143/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11SecretKeyFactory.java#L101
[4] https://github.com/openjdk/jdk/blob/b7a34f728d0653d55ef01da045c9aad4c0471143/src/java.base/share/classes/sun/security/ssl/SSLTrafficKeyDerivation.java#L270
[5] https://github.com/openjdk/jdk/blob/b7a34f728d0653d55ef01da045c9aad4c0471143/src/java.base/share/classes/sun/security/ssl/SSLCipher.java#L496
[6] https://github.com/openjdk/jdk/blob/b7a34f728d0653d55ef01da045c9aad4c0471143/src/java.base/share/classes/sun/security/ssl/JsseJce.java#L81",,,,,,,,,,JDK-8294742,JDK-8293144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8255410,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xl8b:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,Verified,,"2022-06-22 08:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9072
Date: 2022-06-07 22:07:17 +0000;;;","2022-06-29 10:23;dukebot;Changeset: b6bd190d
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Valerie Peng <valeriep@openjdk.org>
Date:      2022-06-29 17:20:03 +0000
URL:       https://git.openjdk.org/jdk/commit/b6bd190d8d10fdb177f9fb100c9f44c9f57a3cb5
;;;","2022-08-29 20:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/650
Date: 2022-08-30 03:14:23 +0000;;;","2022-08-29 20:21;andrew;Fix Request [17u]

Clean backport, with test failing on unpatched JDK and passing when patched. Fix is simple and enables the use of ChaCha20-Poly1305 when using the PKCS11 provider.;;;","2022-09-22 08:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1369
Date: 2022-09-22 15:21:36 +0000;;;","2022-09-22 08:40;zzambers;Fix request (11u)

Backport making P11TlsKeyMaterialGenerator work with ChaCha20-Poly1305
Clean backport, passed jdk_security.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
broken link in com.sun.net.httpserver.SimpleFileServer,JDK-8288983,5077651,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jpai,jjg,jjg,2022-06-22 08:24,2022-07-27 09:17,2023-10-01 09:56,2022-06-24 19:40,19,,,,,,19,core-libs,,0,broken-links,noreg-doc,,,,,,,,,,,,,,,,"From doccheck:

api/jdk.httpserver/com/sun/net/httpserver/SimpleFileServer.html:109: id not found: api/jdk.httpserver/com/sun/net/httpserver/SimpleFileServer.html#server-impl

Here's the relevant source code:


 * A simple HTTP file server and its components (intended for testing,
 * development and debugging purposes only).
 *
 * <p> A <a href=""#server-impl"">simple file server</a> is composed of three
 * components:

It's not clear whether the <a> element is an undefined reference or was intended as a definition, in which case it should be `<span id=...>`",,,,,,,,,,JDK-8291340,JDK-8289243,JDK-8291150,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xl7v:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-06-23 03:40;dfuchs;I'm suspecting it was supposed to be an anchor - not an hyperlink.;;;","2022-06-23 22:50;jpai;This file was introduced as part of JEP 408 implementation. So I went back and looked at that PR https://github.com/openjdk/jdk/pull/5505. Right from the start till the end (when it was merged), there used to be a section in this javadoc that looked like (https://github.com/openjdk/jdk/pull/5505/files#diff-ed424e4a8463bc03aa2060b6827b534f191e2c2b6f166544aef7bbeeda8dd973R109):

<h2>Main entry point</h2>
 *
 * <p>A <a id=""server-impl"">simple HTTP file server implementation</a> is
 * provided via the
 * <a href=""{@docRoot}/jdk.httpserver/module-summary.html#entry-point"">main entry point</a>
 * of the {@code jdk.httpserver} module.

So that <a href=""#server-impl""> was meant to point to this section in the javadoc. I then checked the commit history on this file and it turns out that the above section got removed/changed when we introduced the jwebserver tool https://github.com/openjdk/jdk/pull/6497.

We can either remove the orphaned <a href=""#server-impl""> or we can link it back to this section. I'll raise a PR with relevant change after talking to Daniel and others today.
;;;","2022-06-24 01:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/64
Date: 2022-06-24 08:49:06 +0000;;;","2022-06-24 19:40;dukebot;Changeset: 7ac40f3b
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-06-25 02:36:27 +0000
URL:       https://git.openjdk.org/jdk19/commit/7ac40f3b9f526c13439ee15902ceec0dd8f868de
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve CLDRConverter run time,JDK-8288979,5077645,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,djelinski,djelinski,djelinski,2022-06-22 06:45,2022-06-29 23:09,2023-10-01 09:56,2022-06-23 11:50,19,,,,,,20,core-libs,,0,build-performance,cldr,noreg-build,,,,,,,,,,,,,,,"Looking into the performance of CLDRConverter I noticed that a lot of the time is spent doing comparisons in ResourceBundleGenerator#generateBundle.
The method is performing value deduplication by comparing every value to every other, essentially in O(n^2) time. This can be easily improved.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283324,,,,,,,,,,,,,,,,,,,,"2022-06-22 06:50;djelinski;profile-localedata.html;https://bugs.openjdk.org/secure/attachment/99654/profile-localedata.html",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xl6j:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2022-06-22 07:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9243
Date: 2022-06-22 14:24:05 +0000;;;","2022-06-23 11:50;dukebot;Changeset: c8cc94a3
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-06-23 18:44:54 +0000
URL:       https://git.openjdk.org/jdk/commit/c8cc94a38423c0cef597986fb51938a26dc20b51
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jpackage: test MSI installation fix,JDK-8288961,5077627,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,akasko,akasko,akasko,2022-06-22 04:42,2023-09-27 01:03,2023-10-01 09:56,2022-06-28 10:09,17,18,19,20,,,20,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,"jpackage test suite supports installation/uninstallation of both EXE and MSI packages. During installation EXE is invoked directly and MSI is invoked with msiexec utility, the same input path (only extension differs) is used. Currently this input path starts with a ""."" (current dir) symbol, it is processed correctly with EXE installation, but not with MSI, example:

[03:52:19.634] TRACE: assertTrue(): Check [.\\test.bcc14973\\output\\FileAssociationsTest-1.0.msi] path exists
[03:52:19.634] TRACE: assertTrue(): Check [.\\test.bcc14973\\output\\FileAssociationsTest-1.0.msi] is a file
[03:52:19.634] TRACE: exec: Execute [msiexec /qn /norestart /i .\\test.bcc14973\\output\\FileAssociationsTest-1.0.msi](5); discard I/O...
[03:52:19.790] TRACE: exec: Done. Exit code: 1619
[03:52:19.805] ERROR: Expected [0]. Actual [1619]: Check command [msiexec /qn /norestart /i .\\test.bcc14973\\output\\FileAssociationsTest-1.0.msi](5) exited with 0 code

It is proposed to normalize this path before passing it to msiexec utility.",,,,,,,,,,JDK-8316852,JDK-8317021,JDK-8316786,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,"0|i2xl2j:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-06-22 05:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9236
Date: 2022-06-22 11:53:39 +0000;;;","2022-06-28 10:09;dukebot;Changeset: c67149be
Author:    Alex Kasko <akasko@openjdk.org>
Committer: Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2022-06-28 17:06:08 +0000
URL:       https://git.openjdk.org/jdk/commit/c67149be4bd4922f9e6a55eb17deca684941d535
;;;","2023-09-26 01:33;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
No risk, only a test change.
Clean backport.
SAP nightly testing passed which includes this test.;;;","2023-09-26 01:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1793
Date: 2023-09-26 08:35:05 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/jvmti/vthread/ContStackDepthTest/ContStackDepthTest.java failing,JDK-8288949,5077613,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,rpressler,alanb,alanb,2022-06-22 03:05,2023-02-13 20:31,2023-10-01 09:56,2022-07-06 13:58,19,20,,,,,19,hotspot,,0,loom,problemlist,regression,tier4,tier6,tier7,tier8,,,,,,,,,,,"test/hotspot/jtreg/serviceability/jvmti/vthread/ContStackDepthTest/ContStackDepthTest.java is failing after JDK-8278053 unexcluded the test.


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/src/hotspot/share/prims/jvmtiThreadState.cpp:628), pid=28685, tid=28973
#  assert(_cur_stack_depth == num_frames) failed: cur_stack_depth out of sync _cur_stack_depth: 16 num_frames: 15
#
# JRE version: Java(TM) SE Runtime Environment (19.0+28) (fastdebug build 19-ea+28-2105)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+28-2105, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x13d7a44]  JvmtiThreadState::cur_stack_depth()+0xc4
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/scratch/1/core.28685)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

Current thread (0x00007f04c841b280):  JavaThread ""MainThread"" [_thread_in_vm, id=28973, stack(0x00007f049d2e9000,0x00007f049d3ea000)]

Stack: [0x00007f049d2e9000,0x00007f049d3ea000],  sp=0x00007f049d3e7f00,  free space=1019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x13d7a44]  JvmtiThreadState::cur_stack_depth()+0xc4
V  [libjvm.so+0x13923b9]  JvmtiExport::post_method_exit_inner(JavaThread*, methodHandle&, JvmtiThreadState*, bool, frame, jvalue&) [clone .part.0]+0xb9
V  [libjvm.so+0x139590e]  JvmtiExport::post_method_exit(JavaThread*, Method*, frame)+0x1ae
V  [libjvm.so+0xff779b]  InterpreterRuntime::post_method_exit(JavaThread*)+0xbb
j  jdk.internal.vm.Continuation.enter0()V+9 java.base@19-ea
j  jdk.internal.vm.Continuation.enter(Ljdk/internal/vm/Continuation;Z)V+1 java.base@19-ea
J 6146  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@19-ea (0 bytes) @ 0x00007f04b891e04b [0x00007f04b891dfc0+0x000000000000008b]
j  jdk.internal.vm.Continuation.run()V+152 java.base@19-ea
j  ContStackDepthTest.getNextFib()Ljava/math/BigInteger;+3
j  ContStackDepthTest.fibTest()V+79
J 5818 c1 ContStackDepthTest.main([Ljava/lang/String;)V (79 bytes) @ 0x00007f04b0d42d14 [0x00007f04b0d42a00+0x0000000000000314]
J 5824 c1 java.lang.invoke.LambdaForm$DMH+0x0000000801003400.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V java.base@19-ea (14 bytes) @ 0x00007f04b0d40ed4 [0x00007f04b0d40ac0+0x0000000000000414]
J 5947 c1 java.lang.invoke.LambdaForm$MH+0x0000000801004800.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; java.base@19-ea (38 bytes) @ 0x00007f04b0c13f74 [0x00007f04b0c13980+0x00000000000005f4]
J 5948 c1 java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; java.base@19-ea (24 bytes) @ 0x00007f04b0c130ac [0x00007f04b0c12940+0x000000000000076c]
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 java.base@19-ea
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 java.base@19-ea
J 3300 c2 java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@19-ea (108 bytes) @ 0x00007f04b8967538 [0x00007f04b8967280+0x00000000000002b8]
J 5702 c1 com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V (476 bytes) @ 0x00007f04b0b5c80c [0x00007f04b0b5b3e0+0x000000000000142c]
J 5698 c1 java.lang.Thread.run()V java.base@19-ea (19 bytes) @ 0x00007f04b0bd2d3c [0x00007f04b0bd2ba0+0x000000000000019c]
v  ~StubRoutines::call_stub 0x00007f04b800dd47
V  [libjvm.so+0x1013fa5]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x505
V  [libjvm.so+0x1014834]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x4b4
V  [libjvm.so+0x1014ca7]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x77
V  [libjvm.so+0x1197fbb]  thread_entry(JavaThread*, JavaThread*)+0x12b
V  [libjvm.so+0x1aa093c]  JavaThread::thread_main_inner()+0x23c
V  [libjvm.so+0x1aabfa0]  Thread::call_run()+0x100
V  [libjvm.so+0x175db14]  thread_native_entry(Thread*)+0x104",,,,,,,,,,JDK-8289967,JDK-8291392,JDK-8291230,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290013,JDK-8302351,JDK-8289128,,JDK-8278053,JDK-8218403,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xkzf:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-06-22 04:07;rpressler;The enterSpecial special nmethod is always compiled and run even in interp_only_mode. It calls get_resolve_static_call_stub to resolve its target (Continuation::enter), which returns the compiled entry, even in interp_only_mode.;;;","2022-06-22 07:14;rpressler;This bug is unrelated to the linked issues. They might have hidden it by crashing in a different way. This failure occurs before the first freeze/thaw.;;;","2022-06-22 09:04;dcubed;I don't consider:

JDK-8278053 serviceability/jvmti/vthread/ContStackDepthTest/ContStackDepthTest.java failing in loom repo with Xcomp

to be unrelated to these test failures. JDK-8278053 was used to remove
serviceability/jvmti/vthread/ContStackDepthTest/ContStackDepthTest.java
from the ProblemList-Xcomp.txt file and the test now fails in exactly that
configuration.

I've looked at https://git.openjdk.org/jdk19/pull/12 and it is not at all clear
what testing was done prior to integration of that fix. Since that fix removed
the test from the ProblemList-Xcomp.txt file, a Tier4 test run should have
been done to verify that the test no longer fails in Tier4. Since the test still
fails, it should not have been removed from the ProblemList-Xcomp.txt file.
I could see updating the entry to refer to a new bug, but not removal.

We already have 14 failures of the test between the JDK19 and JDK20 CIs.;;;","2022-06-22 09:26;rpressler;The failure reproduces even after reverting the fixes for JDK-8278053 and JDK-8286103, and even without the +DeoptimizeALot flag.

But yes, it occurs now because the test was removed from the exclude lists.;;;","2022-06-24 02:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/66
Date: 2022-06-24 09:23:26 +0000;;;","2022-07-06 13:58;dukebot;Changeset: 9a0fa824
Author:    Ron Pressler <rpressler@openjdk.org>
Date:      2022-07-06 20:53:13 +0000
URL:       https://git.openjdk.org/jdk19/commit/9a0fa8242461afe9ee4bcf80523af13500c9c1f2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Few J2DBench tests indicate lower primitive drawing performance with metal rendering pipeline,JDK-8288948,5077612,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aghaisas,aghaisas,aghaisas,2022-06-22 03:04,2022-12-18 22:09,2023-10-01 09:56,2022-07-17 22:23,19,20,,,,,20,client-libs,,0,lanai,sn_120,sn_121,sn_122,,,,,,,,,,,,,,"JDK-8285388 has four J2DBench test option files for which rendering performance is slower with metal rendering pipeline.
This bug is to address performance issue for 2 option files (out of 4)
The same J2DBench test option files are attached to this bug from JDK-8285388.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285388,,,,JDK-8291266,JDK-8298217,,,,,,"2022-06-22 03:14;aghaisas;J2D_FillRectGradientColor.opt;https://bugs.openjdk.org/secure/attachment/99642/J2D_FillRectGradientColor.opt","2022-06-22 03:14;aghaisas;J2D_ShapesSolidColor.opt;https://bugs.openjdk.org/secure/attachment/99643/J2D_ShapesSolidColor.opt","2022-06-23 03:45;aghaisas;Results_J2DBench.png;https://bugs.openjdk.org/secure/attachment/99669/Results_J2DBench.png","2022-06-23 03:45;aghaisas;Results_RenderPerf.png;https://bugs.openjdk.org/secure/attachment/99670/Results_RenderPerf.png","2022-06-23 03:45;aghaisas;Results_Swingmark.png;https://bugs.openjdk.org/secure/attachment/99671/Results_Swingmark.png",,,,,,,,aarch64,x86_64,,,,,,,,os_x,,,,,"0|i2xkz7:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-06-23 03:43;aghaisas;Root Cause of slower performance :
It is found that the multiple calls to MTLRenderCommandEncoder drawPrimitives() by using MTLRenderCommandEncoder setVertexBytes() to send a tiny amount of data each time slows down the rendering.

Fix :
MTLRenderCommandEncoder setVertexBytes() can accept 4KB of buffer at a time. The primitive drawing logic is modified to collate adjacent draw calls.

More insight :
In general, an application requires a mix of 2D shapes, images and text of different color and sizes.
The performance test that we have measure rendering performance of extreme cases such as -

1) J2DBench - tests the repeated drawing of the same type and same color in a time period - e.g. Find the rendering speed of repeated 2D Line draw operation in X mSec?
2) RenderPerf test - tests the drawing of N primitives of the same type but each instance with a different color and capture FPS.

This fix optimizes the Java2D Metal rendering pipeline implementation for the first case where the same primitive is drawn repeatedly without changing its color. Our current architecture needs to be tweaked to address slower performance shown by RenderPerf tests. If needed, that needs to be done separately.

Results :
The attached screenshots show the performance results.
- J2DBench test results of Metal rendering pipeline for the 2 option files mentioned in the Bug are improved.
- Some impact is seen on RenderPerf test results in few cases
- Some impact is seen on Swingmark Tree test where operations alternate between draw and set color.;;;","2022-06-23 04:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9245
Date: 2022-06-22 16:32:11 +0000;;;","2022-07-17 22:22;dukebot;Changeset: bc7a1ea2
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2022-07-18 05:18:37 +0000
URL:       https://git.openjdk.org/jdk/commit/bc7a1ea249d8438e325c36042f7d8fc7eaaf0e40
;;;","2022-12-18 22:09;aghaisas;Fix for this bug had partially addressed JDK-8285388.
This fix was reverted to address - JDK-8298217.
Hence all 4 J2DBench test option files need to be addressed again as part of JDK-8285388.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong lock ordering writing G1HeapRegionTypeChange JFR event,JDK-8288936,5077601,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,rschmelter,rschmelter,2022-06-21 23:01,2023-08-14 11:56,2023-10-01 09:56,2023-08-09 06:35,11,17,21,22,,,22,hotspot,,0,amazon-interest,gc-g1,jfr,zgc,,,,,,,,,,,,,,"When writing a G1HeapRegionTypeChange JFR event the following assertion can be triggered:
assert(false) failed: Attempting to acquire lock JfrMsg_lock/nosafepoint-3 out of order with lock FreeList_lock/service-1 -- possible deadlock

The associated stack trace is on Windows looks like this:
V  [jvm.dll+0xe486d3]  os::platform_print_native_stack+0x63  (os_windows_x86.cpp:235)
V  [jvm.dll+0x1140ae8]  VMError::report+0x1238  (vmError.cpp:835)
V  [jvm.dll+0x114334e]  VMError::report_and_die+0x6ce  (vmError.cpp:1683)
V  [jvm.dll+0x11439b1]  VMError::report_and_die+0x81  (vmError.cpp:1468)
V  [jvm.dll+0x60a39d]  report_vm_error+0x9d  (debug.cpp:284)
V  [jvm.dll+0xdd7ba7]  Mutex::check_rank+0x427  (mutex.cpp:444)
V  [jvm.dll+0xdd81e4]  Mutex::try_lock_inner+0x44  (mutex.cpp:170)
V  [jvm.dll+0xdd8025]  Mutex::try_lock+0x15  (mutex.cpp:182)
V  [jvm.dll+0x9de60f]  JfrMonitorTryLock::JfrMonitorTryLock+0x3f  (jfrTryLock.hpp:59)
V  [jvm.dll+0x9ddfb6]  JfrPostBox::asynchronous_post+0x66  (jfrPostBox.cpp:107)
V  [jvm.dll+0x9dddb1]  JfrPostBox::post+0x61  (jfrPostBox.cpp:82)
V  [jvm.dll+0x9e8a1d]  JfrStorage::register_full+0xed  (jfrStorage.cpp:284)
V  [jvm.dll+0x9ed8fb]  JfrMemorySpace<JfrStorage,JfrMspaceRetrieval,JfrLinkedList<JfrBuffer,JfrCHeapObj>,JfrLinkedList<JfrBuffer,JfrCHeapObj>,0>::register_full+0x2b  (jfrMemorySpace.inline.hpp:301)
V  [jvm.dll+0x9ea228]  JfrMspaceRetrieval<JfrMemorySpace<JfrStorage,JfrMspaceRetrieval,JfrLinkedList<JfrBuffer,JfrCHeapObj>,JfrLinkedList<JfrBuffer,JfrCHeapObj>,0> >::acquire<StopOnNullCondition<JfrLinkedList<JfrBuffer,JfrCHeapObj> > >+0x108  (jfrMemorySpaceRetrieval.hpp:59)
V  [jvm.dll+0x9ebfe7]  JfrMspaceRetrieval<JfrMemorySpace<JfrStorage,JfrMspaceRetrieval,JfrLinkedList<JfrBuffer,JfrCHeapObj>,JfrLinkedList<JfrBuffer,JfrCHeapObj>,0> >::acquire+0x87  (jfrMemorySpaceRetrieval.hpp:43)
V  [jvm.dll+0x9ebeaa]  JfrMemorySpace<JfrStorage,JfrMspaceRetrieval,JfrLinkedList<JfrBuffer,JfrCHeapObj>,JfrLinkedList<JfrBuffer,JfrCHeapObj>,0>::acquire+0x3a  (jfrMemorySpace.inline.hpp:241)
V  [jvm.dll+0x9eae78]  mspace_acquire_live<JfrMemorySpace<JfrStorage,JfrMspaceRetrieval,JfrLinkedList<JfrBuffer,JfrCHeapObj>,JfrLinkedList<JfrBuffer,JfrCHeapObj>,0> >+0x38  (jfrMemorySpace.inline.hpp:422)
V  [jvm.dll+0x9eaf11]  mspace_acquire_live_with_retry<JfrMemorySpace<JfrStorage,JfrMspaceRetrieval,JfrLinkedList<JfrBuffer,JfrCHeapObj>,JfrLinkedList<JfrBuffer,JfrCHeapObj>,0> >+0x91  (jfrMemorySpace.inline.hpp:428)
V  [jvm.dll+0x9e9388]  acquire_promotion_buffer+0x78  (jfrStorage.cpp:178)
V  [jvm.dll+0x9e7788]  JfrStorage::flush_regular_buffer+0x148  (jfrStorage.cpp:244)
V  [jvm.dll+0x9e78d8]  JfrStorage::flush_regular+0x58  (jfrStorage.cpp:400)
V  [jvm.dll+0x9e8d49]  JfrStorage::flush+0xe9  (jfrStorage.cpp:388)
V  [jvm.dll+0x9ab9e2]  JfrFlush::JfrFlush+0x52  (jfrFlush.cpp:35)
V  [jvm.dll+0x2d2e83]  Adapter<JfrFlush>::flush+0x73  (jfrStorageAdapter.hpp:84)
V  [jvm.dll+0x2d224e]  StorageHost<Adapter<JfrFlush>,StackObj>::accommodate+0x2e  (jfrStorageHost.inline.hpp:66)
V  [jvm.dll+0x2d2c13]  WriterHost<EncoderHost<BigEndianEncoderImpl,BigEndianEncoderImpl>,EncoderHost<Varint128EncoderImpl,BigEndianEncoderImpl>,MemoryWriterHost<Adapter<JfrFlush>,StackObj,ExclusiveAccessAssert> >::ensure_size+0x53  (jfrWriterHost.inline.hpp:169)
V  [jvm.dll+0x2d18c2]  WriterHost<EncoderHost<BigEndianEncoderImpl,BigEndianEncoderImpl>,EncoderHost<Varint128EncoderImpl,BigEndianEncoderImpl>,MemoryWriterHost<Adapter<JfrFlush>,StackObj,ExclusiveAccessAssert> >::write<unsigned __int64>+0x92  (jfrWriterHost.inline.hpp:77)
V  [jvm.dll+0x2d1923]  WriterHost<EncoderHost<BigEndianEncoderImpl,BigEndianEncoderImpl>,EncoderHost<Varint128EncoderImpl,BigEndianEncoderImpl>,MemoryWriterHost<Adapter<JfrFlush>,StackObj,ExclusiveAccessAssert> >::write<unsigned __int64>+0x23  (jfrWriterHost.inline.hpp:182)
V  [jvm.dll+0x925733]  EventG1HeapRegionTypeChange::writeData<EventWriterHost<EncoderHost<BigEndianEncoderImpl,BigEndianEncoderImpl>,EncoderHost<Varint128EncoderImpl,BigEndianEncoderImpl>,MemoryWriterHost<Adapter<JfrFlush>,StackObj,ExclusiveAccessAssert> > >+0x33  (jfrEventClasses.hpp:5368)
V  [jvm.dll+0x925ff8]  JfrEvent<EventG1HeapRegionTypeChange>::write_sized_event+0x148  (jfrEvent.hpp:250)
V  [jvm.dll+0x925e57]  JfrEvent<EventG1HeapRegionTypeChange>::write_event+0xa7  (jfrEvent.hpp:219)
V  [jvm.dll+0x925968]  JfrEvent<EventG1HeapRegionTypeChange>::commit+0x68  (jfrEvent.hpp:93)
V  [jvm.dll+0x9256d4]  HeapRegionTracer::send_region_type_change+0xb4  (heapRegionTracer.cpp:43)
V  [jvm.dll+0x913c0b]  HeapRegion::report_region_type_change+0x5b  (heapRegion.cpp:273)
V  [jvm.dll+0x914248]  HeapRegion::set_survivor+0x18  (heapRegion.cpp:170)
V  [jvm.dll+0x80f62f]  G1CollectedHeap::new_gc_alloc_region+0xef  (g1CollectedHeap.cpp:3273)
V  [jvm.dll+0x7e8024]  G1GCAllocRegion::allocate_new_region+0x84  (g1AllocRegion.cpp:351)
V  [jvm.dll+0x7e6bf2]  G1AllocRegion::new_alloc_region_and_allocate+0x172  (g1AllocRegion.cpp:139)
V  [jvm.dll+0x7ebb0c]  G1AllocRegion::attempt_allocation_using_new_region+0x3c  (g1AllocRegion.inline.hpp:106)
V  [jvm.dll+0x7ebabe]  G1AllocRegion::attempt_allocation_locked+0x5e  (g1AllocRegion.inline.hpp:100)
V  [jvm.dll+0x7e9073]  G1Allocator::survivor_attempt_allocation+0xe3  (g1Allocator.cpp:255)
V  [jvm.dll+0x7e9bd7]  G1Allocator::par_allocate_during_gc+0x57  (g1Allocator.cpp:230)
V  [jvm.dll+0x7e9afc]  G1Allocator::par_allocate_during_gc+0x4c  (g1Allocator.cpp:216)
V  [jvm.dll+0x7ea32e]  G1PLABAllocator::allocate_direct_or_new_plab+0x22e  (g1Allocator.cpp:362)
V  [jvm.dll+0x86f0a2]  G1ParScanThreadState::allocate_copy_slow+0x72  (g1ParScanThreadState.cpp:403)
V  [jvm.dll+0x86f361]  G1ParScanThreadState::do_copy_to_survivor_space+0x151  (g1ParScanThreadState.cpp:468)
V  [jvm.dll+0x870ce7]  G1ParScanThreadState::do_oop_evac<enum narrowOop>+0x147  (g1ParScanThreadState.cpp:211)
V  [jvm.dll+0x86f815]  G1ParScanThreadState::dispatch_task+0x45  (g1ParScanThreadState.cpp:289)
V  [jvm.dll+0x86fbfa]  G1ParScanThreadState::trim_queue_to_threshold+0x8a  (g1ParScanThreadState.cpp:311)
V  [jvm.dll+0x86c7fe]  G1ParScanThreadState::trim_queue_partially+0x3e  (g1ParScanThreadState.inline.hpp:54)
V  [jvm.dll+0x8965b9]  G1ScanHRForRegionClosure::scan_memregion+0x149  (g1RemSet.cpp:797)
V  [jvm.dll+0x893120]  G1ScanHRForRegionClosure::do_claimed_block+0x1b0  (g1RemSet.cpp:817)
V  [jvm.dll+0x892e24]  G1ScanHRForRegionClosure::do_card_block+0x54  (g1RemSet.cpp:825)
V  [jvm.dll+0x8963a6]  G1ScanHRForRegionClosure::scan_heap_roots+0x216  (g1RemSet.cpp:857)
V  [jvm.dll+0x893e27]  G1ScanHRForRegionClosure::do_heap_region+0xe7  (g1RemSet.cpp:902)
V  [jvm.dll+0x894e5e]  G1RemSetScanState::iterate_dirty_regions_from+0xae  (g1RemSet.cpp:420)
V  [jvm.dll+0x87fce6]  G1RemSet::scan_heap_roots+0x76  (g1RemSet.cpp:923)
V  [jvm.dll+0x8ad25c]  G1EvacuateRegionsTask::scan_roots+0x6c  (g1YoungCollector.cpp:667)
V  [jvm.dll+0x8ad5c5]  G1EvacuateRegionsBaseTask::work+0x95  (g1YoungCollector.cpp:653)
V  [jvm.dll+0x118cf46]  WorkerTaskDispatcher::worker_run_task+0x76  (workerThread.cpp:72)
V  [jvm.dll+0x118d4a0]  WorkerThread::run+0x30  (workerThread.cpp:164)
V  [jvm.dll+0x10a374c]  Thread::call_run+0x15c  (thread.cpp:365)
V  [jvm.dll+0xe40db8]  thread_native_entry+0x108  (os_windows.cpp:545)
C  [ucrtbase.dll+0x21bb2]
C  [KERNEL32.DLL+0x17034]
C  [ntdll.dll+0x52651]

The problem can be reproduced with a debug version of the VM with the following command line:
java -XX:StartFlightRecording=settings=g1-heap-region-change.jfc,flush-interval=1h -Xmx1G -Xms128M  -XX:+UseG1GC examples.Allocator

with the following settings for the g1-heap-region-change.jfc file:
<?xml version=""1.0"" encoding=""UTF-8""?>
<configuration version=""2.0"" label=""GC History Simulation"" description=""Should include events anaolg to our GC history file."" provider=""Oracle"">

  <event name=""jdk.G1HeapRegionTypeChange"">
    <setting name=""enabled"">true</setting>
  </event>

</configuration>

and this Allocator code:
package examples;

public class Allocator {

	public static void main(String[] args) {
		long maxMem = 1024 * 1024 * 768;
		long minMem = 1024 * 1024 * 64;
		int maxOverwrite = 24;
		int chunkSize = 1024 * 10;
		byte[][] roots = new byte[1 + (int) (maxMem / chunkSize)][];
		long used = 0;
		int pos = 0;

		while (true) {
			int overwriteCount = (int) (Math.random() * maxOverwrite);

			while (used < maxMem) {
				for (int i = 0; i <= overwriteCount; ++i) {
					roots[pos] = new byte[chunkSize];
				}
				
				pos += 1;
				used += chunkSize;
			}
			
			long targetUse = minMem + (long) ((maxMem - minMem) * Math.random());

			while (used > targetUse) {
				pos -= 1;
				roots[pos] = null;
				used -= chunkSize;
			}
		}
	}
}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xkwr:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-08-04 05:12;mgronlun;Also ZGC has run into lock ordering problems:

Stack: [0x0000009347e00000,0x0000009347f00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc548d1]  os::win32::platform_print_native_stack+0x101  (os_windows_x86.cpp:236)
V  [jvm.dll+0xef257c]  VMError::report+0x146c  (vmError.cpp:991)
V  [jvm.dll+0xef4975]  VMError::report_and_die+0x645  (vmError.cpp:1797)
V  [jvm.dll+0xef5084]  VMError::report_and_die+0x64  (vmError.cpp:1562)
V  [jvm.dll+0x53eabb]  report_vm_error+0x5b  (debug.cpp:191)
V  [jvm.dll+0xbf031d]  Mutex::check_rank+0x22d  (mutex.cpp:447)
V  [jvm.dll+0xbf0f9f]  Mutex::try_lock+0x2f  (mutex.cpp:182)
V  [jvm.dll+0x82e5eb]  JfrPostBox::post+0xab  (jfrPostBox.cpp:81)
V  [jvm.dll+0x839296]  JfrStorage::register_full+0x126  (jfrStorage.cpp:282)
V  [jvm.dll+0x835891]  JfrMspaceRetrieval<JfrMemorySpace<JfrStorage,JfrMspaceRetrieval,JfrLinkedList<JfrBuffer,JfrCHeapObj>,JfrLinkedList<JfrBuffer,JfrCHeapObj>,0> >::acquire<StopOnNullCondition<JfrLinkedList<JfrBuffer,JfrCHeapObj> > >+0xc1  (jfrMemorySpaceRetrieval.hpp:59)
V  [jvm.dll+0x835e00]  mspace_acquire_live_with_retry<JfrMemorySpace<JfrStorage,JfrMspaceRetrieval,JfrLinkedList<JfrBuffer,JfrCHeapObj>,JfrLinkedList<JfrBuffer,JfrCHeapObj>,0> >+0x90  (jfrMemorySpace.inline.hpp:434)
V  [jvm.dll+0x8380e4]  JfrStorage::flush_regular_buffer+0xe4  (jfrStorage.cpp:244)
V  [jvm.dll+0x837e3e]  JfrStorage::flush_regular+0x8e  (jfrStorage.cpp:400)
V  [jvm.dll+0x837cf5]  JfrStorage::flush+0x195  (jfrStorage.cpp:388)
V  [jvm.dll+0x800fe4]  JfrFlush::JfrFlush+0x34  (jfrFlush.cpp:35)
V  [jvm.dll+0x22af99]  Adapter<JfrFlush>::flush+0x49  (jfrStorageAdapter.hpp:84)
V  [jvm.dll+0x22a761]  StorageHost<Adapter<JfrFlush>,StackObj>::accommodate+0x31  (jfrStorageHost.inline.hpp:66)
V  [jvm.dll+0x22aecb]  WriterHost<EncoderHost<BigEndianEncoderImpl,BigEndianEncoderImpl>,EncoderHost<Varint128EncoderImpl,BigEndianEncoderImpl>,MemoryWriterHost<Adapter<JfrFlush>,StackObj,ExclusiveAccessAssert> >::ensure_size+0x3b  (jfrWriterHost.inline.hpp:171)
V  [jvm.dll+0x22a6d6]  WriterHost<EncoderHost<BigEndianEncoderImpl,BigEndianEncoderImpl>,EncoderHost<Varint128EncoderImpl,BigEndianEncoderImpl>,MemoryWriterHost<Adapter<JfrFlush>,StackObj,ExclusiveAccessAssert> >::write<__int64>+0x26  (jfrWriterHost.inline.hpp:183)
V  [jvm.dll+0xf739b6]  JfrEvent<EventZPageAllocation>::write_sized_event+0x206  (jfrEvent.hpp:241)
V  [jvm.dll+0xf73356]  JfrEvent<EventZPageAllocation>::write_event+0x166  (jfrEvent.hpp:217)
V  [jvm.dll+0xf7149f]  XPageAllocator::alloc_page+0x60f  (xPageAllocator.cpp:697)
V  [jvm.dll+0xf532d7]  XHeap::alloc_page+0x27  (xHeap.cpp:174)
V  [jvm.dll+0xf6f98e]  XObjectAllocator::alloc_page+0x4e  (xObjectAllocator.cpp:72)
V  [jvm.dll+0xf6f82c]  XObjectAllocator::alloc_object_in_shared_page+0x6c  (xObjectAllocator.cpp:102)
V  [jvm.dll+0xf6f4b5]  XObjectAllocator::alloc_object+0x65  (xObjectAllocator.cpp:170)
V  [jvm.dll+0xf6f6de]  XObjectAllocator::alloc_object_for_relocation+0x2e  (xObjectAllocator.cpp:181)
V  [jvm.dll+0xf7c0f1]  relocate_object_inner+0xd1  (xRelocate.cpp:68)
V  [jvm.dll+0xf7bf95]  XRelocate::relocate_object+0x55  (xRelocate.cpp:100)
V  [jvm.dll+0xf45456]  XBarrier::relocate+0xc6  (xBarrier.cpp:111)
V  [jvm.dll+0xf4555c]  XBarrier::relocate_or_mark+0x2c  (xBarrier.cpp:115)
V  [jvm.dll+0xf6ced3]  XNMethodOopClosure::do_oop+0x253  (xNMethod.cpp:247)
V  [jvm.dll+0xf6d55a]  XNMethod::nmethod_oops_do_inner+0xaa  (xNMethod.cpp:228)
V  [jvm.dll+0xf6d414]  XNMethod::nmethod_oops_barrier+0x24  (xNMethod.cpp:259)
V  [jvm.dll+0xf4cc41]  XBarrierSetNMethod::nmethod_entry_barrier+0xa1  (xBarrierSetNMethod.cpp:63)
V  [jvm.dll+0xf80568]  XOnStackCodeBlobClosure::do_code_blob+0x38  (xStackWatermark.cpp:43)
V  [jvm.dll+0x62c2e8]  frame::oops_code_blob_do+0x1b8  (frame.cpp:984)
V  [jvm.dll+0xf80817]  XStackWatermark::process+0x67  (xStackWatermark.cpp:99)
V  [jvm.dll+0xd69435]  StackWatermarkFramesIterator::process_one+0x165  (stackWatermark.cpp:104)
V  [jvm.dll+0xd69838]  StackWatermark::start_processing_impl+0xd8  (stackWatermark.cpp:218)
V  [jvm.dll+0xd68c3c]  StackWatermark::on_safepoint+0x5c  (stackWatermark.cpp:313)
V  [jvm.dll+0xd17db6]  SafepointMechanism::process+0x56  (safepointMechanism.cpp:159)
V  [jvm.dll+0x31f866]  SafepointMechanism::process_if_requested_with_exit_check+0x36  (safepointMechanism.inline.hpp:89)
V  [jvm.dll+0x7de327]  JavaThread::check_special_condition_for_native_trans+0x67  (javaThread.cpp:1234);;;","2023-08-04 05:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15155
Date: 2023-08-04 12:17:27 +0000;;;","2023-08-09 06:35;dukebot;Changeset: 0eb0997a
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2023-08-09 13:34:04 +0000
URL:       https://git.openjdk.org/jdk/commit/0eb0997ae4f81314b764241e69dae5c698dbb6c6
;;;","2023-08-10 01:26;shade;Which JDK versions it affects? The last change to JfrMsg_lock ordering I see is JDK-8266936.;;;","2023-08-10 04:50;mgronlun;It looks like the lock ordering problem with the FreeList_lock relative to the JfrMsg_lock goes back to JDK11. Back then, they were both ranked ""leaf"".;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect GPL header in pnglibconf.h (backport of JDK-8185041),JDK-8288928,5077592,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-06-21 17:20,2022-09-06 17:29,2023-10-01 09:56,2022-08-03 13:20,11,8,,,,,11.0.17,client-libs,,0,14-na,17-na,19-na,20-na,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,"The pnglibconf.h contains an incorrect GPL header.

This was fixed in jdk14 with https://github.com/openjdk/jdk/commit/70762d397267f85ce81727ec0c89c9448967798e. The original issue https://bugs.openjdk.org/browse/JDK-8185041 is closed, unfortunately, and cannot be opened up.",,,,,,,,,,JDK-8293459,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xkur:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-06-21 17:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1169
Date: 2022-06-21 23:37:28 +0000;;;","2022-06-27 23:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/81
Date: 2022-06-28 05:53:46 +0000;;;","2022-06-28 13:38;serb;Fix request (8u)

The GPL header in pnglibconf.h is updated.
Clean backport, but I have to create a new JBS issue since the initial one is closed.
Review https://github.com/openjdk/jdk8u-dev/pull/81;;;","2022-06-28 18:18;serb;Fix request (11u)

The GPL header in pnglibconf.h is updated.
Clean backport, but I have to create a new JBS issue since the initial one is closed.
https://github.com/openjdk/jdk11u-dev/pull/1169;;;","2022-06-29 12:01;phh;JDK-8185014 is non-public. If we can get Oracle to make it public, then do backports to 8u and 11u against it. If we can't get Oracle to make it public, fix it in 11u, then backport it to 8u with a separate issue. We can't fix two releases with a single issue.
;;;","2022-07-01 02:05;clanger;[~serb], [~phh], did you ask Oracle about opening JDK-8185041?;;;","2022-07-01 06:59;phh;It may also be the case that the updater will automatically create a backport issue against JDK-8185041. I don't know whether such a backport issue would be public.
;;;","2022-07-08 14:57;serb;[~clanger] that bug cannot be open:
https://github.com/openjdk/jdk11u-dev/pull/1169#issuecomment-1179255481;;;","2022-08-03 13:20;dukebot;Changeset: 39ec4361
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-08-03 20:13:09 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/39ec43618136abffdd071b066dc9a5d56317348b
;;;","2022-08-10 02:29;dukebot;Changeset: 39ec4361
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-08-03 20:13:09 +0000
URL:       https://git.openjdk.org/jdk11u/commit/39ec43618136abffdd071b066dc9a5d56317348b
;;;",,,,,,,,,,,,,,,,,,,,,,,
vmTestbase/nsk/stress/strace/strace002.java fails with Unexpected method name: currentCarrierThread,JDK-8288912,5077576,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2022-06-21 15:02,2023-03-01 22:55,2023-10-01 09:56,2023-02-24 11:40,19,20,,,,,21,hotspot,,0,atr,loom,noreg-self,problemlist,tier8,,,,,,,,,,,,,"vmTestbase/nsk/stress/strace/strace002.java fails with Unexpected method name: currentCarrierThread

waiting for threads finished

# ERROR: ***>>>Test failed<<<***


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: strace002Thread9>Unexpected method name: currentCarrierThread
# ERROR: 	at 1 position
# ERROR: 	line number: 2538
# ERROR: 	class name: java.lang.System$2
# ERROR: 	file name: System.java
# ERROR: ***>>>Test failed<<<***",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297824,,,,,,JDK-8297824,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xkr7:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-09 19:35;dcubed;Here's a log file snippet from the jdk-20+27-2172-tier8 sighting:

vmTestbase/nsk/stress/strace/strace002.java

# ERROR: ***>>>Test failed<<<***


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: strace002Thread49>Unexpected method name: isBooted
# ERROR: 	at 0 position
# ERROR: 	line number: 110
# ERROR: 	class name: jdk.internal.misc.VM
# ERROR: 	file name: VM.java
# ERROR: ***>>>Test failed<<<***
----------System.err:(0/0)----------
----------rerun:(39/6662)*----------
;;;","2023-01-17 14:08;lmesnik;It is a known test issue, I am assigning it to myself.;;;","2023-02-18 11:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12638
Date: 2023-02-18 19:09:36 +0000;;;","2023-02-24 11:40;dukebot;Changeset: b4ea8073
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-02-24 19:38:55 +0000
URL:       https://git.openjdk.org/jdk/commit/b4ea80731c6c0a0328a9801590ba5b081f08c3bd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"serviceability/jvmti/vthread/SuspendResume1/SuspendResume1.java fails with -XX:TieredStopAtLevel=2,3",JDK-8288907,5077570,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,lmesnik,lmesnik,2022-06-21 12:54,2022-12-19 08:07,2023-10-01 09:56,2022-10-03 16:18,19,,,,,,20,hotspot,,0,atr,intermittent,noreg-self,,,,,,,,,,,,,,,"Test 
serviceability/jvmti/vthread/SuspendResume1/SuspendResume1.java fails with  -XX:TieredStopAtLevel=2,3

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299035,JDK-8294741,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2xkpv:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-06-21 12:55;lmesnik;The log:
command: main --enable-preview -Djava.util.concurrent.ForkJoinPool.common.parallelism=1 -agentlib:SuspendResume1 SuspendResume1
reason: User specified action: run main/othervm/native --enable-preview -Djava.util.concurrent.ForkJoinPool.common.parallelism=1 -agentlib:SuspendResume1 SuspendResume1 
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
elapsed time (seconds): 1025.765
----------configuration:(0/0)----------
----------System.out:(24/849)----------
Agent init started
Agent init finished

## Java: runIt: Starting threads
## Java: started thread: TestedThread0
## Java: started thread: TestedThread1
## Java: started thread: TestedThread2
## Java: started thread: TestedThread3
## Java: started thread: TestedThread4
## Java: started thread: TestedThread5
## Java: started thread: TestedThread6
## Java: started thread: TestedThread7
## Java: started thread: TestedThread8
## Java: started thread: TestedThread9
## Java: started thread: TestedThread10
## Java: started thread: TestedThread11
## Java: started thread: TestedThread12
## Java: started thread: TestedThread13
## Java: started thread: TestedThread14
## Java: started thread: TestedThread15
## Java: started thread: TestedThread16
## Java: started thread: TestedThread17
## Java: started thread: TestedThread18
Timeout refired 960 times
----------System.err:(0/0)----------
----------rerun:(38/7290)*----------
cd /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S68327/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e057b156-e748-41d2-9150-9b17d8a4abe4/runs/64422327-ca4a-4b7f-91d9-659b50826e80/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/scratch/3 && \\
HOME=/tmp/sparky-temp-home-253993776036225289/user_home \\
JIB_DATA_DIR=/opt/mach5/mesos/work_dir/jib-master \\
JIB_HOME=/opt/mach5/mesos/work_dir/jib-master/install/com/oracle/java/jib/jib/3.0-SNAPSHOT/jib-3.0-20220603.213301-493-distribution.zip/jib-3.0-SNAPSHOT-distribution \\
JTREG_KEYWORDS='""!jfr & !headful""' \\
JTREG_TIMEOUT_FACTOR=8 \\
JTREG_VERBOSE=fail,error,time \\
LC_ALL=C \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-2060/linux-aarch64.test \\
LD_LIBRARY_PATH=/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-2060/linux-aarch64.test/hotspot/jtreg/native \\
CLASSPATH=/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S68327/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e057b156-e748-41d2-9150-9b17d8a4abe4/runs/64422327-ca4a-4b7f-91d9-659b50826e80/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/classes/3/serviceability/jvmti/vthread/SuspendResume1/SuspendResume1.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-2060/src.full/open/test/hotspot/jtreg/serviceability/jvmti/vthread/SuspendResume1:/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S68327/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e057b156-e748-41d2-9150-9b17d8a4abe4/runs/64422327-ca4a-4b7f-91d9-659b50826e80/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/classes/3/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-2060/src.full/open/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar \\
    /opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-2060/linux-aarch64.jdk/jdk-19/bin/java \\
        -Dtest.vm.opts='-XX:MaxRAMPercentage=6.25 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S68327/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e057b156-e748-41d2-9150-9b17d8a4abe4/runs/64422327-ca4a-4b7f-91d9-659b50826e80/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/tmp' \\
        -Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=6.25 -J-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S68327/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e057b156-e748-41d2-9150-9b17d8a4abe4/runs/64422327-ca4a-4b7f-91d9-659b50826e80/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/tmp' \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts='-XX:+CreateCoredumpOnCrash -XX:TieredStopAtLevel=2' \\
        -Dtest.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-2060/linux-aarch64.jdk/jdk-19 \\
        -Dcompile.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-2060/linux-aarch64.jdk/jdk-19 \\
        -Dtest.timeout.factor=8.0 \\
        -Dtest.nativepath=/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-2060/linux-aarch64.test/hotspot/jtreg/native \\
        -Dtest.root=/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-2060/src.full/open/test/hotspot/jtreg \\
        -Dtest.name=serviceability/jvmti/vthread/SuspendResume1/SuspendResume1.java \\
        -Dtest.file=/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-2060/src.full/open/test/hotspot/jtreg/serviceability/jvmti/vthread/SuspendResume1/SuspendResume1.java \\
        -Dtest.src=/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-2060/src.full/open/test/hotspot/jtreg/serviceability/jvmti/vthread/SuspendResume1 \\
        -Dtest.src.path=/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-2060/src.full/open/test/hotspot/jtreg/serviceability/jvmti/vthread/SuspendResume1:/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-2060/src.full/open/test/lib \\
        -Dtest.classes=/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S68327/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e057b156-e748-41d2-9150-9b17d8a4abe4/runs/64422327-ca4a-4b7f-91d9-659b50826e80/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/classes/3/serviceability/jvmti/vthread/SuspendResume1/SuspendResume1.d \\
        -Dtest.class.path=/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S68327/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e057b156-e748-41d2-9150-9b17d8a4abe4/runs/64422327-ca4a-4b7f-91d9-659b50826e80/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/classes/3/serviceability/jvmti/vthread/SuspendResume1/SuspendResume1.d:/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S68327/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e057b156-e748-41d2-9150-9b17d8a4abe4/runs/64422327-ca4a-4b7f-91d9-659b50826e80/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/classes/3/test/lib \\
        -Dtest.class.path.prefix=/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S68327/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e057b156-e748-41d2-9150-9b17d8a4abe4/runs/64422327-ca4a-4b7f-91d9-659b50826e80/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/classes/3/serviceability/jvmti/vthread/SuspendResume1/SuspendResume1.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-2060/src.full/open/test/hotspot/jtreg/serviceability/jvmti/vthread/SuspendResume1:/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S68327/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e057b156-e748-41d2-9150-9b17d8a4abe4/runs/64422327-ca4a-4b7f-91d9-659b50826e80/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/classes/3/test/lib \\
        -XX:MaxRAMPercentage=6.25 \\
        -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S68327/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e057b156-e748-41d2-9150-9b17d8a4abe4/runs/64422327-ca4a-4b7f-91d9-659b50826e80/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/tmp \\
        -XX:+CreateCoredumpOnCrash \\
        -XX:TieredStopAtLevel=2 \\
        -Djava.library.path=/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-2060/linux-aarch64.test/hotspot/jtreg/native \\
        --enable-preview \\
        -Djava.util.concurrent.ForkJoinPool.common.parallelism=1 \\
        -agentlib:SuspendResume1 \\
        com.sun.javatest.regtest.agent.MainWrapper /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S68327/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e057b156-e748-41d2-9150-9b17d8a4abe4/runs/64422327-ca4a-4b7f-91d9-659b50826e80/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/serviceability/jvmti/vthread/SuspendResume1/SuspendResume1.d/main.0.jta
result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-2060/linux-aarch64.jdk/jdk-19/bin/java' timed out (timeout set to 960000ms, elapsed time including timeout handling was 1025745ms).


test result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-2060/linux-aarch64.jdk/jdk-19/bin/java' timed out (timeout set to 960000ms, elapsed time including timeout handling was 1025745ms).;;;","2022-09-27 00:31;sspitsyn;I'm suspecting that sometimes there is not enough time for this test to go through.
I wonder why it is failing a lot on linux-aarch64* but not observable on other platforms.
The VM flag -XX:TieredStopAtLevel=2,3 forces the C1 compilation.
It can be that the C1 compiled code on linux-aarch64* is much slower.
We may want to increase the timeout for this test.;;;","2022-09-28 21:13;sspitsyn;Adding timeout=<big-time> showed that the test stopped failing by timeout.
It means the test execution time is not enough on linux-aarch64*.;;;","2022-09-28 21:14;sspitsyn;Setting a proper test timeout will fix the issue.;;;","2022-09-29 00:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10480
Date: 2022-09-29 07:21:46 +0000;;;","2022-09-29 23:32;sspitsyn;Below is a comment with some time measurements from Chris:
-----------
I'm not so sure increasing the timeout is the right thing to do.
Here are the results of running 5 times on each of our 5 platforms with `-XX:TieredStopAtLevel=2""`

macosx-aarch64-debug            22s
windows-x64-debug                       23s
windows-x64-debug                       23s
macosx-aarch64-debug            23s
macosx-aarch64-debug            24s
macosx-aarch64-debug            24s
windows-x64-debug                       24s
macosx-x64-debug                        24s
macosx-aarch64-debug            25s
macosx-x64-debug                        26s
macosx-x64-debug                        26s
macosx-x64-debug                        26s
macosx-x64-debug                        26s
windows-x64-debug                       28s
windows-x64-debug                       33s
linux-x64-debug                         43s
linux-x64-debug                         45s
linux-aarch64-debug                     2m 17s
linux-x64-debug                         2m 20s
linux-x64-debug                         2m 42s
linux-x64-debug                         2m 59s
linux-aarch64-debug                     3m 22s
linux-aarch64-debug                     4m 31s
linux-aarch64-debug                     6m 30s
linux-aarch64-debug                     9m 22s

The last one was a timeout. So it seems that linux-aarch64 is consistently slow.
linux-x64 is also a bit slow in some cases.
It seems it would be worth understanding these performance differences.
--------
 ;;;","2022-10-03 16:18;dukebot;Changeset: 07ed68ef
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-10-03 23:16:51 +0000
URL:       https://git.openjdk.org/jdk/commit/07ed68efb2e9758732787447fb0339d0899be884
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect memory ordering in UL,JDK-8288904,5077567,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jsjolen,jsjolen,jsjolen,2022-06-21 11:58,2022-08-03 20:41,2023-10-01 09:56,2022-07-30 00:37,20,,,,,,20,hotspot,,0,logging,,,,,,,,,,,,,,,,,"LogOutputList::wait_until_no_readers has two bugs:

1. It doesn't use Atomic::load to access _active_readers even though _active_readers is stored to using Atomic::store.

2. There's a missing OrderAccess::loadstore at the end to prevent stores from moving above the while loop.

This is buggy on ARM (reminder: independent loads and stores are allowed to be moved freely).

This might be the cause of JDK-8287420, but as I can't reproduce that ticket I cannot show that this is the case. Therefore, I am making a separate ticket for this fix.


To illustrate the issue, consider this (inlined) call to wait_until_no_readers in LogOutputList::remove_output.

OrderAccess::storeload();
while (_active_readers != 0) {
   // Busy wait
}
delete node;

An ARM processor is allowed to do this:

OrderAccess::storeload();
delete node;
while (_active_readers != 0) {
   // Busy wait
}

Ouch!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2xkp7:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-21 12:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9225
Date: 2022-06-21 19:12:55 +0000;;;","2022-07-30 00:37;dukebot;Changeset: 35790241
Author:    Johan Sjölén <johan.sjolen@oracle.com>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2022-07-30 07:34:39 +0000
URL:       https://git.openjdk.org/jdk/commit/357902415dd6c9d250e698efa8bae969ed334ead
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LdapContext doesn't honor set referrals limit,JDK-8288895,5077549,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aefimov,aefimov,aefimov,2022-06-21 08:23,2022-07-07 01:18,2023-10-01 09:56,2022-06-30 02:20,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,"JDK-8176553 was incomplete in fixing how referals are limited.
It was reported to 'core-libs-dev' mailing list here:
https://mail.openjdk.org/pipermail/core-libs-dev/2022-June/091601.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8176553,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xkl7:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@226ed983,,,,,,,,,"2022-06-24 11:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9256
Date: 2022-06-23 08:20:31 +0000;;;","2022-06-30 02:20;dukebot;Changeset: c3addbb1
Author:    rmartinc <rmartinc@redhat.com>
Committer: Aleksei Efimov <aefimov@openjdk.org>
Date:      2022-06-30 09:17:57 +0000
URL:       https://git.openjdk.org/jdk/commit/c3addbb1c01483e10189cc46d8f2378e5b56dcee
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2: assert(allow_address || t != T_ADDRESS) failed after JDK-8283091",JDK-8288883,5077539,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fgao,mdoerr,mdoerr,2022-06-21 07:28,2022-07-25 13:17,2023-10-01 09:56,2022-07-17 22:59,20,,,,,,20,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,"""assert(allow_address || t != T_ADDRESS) failed"" was hit after JDK-8283091. So far observed on PPC64 while testing sun/java2d/marlin/CrashNaNTest.java. Unclear if other platforms are affected.

Current CompileTask:
C2:   4946   91 %  b  4       sun.java2d.marlin.Renderer::_endRendering @ 1468 (2480 bytes)

Stack snippet:
#7  0x00003fff94565840 in type2aelembytes (t=T_ADDRESS, allow_address=false)
    at src/hotspot/share/utilities/globalDefinitions.cpp:326
#8  0x00003fff94ed754c in SuperWord::data_size (this=0x3fff2bff9818, s=0x3fff24636220)
    at src/hotspot/share/opto/superword.cpp:1417
#9  0x00003fff94ed78b0 in SuperWord::adjust_alignment_for_type_conversion (this=0x3fff2bff9818, s=0x3fff246366d8, 
    t=0x3fff24636220, align=0) at src/hotspot/share/opto/superword.cpp:1454
#10 0x00003fff94ed82a0 in SuperWord::follow_def_uses (this=0x3fff2bff9818, p=0x3fff244a3c58)
    at src/hotspot/share/opto/superword.cpp:1525
#11 0x00003fff94ed76c8 in SuperWord::extend_packlist (this=0x3fff2bff9818)
    at src/hotspot/share/opto/superword.cpp:1432
#12 0x00003fff94ed2758 in SuperWord::SLP_extract (this=0x3fff2bff9818)
    at src/hotspot/share/opto/superword.cpp:519
#13 0x00003fff94ed11cc in SuperWord::transform_loop (this=0x3fff2bff9818, lpt=0x3fff244c8ba0, do_optimization=true)
    at src/hotspot/share/opto/superword.cpp:178

s in adjust_alignment_for_type_conversion is a ConvI2LNode.

New function SuperWord::adjust_alignment_for_type_conversion calls data_size which doesn't allow T_ADDRESS when calling type2aelembytes. This seems to be needed, now.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283091,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xkiz:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-21 17:09;dlong;[~fgao], please take a look.;;;","2022-06-21 17:11;dlong;ILW = assert in debug build, possibly harmless in product build;  unknown likelihood; no workaround = MMH = P3;;;","2022-06-21 17:45;fgao;I'll try to fix it soon. Thanks.;;;","2022-06-22 03:35;mdoerr;Thanks! I've seen the assertion only once so far.;;;","2022-06-23 23:43;fgao;Hi [~mdoerr], thanks for your update! The backtrace looks a bit weird here. It would be easy to understand if the assertion happens in t node. But it actually asserts in s node here, which has been already put in the candidate packset. Generally, superword won't put any nodes with non-primitive type to the packset, https://github.com/openjdk/jdk/blob/9dc9a64fa453d8afc90871e9663a0ccc46212f64/src/hotspot/share/opto/superword.cpp#L1202. I can't reproduce it in my aarch64/x86 environment. So, could you please help provide more log info by enabling the option -XX:+TraceSuperWord -XX:+Verbose, or dumping s and t here while assertion happens like:
```
 int SuperWord::adjust_alignment_for_type_conversion(Node* s, Node* t, int align) {
   if (longer_type_for_conversion(s) != T_ILLEGAL ||
       longer_type_for_conversion(t) != T_ILLEGAL) {
+    if (velt_basic_type(s) == T_ADDRESS) {
+      s->dump();
+      t->dump();
+      assert(false, ""s can't be of T_ADDRESS type"");
+    }
+    if (velt_basic_type(t) == T_ADDRESS) {
+      s->dump();
+      t->dump();
+      assert(false, ""t can't be of T_ADDRESS type"");
+    }
     align = align / data_size(s) * data_size(t);
   }
   return align;
```

Thanks!;;;","2022-06-27 20:24;fgao;Hi [~mdoerr], I reproduced the assertion successfully.
```
s:  
 6610  ConvI2L  === _ 6611  [[ 6601 6605 6607 6609 ]]  #long:minint..maxint:www !orig=6323,3617,1362 !jvms: Renderer::_endRendering @ bci:559 (line 905)
type:  11
t:  
 6601  AddP  === _ 1 5830 6610  [[ 6600 ]]  !orig=6314,5831,[3604],2274 !jvms: Renderer::_endRendering @ bci:559 (line 905)
type:  15
(T_LONG = 11
T_ADDRESS = 15)
```
Also, I used to misunderstand the backtrace above. It actually asserted in t node, rather than s node, based on the node address you provided. No confusion here. Thanks!;;;","2022-06-28 05:08;mdoerr;Hi and sorry for my late response. I'm glad you were able to reproduce it. I had reproduced it by replay file, but I only have one for linuxppc64le. Seems like you already found the desired information. Thanks for investigating!
;;;","2022-07-06 00:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9391
Date: 2022-07-06 07:51:01 +0000;;;","2022-07-10 18:32;fgao;Hi [~mdoerr], sorry to bother you again. I added a testcase in the PR linked above. Could you please help verify if the testcase can help reproduce the failure on PPC64 and if the patch can fix it? I did the verification on AArch64 and X86 and it works on both. But I don't have any PPC64 environment. So, can you do me a favor? Thanks!;;;","2022-07-14 02:09;mdoerr;The new test has passed on PPC64 with and without the fix.
But I have verified your fix by the original replay file.
;;;","2022-07-14 02:14;fgao;Thanks for your effort, [~mdoerr]!;;;","2022-07-17 22:59;dukebot;Changeset: 87340fd5
Author:    Fei Gao <fgao@openjdk.org>
Committer: Ningsheng Jian <njian@openjdk.org>
Date:      2022-07-18 05:54:51 +0000
URL:       https://git.openjdk.org/jdk/commit/87340fd5408d89d9343541ff4fcabde83548a598
;;;",,,,,,,,,,,,,,,,,,,,,
JFileChooser - empty (0 bytes) file is displayed as 1 KB,JDK-8288882,5077356,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abhiscxk,webbuggrp,webbuggrp,2022-06-18 09:04,2022-10-20 08:10,2023-10-01 09:56,2022-10-13 09:18,11,17,18,19,8,,20,client-libs,,0,dcspn,reproducer-yes,sn_124,sn_125,sn_126,sn_127,sn_128,sn_129,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
""Previously worked in the Release"": Never worked?

* Linux: bug
* Windows: OK?
* Probably any Java version

A DESCRIPTION OF THE PROBLEM :
An empty (0 bytes) file is displayed as 1 KB in the ""Details"" view.

File choosers in other UI toolkits (Qt, GTK, native win32) display the size
correctly as ""0 B"" or ""0 bytes"".

There is a suspicious line in src/java.desktop/share/classes/sun/swing/FilePane.java:

MessageFormat.format(kiloByteString, (len == 0L) ? 1L : len);

REGRESSION : Last worked in version 8

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
0. Screenshot: https://i.imgur.com/1LguaBq.png
1. Run the attached test on *Linux*
2. Click the ""Details"" button in right-top corner
3. Size of the ""TEST-EMPTY-FILE.txt"" is displayed as ""1 KB"" instead of ""0 KB""
   (other sizes are displayed correctly - probably)

Note that Metal Look And Feel on *MS Windows* displays ""0 bytes"",
because it uses ShellFolder to set column values.


---------- BEGIN SOURCE ----------
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;

public class Test {

	public static void main(String[] args) throws IOException {

		Path currentDir = Path.of(System.getProperty(""user.dir""));

		// create empty file

		Path emptyFile = currentDir.resolve(""TEST-EMPTY-FILE.txt"");

		if (!Files.exists(emptyFile)) {
			System.out.println(""Creating "" + emptyFile);
			Files.createFile(emptyFile);
		}

		// show file chooser

		SwingUtilities.invokeLater(() -> {
			JFileChooser fc = new JFileChooser();
			fc.setCurrentDirectory(currentDir.toFile());
			fc.showOpenDialog(null);
		});
	}

}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295738,,,,,,,"2022-06-21 07:18;pnarayanaswa;From_submitter.PNG;https://bugs.openjdk.org/secure/attachment/99627/From_submitter.PNG","2022-06-21 07:17;pnarayanaswa;Test.java;https://bugs.openjdk.org/secure/attachment/99626/Test.java","2022-06-21 07:18;pnarayanaswa;Ubuntu20.04.PNG;https://bugs.openjdk.org/secure/attachment/99628/Ubuntu20.04.PNG","2022-06-21 07:18;pnarayanaswa;Windows10.PNG;https://bugs.openjdk.org/secure/attachment/99629/Windows10.PNG",,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2xjej:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-06-21 07:17;pnarayanaswa;Checked with attached testcase in Ubuntu 20.04, Issue is reproducible, attached screenshot for reference
Test case
========
8: Fail
8u333: Fail 
11: Fail
11.0.15: Fail
17: Fail
18: Fail
19ea: Fail

Issue not observed in Windows 10;;;","2022-06-29 06:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9327
Date: 2022-06-29 13:06:21 +0000;;;","2022-10-13 09:18;dukebot;Changeset: 3b343875
Author:    Abhishek Kumar <abhishek.cx.kumar@oracle.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-10-13 16:14:49 +0000
URL:       https://git.openjdk.org/jdk/commit/3b3438752cbac49272dfda7d11adbeac0ab2ea9d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[aarch64] LDR instructions must use legitimized addresses,JDK-8288865,5077521,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,apavlyutkin,apavlyutkin,apavlyutkin,2022-06-21 05:38,2022-08-04 06:47,2023-10-01 09:56,2022-07-20 00:18,11,13,8,,,,11.0.17,hotspot,,0,15-na,16-na,17-na,18-na,19-na,20-na,azul-interest,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,oracle-triage-20,,,,,Crashes in STR instructions due to long offsets were fixed by JDK-8235385. But a customer still complains about that the same crashes take place on reading the memory by Unsafe calls. Attached reproducer gets crashed in at least a half of runs. Looks like LDR instructions are to be fixed in the same way as STR ones were.,,,,,,,,,,JDK-8291904,JDK-8290878,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8235385,,,,,,,,,,,"2022-06-21 05:39;apavlyutkin;NonVolatileMemoryAccessWithLongOffset.java;https://bugs.openjdk.org/secure/attachment/99625/NonVolatileMemoryAccessWithLongOffset.java",,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,"0|i2xkez:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-21 05:44;apavlyutkin;[~rcastanedalo] Here is fixed version;;;","2022-06-21 06:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1164
Date: 2022-06-21 13:21:44 +0000;;;","2022-06-21 17:00;dlong;ILW = crash; intermittent with test; no workaround = HLH = P2;;;","2022-06-21 22:32;thartmann;[~apavlyutkin] I assume JDK > 11u is not affected?;;;","2022-06-21 22:59;apavlyutkin;[thartmann] JDK 15+ incorporates full version of JDK-8235385 along with the tests. The changes were just too massive and risky to be backported to JDK 11 & 8 as is, and we applied only very lite version of the patch;;;","2022-06-21 23:20;thartmann;Makes sense, thanks for the clarification.;;;","2022-07-09 12:00;andrew;Alexey, so this should go to 13u as well, right?;;;","2022-07-09 22:13;apavlyutkin;Right, it may be ported to 13u as well but that would also require for porting of the patch done to 11u by JDK-8235385. Should I take care of that?;;;","2022-07-19 01:50;apavlyutkin;Fix Request (11u-dev)

The patch fixes crashes caused by reading memory by Unsafe API on aarch64 (writting was fixed by JDK-8235385). It also adds tests for both reading/writting cases;;;","2022-07-20 00:18;dukebot;Changeset: 1f402896
Author:    Alexey Pavlyutkin <apavlyutkin@azul.com>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2022-07-20 07:08:28 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/1f4028960a3934853104efd1d95991b137b5f520
;;;","2022-07-20 02:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/84
Date: 2022-07-20 09:06:28 +0000;;;","2022-07-20 03:32;apavlyutkin;Fix request (8u)

The patch fixes crashes on memory reading by Unsafe API with large offsets for aarch64. Except 11->8 path shuffling the patch applied with the only change: it introduces only LDR-related part of the test because STR-related was already integrated to 8u by JDK-8235385

The changes were tested on Ubuntu 18.04.6 LTS (GNU/Linux 4.9.0 aarch64)

Verification: hotspot/test/compiler/8235385/NonVolatileMemoryAccessWithLongOffset.java

10 of 10 runs PASS (5 of 10 runs FAILED before the patch applied)

Regression: hotspot/test/compiler
;;;","2022-07-20 05:25;apavlyutkin;[~andrew] I checked, there are at least 3 dependencies missed in 13 and they aren't small (e.g. JDK-8247766 or JDK-8068053). I think it is not worth it;;;","2022-08-03 12:57;dukebot;Changeset: 1f402896
Author:    Alexey Pavlyutkin <apavlyutkin@azul.com>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2022-07-20 07:08:28 +0000
URL:       https://git.openjdk.org/jdk11u/commit/1f4028960a3934853104efd1d95991b137b5f520
;;;",,,,,,,,,,,,,,,,,,,
getLocalGraphicsEnvironment() on for multi-screen setups throws exception NPE,JDK-8288854,5077149,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,webbuggrp,webbuggrp,2022-06-15 11:51,2023-02-14 08:33,2023-10-01 09:56,2022-07-01 17:29,17,19,,,,,19,client-libs,,0,17-bp,cssn23_02_01,dcs-nr,dcspn,jdk17u-fix-request,jdk17u-fix-yes,regression,regression_8076313,reproducer-yes,webbug,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Linux - Centos 7

A DESCRIPTION OF THE PROBLEM :
See bugs.freebsd.org Bug 264356 - java/openjdk17: java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment() on for multi-screen setups throws exception: Cannot read the array length because ""this.screens"" is null


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run java app that uses call to getLocalGraphicsEnvironment  on multi-screen display with Xinerama disabled - display to screen number not zero.
As described in the freebsd bug report - It is easy to duplicate using xephyr:
Xephyr :3 -screen 800x600 -screen 800x600


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Program should run
ACTUAL -
Null Pointer Exception

---------- BEGIN SOURCE ----------
See above
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Fix suggested in above bug report.

FREQUENCY : always


",,,,,,,,,,JDK-8301929,JDK-8289628,JDK-8299417,JDK-8291377,JDK-8291214,JDK-8301796,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8076313,,,,,,,"2022-06-21 05:15;pnarayanaswa;GraphEnv.java;https://bugs.openjdk.org/secure/attachment/99624/GraphEnv.java",,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xi4j:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-06-21 05:20;pnarayanaswa;More information:
https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=264356;;;","2022-06-21 09:53;prr;The issue supposedly starts from JDK 17 https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=264356

Exception in thread ""main"" java.lang.ExceptionInInitializerError
        at java.desktop/java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment(GraphicsEnvironment.java:106)
        at GraphEnv.main(GraphEnv.java:18)
Caused by: java.lang.NullPointerException: Cannot read the array length because ""this.screens"" is null
        at java.desktop/sun.awt.X11GraphicsEnvironment.initDevices(X11GraphicsEnvironment.java:235)
        at java.desktop/sun.awt.X11GraphicsEnvironment.rebuildDevices(X11GraphicsEnvironment.java:216)
        at java.desktop/sun.awt.X11GraphicsEnvironment.<init>JDK 17 is where the actual code which NPEs was updated https://bugs.openjdk.org/browse/JDK-8076313

I say ""updated"" not ""added"" since screens being null would have caused an NPE in the old code too.
But I'm not sure the old code actually refreshed monitors - that was the issue being fixed - and the
description reads like it was on initialisation not adding a screen .. so there may be a hole.;;;","2022-06-24 17:33;serb;Could be some difference in how X11 works in FreeBSD.;;;","2022-06-24 21:09;serb;To reproduce the bug on Linux the xinerama should be disabled and the non zero screen should be set as default.
1. Xephyr :3 -screen 800x600 -screen 800x600 
2. export DISPLAY=:3.1
3. java -jar SwingSet2.jar

Note that DISPLAY=:3.0 will work fine.;;;","2022-06-27 17:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/81
Date: 2022-06-27 21:17:54 +0000;;;","2022-07-01 17:29;dukebot;Changeset: cfc9a881
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-07-02 00:25:20 +0000
URL:       https://git.openjdk.org/jdk19/commit/cfc9a881afd300bd7c1ce784287d1669308e89fc
;;;","2022-12-29 01:34;serb;Fix request (17u)

Clean backport. Fix for a regression introduced in jdk17 b08.
Verified by the ""steps to reproduce"" above. The jdk_desktop tests are green.
Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/994;;;","2022-12-29 01:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/994
Date: 2022-12-29 07:43:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
SegmentAllocator:allocate() can return null some cases,JDK-8288850,5077507,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,kganapureddy,kganapureddy,2022-06-21 05:07,2022-07-27 13:44,2023-10-01 09:56,2022-07-12 07:19,19,,,,,,19,core-libs,,0,conformance,,,,,,,,,,,,,,,,,"Observed that allocate(bytesSize) and allocate(bytesSize, alignment) might throw OutOfMemoryError when bytesSize is too long.

IMO, this can be stated in spec.

And also observed that allocate(bytesSize, alignment) can return null, with  
====
 SegmentAllocator segmentAllocator = SegmentAllocator.newNativeArena(MemorySession.openConfined());
        MemorySegment memorySegment = segmentAllocator.allocate(Long.MAX_VALUE, 2);
        System.out.println("" The memorySegment is "" + memorySegment);
====

If this is a valid case Spec can be enhanced for this.
",,,,,,,,,,JDK-8291295,JDK-8291420,JDK-8290283,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282192,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xkbv:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-07-11 08:04;mcimadamore;The lack of OutOfMemoryError is not an issue - this dynamic exception is not specified in other methods as well (see MemorySegment::allocateNative). Other API methods such as ByteBuffer::allocateDirect similarly do not specify this. But the `null` result is something bad which should be fixed.;;;","2022-07-11 08:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/133
Date: 2022-07-11 15:05:34 +0000;;;","2022-07-12 07:19;dukebot;Changeset: 2baf526f
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-07-12 14:14:46 +0000
URL:       https://git.openjdk.org/jdk19/commit/2baf526fcec3ecd8e306fd9bd483ab5ed4ec8afe
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"misc tests fail ""assert(ms < 1000) failed: Un-interruptable sleep, short time use only""",JDK-8288846,5077504,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,mgronlun,mgronlun,2022-06-21 04:44,2022-08-18 04:56,2023-10-01 09:56,2022-06-22 06:34,19,20,,,,,19,hotspot,,0,tier5,tier6,tier7,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

vmTestbase/nsk/jvmti/scenarios/hotswap/HS302/hs302t002/hs302t002.java

Here's a snippet from the log file:

#section:main
----------messages:(4/435)----------
command: main -agentlib:hs302t002=pathToNewByteCode=./bin,-waittime=5,package=nsk,samples=100,mode=compiled nsk.jvmti.scenarios.hotswap.HS302.hs302t002.hs302t002
reason: User specified action: run main/othervm/native -agentlib:hs302t002=pathToNewByteCode=./bin,-waittime=5,package=nsk,samples=100,mode=compiled nsk.jvmti.scenarios.hotswap.HS302.hs302t002.hs302t002 
Mode: othervm [/othervm specified]
elapsed time (seconds): 4.085
----------configuration:(0/0)----------
----------System.out:(30/1899)*----------
Agent:: VM.. Started..
 Enabled. noftification..[2.238s][info][jfr,startup] Started recording 1. No limit specified, using maxsize=250MB as default.
[2.238s][info][jfr,startup] 
[2.238s][info][jfr,startup] Use jcmd 81124 JFR.dump name=1 filename=FILEPATH to copy recording data to file.
# info :: File = ./bin/newclass00/nsk/jvmti/scenarios/hotswap/HS302/hs302t002/MyClass.class 
#  info **Agent:: opening file ./bin/newclass00/nsk/jvmti/scenarios/hotswap/HS302/hs302t002/MyClass.class 
# info file size= 728
 File red completely 
# error occured while redefining JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED Redefine failed ..     
 Constructor..
 cls.toString() public
 Passed ..
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\os_windows.cpp:3762
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\\sb\\prod\\1655746817\\workspace\\open\\src\\hotspot\\os\\windows\\os_windows.cpp:3762), pid=81124, tid=64432
#  assert(ms < 1000) failed: Un-interruptable sleep, short time use only
#
# JRE version: Java(TM) SE Runtime Environment (19.0+28) (fastdebug build 19-ea+28-2096)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+28-2096, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: C:\\sb\\prod\\1655809690\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti_quick\\scratch\\3\\hs_err_pid81124.mdmp
#
# An error report file with more information is saved as:
# C:\\sb\\prod\\1655809690\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti_quick\\scratch\\3\\hs_err_pid81124.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(40/7054)*----------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x000001e407df7db0):  JfrThreadSampler ""JFR Thread Sampler"" [stack: 0x0000000f9d500000,0x0000000f9d600000] [id=64432]

Stack: [0x0000000f9d500000,0x0000000f9d600000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc84f41]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xee66eb]  VMError::report+0x10eb  (vmError.cpp:835)
V  [jvm.dll+0xee822e]  VMError::report_and_die+0x7fe  (vmError.cpp:1687)
V  [jvm.dll+0xee89b4]  VMError::report_and_die+0x64  (vmError.cpp:1468)
V  [jvm.dll+0x5a7137]  report_vm_error+0xb7  (debug.cpp:283)
V  [jvm.dll+0xc7fb13]  os::naked_short_sleep+0x33  (os_windows.cpp:3762)
V  [jvm.dll+0x86b489]  JfrThreadSampler::run+0x159  (jfrThreadSampler.cpp:527)
V  [jvm.dll+0xe58e0c]  Thread::call_run+0x1ac  (thread.cpp:365)
V  [jvm.dll+0xc837e9]  thread_native_entry+0xb9  (os_windows.cpp:545)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]

",,,,,,,,,,JDK-8289018,JDK-8291140,JDK-8291304,,,,,,,,,,,,,,,,,,,,,,,JDK-8288905,,,,,,,,JDK-8292592,,,,JDK-8288748,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xkb7:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-06-22 01:17;mgronlun;The assertion is a consequence of JDK-8288748, in that when the sampler is disenrolling, both fields are now set to 0, and that implies max_jlong.

The problem has always existed and can be provoked by setting the period to something that will ensure the sleep_to_next value to be > 1000. For example:

    <event name=""jdk.ExecutionSample"">
      <setting name=""enabled"" control=""method-sampling-enabled"">true</setting>
      <setting name=""period"" control=""method-sampling-java-interval"">1000 ms</setting>
    </event>;;;","2022-06-22 04:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/57
Date: 2022-06-22 10:59:27 +0000;;;","2022-06-22 06:34;dukebot;Changeset: 6037ccdd
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2022-06-22 13:29:44 +0000
URL:       https://git.openjdk.org/jdk19/commit/6037ccdd50acd5424a46120028738b811dff064a
;;;","2022-06-22 11:16;dcubed;The fix for this bug is integrated in jdk-19+28-2110.;;;","2022-06-23 07:17;dcubed;The fix for this bug was sync'ed into JDK20 in jdk-20+3-107.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
StructureViolationException should not link to fork method,JDK-8288840,5077498,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2022-06-21 03:35,2022-07-27 05:27,2023-10-01 09:56,2022-06-22 00:53,19,,,,,,19,core-libs,,0,loom,noreg-doc,,,,,,,,,,,,,,,,StructureViolationException currently links to StructuredTaskScope.fork and close. For Java 19 it should only link to the close method. The link to the fork method can be added when the JEP for extent-local variables integrates.,,,,,,,,,,JDK-8289017,JDK-8291137,JDK-8291301,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xk9v:",9223372036854775807,b28,,,,,,,,,,,"2022-06-21 05:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/52
Date: 2022-06-21 11:20:49 +0000;;;","2022-06-22 00:53;dukebot;Changeset: 8fa46c8f
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-06-22 07:48:58 +0000
URL:       https://git.openjdk.org/jdk19/commit/8fa46c8f72201637e377190d94247e8d96646425
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"(fs) Files.writeString spec for IOException has ""specified charset"" when no charset is provided",JDK-8288836,5077493,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,alanb,alanb,2022-06-21 01:53,2022-07-27 09:43,2023-10-01 09:56,2022-06-28 08:08,19,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"The 3-arg Files.writeString has a cut 'n paste error. The description for IOException has:

""or the text cannot be encoded using the specified charset""

It should be:

""or the text cannot be encoded using UTF-8""
",,,,,,,,,,JDK-8291195,JDK-8289414,JDK-8291353,,,,,,,,,,,,,,,,,,,JDK-8289246,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xk8r:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-06-27 12:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/79
Date: 2022-06-27 19:23:38 +0000;;;","2022-06-28 08:08;dukebot;Changeset: 6f9717b4
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-06-28 15:05:46 +0000
URL:       https://git.openjdk.org/jdk19/commit/6f9717b46b0e4461100a27276a3ea1186e8c628b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[arm32] Display isetstate in register output,JDK-8288824,5077482,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-06-21 01:11,2022-07-13 23:22,2023-10-01 09:56,2022-07-06 06:22,20,,,,,,20,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,,,,,"When analyzing JDK-8288719, to know the current isetstate was useful. It would be nice if that were printed clearly in the register output to save some mental cycles parsing CPSR.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch32,,,,,,,,,,,,,,"0|i2xk6b:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-21 01:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9223
Date: 2022-06-21 08:25:52 +0000;;;","2022-07-06 06:22;dukebot;Changeset: 75c0a5b8
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-07-06 13:17:54 +0000
URL:       https://git.openjdk.org/jdk/commit/75c0a5b828de5a2c1baa7226e43d23db62aa8375
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C1: LIR_OpVisitState::maxNumberOfOperands too small,JDK-8288781,5077434,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rrich,rrich,rrich,2022-06-20 14:25,2022-08-03 18:05,2023-10-01 09:56,2022-06-27 11:30,11,17,19,20,,,20,hotspot,,0,c1,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-20,,,,,,,,,,,"In LIR_OpVisitState::append() the assertion

assert(_oprs_len[mode] < maxNumberOfOperands) failed: array overflow

fails when C1 compiles a method with 8 integer and 13 float parameters because LIR_OpVisitState::maxNumberOfOperands is 20 which is too small because on ppc 8 integer + 13 float = 21 parameters can be passed in registers (see SharedRuntime::java_calling_convention()).",,,,,,,,,,JDK-8291848,JDK-8289039,JDK-8291308,JDK-8291007,JDK-8291011,JDK-8291142,JDK-8291015,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xjvn:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-21 00:03;rcastanedalo;ILW = assertion failure in C1; when compiling method with large number of parameters; disable compilation of the affected method = MMH = P3;;;","2022-06-21 05:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/51
Date: 2022-06-21 09:13:51 +0000;;;","2022-06-27 11:30;dukebot;Changeset: 3f5e48a4
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2022-06-23 05:42:54 +0000
URL:       https://git.openjdk.org/jdk/commit/3f5e48a44ee77d07dea3d2c4ae52aaf19b8dc7cb
;;;","2022-07-25 00:34;rrich;Fix request (17u)

I would like to backport this to jdk17u.
Risk is low.
Applies cleanly.;;;","2022-07-25 00:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/567
Date: 2022-07-20 07:21:22 +0000;;;","2022-08-02 05:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1299
Date: 2022-08-02 11:12:16 +0000;;;","2022-08-02 23:05;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
Risk of a compiler fix, but it is tiny. We should definitely take it.
Clean backport.
Test passes.  SAP nighlty testing passes.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Revert unintentional change to deflate.c,JDK-8288769,5077421,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,lancea,lancea,lancea,2022-06-20 11:34,2022-08-16 19:39,2023-10-01 09:56,2022-08-10 07:45,11.0.16-oracle,17.0.4-oracle,19,7u351,8u341,,19,core-libs,,0,jdk19-fix-request,jdk19-fix-yes,noreg-other,regression,,,,,,,,,,,,,,"As part of the fix for JDK-8284371, there was an unintentional change  which reverted the reworking of (7) deflate.c undo (6), replaced withe the official zlib repo fix see#305/#f969409

This patch restores that change which is:

git diff
diff --git a/src/java.base/share/native/libzip/zlib/deflate.c b/src/java.base/share/native/libzip/zlib/deflate.c
index ba1f386e5fc..2b80a735886 100644
--- a/src/java.base/share/native/libzip/zlib/deflate.c
+++ b/src/java.base/share/native/libzip/zlib/deflate.c
@@ -555,7 +555,7 @@ int ZEXPORT deflateResetKeep (strm)
         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
 #endif
         adler32(0L, Z_NULL, 0);
-    s->last_flush = Z_NO_FLUSH;
+    s->last_flush = -2;
 
     _tr_init(s);
 
@@ -649,7 +649,7 @@ int ZEXPORT deflateParams(strm, level, strategy)
     func = configuration_table[s->level].func;
 
     if ((strategy != s->strategy || func != configuration_table[level].func) &&
-        s->high_water) {
+        s->last_flush != -2) {
         /* Flush the last buffer: */
         int err = deflate(strm, Z_BLOCK);
         if (err == Z_STREAM_ERROR)
 %",,,,,,,,,,JDK-8289211,JDK-8289213,JDK-8289210,JDK-8289216,JDK-8292502,JDK-8289209,JDK-8292229,JDK-8292517,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284371,,,,JDK-8284370,JDK-8292139,JDK-8291518,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xjsr:",9223372036854775807,b35,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2022-07-30 03:57;lancea;Fix Request

Looking to include this change in 19 which is low risk.  Mach5 tiers1-3 continue to run clean

Please see description for overall details of the issue;;;","2022-08-02 23:51;alanb;[~lancea] Do you have a PR in review for openjdk/jdk19, I don't see the link.;;;","2022-08-03 03:24;lancea;[~alanb],  I have  a draft PR https://github.com/openjdk/jdk19/pull/159 but was waiting for the approval to finalize it.;;;","2022-08-03 08:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/159
Date: 2022-08-03 10:21:43 +0000;;;","2022-08-04 00:06;alanb;Fix request NMI

Would it be possible to add a comment (or update the existing Fix Request comment) to say a bit more about testing and whether it would be feasible to have a jtreg test that would have caught this. There is no information in the bug report on how the regression was identified, was it just code inspection or did an existing usage in some library or application identify it?;;;","2022-08-04 03:25;lancea;This issue was identified by code inspection only. All tests pass with and without reverting the code.  This changes gets us back on par with the change made in 2017 via: http://hg.openjdk.java.net/jdk/jdk/rev/d66e420cc482

Please also see the comment in open/src/java.base/share/native/libzip/zlib/patches/ChangeLog_java which indicates:

----------
(6) deflate.c  #8184306

*** 503,512 ****
--- 503,514 ----
  
      s = (deflate_state *)strm->state;
      s->pending = 0;
      s->pending_out = s->pending_buf;
  
+     s->high_water = 0;      /* reset to its inital value 0 */
+ 
      if (s->wrap < 0) {
          s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */
      }
      s->status =
  #ifdef GZIP

(7) deflate.c undo (6), replaced withe the official zlib repo fix see#305/#f969409
--------

With this change in this PR, we are consistent with where our deflate.c port.

;;;","2022-08-09 23:48;alanb;Fix request approved

It is concerning that the JDK has been carrying this change for many releases without a deep understanding on whether the change is needed and without any tests that demonstrarte that the patch is required. Given the history then I will approve it for JDK 19 RDP2. I've bumped the priority of JDK-8292139 to P2 and set the fixVersion to 20. It is very important that this issue is re-examined for JDK 20 and/or the patch is dropped by way of upgrading the copy of zlib in the openjdk/jdk repo.;;;","2022-08-10 07:45;dukebot;Changeset: 4c6d22a6
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2022-08-10 14:40:10 +0000
URL:       https://git.openjdk.org/jdk19/commit/4c6d22a6cee3d7f1da69e50dddec45158b33e331
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Pack200 extraction failure with invalid size ,JDK-8288763,5077415,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tsteele,tsteele,tsteele,2022-06-20 10:46,2022-08-17 23:21,2023-10-01 09:56,2022-07-19 00:13,11,8,,,,,11.0.17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,"Internal testing by my colleges found an issue in jdk11 and jdk8 which fails with the following exception related to Pack200 compression.

java.util.zip.ZipException: invalid entry compressed size (expected 68 but got 69 bytes)
	at java.base/java.util.zip.ZipOutputStream.closeEntry(ZipOutputStream.java:268)
	at java.base/java.util.zip.ZipOutputStream.putNextEntry(ZipOutputStream.java:193)
	at java.base/java.util.jar.JarOutputStream.putNextEntry(JarOutputStream.java:109)
	at java.base/com.sun.java.util.jar.pack.Utils.copyJarFile(Utils.java:234)
	at java.base/com.sun.java.util.jar.pack.Utils.copyJarFile(Utils.java:257)
	at java.base/com.sun.java.util.jar.pack.PackerImpl.pack(PackerImpl.java:90)
	at javasoft.sqe.tests.api.java.util.jar.Pack200.distributed.PackServer.handle_pack(PackServer.java:240)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.jck.lib.DistributedTest.handleMessage(DistributedTest.java:218)
	at javasoft.sqe.tests.api.java.util.jar.Pack200.distributed.PackServer.handleMessage(PackServer.java:180)
	at com.sun.jck.lib.DistributedTest$1.handleMessage(DistributedTest.java:66)
	at com.sun.jck.lib.MessageClient.run(MessageClient.java:127)
	at com.sun.jck.lib.DistributedTest.go(DistributedTest.java:94)
	at com.sun.jck.lib.DistributedTest.run(DistributedTest.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.jck.lib.ExecJCKTestSameJVMCmd$Version2Test.execute(ExecJCKTestSameJVMCmd.java:566)
	at com.sun.jck.lib.ExecJCKTestSameJVMCmd$StandardTest.run(ExecJCKTestSameJVMCmd.java:523)
	at com.sun.jck.lib.ExecJCKTestSameJVMCmd.execute(ExecJCKTestSameJVMCmd.java:407)
	at com.sun.jck.lib.ExecJCKTestSameJVMCmd.run(ExecJCKTestSameJVMCmd.java:337)
	at com.sun.javatest.agent.Agent$Task$CommandExecutor$2.run(Agent.java:899)
	at java.base/java.lang.Thread.run(Thread.java:871)
	Suppressed: java.util.zip.ZipException: invalid entry compressed size (expected 68 but got 69 bytes)
		at java.base/java.util.zip.ZipOutputStream.closeEntry(ZipOutputStream.java:268)
		at java.base/java.util.zip.ZipOutputStream.finish(ZipOutputStream.java:361)
		at java.base/java.util.zip.DeflaterOutputStream.close(DeflaterOutputStream.java:238)
		at java.base/java.util.zip.ZipOutputStream.close(ZipOutputStream.java:378)
		at java.base/com.sun.java.util.jar.pack.Utils.copyJarFile(Utils.java:256)
		... 22 more ",,,,,,,,,,JDK-8292565,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8253952,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xjrf:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2022-06-21 08:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1163
Date: 2022-06-20 23:03:33 +0000;;;","2022-07-18 07:46;tsteele;[jdk11u]

Requesting non-backport changes at PR-1163 to fix the this issue. Doing so avoids backporting the upstream change which would require a CSR. T1 tests passing on all platforms including zLinux.

Risk is medium: the change is very small, and directly fixes the issue, and testing looks good. However, I am considering this medium because it is not a backport, and so the change hasn't had time to live upstream.;;;","2022-07-19 00:13;dukebot;Changeset: 5e1ce54d
Author:    Tyler Steele <tsteele@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-07-19 07:10:25 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/5e1ce54d6a11eac153a6e6487bc0b4ed89741b5b
;;;","2022-07-20 14:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/86
Date: 2022-07-20 20:59:48 +0000;;;","2022-08-03 04:09;dukebot;Changeset: 5e1ce54d
Author:    Tyler Steele <tsteele@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-07-19 07:10:25 +0000
URL:       https://git.openjdk.org/jdk11u/commit/5e1ce54d6a11eac153a6e6487bc0b4ed89741b5b
;;;","2022-08-03 07:08;phh;Fix Request (8u)

On behalf of Tyler Steele.

See above 11u comment.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
SegmentAllocator:allocate(long bytesSize) not throwing IAEx when bytesSize < 0,JDK-8288761,5077413,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,kganapureddy,kganapureddy,2022-06-20 10:43,2022-07-27 03:44,2023-10-01 09:56,2022-06-21 14:04,19,19.0.1,,,,,19,core-libs,,0,conformance,tck-red-19.0.1,,,,,,,,,,,,,,,,"As per spec : https://download.java.net/java/early_access/jdk19/docs/api/java.base/java/lang/foreign/SegmentAllocator.html#allocate(long)
Throws:
IllegalArgumentException - if bytesSize < 0

Observed that IAEx is thrown only for SegmentAllocator created with implicitAllocator() not for others.

Attached the sample to demonstrate the issue.",,,,,,,,,,JDK-8291131,JDK-8288923,JDK-8291282,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282192,,,,,,,,,,,"2022-06-20 10:44;kganapureddy;TestAllocate.java;https://bugs.openjdk.org/secure/attachment/99616/TestAllocate.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xjqz:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-06-20 14:04;mcimadamore;Confirmed - instead of IAE, another exception is reported.

 MemorySegment{ id=0x59a10c26 limit: 4096 }; new offset = 0; new length = -1
|        at AbstractMemorySegmentImpl.outOfBoundException (AbstractMemorySegmentImpl.java:404)
|        at AbstractMemorySegmentImpl.checkBounds (AbstractMemorySegmentImpl.java:387)
|        at AbstractMemorySegmentImpl.asSlice (AbstractMemorySegmentImpl.java:103)
|        at AbstractMemorySegmentImpl.asSlice (AbstractMemorySegmentImpl.java:68)
|        at ArenaAllocator.trySlice (ArenaAllocator.java:57)
|        at ArenaAllocator.allocate (ArenaAllocator.java:75)
|        at SegmentAllocator.allocate (SegmentAllocator.java:326)
|        at (#2:1)
;;;","2022-06-20 14:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/50
Date: 2022-06-20 21:22:42 +0000;;;","2022-06-21 14:04;dukebot;Changeset: d7b43af5
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-06-21 20:59:45 +0000
URL:       https://git.openjdk.org/jdk19/commit/d7b43af5914d88e5410f33db8b56f4dabdfec25d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GCC 12 fails to compile signature.cpp due to -Wstringop-overread,JDK-8288759,5077410,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-06-20 10:28,2022-09-06 17:30,2023-10-01 09:56,2022-08-30 09:56,19,20,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,"Trying to compile with GCC 12.1.1 (current Fedora Rawhide) yields this failure:

```
In file included from /home/test/shipilev-jdk/src/hotspot/share/utilities/globalDefinitions_gcc.hpp:35,
                 from /home/test/shipilev-jdk/src/hotspot/share/utilities/globalDefinitions.hpp:35,
                 from /home/test/shipilev-jdk/src/hotspot/share/memory/allocation.hpp:29,
                 from /home/test/shipilev-jdk/src/hotspot/share/classfile/classLoaderData.hpp:28,
                 from /home/test/shipilev-jdk/src/hotspot/share/precompiled/precompiled.hpp:34:
In function 'const void* memchr(const void*, int, size_t)',
    inlined from 'int SignatureStream::scan_type(BasicType)' at /home/test/shipilev-jdk/src/hotspot/share/runtime/signature.cpp:343:32,
    inlined from 'void SignatureStream::next()' at /home/test/shipilev-jdk/src/hotspot/share/runtime/signature.cpp:373:19,
    inlined from 'void SignatureIterator::do_parameters_on(T*) [with T = Fingerprinter]' at /home/test/shipilev-jdk/src/hotspot/share/runtime/signature.hpp:635:41,
    inlined from 'void SignatureIterator::do_parameters_on(T*) [with T = Fingerprinter]' at /home/test/shipilev-jdk/src/hotspot/share/runtime/signature.hpp:629:6,
    inlined from 'void Fingerprinter::compute_fingerprint_and_return_type(bool)' at /home/test/shipilev-jdk/src/hotspot/share/runtime/signature.cpp:169:19:
/usr/include/string.h:102:27: error: 'void* __builtin_memchr(const void*, int, long unsigned int)' specified bound [18446744073709486082, 0] exceeds maximum object size 9223372036854775807 [-Werror=stringop-overread]
  102 |   return __builtin_memchr (__s, __c, __n);
      |          ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~
cc1plus: all warnings being treated as errors
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8230199,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xjqb:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-20 11:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/49
Date: 2022-06-20 17:58:49 +0000;;;","2022-08-02 02:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9711
Date: 2022-08-02 08:22:27 +0000;;;","2022-08-30 09:56;dukebot;Changeset: 1576f991
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-08-30 16:55:47 +0000
URL:       https://git.openjdk.org/jdk/commit/1576f991fe958c4b1ac529cdf00da4048538c779
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GCC 12 fails to build zReferenceProcessor.cpp,JDK-8288754,5077405,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-06-20 09:46,2022-09-06 01:23,2023-10-01 09:56,2022-06-21 11:17,11,17,18,19,20,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,"When compiling with GCC 12.1.1 (current in Fedora rawhide), the following warning-as-error is produced and breaks the build by default:

```
/home/test/shipilev-jdk/src/hotspot/share/gc/z/zReferenceProcessor.cpp: In member function 'oopDesc* ZReferenceProcessor::drop(oop, ReferenceType)':
/home/test/shipilev-jdk/src/hotspot/share/gc/z/zReferenceProcessor.cpp:270:22: error: '%s' directive argument is null [-Werror=format-overflow=]
  270 |   log_trace(gc, ref)(""Dropped Reference: "" PTR_FORMAT "" (%s)"", p2i(reference), reference_type_name(type));
      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
```

The problem is over-zealous compiler seeing `NULL` from `ShouldNotReachHere()` block, and complaining about it. In this particular case, we can dodge this by returning a more reasonable constant on failure path.

(This thing should be more reasonably handled when `ShouldNotReachHere()` is somehow `nonreturn`-ed, but Hotspot style doc is still undecided on this).",,,,,,,,,,JDK-8291130,JDK-8288922,JDK-8293404,JDK-8292904,JDK-8289066,JDK-8289067,JDK-8291281,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xjp7:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-06-20 10:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9219
Date: 2022-06-20 17:30:40 +0000;;;","2022-06-20 10:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/47
Date: 2022-06-20 17:39:43 +0000;;;","2022-06-21 11:17;dukebot;Changeset: 834d92dd
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-06-21 18:13:36 +0000
URL:       https://git.openjdk.org/jdk19/commit/834d92dd72257ab5d8c6759028098ac0867c5752
;;;","2022-06-22 10:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/176
Date: 2022-06-22 17:20:41 +0000;;;","2022-06-22 10:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/499
Date: 2022-06-22 17:20:53 +0000;;;","2022-06-22 10:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1174
Date: 2022-06-22 17:31:33 +0000;;;","2022-06-22 10:51;shade;Fix Request (11u, 17u)

Improves GCC 12 support. Patches are trivial and bear no risk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
HttpClient resources could be reclaimed more eagerly,JDK-8288746,5077396,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2022-06-20 07:03,2022-06-29 23:14,2023-10-01 09:56,2022-06-27 08:15,11-pool,17,19,20,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,"The HttpClient SelectorManager thread may not notice immediately that the HttpClient is no longer in use if it's blocked in a select call. The select calls are all time based, so it will eventually notice, but it may take up to 1500ms before the manager wakes up.

The HttpClientFacade could use a Cleaner to wakeup the SelectorManager when it is being garbage collected. If all operations have terminated by this point (which will be the case in most regular usage of the API), the selector manager will be able t shutdown right away.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xjn7:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-06-20 07:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9217
Date: 2022-06-20 14:09:27 +0000;;;","2022-06-27 08:14;dukebot;Changeset: f3f07884
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-06-27 15:11:35 +0000
URL:       https://git.openjdk.org/jdk/commit/f3f078846feae66d3504d50081353f74bd4891d7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Change package name of snippet files,JDK-8288741,5077391,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-06-20 05:37,2022-07-27 03:19,2023-10-01 09:56,2022-06-20 09:24,19,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,"Not sure if it is by design, but when I look at jrt-fs.jar, I can see snippet classes being include. In the JFR case, the packages are ""example1"" and ""example2"".

This looks strange and adds noise when looking at JFR classes in an IDE (Eclipse). Better package names would be ""jdk.jfr.snippets"" and ""jdk.jfr.snippets.consumer""",,,,,,,,,,JDK-8291104,JDK-8291271,JDK-8288778,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xjm3:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-06-20 07:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/46
Date: 2022-06-20 14:33:52 +0000;;;","2022-06-20 09:24;dukebot;Changeset: 33d0363e
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-06-20 16:20:31 +0000
URL:       https://git.openjdk.org/jdk19/commit/33d0363e03358c15126b7f040732fb32cafef420
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Change incorrect documentation for sjavac flag,JDK-8288740,5077390,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2022-06-20 05:27,2022-06-29 23:09,2023-10-01 09:56,2022-06-23 07:19,,,,,,,20,docs,,0,,,,,,,,,,,,,,,,,,"The documentation for build performance currently points to the non-existent --enable-sjavac flag to enable sjavac, the correct one is actually --enable-javac-server",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xjlv:",9223372036854775807,b04,,,,,,,,,,,"2022-06-20 06:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9215
Date: 2022-06-20 13:01:40 +0000;;;","2022-06-23 07:19;dukebot;Changeset: d579916a
Author:    Julian Waters <jwaters@openjdk.org>
Committer: Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-06-23 14:17:58 +0000
URL:       https://git.openjdk.org/jdk/commit/d579916a6b93577519b095e5fbf07377963dcec6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[arm32] SafeFetch32 thumb interleaving causes random crashes,JDK-8288719,5077370,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-06-20 00:03,2023-08-04 09:12,2023-10-01 09:56,2022-06-23 03:19,19,20,,,,,20,hotspot,,0,azul-interest,jdk17u-fix-request,jdk17u-fix-yes,oraclejdk-na,,,,,,,,,,,,,,"JDK-8283326 re-implemented SafeFetch as static assembler functions. This broke arm: the VM would crash at random points, usually in Atomic::add(), usually right at startup. In most cases the VM could not even be built correctly, see JDK-8284997.

This was only reproducible if the VM was built natively, on a Raspberry Pi, inside an Ubuntu18-derived container. Buiding natively on Raspberry Pi OS was fine. Cross-building was fine too. The difference is the default instruction set the toolchain uses. We don't explicitly specify `-mthumb` or `-marm`, so we use the toolchain's default. That default seems to depend on how GCC itself was built. Ubuntu ships a GCC that has been built in thumb mode, thus defaulting to `-mthumb`, whereas Rasperry Pi OS and Fedora ship GCCs that default to `-marm`.

So, the VM proper is compiled either to arm or thumb code. The `SafeFetch32` assembly function itself uses arm code always. Why this is I don't know for sure, I assume if I wanted thumb I need to specify `.thumb_func` in the assembly. 

If the VM uses thumb, it needs to call SafeFetch32 with a switching branch instruction (BX). But the compiler-generated BL. The instruction set was not switched upon entering SafeFetch32 and garbage thumb code was executed. VM crashes soon after.

This seems to be a common problem when writing arm assembly by hand, the solution is specify `.type function`. See also [1]: ""As of GCC 4.7, the .type directive is pretty much required for functions. Or, rather, it is required if you want ARM and Thumb interworking to work.""

A remaining question is whether we should specify the instruction set explicitly when building on arm32, to prevent surprises like this. Preferably with a configure option.",,,,,,,,,,JDK-8312101,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284997,,,,JDK-8313790,,,,,,,,,,,,,,,,,,,aarch32,,,,,,,,,,,,,,"0|i2xjhf:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-20 03:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9213
Date: 2022-06-20 08:24:49 +0000;;;","2022-06-23 03:18;dukebot;Changeset: 26c03c18
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-06-23 10:15:05 +0000
URL:       https://git.openjdk.org/jdk/commit/26c03c1860c6da450b5cd6a46576c78bea682f96
;;;","2023-07-13 04:24;snazarki;Fix request (17u):

I'd like to backport this to fix arm32 thumb on jdk17 after backport of 8283326. I skip ﻿﻿ 8285675 intentionally as it was a temporary workaround for the issue. ;;;","2023-07-13 04:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1577
Date: 2023-07-13 11:18:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/swing/JToolBar/4529206/bug4529206.java: setFloating does not work correctly,JDK-8288707,5077361,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,vprovodin,vprovodin,2022-06-18 15:22,2022-07-07 01:18,2023-10-01 09:56,2022-06-30 04:17,17,18,19,20,,,20,client-libs,,0,sn_121,,,,,,,,,,,,,,,,,"The test `javax/swing/JToolBar/4529206/bug4529206.java` intermittently fails on *Linux* with the following diagnostic:
```
#section:main
----------messages:(5/182)----------
command: main bug4529206
reason: User specified action: run main bug4529206 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 0.463
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(31/2236)----------
java.lang.reflect.InvocationTargetException
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1379)
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1354)
	at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1480)
	at bug4529206.main(bug4529206.java:85)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: setFloating does not work correctly
	at bug4529206$3.run(bug4529206.java:88)
	at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:779)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:730)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:724)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:749)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:207)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:128)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:117)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:105)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:92)

JavaTest Message: Test threw exception: java.lang.reflect.InvocationTargetException
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.reflect.InvocationTargetException
```

The issue was observed with 20-ea+2-50, 17+35-2724

*Reproducibility*:  ~30%
*Steps to reproduce*:
```
#!/bin/bash

__test_jdk=$JAVA_HOME
__tests=test/jdk/javax/swing/JToolBar/4529206/bug4529206.java
__count=30

i=0
while true; do
   ((i=i+1))
  echo i: $i
   jtreg/bin/jtreg -v -a -testjdk:$__test_jdk $__tests || break
  if [ ""$i"" -ge ""$__count"" ]; then
    break
  fi
done
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-06-18 15:19;vprovodin;bug4529206.jtr;https://bugs.openjdk.org/secure/attachment/99606/bug4529206.jtr",,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2xjff:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-06-20 11:14;vdyakov;[~vprovodin] does it affect JDK 19? JDK 18? JDK 17?;;;","2022-06-22 21:40;vprovodin;It was reproducible with

openjdk version ""19-ea"" 2022-09-20
OpenJDK Runtime Environment (build 19-ea+27-2074)
OpenJDK 64-Bit Server VM (build 19-ea+27-2074, mixed mode, sharing)

openjdk version ""18.0.1.1"" 2022-04-22
OpenJDK Runtime Environment (build 18.0.1.1+2-6)
OpenJDK 64-Bit Server VM (build 18.0.1.1+2-6, mixed mode, sharing)

openjdk version ""17.0.2"" 2022-01-18
OpenJDK Runtime Environment (build 17.0.2+8-86)
OpenJDK 64-Bit Server VM (build 17.0.2+8-86, mixed mode, sharing)
;;;","2022-06-23 20:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9269
Date: 2022-06-24 03:42:23 +0000;;;","2022-06-30 04:17;dukebot;Changeset: feb223aa
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-06-30 11:16:07 +0000
URL:       https://git.openjdk.org/jdk/commit/feb223aacfd89d598a27b27c4b8be4601cc5eaff
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Unused parameter 'boolean newln' in method java.lang.VersionProps#print(boolean, boolean)",JDK-8288706,5077359,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,lancea,aturbanov,aturbanov,2022-06-18 12:28,2022-07-13 23:24,2023-10-01 09:56,2022-07-06 08:38,20,9,,,,,20,core-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,"Parameter  'boolean newln' was added to method java.lang.VersionProps#print in JDK-8169069. But it was never used inside method body.

IDEA shows unused declaration warning there.
https://github.com/openjdk/jdk/blob/47b86690b6672301aa46d4a7b9ced58d17047cc7/src/java.base/share/classes/java/lang/VersionProps.java.template#L207",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9,,,,,,,"0|i2xjez:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-06-22 03:38;alanb;We need to compare the launcher output of JDK 8 vs. JDK 9 when -showversion is used. It looks like the refactored code is missing:
  `if (newln) ps.println();`;;;","2022-07-01 09:05;alanb;I compared JDK 8 vs. JDK 9, with -showversion and other options, and the ""new"" (JDK 9+) behavior seems better as it avoids an extra blank line at the end. So I think it should be okay to just remove the newln param.;;;","2022-07-05 11:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9382
Date: 2022-07-05 18:38:57 +0000;;;","2022-07-06 08:38;dukebot;Changeset: 9f37ba44
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2022-07-06 15:37:23 +0000
URL:       https://git.openjdk.org/jdk/commit/9f37ba44b8a6dfb635f39b6950fd5a7ae8894902
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GetThreadState returns 0 for virtual thread that has terminated,JDK-8288703,5077353,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,sspitsyn,alanb,alanb,2022-06-18 08:44,2022-08-04 07:19,2023-10-01 09:56,2022-07-01 22:47,19,,,,,,19,hotspot,,0,loom,,,,,,,,,,,,,,,,,"JVM TI GetThreadState is specified to return a thread state of JVMTI_THREAD_STATE_TERMINATED for a thread that has terminated. When invoked with a virtual thread, this function returns a thread state of 0.
",,,,,,,,,,JDK-8289629,JDK-8291378,JDK-8291215,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287847,JDK-8289619,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xjdv:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-06-18 12:59;cjplummer;See JDK-8287847.;;;","2022-07-01 11:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/102
Date: 2022-07-01 17:47:51 +0000;;;","2022-07-01 22:47;dukebot;Changeset: 9515560c
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-07-02 05:43:43 +0000
URL:       https://git.openjdk.org/jdk19/commit/9515560c54438156b37f1549229bcb5535df5fd1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cleanup HTML tree in HtmlDocletWriter.commentTagsToContent,JDK-8288699,5077346,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-06-17 19:21,2022-07-13 23:44,2023-10-01 09:56,2022-07-08 12:34,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,"HtmlDocletWriter.commentTagsToContent has a visitor that generates content trees that do not correctly support the charCount() method.

This is because DocTree StartElement is translated as

RawHtml: <name
Text: any attributes
RawHtml: >

When counting characters, because the attributes are modeled with a Text node, they are incorrectly included in the count.

It would be better to include all the content in a single well-structured node.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289332,,,,,,,,,,,,,JDK-8288624,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xjcb:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-06-19 17:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9210
Date: 2022-06-19 23:58:26 +0000;;;","2022-07-08 12:34;dukebot;Changeset: 54b4576f
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-07-08 19:33:03 +0000
URL:       https://git.openjdk.org/jdk/commit/54b4576f78277335e9b45d0b36d943a20cf40888
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clarify lifecycle of buffer segments and loader lookup,JDK-8288697,5077343,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-06-17 14:34,2023-01-17 13:30,2023-10-01 09:56,2023-01-17 13:30,19,,,,,,20,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"Segments created from on-heap arrays have the global scope. This makes sense, since they are always accessible.

In other circumstances, however, we create some global-like scopes which additionally keep some heap objects alive (e.g. a byte buffer instance). This is the idiom used by MemorySegment::ofBuffer and SymbolLookup::loaderLookup.

We should always use global lookup for heap entities, and use segments to keep things reachable (as we do for arrays). This should make the javadoc clearer, and also remove ""special"" sessions from the user model.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xjbn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-06-17 14:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/39
Date: 2022-06-17 21:39:16 +0000;;;","2022-06-17 15:07;mcimadamore;After some more thoughts, going down this path might cause reachability issues when said segments are dereferenced (from ScopedMemoryAccess) or when they are passed to native function (using linker). Both system keep the session reachable, not the segment. ;;;","2022-06-20 02:17;mcimadamore;The way to think about loader lookup and buffer segment lifecycle is to assume that classloaders and (direct and mapped) bytebuffer _already_ have some notion of lifetime:

* when the lifetime of a classloader ends, its libraries are unloaded
* when the lifetime of a direct buffer ends, its memory is freed

In other words it's ""as if"" both the classloader and the bytebuffer were already backed by an implicit memory session. If that was the case, then SymbolLookup::loaderLookup and MemorySegment::ofBuffer would simply reuse whatever session the loader/buffer had attached to them.;;;","2023-01-17 13:30;mcimadamore;We have clarified the javadoc in 20;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/javadoc/doclet/testTagMisuse/TestTagMisuse.java fails after JDK-8288545,JDK-8288692,5077337,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,jjg,dcubed,dcubed,2022-06-17 11:31,2022-08-09 10:39,2023-10-01 09:56,2022-06-17 14:52,19,,,,,,19,tools,,0,regression,tier1,tier4,,,,,,,,,,,,,,,"The following test is failing in the JDK19 CI:

jdk/javadoc/doclet/testTagMisuse/TestTagMisuse.java

----------System.out:(133/9479)----------
Running test test
Running javadoc...
args: [-Xdoclint:none, -d, out, /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+28-2087/src.full/open/test/langtools/jdk/javadoc/doclet/testTagMisuse/TestTagMisuse.java]
javadoc OUT:
Loading source file /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+28-2087/src.full/open/test/langtools/jdk/javadoc/doclet/testTagMisuse/TestTagMisuse.java...
Constructing Javadoc information...
Creating destination directory: ""out/""
Building index for all the packages and classes...
Standard Doclet version 19-ea+28-2087
Building tree for all the packages and classes...
Generating out/TestTagMisuse.html...
error: An internal exception has occurred.
  	(java.lang.NullPointerException: Cannot invoke ""com.sun.source.doctree.ReferenceTree.toString()"" because the return value of ""com.sun.source.doctree.LinkTree.getReference()"" is null)
1 error

javadoc STDERR:
Please file a bug against the javadoc tool via the Java bug reporting page
(http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com)
for duplicates. Include error messages and the following diagnostic in your report. Thank you.
java.lang.NullPointerException: Cannot invoke ""com.sun.source.doctree.ReferenceTree.toString()"" because the return value of ""com.sun.source.doctree.LinkTree.getReference()"" is null
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.seeTagToContent(HtmlDocletWriter.java:987)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter$2.visitLink(HtmlDocletWriter.java:1656)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter$2.visitLink(HtmlDocletWriter.java:1508)
	at jdk.compiler/com.sun.tools.javac.tree.DCTree$DCLink.accept(DCTree.java:747)
	at jdk.compiler/com.sun.source.util.SimpleDocTreeVisitor.visit(SimpleDocTreeVisitor.java:79)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.commentTagsToContent(HtmlDocletWriter.java:1740)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.commentTagsToContent(HtmlDocletWriter.java:1454)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.addCommentTags(HtmlDocletWriter.java:1382)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.addSummaryComment(HtmlDocletWriter.java:1347)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.SubWriterHolderWriter.addIndexComment(SubWriterHolderWriter.java:126)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.SubWriterHolderWriter.addSummaryLinkComment(SubWriterHolderWriter.java:148)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.AbstractMemberWriter.addMemberSummary(AbstractMemberWriter.java:358)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder.buildSummary(MemberSummaryBuilder.java:275)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder.addSummary(MemberSummaryBuilder.java:344)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder.buildMethodsSummary(MemberSummaryBuilder.java:234)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder$1.build(MemberSummaryBuilder.java:111)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildMemberSummary(ClassBuilder.java:300)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildClassDoc(ClassBuilder.java:121)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.build(ClassBuilder.java:98)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:378)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.generateClassFiles(AbstractDoclet.java:281)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:192)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.startGeneration(AbstractDoclet.java:207)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.run(AbstractDoclet.java:110)
	at jdk.javadoc/jdk.javadoc.doclet.StandardDoclet.run(StandardDoclet.java:103)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.parseAndExecute(Start.java:574)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:397)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:346)
	at jdk.javadoc/jdk.javadoc.internal.tool.Main.run(Main.java:141)
	at javadoc.tester.JavadocTester.javadoc(JavadocTester.java:477)
	at TestTagMisuse.test(TestTagMisuse.java:49)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at javadoc.tester.JavadocTester.runTest(JavadocTester.java:385)
	at javadoc.tester.JavadocTester.runTests(JavadocTester.java:297)
	at javadoc.tester.JavadocTester.runTests(JavadocTester.java:279)
	at TestTagMisuse.main(TestTagMisuse.java:44)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1596)

Starting subtest 1.1: check exit code
FAILED: return code 1; expected OK(0)
        at javadoc.tester.JavadocTester.checkExit(JavadocTester.java:588)
        at TestTagMisuse.test(TestTagMisuse.java:52)
        at javadoc.tester.JavadocTester.runTest(JavadocTester.java:385)

Starting subtest 1.2: checkOutput TEXT allowOverlaps:false expectFound:true expectOrdered:false
FAILED: OUT: following text not found:
warning: Tag @param cannot be used in field documentation.
found 
Loading source file /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+28-2087/src.full/open/test/langtools/jdk/javadoc/doclet/testTagMisuse/TestTagMisuse.java...
Constructing Javadoc information...
Creating destination directory: ""out/""
Building index for all the packages and classes...
Standard Doclet version 19-ea+28-2087
Building tree for all the packages and classes...
Generating out/TestTagMisuse.html...
error: An internal exception has occurred.
  	(java.lang.NullPointerException: Cannot invoke ""com.sun.source.doctree.ReferenceTree.toString()"" because the return value of ""com.sun.source.doctree.LinkTree.getReference()"" is null)
1 error
        at javadoc.tester.JavadocTester$OutputChecker.check(JavadocTester.java:1213)
        at javadoc.tester.JavadocTester$OutputChecker.check(JavadocTester.java:1157)
        at javadoc.tester.JavadocTester.checkOutput(JavadocTester.java:650)
        at TestTagMisuse.test(TestTagMisuse.java:54)
        at javadoc.tester.JavadocTester.runTest(JavadocTester.java:385)

Starting subtest 1.3: checkOutput TEXT allowOverlaps:false expectFound:true expectOrdered:false
FAILED: OUT: following text not found:
warning: Tag @throws cannot be used in field documentation.
found 
Loading source file /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+28-2087/src.full/open/test/langtools/jdk/javadoc/doclet/testTagMisuse/TestTagMisuse.java...
Constructing Javadoc information...
Creating destination directory: ""out/""
Building index for all the packages and classes...
Standard Doclet version 19-ea+28-2087
Building tree for all the packages and classes...
Generating out/TestTagMisuse.html...
error: An internal exception has occurred.
  	(java.lang.NullPointerException: Cannot invoke ""com.sun.source.doctree.ReferenceTree.toString()"" because the return value of ""com.sun.source.doctree.LinkTree.getReference()"" is null)
1 error
        at javadoc.tester.JavadocTester$OutputChecker.check(JavadocTester.java:1213)
        at javadoc.tester.JavadocTester$OutputChecker.check(JavadocTester.java:1157)
        at javadoc.tester.JavadocTester.checkOutput(JavadocTester.java:650)
        at TestTagMisuse.test(TestTagMisuse.java:54)
        at javadoc.tester.JavadocTester.runTest(JavadocTester.java:385)

Starting subtest 1.4: checkOutput TEXT allowOverlaps:false expectFound:true expectOrdered:false
FAILED: OUT: following text not found:
warning: Tag @return cannot be used in constructor documentation.
found 
Loading source file /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+28-2087/src.full/open/test/langtools/jdk/javadoc/doclet/testTagMisuse/TestTagMisuse.java...
Constructing Javadoc information...
Creating destination directory: ""out/""
Building index for all the packages and classes...
Standard Doclet version 19-ea+28-2087
Building tree for all the packages and classes...
Generating out/TestTagMisuse.html...
error: An internal exception has occurred.
  	(java.lang.NullPointerException: Cannot invoke ""com.sun.source.doctree.ReferenceTree.toString()"" because the return value of ""com.sun.source.doctree.LinkTree.getReference()"" is null)
1 error
        at javadoc.tester.JavadocTester$OutputChecker.check(JavadocTester.java:1213)
        at javadoc.tester.JavadocTester$OutputChecker.check(JavadocTester.java:1157)
        at javadoc.tester.JavadocTester.checkOutput(JavadocTester.java:650)
        at TestTagMisuse.test(TestTagMisuse.java:54)
        at javadoc.tester.JavadocTester.runTest(JavadocTester.java:385)

Starting subtest 1.5: checkOutput TEXT allowOverlaps:false expectFound:false expectOrdered:false
Passed: OUT: following text not found:
DocletAbortException


----------System.err:(13/705)----------
java.lang.Error: 4 of 5 subtests failed
	at javadoc.tester.JavadocTester.printSummary(JavadocTester.java:1000)
	at javadoc.tester.JavadocTester.runTests(JavadocTester.java:301)
	at javadoc.tester.JavadocTester.runTests(JavadocTester.java:279)
	at TestTagMisuse.main(TestTagMisuse.java:44)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1596)

JavaTest Message: Test threw exception: java.lang.Error
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.Error: 4 of 5 subtests failed",,,,,,,,,,JDK-8291095,JDK-8288773,JDK-8291264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288545,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xjab:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,Verified,,"2022-06-17 14:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/37
Date: 2022-06-17 21:07:32 +0000;;;","2022-06-17 14:52;dukebot;Changeset: f12d0449
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-06-17 21:48:24 +0000
URL:       https://git.openjdk.org/jdk19/commit/f12d04492943bd9ff66ec754956fa17b53677794
;;;","2022-08-09 10:39;jjg;Issue has been addressed, is not reoccurring.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"(fc) Unix version ofFileChannelImpl.transferTo0() should should return IOS_UNSUPPORTED if not Linux, macOS, nor AIX",JDK-8288687,5077331,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-06-17 09:18,2022-06-23 00:10,2023-10-01 09:56,2022-06-21 08:28,20,,,,,,20,core-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,"If not being compiled on Linux, macOS, or AIX, transferTo() returns

#else
    return IOS_UNSUPPORTED_CASE;
#endif

when it should be

#else
    return IOS_UNSUPPORTED;
#endif

as the function is not available on the OS in question.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,other,,,,,"0|i2xj8z:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-06-17 09:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9205
Date: 2022-06-17 16:26:39 +0000;;;","2022-06-21 08:28;dukebot;Changeset: 535fba8b
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-06-21 15:27:52 +0000
URL:       https://git.openjdk.org/jdk/commit/535fba8bfcd1bec6400b7be7d7c95e1310ac2b4b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: And node gets wrong type due to not adding it back to the worklist in CCP,JDK-8288683,5077325,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,chagedorn,chagedorn,chagedorn,2022-06-17 07:27,2022-07-27 09:24,2023-10-01 09:56,2022-06-27 04:37,18,19,20,,,,19,hotspot,,0,c2,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,"JDK-8277850 added some new Value() optimizations in AndI/AndL to optimize pattern similar to ""(v << 2) & 3"" which can directly be replaced by zero. To do that, we look at the type of the shift value of the LShift input.

This optimization works fine but causes problems in CCP. After calling Value() for a node in CCP, we only add the direct users of it back to the worklist if the type changed. We special case some nodes where we need to add additional nodes back to the worklist to not miss updating them. We should also explicitly add AndI/AndL users of an LShift node that is being put on the worklist. In rare cases, we could wrongly replace and AndI/AndL node by zero in CCP because we miss another Value() call. This can lead to a wrong execution which was found by the attached reduced fuzzer test:

$ java -Xint Test.java > int
$ java -Xbatch Test.java > c2
$ diff int c2
1c1
< result: 35072
---
> result: 0

We could think about adding a new verification phase to CCP to call Value() for each node one more time after we've reached a fixed point. Finding another type change could indicate a bug. This, however, should be investigated separately.",,,,,,,,,,JDK-8289404,JDK-8291343,JDK-8291158,,,,,,,,,,,,,,,,,,JDK-8289051,,,,,,,,,,,,,JDK-8277850,,,,JDK-8257197,,,,,,,"2022-06-17 07:24;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/99602/Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xj7n:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-06-17 07:28;chagedorn;ILW = Wrong execution due to missing update in CCP, rare and specific to CCP order, no workaround = HLH = P2;;;","2022-06-19 22:29;thartmann;This reminds me of JDK-8273496 and JDK-8257197.;;;","2022-06-20 01:17;chagedorn;Thanks for the pointers! Looks like we've thought about these problems before. I think we should definitely think about adding a verification phase (JDK-8257197) to prevent bugs like this one here in the future. In general, most of the missed Value() calls are probably benign but some will lead to wrong executions (like this case here) and are hard to even notice.;;;","2022-06-24 02:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/65
Date: 2022-06-24 08:54:03 +0000;;;","2022-06-27 04:37;dukebot;Changeset: 784a0f04
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-06-27 11:32:13 +0000
URL:       https://git.openjdk.org/jdk19/commit/784a0f049665afde4723942e641a10a1d7675f7a
;;;","2022-07-11 15:45;epavlova;New test compiler/c2/TestAndShiftZeroCCP.java passed in JDK 19 CI.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Problematic fix for font boosting,JDK-8288671,5077312,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,hannesw,hannesw,2022-06-17 06:35,2022-07-27 03:26,2023-10-01 09:56,2022-06-20 22:59,,,,,,,19,tools,,0,noreg-other,,,,,,,,,,,,,,,,,"JDK-8277420 included the addition to the stylesheet shown below to prevent font boosting aka text inflation in mobile browsers. 

/* Disable font boosting */
h1, h2, h3, h4, h5, h6 {
    max-height: 2em;
}

This was necessary because otherwise the font size of headings would change depending on whether the copy-to-clipboard icon was visible or not.

Unfortunately there are several issues with this change. While the definition of a `max-height` property for  header elements prevents font-boosting, the value of 2em is too small for headers which require multiple line breaks. This can be seen in the attached screenshot where the header overlaps the following text.

At the same time, font boosting is a problem that is not only present in header elements. In fact it is also visible in constructor and method signatures in member details and, less apparent, other parts of the generated documentation. 

Considering all of the above we should add a CSS declaration that applies to all elements with a `max-height` value that is beyond any reasonable value. It is unfortunate that the `max-height` hack is the only thing that works. There is  a `text-size-adjust` CSS property proposed for this purpose as well as several browser-specific variants of it, but unfortunately it doesn't yet work for Chrome on Android which is the biggest offender.",,,,,,,,,,JDK-8291273,JDK-8291108,JDK-8288914,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-06-17 06:38;hannesw;Screenshot 2022-06-17 at 15.02.48.png;https://bugs.openjdk.org/secure/attachment/99601/Screenshot+2022-06-17+at+15.02.48.png",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xj4r:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-06-17 06:52;hannesw;Adding label `noreg-other` since this is a change in the CSS used by javadoc-generated documentation. `noreg-doc` might have applied but I feel like that label is meant for changes in documentation content, not documentation layout.;;;","2022-06-20 10:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/48
Date: 2022-06-20 17:46:34 +0000;;;","2022-06-20 22:59;dukebot;Changeset: b9c39662
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2022-06-21 05:56:20 +0000
URL:       https://git.openjdk.org/jdk19/commit/b9c396625cc3fcddb89f93255f85f73a931acc34
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"compiler/vectorapi/VectorFPtoIntCastTest.java still fails with ""IRViolationException: There were one or multiple IR rule failures.""",JDK-8288669,5077310,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,dcubed,dcubed,2022-06-17 05:58,2022-06-29 23:10,2023-10-01 09:56,2022-06-24 00:32,20,,,,,,20,hotspot,,0,intermittent,noreg-self,oracle-triage-20,tier3,ursqe-triaged,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

compiler/vectorapi/VectorFPtoIntCastTest.java

Here's a snippet from the log file:

----------System.err:(96/8935)*----------
WARNING: Using incubator modules: jdk.incubator.vector

Command Line:
c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-20+3-73\\windows-x64-debug.jdk\\jdk-20\\fastdebug\\bin\\java.exe -DReproduce=true -cp C:\\sb\\prod\\1655460009\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler\\classes\\1\\compiler\\vectorapi\\VectorFPtoIntCastTest.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-20+3-73\\src.full\\open\\test\\hotspot\\jtreg\\compiler\\vectorapi;C:\\sb\\prod\\1655460009\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler\\classes\\1\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-20+3-73\\src.full\\open\\test\\lib;C:\\sb\\prod\\1655460009\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler\\classes\\1;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-20+3-73\\src.full\\open\\test\\hotspot\\jtreg;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\javatest.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\jtreg.jar -Djava.library.path=c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-20+3-73\\windows-x64-debug.test\\hotspot\\jtreg\\native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=c:\\sb\\prod\\1655460009\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler\\tmp -XX:+CreateCoredumpOnCrash -ea -esa -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -Dir.framework.server.port=57935 --add-modules=jdk.incubator.vector -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompileCommand=log,compiler.vectorapi.VectorFPtoIntCastTest::* -XX:CompileCommand=option,compiler.vectorapi.VectorFPtoIntCastTest::*,bool,PrintIdeal,true -XX:CompileCommand=option,compiler.vectorapi.VectorFPtoIntCastTest::*,bool,PrintOptoAssembly,true -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.vectorapi.VectorFPtoIntCastTest

One or more @IR rules failed:

Failed IR Rules (8) of Methods (8)
----------------------------------
1) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.double2byte()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={}, applyIf={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(VectorCastD2X.*)+(\\\\s){2}===.*)"", ""> 0""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(VectorCastD2X.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!

2) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.double2int()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={}, applyIf={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(VectorCastD2X.*)+(\\\\s){2}===.*)"", ""> 0""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(VectorCastD2X.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!

3) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.double2long()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={}, applyIf={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(VectorCastD2X.*)+(\\\\s){2}===.*)"", ""> 0""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(VectorCastD2X.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!

4) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.double2short()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={}, applyIf={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(VectorCastD2X.*)+(\\\\s){2}===.*)"", ""> 0""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(VectorCastD2X.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!

5) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.float2byte()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={}, applyIf={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(VectorCastF2X.*)+(\\\\s){2}===.*)"", ""> 0""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(VectorCastF2X.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!

6) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.float2int()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={}, applyIf={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(VectorCastF2X.*)+(\\\\s){2}===.*)"", ""> 0""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(VectorCastF2X.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!

7) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.float2long()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={}, applyIf={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(VectorCastF2X.*)+(\\\\s){2}===.*)"", ""> 0""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(VectorCastF2X.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!

8) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.float2short()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={}, applyIf={}, applyIfCPUFeature={}, counts={""(\\\\d+(\\\\s){2}(VectorCastF2X.*)+(\\\\s){2}===.*)"", ""> 0""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(VectorCastF2X.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 > 0 [given]
         - No nodes matched!

>>> Check stdout for compilation output of the failed methods


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.throwIfNoSafepointWhilePrinting(IRMatcher.java:91)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.reportFailures(IRMatcher.java:82)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.applyIRRules(IRMatcher.java:54)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.<init>(IRMatcher.java:43)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:729)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:698)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:329)
	at compiler.lib.ir_framework.TestFramework.runWithFlags(TestFramework.java:237)
	at compiler.vectorapi.VectorFPtoIntCastTest.main(VectorFPtoIntCastTest.java:64)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1596)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
----------rerun:(45/6579)*----------

This failure occurred in jdk-20+3-73-tier3 and the following fix:

JDK-8288281 compiler/vectorapi/VectorFPtoIntCastTest.java failed with ""IRViolationException: There were one or multiple IR rule failures.""

was integrated in jdk-20+3-72.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288281,JDK-8276547,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2xj4b:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-17 06:02;dcubed;The jdk-20+3-73-tier3 failure happened on a machine with these attributes:

cpu_name:	Intel_R__Xeon_R__Platinum_8358_CPU___2.60GHz

cpu_features:	fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht pni vmx ssse3 fma cx16 pdcm sse4 1 sse4 2 x2apic movbe popcnt aes xsave osxsave avx f16c rdrand hypervisor lahf lm arat xsaveopt fsgsbase tsc adjust bmi1 avx2 smep bmi2 erms invpcid avx512f rdseed adx smap clflushopt avx512cd;;;","2022-06-17 17:31;dlong;ILW = Intermittent IR test failure, single test, no workaround = MLH = P4 ;;;","2022-06-17 17:41;sviswanathan;I am unable to reproduce the failure at my end so don't know how to fix. Would a loop in each of the method help to make sure that the body is C2 compiled everytime and we don't see the intermittent failure? Other thought is to add -XX:-TieredCompilation. Does IR framework need such a loop and -XX:-TieredCompilation flag or both.  Would you be open to trying the modified test if I give you the changes? It only make sense to create a pull request if we know that we indeed have a fix.;;;","2022-06-20 01:05;chagedorn;Hi [~sviswanathan], I had a closer look and could finally reproduce this issue reliably on a Linux machine. I think the problem is the default warm-up of 2000. It works fine with -XX:+TieredCompilation but in some cases, when running with -XX:-TieredCompilation, this number is not high enough. We've filed JDK-8276547 before to redesign the way the default warm-up is set. In this case here, I suggest to just set a new default warm-up. 5000 is probably enough. I could take this test bug over if you like and do some more testing.;;;","2022-06-21 08:07;sviswanathan;Hi [~chagedorn], Please do take this test bug over. Thanks a lot. ;;;","2022-06-22 04:24;chagedorn;[~sviswanathan] No problem! I'll submit some testing with my proposed fix and then create a PR for it.;;;","2022-06-23 02:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9259
Date: 2022-06-23 09:36:41 +0000;;;","2022-06-24 00:32;dukebot;Changeset: 17aacde5
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-06-24 07:28:44 +0000
URL:       https://git.openjdk.org/jdk/commit/17aacde50fb971bc686825772e29f6bfecadabda
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Disabling the JfrThreadSampler commits only a partially disabled state,JDK-8288663,5077302,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,mgronlun,mgronlun,2022-06-17 04:16,2023-05-19 01:12,2023-10-01 09:56,2022-06-20 06:32,11,17,18,19,20,,20,hotspot,,0,amazon-interest,hgupdate-sync,,,,,,,,,,,,,,,,"void JfrThreadSampling::set_sampling_interval(bool java_interval, size_t period) {
  size_t interval_java = 0;
  size_t interval_native = 0;
  if (_sampler != NULL) {
    interval_java = _sampler->get_java_interval();
    interval_native = _sampler->get_native_interval();
  }
  if (java_interval) {
    interval_java = period;
  } else {
    interval_native = period;
  }
  if (interval_java > 0 || interval_native > 0) {
    if (_sampler == NULL) {
      log_trace(jfr)(""Creating thread sampler for java:%zu ms, native %zu ms"", interval_java, interval_native);
      start_sampler(interval_java, interval_native);
    } else {
      _sampler->set_java_interval(interval_java);
      _sampler->set_native_interval(interval_native);
      _sampler->enroll();
    }
    assert(_sampler != NULL, ""invariant"");
    log(interval_java, interval_native);
  } else if (_sampler != NULL) {
    _sampler->disenroll();
  }
}

The _sampler run state is controlled by the java interval and the native interval parameters (milliseconds).

If either is > 0, the sampler is to run. If both are 0, the sampler is disabled and should not run.

Let us say the sampler instance is currently running, with a java interval of 20 ms and a native interval of 20 ms.

The last recording is stopping, so the sampler is to be disabled. This is accomplished by setting first the java interval to 0 ms and then subsequently the native interval to 0 ms.

First, the java_interval comes in as 0. The code reads the current values of the _sampler instance, both for the java interval and the native interval. Again, if either value is > 0, the sampler is running or should run. The updated java interval value is committed as 0 onto the _sampler instance via _sampler->set_java_interval(interval_java).

Current state: java_interval = 0ms, native_interval = 20 ms. The sampler is still running.

Then comes the update to the native interval, for 0 ms.

The code reads the current field values of the sampler, 0 ms for the java interval, and 20 ms for the native interval. After reading 20 ms as the current value of the native interval, the code overwrites that local variable with the incoming value, so it is now 0 ms.

In the test, neither value is > 0, so the sampler state is not updated with the incoming 0 ms for the native interval, as it was for the java interval. Instead, the code branches to the _sampler->disenroll(), which stops the sampler.

At this point, the sampler is stopped, just as intended, because the last recording stopped.

But the _sampler instance state looks like this:

_java_interval = 0 ms
_native_interval = 20 ms

Let us now say another recording starts, but one that does not enable java execution sampling nor native method sampling. After the recording is started, the setting system will pass in disabled values for the java and the native intervals, both set to 0 ms.

First, the java interval: The code reads the current value of the _sampler instance, 0 ms for the Java interval, and 20 ms for the native interval. In the evaluation, this looks like the sampler is running because of the 20 ms native interval. The java interval is set, and the sampler is enrolled (i.e. started) when it should not.

Then comes the disabled native interval value of 0 ms. The system reads the current values from the sampler instance, 0 ms for the Java interval and 20 ms for the native interval. Again, it overwrites the native interval value with 0 ms, so it looks like the sampler is not running (although it is). The code then calls disenroll, which stops the sampler.

Still the _sampler instance state looks like this:
_java_interval = 0 ms
_native_interval = 20 ms

The sampler is eventually stopped (as intended when disabling). However, it was running for a brief period, resulting in native method sampling events generated in a situation where they should not.",,,,,,,,,,JDK-8291270,JDK-8288748,JDK-8291103,,,,,,,,,,,,,,,,,,,,,,,JDK-8287832,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xj2j:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-06-17 06:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9199
Date: 2022-06-17 13:04:49 +0000;;;","2022-06-20 06:32;dukebot;Changeset: a7df5a40
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2022-06-20 13:30:19 +0000
URL:       https://git.openjdk.org/jdk/commit/a7df5a40639a4d3138616c9fc1b144381240d2e5
;;;","2022-06-20 07:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/45
Date: 2022-06-20 14:15:54 +0000;;;","2022-06-20 12:46;dukebot;Changeset: 0408f9c5
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2022-06-20 14:24:35 +0000
URL:       https://git.openjdk.org/jdk/commit/0408f9c5436c96128bfe1264faf9fe3f9668f492
;;;","2022-06-21 12:01;dcubed;The fix for this bug is integrated in jdk-20+3-87.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaDoc should be more helpful if it doesn't recognize a tag,JDK-8288660,5077299,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-06-17 03:52,2023-09-12 11:26,2023-10-01 09:56,2023-09-06 00:54,20,,,,,,22,tools,,0,,,,,,,,,,,,,,,,,,"If JavaDoc doesn't recognize a tag, chances are that the tag is simply misspelled. Perhaps to be more helpful when a camelCased tag, such as @docRoot or @inheritDoc, is misspelled, JavaDoc introduced the following case check (JDK-4524350):

    ... is an unknown tag -- same as a known tag except for case

Although helpful, a bit more code could be *much* more helpful. Typically, misspelling is not about the letter case. It's about missing, extra or transposed characters. Here are some examples from bug fixes over the years: @params, @parm, @returns, @throw, @inherotDoc [sic].

JavaDoc could detect those and the camelCase misspellings using a string similarity metric, which other systems use in similar circumstances. For example:

% git rebace
git: 'rebace' is not a git command. See 'git --help'.

The most similar command is
	rebase",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313693,,,,,,,,,,,,,,,,,,,JDK-8314213,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xj1v:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-06-17 04:09;prappo;(Damerau–)Levenshtein distance comes to mind. We could do something like this:

  1. Find the distance from an unknown tag to each of the known tags
  2. Sort known tags by that distance
  3. Pick first three tags (i.e. with the smaller distance)
  4. *Additionally*, to avoid being embarrassingly irrelevant, we could use a (normalized) threshold value: a known tag whose distance is greater than that value is not picked.;;;","2022-06-17 04:13;prappo;Separately, perhaps something similar could be used for options and flags of the javadoc tool.;;;","2023-07-25 12:58;jjg;1. This is potentially a spec change, since it is currently specified that unrecognized block tags are ignored (that's right, isn't it?)
I'm not saying it would be a bad change, but it would be a change.

2. For options and flags: ideally, this might be done as part of possibly-upcoming work to improve support for tools, and option decoding. At any rate, it would be nice to see this as part of a broader overhaul of JDK option decoding.;;;","2023-07-25 15:08;prappo;> This is potentially a spec change, since it is currently specified that unrecognized block tags are ignored (that's right, isn't it?) 
I'm not saying it would be a bad change, but it would be a change. 

I'm not sure if I can see where it is a spec change. To clarify: I'm not suggesting to pick the most closely named tag to process some otherwise unknown tag; all I want is to have a better error message than this:

UnknownTags.java:4: warning: no main description
     * @foo u
       ^
UnknownTags.java:4: error: unknown tag: foo
     * @foo u
       ^
UnknownTags.java:5: error: unknown tag: parms
     * @parms v
       ^
UnknownTags.java:6: error: unknown tag: throw
     * @throw w
       ^
UnknownTags.java:7: error: unknown tag: returns
     * @returns x
       ^
UnknownTags.java:8: error: unknown tag: apinote
     * @apinote y
       ^
UnknownTags.java:9: error: unknown tag: inhertiDoc
     * {@inhertiDoc}
       ^
UnknownTags.java:11: warning: no @param for p
    public int x(int p, int y) { return -1; }
               ^
UnknownTags.java:11: warning: no @param for y
    public int x(int p, int y) { return -1; }
               ^
UnknownTags.java:11: warning: no @return
    public int x(int p, int y) { return -1; }
               ^
UnknownTags.java:1: warning: no comment
public class UnknownTags {
       ^
UnknownTags.java:1: warning: use of default constructor, which does not provide a comment
public class UnknownTags {
       ^

;;;","2023-07-25 15:16;jjg;My mistake; I thought unknown tags were ignored, not give an error.;;;","2023-08-30 09:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15494
Date: 2023-08-30 16:34:58 +0000;;;","2023-09-06 00:54;dukebot;Changeset: a01b3fb8
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-09-06 07:51:14 +0000
URL:       https://git.openjdk.org/jdk/commit/a01b3fb8e912eadd309e7036995656dd609629b2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
CDS test HelloUnload.java should not use literal string as ClassLoader name,JDK-8288651,5077288,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,iklam,iklam,2022-06-17 01:01,2022-10-04 11:33,2023-10-01 09:56,2022-06-27 14:18,20,,,,,,20,hotspot,,0,cds,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,"HelloUnload.java tests refcount of the Symbol for ClassLoader::getName(). 

https://github.com/openjdk/jdk/blob/f3da7ff66e83a44118c090b7729dce858f0df1b1/test/hotspot/jtreg/runtime/cds/appcds/customLoader/test-classes/HelloUnload.java#L101

URLClassLoader urlClassLoader =
     new URLClassLoader(""HelloClassLoader"", urls, null);

if (doUnload) {
    String loaderName = urlClassLoader.getName();
    int loadedRefcount = wb.getSymbolRefcount(loaderName);
    System.out.println(""Refcount of symbol "" + loaderName + "" is "" + loadedRefcount);

    ...

    int unloadedRefcount = wb.getSymbolRefcount(loaderName);
    System.out.println(""Refcount of symbol "" + loaderName + "" is "" + unloadedRefcount);

    // refcount of a permanent symbol will not be decremented
    if (loadedRefcount != 65535) {
        ClassUnloadCommon.failIf(unloadedRefcount != (loadedRefcount - 1), ""Refcount must be decremented"");
    }
}


This portion of the test is copied from

https://github.com/openjdk/jdk/blob/f3da7ff66e83a44118c090b7729dce858f0df1b1/test/hotspot/jtreg/runtime/ClassUnload/UnloadTest.java#L65

which was introduced in JDK-8210559

However, HelloUnload is archived, so the Symbol for the literal string ""HelloClassLoader"" is also archived, which means it will always have a refcount of 65535

Output:

class CustomLoadee
java.net.URLClassLoader@2b193f2d
Refcount of symbol HelloClassLoader is 65535
Is CustomLoadee alive? false
Refcount of symbol HelloClassLoader is 65535",,,,,,,,,,JDK-8294798,JDK-8292287,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8210559,,,,JDK-8289257,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xizf:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-17 01:17;iklam;Suggested fix:

URLClassLoader urlClassLoader =
      new URLClassLoader(""HelloClassLoader"" + System.currentTimeMillis(), urls, null);

New output:
/jdk2/tmp/jtreg/work/scratch/hello_custom.jar
file:/jdk2/tmp/jtreg/work/scratch/hello_custom.jar
class CustomLoadee
java.net.URLClassLoader@4b1210ee
Refcount of symbol HelloClassLoader1655453780386 is 2
Is CustomLoadee alive? false
Refcount of symbol HelloClassLoader1655453780386 is 1
;;;","2022-06-27 10:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9297
Date: 2022-06-27 17:32:24 +0000;;;","2022-06-27 14:18;dukebot;Changeset: e322e77e
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-06-27 21:16:02 +0000
URL:       https://git.openjdk.org/jdk/commit/e322e77e9535fc3f37b409a1c805e9f6b728377a
;;;","2022-09-27 09:37;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.
SAP nightly testing passed.;;;","2022-09-27 09:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/744
Date: 2022-09-27 16:38:14 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
(jni spec) Description of 3rd parameter to AttachCurrentThread is confusing,JDK-8288648,5077283,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,alanb,alanb,2022-06-17 00:04,2022-07-07 01:14,2023-10-01 09:56,2022-06-28 19:24,20,8,,,,,20,hotspot,,0,jni,noreg-doc,,,,,,,,,,,,,,,,"In Java 7, the spec was:

“In JDK 1.1, the second argument to AttachCurrentThread is always a pointer to JNIEnv. The third argument to AttachCurrentThread was reserved, and should be set to NULL.

In JDK 1.2, you pass NULL as the third argument for 1.1 behavior, or pass a pointer to the following structure to specify additional information:""


In Java 8 it changed to:

""The second argument to AttachCurrentThread is always a pointer to JNIEnv. The third argument to AttachCurrentThread was reserved, and should be set to NULL.""


The sentence ""The third argument to ..."" is not correct as it can be  NULL or a pointer to a JavaVMAttachArgs structure when there is additional information to specify. This sentence should be replaced with something like

""When not NULL, the third argument is a pointer to the following structure to specify additional information:""

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289190,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xiyb:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-19 15:31;dholmes;I think we can simply delete this ""paragraph""

The second argument to AttachCurrentThread is always a pointer to JNIEnv. The third argument to AttachCurrentThread was reserved, and should be set to NULL.

---

The first sentence is redundant as we already state just before this:

p_env: pointer to the location where the JNI interface pointer of the current thread will be placed, must not be NULL.

The second sentence is just a nonsensical bad edit.

That then means:

You pass a pointer to the following structure to specify additional information:

is also redundant.

The resulting text would be :

PARAMETERS:

vm: the VM to which the current thread will be attached, must not be NULL.

p_env: pointer to the location where the JNI interface pointer of the current thread will be placed, must not be NULL.

thr_args: can be NULL or a pointer to a JavaVMAttachArgs structure to specify additional information:

typedef struct JavaVMAttachArgs {
    jint version;
    char *name;    /* the name of the thread as a modified UTF-8 string, or NULL */
    jobject group; /* global ref of a ThreadGroup object, or NULL */
} JavaVMAttachArgs;;;","2022-06-27 15:07;dholmes;I've filed JDK-8289253 for further cleanups.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lw4] Unable to extend a separately compiled abstract value class,JDK-8288644,5077277,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-06-16 22:36,2022-06-17 21:34,2023-10-01 09:56,2022-06-17 21:34,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw4,,,,,,,,,,,,,,,,,"Frederic reports:

It seems there’s an issue with separate compilation when abstract value classes are extended:

$ cat AbstractValue.java
public abstract value class AbstractValue { }

$ cat MyValue.java
public value class MyValue extends AbstractValue {}
$ javac AbstractValue.java MyValue.java
$ rm *.class
$ javac AbstractValue.java
$ javac MyValue.java
MyValue.java:1: error: The super class AbstractValue of the value class MyValue defines a nonempty no-arg constructor AbstractValue(). This is disallowed
public value class MyValue extends AbstractValue {}
             ^
1 error
In the first case, AbstractValue and MyValue are compiled together, and javac successfully compiles both of them.
In the second case, AbstractValue is compiled first, then MyValue is compiled (using the already compiled AbstractValue.class class file), and this second compilation fails with the error above.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xiwz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-06-16 22:44;sadayapalam;This dovetails nicely with what I have been discussing with Dan about what needs to be done with source constructors in an abstract value class. A non-trivial constructor results in an error of course, but a trivial constructor should be lowered into <init> method according to Dan and not to the static value factory. ;;;","2022-06-17 01:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/717
Date: 2022-06-17 08:02:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The ICC_ColorSpace.fromCIEXYZ method uses the wrong rendering intent,JDK-8288633,5077262,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-06-16 15:21,2022-08-15 16:51,2023-10-01 09:56,2022-08-08 14:52,17,18,19,,,,20,client-libs,,0,,,,,,,,,,,,,,,,,,"The specification says:
* This method transforms color values using relative colorimetry, as
* defined by the ICC Specification. 

The lcms plugin implementation expects the rendering intent in the first part of transform:
https://github.com/openjdk/jdk/blob/9d4b25e7888098a866ff980e37b8d16d456906d8/src/java.desktop/share/classes/sun/java2d/cmm/lcms/LCMSTransform.java#L116

But the ICC_ColorSpace.fromCIEXYZ pass ""ICC_Profile.icRelativeColorimetric"" to the second part of transform.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-4760025,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xitn:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-06-16 20:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9194
Date: 2022-06-17 00:09:28 +0000;;;","2022-08-08 14:52;dukebot;Changeset: 77398430
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-08-08 21:50:16 +0000
URL:       https://git.openjdk.org/jdk/commit/77398430b5e13768cddd5f63e8fe9e53735bbea8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cleanup CommentHelper.getText0,JDK-8288624,5077253,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-06-16 13:09,2022-07-18 13:14,2023-10-01 09:56,2022-07-13 07:48,18,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,"CommentHelper.getText0 omits a space between the reference and the label, for a LinkTree, and can otherwise be generally improved.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288545,JDK-8288699,,,,,,"2022-07-08 18:14;jjg;Screen Shot Encapsulated Exception bug.png;https://bugs.openjdk.org/secure/attachment/99925/Screen+Shot+Encapsulated+Exception+bug.png","2022-07-08 18:14;jjg;Screen Shot see-list-long bug.png;https://bugs.openjdk.org/secure/attachment/99926/Screen+Shot+see-list-long+bug.png",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xirn:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-07-08 17:49;jjg;In this case, ""and can otherwise be generally improved"" means ""removed""!;;;","2022-07-08 18:18;jjg;Two previously unknown bugs are uncovered by this work.

The algorithm for determining whether to use `see-list` or `see-list-long` to display a list of `@see` links is flawed. The algorithm depends on both the overall length of all the links, and whether there are commas in the entries in the list. The problem is that the check looks for commas anywhere in each entry, including any links that may only appear in a `href` attribute. See the attached screenshot (Screen Shot see-list-long bug.png) for an example, or the same in the API documentation: 
https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/SecurityManager.html#getSecurityContext()

In some situations, `{@link}` in the description for a serialized field was silently ignored.  These issues show up in the Serialized Form page. There are many instances of this in the latest API docs; here is an example diff, before and after the fix for this. 

< <div class=""block"">Encapsulated Exception</div>
---
> <div class=""block"">Encapsulated <a href=""java.base/java/lang/Exception.html"" title=""class in java.lang""><code>Exception</code></a></div>

The example is in the ""Serialized Fields"" section of this entry in the serialized-form page: 
https://docs.oracle.com/en/java/javase/18/docs/api/serialized-form.html#javax.management.modelmbean.InvalidTargetObjectTypeException
In the attached screenshot (Screenshot Screen Shot Encapsulated Exception bug.png) notice the different formatting for the word `Exception`. The instance as the type of the field is linked; the instance in the narrative description is in plain text, even though the source code shows the use of `{@link}`.;;;","2022-07-08 19:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9438
Date: 2022-07-09 01:55:32 +0000;;;","2022-07-13 07:48;dukebot;Changeset: 572c14ef
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-07-13 14:45:04 +0000
URL:       https://git.openjdk.org/jdk/commit/572c14efc67860e75edaa50608b4c61aec5997da
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unexpected parsing for @see,JDK-8288619,5077247,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gli,prappo,prappo,2022-06-16 10:53,2023-06-01 08:05,2023-10-01 09:56,2023-06-01 08:05,20,,,,,,21,tools,,0,javadoc-doccommentparser,,,,,,,,,,,,,,,,,"% cat X.java
public class X {
    /**
     * @see ""{@code}""
     */
    public void m() { }
}

Executing `javadoc X.java` yields the following two errors:

X.java:3: error: unexpected content
     * @see ""{@code}""
             ^
X.java:3: error: incorrect use of inline tag
     * @see ""{@code}""
                  ^",,,,,,,,,,JDK-8308818,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xiqb:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-02-09 09:19;prappo;[~acobbs], FWIW DocCommentParser resides in jdk.compiler, not jdk.javadoc.;;;","2023-02-09 09:23;acobbs;[~prappo], Apologies - thanks for clarifying.;;;","2023-05-09 07:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13888
Date: 2023-05-09 14:01:43 +0000;;;","2023-06-01 08:03;gli;Changeset: a291f002
Author: Guoxiong Li <gli@openjdk.org>
Date: 2023-05-25 03:25:50 +0000
URL: https://git.openjdk.org/jdk/commit/a291f002cdd3daffeccab36ec713d9e59fe50f16;;;","2023-06-01 08:03;gli;Fix was pushed while main bug was targeted to 22. Reset the main bug to fixed in 21 and copied the Robo Duke entry here.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Updating Java Security Standard Algorithm Names,JDK-8288616,5077243,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,weijun,weijun,weijun,2022-06-16 10:18,2022-07-07 01:14,2023-10-01 09:56,2022-06-29 06:57,,,,,,,20,security-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"There's no Ed25519 and Ed448 in NamedParameterSpec, no HmacSHA512/224 and HmacSHA512/256 in KeyGenerator, and no GCM in AlgorithmParameters. On the other hand, XDH/X25519/X448 have not defined AlgorithmParameters and they should be removed from there.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289163,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xipf:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/management/OperatingSystemMXBean/TestTotalSwap.java: Expected total swap size ... but getTotalSwapSpaceSize returned ...,JDK-8288599,5077224,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2022-06-16 08:36,2022-10-25 11:26,2023-10-01 09:56,2022-06-21 11:42,10,17,18,19,20,,20,core-svc,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,tier5,,,,,,,,,,,,"Test com/sun/management/OperatingSystemMXBean/TestTotalSwap.java
might fail intermittently on linux or mac
Example:
----------System.out:(8/459)----------
Command line: [/usr/sbin/sysctl -n vm.swapusage]
[2021-08-19T00:11:44.129957Z] Gathering output for process 78603
[2021-08-19T00:11:44.453475Z] Waiting for completion for process 78603
[2021-08-19T00:11:44.453653Z] Waiting for completion finished for process 78603
Output and diagnostic info for process 78603 was saved into 'pid-78603-output.log'
total = 13312.00M used = 11447.75M free = 1864.25M (encrypted)

Total swap space size in bytes: 12884901888
----------System.err:(12/779)----------
java.lang.RuntimeException: Expected total swap size : 13958643712 but getTotalSwapSpaceSize returned: 12884901888
at TestTotalSwap.main(TestTotalSwap.java:92)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Expected total swap size : 13958643712 but getTotalSwapSpaceSize returned: 12884901888
",,,,,,,,,,JDK-8289495,JDK-8289493,JDK-8289466,JDK-8295209,JDK-8295897,JDK-8290232,,,,,,,,,,,,,,,,,,,,,,JDK-8288595,JDK-8179227,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xil7:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2022-06-16 08:37;lmesnik;The bug is highly intermittent. I think. it is needed to ensure that free swap is not changed during the test.
;;;","2022-06-16 08:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9174
Date: 2022-06-16 00:23:27 +0000;;;","2022-06-21 11:42;dukebot;Changeset: f0804304
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-06-21 18:38:03 +0000
URL:       https://git.openjdk.org/jdk/commit/f0804304400f380661a8a06e4c1dad97068fae60
;;;","2022-07-04 01:14;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, only a test change.  We see this failing in our CI, too.
Clean backport.
Test passes.  SAP nighlty testing passed.;;;","2022-07-04 01:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/526
Date: 2022-07-04 08:15:51 +0000;;;","2022-07-05 02:17;kevinw;Oops, just noticed the word ""chnaged"" slipped by us here in the original review.  I wouldn't change anything now if the backports are working cleanly.  Another typo for our next visit. 8-);;;","2022-10-11 07:44;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
No risk, only a test change.
Clean backport except for Copyright. Marked as clean.
Test passes. SAP nighlty testing passed.

;;;","2022-10-11 07:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1441
Date: 2022-10-11 14:42:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Random:from() adapter does not delegate to supplied generator in all cases,JDK-8288596,5077221,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,rgiulietti,kganapureddy,kganapureddy,2022-06-16 08:07,2022-08-05 11:11,2023-10-01 09:56,2022-06-29 07:58,19,,,,,,19,core-libs,,0,conformance,tck-red-19,,,,,,,,,,,,,,,,"As per the spec : https://download.java.net/java/early_access/jdk19/docs/api/java.base/java/util/Random.html#from(java.util.random.RandomGenerator)

"" If the generator is an instance of Random, it is returned. Otherwise, this method returns an instance of Random that delegates all methods except setSeed to the generator.""

Expectation :
Any method of RandomGenerator invocation on the returned instance of adpater method shall delegate to the supplied RandomGenerator except for setSeed.

Actual :
Not all methods of RandomGenerator are delegated 

Attached a sample to demonstrate the issue.",,,,,,,,,,JDK-8291369,JDK-8291206,JDK-8289488,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282928,,,,,,,,,,,"2022-06-16 08:08;kganapureddy;TestAdapter.java;https://bugs.openjdk.org/secure/attachment/99593/TestAdapter.java",,,,,,,,,,,,,,,,,,b21,,,,,,,,"0|i2xikj:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2022-06-17 05:58;rgiulietti;[~kganapureddy] The spec is somehow unclear whether delegation is only about methods directly exposed in Random, or whether this also covers those inherited from RandomGenerator.
The current implementation only delegates the former.
I'll prepare a PR that extends delegation to all methods of RandomGenerator (with setSeed() throwing).
;;;","2022-06-17 09:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/36
Date: 2022-06-17 16:44:30 +0000;;;","2022-06-29 07:58;dukebot;Changeset: 57089749
Author:    Raffaello Giulietti <rgiulietti@openjdk.org>
Committer: Roger Riggs <rriggs@openjdk.org>
Date:      2022-06-29 14:56:28 +0000
URL:       https://git.openjdk.org/jdk19/commit/570897498baeab8d10f7d9525328a6d85d8c73ec
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Files.readString ignores encoding errors for UTF-16,JDK-8288589,5077100,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,naoto,webbuggrp,webbuggrp,2022-06-15 07:26,2023-05-28 22:10,2023-10-01 09:56,2022-06-23 10:10,19,,,,,,19,core-libs,,0,19ea,dcsaw,jdk17u-fix-request,jdk17u-fix-yes,regression,reproducer-yes,webbug,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When using Files.readString(...) with UTF-16, encoding errors are ignored/ replaced, rather than throwing a MalformedInputException. This is the result of a fix of JDK-8286287, but is not matching the previous behavior of JDK 11 to JDK 16 and also inconsistent to the behavior for most other charsets, e.g. UTF-8.

REGRESSION : Last worked in version 16

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the test code.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
It should throw a MalformedInputException, as it does from JDK 11 to JDK 16. Note that when you change UTF_16 to UTF_8, the code does exhibit the expected behavior in all versions from JDK 11 to JDK 19.
ACTUAL -
It does not throw an exception with UTF_16 but silently proceeds with a replacement character (U+FFFD)

---------- BEGIN SOURCE ----------
import java.io.*;
import java.nio.file.*;
import java.nio.charset.*;

class Test {
  public static void main(String... arg) throws IOException {
    Path p = Files.write(Files.createTempFile(""charset"", ""test""), new byte[] { -50 });
    try(Closeable c = () -> Files.delete(p)) {
        String s = Files.readString(p, StandardCharsets.UTF_16);
    }
  }
}

---------- END SOURCE ----------

",,,,,,,,,,JDK-8289064,JDK-8291144,JDK-8291312,JDK-8306041,JDK-8309023,JDK-8308698,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8259842,,,,JDK-8286287,,,,,,,"2022-06-16 00:38;tongwan;Test.java;https://bugs.openjdk.org/secure/attachment/99584/Test.java",,,,,,,,,,,,generic,,,,,,b23,19,,generic,,,,,"0|i2xhtn:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-06-16 06:28;tongwan;The observations on Windows 10:
JDK 19ea+22: Passed.
JDK 19ea+23: Failed, MalformedInputException not thrown.;;;","2022-06-16 06:32;alanb;Is this a dup of JDK-8287541? Can you try JDK 9 b26 or newer?;;;","2022-06-16 06:37;tongwan;JDK 19ea+25 did not throw MalformedInputException either.;;;","2022-06-16 11:27;naoto;As the submitter pointed out, it looks like a regression caused by the fix to JDK-8286287.;;;","2022-06-16 15:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9193
Date: 2022-06-16 22:21:23 +0000;;;","2022-06-23 09:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/61
Date: 2022-06-23 16:12:31 +0000;;;","2022-06-23 10:10;dukebot;Changeset: a716f793
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-06-23 17:07:58 +0000
URL:       https://git.openjdk.org/jdk19/commit/a716f7934b2ce8078c27df4c87e8c1e9cceed000
;;;","2023-03-29 05:40;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Small change in an important component (String!). Required follow-up.
Clean backport.
Tests pass and fail without the fix.  SAP nighlty testing passed.;;;","2023-03-29 05:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1230
Date: 2023-03-29 12:44:03 +0000;;;","2023-04-13 02:53;clanger;JBS does not indicate that Oracle has backported this but as it seems it is an important follow up that fixes a regression in JDK-8286287, which just got backported, so approving.;;;",,,,,,,,,,,,,,,,,,,,,,,
C2: LShiftLNode::Ideal produces wrong result after JDK-8278114 ,JDK-8288564,5077188,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,chagedorn,chagedorn,chagedorn,2022-06-16 02:26,2022-07-27 03:11,2023-10-01 09:56,2022-06-19 23:52,19,20,,,,,19,hotspot,,0,c2,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,,,,,,,,,,,,"JDK-8278114 converts ""(x + x) << c0"" into ""x << (c0 + 1)"" for a long shift. However, that is not correct if c0 is 63:

(1 + 1) << 63 is converted to (1 << 1) << 63 
= 1 << 64 = 1 << 0    [according to the Java spec we only consider the six lowest-order bits of the right-hand operand (i.e. 64 = 0b10000000 & 0b0111111 = 0)]
= 1

while

(1 + 1) << 63 = 2 << 63 = 0

which is different. We should exclude the optimization added by JDK-8278114 if c0 = 63.

Integer shifts are note affected since we only apply the optimization for shift values smaller than 16.

This was found by the Java Fuzzer.",,,,,,,,,,JDK-8291267,JDK-8291099,JDK-8288775,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278114,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xid7:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-06-16 02:30;chagedorn;ILW = Wrong result with due to wrong optimization in LShiftLNode::Ideal, edge case, no workaround = HLH = P2;;;","2022-06-16 08:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/29
Date: 2022-06-16 15:27:42 +0000;;;","2022-06-19 23:52;dukebot;Changeset: ed714af8
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-06-20 06:47:40 +0000
URL:       https://git.openjdk.org/jdk19/commit/ed714af854d79fb2b47849f6efdf0c26686b58b3
;;;","2022-07-11 15:54;epavlova;The modified compiler/c2/irTests/TestIRLShiftIdeal_XPlusX_LShiftC.java test passed in JDK 19 CI.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VM crashes if it gets sent SIGUSR2 from outside,JDK-8288556,5077182,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-06-15 23:16,2023-05-19 10:28,2023-10-01 09:56,2022-06-21 00:58,11,17,19,20,8,,20,hotspot,,0,amazon-interest,,,,,,,,,,,,,,,,,"The VM uses SIGUSR2 (by default, can be overridden via _JAVA_SR_SIGNUM) to implement suspend/resume on java threads. It sends, via pthread_kill, SIGUSR2 to targeted threads to interrupt them. It knows the target thread, and the target thread is always a VM-attached thread.

However, if SIGUSR2 gets sent from outside, any thread may receive the signal, and if the target thread is not attached to the VM (e.g. primordial), it is unable to handle it. The result is an assert (debug VM) or a crash (release VM). On my box, this can be reliably reproduced by sending SIGUSR2 to any VM.

This has been discussed here: https://mail.openjdk.org/pipermail/core-libs-dev/2022-June/091450.html

The proposed solutions range from ""works as designed"" (on the ground that sending arbitrary signals to the JVM is an error in itself, and we should rather crash hard and fast) to ""lets catch and ignore the signal"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xibv:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-16 00:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9181
Date: 2022-06-16 07:47:02 +0000;;;","2022-06-21 00:58;dukebot;Changeset: 701ea3be
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-06-21 07:55:48 +0000
URL:       https://git.openjdk.org/jdk/commit/701ea3beaaef1acda2d2e041cfdb7d75549cf95c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
implicit declaration for JVM_ActiveProcessorCount in MacosxOperatingSystem.c is invalid on newer compilers,JDK-8288548,5077173,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fmatte,fmatte,fmatte,2022-06-15 20:52,2022-07-08 01:39,2023-10-01 09:56,2022-06-15 22:27,8,,,,,,8u351,hotspot,,0,,,,,,,,,,,,,,,,,,"find: /Users/fmatte/ws/8u/latest/jdk8u-cpu/build/macosx-aarch64/hotspot/dist/lib: No such file or directory
/Users/fmatte/ws/8u/latest/jdk8u-cpu/jdk/src/solaris/native/sun/management/MacosxOperatingSystem.c:137:23: error: implicit declaration of function 'JVM_ActiveProcessorCount' is invalid in C99 [-Werror,-Wimplicit-function-declaration]
    jint ncpus      = JVM_ActiveProcessorCount();
                      ^
1 error generated.

jvm.h header file need to be included in MacosxOperatingSystem.c to avoid this error",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2xi9v:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing space in error message,JDK-8288545,5077171,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-06-15 20:14,2022-07-27 03:06,2023-10-01 09:56,2022-06-17 09:56,19,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,"Seen in output:

.../jdk19.ref/open/src/java.management/share/classes/java/lang/management/PlatformLoggingMXBean.java:29: warning: Tag @linkplain: reference not found: java.logging/java.util.logginglogging
 * The management interface for the {@linkplain java.logging/java.util.logging logging} facility.
                                    ^

This is wrong on arguably two fronts.

1. There is no space between 'java.logging/java.util.logging' and 'logging'.
2. the message should not be trying to include the label as well as the reference in the message anyway.",,,,,,,,,,JDK-8288771,JDK-8291093,JDK-8291262,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288624,,,,JDK-8288692,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xi9f:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-06-15 20:18;jjg;1. The missing space is because of an error in CommentHelper.getText0, handling visitLink, line 234/235.

2. The label is incorrectly included  by using seeText not the signature in HtmlDocletWriter.seeTgaToContent in various places.;;;","2022-06-16 13:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/30
Date: 2022-06-16 20:02:08 +0000;;;","2022-06-17 09:56;dukebot;Changeset: 983f75ca
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-06-17 16:53:19 +0000
URL:       https://git.openjdk.org/jdk19/commit/983f75caa614432d25724851c979321f85a16327
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
broken link in specs/index.html,JDK-8288536,5077160,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,gbierman,jjg,jjg,2022-06-15 14:54,2022-07-26 23:19,2023-10-01 09:56,2022-06-17 07:33,19,,,,,,19,tools,,0,broken-links,noreg-doc,,,,,,,,,,,,,,,,A link checker reports a broken link for `specs/patterrns-switch-jls.html` in `specs/index.html`,,,,,,,,,,JDK-8288770,JDK-8291165,JDK-8291072,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xi6z:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Out of bound errors for memory segment access mentions wrong values,JDK-8288534,5077158,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-06-15 14:17,2022-08-05 11:04,2023-10-01 09:56,2022-06-16 09:03,19,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,"Consider this program:

public class TestOOB {
    public static void main(String[] args) {
        var segment = MemorySegment.allocateNative(10, MemorySession.global());
        segment.getAtIndex(ValueLayout.JAVA_INT,  2);
    }
}

There is an out of bound access here, as we are accessing segment at offset 8 with access length 4 (an int) - but the segment is only 10 bytes long.

The exception coming out of the API is as follows:

java.lang.IndexOutOfBoundsException: Index 8 out of bounds for length 7

Note that, while the offset is correct, the access length is misreported. This is due to the fact that the implementation subtracts quantities, to avoid overflow.

In some cases (access length > segment size) one can even observe negative values in the message.",,,,,,,,,,JDK-8288677,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290820,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xi6j:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Fix failed,,"2022-06-15 14:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/24
Date: 2022-06-15 21:24:04 +0000;;;","2022-06-16 09:03;dukebot;Changeset: ff3db520
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-06-16 15:59:22 +0000
URL:       https://git.openjdk.org/jdk19/commit/ff3db52044f69754b1ccf54961f453d4afbfba3a
;;;","2022-08-05 11:02;isipka;noting failures of said test in ATR 19 jdk-19+26 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing @param tags in com.sun.source classes,JDK-8288533,5077157,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-06-15 13:52,2022-06-23 00:00,2023-10-01 09:56,2022-06-15 15:35,19,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,"doclint reports:

/Volumes/J2GWork/jdk/jdk19.ref/open/src/jdk.compiler/share/classes/com/sun/source/util/DocTreeScanner.java:71: warning: no @param for <R>
public class DocTreeScanner<R,P> implements DocTreeVisitor<R,P> {
       ^
/Volumes/J2GWork/jdk/jdk19.ref/open/src/jdk.compiler/share/classes/com/sun/source/util/DocTreeScanner.java:71: warning: no @param for <P>
public class DocTreeScanner<R,P> implements DocTreeVisitor<R,P> {
       ^
/Volumes/J2GWork/jdk/jdk19.ref/open/src/jdk.compiler/share/classes/com/sun/source/util/DocTreePathScanner.java:40: warning: no @param for <R>
public class DocTreePathScanner<R, P> extends DocTreeScanner<R, P> {
       ^
/Volumes/J2GWork/jdk/jdk19.ref/open/src/jdk.compiler/share/classes/com/sun/source/util/DocTreePathScanner.java:40: warning: no @param for <P>
public class DocTreePathScanner<R, P> extends DocTreeScanner<R, P> {
       ^
/Volumes/J2GWork/jdk/jdk19.ref/open/src/jdk.compiler/share/classes/com/sun/source/util/TreePathScanner.java:45: warning: no @param for <R>
public class TreePathScanner<R, P> extends TreeScanner<R, P> {
       ^
/Volumes/J2GWork/jdk/jdk19.ref/open/src/jdk.compiler/share/classes/com/sun/source/util/TreePathScanner.java:45: warning: no @param for <P>
public class TreePathScanner<R, P> extends TreeScanner<R, P> {
       ^
6 warnings
",,,,,,,,,,JDK-8288585,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xi6b:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-06-15 14:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/25
Date: 2022-06-15 21:42:07 +0000;;;","2022-06-15 15:35;dukebot;Changeset: 729164f5
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-06-15 22:31:56 +0000
URL:       https://git.openjdk.org/jdk19/commit/729164f53499f146579a48ba1b466c687802f330
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
additional review changes for JDK-8286830,JDK-8288532,5077156,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dcubed,dcubed,dcubed,2022-06-15 13:50,2022-07-27 03:39,2023-10-01 09:56,2022-06-21 09:40,19,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,"A couple of post-integration review comments for:

    JDK-8286830 ~HandshakeState should not touch oops

should get resolved:


test/hotspot/jtreg/runtime/Thread/StopAtExit.java
        };
        threadCreator.setDaemon(true);
        threadCreator.start();
        test(timeMax);
Member
@dcubed-ojdk dcubed-ojdk 12 days ago

Okay, but now the test is going to execute for twice timeMax which might be
a bit of a surprise... In particular the usage() mesg is now wrong.
Member
@dcubed-ojdk dcubed-ojdk 12 days ago

Also, the @bug line is not updated with this bug ID.
Member Author
@pchilano pchilano 12 days ago

Ok, we could fix this in a new bug.


and 


test/hotspot/jtreg/runtime/Thread/SuspendAtExit.java
        };
        threadCreator.setDaemon(true);
        threadCreator.start();
        test(timeMax);
Member
@dcubed-ojdk dcubed-ojdk 12 days ago

Okay, but now the test is going to execute for twice timeMax which might be
a bit of a surprise... In particular the usage() mesg is now wrong.
Member
@dcubed-ojdk dcubed-ojdk 12 days ago

Also, the @bug line is not updated with this bug ID.
Member Author
@pchilano pchilano 12 days ago

Ok, we could fix this in a new bug.
",,,,,,,,,,JDK-8288919,JDK-8291126,JDK-8291278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286830,,,,JDK-8288497,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xi63:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-15 14:08;dcubed;Also going to pick up this sanity check from my recent stress testing:

$ git diff
diff --git a/src/hotspot/share/runtime/thread.inline.hpp b/src/hotspot/share/runtime/thread.inline.hpp
index d01f3015502..8c212ccc80d 100644
--- a/src/hotspot/share/runtime/thread.inline.hpp
+++ b/src/hotspot/share/runtime/thread.inline.hpp
@@ -147,6 +147,11 @@ class AsyncExceptionHandshake : public AsyncHandshakeClosure {
   }
 
   ~AsyncExceptionHandshake() {
+    Thread* current = Thread::current();
+    if (current->is_Java_thread()) {
+      guarantee(!JavaThread::cast(current)->is_gc_barrier_detached(),
+                ""JavaThread cannot touch oops after its GC barrier is detached."");
+    }
     assert(!_exception.is_empty(), ""invariant"");
     _exception.release(Universe::vm_global());
   }

The above fix depends on:

    JDK-8288497 add support for JavaThread::is_gc_barrier_detached();;;","2022-06-17 09:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/32
Date: 2022-06-16 21:54:56 +0000;;;","2022-06-21 09:40;dukebot;Changeset: 31d981e5
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-06-21 16:36:51 +0000
URL:       https://git.openjdk.org/jdk19/commit/31d981e5ea0fa4108da5ef94272794a8fed4a363
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Empty spans in mobile navigation markup,JDK-8288531,5077155,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,hannesw,hannesw,2022-06-15 13:27,2022-07-27 03:30,2023-10-01 09:56,2022-06-21 09:05,18,,,,,,19,tools,,0,noreg-trivial,,,,,,,,,,,,,,,,,"The mobile layout uses empty `<span>` elements for the menu button, and HTML Tidy complains about this. We should make these `<span>` elements non-empty or look at an alternative way to implement the menu button.",,,,,,,,,,JDK-8288916,JDK-8291120,JDK-8291275,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xi5v:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-06-21 05:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/53
Date: 2022-06-21 12:40:14 +0000;;;","2022-06-21 09:05;dukebot;Changeset: c74a9235
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2022-06-21 16:02:22 +0000
URL:       https://git.openjdk.org/jdk19/commit/c74a9235fc4526d9954ba3cedd14bbb370217570
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
broken link in java.xml,JDK-8288529,5077153,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,joehw,jjg,jjg,2022-06-15 13:04,2022-07-27 03:49,2023-10-01 09:56,2022-06-21 21:52,19,,,,,,19,xml,,0,broken-links,doccheck,noreg-doc,,,,,,,,,,,,,,,"doccheck reports

api/java.xml/javax/xml/validation/package-summary.html: Exception accessing uri: http://www.iso.org
    [java.io.IOException: HTTP/1.1 header parser received no bytes]",,,,,,,,,,JDK-8291133,JDK-8289015,JDK-8291284,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xi5f:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78dd820a,,,,,,,,,"2022-06-17 10:37;joehw;In a browser,  http://www.iso.org gets redirected to https://www.iso.org/home.html. Is that an issue? I see other URLs redirected as well. Does the doccheck error happen again?

Checked a few links in the area, while other redirections happened almost instantly, this one took a second or two. Will update the link to avoid redirection.;;;","2022-06-21 10:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/55
Date: 2022-06-21 16:52:52 +0000;;;","2022-06-21 21:52;dukebot;Changeset: 9e2d9ac5
Author:    Joe Wang <joehw@openjdk.org>
Date:      2022-06-22 04:49:17 +0000
URL:       https://git.openjdk.org/jdk19/commit/9e2d9ac59a19caa52fc661542d4257a7473636d7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
broken links in java.desktop,JDK-8288528,5077152,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abhiscxk,jjg,jjg,2022-06-15 13:01,2022-07-29 14:08,2023-10-01 09:56,2022-06-23 21:24,19,,,,,,19,client-libs,,0,broken-links,doccheck,noreg-doc,sn_120,sn_121,,,,,,,,,,,,,"doccheck reports the following:
pi/java.desktop/javax/imageio/plugins/tiff/ExifTIFFTagSet.html: HTTP status 502 Unknown: http://www.exif.org/Exif2-2.PDF
    Also found in api/java.desktop/javax/imageio/metadata/doc-files/tiff_metadata.html
api/java.desktop/javax/swing/class-use/LayoutStyle.html: HTTP status 404 Not Found: http://www.oracle.com/technetwork/java/hig-136467.html
    Also found in api/java.desktop/javax/swing/plaf/metal/MetalLookAndFeel.html
api/java.desktop/javax/swing/plaf/multi/doc-files/multi_tsc.html: HTTP status 404 Not Found: http://www.oracle.com/technetwork/java/javase/tech/articles-jsp-139072.html
api/java.desktop/java/awt/doc-files/AWTThreadIssues.html: HTTP status 404 Not Found: https://bugs.java.com/view_bug.do?bug_id=4030718
api/java.desktop/java/awt/doc-files/AWTThreadIssues.html: HTTP status 404 Not Found: https://bugs.java.com/view_bug.do?bug_id=4465537
api/java.desktop/java/awt/doc-files/AWTThreadIssues.html: HTTP status 404 Not Found: https://bugs.java.com/view_bug.do?bug_id=4515058
api/java.desktop/java/awt/doc-files/AWTThreadIssues.html: HTTP status 404 Not Found: https://bugs.java.com/view_bug.do?bug_id=4671025

",,,,,,,,,,JDK-8291318,JDK-8289241,JDK-8291147,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291460,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xi57:",9223372036854775807,b29,,,,,,,,,,,"2022-06-16 20:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9195
Date: 2022-06-17 03:45:05 +0000;;;","2022-06-17 10:36;vdyakov;[~psadhukhan] as a doc change we need it in JDK 19 forked repo;;;","2022-06-17 10:41;psadhukhan;May I know why we need it in jdk19 forked repo? these broken links were there from ages , not just in jdk19 
and jdk19 is not LTS..
I have already opened a PR in mainline..
we can backport it if necessary to jdk19, can't we?;;;","2022-06-17 11:03;vdyakov;[~psadhukhan] first of all, thanks for asking, this time frame (RDP1) is designed for (i) filing ""summary"" bugs against docs at the end of active development time frame (by Jonathan) and (ii) fixing that being ""best of the best"" on docs for the nearest release (JDK 19 as of now). you can re-submit against 19 forked repo, and please be aware about the guideline: https://openjdk.org/guide/#how-to-fix-an-incorrect-backport-creation-in-jbs;;;","2022-06-19 21:01;psadhukhan;The fix is almost approved. It will be difficult to again resubmit against forked repo, unnecessary waste of developer and reviewers time.
I will follow the guideline once pushed.;;;","2022-06-19 21:10;psadhukhan;[~vdyakov] If you still insist on resubmiting against jdk19 repo, I was thinking of assigning to Abhishek who can use the approved changes I have done. I can be the reviewer for him so will not waste other reviewers time.

It will be learning curve for him and will also get him closer to his goal of getting Author role;;;","2022-06-20 11:08;vdyakov;another examples of doc fixes we are doing in 19 in RDP1: JDK-8288527, JDK-8288529, JDK-8288536;;;","2022-06-23 15:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/44
Date: 2022-06-20 07:35:14 +0000;;;","2022-06-23 21:23;dukebot;Changeset: b0db3333
Author:    Abhishek Kumar <abhishek.cx.kumar@oracle.com>
Committer: Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-06-24 04:22:25 +0000
URL:       https://git.openjdk.org/jdk19/commit/b0db33333a9fbc39e8d9f7d6a0f13d6a1b5dde04
;;;",,,,,,,,,,,,,,,,,,,,,,,,
broken link in java.base/java/util/zip/package-summary.html,JDK-8288527,5077151,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lancea,jjg,jjg,2022-06-15 12:57,2022-07-27 03:23,2023-10-01 09:56,2022-06-20 10:35,19,,,,,,19,core-libs,,0,broken-links,doccheck,noreg-doc,,,,,,,,,,,,,,,"Reported by doccheck:

api/java.base/java/util/zip/package-summary.html: HTTP status 404 Not Found: http://www.pkware.com/documents/casestudies/APPNOTE.TXT

Confirmed that the file is 404.",,,,,,,,,,JDK-8291107,JDK-8288779,JDK-8291272,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xi4z:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2022-06-15 19:31;martin;A google  search for ""pkware zip file format specification"" leads to
https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT
which is an even less promising URL than the last one, but it does work!
And it's where https://support.pkware.com/home/pkzip/developer-tools/appnote is pointing, so that seems to make it official!;;;","2022-06-15 23:16;alanb;I followed the link to this page with the archived versions:
https://support.pkware.com/home/pkzip/developer-tools/appnote/application-note-archives
but the links are broken there too so not clear where they are archived now.

In addition to finding a stable link, we may also need to document the version.;;;","2022-06-16 03:00;lancea;Perhaps it is best to just point here: https://support.pkware.com/home/pkzip/developer-tools/appnote.  Or to: https://support.pkware.com/home/pkzip/developer-tools/appnote/application-note-archives;;;","2022-06-17 09:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/35
Date: 2022-06-17 16:33:16 +0000;;;","2022-06-20 10:35;dukebot;Changeset: 453e8beb
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2022-06-20 17:32:31 +0000
URL:       https://git.openjdk.org/jdk19/commit/453e8beb43d56656d358c56f9d505ceaeba53f72
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow @systemProperty to appear in overview documentation,JDK-8288524,5077148,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prappo,prappo,prappo,2022-06-15 11:35,2022-07-26 23:27,2023-10-01 09:56,2022-06-27 12:43,19,,,,,,19,tools,,0,javadoc-spec,javadoc-systemProperty,,,,,,,,,,,,,,,,I cannot see any reason why @systemProperty should behave differently from closely-related @index.,,,,,,,,,,JDK-8289403,JDK-8291169,JDK-8291074,,,,,,,,,,,,,,,,,,JDK-8287379,JDK-8288875,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xi4b:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-06-16 06:36;prappo;As a useful side effect, JDK-8287379 expands misuse checks to include inline tags. {@systemProperty} is an inline tag which is used in java.base/share/classes/java/net/doc-files/net-properties.html, which is a currently inapplicable ""overview"" context for that tag.

If JDK-8287379 integrates before this bug, API Documentation build will report 66 new warnings.;;;","2022-06-21 12:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/56
Date: 2022-06-21 19:23:30 +0000;;;","2022-06-27 12:43;dukebot;Changeset: 17ef8cae
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-06-27 19:33:16 +0000
URL:       https://git.openjdk.org/jdk19/commit/17ef8cae33dd77e5a9b2cf19539ebf25aece5f92
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(ch) Unnecessary use of Math.addExact() in java.nio.channels.FileLock.overlaps(),JDK-8288515,5077139,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-06-15 11:26,2022-06-29 23:09,2023-10-01 09:56,2022-06-23 08:44,20,,,,,,20,core-libs,,0,noreg-other,,,,,,,,,,,,,,,,,"The check

        if (position + size < 0)
            throw new IllegalArgumentException(""Negative position + size"");

in the FileLock constructor guarantees that position() + size() does not overflow a long. Therefore the use of Math.addExact()

        // Test whether this is below that
        try {
            if (Math.addExact(this.position, this.size) <= position)
                return false;
        } catch (ArithmeticException ignored) {
            // the sum of this.position and this.size overflows the range of
            // long hence their mathematical sum is greater than position
        }

in overlaps() is not necessary.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-5041655,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xi2b:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-06-15 11:48;bpb;noreg-other: Change covered by existing tests.;;;","2022-06-21 17:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9229
Date: 2022-06-22 00:13:35 +0000;;;","2022-06-23 08:44;dukebot;Changeset: ef17ee4d
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-06-23 15:40:23 +0000
URL:       https://git.openjdk.org/jdk/commit/ef17ee4dea38c3bb953927bfdaabf1fe1b7e54ea
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restore cancel-in-progress in GHA,JDK-8288499,5077109,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-06-15 08:19,2022-12-19 01:32,2023-10-01 09:56,2022-06-15 10:40,20,,,,,,20,infrastructure,,0,build-infra,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,,,,,,,,,,"I accidentally changed the behavior in GHA wrt multiple runs from the same branch. The old solution used `cancel-in-progress: true` which means that an old batch was cancelled when a new commit was pushed to the branch. 

I think this is a good behavior, since it minimizes wait times for GHA results, and wastes less GHA resources.

I changed this to `false` while developing the new GHA framework, and intended to change it back before pushing, but forgot about it.",,,,,,,,,,JDK-8290457,JDK-8299017,JDK-8290409,JDK-8291259,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xhvn:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-06-15 08:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9170
Date: 2022-06-15 15:20:29 +0000;;;","2022-06-15 10:40;dukebot;Changeset: cb5ef3da
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-06-15 17:36:12 +0000
URL:       https://git.openjdk.org/jdk/commit/cb5ef3da1904e6639130c601db9644895807b4d6
;;;","2022-07-11 04:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/5
Date: 2022-07-11 11:12:53 +0000;;;","2022-07-11 08:12;clanger;Fix request (19u, 17u) on behalf of George Adams:
This is a follow-up PR to the backport of JDK-8287906, the enhanced, new style GHA. When JDK-8287906 is integrated, this patch should apply cleanly. Risk: None, only affecting GHA test workflow. ;;;","2022-07-17 02:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/557
Date: 2022-07-17 09:00:57 +0000;;;","2022-11-25 04:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1554
Date: 2022-11-25 12:09:16 +0000;;;","2022-12-14 15:40;gdams;Fix request (11u):
This is a follow-up PR to the backport of [JDK-8287906], the enhanced, new style GHA. When [JDK-8287906] is integrated, this patch should apply cleanly. Risk: None, only affecting GHA test workflow.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
jni/nullCaller/NullCallerTest.java failing (ppc64),JDK-8288485,5077090,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mdoerr,mdoerr,2022-06-15 06:17,2022-07-27 03:14,2023-10-01 09:56,2022-06-20 01:37,19,,,,,,19,core-libs,,0,noreg-self,testbug,,,,,,,,,,,,,,,,"jni/nullCaller/NullCallerTest.java fails on PPC64 since JDK-8281001:

 stdout: [];
 stderr: []
 exitValue = 139

java.lang.RuntimeException: Expected to get exit value of [0]

	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:489)
	at NullCallerTest.main(NullCallerTest.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1596)


Exit code 139 seems to indicate a SIGSEGV inside of the library code when ""<iostream>"" is included.
Reverting to ""<stdio.h>"" fixes the issue.
",,,,,,,,,,JDK-8291100,JDK-8288776,JDK-8291268,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281001,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,linux,,,,,"0|i2xhrf:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ae6d091,,,,,,,,,"2022-06-15 06:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/19
Date: 2022-06-15 13:25:21 +0000;;;","2022-06-20 01:37;dukebot;Changeset: 09da87cf
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-06-20 08:34:06 +0000
URL:       https://git.openjdk.org/jdk19/commit/09da87cf5c2ed6de059425437e46517da9883e7e
;;;","2022-06-20 06:24;mdoerr;Nice article about IOStream:
https://www.moria.us/articles/iostream-is-hopelessly-broken/
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Cannot resolve method,JDK-8288482,5077078,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mgronlun,egahlin,egahlin,2022-06-15 04:51,2023-05-19 01:03,2023-10-01 09:56,2022-07-19 02:39,15,16,17,18,19,20,19,hotspot,,0,amazon-interest,,,,,,,,,,,,,,,,,"[0.109s][info ][jfr,system,parser] Missing object id=99811329 in pool jdk.types.Method. All ids should reference an object
[0.109s][info ][jfr,system,parser] Missing object id=99811329 in pool jdk.types.Method. All ids should reference an object
[0.109s][info ][jfr,system,parser] Missing object id=99811329 in pool jdk.types.Method. All ids should reference an object
[0.109s][info ][jfr,system,parser] Missing object id=99811329 in pool jdk.types.Method. All ids should reference an object
[0.109s][info ][jfr,system,parser] Missing object id=99811329 in pool jdk.types.Method. All ids should reference an object
[0.109s][info ][jfr,system,parser] Missing object id=99811329 in pool jdk.types.Method. All ids should reference an object
[0.110s][info ][jfr,system,parser] Missing object id=99811329 in pool jdk.types.Method. All ids should reference an object
[0.110s][info ][jfr,system,parser] Missing object id=99811329 in pool jdk.types.Method. All ids should reference an object

Reproducer:

$ java Repro.java
May require hundreds of retries before NPE happens
$ jfr -J-Xlog:jfr+system+parser=info print file.jfr

Happens with first event in second chunk. Could possibly be a regression from the removal of event handlers JDK-8282420. The retry-mechanism may not have survived properly.
",,,,,,,,,,JDK-8291441,JDK-8290685,JDK-8291323,,,,,,,,,,,,,,,,,,,,,,,JDK-8260723,,,,,,,,JDK-8287699,,,,JDK-8233705,,,,,,,"2022-06-15 04:52;egahlin;Repro.java;https://bugs.openjdk.org/secure/attachment/99574/Repro.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xhor:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-06-20 02:25;mgronlun;I have been unable to reproduce this issue on my Windows machines. Inspection and instrumentation of the retry logic have validated it to be correct.;;;","2022-06-21 11:21;egahlin;How do we best debug this issue? It usually reproduces within 3 minutes on Mac (ARM).

There are several other tests that emits lots of events without issues. 

What is unique with this test is that it is running a 'profile' recording at the same time. The test emits 1 000 000 events. I have tried to lower it, but then I can't reproduce the issue. It's likely related to the chunk rotation. Always happens in the second chunk. ;;;","2022-07-07 07:51;egahlin;The issue can be reproduced with only ScrubEvents, it also happens on JDK 17.;;;","2022-07-17 06:04;mgronlun;// Tag bits: ""meta bits"" == high 8 bits, ""bits"" == low 8 bits

// ""Ideal"" tagging

tag bits (meta bits | bits): 00000000 00000000
Current epoch: 0

A thread tags in the current epoch 0 (no meta bits | epoch 0 tag): 00000000 00000001

Now the epoch is shifted, current epoch: 1

There is a collection and serialization of artefacts tagged in the previous epoch, here, epoch 0. It also involves clearing the epoch 0 tag bit (cas) and setting the epoch 0 cleared meta bit:

Tag bits (epoch 0 cleared meta bit | no bits): 00000001 00000000

A thread now tags in epoch 1 (epoch 0 cleared meta bit | epoch 1 tag): 00000001 00000010

Now the epoch is again shifted, current epoch: 0

There is a collection and serialization of artefacts tagged in the previous epoch, here, epoch 1. It also involves clearing the epoch 1 tag bit (cas) and setting the epoch 1 cleared meta bit:

Tag bits (epoch 1 cleared meta bit, epoch 0 cleared meta bit | no tags): 00000011 00000000

// Tag interleaving

T1: load  : 00000001 // current
T1: or      : 00000001 | 10 // setting the tag for current epoch 1
T2: CAS  : 00000000 // T2 clears the previous epoch 0
T1: store : 00000011 // clearing of the previous epoch 0 is lost. This situation is handled by setting the epoch 0 cleared meta bit.

Tag bits: (epoch 0 cleared meta bit | epoch 1 tag, epoch 0 tag): 00000001 00000011 // This situation is handled by setting the epoch 0 cleared meta bit.

Even though the epoch 0 bit is ""set"" via the interleave, since the epoch 0 cleared meta bit is also set, the artefact is effectively NOT tagged in epoch 0.

// JDK_8288482

A bug incorrectly clears the wrong epoch cleared meta bit as part of serialization.

template <>
void set_serialized<Method>(MethodPtr method) {
  assert(method != NULL, ""invariant"");
  SET_METHOD_SERIALIZED(method);
  assert(IS_METHOD_SERIALIZED(method), ""invariant"");
  CLEAR_THIS_EPOCH_METHOD_CLEARED_BIT(method);
}

The current epoch meta bit is cleared as part of the artefact serialization, which is only correct for flushpoints and class unloading.
It is wrong for serializations related to chunk rotation because these have already issued an epoch shift and collect for the previous epoch.

Details:

The above set_serialized() function invalidates the invariant ""This situation is handled by setting the epoch cleared meta bit"" as part of serializing artefacts related to rotations.

State: previous epoch 1, current epoch 0.

Collection and serialization of artifacts tagged in epoch 1:

  1) SET_METHOD_SERIALIZED(method);
  
     00010001 00000011 // serialized meta bit is set
     
  2) CLEAR_THIS_EPOCH_METHOD_CLEARED_BIT(method); // INVALID CLEARING of the meta bit for the current epoch when we are serializing artefacts for the previous epoch.
  
     00010000 00000011 // clearing the wrong meta bit

At this point, if a thread attempts a tag for epoch 0, it will see:

     00010000 00000011

That is, the tag bit for epoch 0 is set, and the cleared meta bit for epoch 0 is NOT set (due to the bug that cleared it). To the thread, this implies the artefact is already serialized; hence, the thread will skip enqueuing the klass as part of the load barrier.

Summary:

Serializations related to rotations must not issue the CLEAR_THIS_EPOCH_METHOD_CLEARED_BIT because, at this point, the epoch has already shifted. As such, we are collecting the previous epoch and must not clear the current one.
CLEAR_THIS_EPOCH_METHOD_CLEARED_BIT is only valid for flushpoints and class unloading, that collect the current epoch.;;;","2022-07-17 06:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/144
Date: 2022-07-17 13:14:10 +0000;;;","2022-07-19 02:39;dukebot;Changeset: a6bab2a3
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2022-07-19 09:34:49 +0000
URL:       https://git.openjdk.org/jdk19/commit/a6bab2a37905a191e95464b47a2dd4c89ce7be61
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: toolbar action is not applied to the focused graph,JDK-8288480,5077075,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rcastanedalo,rcastanedalo,rcastanedalo,2022-06-15 04:32,2022-08-16 23:46,2023-10-01 09:56,2022-06-20 00:36,19,20,,,,,20,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,"When multiple graphs are displayed simultaneously in split windows, toolbar actions such as node extraction, zooming, etc. are always applied to the same graph, regardless of which graph window is focused.

Steps to reproduce:

1. Open a graph
2. Open a clone of the same graph
3. Split the graph windows (right click on the tab of one of the graphs -> New Document Tab Group)
4. Perform a toolbar action on each of the graph windows (e.g. ""Zoom out"")

Expected: each action is applied to its corresponding graph 
Actual: the action is always applied to one of the graphs",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289503,,,,,,,,,,,,,JDK-8263385,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xho3:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-06-15 04:55;chagedorn;ILW = Toolbar actions applied to wrong graph when multiple graphs are opened in IGV, only in split window mode, no workaround = MLH = P4;;;","2022-06-15 06:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9169
Date: 2022-06-15 13:45:53 +0000;;;","2022-06-20 00:36;dukebot;Changeset: f62b2bd9
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2022-06-20 07:34:45 +0000
URL:       https://git.openjdk.org/jdk/commit/f62b2bd9cda952b205ee03151cc58c95f588a742
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Move EventContinuationFreezeOld from try_freeze_fast to freeze_slow,JDK-8288474,5077067,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,rpressler,rpressler,2022-06-15 02:25,2022-09-21 23:08,2023-10-01 09:56,2022-09-15 05:15,19,,,,,,20,hotspot,,0,loom,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,"0|i2xhmb:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-09 11:38;coleenp;Is there documentation on what these events are ? ContinuationFreezeOld ?;;;","2022-09-14 04:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10254
Date: 2022-09-13 20:22:58 +0000;;;","2022-09-15 05:15;dukebot;Changeset: 6fca9ae0
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-09-15 12:11:08 +0000
URL:       https://git.openjdk.org/jdk/commit/6fca9ae04703103ff6832dbee9549c5512611c5e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove unused frame::set_pc_preserve_deopt methods,JDK-8288473,5077066,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,rpressler,rpressler,2022-06-15 02:22,2022-09-14 21:37,2023-10-01 09:56,2022-09-09 13:23,19,,,,,,20,hotspot,,0,loom,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,"0|i2xhm3:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-09 09:18;coleenp;These are unused and probably dangerous to not change the _deopt state.  May I?;;;","2022-09-09 10:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10233
Date: 2022-09-09 17:48:48 +0000;;;","2022-09-09 13:23;dukebot;Changeset: 91d00b30
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-09-09 20:19:56 +0000
URL:       https://git.openjdk.org/jdk/commit/91d00b3022b8bb59ce04fb5f214e3deb93590f46
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
remove memory_operand assert for spilled instructions,JDK-8288467,5077056,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,shade,shade,2022-06-15 00:19,2022-07-27 03:28,2023-10-01 09:56,2022-06-21 08:24,11,17,19,20,,,19,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-20,regression,,,,,,,,,,,"$ CONF=linux-x86-server-fastdebug make run-test TEST=compiler/eliminateAutobox/TestFloatBoxing.java TEST_VM_OPTS=""-XX:UseAVX=0 -XX:UseSSE=0"" 

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/chaitin.cpp:1736
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/opto/chaitin.cpp:1736), pid=1609602, tid=1609632
#  assert(cisc->memory_operand() == nullptr) failed: no memory operand, only stack
#
# JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-internal-adhoc.shade.jdk)
# Java VM: OpenJDK Server VM (fastdebug 20-internal-adhoc.shade.jdk, mixed mode, sharing, tiered, g1 gc, linux-x86)
# Problematic frame:
# V  [libjvm.so+0x821956]  PhaseChaitin::fixup_spills()+0x716

The node in question is:
   67  addFPR24_mem_cisc  === 23 62 19 72  [[ ]] #32/0x00000020#8/0x00000008",,,,,,,,,,JDK-8289455,JDK-8289468,JDK-8288915,JDK-8289496,JDK-8289502,JDK-8291119,JDK-8291274,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282555,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xhjv:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-15 01:30;shade;Bisection points to JDK-8282555.;;;","2022-06-15 04:11;chagedorn;ILW = C2 assertion failure of newly introduced assertion, single test and x86 only (?), possibly use UseAVX>0 and/or UseSSE>0 or disable compilation of affected method = HLM = P3;;;","2022-06-15 04:13;chagedorn;Since the assert was added in JDK 19, we should target this fix to 19.;;;","2022-06-15 10:15;shade;[~epeter], any suggestions?;;;","2022-06-16 01:08;epeter;[~shade]
I see the instruction addFPR24_mem_cisc is specific to
src/hotspot/cpu/x86/x86_32.ad

// Cisc-spill variant
// Spill to obtain 24-bit precision
instruct addFPR24_mem_cisc(stackSlotF dst, memory src1, memory src2) %{
  predicate(UseSSE==0 && Compile::current()->select_24_bit_instr());
  match(Set dst (AddF src1 (LoadF src2)));
...

We load two values from memory, add them, and store that to stack.

This instruction seems to have oper_input_base()==1, because the output is not memory but a stackSlot, and for stackSlots we do unfortunately not say that we need a memory edge in MatchNode::needs_ideal_memory_edge.

So then we add the memory edge as an additional req. That seems fine.
The problem here is that we do not expect a memory operand.

[~jbhateja] You asked for that assert in the PR. Is it possible that this instruction does have a memory_operand, because of src1 and src2 are memory? If that is true, we probably have to remove the assert.

cisc->memory_operand() returns 0xffffffff
in build/slowdebug-x32/hotspot/variant-server/support/adlc/ad_x86.cpp
const MachOper* addFPR24_mem_ciscNode::memory_operand() const { return (MachOper*)-1; }

This is generated in
ArchDesc::defineClasses
becasue we have
instr->memory_operand(_globalNames) == InstructForm::MANY_MEMORY_OPERANDS;;;","2022-06-16 07:31;epeter;Additional information:

We have a stack spill, from a mach node
addFPR24_reg_mem
to a cisc node
addFPR24_mem_cisc

// Cisc-alternate to addFPR_reg                                                                                                                      
// Spill to obtain 24-bit precision                                                                                                                  
instruct addFPR24_reg_mem(stackSlotF dst, regFPR src1, memory src2) %{                                                                               
  predicate(UseSSE==0 && Compile::current()->select_24_bit_instr());                                                                                 
  match(Set dst (AddF src1 (LoadF src2)));
...

src1 used to be a register. After spilling it is a memory node, reading from stack (frame pointer fp).

BTW, both cisc and mach node have mach->oper_input_base() == 2. That is why we go into the else case.

Before spilling:

23: control
62: memory for src2
68: float input src1
72: address input dst
addFPR24_reg_mem  === 23 62 68 72  [[ 66 ]] #8/0x00000008

after spilling:

19: MachProj for frame pointer
67  addFPR24_mem_cisc  === 23 62 19 72

something that makes me nervous, is that src is not a memory write but simply a data phi node with type #float.
 68  Phi  ===  23  69  54  [[ 67 ]]  #float 

So far I have usually seen src be a DefinitionSpillCopy node.
They are supposed to be allocated in
PhaseChaitin::get_spillcopy_wide
PhaseChaitin::split_DEF
PhaseChaitin::Split
PhaseChaitin::Register_Allocate
Compile::Code_Gen

Ahaa, this is a really special case:
 54  roundFloat_mem_reg  === _  55  [[ 102  68 ]]
 69  roundFloat_mem_reg  === _  70  [[ 68 ]]
 23  Region  ===  23  84  83  [[ 23  22  59  62  67  68  72  67 ]]
 68  Phi  ===  23  69  54  [[ 67 ]]  #float

Here, we have two separate spills, both roundFloat_mem_reg:
roundFloat_mem_reg(stackSlotF dst, regFPR src)
They take a register input, round it, and write it to stack.
Since the control flow has just merged in a Region, we also need to merge the value (spilling) in a Phi. So this seems correct.;;;","2022-06-17 00:35;epeter;On x86 32bit, we have the following instructions with multiple memory_operand, all because of USE_of_memory == 2, because both src1 and src2 are addresses from which the instruction is supposed to read.

addFPR24_mem_cisc
addFPR24_mem_cisc_0
addFPR24_mem_mem
mulFPR24_mem_mem
addFPR24_mem_cisc
addFPR24_mem_cisc_0
addFPR24_mem_mem
mulFPR24_mem_mem;;;","2022-06-17 02:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/33
Date: 2022-06-17 09:32:40 +0000;;;","2022-06-21 08:24;dukebot;Changeset: af051391
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2022-06-21 15:22:02 +0000
URL:       https://git.openjdk.org/jdk19/commit/af05139133530871c88991aa0340205cfc44972a
;;;","2022-06-26 23:08;goetz;Fix request [11u]

No risk, only removing an assertion.  Required follow up for 8282555.
Needed a trivial resolve.
;;;","2022-06-26 23:11;goetz;Fix request [17u]

No risk, only removing an assertion. Required follow up for 8282555. 
Clean backport.;;;","2022-06-26 23:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/508
Date: 2022-06-27 06:12:28 +0000;;;","2022-06-26 23:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1188
Date: 2022-06-27 06:07:37 +0000;;;",,,,,,,,,,,,,,,,,,,,
Update attribution in gstreamer.md file,JDK-8288450,5077037,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,vdyakov,vdyakov,2022-06-14 14:24,2022-11-29 06:01,2023-10-01 09:56,2022-07-21 15:37,8,jfx11,jfx17,jfx19,,,jfx20,javafx,,0,noreg-doc,sn_121,sn_122,sn_123,,,,,,,,,,,,,,"We need to update the attribution in the third-party gstreamer.md file.
",,,,,,,,,,JDK-8292684,JDK-8292801,JDK-8290851,,,,,,,,,,,,,,,,,,,,,,JDK-8288449,,,,,,,,,,,,,JDK-8289935,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xhfn:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-06-30 19:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/807
Date: 2022-07-01 02:07:54 +0000;;;","2022-07-21 15:36;dukebot;Changeset: 54e689ce
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-07-21 22:30:37 +0000
URL:       https://git.openjdk.org/jfx/commit/54e689ce639ee182113dab610d9ed82890493898
;;;","2022-08-19 07:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/79
Date: 2022-08-19 14:32:41 +0000;;;","2022-08-23 10:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/111
Date: 2022-08-23 17:37:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update attribution in glib.md file,JDK-8288449,5077036,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,vdyakov,vdyakov,2022-06-14 14:21,2022-11-29 06:02,2023-10-01 09:56,2022-07-21 15:37,8,jfx11,jfx17,jfx19,,,jfx20,javafx,,0,noreg-doc,sn_121,sn_122,sn_123,,,,,,,,,,,,,,"We need to update the attribution in the third-party glib.md file.
",,,,,,,,,,JDK-8292685,JDK-8292802,JDK-8290852,,,,,,,,,,,,,,,,,,,,JDK-8288450,,JDK-8283869,,,,,,,,,,,,,JDK-8289935,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xhff:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-06-30 19:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/807
Date: 2022-07-01 02:07:54 +0000;;;","2022-07-21 15:37;dukebot;Changeset: 54e689ce
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-07-21 22:30:37 +0000
URL:       https://git.openjdk.org/jfx/commit/54e689ce639ee182113dab610d9ed82890493898
;;;","2022-08-19 07:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/79
Date: 2022-08-19 14:32:41 +0000;;;","2022-08-23 10:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/111
Date: 2022-08-23 17:37:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"AArch64: C2 compilation fails with guarantee(!true || (true && (shift != 0))) failed: impossible encoding",JDK-8288445,5077032,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,dlong,dcubed,dcubed,2022-06-14 11:56,2022-10-20 09:16,2023-10-01 09:56,2022-06-27 20:18,11,17,19,20,,,19,hotspot,,0,c2,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-20,tier4,,,,,,,,,,"The following closed test failed in the JDK20 CI:

applications/javafuzzer/QuickTest.java

Here's a snippet from the log file:

----------System.out:(28/1898)----------
Using JRuby executable: /opt/mach5/mesos/work_dir/jib-master/install/org/jruby/jruby-dist/9.2.12.0/jruby-dist-9.2.12.0-bin.zip/jruby-9.2.12.0/bin/jruby
For random generator using seed: 1836776624702845882
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=1836776624702845882"" to command line.
Starting JavaFuzzer: '/bin/bash /opt/mach5/mesos/work_dir/jib-master/install/com/oracle/jpg/bigapps/javafuzzer/javafuzzer/1.0/javafuzzer-1.0.zip/mrt.sh -R /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S68623/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ff1f6331-4cab-4e5a-8513-ab7268af1b5a/runs/af1e2b33-b4de-4373-923b-75ed567a30d1/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_javafuzzer_QuickTest_java/scratch/0 -NT 1 -NP 4 -A -conf config.yml'
[2022-06-14T17:45:11.502262125Z] Gathering output for process 3930046
[2022-06-14T17:46:44.995065590Z] Waiting for completion for process 3930046
[2022-06-14T17:46:44.995283510Z] Waiting for completion finished for process 3930046
Output and diagnostic info for process 3930046 was saved into 'pid-3930046-output.log'

Summary of the JavaFuzzer run:
------------------------------
Host:     ol8-aarch64-285398
Tests:    4 x 1
Args:     -conf config.yml

Started  at: Tue Jun 14 17:45:11 UTC 2022


r2- 1: 1 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 0 Reference Java failures
r3- 1: 1 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 0 Reference Java failures
r4- 1: 0 passed, 2 crashes, 0 fails, 0 hangs, 0 incorrect tests, 0 Reference Java failures
r1- 1: 0 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 1 Reference Java failures

Finished at: Tue Jun 14 17:46:44 UTC 2022


[2022-06-14T17:46:45.000326319Z] Waiting for completion for process 3930046
[2022-06-14T17:46:45.000414119Z] Waiting for completion finished for process 3930046
----------System.err:(13/728)----------
java.lang.RuntimeException: assertEquals: expected 1 to equal 2
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:189)
	at applications.javafuzzer.JavaFuzzerRunner.main(JavaFuzzerRunner.java:235)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1596)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: assertEquals: expected 1 to equal 2


This assertion failure mode matches the following closed bug:

JDK-8286305 loom: closed applications/javafuzzer/QuickTest.java fails ""assertEquals: expected 1 to equal 2"":

However, that bug is closed as a duplicate of:

JDK-8286182 [BACKOUT] x86: Handle integral division overflow during parsing

which is specific to x86 and this failure sighting is on linux-aarch64.",,,,,,,,,,JDK-8291477,JDK-8295741,JDK-8291191,JDK-8291349,JDK-8293442,JDK-8291476,JDK-8289412,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286305,,,,JDK-8288903,JDK-8288486,,,,,,"2022-06-14 13:51;dlong;FuzzerUtils$1.class;https://bugs.openjdk.org/secure/attachment/99565/FuzzerUtils%241.class","2022-06-14 13:51;dlong;FuzzerUtils.class;https://bugs.openjdk.org/secure/attachment/99567/FuzzerUtils.class","2022-06-14 13:51;dlong;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/99566/FuzzerUtils.java","2022-06-14 14:19;dlong;Test-hang.class;https://bugs.openjdk.org/secure/attachment/99568/Test-hang.class","2022-06-14 14:19;dlong;Test-hang.java;https://bugs.openjdk.org/secure/attachment/99569/Test-hang.java","2022-06-14 13:51;dlong;Test.class;https://bugs.openjdk.org/secure/attachment/99560/Test.class","2022-06-14 13:51;dlong;Test.java;https://bugs.openjdk.org/secure/attachment/99559/Test.java","2022-06-14 13:51;dlong;hs_err_pid3931089.log;https://bugs.openjdk.org/secure/attachment/99564/hs_err_pid3931089.log","2022-06-14 13:51;dlong;hs_err_pid3931121.log;https://bugs.openjdk.org/secure/attachment/99563/hs_err_pid3931121.log","2022-06-14 13:51;dlong;replay_pid3931089.log;https://bugs.openjdk.org/secure/attachment/99562/replay_pid3931089.log","2022-06-14 13:51;dlong;replay_pid3931121.log;https://bugs.openjdk.org/secure/attachment/99561/replay_pid3931121.log",,aarch64,,,,,,,,,linux,,,,,"0|i2xhej:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-06-14 13:49;dlong;#  Internal Error (workspace/open/src/hotspot/cpu/aarch64/assembler_aarch64.hpp:2778), pid=3931121, tid=3931134
#  guarantee(!true || (true && (shift != 0))) failed: impossible encoding

Current CompileTask:
C2:    178   13    b        Test::bMeth (407 bytes)

Stack: [0x0000fffbf5800000,0x0000fffbf5a00000],  sp=0x0000fffbf59fa470,  free space=2025k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x505ca4]  Assembler::ushr(FloatRegisterImpl const*, Assembler::SIMD_Arrangement, FloatRegisterImpl const*, int)+0x154
V  [libjvm.so+0x483010]  vsrl2L_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0xf0
V  [libjvm.so+0x162a980]  PhaseOutput::scratch_emit_size(Node const*)+0x320
V  [libjvm.so+0x1621f24]  PhaseOutput::shorten_branches(unsigned int*)+0x2c4
V  [libjvm.so+0x1633098]  PhaseOutput::Output()+0xbc8
V  [libjvm.so+0xa896fc]  Compile::Code_Gen()+0x3bc
V  [libjvm.so+0xa8dbc4]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x10a0
V  [libjvm.so+0x8c5760]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1bc
V  [libjvm.so+0xa9b934]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x874
V  [libjvm.so+0xa9c584]  CompileBroker::compiler_thread_loop()+0x424
V  [libjvm.so+0x1904a84]  JavaThread::thread_main_inner()+0x254
V  [libjvm.so+0x190f0e8]  Thread::call_run()+0xf8
V  [libjvm.so+0x160a5a4]  thread_native_entry(Thread*)+0x104
C  [libpthread.so.0+0x78f8]  start_thread+0x188

The assert happens because ""shift"" is 0.;;;","2022-06-14 14:19;dlong;There is also a 2nd problem reported in the fuzzer artifacts: a hang.  I have attached this test as ""Test-hang"".;;;","2022-06-14 14:25;dlong;ILW = crash; always with test; no workaround = HMH = P2;;;","2022-06-16 14:41;dlong;It seems we don't optimize out shift-by-zero that can result after post-loop optimizations.  The back-end needs to guard against this.;;;","2022-06-17 16:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/40
Date: 2022-06-17 22:37:28 +0000;;;","2022-06-20 18:28;haosun;Hi [~dlong], in my local AArch64 machine, ""Test-hang"" test can finish, but it indeed lasted for a long time, ~30 min.

May I ask:
1) How did you define a ""hang"" bug? The execution time exceeds the expectation a lot, right?
I noticed that there are nested loops for ""vMeth2"" call, and I suspect the expected execution time might be long.
2) It seems not an AArch64 specific issue. Did you test on other platforms?
I also ran ""Test-hang"" on x86-64 machine, and the execution can finish and it lasted long as well.

Thanks;;;","2022-06-20 23:34;thartmann;The tests were generated by the JavaFuzzer and it's expected to also generate tests that are long/endless running and hit a timeout (i.e. they ""hang""). These can simply be ignored.;;;","2022-06-21 00:40;haosun;I see. Thanks for your explanation. [~thartmann];;;","2022-06-27 20:17;dukebot;Changeset: b4490386
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-06-28 03:12:12 +0000
URL:       https://git.openjdk.org/jdk19/commit/b4490386fe348250e88347526172c1c27ef01eba
;;;","2022-07-11 16:00;epavlova;Both new compiler/codegen/ShiftByZero.java test and Javafuzzer app passed in latest JDK 19b3* CI.;;;","2022-08-22 01:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/640
Date: 2022-08-19 18:41:49 +0000;;;","2022-09-02 11:37;phh;Fix Request (17u)

On behalf of Yi-Fan Tsai <yftsai@amazon.com>.

Critical fix to match Oracle. Clean except for a trivial context difference. Low risk: limits shift counts to positive values.;;;","2022-10-18 09:11;wkemper;Fix Request (11u)

Not a clean backport, but also not complicated (some of the patched instructions do not exist in 11). The test case passes before and after the change. Backporting to 11 brings parity with Oracle 11.;;;","2022-10-18 09:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1462
Date: 2022-10-18 16:05:28 +0000;;;",,,,,,,,,,,,,,,,,,,
Remove the workaround for frame.pack() in ModalDialogTest,JDK-8288444,5077031,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2022-06-14 11:41,2022-07-07 01:15,2023-10-01 09:56,2022-07-01 02:11,19,20,,,,,20,client-libs,,0,sn_120,sn_121,,,,,,,,,,,,,,,,"Based on the fix for frame.pack() in JDK-8265586,  fix the ModalDialogTest test and remove the workaround.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265586,,,,JDK-8289238,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows_10,,,,,"0|i2xheb:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-06-24 15:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9286
Date: 2022-06-24 22:12:35 +0000;;;","2022-07-01 02:12;dukebot;Changeset: f190f4e6
Author:    Harshitha Onkar <honkar@openjdk.org>
Committer: Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2022-07-01 09:07:34 +0000
URL:       https://git.openjdk.org/jdk/commit/f190f4e6389a0105b0701ec7ea201fab9dda0a48
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Footprint regression due MH creation when initializing StringConcatFactory,JDK-8288425,5077005,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,redestad,ecaspole,ecaspole,2022-06-14 07:07,2022-07-27 09:42,2023-10-01 09:56,2022-06-15 12:51,19,,,,,,20,core-libs,,0,footprint,hgupdate-sync,performance,perf-regression,,,,,,,,,,,,,,Seen and triaged on linux x64.,,,,,,,,,,JDK-8289293,JDK-8291194,JDK-8291352,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287522,JDK-8287442,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,b26,,,linux,,,,,"0|i2xh8j:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2022-06-14 08:03;redestad;StringConcatFactory is eagerly initialized, and JDK-828752 I added some unconditional MH creation in a static final (PREPEND_BASE). This should be fixed by doing what we've done in the past and make initialize that field @Stable and initialize it lazily. Fix in progress.;;;","2022-06-14 08:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9154
Date: 2022-06-14 15:16:27 +0000;;;","2022-06-15 12:51;dukebot;Changeset: 6d595614
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2022-06-15 19:48:27 +0000
URL:       https://git.openjdk.org/jdk/commit/6d595614a26ebe579268dc8216344dfb099bb3ad
;;;","2022-06-28 04:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/83
Date: 2022-06-28 11:46:06 +0000;;;","2022-06-28 15:19;dukebot;Changeset: 9048cef7
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2022-06-28 12:27:30 +0000
URL:       https://git.openjdk.org/jdk/commit/9048cef761872812106b3429c51201c765f29fe1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/awt/PopupMenu/PopupMenuLocation.java is unstable in MacOS machines,JDK-8288415,5076989,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mvs,mvs,mvs,2022-06-14 04:12,2023-09-07 12:34,2023-10-01 09:56,2023-01-16 04:21,11,17,19,20,21,,21,client-libs,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,,"java/awt/PopupMenu/PopupMenuLocation.java seems to be unstable in MacOS machines, especially in MacOSX 12 machines. It seems to be a testbug as adding some delay fixes the issue. It intermittently fails in CI causing some noise.

Fix:
Some stability improvements have been done and the test has been run 100 times per platform in mach5 and got full PASS.",,,,,,,,,,JDK-8300986,JDK-8301411,JDK-8301008,JDK-8302501,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315878,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i2xh4z:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-06-16 08:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9187
Date: 2022-06-16 15:01:12 +0000;;;","2022-10-07 06:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10606
Date: 2022-10-07 13:36:17 +0000;;;","2022-10-11 07:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10655
Date: 2022-10-11 14:17:42 +0000;;;","2023-01-16 04:21;dukebot;Changeset: a2f67660
Author:    Manukumar V S <mvs@openjdk.org>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-01-16 12:18:51 +0000
URL:       https://git.openjdk.org/jdk/commit/a2f67660f088559ce49f73da7401801fb826028b
;;;","2023-02-10 00:01;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test passes on linux. SAP nightly testing passed.;;;","2023-02-10 00:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1164
Date: 2023-02-10 08:01:16 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Long::compress/expand samples are not correct,JDK-8288414,5076988,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psandoz,kganapureddy,kganapureddy,2022-06-14 03:36,2022-06-23 00:00,2023-10-01 09:56,2022-06-15 12:26,19,,,,,,19,core-libs,,0,conformance,noreg-doc,,,,,,,,,,,,,,,,"The samples provided in java doc https://download.java.net/java/early_access/jdk19/docs/api/java.base/java/lang/Long.html#compress(long,long)  looks not resulting as it states.

For example :

Consider the simple case of compressing the digits of a hexadecimal value:

// Compressing drink to food
compress(0xCAFEBABE, 0xFF00FFF0) == 0xCABAB

The result is  if(Long.compress(0xCAFEBABE, 0xFF00FFF0) == 0xCABAB){} 
different.

And same for subsequent samples in case of Long 

// Returns 1 if the bit at position n is one
compress(x, 1 << n) == (x >> n & 1)

// Logical shift right
compress(x, -1 << n) == x >>> n
....


But these samples works as stated in case of Integer.





",,,,,,,,,,JDK-8288583,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283892,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b19,,,,,,,,"0|i2xh4r:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-06-14 08:55;psandoz;Need to use explicit long constants;;;","2022-06-14 09:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/14
Date: 2022-06-14 16:28:37 +0000;;;","2022-06-15 12:26;dukebot;Changeset: 395aea30
Author:    Paul Sandoz <psandoz@openjdk.org>
Date:      2022-06-15 19:21:13 +0000
URL:       https://git.openjdk.org/jdk19/commit/395aea307faa96bf78ddc15798ba7d855c2db170
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MacOS debug symbol files not always deterministic in reproducible builds,JDK-8288399,5076973,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aleonard,aleonard,aleonard,2022-06-14 01:06,2022-08-08 03:12,2023-10-01 09:56,2022-06-15 07:04,17,19,20,,,,20,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,reproducible-build,,,,,,,,,,,,,,,"When reproducible builds is enabled for MacOS clang compilation, the
debug symbol information contains the full build directory paths, making the
builds non-deterministic when built in different folders.
eg.
 DW_AT_name        (""/Users/jenkins/workspace/build-scripts/jobs/jdk/jdk-mac-aarch64-temurin/workspace/build/src/src/java.base/unix/native/libnio/ch/DatagramDispatcher.c"")
 DW_AT_comp_dir    (""/Users/jenkins/workspace/build-scripts/jobs/jdk/jdk-mac-aarch64-temurin/workspace/build/src/make"")

When ENABLE_REPRODUCIBLE_BUILD is enabled and 
ALLOW_ABSOLUTE_PATHS_IN_OUTPUT is false the debug symbol paths
should be mapped using --fdebug-prefix-map, just like for gcc.
Assembly file symbol paths should also be relative.

Also the random seeded compiler generated symbol names are not deterministically seeded, 
thus leading to potential non-determinism for these entries:
    DW_AT_linkage_name    (""_ZN16AbstractCompiler19should_perform_initEv"")

",,,,,,,,,,JDK-8292032,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2xh1f:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-06-14 01:10;aleonard;Above built with -fdebug-prefix-map:
DW_AT_name        (""src/java.base/unix/native/libnio/ch/DatagramDispatcher.c"")
DW_AT_comp_dir    (""make"")
;;;","2022-06-15 03:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9166
Date: 2022-06-15 10:10:26 +0000;;;","2022-06-15 07:04;dukebot;Changeset: 6633855c
Author:    Andrew Leonard <aleonard@openjdk.org>
Date:      2022-06-15 14:00:20 +0000
URL:       https://git.openjdk.org/jdk/commit/6633855ca78ff0f5f1213a2a1424436678a30e55
;;;","2022-08-02 08:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/624
Date: 2022-08-02 15:09:02 +0000;;;","2022-08-02 08:26;aleonard;Fix Request 17u
MacOS builds are currently non-deterministic when debug symbols are created due to absolute debug symbol paths and non-deterministic random symbol name generation. This fix enables -fdebug-prefix-map and -frandom-seed to enable fully reproducible builds.

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: Fix register issues in SVE backend match rules,JDK-8288397,5076970,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xgong,xgong,xgong,2022-06-14 00:56,2022-07-27 03:10,2023-10-01 09:56,2022-06-19 18:12,19,20,,,,,19,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-20,sve,vectorapi,,,,,,,,,,,,"There are register issues in the sve backend match rules like ""and_masked"", ""gatherL/scatterL"". 

The predicated vector ""not"" rules didn't use the same register for ""src"" and ""dst"", which is necessary to make sure the inactive lanes in ""dst"" save the same elements as ""src"".  This could make the following results in array ""ir"" incorrect:
```
        VectorMask<Integer> mask = VectorMask.fromArray(I_SPECIES, m, 0);
        IntVector av = IntVector.fromArray(I_SPECIES, ia, 0);
        av.lanewise(VectorOperators.NOT, mask).add(av).intoArray(ir, 0);

```

And the input idx register in ""gatherL/scatterL"" rules was overwritten by the first unpack instruction. The same issue also existed in the partial and predicated gatherL/scatterL rules.  The following case could reproduce this issue that the results in ""ir"" are incorrect:
```
        LongVector  av = LongVector.fromArray(L_SPECIES, la, 0, ia, 0);
        av.intoArray(lr, 0);
        IntVector bv = IntVector.fromArray(I_SPECIES, ia, 0);
        bv.add(0).intoArray(ir, 0);
```





",,,,,,,,,,JDK-8288774,JDK-8291265,JDK-8291097,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271515,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2xh0r:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-14 08:43;chagedorn;Hi [~xgong], can you add some more details about what's wrong and how it manifests (crash, wrong execution etc.)?;;;","2022-06-15 01:09;xgong;Sure, sorry for my late reply! I'v added the details in description. Thanks! ;;;","2022-06-15 02:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/17
Date: 2022-06-15 09:40:52 +0000;;;","2022-06-15 05:05;chagedorn;ILW = Incorrect results when using vector masks, only with vector masks with vector api on SVE, no workaround = HLM = P3;;;","2022-06-15 05:05;chagedorn;Thanks Xiaohong for the update!;;;","2022-06-19 18:12;dukebot;Changeset: ae030bcb
Author:    Xiaohong Gong <xgong@openjdk.org>
Date:      2022-06-20 01:07:45 +0000
URL:       https://git.openjdk.org/jdk19/commit/ae030bcbc53fdfcfb748ae1e47e660f698b3fcb7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Always create reproducible builds,JDK-8288396,5076969,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-06-14 00:45,2022-07-18 10:46,2023-10-01 09:56,2022-06-28 02:04,20,,,,,,20,infrastructure,,0,build-infra,reproducible-build,,,,,,,,,,,,,,,,"When we started introducing some possibly more intrusive compiler flags and functionality for reproducible builds, we also introduced a flag to turn this off  out of an abundance of caution. But we have been been using this configuration for a year or so internally within Oracle, with no issues. So there's really no reason to be able to turn this off. (If you were to ask me, the fact that compilers and build tools ever started to produce non-deterministic output has been a bug from day one.)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290466,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xh0j:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-06-14 02:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9152
Date: 2022-06-14 09:48:25 +0000;;;","2022-06-15 04:02;erikj;The main drawback of always building reproducible builds is that things like debug symbol links in objects have to use relative paths. This can be inconvenient for developers when trying to debug things. In general, I think the developer experience is better without activating reproducible builds. So continuing to support that alternative has some merit.;;;","2022-06-28 02:04;dukebot;Changeset: b4ab5fe1
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-06-28 09:00:45 +0000
URL:       https://git.openjdk.org/jdk/commit/b4ab5fe1daf22a543e1bd973bcd34322360054b4
;;;","2022-07-05 03:27;ihse;[~erikj] I missed your comment before pushing. But in any case, I would not want to keep ""reproducible"" builds as an option, that just sends the wrong signals.

What you say is that it should be possible to have a ""developer's build"" which has absolute paths. Such a build would still be ""reproducible"", but with some additional limitations, namely that the paths must be unchanged for the build to be reproducible.

(Thinking about it, would not --enable-absolute-paths-in-output do exactly this?);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[REDO] DST not applying properly with zone id offset set with TZ env variable,JDK-8288377,5076927,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,tsteele,naoto,naoto,2022-06-13 17:43,2023-07-27 21:31,2023-10-01 09:56,2022-08-04 11:51,18,,,,,,20,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,,,,,,,,,,,"On behalf of Gaurav Chaudhari:

When a match cannot be made directly against a recognized region/timezone from the tzdb.dat, TimeZone.getSystemGMTOffsetID() is invoked to find the GMT based offset to calculate the offset and find the corresponding time.
The native code reached in TimeZone_md.c has a bug for platforms that are not MacOS, where daylight savings is not respected.

To reproduce the issue:
TZ=""MEZ-1MESZ,M3.5.0,M10.5.0"" java -cp . TimeTest
with the following test , TimeTest.java
import java.util.Calendar;
import java.util.TimeZone;
import java.util.Date;
import java.text.SimpleDateFormat;


public class TimeTest {
        public static void main(String args[]) {
                Date time = Calendar.getInstance().getTime();
                SimpleDateFormat sdf = new SimpleDateFormat(""dd.MM.yyyy HH:mm:ss.SSS"");

                System.out.println(""Calendar.getInstance().getTime() = ""+time);
                System.out.println(""SimpleDateFormat                 = ""+sdf.format(time));
        }
}

Reproducible on Linux on Z (s390x) OpenJDK18 (jdk18+38 Temurin)
TZ=""MEZ-1MESZ,M3.5.0,M10.5.0"" ~/jdk-18+36/bin/java -cp . TimeTest
Calendar.getInstance().getTime() = Thu Apr 28 15:55:16 GMT+01:00 2022
SimpleDateFormat                 = 28.04.2022 15:55:16.171

Zone ID can be set according to guidelines below:
https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html",,,,,,,,,,JDK-8294319,JDK-8294318,JDK-8313287,JDK-8294491,JDK-8313285,,,,,,,,,,,,,,,,,,,,,,,JDK-8288369,,,,,,JDK-8297335,,,,JDK-6992725,JDK-8285838,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xgr7:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,Verified,,"2022-06-14 05:37;naoto;Offset should fall within -12 to +14. The previous fix needs to be adjusted to meet the requirement. Here is the quote from the `java.time.ZoneOffset` class:

```
In 2008, time-zone offsets around the world extended from -12:00 to +14:00. To prevent any problems with that range being extended, yet still provide validation, the range of offsets is restricted to -18:00 to 18:00 inclusive.
```;;;","2022-06-28 12:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9312
Date: 2022-06-28 18:52:32 +0000;;;","2022-08-04 11:51;dukebot;Changeset: 3c325641
Author:    Gaurav Chaudhari <deigue@hotmail.com>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2022-08-04 18:49:05 +0000
URL:       https://git.openjdk.org/jdk/commit/3c3256414f7df049cdd6c8519fbcea0d818a1a33
;;;","2022-08-15 13:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1328
Date: 2022-08-15 19:49:14 +0000;;;","2022-09-01 14:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/16
Date: 2022-09-01 20:55:48 +0000;;;","2022-09-08 13:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/662
Date: 2022-09-08 19:58:33 +0000;;;","2022-09-22 03:08;clanger;Fix Request (19u, 17u, 11u) on behalf of Gaurav Chaudhari (GitHub user Deigue)
Requesting this fix to be backported in order to address JDK-8288377, which fixes the incorrect timezone displayed in DST period, when a custom TZ code is used. The risk is minimal as the code change is only a small piece of logic in how the offset between GMT and local time is calculated and returned. (offset fix) In addition, the repeat definition of the function for macOS has been consolidated, while keeping the macOS specific logic when it is needed. Tier 1 testing is passing on macOS and Linux.
Patch applies cleanly in 19 and 17, needed a small modification in 11.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"simplify code in ValueTaglet, remove redundant code",JDK-8288368,5076918,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-06-13 15:44,2022-07-27 19:48,2023-10-01 09:56,2022-07-21 09:29,,,,,,,20,tools,,0,javadoc-value-tag,noreg-cleanup,,,,,,,,,,,,,,,,"ValueTaglet has a TODO to investigate code, and calls a method Utils.elementEquals. 

On investigation, the method is unnecessary and the call can be replaced with `--`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xgp7:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-06-13 17:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9149
Date: 2022-06-13 23:57:45 +0000;;;","2022-07-21 09:29;dukebot;Changeset: 4c1cd66d
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-07-21 16:26:52 +0000
URL:       https://git.openjdk.org/jdk/commit/4c1cd66d225d621f777b6fff53692cf9bf915b4a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CI: ciInstanceKlass::implementor() is not consistent for well-known classes,JDK-8288360,5076910,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,vlivanov,vlivanov,vlivanov,2022-06-13 14:15,2022-07-21 04:49,2023-10-01 09:56,2022-06-14 15:42,11,17,19,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-hard,oracle-triage-20,,,,,,,,,,,,"ciInstanceKlass::implementor() doesn't cache the result for well-known interfaces (is_shared() == true). Due to concurrent class loading, compilers can observe a change in reported unique implementor thus introducing paradoxical situations during a compilation. 

It can manifest as an assertion failure:

# Internal Error (.../src/hotspot/share/code/dependencies.hpp:338), pid=15467, tid=15505
# assert(ctxk->implementor() == uniqk) failed: not a unique implementor",,,,,,,,,,JDK-8290808,JDK-8288806,JDK-8288803,JDK-8288580,JDK-8289638,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288146,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xgnf:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-13 14:22;dlong;[~vlivanov], does this affect 19?  What is the likelihood of this crash happening?;;;","2022-06-13 14:34;vlivanov;[~dlong] it does affect 19, but my understanding is it's almost impossible to trigger the assert/crash since there's only a single well-known interface which gets multiple implementors very early during startup.;;;","2022-06-13 14:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9147
Date: 2022-06-13 21:18:31 +0000;;;","2022-06-13 16:13;dlong;ILW = crash; rare to impossible during startup; no workaround = HLH = P2;;;","2022-06-14 10:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/15
Date: 2022-06-14 17:38:25 +0000;;;","2022-06-14 15:42;dukebot;Changeset: 50f99c32
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-06-14 22:37:00 +0000
URL:       https://git.openjdk.org/jdk19/commit/50f99c3208fc9f479cc109fb6e73d262e27026a2
;;;","2022-06-28 13:04;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Typical C2 risk, unlikely problem, but lets fix it.
Clean backport.
SAP nightly testing passed.;;;","2022-06-28 13:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/516
Date: 2022-06-28 20:04:43 +0000;;;","2022-07-18 05:24;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
Typical C2 risk, unlikely problem, but lets fix it.
Clean backport.  SAP nightly testing passed.;;;","2022-07-18 06:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1238
Date: 2022-07-18 13:23:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
Tier1 validate-source fails after 8279614,JDK-8288332,5076882,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,dcubed,dcubed,dcubed,2022-06-13 13:32,2023-02-17 02:24,2023-10-01 09:56,2022-06-13 13:52,20,,,,,,20,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,tier1,,,,,,,,,,,,,"[2022-06-13T20:19:06,714Z] BAD COPYRIGHT: /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S67075/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/951c5943-18ae-4c65-aec8-6a8c3e2389d3/runs/66c81ee4-96b6-4982-b25d-2f06565c19bf/workspace/open/test/jdk/javax/swing/border/EtchedBorder/ScaledEtchedBorderTest.java",,,,,,,,,,JDK-8296606,JDK-8302728,JDK-8302717,JDK-8296605,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288333,,,,,,,,,,JDK-8279614,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xgh7:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,Verified,,"2022-06-13 13:34;dcubed;$ do_java_bld -c validate-headers inc
INFO: pwd=/work/shared/bug_hunt/XXXXXXX_for_jdk20.git
INFO: pwd and pwd -P do not match; pwd might contain symbolic links.
INFO: reset pwd=/System/Volumes/Data/work/shared/bug_hunt/XXXXXXX_for_jdk20.git
INFO: GNUMAKE=/usr/bin/make
INFO: GNUMAKE version is: GNU Make 3.81
INFO: DEVKIT=
INFO: BOOT_JDK=
Build Type: incremental
Build prelim time: 0.00 minutes.
Build Config: validate-headers
    Building objects
Building target 'validate-headers' in configuration 'validate-source'
Finished building target 'validate-headers' in configuration 'validate-source'
    Done building
    Build validate-headers time: 0.83 minutes.
Total build time: 0.83 minutes.
;;;","2022-06-13 13:35;dcubed;Here's the proposed fix:

$ git diff
diff --git a/test/jdk/javax/swing/border/EtchedBorder/ScaledEtchedBorderTest.java b/test/jdk/javax/swing/border/EtchedBorder/ScaledEtchedBorderTest.java
index e1eb17414c6..4db602f0e4d 100644
--- a/test/jdk/javax/swing/border/EtchedBorder/ScaledEtchedBorderTest.java
+++ b/test/jdk/javax/swing/border/EtchedBorder/ScaledEtchedBorderTest.java
@@ -2,6 +2,10 @@
  * Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
  * This code is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License;;;","2022-06-13 13:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9146
Date: 2022-06-13 20:36:15 +0000;;;","2022-06-13 13:52;dukebot;Changeset: e90b579b
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-06-13 20:47:34 +0000
URL:       https://git.openjdk.org/jdk/commit/e90b579b294eb88f6b4e236d19b05063775ee8d7
;;;","2023-01-25 15:13;landrews;Verified that incenses in the file ;;;","2023-02-16 03:32;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.19-oracle,17.0.7-oracle.
No risk, only a comment change.
Clean backport. SAP nightly testing passed.
;;;","2023-02-16 03:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1175
Date: 2023-02-16 11:30:22 +0000;;;","2023-02-16 03:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1745
Date: 2023-02-16 11:32:44 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[windows] Actual and Preferred Size of AWT Non-resizable frame are different,JDK-8288325,5076875,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2022-06-13 11:16,2023-09-27 01:11,2023-10-01 09:56,2022-09-23 09:26,19,20,,,,,20,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sn_120,sn_121,sn_123,sn_124,sn_125,sn_126,sn_127,,,,,,,When frame.pack() is used ideally the frame.getSize() should be equal to the preferred size. But these return different values for AWT non-resizable frame on Windows.,,,,,,,,,,JDK-8317026,JDK-8313851,JDK-8316722,JDK-8314816,JDK-8313783,JDK-8316347,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265586,,,,JDK-8293968,,,,,,,"2022-09-19 12:56;honkar;AWTFrame_v2.pdf;https://bugs.openjdk.org/secure/attachment/100801/AWTFrame_v2.pdf","2022-08-24 16:07;honkar;AwtFrame_DebugLog.docx;https://bugs.openjdk.org/secure/attachment/100537/AwtFrame_DebugLog.docx",,,,,,,,,,,,,,,,,,,,windows_10,,,,,"0|i2xgfn:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-06-13 11:49;honkar;Debug logs of  AwtWindow::UpdateInsets()

Non-Resizable UI Scale=1

Outside Rect 0 56 0 198
Inside Rect 0 0 0 176
MenuBar Added
BEFORE Scale Down 73 9 9 9
AFTER Scale Down 73 9 9 9

Expected frame size: java.awt.Dimension[width=241,height=119]
Actual frame size: java.awt.Dimension[width=237,height=115]
Panel size: java.awt.Dimension[width=215,height=29]
Frame Insets: java.awt.Insets[top=75,left=11,bottom=11,right=11]

------------------------------------------------
Non-Resizable

Outside Rect 0 56 0 198
Inside Rect 0 0 0 176
MenuBar Added
BEFORE Scale Down 73 9 9 9
AFTER Scale Down 49 6 6 6

Expected frame size: java.awt.Dimension[width=231,height=90]
Actual frame size: java.awt.Dimension[width=229,height=88]
Panel size: java.awt.Dimension[width=215,height=31]
Frame Insets: java.awt.Insets[top=50,left=7,bottom=7,right=7]
--------------------------------------------------------
Resizable UI Scale=1

Outside Rect 0 56 0 198
Inside Rect 0 0 0 176
MenuBar Added
BEFORE Scale Down 75 11 11 11
AFTER Scale Down 75 11 11 11

Expected frame size: java.awt.Dimension[width=241,height=119]
Actual frame size: java.awt.Dimension[width=241,height=119]
Panel size: java.awt.Dimension[width=219,height=33]
Frame Insets: java.awt.Insets[top=75,left=11,bottom=11,right=11]

-----------------------------------------------
Resizable

Outside Rect 0 56 0 198
Inside Rect 0 0 0 176
MenuBar Added
BEFORE Scale Down 75 11 11 11
AFTER Scale Down 50 7 7 7

Expected frame size: java.awt.Dimension[width=231,height=90]
Actual frame size: java.awt.Dimension[width=231,height=90]
Panel size: java.awt.Dimension[width=217,height=33]
Frame Insets: java.awt.Insets[top=50,left=7,bottom=7,right=7]

;;;","2022-06-13 12:14;honkar;The insets returned by :GetSystemMetric property for non-resizable frame can be changed from SM_CXDLGFRAME  to SM_CXFIXEDFRAME since they are equivalent and the latter sounds more cleaner and logical. https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsystemmetrics;;;","2022-08-12 17:25;honkar;Wrong insets are being returned for non-resizable frames due to caching of insets at different levels of WindowPeer.;;;","2022-08-19 14:10;honkar;When frame.pack() is called on Non-Resizable frame the correct insets are being returned. But subsequent calls such as frame.getInsets() and frame.getPreferredSize() was seen to return the insets of Resizable Frame instead of Non-Resizable Frame insets. ;;;","2022-08-19 16:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9954
Date: 2022-08-19 23:47:49 +0000;;;","2022-08-24 16:09;honkar;Debug log (without the fix) added for Resizable vs Non-Resizable Frame.;;;","2022-09-01 17:06;honkar;In awt_Window::WmSize(), any new insets obtained after calling UpdateInsets is not being added to the final size of the frame.;;;","2022-09-16 15:35;honkar;Added debug statements to check the insets obtained through inside & outside rects calculation and the default native insets in both cases - Resizable and Non-Resizable.

For a single line menu (non-wrapped menu bar) the insets obtained by inside & outside rects (client & non-client rects) eventually matches to the default native insets for Resizable frame but this is not the case for Non-Resizable frame. 
The m_insets calculated from this block https://github.com/openjdk/jdk/blob/01e7b8819918906082e315870e667b15910cee99/src/java.desktop/windows/native/libawt/windows/awt_Window.cpp#L1402 overrides the default native insets obtained initially for Non-Resizable frame. The next time frame.getInsets/ preferredSize is called for Non-Resizable frame the overridden insets are returned which is different from the insets that was used to size (actual size) the Non-Resizable frame.    

To summarize, the default native insets and the insets obtained from client & non-client rects are different for Non-Resizable frame. 
 

Non-Resizable Frame 
 
>>>>> INSIDE Update Insets C++ 
ClientRect: 1 , WindowRct: 1 
1 
 Insets: 75, -19, 11, 11 
3 
4 
6 Non-resizable C++ 
SM_CXFIXEDFRAME 3
9 Frame Instance C++ 
10 MenuBar insets
12 Peer Insets set
Old Insets: 45, 11, 11, 11 
New Insets: 73, 9, 9, 9 
Scale Down Old Insets: 30, 7, 7, 7 
Scale Down New Insets: 49, 6, 6, 6 
14 
Insets changed ???  1 
Final Insets: 49, 6, 6, 6 
OUTSIDE Update Insets C++ >>>>>>>

-----------------------------------------------------------------------------
Resizable Frame 

>>>>> INSIDE Update Insets C++ 
ClientRect: 1 , WindowRct: 1 
1 
 Insets: 75, -19, 11, 11 
3 
4 
5 Resizable C++ 
SM_CXSIZEFRAME 5
9 Frame Instance C++ 
10 MenuBar insets
12 Peer Insets set
Old Insets: 45, 11, 11, 11 
New Insets: 75, 11, 11, 11 
Scale Down Old Insets: 30, 7, 7, 7 
Scale Down New Insets: 50, 7, 7, 7 
14 
Insets changed ???  1 
Final Insets: 50, 7, 7, 7 
OUTSIDE Update Insets C++ >>>>>>>;;;","2022-09-19 09:54;honkar;Added debug log (AWTFrame_v2.pdf) to attachment to check the difference between insets returned from client & non-client rects calculation and the insets obtained from system metrics (for Windows OS).;;;","2022-09-23 09:26;dukebot;Changeset: eca9749d
Author:    Harshitha Onkar <honkar@openjdk.org>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-09-23 16:24:52 +0000
URL:       https://git.openjdk.org/jdk/commit/eca9749da01d732033c07f2bbb38800a9d80f18d
;;;","2023-09-20 01:21;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
Acceptable risk limited to awt on Win.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2023-09-20 01:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1754
Date: 2023-09-20 08:22:50 +0000;;;","2023-09-22 00:32;goetz;Fix request [11u]

I backport this for parity with 11.0.22-oracle.
No risk, only a test change.
Clean backport, but the test needed adaption to Java 11.
Test passes. SAP nightly testing passed.;;;","2023-09-22 00:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2139
Date: 2023-09-22 07:30:26 +0000;;;",,,,,,,,,,,,,,,,,,,
Loom: Uninitialized JvmtiEnvs in VM_Virtual* ops,JDK-8288324,5076874,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-06-13 11:06,2022-06-23 00:00,2023-10-01 09:56,2022-06-15 00:51,19,,,,,,19,hotspot,,0,loom,sonarcloud-found,,,,,,,,,,,,,,,,"SonarCloud reports a few uninitialized fields in new VM_Virtual* ops. Those fields are used, and therefore this is a serious bug.",,,,,,,,,,JDK-8288581,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xgff:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-06-13 11:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/10
Date: 2022-06-13 18:14:56 +0000;;;","2022-06-15 00:51;dukebot;Changeset: 31bc6899
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-06-15 07:49:20 +0000
URL:       https://git.openjdk.org/jdk19/commit/31bc689977c536d7e6b28020eac1b472b60f7e06
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Rename the ""testTagInheritence"" directory",JDK-8288309,5076856,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-06-13 07:53,2022-07-18 12:31,2023-10-01 09:56,2022-07-11 08:33,20,,,,,,20,tools,,0,noreg-trivial,,,,,,,,,,,,,,,,,Looks like a leftover from JDK-8280713.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xgbf:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-07-07 14:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9418
Date: 2022-07-07 21:06:05 +0000;;;","2022-07-11 08:33;dukebot;Changeset: 59980ac8
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-07-11 15:31:22 +0000
URL:       https://git.openjdk.org/jdk/commit/59980ac8e49c0e46120520cf0007c6fed514251d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C1: Miscompilation due to broken Class.getModifiers intrinsic,JDK-8288303,5076845,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-06-13 04:45,2022-06-24 02:36,2023-10-01 09:56,2022-06-14 07:40,17,18,19,,,,19,hotspot,,0,c1,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-20,redhat-interest,regression,,,,,,,,,,"Currently, at least one test is timing out:

$ CONF=linux-x86-server-fastdebug make images run-test TEST=jdk/jfr/jvm/TestGetEventWriter.java

It times out only with C1 -Xcomp. It looks as if this loop is reduced to infinite one:

```
package jdk.jfr.internal;

...

public final class Utils {
    ...

    public static void verifyMirror(Class<?> mirror, Class<?> real) {
        Class<?> cMirror = Objects.requireNonNull(mirror);
        Class<?> cReal = Objects.requireNonNull(real);

        Map<String, Field> mirrorFields = new HashMap<>();
        while (cMirror != null) {
            for (Field f : cMirror.getDeclaredFields()) {
                if (isSupportedType(f.getType())) {
                    mirrorFields.put(f.getName(), f);
                }
            }
            cMirror = cMirror.getSuperclass();
        }
        ...
     }
  }
```

Unfortunately, that test is inconvenient to use as the bisection test, because it was only recently added. Luckily, other JFR tests fail as well with the same symptoms:

CONF=linux-x86-server-fastdebug make images run-test TEST=jdk/jfr/api/recording/misc/TestGetStream.java TEST_VM_OPTS=""-Xcomp -XX:TieredStopAtLevel=1"" JTREG=""TIMEOUT_FACTOR=1""

That allows to bisect the hangup to JDK-8265711, which also makes some sense, as the code above calls `isSupportedType` -> `Class.getModifiers`.

While this reliably reproduces on x86_32, I believe the bug is actually generic.",,,,,,,,,,JDK-8288578,JDK-8289065,JDK-8288804,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265711,JDK-8289044,,,JDK-8288317,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xg8z:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-13 06:12;shade;I actually have a fix. C1 regalloc seems to be confused about branches in that LIR intrinsic code, and going branchless fixes the hang. Testing...;;;","2022-06-13 07:31;thartmann;Good catch, I even mentioned that in the PR:
https://github.com/openjdk/jdk/pull/3616#discussion_r621203923;;;","2022-06-13 07:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/8
Date: 2022-06-13 13:21:17 +0000;;;","2022-06-13 14:08;dlong;ILW = infinite loop; JFR test only; disable intrinsic = MMM = P3;;;","2022-06-14 07:40;dukebot;Changeset: 8cd87e73
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-06-14 14:34:45 +0000
URL:       https://git.openjdk.org/jdk19/commit/8cd87e731bcaff2d7838995c68056742d577ad3b
;;;","2022-06-21 01:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/166
Date: 2022-06-21 07:56:18 +0000;;;","2022-06-22 10:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/500
Date: 2022-06-22 17:49:02 +0000;;;","2022-06-22 11:17;shade;Fix Request (17u)

Fixes the C1 regression, resulting in miscompilation in corner cases. Patch applies cleanly, reproducers now pass, tier1 passes.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
 Shenandoah: SIGSEGV in vm maybe related to jit compiling xerces ,JDK-8288302,5076834,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,webbuggrp,webbuggrp,2022-06-13 00:24,2023-01-24 13:19,2023-10-01 09:56,2022-10-21 00:41,11,17.0.3,17.0.4.1.1-oracle,20,,,20,hotspot,,0,c2,gc-shenandoah,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-20,regression,webbug,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Java in docker:
image: eclipse-temurin:17.0.378-jdk-focal 

A DESCRIPTION OF THE PROBLEM :
We currently getting irregularily vm crashes in our junit test infrastruktur.
We are using the docker eclipse-temurin:17.0.378-jdk-focal base image and exceuting our test with gradle 7.3.
We are using shenandoah gc because we are quite memory constrainted in our containers and their hosts.
We ran the test on the adoptopenjdk:11-hotspot-focal containers before with the same gc settings and they were fine.

Reading the replay.log it seems like it is related to jit compiling xerces code. But understanding the replaylog is not my expertise.
Because the crashes cannot be reproduced reliably, it is currently not possible to provide a simple code-example that leads to the crash.

Also see log files attached on github issue:
https://github.com/adoptium/adoptium-support/issues/505

REGRESSION : Last worked in version 11.0.15


FREQUENCY : occasionally


",,,,,,,,,,JDK-8297133,JDK-8296032,JDK-8294749,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xg6j:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-13 04:18;thartmann;Stack trace looks like it's a Shenandoah specific issue:

Stack: [0x00007fd6990a1000,0x00007fd6991a2000],  sp=0x00007fd69919cf50,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xc056ab]  Node::unique_ctrl_out() const+0xb
V  [libjvm.so+0xbeb071]  ProjNode::is_uncommon_trap_proj(Deoptimization::DeoptReason)+0x21
V  [libjvm.so+0x821101]  IfNode::dominated_by(Node*, PhaseIterGVN*)+0x81
V  [libjvm.so+0xc8d412]  PhaseIterGVN::transform_old(Node*)+0xe2
V  [libjvm.so+0xc89e66]  PhaseIterGVN::optimize()+0x176
V  [libjvm.so+0x5e21f6]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x246
V  [libjvm.so+0x5da99d]  Compile::optimize_loops(PhaseIterGVN&, LoopOptsMode)+0xfd
V  [libjvm.so+0xe0c715]  ShenandoahBarrierC2Support::expand(Compile*, PhaseIterGVN&)+0xb5
V  [libjvm.so+0xd3fa1f]  ShenandoahBarrierSetC2::expand_barriers(Compile*, PhaseIterGVN&) const+0xf
V  [libjvm.so+0x5dff83]  Compile::Optimize()+0x8e3
V  [libjvm.so+0x5e18dd]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0xe0d
V  [libjvm.so+0x51334a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xba
V  [libjvm.so+0x5eb94c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xedc
V  [libjvm.so+0x5ec668]  CompileBroker::compiler_thread_loop()+0x4c8
V  [libjvm.so+0xf02e80]  JavaThread::thread_main_inner()+0x180
V  [libjvm.so+0xf062e2]  Thread::call_run()+0xe2
V  [libjvm.so+0xc40b81]  thread_native_entry(Thread*)+0xe1;;;","2022-06-13 14:15;dlong;ILW = crash; intermittent; no workaround = HLH = P2;;;","2022-09-29 07:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10491
Date: 2022-09-29 14:31:16 +0000;;;","2022-10-21 00:41;thartmann;Changeset: bf39b184
Author: Roland Westrelin <roland@openjdk.org>
Date: 2022-10-04 08:08:38 +0000
URL: https://git.openjdk.org/jdk/commit/bf39b184ca8aabcc51dc6ea4eee046c69b278710;;;","2022-10-21 00:42;thartmann;Fix was pushed while main bug was targeted to 17-pool. Reset the main bug to fixed in 20 and copied the Robo Duke entry here.;;;","2022-10-25 08:34;roland;jdk17u backport:

That bug was reported by users on 17u. The risk is low as it's a single line change that prevent a c2 transformation to run in a corner case that's not supported.;;;","2022-10-25 08:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/357
Date: 2022-10-25 15:27:02 +0000;;;","2022-10-25 09:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/837
Date: 2022-10-25 16:11:08 +0000;;;","2022-11-14 08:59;roland;jdk11u backport:

Same as for the 17 backport: that bug was reported by users on 17u. The risk is low as it's a single line change that prevent a c2 transformation to run in a corner case that's not supported.;;;","2022-11-14 09:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1520
Date: 2022-11-14 16:56:35 +0000;;;","2022-11-23 08:38;roland;I removed 8u-shenandoah as affected: the transformation affected by that bug is not in 8u.;;;",,,,,,,,,,,,,,,,,,,,,,
"Preview APIs in jdk.jdi, jdk.management, and jdk.jfr should be reflective preview APIs",JDK-8288289,5076819,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alanb,alanb,alanb,2022-06-12 01:02,2022-06-23 00:00,2023-10-01 09:56,2022-06-15 01:25,,,,,,,19,core-svc,,0,loom,noreg-doc,,,,,,,,,,,,,,,,"A number of the preview APIs added by JEP 425 exist to expose and support the virtual threads preview feature:


com.sun.jdi.ThreadReference.isVirtual
com.sun.jdi.request.ThreadStartRequest.addPlatformThreadFilter
com.sun.jdi.request.ThreadDeathRequest.addPlatformThreadFilter
com.sun.management.HotSpotDiagnosticMXBean.dumpThreads
com.sun.management.HotSpotDiagnosticMXBean.ThreadDumpFormat
com.jfr.consumer.RecordedThread.isVirtual

These APIs should be reflective preview APIs (see JEP 12).",,,,,,,,,,JDK-8288582,,,,,,,,,,,,,,,,,,,,,JDK-8288422,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xg37:",9223372036854775807,b28,,,,,,,,,,,"2022-06-14 13:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/13
Date: 2022-06-14 12:47:06 +0000;;;","2022-06-15 01:25;dukebot;Changeset: f3b1f60a
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-06-15 08:20:51 +0000
URL:       https://git.openjdk.org/jdk19/commit/f3b1f60a29d0d48346988239f15437780642f562
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Zero-release build is broken after JDK-8279047 due to UseHeavyMonitors is read-only,JDK-8288282,5076808,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-06-11 08:03,2022-06-22 23:51,2023-10-01 09:56,2022-06-13 07:40,20,,,,,,20,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,"```
Updating support/src.zip
In file included from /root/df/jdk/src/hotspot/cpu/zero/vm_version_zero.hpp:30,
                 from /root/df/jdk/src/hotspot/share/runtime/vm_version.hpp:30,
                 from /root/df/jdk/src/hotspot/share/runtime/orderAccess.hpp:29,
                 from /root/df/jdk/src/hotspot/share/runtime/atomic.hpp:37,
                 from /root/df/jdk/src/hotspot/share/utilities/bitMap.hpp:29,
                 from /root/df/jdk/src/hotspot/share/memory/iterator.hpp:31,
                 from /root/df/jdk/src/hotspot/share/oops/oop.hpp:28,
                 from /root/df/jdk/src/hotspot/share/runtime/handles.hpp:29,
                 from /root/df/jdk/src/hotspot/share/code/oopRecorder.hpp:28,
                 from /root/df/jdk/src/hotspot/share/asm/codeBuffer.hpp:28,
                 from /root/df/jdk/src/hotspot/share/asm/assembler.hpp:28,
                 from /root/df/jdk/src/hotspot/share/asm/assembler.inline.hpp:28,
                 from /root/df/jdk/src/hotspot/cpu/zero/vm_version_zero.cpp:27:
/root/df/jdk/src/hotspot/cpu/zero/vm_version_zero.cpp: In static member function 'static void VM_Version::initialize()':
/root/df/jdk/src/hotspot/share/runtime/globals_extension.hpp:75:47: error: assignment of read-only location 'UseHeavyMonitors'
   75 | #define FLAG_SET_DEFAULT(name, value) ((name) = (value))
      |                                        ~~~~~~~^~~~~~~~~
/root/df/jdk/src/hotspot/cpu/zero/vm_version_zero.cpp:50:5: note: in expansion of macro 'FLAG_SET_DEFAULT'
   50 |     FLAG_SET_DEFAULT(UseHeavyMonitors, true);
      |     ^~~~~~~~~~~~~~~~
gmake[3]: *** [/root/df/jdk/build/linux-x86_64-zero-release/hotspot/variant-zero/libjvm/objs/vm_version_zero.o] Error 1
gmake[3]: *** Waiting for unfinished jobs....
gmake[2]: *** [hotspot-zero-libs] Error 1
gmake[2]: *** Waiting for unfinished jobs....

ERROR: Build failed for target 'images' in configuration 'linux-x86_64-zero-release' (exit code 2)
Stopping sjavac server
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279047,,,,JDK-8273486,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xg0r:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-11 08:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9138
Date: 2022-06-11 15:08:38 +0000;;;","2022-06-13 07:40;dukebot;Changeset: 4aede33f
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-06-13 14:36:57 +0000
URL:       https://git.openjdk.org/jdk/commit/4aede33fbf940290bb86ac1af1e833ce4d709100
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"compiler/vectorapi/VectorFPtoIntCastTest.java failed with ""IRViolationException: There were one or multiple IR rule failures.""",JDK-8288281,5076805,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sviswanathan,dcubed,dcubed,2022-06-11 06:41,2022-06-23 00:01,2023-10-01 09:56,2022-06-16 15:10,20,,,,,,20,hotspot,,0,intermittent,noreg-self,oracle-triage-20,tier2,tier3,vectorapi,,,,,,,,,,,,"The following test failed in the JDK20 CI:

compiler/vectorapi/VectorFPtoIntCastTest.java

Used JTreg javaoptions: -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation

Here's a snippet from the log file:

One or more @IR rules failed:

Failed IR Rules (8) of Methods (8)
----------------------------------
1) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.double2byte()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIf={}, failOn={}, applyIfAnd={}, applyIfOr={}, counts={""D2X"", "">= 1""}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: D2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

2) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.double2int()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIf={}, failOn={}, applyIfAnd={}, applyIfOr={}, counts={""D2X"", "">= 1""}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: D2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

3) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.double2long()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIf={}, failOn={}, applyIfAnd={}, applyIfOr={}, counts={""D2X"", "">= 1""}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: D2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

4) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.double2short()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIf={}, failOn={}, applyIfAnd={}, applyIfOr={}, counts={""D2X"", "">= 1""}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: D2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

5) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.float2byte()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIf={}, failOn={}, applyIfAnd={}, applyIfOr={}, counts={""F2X"", "">= 1""}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: F2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

6) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.float2int()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIf={}, failOn={}, applyIfAnd={}, applyIfOr={}, counts={""F2X"", "">= 1""}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: F2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

7) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.float2long()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIf={}, failOn={}, applyIfAnd={}, applyIfOr={}, counts={""F2X"", "">= 1""}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: F2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

8) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.float2short()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIf={}, failOn={}, applyIfAnd={}, applyIfOr={}, counts={""F2X"", "">= 1""}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: F2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

>>> Check stdout for compilation output of the failed methods


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.throwIfNoSafepointWhilePrinting(IRMatcher.java:91)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.reportFailures(IRMatcher.java:82)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.applyIRRules(IRMatcher.java:54)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.<init>(IRMatcher.java:43)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:729)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:698)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:329)
	at compiler.lib.ir_framework.TestFramework.runWithFlags(TestFramework.java:237)
	at compiler.vectorapi.VectorFPtoIntCastTest.main(VectorFPtoIntCastTest.java:64)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1596)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
----------rerun:(45/6579)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288669,JDK-8287835,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,windows,,,,"0|i2xg03:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-12 23:02;chagedorn;Test was added by JDK-8287835. [~sviswanathan], can you have a look?;;;","2022-06-12 23:05;chagedorn;ILW = Intermittent IR test failure, single test, no workaround = MLH = P4;;;","2022-06-13 02:22;chagedorn;Could only be seen on Windows so far.;;;","2022-06-13 15:35;sviswanathan;Could you please also add the processor info on which you see the test failure?;;;","2022-06-13 16:13;dcubed;For the three sightings so far:

jdk-20+2-23-tier3
jdk-20+2-28-tier3
jdk-20+2-33-tier3

the three Mach5 test machines have been recycled (for some reason that
I don't know) and exact info for those machines is no longer available.

[~chagedorn] or [~ctornqvi]- Is there someway to get processor info for
test machines that have been recycled in OCI/Mach5?;;;","2022-06-13 16:23;kvn;It could be related to Windows2016 instances issue with IR framework testing: JDK-8286979.
Which ended up nothing to do with tests but infrastructure issue.
;;;","2022-06-14 13:46;dcubed;Here's a log file snippet for the jdk-20+2-48-tier2 sighting on linux-x64:

compiler/vectorapi/VectorFPtoIntCastTest.java 

One or more @IR rules failed:

Failed IR Rules (8) of Methods (8)
----------------------------------
1) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.double2byte()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""D2X"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: D2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

2) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.double2int()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""D2X"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: D2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

3) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.double2long()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""D2X"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: D2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

4) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.double2short()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""D2X"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: D2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

5) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.float2byte()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""F2X"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: F2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

6) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.float2int()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""F2X"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: F2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

7) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.float2long()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""F2X"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: F2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

8) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.float2short()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""F2X"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: F2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

>>> Check stdout for compilation output of the failed methods


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.throwIfNoSafepointWhilePrinting(IRMatcher.java:91)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.reportFailures(IRMatcher.java:82)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.applyIRRules(IRMatcher.java:54)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.<init>(IRMatcher.java:43)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:729)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:698)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:329)
	at compiler.lib.ir_framework.TestFramework.runWithFlags(TestFramework.java:237)
	at compiler.vectorapi.VectorFPtoIntCastTest.main(VectorFPtoIntCastTest.java:64)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1596)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
----------rerun:(40/8241)*----------

The test task's JVM args are:
-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation

This test machine has these attributes:

cpu_name: Intel_R__Xeon_R__Platinum_8358_CPU___2.60GHz

cpu_features:	fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant tsc arch perfmon rep good nopl xtopology cpuid tsc known freq pni pclmulqdq vmx ssse3 fma cx16 pdcm pcid sse4 1 sse4 2 x2apic movbe popcnt tsc deadline timer aes xsave avx f16c rdrand hypervisor lahf lm abm 3dnowprefetch cpuid fault invpcid single ssbd ibrs ibpb stibp ibrs enhanced tpr shadow vnmi flexpriority ept vpid ept ad fsgsbase tsc adjust bmi1 avx2 smep bmi2 erms invpcid avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves nt good wbnoinvd arat avx512vbmi umip pku ospke avx512 vbmi2 gfni vaes vpclmulqdq avx512 vnni avx512 bitalg avx512 vpopcntdq la57 rdpid md clear arch capabilities;;;","2022-06-14 14:48;kvn;This could be different failure introduced with new changes: JDK-8287525.
Which was pushed yesterday. Needs investigation.;;;","2022-06-15 06:22;dcubed;Here's log file snippets from the jdk-20+2-54-tier2 sighting: 

compiler/vectorapi/VectorFPtoIntCastTest.java

One or more @IR rules failed:

Failed IR Rules (8) of Methods (8)
----------------------------------
1) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.double2byte()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""D2X"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: D2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

2) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.double2int()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""D2X"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: D2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

3) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.double2long()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""D2X"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: D2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

4) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.double2short()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""D2X"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: D2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

5) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.float2byte()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""F2X"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: F2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

6) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.float2int()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""F2X"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: F2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

7) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.float2long()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""F2X"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: F2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

8) Method ""public void compiler.vectorapi.VectorFPtoIntCastTest.float2short()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""F2X"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: F2X
         - Failed comparison: [found] 0 >= 1 [given]
         - No nodes matched!

>>> Check stdout for compilation output of the failed methods


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.throwIfNoSafepointWhilePrinting(IRMatcher.java:91)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.reportFailures(IRMatcher.java:82)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.applyIRRules(IRMatcher.java:54)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.<init>(IRMatcher.java:43)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:729)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:698)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:329)
	at compiler.lib.ir_framework.TestFramework.runWithFlags(TestFramework.java:237)
	at compiler.vectorapi.VectorFPtoIntCastTest.main(VectorFPtoIntCastTest.java:64)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1596)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
----------rerun:(40/8241)*----------


The test task's JVM args are:
-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation

This test machine has these attributes:

cpu_name:	Intel_R__Xeon_R__Platinum_8358_CPU___2.60GHz
cpu_features:	fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant tsc arch perfmon rep good nopl xtopology cpuid tsc known freq pni pclmulqdq vmx ssse3 fma cx16 pdcm pcid sse4 1 sse4 2 x2apic movbe popcnt tsc deadline timer aes xsave avx f16c rdrand hypervisor lahf lm abm 3dnowprefetch cpuid fault invpcid single ssbd ibrs ibpb stibp ibrs enhanced tpr shadow vnmi flexpriority ept vpid ept ad fsgsbase tsc adjust bmi1 avx2 smep bmi2 erms invpcid avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves nt good wbnoinvd arat avx512vbmi umip pku ospke avx512 vbmi2 gfni vaes vpclmulqdq avx512 vnni avx512 bitalg avx512 vpopcntdq la57 rdpid md clear arch capabilities;;;","2022-06-15 19:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9177
Date: 2022-06-16 02:34:33 +0000;;;","2022-06-16 15:10;dukebot;Changeset: 9d4b25e7
Author:    Sandhya Viswanathan <sviswanathan@openjdk.org>
Date:      2022-06-16 22:07:13 +0000
URL:       https://git.openjdk.org/jdk/commit/9d4b25e7888098a866ff980e37b8d16d456906d8
;;;","2022-06-17 05:55;dcubed;This fix is integrated in jdk-20+3-72.;;;",,,,,,,,,,,,,,,,,,,,,
Tier1 build failures after JDK-8287178,JDK-8288270,5076792,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,hchao,dcubed,dcubed,2022-06-10 15:38,2023-01-23 10:35,2023-10-01 09:56,2022-06-10 16:59,20,,,,,,20,security-libs,,0,regression,tier,,,,,,,,,,,,,,,,"[2022-06-10T22:33:55,031Z] Compiling 3125 files for java.base
[2022-06-10T22:33:58,533Z] /System/Volumes/Data/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S82566/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5c7ab1a1-5e25-429b-ad65-d5bcfa060d8f/runs/696c6fd6-1a00-48ef-90f1-256f34750ee5/workspace/open/src/java.base/share/classes/sun/security/util/math/IntegerModuloP.java:164: error: unmappable character (0xE2) for encoding ascii
[2022-06-10T22:33:58,533Z]         //    is represented as (0, 0) in 2D, it???s OK returning 0 as
[2022-06-10T22:33:58,533Z]                                                 ^
[2022-06-10T22:33:58,534Z] /System/Volumes/Data/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S82566/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5c7ab1a1-5e25-429b-ad65-d5bcfa060d8f/runs/696c6fd6-1a00-48ef-90f1-256f34750ee5/workspace/open/src/java.base/share/classes/sun/security/util/math/IntegerModuloP.java:164: error: unmappable character (0x80) for encoding ascii
[2022-06-10T22:33:58,534Z]         //    is represented as (0, 0) in 2D, it???s OK returning 0 as
[2022-06-10T22:33:58,534Z]                                                  ^
[2022-06-10T22:33:58,534Z] /System/Volumes/Data/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S82566/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5c7ab1a1-5e25-429b-ad65-d5bcfa060d8f/runs/696c6fd6-1a00-48ef-90f1-256f34750ee5/workspace/open/src/java.base/share/classes/sun/security/util/math/IntegerModuloP.java:164: error: unmappable character (0x99) for encoding ascii
[2022-06-10T22:33:58,534Z]         //    is represented as (0, 0) in 2D, it???s OK returning 0 as
[2022-06-10T22:33:58,534Z]                                                   ^
[2022-06-10T22:33:58,534Z] 3 errors
[2022-06-10T22:33:58,551Z] CompileJavaModules.gmk:94: recipe for target '/System/Volumes/Data/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S82566/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5c7ab1a1-5e25-429b-ad65-d5bcfa060d8f/runs/696c6fd6-1a00-48ef-90f1-256f34750ee5/workspace/build/macosx-aarch64-debug/jdk/modules/java.base/_the.java.base_batch' failed
[2022-06-10T22:33:58,552Z] make[3]: *** [/System/Volumes/Data/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S82566/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5c7ab1a1-5e25-429b-ad65-d5bcfa060d8f/runs/696c6fd6-1a00-48ef-90f1-256f34750ee5/workspace/build/macosx-aarch64-debug/jdk/modules/java.base/_the.java.base_batch] Error 1
[2022-06-10T22:33:58,553Z] make/Main.gmk:193: recipe for target 'java.base-java' failed
[2022-06-10T22:33:58,553Z] make[2]: *** [java.base-java] Error 2
[2022-06-10T22:33:58,553Z] make[2]: *** Waiting for unfinished jobs....
[2022-06-10T22:36:01,891Z] 
[2022-06-10T22:36:01,891Z] ERROR: Build failed for target 'default (product-bundles test-bundles static-libs-bundles)' in configuration 'macosx-aarch64-debug' (exit code 2) ",,,,,,,,,,JDK-8288363,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288274,,,,,,,,,,JDK-8287178,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xfx7:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2022-06-10 15:42;dcubed;[~weijun] - Please take a look at these build failures.
18 build tasks have failed so far and the only changeset is:

JDK-8287178 IntegerModuloP::multiplicativeInverse returns 0 for 0;;;","2022-06-10 16:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9135
Date: 2022-06-10 23:49:45 +0000;;;","2022-06-10 16:59;dukebot;Changeset: f7a4be75
Author:    Hai-May Chao <hchao@openjdk.org>
Date:      2022-06-10 23:58:15 +0000
URL:       https://git.openjdk.org/jdk/commit/f7a4be75fbe9e703dea94459285c72094d4d8646
;;;","2023-01-23 10:35;epavlova;tier1 works in ATR and CI.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add missing file jdk.incubator.concurrent-J.sym.txt,JDK-8288238,5076757,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,darcy,darcy,darcy,2022-06-10 12:48,2022-06-15 23:44,2023-10-01 09:56,2022-06-10 13:03,20,,,,,,20,infrastructure,,0,noreg-build,,,,,,,,,,,,,,,,,The fix for JDK-8286038 accidentally omitted one of the new files.,,,,,,,,,,JDK-8288361,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288237,,,,,,JDK-8286038,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xfpf:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-06-10 12:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9133
Date: 2022-06-10 19:50:24 +0000;;;","2022-06-10 13:03;dukebot;Changeset: f2e10dce
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-06-10 20:00:17 +0000
URL:       https://git.openjdk.org/jdk/commit/f2e10dce786a01768436f32e233d72cb4257fbcf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Address typos in jar man page,JDK-8288232,5076748,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,mullan,mullan,2022-06-10 10:39,2022-11-14 19:16,2023-10-01 09:56,2022-11-03 10:00,,,,,,,20,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,"The jar doc states ""="" can be used in either style of option, ex:

-f=FILE or --file=FILE

but only the GNU style option (--file) accepts ""="", ex:

$ jar -c --main-class=CheckIfJarIsSigned -f=CheckIfJarIsSigned.jar CheckIfJarIsSigned.class
unrecognized option : -f=CheckIfJarIsSigned.jar

$ jar -c --main-class=CheckIfJarIsSigned --file=CheckIfJarIsSigned.jar CheckIfJarIsSigned.class",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xfnf:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@189ffaae,,,,,,,,,"2022-11-02 07:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10947
Date: 2022-11-02 14:04:45 +0000;;;","2022-11-03 10:07;dukebot;Changeset: 68209adf
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2022-11-03 17:05:28 +0000
URL:       https://git.openjdk.org/jdk/commit/68209adfa788b3cdf86c75f74857dd28c74c3cc2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/jvmti/vthread/VThreadNotifyFramePopTest/VThreadNotifyFramePopTest.java test failed,JDK-8288214,5076723,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alanb,zgu,zgu,2022-06-10 07:13,2022-06-23 00:00,2023-10-01 09:56,2022-06-14 06:04,19,20,,,,,19,hotspot,,0,noreg-self,problemlist,redhat-interest,tier1,tier3,tier7,,,,,,,,,,,,"Test bug due to openjdk.java.net => openjdk.org change.

VThreadNotifyFramePopTest failed!
STDERR:
java.net.UnknownHostException: openjdk.java.net
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:560)
	at java.base/java.net.Socket.connect(Socket.java:666)
	at java.base/java.net.Socket.connect(Socket.java:600)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:279)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:384)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:406)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1308)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1241)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1127)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1056)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1661)
",,,,,,,,,,JDK-8288577,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288215,,,,,,,,,,,,,,,,,"2022-06-11 00:22;alanb;VThreadNotifyFramePopTest.patch;https://bugs.openjdk.org/secure/attachment/99483/VThreadNotifyFramePopTest.patch",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xfhv:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-06-10 07:30;alanb;This test started failing everywhere today, I think it needs to be changed to drop the dependency on a remote host.  The test could be changed to create a local HTTP server instead.;;;","2022-06-10 07:34;dcubed;Bumping from P4 -> P3 since this is a noisy failure in the CI.;;;","2022-06-10 07:39;zgu;[~alanb] Okay, assigned to you.;;;","2022-06-10 08:16;alanb;I've attached a patch to change the test to use a local HTTP server. I've also changed the test description to use `@enablePreview` and added the `@bug` tag. I don't have time today to create and integrate a PR so feel free to take it.;;;","2022-06-12 00:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/6
Date: 2022-06-11 08:11:34 +0000;;;","2022-06-14 06:04;dukebot;Changeset: c76a06ae
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-06-14 13:00:27 +0000
URL:       https://git.openjdk.org/jdk19/commit/c76a06aeb5fe7d7630736a74aad8c873b7afe36b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
SSL debug message wrong about unsupported authentication scheme,JDK-8288209,5076718,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-06-10 06:13,2022-06-23 00:10,2023-10-01 09:56,2022-06-21 07:35,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,"In CertificateMessage.java, the log message printed at https://github.com/openjdk/jdk/blob/e01cd7c3ed923cd19509fc972ba6e4aa2991289f/src/java.base/share/classes/sun/security/ssl/CertificateMessage.java#L1049 is incorrect. It only means a key algorithm is already checked, not that it's unsupported.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xfgr:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-06-13 07:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9140
Date: 2022-06-13 14:53:51 +0000;;;","2022-06-21 07:35;dukebot;Changeset: 19017358
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-06-21 14:33:03 +0000
URL:       https://git.openjdk.org/jdk/commit/19017358b1b3c63fdddc1eecb2fe52f7b7d4b6e3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GVN Crash: assert() failed: correct memory chain,JDK-8288204,5076635,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,yyang,webbuggrp,webbuggrp,2022-06-09 09:37,2023-03-28 02:15,2023-10-01 09:56,2023-01-02 23:26,17.0.3,18,19,20,21,,21,hotspot,,0,additional-information-received,c2,dcsswa,hgupdate-sync,oraclejdk-na,oracle-triage-11,oracle-triage-20,reproducer-no,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Arch: x86_64
OS: Ubuntu 20.04.4 LTS
HotSpot
- openjdk version ""17.0.5-internal"" 2022-10-18
- OpenJDK Runtime Environment (fastdebug build 17.0.5-internal+0-adhoc.simon.my-jdk17u)
- OpenJDK 64-Bit Server VM (fastdebug build 17.0.5-internal+0-adhoc.simon.my-jdk17u, mixed mode, sharing)
javac: javac 17.0.5-internal

A DESCRIPTION OF THE PROBLEM :
Note, this is found in OpenJDK 17.0.5 (internal; https://github.com/openjdk/jdk17u-dev; commit 041924ab).

The following is part of the log:
```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/zdata/congli/my-jdk17u/src/hotspot/share/opto/memnode.cpp:226), pid=2320806, tid=2321039
#  assert(phase->C->get_alias_index(t) == phase->C->get_alias_index(t_adr)) failed: correct memory chain
#
# JRE version: OpenJDK Runtime Environment (17.0.5) (fastdebug build 17.0.5-internal+0-adhoc.congli.my-jdk17u)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17.0.5-internal+0-adhoc.congli.my-jdk17u, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x14393eb]  MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*)+0x1ab
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xmx1G -Xbatch Test

Host: amdsuplus3.inf.ethz.ch, AMD Ryzen Threadripper 3990X 64-Core Processor, 128 cores, 251G, Ubuntu 20.04.4 LTS
Time: Thu Jun  9 18:31:10 2022 CEST elapsed time: 0.533573 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007f93085e6e50):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=2321039, stack(0x00007f92d33fc000,0x00007f92d34fd000)]


Current CompileTask:
C2:    533   53 % !b  4       Test::mainTest @ 152 (220 bytes)

Stack: [0x00007f92d33fc000,0x00007f92d34fd000],  sp=0x00007f92d34f8300,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x14393eb]  MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*)+0x1ab
V  [libjvm.so+0x1440ed3]  LoadNode::Ideal(PhaseGVN*, bool)+0x313
V  [libjvm.so+0x1611818]  PhaseIterGVN::transform_old(Node*)+0xb8
V  [libjvm.so+0x160a6de]  PhaseIterGVN::optimize()+0x7e
V  [libjvm.so+0xa49319]  Compile::Optimize()+0xa49
V  [libjvm.so+0xa4b1b6]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1306
V  [libjvm.so+0x873806]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa5ce99]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x1029
V  [libjvm.so+0xa5dc88]  CompileBroker::compiler_thread_loop()+0x678
V  [libjvm.so+0x1a0b846]  JavaThread::thread_main_inner()+0x266
V  [libjvm.so+0x1a11a44]  Thread::call_run()+0x104
V  [libjvm.so+0x158987c]  thread_native_entry(Thread*)+0x10c
```

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. javac Test.java
2. java -Xbatch -Xmx1G Test

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
No crashes
ACTUAL -
Crashed

---------- BEGIN SOURCE ----------
class Test {
  int N;
  double[] dArrFld;
  int[] iArrFld;

  int iMeth() {
    double dArr[] = new double[N];
    long meth_res = Double.doubleToLongBits(checkSum(dArr));
    return (int) meth_res;
  }

  void mainTest(String[] strArr1) {
    int i = 47864, i27 = 0, i32, i37 = 39;
    short s4 = 21959;
    float f4;
    i ^= iMeth();
    for (; ; ) {
      for (i32 = 1; i32 < 46; i32++) i27 += s4;
      do
        for (f4 = 1; f4 < 1; ++f4) {
          dArrFld[(int) f4] = 53586;
          iArrFld[i37] *= 92.656F;
          dArrFld = double1array(N, 2.89809);
        }
      while (++i37 < 46);
      for (int ax$5 = 4; ax$5 < 6167; )
        try {
          long[] ax$3 = {1};
          for (int ax$2 = 0; ax$2 < 100000; ) {
            for (long duration : ax$3) {}
            String ax$0 = ""test"";
            ax$0 = ax$0 + ax$0;
            ax$0 = ax$0 + ax$0;
          }
        } catch (Throwable ax$4) {
        } finally {
        }
    }
  }

  public static void main(String[] strArr) {
    Test _instance = new Test();
    _instance.mainTest(strArr);
  }


  public static double checkSum(double[] a) {
    double sum = 0;
    for (int j = 0; j < a.length; j++) {
      sum += (a[j] / (j + 1) + a[j] % (j + 1));
    }
    return sum;
  }


  public static double[] double1array(int sz, double seed) {
    double[] ret = new double[sz];
    init(ret, seed);
    return ret;
  }


  public static void init(double[] a, double seed) {
    for (int j = 0; j < a.length; j++) {
      a[j] = (j % 2 == 0) ? seed + j : seed - j;
    }
  }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8299347,JDK-8299511,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303000,JDK-8267687,,,,,,"2022-07-19 10:14;thartmann;Test-1.java;https://bugs.openjdk.org/secure/attachment/100040/Test-1.java","2022-06-10 04:06;sswsharm;Test.java;https://bugs.openjdk.org/secure/attachment/99476/Test.java","2022-06-22 01:35;pnarayanaswa;hotspot-bug-56.tar.gz;https://bugs.openjdk.org/secure/attachment/99640/hotspot-bug-56.tar.gz",,,,,,,,,,x86_64,,,,,,b26,17,,linux_ubuntu,,,,,"0|i2xeyb:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-10 04:09;sswsharm;Issue is not reproduced on either GA or fastdebug build. Crash is not observed.

OS: Linux(ubuntu 20.04)
JDK 8u333 : Pass
JDK 11.0.15.1: Pass
JDK 17.0.3.1: Pass
JDK 18.0.1.1: Pass

Moving it to JDK for further analysis.;;;","2022-06-10 17:22;dlong;I can't reproduce it with a OpenJDK 17.0.5 build either.  Maybe there is something about the hardware features that is triggering it.;;;","2022-06-22 01:35;pnarayanaswa;Additional Information from submitter
===========================
The provided `Test.java` is a reduced version of the original. 

If you cannot reproduce the crash, please download the original one (Test.java.orig) and try again from this link: <attached>
The crash may occur after running the program for 1-2 min. So please be patient when reproducing.;;;","2022-06-24 00:07;sswsharm;Issue is not reproduced on either GA or fastdebug Oracle JDK builds with the updated testcase.

OS: Linux(ubuntu 20.04)
JDK 8u333 : Pass
JDK 11.0.15.1: Pass
JDK 17.0.3.1: Pass
JDK 18.0.1.1: Pass

Since it is reproducible by the submitter in OpenJDK builds, reopening the issue for the community to look at it.;;;","2022-06-24 17:03;dlong;ILW = assert in debug build; submitter can reproduce; no workaround = MMH = P3;;;","2022-07-19 10:15;thartmann;I can reproduce this with JDK 17.0.5-ea+3-LTS-161 and JDK 18.0.2, attached is a simplified test (Test-1.java).;;;","2022-07-22 06:24;thartmann;This does not reproduce anymore after JDK-8272735 in JDK 19 b14.;;;","2022-07-25 05:29;thartmann;After backing out JDK-8272735, I can reproduce this with latest JDK 20.;;;","2022-07-27 03:45;thartmann;I narrowed it down to JDK-8267687 in JDK 17 b26.;;;","2022-07-27 03:48;thartmann;[~yyang], this seems to be a regression introduced by JDK-8267687. Could you please have a look?;;;","2022-07-31 19:25;yyang;I did a quick investigation, it seems that JDK-8267687 don't cause this crash, it only revealed this crash. This crash is likely related to EA. I'll be back after more investigations.;;;","2022-08-06 00:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9777
Date: 2022-08-05 15:23:45 +0000;;;","2023-01-02 23:16;thartmann;This bug was targeted for JDK 20 but the fix was pushed into the JDK 21 repository. I'm backporting the fix to JDK 20.;;;","2023-01-02 23:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/80
Date: 2023-01-03 07:16:09 +0000;;;","2023-01-02 23:25;thartmann;Changeset: 04591595
Author: Yi Yang <yyang@openjdk.org>
Date: 2022-12-26 02:16:06 +0000
URL: https://git.openjdk.org/jdk/commit/04591595374e84cfbfe38d92bff4409105b28009;;;","2023-01-02 23:26;thartmann;Fix was pushed while main bug was targeted to JDK 20. Reset the main bug to fixed in 21 and copied the Robo Duke entry here.;;;","2023-01-03 05:12;dukebot;Changeset: a6a903d4
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-01-03 08:21:22 +0000
URL:       https://git.openjdk.org/jdk/commit/a6a903d4b627bde85a311336ce25a7f5e25cf664
;;;",,,,,,,,,,,,,,,,
runtime/ClassUnload/UnloadTestWithVerifyDuringGC.java fails with release VMs,JDK-8288203,5076714,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-06-10 04:09,2022-06-15 23:41,2023-10-01 09:56,2022-06-10 04:42,20,,,,,,20,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,"

STDERR:
Error: VM option 'VerifyDuringGC' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.
Error: The unlock option must precede 'VerifyDuringGC'.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.",,,,,,,,,,JDK-8288350,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280454,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xffv:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-06-10 04:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9125
Date: 2022-06-10 11:14:22 +0000;;;","2022-06-10 04:42;dukebot;Changeset: 5d0e8b69
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-06-10 11:40:25 +0000
URL:       https://git.openjdk.org/jdk/commit/5d0e8b698144a83025c6912520097f24128858f7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Prepare build system for GHA changes,JDK-8288195,5076706,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-06-10 02:53,2022-06-15 23:44,2023-10-01 09:56,2022-06-10 12:34,19,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,A few changes to the build system is needed for the GHA rewrite (JDK-8287906).,,,,,,,,,,JDK-8288359,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xfe3:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-06-10 03:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9122
Date: 2022-06-10 09:54:36 +0000;;;","2022-06-10 12:33;dukebot;Changeset: d0c8ff8f
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-06-10 19:32:30 +0000
URL:       https://git.openjdk.org/jdk/commit/d0c8ff8fdfe86a4251290d4c1c7b3dbd4cfaf018
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lw4] Many runtime/cds/appcds/ tests are still referring to IdentityObject,JDK-8288186,5076699,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-06-10 02:30,2022-06-10 02:50,2023-10-01 09:56,2022-06-10 02:50,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lw4,,,,,,,,,,,,,,,,,"Commit 74dbd64e4577489843b992f43ae1f8104762c328 made for 
JDK-8265719: [lworld] CDS tests fail after the merge with master needs to be reversed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xfcj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-10 02:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/712
Date: 2022-06-10 09:35:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: VectorPhase must ensure that SafePointNode memory input is a MergeMemNode,JDK-8288180,5076693,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,epeter,epeter,epeter,2022-06-10 01:12,2022-09-21 02:31,2023-10-01 09:56,2022-09-13 06:17,16,17,18,19,20,,20,hotspot,,0,c2,oracle-triage-11,oracle-triage-20,stress,vectorapi,,,,,,,,,,,,,"Running:
test/hotspot/jtreg/compiler/vectorapi/TestLoopStoreVector.java

With extra Flag:
-XX:+StressReflectiveCode

#  Internal Error (/home/emanuel/Documents/fork3-jdk/open/src/hotspot/share/opto/graphKit.hpp:516), pid=2509883, tid=2509899
#  assert(mem->is_MergeMem()) failed: parse memory is always pre-split
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (fastdebug build 19-internal-2022-06-02-1355549.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-internal-2022-06-02-1355549.emanuel..., mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xec1f94]  GraphKit::merged_memory()+0x64

Reproduce with JTreg:
~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:+StressReflectiveCode"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/vectorapi/TestLoopStoreVector.java

Replay file should work:
./java -XX:+ReplayCompiles -XX:+ReplayIgnoreInitErrors -XX:ReplayDataFile=/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/bin/JTwork/scratch/replay_pid2513889.log -XX:+StressReflectiveCode


Probably the same bug, with the same extra flag (did reproduce locally on my ubuntu):
compiler/vectorapi/reshape/TestVectorReinterpret.java
compiler/vectorapi/reshape/TestVectorCastAVX1.java
compiler/vectorapi/VectorReinterpretTest.java
compiler/vectorapi/VectorMemoryAlias.java
compiler/vectorapi/VectorMaskLoadStoreTest.java
compiler/vectorapi/VectorMaskCastTest.java
compiler/vectorapi/VectorCastShape64Test.java
compiler/vectorapi/VectorCastShape128Test.java
compiler/vectorapi/TestVectorShuffleIotaByte.java
compiler/vectorapi/TestVectorShuffleIota.java
compiler/vectorapi/TestVectorShiftImm.java
compiler/vectorapi/TestNoInline.java
compiler/vectorapi/TestMaskedMacroLogicVector.java
compiler/vectorapi/TestLongVectorNeg.java
compiler/vectorapi/Test8259353.java

This may only reproduce on linux-aarch64-debug and macosx-aarch64-debug, did not even run on my ubuntu (no tests selected):
compiler/vectorapi/reshape/TestVectorCastNeon.java
compiler/vectorapi/VectorReplicateLongSpecialImmTest.java   (requires aarch64 in test)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256540,,,,,,,,,,,,,,,,,JDK-8223347,,,,,,,"2022-06-10 01:11;epeter;hs_err_pid2513889.log;https://bugs.openjdk.org/secure/attachment/99463/hs_err_pid2513889.log","2022-06-10 01:11;epeter;replay_pid2513889.log;https://bugs.openjdk.org/secure/attachment/99462/replay_pid2513889.log",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xfb7:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-10 02:31;rcastanedalo;ILW = assertion failure in incubator test code; seen only using StressReflectiveCode; run test with default configuration = MLM = P4;;;","2022-07-14 05:44;epeter;I'll start debugging this a bit before my vacation, maybe this helps.

This is the failing assert:
assert(mem->is_MergeMem(), ""parse memory is always pre-split"");

mem is not a MergeMemNode, but:
7  Parm  === 3 [[...]] Memory  Memory: @BotPTR *+bot, idx=Bot; !jvms: TestLoopStoreVector::testVectorCastL2I @ bci:-1 (line 60)

We ask for memory of map_not_null().
This is a SafePoint, the memory is at index 2
2451  SafePoint  === 2334 6 7 8 1 1 11 1 13 1 1 1 1 1 1 1 1 1 1 1 1 1 372 433 463 120 476 1 120 478 1 373 549  [[ ]]

So I step backwards, watching both the map, and input 2 of SafePoint.
Ok, so this is the map that jvms holds when the GraphKit is generated, in PhaseVector::expand_vbox_alloc_node
But also the input 2 of the map is just copied right before the GraphKit, from a previous SafePoint.

This is the previous SafePoint:
2348  VectorBoxAllocate  === 2334 6 7 8 1 (1 11 1 13 1 1 1 1 1 1 1 1 1 1 1 1 1 372 433 463 120 476 1 120 478 1 373 549 ) [[ ... ]] # Static

Ok, so right after the node creation of VectorBoxAllocate (is a CallJavaNode), we run GraphKit::set_edges_for_java_call.
There, the memory is set from reset_memory()

Before this, we have map()
2342  SafePoint  === 2334 6 2343 8 1 1 1 1 1 1 1 1 1 1 1 1 1 11 1 13 1 1 1 1 1 1 1 1 1 1 1 1 1 372 433 463 120 476 1 120 478 1 373 549 1  [[ ]]  SafePoint
and its memory
2343  MergeMem  === _ 1 7 1  [[ 2342 ]]  { - }  Memory: @BotPTR *+bot, idx=Bot;

Then, because we are in debug mode, memory of map is set to NULL.
we then return transform(mem)
transform figures out that
2343  MergeMem  === _ 1 7 1  [[ 2342 ]] 
is Identity with
7  Parm  === 3  [[ ...]] Memory

Because ""No memory splits; ID on the one true input""

Now I'd like to see how ""2343  MergeMem"" came about
Ok, well it is specially created in callGenerator.cpp - CallGenerator::do_late_inline_helper
A new JVMState is generated, and because the map's memory is not a MergeMem, we insert one, wrapping the previous memory into a MergeMem.

I now see two possible reasons for the problem.
Either that transform should not have happened.
Or we need to make sure after jvms clone, that we have a MergeMem as input?
;;;","2022-07-14 06:46;epeter;So we could do something about it in
src/hotspot/share/opto/graphKit.cpp
GraphKit::set_edges_for_java_call
see that reset_memory() is MergeMem

Because doing that directly in GraphKit::reset_memory is probably not the way to go. In fact I see that happen elsewhere and that is ok.

Or maybe the problem comes from much earlier.

going back earlier.
That JVMState we generate, is based of a call, from call_node().
That has memory input ""7 Param""

Actually, this kinda shows that it is normal that set_edges_for_java_call can have the memory input be ""7 param"" and not a MergeMem.;;;","2022-07-14 07:29;epeter;A question: the assert says
""parse memory is always pre-split""

But we are not really parsing, if I understand correctly.
Compile::Optimize is calling some vector stuff to be optimized, and that calls the GraphKit, which then maybe wrongly assumes we are in parsing?

FYI
GraphKit::merged_memory can also be called through Compile::inline_incrementally
Hmm, interestingly, in some of these cases, I see a MergeMem simply wrapping ""7 Param"". That is probably what is supposed to happen in our case too.

---------------- Stack Trace ------
#0  0x00007f4c55c2fd8b in GraphKit::merged_memory (this=0x7f4c3a332040) at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/opto/graphKit.hpp:516
#1  0x00007f4c561a15fb in GraphKit::memory (this=0x7f4c3a332040, alias_idx=19) at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/opto/graphKit.cpp:1488
#2  0x00007f4c561a18a0 in GraphKit::make_load (this=0x7f4c3a332040, ctl=0x0, adr=0x562887db5b38, t=0x7f4c2002b790, bt=T_INT, adr_idx=19, mo=MemNode::unordered, control_dependency=LoadNode::DependsOnlyOnTest, 
    require_atomic_access=false, unaligned=false, mismatched=false, unsafe=false, barrier_data=0 '\000') at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/opto/graphKit.cpp:1537
#3  0x00007f4c55c2fec6 in GraphKit::make_load (this=0x7f4c3a332040, ctl=0x0, adr=0x562887db5b38, t=0x7f4c2002b790, bt=T_INT, adr_type=0x7f4c2037c4f8, mo=MemNode::unordered, control_dependency=LoadNode::DependsOnlyOnTest, 
    require_atomic_access=false, unaligned=false, mismatched=false, unsafe=false, barrier_data=0 '\000') at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/opto/graphKit.hpp:547
#4  0x00007f4c561ae26a in GraphKit::make_load (this=0x7f4c3a332040, ctl=0x0, adr=0x562887db5b38, t=0x7f4c2002b790, bt=T_INT, mo=MemNode::unordered, control_dependency=LoadNode::DependsOnlyOnTest, require_atomic_access=false, 
    unaligned=false, mismatched=false, unsafe=false, barrier_data=0 '\000') at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/opto/graphKit.hpp:537
#5  0x00007f4c561a9354 in GraphKit::get_layout_helper (this=0x7f4c3a332040, klass_node=0x562887db5ac8, constant_value=@0x7f4c3a331e0c: 0) at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/opto/graphKit.cpp:3519
#6  0x00007f4c561aa327 in GraphKit::new_array (this=0x7f4c3a332040, klass_node=0x562887db5ac8, length=0x56288805d588, nargs=1, return_size_val=0x0, deoptimize_on_exception=false)
    at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/opto/graphKit.cpp:3712
#7  0x00007f4c5698e8fe in PhaseVector::expand_vbox_alloc_node (this=0x7f4c3a3323e0, vbox_alloc=0x7f4c20299890, value=0x7f4c202997e0, box_type=0x7f4c201f9640, vect_type=0x7f4c200c2198)
    at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/opto/vector.cpp:369
#8  0x00007f4c5698e642 in PhaseVector::expand_vbox_node_helper (this=0x7f4c3a3323e0, vbox=0x7f4c2029a600, vect=0x7f4c202997e0, box_type=0x7f4c201f9640, vect_type=0x7f4c200c2198)
    at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/opto/vector.cpp:335
#9  0x00007f4c5698e259 in PhaseVector::expand_vbox_node (this=0x7f4c3a3323e0, vec_box=0x7f4c2029a670) at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/opto/vector.cpp:298
#10 0x00007f4c5698d300 in PhaseVector::expand_vbox_nodes (this=0x7f4c3a3323e0) at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/opto/vector.cpp:115
#11 0x00007f4c5698ce4d in PhaseVector::optimize_vector_boxes (this=0x7f4c3a3323e0) at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/opto/vector.cpp:59
#12 0x00007f4c55e959bc in Compile::Optimize (this=0x7f4c3a3349c0) at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/opto/compile.cpp:2282
#13 0x00007f4c55e8ef4d in Compile::Compile (this=0x7f4c3a3349c0, ci_env=0x7f4c3a335740, target=0x562887ab0e70, osr_bci=-1, options=..., directive=0x7f4c5011a7f0)
    at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/opto/compile.cpp:823
#14 0x00007f4c55d7bc11 in C2Compiler::compile_method (this=0x7f4c501f7b80, env=0x7f4c3a335740, target=0x562887ab0e70, entry_bci=-1, install_code=true, directive=0x7f4c5011a7f0)
    at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/opto/c2compiler.cpp:112
#15 0x00007f4c55eaddd9 in CompileBroker::invoke_compiler_on_method (task=0x7f4c5025b640) at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/compiler/compileBroker.cpp:2311
#16 0x00007f4c55eac991 in CompileBroker::compiler_thread_loop () at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/compiler/compileBroker.cpp:1981
#17 0x00007f4c55ecec1e in CompilerThread::thread_entry (thread=0x7f4c501f8180, __the_thread__=0x7f4c501f8180) at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/compiler/compilerThread.cpp:59
#18 0x00007f4c5626aff7 in JavaThread::thread_main_inner (this=0x7f4c501f8180) at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/runtime/javaThread.cpp:698
#19 0x00007f4c5626ae84 in JavaThread::run (this=0x7f4c501f8180) at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/runtime/javaThread.cpp:681
#20 0x00007f4c56946609 in Thread::call_run (this=0x7f4c501f8180) at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/runtime/thread.cpp:224
#21 0x00007f4c56725a4f in thread_native_entry (thread=0x7f4c501f8180) at /home/emanuel/Documents/fork4-jdk/open/src/hotspot/os/linux/os_linux.cpp:708
#22 0x00007f4c57b44609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#23 0x00007f4c57a61133 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95;;;","2022-07-14 09:07;epeter;Note, that in GraphKit::get_layout_helper we do not enter the if clause because we have StressReflectiveCode enabled.
I am however not sure if or what is the relation to the assert.;;;","2022-09-05 06:51;epeter;Working on it again. Now the mem node is not just ""7 Param"", but this chain:

7  Parm  === 3  [[ ... ]] Memory
345  MemBarCPUOrder  === 332 1 7 1 1
347  Proj  === 345

Now, let's see where this comes from. The GraphKit is initialized with a SafePointNode, which has the same chain in the memory input.
Q: can we add the MergeMem assert already to the constructor of GraphKit?
;;;","2022-09-05 09:18;epeter;Maybe, but rather not. Memory is sometimes nullptr.

The GraphKit is created with a SafePointNode, which here is a VectorBoxAllocateNode.
That makes sense given the back-trace.

This is generated before in GraphKit::box_vector and has values set in GraphKit::set_edges_for_java_call.
The value for memory is set to reset_memory().

There, we ask for the previous memory, and send it through _gvn.transform(mem).
This calls to PhaseGVN::transform_no_reclaim, where we transform
348  MergeMem  === _ 1 347 1  [[ ]] 
into
347  Proj  === 345  [[ 348 349 ]] #2  Memory
via MergeMemNode::Identity

We only have one memory input, so no split (No memory splits; ID on the one true input)

What is reset_memory() really there for? It seems odd, as it does not really re-set anything directly, only in debug mode. It just transforms the input, and then is probably used as input elsewhere?
Maybe we can trace the return value of reset_memory()

Hmm, often it is done via reset_memory and set_all_memory, but not in all cases. I need to investigate some examples.;;;","2022-09-06 03:05;epeter;Hmm, seems that reset_memory() can return anything really, it does not need to be a MergeMemNode.
Somehow the memory() is fixed up in other ways.

For example in LibraryCallKit::inline_vector_mem_operation, there is a call to insert_mem_bar(Op_MemBarCPUOrder) which in turn calls set_all_memory_call(membar). This makes sure it is wrapped in a MergeMemNode.

Ok, it could be that really we need a set_all_memory call at some point, because that performs the wrapping in MergeMemNode.;;;","2022-09-06 06:06;epeter;Here some examples. tracing merged_memory.

1) the broken case
mem: 347  Proj  === 345  [[ 350 349 381 ]] #2  Memory
_map is set in constructor to:
381  SafePoint  === 346 6 347 8 1 1 1 1 1 1 1 1 68 131 162 11 179 1 11 176 1 69 249  [[ ]]  SafePoint
And the memory input to SafePoint is set in constructor, cloned from:
 350  VectorBoxAllocate  === 346 6 347 8 1 (1 1 1 1 1 1 1 68 131 162 11 179 1 11 176 1 69 249 ) [[ 351 352 353 365 362 363 ]] # Static
And here, the memory input was set at construction, in GraphKit::set_edges_for_java_call via reset_memory().
And in there, we originally had
 348  MergeMem  === _ 1 347 1  [[ ]]  { - }  Memory
which then is put through the PhaseGVN::transform_no_reclaim, and unpacked because it has only one memory input.

2)
mem:  348  MergeMem  === _ 1 347 1  [[ 338 ]]  { - }  Memory
_map:  338  SafePoint  === 346 6 348 8 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 68 131 162 11 179 1 11 176 1 69 249 1  [[ ]]  SafePoint

7  Parm  === 3  [[ 251 244 213 145 51 84 339 340 345 ]] Memory
345  MemBarCPUOrder  === 332 1 7 1 1  [[ 346 347 ]]
347  Proj  === 345  [[ 348 ]] #2  Memory
348  MergeMem  === _ 1 347 1  [[ ]]  { - }  Memory

set_all_memory_call, called from insert_mem_bar, from LibraryCallKit::inline_vector_mem_operation.
So this inserts the MergeMem, the Proj, and MemBarCPUOrder.
insert_mem_bar calls reset_memory(), which unpacks the previous MergeMem, to just be 7 Param.
And then 7 Param is attached as memory input to MemBarCPUOrder, which this far has nullptr memory input (expected, as it is to be replaced with reset_memory())

3)
mem: 339  MergeMem  === _ 1 7 1  [[ 338 ]]  { - }  Memory
_map: 338  SafePoint  === 332 6 339 8 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 68 131 162 11 179 1 11 176 1 69 249 1  [[ ]]  SafePoint
We copy the _map from the previous jvms - we create LibraryCallKit, perform the inlining using the synthesized JVMState
so we start out with

7  Parm  === 3  [[ 251 244 213 145 51 84 339 ]] Memory
339  MergeMem  === _ 1 7 1  [[ 338 ]]  { - }  Memory
338  SafePoint  === 332 6 339 8 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 68 131 162 11 179 1 11 176 1 69 249 1  [[ ]]  SafePoint

4);;;","2022-09-06 06:26;epeter;4)
backtrace is now in Parse::Parse, whereas 1,2,3 were in Compile::Optimize, Compile::inline_incrementally
251  CallStaticJava  === 239 6 7 8 1 (68 131 162 11 179 1 11 176 1 69 249 1 1 1 1 1 1 1 ) [[ ... ]] # Static
265  Proj  === 251  [[ ... ]] #2  Memory
mem: 18  MergeMem  === _ 1 265 1  [[ 14 ]]  { - }  Memory
_map: 14  SafePoint  === 15 264 18 8 9 19 1 1  [[ ]]  SafePoint

5) same state.

6) even a different GraphKit !
251  CallStaticJava  === 239 6 7 8 1 (68 ... ) [[ ... ]] # Static
265  Proj  === 251
mem: 29  MergeMem  === _ 1 265 1  [[ 25 ]]  { - }  Memory
_map: 25  SafePoint  === 26 264 29 8 9 1 1 1 304 1 1 1  [[ ]]  SafePoint

Yeah, also in this case, we have the map set, and then the memory is set via set_all_memory.

I think that this is how it should be done.;;;","2022-09-06 07:13;epeter;It is just difficult to see what the implicit assumptions are of the code.
Should there always be a MergeMemNode as memory input to SafePoint - then we can always call merged_memory. Or is that not always supposed to be true, and merged_memory should not always be called?;;;","2022-09-07 05:31;epeter;I am now running the failing run with -XX:+StressReflectiveCode, and a comparison without that flag.

The assert is triggered in

GraphKit::merged_memory
GraphKit::memory
GraphKit::make_load
GraphKit::make_load
GraphKit::get_layout_helper
GraphKit::new_array

At the end of GraphKit::get_layout_helper we create a load (to get the layout helper), which calls all the way down, and asks for the merged_memory - this is not yet ready as not set_all_memory has been called yet.

On the other hand, without StressReflectiveCode (there is a check for it in GraphKit::get_layout_helper), we actually do the logic, find out that we have a T_LONG array, and can fetch the constant layout helper. We return NULL, and do not generate a load, and so do not call the merged_memory before we reset_memory and set_all_memory later down in GraphKit::new_array.;;;","2022-09-08 01:43;epeter;The GraphKit seems to assume that the memory input of the map (SafePointNode) is always a MergeMemNode. It requires this so that it can easily access the memory slices.

However, the VectorPhase also generates some GraphKit instances, for example in PhaseVector::expand_vbox_alloc_node. However, at that point we are not in parsing, and the SafePointNode might have a folded memory state (not MergeMemNode). The assert in GrahpKit::merged_memory can thus be triggered.

In this particular failure case, the SafePointNode was constructed with memory-phi, which was the result of a previous GraphKit::reset_memory call, which folded the memory (the MergeMemNode had only one input, the memory-phi). This on its own does not necessarily trigger our assert. In many cases, the new GraphKit first transforms the memory input and calls GraphKit::set_all_memory, which makes sure there is a MergeMemNode. But in our failure case, this never happens.

Suggested Solution: VectorPhase must ensure that the map's memory input is MergeMemNode. We can do this in clone_jvms, which is called before we instanciate the GraphKit.;;;","2022-09-08 01:45;epeter;diff --git a/src/hotspot/share/opto/vector.cpp b/src/hotspot/share/opto/vector.cpp
index f96076eb37e..9ab0d9fe910 100644
--- a/src/hotspot/share/opto/vector.cpp
+++ b/src/hotspot/share/opto/vector.cpp
@@ -163,6 +163,17 @@ static JVMState* clone_jvms(Compile* C, SafePointNode* sfpt) {
   for (uint i = 0; i < size; i++) {
     map->init_req(i, sfpt->in(i));
   }
+  Node* mem = map->memory();
+  if (!mem->is_MergeMem()) {
+    // Since we are not in parsing, the SafeNode does not guarantee that the memory
+    // input is necessarily a MergeMemNode. But we need to ensure that there is that
+    // MereMemNode, since the GraphKit assumes the memory input of the map to be a
+    // MergeMemNode, so that it can directly access the memory slices.
+    PhaseGVN& gvn = *C->initial_gvn();
+    Node* mergemem = MergeMemNode::make(mem);
+    gvn.set_type_bottom(mergemem);
+    map->set_memory(mergemem);
+  }
   new_jvms->set_map(map);
   return new_jvms;
 };;;","2022-09-12 09:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10215
Date: 2022-09-08 09:08:50 +0000;;;","2022-09-13 06:17;dukebot;Changeset: 6f2223fa
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2022-09-13 13:14:05 +0000
URL:       https://git.openjdk.org/jdk/commit/6f2223faa170a800f76a54a6637c160eadab6232
;;;",,,,,,,,,,,,,,,,,
JDK-8202449 fix causes conformance test failure : api/java_util/Random/RandomGenerator/NextFloat.html,JDK-8288173,5076686,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rgiulietti,kganapureddy,kganapureddy,2022-06-09 23:11,2022-06-15 23:44,2023-10-01 09:56,2022-06-10 14:04,19,,,,,,20,core-libs,,0,conformance,hgupdate-sync,regression,tck-red-19,,,,,,,,,,,,,,"Two tests from this test group api/java_util/Random/RandomGenerator/NextFloat.html  are failing after JDK-8202449 fix.

The tests which are validating the spec : https://download.java.net/java/early_access/jdk19/docs/api/java.base/java/util/random/RandomGenerator.html#nextFloat(float)

""Implementation Requirements:
The default implementation checks that bound is a positive finite float. Then invokes nextFloat(), scaling the result so that the final result lies between 0.0f (inclusive) and bound (exclusive).""

It looks the possible cause for these failures  is  - RandomSupport:boundedNextFloat => 
if (r >= bound) // may need to correct a rounding problem
            r = Math.nextDown(r);

May be this is 
if (r >= bound) // may need to correct a rounding problem
            r = Math.nextDown(bound);
",,,,,,,,,,JDK-8288277,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8202449,,,,JCK-7317802,,,,,,,,,,,,,,,,,,,,,,,,,b26,,,,,,,,"0|i2xf9n:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2022-06-10 00:20;mbaesken;api/java_math/BigDecimal/Multiple.html started to fail and reports overflow related issues as well, this might be related.;;;","2022-06-10 01:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9120
Date: 2022-06-10 08:36:57 +0000;;;","2022-06-10 02:31;rgiulietti;@kganapureddy Your analysis is correct, I filed a PR (see comment above)
@mbaesken No, this issue is unrelated to BigDecimal;;;","2022-06-10 14:04;dukebot;Changeset: da2339cf
Author:    Raffaello Giulietti <rgiulietti@openjdk.org>
Committer: Brian Burkhalter <bpb@openjdk.org>
Date:      2022-06-10 21:01:14 +0000
URL:       https://git.openjdk.org/jdk/commit/da2339cf6971532593e4f1b5ebbce8d1ed2e83b2
;;;","2022-06-10 17:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/5
Date: 2022-06-11 00:35:52 +0000;;;","2022-06-13 17:33;dukebot;Changeset: f4b05a11
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-06-11 00:44:15 +0000
URL:       https://git.openjdk.org/jdk/commit/f4b05a1168e17000ef31173860af77aa722d2280
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lw4] Revert JDK-8253873 to fix failures in jdi, jvmti and jwdp tests",JDK-8288171,5076684,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-06-09 21:55,2022-06-09 22:30,2023-10-01 09:56,2022-06-09 22:30,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lw4,,,,,,,,,,,,,,,,,"These tests are still expecting IdentityObject interface and the changes made for JDK-8253873 need to be reversed:

vmTestbase/nsk/jdi/ClassType/allInterfaces/allinterfaces001/TestDescription.java
vmTestbase/nsk/jdi/ClassType/interfaces/interfaces001/TestDescription.java
vmTestbase/nsk/jdi/InterfaceType/implementors/implementors001/TestDescription.java
vmTestbase/nsk/jdi/InterfaceType/subinterfaces/subinterfaces001/TestDescription.java
vmTestbase/nsk/jdi/InterfaceType/superinterfaces/superinterfaces001/TestDescription.java
vmTestbase/nsk/jdwp/ReferenceType/Interfaces/interfaces001/TestDescription.java
vmTestbase/nsk/jvmti/ClassPrepare/classprep001/TestDescription.java
vmTestbase/nsk/jvmti/GetImplementedInterfaces/getintrf007/TestDescription.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xf97:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-06-09 22:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/711
Date: 2022-06-10 05:21:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add an anchor to each option on jpackage man page,JDK-8288166,5076677,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenyuk,bkorando,bkorando,2022-06-09 19:55,2022-06-22 23:49,2023-10-01 09:56,2022-06-15 19:55,17,18,19,,,,19,tools,,0,noreg-doc,sn_120,,,,,,,,,,,,,,,,"Providing anchors for each option on the jpackage man page can help when needing to reference an option from external documentation or content. 

The javac page already does this: https://docs.oracle.com/en/java/javase/18/docs/specs/man/javac.html#option-class-path

Following its precedent and for consistency the anchors should follow the option-[option-name-in-lower-case] format, e.g. option-type. 

For non-URL compliant characters in an option, if applicable, should be replaced with a `-`.
",,,,,,,,,,JDK-8288575,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xf7n:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaThread touches oop after GC barrier is detached,JDK-8288139,5076648,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,dcubed,zgu,zgu,2022-06-09 13:09,2023-09-12 02:17,2023-10-01 09:56,2022-06-21 09:22,11,17,18,19,,,19,hotspot,,0,amazon-interest,redhat-interest,,,,,,,,,,,,,,,,"Similar to JDK-8286830, JavaThread touches oop after GC barrier is detached. This time in SharedRuntime::get_java_tid() call, where it tries to resolve JavaThread::_threadObj.

#21 OopHandle::resolve (this=0x7f2828ee4ee0) at /home/zhengyu/ws/jdk/src/hotspot/share/oops/oopHandle.inline.hpp:34
#22 JavaThread::threadObj (this=this@entry=0x7f27bcc75240) at /home/zhengyu/ws/jdk/src/hotspot/share/runtime/thread.cpp:796
#23 0x00007f2850b38e3c in SharedRuntime::get_java_tid (thread=0x7f27bcc75240)
    at /home/zhengyu/ws/jdk/src/hotspot/share/runtime/thread.hpp:1582
#24 0x00007f2850e207c5 in ThreadsSMRSupport::remove_thread (thread=thread@entry=0x7f27bcc75240)
    at /home/zhengyu/ws/jdk/src/hotspot/share/runtime/threadSMR.cpp:1005
#25 0x00007f2850e0ac1c in Threads::remove (p=p@entry=0x7f27bcc75240, is_daemon=is_daemon@entry=false)
    at /home/zhengyu/ws/jdk/src/hotspot/share/runtime/thread.cpp:3605
#26 0x00007f2850e13937 in JavaThread::exit (this=this@entry=0x7f27bcc75240, destroy_vm=destroy_vm@entry=false, 
    exit_type=exit_type@entry=JavaThread::normal_exit) at /home/zhengyu/ws/jdk/src/hotspot/share/runtime/thread.cpp:1540
#27 0x00007f2850e13f9b in JavaThread::post_run (this=0x7f27bcc75240) at /home/zhengyu/ws/jdk/src/hotspot/share/runtime/thread.cpp:1336
#28 0x00007f2850e132a1 in Thread::call_run (this=this@entry=0x7f27bcc75240)
    at /home/zhengyu/ws/jdk/src/hotspot/share/runtime/thread.cpp:370
#29 0x00007f28509baf3c in thread_native_entry (thread=0x7f27bcc75240) at /home/zhengyu/ws/jdk/src/hotspot/os/linux/os_linux.cpp:706
#30 0x00007f2851690609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#31 0x00007f28517ec133 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95
",,,,,,,,,,JDK-8288918,JDK-8291125,JDK-8291277,,,,,,,,,,,,,,,,,,JDK-8288129,,,,,,,JDK-8283898,,,,,,JDK-8283898,,,,JDK-8289004,JDK-8185005,JDK-8289091,JDK-8253180,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xf17:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-06-09 23:55;dholmes;Ouch! How did we miss that for so long?

void ThreadsSMRSupport::remove_thread(JavaThread *thread) {

  if (ThreadIdTable::is_initialized()) {
    jlong tid = SharedRuntime::get_java_tid(thread);
    ThreadIdTable::remove_thread(tid);
  }

We need the tid to remove the thread from the table, but we are already past the point where we can access threadObj.;;;","2022-06-10 10:23;dcubed;The offending code is rather old:

230b5768d786 (Daniel D. Daugherty    2017-12-06 15:19:30 -0500 1002) void ThreadsSMRSupport::remove_thread(JavaThread *thread) {
17dd7dc38c60 (David Holmes           2020-05-13 22:29:54 -0400 1003)
6ccf3351d7ee (Daniil Titov           2019-09-25 11:10:05 -0700 1004)   if (ThreadIdTable::is_initialized()) {
6ccf3351d7ee (Daniil Titov           2019-09-25 11:10:05 -0700 1005)     jlong tid = SharedRuntime::get_java_tid(thread);
6ccf3351d7ee (Daniil Titov           2019-09-25 11:10:05 -0700 1006)     ThreadIdTable::remove_thread(tid);
6ccf3351d7ee (Daniil Titov           2019-09-25 11:10:05 -0700 1007)   }

and was added by this changeset:

$ git log -r 6ccf3351d7ee^!
commit 6ccf3351d7eef4b6a2ef8b33e4173416cfdcefd5
Author: Daniil Titov <dtitov@openjdk.org>
Date:   Wed Sep 25 11:10:05 2019 -0700

    8185005: Improve performance of ThreadMXBean.getThreadInfo(long ids[], int maxDepth)
    
    Reviewed-by: sspitsyn, dholmes, dcubed, rehn

The fix for JDK-8185005 was integrated in JDK14-B16 and was backported
to JDK13u and JDK11u.;;;","2022-06-10 10:37;dcubed;The GC barrier code that we're running afoul of was integrated via:

    JDK-8253180 ZGC: Implementation of JEP 376: ZGC: Concurrent Thread-Stack Processing

which was integrated in JDK16-B20. So it looks like
our original testing for JDK-8253180 somehow missed
this case of accessing an oop after the GC barrier was
detached.;;;","2022-06-10 12:48;dcubed;src/hotspot/share/runtime/thread.cpp:

void Threads::remove(JavaThread* p, bool is_daemon) {

<snip>

    // BarrierSet state must be destroyed after the last thread transition
    // before the thread terminates. Thread transitions result in calls to
    // StackWatermarkSet::on_safepoint(), which performs GC processing,
    // requiring the GC state to be alive.
    BarrierSet::barrier_set()->on_thread_detach(p);  // !! GC barrier detached here !!

    assert(ThreadsSMRSupport::get_java_thread_list()->includes(p), ""p must be present"");

    // Maintain fast thread list
    ThreadsSMRSupport::remove_thread(p);  // !! This function calls SharedRuntime::get_java_tid(thread) !!
;;;","2022-06-10 13:27;dcubed;[~zgu] - Unless ""GC Barriers"" have been backported to '11', I don't think
that this issue can affect JDK11u...;;;","2022-06-10 13:37;zgu;[~dcubed] jdk11u codebase does have GC barriers [1], ZGC [2] and Shenandoah [3] all have implementations.
 

[1] https://github.com/openjdk/jdk11u-dev/blob/master/src/hotspot/share/gc/shared/barrierSet.hpp#L129
[2] https://github.com/openjdk/jdk11u-dev/blob/master/src/hotspot/share/gc/z/zBarrierSet.cpp#L83
[3] https://github.com/openjdk/jdk11u-dev/blob/master/src/hotspot/share/gc/shenandoah/shenandoahBarrierSet.cpp#L145;;;","2022-06-10 14:00;dcubed;[~zgu] - Thanks for the info! That qualifies for my learn something new everyday token!

Do you have a particular test case that exposes this failure mode?;;;","2022-06-10 14:05;zgu;[~dcubed] No, with current code base. I was experimenting a fix for JDK-8288129, that triggered assertion failed similar to JDK-8286830.;;;","2022-06-10 14:36;dcubed;[~zgu] - No problem. I have an idea for how to add some sanity checking for
this type of problem. I'll keep you posted...;;;","2022-06-12 19:36;dholmes;I thought the barrier code was already supposed to catch this kind of error - but obviously not!

A fix will be awkward ... need to extract the tid while still safe and then pass it down to where we need it.;;;","2022-06-13 06:11;zgu;The barrier code is very GC specific. 

Obviously, Shenandoah (I believe GC1 as well) can potential catch this error, but only in marking phase with SATB barrier. 

I am also puzzled why it did not show up earlier - probably due to race windows: the java thread has to exit during marking phase, its SATB queue flushed and not yet inactivated.
;;;","2022-06-13 09:38;zgu;Okay, SATB barrier can not catch this problem, as there is only a read,  no overwrite, so it will not trigger SATB barrier.

I discovered the problem with iu_barrier, which it uses SATB queue but behaves differently.
 ;;;","2022-06-13 11:26;dcubed;I'm playing around with adding code to catch this condition without Shenandoah
and I've found that runtime/Thread/ThreadObjAccessAtExit.java is the perfect test
for getting into this code.;;;","2022-06-15 09:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/21
Date: 2022-06-15 16:06:08 +0000;;;","2022-06-21 09:22;dukebot;Changeset: a1449886
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-06-21 16:21:03 +0000
URL:       https://git.openjdk.org/jdk19/commit/a1449886004b2f0a70f1413bb19ce3ba5c914fdf
;;;","2022-07-07 10:56;dcubed;[~mseledtsov]- No flags necessary. In addition to moving the code that was
incorrectly accessing the oop after the GC barrier was detached, I also adding
a guarantee() that would fire if the bug still existed. So all you have to do is
run the runtime/Thread/ThreadObjAccessAtExit.java test. If it doesn't fail, then
the bug no longer exists.;;;","2022-07-07 14:31;mseledtsov;Thank you Dan.;;;","2023-06-29 10:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1515
Date: 2023-06-29 17:07:21 +0000;;;",,,,,,,,,,,,,,,
The set of available printers is not updated without application restart,JDK-8288137,5076645,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2022-06-09 12:00,2022-07-18 16:28,2023-10-01 09:56,2022-07-14 13:05,jfx19,,,,,,jfx19,javafx,,0,sn_122,,,,,,,,,,,,,,,,,"Although printers may be added or removed whilst an application is running,
these changes are not reflected in the set of printers returned by
javafx.print.Printer.getAllPrinters()

https://openjfx.io/javadoc/17/javafx.graphics/javafx/print/Printer.html#getAllPrinters()

Since the current implementation sits on Java2D printing, and that listens for Windows messages (in native code) informing it of printer changes, then Java 2D's list is updated, then the updated list is available. However 2D does not provide a public notification of the change, so OpenJFX will need to re-query and compare.",,,,,,,,,,JDK-8290247,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xf0j:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-07-08 13:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/817
Date: 2022-07-07 22:23:55 +0000;;;","2022-07-14 13:04;kcr;Changeset: b9a1ec5d
Author: Phil Race <prr@openjdk.org>
Date: 2022-07-13 16:02:44 +0000
URL: https://git.openjdk.org/jfx/commit/b9a1ec5dc369f0f207c0d66557698a05ee4f52f5;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update test artifacts in QuoVadis CA interop tests,JDK-8288132,5076639,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rhalade,rhalade,rhalade,2022-06-09 10:21,2023-01-04 06:08,2023-10-01 09:56,2022-06-10 08:04,19,,,,,,20,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,noreg-self,,,,,,,,,,"Updated test certificates are available at - 

https://www.quovadisglobal.com/download-roots-crl/

Note that test will continue to fail intermittently due to what appears to be an issue on CA side. JDK-8277855 will track this.",,,,,,,,,,JDK-8299598,JDK-8296669,JDK-8297076,JDK-8298451,JDK-8296667,JDK-8296668,JDK-8288354,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277855,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xez7:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-06-09 10:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9110
Date: 2022-06-09 17:31:29 +0000;;;","2022-06-10 08:04;dukebot;Changeset: 3ee1e605
Author:    Rajan Halade <rhalade@openjdk.org>
Date:      2022-06-10 15:01:19 +0000
URL:       https://git.openjdk.org/jdk/commit/3ee1e60595171be0dd8bda47d96e0a1268cdc461
;;;","2022-11-03 12:08;clanger;Fix request (19u, 17u, 11u):
Request to backport this test-only fix. We see issues in SAP's nightly tests which we want to get fixed. Patch applies cleanly. Tested in GHA and SAP nightlies.;;;","2022-11-03 12:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/61
Date: 2022-11-03 19:06:28 +0000;;;","2022-11-03 12:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/856
Date: 2022-11-03 19:22:30 +0000;;;","2022-11-03 13:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1498
Date: 2022-11-03 20:06:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler error with AP and explicit record accessor,JDK-8288130,5076632,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-06-09 09:20,2023-02-27 15:40,2023-10-01 09:56,2022-06-24 14:45,19,20,,,,,20,tools,,0,javac-record,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"Our team at Minecraft Forge (a modding platform for Minecraft: Java Edition) recently found a compiler bug regarding records, type parameters, and explicit types while trying to implement a new feature. I'm led to believe that this is the appropriate place to at least publicize and discuss this compiler-related issue. If not, please point me in the appropriate place to report this, thank you.

In summary, an explicitly declared accessor method for a record component whose type is a type parameter of the record fails to compile only when an annotation processor is present during compilation. Removal of the explicit accessor or the annotation processor(s) makes the class compile as expected.

We've assembled a small reproducible case for this issue:


    import javax.annotation.processing.AbstractProcessor;
    import javax.annotation.processing.RoundEnvironment;
    import javax.lang.model.element.TypeElement;
    import java.util.Set;

    public class EmptyProcessor extends AbstractProcessor {
        @Override
        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
            return false;
        }
    }

    public record TestRecord<T>(T someValue) {
        public T someValue() {
            return this.someValue;
        }
    }

Put each snippet into the source files `EmptyProcessor.java` and `TestRecord.java` respectively, compile the AP class using `javac EmptyProcessor.java`, and try to compile the record class with the AP present using `javac -processor EmptyProcessor TestRecord.java`. The warnings about the processor's lack of source version and supported annotations can be safely ignored (we used them to confirm that the annotation processor is present). Here is the output from running the above on Java 17:

    D:\Dev\Sandbox\javacbug> javac -processor EmptyProcessor TestRecord.java
    warning: No SupportedSourceVersion annotation found on EmptyProcessor, returning RELEASE_6.
    warning: Supported source version 'RELEASE_6' from annotation processor 'EmptyProcessor' less than -source '17'
    warning: No SupportedAnnotationTypes annotation found on EmptyProcessor, returning an empty set.
    TestRecord.java:3: error: invalid accessor method in record TestRecord
        public T someValue() {
                 ^
      (return type of accessor method someValue() must match the type of record component someValue)
      where T is a type-variable:
        T extends Object declared in record TestRecord
    1 error
    3 warnings

We've tested this on Windows against Java 16, 17, 18, as well as the 19 EA (build 25, 2022/6/2), all reference implementations from jdk.java.net, as well as the latest Java 17 for Eclipse Temurin (17.0.3_7) and the test case fails on all those versions. We've also tested this against the Eclipse Compiler for Java, and it compiles successfully both with and without the presence of the AP.

as reported in compiler-dev: https://mail.openjdk.java.net/pipermail/compiler-dev/2022-June/019956.html ",,,,,,,,,,JDK-8297615,JDK-8299364,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284255,JDK-8300403,,,,,,,JDK-8301571,JDK-8300403,JDK-8289647,JCK-7317880,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xexn:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-06-09 11:23;vromero;a small variation of the test:

    public record TestRecord<T>(List<T> someValue) {
        public List<T> someValue() {
            return this.someValue;
        }
    }

see the `List<T>`, also fails, the problem is that in every annotations processing iteration the type arguments are recreated but a record component having a type that contains any of the type arguments will point to an ""old"" version of that type argument and thus the compiler will fail. The solution is to recreate the record component with every annotations processing iteration.;;;","2022-06-14 17:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9160
Date: 2022-06-15 00:01:37 +0000;;;","2022-06-24 14:45;dukebot;Changeset: 53b37fe1
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2022-06-24 21:42:23 +0000
URL:       https://git.openjdk.org/jdk/commit/53b37fe1535388eb14e04c620a6b0118ed8884a0
;;;","2022-12-22 06:20;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Low risk. Fix to javac, will not break a running application. Should also not affect files compiling already with javac.
Clean backport.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2022-12-22 06:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/971
Date: 2022-12-22 14:18:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Skynet test crashed with iu + aggressive,JDK-8288129,5076631,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,adinn,zgu,zgu,2022-06-09 08:31,2022-09-26 09:45,2023-10-01 09:56,2022-09-21 07:30,19,20,,,,,20,hotspot,,0,gc-shenandoah,loom,,,,,,,,,,,,,,,,"#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/zgu/ws/jdk/src/hotspot/share/gc/shenandoah/shenandoahHeap.inline.hpp:126), pid=37776, tid=37792
#  Error: Shenandoah assert_forwarded failed; Object should be forwarded

Referenced from:
  interior location: 0x0000000614a00028
  inside Java heap
    not in collection set
  region: |    4|R  |BTE    614a00000,    614c00000,    614c00000|TAMS    614a00000|UWM    614c00000|U  2048K|T  2048K|G     0B|S     0B|L  2048K|CP   0

Object:
  0x000000061660bd90 - klass 0x0000000800036a38 jdk.internal.vm.StackChunk
    not allocated after mark start
    not after update watermark
    not marked strong
    not marked weak
        in collection set
  mark: mark(is_neutral no_hash age=0)
  region: |   18|CS |BTE    616600000,    616800000,    616800000|TAMS    616800000|UWM    616800000|U  2048K|T  2048K|G     0B|S     0B|L 52624B|CP   0

Forwardee:
  (the object itself)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288139,JDK-8287227,,,,,,,,,,,,,,,,,,JDK-8290250,,,,,,,"2022-06-09 08:31;zgu;hs_err_pid37776.log;https://bugs.openjdk.org/secure/attachment/99460/hs_err_pid37776.log",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xexf:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-07-14 07:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9494
Date: 2022-07-14 13:54:35 +0000;;;","2022-08-23 08:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9982
Date: 2022-08-23 15:05:48 +0000;;;","2022-08-30 17:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10089
Date: 2022-08-30 23:40:32 +0000;;;","2022-09-21 07:30;dukebot;Changeset: 84d7ff64
Author:    Ashutosh Mehra <asmehra@redhat.com>
Committer: Andrew Dinn <adinn@openjdk.org>
Date:      2022-09-21 14:28:02 +0000
URL:       https://git.openjdk.org/jdk/commit/84d7ff64d86388cc60cd8257b7b1fb5a6e8c6804
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
S390X: Fix crashes after JDK-8284161 (Virtual Threads),JDK-8288128,5076630,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,tsteele,shade,shade,2022-06-09 08:04,2023-03-07 14:34,2023-10-01 09:56,2022-07-05 14:12,19,,,,,,19,hotspot,,0,loom,oraclejdk-na,,,,,,,,,,,,,,,,"Similar to other architectures, the S390X interpreter parts should not be entered with `!Continuations::enabled()`. 

Current builds on S390X crash with:

05:51:17  Compiling 4 files for BUILD_JIGSAW_TOOLS
05:51:26  Optimizing the exploded image
05:51:26  #
05:51:26  # A fatal error has been detected by the Java Runtime Environment:
05:51:26  #
05:51:26  #  Internal Error (templateInterpreterGenerator_s390.cpp:486), pid=60413, tid=60418
05:51:26  #  Error: Unimplemented()
05:51:26  #
05:51:26  # JRE version:  (19.0+25) (build )
05:51:26  # Java VM: OpenJDK 64-Bit Server VM (19-beta+25-202206090332, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-s390x)
05:51:26  # Problematic frame:
05:51:26  # V  [libjvm.so+0xaf9308]  TemplateInterpreterGenerator::generate_Continuation_doYield_entry()+0x30

",,,,,,,,,,JDK-8291223,JDK-8291386,JDK-8289867,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284161,JDK-8286300,JDK-8225652,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xex7:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-06-29 02:38;alanb;Assigning to Tyler for now as he seems to have a draft PR.;;;","2022-07-05 10:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/110
Date: 2022-07-05 17:38:32 +0000;;;","2022-07-05 14:12;dukebot;Changeset: 0b6fd482
Author:    Tyler Steele <tsteele@openjdk.org>
Date:      2022-07-05 21:11:50 +0000
URL:       https://git.openjdk.org/jdk19/commit/0b6fd4820c1f98d6154d7182345273a4c9468af5
;;;","2022-12-23 13:21;dcubed;According to the PR, the changes were tested with a
successful ""make images"" so the build no longer crashed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update JIRA link in vcs.xml,JDK-8288114,5076614,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-06-09 05:53,2022-06-22 23:51,2023-10-01 09:56,2022-06-13 07:28,,,,,,,20,infrastructure,,0,ide-support,,,,,,,,,,,,,,,,,"JBS is now at https://bugs.openjdk.org/, update the IntelliJ IDEA template with the new address.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284720,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xetn:",9223372036854775807,b02,,,,,,,,,,,"2022-06-10 10:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9130
Date: 2022-06-10 17:11:41 +0000;;;","2022-06-13 07:52;dukebot;Changeset: b97a4f6c
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-06-13 14:48:52 +0000
URL:       https://git.openjdk.org/jdk/commit/b97a4f6cdcd5e497ab901e68923666e493414825
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: Error: ShouldNotReachHere() in Type::typerr(),JDK-8288112,5076612,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbhateja,chagedorn,chagedorn,2022-06-09 05:34,2023-03-30 12:52,2023-10-01 09:56,2022-07-13 18:48,19,,,,,,19,hotspot,,0,c2,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-19,regression,vectorapi,,,,,,,,,,,"The attached Java Fuzzer test fails after JDK-8284960 (Ihe integration of JEP 426: Vector API (Fourth Incubator)):

To reproduce

$ javac FuzzerUtils.java 
$ java -Xcomp -XX:CompileOnly=Test Test.java
$ java -Xcomp -XX:CompileOnly=Reduced Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S66862/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e7a5f059-99c2-4c80-b089-a6e1a468a184/runs/f86e41f7-d216-4fe3-8825-70c90f059250/workspace/open/src/hotspot/share/opto/type.cpp:1164), pid=12242, tid=12255
#  Error: ShouldNotReachHere()
#
# JRE version: Java(TM) SE Runtime Environment (19.0+25) (fastdebug build 19-ea+25-1892)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+25-1892, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1a9c469]  Type::typerr(Type const*) const+0x79
...........
Command Line: -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet Test
...........
Current CompileTask:
C2:    311   14    b  4       Test::vMeth1 (262 bytes)

Stack: [0x00007fe8656d2000,0x00007fe8657d3000],  sp=0x00007fe8657cd4d0,  free space=1005k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1a9c469]  Type::typerr(Type const*) const+0x79
V  [libjvm.so+0x1a9ebbb]  TypeVect::xmeet(Type const*) const+0x1eb
V  [libjvm.so+0x1aa3e93]  Type::meet_helper(Type const*, bool) const+0x73
V  [libjvm.so+0x63bfd9]  AddNode::add_of_identity(Type const*, Type const*) const+0x39
V  [libjvm.so+0x63c1f8]  AddNode::Value(PhaseGVN*) const+0xe8
V  [libjvm.so+0x17bd373]  PhaseIterGVN::transform_old(Node*)+0x233
V  [libjvm.so+0x17b64ee]  PhaseIterGVN::optimize()+0x6e
V  [libjvm.so+0xae290a]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x65a
V  [libjvm.so+0xaded57]  Compile::Optimize()+0x1027
V  [libjvm.so+0xae0ee0]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1520
V  [libjvm.so+0x8f826a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x62a
V  [libjvm.so+0xaef9a8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xbb8
V  [libjvm.so+0xaf0998]  CompileBroker::compiler_thread_loop()+0x6f8
V  [libjvm.so+0x1a6c1ac]  JavaThread::thread_main_inner()+0x23c
V  [libjvm.so+0x1a77690]  Thread::call_run()+0x100
V  [libjvm.so+0x1729454]  thread_native_entry(Thread*)+0x104
",,,,,,,,,,JDK-8290319,JDK-8291434,JDK-8291309,,,,,,,,,,,,,,,,,,,,,,,JDK-8288903,,,,,,,,JDK-8284960,,,,JDK-8290034,JDK-8305324,,,,,,"2022-06-09 06:09;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/99455/FuzzerUtils.java","2022-06-09 06:15;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/99456/Reduced.java","2022-07-05 08:33;chagedorn;Reduced2.java;https://bugs.openjdk.org/secure/attachment/99830/Reduced2.java","2022-06-09 06:09;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/99454/Test.java","2022-06-09 06:09;chagedorn;hs_err_pid12242.log;https://bugs.openjdk.org/secure/attachment/99453/hs_err_pid12242.log",,,,,,,,,,,,,,b25,19,,,,,,,"0|i2xet7:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-09 05:46;chagedorn;ILW = C2 assertion in AddNode::Value() with vectors, single Java fuzzer test, workaround: -XX:DisableIntrinsic=_reverseBytes_i = HLM = P3;;;","2022-06-09 12:48;psandoz;Confirming I can reproduce for commit https://github.com/openjdk/jdk/commit/6f6486e97743eadfb20b4175e1b4b2b05b59a17a, and it does not reproduce for the parent commit.;;;","2022-06-27 04:47;chagedorn;Comments from JDK-8288903 from Dean:

Error mixing types: vectory[8]:{int} and int:0

The assert is because AddI(LoadI, ConI) is replaced with AddI(LoadVector, ConI) and then AddNode::add_of_identity() causes TypeVect::xmeet() to be called with types vectory[8]:{int} and int:0.

I'm not an expert on this code, but I think the problem is ReverseBytesV was introduced, but SuperWord::output() does not recognize Op_ReverseBytes{I,L,S,US}. There may be a similar problem with ReverseV and Reverse{I,L}.;;;","2022-07-05 08:34;chagedorn;Found and attached another fuzzer failure (Reduced2.java) which is probably the same issue but with a different manifestation:

$ java -Xcomp -XX:CompileOnly=Reduced2 Reduced2.java

Crashes with:
assert(_base == Int) failed: Not an Int;;;","2022-07-08 15:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/128
Date: 2022-07-08 21:57:33 +0000;;;","2022-07-13 18:48;dukebot;Changeset: fd89ab8d
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2022-07-14 01:46:11 +0000
URL:       https://git.openjdk.org/jdk19/commit/fd89ab8dacda1d6af5bd4be57a83362c8cdd5e20
;;;","2022-07-18 03:37;thartmann;Another failure mode that triggered with a recent JavaFuzzer generated test:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (workspace/open/src/hotspot/share/opto/type.hpp:1807), pid=47415, tid=47428
#  assert(_base == FloatCon) failed: Not a FloatCon
#
# JRE version: Java(TM) SE Runtime Environment (20.0+7) (fastdebug build 20-ea+7-317)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+7-317, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x19ce35c]  SubFNode::sub(Type const*, Type const*) const+0x9c

Current CompileTask:
C2:    169   74   !b  4       Test::mainTest (779 bytes)

Stack: [0x00007f0ba6e83000,0x00007f0ba6f84000],  sp=0x00007f0ba6f7e540,  free space=1005k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x19ce35c]  SubFNode::sub(Type const*, Type const*) const+0x9c
V  [libjvm.so+0x17d7763]  PhaseIterGVN::transform_old(Node*)+0x233
V  [libjvm.so+0x17d083e]  PhaseIterGVN::optimize()+0x6e
V  [libjvm.so+0xb12cfa]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x65a
V  [libjvm.so+0xb0f0a7]  Compile::Optimize()+0x1027
V  [libjvm.so+0xb112d0]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x15c0
V  [libjvm.so+0x921593]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x683
V  [libjvm.so+0xb20048]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xbb8
V  [libjvm.so+0xb21008]  CompileBroker::compiler_thread_loop()+0x6c8
V  [libjvm.so+0x106d3a8]  JavaThread::thread_main_inner()+0x238
V  [libjvm.so+0x1a8bee0]  Thread::call_run()+0x100
V  [libjvm.so+0x174f014]  thread_native_entry(Thread*)+0x104

I verified that this patch fixes the issue.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
HttpExchangeImpl.setAttribute does not allow null value after JDK-8266897,JDK-8288109,5076608,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,djelinski,forax,forax,2022-06-09 04:59,2023-07-21 07:35,2023-10-01 09:56,2023-04-03 07:58,,,,,,,21,core-libs,,0,regression,,,,,,,,,,,,,,,,,"The code of the HTTPServer was changed in Java 17, among the change a ConcurrentHashMap is now used to store the attributes of the HttpExchange.
The problem is that ConcurrentHashMap.put() does not allow the value to be null while the spec does not say that the value of an attribute can not be null.

To reproduce, this code works with Java 8 up to Java 16 but fails with Java 17+.
import com.sun.net.httpserver.HttpServer;

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.nio.charset.StandardCharsets;

public class HttpServerRegression {
  public static void main(String[] args) throws IOException {
    HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);
    server.createContext(""/"", exchange -> {
      System.err.println(""request "" + exchange.getRequestMethod() + "" "" + exchange.getRequestURI());
      try {
        exchange.setAttribute(""status"", null);  // throw a NPE if Java  version >= 17 

        byte[] bytes = ""<h2>Hello</h2>"".getBytes(StandardCharsets.UTF_8);
        exchange.sendResponseHeaders(200, bytes.length);
        try(OutputStream body = exchange.getResponseBody()) {
          body.write(bytes);
        }
      } catch(Exception e) {
        e.printStackTrace();
        throw e;
      }
    });
    server.setExecutor(null);
    server.start();
  }
}

Here is the error message:
java.lang.NullPointerException
        at java.base/java.util.concurrent.ConcurrentHashMap.putVal(ConcurrentHashMap.java:1011)
        at java.base/java.util.concurrent.ConcurrentHashMap.put(ConcurrentHashMap.java:1006)
        at jdk.httpserver/sun.net.httpserver.ExchangeImpl.setAttribute(ExchangeImpl.java:381)
        at jdk.httpserver/sun.net.httpserver.HttpExchangeImpl.setAttribute(HttpExchangeImpl.java:105)
        at HttpServerRegression.lambda$main$0(HttpServerRegression.java:14)
        at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:95)
        at jdk.httpserver/sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:82)
        at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:98)
        at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:728)
        at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:95)
        at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:695)
        at jdk.httpserver/sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:159)
        at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:447)
        at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:413)
        at java.base/java.lang.Thread.run(Thread.java:833)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266897,,,,,,,,,,,,,,,,,,,generic,,,,,,,17,,generic,,,,,"0|i2xesb:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-03-31 02:19;djelinski;The spec [1] explicitly says:
value - the object to store as the attribute value. null value is permitted.

Adding regression label.

[1] https://docs.oracle.com/en/java/javase/17/docs/api/jdk.httpserver/com/sun/net/httpserver/HttpExchange.html#setAttribute(java.lang.String,java.lang.Object);;;","2023-03-31 04:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13264
Date: 2023-03-31 10:35:27 +0000;;;","2023-04-03 07:58;dukebot;Changeset: f9827ad1
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-04-03 14:57:03 +0000
URL:       https://git.openjdk.org/jdk/commit/f9827ad17205ad1cec21bf76f8553f415439b38b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[PPC64] Problems with -XX:+VerifyStack,JDK-8288105,5076604,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mdoerr,mdoerr,2022-06-09 03:57,2023-01-05 08:33,2023-10-01 09:56,2022-06-13 07:46,19,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,"VM crashes with ""guarantee(last != NULL) failed: last may not be null"" when running with -XX:+VerifyStack after JDK-8284161 (debug build only).

Can be reproduced in tests like:
compiler/c2/cr6589834/Test_ia32.java
testlibrary_tests/ir_framework/tests/TestDFlags.java
compiler/uncommontrap/TestDeoptOOM.java
compiler/interpreter/TestVerifyStackAfterDeopt.java
compiler/interpreter/VerifyStackWithUnreachableBlock.java

Stack frames get analyzed in Deoptimization::unpack_frames which is a JRT_LEAF function. That doesn't work reliably in general and currently doesn't work on PPC64 because the deoptimization and uncommon trap stubs don't set the last Java PC to where the OopMaps are.
",,,,,,,,,,JDK-8288375,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286302,JDK-8299683,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,"0|i2xerf:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-10 03:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/3
Date: 2022-06-10 10:29:52 +0000;;;","2022-06-13 07:46;dukebot;Changeset: 7aafc69a
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-06-13 14:42:49 +0000
URL:       https://git.openjdk.org/jdk19/commit/7aafc69a96cc5c2899d9930bcb81ae4cd0319d5c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
False build warning-as-error with GCC 9 after JDK-8214976,JDK-8288101,5076600,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,mdoerr,mdoerr,2022-06-09 02:31,2022-06-22 23:55,2023-10-01 09:56,2022-06-10 10:08,19,,,,,,19,hotspot,,0,regression,,,,,,,,,,,,,,,,,"gcc version 9.4.0 (also 9.3.1) produces build warning after JDK-8214976:

os_posix.cpp:786:34: error: call to 'exit' declared with attribute warning: use os::exit [-Werror=attribute-warning]
  786 |   ALLOW_C_FUNCTION(::exit, ::exit(num);)
      |                            ~~~~~~^~~~~

Workaround: Use configure flag --disable-warnings-as-errors
",,,,,,,,,,JDK-8288374,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8214976,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2xeqj:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-09 05:43;jwaters;Interestingly this seems to differ slightly from the issue I'm currently facing; This errors due to a warning attribute, while mine fails mid build due to ""conflicting declaration of <name here> with 'C' linkage"" with a note of ""previous declaration with 'C++' linkage"" appended afterwards. I can't really figure out what's going on here unfortunately :(;;;","2022-06-09 07:37;shade;Fails for me with GCC 9.4.0. Passes with GCC 10.2.1. Looks like a GCC 9 specific thing?;;;","2022-06-09 07:43;shade;Nuclear option is to only enable these macros on GCC >= 10:

diff --git a/src/hotspot/share/utilities/compilerWarnings_gcc.hpp b/src/hotspot/share/utilities/compilerWarnings_gcc.hpp
index 1636ad48fba..782865d9461 100644
--- a/src/hotspot/share/utilities/compilerWarnings_gcc.hpp
+++ b/src/hotspot/share/utilities/compilerWarnings_gcc.hpp
@@ -69,7 +69,7 @@
 
 #endif // clang/gcc version check
 
-#if (__GNUC__ >= 9) || (defined(__clang_major__) && (__clang_major__ >= 14))
+#if (__GNUC__ >= 10) || (defined(__clang_major__) && (__clang_major__ >= 14))
 
 // Use ""warning"" attribute to detect uses of ""forbidden"" functions.
 //
;;;","2022-06-09 07:52;jwaters;It still fails for me on gcc 11.2 though- I can't tell if this is also an issue for 11 and above;;;","2022-06-09 07:56;shade;Experimenting with godbolt: https://godbolt.org/z/Ybr9fb63e:
 - GCC 9 fails with the warning above, in all minor releases;
 - GCC 10 and up successfully disable the warning;;;;","2022-06-09 07:57;shade;Julian, please try to ""rm -rf build/"", and do clean reconfigure/build.;;;","2022-06-09 08:01;jwaters;Did try to do that, but it doesn't seem to work :/
Does it properly build with 11 on your end? If so this might be something on my end causing this; After all the underlying errors seem to be slightly different (On my end it's FORBID_C_FUNCTION that's causing the fuss). I'll create a PR for this in the meantime if changing it from 9 to 10 is the best solution;;;","2022-06-09 08:15;shade;I just did the full build (""make clean images"") on GCC 10.2.1, and it passed fine for both Linux x86_64 fastdebug and release. Your issue seems to be a different one, please open a separate bug, so we don't confuse the two? You might need to provide full details on the build environment there.;;;","2022-06-09 08:18;jwaters;Alright, got it!;;;","2022-06-09 08:49;shade;Kim, would you agree bumping the check to GCC >= 10 is a sensible workaround here? I played with Godbolt (https://godbolt.org/z/Ybr9fb63e), and I believe this is just a GCC 9 compiler bug with nesting pragmas and macros :/ If so, I'll submit my PR against JDK 19, once it forks.;;;","2022-06-09 09:12;kbarrett;[~shade] Yes, bumping the test to 10 is fine.  I used 9 based on documentation - I don't have easy access for testing.  From the discussion above it sounds though like the issue is a bug in _Pragma handling?  Sigh.

;;;","2022-06-09 09:15;jwaters;[~shade] I've already submitted a PR for this - It does seem to be taking some time for Skara to properly process it though, so it may take a while;;;","2022-06-09 09:16;kbarrett;[~jwaters] Please let me know what the bug is for your issue.  (Linking to JDK-8214976 will do.) That sounds like something I was seeing on Windows that led to abandoning the attempt to support this feature there.

;;;","2022-06-09 09:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9108
Date: 2022-06-09 15:36:56 +0000;;;","2022-06-09 09:28;shade;Julian, the key is to submit it against JDK 19, as the repo just forked for RDP1. Please let me do this.;;;","2022-06-09 09:30;jwaters;Alright, I'll delete my branch in that case;;;","2022-06-09 09:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9109
Date: 2022-06-09 16:07:34 +0000;;;","2022-06-09 09:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/1
Date: 2022-06-09 16:35:54 +0000;;;","2022-06-09 20:50;jwaters;Kim, I'm not sure if it's worth creating a new issue in my case, since I'm compiling for Windows. Seems like Visual C++ and gcc somehow share the same issue with conflicting C/C++ linkage when Windows is the target OS. Might be a CRT thing, least that's what it sounds like to me;;;","2022-06-10 10:08;dukebot;Changeset: d9c1364d
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-06-10 17:07:20 +0000
URL:       https://git.openjdk.org/jdk19/commit/d9c1364ddecde7e56e165b86e55dc23bda4ff921
;;;",,,,,,,,,,,,,
[lworld] C2 fails to scalarize value class arguments,JDK-8288098,5076596,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2022-06-09 01:58,2022-06-09 06:10,2023-10-01 09:56,2022-06-09 06:10,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,c2,lw4,lworld,performance,,,,,,,,,,,,,,C2 fails to scalarize value class arguments if their types match the method holder type. The problem is that we check for the preload attribute which won't be there if the holder class equals the type of the argument.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278390,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xepn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-09 04:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/709
Date: 2022-06-09 11:49:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lw4] Tier1 hotspot runtime test ClassHierarchyTest.java fails,JDK-8288084,5076575,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-06-08 22:12,2022-06-08 23:24,2023-10-01 09:56,2022-06-08 23:24,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lw4,,,,,,,,,,,,,,,,,"The test is still expecting IdentityObject in the class hierarchy.
The changes made for JDK-8245216 need to be reversed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xekz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-08 23:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/707
Date: 2022-06-09 06:14:56 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure due to __clang_major__ is not defined after JDK-8214976,JDK-8288082,5076572,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-06-08 16:31,2022-06-09 22:39,2023-10-01 09:56,2022-06-08 17:08,19,,,,,,19,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,"Build failure was observered when build on a machine without clang.
```
* For target hotspot_variant-server_libjvm_objs_precompiled_precompiled.hpp.gch:
In file included from /root/jdk/src/hotspot/share/utilities/compilerWarnings.hpp:32,
                 from /root/jdk/src/hotspot/share/utilities/globalDefinitions.hpp:28,
                 from /root/jdk/src/hotspot/share/memory/allocation.hpp:29,
                 from /root/jdk/src/hotspot/share/classfile/classLoaderData.hpp:28,
                 from /root/jdk/src/hotspot/share/precompiled/precompiled.hpp:34:
/root/jdk/src/hotspot/share/utilities/compilerWarnings_gcc.hpp:66:25: error: ""__clang_major__"" is not defined, evaluates to 0 [-Werror=undef]
 #if (__GNUC__ >= 9) || (__clang_major__ >= 14)
                         ^~~~~~~~~~~~~~~
cc1plus: all warnings being treated as errors
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8214976,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xekb:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-08 16:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9096
Date: 2022-06-08 23:36:59 +0000;;;","2022-06-08 17:08;dukebot;Changeset: a941bc2d
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-06-09 00:01:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a941bc2de674fdd77cdbbdf3641309fc39bfc0c4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fc) FileChannel::map for MemorySegments should state it always throws UOE,JDK-8288080,5076570,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-06-08 16:06,2022-07-27 05:44,2023-10-01 09:56,2022-06-13 15:52,19,,,,,,20,core-libs,,0,hgupdate-sync,noreg-doc,,,,,,,,,,,,,,,,"The new method

FileChannel.map(FileChannel.MapMode,long,long,MemorySessionPREVIEW)

always throws UnsupportedOperationException but this is not explicitly documented. ",,,,,,,,,,JDK-8289100,JDK-8291316,JDK-8291146,,,,,,,,,,,,,,,,,,,JDK-8288081,,,,,,,,,,,,JDK-8286735,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xejv:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-06-08 16:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9095
Date: 2022-06-08 23:33:29 +0000;;;","2022-06-13 15:52;dukebot;Changeset: a9c2ab67
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-06-13 22:47:13 +0000
URL:       https://git.openjdk.org/jdk/commit/a9c2ab67c44872ce0247aef6bf972bf4246b44be
;;;","2022-06-23 15:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/63
Date: 2022-06-23 22:43:01 +0000;;;","2022-06-27 11:33;dukebot;Changeset: 651cbebb
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-06-23 22:57:35 +0000
URL:       https://git.openjdk.org/jdk/commit/651cbebb96fc60e5db48ea68d38cbeb76b007550
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
linux-aarch64-optimized build fails in Tier5 after JDK-8287567,JDK-8288078,5076566,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aph,dcubed,dcubed,2022-06-08 14:31,2022-06-20 04:07,2023-10-01 09:56,2022-06-09 07:16,19,,,,,,19,hotspot,,0,loom,noreg-build,oracle-triage-11,oracle-triage-17,oracle-triage-19,tier5,,,,,,,,,,,,"The optimized build target is failing:

[2022-06-08T00:38:35,343Z] Creating hotspot/variant-server/libjvm/gtest/gtestLauncher from 1 file(s)
[2022-06-08T00:40:46,792Z] /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S68348/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0ffdfe79-50dc-4730-b539-aba20331b8c9/runs/2ac771fb-8212-4747-a4df-be7f6955d821/workspace/open/src/hotspot/cpu/aarch64/nativeInst_aarch64.cpp:553:13: error: 'bool is_movk_to_zr(uint32_t)' defined but not used [-Werror=unused-function]
[2022-06-08T00:40:46,795Z]   553 | static bool is_movk_to_zr(uint32_t insn) {
[2022-06-08T00:40:46,795Z]       |             ^~~~~~~~~~~~~
[2022-06-08T00:40:47,110Z] cc1plus: all warnings being treated as errors
[2022-06-08T00:40:47,146Z] lib/CompileJvm.gmk:146: recipe for target '/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S68348/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0ffdfe79-50dc-4730-b539-aba20331b8c9/runs/2ac771fb-8212-4747-a4df-be7f6955d821/workspace/build/linux-aarch64-optimized/hotspot/variant-server/libjvm/objs/nativeInst_aarch64.o' failed
[2022-06-08T00:40:47,146Z] make[3]: *** [/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S68348/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0ffdfe79-50dc-4730-b539-aba20331b8c9/runs/2ac771fb-8212-4747-a4df-be7f6955d821/workspace/build/linux-aarch64-optimized/hotspot/variant-server/libjvm/objs/nativeInst_aarch64.o] Error 1
[2022-06-08T00:40:47,146Z] make[3]: *** Waiting for unfinished jobs....
[2022-06-08T00:40:51,553Z] make/Main.gmk:252: recipe for target 'hotspot-server-libs' failed
[2022-06-08T00:40:51,553Z] make[2]: *** [hotspot-server-libs] Error 2
[2022-06-08T00:40:51,554Z] 
[2022-06-08T00:40:51,554Z] ERROR: Build failed for target 'default (hotspot)' in configuration 'linux-aarch64-optimized' (exit code 2)


The function that is being complained about (is_movk_to_zr) was added by:

    JDK-8287567 AArch64: Implement post-call NOPs",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287567,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2xeiz:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-08 16:53;dlong;ILW = broken build regression; always; no workaround = MHH = P3;;;","2022-06-08 22:23;thartmann;[~aph] please have a look.;;;","2022-06-09 02:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9103
Date: 2022-06-09 09:33:24 +0000;;;","2022-06-09 07:16;dukebot;Changeset: db4405d0
Author:    Andrew Haley <aph@openjdk.org>
Date:      2022-06-09 14:13:05 +0000
URL:       https://git.openjdk.org/jdk/commit/db4405d0f880dd43dc7da0b81bc2da2619d315b0
;;;","2022-06-09 07:26;dcubed;[~alanb] - I tagged this bug with 'loom' because the fix that
introduced the build error is tagged with 'loom'. So JDK-8287567
was a Loom related fix and this is a follow on to that fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc contains spurious reference to CLinker,JDK-8288068,5076556,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-06-08 14:06,2022-06-09 22:39,2023-10-01 09:56,2022-06-08 17:03,19,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"Both Linker class and toplevel javadoc of foreign package contain spurious reference to ""CLinker"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xegr:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-06-08 14:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9094
Date: 2022-06-08 21:07:13 +0000;;;","2022-06-08 17:03;dukebot;Changeset: 65f0829d
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-06-08 23:58:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/65f0829d645fd988c6a208622b1f34bf9de08e60
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Broken links on constant-values page,JDK-8288058,5076543,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-06-08 11:35,2022-07-27 09:47,2023-10-01 09:56,2022-06-28 08:59,18,,,,,,19,tools,,0,javadoc-broken-links,,,,,,,,,,,,,,,,,"There seem to be broken links, perhaps to packages with no constant values, on the constant-values.html page

api/constant-values.html#com.sun
api/constant-values.html#java.nio
api/constant-values.html#java.rmi
api/constant-values.html#javax.net
api/constant-values.html#javax.security
api/constant-values.html#javax.sound
api/constant-values.html#javax.sql
api/constant-values.html#javax.transaction
api/constant-values.html#jdk.management
api/constant-values.html#org.ietf
api/constant-values.html#org.w3c
api/constant-values.html#org.xml",,,,,,,,,,JDK-8291355,JDK-8291200,JDK-8289416,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xedv:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-06-14 10:04;jjg;There are (at least) two issues here.

1. There is what may be a typo in the following code:

    protected void buildPackageHeader(Content target) {
        PackageElement abbrevPkg = configuration.workArounds.getAbbreviatedPackageElement(currentPackage);
        if (!printedPackageHeaders.contains(abbrevPkg)) {
            writer.addPackageName(currentPackage, target, first);   <<<<<<<< currentPackage should be abbrevPkg
            printedPackageHeaders.add(abbrevPkg);
        }
    }


2. More significantly, the use of `PackageElement` to represent the abbreviated package headers is fundamentally flawed, at least in a modular environment ... because the packages returned by configuration.workArounds.getAbbreviatedPackageElement use the module element for currentPackage as the enclosing element for the result. Thus, packages with the same abbreviated name will not compare appropriately in the test for printedPackageHeaders.contains.;;;","2022-06-14 20:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9162
Date: 2022-06-15 03:19:57 +0000;;;","2022-06-23 12:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/62
Date: 2022-06-23 19:35:43 +0000;;;","2022-06-28 08:59;dukebot;Changeset: c42b796f
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-06-28 15:58:12 +0000
URL:       https://git.openjdk.org/jdk19/commit/c42b796f91eace68a08d7ef8d22552228d1711e1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Loom: Extend the compilation warning workaround in stack chunk copy,JDK-8288051,5076536,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-06-08 11:02,2022-06-09 22:40,2023-10-01 09:56,2022-06-08 22:53,19,,,,,,19,hotspot,,0,loom,,,,,,,,,,,,,,,,,"Current builds fail on some newer GCCs and some arches. There is already a workaround in place in one copy method, we need the workaround in another one too. I took a brief look if we could dispense with this workaround altogether, but that does not seem to be straight-forward for JDK 19 timeframe.

```
* For target hotspot_variant-server_libjvm_objs_continuationFreezeThaw.o:
In file included from /home/buildbot/shipilev-jdk/src/hotspot/share/classfile/javaClasses.inline.hpp:36,
                 from /home/buildbot/shipilev-jdk/src/hotspot/share/runtime/continuationFreezeThaw.cpp:26:
In member function 'void stackChunkOopDesc::copy_from_stack_to_chunk(intptr_t*, intptr_t*, int)',
    inlined from 'void FreezeBase::copy_to_chunk(intptr_t*, intptr_t*, int)' at /home/buildbot/shipilev-jdk/src/hotspot/share/runtime/continuationFreezeThaw.cpp:499:34,
    inlined from 'freeze_result FreezeBase::recurse_freeze_stub_frame(frame&, frame&)' at /home/buildbot/shipilev-jdk/src/hotspot/share/runtime/continuationFreezeThaw.cpp:1168:16:
/home/buildbot/shipilev-jdk/src/hotspot/share/oops/stackChunkOop.inline.hpp:319:9: error: argument 1 null where non-null expected [-Werror=nonnull]
  319 |   memcpy(to, from, size << LogBytesPerWord);
      |   ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/buildbot/shipilev-jdk/src/hotspot/share/utilities/globalDefinitions_gcc.hpp:35,
                 from /home/buildbot/shipilev-jdk/src/hotspot/share/utilities/globalDefinitions.hpp:35,
                 from /home/buildbot/shipilev-jdk/src/hotspot/share/metaprogramming/primitiveConversions.hpp:30,
                 from /home/buildbot/shipilev-jdk/src/hotspot/share/utilities/enumIterator.hpp:32,
                 from /home/buildbot/shipilev-jdk/src/hotspot/share/classfile/vmClassID.hpp:29,
                 from /home/buildbot/shipilev-jdk/src/hotspot/share/classfile/vmClasses.hpp:28,
                 from /home/buildbot/shipilev-jdk/src/hotspot/share/classfile/javaClasses.hpp:28,
   ... (rest of output omitted)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284161,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xecb:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-08 11:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9091
Date: 2022-06-08 18:05:10 +0000;;;","2022-06-08 22:53;dukebot;Changeset: 7e1cce8c
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-06-09 05:48:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7e1cce8cb508a8af770443360721fbb3d3b40237
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure with GCC 6 after JDK-8286562,JDK-8288048,5076533,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-06-08 10:33,2022-06-09 22:42,2023-10-01 09:56,2022-06-09 07:21,19,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,"JDK-8286562 added the `-Wstringop-overflow` pragma, which cannot be understood by GCC 6. There are already ways to make such pragmas conditional on GCC version.

```
=== Output from failing command(s) repeated here ===
* For target hotspot_variant-server_libjvm_objs_ageTableTracer.o:
In file included from /home/buildbot/worker/build-jdkX-debian9/build/src/hotspot/share/jfr/recorder/checkpoint/types/traceid/jfrTraceIdLoadBarrier.inline.hpp:33:0,
                 from /home/buildbot/worker/build-jdkX-debian9/build/src/hotspot/share/jfr/recorder/checkpoint/types/traceid/jfrTraceId.inline.hpp:30,
                 from /home/buildbot/worker/build-jdkX-debian9/build/src/hotspot/share/jfr/writers/jfrWriterHost.inline.hpp:31,
                 from /home/buildbot/worker/build-jdkX-debian9/build/src/hotspot/share/jfr/writers/jfrEventWriterHost.hpp:28,
                 from /home/buildbot/worker/build-jdkX-debian9/build/src/hotspot/share/jfr/writers/jfrEventWriterHost.inline.hpp:28,
                 from /home/buildbot/worker/build-jdkX-debian9/build/src/hotspot/share/jfr/writers/jfrNativeEventWriter.hpp:30,
                 from /home/buildbot/worker/build-jdkX-debian9/build/src/hotspot/share/jfr/recorder/service/jfrEvent.hpp:33,
                 from /home/buildbot/worker/build-jdkX-debian9/build/build/linux-x86_64-server-fastdebug/hotspot/variant-server/gensrc/jfrfiles/jfrEventClasses.hpp:12,
                 from /home/buildbot/worker/build-jdkX-debian9/build/src/hotspot/share/jfr/jfrEvents.hpp:32,
                 from /home/buildbot/worker/build-jdkX-debian9/build/src/hotspot/share/gc/shared/ageTableTracer.cpp:28:
/home/buildbot/worker/build-jdkX-debian9/build/src/hotspot/share/jfr/recorder/checkpoint/types/traceid/jfrTraceIdBits.inline.hpp: In static member function 'static void JfrTraceIdBits::store(jbyte, const T*)':
/home/buildbot/worker/build-jdkX-debian9/build/src/hotspot/share/jfr/recorder/checkpoint/types/traceid/jfrTraceIdBits.inline.hpp:141:51: error: unknown option after '#pragma GCC diagnostic' kind [-Werror=pragmas]
   PRAGMA_DISABLE_GCC_WARNING(""-Wstringop-overflow"")
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286562,,,,JDK-8288093,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xebn:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-08 10:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9090
Date: 2022-06-08 17:52:42 +0000;;;","2022-06-09 07:21;dukebot;Changeset: 59b0de6b
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-06-09 14:16:07 +0000
URL:       https://git.openjdk.org/jdk/commit/59b0de6bc7064b39cdc51517dee4f4d96af3efaf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clean up ThrowsTaglet,JDK-8288046,5076530,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-06-08 10:09,2022-11-28 14:46,2023-10-01 09:56,2022-11-16 01:45,20,,,,,,20,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,Continuation of JDK-8287333.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287333,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xeaz:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-10-18 10:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10746
Date: 2022-10-18 15:05:16 +0000;;;","2022-11-16 01:45;dukebot;Changeset: 499406c7
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-11-16 09:43:21 +0000
URL:       https://git.openjdk.org/jdk/commit/499406c764ba0ce57079b1f612297be5b148e5bb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clean up ParamTaglet,JDK-8288045,5076529,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-06-08 10:01,2022-11-28 14:46,2023-10-01 09:56,2022-11-16 01:45,20,,,,,,20,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,Continuation of JDK-8287333.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287333,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xear:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-10-18 10:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10746
Date: 2022-10-18 15:05:16 +0000;;;","2022-11-16 01:45;dukebot;Changeset: 499406c7
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-11-16 09:43:21 +0000
URL:       https://git.openjdk.org/jdk/commit/499406c764ba0ce57079b1f612297be5b148e5bb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pointer to function struct member with the same name as struct crashes jextract,CODETOOLS-7903237,5079463,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2022-07-19 03:17,2022-07-19 04:32,2023-10-01 09:56,2022-07-19 04:32,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"File: test.h

struct Foo {
     int (*Foo)();
};


$ jextract test.h

crashes in the backend in-memory compilation stage.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2xwar:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-07-19 03:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/55
Date: 2022-07-19 10:38:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RerunTest2 fails with an alternate build directory,CODETOOLS-7903228,5078353,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-07-01 15:01,2022-07-06 16:50,2023-10-01 09:56,2022-07-06 16:50,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"Another test fails when run with an alternate build directory.

The fix is as before, ensure to use absolute paths after using `cd` within a make rule.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xpjf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-07-01 15:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/95
Date: 2022-07-01 22:03:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update version to 7.1,CODETOOLS-7903226,5078345,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-07-01 12:29,2022-12-05 10:47,2023-10-01 09:56,2022-07-01 16:48,jtreg7.1,,,,,,jtreg7.1,tools,,0,,,,,,,,,,,,,,,,,,The next promoted version will be 7.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903394,CODETOOLS-7903388,CODETOOLS-7903025,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xphn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-07-01 12:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/94
Date: 2022-07-01 19:31:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringIndexOutOfBoundsException in ReportOnlyTest,CODETOOLS-7903225,5078335,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-07-01 11:02,2022-09-27 00:44,2023-10-01 09:56,2022-07-01 16:53,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"While working on ReportOnlyTest recently, a hitherto unnoticed stack trace was noticed in a log file from running jtreg.

Directory "".../open/build/test/Volumes/J2GWork/jtreg/jtreg.dev/open/build/test/ReportOnlyTest"" not found: creating
Test results: passed: 93; failed: 44; error: 88
Error: Unexpected exception occurred! java.lang.StringIndexOutOfBoundsException: String index out of range: -1
java.lang.StringIndexOutOfBoundsException: String index out of range: -1
        at java.base/java.lang.StringLatin1.charAt(StringLatin1.java:47)
        at java.base/java.lang.String.charAt(String.java:693)
        at com.sun.javatest.InitialUrlFilter.isInitialUrlMatch(InitialUrlFilter.java:133)
        at com.sun.javatest.InitialUrlFilter.accepts(InitialUrlFilter.java:159)
        at com.sun.javatest.ParameterFilter.accepts(ParameterFilter.java:149)
        at com.sun.javatest.ParameterFilter.accepts(ParameterFilter.java:96)
        at com.sun.javatest.TRT_Iterator.wouldAccept(TRT_Iterator.java:914)
        at com.sun.javatest.TRT_Iterator.findNext(TRT_Iterator.java:752)
        at com.sun.javatest.TRT_Iterator.init(TRT_Iterator.java:697)
        at com.sun.javatest.TRT_Iterator.<init>(TRT_Iterator.java:157)
        at com.sun.javatest.TestResultTable.getIterator(TestResultTable.java:1206)
        at com.sun.javatest.TestResultTable.getIterator(TestResultTable.java:1116)
        at com.sun.javatest.report.ReportSettings.setupSortedResults(ReportSettings.java:523)
        at com.sun.javatest.report.Report.writeReports(Report.java:177)
        at com.sun.javatest.regtest.report.RegressionReporter.report(RegressionReporter.java:106)
        at com.sun.javatest.regtest.tool.Tool.batchHarness(Tool.java:1992)
        at com.sun.javatest.regtest.tool.Tool.run(Tool.java:1338)
        at com.sun.javatest.regtest.tool.Tool.run(Tool.java:1082)
        at com.sun.javatest.regtest.tool.Tool.main(Tool.java:155)
        at com.sun.javatest.regtest.Main.main(Main.java:46)


The immediate cause was an empty string for a test file being passed down into JT Harness from jtreg,

The root cause is a bad check in `TestManager`, comparing the wrong form of a path (relative, not canonical) against the canonical file for the test suite root. This indirectly leads to computing an empty relative path between the two, causing the issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903331,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xpff:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-07-01 11:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/93
Date: 2022-07-01 18:27:46 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract test failure testng/org/openjdk/jextract/test/toolprovider/TestClassGeneration.java,CODETOOLS-7903218,5077914,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-06-27 04:00,2022-06-27 04:26,2023-10-01 09:56,2022-06-27 04:26,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"The test testng/org/openjdk/jextract/test/toolprovider/TestClassGeneration.java

Two tests from the above test fail:

Total tests run: 37, Passes: 35, Failures: 2, Skips: 0

org.openjdk.jextract.test.toolprovider.TestClassGeneration.testStringConstant(""macro_string_noident"", ""123.asdf""): failure

org.openjdk.jextract.test.toolprovider.TestClassGeneration.testStringConstant(""macro_string"", ""abc""): failure

Surprisingly this is reproduced only when using libclang 13.0.0 and not libclang  10.0.0
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xmub:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-06-27 04:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/49
Date: 2022-06-27 11:10:45 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMH: xperfasm throws incorrect error when xperf is not available,CODETOOLS-7903215,5077614,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2022-06-22 03:05,2022-06-23 23:15,2023-10-01 09:56,2022-06-23 23:15,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"Submitted for PR:
 https://github.com/openjdk/jmh/pull/72",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xkzn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2022-06-22 03:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmh/pull/72
Date: 2022-05-16 09:49:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support MSYS2 for building jtreg on Windows,CODETOOLS-7903206,5076569,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,cstein,jjg,jjg,2022-06-08 15:04,2022-06-10 07:48,2023-10-01 09:56,2022-06-09 09:13,jtreg6.2,,,,,,jtreg7.0,tools,,0,,,,,,,,,,,,,,,,,,"It would be convenient to build `jtreg` in an MSYS2 environment on Windows.

In practice, MSYS2 is ""close enough"" to Cygwin, and provides `cygpath` and friends, so that supporting MSYS2 requires little more than recognizing the use of the MSYS2 environment.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xejn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-06-09 01:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/87
Date: 2022-06-09 08:13:20 +0000;;;","2022-06-09 12:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/88
Date: 2022-06-09 18:54:16 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
