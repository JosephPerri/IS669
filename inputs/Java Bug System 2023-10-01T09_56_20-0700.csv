Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Inward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Inward issue link (Blocks),Inward issue link (Blocks),Outward issue link (Blocks),Outward issue link (Blocks),Outward issue link (CSR),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Duplicate),Inward issue link (Duplicate),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field ( Type of Bug [Challenge] ),Custom field (CPU),Custom field (CPU),Custom field (Cost of Delay),Custom field (Epic Link),Custom field (Imported),Custom field (Indexed),Custom field (Introduced In Build),Custom field (Introduced In Version),Custom field (Number of Tests Affected [Challenge]),Custom field (OS),Custom field (OS),Custom field (Oracle Evaluation),Custom field (Original story points),Custom field (Parent Link),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Resolved In Build),Custom field (Story Points),Custom field (Subcomponent),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Time Spent),Custom field (Understanding),Custom field (Value),Custom field (Verification),Custom field (external_bug),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
sync-bot not adding sync label to openjdk releases,SKARA-1394,5072148,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,rcalnan,rcalnan,2022-04-07 10:35,2022-05-04 07:29,2023-10-01 09:56,2022-05-04 07:29,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,"openjdk8u332 backports are not getting a sync label even though there is a openjdk8u322 backport.  Examples:

https://bugs.openjdk.java.net/issues/?jql=id%20in%20masterbug(%22project%20%3D%20jdk%20and%20fixversion%20%3D%20openjdk8u332%20and%20not%20labels%20%3D%20hgupdate-sync%22)%20%0Aand%20%20id%20in%20masterbug(%22project%20%3D%20jdk%20and%20fixversion%20%3D%20openjdk8u322%20and%20resolution%20%3D%20fixed%22)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wnq3:",9223372036854775807,,,,,,,,,,,,"2022-04-07 13:33;erikj;This isn't caused by openjdk, but that the Resolved in Build field is set to ""Team"". The current bot implementation does not consider bugs with ""Team"" to be eligible for the label. If this is wrong, then please update the bug accordingly. The reference I can find for this rule are these two issues which are used in the tests verifying this behavior in Skara: JDK-8077707, JDK-7092821. See tests here:

https://github.com/openjdk/skara/blob/4183bde9e8fc58eb6962d4e48ec8f2f86dcc3565/jbs/src/test/java/org/openjdk/skara/jbs/BackportsTests.java#L394
https://github.com/openjdk/skara/blob/4183bde9e8fc58eb6962d4e48ec8f2f86dcc3565/jbs/src/test/java/org/openjdk/skara/jbs/BackportsTests.java#L425

I will need a definition for what the correct behavior should be for these two bugs as well as the ones linked in the current description.;;;","2022-04-11 08:43;rcalnan;ok, let's get that defined.  I was thinking that the bot was tagging backports in team as a number have been tagged recently:
https://bugs.openjdk.java.net/issues/?jql=project%20%3D%20jdk%20and%20%22Resolved%20In%20Build%22%20%3D%20team%20and%20labels%20%3D%20hgupdate-sync%20and%20resolutiondate%20%3E%20-180d;;;","2022-04-11 10:03;erikj;Looking at the current code, the ""team"" exception currently only applies to main releases 7 and 8.;;;","2022-05-02 11:41;erikj;Going to remove the special handling of Resolved in Build ""team"".;;;","2022-05-03 14:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1313
Date: 2022-05-03 21:45:51 +0000;;;","2022-05-04 07:29;roboduke;Changeset: 82d35bf7
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-05-04 13:28:28 +0000
URL:       https://git.openjdk.java.net/skara/commit/82d35bf704bcf07cc3dfb6090927535863df0ecf
;;;",,,,,,,,,,,,,,,,,,,,,,,,
PR bot fails on missing .jcheck/conf,SKARA-1393,5072147,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,erikj,erikj,2022-04-07 10:01,2022-11-17 09:37,2023-10-01 09:56,2022-11-17 09:37,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,"If the PR bot can't find a .jcheck configuration in the target branch of a PR, it throws an exception and will just endlessly retry. It would be more constructive to post something in the PR explaining the problem and then leave it be until there is reason to check the PR again.

This PR https://github.com/openjdk/shenandoah-jdk8u/pull/1 got stuck in this way and I had to disable the PR bot on the repo to stop the flood of alarms and then manually notify the repo owner.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wnpv:",9223372036854775807,,,,,,,,,,,,"2022-10-31 15:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1407
Date: 2022-10-31 22:09:06 +0000;;;","2022-11-17 09:37;roboduke;Changeset: 43461934
Author:    Zhao Song <zsong@openjdk.org>
Date:      2022-11-17 17:37:08 +0000
URL:       https://git.openjdk.org/skara/commit/434619347fa709ed95a55898ef1e64b700afe841
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Backport MR links to the wrong CSR request,SKARA-1385,5071102,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,erikj,erikj,2022-03-28 14:02,2022-05-27 07:34,2023-10-01 09:56,2022-05-27 07:34,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,"In a backport PR, there is a link to the primary issue and to the primary issue's CSR request (if it exists), but the backport issue is required to have its own CSR request and that is what the PR should be linking to and checking (if Orahub does that).

More precisely, the linked-to CSR should be one with a fixVersion matching the release in question. A CSR can have multiple fixVersions and in some cases the CSR for the change in the feature release is used for some number of updates too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1380,,,,,SKARA-1432,SKARA-1433,SKARA-1431,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wh9v:",9223372036854775807,,,,,,,,,,,,"2022-05-02 22:26;gli;Currently, the PR bot doesn't have the information/configuration about fixVersion. The config `fixversions` and `altfixversions` are at the `notify bot` and are used in IssueNotifier. Need more Investigation to consider how to solve it.;;;","2022-05-03 05:22;erikj;While it's possible to configure fixVersion in the NotifyBot, we aren't doing that much anymore. We are encouraging putting the version in .jcheck/conf instead, and that makes it available to any bot. I would be fine with a solution that only works if (fix)version is defined in .jcheck/conf.;;;","2022-05-08 06:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1318
Date: 2022-05-08 13:19:17 +0000;;;","2022-05-08 06:24;gli;The `version` currently in the `.jcheck/conf` may have enough information.

https://github.com/openjdk/jdk17u-dev/blob/master/.jcheck/conf;;;","2022-05-27 07:34;roboduke;Changeset: 9ced76d5
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2022-05-27 14:34:14 +0000
URL:       https://git.openjdk.java.net/skara/commit/9ced76d50c6830b03b59492d426f2f5032dec828
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Cannot configure integrators for repositories in PullRequestBot,SKARA-1384,5070768,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,erikj,erikj,2022-03-22 15:47,2022-10-24 13:09,2023-10-01 09:56,2022-10-24 13:09,,,,,,,,,,1.0,bots,,0,starter,,,,,,,,,,,,,,,,,,"Certain operations on commits and pull requests requires that the issuer has ""integrator"" status in the repository. This is a concept in the PullRequestBot. Specifically using the /tag command on a commit or performing merge style PRs fall into this category (though the latter only requires it if the integrators set is non empty).

The problem with this is that there is no way of actually configuring the set of integrators. When these checks were added, the integrators concept was added to PullRequestBot and PullRequestBotBuilder but not PullRequestBotFactory, which is responsible for parsing the config file.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1646,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wf7n:",9223372036854775807,,,,,,,,,,,,"2022-03-23 13:23;andrew;Thanks for filing this.

I hadn't realised that SKARA treated merge PRs differently. I see from https://github.com/openjdk/jdk17u-dev/pull/282 that I could have used a PR for the recent 8u->8u-dev merge rather than a direct push. I assumed I'd have to wait on a reviewer if I did it via PR.;;;","2022-03-28 06:37;erikj;Merge style PRs are supported. You tell Skara that it's a merge PR by setting the title to ""Merge <project>:<branch>"" where `<project>` is the name of another project and branch is the name of the branch in that project that you are merging from. For a merge between branches in the same repo, you can omit the project part.

In my experience, merge style PRs don't require review. I have only used it on internal non-jdk projects however.;;;","2022-10-24 10:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1402
Date: 2022-10-24 17:04:28 +0000;;;","2022-10-24 13:09;roboduke;Changeset: e1f3a187
Author:    Zhao Song <zsong@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-10-24 20:08:44 +0000
URL:       https://git.openjdk.org/skara/commit/e1f3a187e112d5f9f05fb3d8d664c5fef8695e05
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
sync-bot removing sync label from JDK 6 backport,SKARA-1382,5070583,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,rcalnan,rcalnan,2022-03-18 14:18,2022-05-04 07:29,2023-10-01 09:56,2022-05-04 07:29,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,"https://bugs.openjdk.java.net/browse/JDK-8199547

this bug is fixed in 6u201 and 6u211.    6u211 didn't have a sync label and when I add one the bot removes it",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2we2r:",9223372036854775807,,,,,,,,,,,,"2022-05-02 11:40;erikj;Going to add feature version 6 to the backports logic.;;;","2022-05-03 14:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1313
Date: 2022-05-03 21:45:51 +0000;;;","2022-05-04 07:29;roboduke;Changeset: 82d35bf7
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-05-04 13:28:28 +0000
URL:       https://git.openjdk.java.net/skara/commit/82d35bf704bcf07cc3dfb6090927535863df0ecf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user HimaBinduMeda,SKARA-1377,5070399,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,hmeda,hmeda,2022-03-16 01:01,2022-03-16 05:57,2023-10-01 09:56,2022-03-16 05:57,,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wcxv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect sync labels,SKARA-1375,5070312,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,rcalnan,rcalnan,2022-03-15 07:00,2022-05-24 09:19,2023-10-01 09:56,2022-05-04 07:29,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,"9.0.1 was closed as wnf but 9.0.4 has a sync label
https://bugs.openjdk.java.net/browse/JDK-8160104

11.0.3  backport is a BPR and so 11.0.4 should not have a sync label
https://bugs.openjdk.java.net/browse/JDK-8209055
https://bugs.openjdk.java.net/browse/JDK-8220514

example with 11.0.2 BPR
https://andorra.us.oracle.com/jbsfault/update-sync/JDK-8204142",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1439,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wcej:",9223372036854775807,,,,,,,,,,,,"2022-03-15 09:24;erikj;JDK-8160104 is SKARA-1363, which was fixed 2022-02-25. Touch the bug again and it should correct itself.;;;","2022-03-15 10:37;erikj;In the specification we have, it says that BPRs are identified via the 5 digit from 11.0.3. If this isn't true, then from which release did we start using the 5th digit?

Searching for bugs, it looks like 11.0.3 had a BPR both as 11.0.3 b31 and as 11.0.3.0.1.;;;","2022-03-22 00:52;ostuart;the first BPR to use the five digit convention was 11.0.3.0.1,  this was used as a proof of concept for RE and SQE to trial the five digit generation.   This was produced during May 2019.   This did not gate out onto the MOS Download. (edited) 

The first customer five digit BPR was 11.0.4.0.1   this was produced in August 2019 and is promoted to the MOS Download page.

Prior to this five digit adoption we had to service our customers by producing a three digit BPR that followed the naming from older product familes,  eg 11.0.3 b31;;;","2022-05-02 11:39;erikj;I would like to verify the expected behavior.

For JDK-8209055:
All fixversions: ""12"", ""11.0.4-oracle"", ""11.0.4"", ""11.0.3-oracle/b31"", ""11.0.2/b31""
Should have label: ""11.0.3-oracle""
Motivation: 11.0.3-oracle/b31 and 11.0.2/b31 are both BPRs, so are in the same stream.

For JDK-8220514:
All fixversions: ""11.0.2.0.1-oracle"", ""11.0.4-oracle"", ""11.0.3-oracle/b31""
Should have label: ""11.0.3-oracle""
Motivation: 11.0.3-oracle/b31 and 11.0.2.0.1-oracle are both BPRs, so are in the same stream.;;;","2022-05-03 14:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1313
Date: 2022-05-03 21:45:51 +0000;;;","2022-05-04 07:29;roboduke;Changeset: 82d35bf7
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-05-04 13:28:28 +0000
URL:       https://git.openjdk.java.net/skara/commit/82d35bf704bcf07cc3dfb6090927535863df0ecf
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Only add security label to jarsigner related files,SKARA-1372,5070237,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,weijun,weijun,weijun,2022-03-14 12:27,2022-03-14 14:08,2023-10-01 09:56,2022-03-14 14:08,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,"Currently, the core-libs and compiler labels are also set.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wbxv:",9223372036854775807,,,,,,,,,,,,"2022-03-14 12:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1294
Date: 2022-03-14 19:29:40 +0000;;;","2022-03-14 14:08;roboduke;Changeset: 631323a2
Author:    Weijun Wang <weijun@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-03-14 21:07:26 +0000
URL:       https://git.openjdk.java.net/skara/commit/631323a25f383d2f0b227239a683423bc159f879
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user jaybhaskar,SKARA-1367,5069563,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,jbhaskar,jbhaskar,2022-03-02 22:01,2022-03-03 06:25,2023-10-01 09:56,2022-03-03 06:25,,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w7s3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user TheShermanTanker,SKARA-1366,5069528,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,jwaters,jwaters,2022-03-02 08:02,2022-03-02 08:35,2023-10-01 09:56,2022-03-02 08:35,,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w7kb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Draft PRs do not get extra time before auto closing,SKARA-1365,5069327,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,ihse,erikj,erikj,2022-02-25 10:33,2022-03-02 11:45,2023-10-01 09:56,2022-03-02 11:45,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,"The PullRequestPrunerBot automatically closes PRs that have been inactive for too long. The maxAge is configurable, and we have it set to 28 days for most repos on Github. SKARA-831 tried to give draft PRs double the time before being auto closed. Unfortunately, that fix wasn't enough, as it only affects the printed message and not the actual age check.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-831,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w6bv:",9223372036854775807,,,,,,,,,,,,"2022-03-02 09:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1293
Date: 2022-03-02 17:18:50 +0000;;;","2022-03-02 11:45;roboduke;Changeset: 518d71bc
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-03-02 19:44:55 +0000
URL:       https://git.openjdk.java.net/skara/commit/518d71bc3911b19e0d4582c43775728de6199c03
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Jira Issues should be resolved as ""Fixed""",SKARA-1364,5069315,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,zsong,erikj,erikj,2022-02-25 06:05,2022-09-26 14:38,2023-10-01 09:56,2022-09-26 14:38,,,,,,,,,,1.0,bots,,0,starter,,,,,,,,,,,,,,,,,,"When the IssueNotifier resolves an Issue, it may find a backport that is already closed (e.g. as ""Won't Fix""). In such a case, that JiraIssue will keep the same resolution instead of having it changed to ""Fixed"". This happened in JDK-8278200.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w697:",9223372036854775807,,,,,,,,,,,,"2022-09-15 17:21;zsong;Hi erik, I am working on this issue and I want to know whether 'When the IssueNotifier resolves an Issue' means this method IssueNotifier#onNewCommits.

;;;","2022-09-16 05:35;erikj;Yes, but also onIntegratedPullRequest. In some cases we configure the notifier to only watch pull requests and not commits, so both of those methods can potentially move an issue to resolved state.;;;","2022-09-23 10:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1382
Date: 2022-09-23 17:18:56 +0000;;;","2022-09-26 14:38;roboduke;Changeset: a6860bcb
Author:    Zhao Song <zhao.song@oracle.com>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-09-26 21:38:09 +0000
URL:       https://git.openjdk.org/skara/commit/a6860bcba94d93a2be7429ad7a8766755a925581
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
update-sync incorrect sync label,SKARA-1363,5069140,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,rcalnan,rcalnan,2022-02-22 12:48,2022-02-25 07:36,2023-10-01 09:56,2022-02-25 07:36,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,"In https://bugs.openjdk.java.net/browse/JDK-8160104 the 9.0.4 backport has a sync label, however the 9.0.1 was closed out as WNF and so 9.0.4 is the first release the fix went out in.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8160104,SKARA-964,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w5dn:",9223372036854775807,,,,,,,,,,,,"2022-02-24 06:50;erikj;The problem in this case is that it's the main issue that is marked as Won't Fix. Skara checks all the backports for ""Fixed"" resolution, but not the main bug.;;;","2022-02-24 11:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1291
Date: 2022-02-24 19:30:34 +0000;;;","2022-02-25 07:36;roboduke;Changeset: e2cc3cd9
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-02-25 15:35:53 +0000
URL:       https://git.openjdk.java.net/skara/commit/e2cc3cd96d19e93445f1e97202dfa25a07158e94
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
PR suggestion for fixing username is wrong,SKARA-1362,5069138,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,kcr,kcr,2022-02-22 11:44,2022-02-23 06:19,2023-10-01 09:56,2022-02-23 06:19,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,"In case a PR author has no associated OpenJDK ID, Skara takes the username and email address from the HEAD commit in the PR branch to use when the PR is integrated. If the Author name in the HEAD commit doesn't match the preferred name of the PR author's GitHub profile, the Skara PR bot warns about the mismatch and suggests the following steps to correct it:

""the full name on your profile does not match the author name in this pull requests' HEAD commit. If this pull request gets integrated then the author name from this pull requests' HEAD commit will be used for the resulting commit. If you wish to push a new commit with a different author name, then please run the following commands in a local repository of your personal fork:""

$ git checkout BRANCHNAME
$ git commit -c user.name='Preferred Full Name' --allow-empty -m 'Update full name'
$ git push

The commit command is wrong and produces an error:

fatal: Option -m cannot be combined with -c/-C/-F.

Removing the '-m' option makes it succeed, but does so by amending the existing commit (thus requiring a force-push), rather than by adding a new one.

Here is a command that works and does what is intended:

$ git commit --author='Preferred Full Name <you@example.com>' --allow-empty -m 'Update full name'
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w5d7:",9223372036854775807,,,,,,,,,,,,"2022-02-22 11:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1290
Date: 2022-02-22 19:52:20 +0000;;;","2022-02-23 06:19;roboduke;Changeset: 2c1f1477
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-02-23 14:18:48 +0000
URL:       https://git.openjdk.java.net/skara/commit/2c1f14771e006a7db48c669bc0e90961643bf1fd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SKARA-1352 is missing null check,SKARA-1360,5069024,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,ihse,ihse,ihse,2022-02-21 03:31,2022-02-22 06:08,2023-10-01 09:56,2022-02-22 06:08,,,,,,,,,,1.0,cli,,0,,,,,,,,,,,,,,,,,,,"The recent fix for SKARA-1352 (""Configure GithubHost as offline"") is missing a null check for the configuration object. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w4nv:",9223372036854775807,,,,,,,,,,,,"2022-02-21 03:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1289
Date: 2022-02-21 11:47:49 +0000;;;","2022-02-22 06:08;roboduke;Changeset: 9359c95e
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-02-22 14:07:39 +0000
URL:       https://git.openjdk.java.net/skara/commit/9359c95eb0e6d4339a3a3b6b991d182dc336f311
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Altfixversions isn't checking Backport resolution,SKARA-1350,5068351,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-02-11 11:35,2022-02-16 07:25,2023-10-01 09:56,2022-02-16 07:25,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,"In SKARA-1213, we introduced the altfixversions configuration option. This option is used to define a set of fixversion for backports that should be considered as fixed for the branch, even though they aren't the exact fixversion the branch is configured for.

There is a problem with the implementation in that when looking for backports with altfixversions, it only checks of such a backport is in state resolved. This misses backports that have been moved to closed state. It may also find false positives if the resolution is not ""fixed"", but instead something else like ""Won't fix"". 

The solution here would be to check the resolution field instead and only accept an altfixversion backport if the resolution is fixed. Unfortunately, we currently don't have an API in Skara for inspecting bug resolution, so that would also need to be implemented here.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1213,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w0jf:",9223372036854775807,,,,,,,,,,,,"2022-02-11 11:42;kcr;Catching the other resolutions like ""Won't fix"" seems like a bit of a corner case, although worth solving.

Not recognizing ""closed"" vs ""resolved"" seems more of a problem, so a partial solution might be to look for ""status in (Resolved,Closed)"";;;","2022-02-15 10:34;erikj;Fixing this wasn't as complicated as I had first anticipated. We already have access to all the data for an issue in the form of a json object, so inspecting the resolution field just involved finding it in that json document.;;;","2022-02-15 10:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1286
Date: 2022-02-15 18:39:56 +0000;;;","2022-02-16 07:25;roboduke;Changeset: 9ec7de68
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-02-16 15:25:00 +0000
URL:       https://git.openjdk.java.net/skara/commit/9ec7de689d747c894d3c762e0c31f77dd69b44ae
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user srmandal,SKARA-1348,5068224,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,smandalika,smandalika,2022-02-09 22:56,2022-02-10 05:09,2023-10-01 09:56,2022-02-10 05:09,,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,"Please associate my GitHub account with my OpenJDK identity.

https://github.com/srmandal
https://openjdk.java.net/census#smandalika",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vzr7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enable binary check,SKARA-1347,5068184,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,gli,gli,gli,2022-02-09 05:58,2022-02-09 07:54,2023-10-01 09:56,2022-02-09 07:54,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,"When solving SKARA-1236, we found the binary check hasn't been effective. It is good to fix it at first.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vzib:",9223372036854775807,,,,,,,,,,,,"2022-02-09 06:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1283
Date: 2022-02-09 14:15:49 +0000;;;","2022-02-09 07:54;roboduke;Changeset: 54ac640e
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-02-09 15:53:55 +0000
URL:       https://git.openjdk.java.net/skara/commit/54ac640e5e25912bca57fdec095779f898f29289
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing required plugins in JMC-RCP and JMC-RCP-plug-ins launcher,JMC-7581,5071444,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,vpurnam,vpurnam,vpurnam,2022-03-31 11:33,2023-01-11 02:34,2023-10-01 09:56,2022-04-01 13:19,8.2.0,,,,,,,,,8.3.0,Infrastructure,,0,,,,,,,,,,,,,,,,,,,"Missing required plugins in JMC-RCP and JMC-RCP-plug-ins launcher.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wjdv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@312b13a5,,,,,,,,,"2022-03-31 11:34;vpurnam;Below mentioned required plugins are missing in JMC-RCP and JMC-RCP-plug-ins launcher.

org.eclipse.jetty.http (10.0.7)
org.eclipse.jetty.io (10.0.7)
org.eclipse.jetty.security (10.0.7)
org.eclipse.jetty.server (10.0.7)
org.eclipse.jetty.servlet (10.0.7)
org.eclipse.jetty.util (10.0.7);;;","2022-03-31 12:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/393
Date: 2022-03-31 19:04:43 +0000;;;","2022-04-01 13:19;roboduke;Changeset: 15da4dce
Author:    vpurnam <vpurnam@VPURNAM-7420.in.oracle.com>
Committer: Jean-Philippe Bempel <jpbempel@openjdk.org>
Date:      2022-04-01 20:18:49 +0000
URL:       https://git.openjdk.java.net/jmc/commit/15da4dce2dde842e201b8afd6953b16722d97534
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JVM crash: guarantee(sect->end() <= sect->limit()) failed: sanity on AVX512,JDK-8284883,5071252,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dlong,webbuggrp,webbuggrp,2022-03-30 01:58,2022-07-11 23:42,2023-10-01 09:56,2022-04-29 12:13,17.0.2,19,,,,,,,,19,hotspot,,0,additional-information-received,dcsswa,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-19,regression,reproducer-yes,webbug,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
JVM crashed when I run SPECjvm. No errors are reported when running in JDK11, but when running in JDK17, JVM crashed.

Reproduce: java -jar -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:-IdealizeClearArrayNode SPECjvm2008.jar startup.sunflow -ikv

hs_err log:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (codeBuffer.cpp:973), pid=21701, tid=21743
#  guarantee(sect->end() <= sect->limit()) failed: sanity
#
# JRE version: Java(TM) SE Runtime Environment (17.0.2+8) (build 17.0.2+8-LTS-86)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17.0.2+8-LTS-86, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x574704]  CodeBuffer::verify_section_allocation()+0x204
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /home/jiahx/SPECjvm2008/core.21701)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:-IdealizeClearArrayNode SPECjvm2008.jar startup.sunflow -ikv

Host: Intel(R) Xeon(R) Gold 6240 CPU @ 2.60GHz, 16 cores, 31G, Ubuntu 18.04.6 LTS
Time: Wed Mar 30 16:43:38 2022 CST elapsed time: 4.418891 seconds (0d 0h 0m 4s)

---------------  T H R E A D  ---------------

Current thread (0x00007fc744178730):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=21743, stack(0x00007fc703069000,0x00007fc70316a000)]


Current CompileTask:
C2:   4418 3498    b  4       java.util.Properties$LineReader::<init> (38 bytes)

Stack: [0x00007fc703069000,0x00007fc70316a000],  sp=0x00007fc703165520,  free space=1009k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x574704]  CodeBuffer::verify_section_allocation()+0x204
V  [libjvm.so+0x574a0f]  CodeBuffer::~CodeBuffer()+0xf
V  [libjvm.so+0xbff167]  PhaseOutput::scratch_emit_size(Node const*)+0x297
V  [libjvm.so+0xbfaf50]  PhaseOutput::shorten_branches(unsigned int*)+0x280
V  [libjvm.so+0xc032aa]  PhaseOutput::Output()+0x58a
V  [libjvm.so+0x59eea4]  Compile::Code_Gen()+0x5f4
V  [libjvm.so+0x5a484b]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x148b
V  [libjvm.so+0x4e8579]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xe9
V  [libjvm.so+0x5ad061]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xd81
V  [libjvm.so+0x5adbf8]  CompileBroker::compiler_thread_loop()+0x4b8
V  [libjvm.so+0xd917e0]  JavaThread::thread_main_inner()+0xd0
V  [libjvm.so+0xd94e6e]  Thread::call_run()+0xde
V  [libjvm.so+0xbeae11]  thread_native_entry(Thread*)+0xe1

REGRESSION : Last worked in version 11.0.14-oracle


FREQUENCY : always


",,,,,,,,,,,JDK-8286295,JDK-8288878,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8166561,,,,,,"2022-04-22 02:44;pnarayanaswa;JDK-8284883.zip;https://bugs.openjdk.org/secure/attachment/98674/JDK-8284883.zip",,,,,,,,,,,,,,x86_64,,,,,,,,,linux_ubuntu,,,,,"0|i2wi77:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-14 04:32;sswsharm;additional-information-requested
================================================
getting benchmark failed message when trying to run SPECjvm
"" [iter=1] Iteration failed.
  [iter=1][bt:1|op:1] java.lang.IllegalAccessError: class spec.benchmarks.check.Main (in unnamed module @0x4047e255) cannot access class com.sun.tools.javac.main.JavaCompiler (in module jdk.compiler) because module jdk.compiler does not export com.sun.tools.javac.main to unnamed module @0x4047e255""
Could you please confirm if the steps to reproduce this issue are proper?
=================================================;;;","2022-04-22 02:44;pnarayanaswa;Additional Information from submitter:
==============================
Here is the exact process I used to reproduce it.
First, download the SPECjvm jar package from the SPECjvm website (https://www.spec.org/jvm2008/) and run the command ""java -jar SPECjvm2008_1_01_setup.jar -i console "" to install it.
After SPECjvm installation is complete, move to the SPECjvm2008.jar directory and in its directory, run "" java -jar -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:-IdealizeClearArrayNode SPECjvm2008.jar startup.sunflow -ikv"".
Attached snapshot, hs_err_pid.log, replay_pid.log.;;;","2022-04-25 02:25;rcastanedalo;I cannot reproduce the failure, neither following the additional information from the submitter (I get the same early failure as [~sswsharm] above), nor using the attached replay file.;;;","2022-04-25 03:05;rcastanedalo;[~sswsharm]: could you please check with the submitter if there is any additional configuration or tweak that must be done to SPECjvm2008 to reproduce the failure on JDK 17? Thanks!;;;","2022-04-25 14:54;dlong;This reproduces on startup on a machine with AVX512 using -XX:UseAVX=3.  Workaround: -XX:UseAVX=2;;;","2022-04-25 15:58;dlong;ILW = crash with -XX:-IdealizeClearArrayNode; AVX512 only; workaround: -XX:UseAVX=2 = MMM = P3;;;","2022-04-25 19:39;dlong;There seem to be two different problems contributing to this crash.  The first is that InitArrayShortSize can be set to arbitrarily large values, and the second is that we don't always check the value of InitArrayShortSize when IdealizeClearArrayNode is turned off.;;;","2022-04-28 12:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8457
Date: 2022-04-28 19:42:05 +0000;;;","2022-04-29 12:13;dukebot;Changeset: cd8709e8
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-04-29 19:09:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cd8709e8e05897d131afba221970c0866b3d126d
;;;","2022-06-01 08:18;chegar;The hs_err log file over on this Elasticsearch issue [1] would appear to result from the same root cause as the one described by this bug report. And also the version numbers would indicate that it is possible, since this issue has not be been back ported to an 18 update either.

I would initially like to confirm that the ES issue [1] is as a result of this JDK bug. And not something else lurking in this area.

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (codeBuffer.cpp:962), pid=19, tid=20
#  guarantee(sect->end() <= tend) failed: sanity
#
# JRE version:  (18.0.1.1+2) (build )
# Java VM: OpenJDK 64-Bit Server VM (18.0.1.1+2-6, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x582c9c]  CodeBuffer::verify_section_allocation()+0x36c
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /usr/share/elasticsearch/core.19)
#
#

[1] https://github.com/elastic/elasticsearch/issues/87173#issuecomment-1143683923;;;","2022-06-02 01:21;dlong;[~chegar], it looks like a different bug to me.;;;","2022-06-03 01:00;chegar;Thanks Dean. JDK-8287772 has been filed to track this new issue.;;;","2022-06-15 02:55;goetz;
Fix request [17u]

I backport this for parity with 17.0.5-oracle.
A C2 fix we should have.
I had to resolve due to context differences.
Test passes, but I cannot reproduce the error without the fix. SAP nighlty testing passed.
;;;","2022-06-15 03:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/469
Date: 2022-06-15 09:54:08 +0000;;;",,,,,,,,,,,,,,,,
8.4.8.4: Clarify inheritance of multiple override-equivalent signatures,JDK-8284797,5071649,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbierman,webbuggrp,webbuggrp,2022-04-04 03:33,2022-06-21 02:20,2023-10-01 09:56,2022-06-21 02:20,18,,,,,,,,,19,specification,,0,dcsad,noreg-doc,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
JLS 18 §8.4.8.4. ""Inheriting Methods with Override-Equivalent Signatures"" says:
> It is a compile-time error if a class C inherits a concrete method whose signature is override-equivalent with another method inherited by C.

However, this sentence conflicts with the definition of ""inherits"" in §8.4.8. ""Inheritance, Overriding, and Hiding"":
> No method declared in C has a signature that is a subsignature (§8.4.2) of the signature of m as a member of D
> [...]
> No concrete method inherited by C from its direct superclass type has a signature that is a subsignature of the signature of m as a member of D

I assume §8.4.8.4 is supposed to prevent the following:
```
class C {
    public static void m() {}
}

interface I {
    void m();
}

class T extends C implements I {}
```

However, in this case the abstract method from `I` is not considered ""inherited"" due to the definition in §8.4.8; and this specific case might actually already be covered by §8.4.8.2. ""Hiding (by Class Methods)"". Or which specific cases is the sentence in §8.4.8.4. supposed to cover, which are not covered already by another definition?

(Also: It would be good to clarify the definition for ""inherits"", because it refers only to ""direct"" supertypes even when transitive supertypes are considered as well for multiple of the sentences (?))


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284566,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wknf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7441ef8d,,,,,,,,,"2022-04-13 10:37;abuckley;The rule in 8.4.8.4:

""It is a compile-time error if a class C inherits a concrete method whose signature is override-equivalent with another method inherited by C.""

dates from JLS3 (circa Java 5), but it was reworded in JLS8 (circa Java 8) in a way that made it less clear. In particular, the motivating use case was removed. It would be best to add a numbered example at the end of 8.4.8.4 as follows:

----
Example 8.4.8.4-1: Inheritance of override-equivalent methods

The first compile-time error above, regarding a class C that inherits a concrete method, can happen if a superclass of C is generic, and the superclass has two methods that were distinct in the generic declaration but have the same signature in the parameterization (4.5) used by C. For example:

```
class A<T> {
    void m(String s) {}  // 1
    void m(T t) {}  // 2
}
class C extends A<String> {}
```

C inherits two methods from its direct superclass type A<String>: the method `m(String)` marked at 1, and (due to C's parameterization of A) the method `m<String>` marked at 2. These methods have the same signature, so are override-equivalent with each other.
-----

The actual example given in the Description is straightforward:
1. Class T inherits the concrete method `m()` from C, on the grounds that no method _declared_ in T has a signature that's a subsignature of `m()`).
2. Class T does _not_ inherit the abstract method `m()` from I. In order for T to inherit `m()` from I, there would have to be no concrete method `m()` inherited by T from C, but we just said there is.
3. Thanks to inheritance, T has a static method `m()`, which hides the method `m()` declared in T's superinterface, I. When a static method hides an instance method, an error is due by 8.4.8.2.
4. 8.4.8.4 is not relevant, because it pertains to two methods being inherited by the same class, but here, the class T only inherits one method.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TreeTableView loses sort ordering when applied on empty table,JDK-8284676,5072229,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,arapte,webbuggrp,webbuggrp,2022-04-08 13:33,2022-08-23 05:53,2023-10-01 09:56,2022-07-13 08:05,jfx11.0.13,jfx17,jfx18,jfx19,,,,,,jfx19,javafx,,0,additional-information-received,dcspn,regression,regression_8256283,reproducer-no,sn_122,webbug,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
macOS 12 (although the issue should be OS agnostic, tested on Windows with the same issue), with Azul JDK 11.0.14, but using a Maven dependency on:

            <dependency>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-controls</artifactId>
                <version>18</version>
                <classifier>mac</classifier>
            </dependency>

(other JavaFX 18 dependencies included via Maven as well, not shown here)

A DESCRIPTION OF THE PROBLEM :
The root problem stems from the implementation of JDK-8256283.

When you have TreeTableView with all columns defined but no data yet, if you attempt to add a sort ordering through adding to the ObservableList<TreeTableColumn<S,?>> returned from getSortOrder(), the sort will fail and the sort order that you attempted to add will be removed. That last part is the important regression. Prior to the above ticket, you could add a sort order to an empty table and then it would respect that sort order as new data comes into the table. But now, since the sort order is removed upon the failure to sort, you will have an unsorted table as data starts flowing through. 

This is partly because we attempt to do a sort when the sort order changes:

TreeTableView#401:

        getSortOrder().addListener((ListChangeListener.Change<? extends TreeTableColumn<S, ?>> c) -> {
            doSort(TableUtil.SortEventType.SORT_ORDER_CHANGE, c);
        });

The stack trace for where we determine an empty table can't be sorted:
call:584, TreeTableView$3 (javafx.scene.control)
call:580, TreeTableView$3 (javafx.scene.control)
sort:1862, TreeTableView (javafx.scene.control)
doSort:1951, TreeTableView (javafx.scene.control)
lambda$new$0:401, TreeTableView (javafx.scene.control)
onChanged:-1, 357819648 (javafx.scene.control.TreeTableView$$Lambda$1786)
fireValueChangedEvent:164, ListListenerHelper$SingleChange (com.sun.javafx.collections)
fireValueChangedEvent:73, ListListenerHelper (com.sun.javafx.collections)
fireChange:239, ObservableListBase (javafx.collections)
commit:482, ListChangeBuilder (javafx.collections)
endChange:541, ListChangeBuilder (javafx.collections)
endChange:211, ObservableListBase (javafx.collections)
addAll:109, ModifiableObservableListBase (javafx.collections)
(from an invocation of TreeTableView.getSortOrder().addAll(..))


The stack trace for where we remove the sort order if we determine we can't sort:
handleSortFailure:140, TableUtil (javafx.scene.control)
sort:1884, TreeTableView (javafx.scene.control)
doSort:1951, TreeTableView (javafx.scene.control)
lambda$new$0:401, TreeTableView (javafx.scene.control)
onChanged:-1, 357819648 (javafx.scene.control.TreeTableView$$Lambda$1786)
fireValueChangedEvent:164, ListListenerHelper$SingleChange (com.sun.javafx.collections)
fireValueChangedEvent:73, ListListenerHelper (com.sun.javafx.collections)
fireChange:239, ObservableListBase (javafx.collections)
commit:482, ListChangeBuilder (javafx.collections)
endChange:541, ListChangeBuilder (javafx.collections)
endChange:211, ObservableListBase (javafx.collections)
addAll:109, ModifiableObservableListBase (javafx.collections)

For our particular usecase, we allow users to save the sort order for their tables in our GUI configuration files. When they load that GUI again, we want to restore their sort order upon table creation (before the data flows in, which happens asynchronously elsewhere). This was possible when we were using JavaFX 11, but we ran into the above regression when upgrading to 17.0.2/18.

REGRESSION : Last worked in version Openjfx11.0.10

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
* Create a new TreeTableView
* Define the columns of the table via the .getColumns().addAll(..) function
* Define a sort order via the .getSortOrder().addAll(..) function

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
* The empty table will have a sort order defined by what was added to the .getSortOrder() when data comes in
* table.getSortOrder().size() > 0
ACTUAL -
* No sort order is specified in the table after being added
* table.getSortOrder() == 0

CUSTOMER SUBMITTED WORKAROUND :
You could, perhaps, wait to initialize the sort order until after the table is populated with data, but this shouldn't be a requirement (and wasn't a requirement before the above ticket). 

FREQUENCY : always


",,,,,,,,,,,JDK-8292554,JDK-8292185,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256283,,,,,,"2022-04-13 05:39;pnarayanaswa;TableBugReproduction.java;https://bugs.openjdk.org/secure/attachment/98568/TableBugReproduction.java",,,,,,,,,,,,,,generic,,,,,,b01,jfx11.0.13,,generic,,,,,"0|i2wo83:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-04-11 06:50;pnarayanaswa;Mail to submitter:
=============
Please share a minimal reproducer of the issue.;;;","2022-04-13 05:47;pnarayanaswa;Additional information from Submitter:
===========================
This demo(TableBugReproduction.java) doesn’t actually put the table in view to see it visually, but demonstrates the difference between JavaFX 11.0.2 and JavaFX 17+, as can be seen by the expected printout of 1 versus the new printout of 0. This corresponds to no sorting when the table is actually viewed

Checked with attached testcase, 
Test Result
=========
openjfx 11.0.2 - openjfx11.0.10: Console Output -->1
openjfx11.0.13/14: Console Output--> 0
openjfx 17: Console Output--> 0
openjfx 18: Console Output--> 0
openjfx 19ea5: Console Output--> 0;;;","2022-04-13 05:51;pnarayanaswa;ILW=MHM=P3
===========
Impact: Medium
Likelihood: High, frequently reproducible from openjfx11.0.10
Workaround: Medium;;;","2022-07-12 09:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/825
Date: 2022-07-12 15:59:17 +0000;;;","2022-07-13 08:05;dukebot;Changeset: 0132ac89
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2022-07-13 15:02:06 +0000
URL:       https://git.openjdk.org/jfx/commit/0132ac89033334ec9d9ec6149d116e8c352f89ec
;;;","2022-08-09 05:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/76
Date: 2022-08-09 12:20:35 +0000;;;","2022-08-17 06:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/108
Date: 2022-08-17 13:36:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
[Win][Accessibility][ListCell] Screen reader fails to read ListView/ComboBox item count if > 100,JDK-8284662,5072176,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,arapte,webbuggrp,webbuggrp,2022-04-07 23:59,2023-03-30 02:58,2023-10-01 09:56,2023-02-17 08:31,8,jfx11,jfx17,jfx18,jfx19,,,,,jfx21,javafx,,0,8bpr-critical-approved,bugdb_35025663,dcspn,reproducer-yes,sn_137,webbug,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Voice output of position of entries (n of N) in ComboBox or ListView is missing when there are probably more than 100 entries.

We provide a simple testcase and a video of the voice output. 
Your can download it here: <link>


FREQUENCY : always


",,,,,,,,,,,JDK-8305231,JDK-8303730,JDK-8302855,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303651,,,,,,"2022-04-11 02:29;pnarayanaswa;Main.java;https://bugs.openjdk.org/secure/attachment/98513/Main.java","2023-02-16 00:11;arapte;TestComboBox.java;https://bugs.openjdk.org/secure/attachment/102667/TestComboBox.java","2023-02-16 00:10;arapte;TestListView.java;https://bugs.openjdk.org/secure/attachment/102666/TestListView.java",,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2wnwb:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7a09e639,,,,,,,,,"2022-04-11 02:29;pnarayanaswa;Checked with attached testcase in Windows 10, Issue is reproducible, 
observation - Narrator announces the selection change, but does not announce the position of the selected item (n of N) of the combobox,  if the elements is more than 101
Test result
========
8u321: Fail
openjfx11: Fail
openjfx17: Fail
openjfx18: Fail
openjfx19ea4: Fail;;;","2023-02-06 01:53;arapte;Narrator reads the count correctly if items are <= 100
JAWS reads the count correctly if items are <= 200;;;","2023-02-16 01:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1036
Date: 2023-02-16 08:56:58 +0000;;;","2023-02-17 08:31;dukebot;Changeset: 21aa630a
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2023-02-17 16:29:23 +0000
URL:       https://git.openjdk.org/jfx/commit/21aa630a0cb956de9641574676adfe114609f666
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Modal behavior returns to wrong stage,JDK-8284654,5071906,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tsayao,webbuggrp,webbuggrp,2022-04-06 13:02,2022-07-13 05:32,2023-10-01 09:56,2022-05-31 17:06,jfx17,,,,,,,,,jfx19,javafx,,1,dcspn,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Oracle Java 11 
OpenJFX 17.0.2

Tested on Windows 10 and Ubuntu 20.04


A DESCRIPTION OF THE PROBLEM :
After JFX17, Modal behavior has changed producing a bad user experience, it returns to the ""wrong previous stage"".
If you have a button into a stage and call a Alert, after close the alert JFX is ""calling"" other stage and bringing it to front. 

The ""other stage"" is the latest stage created (the wrong one, and not the one that called the button click)

Until JFX 16 the behavior was the expected one.

REGRESSION : Last worked in version 16

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1) Run the sample code using JavaFX 17 (17.0.2)
2) On the ""Main Window"" Click on button ""One"".
3) It'll open a new Stage/Window called ""Window One"".
4) On the ""Main Window"" Click on button ""Two"".
5) It'll open a new Stage/Window called ""Window Two"" (the latest stage created)
6) On the ""Window One"" Click on button ""Click here"".
7) It'll open a Alert Dialog.
8) On the Alert Dialog click on Close Button.


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The focus should return to the ""Window One"", this ""Window One"" was the stage that called the Alert Dialog.

Info: It works fine when I tested with JavaFX 16.
ACTUAL -
The focus is returning to the ""Window Two"", this ""Window Two"" wasn't the stage that called the Alert Dialog.


---------- BEGIN SOURCE ----------
package com.jardelnovaes.jfx.tests;

import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.SceneAntialiasing;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Region;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.Window;

public class App extends Application {

    public static void main(String[] args) {
        launch();
    }

    @Override
    public void start(Stage stage) {
        var panel = new HBox();
        var label = new Label(""Main Window"");
        panel.getChildren().addAll(label, createButton(""One""), createButton(""Two""));
        panel.setAlignment(Pos.CENTER);
        var scene = new Scene(panel, 200, 200);
        stage.setScene(scene);
        stage.show();
    }

    private Button createButton(final String id) {
        var button = new Button(id);
        button.setOnAction(e -> new WindowChild(null, ""Window "" + id).showAndWait());
        return button;
    }

    class WindowChild extends Stage {

        public WindowChild(Window owner, final String title) {
            var panel = new HBox();
            panel.setAlignment(Pos.CENTER);
            var scene = new Scene(panel, 250, 250, false, SceneAntialiasing.DISABLED);
            this.setScene(scene);

            if (owner != null) {
                this.initOwner(owner);
            }

            panel.getChildren().add(getContent(title));
        }

        private Pane getContent(final String title) {
            var panel = new HBox();
            var label = new Label(title);
            var button = new Button(""Click here"");
            button.setOnAction(e -> {
                var alert = new Alert(Alert.AlertType.ERROR, ""An error message"", ButtonType.CLOSE);
                alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                alert.initModality(Modality.APPLICATION_MODAL);
                alert.showAndWait();
            });
            panel.getChildren().addAll(label, button);
            panel.setAlignment(Pos.CENTER);
            return panel;
        }
    }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8289267,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-04-11 02:29;pnarayanaswa;App.java;https://bugs.openjdk.org/secure/attachment/98512/App.java",,,,,,,,,,,,,,generic,,,,,,b01,jfx17,,generic,,,,,"0|i2wm8b:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2022-04-11 01:32;pnarayanaswa;Checked with attached testcase, Issue is reproducible from openjfx17,
Test Result
========
8u321: Fail
openjfx16: Pass
openjfx11 : Fail
openjfx17: Fail
openjfx18: Fail
openjfx19ea4: Fail;;;","2022-04-18 15:01;tsayao;openjfx16 passes because of JDK-8227366. 
It got reverted in favour of JDK-8240640 on 17.

The revert it correct, but the code itself might need adjustments.

This is where it probably happens:
https://github.com/openjdk/jfx/blob/master/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/WindowStage.java

There is a LinkedList with the window list:
 private static List<WindowStage> activeWindows = new LinkedList<>();

When the native code sends FOCUS_DISABLED:
   final void handleFocusDisabled() {
        if (activeWindows.isEmpty()) {
            return;
        }
        WindowStage window = activeWindows.get(activeWindows.size() - 1);
        window.setIconified(false);
        window.requestToFront();
        window.requestFocus();
    }

It raises the latest window on the stack - it's probably out of order.;;;","2022-04-19 06:51;tsayao;I confirm that it's the code on JDK-8227366

But it does not seem related to FOCUS_DISABLED as I suspected.

It's on window enable/disable code,;;;","2022-04-19 07:02;tsayao;    protected void setPlatformEnabled(boolean enabled) {
        super.setPlatformEnabled(enabled);
        if (platformWindow != null) {
            platformWindow.setEnabled(enabled);
        }
        if (enabled) {
            // Check if window is really enabled - to handle nested case
            if (platformWindow != null && platformWindow.isEnabled()) {
                requestToFront();
            }
        } else {
            removeActiveWindow(this);
        }
    }

I think it's was right to remove the requestToFront() from setPlatformEnabled().

That's because when there's a modal window, the code disables all windows and re-enables all windows when the modal is closed.

Makes no sense to requestToFront() when re-enabling them.

Edit: It happens when there is an APPLICATION_MODAL window.

Follow:
WindowStage.windowsSetEnabled()
;;;","2022-04-19 08:18;kcr;>  I think it's was right to remove the requestToFront() from setPlatformEnabled(). 

I'm not convinced. That removal in JDK-8227366 was the direct cause of the regressions reported in JDK-8240640 and JDK-8269429.

;;;","2022-04-19 09:51;tsayao;    protected void setPlatformEnabled(boolean enabled) {
        super.setPlatformEnabled(enabled);
        if (platformWindow != null) {
            platformWindow.setEnabled(enabled);
        }
        if (enabled) {
            // Check if window is really enabled - to handle nested case
            if (platformWindow != null && platformWindow.isEnabled()
                    && modality == Modality.APPLICATION_MODAL) {
                requestToFront();
            }
        } else {
            removeActiveWindow(this);
        }
    }

Adding a check (modality == Modality.APPLICATION_MODAL) works for  JDK-8269429 and this bug (on Linux, probably works on Windows too).

But I don't think it would be a correct fix - it seems it would go on the windowsSetEnabled() function and  JDK-8240640 needs a mac specific fix.;;;","2022-04-22 12:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/784
Date: 2022-04-22 19:26:36 +0000;;;","2022-05-31 17:06;dukebot;Changeset: 864792d8
Author:    Thiago Milczarek Sayao <tsayao@openjdk.org>
Date:      2022-06-01 00:04:14 +0000
URL:       https://git.openjdk.java.net/jfx/commit/864792d84811b64815357722be0378397d212408
;;;","2022-06-27 01:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/64
Date: 2022-06-27 08:27:46 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Unexpected behavior of -XX:MaxDirectMemorySize=0,JDK-8284642,5072153,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,webbuggrp,webbuggrp,2022-04-07 11:06,2022-04-27 23:24,2023-10-01 09:56,2022-04-26 12:02,17.0.2,,,,,,,,,19,hotspot,,0,dcsswa,reproducer-yes,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
openjdk version ""17.0.2"" 2022-01-18
OpenJDK Runtime Environment Homebrew (build 17.0.2+0)
OpenJDK 64-Bit Server VM Homebrew (build 17.0.2+0, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
According to the manual of JDK 17, the behavior of ""-XX:MaxDirectMemorySize=size"" is described as ""By default, the size is set to 0, meaning that the JVM chooses the size for NIO direct-buffer allocations automatically"".
It says when size is set to 0, the JVM will choose the size of direct memory automatically. But when I set ""-XX:MaxDirectMemorySize"" to 0. I can not allocate even a byte.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Just run the following code with ""-XX:MaxDirectMemorySize=0"".

java -XX:MaxDirectMemorySize=0 Main.java

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
No error.
ACTUAL -
java -XX:MaxDirectMemorySize=0 Main.java
Exception in thread ""main"" java.lang.OutOfMemoryError: Cannot reserve 8192 bytes of direct buffer memory (allocated: 0, limit: 0)
        at java.base/java.nio.Bits.reserveMemory(Bits.java:178)
        at java.base/java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:121)
        at java.base/java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:332)
        at java.base/sun.nio.ch.Util.getTemporaryDirectBuffer(Util.java:243)
        at java.base/sun.nio.ch.IOUtil.read(IOUtil.java:293)
        at java.base/sun.nio.ch.IOUtil.read(IOUtil.java:273)
        at java.base/sun.nio.ch.FileChannelImpl.read(FileChannelImpl.java:232)
        at java.base/sun.nio.ch.ChannelInputStream.read(ChannelInputStream.java:65)
        at java.base/sun.nio.ch.ChannelInputStream.read(ChannelInputStream.java:107)
        at java.base/sun.nio.ch.ChannelInputStream.read(ChannelInputStream.java:101)
        at java.base/java.io.BufferedInputStream.read1(BufferedInputStream.java:282)
        at java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:343)
        at java.base/sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:270)
        at java.base/sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:313)
        at java.base/sun.nio.cs.StreamDecoder.read(StreamDecoder.java:188)
        at java.base/java.io.InputStreamReader.read(InputStreamReader.java:177)
        at java.base/java.io.BufferedReader.fill(BufferedReader.java:162)
        at java.base/java.io.BufferedReader.read1(BufferedReader.java:213)
        at java.base/java.io.BufferedReader.read(BufferedReader.java:287)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.readFile(Main.java:254)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.compile(Main.java:371)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:189)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)

---------- BEGIN SOURCE ----------
import java.nio.ByteBuffer;

public class Main {

    public static void main(String[] args) throws Exception {
        System.out.println(ByteBuffer.allocateDirect(1));
    }

}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Do not pass ""-XX:MaxDirectMemorySize"" to java or set a sufficient size for direct memory.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-04-10 20:54;sswsharm;Main.java;https://bugs.openjdk.org/secure/attachment/98507/Main.java",,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wnr7:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-10 20:58;sswsharm;Issue is reproduced.
java.lang.OutOfMemoryError exception is thrown when trying to allocate memory through ""-XX:MaxDirectMemorySize=size""

OS: Windows 10
JDK 17.0.2: Fail
JDK 18: Fail

Output:
Exception in thread ""main"" java.lang.OutOfMemoryError: Cannot reserve 8192 bytes of direct buffer memory (allocated: 0, limit: 0)
        at java.base/java.nio.Bits.reserveMemory(Bits.java:178)
        at java.base/java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:118)
        at java.base/java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:332)
        at java.base/sun.nio.ch.Util.getTemporaryDirectBuffer(Util.java:243)
        at java.base/sun.nio.ch.IOUtil.read(IOUtil.java:303)
        at java.base/sun.nio.ch.IOUtil.read(IOUtil.java:283)
        at java.base/sun.nio.ch.FileChannelImpl.read(FileChannelImpl.java:232)
        at java.base/sun.nio.ch.ChannelInputStream.read(ChannelInputStream.java:73)
        at java.base/sun.nio.ch.ChannelInputStream.read(ChannelInputStream.java:115)
        at java.base/sun.nio.ch.ChannelInputStream.read(ChannelInputStream.java:109)
        at java.base/java.io.BufferedInputStream.read1(BufferedInputStream.java:282)
        at java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:343)
        at java.base/sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:270)
        at java.base/sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:313)
        at java.base/sun.nio.cs.StreamDecoder.read(StreamDecoder.java:188)
        at java.base/java.io.InputStreamReader.read(InputStreamReader.java:176)
        at java.base/java.io.BufferedReader.fill(BufferedReader.java:162)
        at java.base/java.io.BufferedReader.read1(BufferedReader.java:213)
        at java.base/java.io.BufferedReader.read(BufferedReader.java:287)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.readFile(Main.java:254)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.compile(Main.java:373)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:189)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)

Moving it to JDK for further analysis.;;;","2022-04-12 12:45;hseigel;Test test/jdk/java/nio/Buffer/LimitDirectMemory.java contains the following:

 * @summary Test: We should be able to eliminate direct memory allocation entirely
 * @run main/othervm -XX:MaxDirectMemorySize=0 LimitDirectMemory true 0 1

We need to decide if explicitly specifying MaxDirectMemorySize=0 is different than using the default value of MaxDirectMemorySize, which is also 0.;;;","2022-04-12 18:38;dholmes;Setting a flag's value to N should behave the same regardless of whether it is set directly or is the default. The issue here is that the flag value is actually used to control whether the sun.nio.MaxDirectMemorySize property gets set. If MaxDirectMemorySize has its default value (0) then we don't set the property and so the system chooses the size. If MaxDirectMemorySize is set to any value, including 0, then we set the property to that value. So we need to change:

if (!FLAG_IS_DEFAULT(MaxDirectMemorySize)) {

to

if (!FLAG_IS_DEFAULT(MaxDirectMemorySize) && MaxDirectMemorySize > 0) {

to get consistent behaviour.;;;","2022-04-13 05:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8222
Date: 2022-04-13 12:24:46 +0000;;;","2022-04-26 12:02;dukebot;Changeset: 975a060a
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2022-04-26 19:01:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/975a060ade6e11b021222ae7f7a2de0d0c041308
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Update versions of some Github Actions used in JDK workflow,JDK-8284622,5072244,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-04-09 00:09,2022-11-10 04:59,2023-10-01 09:56,2022-04-12 05:13,11,17,18,19,,,,,,19,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,"Meanwhile, several Github actions have newer versions. We should update our workflow to stay current. Affected actions are:
actions/checkout@v3
actions/cache@v3
actions/upload-artifact@v3
actions/download-artifact@v3
actions/github-script@v6",,,,,,,,,,,JDK-8285651,JDK-8286223,JDK-8285653,JDK-8285652,JDK-8296794,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wobf:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-09 00:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8171
Date: 2022-04-09 07:10:50 +0000;;;","2022-04-12 05:13;dukebot;Changeset: 5851631d
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-04-12 12:11:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5851631de201ac203ff00019530d64db9d1da6dc
;;;","2022-04-13 02:35;clanger;Fix request (18u, 17u, 11u)
Backport of Maintenance for GHA workflow. No risk, since only testing. Applies clean in 18 and 17. For 11 the GHA file differs a bit and had to be resolved. PR acked by mdoerr.;;;","2022-04-13 02:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/101
Date: 2022-04-13 09:34:01 +0000;;;","2022-04-13 03:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/348
Date: 2022-04-13 10:05:25 +0000;;;","2022-04-13 03:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1034
Date: 2022-04-13 10:27:18 +0000;;;","2022-11-09 15:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/167
Date: 2022-11-09 23:33:40 +0000;;;","2022-11-09 15:45;zzambers;Fix request (8u):

Backport fixes warning about deprecated features generated in GHA summary page.
Affects GHA workflow file only. Not a clean backport (due to some differences from 11u), all tests passed.;;;",,,,,,,,,,,,,,,,,,,,,,
CodeBuffer may leak _overflow_arena,JDK-8284620,5072242,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2022-04-08 19:27,2022-05-30 18:29,2023-10-01 09:56,2022-04-11 12:07,11,17,18,19,8,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,oracle-triage-19,redhat-interest,sap-interest,,,,,,,"CodeBuffer is declared as StackObj, but it also has ResourceObj style new operator, to complicate thing further more, it has _overflow_arena that is C Heap allocated.

When Stack allocated CodeBuffer owns _overflow_arena, it works fine, because its destructor frees _overflow_arena. But if resource allocated CodeBuffer owns _overflow_arena, the arena is leaked, because its destructor is never called.

==1139627== 2,096 (96 direct, 2,000 indirect) bytes in 2 blocks are definitely lost in loss record 12,196 of 12,553
==1139627==    at 0x484486F: malloc (vg_replace_malloc.c:381)
==1139627==    by 0x5AE5B9E: malloc (os.cpp:656)
==1139627==    by 0x5AE5B9E: os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) (os.cpp:632)
==1139627==    by 0x527F216: AllocateHeap(unsigned long, MEMFLAGS, NativeCallStack const&, AllocFailStrategy::AllocFailEnum) (allocation.cpp:42)
==1139627==    by 0x52887B8: Arena::operator new(unsigned long, MEMFLAGS) (arena.cpp:286)
==1139627==    by 0x545E16E: CodeBuffer::create_patch_overflow() (codeBuffer.cpp:245)
==1139627==    by 0x529A1BA: Label::add_patch_at(CodeBuffer*, int, char const*, int) (assembler.cpp:166)
==1139627==    by 0x529ED05: Assembler::jcc(Assembler::Condition, Label&, bool) (assembler_x86.cpp:2320)
==1139627==    by 0x5188724: jmpConUNode::emit(CodeBuffer&, PhaseRegAlloc*) const (x86_64.ad:12758)
==1139627==    by 0x5B0759F: PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*) (output.cpp:1681)
==1139627==    by 0x548A7C1: Compile::Code_Gen() (compile.cpp:2858)
==1139627==    by 0x548E7BC: Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*) (compile.cpp:849)
==1139627==    by 0x53CD12F: C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*) (c2compiler.cpp:112)
==1139627==    by 0x5496A03: CompileBroker::invoke_compiler_on_method(CompileTask*) (compileBroker.cpp:2294)
==1139627==    by 0x54975FF: CompileBroker::compiler_thread_loop() (compileBroker.cpp:1967)
==1139627==    by 0x5D496BD: JavaThread::thread_main_inner() (thread.cpp:1291)
==1139627==    by 0x5D4F3AF: Thread::call_run() (thread.cpp:356)
==1139627==    by 0x5AF0EA7: thread_native_entry(Thread*) (os_linux.cpp:706)
==1139627==    by 0x4927B19: start_thread (pthread_create.c:443)
==1139627==    by 0x49AB8E3: clone (clone.S:100)

 ",,,,,,,,,,,JDK-8286235,JDK-8286169,JDK-8286127,JDK-8286128,JDK-8286129,JDK-8286108,JDK-8287229,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287537,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2woaz:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-08 19:55;dlong;ILW = potential memory leak; never seen?; no workaround = MLH = P4;;;","2022-04-09 09:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8172
Date: 2022-04-09 16:01:40 +0000;;;","2022-04-11 12:07;dukebot;Changeset: 4d45c3eb
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-04-11 19:04:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4d45c3ebc493bb2c85dab84b97840c8ba093ab1f
;;;","2022-04-29 11:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/114
Date: 2022-04-29 18:38:30 +0000;;;","2022-04-29 11:48;zgu;Fix Request (18u)

A clean and low risk backport to fix a memory leak.;;;","2022-05-02 05:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/380
Date: 2022-05-02 12:24:59 +0000;;;","2022-05-02 05:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1068
Date: 2022-05-02 12:26:31 +0000;;;","2022-05-02 05:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk8u-dev/pull/52
Date: 2022-05-02 12:32:21 +0000;;;","2022-05-02 06:55;zgu;Fix Request (17u)

I would like to backport this patch to 17u to fix a memory leak. The patch is small and low risk.
;;;","2022-05-02 06:56;zgu;Fix Request (11u)

I would like to backport this patch to 11u to fix a memory leak. The patch is small and low risk.
;;;","2022-05-12 13:24;zgu;Fix Request (8u)

I would like to backport this patch to 8u to fix a memory leak. The patch is small and low risk.;;;",,,,,,,,,,,,,,,,,,,
"javax/swing/JTable/8236907/LastVisibleRow.java failed with ""Test Case Failed!!, Last Row not Visible!!!""",JDK-8284619,5072241,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,dcubed,dcubed,2022-04-08 17:23,2023-01-12 10:22,2023-10-01 09:56,2022-06-15 20:49,19,,,,,,,,,20,client-libs,,0,intermittent,problemlist,sn_117,sn_118,sn_119,sn_120,tier4,,,,,,,,,,,,"The following test failed in the JDK19 CI:

javax/swing/JTable/8236907/LastVisibleRow.java

Here's a snippet from the log file:

#section:main
----------messages:(5/190)----------
command: main LastVisibleRow
reason: User specified action: run main LastVisibleRow 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 4.545
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(11/686)----------
java.lang.RuntimeException: Test Case Failed!!, Last Row not Visible!!!
	at LastVisibleRow.main(LastVisibleRow.java:86)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test Case Failed!!, Last Row not Visible!!!
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Test Case Failed!!, Last Row not Visible!!!
----------rerun:(42/5714)*----------

This build-ID includes the fix for:

JDK-8283070 javax/swing/JTable/8236907/LastVisibleRow.java failed with ""RuntimeException: Test Case Failed!!""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284701,,,,,JDK-8283070,,,,,,,,,,,,"2022-04-11 01:47;tr;bufferedImageAfter.png;https://bugs.openjdk.org/secure/attachment/98510/bufferedImageAfter.png","2022-04-14 02:38;tr;bufferedImageBefore(Ubuntu).png;https://bugs.openjdk.org/secure/attachment/98576/bufferedImageBefore%28Ubuntu%29.png","2022-04-11 01:47;tr;bufferedImageBefore.png;https://bugs.openjdk.org/secure/attachment/98511/bufferedImageBefore.png",,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,os_x,,,,"0|i2woar:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-04-11 01:46;tr;The test compares two buffered Images before and after mouse click operation. After the mouse click, the row is cleared from selection and focus is set to false. This operation is failed resulting in selected row image after mouse click. Screen shots of before (bufferedImageBefore.png )and after ( bufferedImageAfter.png ) mouse click is attached.;;;","2022-04-11 17:23;prr;I don't understand why this test now fails so regularly when the only update to it last week was to add some extra diagnostics when it has already decided it will report failure.;;;","2022-04-12 13:24;dcubed;And just to make life special, we know have a sighting on linux-x64 running  Ubuntu_21.04:

javax/swing/JTable/8236907/LastVisibleRow.java 

----------System.err:(11/686)----------
java.lang.RuntimeException: Test Case Failed!!, Last Row not Visible!!!
	at LastVisibleRow.main(LastVisibleRow.java:86)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test Case Failed!!, Last Row not Visible!!!
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Test Case Failed!!, Last Row not Visible!!!
----------rerun:(43/5366)*----------;;;","2022-04-14 02:37;tr;In Ubuntu the test is failing because of unexpected bold line at right corner of table border as seen in bufferedImageBefore(Ubuntu).png Image. The Image comparison is failing due to the extra bold line in the last row Table border, which is not in bufferedImageAfter(Ubuntu).png Image. Images Attached.;;;","2022-04-14 02:38;tr;Attachment <bufferedImageAfter(Ubuntu).png> anti-virus scan found a possible virus. The system has removed attachment. Please check the file before attempting to upload it again;;;","2022-04-14 02:39;tr;Attachment <bufferedImageAfter(Ubuntu).png> anti-virus scan found a possible virus. The system has removed attachment. Please check the file before attempting to upload it again;;;","2022-06-06 15:37;vdyakov;[~tr] any progress on this bug fix?;;;","2022-06-06 22:39;tr;[~vdyakov] Linux issue can be fixed. I'm working on macos issue. Will work on it. Since I'm not able to reproduce it with several runs on mach5, its taking time for me to analyze the root cause.;;;","2022-06-09 22:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9116
Date: 2022-06-10 05:18:41 +0000;;;","2022-06-09 22:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9117
Date: 2022-06-10 05:35:22 +0000;;;","2022-06-15 20:49;dukebot;Changeset: 39526e28
Author:    Tejesh R <tr@openjdk.org>
Committer: Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-06-16 03:47:30 +0000
URL:       https://git.openjdk.org/jdk/commit/39526e28bc4b82d22623a839362fd443e9fb11f0
;;;",,,,,,,,,,,,,,,,,,,
"on macOS ""spindump"" should be run from failure_handler as root",JDK-8284614,5072230,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,cjplummer,cjplummer,2022-04-08 13:50,2022-11-08 10:54,2023-10-01 09:56,2022-10-18 10:37,19,,,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,"Currently it is not run as root, and therefore does nothing. I think the following in mac.properties will fix that, but haven't verified it yet:

-native.spindump.app=spindump
-native.spindump.args=%p -stdout
+native.spindump.app=sudo
+native.spindump.args=spindump %p -stdout

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286744,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wo8b:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-10-12 09:03;dnsimon;The proposed solution works on my M1 MacBook.;;;","2022-10-17 09:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10730
Date: 2022-10-17 16:35:16 +0000;;;","2022-10-18 10:37;dukebot;Changeset: 0233ba76
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-10-18 17:34:07 +0000
URL:       https://git.openjdk.org/jdk/commit/0233ba763d84e6da8ec03df5d021a13c5fbbc871
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
invalid use of @serial tag,JDK-8284613,5072226,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,achung,jjg,jjg,2022-04-08 12:44,2022-05-11 23:12,2023-10-01 09:56,2022-05-08 14:25,18,,,,,,,,,19,client-libs,,0,sn_117,sn_118,,,,,,,,,,,,,,,,,"The following messages were uncovered while investigating a bug in javadoc.
The messages themselves appear valid. They are all instances of the same kind of message.

open/src/java.desktop/share/classes/java/applet/Applet.java:111: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
open/src/java.desktop/share/classes/java/awt/Button.java:487: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
open/src/java.desktop/share/classes/java/awt/Checkbox.java:663: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
open/src/java.desktop/share/classes/java/awt/CheckboxMenuItem.java:478: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
open/src/java.desktop/share/classes/java/awt/Choice.java:711: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
open/src/java.desktop/share/classes/java/awt/Container.java:3726: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
open/src/java.desktop/share/classes/java/awt/Font.java:1944: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
open/src/java.desktop/share/classes/java/awt/Label.java:169: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
open/src/java.desktop/share/classes/java/awt/MenuComponent.java:450: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
open/src/java.desktop/share/classes/java/awt/event/FocusEvent.java:389: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
open/src/java.desktop/share/classes/java/awt/event/KeyEvent.java:2009: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
open/src/java.desktop/share/classes/java/awt/event/MouseEvent.java:1197: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285748,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wo7f:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-04-27 12:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8432
Date: 2022-04-27 19:48:15 +0000;;;","2022-05-08 14:25;dukebot;Changeset: cdd1b0da
Author:    Alisen Chung <achung@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-05-08 21:22:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cdd1b0da14837f4bf65a3450ab671ccc18c497f6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[11u] Update Boot JDK used in GHA to 11.0.14.1,JDK-8284604,5072216,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-04-08 10:02,2022-05-04 01:08,2023-10-01 09:56,2022-04-11 08:42,11,,,,,,,,,11.0.16,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,The Boot JDK for GHA should be bumped to 11.0.14.1.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wo57:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-08 10:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1025
Date: 2022-04-08 17:03:57 +0000;;;","2022-04-08 11:24;clanger;Fix request (11u)
The GHA Boot JDK should be kept current. Risk is zero as only the testing is affected. PR reviewed by [~sgehwolf].;;;","2022-04-11 08:42;dukebot;Changeset: 6f0e5b18
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-04-11 15:38:30 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/6f0e5b18b4c9aa5931fdb8540f6f7cd89508ad75
;;;","2022-05-04 01:08;dukebot;Changeset: 6f0e5b18
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-04-11 15:38:30 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/6f0e5b18b4c9aa5931fdb8540f6f7cd89508ad75
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[17u] Update Boot JDK used in GHA to 17.0.2,JDK-8284603,5072215,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-04-08 09:53,2022-05-04 01:29,2023-10-01 09:56,2022-04-11 08:38,17,,,,,,,,,17.0.4,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,GHA of JDK17u currently use an OpenJDK/Oracle build of version 17.0.1. This could be bumped to 17.0.2 of Adoptium.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wo4z:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-08 10:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/342
Date: 2022-04-08 16:54:51 +0000;;;","2022-04-08 11:24;clanger;Fix request (17u)
The GHA Boot JDK should be kept current. Risk is zero as only the testing is affected. PR reviewed by [~sgehwolf].;;;","2022-04-11 08:38;dukebot;Changeset: 33999a45
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-04-11 15:36:51 +0000
URL:       https://git.openjdk.java.net/jdk17u-dev/commit/33999a457aadf5211e632ebd9aba4b1318d8573c
;;;","2022-05-04 01:29;dukebot;Changeset: 33999a45
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-04-11 15:36:51 +0000
URL:       https://git.openjdk.java.net/jdk17u/commit/33999a457aadf5211e632ebd9aba4b1318d8573c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Remove GensrcCommonLangtools.gmk,JDK-8284588,5072198,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-04-08 07:56,2022-04-13 23:03,2023-10-01 09:56,2022-04-08 13:37,19,,,,,,,,,19,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,"There's been unnecessary (near) duplication of functionality, and messy logic, in the langtools gensrc step, for a long time. (Basically since we got rid of the mercurial forest...)

This is a first attempt at cleaning this up. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wo17:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-08 08:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8167
Date: 2022-04-08 14:57:02 +0000;;;","2022-04-08 13:37;dukebot;Changeset: 3357d9a1
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-04-08 20:33:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3357d9a168f031e1de4fa0d203f16a6f060fd062
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
PushPromiseContinuation test fails intermittently in timeout,JDK-8284585,5072192,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,ccleary,dfuchs,dfuchs,2022-04-08 07:15,2022-08-17 13:00,2023-10-01 09:56,2022-05-16 04:17,19,,,,,,,,,19,core-libs,,0,httpclient,intermittent,tier2,,,,,,,,,,,,,,,,"---------messages:(7/562)----------
command: testng PushPromiseContinuation
reason: User specified action: run testng/othervm PushPromiseContinuation 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,java.net.http --add-exports java.base/sun.net.www.http=ALL-UNNAMED --add-exports java.net.http/jdk.internal.net.http.common=ALL-UNNAMED --add-exports java.net.http/jdk.internal.net.http.frame=ALL-UNNAMED --add-exports java.net.http/jdk.internal.net.http.hpack=ALL-UNNAMED
Timeout information:
--- Timeout information end.
elapsed time (seconds): 493.297
----------configuration:(7/351)----------
Boot Layer
  add modules: java.base java.net.http                    
  add exports: java.base/sun.net.www.http                 ALL-UNNAMED
               java.net.http/jdk.internal.net.http.common ALL-UNNAMED
               java.net.http/jdk.internal.net.http.frame  ALL-UNNAMED
               java.net.http/jdk.internal.net.http.hpack  ALL-UNNAMED

----------System.out:(5/244)----------
config PushPromiseContinuation.setup(): success
config PushPromiseContinuation.beforeMethod(): success
test PushPromiseContinuation.testOneContinuation(): success
config PushPromiseContinuation.beforeMethod(): success
Timeout refired 480 times
----------System.err:(24/1085)----------
PushPromiseContinuation: Server listening on port 36385
TestServer: New connection from Socket[addr=/127.0.0.1,port=43520,localport=36385]
TestServer: GET /
Server: creating input stream for stream 1
Using handler for: /
Server: handle PushPromiseContinuation$Http2LPPTestExchangeImpl@37ca20b5
Server: Scheduled a Push Promise to Send
Server: Scheduled a Continuation to Send
Server: Push Promise complete
Sent response headers 200
TestServer: New connection from Socket[addr=/127.0.0.1,port=43524,localport=36385]
TestServer: GET /
Server: creating input stream for stream 1
Using handler for: /
Server: handle PushPromiseContinuation$Http2LPPTestExchangeImpl@39757df3
Server: Scheduled a Push Promise to Send
Server: Scheduled a Continuation to Send
Server: Scheduled a Continuation to Send
Server: Scheduled a Continuation to Send
Server: Push Promise complete
Sent response headers 200
Closing: GOAWAY: length=25, streamid=0, flags=0  Error: Not an error Debugdata: Requested by user
Server connection to /127.0.0.1:43520 stopping. 1 streams
TestServer: Connection writer stopping
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wnzv:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-04-28 06:49;dcubed;Since this is a Tier2 failures, I'm bumping this from P4 -> P3.;;;","2022-05-04 03:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8518
Date: 2022-05-03 15:00:51 +0000;;;","2022-05-16 04:17;dukebot;Changeset: 65da38d8
Author:    Conor Cleary <ccleary@openjdk.org>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-05-16 11:14:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/65da38d844760f7d17a143f8b4d5e25ea0144e27
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Ignore this,JDK-8284582,5072189,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,,alanb,alanb,2022-04-08 05:49,2022-04-08 06:13,2023-10-01 09:56,2022-04-08 06:13,,,,,,,,,,,other-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wnz7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test issue,JDK-8284569,5072174,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2022-04-07 23:27,2022-04-08 01:41,2023-10-01 09:56,2022-04-08 01:41,,,,,,,,,,,other-libs,,0,,,,,,,,,,,,,,,,,,,For testing purposes.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wnvv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ensure reachability of classes in runtime/whitebox/TestHiddenClassIsAlive.java and serviceability/dcmd/vm/ClassLoaderHierarchyTest.java ,JDK-8284556,5072163,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2022-04-07 16:14,2022-04-13 23:02,2023-10-01 09:56,2022-04-08 12:27,19,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,"Tests
 runtime/whitebox/TestHiddenClassIsAlive.java and serviceability/dcmd/vm/ClassLoaderHierarchyTest.java 
failing in loom repo because classes were unloaded.

It is a test bug not related to loom and should be fixed in jdk/jdk separately.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wntf:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2022-04-07 16:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8152
Date: 2022-04-07 23:29:41 +0000;;;","2022-04-08 12:27;dukebot;Changeset: a8c87526
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-04-08 19:24:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a8c87526027bed750e3dcab78139b49bc0a05f83
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"test failure_handler is not properly invoking jhsdb jstack, resulting in failure to produce a stack when a test times out",JDK-8284550,5072156,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lmesnik,cjplummer,cjplummer,2022-04-07 12:17,2022-05-11 23:13,2023-10-01 09:56,2022-05-09 11:28,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,"When tests time out, often jstack can't attach, so we instead rely on running jhsdb jstack on the core file. However, this appears to always fail to find the core file.

ERROR: can't open core file: No such file or directory
Error attaching to core file: Can't attach to the core file
sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the core file",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wnrv:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-04-07 21:25;cjplummer;I modified the failure_handler to execute ""pwd"" and it printed:

  <results_dir>/scratch/0

And I also had it execute ""ls"":

jdb.commands
jdb.session
jdb.stderr
jdb.stdout
processes.html
processes.log

So the core files are missing. Also, the directory is empty after the failure_handler is done running.

The core file is actually located in <results_dir>/vmTestbase/nsk/jdb/kill/kill001/kill001/core.<pid>. The contents of that directory are:

core.13853  environment.html	   jdb.commands  jdb.stdout
core.13907  environment.log	   jdb.session	 processes.html
cores.html  JavaThread.dump.13853  jdb.stderr	 processes.log

So either the proper directory needs to be included with the core file name (I have no idea how to get that directory), or the core file needs to be copied into the scratch directory, which is the cwd when the failure_handler is executed.

Also just trying to open <pid> isn't going to work. It needs to be core.<pid>;;;","2022-05-04 13:18;cjplummer;I'd really like to see this issue get some attention. Whenever we have a test timeout, we should be able to get jhsdb jstack output for the core file, which is very useful in tracking down timeout issues. However, this bug with locating the core file is preventing the timeout failure handler from running jhsdb jstack successfully on all platforms.;;;","2022-05-04 15:55;lmesnik;The intention was not to debug core file which is not yet generated at this time but get stack of live/hang process using jhsdb. The core file processing is in the cores.html file.


The command has been added in the
https://github.com/openjdk/jdk/pull/4234/commits/956e082f15f1fc8b4410b415fbc6965b96d757b4#diff-232d70238b9dbda1be89c7e13e891966c501760beba1c739a2f7dfcad27550a8R38

The goal was to add 
jhsdb.app=jhsdb
jhsdb.jstack.args=jstack --mixed --pid %p
jhsdb.jstack.params.repeat=6

but it is overwritten by 

cores=jhsdb.jstack
jhsdb.jstack.app=jhsdb
# Assume that java standard laucher has been used
jhsdb.jstack.args=jstack --mixed --core %p --exe %java
;;;","2022-05-08 15:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8588
Date: 2022-05-08 21:57:20 +0000;;;","2022-05-09 11:28;dukebot;Changeset: 40470d83
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-05-09 18:26:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/40470d83e4d8d4a48eb87e6bf4d221460bddfd75
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JFR: FieldTable leaks FieldInfoTable member,JDK-8284549,5072155,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2022-04-07 12:01,2022-07-28 05:56,2023-10-01 09:56,2022-04-10 18:00,11,17,18,19,,,,,,19,hotspot,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,jfr,redhat-interest,sap-interest,,,,"FieldTable has a FieldInfoTable data member, which is a CHeapObj, but FieldTable is a ResouceObj, so that its destructor is never called, therefore, it leaks FieldInfoTable.

",,,,,,,,,,,JDK-8286238,JDK-8286131,JDK-8286132,JDK-8286130,JDK-8291492,JDK-8291493,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wnrn:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-04-07 14:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8149
Date: 2022-04-07 20:58:23 +0000;;;","2022-04-10 18:00;dukebot;Changeset: 92f5e426
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-04-11 00:58:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/92f5e42696847de7e47e238412d2d541a11bccd7
;;;","2022-04-27 12:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/113
Date: 2022-04-27 19:32:48 +0000;;;","2022-04-27 12:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/374
Date: 2022-04-27 19:33:20 +0000;;;","2022-04-27 12:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1055
Date: 2022-04-27 19:33:53 +0000;;;","2022-04-27 12:40;zgu;Fix Request (18u)

A clean and low risk backport to fix a memory leak in jfr leak profiler.

;;;","2022-04-27 12:40;zgu;Fix Request (17u)

A clean and low risk backport to fix a memory leak in jfr leak profiler.

;;;","2022-04-27 12:40;zgu;Fix Request (11u)

A clean and low risk backport to fix a memory leak in jfr leak profiler.

;;;","2022-07-28 04:53;evergizova;Fix request (15u & 13u)

Requesting backport to 15u & 13u to fix a memory leak in jfr. The fix is already included in 11u.
The patch applies cleanly.
Tested with jdk/jfr and tier1.
;;;","2022-07-28 04:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/243
Date: 2022-07-28 11:47:15 +0000;;;","2022-07-28 05:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/381
Date: 2022-07-28 11:49:25 +0000;;;",,,,,,,,,,,,,,,,,,,
Invalid XPath expression causes StringIndexOutOfBoundsException,JDK-8284548,5072154,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,joehw,joehw,joehw,2022-04-07 11:13,2022-08-17 11:26,2023-10-01 09:56,2022-04-20 16:11,11.0.15-oracle,17.0.3-oracle,18.0.1,7u341,8u331,,,,,19,xml,,0,CPU22_04-defer-request,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,regression,,,,,,,,,,,,,,"Invalid XPath expression that ends with relational operator ( < > = ) causes StringIndexOutOfBoundsException to be thrown. Previously, it would have been XPathExpressionException.",,,,,,,,,,,JDK-8285465,JDK-8285176,JDK-8285747,JDK-8285752,JDK-8285462,JDK-8285076,JDK-8285441,JDK-8285577,JDK-8285815,JDK-8285469,JDK-8285120,JDK-8285556,JDK-8285091,JDK-8286231,JDK-8285193,JDK-8285302,JDK-8286252,JDK-8285215,JDK-8285238,JDK-8285460,JDK-8285297,JDK-8286369,JDK-8285298,JDK-8285304,JDK-8285327,,,,,,,,,,,,,,,,,,,JDK-8285726,JDK-8270504,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wnrf:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,Verified,,"2022-04-20 13:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8323
Date: 2022-04-20 20:08:01 +0000;;;","2022-04-20 16:11;dukebot;Changeset: 994f2e92
Author:    Joe Wang <joehw@openjdk.org>
Date:      2022-04-20 23:08:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/994f2e9271355bebf355279d0208c1d2054bab27
;;;","2022-04-21 00:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/102
Date: 2022-04-21 06:57:46 +0000;;;","2022-04-21 02:02;rreddy;Fix request (18u)
Clean backport of mainline fix.
Need to fix this in18u as it's a regression issue.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Configure --with-source-date=version fails on MacOS,JDK-8284539,5072144,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aleonard,aleonard,aleonard,2022-04-07 09:15,2022-04-20 23:31,2023-10-01 09:56,2022-04-19 07:26,19,,,,,,,,,19,infrastructure,,0,reproducible-build,,,,,,,,,,,,,,,,,,"Currently on MacOS running configure with --with-source-date=version
results in:
16:46:08  checking what source date to use... unavailable
16:46:08  configure: error: Cannot convert DEFAULT_VERSION_DATE to timestamp
16:46:08  configure exiting with result code 1

I think it's due to recent change https://github.com/openjdk/jdk/pull/7733/files
which does not handle the case where there is no ""time"" specified any longer, which is what happens using DEFAULT_VERSION_DATE from version-numbers.conf => ""2022-09-20""

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282769,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2wnp7:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-08 01:43;ihse;Yes, you are correct. We need to add back the fallback without time, if the millisecond workaround fails.

How I hate the shoddy BSD implementations of standard unix tools. :-( ISOO 8601 is well specified, and it's not that hard to actually support it...;;;","2022-04-14 09:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8247
Date: 2022-04-14 16:13:59 +0000;;;","2022-04-19 07:26;dukebot;Changeset: da3d8b1d
Author:    Andrew Leonard <aleonard@openjdk.org>
Date:      2022-04-19 14:25:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/da3d8b1d1ea132e670d5629af3e98d958f2b56f7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix PrintLatinCJKTest.java test that is failing with Parse Exception,JDK-8284535,5072138,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-04-07 07:58,2022-12-06 01:09,2023-10-01 09:56,2022-04-12 06:53,,,,,,,,,,19,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,"PrintLatinCJKTest.java is failing with the following exception 

----------messages:(0/0)----------
test result: Error. Parse Exception: Arguments to `manual' option not supported: yesno",,,,,,,,,,,JDK-8292402,JDK-8298151,JDK-8290219,JDK-8291782,JDK-8292014,JDK-8290961,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291483,,,,,,JDK-8292230,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wnnv:",9223372036854775807,b18,,,,,,,,,,,"2022-04-07 08:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7966
Date: 2022-03-25 21:06:12 +0000;;;","2022-04-12 06:53;dukebot;Changeset: 3f26d84f
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-04-12 13:49:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3f26d84f6a03030080328e36a1fd1a08c982838c
;;;","2022-08-02 05:48;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, only a test change.
Clean backport  except of file already backported in JDK-8283803
SAP nighlty testing passed.;;;","2022-08-02 06:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/618
Date: 2022-08-02 12:47:05 +0000;;;","2022-08-03 07:06;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
No risk, only a test change.
I had to adapt a string literal to the syntax of java 11.
Not skipping the file as in 17, because 8283803 is not yet backported to 11.
So we do it in the right order.
Test passes.  SAP nighlty testing passed.
;;;","2022-08-03 08:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1309
Date: 2022-08-03 14:04:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in BitSet::BitMapFragmentTable in JFR leak profiler,JDK-8284532,5072133,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2022-04-07 07:24,2023-05-21 23:56,2023-10-01 09:56,2022-04-08 07:59,17,18,19,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,redhat-interest,sap-interest,,,,,,,,,,,,Leaks hash entries and bucket array.,,,,,,,,,,,JDK-8286247,JDK-8286145,JDK-8286144,JDK-8308492,JDK-8308428,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wnmr:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-04-07 10:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8148
Date: 2022-04-07 17:41:46 +0000;;;","2022-04-08 07:59;dukebot;Changeset: b55c32f5
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-04-08 14:58:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b55c32f5fe452e2b4e6f912a7d27f979e68ba67e
;;;","2022-04-26 12:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/111
Date: 2022-04-26 19:14:29 +0000;;;","2022-04-26 12:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/369
Date: 2022-04-26 19:15:23 +0000;;;","2022-04-26 12:25;zgu;Fix Request (18u)

A clean and low risk backport to fix a memory leak in jfr leak profiler.
;;;","2022-04-26 12:25;zgu;Fix Request (17u)

A clean and low risk backport to fix a memory leak in jfr leak profiler.
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Create an automated test for JDK-4422362,JDK-8284524,5072123,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-04-07 03:46,2023-06-27 08:16,2023-10-01 09:56,2022-07-18 10:24,11,17,18,19,8,,,,,20,client-libs,,0,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,"Create an automated test for JDK-4422362

The BoundedRangeModel components (JScrollBar, JSlider, JProgressBar) return
BoundedRangeModel.getMaximum() from getMaximumAccessibleValue() in their
AccessibleValue implementation.
The real maximum value (due to the constraints on BoundedRangeModel) is
model.getMaximum() - model.getExtent().
The test verifies that the above is adhered to as expected. 

This review is for migrating tests from a closed test suite to open.

Testing:
The test ran successfully on Mach5 with multiple runs (30) on windows-x64, linux-x64 and macos-x64.",,,,,,,,,,,JDK-8301911,JDK-8301607,JDK-8302705,JDK-8310968,JDK-8304849,JDK-8303560,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wnkj:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-04-08 02:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8158
Date: 2022-04-08 09:42:51 +0000;;;","2022-07-18 10:24;dukebot;Changeset: b9de0a75
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-07-18 17:17:50 +0000
URL:       https://git.openjdk.org/jdk/commit/b9de0a7556f7be2c6afc6bb41bfa0339b639ff88
;;;","2023-02-28 09:49;goetz;Fix request [17u]

I backport this test fix for parity with 17.0.8-oracle to 17.0.7.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed;;;","2023-02-28 10:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1192
Date: 2023-02-28 17:53:53 +0000;;;","2023-06-22 07:50;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed;;;","2023-06-22 08:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1991
Date: 2023-06-22 14:50:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
GHA: Only check test results if testing was not skipped,JDK-8284507,5072105,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-04-07 00:50,2022-04-17 21:48,2023-10-01 09:56,2022-04-08 06:31,11,17,18,19,,,,,,19,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,,,,,,,,,,,,"In GitHub Actions the step ""Check that all tests executed successfully"" will be marked as failing when the ""Run tests"" step did not run but some earlier step already failed. This is irritating and it can be corrected by doing the test check only if testing was not skipped.

Here is a link to such a test run where the check failed although the issue was with the cygwin installation: https://github.com/GoeLin/jdk11u-dev/runs/5788778433?check_suite_focus=true",,,,,,,,,,,JDK-8284634,JDK-8284685,JDK-8284684,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wngj:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-07 00:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8139
Date: 2022-04-07 07:53:38 +0000;;;","2022-04-08 06:31;dukebot;Changeset: 8eac3427
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-04-08 13:29:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8eac3427b1d3932378965c7dce26853d1e1a04d9
;;;","2022-04-08 12:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/95
Date: 2022-04-08 19:54:21 +0000;;;","2022-04-08 13:24;clanger;Fix request (18u, 17u, 11u)
Request to backport this Github Actions tweak. Backport applies cleanly, no risk since only affecting GHA testing.;;;","2022-04-08 13:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/344
Date: 2022-04-08 20:43:12 +0000;;;","2022-04-08 14:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1026
Date: 2022-04-08 21:07:58 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
[testbug] Adapt nsk tests to the RISC-V platform,JDK-8284495,5071917,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fjiang,fjiang,fjiang,2022-04-06 20:00,2022-04-13 23:02,2023-10-01 09:56,2022-04-07 18:01,19,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,"Since riscv does not have a shared memory connector, 
the following test fails on linux-riscv64  with the jtreg patch 
of https://bugs.openjdk.java.net/browse/CODETOOLS-7903138:

- vmTestbase/nsk/jdb/options/connect/connect003/connect003.java
- vmTestbase/nsk/jdb/options/connect/connect005/connect005.java
-  vmTestbase/nsk/jdb/options/listconnectors/listconnectors001/listconnectors001.java
-  vmTestbase/nsk/jdi/AttachingConnector/attach/attach002/TestDescription.java
- vmTestbase/nsk/jdi/AttachingConnector/attach/attach005/TestDescription.java
- vmTestbase/nsk/jdi/AttachingConnector/attachnosuspend/attachnosuspend003/TestDescription.java
-  vmTestbase/nsk/jdi/LaunchingConnector/launch/launch002/TestDescription.java
-  vmTestbase/nsk/jdi/LaunchingConnector/launch/launch004/TestDescription.java
-  vmTestbase/nsk/jdi/ListeningConnector/accept/accept002/TestDescription.java

Failed log example:
```
launcher > Starting local debuggee.
launcher > Start jdb attaching to local debuggee
Creating file for jdb stdout stream: ./jdb.stdout
Creating file for jdb session: ./jdb.session
Creating file for jdb stderr stream: ./jdb.stderr
debuggee.stderr> ERROR: transport library not found: dt_shmem
debuggee.stderr> ERROR: JDWP Transport dt_shmem failed to initialize, TRANSPORT_LOAD(509)
debuggee.stderr> JDWP exit error AGENT_ERROR_TRANSPORT_LOAD(196): No transports initialized [/home/jiangfeilong/workspace/jdk/src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:734]
debuggee.stdout> FATAL ERROR in native method: JDWP No transports initialized, jvmtiError=AGENT_ERROR_TRANSPORT_LOAD(196)
```
test will try to launch attached jdb repetitively until timeout.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,"0|i2wmar:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2022-04-06 22:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8137
Date: 2022-04-07 05:47:56 +0000;;;","2022-04-07 18:01;dukebot;Changeset: de9596c2
Author:    Feilong Jiang <fjiang@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-04-08 00:58:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/de9596c2905061443c93450087a888c7c01d1bc2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove finalizer method in java.security.jgss,JDK-8284490,5071910,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-04-06 14:57,2022-05-04 23:40,2023-10-01 09:56,2022-05-03 07:18,,,,,,,,,,19,security-libs,,0,finalizer,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,,"Finalize has been deprecated and uses of finalize should be converted to use java.lang.ref.Cleaner, and the finalize method should be removed. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8253568,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wm97:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2022-04-06 21:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8136
Date: 2022-04-07 04:10:55 +0000;;;","2022-05-03 07:18;dukebot;Changeset: ffca23a5
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-05-03 14:14:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ffca23a5313855a6f9797ad6b342bb2e2cb1b49b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CodeHeapState::aggregate() leaks blob_name,JDK-8284458,5071873,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2022-04-06 11:02,2022-05-05 11:43,2023-10-01 09:56,2022-04-07 13:40,11,17,18,19,,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,oracle-triage-19,redhat-interest,sap-interest,,,,,,,,,"==878128== 8,324 bytes in 904 blocks are definitely lost in loss record 12,354 of 12,498
==878128==    at 0x484486F: malloc (vg_replace_malloc.c:381)
==878128==    by 0x5AE7745: malloc (os.cpp:656)
==878128==    by 0x5AE7745: malloc (os.cpp:632)
==878128==    by 0x5AE7745: malloc (os.cpp:629)
==878128==    by 0x5AE7745: os::strdup(char const*, MEMFLAGS) (os.cpp:584)
==878128==    by 0x546D311: CodeHeapState::aggregate(outputStream*, CodeHeap*, unsigned long) (codeHeapState.cpp:759)
==878128==    by 0x546659E: CodeCache::aggregate(outputStream*, unsigned long) (codeCache.cpp:1643)
==878128==    by 0x5494264: CompileBroker::print_heapinfo(outputStream*, char const*, unsigned long) (compileBroker.cpp:2856)
==878128==    by 0x554B831: DCmd::parse_and_execute(DCmdSource, outputStream*, char const*, char, JavaThread*) (diagnosticFramework.cpp:409)
==878128==    by 0x52E58BE: jcmd(AttachOperation*, outputStream*) (attachListener.cpp:203)
==878128==    by 0x52E64FC: attach_listener_thread_entry (attachListener.cpp:427)
==878128==    by 0x52E64FC: attach_listener_thread_entry(JavaThread*, JavaThread*) (attachListener.cpp:377)
==878128==    by 0x5D4AB1D: JavaThread::thread_main_inner() (thread.cpp:1291)
==878128==    by 0x5D5080F: Thread::call_run() (thread.cpp:356)
==878128==    by 0x5AF3017: thread_native_entry(Thread*) (os_linux.cpp:706)
==878128==    by 0x4927B19: start_thread (pthread_create.c:443)
==878128==    by 0x49AB8E3: clone (clone.S:100)
",,,,,,,,,,,JDK-8285924,JDK-8286167,JDK-8285757,JDK-8286229,JDK-8285758,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8219586,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wm0z:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-06 16:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8132
Date: 2022-04-06 23:30:13 +0000;;;","2022-04-07 13:40;dukebot;Changeset: d4a48843
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-04-07 20:36:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d4a48843856e3d80a58d5a0a26dff6c4d349dca9
;;;","2022-04-10 23:46;thartmann;Moved to hotspot/compiler.;;;","2022-04-11 00:38;rcastanedalo;ILW = memory leak in debug functionality; guaranteed leak; no workaround = LHH = P4;;;","2022-04-25 12:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/110
Date: 2022-04-25 19:07:40 +0000;;;","2022-04-25 12:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/364
Date: 2022-04-25 19:10:34 +0000;;;","2022-04-25 12:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1046
Date: 2022-04-25 19:12:50 +0000;;;","2022-04-25 12:35;zgu;Fix Request (18u)

A clean and low risk backport to fix a memory leak.
;;;","2022-04-26 05:23;zgu;Fix Request (17u)

I would like to backport this low risk patch to 17u to fix a memory leak. 

The original patch does not apply cleanly, but patch is small, resolved manually.
;;;","2022-04-28 09:36;zgu;Fix Request (11u)

I would like to backport this patch to 11u to fix a memory leak. 

The original patch does not apply cleanly, but patch is small, resolved manually.
;;;",,,,,,,,,,,,,,,,,,,,
Support PreserveFramePointer with virtual threads,JDK-8284448,5071858,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rpressler,rpressler,rpressler,2022-04-06 06:53,2022-04-06 17:29,2023-10-01 09:56,2022-04-06 17:29,repo-loom,,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,Would require always taking the slow-path and patching the link of compiled frames.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wlxn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-06 17:29;rpressler;Fixed by https://git.openjdk.java.net/loom/commit/35c71e8459472fd3cdc4337a56cc7efd379ff7a6;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove the unused NestedClassWriter interface,JDK-8284447,5071857,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,prappo,prappo,2022-04-06 06:41,2023-08-10 06:04,2023-10-01 09:56,2023-07-28 10:49,19,,,,,,,,,22,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,It seems like this interface has never been used.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312201,JDK-8312044,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wlxf:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-04-06 09:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8129
Date: 2022-04-06 16:22:49 +0000;;;","2022-09-22 03:37;prappo;Postponed for later.;;;","2023-07-18 11:22;jjg;Ideally, it should not be empty.

While there are no ""Details"" to be listed on the page for the enclosing type element, there is a summary entry, and the code to generate summary tables should be distributed across the different impulse of AbstractMemberWriter.

Assuming that happens, this will be closed ""Will Not Fix"".
;;;","2023-07-27 09:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15049
Date: 2023-07-27 01:44:36 +0000;;;","2023-07-28 10:44;jjg;The class is now used, and the changes are part of PR 15049.
I'll leave Skara to close out this issue as Fixed.;;;","2023-07-28 10:49;dukebot;Changeset: 402cb6a5
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-07-28 17:48:31 +0000
URL:       https://git.openjdk.org/jdk/commit/402cb6a550f60c75f93c709b5e5902f3757a8acd
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Miscellaneous doc-comment fixes in jdk.javadoc,JDK-8284446,5071856,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-04-06 05:54,2022-04-13 23:02,2023-10-01 09:56,2022-04-07 02:40,19,,,,,,,,,19,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,,Flush a queue of assorted doc-comment eyesores.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wlx7:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-04-06 08:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8127
Date: 2022-04-06 14:55:42 +0000;;;","2022-04-07 02:40;dukebot;Changeset: 4f36229c
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-04-07 09:38:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4f36229c963721af0a1471e6aa6bcb6ef30a5259
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Sting typo,JDK-8284444,5071855,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2022-04-06 04:58,2022-04-13 23:02,2023-10-01 09:56,2022-04-07 07:58,18,19,,,,,,,,19,tools,,0,noreg-trivial,,,,,,,,,,,,,,,,,,"JPackage error message contains a typo:
""Version sting may have up to 3 components""

should be String, not Sting
The same typo appears in a few other places in JDK code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wlwz:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-04-06 05:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8125
Date: 2022-04-06 12:07:30 +0000;;;","2022-04-07 07:58;dukebot;Changeset: 5bafcfdc
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-04-07 14:55:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5bafcfdc171b5a514ecf620703e77fa2f4a49c58
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Building from different users/workspace is not always deterministic,JDK-8284437,5071847,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aleonard,aleonard,aleonard,2022-04-06 02:07,2022-05-30 02:32,2023-10-01 09:56,2022-04-06 12:16,,,,,,,,,,19,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,reproducible-build,,,,,,,,,,,,,,,,"When building openjdk from different users or different workspace folders, the jdk binary is not always reproducible/deterministic.

There are several reasons for this from my investigations:
- Different build users causes src.zip difference due to optional extended extra zip info containing the UID/GID
- When debug symbols are generated the full workspace path gets embedded into the stripped debug info, resulting in debug symbol difference, which then causes jdk .so library difference due to the debug info CRC value being different
- hotspot ADLC library does not currently use the -fmacro-prefix-map option, so __FILE__ macros contain full workspace paths
- when generating external debug symbols the hotspot MASM files debug info entries contain full workspace paths, I believe because the debug filename mapping options don't apply to MASM
- gcc symbol random name generation is not deterministically seeded, thus it is not guaranteed to generate the same random symbol names, eg._AFTZ8_GetFileNameMethod

",,,,,,,,,,,JDK-8287514,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284661,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2wlv7:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-06 04:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8124
Date: 2022-04-06 10:27:40 +0000;;;","2022-04-06 12:16;dukebot;Changeset: 4451257b
Author:    Andrew Leonard <aleonard@openjdk.org>
Date:      2022-04-06 19:11:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4451257b1432e4180a16757aafca6141b8063772
;;;","2022-05-25 10:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/415
Date: 2022-05-25 17:47:46 +0000;;;","2022-05-25 11:43;aleonard;Fix Request 17u
Enable reproducible builds when the built workspace folder and or user is different between the two builds.
Applies cleanly and tests successfully.
After this is merged the dependent fix can also be merged: https://bugs.openjdk.java.net/browse/JDK-8284661;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Too aggressive sweeping with Loom,JDK-8284404,5071809,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,eosterlund,lmesnik,lmesnik,2022-04-05 20:43,2022-06-23 00:04,2023-10-01 09:56,2022-06-19 23:45,repo-loom,,,,,,,,,20,hotspot,,0,gc-g1,loom,,,,,,,,,,,,,,,,,"Test 	gc/g1/mixedgc/TestOldGenCollectionUsage.java fails with 

[0.010s][info][gc] Using G1
[5.052s][info][gc] GC(0) Pause Young (Concurrent Start) (CodeCache GC Threshold) 1M->1M(14M) 3.708ms
[5.052s][info][gc] GC(1) Concurrent Mark Cycle
[5.066s][info][gc] GC(1) Pause Remark 1M->1M(14M) 8.189ms
[5.068s][info][gc] GC(1) Pause Cleanup 1M->1M(14M) 0.035ms
[5.068s][info][gc] GC(1) Concurrent Mark Cycle 16.038ms
[7.044s][info][gc] GC(2) Pause Young (Concurrent Start) (CodeCache GC Threshold) 1M->1M(14M) 1.564ms
[7.044s][info][gc] GC(3) Concurrent Mark Cycle
[7.063s][info][gc] GC(3) Pause Remark 1M->1M(14M) 12.511ms
[7.065s][info][gc] GC(3) Pause Cleanup 1M->1M(14M) 0.038ms
[7.065s][info][gc] GC(3) Concurrent Mark Cycle 21.037ms
[7.305s][info][gc] GC(4) Pause Young (Concurrent Start) (CodeCache GC Threshold) 1M->1M(14M) 1.199ms
[7.305s][info][gc] GC(5) Concurrent Mark Cycle
[7.323s][info][gc] GC(5) Pause Remark 1M->1M(14M) 10.848ms
[7.325s][info][gc] GC(5) Pause Cleanup 1M->1M(14M) 0.046ms
[7.325s][info][gc] GC(5) Concurrent Mark Cycle 19.865ms
[7.359s][info][gc] GC(6) Pause Young (Concurrent Start) (CodeCache GC Threshold) 1M->1M(14M) 0.477ms
[7.359s][info][gc] GC(7) Concurrent Mark Cycle
[7.376s][info][gc] GC(7) Pause Remark 1M->1M(14M) 11.692ms
[7.377s][info][gc] GC(7) Pause Cleanup 1M->1M(14M) 0.041ms
[7.378s][info][gc] GC(7) Concurrent Mark Cycle 18.961ms
[11.401s][info][gc] GC(8) Pause Young (Concurrent Start) (CodeCache GC Threshold) 1M->1M(14M) 2.332ms
[11.401s][info][gc] GC(9) Concurrent Mark Cycle
[11.423s][info][gc] GC(9) Pause Remark 1M->1M(14M) 15.900ms
[11.428s][info][gc] GC(9) Pause Cleanup 1M->1M(14M) 0.030ms
[11.428s][info][gc] GC(9) Concurrent Mark Cycle 26.621ms
[13.390s][info][gc] GC(10) Pause Young (Concurrent Start) (CodeCache GC Threshold) 1M->1M(14M) 1.640ms
[13.390s][info][gc] GC(11) Concurrent Mark Cycle
[13.418s][info][gc] GC(11) Pause Remark 1M->1M(14M) 21.073ms
[13.421s][info][gc] GC(11) Pause Cleanup 1M->1M(14M) 0.034ms
[13.421s][info][gc] GC(11) Concurrent Mark Cycle 31.662ms
[15.669s][info][gc] GC(12) Pause Young (Concurrent Start) (CodeCache GC Threshold) 1M->1M(14M) 1.108ms
[15.669s][info][gc] GC(13) Concurrent Mark Cycle
[15.699s][info][gc] GC(13) Pause Remark 1M->1M(14M) 24.211ms
[15.701s][info][gc] GC(13) Pause Cleanup 1M->1M(14M) 0.047ms
[15.702s][info][gc] GC(13) Concurrent Mark Cycle 32.781ms
Monitor G1 Old Gen pool with G1 Young Generation collector.
[19.061s][info][gc] GC(14) Pause Young (Concurrent Start) (CodeCache GC Threshold) 2M->1M(14M) 2.588ms
[19.062s][info][gc] GC(15) Concurrent Mark Cycle
[19.087s][info][gc] GC(15) Pause Remark 1M->1M(14M) 19.521ms
[19.089s][info][gc] GC(15) Pause Cleanup 1M->1M(14M) 0.045ms
[19.089s][info][gc] GC(15) Concurrent Mark Cycle 27.876ms
Found pool: G1 Old Gen
Found collector: G1 Young Generation
[21.305s][info][gc] GC(16) Pause Full (WhiteBox Initiated Full GC) 2M->1M(14M) 46.398ms
[21.306s][info][gc] GC(17) Pause Young (Concurrent Start) (CodeCache GC Threshold) 1M->1M(14M) 1.013ms
[21.306s][info][gc] GC(18) Concurrent Mark Cycle
[21.337s][info][gc] GC(18) Pause Remark 1M->1M(14M) 23.691ms
[21.339s][info][gc] GC(18) Pause Cleanup 1M->1M(14M) 0.040ms
[21.339s][info][gc] GC(18) Concurrent Mark Cycle 32.771ms
[21.400s][info][gc] GC(19) Pause Young (Concurrent Start) (CodeCache GC Threshold) 1M->1M(14M) 0.910ms
[21.400s][info][gc] GC(20) Concurrent Mark Cycle
[21.430s][info][gc] GC(20) Pause Remark 1M->1M(14M) 23.446ms
[21.434s][info][gc] GC(20) Pause Cleanup 1M->1M(14M) 0.047ms
[21.434s][info][gc] GC(20) Concurrent Mark Cycle 34.302ms
[21.527s][info][gc] GC(21) Pause Young (Prepare Mixed) (G1 Evacuation Pause) 3M->3M(14M) 2.179ms
[21.533s][info][gc] GC(22) Pause Young (Mixed) (WhiteBox Initiated Young GC) 3M->3M(14M) 5.387ms
G1 Old Gen: usage after GC = 3921928
G1 Young Generation: collection count = 12
G1 Young Generation: collection time  = 23
[21.813s][info][gc] GC(23) Pause Young (Concurrent Start) (WhiteBox Initiated Concurrent Mark) 3M->3M(14M) 1.148ms
[21.813s][info][gc] GC(24) Concurrent Mark Cycle
[21.850s][info][gc] GC(24) Pause Remark 3M->3M(14M) 29.203ms
[21.855s][info][gc] GC(24) Pause Cleanup 3M->3M(14M) 0.041ms
[21.856s][info][gc] GC(24) Concurrent Mark Cycle 42.653ms
[21.870s][info][gc] GC(25) Pause Young (Prepare Mixed) (WhiteBox Initiated Young GC) 3M->3M(14M) 1.856ms
[21.872s][info][gc] GC(26) Pause Young (Mixed) (WhiteBox Initiated Young GC) 3M->2M(14M) 1.200ms
G1 Old Gen: usage after GC = 2983424
----------System.err:(12/783)----------
java.lang.RuntimeException: G1 Old Gen found not updating usage
	at gc.g1.mixedgc.TestOldGenCollectionUsage.run(TestOldGenCollectionUsage.java:130)
	at gc.g1.mixedgc.TestOldGenCollectionUsage.main(TestOldGenCollectionUsage.java:62)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1534)

JavaTest Message: Test threw exception: java.lang.RuntimeException: G1 Old Gen found not updating usage
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: G1 Old Gen found not updating usage",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284403,JDK-8284457,,,,,,,JDK-8278149,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wlmr:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-04-06 02:35;tschatzl;This is because of Loom's additional CodeCache GC Threshold GCs. Is there a way to disable a test when run with loom?;;;","2022-04-06 17:23;lmesnik;It is problemlisted in loom now however it will fail in mainline after integration. Does it makes a sense to disable it with Xcomp or it is not enouhg?;;;","2022-04-07 01:21;tschatzl;There are a few tests (not only this one) which care about exact and reproducable garbage collections; this test for example sets up a memory state, retrieves current memory usage, and then performs a certain kind of garbage collection (mixed GCs), checking the heap usage again.

I.e. the point of this test is exactly to measure the impact of these mixed gcs only.

Obviously, if there are different other GCs inbetween these this kind of test (and others) will fall apart.

Fixing with disabling -Xcomp with this test is just a bandaid - Loom may start these ""CodeCache GC Threshold"" gcs at any time after all.
Maybe their occurrence can be temporarily inhibited (probably at the cost of codecache running out?), idk.
At this point disabling this test with -Xcomp (or enabled Loom - the test does not actually use it, and any impact of it seems a performance problem anyway) is the best option.

Maybe this is an artifact of how the tests are run in the Loom repository?;;;","2022-04-07 01:23;tschatzl;I.e. even when Loom is available in the VM, it theoretically shouldn't trigger these GCs ""if it is not used"" by the application in my opinion.
So maybe an issue with the GC triggering policy, being way too aggressive for no reason?;;;","2022-04-07 07:49;coleenp;I thought I helped this with this change.  Maybe not enough.;;;","2022-04-07 08:24;alanb;LoomVM is enabled in the fibers branch, you shouldn't see these GCs triggered if you run with -XX:-LoomVM. In the branch for the JEP, the LoomVM option is removed and Continuations::enabled will only return true when running with --enable-preview.;;;","2022-04-19 08:53;lmesnik;LW = MLH. (Noise in testing, it doesn't happened in jdk/jdk CI);;;","2022-05-10 08:45;eosterlund;This seems to get the job done in terms of taming the sweeper to be less aggressive with loom:

diff --git a/src/hotspot/share/compiler/compilerDefinitions.cpp b/src/hotspot/share/compiler/compilerDefinitions.cpp
index 1bbff8fb77b..11047281df6 100644
--- a/src/hotspot/share/compiler/compilerDefinitions.cpp
+++ b/src/hotspot/share/compiler/compilerDefinitions.cpp
@@ -25,6 +25,7 @@
 #include ""precompiled.hpp""
 #include ""code/codeCache.hpp""
 #include ""runtime/arguments.hpp""
+#include ""runtime/continuation.hpp""
 #include ""runtime/flags/jvmFlag.hpp""
 #include ""runtime/flags/jvmFlagAccess.hpp""
 #include ""runtime/flags/jvmFlagLimit.hpp""
@@ -570,7 +571,9 @@ void CompilerConfig::ergo_initialize() {
 #endif

   if (FLAG_IS_DEFAULT(SweeperThreshold)) {
-    if ((SweeperThreshold * ReservedCodeCacheSize / 100) > (1.2 * M)) {
+    if (Continuations::enabled()) {
+      FLAG_SET_ERGO(SweeperThreshold, SweeperThreshold * 10.0);
+    } else if ((SweeperThreshold * ReservedCodeCacheSize / 100) > (1.2 * M)) {
       // Cap default SweeperThreshold value to an equivalent of 1.2 Mb
       FLAG_SET_ERGO(SweeperThreshold, (1.2 * M * 100) / ReservedCodeCacheSize);
     };;;","2022-05-12 00:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8673
Date: 2022-05-12 07:30:39 +0000;;;","2022-06-13 23:34;thartmann;Removed the `noreg-self` label because this is not a test bug.;;;","2022-06-19 23:45;dukebot;Changeset: 7d4df6a8
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2022-06-20 06:43:23 +0000
URL:       https://git.openjdk.org/jdk/commit/7d4df6a83f6333e0e73686b807ee5d4b0ac10cd2
;;;",,,,,,,,,,,,,,,,,,,
serviceability/jvmti/events/MonitorContendedEntered/mcontentered01/mcontentered01.java fail in repo-loom,JDK-8284402,5071807,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,lmesnik,lmesnik,2022-04-05 20:35,2022-04-24 23:34,2023-10-01 09:56,2022-04-24 20:31,repo-loom,,,,,,,,,repo-loom,hotspot,,0,intermittent,investigate-UT,noreg-self,tier7,wrapper,,,,,,,,,,,,,,"Test
serviceability/jvmti/events/MonitorContendedEntered/mcontentered01/mcontentered01.java
fails with 
Timeout: 60000 msc
Timeout = 60000 msc.
Remembering global reference for monitor object is 0x7f21bca11508
Synchronization point checkStatus(0) called.
Data 0x7f21d801a2a8 0x7f21d801a5a0
Prepare: find tested thread
MonitorContendedEnter event:
	thread: 0x7f2168000de8, object: 0x7f2168000df0, expected object: 0x7f21d849bac8
Thread: 0x7f2168000de8, name: Debuggee Thread, state(401):  ALIVE BLOCKED_ON_MONITOR_ENTER, attrs: kernel 
Increasing eventCount to 1
Thread started
MonitorContendedEntered event:
	thread: 0x7f2168000de8, object: 0x7f2168000df0, expected object: 0x7f21d849bac8
Thread: 0x7f2168000de8, name: Debuggee Thread, state(5):  ALIVE RUNNABLE, attrs: kernel 
Increasing eventCount to 2
Sync: thread finished
Synchronization point checkStatus(0) called.
Data 0x7f21d801a2a8 0x7f21d801a5a0
Number of MonitorContendedEntered events: 2
MonitorContendedEnter event:
	thread: 0x7f21d848ff88, object: 0x7f21d848ff90, expected object: 0x7f21d849bac8
Thread: 0x7f21d848ff88, name: main, state(401):  ALIVE BLOCKED_ON_MONITOR_ENTER, attrs: kernel 
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/jniHandles.inline.hpp:64
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14747/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/4ceff4c0-ff1e-4329-9c88-90f77211fe28/runs/480df0be-42f1-45f1-add5-989e159fadb3/workspace/open/src/hotspot/share/runtime/jniHandles.inline.hpp:64), pid=15533, tid=15535
#  assert(external_guard || result != __null) failed: Invalid JNI handle
#
# JRE version: Java(TM) SE Runtime Environment (19.0+6) (fastdebug build 19-loom+6-430)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-loom+6-430, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x10dacbc]  jni_IsSameObject+0x48c
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14506/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b72a2a64-ab38-45dd-b8e1-f80f5394205a/runs/fd75d866-ea55-4e37-9fef-48584165a02a/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/scratch/5/core.15533)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14506/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b72a2a64-ab38-45dd-b8e1-f80f5394205a/runs/fd75d866-ea55-4e37-9fef-48584165a02a/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/scratch/5/hs_err_pid15533.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wlmb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-04-22 09:27;cjplummer;Stack: [0x00007f2d5a11c000,0x00007f2d5a21d000],  sp=0x00007f2d5a21a570,  free space=1017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x10fdd7c]  jni_IsSameObject+0x48c
C  [libmcontentered01.so+0x225f]  MonitorContendedEnter+0x7f
V  [libjvm.so+0x134bd1e]  JvmtiExport::post_monitor_contended_enter(JavaThread*, ObjectMonitor*)+0x1ee
V  [libjvm.so+0x16c9eb3]  ObjectMonitor::enter(JavaThread*)+0xf73
V  [libjvm.so+0x19e79f3]  ObjectSynchronizer::enter(Handle, BasicLock*, JavaThread*)+0xc3
V  [libjvm.so+0xfc4af9]  InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)+0x179
j  jdk.internal.loader.URLClassPath.getLoader(I)Ljdk/internal/loader/URLClassPath$Loader;+0 java.base@19-loomvt
j  jdk.internal.loader.URLClassPath.getResource(Ljava/lang/String;Z)Ljdk/internal/loader/Resource;+42 java.base@19-loomvt
j  jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(Ljava/lang/String;)Ljava/lang/Class;+26 java.base@19-loomvt
j  jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(Ljava/lang/String;Z)Ljava/lang/Class;+111 java.base@19-loomvt
j  jdk.internal.loader.BuiltinClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;+3 java.base@19-loomvt
j  jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;+36 java.base@19-loomvt
j  java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class;+3 java.base@19-loomvt
v  ~StubRoutines::call_stub 0x00007f2d40582d47
V  [libjvm.so+0xfdd514]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x504
V  [libjvm.so+0xfdddc4]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x4b4
V  [libjvm.so+0xfde2de]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Handle, JavaThread*)+0x8e
V  [libjvm.so+0x19f6ea2]  SystemDictionary::load_instance_class_impl(Symbol*, Handle, JavaThread*)+0x152
V  [libjvm.so+0x19f5298]  SystemDictionary::load_instance_class(unsigned int, Symbol*, Handle, JavaThread*)+0x28
V  [libjvm.so+0x19f5c82]  SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, JavaThread*)+0x8a2
V  [libjvm.so+0x19f791a]  SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, JavaThread*)+0x2a
V  [libjvm.so+0xb1b8b8]  ConstantPool::klass_at_impl(constantPoolHandle const&, int, JavaThread*)+0x1f8
V  [libjvm.so+0xb1cc20]  ConstantPool::klass_ref_at(int, JavaThread*)+0x40
V  [libjvm.so+0x140652e]  LinkInfo::LinkInfo(constantPoolHandle const&, int, JavaThread*)+0x5e
V  [libjvm.so+0x14157bf]  LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, JavaThread*)+0x8f
V  [libjvm.so+0xfcd7f7]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x237
V  [libjvm.so+0xfce6ed]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0xbd
j  com.sun.javatest.regtest.agent.MainWrapper.main([Ljava/lang/String;)V+286
v  ~StubRoutines::call_stub 0x00007f2d40582d47
V  [libjvm.so+0xfdd514]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x504
V  [libjvm.so+0x111c7e5]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .constprop.1]+0x385
V  [libjvm.so+0x111fc09]  jni_CallStaticVoidMethod+0x1b9
C  [libjli.so+0x4795]  JavaMain+0xd65
C  [libjli.so+0x7989]  ThreadJavaMain+0x9;;;","2022-04-22 18:12;sspitsyn;This test was created by Leonid in Loom by converting the matching test from the nsk.jvmti to be run with virtual threads.
All the serviceability/jvmti/events/* tests are like this one.
So, I think, this test is not present in jdk/jdk.
It should be present in the jev-vt branch though.
But it is never run with normal threads as I understand.
I hope, Leonid will correct me if needed.;;;","2022-04-24 03:52;sspitsyn;[~cjplummer] Why do you think so?
Please, correct me if needed. The failure I'm seeing is exactly the same:
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14743/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/22c9f31a-8210-4cb9-a433-01bbf45705c8/runs/cae9e912-7f4e-4316-9a24-17b7d005a2fc/workspace/open/src/hotspot/share/runtime/jniHandles.inline.hpp:64), pid=32433, tid=32436
#  assert(external_guard || result != __null) failed: Invalid JNI handle

Also, just wanted to underline that the original nsk.jvmti tests that were converted into serviceability/jvmti/events test did not have jni->DeleteGlobalRef() calls. 
It is why they do not fail with the same failure mode.;;;","2022-04-24 20:48;sspitsyn;I've decided to keep these tests problem-listed for now.
It seems, all serviceability/jvmti/events/ tests are problem-listed without bugs listed.
Some extra analysis is needed to make sure all these test do not fail anymore before removing them from the ProblemList-vthread.txt.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Improve XPath exception handling,JDK-8284400,5071805,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,joehw,joehw,joehw,2022-04-05 17:43,2022-06-01 23:27,2023-10-01 09:56,2022-05-27 14:48,11,17,18,19,7,8,,,,19,xml,,0,,,,,,,,,,,,,,,,,,,"The XPath API defines mainly three type of Exceptions that may be thrown during compilation and evaluation: NPE, IAE and XPathExpressionException. The Impl however, likely due to the need to share components with Xalan, sometimes throw RuntimeException, for example when DTMs are in the middle of the stack. These REs need to be caught and handled to be compliant with the spec.

In other cases, the Impl missed certain situations where potential errors may happen, e.g. given an invalid expression.

There are many places where a clean-up may help to reduce the usages of RuntimeException. However, that is not the main purpose of this report. Some cleanup within the classes touched by this improvement would be good to have.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270480,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wllv:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,,,"2022-05-26 18:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8910
Date: 2022-05-27 01:12:18 +0000;;;","2022-05-27 14:48;dukebot;Changeset: ed8e8ac2
Author:    Joe Wang <joehw@openjdk.org>
Date:      2022-05-27 21:47:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ed8e8ac2892af3a0a70b95330e01ec976d3fea3c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve stability of GHA Pre-submit testing by caching cygwin installer,JDK-8284389,5071792,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-04-05 13:48,2022-11-15 05:34,2023-10-01 09:56,2022-04-06 23:05,11,17,18,19,,,,,,19,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,"Recently we saw several failures in GHA runs on Windows due to timeouts when downloading the cygwin installer. E.g.
https://github.com/shipilev/jdk/runs/5787447092
https://github.com/tstuefe/jdk/runs/5788165327

This can (hopefully) be improved a little bit by caching the cygwin installer in GHA.",,,,,,,,,,,JDK-8284682,JDK-8284683,JDK-8284630,JDK-8297043,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wliz:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-05 14:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8113
Date: 2022-04-05 20:57:45 +0000;;;","2022-04-06 23:04;dukebot;Changeset: 61fcf2f6
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-04-07 06:02:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/61fcf2f67ff16bee92a5279e7bcacc79fc8f37ad
;;;","2022-04-07 02:14;clanger;Fix request (18u, 17u, 11u)
Backport of GHA stability improvement, clean for 18u and 17u. 11u needed modification due to missing windows/aarch64 build. Change was reviewed. No risk, since it only affects GHA testing.;;;","2022-04-07 02:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/94
Date: 2022-04-07 09:09:55 +0000;;;","2022-04-07 02:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/341
Date: 2022-04-07 09:24:25 +0000;;;","2022-04-07 03:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1018
Date: 2022-04-07 10:35:16 +0000;;;","2022-11-14 12:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/174
Date: 2022-11-14 20:33:23 +0000;;;","2022-11-14 12:47;zzambers;Fix request (8u):

Caching of cygwin installer by GHA
only affects GHA, all tests passed;;;",,,,,,,,,,,,,,,,,,,,,,
Fix formatting of doc comments in jdk.javadoc,JDK-8284387,5071789,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-04-05 12:33,2022-04-13 23:01,2023-10-01 09:56,2022-04-06 15:17,19,,,,,,,,,19,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,,JDK-8284362 highlighted some issues with formatting of top-level doc comments.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284362,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wlib:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-04-06 06:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8126
Date: 2022-04-06 13:12:36 +0000;;;","2022-04-06 15:17;dukebot;Changeset: 5a21397f
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-04-06 22:14:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5a21397f709e5c684d9462ecaecf2d5db023e778
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestFailedAllocationBadGraph fails with -XX:TieredStopAtLevel < 4,JDK-8284369,5071767,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,rsunderbabu,rsunderbabu,2022-04-05 09:56,2022-08-12 13:03,2023-10-01 09:56,2022-04-05 23:55,11,17,18,19,,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,noreg-self,oracle-triage-19,sqebug,,,,,,,,,"Test name: compiler/allocation/TestFailedAllocationBadGraph.java
Reproducible: Always
VM Arg: -XX:TieredStopAtLevel=1,2,3 (Fails with or without -Xcomp)
Log:
----------System.out:(1/39)----------
WB error: invalid compilation level 4
----------System.err:(14/933)----------
java.lang.RuntimeException: should still be compiled
	at TestFailedAllocationBadGraph.run(TestFailedAllocationBadGraph.java:54)
	at TestFailedAllocationBadGraph.main(TestFailedAllocationBadGraph.java:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,,JDK-8284441,JDK-8284442,JDK-8284625,JDK-8284522,JDK-8284644,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292260,JDK-8292301,,,,,JDK-8279219,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wldf:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-05 22:19;thartmann;This affects mainline (JDK 19) as well. The reason we didn't see this before is that we don't execute with TieredStopAtLevel < 4 in the CI.

ILW = Test fails due to unsupported compilation level (test bug), single test with TieredStopAtLevel < 4, no workaround = MLH = P4;;;","2022-04-05 22:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8118
Date: 2022-04-06 05:27:50 +0000;;;","2022-04-05 23:55;dukebot;Changeset: 955d61df
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-04-06 06:51:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/955d61df30099c01c6968fa5851643583f71250e
;;;","2022-04-06 04:57;thartmann;Fix Request (JDK 18u)
Fixes a test bug. The fix trivial and applies cleanly. Already tested and backported to Oracle JDK 11u and 17u.;;;","2022-04-06 05:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/92
Date: 2022-04-06 11:56:25 +0000;;;","2022-04-06 06:19;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Test has passed.;;;","2022-04-06 06:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/340
Date: 2022-04-06 13:21:21 +0000;;;","2022-04-08 03:35;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
No risk, only a test change.
Trivial resolve was needed, marked as clean.
Test passes.;;;","2022-04-08 03:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1024
Date: 2022-04-08 10:34:27 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Remove finalizer method in jdk.crypto.cryptoki,JDK-8284368,5071766,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-04-05 08:43,2022-04-13 15:31,2023-10-01 09:56,2022-04-06 10:10,,,,,,,,,,19,security-libs,,0,finalizer,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,,"Finalize has been deprecated and uses of finalize should be converted to use java.lang.ref.Cleaner, and the finalize method should be removed. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8253568,,,,,,JDK-8284855,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wld7:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2022-04-05 12:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8112
Date: 2022-04-05 19:55:55 +0000;;;","2022-04-06 10:10;dukebot;Changeset: 77388eaf
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-04-06 17:07:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/77388eaf2595f5785bb0945ccecf84c4916031e7
;;;","2022-04-13 15:31;bchristi;This fix needs to be updated. See JDK-8284855.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade JQuery UI to 1.13.1 from 1.12.1,JDK-8284367,5071765,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,mtrudeau,mtrudeau,2022-04-05 08:31,2023-06-06 10:47,2023-10-01 09:56,2022-05-17 02:56,,,,,,,,,,19,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287562,JDK-8287561,JDK-8288960,JDK-8291029,,,,,,,,,,,,,,,,,,,,,,JDK-8293180,,,,,,,,,,,,JDK-8218114,,,,,,JDK-8214468,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wlcz:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-05-13 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8702
Date: 2022-05-13 13:49:21 +0000;;;","2022-05-17 02:56;dukebot;Changeset: ac41b78c
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2022-05-17 09:53:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ac41b78cfbb94f0b0e9a15cfcc50bdddc43811e9
;;;","2022-06-21 09:21;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
We should go along here to be up to date so that we don' t run 
into any issues of jquery.
I had to adapt the change in a few places.
SAP nightly testing passed.;;;","2022-06-21 09:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/487
Date: 2022-06-21 16:20:29 +0000;;;","2022-07-05 00:45;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle. I backported the 17 change.
We should go along here to be up to date so that we don' t run
into any issues of jquery.
I had to adapt the change in a few places.
Tests pass. SAP nightly testing passed. ;;;","2022-07-05 00:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1198
Date: 2022-07-05 07:43:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
"Remove the ""unsupported API"" warning from jdk.javadoc",JDK-8284362,5071757,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-04-05 07:30,2022-04-07 00:01,2023-10-01 09:56,2022-04-05 10:48,19,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,"""""""
This is NOT part of any supported API.
If you write code that depends on this, you do so at your own risk.
This code and its internal interfaces are subject to change or
deletion without notice.
""""""

This warning has become unnecessary since JDK 9, which enforced the same idea programmatically by not exporting the respective packages.

While in most of the source code that warning acts as a visual noice, it might be reasonable to leave it in package-info.java files.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284387,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wlbf:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-04-05 08:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8110
Date: 2022-04-05 15:09:51 +0000;;;","2022-04-05 08:59;jjg;In case it needs to be said ,,,, there is no change in policy here.  The words of the comment, given in the Description, still apply to all files in non-exported packages.

;;;","2022-04-05 10:48;dukebot;Changeset: 20acea41
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-04-05 17:45:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/20acea41cc767ebc142880da0ae91802d6a091af
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Updating ASM to 9.3 for JDK 19,JDK-8284361,5071756,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vromero,vromero,vromero,2022-04-05 07:22,2022-05-05 10:13,2023-10-01 09:56,2022-04-08 10:02,19,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8215170,JDK-8282508,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wlb7:",9223372036854775807,b18,,,,,,,,,,,"2022-04-06 20:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8135
Date: 2022-04-07 03:33:02 +0000;;;","2022-04-08 10:02;dukebot;Changeset: 1bd8975c
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2022-04-08 17:01:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1bd8975cafade1234f653ab994cb7c6f0a82590f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Unreachable loop is not removed from C2 IR, leading to a broken graph",JDK-8284358,5071751,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,dcubed,dcubed,2022-04-05 06:29,2022-11-15 04:35,2023-10-01 09:56,2022-06-30 22:26,11,17,18,19,,,,,,19,hotspot,,0,c2,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-19,test-bigapps-Helidon,tier5,,,,,,,,,,"The following test failed in the JDK19 CI:

applications/helidonapp/HelidonAppTest

Here's a snippet from the log file:

2022.04.05 00:32:22 INFO io.helidon.microprofile.server.ServerCdiExtension Thread[HelidonAppStressModule,5,main]: Registering JAX-RS Application: HelidonMP
2022.04.05 00:32:28 INFO io.helidon.webserver.NettyWebServer Thread[nioEventLoopGroup-2-1,10,main]: Channel '@default' started: [id: 0xbf9f6e32, L:/[0:0:0:0:0:0:0:0]:8080]
2022.04.05 00:32:28 INFO io.helidon.microprofile.server.ServerCdiExtension Thread[HelidonAppStressModule,5,main]: Server started on http://localhost:8080 (and all other host addresses) in 17893 milliseconds (since JVM startup).
2022.04.05 00:32:30 INFO io.helidon.common.HelidonFeatures Thread[features-thread,5,main]: Helidon MP 2.4.2 features: [CDI, Config, Fault Tolerance, Health, JAX-RS, Metrics, Open API, REST Client, Security, Server, Tracing]
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\\workspace\\open\\src\\hotspot\\share\\opto\\macro.cpp:508), pid=67116, tid=21240
#  assert(false) failed: unexpected node
#
# JRE version: Java(TM) SE Runtime Environment (19.0+17) (fastdebug build 19-ea+17-1108)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+17-1108, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_helidonapp_HelidonAppTest_java\\scratch\\0\\hs_err_pid67116.mdmp
#
# JFR recording file will be written. Location: T:\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_helidonapp_HelidonAppTest_java\\scratch\\0\\hs_err_pid67116.jfr
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_helidonapp_HelidonAppTest_java\\scratch\\0\\hs_err_pid67116.log
#
# Compiler replay data is saved as:
# T:\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_helidonapp_HelidonAppTest_java\\scratch\\0\\replay_pid67116.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(153/72802)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000016d72f719e0):  JavaThread ""C2 CompilerThread2"" daemon [_thread_in_native, id=21240, stack(0x00000051e5600000,0x00000051e5700000)]


Current CompileTask:
C2:  80047 12880       4       io.helidon.examples.quickstart.mp.GreetResource$Proxy$_$$_WeldSubclass::lifecycle_mixin_$$_postConstruct (20 bytes)

Stack: [0x00000051e5600000,0x00000051e5700000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xbdf301]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xe2028f]  VMError::report+0x101f  (vmError.cpp:828)
V  [jvm.dll+0xe21cee]  VMError::report_and_die+0x7fe  (vmError.cpp:1657)
V  [jvm.dll+0xe22474]  VMError::report_and_die+0x64  (vmError.cpp:1438)
V  [jvm.dll+0x550e37]  report_vm_error+0xb7  (debug.cpp:282)
V  [jvm.dll+0xa85191]  PhaseMacroExpand::value_from_mem+0x3d1  (macro.cpp:508)
V  [jvm.dll+0xa83bfd]  PhaseMacroExpand::scalar_replacement+0x89d  (macro.cpp:770)
V  [jvm.dll+0xa7968f]  PhaseMacroExpand::eliminate_allocate_node+0x1df  (macro.cpp:1049)
V  [jvm.dll+0xa7a1ca]  PhaseMacroExpand::eliminate_macro_nodes+0x29a  (macro.cpp:2354)
V  [jvm.dll+0x507a08]  Compile::Optimize+0xaa8  (compile.cpp:2204)
V  [jvm.dll+0x504e13]  Compile::Compile+0x14c3  (compile.cpp:817)
V  [jvm.dll+0x4281a5]  C2Compiler::compile_method+0x145  (c2compiler.cpp:115)
V  [jvm.dll+0x51e4a1]  CompileBroker::invoke_compiler_on_method+0x931  (compileBroker.cpp:2294)
V  [jvm.dll+0x51bab6]  CompileBroker::compiler_thread_loop+0x276  (compileBroker.cpp:1968)
V  [jvm.dll+0xd9efc7]  JavaThread::thread_main_inner+0x297  (thread.cpp:1292)
V  [jvm.dll+0xd94dbc]  Thread::call_run+0x1ac  (thread.cpp:361)
V  [jvm.dll+0xbddcd9]  thread_native_entry+0xb9  (os_windows.cpp:544)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]",,,,,,,,,,,JDK-8291486,JDK-8295364,JDK-8291478,JDK-8289622,JDK-8291009,JDK-8291372,JDK-8291210,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288570,,JDK-8296912,,,,,,JDK-8284042,,,,,,"2022-05-20 04:10;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/99026/Test.java","2022-06-23 05:50;thartmann;TestDeadDataLoop.java;https://bugs.openjdk.org/secure/attachment/99673/TestDeadDataLoop.java","2022-06-23 05:51;thartmann;hs_err_pid674390.log;https://bugs.openjdk.org/secure/attachment/99674/hs_err_pid674390.log","2022-06-23 05:51;thartmann;hs_err_pid675177.log;https://bugs.openjdk.org/secure/attachment/99675/hs_err_pid675177.log","2022-05-19 07:04;thartmann;patch.txt;https://bugs.openjdk.org/secure/attachment/98998/patch.txt",,,,,,,,,,,,,,,,,,,,,,,,"0|i2wla3:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-07 00:34;chagedorn;ILW = C2 assertion in macro expansion, single test intermittent, possibly disable compilation of affected method = HLM = P3;;;","2022-04-22 03:00;thartmann;The unexpected node is:

[stress.process.err]  1  Con  ===  0  [[]]  #top;;;","2022-04-22 03:11;thartmann;Reproduces with latest JDK 19 and on Linux x86_64 as well but with a slightly different assert:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14492/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e6aec4c-ee89-42c4-962f-b317b8570987/runs/369ad6c4-28dc-4504-8502-c773e9f1e575/workspace/open/src/hotspot/share/opto/macro.cpp:430), pid=10081, tid=10872
#  assert(false) failed: unknown node on this path
#
# JRE version: Java(TM) SE Runtime Environment (19.0+20) (fastdebug build 19-ea+20-1319)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+20-1319, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x13e7fcb]  PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int)+0xe4b

Current CompileTask:
C2:  65837 12545       4       io.helidon.examples.quickstart.mp.GreetResource$Proxy$_$$_WeldSubclass::lifecycle_mixin_$$_preDestroy (20 bytes)

Stack: [0x00007f73894d1000,0x00007f73895d2000],  sp=0x00007f73895ccd20,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x13e7fcb]  PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int)+0xe4b
V  [libjvm.so+0x13e8837]  PhaseMacroExpand::value_from_mem(Node*, Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*)+0x7f7
V  [libjvm.so+0x13ea591]  PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray<SafePointNode*>&)+0x4f1
V  [libjvm.so+0x13eb50e]  PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) [clone .part.0]+0x1be
V  [libjvm.so+0x13ebe09]  PhaseMacroExpand::eliminate_macro_nodes()+0x5d9
V  [libjvm.so+0xab2475]  Compile::Optimize()+0x1715
V  [libjvm.so+0xab3fe0]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1590
V  [libjvm.so+0x8c72e3]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x683
V  [libjvm.so+0xac3c07]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc97
V  [libjvm.so+0xac4a68]  CompileBroker::compiler_thread_loop()+0x718
V  [libjvm.so+0x195c57a]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x19678a0]  Thread::call_run()+0x100
V  [libjvm.so+0x16405c4]  thread_native_entry(Thread*)+0x104
;;;","2022-04-22 03:17;thartmann;This test was only added recently by JDK-8284042 but the assert already reproduces with JDK 19 build 1 (I can't execute the test with earlier builds on Mach 5).;;;","2022-04-25 02:10;thartmann;Not able to reproduce this with replay compilation (class files are not found - probably generated code). I was also not able to extract the class files via hsdb.;;;","2022-04-26 02:44;thartmann;The issue is a MemBarReleaseNode with a TOP memory input:

 922  Proj  ===  1363  [[ 1438  474  2398  2397 ]] #5 !jvms: InterceptionModelImpl::getInterceptors @ bci:122 (line 92) InterceptionContext::buildInterceptorMethodInvocations @ bci:6 (line 126) InterceptorMethodHandler::getInterceptionChain @ bci:96 (line 103) InterceptorMethodHandler::executeInterception @ bci:5 (line 62) InterceptorMethodHandler::invoke @ bci:31 (line 48)
 1438  Initialize  ===  1946  1  1947  1  1  922  1948  1949  1950  [[ 921 ]]  !jvms: InterceptionModelImpl::getInterceptors @ bci:176 (line 97) InterceptionContext::buildInterceptorMethodInvocations @ bci:6 (line 126) InterceptorMethodHandler::getInterceptionChain @ bci:96 (line 103) InterceptorMethodHandler::executeInterception @ bci:5 (line 62) InterceptorMethodHandler::invoke @ bci:31 (line 48)
 474  CheckCastPP  ===  921  922  [[ 1364  2332  277 ]]  #org/jboss/weld/util/collections/ImmutableTinyList$Singleton$SingletonIterator:NotNull:exact *  Oop:org/jboss/weld/util/collections/ImmutableTinyList$Singleton$SingletonIterator:NotNull:exact * !jvms: InterceptionModelImpl::getInterceptors @ bci:7 (line 75) InterceptionContext::buildInterceptorMethodInvocations @ bci:6 (line 126) InterceptorMethodHandler::getInterceptionChain @ bci:96 (line 103) InterceptorMethodHandler::executeInterception @ bci:5 (line 62) InterceptorMethodHandler::invoke @ bci:31 (line 48)
 921  Proj  ===  1438  [[ 2332  474 ]] #0 !jvms: InterceptionModelImpl::getInterceptors @ bci:122 (line 92) InterceptionContext::buildInterceptorMethodInvocations @ bci:6 (line 126) InterceptorMethodHandler::getInterceptionChain @ bci:96 (line 103) InterceptorMethodHandler::executeInterception @ bci:5 (line 62) InterceptorMethodHandler::invoke @ bci:31 (line 48)
 2332  MemBarRelease  ===  921  1  1  1  1  474  [[ 1865  1866 ]]  !jvms: InterceptionContext::buildInterceptorMethodInvocations @ bci:19 (line 127) InterceptorMethodHandler::getInterceptionChain @ bci:96 (line 103) InterceptorMethodHandler::executeInterception @ bci:5 (line 62) InterceptorMethodHandler::invoke @ bci:31 (line 48)
;;;","2022-05-19 06:14;thartmann;I can reliably reproduce this on Mach5 but not locally. The problem is a MemBarRelease with a TOP memory input during macro expansion:

 9184  MemBarRelease  ===  9080  1  1  1  1  9083  [[ 9185  9186 ]]

The TOP comes from a Region that is removed because it's unreachable from root:

 9079  Initialize  ===  9071  1  9082  1  1  9078  9076  9169  9098  [[ 9080  9081 ]] 
 9080  Proj  ===  9079  [[ 9184  9083  9130 ]] #0
 9130  Region  === _  9080  [[ 9183  9182  9181  9132  9177  9178  9179  9180 ]] 

See the following code:
https://github.com/openjdk/jdk/blob/aa7ccdf44549a52cce9e99f6569097d3343d9ee4/src/hotspot/share/opto/cfgnode.cpp#L558$

 9130  Region  === _  [[ 9180  9179  9178  9132  9177 ]]   [-2144691413]
 9180  Phi  ===  9130  9002  [[ 9133 ]]  #memory  Memory: @narrowoop: java/lang/Object *[int:>=0]+any * [narrow], idx=26; !orig=9132
 9179  Phi  ===  9130  9081  [[ 9133 ]]  #memory  Memory: @java/lang/Object *, idx=11; !orig=9132
 9178  Phi  ===  9130  9081  [[ 9133 ]]  #memory  Memory: @java/lang/Object+8 * [narrowklass], idx=4; !orig=9132
 9177  Phi  ===  9130  9081  [[ 9133 ]]  #memory  Memory: @rawptr:BotPTR, idx=Raw; !orig=9132
 9132  Phi  ===  9130  8876  [[ 9133 ]]  #memory  Memory: @BotPTR *+bot, idx=Bot;
 9133  MergeMem  === _  1  9132  9177  9178  1  1  1  1  1  1  9179  1  1  1  1  1  1  1  1  1  1  1  1  1  1  9180  1  1  1  [[ 9184 ]]
 9184  MemBarRelease  ===  9080  1  9133  1  1  9083  [[ 9185  9186 ]] 

However, the rest of the subgraph ""above"" the Region is not removed and the membar remains reachable from the 9080 Proj. The subgraph is not removed because it contains a dead loop. The root cause seems to be that dead loop detection does not work in that case.;;;","2022-05-19 07:32;thartmann;I added verification code to IGVN to catch the dead loop that is not reachable from root earlier (see attached patch.txt). I can now reproduce this locally with a simpler CTW test.

Quick analysis:
- Entry control of a (loop) region is removed during IGVN right after parsing via Node::remove_dead_region -> kill_dead_code
- The region is removed because there's only one input left but the dead loop detection is not triggered because is_unreachable_region() returns false because is_possible_unsafe_loop() returns false (although is_unreachable_from_root() returns true);;;","2022-05-20 04:11;thartmann;Attached Test.java reliably triggers the verification code I added with patch.txt:

java -Xcomp -XX:-TieredCompilation -XX:CompileCommand=compileonly,Test::test -XX:CompileCommand=quiet -XX:+StressIGVN -XX:RepeatCompilation=1000 Test
 666  If  ===  397  665  [[ 667  668 ]] P=0,000001, C=-1,000000 !orig=[412] !jvms: Test::test @ bci:73 (line 15)
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/phaseX.cpp:1155
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/jdk/open/src/hotspot/share/opto/phaseX.cpp:1155), pid=785164, tid=785177
#  assert(false) failed: Should be removed but still reachable from bottom

I was not yet able to trigger the original failure during macro expansion though.;;;","2022-06-10 05:16;thartmann;It does not reproduce anymore after JDK-8265360 which is unrelated.;;;","2022-06-23 05:52;thartmann;[~chagedorn] and I were able to extract a simple regression test (see attached TestDeadDataLoop.java) that triggers two failure modes (see hs_err_pid674390.log and hs_err_pid675177.log):

#  Internal Error (/oracle/jdk/open/src/hotspot/share/opto/macro.cpp:450), pid=674390, tid=674405
#  assert(false) failed: unknown node on this path

Current CompileTask:
C2:    333   29    b        compiler.c2.TestDeadDataLoop::test1 (81 bytes)

Stack: [0x00007efe6c551000,0x00007efe6c652000],  sp=0x00007efe6c64cd40,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x14fad4e]  PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int)+0xeee
V  [libjvm.so+0x14fb62d]  PhaseMacroExpand::value_from_mem(Node*, Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*)+0x85d
V  [libjvm.so+0x14fd22d]  PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray<SafePointNode*>&)+0x44d
V  [libjvm.so+0x14fe0fe]  PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) [clone .part.0]+0x16e
V  [libjvm.so+0x14feb69]  PhaseMacroExpand::eliminate_macro_nodes()+0x689
V  [libjvm.so+0xb0660a]  Compile::Optimize()+0x16fa
V  [libjvm.so+0xb080a0]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1520
V  [libjvm.so+0x91ec5a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x62a
V  [libjvm.so+0xb16c08]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xbb8
V  [libjvm.so+0xb17bf8]  CompileBroker::compiler_thread_loop()+0x6f8
V  [libjvm.so+0x1aa5d8c]  JavaThread::thread_main_inner()+0x23c
V  [libjvm.so+0x1ab1150]  Thread::call_run()+0x100
V  [libjvm.so+0x1761d34]  thread_native_entry(Thread*)+0x104


#  Internal Error (/oracle/jdk/open/src/hotspot/share/opto/compile.cpp:2379), pid=675177, tid=675193
#  fatal error: no reachable node should have no use

Current CompileTask:
C2:    325   29    b        compiler.c2.TestDeadDataLoop::test1 (81 bytes)

Stack: [0x00007f840fdfe000,0x00007f840feff000],  sp=0x00007f840fefa000,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xaf11e0]  Compile::check_no_dead_use() const+0x5f0
V  [libjvm.so+0xb06ad6]  Compile::Optimize()+0x1ae6
V  [libjvm.so+0xb08180]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1520
V  [libjvm.so+0x91ec5a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x62a
V  [libjvm.so+0xb16ce8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xbb8
V  [libjvm.so+0xb17cd8]  CompileBroker::compiler_thread_loop()+0x6f8
V  [libjvm.so+0x1aa5e6c]  JavaThread::thread_main_inner()+0x23c
V  [libjvm.so+0x1ab1230]  Thread::call_run()+0x100
V  [libjvm.so+0x1761e14]  thread_native_entry(Thread*)+0x104;;;","2022-06-29 08:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/92
Date: 2022-06-29 15:16:03 +0000;;;","2022-06-30 22:26;dukebot;Changeset: 95497772
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-07-01 05:23:57 +0000
URL:       https://git.openjdk.org/jdk19/commit/95497772e7207b5752e6ecace4a6686df2b45227
;;;","2022-07-27 08:44;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
A C2 fix we should take with the typical risk of changing a compiler.
Clean backport.
Test passes and fails without the fix.  SAP nightly testing passed.;;;","2022-07-27 08:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/599
Date: 2022-07-27 15:47:50 +0000;;;","2022-10-11 08:30;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
Change did not apply clean, it also needed adaptions to work.
The change is small to medium but it needed work. Changing C2
is always risky, but not fixing the issue is worse. Risk acceptable.
Test passes with and without the fix. It had to be relaxed to work in 11, though.
SAP nighlty testing passed.;;;","2022-10-11 08:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1443
Date: 2022-10-11 15:28:01 +0000;;;",,,,,,,,,,,,,
Update java/net and sun/net/www tests to eliminate dependency on sun.net.www.MessageHeader,JDK-8284353,5071745,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchhipa,mchhipa,mchhipa,2022-04-05 03:20,2022-04-13 23:02,2023-10-01 09:56,2022-04-07 03:21,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,"There are some regression tests depending on sun.net.www.MessageHeader, the internal API dependency should be removed:
test/jdk/java/net/Authenticator/B6870935.java
test/jdk/java/net/Socket/HttpProxy.java
test/jdk/java/net/httpclient/ProxyAuthTest.java
test/jdk/sun/net/www/protocol/http/DigestTest.java
test/jdk/sun/net/www/protocol/http/NTLMHeadTest.java
test/jdk/sun/net/www/protocol/http/ProxyTunnelServer.java
test/jdk/sun/net/www/protocol/http/TunnelThroughProxy.java
test/jdk/sun/net/www/protocol/https/HttpsClient/ProxyAuthTest.java
test/jdk/sun/net/www/protocol/https/HttpsClient/ProxyTunnelServer.java
test/jdk/sun/net/www/protocol/https/HttpsURLConnection/ProxyTunnelServer.java
test/jdk/sun/security/ssl/InputRecord/ClientHelloRead.java
test/jdk/sun/security/ssl/InputRecord/ProxyTunnelServer.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wl8r:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-04-05 03:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8105
Date: 2022-04-05 10:27:54 +0000;;;","2022-04-07 03:21;dukebot;Changeset: ec73c61d
Author:    Mahendra Chhipa <mahendra.chhipa@oracle.com>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-04-07 10:19:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ec73c61d8fe5de15a42fc14aaf8ebe3ac9ffcae5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS SignedJar.java test fails due to archived Reference object,JDK-8284336,5071726,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,aturbanov,aturbanov,2022-04-05 02:43,2022-04-13 23:02,2023-10-01 09:56,2022-04-08 10:21,17,19,,,,,,,,19,hotspot,,0,cds,,,,,,,,,,,,,,,,,,"STDOUT:
executeProcess: /home/turbanoff/Projects/official_jdk/build/linux-x86_64-server-fastdebug/images/jdk/bin/keytool -genkey -keystore ./keystore -alias mykey -storepass abc123 -keypass abc123 -keyalg dsa -dname CN=jvmtest 
[2022-04-05T09:39:32.942914416Z] Gathering output for process 696582
[2022-04-05T09:39:34.034233336Z] Waiting for completion for process 696582
[2022-04-05T09:39:34.034462245Z] Waiting for completion finished for process 696582
Output and diagnostic info for process 696582 was saved into 'pid-696582-output.log'
[2022-04-05T09:39:34.048767316Z] Waiting for completion for process 696582
[2022-04-05T09:39:34.048848729Z] Waiting for completion finished for process 696582
executeProcess: /home/turbanoff/Projects/official_jdk/build/linux-x86_64-server-fastdebug/images/jdk/bin/jarsigner -keystore ./keystore -storepass abc123 -keypass abc123 -signedjar /home/turbanoff/Projects/official_jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_SignedJar_java/scratch/0/signed_hello.jar /home/turbanoff/Projects/official_jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_SignedJar_java/scratch/0/hello.jar mykey 
[2022-04-05T09:39:34.050028910Z] Gathering output for process 696608
[2022-04-05T09:39:35.202469484Z] Waiting for completion for process 696608
[2022-04-05T09:39:35.202659921Z] Waiting for completion finished for process 696608
Output and diagnostic info for process 696608 was saved into 'pid-696608-output.log'
[2022-04-05T09:39:35.203191347Z] Waiting for completion for process 696608
[2022-04-05T09:39:35.203272158Z] Waiting for completion finished for process 696608
Command line: [/home/turbanoff/Projects/official_jdk/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -cp /home/turbanoff/Projects/official_jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_SignedJar_java/classes/0/runtime/cds/appcds/SignedJar.d:/home/turbanoff/Projects/official_jdk/test/hotspot/jtreg/runtime/cds/appcds:/home/turbanoff/Projects/official_jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_SignedJar_java/classes/0/test/lib:/home/turbanoff/Projects/jtreg/lib/javatest.jar:/home/turbanoff/Projects/jtreg/lib/jtreg.jar:/home/turbanoff/Projects/jtreg/lib/junit.jar:/home/turbanoff/Projects/jtreg/lib/hamcrest.jar:/home/turbanoff/Projects/jtreg/lib/testng.jar:/home/turbanoff/Projects/jtreg/lib/jcommander.jar:/home/turbanoff/Projects/jtreg/lib/guice.jar -XX:MaxRAMPercentage=12.5 -Djava.io.tmpdir=/home/turbanoff/Projects/official_jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_SignedJar_java/tmp -cp /home/turbanoff/Projects/official_jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_SignedJar_java/scratch/0/signed_hello.jar -Xshare:dump -Xlog:cds -XX:SharedArchiveFile=/home/turbanoff/Projects/official_jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_SignedJar_java/scratch/0/appcds-12h39m35s209.jsa -XX:ExtraSharedClassListFile=/home/turbanoff/Projects/official_jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_SignedJar_java/scratch/0/runtime.cds.appcds.SignedJar.java-test.classlist -Xlog:cds+class=debug Hello dummy ]
[2022-04-05T09:39:35.221153690Z] Gathering output for process 696634
[ELAPSED: 2012 ms]
[logging stdout to /home/turbanoff/Projects/official_jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_SignedJar_java/scratch/0/runtime.cds.appcds.SignedJar.java-0000-dump.stdout]
[logging stderr to /home/turbanoff/Projects/official_jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_SignedJar_java/scratch/0/runtime.cds.appcds.SignedJar.java-0000-dump.stderr]
[STDERR]

[2022-04-05T09:39:37.235029464Z] Waiting for completion for process 696634
[2022-04-05T09:39:37.235245950Z] Waiting for completion finished for process 696634
[2022-04-05T09:39:37.235883134Z] Waiting for completion for process 696634
[2022-04-05T09:39:37.235973984Z] Waiting for completion finished for process 696634
STDERR:
 stdout: [[0.007s][info][cds] Core region alignment: 4096
[0.043s][info][cds] JVM_StartThread() ignored: java.lang.ref.Reference$ReferenceHandler
[0.043s][info][cds] JVM_StartThread() ignored: java.lang.ref.Finalizer$FinalizerThread
[0.093s][info][cds] Loading classes to share ...
[0.235s][info][cds] JVM_StartThread() ignored: jdk.internal.misc.InnocuousThread
[1.210s][info][cds] Loading classes to share: done.
[1.210s][info][cds] Shared spaces: preloaded 1263 classes
[1.211s][info][cds] Rewriting and linking classes ...
[1.211s][info][cds] Regenerate MethodHandle Holder classes...
[1.540s][info][cds] Regenerate MethodHandle Holder classes...done
[1.559s][info][cds] Rewriting and linking classes: done
[1.561s][info][cds] Run GC ...
[1.639s][info][cds] Run GC done
[1.639s][warning][cds] Skipping jdk/internal/event/Event: JFR event class
[1.640s][warning][cds] Skipping jdk/internal/event/X509CertificateEvent: JFR event class
[1.640s][warning][cds] Skipping Hello: Signed JAR
[1.643s][info   ][cds] Gathering all archivable objects ... 
[1.643s][info   ][cds] Gathering classes and symbols ... 
[1.743s][info   ][cds] Sorting symbols and fixing identity hash ... 
[1.748s][info   ][cds] Sorting classes ... 
[1.903s][info   ][cds] _estimated_hashtable_bytes = 434488 + 44832 = 479320
[1.903s][info   ][cds] _estimated_metaspaceobj_bytes = 224111928
[1.903s][info   ][cds] total estimate bytes = 224599440
[1.903s][info   ][cds] Reserved output buffer space at 0x00007f77429ce000 [224600064 bytes]
[1.904s][info   ][cds] Allocating RW objects ... 
[1.918s][info   ][cds] done (31361 objects)
[1.918s][info   ][cds] Allocating RO objects ... 
[1.932s][info   ][cds] done (90286 objects)
[1.932s][info   ][cds] Relocating embedded pointers in core regions ... 
[1.970s][info   ][cds] Heap range = [0x00000000b2200000 - 0x0000000100000000]
[1.970s][info   ][cds] Dumping objects to closed archive heap region ...
[1.981s][info   ][cds] Dumping objects to open archive heap region ...
[1.995s][error  ][cds,heap] Cannot archive object of class java.lang.invoke.MethodHandleNatives$CallSiteContext
];
 stderr: []
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0]

	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:489)
	at jdk.test.lib.cds.CDSTestUtils.checkDump(CDSTestUtils.java:280)
	at SignedJar.main(SignedJar.java:59)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-04-06 17:37;iklam;backtrace_archived_obj.tcl;https://bugs.openjdk.org/secure/attachment/98470/backtrace_archived_obj.tcl","2022-04-06 00:03;aturbanov;cds.heap.log.zip;https://bugs.openjdk.org/secure/attachment/98460/cds.heap.log.zip","2022-04-05 12:59;aturbanov;cds_ubuntu_test.zip;https://bugs.openjdk.org/secure/attachment/98456/cds_ubuntu_test.zip",,,,,,,,,,,,x86_64,,,,,,,,,linux_ubuntu,,,,,"0|i2wl4j:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-05 10:33;iklam;[~aturbanov] I can't reproduce the same error on Ubuntu 21.10. Could you try the following patch and attach the runtime.cds.appcds.SignedJar.java-0000-dump.stdout file from jtreg? This file should be somewhere under your jtreg ""work"" directory. I suspect that in your case a different crypto provider is used than the one used on my system. Thanks!

/ws/open/test/hotspot/jtreg/runtime/cds/appcds$ cat /etc/lsb-release 
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=21.10
DISTRIB_CODENAME=impish
DISTRIB_DESCRIPTION=""Ubuntu 21.10""

/ws/open/test/hotspot/jtreg/runtime/cds/appcds$ git diff
diff --git a/test/hotspot/jtreg/runtime/cds/appcds/SignedJar.java b/test/hotspot/jtreg/runtime/cds/appcds/SignedJar.java
index b2fe7cad903..5a2f7b3ea9a 100644
--- a/test/hotspot/jtreg/runtime/cds/appcds/SignedJar.java
+++ b/test/hotspot/jtreg/runtime/cds/appcds/SignedJar.java
@@ -55,6 +55,7 @@ public class SignedJar {
 
         for (String mainArg : mainArgs) {
             output = TestCommon.dump(signedJar, TestCommon.list(mainClass),
+                                     ""-Xlog:class+load=debug"",
                                      ""-Xlog:cds+class=debug"", mainClass, mainArg);
             TestCommon.checkDump(output, skipMsg);
             output.shouldNotContain(lambdaInArchive);
;;;","2022-04-05 10:34;iklam;Also, could you attach this log as well?

/home/turbanoff/Projects/official_jdk/build/linux-x86_64-server-fastdebug/images/jdk/bin/keytool -J-Xlog:class+load=debug -genkey -keystore ./keystore -alias mykey -storepass abc123 -keypass abc123 -keyalg dsa -dname CN=jvmtest > keytool.log
;;;","2022-04-05 11:12;mseledtsov;ILW = MLM = P4;;;","2022-04-05 13:00;aturbanov;Added updated results;;;","2022-04-05 15:02;iklam;Hi [~aturbanov], I think you are running in a Russian locale. I tried to run the test with LANG=ru_RU.UTF-8 but I still can't reproduce the error.

Could you do one more experiment? The following should give us a cds.heap.log file that can tell us why the MethodHandleNatives$CallSiteContext ends up inside the archived heap.

Thanks!

--- a/test/hotspot/jtreg/runtime/cds/appcds/SignedJar.java
+++ b/test/hotspot/jtreg/runtime/cds/appcds/SignedJar.java
@@ -55,6 +55,7 @@ public class SignedJar {
 
         for (String mainArg : mainArgs) {
             output = TestCommon.dump(signedJar, TestCommon.list(mainClass),
+                                     ""-Xlog:cds+heap=trace:file=cds.heap.log:none:filesize=0"",
                                      ""-Xlog:cds+class=debug"", mainClass, mainArg);
             TestCommon.checkDump(output, skipMsg);
             output.shouldNotContain(lambdaInArchive);
;;;","2022-04-06 00:03;aturbanov;Did run with updated test. Attached cds.heap.log;;;","2022-04-06 11:24;iklam;[~aturbanov] thanks for the data. I have a theory about what went wrong. The ClassLoaders$BootClassLoader::resourceCache is null in my run, but it's non-null in your run. I suspect when running in non-English locale, some localization resources were loaded for messages related to class signing.

I'll work on a patch to explicitly set clear the resource caches.;;;","2022-04-06 17:36;iklam;$ tclsh backtrace_archived_obj.tcl 0x00000000b239c518 < cds.heap.log   
[  0] 0x00000000b239c518 java/lang/invoke/MethodHandleNatives$CallSiteContext
[  1] 0x00000000b239c3e8 jdk/internal/ref/CleanerImpl$PhantomCleanableRef::action
[  2] 0x00000000b239c418 jdk/internal/ref/CleanerImpl$PhantomCleanableRef::discovered
[  3] 0x00000000b2327f88 java/lang/ref/SoftReference::discovered
[  4] 0x00000000b2326550 jdk/internal/loader/ClassLoaders$BootClassLoader::resourceCache
[  5] 0x00000000b22ce610 jdk/internal/loader/ArchivedClassLoaders::bootLoader
;;;","2022-04-06 21:51;iklam;[~aturbanov] I am still trying to write a reproducible test case for this bug. Could you try this patch and see if it fixes the problem on your system? Thanks!

https://github.com/openjdk/jdk/compare/master...iklam:8284336-cds-signed-jar-test-fail-with-locale;;;","2022-04-06 23:21;iklam;Update: I think this bug is not related to locales. It happens on some machines probably due to timing.

When running SignedJar.java, BootClassLoader::resourceCache points to a non-null SoftReference. Due to the design of java.lang.ref.Reference, BootClassLoader::resourceCache.discovered could point to an arbitrary Reference object in the discovered reference list maintained by the GC.

See https://github.com/openjdk/jdk/blob/61fcf2f67ff16bee92a5279e7bcacc79fc8f37ad/src/java.base/share/classes/java/lang/ref/Reference.java#L188

Before dumping the CDS archive, we force a full GC. On my test machine, after the full GC is done,  BootClassLoader::resourceCache.discovered is NULL.

However, on the reporter's machine, BootClassLoader::resourceCache.discovered is not NULL. Rather, BootClassLoader::resourceCache.discovered.discovered points to a CleanerImpl$PhantomCleanableRef which eventually points to MethodHandleNatives$CallSiteContext, causing the test to fail.

The behavior difference is probably due to timing or the amount of CPU/RAM available on the different machines.

The fix is to set BootClassLoader::resourceCache to NULL before archiving the heap objects. We should also check that Reference objects are never archived.

============== details below ==============

[1] When loading the signed Hello.class, the following resource is queried, causing a SoftReference to be added into BootClassLoader::resourceCache

findMiscResource: META-INF/services/java.lang.System$LoggerFinder
	at java.base/jdk.internal.loader.BuiltinClassLoader.findMiscResource(BuiltinClassLoader.java:445)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findResources(BuiltinClassLoader.java:385)
	at java.base/jdk.internal.loader.BootLoader.findResources(BootLoader.java:190)
	at java.base/java.lang.ClassLoader.getResources(ClassLoader.java:1467)
	at java.base/java.lang.ClassLoader.getResources(ClassLoader.java:1465)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.nextProviderClass(ServiceLoader.java:1203)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNextService(ServiceLoader.java:1228)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNext(ServiceLoader.java:1273)
	at java.base/java.util.ServiceLoader$2.hasNext(ServiceLoader.java:1309)
	at java.base/java.util.ServiceLoader$3.hasNext(ServiceLoader.java:1393)
	at java.base/jdk.internal.logger.BootstrapLogger$DetectBackend$1.run(BootstrapLogger.java:897)
	at java.base/jdk.internal.logger.BootstrapLogger$DetectBackend$1.run(BootstrapLogger.java:891)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:318)
	at java.base/jdk.internal.logger.BootstrapLogger$DetectBackend.<clinit>(BootstrapLogger.java:891)
	at java.base/jdk.internal.logger.BootstrapLogger.useLazyLoggers(BootstrapLogger.java:939)
	at java.base/jdk.internal.logger.LazyLoggers.getLazyLogger(LazyLoggers.java:441)
	at java.base/jdk.internal.logger.LazyLoggers.getLogger(LazyLoggers.java:416)
	at java.base/java.lang.System.getLogger(System.java:1787)
	at java.base/jdk.internal.event.EventHelper.isLoggingSecurity(EventHelper.java:148)
	at java.base/sun.security.provider.X509Factory.commitEvent(X509Factory.java:773)
	at java.base/sun.security.provider.X509Factory.engineGenerateCertificate(X509Factory.java:108)
	at java.base/java.security.cert.CertificateFactory.generateCertificate(CertificateFactory.java:355)
	at java.base/sun.security.pkcs.PKCS7.parseSignedData(PKCS7.java:321)
	at java.base/sun.security.pkcs.PKCS7.parse(PKCS7.java:172)
	at java.base/sun.security.pkcs.PKCS7.parse(PKCS7.java:140)
	at java.base/sun.security.pkcs.PKCS7.<init>(PKCS7.java:122)
	at java.base/sun.security.util.SignatureFileVerifier.<init>(SignatureFileVerifier.java:118)
	at java.base/java.util.jar.JarVerifier.processEntry(JarVerifier.java:308)
	at java.base/java.util.jar.JarVerifier.update(JarVerifier.java:239)
	at java.base/java.util.jar.JarFile.initializeVerifier(JarFile.java:762)
	at java.base/java.util.jar.JarFile.getInputStream(JarFile.java:848)
	at java.base/jdk.internal.loader.URLClassPath$JarLoader$2.getInputStream(URLClassPath.java:884)
	at java.base/jdk.internal.loader.Resource.cachedInputStream(Resource.java:77)
	at java.base/jdk.internal.loader.Resource.getByteBuffer(Resource.java:163)
	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:859)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:766)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:687)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:645)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)

[2] Subsequently, a MethodHandleNatives$CallSiteContext is entered into a CleanerImpl$PhantomCleanableRef, which ends up being reachable from BootClassLoader::resourceCache.discovered.discovered.

	at java.base/jdk.internal.ref.CleanerImpl$PhantomCleanableRef.<init>(CleanerImpl.java:169)
	at java.base/java.lang.ref.Cleaner.register(Cleaner.java:224)
	at java.base/java.lang.invoke.MethodHandleNatives$CallSiteContext.make(MethodHandleNatives.java:88)
	at java.base/java.lang.invoke.CallSite.<init>(CallSite.java:144)
	at java.base/java.lang.invoke.ConstantCallSite.<init>(ConstantCallSite.java:50)
	at java.base/java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite(InnerClassLambdaMetafactory.java:243)
	at java.base/java.lang.invoke.LambdaMetafactory.metafactory(LambdaMetafactory.java:341)
	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:134)
	at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:315)
	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:279)
	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:269)
	at java.base/java.util.regex.Pattern.DOT(Pattern.java:5726)
	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2205)
	at java.base/java.util.regex.Pattern.expr(Pattern.java:2086)
	at java.base/java.util.regex.Pattern.compile(Pattern.java:1798)
	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1445)
	at java.base/java.util.regex.Pattern.compile(Pattern.java:1110)
	at java.base/sun.security.util.DisabledAlgorithmConstraints.<clinit>(DisabledAlgorithmConstraints.java:89)
	at java.base/sun.security.pkcs.SignerInfo.<clinit>(SignerInfo.java:61)
	at java.base/sun.security.pkcs.PKCS7.parseSignedData(PKCS7.java:380)
	at java.base/sun.security.pkcs.PKCS7.parse(PKCS7.java:172)
	at java.base/sun.security.pkcs.PKCS7.parse(PKCS7.java:140)
	at java.base/sun.security.pkcs.PKCS7.<init>(PKCS7.java:122)
	at java.base/sun.security.util.SignatureFileVerifier.<init>(SignatureFileVerifier.java:118)
	at java.base/java.util.jar.JarVerifier.processEntry(JarVerifier.java:308)
	at java.base/java.util.jar.JarVerifier.update(JarVerifier.java:239)
	at java.base/java.util.jar.JarFile.initializeVerifier(JarFile.java:762)
	at java.base/java.util.jar.JarFile.getInputStream(JarFile.java:848)
	at java.base/jdk.internal.loader.URLClassPath$JarLoader$2.getInputStream(URLClassPath.java:884)
	at java.base/jdk.internal.loader.Resource.cachedInputStream(Resource.java:77)
	at java.base/jdk.internal.loader.Resource.getByteBuffer(Resource.java:163)
	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:859)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:766)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:687)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:645)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)


;;;","2022-04-07 01:46;aturbanov;> Could you try this patch and see if it fixes the problem on your system? Thanks!
> https://github.com/openjdk/jdk/compare/master...iklam:8284336-cds-signed-jar-test-fail-with-locale
No failures with patch. Tried 50 runs.;;;","2022-04-07 20:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8151
Date: 2022-04-07 22:44:19 +0000;;;","2022-04-08 10:21;dukebot;Changeset: 662320a0
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-04-08 17:20:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/662320a0ec0b373fa1e4df9281224e9bdbdf76ac
;;;","2022-04-08 11:18;iklam;Thank you [~aturbanov] for helping with diagnosing this bug. I have integrated the fix into the mainline JDK repo.;;;",,,,,,,,,,,,,,,,
Add sanity check for signal handler modification warning.,JDK-8284331,5071723,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2022-04-05 02:18,2023-05-22 02:54,2023-10-01 09:56,2022-04-29 13:16,,,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,"The check for signal handlers being changed is used in the hs_err report, ""jcmd VM.info"" output, and periodically with -Xcheck:jni

We should have a test that it does not contain any warnings under ""normal"" circumstances.",,,,,,,,,,,JDK-8294291,JDK-8308534,JDK-8295065,JDK-8294525,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279124,JDK-8295985,JDK-8292235,,,,JDK-8285647,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wl3v:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-05 03:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8106
Date: 2022-04-05 10:37:26 +0000;;;","2022-04-29 13:16;dukebot;Changeset: 116763cb
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2022-04-29 20:14:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/116763cb5d58a7316b7bada689a0fa34a7250ee7
;;;","2022-09-28 08:02;lujaniuk;I'm doing the backports.;;;","2023-05-08 14:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1336
Date: 2023-05-08 21:23:16 +0000;;;","2023-05-10 00:53;clanger;Fix request (17u)
Backport of a test only change for Oracle parity. No risk. GHA and SAP nightlies are green.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
jcmd may not be able to find processes in the container,JDK-8284330,5071722,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2022-04-05 01:57,2022-04-13 23:03,2023-10-01 09:56,2022-04-09 19:13,18,19,,,,,,,,19,core-svc,,0,containers,jcmd,,,,,,,,,,,,,,,,,"jcmd uses src/jdk.internal.jvmstat/linux/classes/sun/jvmstat/PlatformSupportImpl.java to scan for all temporary directories: the host temp dir, and (through the /proc filesystem) the temp dirs of running containers.

It checks the inode value to ensure a temp directory under /proc is not the same as the host temp directory.
However the inode can have the same value in the container and host. Thus we should check device id additionally.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2wl3n:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2022-04-05 17:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8103
Date: 2022-04-05 09:04:56 +0000;;;","2022-04-09 19:13;dukebot;Changeset: 0b867b5e
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2022-04-10 02:12:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0b867b5e734eede768d9f6402a309208084fd044
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test runtime/cds/appcds/TestParallelGCWithCDS.java fails in repo-loom,JDK-8284319,5071701,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,lmesnik,lmesnik,2022-04-04 17:42,2022-04-27 23:28,2023-10-01 09:56,2022-04-25 13:54,repo-loom,,,,,,,,,19,hotspot,,0,tier7,,,,,,,,,,,,,,,,,,"Test runtime/cds/appcds/TestParallelGCWithCDS.java fails with -Xcomp in repo-loom.

It says
----------System.err:(12/692)----------
java.lang.RuntimeException: Either 'Too small maximum heap' or 'GC triggered before VM initialization completed' must be in stdout/stderr 

	at TestParallelGCWithCDS.test(TestParallelGCWithCDS.java:121)
	at TestParallelGCWithCDS.main(TestParallelGCWithCDS.java:57)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1532)
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wkyz:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-21 09:42;ccheung;The test log (runtime.cds.appcds.TestParallelGCWithCDS.java-0012-exec.stdout) from the artifacts shows the following:

Error occurred during initialization of boot layer
java.lang.OutOfMemoryError: Java heap space

The test should take the above error into account.;;;","2022-04-21 09:44;rpressler;Does that mean it's a test bug?;;;","2022-04-21 11:54;ccheung;Unsure if it is a test bug at the moment.

I could reproduce it with a loom build but not with mainline JDK19 using the following vm options on linux-x64-debug:

-XX:MaxRAMPercentage=4.16667 -Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:-UseCompressedOops;;;","2022-04-22 00:06;alanb;What heap size is used when it fails? I see the test tries 1Mb, 2MB, and 4Mb. The test handles ""Too small maximum heap"" error so I assume this is the same for main line and loom for 1Mb at least. There are library changes in loom that might change the heap usages in the early phases by a tiny bit and maybe this leads to ""java.lang.OutOfMemoryError: Java heap space"".;;;","2022-04-22 09:26;ccheung;The max heap was set to 2MB when it failed.

After enabling GC log, I noticed there were a lot more GC activities with loom compared with jdk19.

Tail of log with loom (failure case):

[6.696s][info   ][gc,start       ] GC(35) Pause Full (CodeCache GC Threshold)
[6.696s][info   ][gc,phases,start] GC(35) Marking Phase
[6.705s][info   ][gc,phases      ] GC(35) Marking Phase 8.428ms
[6.705s][info   ][gc,phases,start] GC(35) Summary Phase
[6.705s][info   ][gc,phases      ] GC(35) Summary Phase 0.006ms
[6.705s][info   ][gc,phases,start] GC(35) Adjust Roots
[6.707s][info   ][gc,phases      ] GC(35) Adjust Roots 2.104ms
[6.707s][info   ][gc,phases,start] GC(35) Compaction Phase
[6.710s][info   ][gc,phases      ] GC(35) Compaction Phase 2.886ms
[6.710s][info   ][gc,phases,start] GC(35) Post Compact
[6.711s][info   ][gc,phases      ] GC(35) Post Compact 0.917ms
[6.711s][info   ][gc,heap        ] GC(35) PSYoungGen: 510K(1024K)->506K(1024K) Eden: 510K(512K)->506K(512K) From: 0K(512K)->0K(512K)
[6.711s][info   ][gc,heap        ] GC(35) ParOldGen: 507K(512K)->507K(512K)
[6.711s][info   ][gc,metaspace   ] GC(35) Metaspace: 1424K(1664K)->1424K(1664K) NonClass: 1420K(1536K)->1420K(1536K) Class: 4K(128K)->4K(128K)
[6.711s][info   ][gc             ] GC(35) Pause Full (CodeCache GC Threshold) 0M->0M(1M) 14.565ms
[6.711s][info   ][gc,cpu         ] GC(35) User=0.01s Sys=0.00s Real=0.01s
Error occurred during initialization of boot layer
java.lang.OutOfMemoryError: Java heap space

Tail of log with jdk19:

[5.261s][info   ][gc,heap        ] GC(4) PSYoungGen: 1012K(1024K)->952K(1024K) Eden: 511K(512K)->452K(512K) From: 500K(512K)->499K(512K)
[5.261s][info   ][gc,heap        ] GC(4) ParOldGen: 288K(512K)->288K(512K)
[5.261s][info   ][gc,metaspace   ] GC(4) Metaspace: 1690K(1920K)->1690K(1920K) NonClass: 1684K(1792K)->1684K(1792K) Class: 5K(128K)->5K(128K)
[5.261s][info   ][gc             ] GC(4) Pause Full (Ergonomics) 1M->1M(1M) 12.578ms
[5.261s][info   ][gc,cpu         ] GC(4) User=0.01s Sys=0.00s Real=0.01s
Hello World
[6.022s][info   ][gc,heap,exit   ] Heap
[6.022s][info   ][gc,heap,exit   ]  PSYoungGen      total 1024K, used 1007K [0x00007f8358680000, 0x00007f8358800000, 0x00007f8358800000)
[6.022s][info   ][gc,heap,exit   ]   eden space 512K, 99% used [0x00007f8358680000,0x00007f83586fec40,0x00007f8358700000)
[6.022s][info   ][gc,heap,exit   ]   from space 512K, 97% used [0x00007f8358780000,0x00007f83587fcfc0,0x00007f8358800000)
[6.022s][info   ][gc,heap,exit   ]   to   space 512K, 0% used [0x00007f8358700000,0x00007f8358700000,0x00007f8358780000)
[6.022s][info   ][gc,heap,exit   ]  ParOldGen       total 512K, used 288K [0x00007f8358600000, 0x00007f8358680000, 0x00007f8358680000)
[6.022s][info   ][gc,heap,exit   ]   object space 512K, 56% used [0x00007f8358600000,0x00007f8358648240,0x00007f8358680000)
[6.022s][info   ][gc,heap,exit   ]  Metaspace       used 1854K, committed 2048K, reserved 1114112K
[6.022s][info   ][gc,heap,exit   ]   class space    used 6K, committed 128K, reserved 1048576K
[6.023s][info   ][gc,verify,start] Verifying
[6.033s][info   ][gc,verify      ] Verifying  10.249ms;;;","2022-04-25 11:27;alanb;[~ccheung] Is the output using a build of the fibers branch or jep-vt branch? ;;;","2022-04-25 11:36;ccheung;[~alanb] The output is from a build of the fibers branch.;;;","2022-04-25 11:39;alanb;It would be useful if you could repeat it with -XX:-LoomVM. That disables most of the loom code. It's disabled by default in the jep-vt branch, need to run with --enable-preview to enable.;;;","2022-04-25 11:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8385
Date: 2022-04-25 18:13:55 +0000;;;","2022-04-25 13:54;dukebot;Changeset: 9b827089
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-04-25 20:50:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9b8270895e79d58ae3d427ce5141c57cb747c220
;;;","2022-04-25 14:06;ccheung;I tried running the test with -XX:-LoomVM, the OutOfMemoryError is no longer there with the -Xmx2m test case.

The number of full GC is 5 which is similar to the jdk19 mainline (number of full GC 4).;;;",,,,,,,,,,,,,,,,,,,
Support accessibility ManualTestFrame.java for non SwingSet tests,JDK-8284316,5071695,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-04-04 16:01,2022-08-12 06:44,2023-10-01 09:56,2022-05-09 11:34,17,18,,,,,,,,19,client-libs,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,,Right now ManualTestFrame.java supports only SwingSet2 test to test. But at some point we need non swingset2 test also to be added for testing we can use the same Manual test frame work class.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286435,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wkxn:",9223372036854775807,b22,,,,,,,,,,,"2022-04-04 16:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8100
Date: 2022-04-04 23:39:33 +0000;;;","2022-05-09 11:34;dukebot;Changeset: 6a7c0237
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-05-09 18:30:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6a7c023796b0f39f54d0335f4723c1f06ff0032d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
mismatch between key and content in compiler error message,JDK-8284308,5071684,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-04-04 11:57,2022-04-13 23:03,2023-10-01 09:56,2022-04-11 14:01,,,,,,,,,,19,tools,,0,noreg-trivial,,,,,,,,,,,,,,,,,,"This compiler error message:

compiler.misc.upper.bounds=\
        lower bounds: {0}

had a clear mismatch between its key and its contents. It should be:

compiler.misc.upper.bounds=\
        upper bounds: {0}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wkv7:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-04-04 14:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8099
Date: 2022-04-04 21:35:20 +0000;;;","2022-04-11 14:01;dukebot;Changeset: 4e165f66
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2022-04-11 20:57:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4e165f66a954dd7fab4b6dab584c4da060f6a48e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestVarArgs silently passes,JDK-8284306,5071677,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jvernee,jvernee,jvernee,2022-04-04 10:13,2022-04-05 03:34,2023-10-01 09:56,2022-04-05 03:34,repo-panama,,,,,,,,,,tools,,0,foreign-memaccess+abi,foreign-preview,,,,,,,,,,,,,,,,,"Instead of an array with type ids, a function pointer is accidentally passed to the native code of TestVarArgs.

Since the function pointer is not a valid type id, it is effectively ignored by the test, and the tests then passes silently.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wktn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-04-04 11:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/677
Date: 2022-04-04 18:19:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/Thread/AsyncExceptionTest.java timed out,JDK-8284303,5071673,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pchilanomate,dcubed,dcubed,2022-04-04 08:39,2022-04-07 07:27,2023-10-01 09:56,2022-04-06 09:49,19,,,,,,,,,19,hotspot,,0,intermittent,threads,tier1,tier3,tier6,,,,,,,,,,,,,,"The following test timed out in the JDK19 CI:

runtime/Thread/AsyncExceptionTest.java

Here's a snippet from the log file:

#section:main
----------messages:(6/354)----------
command: main -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI AsyncExceptionTest
reason: User specified action: run main/othervm -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI AsyncExceptionTest 
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
elapsed time (seconds): 499.182
----------configuration:(0/0)----------
----------System.out:(2/59)----------
About to execute for 30 seconds.
Timeout refired 480 times
----------System.err:(0/0)----------
----------rerun:(35/7888)*----------

<snip>

result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+17-1108/linux-x64-debug.jdk/jdk-19/fastdebug/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 499163ms).

I'm starting this bug as a P2 since this is a Tier1 failure.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283044,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,windows,,,,"0|i2wksr:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-04 08:44;dcubed;[~pchilanomate] - Can you take a look at this timeout of your new test?

runtime/Thread/AsyncExceptionTest.java

is a new test included with:

JDK-8283044 Use asynchronous handshakes to deliver asynchronous exceptions;;;","2022-04-04 08:53;pchilanomate;Looking at it. No core dump so hard to tell but I'm guessing it might be because of:

while (compLevel < (highestLevel - 1)) {
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) { /* ignored */ }
            compLevel = WB.getMethodCompilationLevel(m);
        }

So the methods never get compiled to that level.
I can problem list it if you want until I confirm that.;;;","2022-04-04 12:03;pchilanomate;I run multiple instances of the test in parallel in infinite loops but I cannot reproduce the timeout. 
It's odd that just after a couple of runs in the pipeline we see a timeout. I'll try to run it in one of the VM.Standard.E4.Flex machines where it failed.;;;","2022-04-04 13:51;pchilanomate;I was able to reproduce the issue quite easily on the VM.Standard.E4.Flex machines running the same parallel workflow. The issue was indeed due to the methods never reaching that compilation level. I added a bail out after ~20 seconds so for the rare cases where the methods didn't get compiled we just execute the interpreted version:

diff --git a/test/hotspot/jtreg/runtime/Thread/AsyncExceptionTest.java b/test/hotspot/jtreg/runtime/Thread/AsyncExceptionTest.java
index 9e35af9557a5..990c8b66ddd9 100644
--- a/test/hotspot/jtreg/runtime/Thread/AsyncExceptionTest.java
+++ b/test/hotspot/jtreg/runtime/Thread/AsyncExceptionTest.java
@@ -69,10 +69,15 @@ public void checkCompLevel(String method) {
             throw new RuntimeException(""Unexpected: "" + e);
         }
         int compLevel = WB.getMethodCompilationLevel(m);
+        long start_time = System.currentTimeMillis();
         while (compLevel < (highestLevel - 1)) {
             try {
                 Thread.sleep(200);
             } catch (InterruptedException e) { /* ignored */ }
+            if( System.currentTimeMillis() - start_time > 20000) {
+                // if more than 20 seconds have elapsed just bail out
+                break;
+            }
             compLevel = WB.getMethodCompilationLevel(m);
         }
     };;;","2022-04-04 14:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8097
Date: 2022-04-04 21:16:19 +0000;;;","2022-04-05 06:24;dcubed;The failure is very intermittent so lowering from P2 -> P3.;;;","2022-04-05 11:15;mseledtsov;ILW = MMM = P3;;;","2022-04-06 09:49;dukebot;Changeset: 8e4fab0c
Author:    Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2022-04-06 16:47:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8e4fab0c89e5e765a17241eacdf0795ea950cd1c
;;;","2022-04-07 07:27;dcubed;The fix for this bug is integrated in jdk-19+17-1139.;;;",,,,,,,,,,,,,,,,,,,,,
Handle inheritDoc misuse more gracefully,JDK-8284299,5071668,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-04-04 07:49,2022-04-07 00:06,2023-10-01 09:56,2022-04-06 12:00,19,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wkrn:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-04-05 06:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8107
Date: 2022-04-05 13:01:54 +0000;;;","2022-04-06 12:00;dukebot;Changeset: dd4a1bba
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-04-06 18:56:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dd4a1bba91d69b1dc56c8f5b72275b3994cd82f9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid,JDK-8284293,5071659,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,,jwaters,jwaters,2022-04-04 04:51,2022-04-04 04:55,2023-10-01 09:56,2022-04-04 04:54,,,,,,,,,,,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wkpn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sun/security/krb5/auto/Renew.java fails intermittently on Windows 11,JDK-8284291,5071658,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,aturbanov,aturbanov,2022-04-04 04:26,2022-12-14 23:15,2023-10-01 09:56,2022-04-20 11:59,19,,,,,,,,,19,security-libs,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,,"Reproduced a few times, when I run tier2 or {{make test TEST=""sun/security/krb5""}}.
Win 11. windows-x86_64-server-release.

STDOUT:
Start KDC on 12976
-----------------------------------------------
>>>>> UDP packet received
RABBIT.HOLE:12976> dummy@RABBIT.HOLE sends AS-REQ for krbtgt/RABBIT.HOLE@RABBIT.HOLE, KDCOptions: RENEWABLE,
KrbException: Additional pre-authentication required (25)
        at KDC.processAsReq(KDC.java:1326)
        at KDC.processMessage(KDC.java:800)
        at KDC$1.run(KDC.java:1556)
     Error 25 Additional pre-authentication required
>>>>> UDP request honored
-----------------------------------------------
>>>>> UDP packet received
RABBIT.HOLE:12976> dummy@RABBIT.HOLE sends AS-REQ for krbtgt/RABBIT.HOLE@RABBIT.HOLE, KDCOptions: RENEWABLE,
     Return dummy@RABBIT.HOLE ticket for krbtgt/RABBIT.HOLE@RABBIT.HOLE, flags RENEWABLE;INITIAL;PRE-AUTHENT
>>>>> UDP request honored
STDERR:
java.lang.Exception: Ticket not renewed
        at Renew.main(Renew.java:93)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:828)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2wkpf:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7a7b7e03,,,,,,,,,"2022-04-04 09:08;weijun;[~aturbanov] Can you try to change the `Thread.sleep(6000)` line in the test to `Thread.sleep(7000)`? Here the ticket's lifetime is 10 seconds and Java should renew the ticket if half of its lifetime already passed by. Inside Kerberos only seconds are stored so maybe 1.999s could be stored as 1s and if the clock is not precise enough then it's possible that the KDC might treat this 6000ms of sleep less than 5s.

If this still does not work, can you print out the content of `c.s().getPrivateCredentials(KerberosTicket.class).iterator().next()` right before the sleep and then print out `System.currentTimeMillis()` right after the sleep?;;;","2022-04-04 12:59;aturbanov;Still fails with Thread.sleep(7000).

STDOUT:
Start KDC on 11889
-----------------------------------------------
>>>>> UDP packet received
RABBIT.HOLE:11889> dummy@RABBIT.HOLE sends AS-REQ for krbtgt/RABBIT.HOLE@RABBIT.HOLE, KDCOptions: RENEWABLE,
KrbException: Additional pre-authentication required (25)
        at KDC.processAsReq(KDC.java:1326)
        at KDC.processMessage(KDC.java:800)
        at KDC$1.run(KDC.java:1556)
     Error 25 Additional pre-authentication required
>>>>> UDP request honored
-----------------------------------------------
>>>>> UDP packet received
RABBIT.HOLE:11889> dummy@RABBIT.HOLE sends AS-REQ for krbtgt/RABBIT.HOLE@RABBIT.HOLE, KDCOptions: RENEWABLE,
     Return dummy@RABBIT.HOLE ticket for krbtgt/RABBIT.HOLE@RABBIT.HOLE, flags RENEWABLE;INITIAL;PRE-AUTHENT
>>>>> UDP request honored
Before sleep: Ticket (hex) =
0000: 61 82 01 1F 30 82 01 1B   A0 03 02 01 05 A1 0D 1B  a...0...........
0010: 0B 52 41 42 42 49 54 2E   48 4F 4C 45 A2 20 30 1E  .RABBIT.HOLE. 0.
0020: A0 03 02 01 02 A1 17 30   15 1B 06 6B 72 62 74 67  .......0...krbtg
0030: 74 1B 0B 52 41 42 42 49   54 2E 48 4F 4C 45 A3 81  t..RABBIT.HOLE..
0040: E2 30 81 DF A0 03 02 01   12 A2 81 D7 04 81 D4 FC  .0..............
0050: 84 2D B0 D0 CA 07 0B 50   06 C5 F1 82 05 1F 0E 97  .-.....P........
0060: CF AC 77 F5 F1 50 94 7A   2A 66 E3 B6 92 EA 3F 1C  ..w..P.z*f....?.
0070: 3F AF 8C 9F D8 99 9E 1E   62 54 A0 2B 3D 84 E7 CE  ?.......bT.+=...
0080: 48 92 95 66 57 16 67 4D   FD B6 83 49 E7 7C 4D 2F  H..fW.gM...I..M/
0090: 49 D3 70 3D 20 BE 96 A5   79 11 A8 C8 7B 72 F1 14  I.p= ...y....r..
00A0: C4 44 D6 07 64 61 7A 2E   31 54 B3 E6 50 8B D3 49  .D..daz.1T..P..I
00B0: 1F 79 A6 5E C8 D0 4A E2   96 6F D1 35 EC 97 28 29  .y.^..J..o.5..()
00C0: 36 75 D1 88 3C F3 EC 80   FB 7F 78 5E 49 82 69 C8  6u..<.....x^I.i.
00D0: 7E 9D 9F E6 9D 4B E4 1F   6F 44 72 B0 51 8A BD A5  .....K..oDr.Q...
00E0: 17 C6 4C C7 E1 51 14 56   55 93 3E 9F C6 37 C2 13  ..L..Q.VU.>..7..
00F0: 2D FC B0 87 2F ED 4A 40   16 E2 9A 73 59 36 5D 55  -.../.J@...sY6]U
0100: AD 0E 4C 03 AB 4D 44 E3   46 C9 7E CF 81 E6 8B F5  ..L..MD.F.......
0110: 71 EA A7 99 9A 02 A7 59   67 2A 93 F4 5B A9 F8 D5  q......Yg*..[...
0120: D2 D8 F2                                           ...

Client Principal = dummy@RABBIT.HOLE
Server Principal = krbtgt/RABBIT.HOLE@RABBIT.HOLE
Session Key = EncryptionKey: keyType=18 keyBytes (hex dump)=
0000: A4 15 BF DA A0 67 25 C1   B3 52 E6 3A 15 54 EA B3  .....g%..R.:.T..
0010: 07 EF B6 23 73 E7 1A 4F   7A A7 B6 CF 9C 24 5D 81  ...#s..Oz....$].


Forwardable Ticket false
Forwarded Ticket false
Proxiable Ticket false
Proxy Ticket false
Postdated Ticket false
Renewable Ticket true
Initial Ticket true
Auth Time = Mon Apr 04 22:55:00 MSK 2022
Start Time = Mon Apr 04 22:55:00 MSK 2022
End Time = Mon Apr 04 22:55:10 MSK 2022
Renew Till = Tue Apr 05 22:55:00 MSK 2022
Client Addresses  Null
After sleep time: 1649102104750
STDERR:
java.lang.Exception: Ticket not renewed
        at Renew.main(Renew.java:95)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:828);;;","2022-04-04 14:13;weijun;After sleeping for 7 seconds, time went from 22:55:00.??? to 22:55:04.750. No idea how this could happen.

Anyway, I plan to fix this with something like ""while (now <= 22:55:05) Sleep(100);"";;;","2022-04-04 14:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8098
Date: 2022-04-04 21:27:51 +0000;;;","2022-04-05 22:02;dholmes;I checked the implementation and we use nanoTime to prevent an early return from sleep, so this seems to be an issue with currentTimeMillis.;;;","2022-04-20 11:59;dukebot;Changeset: 05ae7ed1
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-04-20 18:57:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/05ae7ed1aac6fabc9c8820c12b6567fe93a3546f
;;;",,,,,,,,,,,,,,,,,,,,,,,,
javac crashes when several transitive supertypes are missing,JDK-8284283,5071647,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,jlahoda,jlahoda,2022-04-04 02:31,2022-05-18 23:16,2023-10-01 09:56,2022-05-12 06:42,19,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,"Consider this case:
---Lib.java
package lib;
public class Lib implements A, B {}
interface A {}
interface B {}
---Test.java
public class Test<E> extends lib.Lib {}
---

$ javac -d out Lib.java
$ rm out/lib/A.class out/lib/B.class
$ javac -classpath out -XDdev Test.java 
Test.java:1: error: cannot access A
public class Test<E> extends lib.Lib {}
       ^
  class file for lib.A not found
1 error
An exception has occurred in the compiler (17-internal). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.NullPointerException: Cannot invoke ""com.sun.tools.javac.code.Type.hasTag(com.sun.tools.javac.code.TypeTag)"" because the return value of ""com.sun.tools.javac.code.Type$TypeVar.getUpperBound()"" is null
        at jdk.compiler/com.sun.tools.javac.code.Types.getBounds(Types.java:2732)
        at jdk.compiler/com.sun.tools.javac.comp.Check.checkNonCyclic1(Check.java:2392)
        at jdk.compiler/com.sun.tools.javac.comp.Check.checkNonCyclic(Check.java:2378)
        at jdk.compiler/com.sun.tools.javac.comp.TypeEnter$MembersPhase.runPhase(TypeEnter.java:1015)
        at jdk.compiler/com.sun.tools.javac.comp.TypeEnter$Phase.doCompleteEnvs(TypeEnter.java:288)
        at jdk.compiler/com.sun.tools.javac.comp.TypeEnter$AbstractMembersPhase.doCompleteEnvs(TypeEnter.java:928)
        at jdk.compiler/com.sun.tools.javac.comp.TypeEnter$Phase.completeEnvs(TypeEnter.java:257)
        at jdk.compiler/com.sun.tools.javac.comp.TypeEnter$Phase.completeEnvs(TypeEnter.java:272)
        at jdk.compiler/com.sun.tools.javac.comp.TypeEnter$Phase.completeEnvs(TypeEnter.java:272)
        at jdk.compiler/com.sun.tools.javac.comp.TypeEnter$Phase.completeEnvs(TypeEnter.java:272)
        at jdk.compiler/com.sun.tools.javac.comp.TypeEnter$Phase.completeEnvs(TypeEnter.java:272)
        at jdk.compiler/com.sun.tools.javac.comp.TypeEnter$Phase.completeEnvs(TypeEnter.java:272)
        at jdk.compiler/com.sun.tools.javac.comp.TypeEnter.complete(TypeEnter.java:204)
        at jdk.compiler/com.sun.tools.javac.code.Symbol.complete(Symbol.java:682)
        at jdk.compiler/com.sun.tools.javac.code.Symbol$ClassSymbol.complete(Symbol.java:1410)
        at jdk.compiler/com.sun.tools.javac.comp.Enter.complete(Enter.java:610)
        at jdk.compiler/com.sun.tools.javac.comp.Enter.main(Enter.java:587)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.enterTrees(JavaCompiler.java:1042)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:917)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)
printing javac parameters to: .../javac.20220404_112804.args
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wkmz:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-04-04 13:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8095
Date: 2022-04-04 20:24:44 +0000;;;","2022-05-12 06:42;dukebot;Changeset: e4439ca3
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-05-12 13:40:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e4439ca32abd779d7525f3a545e3635a8b02bc1c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Accessibility] [Win] [Narrator] Exceptions with TextArea & TextField when deleted last char,JDK-8284281,5071152,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,arapte,webbuggrp,webbuggrp,2022-03-29 02:29,2022-11-29 06:08,2023-10-01 09:56,2022-08-29 06:40,8u40,jfx11,jfx17,jfx18,jfx19,,,,,jfx20,javafx,,0,8bpr-critical-approved,a11y,accessibility,bugdb_34512374,dcspn,esc_acc,reproducer-yes,sn_125,sn_126,webbug,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Tested with Java 8u321 and Java 17

TextArea
Exception in thread ""JavaFX Application Thread"" java.lang.NullPointerException
        at javafx.scene.text.Text.queryAccessibleAttribute(Text.java:1931)
        at com.sun.javafx.scene.control.skin.TextAreaSkin.queryAccessibleAttribute(TextAreaSkin.java:1384)
        at javafx.scene.control.Control.queryAccessibleAttribute(Control.java:917)
        at javafx.scene.control.TextInputControl.queryAccessibleAttribute(TextInputControl.java:1578)
        at javafx.scene.Node$19.getAttribute(Node.java:9659)
        at com.sun.glass.ui.Accessible$GetAttribute.run(Accessible.java:142)
        at java.security.AccessController.doPrivileged(Native Method)
        at com.sun.glass.ui.Accessible.lambda$getAttribute$0(Accessible.java:169)
        at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:411)
        at com.sun.glass.ui.Accessible.getAttribute(Accessible.java:166)
        at com.sun.glass.ui.win.WinTextRangeProvider.getAttribute(WinTextRangeProvider.java:112)
        at com.sun.glass.ui.win.WinTextRangeProvider.ExpandToEnclosingUnit(WinTextRangeProvider.java:181)
        at com.sun.glass.ui.win.WinApplication._runLoop(Native Method)
        at com.sun.glass.ui.win.WinApplication.lambda$null$4(WinApplication.java:185)
        at java.lang.Thread.run(Unknown Source)

TextField
Exception in thread ""JavaFX Application Thread"" java.lang.IllegalArgumentException: offset out of bounds
    at sun.util.locale.provider.RuleBasedBreakIterator.checkOffset(RuleBasedBreakIterator.java:759)
    at sun.util.locale.provider.RuleBasedBreakIterator.isBoundary(RuleBasedBreakIterator.java:834)
    at com.sun.glass.ui.win.WinTextRangeProvider.isWordStart(WinTextRangeProvider.java:119)
    at com.sun.glass.ui.win.WinTextRangeProvider.ExpandToEnclosingUnit(WinTextRangeProvider.java:163)
    at com.sun.glass.ui.win.WinApplication._runLoop(Native Method)
    at com.sun.glass.ui.win.WinApplication.lambda$null$4(WinApplication.java:185)
    at java.lang.Thread.run(Thread.java:748)

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
I provided a standalone testcase. 

You can download it here: 
<link>

1) Start Programm
2) Start Narrator ( Win + Ctrl + Enter)
3) Remove last character will cause the exception. 

Hints: 
- Only removing the last character causes the exception



FREQUENCY : always


",,,,,,,,,,,JDK-8294811,JDK-8297440,JDK-8297485,JDK-8293115,JDK-8293418,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292340,JDK-8293795,,,,,,,,,,,"2022-04-04 00:36;pnarayanaswa;Main.java;https://bugs.openjdk.org/secure/attachment/98429/Main.java",,,,,,,,,,,,,,generic,,,,,,b27,8u40,,generic,,,,,"0|i2whkz:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7a09e639,,,,,,,,,"2022-04-04 00:36;pnarayanaswa;Checked with attached testcase in Windows 10, Issue is reproducible while using Narrator

Test Result:
=========
8u31: Pass
8u40: Fail
8u321: Fail
openjfx11: Fail
openjfx17: Fail
openjfx18: Fail
openjfx19ea4: Fail

repeating the same usecase without Narrator application, exception was not observed.;;;","2022-04-04 06:28;kcr;Since JavaFX accessibility was first added in 8u40, this is not a regression. The reason it ""worked"" in 8u31 is that JavaFX had no integration at all with a screen reader prior to 8u40.;;;","2022-04-07 06:02;arapte;Observed only with Narrator, not with VoiceOver or JAWS;;;","2022-07-28 04:29;kcr;I hit this bug today while doing some testing with Narrator. I think the fix might be as simple as this:

--- a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/win/WinTextRangeProvider.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/win/WinTextRangeProvider.java
@@ -114,7 +114,7 @@ class WinTextRangeProvider {

     private boolean isWordStart(BreakIterator bi, String text, int offset) {
         if (offset == 0) return true;
-        if (offset == text.length()) return true;
+        if (offset >= text.length()) return true;
         if (offset == BreakIterator.DONE) return true;
         return bi.isBoundary(offset) && Character.isLetterOrDigit(text.charAt(offset));
     }
;;;","2022-08-24 06:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/884
Date: 2022-08-24 13:50:32 +0000;;;","2022-08-29 06:40;dukebot;Changeset: 996eb84b
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2022-08-29 13:37:19 +0000
URL:       https://git.openjdk.org/jfx/commit/996eb84b9df484fc78527ded311e7aa06aec56da
;;;","2022-11-22 08:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/98
Date: 2022-11-22 16:03:53 +0000;;;","2022-11-22 10:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/117
Date: 2022-11-22 18:37:50 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Backport of 8183536 is incomplete,JDK-8284280,5071645,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,gpatil,gpatil,gpatil,2022-04-04 00:59,2022-04-12 22:49,2023-10-01 09:56,2022-04-04 01:48,8-pool,,,,,,,,,8u341,core-libs,,0,,,,,,,,,,,,,,,,,,,"Backport of 8183536 is missing some changes to the file

jdk/test/closed/java/rmi/server/RMIClassLoader/packageDefinition/PackageDefinitionsTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283814,,JDK-8183536,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,"0|i2wkmj:",9223372036854775807,b02,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error reporting crashes because missing ResourceMarks,JDK-8284274,5071637,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,stefank,stefank,2022-04-03 23:59,2022-04-13 23:04,2023-10-01 09:56,2022-04-13 07:50,repo-loom,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,"In Loom I've seen crashes like this:

R12=0x00000000d1d08f10 is an oop: 
[error occurred during error reporting (printing registers, top of stack, instructions near pc), id 0xe0000000, Internal Error (/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/33379539-c125-496e-86f3-b6c4ee310674/runs/32462260-aae6-43ab-91eb-c32e4b6e61c4/workspace/open/src/hotspot/share/memory/resourceArea.cpp:53)]

which happens because the thread doesn't have an active ResourceMark, it seems. resourceArea.cpp:53 is:
```
void ResourceArea::verify_has_resource_mark() {
  if (_nesting <= 0) {
    // Only report the first occurrence of an allocating thread that
    // is missing a ResourceMark, to avoid possible recursive errors
    // in error handling.
    static volatile bool reported = false;
    if (!Atomic::load(&reported)) {
      if (!Atomic::cmpxchg(&reported, false, true)) {
        fatal(""memory leak: allocating without ResourceMark"");
      }
    }
  }
}
```
If the first missing resource area is found during error reporting, wouldn't it just be better to not crash and continue hs_err printing?
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wkkr:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-11 17:51;coleenp;This really isn't specific to the loom repo.  We shouldn't have secondary asserts for missing ResourceMarks in error handling, as Stefan suggests above.;;;","2022-04-12 05:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8201
Date: 2022-04-12 12:01:15 +0000;;;","2022-04-13 07:50;dukebot;Changeset: e245f9d2
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-04-13 14:46:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e245f9d2007b0a6c9962b6bf4488ba4d4ce47e92
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Early crashes in os::print_context on AArch64,JDK-8284273,5071636,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gziemski,stefank,stefank,2022-04-03 23:56,2023-09-11 23:01,2023-10-01 09:56,2022-05-19 09:23,17,19,,,,,,,,19,hotspot,,0,amazon-interest,hs_err,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"In our error reporting we have two sections that print the registers:
```
  STEP(""printing register info"")

     // decode register contents if possible
     if (_verbose && _context && _thread && Universe::is_fully_initialized()) {
       ResourceMark rm(_thread);
       os::print_register_info(st, _context);
       st->cr();
     }

  STEP(""printing registers, top of stack, instructions near pc"")

     // registers, top of stack, instructions near pc
     if (_verbose && _context) {
       os::print_context(st, _context);
       st->cr();
     }
```
On Linux x64 we perform the risky print_location calls inside the first section, so if that crash it only skips the rest of the registers. The plain value printing is done in the second section. However, on Linux x64, this has been swapped, so if we crash in the second section, it skips printing the instruction hex dump and pc context.

This is unfortunate, since we often crash in the register printing.

One way to fix this would be to mimic the x64 printing. Another, which I think would be nicer, would be to split this into three sections:
1) Print the register values (Like Linux AArch64 does)
2) Print the decoded register values using the risky print_location
3) Print the rest of the context

Alternatively, fuse the proposed (1) and (2), and make it so that the safe printing of all registers comes before the unsafe printing.",,,,,,,,,,,JDK-8315806,JDK-8314639,JDK-8316082,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287037,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wkkj:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-05 11:20;mseledtsov;ILW = MLM = P4;;;","2022-05-06 05:35;gziemski;Draft PR https://github.com/openjdk/jdk/pull/8571;;;","2022-05-16 15:07;gziemski;New draft PR https://github.com/openjdk/jdk/pull/8736;;;","2022-05-18 14:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8736
Date: 2022-05-16 21:58:56 +0000;;;","2022-05-19 09:23;dukebot;Changeset: 83cec4b6
Author:    Gerard Ziemski <gziemski@openjdk.org>
Date:      2022-05-19 16:19:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/83cec4b6cc25b9b0db751bbe873444259cdcb21c
;;;","2023-08-16 06:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1669
Date: 2023-08-16 13:26:39 +0000;;;","2023-08-16 11:34;shade;Fix Request (17u)

Improves the resilience of crash reporting, and provide the grounds for other relevant backports in this area. Applies cleanly. Tests pass.;;;",,,,,,,,,,,,,,,,,,,,,,,
Remove java/lang/ref/ReferenceEnqueue.java from ProblemList-Xcomp.txt,JDK-8284236,5071604,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,lmesnik,lmesnik,2022-04-03 19:57,2023-02-14 02:44,2023-10-01 09:56,2023-02-01 12:29,21,,,,,,,,,21,core-libs,,0,noreg-self,,,,,,,,,,,,,,,,,,"Test java/lang/ref/ReferenceEnqueue.java  fails with 
java.lang.RuntimeException: Error: enqueue failed
	at ReferenceEnqueue$ExplicitEnqueue.run(ReferenceEnqueue.java:90)
	at ReferenceEnqueue.main(ReferenceEnqueue.java:39)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1532)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286368,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wkdf:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-04-03 19:59;lmesnik;Test fails with Xcomp only and with main wrapper enabled in loom repo. 
Looks like it is a test bug. The test fails in the line 50:
50:  if (ref.enqueue() == false) {
                    throw new RuntimeException(""Error: enqueue failed"");
                }

While it might be that ref is enqueued by GC already, at least at first glance.;;;","2023-01-31 14:18;lmesnik;Not reproduced after 1000 attempts in loom repo with wrapper so far.;;;","2023-02-01 10:50;mchung;Reopen this to remove this test from ProblemList-Xcomp.txt;;;","2023-02-01 11:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12371
Date: 2023-02-01 19:09:48 +0000;;;","2023-02-01 12:29;dukebot;Changeset: 51ac8783
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-02-01 20:27:20 +0000
URL:       https://git.openjdk.org/jdk/commit/51ac8783b951258cb05f899e1f84fdf1d184bc03
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/jvmti/vthread/InterruptThreadTest/InterruptThreadTest.java failing in loom repo,JDK-8284233,5071599,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,alanb,alanb,2022-04-03 08:45,2022-04-25 14:58,2023-10-01 09:56,2022-04-25 09:49,repo-loom,,,,,,,,,repo-loom,hotspot,,0,intermittent,noreg-self,,,,,,,,,,,,,,,,,"serviceability/jvmti/vthread/InterruptThreadTest/InterruptThreadTest.java fails periodically in the loom repo.

----------configuration:(0/0)----------
----------System.out:(4/118)----------
Agent_OnLoad started
Agent_OnLoad finished
testJvmtiFunctionsInJNICall: started
testJvmtiFunctionsInJNICall: finished
----------System.err:(12/758)----------
java.lang.RuntimeException: Failed: Virtual thread was not interrupted!
	at InterruptThreadTest.runTest(InterruptThreadTest.java:61)
	at InterruptThreadTest.main(InterruptThreadTest.java:74)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1532)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wkcb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-04-24 21:23;sspitsyn;The test has a lack of synchronization.
    final Runnable pinnedTask = () -> {
        synchronized (lock) {
            do {
                try {
                    lock.wait(1);                               <= This can be a short time to wait, so that it can return from wait without being interrupted !!!
                } catch (InterruptedException ie) {
                    System.err.println(""Virtual thread was interrupted as expected"");
                    iterrupted = true;
                }
            } while (!isJNITestingCompleted.get());
        }
    };

    void runTest() throws Exception {
        Thread vthread = Thread.ofVirtual().name(""VThread"").start(pinnedTask);
        testJvmtiFunctionsInJNICall(vthread);            <== This native call can interrupt target virtual thread before it reached the try statement with wait() call !!!
        isJNITestingCompleted.set(true);
        vthread.join();
        if (!iterrupted) {
            throw new RuntimeException(""Failed: Virtual thread was not interrupted!"");
        }
    }
;;;","2022-04-25 14:58;dholmes;I would think the issue is that the wait(1) can return normally before the target is interrupted. Then the target is interrupted and isJNITestingCompleted is set to true, then the loop will terminate without seeing the interrupt.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
TypeMirror#toString omits enclosing class names after JDK-8281238,JDK-8284220,5071579,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,cushon,cushon,cushon,2022-04-02 21:05,2022-08-08 11:27,2023-10-01 09:41,2022-05-04 13:28,19,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,"After the fix for https://bugs.openjdk.java.net/browse/JDK-8281238, TypeMirror#toString does not print the enclosing class name for static member classes with type annotations, e.g. it prints `java.util.@p.T.A Entry<?,?>` for `java.util.Map.Entry` (omitting the 'Map')

```
import java.util.Set;
import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;

@SupportedAnnotationTypes(""*"")
public class P extends AbstractProcessor {

  @Override
  public SourceVersion getSupportedSourceVersion() {
    return SourceVersion.latestSupported();
  }

  @Override
  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
    for (Element e : processingEnv.getElementUtils().getTypeElement(""p.T"").getEnclosedElements()) {
      if (e.getKind().equals(ElementKind.FIELD)) {
        processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, e.asType().toString());
      }
    }
    return false;
  }
}
```

```
package p;

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;
import java.util.Map.Entry;

class T {
  @Target(ElementType.TYPE_USE)
  @interface A {}

  @A Entry<?, ?> e;
}
```

$ javac -fullversion -processor P  T.java
javac full version ""18-ea+35-2085""
Note: @p.T.A java.util.Map.Entry<?,?>
Note: @p.T.A java.util.Map.Entry<?,?>

$ javac -fullversion -processor P  T.java
javac full version ""19-ea+15-942""
Note: java.util.@p.T.A Entry<?,?>
Note: java.util.@p.T.A Entry<?,?>",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,"0|i2wk7v:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2022-04-03 15:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8084
Date: 2022-04-03 22:22:06 +0000;;;","2022-05-04 13:28;dukebot;Changeset: 4d30a1e8
Author:    Liam Miller-Cushon <cushon@openjdk.org>
Date:      2022-05-04 20:25:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4d30a1e8d1587c63e85950b7a61439b5bf98c689
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Replace usages of 'a the' in xml,JDK-8284213,5071572,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-04-02 12:54,2022-05-25 23:05,2023-10-01 09:56,2022-05-24 04:39,8,,,,,,,,,19,xml,,0,cssn22_05_02,noreg-cleanup,sustaining,,,,,,,,,,,,,,,,"There are many typos where the indefinite and/or definite articles follow each other: ‘a the’, ‘a an’…",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284209,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wk6b:",9223372036854775807,b24,,,,,,,,,,,"2022-05-18 07:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8769
Date: 2022-05-18 13:58:22 +0000;;;","2022-05-24 04:39;dukebot;Changeset: 5974f5fe
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-05-24 11:34:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5974f5fed3ef888e8e64b1bf33793a7bcc4ca77c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Replace remaining usages of 'a the' in source code,JDK-8284209,5071565,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-04-02 09:16,2022-05-25 23:05,2023-10-01 09:56,2022-05-24 13:11,8,,,,,,,,,19,docs,,0,cssn22_04_01,cssn22_05_02,noreg-cleanup,sustaining,,,,,,,,,,,,,,,"Address remaining usages of ‘a the’ in source code.

I used the following regular expressions to search:
 • (?<!@param ?)\ba the\b
 • (?<!@param ?)\ba an\b
 • (?<!@param ?)\ban a\b

The most generic search: (?<!@param  ?)\b(?:[Tt]he|[Aa]n?) (?:the|an?)\b
However, it produces lots of false positives: A a is commonly used in tests.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284189,JDK-8284191,,,,,JDK-8284213,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wk4r:",9223372036854775807,b24,,,,,,,,,,,"2022-05-18 07:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8771
Date: 2022-05-18 14:46:42 +0000;;;","2022-05-24 13:11;dukebot;Changeset: 9b7e42c0
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-05-24 20:08:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9b7e42c0f078db778dda1011d85cd92e3e4eb979
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Replace usages of 'a the' in hotspot and java.base,JDK-8284191,5071542,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aivanov,aivanov,aivanov,2022-04-01 12:26,2022-05-25 23:05,2023-10-01 09:56,2022-05-24 04:26,14,8,,,,,,,,19,hotspot,,0,cssn22_04_01,cssn22_05_02,noreg-cleanup,sustaining,,,,,,,,,,,,,,,There are many typos where the indefinite and definite articles follow each other: ‘a the’.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284209,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wjzn:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11336cca,,,,,,,,,"2022-05-18 06:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8768
Date: 2022-05-18 13:27:24 +0000;;;","2022-05-24 04:26;dukebot;Changeset: e0d361ce
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-05-24 11:25:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e0d361cea91d3dd1450aece73f660b4abb7ce5fa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Replace usages of 'a the' in java.desktop,JDK-8284189,5071538,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-04-01 10:43,2022-05-17 08:51,2023-10-01 09:56,2022-04-21 12:14,8,,,,,,,,,19,client-libs,,0,cssn22_04_01,cssn22_04_02,javadoc,noreg-doc,sustaining,,,,,,,,,,,,,,"There are a number of typos where both two articles follow each other: ‘a the’ and ‘a an’.

javax.swing.JFileChooser#ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY
Identifies whether a the AcceptAllFileFilter is used or not.

java.awt.Graphics#fillPolygon(int[], int[], int)
@param xPoints   a an array of {@code x} coordinates.
@param nPoints   a the total number of points.

I came across one usage and then used the following regular expressions to search:
 • (?<!@param ?)\ban? the\b
 • (?<!@param ?)\ba an\b
 • (?<!@param ?)\ban a\b
 • (?<!@param  ?)\bthe an?\b

The most generic search: (?<!@param ?)\b(?:[Tt]he|[Aa]n?) (?:the|an?)\b
However, it produces lots of results. Yet it doesn't handle the situation where ‘the/an’ are separated with a line break.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284209,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wjyr:",9223372036854775807,b20,,,,,,,,,,,"2022-04-16 10:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8274
Date: 2022-04-16 17:45:16 +0000;;;","2022-04-21 12:14;dukebot;Changeset: ec4fb47b
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-04-21 19:12:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ec4fb47b90c9737dfdc285ebe98367a221c90c79
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Crash in GraphicsContextJava::drawLinesForText on https://us.yahoo.com/,JDK-8284184,5071532,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jbhaskar,kcr,kcr,2022-04-01 09:06,2022-05-05 23:08,2023-10-01 09:56,2022-04-07 05:52,8u341,jfx19,,,,,,,,jfx19,javafx,,0,crash,regression,regression_8280020,sn_115,,,,,,,,,,,,,,,"After the fix for JDK-8280020, we are seeing a consistently reproducible crash when browsing https://us.yahoo.com/

To reproduce this:

1. Run the following:
java HelloWebView https://us.yahoo.com/

2. Hover over the blue ""Yahoo!"" logo in the upper right of the page.

BUG: This will crash with the following stack track

Crashed Thread:        0  Dispatch queue: com.apple.main-thread

Exception Type:        EXC_BREAKPOINT (SIGTRAP)
Exception Codes:       0x0000000000000002, 0x0000000000000000
Exception Note:        EXC_CORPSE_NOTIFY

Termination Reason:    Namespace SIGNAL, Code 5 Trace/BPT trap: 5
Terminating Process:   exc handler [72034]

Thread 0 Crashed::  Dispatch queue: com.apple.main-thread
0   libjfxwebkit.dylib            	       0x13f7da955 WebCore::GraphicsContextJava::drawLinesForText(WebCore::FloatPoint const&, float, WTF::Vector<double, 0ul, WTF::CrashOnOverflow, 16ul, WTF::FastMalloc> const&, bool, bool, WebCore::StrokeStyle) + 453

See the attached crash report for a complete stack trace.

If I locally revert the fix for JDK-8280020, the crash doesn't occur.
",,,,,,,,,,,JDK-8284820,JDK-8285859,JDK-8285995,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280020,,,,,,,,,,,,"2022-04-01 09:05;kcr;drawLinesForText-crash-report.txt;https://bugs.openjdk.org/secure/attachment/98422/drawLinesForText-crash-report.txt",,,,,,,,,,,,,,,,,,,,b01,8u341,,,,,,,"0|i2wjxf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-04-02 01:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/765
Date: 2022-04-02 08:29:43 +0000;;;","2022-04-07 05:52;dukebot;Changeset: 64da125f
Author:    Jay Bhaskar <jbhaskar@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-04-07 12:50:36 +0000
URL:       https://git.openjdk.java.net/jfx/commit/64da125f05f2a25038ce3370c8fe7c0baf0a354b
;;;","2022-04-28 11:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/92
Date: 2022-04-28 18:12:41 +0000;;;","2022-05-02 04:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/51
Date: 2022-05-02 11:48:02 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
ArgumentsTest.set_numeric_flag_double_vm fails on some locales,JDK-8284181,5071527,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,stuefe,stuefe,2022-04-01 06:17,2022-04-20 11:14,2023-10-01 09:56,2022-04-04 13:10,19,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,"```
[----------] Global test environment set-up.
[----------] 1 test from ArgumentsTest
[ RUN      ] ArgumentsTest.set_numeric_flag_double_vm
/shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/runtime/test_arguments.cpp:599: Failure
Value of: ArgumentsTest::parse_argument(flag->name(), str)
  Actual: false
Expected: true
Valid string '1.e-2' did not parse for type double.
[  FAILED  ] ArgumentsTest.set_numeric_flag_double_vm (0 ms)
[----------] 1 test from ArgumentsTest (85 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (85 ms total)
[  PASSED  ] 0 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] ArgumentsTest.set_numeric_flag_double_vm

 1 FAILED TEST
ERROR: RUN_ALL_TESTS() failed. Error 1
```

Seems to be locale-dependent. I run with LC_NUMERIC=en_DK.UTF-8. Switching to LC_NUMERIC=""en_US.UTF-8"" makes the error disappear.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283013,JDK-8285279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wjwb:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-01 12:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8078
Date: 2022-04-01 19:00:01 +0000;;;","2022-04-04 13:10;dukebot;Changeset: e2970749
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-04-04 20:08:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e29707493e0e6752b82f6d6a6c67a47225490944
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Add ""make doctor"" to the make help",JDK-8284170,5071516,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-04-01 04:54,2022-04-07 00:00,2023-10-01 09:56,2022-04-04 14:47,19,,,,,,,,,19,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,"Include ""make doctor"" in the ""make help"" output. Also reorganize the help output slightly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wjtv:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-01 05:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8074
Date: 2022-04-01 11:55:15 +0000;;;","2022-04-04 14:47;dukebot;Changeset: 59fe31a0
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-04-04 21:43:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/59fe31a0900f6ae2cf3846d11b623e287b61bb43
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Replace deprecated alternateSelectedControlColor with selectedContentBackgroundColor,JDK-8284166,5071512,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2022-04-01 02:37,2022-04-13 23:02,2023-10-01 09:56,2022-04-07 02:15,17,18,19,,,,,,,19,client-libs,,0,sn_115,,,,,,,,,,,,,,,,,,alternateSelectedControlColor AppKit color property is deprecated and is needed to be replaced by selectedContentBackgroundColor,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2wjsz:",9223372036854775807,b18,,,,,,,,,,,"2022-04-01 02:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8071
Date: 2022-04-01 09:39:05 +0000;;;","2022-04-07 02:15;dukebot;Changeset: 19288654
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-04-07 09:11:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/192886546bf86c9a577b2dfaa4b33cb94799659b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Inline type elements of autobox cache should be casted to non-null,JDK-8284164,5071510,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2022-04-01 02:13,2023-02-22 06:23,2023-10-01 09:56,2023-02-22 06:23,repo-valhalla,,,,,,,,,repo-valhalla,hotspot,,0,c2,lw10,lworld,,,,,,,,,,,,,,,,JDK-8284159 modified the logic in TypeAryPtr::cast_to_autobox_cache to not cast inline type element types to non-null. We should fix that properly.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284159,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wjsj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-22 06:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/826
Date: 2023-02-22 13:54:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] C2 failures with migrated wrapper classes,JDK-8284159,5071505,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2022-04-01 01:57,2022-04-01 04:20,2023-10-01 09:56,2022-04-01 04:20,repo-valhalla,,,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,"We hit the following asserts in C2 when migrating wrapper classes like java.lang.Integer to value classes:

#  Internal Error (/valhalla/open/src/hotspot/share/opto/inlinetypenode.cpp:757), pid=3021298, tid=3021986
#  assert(!null_free || vt->as_InlineType()->is_default(&gvn) || init_ctl != kit->control() || !gvn.type(oop)->is_inlinetypeptr() || oop->is_Con() || oop->Opcode() == Op_InlineTypePtr || AllocateNode::Ideal_allocation(oop, &gvn) != __null || vt->as_InlineType()->is_loaded(&gvn) == oop) failed: inline type should be loaded
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (fastdebug build 19-lworld3ea-2022-03-30-1508533.fred...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-lworld3ea-2022-03-30-1508533.fred..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xf5f4da]  InlineTypeNode::make_from_oop(GraphKit*, Node*, ciInlineKlass*, bool)+0x9aa


narrowoop: java/lang/Integer:NotNull:exact *[int:256]:exact *
 k: <ciObjArrayKlass name=[Ljava/lang/Integer; ident=1291 address=0x00007fb214024c98>
ck: <ciFlatArrayKlass name=[Qjava/lang/Integer; ident=1294 address=0x00007fb214025880>
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/type.hpp:1367
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla/open/src/hotspot/share/opto/type.hpp:1367), pid=545168, tid=545176
#  assert(false) failed: unexpected TypeAryPtr::_klass
#
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284164,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wjrf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-01 02:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/677
Date: 2022-04-01 09:45:44 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FXLauncherTest.java fails on headless macOS,JDK-8284132,5071476,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,dbuck,dbuck,dbuck,2022-04-01 00:16,2022-07-11 13:00,2023-10-01 09:56,2022-04-01 16:52,8u331,,,,,,,,,8u341,tools,,0,sustaining,,,,,,,,,,,,,,,,,,"tools/launcher/FXLauncherTest.java fails when run on a headless macos system. It appears to have never been intended to run this way. When remotely run on a headless macos machine, it hangs until timeout.

This issue does not apply to JDK 11 or later as this test was rewritten to run without the ""real"" JavaFX and as a result runs fine headless.",mach5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8202553,INTJDK-7613243,JDK-8172782,,,,,,,,,,,,,,,,,,x86,,,,,,,,,os_x,,,,,"0|i2wjkz:",9223372036854775807,b02,,,,,,,,,Verified,,"2022-04-01 16:53;dbuck;Solution chosen was to simply add the ""@key headful"" jtreg tag.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[IR Framework] Compilation is not found due to rare safepoint while dumping PrintIdeal/PrintOptoAssembly,JDK-8284115,5071453,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,lmesnik,lmesnik,2022-03-31 16:43,2023-01-30 00:57,2023-10-01 09:56,2022-05-17 04:25,19,,,,,,,,,19,hotspot,,0,intermittent,ir-framework,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-19,tier3,,,,,,,,,,,,"Test
compiler/c2/irTests/DivLNodeIdealizationTests.java
fails with 
One or more @IR rules failed:

Failed IR Rules (1) of Methods (1)
----------------------------------
1) Method ""public long compiler.c2.irTests.DivLNodeIdealizationTests.retainDenominator(long,long)"":
   * Method was not compiled. Did you specify any compiler directives preventing a compilation or used a @Run method in STANDALONE mode? In the latter case, make sure to always trigger a C2 compilation by invoking the test enough times.
>>> Check stdout for compilation output of the failed methods


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.throwIfNoSafepointWhilePrinting(IRMatcher.java:91)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.reportFailures(IRMatcher.java:82)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.applyIRRules(IRMatcher.java:54)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.<init>(IRMatcher.java:43)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:702)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:671)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:324)
	at compiler.lib.ir_framework.TestFramework.run(TestFramework.java:210)
	at compiler.lib.ir_framework.TestFramework.run(TestFramework.java:199)
	at compiler.c2.irTests.DivLNodeIdealizationTests.main(DivLNodeIdealizationTests.java:37)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1532)
",,,,,,,,,,,JDK-8301328,JDK-8296876,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296852,,,,,,,,JDK-8271471,JDK-8267265,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2wjfv:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-07 07:17;dcubed;Here's a log file snippet from the jdk-19+18-1151-tier3 sightingOne or more @IR rules failed:

Failed IR Rules (1) of Methods (1)
----------------------------------
1) Method ""public long compiler.c2.irTests.DivLNodeIdealizationTests.retainDenominator(long,long)"":
   * Method was not compiled. Did you specify any compiler directives preventing a compilation or used a @Run method in STANDALONE mode? In the latter case, make sure to always trigger a C2 compilation by invoking the test enough times.
>>> Check stdout for compilation output of the failed methods


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.throwIfNoSafepointWhilePrinting(IRMatcher.java:91)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.reportFailures(IRMatcher.java:82)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.applyIRRules(IRMatcher.java:54)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.<init>(IRMatcher.java:43)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:702)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:671)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:324)
	at compiler.lib.ir_framework.TestFramework.run(TestFramework.java:210)
	at compiler.lib.ir_framework.TestFramework.run(TestFramework.java:199)
	at compiler.c2.irTests.DivLNodeIdealizationTests.main(DivLNodeIdealizationTests.java:37)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.: 

compiler/c2/irTests/DivLNodeIdealizationTests.java ;;;","2022-04-08 02:01;rcastanedalo;The test only seems to fail when run with the JVM flags ""-server -XX:-TieredCompilation"", as is done in tier 3.;;;","2022-04-08 02:02;rcastanedalo;ILW = failure due to test bug; intermittent, low-frequency failure on single platform in debug mode; run the test with default JVM configuration = MLM = P4;;;","2022-04-08 02:08;rcastanedalo;[~chagedorn] [~cslucas] This looks like either a bug in the tests or in the underlying IR test framework, any ideas?;;;","2022-04-08 03:29;chagedorn;I had a look at it and it seems to be another occurrence of safepoint interference while dumping the IR (see JDK-8271471).

In this case here, I've found that the ""<!-- safepoint while printing -->"" message was emitted when dumping the IR of a method. During this interruption, another test class method was enqueued for compilation which is logged to the hotspot_pid file. The HotSpotPidFileParser looks for these messages in order to find and correctly map the PrintIdeal and PrintOptoAssembly outputs. However, the HotSpotPidFileParser does not expect such a queuing message to be found inside a PrintIdeal/PrintOptoAssembly block and thus ignores it (only happens when safepointing on rare occasions). As a result, we later do not parser the PrintIdeal and PrintOptoAssembly output of the enqueued method during the safepoint and fail with the assertion above that we did not find any compilation output for the method.

Snippet of the hotspot_pid file:

# PrintIdeal output of retainDenominator()
3  Start  ===  3  0  [[ 3  5  6  7  8  9  13  11 ]]  #{0:control, 1:abIO, 2:memory, 3:rawptr:BotPTR, 4:return_address, 5:compiler/c2/irTests/DivLNodeIdealizationTests:NotNull *, 6:long, 7:half, 8:long, 9:half}
 36  CallStaticJava  ===  34  6  7  8  9 ( 35  1  1  1  1  1  26  1  27  1 ) [[ 37 ]] # Static uncommon_trap(reason=&apos;div0_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)  void ( int ) C=0.000100 DivLNodeIdealizationTests::retainDenominator @ bci:4 (line 130) !jvms: DivLNodeIdealizationTests::retainDenominator<!-- safepoint while printing -->

# Safepoint interruption
<writer thread='40451'/>

# Enqueuing of another test class method identityThird()
<task_queued compile_id='205' method='compiler.c2.irTests.DivLNodeIdealizationTests identityThird (JJ)J' bytes='6' count='6000' iicount='6000' blocking='1' stamp='1.046' comment='whitebox' hot_count='6000'/>
<writer thread='23811'/>
 @ bci:4 (line 130)

# Continue to dump PrintIdeal of retainDenominator()
 41  DivL  ===  33  26  13  [[ 42 ]]  !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:4 (line 130)
 9  Parm  ===  3  [[ 42  36 ]] ReturnAdr !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:-1 (line 130)

Later we fail with the assertion that we did not find the compilation output of identityThird().


The fix should be to make the HotSpotPidFileParser aware of the possibilty of a safepoint when reading the PrintIdeal and PrintOptoAssembly output and therefore add a check if there was a method enqueued for compilation wile reading inside BlockOutputReader::readBlock().

I'm going to be away the next three week and will therefore only have a chance to come back to this afterwards. But as this only seem to be happening rarely, it should probably be fine to postpone this fix until I'm back.;;;","2022-05-13 00:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8692
Date: 2022-05-13 07:45:18 +0000;;;","2022-05-17 04:25;dukebot;Changeset: 39842538
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-05-17 11:23:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/39842538004c5fca57701070484c78cacf95ed64
;;;","2023-01-24 12:10;goetz;
Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test infra change.
Clean backport.
SAP nightly testing passed.;;;","2023-01-24 12:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1109
Date: 2023-01-24 20:12:15 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Minor cleanup could be done in javax.crypto,JDK-8284112,5071449,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mpowers,mpowers,mpowers,2022-03-31 14:02,2022-04-20 23:29,2023-10-01 09:56,2022-04-18 16:50,,,,,,,,,,19,security-libs,,0,,,,,,,,,,,,,,,,,,,"JDK-8273046 is the umbrella bug for this bug. The changes were too large for a single code review, so it was decided to split JDK-8273046 into smaller chunks. This is one such chunk for files under open/src/java.base/share/classes/javax/crypto (javax.crypto).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273046,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wjez:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-03-31 14:22;rhalade;Linking this to JDK-8273046 for tracking. You could also consider to move this as a sub-task of JDK-8273046.;;;","2022-04-12 17:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8214
Date: 2022-04-12 21:59:09 +0000;;;","2022-04-18 16:50;dukebot;Changeset: 41fc0783
Author:    Mark Powers <mark.powers@oracle.com>
Committer: Bradford Wetmore <wetmore@openjdk.org>
Date:      2022-04-18 23:48:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/41fc07832300d224bb185b88ac4135b7e2b27cff
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitorThreadTest.java and HeapMonitorThreadDisabledTest crash with virtual threads,JDK-8284111,5071447,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rpressler,rpressler,rpressler,2022-03-31 13:20,2022-04-10 08:50,2023-10-01 09:56,2022-04-10 08:50,repo-loom,,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wjej:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-03-31 14:38;dcubed;Moving from hotspot/runtime -> hotspot/jvmti
since that's where the HeapMonitor stuff lives.;;;","2022-04-10 08:50;rpressler;Fixed.

https://git.openjdk.java.net/loom/commit/589141841f6eaa66cd889a4ae5a23cc24d99890f

https://git.openjdk.java.net/loom/commit/28feb8452f72b7b0ca9c33b2ad7d040c5a1686ef;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
AsVarargsCollector::asCollectorCache incorrectly marked @Stable,JDK-8284103,5071433,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,heidinga,heidinga,heidinga,2022-03-31 08:57,2022-04-06 23:59,2023-10-01 09:56,2022-04-01 05:51,19,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,"The AsVarargsCollector::asCollectorCache field is marked as `@Stable` but doesn't follow the contract for Stable fields.

The contract for Stable, as described in [1], states:
> A field may be annotated as stable if all of its component variables
> changes value at most once.
...
> Since all fields begin with a default value of null for references
> (resp., zero for primitives), it follows that this annotation indicates
> that the first non-null (resp., non-zero) value stored in the field
> will never be changed.

The AsVarargsCollector::asTypeUncached method updates the `asCollectorCache` field.

This was discovered by the OpenJ9 project while investigating a test issue in the CatchExceptionTest.java [2] test case related to the `getCatcher` method.

[1] https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/jdk/internal/vm/annotation/Stable.java
[2] https://github.com/openjdk/jdk/blob/master/test/jdk/java/lang/invoke/MethodHandles/CatchExceptionTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9,,,,,,,"0|i2wjbf:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2022-03-31 09:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8062
Date: 2022-03-31 16:03:02 +0000;;;","2022-03-31 14:29;jvernee;ILW = L (regression that is only affecting a corner case) M (when asTypeUncached is compiled, and a different arity new type is requested) L (disabling compilation of asTypeUncached can be used as workaround) = P5

Edit: upon closer inspection, I don't think this can break the specification. `acc` will be seen as constant, which means any updates to the cache will not be visible, and the slower path is taken instead. Downgrading impact to L gives P5;;;","2022-04-01 05:51;dukebot;Changeset: fc7a17c7
Author:    Dan Heidinga <heidinga@openjdk.org>
Committer: Jorn Vernee <jvernee@openjdk.org>
Date:      2022-04-01 12:50:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fc7a17c79b825feab56bdb31e086425bf5103cf3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] [11u] Retroactively add regression test for JDK-8272124,JDK-8284102,5071432,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,sgehwolf,sgehwolf,2022-03-31 08:34,2022-12-19 03:16,2023-10-01 09:56,2022-04-29 09:46,11.0.16,,,,,,,,,11.0.16,core-svc,,0,17-na,18-na,19-na,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,,,,,,,,,,,"This is a JDK 11u only bug as JDK-8272124 got backported to 11u, but without the regression test which is in JDK 17.0.2+

Since OpenJDK 11u will get the cgroups v2 patches backported to 11.0.16, we should add the test as relevant infrastructure will be there.

Getting the test added depends on JDK-8239559 and JDK-8254001 to be in 11u as well.",,,,,,,,,,,JDK-8299021,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8239559,JDK-8254001,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2wjb7:",9223372036854775807,b01,,,,,,,,,,,"2022-03-31 08:35;sgehwolf;https://github.com/openjdk/jdk/commit/4d6593ce0243457e7431a5990957a8f880e0a3fb#diff-56714e8f9b126ae2944f6afb93cd9d9a44d499a976c8ea7389e921e645823157 is the hunk to be added with this.;;;","2022-04-14 09:58;sgehwolf;Test correctly fails with this revert:
diff --git a/src/java.base/linux/classes/jdk/internal/platform/CgroupSubsystemFactory.java b/src/java.base/linux/classes/jdk/internal/platform/CgroupSubsystemFactory.java
index 0d8a5d181ac..931d0896079 100644
--- a/src/java.base/linux/classes/jdk/internal/platform/CgroupSubsystemFactory.java
+++ b/src/java.base/linux/classes/jdk/internal/platform/CgroupSubsystemFactory.java
@@ -194,10 +194,9 @@ public class CgroupSubsystemFactory {
             if (isCgroupsV2) {
                 action = (tokens -> setCgroupV2Path(infos, tokens));
             }
-            // The limit value of 3 is because /proc/self/cgroup contains three
-            // colon-separated tokens per line. The last token, cgroup path, might
-            // contain a ':'.
-            selfCgroupLines.map(line -> line.split("":"", 3)).forEach(action);
+            selfCgroupLines.map(line -> line.split("":""))
+                     .filter(tokens -> (tokens.length >= 3))
+                     .forEach(action);
         }

Passes with the fix. Branch:
https://github.com/jerboaa/jdk11u-dev/tree/jdk-8284102-add-reg-test;;;","2022-04-28 02:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1056
Date: 2022-04-28 09:37:44 +0000;;;","2022-04-28 10:35;sgehwolf;Fix Request (OpenJDK 11u):

This adds a regression test for JDK-8272124 backported in 11.0.13, but the test got dropped as required infra wasn't there (at the time). That has changed with the cgroups v2 backports. Should just add stability and will avoid potential regressions in that area. Test only change. Reviewed by Andrew Hughes. Test passes (and fails without the relevant fix). Depends on JDK-8254001 getting approved too, which is part of the cgroups v2 backport effort.;;;","2022-04-28 23:53;goetz;Hi [~sgehwolf], please add [11u] to the bug title. Thanks.;;;","2022-04-29 09:46;dukebot;Changeset: 245e2f2d
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-04-29 16:44:36 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/245e2f2da0302c9354255219248c2f6793947a6a
;;;","2022-05-04 01:25;dukebot;Changeset: 245e2f2d
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-04-29 16:44:36 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/245e2f2da0302c9354255219248c2f6793947a6a
;;;","2022-11-16 03:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/179
Date: 2022-11-16 11:05:10 +0000;;;","2022-12-19 02:01;jdowland;Fix request (8u)

Please consider this for 8u's cgroups v2 support. It's a test-only change. Not clean: needed  Files.writeString→write for jdk8u adjustment. Thanks;;;",,,,,,,,,,,,,,,,,,,,,
Fix broken links in gendocs directory in JDK 8u docs,JDK-8284100,5071430,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgallard,rgallard,rgallard,2022-03-31 07:19,2022-04-12 22:48,2023-10-01 09:56,2022-03-31 10:08,8u331,,,,,,,,,8u341,docs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wjar:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in invoker_completeInvokeRequest(),JDK-8284094,5071423,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rkennke,rkennke,rkennke,2022-03-31 06:09,2022-06-11 10:36,2023-10-01 09:56,2022-04-01 09:30,11,17,18,19,8,,,,,19,core-svc,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,redhat-interest,,,,,,,,,,,"In invoker.c in the function invoker_completeInvokeRequest(), we allocate a PacketOutputStream object called out using         outStream_initReply(), but never reclaim it. We need to call outStream_destroy() before going out of scope.",,,,,,,,,,,JDK-8287532,JDK-8287536,JDK-8287538,JDK-8287588,JDK-8288284,JDK-8288285,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wj97:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-03-31 06:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8059
Date: 2022-03-31 13:18:22 +0000;;;","2022-04-01 09:29;dukebot;Changeset: 1dfa1eae
Author:    Roman Kennke <rkennke@openjdk.org>
Date:      2022-04-01 16:28:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1dfa1eaea0c8958f4b793c0766e36607cbde5c7f
;;;","2022-05-23 08:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/134
Date: 2022-05-23 15:36:35 +0000;;;","2022-05-29 02:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/141
Date: 2022-05-29 09:26:19 +0000;;;","2022-05-29 06:41;andrew;Fix Request [18u]:

PR: https://github.com/openjdk/jdk18u/pull/141

This fixes a memory leak in the JDWP agent. It has baked in trunk for over a month and should now be safe enough to backport to stable releases.;;;","2022-05-29 07:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/422
Date: 2022-05-29 14:33:46 +0000;;;","2022-05-29 20:18;andrew;Fix Request [17u]:

PR: https://github.com/openjdk/jdk17u-dev/pull/422

This fixes a memory leak in the JDWP agent. It has baked in trunk for over a month and should now be safe enough to backport to stable releases. Backport is clean and tests pass (bar a couple of unrelated Windows langtools tests that appear to be failing in other PRs as well);;;","2022-05-30 07:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1116
Date: 2022-05-30 14:30:41 +0000;;;","2022-05-30 09:30;andrew;Fix Request [11u]:

PR: https://github.com/openjdk/jdk11u-dev/pull/1116

This fixes a memory leak in the JDWP agent. It has baked in trunk for over a month and should now be safe enough to backport to stable releases. Backport is clean and tests looked to be passing (complete on Linux so far);;;",,,,,,,,,,,,,,,,,,,,,
Memory leak: X11SD_DisposeXImage should also free obdata,JDK-8284093,5071422,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2022-03-31 06:01,2023-05-17 12:11,2023-10-01 09:56,2022-04-11 06:40,11,17,18,19,8,,,,,19,client-libs,,0,amazon-interest,redhat-interest,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2wj8z:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-03-31 06:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8060
Date: 2022-03-31 13:30:40 +0000;;;","2022-04-11 06:40;dukebot;Changeset: 205cfb84
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-04-11 13:36:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/205cfb84968fe93cbfe7d509e1e7d051ed05f97c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/security/auth/module/AllPlatforms.java fails to compile,JDK-8284090,5071417,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-03-31 04:11,2023-09-24 09:41,2023-10-01 09:56,2022-03-31 06:54,19,,,,,,,,,19,security-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,regression,tencent-interest,,,,,,,,,,,,,,"/jdk/test/jdk/com/sun/security/auth/module/AllPlatforms.java:71: error: cannot find symbol
        } catch (FailedLoginException e) {
                 ^
  symbol:   class FailedLoginException
  location: class AllPlatforms
1 error

TEST RESULT: Failed. Compilation failed: Compilation failed",,,,,,,,,,,JDK-8312714,JDK-8316800,JDK-8312336,JDK-8312537,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281717,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wj7v:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-03-31 04:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8057
Date: 2022-03-31 11:15:28 +0000;;;","2022-03-31 06:54;dukebot;Changeset: 77a205aa
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-03-31 13:51:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/77a205aa4cfe4892843f22dce63eb85789b4b321
;;;","2023-07-20 05:31;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Clean backport, included in JDK-8281717.
Test passes. SAP nightly testing passed.;;;","2023-07-20 05:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1606
Date: 2023-07-20 12:28:00 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Create an automated test for JDK-4170173,JDK-8284077,5071404,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-03-31 02:33,2022-08-03 18:05,2023-10-01 09:56,2022-04-27 11:19,11,17,18,19,8,,,,,19,client-libs,,0,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,"Create an automated test for JDK-4170173
Issue
JTextComponent.AccessibleJTextComponent.getAfterIndex(int part, int index) works incorrectly, when 'part' parameter is AccessibleText.WORD.
It returns a space ("" "") instead of the correct word.

The test verifies the fix for this behavior by checking the getAfterIndex for AccessibleText.CHARACTER,AccessibleText.WORD,AccessibleText.SENTENCE for the components JTextField, JTextArea, JEditorPane.

While working on this test case there was a related bug relevant to this JDK-4170174 which marked as duplicate but addresses a simlar but not identical issue.  
The issue described in JDK-4170174 indicates that JTextComponent.AccessibleJTextComponent.getBeforeIndex(int part, int index) works incorrectly, when part parameter is AccessibleText.WORD.
It returns a space ("" "") instead of correct word.

Hence an additional test was added for this, for verifying the behavior of getBeforeIndex.
This test verifies the fix for this behavior by checking the getBeforeIndex for AccessibleText.CHARACTER,AccessibleText.WORD,AccessibleText.SENTENCE for the components JTextField, JTextArea, JEditorPane.


The two tests have multiple distinct assertions. For this reason as well as maintainability of the tests the two were not clubbed into a single test. 
However, as the two tests are still similar in the functional flow of the code and the functionality they are testing as well - hence they have been clubbed into a single review. 
This review is for migrating tests from a closed test suite to open.

Testing:
The test ran successfully on Mach5 with multiple runs (30) on windows-x64, linux-x64 and macos-x64.
",,,,,,,,,,,JDK-8291849,JDK-8289662,JDK-8291837,JDK-8289700,JDK-8289666,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wj4z:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-04-07 00:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8138
Date: 2022-04-07 07:40:18 +0000;;;","2022-04-27 11:19;dukebot;Changeset: 6db2e16b
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-04-27 18:15:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6db2e16b948ccb78839285051e136b8a023b2f7b
;;;","2022-08-02 06:10;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.17,17.0.5-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nightly testing passes.;;;","2022-08-02 06:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/621
Date: 2022-08-02 13:15:20 +0000;;;","2022-08-02 06:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1304
Date: 2022-08-02 13:19:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
foreign/StdLibTest.java randomly crashes on MacOS/AArch64,JDK-8284072,5071398,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,ngasson,ngasson,ngasson,2022-03-31 01:55,2022-04-01 07:57,2023-10-01 09:56,2022-04-01 07:57,repo-panama,,,,,,,,,repo-panama,tools,,0,aarch64-related,foreign-abi,foreign-preview,,,,,,,,,,,,,,,,"Intermittent SIGBUS with the stack trace below. Looks like it's related to W^X.

Stack: [0x0000000171758000,0x000000017195b000],  sp=0x0000000171957ef0,  free space=2047k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x984f70]  MarkActivationClosure::do_code_blob(CodeBlob*)+0x3c
V  [libjvm.dylib+0x9bfb60]  JavaThread::nmethods_do(CodeBlobClosure*)+0xac
V  [libjvm.dylib+0x4669a8]  HandshakeState::process_by_self(bool)+0x31c
V  [libjvm.dylib+0x891230]  SafepointMechanism::process(JavaThread*, bool)+0xac
V  [libjvm.dylib+0x9f4df0]  UpcallLinker::on_entry(UpcallStub::FrameData*)+0xe0
v  blob 0x000000010e1ca4a8
C  [libsystem_c.dylib+0x5c284]  _isort+0x88
C  0x176d80010e0ca444
j  java.lang.invoke.LambdaForm$MH+0x0000000800c82000.invoke(Ljava/lang/Object;JJJJJ)V+16 java.base@19-internal",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2wj3n:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-04-01 02:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/674
Date: 2022-04-01 09:41:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: should call Atomic::release_store in JavaThread::set_thread_state,JDK-8284068,5071394,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fyang,fyang,fyang,2022-03-31 01:36,2023-07-09 19:10,2023-10-01 09:56,2022-04-01 19:47,19,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,"For RISCV, we use membars when accessing volatile _thread_state through Atomic::load_acquire in JavaThread::thread_state. 
Accordingly, we should use Atomic::release_store to access volatile _thread_state in JavaThread::set_thread_state for this architecture. 
This is correct for our JDK 11 version: both functions are guarded by a single-line macro check for architecures [1].

The code is refactored in JDK mainline: each function has their own macro check for architectures. 
But looks like we only kept the macro check for RISCV64 in JavaThread::thread_state when porting from JDK 11. 
The same check is missing for JavaThread::set_thread_state. We should add it back.

Simple fix:
diff --git a/src/hotspot/share/runtime/thread.inline.hpp b/src/hotspot/share/runtime/thread.inline.hpp
index 92dfdfa3dbe..ee7d48b8660 100644
--- a/src/hotspot/share/runtime/thread.inline.hpp
+++ b/src/hotspot/share/runtime/thread.inline.hpp
@@ -162,7 +162,7 @@ inline JavaThreadState JavaThread::thread_state() const    {
 inline void JavaThread::set_thread_state(JavaThreadState s) {
   assert(current_or_null() == NULL || current_or_null() == this,
          ""state change should only be called by the current thread"");
-#if defined(PPC64) || defined (AARCH64)
+#if defined(PPC64) || defined (AARCH64) || defined(RISCV64)
   // Use membars when accessing volatile _thread_state. See
   // Threads::create_vm() for size checks.
   Atomic::release_store((volatile jint*)&_thread_state, (jint)s);

[1] https://gitee.com/openeuler/bishengjdk-11/blob/risc-v/src/hotspot/share/runtime/thread.inline.hpp#L123 ",,,,,,,,,,,JDK-8311696,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276799,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,"0|i2wj2r:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-31 02:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8055
Date: 2022-03-31 08:55:47 +0000;;;","2022-04-01 19:47;dukebot;Changeset: e5e1aab4
Author:    Fei Yang <fyang@openjdk.org>
Date:      2022-04-02 02:46:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e5e1aab459cf620644e2c8a1056338bb82ce81c3
;;;","2023-06-19 20:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
jpackage'd launcher reports non-zero exit codes with error prompt,JDK-8284067,5071069,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,webbuggrp,webbuggrp,2022-03-28 04:28,2022-09-02 10:08,2023-10-01 09:56,2022-04-06 04:51,17,18,19,,,,,,,19,tools,,0,additional-information-received,dcsad,jdk17u-fix-request,jdk17u-fix-yes,regression,reproducer-yes,sn_115,webbug,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When the java application exits with a non-zero exit code, starting with JDK 17.0.2 this is reported by the .exe launcher generated by jpackage. This breaks applications that use exit codes to report results to their surrounding context.

This is a regression introduced by (seemingly left over debug code from) JDK-8272328

REGRESSION : Last worked in version 17

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
jpackage + run the attached program

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
app exits with status code 1
ACTUAL -
error prompt displays ""Child process exited with code 1""

---------- BEGIN SOURCE ----------
public static void main(String[] args) {
  System.exit(1);
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
export PATH=%PATH%;C:\path\to\installation\app

FREQUENCY : always


",,,,,,,,,,,JDK-8290948,JDK-8289940,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272328,,,,,,"2022-03-31 00:55;adev;ErrorMsg.png;https://bugs.openjdk.org/secure/attachment/98406/ErrorMsg.png","2022-03-31 00:54;adev;myjar.jar;https://bugs.openjdk.org/secure/attachment/98405/myjar.jar",,,,,,,,,,,,,x86_64,,,,,,b01,17.0.2,,windows,,,,,"0|i2wh2j:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-03-30 23:46;adev;Requested the submitter for the exact jpackage command used.;;;","2022-03-31 00:59;adev;This is a simple command to use-
jpackage --type app-image --input tgt --main-class Main --main-jar myjar.jar.

The launcher exits with the error message Child process exited with code 1.
Screenshot of the error message is attached.;;;","2022-03-31 01:04;adev;The issue is caused 17.0.2 onwards. It may be due to the backport of the fix https://bugs.openjdk.java.net/browse/JDK-8272328.
JDK 17 - pass:
JDK 17.0.2 onwards: fail;;;","2022-03-31 09:04;asemenyuk;Replace 
---
        if (exitCode != 0) {
            JP_THROW(tstrings::any() << ""Child process exited with code ""
                                                                << exitCode);
        }
---
in https://github.com/openjdk/jdk/blob/master/src/jdk.jpackage/windows/native/applauncher/WinLauncher.cpp with
---
        exit(exitCode);
---
This will mock jvm behavior.
;;;","2022-03-31 13:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8064
Date: 2022-03-31 20:08:13 +0000;;;","2022-04-06 04:51;dukebot;Changeset: b9cc3bc1
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2022-04-06 11:49:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b9cc3bc1bf61572f2813f057eea7326fd0c2bd14
;;;","2022-07-22 10:58;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Clean backport after backporting 8282007.
SAP nighlty testing passed.;;;","2022-07-22 11:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/593
Date: 2022-07-22 18:00:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Harmonize/Standardize the SSLSocket/SSLEngine/SSLSocketSSLEngine test templates,JDK-8284047,5071371,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdonovan,wetmore,wetmore,2022-03-30 18:04,2023-08-28 21:57,2023-10-01 09:56,2023-03-15 10:40,,,,,,,,,,21,security-libs,,0,noreg-self,sqe-starter-bug,testbug,,,,,,,,,,,,,,,,"The javax/net/ssl/templates were created to provide a simple testing framework for JSSE code that can focus testing on the code being changed instead of focusing on the overall test mechanism/framework itself  That is, reduce the amount of expected code change to the barest essentials that change from test/test.

Over the years, the templates have been updated quite significantly:

1.  They have switched from using a central binary keystore file to storing the key material in the test framework itself.
2.  Test classes are now expected to extend the Framework files rather than copy the entire template.  e.g. 

    public MyTest extends SSLEngine {...}

Unfortunately, we now have three completely different styles of tests, which really should be harmonized.

1.  SSLSocket.java:  has the largest collection of key material for all kinds of different test cases.  EC/RSA/DSA/ED25519/ED448/
 with different keylengths/curves/signatures.  

2. SSLEngineTemplate.java has a smaller collection of key material stored in SSLContextTemplate, and is the superclass of SSLEngineTemplate.

3.  SSLSocketSSLEngineTemplate uses the existing binary keystore which has just a few entries (5).  Tests directly copy this file, rather than extend it. 

These really should be harmonized so that tests all have the same functionality/keys, and the only thing different is the code to be tested.  

In addition, this should also incorporate JDK-8019776, which makes the JSSE Test Templates into a library that can be extended.  Some of the existing tests do that now:

./javax/net/ssl/FixingJavadocs/SSLSessionNulls.java
./sun/security/ssl/SSLSocketImpl/ReuseAddr.java
./sun/security/ssl/SSLContextImpl/MultipleChooseAlias.java

./sun/security/ssl/SignatureScheme/SigAlgosExtTestWithTLS12.java
./sun/security/ssl/SignatureScheme/SigSchemePropOrdering.java

I'm closing JDK-8019776 as a dup of this.",,,,,,,,,,,JDK-8315197,JDK-8314991,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8019776,,,,,,,,,,,JDK-8301194,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wixn:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2023-02-14 04:16;mdonovan;* Refactored SSLContextTemplate and SSLSocketTemplate to put common code in one base class (SSLContextTemplate)
* Updated TLS/SSL tests to extend SSLSocketTemplate where possible.
* Updated SSLEngineTemplate to accommodate changes in SSLContextTemplate. To keep this changeset to a reasonable size, updates to SSLEngine tests will be made under JDK-8301194.;;;","2023-02-14 04:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12555
Date: 2023-02-14 12:17:39 +0000;;;","2023-03-15 10:40;dukebot;Changeset: 824a5e4c
Author:    Matthew Donovan <matthew.p.donovan@oracle.com>
Committer: Rajan Halade <rhalade@openjdk.org>
Date:      2023-03-15 17:39:11 +0000
URL:       https://git.openjdk.org/jdk/commit/824a5e4c605d4aee55252bce5364fa01de525e1b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/jdi/MethodInvokeWithTraceOnTest.java failing with com.sun.jdi.ObjectCollectedException,JDK-8284043,5071367,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2022-03-30 15:07,2022-04-13 23:02,2023-10-01 09:56,2022-04-07 12:04,19,repo-loom,,,,,,,,19,core-svc,,0,noreg-self,,,,,,,,,,,,,,,,,,"In the loom repo I am seeing:

[JDI: Sending Command(id=168) JDWP.VirtualMachine.Dispose]
[JDI: Receiving Command(id=168) JDWP.VirtualMachine.Dispose]
[JDI: Target VM i/f closing event queues]
[JDI: Target VM interface thread exiting]
[JDI: Internal event handler exiting]
com.sun.jdi.ObjectCollectedException
	at jdk.jdi/com.sun.tools.jdi.JDWPException.toJDIException(JDWPException.java:56)
	at jdk.jdi/com.sun.tools.jdi.InvokableTypeImpl.invokeMethod(InvokableTypeImpl.java:117)
	at MethodInvokeWithTraceOnTest.testStaticMethod1(MethodInvokeWithTraceOnTest.java:146)
	at MethodInvokeWithTraceOnTest.testMethods(MethodInvokeWithTraceOnTest.java:122)
	at MethodInvokeWithTraceOnTest.runTests(MethodInvokeWithTraceOnTest.java:90)
	at TestScaffold.startTests(TestScaffold.java:432)
	at MethodInvokeWithTraceOnTest.main(MethodInvokeWithTraceOnTest.java:79)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1532)

The vthread wrapper is not involved. I've been seeing this in tier8 with -Xcomp related test tasks. However, I also noted some similar failures in ad-hoc jobs run using ZGC. Most likely it is a test bug because due to it not calling ObjectRerefence.disableGarbageCollection() on the object, and a GC is triggered that frees the object.

Reproduced with the following two sets of JVM options:

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:+VerifyOops
-XX:+CreateCoredumpOnCrash -XX:+UseZGC --enable-preview -XX:+ZVerifyViews -XX:ZCollectionInterval=0.01",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wiwr:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-03-30 21:06;cjplummer;The bug is pretty obvious:

        StringReference stringObj = vm().mirrorOf(""test string"");
        ...
        classType.invokeMethod(thread, printMethod, Collections.singletonList(stringObj), invokeOptions);

Need a disableCollection() on stringObj since threads are resumed during the invoke, allowing it to be collected.;;;","2022-03-30 21:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8052
Date: 2022-03-31 04:09:55 +0000;;;","2022-04-07 12:04;dukebot;Changeset: e98c32d6
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-04-07 19:01:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e98c32d6b6621f00b82089c8a92913234e6abe5c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Allow 'super()' calls in ""empty"" constructors",JDK-8284040,5071364,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,dlsmith,dlsmith,2022-03-30 14:49,2022-04-04 01:45,2023-10-01 09:56,2022-04-04 01:45,repo-valhalla,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,"This fails to compile:

class AbstractSuper {
    
    static abstract class Sup {
        Sup() { super(); }
    }
        
    value class Sub extends Sup {
    }
    
}

Removing 'super()' fixes it.

It's common to write code in this style (see java.lang.Number, for example), so we should allow the 'super' call in the ""empty"" constructor, as long as it has no argument expressions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wiw3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-04-04 01:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/680
Date: 2022-04-04 08:38:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Snippet-files subdirectory not automatically detected when in unnamed package,JDK-8284037,5071361,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,bkorando,bkorando,2022-03-30 14:32,2022-05-25 23:16,2023-10-01 09:56,2022-05-25 10:44,,,,,,,,,,19,tools,,0,javadoc-snippets,,,,,,,,,,,,,,,,,,"When the snippet-files folder is located in the default package, the javadoc tool will not automatically detect it, and will return ""file not found"" for any referenced snippets located in the folder. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wivf:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-03-30 15:34;jjg;external snippets are located using source path (or snippet path) and IIRC, we don't look up files in the unnamed package on the source path (have to check).

If generally files in the unnamed package are found on the source path, we have to find and fix this for snippet files.
If generally files in the unnamed package are not found on the source path, we should detect and report/error this situation.
;;;","2022-05-13 12:45;jjg;When looking for the file in the file manager, ""<Unnamed>"" is being used instead of an empty string ("""") for the unnamed package.;;;","2022-05-13 15:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8708
Date: 2022-05-13 21:51:32 +0000;;;","2022-05-13 15:38;jjg;Two comments of note.

1. There is a default source path of effectively the current directory (""."") but it is hard to encourage or recommend that anyone write and build even toy programs in the current directory.

2. Until the arrival of the module system, and only when using the module system, there has never been any constraint on the organization of files provided explicitly on the command-line. So there is no way to infer any common root source directory for those files, and thus maybe infer a source path and/or location for snippet-files. Directly related to that, there is no API in the file manager to determine the location of one file relative to another without knowing an enclosing ""Location"" (file-manager speak for a path, like a source path or class path.)  Any time a file is to be read that has not been provided on the command line, you have to specify an appropriate path.  I note that the error message related to this issue has been enhanced to mention the source path or snippet path, as a hint on how to fix the issue.     

(The comment about the modular system is that when compiling multiple modules, module membership is determined by the module-info.java in the enclosing package-root directory ... thus requiring that source files conform to the layout of a standard package hierarchy.);;;","2022-05-25 10:44;dukebot;Changeset: f786e2a2
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-05-25 17:41:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f786e2a22fca7c9785b2daa5667271f418c414f4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Leak XVisualInfo in getAllConfigs in awt_GraphicsEnv.c,JDK-8284033,5071357,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2022-03-30 13:57,2022-09-02 08:20,2023-10-01 09:56,2022-04-04 17:40,11,17,18,19,8,,,,,19,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,noreg-hard,redhat-interest,,,,,,,,,,Leak pVITrue in getAllConfig(),,,,,,,,,,,JDK-8285584,JDK-8287279,JDK-8285585,JDK-8287280,JDK-8285583,JDK-8293249,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2wiuj:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-03-30 17:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8050
Date: 2022-03-31 00:09:48 +0000;;;","2022-04-04 17:40;dukebot;Changeset: 36b3bbc5
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-04-05 00:39:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/36b3bbc53de074647ce04de890dc99bd5a2373e8
;;;","2022-04-21 04:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/104
Date: 2022-04-21 11:29:32 +0000;;;","2022-04-21 04:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/354
Date: 2022-04-21 11:30:08 +0000;;;","2022-04-21 04:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1037
Date: 2022-04-21 11:32:35 +0000;;;","2022-04-21 04:40;zgu;Fix Request (18u)

A clean, low risk backport that fixes a memory leak.;;;","2022-04-21 04:40;zgu;Fix Request (17u)

A clean, low risk backport that fixes a memory leak.;;;","2022-04-22 04:47;zgu;Fix Request (11u)

I would like to backport this low risk patch to 11u, it fixes a memory leak.

The original patch does not apply cleanly, but patch is small and straight forward, applied manually.
;;;",,,,,,,,,,,,,,,,,,,,,,
"Fix broken links in rest of directories in guides, samples, and tools in JDK 8u docs",JDK-8284032,5071356,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgallard,rgallard,rgallard,2022-03-30 13:38,2022-04-12 22:48,2023-10-01 09:56,2022-03-31 06:14,8u311,,,,,,,,,8u341,docs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wiub:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
vmTestbase/nsk/jvmti/GetAllThreads/allthr001/ is failing,JDK-8284027,5071351,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,cjplummer,cjplummer,2022-03-30 11:51,2023-01-26 21:03,2023-10-01 09:56,2022-05-05 12:46,repo-loom,,,,,,,,,19,hotspot,,0,loom,noreg-self,wrapper,,,,,,,,,,,,,,,,"----------System.out:(5/214)----------
# Waiting time = 5 mins
Point 1: number of threads expected: 8, got: 9
Point 2: number of threads expected: 9, got: 10
Point 3: number of threads expected: 8, got: 9
Point 4: number of threads expected: 9, got: 10

The cause seems to be the changes in the following commit, which reworked how/when carrier threads are created:

https://github.com/openjdk/loom/commit/d528caa6c9b961f399362d66c65aafb339751c4f

The end result is carrier threads are still being created while the test is running, so it ends up with an unexpected extra thread. The test uses isThreadExpected() to filter out unexpected thread creations, but it currently does not filter out carrier threads. I tried fixing it to do so, but that causes the following two tests to fail due to JDK-8284028:

vmTestbase/nsk/jvmti/scenarios/jni_interception/JI03/ji03t003/TestDescription.java	
vmTestbase/nsk/jvmti/scenarios/jni_interception/JI01/ji01t001/TestDescription.java	

So the fix is on hold until that bug is fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284028,,,,,,,,,,,,JDK-8298979,,,,,,JDK-8218812,JDK-8297083,JDK-8301208,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wit7:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-03-30 12:32;cjplummer;The following diff fixes the issue, but can't be pushed until JDK-8284028 is resolved:

diff --git a/test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/jvmti_tools.cpp b/test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/jvmti_tools.cpp
index fae205bd86e..0ce0fe06508 100644
--- a/test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/jvmti_tools.cpp
+++ b/test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/jvmti_tools.cpp
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2022, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -587,7 +587,11 @@ int isThreadExpected(jvmtiEnv *jvmti, jthread thread) {
     static const char *graal_management_bean_registration_thread_name =
                                             ""HotSpotGraalManagement Bean Registration"";
     static const char *graal_compiler_thread_name_prefix = ""JVMCI CompilerThread"";
-    static const size_t prefixLength = strlen(graal_compiler_thread_name_prefix);
+    static const size_t graal_compiler_thread_name_prefix_length =
+      strlen(graal_compiler_thread_name_prefix);
+    static const char *forkjoinpool_thread_name_prefix = ""ForkJoinPool"";
+    static const size_t forkjoinpool_thread_name_prefix_length =
+      strlen(forkjoinpool_thread_name_prefix);
 
     jvmtiThreadInfo threadinfo;
     NSK_JVMTI_VERIFY(jvmti->GetThreadInfo(thread, &threadinfo));
@@ -601,9 +605,15 @@ int isThreadExpected(jvmtiEnv *jvmti, jthread thread) {
     if (strcmp(threadinfo.name, graal_management_bean_registration_thread_name) == 0)
         return 0;
 
-    if ((strlen(threadinfo.name) > prefixLength) &&
-         strncmp(threadinfo.name, graal_compiler_thread_name_prefix, prefixLength) == 0)
+    if ((strlen(threadinfo.name) > graal_compiler_thread_name_prefix_length) &&
+         strncmp(threadinfo.name, graal_compiler_thread_name_prefix,
+                 graal_compiler_thread_name_prefix_length) == 0)
         return 0;
+    if ((strlen(threadinfo.name) > forkjoinpool_thread_name_prefix_length) &&
+         strncmp(threadinfo.name, forkjoinpool_thread_name_prefix,
+                 forkjoinpool_thread_name_prefix_length) == 0)
+        return 0;
+    nsk_printf(""isThreadExpected: yes\n"");
 
     return 1;
 }
;;;","2022-04-29 16:23;amenkov;The test counts all ""system"" threads before the execution and expects that this number remains the same during test execution.
This makes the test fragile - JVM may start internal threads, some threads may end (like UT thread).

I think this strong condition should be removed.
The test should checks only test threads, and verify that the live threads are reported by GetAllThreads and terminated threads are not reported.;;;","2022-05-02 16:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8512
Date: 2022-05-02 23:20:52 +0000;;;","2022-05-05 12:46;dukebot;Changeset: 1bba6407
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2022-05-05 19:41:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1bba64070e03ae3e047dc70dca75caeb49813908
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Use unmodifiable collections where practical,JDK-8284026,5071350,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-03-30 11:11,2022-04-21 03:39,2023-10-01 09:56,2022-03-31 08:26,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,"Use factory methods from List, Set and Map added in JEP 269 instead of similar methods of Collections.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285363,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wisz:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-03-30 15:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8046
Date: 2022-03-30 18:26:11 +0000;;;","2022-03-31 08:26;dukebot;Changeset: 73cb922b
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-03-31 15:23:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/73cb922bfc13a00bd1e07a41c6971ae7e1ac7005
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.sun.awt.X11GraphicsDevice.getDoubleBufferVisuals() leaks XdbeScreenVisualInfo,JDK-8284023,5071347,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2022-03-30 10:18,2023-01-02 03:46,2023-10-01 09:56,2022-04-06 05:54,11,17,18,19,8,,,,,19,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,redhat-interest,,,,,,,,,,,,,,,,,,,,,,JDK-8286150,JDK-8287278,JDK-8286151,JDK-8286251,JDK-8296902,JDK-8296325,JDK-8299455,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296917,JDK-8285399,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2wisb:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-03-30 12:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8047
Date: 2022-03-30 19:13:24 +0000;;;","2022-04-06 05:54;dukebot;Changeset: ec205f68
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-04-06 12:50:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ec205f68a883cef6b98f26a06baf675f7da26928
;;;","2022-04-22 05:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/105
Date: 2022-04-22 12:45:51 +0000;;;","2022-04-22 05:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/355
Date: 2022-04-22 12:46:36 +0000;;;","2022-04-22 05:54;zgu;Fix Request (18u)

A clean and low risk backport to fix a memory leak.
;;;","2022-04-22 05:54;zgu;Fix Request (17u)

A clean and low risk backport to fix a memory leak.;;;","2022-04-25 05:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1041
Date: 2022-04-22 19:09:31 +0000;;;","2022-12-31 08:59;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Low risk, simple fix in awt coding.  Requires follow-up.
I had to do trivial resolve, recognized as clean anyways.
SAP nighlty testing passed.;;;","2022-12-31 09:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1623
Date: 2022-12-31 16:57:14 +0000;;;",,,,,,,,,,,,,,,,,,,,,
"Fix broken links in 2d, beans, concurrency, extensions, instrumentation, io, jar, javac, javadoc, and javaws directories in JDK 8u docs",JDK-8284020,5071342,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgallard,rgallard,rgallard,2022-03-30 08:45,2022-04-12 22:48,2023-10-01 09:56,2022-03-30 13:30,8u311,,,,,,,,,8u341,docs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wir7:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Constructor::newInstance on abstract Object class throws InstantiationException,JDK-8284019,5071341,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mchung,fparain,fparain,2022-03-30 08:43,2022-04-04 10:23,2023-10-01 09:56,2022-04-04 10:23,repo-valhalla,,,,,,,,,repo-valhalla,core-libs,,0,lworld,,,,,,,,,,,,,,,,,,"JDK-8283573 made j.l.Object an abstract class. In order to prevent breaking existing code, the javac and the JVM perform intercept attempts to instantiate j.l.Object and substitute the Object with the java.lang.Identity class.

Currently, when asking the Reflection API for an accessor to a the constructor of j.l.Object, the instance being returned is an InstantiationExceptionConstructorAccessorImpl. Instances of this class throw an InstantiationException on any attempt to instantiate the class they provide access to.

To align the behavior of the Reflection API with the new semantic of the 'new' bytecode, the API should perform the same class substitution as the VM does.

An example of the issue can be see in test java/beans/Introspector/OverriddenGenericSetter.java which fails with the following stack trace:

java.lang.InstantiationException
	at java.base/jdk.internal.reflect.InstantiationExceptionConstructorAccessorImpl.newInstance(InstantiationExceptionConstructorAccessorImpl.java:48)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:484)
	at OverriddenGenericSetter.testBehaviour(OverriddenGenericSetter.java:85)
	at OverriddenGenericSetter.main(OverriddenGenericSetter.java:65)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.InstantiationException
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wiqz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2022-04-01 15:42;mchung;The implementation of Constructor::newInstance throws InstantiationException for any abstract class.   Object.class should special case such that the Identity instance will be constructed instance but create DirectConstructorHandleAccessor instead of InstantiationExceptionConstructorAccessorImpl.  The method handle accessor for Object constructor returns an Identity instance as expected.;;;","2022-04-01 15:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/679
Date: 2022-04-01 22:53:13 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Menu items with submenus in JPopupMenu are not spoken on macOS,JDK-8284014,5071334,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenov,asemenov,asemenov,2022-03-30 07:38,2023-06-14 09:06,2023-10-01 09:56,2022-04-06 02:37,11,17,18,19,,,,,,19,client-libs,,0,a11y,accessibility,amazon-interest,cssn22_07_01,jdk11u-a11y-defer,jdk17u-fix-request,jdk17u-fix-yes,macos,vpat,vpat-17u,,,,,,,,,"If the JPopupMenu has menu items with submenus, those items are not spoken by VoiceOver.",,,,,,,,,,,JDK-8289718,JDK-8288739,JDK-8290443,JDK-8288664,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2wipf:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-03-30 08:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8043
Date: 2022-03-30 15:24:17 +0000;;;","2022-04-06 02:37;dukebot;Changeset: e18414a3
Author:    Artem Semenov <asemenov@openjdk.org>
Date:      2022-04-06 09:29:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e18414a322f0814c120bcdd415ebd7bd34949633
;;;","2022-07-14 08:45;goetz;
Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Clean backport.
SAP nightly testing passed.;;;","2022-07-14 08:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/553
Date: 2022-07-14 15:48:50 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] sun/reflect/ReflectionFactory/ReflectionFactoryTest.java fails after JDK-8283573 ,JDK-8284000,5071318,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mchung,fparain,fparain,2022-03-30 05:43,2022-03-30 17:56,2023-10-01 09:56,2022-03-30 17:56,repo-valhalla,,,,,,,,,,core-libs,,0,lworld,,,,,,,,,,,,,,,,,,"sun/reflect/ReflectionFactory/ReflectionFactoryTest.java test started to systematically fail after integration of JDK-8283573 with the following stack trace:

test ReflectionFactoryTest.testConstructor(class java.lang.Object): failure
java.lang.AssertionError: Instance is wrong type expected [class java.lang.Object] but found [class java.lang.Identity]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at ReflectionFactoryTest.testConstructor(ReflectionFactoryTest.java:91)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wilv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2022-03-30 12:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/674
Date: 2022-03-30 19:19:02 +0000;;;","2022-03-30 12:26;mchung;A simple fix to the test to check that Class::newInstance returns an Identity instance instead.

We need to follow up if sun.reflect.ReflectionFactory needs to be updated. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: RVC: Fix c_beqz to c_bnez,JDK-8283937,5071254,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xlinzheng,xlinzheng,xlinzheng,2022-03-30 02:11,2022-03-30 21:34,2023-10-01 09:56,2022-03-30 03:05,19,,,,,,,,,19,hotspot,,0,oracle-triage-19,,,,,,,,,,,,,,,,,,"This patch fixes a typo introduced in JDK-8278994: `c_bnez` is mistakenly written to `c_beqz`, though not used until now, needing a fix for future usage.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276799,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,19,,linux,,,,,"0|i2wi7n:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-30 02:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8034
Date: 2022-03-30 09:17:14 +0000;;;","2022-03-30 03:05;dukebot;Changeset: 720e751f
Author:    Xiaolin Zheng <xlinzheng@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2022-03-30 10:01:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/720e751f35150251cab05bc9fca3add39daf70af
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Parallel: Crash during pretouch after large pages allocation failure,JDK-8283935,5071251,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,shade,shade,2022-03-30 01:53,2023-01-17 09:43,2023-10-01 09:56,2022-04-06 01:04,18,19,,,,,,,,19,hotspot,,0,gc-parallel,large-pages,noreg-hard,regression,,,,,,,,,,,,,,,"Seen this in many configurations in current testing:

$ build/linux-x86_64-server-fastdebug/images/jdk/bin/java -XX:+AlwaysPreTouch -Xmx2g -XX:+UseLargePages -XX:LargePageSizeInBytes=1g -XX:+UseParallelGC
OpenJDK 64-Bit Server VM warning: Failed to reserve and commit memory. req_addr: 0x0000000080000000 bytes: 2147483648 page size: 1073741824 (errno = 12).
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f7f557f7cda, pid=3987099, tid=3987101
#
# JRE version:  (19.0) (fastdebug build )
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal+0-adhoc.shade.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1600cda]  os::pretouch_memory(void*, void*, unsigned long)+0x1ea

Bisection points to JDK-8272807.

I believe this is due to LargePages allocation failure. The new pretouching code still rounds down to still-large page size, which touches memory out of heap bounds. This looks to be a problem with Parallel GC (and maybe others), not G1.

See, adding this assert:

    for ( ; true; cur += page_size) {
      assert(cur >= start, ""sanity: "" PTR_FORMAT "" in "" PTR_FORMAT "" ... "" PTR_FORMAT, p2i(cur), p2i(start), p2i(end));
      Atomic::add(reinterpret_cast<int*>(cur), 0, memory_order_relaxed);
      if (cur >= last) break;
    }

...crashes with:

#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/runtime/os.cpp:1766), pid=4062942, tid=4062944
#  assert(cur >= start) failed: sanity: 0x00000000c0000000 in 0x00000000d5600000 ... 0x00000000f5800000
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8259496,,,,,JDK-8272807,JDK-8298642,,,,,JDK-8259496,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wi6z:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-03-31 15:19;kbarrett;I'm not sure how to reproduce this (is it sufficient to just request large pages even though there aren't any?  I'll try that.), but it seems like the problem here might be the caller passing the wrong page size to pretouch. If the caller only allocated small pages starting around ""start"", but tells pretouch the page size is large and ""start"" is in the middle of a large page, well, that's lying to pretouch.  An hs_err file or stack trace to give more context might help.
;;;","2022-03-31 22:39;kbarrett;That's exactly what's happening. The caller of pretouch_memory is passing in the 1G page_size from -XX:LargePageSizeInBytes, even though the page size that was actually used is something smaller.  pretouch_memory could be more defensive and avoid this crash, but it seems wrong that it should need to.  And if it was more careful about the boundaries then it would end up only touching every page_size_arg / page_size_actual pages.
;;;","2022-03-31 23:14;kbarrett;When reserving the heap (via a ReservedSpace object), if large page allocation fails then it falls back to the default page size.  The actual page size used is recorded in the ReservedSpace object.

But when ParallelGC uses the ReservedSpace object to initialize its generations, it doesn't use the page_size from the ReservedSpace object.  Instead it directly checks UseLargePages and the corresponding page size.  That's wrong; it should be getting the page size from the ReservedSpace.

Spot-checking other collectors, I think they are properly getting the actual page size for the heap from a ReservedSpace object.
;;;","2022-04-04 01:55;tschatzl;Some more reproduction details:

$ java -XX:+AlwaysPreTouch -Xms2g -Xmx2g -XX:+UseLargePages -XX:LargePageSizeInBytes=1g -Xlog:pagesize,gc+heap=debug  -XX:+UseParallelGC Hello

With no 1g large pages allocated, but a few 2m pages (less than heap size; i.e. needed).

If there are enough 2m pages available, the wrong rounding presented above works out to not crash as the heap is aligned properly (by chance); this may be an artifact of the machine used though.;;;","2022-04-04 01:55;tschatzl;Other collectors are fine, this includes parallel gc in a NUMA setup. As indicated by the related bug, this is a JDK 19 issue only (verified).;;;","2022-04-04 04:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8090
Date: 2022-04-04 11:07:09 +0000;;;","2022-04-06 01:04;dukebot;Changeset: b56df280
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-04-06 08:01:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b56df2808d79dcc1e2d954fe38dd84228c683e8b
;;;","2022-04-08 16:31;kbarrett;It seems the problem with Parallel using the wrong page size in some places is already known: JDK-8259496.
;;;",,,,,,,,,,,,,,,,,,,,,,
DEFAULT_PROMOTED_VERSION_PRE not reset to 'ea' for jdk-17.0.4,JDK-8283911,5071222,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,andrew,andrew,andrew,2022-03-29 20:17,2022-08-03 15:37,2023-10-01 09:56,2022-07-27 10:06,17.0.4,17.0.5,,,,,,,,17.0.5,infrastructure,,0,18-na,19-na,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"Following JDK-8282499 (and also JDK-8278822, but it's a little late to correct for this now), DEFAULT_PROMOTED_VERSION_PRE was not reset to 'ea' to match the pre-release state of 17.0.4.

This value is not currently used by configure, but we have started to use it ourselves (as discussed on JDK-8259794) and so it would be good to have the value correct.

On jdk17u-dev, it should always be 'ea'. It will need to be set empty again just before the '-ga' tag on jdk17u, but that change can be reverted on merge into jdk17u-dev.

It also seems that JDK-8223464 has been backported to 11u, so it would be good if the value was maintained there too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287017,JDK-8223464,JDK-8282499,,,,JDK-8269415,,,,,,,,,,,,,,,,,,,,generic,,,,,,b01,17.0.4,,generic,,,,,"0|i2wi0j:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@271b8dfc,,,,,,,,,"2022-03-29 20:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/307
Date: 2022-03-30 03:24:53 +0000;;;","2022-07-26 12:18;andrew;Fix Request [17u]:

11u-dev should at least default to 'ea'.

Whether it gets removed on 11u for the release, I leave to the release maintainers.;;;","2022-07-27 10:06;dukebot;Changeset: 98f6737e
Author:    Andrew John Hughes <andrew@openjdk.org>
Date:      2022-07-27 17:04:34 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/98f6737e83195525f9857bc32716992f7a3eba68
;;;","2022-08-03 15:37;dukebot;Changeset: 98f6737e
Author:    Andrew John Hughes <andrew@openjdk.org>
Date:      2022-07-27 17:04:34 +0000
URL:       https://git.openjdk.org/jdk17u/commit/98f6737e83195525f9857bc32716992f7a3eba68
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Fix Huawei copyright in various files,JDK-8283907,5071218,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fyang,fyang,fyang,2022-03-29 19:17,2022-04-06 23:57,2023-10-01 09:56,2022-03-30 17:48,19,,,,,,,,,19,infrastructure,,0,,,,,,,,,,,,,,,,,,,"Correct company name should be: Huawei Technologies Co., Ltd.

Company name in copyright header for following files is not accurate (the comma is missing):

src/hotspot/share/gc/g1/g1EvacFailureRegions.cpp
src/hotspot/share/gc/g1/g1EvacFailureRegions.hpp
src/hotspot/share/gc/g1/g1EvacFailureRegions.inline.hpp
src/hotspot/share/gc/g1/g1SegmentedArray.hpp
src/hotspot/share/gc/g1/g1SegmentedArray.inline.hpp
test/hotspot/jtreg/compiler/intrinsics/math/MaxMinOptimizeTest.java
test/hotspot/jtreg/compiler/vectorapi/TestLoopStoreVector.java
test/hotspot/jtreg/compiler/vectorapi/TestVectorInsertByte.java
test/hotspot/jtreg/compiler/vectorapi/TestVectorShuffleIota.java
test/hotspot/jtreg/compiler/vectorapi/TestVectorShuffleIotaByte.java
test/hotspot/jtreg/gc/g1/TestG1SkipCompaction.java
test/micro/org/openjdk/bench/vm/compiler/MaxMinOptimizeTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2whzn:",9223372036854775807,b17,,,,,,,,,,,"2022-03-29 19:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8029
Date: 2022-03-30 02:27:27 +0000;;;","2022-03-30 17:48;dukebot;Changeset: 835c7e8d
Author:    Fei Yang <fyang@openjdk.org>
Date:      2022-03-31 00:46:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/835c7e8d6d1931e69fffb43a5b4acf62fd4916fd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
GetContainerCpuLoad does not return the correct result in share mode,JDK-8283903,5071214,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pxie,pxie,pxie,2022-03-29 18:37,2022-12-12 16:41,2023-10-01 09:56,2022-03-30 10:08,11.0.14.1,17.0.4,openjdk8u332,,,,,,,19,core-svc,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,tencent-interest,,,,,,,,,,,,"Run a computationally intensive program in Docker using getProcessCpuTime monitor. After a month of running, getProcessCpuTime returns -1.

Get the runtime data through redefineclass as follows

hostTicks=175476155560000000
totalCPUs=96
containerCPUs=90


In the following code
```
               long hostTicks = getHostTotalCpuTicks0();
                int totalCPUs = getHostOnlineCpuCount0();
                int containerCPUs = getAvailableProcessors();
                // scale the total host load to the actual container cpus
                hostTicks = hostTicks * containerCPUs / totalCPUs;
```
(hostTicks * containerCPUs  ) Calculate the overflow


reproduce bug:
   totalCPUs=96
   docker share model
   Computationally intensive programs that run for sufficient time",,,,,,,,,,,JDK-8298615,JDK-8293190,JDK-8292646,JDK-8298611,JDK-8292514,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2whyr:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2022-03-29 18:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8028
Date: 2022-03-30 01:46:20 +0000;;;","2022-03-30 10:08;dukebot;Changeset: a625bfdb
Author:    bobpengxie <bobpengxie@tencent.com>
Committer: Kevin Walls <kevinw@openjdk.org>
Date:      2022-03-30 17:06:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a625bfdba45d49bc717bcc9be4112db93b50f50a
;;;","2022-03-30 10:24;sgehwolf;[~pxie] I'm curious. What's the specific environment of the application that you've observed this bug? Clearly, it must be a containerized environment. The bug suggests it's not using CPU quota mechanism for limiting the CPU but is using CPU shares (--cpu-shares). It might additionally be using cpusets, but that cannot be inferred. In light of JDK-8281181 I'm curious how this might affect that system. Thanks!;;;","2022-04-11 05:25;pxie;Hi sgehwolf
I tested the case.
In share mode, CPU usage is dynamically adjusted.
The number 1 represents different things at different points in the process.The interpretation is changing in Share mode
Perhaps CPU utilization with cores would be better expressed.such as 200%.;;;","2022-04-11 05:42;sgehwolf;[~pxie] I'm not sure what you were trying to say above. I was trying to understand whether or not that system where you've spotted this bug on was driven by some framework? Is it plain docker/container? Something else? With https://bugs.openjdk.java.net/browse/JDK-8282684?focusedCommentId=14485598&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-14485598 implemented it's likely the code will be gone in JDK 20 as the --cpu-shares setting won't have any effect on the CPU settings returned by Metrics.java;;;","2022-04-11 06:32;pxie;
Thanks sgehwolf 

I run cgroup for the program
set cpu.shares


I have a few questions about this API

Machine 8 core
set share1 with 2048,share2 with 4096
The test program TestCPU accepts a number to start the corresponding array thread

TestCPUA with number 4 run in share1
TestCPUB with number 2 run in share2
TestCPUA uses twice as much CPU ticks as TestCPUB


TestCPUA with number 8 run in share1
TestCPUB with number 8 run in share2
TestCPUB uses twice as much CPU ticks as TestCPUA

getProcessCpuLoad return 0-1
There is no feedback on whether the program has reached the parameter limit
;;;","2022-08-14 19:36;pxie;Fix request

I'd like to backport this patch to jdk17u.
It will fix  the getContainerCpuLoad does not return the correct result in share mode
It can be applied cleanly.
This risk is low.;;;","2022-08-16 00:14;clanger;[~pxie], please open a backport PR against https://github.com/openjdk/jdk17u-dev (and get it reviewed if it doesn't apply cleanly). If you've never done a backport, please consult https://wiki.openjdk.org/display/JDKUpdates/How+to+contribute+a+fix for some instructions/guidance on how to do it.
I'll remove the jdk17u-fix-request label for the time being. Please reinstate it once the backport PR is ready for integration.;;;","2022-08-16 04:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/351
Date: 2022-08-16 11:41:37 +0000;;;","2022-08-16 05:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/633
Date: 2022-08-16 12:33:42 +0000;;;","2022-08-17 20:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1332
Date: 2022-08-18 03:00:52 +0000;;;","2022-08-17 20:24;pxie;Fix request

I'd like to backport this patch to jdk11u-dev.
It will fix the getContainerCpuLoad does not return the correct result in share mode
The patch doesn't apply clean. 
Conflict in header comments.
This risk is low. ;;;","2022-08-18 01:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/105
Date: 2022-08-18 08:28:37 +0000;;;","2022-08-18 01:39;pxie;Fix request

I'd like to backport this patch to jdk8u-dev.
It will fix the getContainerCpuLoad does not return the correct result in share mode
The patch doesn't apply clean. 
This risk is low. ;;;",,,,,,,,,,,,,,,,
Revert 8284190 after fix of 8281297,JDK-8283899,5071210,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,lkorinth,mikael,mikael,2022-03-29 16:15,2022-08-04 07:19,2023-10-01 09:56,2022-05-09 00:25,19,,,,,,,,,19,hotspot,,0,gc-g1,intermittent,tier1,,,,,,,,,,,,,,,,"Guarantee fails when running gtest/GTestWrapper.java:

[----------] 2 tests from G1RegionToSpaceMapper
[ RUN      ] G1RegionToSpaceMapper.smallStressAdjacent_vm
[       OK ] G1RegionToSpaceMapper.smallStressAdjacent_vm (323 ms)
[ RUN      ] G1RegionToSpaceMapper.largeStressAdjacent_vm
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (g1PageBasedVirtualSpace.cpp:215), pid=19716, tid=45680
#  guarantee(is_area_committed(start_page, size_in_pages)) failed: Specified area is not committed, start page: 2, page count: 1
#
# JRE version: Java(TM) SE Runtime Environment (19.0+16) (build 19-ea+16-1040)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (19-ea+16-1040, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_common\\scratch\\0\\hs_err_pid19716.mdmp
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_common\\scratch\\0\\hs_err_pid19716.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281297,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2whxv:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-03-29 16:18;mikael;Note: This could potentially be caused by the new Visual Studio version/devkit.;;;","2022-03-30 01:16;tschatzl;Maybe related to JDK-8281297, but with somewhat different crash.;;;","2022-03-30 07:43;dcubed;Added the 'intermittent' label since the failure did not reproduce in
the next 8 Tier1 job sets...;;;","2022-05-05 10:45;lkorinth;same as https://bugs.openjdk.java.net/browse/JDK-8281297;;;","2022-05-06 11:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8580
Date: 2022-05-06 18:00:32 +0000;;;","2022-05-09 00:25;dukebot;Changeset: b490a58e
Author:    Leo Korinth <lkorinth@openjdk.org>
Date:      2022-05-09 07:24:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b490a58ed826de28d4c1c0abea00d51e12c4eee6
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Update ICU4J to version 70.1,JDK-8283897,5071208,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2022-03-29 13:34,2022-08-25 07:40,2023-10-01 09:56,2022-03-29 13:39,19,,,,,,,,,19,core-libs,,0,icu4j,unicode,,,,,,,,,,,,,,,,,"3rd party license upgrade.
https://icu.unicode.org/download/70",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8215069,,,,,,,,,,,,,,,,JDK-8268081,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2whxf:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Changes in CFG file format break C1Visualizer,JDK-8283890,5071198,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2022-03-29 11:09,2022-06-21 10:50,2023-10-01 09:56,2022-03-31 08:57,18,19,,,,,,,,19,hotspot,,0,c1,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,"A change in the CFG file format introduced by JDK-8277496 makes the log file unreadable by the C1Visualizer tool.

The change adds a new line in the CFG file ""(block has no end, cannot print successors)"" that the C1Visualizer tool is not able to parse:

begin_cfg
  name ""BlockListBuilder virtual void java.lang.Object.<init>()""
  begin_block
    name ""B0""
    from_bci 0
    to_bci -1
    predecessors
    (block has no end, cannot print successors).              <==== 
    xhandlers
    flags ""std""
  end_block
end_cfg

There's no fundamental reason to provide the ""no end block"" information in the log file, instead a line tagged ""successors"" with an empty set of successors would be sufficient and would not break the C1Visualizer:

begin_cfg
  name ""BlockListBuilder virtual void java.lang.Object.<init>()""
  begin_block
    name ""B0""
    from_bci 0
    to_bci -1
    predecessors
    successors                                <==============
    xhandlers
    flags ""std""
  end_block
end_cfg


The C1Visualizer tool is not maintained anymore, so fixing it is not an option.
An alternative solution would be to use a script to ""fix"" log files before opening them with the C1Visualizer, but it seems to add an unnecessary step in the process.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277496,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,,,,"0|i2whv7:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-29 20:41;dlong;ILW = output format regression breaks tool parsing; always?; post-process log files = MHM = P3;;;","2022-03-30 05:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8041
Date: 2022-03-30 12:32:42 +0000;;;","2022-03-31 08:57;dukebot;Changeset: 207b0998
Author:    Frederic Parain <fparain@openjdk.org>
Date:      2022-03-31 15:54:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/207b0998580a8e01395deb9c46c84b20f6e59883
;;;","2022-06-21 02:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/171
Date: 2022-06-21 09:04:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Fix Typo in open/src/java.sql/share/classes/java/sql/package-info.java,JDK-8283889,5071194,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,lancea,lancea,2022-03-29 11:03,2022-03-30 18:02,2023-10-01 09:56,2022-03-29 13:41,,,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,"Need to correct the typo, xx, in open/src/java.sql/share/classes/java/sql/package-info.java:
 
Lesson:JDBC Basics(The Javaxx Tutorials &gt; JDBC Database Access)
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2whub:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@57fef174,,,,,,,,,"2022-03-29 11:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8020
Date: 2022-03-29 18:23:31 +0000;;;","2022-03-29 13:41;dukebot;Changeset: 272d6531
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2022-03-29 20:39:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/272d6531ef94534d2044377f126744b5139f7ae9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix broken links in the security guide of JDK 8u docs,JDK-8283886,5071191,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rgallard,rgallard,rgallard,2022-03-29 10:05,2022-03-31 00:59,2023-10-01 09:56,2022-03-29 20:19,,,,,,,,,,8u341,docs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2whtn:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdeprscan --help causes an exception when the locale is ja, zh_CN or de",JDK-8283870,5071174,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ksakata,ksakata,ksakata,2022-03-29 08:13,2023-09-05 10:23,2023-10-01 09:56,2022-04-18 05:53,18,,,,,,,,,19,globalization,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-l10n,,,,,,,,,,,,,,"Running jdeprscan with --help option causes an exception on any OSs when the locale is ja or zh_CN.

$ jdeprscan -J-Duser.language=ja --help
Exception in thread ""main"" java.lang.IllegalArgumentException: can't parse argument number: dir|jar|class
        at java.base/java.text.MessageFormat.makeFormat(MessageFormat.java:1454)
        at java.base/java.text.MessageFormat.applyPattern(MessageFormat.java:492)
        at java.base/java.text.MessageFormat.<init>(MessageFormat.java:371)
        at java.base/java.text.MessageFormat.format(MessageFormat.java:860)
        at jdk.jdeps/com.sun.tools.jdeprscan.Messages.get(Messages.java:62)
        at jdk.jdeps/com.sun.tools.jdeprscan.Main.printHelp(Main.java:706)
        at jdk.jdeps/com.sun.tools.jdeprscan.Main.run(Main.java:529)
        at jdk.jdeps/com.sun.tools.jdeprscan.Main.call(Main.java:717)
        at jdk.jdeps/com.sun.tools.jdeprscan.Main.main(Main.java:725)
Caused by: java.lang.NumberFormatException: For input string: ""dir|jar|class""
        at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
        at java.base/java.lang.Integer.parseInt(Integer.java:668)
        at java.base/java.lang.Integer.parseInt(Integer.java:786)
        at java.base/java.text.MessageFormat.makeFormat(MessageFormat.java:1452)
        ... 8 more

$ jdeprscan -J-Duser.language=zh -J-Duser.country=CN --help
Exception in thread ""main"" java.lang.IllegalArgumentException: can't parse argument number: dir|jar|class
        at java.base/java.text.MessageFormat.makeFormat(MessageFormat.java:1454)
        at java.base/java.text.MessageFormat.applyPattern(MessageFormat.java:492)
        at java.base/java.text.MessageFormat.<init>(MessageFormat.java:371)
        at java.base/java.text.MessageFormat.format(MessageFormat.java:860)
        at jdk.jdeps/com.sun.tools.jdeprscan.Messages.get(Messages.java:62)
        at jdk.jdeps/com.sun.tools.jdeprscan.Main.printHelp(Main.java:706)
        at jdk.jdeps/com.sun.tools.jdeprscan.Main.run(Main.java:529)
        at jdk.jdeps/com.sun.tools.jdeprscan.Main.call(Main.java:717)
        at jdk.jdeps/com.sun.tools.jdeprscan.Main.main(Main.java:725)
Caused by: java.lang.NumberFormatException: For input string: ""dir|jar|class""
        at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
        at java.base/java.lang.Integer.parseInt(Integer.java:668)
        at java.base/java.lang.Integer.parseInt(Integer.java:786)
        at java.base/java.text.MessageFormat.makeFormat(MessageFormat.java:1452)
        ... 8 more

Of course, it works well when the locale is anything other than those locales.",,,,,,,,,,,JDK-8299175,JDK-8299174,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313573,,,,,,JDK-8280400,,,,,,,,,,,,,,,,,,,,generic,,,,,,,19,,generic,,,,,"0|i2whpv:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@52b4192d,,,,,,,,,"2022-04-10 22:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8174
Date: 2022-04-11 05:31:49 +0000;;;","2022-04-18 05:53;dukebot;Changeset: ef25e189
Author:    Koichi Sakata <ksakata@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2022-04-18 12:51:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ef25e189c7f987b6c7b049ce481ee832cc7f70aa
;;;","2022-12-11 19:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1585
Date: 2022-12-12 03:27:47 +0000;;;","2022-12-11 19:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/949
Date: 2022-12-12 03:40:09 +0000;;;","2022-12-19 17:52;ddong;Fix Request 11u, 17u
 
Backporting this patch fixed the exception when running jdepscan -h for Chinese or Japanese Developers.

The risk is low and the patch is almost clean. Only small adjustments are required.

Since 11 are 17 are LTS versions, I think it's necessary to backport this fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Update attribution in webkit.md file,JDK-8283869,5071172,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2022-03-29 07:58,2022-06-14 14:21,2023-10-01 09:56,2022-05-10 11:03,8,jfx11,jfx17,jfx19,,,,,,jfx19,javafx,,0,CPU22_07-critical-approved,CPU22_07-critical-SQE-OK,noreg-doc,sn_117,sn_118,,,,,,,,,,,,,,"We need to update the attribution in the third-party webkit.md file.
",,,,,,,,,,,JDK-8286542,JDK-8287257,JDK-8286894,JDK-8287260,,,,,,,,,,,,,,,,,,,,,,JDK-8283868,,,,,JDK-8288449,,,,,,,JDK-8281293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2whpf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-05-10 09:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/793
Date: 2022-05-10 16:37:57 +0000;;;","2022-05-10 11:03;dukebot;Changeset: 7bb48194
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-05-10 18:00:10 +0000
URL:       https://git.openjdk.java.net/jfx/commit/7bb4819409dd617ba2e3658ee66f23b94dc0bec1
;;;","2022-05-24 10:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/102
Date: 2022-05-24 17:31:58 +0000;;;","2022-05-24 10:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/62
Date: 2022-05-24 17:34:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Clean up DocFinder and friends,JDK-8283864,5071164,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-03-29 03:39,2022-04-20 23:25,2023-10-01 09:56,2022-04-14 08:12,19,,,,,,,,,19,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280713,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2whnn:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-04-13 11:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8229
Date: 2022-04-13 18:02:14 +0000;;;","2022-04-14 08:12;dukebot;Changeset: 1cc3c330
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-04-14 15:09:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1cc3c330e3223944d2e20b3721ef336c87511e34
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Drop support for Constable in MemoryLayout and FunctionDescriptor,JDK-8283863,5071163,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-03-29 03:27,2022-03-29 06:17,2023-10-01 09:56,2022-03-29 06:17,repo-panama,,,,,,,,,,tools,,0,foreign-memaccess+abi,foreign-preview,,,,,,,,,,,,,,,,,See https://mail.openjdk.java.net/pipermail/panama-dev/2022-March/016631.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2whnf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-03-29 03:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/672
Date: 2022-03-29 10:28:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AsyncGetCallTrace may crash JVM on guarantee,JDK-8283849,5071153,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbachorik,jbachorik,jbachorik,2022-03-29 02:40,2023-07-24 21:42,2023-10-01 09:56,2022-05-17 23:47,11,17,18,19,8,,,,,19,hotspot,,0,datadog-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,"In our systems we are getting a non-trivial number of JVM crashes caused by AsyncGetCallTrace.

Here is the excerpt from the crash log:

```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (codeCache.cpp:639), pid=7, tid=194
#  guarantee(result == NULL || !result->is_zombie() || result->is_locked_by_vm() || VMError::is_error_reported()) failed: unsafe access to zombie method
#
# JRE version: OpenJDK Runtime Environment Temurin-17.0.2+8 (17.0.2+8) (build 17.0.2+8)
# Java VM: OpenJDK 64-Bit Server VM Temurin-17.0.2+8 (17.0.2+8, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x5b0a58]  CodeCache::find_blob(void*)+0xb8
#
# Core dump will be written. Default location: /usr/local/app/core
#
# JFR recording file will be written. Location: /usr/local/app/hs_err_pid7.jfr
#
# If you would like to submit a bug report, please visit:
#   https://github.com/adoptium/adoptium-support/issues
```

The full log is attached.

The root cause is AsyncGetCallTrace calling `CodeCache::find_blob()` which contains a guarantee which will fail if we happen to hit a zombie method. This is particularly unpleasant as that guarantee will take down the JVM with crash.

This crash happens when the last frame is marked as zombie but the associated resources haven't been cleaned by the sweeper yet. ",,,,,,,,,,,JDK-8290014,JDK-8288751,JDK-8288331,JDK-8311790,JDK-8311638,JDK-8312659,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290025,JDK-8288710,JDK-8297864,,,,"2022-03-29 02:40;jbachorik;hs_err.log;https://bugs.openjdk.org/secure/attachment/98395/hs_err.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2whl7:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2022-03-29 09:31;dcubed;Moving from hotspot/runtime -> hotspot/svc since the
Serviceability team maintains AsyncGetCallTrace.

[~jbachorik] - Sorry, I don't know if anyone is actively assigned
to AsyncGetCallTrace() on the Serviceability team. I've been
on the Runtime team for quite a while and haven't kept up with
AsyncGetCallTrace() issues.;;;","2022-03-31 08:48;jbachorik;An attempt to fix the crash is available at https://github.com/openjdk/jdk/pull/8061

A gist of the fix is to allow relaxed instantiation of a frame for profiling purposes. Currently, a frame instantiation will fail on guarantee when we happen to hit a zombie method which is still on stack. While this would indicate a serious error for the normal execution flow, in case of profiling where the executing thread can be expected at any possible method this is something which may happen and we really should not take the profiled JVM down due to it.
;;;","2022-04-11 02:42;jbachorik;The problems is turning out to be slightly more complex - the guarantee at https://github.com/openjdk/jdk/blob/f4edb59a6e44d99ba215ee6970ffa6fb26b4798c/src/hotspot/share/code/codeCache.cpp#L655 will pass if the code blob is zombie but is still locked by VM (eg. it is currently 'zombified'). By introducing an artificial delay between the check for the blob being zombie and the check for the VM lock the likelihood of JVM crash is increased significantly.

But what this means is that the guarantee will in fact produce a number of false positives - the guarantee would pass because the blob is still locked by VM but then the blob escapes to the caller and may be used later when it is not locked by VM and part or al of its structured may have been reclaimed by the sweeper (running concurrently), rendering the blob invalid with the possibility of SIGSEGV or erratic behaviour.;;;","2022-04-14 04:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8061
Date: 2022-03-31 15:45:05 +0000;;;","2022-05-05 04:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8549
Date: 2022-05-05 11:28:14 +0000;;;","2022-05-17 23:47;dukebot;Changeset: 93c88690
Author:    Jaroslav Bachorik <jbachorik@openjdk.org>
Date:      2022-05-18 06:45:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/93c88690a1c2cbc7ba7fc70ddef9bf5928e4de03
;;;","2022-05-18 00:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/402
Date: 2022-05-18 07:27:58 +0000;;;","2022-05-18 07:12;jbachorik;[17u] Fix request

Please, consider approving the backport to JDK 17u-dev.
The fix improves AsyncGetCallTrace stability (which is used from tools like async-profiler).

The backport is almost clean with only minor adjustments (https://git.openjdk.java.net/jdk17u-dev/pull/402)

The change is isolated to AsyncGetCallTrace functionality and as such it is rather low risk.;;;","2022-06-14 10:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1148
Date: 2022-06-14 17:10:24 +0000;;;","2022-06-15 04:58;jbachorik;[11u] Fix request

Please, consider approving the backport to JDK 11u-dev.
The fix improves AsyncGetCallTrace stability (which is used from tools like async-profiler).

The backport is almost clean with only minor adjustments (https://git.openjdk.org/jdk11u-dev/pull/1148) (reviewed)

The change is isolated to AsyncGetCallTrace functionality and as such it is rather low risk.;;;","2022-06-15 08:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/73
Date: 2022-06-15 14:40:52 +0000;;;","2022-06-19 06:28;jbachorik;[8u] Fix request

Please, consider approving the backport to JDK 8u-dev.
The fix improves AsyncGetCallTrace stability (which is used from tools like async-profiler).

The backport is almost clean with only minor adjustments (https://git.openjdk.org/jdk8u-dev/pull/73) (reviewed)

The change is isolated to AsyncGetCallTrace functionality and as such it is rather low risk.;;;","2022-12-04 22:42;dholmes;Much of the code added here was rendered moot by JDK-8290025. It was then removed by JDK-8297864 ""Dead code elimination"".;;;",,,,,,,,,,,,,,,,,
TestZoneTextPrinterParser.test_roundTripAtOverlap fails: DateTimeParseException,JDK-8283842,5071145,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,aleonard,aleonard,2022-03-29 01:43,2023-07-23 04:57,2023-10-01 09:56,2022-03-31 09:06,18,,,,,,,,,19,core-libs,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,,"On MacOS testcase TestZoneTextPrinterParser.test_roundTripAtOverlap fails
with :
22:28:09  test test.java.time.format.TestZoneTextPrinterParser.test_roundTripAtOverlap(""yyyy-MM-dd HH:mm:ss.SSS z"", ""2021-11-07 01:30:00.000 EST""): failure
22:28:09  java.time.format.DateTimeParseException: Text '2021-11-07 01:30:00.000 EST' could not be parsed at index 24
22:28:09  	at java.base/java.time.format.DateTimeFormatter.parseResolved0(DateTimeFormatter.java:2056)
22:28:09  	at java.base/java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:1958)
22:28:09  	at java.base/java.time.ZonedDateTime.parse(ZonedDateTime.java:600)
22:28:09  	at test.java.time.format.TestZoneTextPrinterParser.test_roundTripAtOverlap(TestZoneTextPrinterParser.java:266)

The line: https://github.com/openjdk/jdk18u/blob/1ab6f9395f784293deb37ea0186db59d1166ae40/test/jdk/java/time/test/java/time/format/TestZoneTextPrinterParser.java#L266

throws DateTimeParseException if the current locale cannot parse the zone,
similar to a previous issue in a different testcase: https://bugs.openjdk.java.net/browse/JDK-8282023

To recreate:

        String pattern = ""yyyy-MM-dd HH:mm:ss.SSS z"";
        String input = ""2021-11-07 01:30:00.000 EST"";

        var dtf = DateTimeFormatter.ofPattern(pattern);
        String parsed = dtf.format(ZonedDateTime.parse(input, dtf));

Using the following resolves the problem:
     var dtf = DateTimeFormatter.ofPattern(pattern, Locale.ROOT);
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,os_x,,,,,"0|i2whjf:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2022-03-29 10:28;jkang;Just noting it's also seen on Win32, but based on the description it seems not to be platform dependent, rather just how the locale is configured on the machine.;;;","2022-03-30 08:49;naoto;The submitter's analysis is correct. The test has to be run in a predictable locale, otherwise, the parse will fail on parsing the time zone string.;;;","2022-03-30 09:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8045
Date: 2022-03-30 16:46:40 +0000;;;","2022-03-31 09:06;dukebot;Changeset: a41550b9
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-03-31 16:05:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a41550b9e3c6729e90a96cf33e1765887aa2a3fb
;;;","2022-04-05 12:55;aleonard;thanks for fixing. Do we plan to backport this to jdk-18.0.1 ?;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Unmappable character for US-ASCII encoding in TestPredicateInputBelowLoopPredicate,JDK-8283834,5071136,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2022-03-29 00:03,2022-05-04 22:08,2023-10-01 09:56,2022-03-29 00:22,11,17,19,,,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-19,testbug,,,,,,,,,,,,"javac fails with ""-encoding US-ASCII"":

/opt/mach5/mesos/work_dir/jib-master/install/2022-03-28-1405559.tobias.hartmann.jdk17u-cpu/src.full/open/test/hotspot/jtreg/compiler/loopopts/TestPredicateInputBelowLoopPredicate.java:27: error: unmappable character (0xD0) for encoding US-ASCII
 * @summary \ufffd\ufffd2: assert(false) failed: cyclic dependency prevents range check elimination
            ^
/opt/mach5/mesos/work_dir/jib-master/install/2022-03-28-1405559.tobias.hartmann.jdk17u-cpu/src.full/open/test/hotspot/jtreg/compiler/loopopts/TestPredicateInputBelowLoopPredicate.java:27: error: unmappable character (0xA1) for encoding US-ASCII
 * @summary \ufffd\ufffd2: assert(false) failed: cyclic dependency prevents range check elimination
             ^
2 errors
result: Failed. Compilation failed: Compilation failed
",,,,,,,,,,,JDK-8284152,JDK-8285891,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280799,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2whhf:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-29 00:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8011
Date: 2022-03-29 07:06:45 +0000;;;","2022-03-29 00:22;dukebot;Changeset: 23672288
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-03-29 07:21:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/236722883511ee6111ab1de80ebc3fbec350c61d
;;;","2022-03-29 00:25;thartmann;ILW = Test fails to compile with US-ASCII encoding, single test, use utf-8 encoding = MLM = P4;;;","2022-03-31 07:28;mdoerr;Fix Request (17u)
Trivial follow-up fix for JDK-8280799. Applies cleanly. Test has passed.;;;","2022-03-31 07:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/322
Date: 2022-03-31 14:27:40 +0000;;;","2022-04-25 01:27;roland;Fix Request (11):

Trivial fix. Applies cleanly. Fixes compilation errors when running tests.;;;","2022-04-25 01:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1042
Date: 2022-04-25 08:23:04 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
serviceability/jvmti/events/FramePop/framepop02/framepop02.java hangs in loom repo,JDK-8283818,5071120,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,alanb,alanb,2022-03-28 23:25,2023-04-04 02:39,2023-10-01 09:56,2022-04-25 10:22,repo-loom,,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,"serviceability/jvmti/events/FramePop/framepop02/framepop02.java#id1 times out frequently in the loom repo.

Most of the threads appear to be blocked in JVMTI RawMonitorEnter.One thread is calling GetFrameCount and is blocked here:

Thread 27 (Thread 0x7f858fdfd700 (LWP 4107608)):
#0  0x00007f860f20f6f8 in pthread_cond_timedwait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0
#1  0x00007f860e5854f7 in os::PlatformMonitor::wait(long) () from /jdk-19-loom+5-362/linux-x64.jdk/jdk-19/lib/server/libjvm.so
#2  0x00007f860e536d99 in Monitor::wait_without_safepoint_check(long) () from /jdk-19-loom+5-362/linux-x64.jdk/jdk-19/lib/server/libjvm.so
#3  0x00007f860e3a97cd in JvmtiVTMTDisabler::disable_VTMT() () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-19-loom+5-362/linux-x64.jdk/jdk-19/lib/server/libjvm.so
#4  0x00007f860e362a1f in JvmtiEnv::GetFrameCount(_jobject*, int*) () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-19-loom+5-362/linux-x64.jdk/jdk-19/lib/server/libjvm.so
#5  0x00007f860e31195f in jvmti_GetFrameCount () from //jdk-19-loom+5-362/linux-x64.jdk/jdk-19/lib/server/libjvm.so
#6  0x00007f860f720ba1 in _jvmtiEnv::GetFrameCount (count_ptr=0x7f858fdfbf9c, thread=<error reading variable: dwarf2_find_location_expression: Corrupted DWARF expression.>, this=<error reading variable: dwarf2_find_location_expression: Corrupted DWARF expression.>) at /workspace/open/make/jvmti_common.h:1997
#7  MethodEntry (jvmti=0x7f860801a3a0, jni=0x7f859cc6c768, thr=0x7f8580000f90, method=0x7f8598034ec0) at /workspace/open/test/lib/jdk/test/lib/jvmti/jni.h:183
#8  0x00007f860e38533f in JvmtiExport::post_method_entry(JavaThread*, Method*, frame) () from /jdk-19-loom+5-362/linux-x64.jdk/jdk-19/lib/server/libjvm.so
#9  0x00007f860e16a03d in InterpreterRuntime::post_method_entry(JavaThread*) () from /jdk-19-loom+5-362/linux-x64.jdk/jdk-19/lib/server/libjvm.so
#10 0x00007f85f11e3d74 in ?? ()
#11 0x00007f85f11e3d31 in ?? ()
#12 0x00007f858fdfc258 in ?? ()
#13 0x00000008007c4c60 in ?? ()
#14 0x00007f858fdfc2e8 in ?? ()
#15 0x000000080014f508 in ?? ()
#16 0x0000000000000000 in ?? ()",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285448,JDK-8284219,JDK-8284314,,,JDK-8284314,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2whdv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-04-18 18:06;sspitsyn;The test is problem-listed, so it is not appeared in history from some point.;;;","2022-04-20 13:43;sspitsyn;I do not see in failing history this test is still failing.
It is because the test has been problem listed.
The timeout is still reproducible locally.;;;","2022-04-23 16:21;lmesnik;It is deadlock caused by 'interruptLock' in Virtual Thread and VTMSDisabler.

The log says that  ForkJoinPool-1-worker-5 stuck in unmount while yielding continuation waitng for  'interruptLock' :

[555.990s][error][jvmti] ForkJoinPool-1-worker-5(ForkJoinPool-1-worker-5) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 1
[555.990s][error][jvmti]   void java.lang.VirtualThread.unmount():352
[555.990s][error][jvmti]   boolean java.lang.VirtualThread.yieldContinuation():368
[555.990s][error][jvmti]   void java.lang.VirtualThread.doParkNanos(long):552
[555.990s][error][jvmti]   void java.lang.VirtualThread.parkNanos(long):523
[555.990s][error][jvmti]   void java.lang.System$2.parkVirtualThread(long):2577
[555.990s][error][jvmti]   void jdk.internal.misc.VirtualThreads.park(long):67
[555.990s][error][jvmti]   void java.util.concurrent.locks.LockSupport.parkNanos(long):408
[555.990s][error][jvmti]   void framepop02$TestTask.run():72

while MainThread is in  Thread.threadState() 

[555.990s][error][jvmti] MainThread(MainThread) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 0

[555.990s][error][jvmti]   java.lang.Thread$State jdk.internal.misc.VM.toThreadState(int):343
[555.990s][error][jvmti]   java.lang.Thread$State java.lang.Thread.threadState():2811
[555.990s][error][jvmti]   java.lang.Thread$State java.lang.VirtualThread.threadState():833
[555.990s][error][jvmti]   boolean java.lang.Thread.isAlive():1814
[555.990s][error][jvmti]   void java.lang.Thread.join(long):2095
[555.990s][error][jvmti]   void java.lang.Thread.join():2190
[555.990s][error][jvmti]   void framepop02.main(java.lang.String[]):57
[555.990s][error][jvmti]   void java.lang.invoke.LambdaForm$DMH/0x0000000801002000.invokeStatic(java.lang.Object, java.lang.Object):-1
[555.990s][error][jvmti]   java.lang.Object java.lang.invoke.LambdaForm$MH/0x0000000801003400.invoke(java.lang.Object, java.lang.Object, java.lang.Object):-1
[555.990s][error][jvmti]   java.lang.Object java.lang.invoke.Invokers$Holder.invokeExact_MT(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object):-1
[555.990s][error][jvmti]   java.lang.Object jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(java.lang.Object, java.lang.Object[]):155
[555.990s][error][jvmti]   java.lang.Object jdk.internal.reflect.DirectMethodHandleAccessor.invoke(java.lang.Object, java.lang.Object[]):104
[555.990s][error][jvmti]   java.lang.Object java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):578
[555.990s][error][jvmti]   void com.sun.javatest.regtest.agent.MainWrapper$MainThread.run():127
[555.990s][error][jvmti]   void java.lang.Thread.run():1555

The MainThread called jvmti callback while obtaining 'interruptLock'  in the following code (VirtualThread.java)
   case RUNNING:
                // if mounted then return state of carrier thread
                synchronized (carrierThreadAccessLock()) {
                    Thread carrierThread = this.carrierThread;
                    if (carrierThread != null) {
                        return carrierThread.threadState();
                    }
                }
                // runnable, mounted
                return Thread.State.RUNNABLE;
;;;","2022-04-23 23:46;alanb;All methods that access the carrier asynchronously (Thread::getState, Thread::toString, unpark) must coordinate with unmount. It may be that we some thing of critical section to defer the interaction with VTMS until after the critical code has executed.;;;","2022-04-24 03:00;sspitsyn;Nice discovery, Leonid!
Some minor corrections in terminology though.
The virtual thread involved into this is stuck in a VTMS transition, not in the Disabler.
So, the deadlock is between suspended MainThread and virtual thread that is stuck in unmount transition.
There is another thread that was stuck in Disabler because of it and where our trap has been fired. My guess is that this thread is trying to resume the MainThread but blocked waiting for virtual thread to complete its VTMS transition.
My conclusion is 3 threads are involved into this deadlock:
 - virtual thread in VTMS transition that is blocked on the interruptLock
 - MainThread tha blocked the interruptLock and then suspended
 - the thread which is blocked in VTMSTransitionDisabler waiting for virtual thread (above) to complete its VTMS transition (I think, it is the Kitchensink agent thread trying to resume the MainThread)
Also, I think, one of these two issues has to be closed as dup of another.;;;","2022-04-24 12:49;sspitsyn;> All methods that access the carrier asynchronously (Thread::getState, Thread::toString, unpark) must coordinate with unmount. It may be that we some thing of critical section to defer the interaction with VTMS until after the critical code has executed.

Yes, it would be good to re-factor this. But unfortunately, I have a lack of expertise in this code.
Also, I do not see how this can fixed or event worked around at the JVMTI level.
;;;","2022-04-25 10:22;sspitsyn;This issue was fixed by the change from [~alanb]:
https://github.com/openjdk/loom/commit/3a4bf3bc1d04c21157980c334af33079ab04b61f;;;","2022-04-25 11:08;alanb;The above change just reduces the use of the internal threadStatus so the number of operations that need to sample the carrier thread state is reduced. In our tests, many of the usages were because of Thread.isAlive. There are still scenarios that may deadlock, e.g. if JVMTI were to suspend a thread in a call toThread::toString or Thread::getState on a virtual thread, or if a virtual thread is pinned and JVMTI were used to suspend a thread that attempted to unpark it. We will likely have more of these as more of the runtime is developed in Java.;;;","2022-04-25 12:23;sspitsyn;I've removed the test serviceability/jvmti/events/FramePop/framepop02 from ProblemList.txt in repo-loom.;;;","2022-04-25 12:34;coleenp;Thanks Serguei.  That's why I was asking since the bug in the problem list is marked as resolved.;;;","2022-04-25 15:12;dholmes;> We will likely have more of these as more of the runtime is developed in Java.

That is why something like Project Metropolis was needed to figure out how to run more of the runtime in Java, addressing all of the issues (like these JVMTI issues) that causes. There really needs to be a JVMTI suspension deferral mechanism to aid with this kind of problem. Suspension has always been dangerous but it seems the Loom code is highly susceptible to these kinds of deadlocks.;;;",,,,,,,,,,,,,,,,,,,
Handle CompileThreshold the same as other thresholds when scaled with -XX:CompileThresholdScaling,JDK-8283807,5071101,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,iklam,iklam,2022-03-28 13:49,2022-05-16 23:53,2023-10-01 09:56,2022-05-06 00:12,19,,,,,,,,,19,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,,"The valid range of CompileThresholdScaling is set to the following:

  product(double, CompileThresholdScaling, 1.0,                             \
          ""Factor to control when first compilation happens ""               \
          ""(both with and without tiered compilation): ""                    \
          ""values greater than 1.0 delay counter overflow, ""                \
          ""values between 0 and 1.0 rush counter overflow, ""                \
          ""value of 1.0 leaves compilation thresholds unchanged ""           \
          ""value of 0.0 is equivalent to -Xint. ""                           \
          """"                                                                \
          ""Flag can be set as per-method option. ""                          \
          ""If a value is specified for a method, compilation thresholds ""   \
          ""for that method are scaled by both the value of the global flag ""\
          ""and the value of the per-method flag."")                          \
          range(0.0, DBL_MAX)                                               \
                             
However, if DBL_MAX is used, the VM fails to start after JDK-8283013

CompileThresholdScaling scales several compiler thresholds. If the scaled threshold value is outside of the allowed range, the default value is kept. 
When CompileThreshold is outside the allowed range, the VM is not created: change CompileThreshold to be handled by CompileThresholdScaling like the other thresholds.

$ java -XX:+PrintFlagsRanges --version | grep CompileThresholdScaling
   double CompileThresholdScaling                            [ 0.000                     ... 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000 ]                           {product} {default}


$ java -XX:CompileThresholdScaling=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000 --version
intx Tier0InvokeNotifyFreqLog=32 is outside the allowed range [ 0 ... 30 ]
intx Tier0BackedgeNotifyFreqLog=32 is outside the allowed range [ 0 ... 30 ]
intx Tier3InvocationThreshold=9223372036854775807 is outside the allowed range [ 0 ... 2147483647 ]
intx Tier3MinInvocationThreshold=9223372036854775807 is outside the allowed range [ 0 ... 2147483647 ]
intx Tier3CompileThreshold=9223372036854775807 is outside the allowed range [ 0 ... 2147483647 ]
intx Tier3BackEdgeThreshold=9223372036854775807 is outside the allowed range [ 0 ... 2147483647 ]
intx Tier2InvokeNotifyFreqLog=32 is outside the allowed range [ 0 ... 30 ]
intx Tier2BackedgeNotifyFreqLog=32 is outside the allowed range [ 0 ... 30 ]
intx Tier3InvokeNotifyFreqLog=32 is outside the allowed range [ 0 ... 30 ]
intx Tier3BackedgeNotifyFreqLog=32 is outside the allowed range [ 0 ... 30 ]
intx Tier23InlineeNotifyFreqLog=32 is outside the allowed range [ 0 ... 30 ]
intx Tier4InvocationThreshold=9223372036854775807 is outside the allowed range [ 0 ... 2147483647 ]
intx Tier4MinInvocationThreshold=9223372036854775807 is outside the allowed range [ 0 ... 2147483647 ]
intx Tier4CompileThreshold=9223372036854775807 is outside the allowed range [ 0 ... 2147483647 ]
intx Tier4BackEdgeThreshold=9223372036854775807 is outside the allowed range [ 0 ... 2147483647 ]
OnStackReplacePercentage cannot be validated because CompileThreshold value is invalid
CompileThreshold (9223372036854775807) must be between 0 and 1073741823
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283013,JDK-8283641,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wh9n:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-28 13:51;iklam;Because of this bug, the following test needs to be disabled after JDK-8283013

--- a/test/hotspot/jtreg/runtime/CommandLine/OptionsValidation/common/optionsvalidation/DoubleJVMOption.java
+++ b/test/hotspot/jtreg/runtime/CommandLine/OptionsValidation/common/optionsvalidation/DoubleJVMOption.java
@@ -127,7 +127,10 @@ public class DoubleJVMOption extends JVMOption {
             validValues.add(formatValue(min));
         }
         if (testMaxRange) {
-            validValues.add(formatValue(max));
+            if (!name.equals(""CompileThresholdScaling"")) {
+                validValues.add(formatValue(max));
+            }
         }
;;;","2022-03-28 15:46;dlong;ILW = can't set flag to unusual values, test failure; 1 test; no workaround = MLH = P4;;;","2022-05-02 05:27;tholenstein;-XX:CompileThresholdScaling=1073741824 is the first value that could not create the VM. The reason is that CompileThresholdScaling scales CompileThreshold which has default value 1 and max. value 1073741823. OnStackReplacePercentage then checks if CompileThreshold is outside its allowed range and stops VM creation when the range is not met. 

But setting the max. allowed value of CompileThreshold to 1073741823 would not fix the problem since it just scales CompileThreshold.
As soon as CompileThreshold is set manually e.g. -XX:CompileThreshold=2 with CompileThresholdScaling=1073741823
the VM would again fail to be created.

CompileThresholdScaling also scaled 15 other thresholds where the VM just prints a warning if the scaled value is too large and then keeps the current value. So I suggest it makes more sense to just do the same for CompileThreshold: Just print a warning ""CompileThreshold is outside the allowed range [ 0 ... 1073741823 ]"" and keep the default value instead of stopping VM creation ;;;","2022-05-02 06:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8501
Date: 2022-05-02 13:17:49 +0000;;;","2022-05-06 00:12;dukebot;Changeset: dd06cc63
Author:    Tobias Holenstein <tobias.holenstein@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-05-06 07:08:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dd06cc638ec54e54cce599f82f37eb56abac2eae
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[BACKOUT] JDK 19 L10n resource files update - msgdrop 10,JDK-8283806,5071100,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,achung,kcr,kcr,2022-03-28 13:46,2022-03-30 17:55,2023-10-01 09:56,2022-03-28 16:39,19,,,,,,,,,19,globalization,,0,regression,regression_8280400,sn_115,,,,,,,,,,,,,,,,"The fix for JDK-8280400 has caused regressions and needs to be backed out. A redo issue has also been filed, JDK-8283805.

See JDK-8283804 for a description of the failures. That bug will be closed as a duplicate of this backout bug.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280400,,,,JDK-8283804,JDK-8283802,JDK-8283805,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wh9f:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@52b4192d,,,,,,,,,"2022-03-28 14:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8005
Date: 2022-03-28 21:20:00 +0000;;;","2022-03-28 16:40;dukebot;Changeset: 634800a5
Author:    Alisen Chung <achung@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2022-03-28 23:37:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/634800a536e7f9d148a4caa2663a60a2c5fc4929
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[REDO] JDK 19 L10n resource files update - msgdrop 10,JDK-8283805,5071099,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,achung,achung,kcr,2022-03-28 13:45,2022-04-25 16:13,2023-10-01 09:56,2022-03-31 16:02,19,,,,,,,,,19,globalization,,0,sn_115,,,,,,,,,,,,,,,,,,"This bug is to track the message drop 10 for JDK 19.

The original fix, JDK-8280400, is being backed out by JDK-8283806. See that bug for more details.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280400,,,,,,,,,,,,JDK-8283802,JDK-8283804,JDK-8283806,JDK-8285618,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wh97:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@52b4192d,,,,,,,,,"2022-03-29 17:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8026
Date: 2022-03-30 00:43:49 +0000;;;","2022-03-29 18:35;dholmes;[~achung] how does the redo differ from the original? I can't see anything that actually states what caused the test failures when the initial version was pushed. Thanks;;;","2022-03-31 13:47;achung;[~dholmes] The changes to open repo were changing jp back to jp-JP in WixLocalization culture (fixes build failure). The change sto closed repo were updating the LocaleData file for LocaleDataTest and readding CNY to Chinese currencyNames (fixes two test fails).;;;","2022-03-31 16:02;dukebot;Changeset: 38df5701
Author:    Alisen Chung <achung@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2022-03-31 22:59:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/38df5701ff82a0c10aa96fb4439e8ef79809055d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Remove jtreg tag manual=yesno for java/awt/print/PrinterJob/PrintGlyphVectorTest.java and fix test,JDK-8283803,5071093,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-03-28 13:07,2022-12-06 01:46,2023-10-01 09:56,2022-04-19 14:11,17,18,,,,,,,,19,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,"There are multiple issue with this test case
1) Parser error due to yesno in @run main/manual=yesno 
2) User can't mark the test as pass or fail, test just passes after taking the print out.",,,,,,,,,,,JDK-8292404,JDK-8292018,JDK-8298159,JDK-8291483,JDK-8290830,JDK-8290977,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284898,JDK-8292230,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wh7v:",9223372036854775807,b19,,,,,,,,,,,"2022-04-14 16:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8004
Date: 2022-03-28 20:23:20 +0000;;;","2022-04-19 14:11;dukebot;Changeset: ed23033d
Author:    lawrence.andrews <87324768+lawrence-andrew@users.noreply.github.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-04-19 21:07:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ed23033dc6b3d4833ce2c8d07f273747ab8ae406
;;;","2022-07-25 08:32;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, only a test change.
I include a test helper file added in JDK-8284535 because 
that is now needed by the test.
Test passes.  SAP nighlty testing passed.;;;","2022-07-25 08:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/596
Date: 2022-07-25 15:28:19 +0000;;;","2022-08-01 02:20;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
No risk, only a test change.
Clean backport from 17. 17 includes a test infra file needed for the backport.
I had to adapt a string literal to make it compile with 11.
Test passes.
In the meantime, I also backported the change that brought the new file, 
so it was dropped by merging from this PR.;;;","2022-08-01 06:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1295
Date: 2022-08-01 09:21:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
JVMTI cleanup: replace VTMT abbreviation with something more intuitive,JDK-8283798,5071088,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,sspitsyn,sspitsyn,2022-03-28 12:10,2022-04-20 19:26,2023-10-01 09:56,2022-04-20 19:26,repo-loom,,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,"This is a suggestion:

[~stefank]: I find the VTMT name so obscure that my mind think it is something obscure that I don’t want to learn about. It also doesn’t help that JVMTI has the same letters. Take this as a hint that maybe some expansion of that name would help casual readers of the code. Maybe just expanding the last T to transition would help.

We can try to replace ""VTMT"" with ""VTMS_transition"" (VTMS transition stands for ""Virtual Thread Mount State transition"" ).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wh6r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-04-20 19:26;sspitsyn;The repo-loom changeset is:
https://github.com/openjdk/loom/commit/50e2c37d6ce970ca131bde412209238f525e67d5;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
start_VTMT and check_suspend_at_safepoint use oops in blocked state,JDK-8283797,5071087,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,sspitsyn,sspitsyn,2022-03-28 12:00,2022-04-01 03:35,2023-10-01 09:56,2022-03-31 08:51,repo-loom,,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,"Below are the cases:

jvmtiThreadState.cpp:
JvmtiVTMTDisabler::start_VTMT(jthread vthread, int callsite_tag) {
   . . .
   while (true) {
      ThreadBlockInVM tbivm(thread);
      MonitorLocker ml(JvmtiVTMT_lock, Mutex::_no_safepoint_check_flag);

      // Do not allow suspends inside VTMT transitions.
      // Block while transitions are disabled or there are suspend requests.
      if (_VTMT_disable_count > 0 ||
          thread->is_suspended() ||
          JvmtiVTSuspender::is_vthread_suspended(vth())  <== ???

jvmtiExport.cpp:
void JvmtiExport::check_suspend_at_safepoint(JavaThread *thread) {
    . . .
    // block while vthread is externally suspended
    while (JvmtiVTSuspender::is_vthread_suspended(vth())) {    <== ???
      ml.wait();
    }
  }
}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283599,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wh6j:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-03-31 05:09;sspitsyn;Problem in start_VTMT was fixed by [~rpressler]:
https://github.com/openjdk/loom/commit/80a9facf97a03e7f2fd2277b51a512891143f5d8

Problem in check_suspend_at_safepoint was fixed by this change set:
https://github.com/openjdk/loom/commit/d8568539edd579e16e4caeaae153fed87c21a14e;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CCE in XRTextRenderer.drawGlyphList and XRMaskFill.MaskFill,JDK-8283794,5071083,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,avu,avu,avu,2022-03-28 09:57,2022-04-27 23:27,2023-10-01 09:56,2022-04-21 03:00,17,18,19,,,,,,,19,client-libs,,0,,,,,,,,,,,,,,,,,,,"Sometimes we get the following exceptions in or products:

java.lang.ClassCastException: sun.java2d.NullSurfaceData cannot be cast to sun.java2d.xr.XRSurfaceData
 at sun.java2d.xr.XRMaskFill.MaskFill(XRMaskFill.java:102)
 at sun.java2d.pipe.AlphaColorPipe.renderPathTile(AlphaColorPipe.java:55)
 at sun.java2d.pipe.AAShapePipe.renderTiles(AAShapePipe.java:201)
 at sun.java2d.pipe.AAShapePipe.fillParallelogram(AAShapePipe.java:102)
 at sun.java2d.pipe.PixelToParallelogramConverter.fillRectangle(PixelToParallelogramConverter.java:322)
 at sun.java2d.pipe.PixelToParallelogramConverter.fillRect(PixelToParallelogramConverter.java:115)
 at sun.java2d.pipe.ValidatePipe.fillRect(ValidatePipe.java:76)
 at sun.java2d.SunGraphics2D.fillRect(SunGraphics2D.java:2423)
 at com.intellij.ui.Graphics2DDelegate.fillRect(Graphics2DDelegate.java:212)
 at com.intellij.openapi.wm.impl.IdeBackgroundUtil$MyGraphics.fillRect(IdeBackgroundUtil.java:210)
 at com.intellij.execution.testframework.TestTreeView.paintRowData(TestTreeView.java:251)
 
java.lang.ClassCastException: sun.java2d.NullSurfaceData cannot be cast to sun.java2d.xr.XRSurfaceData
    at sun.font.XRTextRenderer.drawGlyphList(XRTextRenderer.java:65)
    at sun.java2d.pipe.GlyphListPipe.drawString(GlyphListPipe.java:72)
    at sun.java2d.pipe.ValidatePipe.drawString(ValidatePipe.java:165)
    at sun.java2d.SunGraphics2D.drawString(SunGraphics2D.java:2928)
    at com.intellij.ui.Graphics2DDelegate.drawString(Graphics2DDelegate.java:187)
    at com.intellij.execution.testframework.TestTreeView.paintRowData(TestTreeView.java:264)
    at com.intellij.execution.testframework.TestTreeView.paint(TestTreeView.java:234)
    at javax.swing.JComponent.paintChildren(JComponent.java:889)
    at javax.swing.JComponent.paint(JComponent.java:1065)
    at javax.swing.JViewport.paint(JViewport.java:728)
    at com.intellij.ui.components.JBViewport.paint(JBViewport.java:171)
    at javax.swing.JComponent.paintChildren(JComponent.java:889)
    at javax.swing.JComponent.paint(JComponent.java:1065)
    at javax.swing.JComponent.paintChildren(JComponent.java:889)
    at javax.swing.JComponent.paint(JComponent.java:1065)
    at javax.swing.JComponent.paintChildren(JComponent.java:889)
    at javax.swing.JComponent.paint(JComponent.java:1065)
    at javax.swing.JComponent.paintChildren(JComponent.java:889)
    at javax.swing.JComponent.paint(JComponent.java:1065)
    at javax.swing.JComponent.paintChildren(JComponent.java:889)
    at javax.swing.JComponent.paint(JComponent.java:1065)
    at javax.swing.JComponent.paintChildren(JComponent.java:889)
    at com.intellij.ui.tabs.impl.JBTabsImpl.paintChildren(JBTabsImpl.java:2316)

The problems have been fixed in JB runtime the same way that was done for JDK-8158495 and JDK-7172749 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2wh5n:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-03-29 03:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8015
Date: 2022-03-29 10:44:51 +0000;;;","2022-04-21 03:00;dukebot;Changeset: 90983431
Author:    Alexey Ushakov <avu@openjdk.org>
Date:      2022-04-21 09:56:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/90983431c5493ea32a983bfe948ec8b32a9a28af
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CompilerPhaseTypeHelper::to_bitmask should operate on uint64_t,JDK-8283789,5071077,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-03-28 05:57,2022-03-30 18:03,2023-10-01 09:56,2022-03-30 00:14,19,,,,,,,,,19,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-19,sonarcloud-found,,,,,,,,,,,,,,,"JDK-8281505 added this helper method that operates on uint64_t masks, but it operates on ints. So it is subtly broken on 32-bit platforms, for example. SonarCloud complains about it: ""The result of the left shift is undefined due to shifting by '32', which is greater or equal to the width of type 'int'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281505,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b10,19,,,,,,,"0|i2wh4b:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-28 06:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7994
Date: 2022-03-28 13:02:37 +0000;;;","2022-03-28 15:38;dlong;ILW = incorrect result on 32-bit platform; limited to PrintIdealPhase feature?; no workaround = MLH = P4;;;","2022-03-30 00:14;dukebot;Changeset: 8b656117
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-03-30 07:11:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8b656117dd1521ff23d6039eff7d13ef63a291c8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Update to Visual Studio 2022 version 17.1.0 on Windows,JDK-8283786,5071074,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2022-03-28 05:41,2022-08-23 05:52,2023-10-01 09:56,2022-04-12 07:53,8,jfx19,,,,,,,,jfx19,javafx,,0,3rdparty,noreg-build,sn_115,,,,,,,,,,,,,,,,"We are currently using Visual Studio 2019 version 16.9.3. We should update to Visual Studio 2022 version 17.1.0 to match JDK 19.
",,,,,,,,,,,JDK-8292550,JDK-8290131,JDK-8292179,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252192,,,,,,JDK-8290336,,,,,,JDK-8283723,JDK-8290394,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2wh3n:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-04-02 10:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/766
Date: 2022-04-02 17:34:46 +0000;;;","2022-04-12 07:53;dukebot;Changeset: 6d126382
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-04-12 14:52:34 +0000
URL:       https://git.openjdk.java.net/jfx/commit/6d126382ddd59757081a866517c36ff09ba20125
;;;","2022-08-09 05:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/72
Date: 2022-08-09 12:11:18 +0000;;;","2022-08-17 06:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/104
Date: 2022-08-17 13:30:54 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
java_lang_String::as_platform_dependent_str stores to oop in native state,JDK-8283784,5071073,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,stefank,stefank,2022-03-28 05:33,2023-05-19 01:59,2023-10-01 09:56,2022-03-30 23:57,17,19,,,,,,,,19,hotspot,,0,amazon-interest,,,,,,,,,,,,,,,,,,"In the loom repository I'm experimenting with stricter checks in the Access API to find places where we access oops while in the native or blocked state. Accessing oops in those states are dangerous, because a safepoint can be started and run simultaneously. Some code safeguards this by holding the thread lock, but in places were we don't we need to take a closer look and fix this.

This bug is one that seems to be existing in the upstream repository:

char* java_lang_String::as_platform_dependent_str(Handle java_string, TRAPS) {
  typedef char* (*to_platform_string_fn_t)(JNIEnv*, jstring, bool*);
  static to_platform_string_fn_t _to_platform_string_fn = NULL;

  if (_to_platform_string_fn == NULL) {
    void *lib_handle = os::native_java_library();
    _to_platform_string_fn = CAST_TO_FN_PTR(to_platform_string_fn_t, os::dll_lookup(lib_handle, ""GetStringPlatformChars""));
    if (_to_platform_string_fn == NULL) {
      fatal(""GetStringPlatformChars missing"");
    }
  }

  char *native_platform_string;
  { JavaThread* thread = THREAD;
    jstring js = (jstring) JNIHandles::make_local(thread, java_string());
    bool is_copy;
    HandleMark hm(thread);
    ThreadToNativeFromVM ttn(thread);
    JNIEnv *env = thread->jni_environment();
    native_platform_string = (_to_platform_string_fn)(env, js, &is_copy);
    assert(is_copy == JNI_TRUE, ""is_copy value changed"");
    JNIHandles::destroy_local(js);
  }
  return native_platform_string;
}

The JNIHandles::destroy_local function calls     NativeAccess<>::oop_store(jobject_ptr(handle), (oop)NULL), while inside the scope that has put the thread in the native state. It should probably be moved outside the ThreadToNativeFromVM scope.

This was found with extra verification code in the Access API, while running com/sun/management/HotSpotDiagnosticMXBean/DumpHeap.java.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wh3f:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-29 00:07;dholmes;Thanks! That looks like a valid concern [~stefank] - are those stricter checks going to be checked-in to mainline?;;;","2022-03-29 01:00;dholmes;I examined all other uses of ThreadToNativeFromVM to look for similar issues but did not find anything.;;;","2022-03-29 21:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8030
Date: 2022-03-30 04:24:38 +0000;;;","2022-03-29 22:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8031
Date: 2022-03-30 05:32:14 +0000;;;","2022-03-30 23:57;dukebot;Changeset: c9a469a4
Author:    David Holmes <dholmes@openjdk.org>
Date:      2022-03-31 06:53:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c9a469a4591002e7f51317a8494a2df902db5bfa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
11u GHA: Fix GCC 9 ubuntu package names,JDK-8283778,5071066,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-03-28 03:36,2022-04-12 11:53,2023-10-01 09:56,2022-03-29 01:46,,,,,,,,,,11.0.15,infrastructure,,0,jdk11u-critical-request,jdk11u-critical-yes,,,,,,,,,,,,,,,,,"JDK-8283018 has updated the gcc 9 packages used in GHA for 11u. Looks like the package names aren't correct (any more).

It should be 9.4.0-1ubuntu1~20.04.1 instead of 9.4.0-1ubuntu1~20.04.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284772,JDK-8283018,,,,,,,,,,,,,,,,,,,,,,,,,,11.0.15,,,,,,,"0|i2wh1v:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-03-28 04:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u/pull/36
Date: 2022-03-28 11:30:58 +0000;;;","2022-03-28 04:45;clanger;Fix request (11u)
The patch will unbreak GHA. The package names/versions for gcc9 must have changed recently, so Linux GHAs don't work. I'd like to have this fix in 11u for usable GHA results.
Risk: None. Only Github Actions.;;;","2022-03-29 01:46;roboduke;Changeset: 487c3344
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-03-29 08:44:57 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/487c3344fee3502b4843e7e11acceb77ad16100c
;;;","2022-03-29 23:16;roboduke;Changeset: 487c3344
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-03-29 08:44:57 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/487c3344fee3502b4843e7e11acceb77ad16100c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] TestArrayCopyAsLoadsStores.java triggers assert after merging jdk-19+15,JDK-8283777,5071065,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,dsimms,dsimms,2022-03-28 03:35,2022-06-09 23:12,2023-10-01 09:56,2022-06-09 23:12,repo-valhalla,,,,,,,,,repo-valhalla,hotspot,,0,c2,lw4,lworld,,,,,,,,,,,,,,,,"Bad graph detected in build_loop_late
n:  116  CheckCastPP  ===  285  70  [[ 239  239  232  132  139  232  226  153  180  226  219  219  206  206 ]]  #narrowoop: compiler/arraycopy/TestArrayCopyUtils$A *[int:>=0]:NotNull:exact * !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
early(n):  285  IfFalse  ===  284  [[ 116  280 ]] #0 !orig=[114] !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->in(1):  70  Phi  ===  68  69  67  [[ 116  105  105  120 ]]  #narrowoop: java/lang/Object *[int:5]:NotNull * !orig=[79] !jvms: TestArrayCopyAsLoadsStores::helper17_1 @ bci:19 (line 217) TestArrayCopyAsLoadsStores::m17 @ bci:1 (line 227)
early(n->in(1)):  68  Region  ===  68  62  63  [[ 68  288  70 ]]  !jvms: TestArrayCopyAsLoadsStores::helper17_1 @ bci:19 (line 217) TestArrayCopyAsLoadsStores::m17 @ bci:1 (line 227)
n->in(1)->in(1):  69  ConP  ===  0  [[ 70 ]]  #narrowoop: java/lang/Object *[int:5]<ciObjArray length=5 type=<ciObjArrayKlass name=[Ljava/lang/Object; ident=1286 address=0x00007f1f98489628> ident=1293 address=0x00007f1f9848bb80> *
early(n->in(1)->in(1)):  0  Root  ===  0  124  136  157  274  275  [[ 0  1  3  240  233  36  38  47  54  220  67  69  83  84  85  88  91  95  97  104  119  174  131  143  152  170  168  164  165  292  293  294 ]] inner 
n->in(1)->in(2):  67  ConP  ===  0  [[ 70 ]]  #narrowoop: compiler/arraycopy/TestArrayCopyUtils$A *[int:5]<ciObjArray length=5 type=<ciObjArrayKlass name=[Lcompiler/arraycopy/TestArrayCopyUtils$A; ident=1283 address=0x00007f1f98487de0> ident=1292 address=0x00007f1f9848b398> *
early(n->in(1)->in(2)):  0  Root  ===  0  124  136  157  274  275  [[ 0  1  3  240  233  36  38  47  54  220  67  69  83  84  85  88  91  95  97  104  119  174  131  143  152  170  168  164  165  292  293  294 ]] inner 

LCA(n):  68  Region  ===  68  62  63  [[ 68  288  70 ]]  !jvms: TestArrayCopyAsLoadsStores::helper17_1 @ bci:19 (line 217) TestArrayCopyAsLoadsStores::m17 @ bci:1 (line 227)
n->out(0):  239  AddP  === _  116  116  240  [[ 242 ]]  !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(0)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(0)->out(0):  242  LoadN  ===  194  238  239  [[ 245 ]]  @narrowoop: compiler/arraycopy/TestArrayCopyUtils$A *[int:>=0]:NotNull:exact+any * [narrow], idx=10; #narrowoop: compiler/arraycopy/TestArrayCopyUtils$A * !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(0)->out(0)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(1):  239  AddP  === _  116  116  240  [[ 242 ]]  !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(1)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(1)->out(0):  242  LoadN  ===  194  238  239  [[ 245 ]]  @narrowoop: compiler/arraycopy/TestArrayCopyUtils$A *[int:>=0]:NotNull:exact+any * [narrow], idx=10; #narrowoop: compiler/arraycopy/TestArrayCopyUtils$A * !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(1)->out(0)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(2):  232  AddP  === _  116  116  233  [[ 235 ]]  !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(2)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(2)->out(0):  235  LoadN  ===  194  231  232  [[ 238 ]]  @narrowoop: compiler/arraycopy/TestArrayCopyUtils$A *[int:>=0]:NotNull:exact+any * [narrow], idx=10; #narrowoop: compiler/arraycopy/TestArrayCopyUtils$A * !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(2)->out(0)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(3):  132  CallStaticJava  ===  289  6  7  8  9 ( 131  1  1  1  1  116  83  84 ) [[ 133 ]] # Static uncommon_trap(reason='intrinsic_or_type_checked_inlining' action='maybe_recompile' debug_id='0')  void ( int ) C=0,000100 TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) reexecute TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228) !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(3)->out(0):  133  Proj  ===  132  [[ 136 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(4):  139  SubTypeCheck  === _  116  91  [[ 279 ]]  !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(4)):  285  IfFalse  ===  284  [[ 116  280 ]] #0 !orig=[114] !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(4)->out(0):  279  Bool  === _  139  [[ 280 ]] [ne]
later(n->out(4)->out(0)):  285  IfFalse  ===  284  [[ 116  280 ]] #0 !orig=[114] !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(5):  232  AddP  === _  116  116  233  [[ 235 ]]  !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(5)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(5)->out(0):  235  LoadN  ===  194  231  232  [[ 238 ]]  @narrowoop: compiler/arraycopy/TestArrayCopyUtils$A *[int:>=0]:NotNull:exact+any * [narrow], idx=10; #narrowoop: compiler/arraycopy/TestArrayCopyUtils$A * !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(5)->out(0)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(6):  226  AddP  === _  116  116  143  [[ 228 ]]  !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(6)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(6)->out(0):  228  LoadN  ===  194  225  226  [[ 231 ]]  @narrowoop: compiler/arraycopy/TestArrayCopyUtils$A *[int:>=0]:NotNull:exact+any * [narrow], idx=10; #narrowoop: compiler/arraycopy/TestArrayCopyUtils$A * !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(6)->out(0)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(7):  153  CallStaticJava  ===  282  6  7  8  9 ( 152  1  1  1  1  116  83  84 ) [[ 154 ]] # Static uncommon_trap(reason='class_check' action='make_not_entrant' debug_id='0')  void ( int ) C=0,000100 TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) reexecute TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228) !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(7)->out(0):  154  Proj  ===  153  [[ 157 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(8):  180  AllocateArray  ===  281  6  7  8  1 ( 175  91  36  83 _ _ _  38  1  1  1  1  116  83  84 ) [[ 181  182  183  190  191  192 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, int, bottom, java/lang/Object:NotNull *, long, bool ) TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) reexecute TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228) !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(8)->out(0):  181  Proj  ===  180  [[ 184 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(9):  226  AddP  === _  116  116  143  [[ 228 ]]  !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(9)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(9)->out(0):  228  LoadN  ===  194  225  226  [[ 231 ]]  @narrowoop: compiler/arraycopy/TestArrayCopyUtils$A *[int:>=0]:NotNull:exact+any * [narrow], idx=10; #narrowoop: compiler/arraycopy/TestArrayCopyUtils$A * !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(9)->out(0)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(10):  219  AddP  === _  116  116  220  [[ 222 ]]  !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(10)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(10)->out(0):  222  LoadN  ===  194  217  219  [[ 225 ]]  @narrowoop: compiler/arraycopy/TestArrayCopyUtils$A *[int:>=0]:NotNull:exact+any * [narrow], idx=10; #narrowoop: compiler/arraycopy/TestArrayCopyUtils$A * !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(10)->out(0)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(11):  219  AddP  === _  116  116  220  [[ 222 ]]  !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(11)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(11)->out(0):  222  LoadN  ===  194  217  219  [[ 225 ]]  @narrowoop: compiler/arraycopy/TestArrayCopyUtils$A *[int:>=0]:NotNull:exact+any * [narrow], idx=10; #narrowoop: compiler/arraycopy/TestArrayCopyUtils$A * !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(11)->out(0)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(12):  206  AddP  === _  116  116  88  [[ 214 ]]  !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(12)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(12)->out(0):  214  LoadN  ===  194  195  206  [[ 217 ]]  @narrowoop: compiler/arraycopy/TestArrayCopyUtils$A *[int:>=0]:NotNull:exact+any * [narrow], idx=10; #narrowoop: compiler/arraycopy/TestArrayCopyUtils$A * !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(12)->out(0)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(13):  206  AddP  === _  116  116  88  [[ 214 ]]  !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(13)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
n->out(13)->out(0):  214  LoadN  ===  194  195  206  [[ 217 ]]  @narrowoop: compiler/arraycopy/TestArrayCopyUtils$A *[int:>=0]:NotNull:exact+any * [narrow], idx=10; #narrowoop: compiler/arraycopy/TestArrayCopyUtils$A * !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
later(n->out(13)->out(0)):  194  Proj  ===  193  [[ 274  197  242  258  217  214  225  222  231  228  238  235  245 ]] #0 !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)

idoms of early 285:
idom[0]  285  IfFalse  ===  284  [[ 116  280 ]] #0 !orig=[114] !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
idom[1]  284  If  ===  290  283  [[ 285  286 ]] P=0,000000, C=-1,000000 !orig=[113] !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
idom[2]  290  IfTrue  ===  288  [[ 284 ]] #1 !orig=[102] !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
idom[3]  288  If  ===  68  287  [[ 289  290 ]] P=0,500000, C=-1,000000 !orig=[100] !jvms: TestArrayCopyAsLoadsStores::helper17_2 @ bci:4 (line 221) TestArrayCopyAsLoadsStores::m17 @ bci:6 (line 228)
idom[4]  68  Region  ===  68  62  63  [[ 68  288  70 ]]  !jvms: TestArrayCopyAsLoadsStores::helper17_1 @ bci:19 (line 217) TestArrayCopyAsLoadsStores::m17 @ bci:1 (line 227)
idom[5]  61  If  ===  5  60  [[ 62  63 ]] P=0,500074, C=6785,000000 !jvms: TestArrayCopyAsLoadsStores::helper17_1 @ bci:5 (line 212) TestArrayCopyAsLoadsStores::m17 @ bci:1 (line 227)
idom[6]  5  Parm  ===  3  [[ 61 ]] Control !jvms: TestArrayCopyAsLoadsStores::m17 @ bci:-1 (line 227)

idoms of (wrong) LCA 68:
idom[0]  68  Region  ===  68  62  63  [[ 68  288  70 ]]  !jvms: TestArrayCopyAsLoadsStores::helper17_1 @ bci:19 (line 217) TestArrayCopyAsLoadsStores::m17 @ bci:1 (line 227)
idom[1]  61  If  ===  5  60  [[ 62  63 ]] P=0,500074, C=6785,000000 !jvms: TestArrayCopyAsLoadsStores::helper17_1 @ bci:5 (line 212) TestArrayCopyAsLoadsStores::m17 @ bci:1 (line 227)
idom[2]  5  Parm  ===  3  [[ 61 ]] Control !jvms: TestArrayCopyAsLoadsStores::m17 @ bci:-1 (line 227)

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/loopnode.cpp:6023
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla2/open/src/hotspot/share/opto/loopnode.cpp:6023), pid=643260, tid=643273
#  assert(real_LCA != __null) failed: must always find an LCA
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (fastdebug build 19-lworld3ea-2021-10-19-1138180.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-lworld3ea-2021-10-19-1138180.tobias..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1446247]  PhaseIdealLoop::dump_real_LCA(Node*, Node*)+0x5a7
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /oracle/valhalla2/open/JTwork/scratch/hs_err_pid643260.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wh1n:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-09 07:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/710
Date: 2022-06-09 14:20:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestZoneOffset::test_immutable should ignore ZoneOffset::rules,JDK-8283774,5071062,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,redestad,redestad,redestad,2022-03-28 03:20,2022-07-26 09:05,2023-10-01 09:56,2022-03-29 02:40,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,"JDK-8283681 added a transient cache field, rules, which causes TestZoneOffset to fail. Enhance test_immutable to be able to ignore fields. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283716,JDK-8286710,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wh0z:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2022-03-28 03:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7989
Date: 2022-03-28 10:35:04 +0000;;;","2022-03-29 02:40;dukebot;Changeset: cc598e03
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2022-03-29 09:38:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cc598e03de39dd6e8d7e208a69d85b6a9cd0062f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
(zipfs) ZipFSOutputStreamTest.testOutputStream should only check inflated bytes,JDK-8283756,5071045,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,simonis,simonis,simonis,2022-03-28 00:57,2023-07-24 21:53,2023-10-01 09:56,2022-03-28 06:42,,,,,,,,,,19,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,"The test ZipFSOutputStreamTest deflates content into a zip file system and subsequently inflates the deflated files and checks their content against the original data.

The content consists of a data stream of bytes with the value `42`.

The check currently compares the temporary inflation buffer with the original source buffer, no matter how many bytes were inflated into the inflation buffer. This can lead to problems with alternative zlib implementations which sometimes write beyond the last inflated byte (see JDK-8282648 for more details).

The fix is trivial. Only compare as many bytes as have been inflated against the original content.",,,,,,,,,,,JDK-8309818,JDK-8312677,JDK-8309589,JDK-8311859,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282648,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wgx7:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-03-28 01:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7984
Date: 2022-03-28 08:04:59 +0000;;;","2022-03-28 06:42;dukebot;Changeset: 0c472c8a
Author:    Volker Simonis <simonis@openjdk.org>
Date:      2022-03-28 13:41:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0c472c8a4ff01b3bc8fba5df82c24c240586e5c5
;;;","2023-06-06 00:23;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well, because the issue is present there too. The backport is clean and low risk.;;;","2023-06-06 00:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1416
Date: 2023-06-06 07:22:21 +0000;;;","2023-06-07 00:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1937
Date: 2023-06-07 07:51:07 +0000;;;","2023-06-09 03:21;mbaesken;jdk11 backport request
I would like to have the patch in jdk11 as well, because the issue is present there too. The backport is clean and low risk.;;;",,,,,,,,,,,,,,,,,,,,,,,,
C1: Convert flag TwoOperandLIRForm to a constant on all platforms,JDK-8283740,5070457,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfenacci,webbuggrp,webbuggrp,2022-03-16 19:36,2022-12-21 17:23,2023-10-01 09:56,2022-12-19 00:50,11,18,19,8,,,,,,21,hotspot,,0,c1,dcsswa,oracle-triage-19,reproducer-yes,starter,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS: ubuntu18.04
$ java -version
openjdk version ""11.0.15-internal"" 2022-04-19
OpenJDK Runtime Environment (fastdebug build 11.0.15-internal+0-adhoc.user.jdk11u)
OpenJDK 64-Bit Server VM (fastdebug build 11.0.15-internal+0-adhoc.user.jdk11u, compiled mode

A DESCRIPTION OF THE PROBLEM :
Run arbitrary program with -XX:-TwoOperandLIRForm, VM crashes with bug report:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/user/jdk_source/jdk11u/src/hotspot/share/c1/c1_LIR.hpp:413), pid=52625, tid=52792
#  assert(is_single_cpu() && !is_virtual()) failed: type check
#
# JRE version: OpenJDK Runtime Environment (11.0.15) (fastdebug build 11.0.15-internal+0-adhoc.user.jdk11u)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 11.0.15-internal+0-adhoc.user.jdk11u, compiled mode, tiered, compressed oops, g1 gc, linux-amd64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
Host: wen-PowerEdge-R740, Intel(R) Xeon(R) Gold 6248R CPU @ 3.00GHz, 96 cores, 251G, Ubuntu 18.04.6 LTS
Time: Thu Mar 17 09:47:45 2022 CST elapsed time: 0.234313 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007f8518694800):  JavaThread ""C1 CompilerThread0"" daemon [_thread_in_native, id=52792, stack(0x00007f849f16a000,0x00007f849f26b000)]


Current CompileTask:
C1:    234    5    b  3       java.lang.invoke.MethodHandleStatics::<clinit> (204 bytes)

Stack: [0x00007f849f16a000,0x00007f849f26b000],  sp=0x00007f849f268b40,  free space=1018k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x18de9ca]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x1ca
V  [libjvm.so+0x18dfabf]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x2f
V  [libjvm.so+0xb4cb80]  report_vm_error(char const*, int, char const*, char const*, ...)+0x100
V  [libjvm.so+0x7a49c0]  LIR_OprDesc::as_register() const+0x60
V  [libjvm.so+0x7c68ac]  LIR_Assembler::logic_op(LIR_Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*)+0x2ec
V  [libjvm.so+0x7b3196]  LIR_Assembler::emit_lir_list(LIR_List*)+0xb6
V  [libjvm.so+0x7b40c8]  LIR_Assembler::emit_code(BlockList*)+0x158
V  [libjvm.so+0x7505c3]  Compilation::emit_code_body()+0x1e3
V  [libjvm.so+0x750d8d]  Compilation::compile_java_method()+0x59d
V  [libjvm.so+0x751a94]  Compilation::compile_method()+0x1d4
V  [libjvm.so+0x752667]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*)+0x357
V  [libjvm.so+0x75485c]  Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)+0x14c
V  [libjvm.so+0xa7e2d0]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x390
V  [libjvm.so+0xa7f298]  CompileBroker::compiler_thread_loop()+0x418
V  [libjvm.so+0x181006b]  JavaThread::thread_main_inner()+0x20b
V  [libjvm.so+0x180bea5]  Thread::call_run()+0x75
V  [libjvm.so+0x151cb06]  thread_native_entry(Thread*)+0x106


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
java -Xcomp -XX:-TwoOperandLIRForm -version

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
openjdk version ""11.0.15-internal"" 2022-04-19
OpenJDK Runtime Environment (fastdebug build 11.0.15-internal+0-adhoc.user.jdk11u)
OpenJDK 64-Bit Server VM (fastdebug build 11.0.15-internal+0-adhoc.user.jdk11u, compiled mode
ACTUAL -
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/c1_LIR.hpp:413
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/user/jdk_source/jdk11u/src/hotspot/share/c1/c1_LIR.hpp:413), pid=97885, tid=98076
#  assert(is_single_cpu() && !is_virtual()) failed: type check
#
# JRE version: OpenJDK Runtime Environment (11.0.15) (fastdebug build 11.0.15-internal+0-adhoc.user.jdk11u)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 11.0.15-internal+0-adhoc.user.jdk11u, compiled mode, tiered, compressed oops, g1 gc, linux-amd64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283446,,,,,,"2022-03-21 02:19;fmatte;hs_err_pid21420.log;https://bugs.openjdk.org/secure/attachment/98341/hs_err_pid21420.log","2022-03-21 02:19;fmatte;replay_pid21420.log;https://bugs.openjdk.org/secure/attachment/98342/replay_pid21420.log",,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wdar:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-20 23:54;sswsharm;Duplicate submission of https://bugs.openjdk.java.net/browse/JI-9072845;;;","2022-03-21 01:40;fmatte;I don't think they are same...;;;","2022-03-21 02:17;fmatte;Issue is reproducible on latest jdk19 build also,

./build/linux-x64-debug/jdk/bin/java  -Xcomp -XX:-TwoOperandLIRForm -version
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/c1_LIR.hpp:433
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/tank/fmatte/repos/git/jdk/open/src/hotspot/share/c1/c1_LIR.hpp:433), pid=21420, tid=21484
#  assert(is_single_cpu() && !is_virtual()) failed: type check
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (fastdebug build 19-internal-2022-03-21-0843011.fmatte...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-internal-2022-03-21-0843011.fmatte..., compiled mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x7be2b2]  LIR_Opr::as_register() const+0x42
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /tank/fmatte/repos/git/jdk/core.21420)
#
# An error report file with more information is saved as:
# /tank/fmatte/repos/git/jdk/hs_err_pid21420.log
#
# Compiler replay data is saved as:
# /tank/fmatte/repos/git/jdk/replay_pid21420.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted (core dumped);;;","2022-03-28 05:02;chagedorn;ILW = C1 assertion in LIR generation with develop flag TwoOperandLIRForm, rare?, use -XX:+TwoOperandLIRForm = MLM = P4;;;","2022-03-28 05:20;chagedorn;The flag seems to be broken since JDK 8 when running a simple HelloWorld program.;;;","2022-03-29 05:58;chagedorn;There are other assertion failures:

$ java -Xcomp -XX:CompileCommand=compileonly,java.util.concurrent.ConcurrentHashMap::tabAt -XX:-TwoOperandLIRForm --version

Results in:
assert(left == dest) failed: left and dest must be equal

It looks like this flag was not actively been used/tested for quite a while. However, we cannot simply remove this flag since some platforms set this flag to true (x86, s390) while others to false (arm, aarch64, ppc, riscv) by default.

If it turns out that fixing the failures with non-default flag values is too complex, we could think about hardcoding the default values for the different architectures as it is a develop flag.;;;","2022-03-29 10:40;kvn;I think bug's subject should mention that failure happened when TwoOperandLIRForm flag is switched off on x86. The flag was added by JDK-6320351 with new RA for C1. I think originally it was used to distinguish code generation for different platforms (x64 an Sparc at that time) and never for switching of a ""feature"".

Per our discussion today we should replace this DEVELOP flag with constant which is set accordingly for different platforms.;;;","2022-03-29 17:57;dlong;I agree with [~kvn].

I can think of only two (dubious) scenarios where keeping it a flag might be useful:
1. Switching between 2- and 3-operand instructions on some theoretical platform that supports both
2. Force testing 2-operand LIR on a platform that supports 3-operand instructions;;;","2022-03-30 00:13;chagedorn;Thanks [~kvn] for the background. Would make sense that this was the original intention of the flag. Because I've just tried out -XX:+TwoOperandLIRForm --version on an aarch64 machine where the default is false and I hit the following assertion:

assert(in_opr1() == result_opr() || threeOperandForm) failed: opr1 and result must match

This supports this assumption. I'll update the bug title.;;;","2022-03-30 00:23;chagedorn;[~dlong] Could we use a constant value on platforms that must use one of the forms and keep the flag available for platforms that support both? About (2), should this always work? Looks like aarch64 should support 2-operand LIR by looking at the assertion posted above with ""|| threeOperandForm"".;;;","2022-03-31 20:27;dlong;> Could we use a constant value on platforms that must use one of the forms and keep the flag available for platforms that support both?

[~chagedorn], I guess we could, but I don't think it's worth it.  I was just speculating if there could be reasons for keeping the flag settable at runtime.  But really I don't think those scenarios are realistic, and if someone wanted to do that they could change the constant value and rebuild, right?  So forget what I said, let's make it a constant on all platforms.;;;","2022-04-01 00:25;chagedorn;Right, I agree with you. Then let's make this a constant on all platforms. I've updated the bug title accordingly.;;;","2022-12-16 01:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11671
Date: 2022-12-14 12:51:58 +0000;;;","2022-12-19 00:50;dukebot;Changeset: 86d588b0
Author:    Damon Fenacci <damon.fenacci@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-12-19 08:48:41 +0000
URL:       https://git.openjdk.org/jdk/commit/86d588b035d09141d807dbed6b91d9909782d61a
;;;",,,,,,,,,,,,,,,,
riscv: MacroAssembler::stop() should emit fixed-length instruction sequence,JDK-8283737,5071031,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xlinzheng,xlinzheng,xlinzheng,2022-03-27 21:32,2022-03-30 18:03,2023-10-01 09:56,2022-03-30 02:13,19,,,,,,,,,19,hotspot,,0,oracle-triage-19,,,,,,,,,,,,,,,,,,"PhaseOutput::fill_buffer detects if the real size of a node matches (<=) the size of it in scratch_emit(). The call chain for MacroAssembler::stop() is:

```
MachEpilogNode::emit
    -> reserved_stack_check()
         -> should_not_reach_here()
              -> stop(const char *msg)
```

li() on RISCV could generate 1~6 instructions, and the msg argument could be an on-stack buffer; it uses __ pc() that could also be different in scratch_emit() and emit(). They both have the potential issue here so the size generated in MacroAssembler::stop() needs to be a fixed value.

Could be reproduced in fastdebug build:

```
// Die now.
instruct ShouldNotReachHere() %{
  match(Halt);
  ins_cost(BRANCH_COST);
  format %{ ""#@ShouldNotReachHere"" %}
  ins_encode %{
    Assembler::CompressibleRegion cr(&_masm);
    if (is_reachable()) {
      __ halt();
+     __ unimplemented(""this is an on-stack char literal"");  // assertion fail at 'assert(false, ""wrong size of mach node"");'
    }
  %}
  ins_pipe(pipe_class_default);
%}
```

Tests passed in hotspot tier1 & jdk tier1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,"0|i2wgu3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-27 21:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7982
Date: 2022-03-28 04:41:11 +0000;;;","2022-03-28 15:49;dlong;ILW = potential assert/crash; never seen?; no workaround = MLH = P4;;;","2022-03-28 19:44;xlinzheng;Thanks for updating information of this JBS issue, Dean and Felix :-);;;","2022-03-30 02:08;dukebot;Changeset: b82b0090
Author:    Xiaolin Zheng <xlinzheng@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-03-30 09:04:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b82b0090474d1873ec8a42a3bfc71de972782e78
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
jdk.hotspot.agent: Wrong location for RISCV64ThreadContext.java,JDK-8283728,5071020,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-03-27 01:56,2022-03-30 17:59,2023-10-01 09:56,2022-03-28 03:03,19,,,,,,,,,19,hotspot,,0,noreg-trivial,,,,,,,,,,,,,,,,,,"JDK-8276799 added class sun.jvm.hotspot.debugger.riscv64.RISCV64ThreadContext but placed it in a wrong location: src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/risv64/RISCV64ThreadContext.java
should be: src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/riscv64/RISCV64ThreadContext.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276799,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wgrn:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-03-27 02:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7977
Date: 2022-03-27 08:59:40 +0000;;;","2022-03-28 03:03;dukebot;Changeset: f4eaa16c
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-03-28 09:59:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f4eaa16c0fe0659376325cec1c912a13ef0f1be8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
P11KeyGenerator has import statement with two semicolons after JDK-8267319,JDK-8283727,5071018,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-03-27 01:45,2022-03-30 17:59,2023-10-01 09:56,2022-03-28 02:50,19,,,,,,,,,19,security-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,,"JDK-8267319 left a double semicolon in line 33:
import sun.security.util.SecurityProviderConstants;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267319,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wgr7:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2022-03-27 01:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7976
Date: 2022-03-27 08:48:12 +0000;;;","2022-03-28 02:50;dukebot;Changeset: cdef087a
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-03-28 09:49:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cdef087aae5d0edb3ad3421107d7dc2b5e18dd28
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Launching java with ""-Xlog:gc*=trace,safepoint*=trace,class*=trace"" crashes the JVM",JDK-8283725,5071015,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,jpai,jpai,2022-03-26 21:17,2022-05-05 11:42,2023-10-01 09:56,2022-03-30 23:57,17,18,19,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,logging,sap-interest,,,,,,,,,,,,"Consider the following trivial command:

java ""-Xlog:gc*=trace,safepoint*=trace,class*=trace"" -version

This results in a JVM crash:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (logOutput.cpp:266), pid=16136, tid=9219
#  guarantee(n_selections > 0) failed: Cannot find maximal selection.
#
# JRE version:  (17.0.2+8) (build )
# Java VM: OpenJDK 64-Bit Server VM (17.0.2+8-86, mixed mode, sharing, tiered, unknown gc, bsd-aarch64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /private/tmp/hs_err_pid16136.log
#
#

The complete hs_err log is attached to this issue.

The above error was reproduced on a Mac M1 with 12.2.1 version of the OS, against a Java 17 instance. This is also reproducible against latest master branch of JDK.

Do note that it's the combination of gc, class and safepoint tags which triggers this. Using each of them individually (like gc*=trace) or as a couple (like gc*=trace,safepoint*=trace) doesn't cause any crash.",,,,,,,,,,,JDK-8286225,JDK-8285723,JDK-8284817,JDK-8285738,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-03-26 21:18;jpai;hs_err_pid16136.log.txt;https://bugs.openjdk.org/secure/attachment/98378/hs_err_pid16136.log.txt",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wgqj:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-27 17:04;dholmes;The crash will only happen when the logically expanded set of tags exceeds some threshold. The example given crashes with java 17 product, but not java 16. It crashes on mainline product, but not fastdebug, but if we add ""os*=trace"" then it also crashes in fastdebug.;;;","2022-03-27 18:24;dholmes;I think the loop termination condition in LogOutput::update_config_string is not quite correct. We process deviating tagsets** until there are no more - tracking n_deviants and n_selections. However, we can reach the case where n_deviants == 1 and there are no further selections possible -  add_selections finds no more subsets for the given tagset. This causes the guarantee to fire as it expects to see selections as long as we still have deviations. We can fix this by adding a new check at the bottom of the loop:

    if (n_deviates == 1 && n_selections == 0) {
      // we're done as we couldn't reduce things any further
      break;
    }

I do not know what  a ""deviating tagset"" means so it is unclear whether the bug is not checking for this ""1 and 0"" case, or whether the bug is that we got that final 0.;;;","2022-03-27 19:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7978
Date: 2022-03-28 01:33:51 +0000;;;","2022-03-30 18:41;dholmes;Interestingly I couldn't trigger this on 11, though the code seems identical. I'm going to assume that it is the set of available tags that affects the ability to trigger the bug.;;;","2022-03-30 23:57;dukebot;Changeset: 1ca0ede6
Author:    David Holmes <dholmes@openjdk.org>
Date:      2022-03-31 06:55:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1ca0ede60d961a1355397f27fd78a177432c7bc3
;;;","2022-04-01 05:44;stuefe;I cannot reproduce this in jdk17u. Are you sure this affects jdk 17?;;;","2022-04-01 18:38;jpai;Hello Thomas,

Although I haven't tried the jdk17u repository, my initial tests attempts did include Java 17 release. I just went back and tried it again with Java 17 release and it does crash. Details below:

./java --version                                                
openjdk 17.0.2 2022-01-18
OpenJDK Runtime Environment (build 17.0.2+8-86)
OpenJDK 64-Bit Server VM (build 17.0.2+8-86, mixed mode, sharing)

./java ""-Xlog:gc*=trace,safepoint*=trace,class*=trace"" --version

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (logOutput.cpp:266), pid=40397, tid=6915
#  guarantee(n_selections > 0) failed: Cannot find maximal selection.
#
# JRE version:  (17.0.2+8) (build )
# Java VM: OpenJDK 64-Bit Server VM (17.0.2+8-86, mixed mode, sharing, tiered, unknown gc, bsd-aarch64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# ajdk-17.0.2.jdk/Contents/Home/bin/hs_err_pid40397.log
#
#

;;;","2022-04-11 23:30;dholmes;[~stuefe] The Description shows the crash in 17.0.2;;;","2022-04-12 04:31;stuefe;Fix Request:

I'd like to downport this fix to 17u. I cannot reproduce it in 17.0.4, but the error is clearly there. Patch applies cleanly and is low-risk.;;;","2022-04-13 03:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/347
Date: 2022-04-12 07:37:33 +0000;;;","2022-04-27 06:01;hseigel;Fix Request

This fix should be backported to JDK-18u to prevent the failure described in the bug.  The fix is very small and low risk.  The patch applied cleanly and was tested with Mach5 tiers 1-2.
;;;","2022-04-27 10:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/112
Date: 2022-04-27 17:11:10 +0000;;;",,,,,,,,,,,,,,,,,,
java/util/logging/CheckZombieLockTest.java failing intermittently,JDK-8283719,5071007,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,alanb,alanb,2022-03-26 02:28,2023-09-26 06:17,2023-10-01 09:56,2022-04-11 06:44,19,repo-loom,,,,,,,,19,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,"This test is failing frequently in the loom repo, both with and without the jtreg main wrapper. The typical output is:

----------System.out:(24/1324)----------
Writable dir is: /testoutput/test-support/jtreg_open_test_jdk_jdk_util/tmp/writable-lockfile-dir
before: 0 locks found
handler created: java.util.logging.FileHandler@50bbb838
Found file: log.log.lck
Found file: log.log
after creating handler: 1 locks found
Found file: log.log
after closing handler: 0 locks found
Found file: log.log
Found file: log.log.lck
before: 1 locks found
handler created: java.util.logging.FileHandler@1615f0bf
Found file: log.log
Found file: log.log.lck
after creating handler: 1 locks found
handler closed: java.util.logging.FileHandler@1615f0bf
Found file: log.log
after closing handler: 0 locks found
locked: /testoutput/test-support/jtreg_open_test_jdk_jdk_util/tmp/writable-lockfile-dir/log.log.lck
handler created: java.util.logging.FileHandler@fe2e7ec
Found file: log.log
Found file: log.log.lck
after creating handler: 1 locks found
end: 0 locks found
----------System.err:(16/2176)----------
WARNING: unable to delete/cleanup writable test directory: /testoutput/test-support/jtreg_open_test_jdk_jdk_util/tmp/writable-lockfile-dir
java.lang.RuntimeException: Unexpected lock files found: []
	/testoutput/test-support/jtreg_open_test_jdk_jdk_util/tmp/writable-lockfile-dir/log.log.lck should not have been reused
	at CheckZombieLockTest.testFileHandlerReuse(CheckZombieLockTest.java:257)
	at CheckZombieLockTest.runTests(CheckZombieLockTest.java:105)
	at CheckZombieLockTest.main(CheckZombieLockTest.java:78)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1532)",,,,,,,,,,,JDK-8300276,JDK-8299442,JDK-8299443,JDK-8316956,JDK-8300277,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wgor:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3cc899dc,,,,,,,,,"2022-04-08 04:49;dfuchs;I suspect that the FileChannel created at line 244 is being GC'ed too early - which would release the lock. Adding a reachability fence to prevent this, or even better, using try-with-resource, should fix the issue. I will work on a patch.;;;","2022-04-08 09:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8168
Date: 2022-04-08 16:37:07 +0000;;;","2022-04-11 06:44;dukebot;Changeset: 74835f73
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-04-11 13:43:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/74835f73893976c162ef5a441f0cfec16eb8706f
;;;","2023-01-16 08:58;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.19-oracle,17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test passes.;;;","2023-01-16 09:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1072
Date: 2023-01-16 17:01:42 +0000;;;","2023-01-16 09:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1664
Date: 2023-01-16 17:02:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
vmTestbase/nsk/jdi/ThreadStartEvent/thread/thread001 failed due to SocketTimeoutException ,JDK-8283717,5071005,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,cjplummer,cjplummer,cjplummer,2022-03-25 22:58,2023-01-16 23:35,2023-10-01 09:56,2022-03-29 11:38,19,repo-loom,,,,,,,,19,core-svc,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,"I saw this once in Loom when the test was run with the vthread wrapper:

Sending command: quit
IOPipe> Caught InterruptedIOException. Wait start time: 1648259211810, exception was thrown at: 1648259511902, wait time: 300092, actual timeout: 300000
# ERROR: IOPipe> Caught InterruptedIOException while listening for PipeIO Listener Thread connection at port 36147:
# ERROR: 	java.net.SocketTimeoutException: Accept timed out
The following stacktrace is for failure analysis.
nsk.share.TestFailure: IOPipe> Caught InterruptedIOException while listening for PipeIO Listener Thread connection at port 36147:  java.net.SocketTimeoutException: Accept timed out
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.Log$Logger.complain(Log.java:743)
	at nsk.share.jpda.BasicSocketConnection.accept(SocketConnection.java:173)
	at nsk.share.jpda.SocketConnection.accept(SocketConnection.java:453)
	at nsk.share.jpda.SocketIOPipe$ListenerThread.run(SocketIOPipe.java:225)

Basically the test is nearing completion after passing. It is sending the ""quit"" command to the debuggee, but that IO operation times out. I think I understand why.

At the end of the log there is a dump of all debuggee threads that is done before killing the debuggee (a feature of jdi test infra when there is a failure like this). It shows that every thread is suspended. This means that the debuggee can't even receive the ""quit"" command on the IOPipe it has setup to communicate with the debugger side. I believe the reason why is because just a bit before sending the ""quit"" the debugger does the following:

            // disable event request to prevent appearance of further events
            if (checkedRequest != null) {
                log.display(""Disabling event request"");
                checkedRequest.disable();
            }

And then right after this:

            // force debuggee to quit
            log.display(""Sending command: "" + COMMAND_QUIT);
            pipe.println(COMMAND_QUIT);

checkedRequest is the ThreadStartRequest that test is using to make sure it gets a ThreadStartEvent for at least the debuggee main and the two threads the debuggee starts up. Once it gets these 3 ThreadStartEvents, it does the above to disable the ThreadStartRequest and terminate the debuggee. The problem is that there can still be other threads created after this point. This is especially true of loom where main carrier threads can be started up once the first vthread is created. As proof, the test only sees ThreadStartEvents for 3 carrier threads, yet the thread dump includes a 4th. Also, a total of 12 carrier threads should eventually be started since the host has 12 cores, so they clearly are still in the process of being started. In passing test cases the test sees all 12 carrier threads being started.

Since this late ThreadStartEvent comes in after all the expected ThreadStartEvents have been received, it is never processed. Since the SUSPEND_ALL policy is in affect for the ThreadStartRequest, this late ThreadStartEvent causes all the debuggee threads to be suspended, and there is no code to resume them before sending the ""quit"" command.

When processing events the test normally does the following to get the next batch of events:

   eventSet = vm.eventQueue().remove();

and then the the following to make sure all threads are resumed after the events are processed:

   eventSet.resume();

We could have the test do this before sending ""quit"", but I think a much simpler solution is probably just to unconditionally call vm.resume().",,,,,,,,,,,JDK-8300232,JDK-8298158,JDK-8300233,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-03-25 23:01;cjplummer;thread001.jtr;https://bugs.openjdk.org/secure/attachment/98377/thread001.jtr",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wgob:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-03-26 00:33;cjplummer;It easy to reproduce this bug by introducing a sleep(5000) right before the checkedRequest.disable() call. Putting a vm.resume() right after the checkedRequest.disable() call fixes the issue.;;;","2022-03-28 12:02;cjplummer;Fixing this in jdk mainline instead of loom because it is not necessarily loom specific.;;;","2022-03-28 13:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8003
Date: 2022-03-28 19:58:59 +0000;;;","2022-03-29 11:38;dukebot;Changeset: f9f439a1
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-03-29 18:37:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f9f439a19d11501cfa77db065051086ab794e9f4
;;;","2023-01-16 08:53;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.19-oracle/17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nighlty testing passed.;;;","2023-01-16 09:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1071
Date: 2023-01-16 16:52:01 +0000;;;","2023-01-16 09:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1663
Date: 2023-01-16 16:53:00 +0000;;;","2023-01-16 12:13;clanger;Not part of 11.0.19-oracle so far but probably makes sense nonetheless.;;;",,,,,,,,,,,,,,,,,,,,,,
REDO - Unexpected TypeElement in ANALYZE TaskEvent,JDK-8283714,5071000,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-03-25 15:23,2022-04-13 23:04,2023-10-01 09:56,2022-04-12 16:35,18,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,"In JavaCompiler, line 1308, 1993, if there are task listeners registered, they will be called with an ANALYZE TaskEvent.

For most files, this is good and works well.

But, for package-info and module-info files, the type element is set to a shared anonymous class, syms.predefClass.  Since there is no other way in a task listener to get at the module element or module-info class, or the package element or package-info class, it would be better if the type element in the TaskEvent object was set to the symbol for `module-info` or `package-info` as appropriate.

I've attached a patch for a possible fix, which works by detecting the type of compilation unit.  There may be better ways to fix this, perhaps by modifying the info in the env in some way. But the patch is simple and localized, so relatively low risk and low cost.

But by itself the patch is not enough, and uncovers a separate bug, for which I do not have a proposed fix.  If the patch is applied, and a task listener calls `Elements.getModuleOf` or `Elements.getPackageOf` on the type element for module-info, the compiler crashes with NPE, because the call of sym.packge() in JavacElements.getModuleOf:459 returns null. The equivalent call in `getPackageOf` crashes with NPE for the same reason.

I believe the Elements.getModuleOf and Elements.getPackageOf calls on the type element for package-info work OK, but that should be verified.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283661,,,,,,JDK-8284030,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wgn7:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-03-25 16:38;jjg;The crash is because `javadoc` is encountering an unnamed package with no owner.  That should not happen.

It's noteworthy, and ""disappointing"" that all javadoc tests pass, but ""make docs"" fails.;;;","2022-03-30 11:31;jjg;Root cause is a combination of several bad factors.

There are comments in JDK that contain links of the form `{@link byte[]}`, although `{@code byte[]}` was the intent.

`javadoc` tries to get the type element for ` byte[]`, and down in `JavacTrees` the array brackets are discarded and the symbol for `byte` is returned. (JavacTrees:485)  That in itself is somewhat questionable. JDK-8284315

                    // If this is an array type convert to element type
                    while (e instanceof ArrayType arrayType)
                        e = arrayType.elemtype;

In javadoc `LinkFactory`, array *types* and primitive *types* are handled, but not primitive *elements*. Thus, we fall into the code for `getModuleOf`, which was recently modified, with the assumption that all symbols have a non-null owner, which seems to not be the case for the package of synthetic symbols for primitive types, which have rootPackage as the owner (which otherwise seems correct.)

There are at least 3 issues which should be addressed.

1. The doc comments in foreign MemorySegment.java should be fixed.
2. javadoc should detect the attempt to link to primitive types
3. JavacElements.getModuleOf could be more defensive about null package owners


;;;","2022-03-30 12:24;jjg;The ""make docs"" failure can be replicated with the following simple test case:

/**
 * Comment. {@link byte}
 */
public class C { }



java.lang.NullPointerException: Cannot read field ""kind"" because ""sym.owner"" is null
	at jdk.compiler/com.sun.tools.javac.model.JavacElements.getModuleOf(JavacElements.java:461)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.Utils.containingModule(Utils.java:2558)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.Extern.findElementItem(Extern.java:403)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.Extern.getExternalLink(Extern.java:185)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.Extern.getExternalLink(Extern.java:180)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.getCrossPackageLink(HtmlDocletWriter.java:776)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.getCrossClassLink(HtmlDocletWriter.java:756)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlLinkFactory.getClassLink(HtmlLinkFactory.java:136)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.links.LinkFactory.getLink(LinkFactory.java:192)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.getLink(HtmlDocletWriter.java:721)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.seeTagToContent(HtmlDocletWriter.java:1087)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter$2.visitLink(HtmlDocletWriter.java:1669)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter$2.visitLink(HtmlDocletWriter.java:1523)
	at jdk.compiler/com.sun.tools.javac.tree.DCTree$DCLink.accept(DCTree.java:747)
	at jdk.compiler/com.sun.source.util.SimpleDocTreeVisitor.visit(SimpleDocTreeVisitor.java:79)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.commentTagsToContent(HtmlDocletWriter.java:1753)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.commentTagsToContent(HtmlDocletWriter.java:1466)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.addCommentTags(HtmlDocletWriter.java:1390)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.addInlineComment(HtmlDocletWriter.java:1371)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.ClassWriterImpl.addClassDescription(ClassWriterImpl.java:210)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildClassDescription(ClassBuilder.java:290)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildClassInfo(ClassBuilder.java:167)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildClassDoc(ClassBuilder.java:130)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.build(ClassBuilder.java:108)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:391)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.generateClassFiles(AbstractDoclet.java:286)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:197)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.startGeneration(AbstractDoclet.java:212)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.run(AbstractDoclet.java:115)
	at jdk.javadoc/jdk.javadoc.doclet.StandardDoclet.run(StandardDoclet.java:103)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.parseAndExecute(Start.java:580)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:403)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:352)
	at jdk.javadoc/jdk.javadoc.internal.tool.Main.execute(Main.java:63)
	at jdk.javadoc/jdk.javadoc.internal.tool.Main.main(Main.java:52)
;;;","2022-04-04 16:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8101
Date: 2022-04-04 23:46:57 +0000;;;","2022-04-12 16:35;dukebot;Changeset: 7920e8ba
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-04-12 23:33:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7920e8ba42a857d8a1537d46eafa3f0712ff2259
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Create a manual test framework class,JDK-8283712,5070997,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-03-25 13:52,2022-12-06 01:09,2023-10-01 09:56,2022-04-12 06:53,,,,,,,,,,19,client-libs,,0,noreg-self,,,,,,,,,,,,,,,,,,"We need a common manual test framework code that can be shared across all the client manual test. This framework class should have the following
1) Frame which contains test instruction.
2) Pass & Fail button so that user can mark the test pass or fail
3) Upon failing the test user should be able to elaborate why the test failed and this can be added to the test failure.
",,,,,,,,,,,JDK-8292015,JDK-8290962,JDK-8291783,JDK-8292403,JDK-8290220,JDK-8298152,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wgmj:",9223372036854775807,b18,,,,,,,,,,,"2022-04-07 08:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7966
Date: 2022-03-25 21:06:12 +0000;;;","2022-04-12 06:53;dukebot;Changeset: 3f26d84f
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-04-12 13:49:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3f26d84f6a03030080328e36a1fd1a08c982838c
;;;","2022-08-02 06:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/618
Date: 2022-08-02 12:47:05 +0000;;;","2022-08-03 08:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1309
Date: 2022-08-03 14:04:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Remove redundant 'new String' calls after concatenation,JDK-8283711,5070996,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2022-03-25 13:18,2022-03-30 17:59,2023-10-01 09:56,2022-03-28 12:14,,,,,,,,,,19,security-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,"Result of string concatenation is a newly created String object. There is no need it wrap it in another 'new String' call.
Such calls are confusing and produce warnings in IDE. Without them code is easier to read. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wgmb:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ce3d383,,,,,,,,,"2022-03-25 13:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7876
Date: 2022-03-20 12:07:52 +0000;;;","2022-03-28 12:14;dukebot;Changeset: d472c019
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-03-28 19:13:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d472c019344524aa20c74bdc4ab7823b6940be67
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[AIX] Build failure due to name conflict in test_arguments.cpp,JDK-8283695,5070977,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tsteele,tsteele,tsteele,2022-03-25 08:29,2022-03-30 17:59,2023-10-01 09:56,2022-03-26 00:39,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,A recent change has caused a build failure on AIX due to a name conflict in test_arguments.cpp. The variable 'BAD' clashes with an AIX system file with the error `/usr/include/sys/param.h:105:14: note: expanded from macro 'BAD'`.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282773,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,"0|i2wgi3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-03-25 10:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7962
Date: 2022-03-25 17:26:51 +0000;;;","2022-03-26 00:39;dukebot;Changeset: d5f90590
Author:    Tyler Steele <tyler.steele@ibm.com>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-03-26 07:37:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d5f90590323613b8b572ab5097365e005ba4f5ca
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classes in java.security still reference deprecated classes in spec,JDK-8283691,5070972,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-03-25 07:24,2022-03-30 17:59,2023-10-01 09:56,2022-03-25 14:24,,,,,,,,,,19,security-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,"PrivateKey and PublicKey contain ""@see Certificate"" in their class level spec but java.security.Certificate is also deprecated for removal. Key contains `@see Signer` and `@see Identity`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wggz:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-03-25 08:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7961
Date: 2022-03-25 15:34:23 +0000;;;","2022-03-25 14:24;dukebot;Changeset: e97cf157
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-03-25 21:21:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e97cf157cf20aeaef4a8c16fed6f3bb2bc933819
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make ThreadLocalRandom a final class,JDK-8283683,5070964,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2022-03-25 05:56,2022-03-30 17:59,2023-10-01 09:56,2022-03-28 04:10,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,"The class java.util.concurrent.ThreadLocalRandom is a public class. However, it has one sole constructor which is private:

private ThreadLocalRandom() {
...
}

This makes it eligible to be marked as final and doing so will also better convey its extensibility.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283688,,,,,,,,JDK-8283414,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wgf7:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,,,"2022-03-25 06:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7958
Date: 2022-03-25 13:32:21 +0000;;;","2022-03-28 04:10;dukebot;Changeset: 85672667
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-03-28 11:07:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8567266795cd1171f5b353d0e0813e7eeff319c2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve ZonedDateTime offset handling,JDK-8283681,5070961,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,redestad,redestad,redestad,2022-03-25 05:15,2022-03-30 17:59,2023-10-01 09:56,2022-03-25 15:41,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,"ZoneOffset::getRules isn't cached, so use heavily relies on escape analysis to elide the allocation. This is fragile optimization-wise, and even when it works we do extra computation that slows things down.

Adding an abstract ZoneId::getOffset(epochSecond) means that we can avoid querying ZoneOffset::getRules altogether, eliminating the risk we miss escape analysis. Such specialization also helps the ZoneRegion case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wgej:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2022-03-25 05:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7957
Date: 2022-03-25 12:28:58 +0000;;;","2022-03-25 15:41;dukebot;Changeset: 7bac0a87
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2022-03-25 22:37:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7bac0a878d918745ed036954cbbee590ce810c71
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Line not removed from LineChart when series cleared,JDK-8283675,5070788,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kpk,webbuggrp,webbuggrp,2022-03-23 00:39,2023-09-15 07:06,2023-10-01 09:56,2023-09-03 21:43,jfx11,jfx16,jfx17,jfx18,jfx19,,,,,jfx22,javafx,,0,8na,dcspn,regression,reproducer-yes,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Linux, Redhat 8, repeated with JavaFX 16, 11.0.2 and 18

A DESCRIPTION OF THE PROBLEM :
When the series is cleared the points (aka symbols?) are removed from the line chart but the line remains.
This is a regression. This functionality worked as expected in Java 1.8.0_311

REGRESSION : Last worked in version 8

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the example
Press Add button
Press Remove button

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Line and points to be removed from line chart
ACTUAL -
Points removed but line remains

---------- BEGIN SOURCE ----------
import java.util.ArrayList;
import java.util.List;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart.Data;
import javafx.scene.chart.XYChart.Series;
import javafx.scene.control.Button;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class LineChartClearIssue extends Application {
	@Override
	public void start(Stage stage) throws Exception {

		LineChart<Number, Number> lineChart = new LineChart<>(new NumberAxis(), new NumberAxis());
		lineChart.setAnimated(false);
		Series<Number, Number> series = new Series<>();
		series.setName(""Dave"");
		lineChart.getData().add(series);

		Button add = new Button(""Add"");
		Button remove = new Button(""Remove"");
		Button workaround = new Button(""Workaround"");
		add.setOnAction(event -> {
			series.getData().add(new Data<>(1, 10));
			series.getData().add(new Data<>(2, 20));
		});
		remove.setOnAction(event -> series.getData().clear());
		workaround.setOnAction(event -> {
			// copy data and add again
			List<Series<Number, Number>> rigby = new ArrayList<>(lineChart.getData());
			lineChart.getData().setAll(rigby);
		});

		stage.setScene(new Scene(new VBox(add, remove, workaround, lineChart)));
		stage.show();
	}
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Remove all the series and then add again, i.e. 

List<Series<Number, Number>> copy = new ArrayList<>(lineChart.getData());
lineChart.getData().setAll(copy);

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314754,,,,,,JDK-8314779,,,,,,"2022-03-25 02:14;pnarayanaswa;LineChartClearIssue.java;https://bugs.openjdk.org/secure/attachment/98375/LineChartClearIssue.java",,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wfc3:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-03-25 02:14;pnarayanaswa;Checked with attached testcase in Windows 10, Issue is reproducible, after data is removed line is not removed
Test Result
=========
8u321: Pass
openjfx11: Fail
openjfx17: Fail
openjfx18: Fail
openjfx19ea3: Fail
;;;","2023-08-17 23:57;kpk;This issue was a regression caused by the changes in JDK-8183530.
Similar to LineChart, the issue is observed in the AreaChart as well. Issue in both the charts will be fixed as part of this bug.;;;","2023-08-18 00:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1214
Date: 2023-08-18 07:25:28 +0000;;;","2023-09-03 21:43;dukebot;Changeset: e8491ba4
Author:    Karthik P K <kpk@openjdk.org>
Date:      2023-09-04 04:40:53 +0000
URL:       https://git.openjdk.org/jfx/commit/e8491ba47c2926547ee484e7fda767132aff2edd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Two Jarsigner tests needs to be updated with JDK-8267319,JDK-8283665,5070934,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,valeriep,valeriep,valeriep,2022-03-24 18:10,2023-01-02 03:41,2023-10-01 09:56,2022-03-25 10:12,19,,,,,,,,,19,security-libs,,0,noreg-self,regression,tier2,ursqe-triaged,,,,,,,,,,,,,,,"Two jarsigner tests, i.e. test/jdk/sun/security/tools/jarsigner/DisableCurveTest.java and test/jdk/sun/security/tools/jarsigner/CheckAlgParams.java, failed after JDK-8267319 is merged in. These tests are added to the main trunk during the peer review of JDK-8267319. Thus, running mach5 on the forked off branch did not catch this. 
These tests are written with the pre-JDK-8267319 behavior and needs to be updated.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282633,JDK-8267319,JDK-8277474,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wg8j:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-03-24 18:27;valeriep;JDK-8277474 and JDK-8282633 are integrated while JDK-8267319 is being forked off and reviewed. In order to prevent this from happening again, the branch of JDK-8267319 would need to sync with master and re-test again before integration.;;;","2022-03-24 22:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7952
Date: 2022-03-25 05:11:18 +0000;;;","2022-03-25 10:12;dukebot;Changeset: 3b5dfee9
Author:    Valerie Peng <valeriep@openjdk.org>
Date:      2022-03-25 17:10:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3b5dfee939dda02e14498baa2b52b0150326b938
;;;","2022-03-25 12:25;dcubed;The fix for this bug is integrated in jdk-19+16-990.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Unexpected TypeElement in ANALYZE TaskEvent,JDK-8283661,5070930,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-03-24 16:03,2022-03-30 17:59,2023-10-01 09:56,2022-03-25 14:19,18,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,"In JavaCompiler, line 1308, 1993, if there are task listeners registered, they will be called with an ANALYZE TaskEvent.

For most files, this is good and works well.

But, for package-info and module-info files, the type element is set to a shared anonymous class, syms.predefClass.  Since there is no other way in a task listener to get at the module element or module-info class, or the package element or package-info class, it would be better if the type element in the TaskEvent object was set to the symbol for `module-info` or `package-info` as appropriate.

I've attached a patch for a possible fix, which works by detecting the type of compilation unit.  There may be better ways to fix this, perhaps by modifying the info in the env in some way. But the patch is simple and localized, so relatively low risk and low cost.

But by itself the patch is not enough, and uncovers a separate bug, for which I do not have a proposed fix.  If the patch is applied, and a task listener calls `Elements.getModuleOf` or `Elements.getPackageOf` on the type element for module-info, the compiler crashes with NPE, because the call of sym.packge() in JavacElements.getModuleOf:459 returns null. The equivalent call in `getPackageOf` crashes with NPE for the same reason.

I believe the Elements.getModuleOf and Elements.getPackageOf calls on the type element for package-info work OK, but that should be verified.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283714,,,,,,,JDK-8283713,JDK-8284030,,,,,,,,,,,"2022-03-24 17:15;jjg;Test.java;https://bugs.openjdk.org/secure/attachment/98373/Test.java","2022-03-24 15:56;jjg;diff.txt;https://bugs.openjdk.org/secure/attachment/98371/diff.txt",,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wg7n:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Fix failed,,"2022-03-24 17:21;jjg;Attached test program Test.java to demo the issue with the type element, demo the proposed fix, and demo the part-2 problem.

When the test program is run on unmodified JDK, the output is as follows: (notice the `<anonymous >` names)

started: TaskEvent[PARSE,WrappedJavaFileObject[Test$2[myfo:///module-info.java]],null]
finished: TaskEvent[PARSE,WrappedJavaFileObject[Test$2[myfo:///module-info.java]],null]
started: TaskEvent[PARSE,WrappedJavaFileObject[Test$2[myfo:///p/package-info.java]],null]
finished: TaskEvent[PARSE,WrappedJavaFileObject[Test$2[myfo:///p/package-info.java]],null]
started: TaskEvent[PARSE,WrappedJavaFileObject[Test$2[myfo:///p/C.java]],null]
finished: TaskEvent[PARSE,WrappedJavaFileObject[Test$2[myfo:///p/C.java]],null]
started: TaskEvent[ENTER,WrappedJavaFileObject[Test$2[myfo:///module-info.java]],null]
started: TaskEvent[ENTER,WrappedJavaFileObject[Test$2[myfo:///p/package-info.java]],null]
started: TaskEvent[ENTER,WrappedJavaFileObject[Test$2[myfo:///p/C.java]],null]
finished: TaskEvent[ENTER,WrappedJavaFileObject[Test$2[myfo:///module-info.java]],null]
finished: TaskEvent[ENTER,WrappedJavaFileObject[Test$2[myfo:///p/package-info.java]],null]
finished: TaskEvent[ENTER,WrappedJavaFileObject[Test$2[myfo:///p/C.java]],null]
started: TaskEvent[ANALYZE,WrappedJavaFileObject[Test$2[myfo:///module-info.java]],<anonymous >]
type element: <anonymous >        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    module element: null
    package element: 
started: TaskEvent[ANALYZE,WrappedJavaFileObject[Test$2[myfo:///p/package-info.java]],<anonymous >]
type element: <anonymous >        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    module element: null
    package element: 
started: TaskEvent[ANALYZE,WrappedJavaFileObject[Test$2[myfo:///p/C.java]],p.C]
type element: p.C
    module element: m
    package element: p
finished: TaskEvent[ANALYZE,WrappedJavaFileObject[Test$2[myfo:///module-info.java]],<anonymous >]
type element: <anonymous >
    module element: null
    package element: 
finished: TaskEvent[ANALYZE,WrappedJavaFileObject[Test$2[myfo:///p/package-info.java]],<anonymous >]
type element: <anonymous >
    module element: null
    package element: 
finished: TaskEvent[ANALYZE,WrappedJavaFileObject[Test$2[myfo:///p/C.java]],p.C]
type element: p.C
    module element: m
    package element: p


When the test program is run on a JDK that incorporates the suggested patch, the output is as follows: (notice the type element names are now correct, but exceptions occur when getModuleOf and getPackageOf are invoked on module-info.java)

started: TaskEvent[PARSE,WrappedJavaFileObject[Test$2[myfo:///module-info.java]],null]
finished: TaskEvent[PARSE,WrappedJavaFileObject[Test$2[myfo:///module-info.java]],null]
started: TaskEvent[PARSE,WrappedJavaFileObject[Test$2[myfo:///p/package-info.java]],null]
finished: TaskEvent[PARSE,WrappedJavaFileObject[Test$2[myfo:///p/package-info.java]],null]
started: TaskEvent[PARSE,WrappedJavaFileObject[Test$2[myfo:///p/C.java]],null]
finished: TaskEvent[PARSE,WrappedJavaFileObject[Test$2[myfo:///p/C.java]],null]
started: TaskEvent[ENTER,WrappedJavaFileObject[Test$2[myfo:///module-info.java]],null]
started: TaskEvent[ENTER,WrappedJavaFileObject[Test$2[myfo:///p/package-info.java]],null]
started: TaskEvent[ENTER,WrappedJavaFileObject[Test$2[myfo:///p/C.java]],null]
finished: TaskEvent[ENTER,WrappedJavaFileObject[Test$2[myfo:///module-info.java]],null]
finished: TaskEvent[ENTER,WrappedJavaFileObject[Test$2[myfo:///p/package-info.java]],null]
finished: TaskEvent[ENTER,WrappedJavaFileObject[Test$2[myfo:///p/C.java]],null]
started: TaskEvent[ANALYZE,WrappedJavaFileObject[Test$2[myfo:///module-info.java]],m.module-info]
type element: m.module-info        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    module element: java.lang.NullPointerException: Cannot read field ""kind"" because ""sym"" is null        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    package element: java.lang.NullPointerException: Cannot read field ""kind"" because ""sym"" is null        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
started: TaskEvent[ANALYZE,WrappedJavaFileObject[Test$2[myfo:///p/package-info.java]],p.package-info]
type element: p.package-info        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    module element: m
    package element: p
started: TaskEvent[ANALYZE,WrappedJavaFileObject[Test$2[myfo:///p/C.java]],p.C]
type element: p.C
    module element: m
    package element: p
finished: TaskEvent[ANALYZE,WrappedJavaFileObject[Test$2[myfo:///module-info.java]],m.module-info]
type element: m.module-info
    module element: java.lang.NullPointerException: Cannot read field ""kind"" because ""sym"" is null
    package element: java.lang.NullPointerException: Cannot read field ""kind"" because ""sym"" is null
finished: TaskEvent[ANALYZE,WrappedJavaFileObject[Test$2[myfo:///p/package-info.java]],p.package-info]
type element: p.package-info
    module element: m
    package element: p
finished: TaskEvent[ANALYZE,WrappedJavaFileObject[Test$2[myfo:///p/C.java]],p.C]
type element: p.C
    module element: m
    package element: p
;;;","2022-03-24 17:24;jjg;FWIW, the test program is written to be the basis of a possible jtreg test.;;;","2022-03-24 17:57;jjg;Update:  the crash is because the owner of `module-info` is the enclosing module; thus there are no packages to be found by the `.packge()` call.   This is easy to fix locally in `JavacElements.getModuleOf` and `JavacElements.getPackageOf`.

Here are the additional changes required for JavacElements:
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/model/JavacElements.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/model/JavacElements.java
@@ -445,10 +445,8 @@ public class JavacElements implements Elements {
 
     @DefinedBy(Api.LANGUAGE_MODEL)
     public PackageElement getPackageOf(Element e) {
-        if (e.getKind() == ElementKind.MODULE)
-            return null;
-        else
-            return cast(Symbol.class, e).packge();
+        Symbol sym = cast(Symbol.class, e);
+        return (sym.kind == MDL || sym.owner.kind == MDL) ? null : sym.packge();
     }
 
     @DefinedBy(Api.LANGUAGE_MODEL)
@@ -456,7 +454,9 @@ public class JavacElements implements Elements {
         Symbol sym = cast(Symbol.class, e);
         if (modules.getDefaultModule() == syms.noModule)
             return null;
-        return (sym.kind == MDL) ? ((ModuleElement) e) : sym.packge().modle;
+        return (sym.kind == MDL) ? ((ModuleElement) e)
+                : (sym.owner.kind == MDL) ? (ModuleElement) sym.owner
+                : sym.packge().modle;
     }
 
     @DefinedBy(Api.LANGUAGE_MODEL)
;;;","2022-03-24 17:59;jjg;the fix is confirmed for all TaskEvent kinds, up to and including GENERATE
 ;;;","2022-03-24 21:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7949
Date: 2022-03-25 04:17:02 +0000;;;","2022-03-25 14:19;dukebot;Changeset: 36b36efa
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-03-25 21:16:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/36b36efa12876c592d9bf4b381887ecbf49bc2c9
;;;","2022-03-25 15:22;jjg;Fix passes all tests, but fails/crashes a docs build;;;",,,,,,,,,,,,,,,,,,,,,,,
nsk/jvmti/SuspendThread/suspendthrd003 may leak native memory,JDK-8283651,5070915,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2022-03-24 12:17,2022-05-11 23:14,2023-10-01 09:56,2022-05-09 15:06,19,,,,,,,,,19,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,,"Copied from a note in JDK-8282704:

I've attached the latest RSS monitor results with the fix for this
bug (JDK-8282704) and JDK-8282314 in place on my M1 MacMini:

do_all_check_stress_results.jdk-19+13_redo_1.log

My analysis scripts no longer complain about possible leaks.

However, I do still see something suspicious in the max_value values
for StressWrapper_suspendthrd003. Here's all the max_value values
from the most recent run:

$ grep max_value !$
grep max_value do_all_check_stress_results.jdk-19+13_redo_1.log
max_value=72128
max_value=179728
max_value=178400
max_value=142480
max_value=218560
max_value=208368
max_value=43600
max_value=131280
max_value=171328
max_value=202512
max_value=209456
max_value=180880
max_value=65776
max_value=180688
max_value=178720
max_value=69104
max_value=175888
max_value=179760
max_value=63856
max_value=173008
max_value=177680
max_value=125360
max_value=166176
max_value=171936
max_value=157424
max_value=213184
max_value=216320
max_value=62688
max_value=170752
max_value=174416
max_value=142448
max_value=193328
max_value=186352
max_value=56096
max_value=166816
max_value=172960
max_value=568272
max_value=3120272
max_value=1692416

The last three values are for StressWrapper_suspendthrd003 and they
are much higher than any of the other StressWrappers... Since we don't
see an OOME anymore, I have to guess that this is possibly some
native memory leak.

Here's the full entries for StressWrapper_suspendthrd003:

StressWrapper_suspendthrd003 release:
n_values=240
max_value=568272
min_value=55584
max_increase=8496
min_increase=7488
Value did not increase 1 times.
Value decreased 67 times.
Value increased 171 times

StressWrapper_suspendthrd003 fastdebug:
n_values=240
max_value=3120272
min_value=179136
max_increase=354256
min_increase=44256
Value decreased 76 times.
Value increased 163 times

StressWrapper_suspendthrd003 slowdebug:
n_values=240
max_value=1692416
min_value=182048
max_increase=170768
min_increase=15872
Value decreased 73 times.
Value increased 166 times

I haven't used NMT for a long time so I'll likely investigate
this possible issue with another bug... ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282314,JDK-8282704,,,,,JDK-8286445,JDK-8284632,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wg4b:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-05-05 13:42;dcubed;The debug code that I created for:

    JDK-8284632 runtime/Thread/StopAtExit.java possibly leaking memory again

gave me some ideas so I added counter based debugging
for the ThreadSelfSuspensionHandshake objects and ran
StressWrapper_suspendthrd003 in {release, fastdebug, slowdebug} configs
using a jdk-19+20 baseline:

$ grep ""vm_exit: dcubed_"" build/macosx-x86_64-normal-server-*/test-support/jtreg_open_test_hotspot_jtreg_StressWrapper_suspendthrd003_java/StressWrapper_suspendthrd003.jtr 
build/macosx-x86_64-normal-server-fastdebug/test-support/jtreg_open_test_hotspot_jtreg_StressWrapper_suspendthrd003_java/StressWrapper_suspendthrd003.jtr:vm_exit: dcubed_self_suspend_alloc_count=270717041
build/macosx-x86_64-normal-server-fastdebug/test-support/jtreg_open_test_hotspot_jtreg_StressWrapper_suspendthrd003_java/StressWrapper_suspendthrd003.jtr:vm_exit: dcubed_self_suspend_release_count=270717041
build/macosx-x86_64-normal-server-release/test-support/jtreg_open_test_hotspot_jtreg_StressWrapper_suspendthrd003_java/StressWrapper_suspendthrd003.jtr:vm_exit: dcubed_self_suspend_alloc_count=628242287
build/macosx-x86_64-normal-server-release/test-support/jtreg_open_test_hotspot_jtreg_StressWrapper_suspendthrd003_java/StressWrapper_suspendthrd003.jtr:vm_exit: dcubed_self_suspend_release_count=628242287
build/macosx-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_StressWrapper_suspendthrd003_java/StressWrapper_suspendthrd003.jtr:vm_exit: dcubed_self_suspend_alloc_count=34297247
build/macosx-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_StressWrapper_suspendthrd003_java/StressWrapper_suspendthrd003.jtr:vm_exit: dcubed_self_suspend_release_count=34297247

These runs executed for ~101 minutes each and there's no sign of
leakage of ThreadSelfSuspensionHandshake objects in any config.;;;","2022-05-06 13:28;dcubed;I used NMT ""summary"" observations to verify that memory still appears to
be leaking in StressWrapper_suspendthrd003 with jdk-19+21 bits. Not an
unexpected result since I didn't find anything that might have fixed the memory
leak as a side effect.

I did an hour run with NMT ""detail"" observations and one thing in the ""Total"" section
sticks out for me:

Total: reserved=2588485KB, committed=1231145KB
       malloc: 1011825KB #33787843
       mmap:   reserved=1576660KB, committed=219320KB

<snip>

-                  Internal (reserved=461839KB, committed=461839KB)
                            (malloc=461807KB #33748161)
                            (mmap: reserved=32KB, committed=32KB)

That's 450MB of ""Internal"" memory...

And the first thing in the ""Details:"" section also stands out:

[0x0000000104de9efd] JvmtiEnvBase::jvmtiMalloc(long)+0x1d
[0x0000000104de0882] JvmtiEnv::GetThreadInfo(_jobject*, jvmtiThreadInfo*)+0x832
[0x0000000104d8d33c] jvmti_GetThreadInfo(_jvmtiEnv*, _jobject*, jvmtiThreadInfo*)+0xec
[0x0000000103128713] nsk_jvmti_threadByName+0x163
                             (malloc=461176KB type=Internal #33733611)

I gotta take a look at the JVM/TI GetThreadInfo() spec and how the test
is using JVM/TI GetThreadInfo...;;;","2022-05-06 16:08;dcubed;test/hotspot/jtreg/vmTestbase/nsk/jvmti/SuspendThread/suspendthrd003/suspendthrd003.cpp

static void JNICALL
agentProc(jvmtiEnv* jvmti, JNIEnv* jni, void* arg) {

<snip>

        NSK_DISPLAY1(""Find thread: %s\n"", THREAD_NAME);
        if (!NSK_VERIFY((testedThread =
                nsk_jvmti_threadByName(THREAD_NAME)) != NULL))
            return;
        NSK_DISPLAY1(""  ... found thread: %p\n"", (void*)testedThread);

so agentProc() in suspendthrd003.cpp calls nsk_jvmti_threadByName()
which is mentioned by the NMT detail output in the previous comment.

test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/agent_tools.cpp

/** Find alive thread by name. */
jthread nsk_jvmti_threadByName(const char name[]) {
    jthread* threads = NULL;
    jint count = 0;
    jthread foundThread = NULL;
    int i;

    if (!NSK_VERIFY(name != NULL)) {
        nsk_jvmti_setFailStatus();
        return NULL;
    }

    if (!NSK_JVMTI_VERIFY(jvmti_env->GetAllThreads(&count, &threads))) {
        nsk_jvmti_setFailStatus();
        return NULL;
    }

    for (i = 0; i < count; i++) {
        jvmtiThreadInfo info;

        if (!NSK_JVMTI_VERIFY(jvmti_env->GetThreadInfo(threads[i], &info))) {
            nsk_jvmti_setFailStatus();
            break;
        }

        if (info.name != NULL && strcmp(name, info.name) == 0) {
            foundThread = threads[i];
            break;
        }
    }

so the local ""jvmtiThreadInfo info"" is inside the for-loop
which calls JVM/TI GetThreadInfo() and the 'name' field
is used to match that we've found the right thread. On a
match, we break out of the loop and don't use the 'info'
structure anymore.

However, the JVM/TI spec says this about the info_ptr param:

info_ptr	jvmtiThreadInfo*

On return, filled with information describing the specified thread.

Agent passes a pointer to a jvmtiThreadInfo. On return, the jvmtiThreadInfo
has been set. The pointer returned in the field name of jvmtiThreadInfo is a
newly allocated array. The array should be freed with Deallocate. The object
returned in the field thread_group of jvmtiThreadInfo is a JNI local reference
and must be managed. The object returned in the field context_class_loader of jvmtiThreadInfo is a JNI local reference and must be managed. 

So the nsk_jvmti_threadByName() function is missing the code
to cleanup the memory referred to by field 'name'.;;;","2022-05-06 16:08;dcubed;I'm going to experiment with this possible fix:

$ git diff
diff --git a/test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/agent_tools.cpp b/test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/agent_tools.cpp
index 2412bd63040..b75f237c6a7 100644
--- a/test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/agent_tools.cpp
+++ b/test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/agent_tools.cpp
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2003, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2022, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -450,6 +450,12 @@ jthread nsk_jvmti_threadByName(const char name[]) {
 
         if (info.name != NULL && strcmp(name, info.name) == 0) {
             foundThread = threads[i];
+        }
+        if (!NSK_JVMTI_VERIFY(jvmti_env->Deallocate((unsigned char*)info.name))) {
+            nsk_jvmti_setFailStatus();
+            return NULL;
+        }
+        if (foundThread != NULL) {
             break;
         }
     };;;","2022-05-07 07:28;dcubed;The proposed fix looks like it eliminates the leak:

$ wc -l do_mem_monitor.detail.log.save.00/*.total_committed.log && tail -1 do_mem_monitor.detail.log.save.00/*.total_committed.log
      59 do_mem_monitor.detail.log.save.00/60201.total_committed.log
1231145KB

$ wc -l do_mem_monitor.detail.log.save.01/*.total_committed.log && tail -1 do_mem_monitor.detail.log.save.01/*.total_committed.log
      59 do_mem_monitor.detail.log.save.01/25576.total_committed.log
1239532KB

$ wc -l do_mem_monitor.detail.log.save.02/*.total_committed.log && tail -1 do_mem_monitor.detail.log.save.02/*.total_committed.log
      58 do_mem_monitor.detail.log.save.02/9870.total_committed.log
244752KB

The first run reached a total committed size of 1.17GB.
The second run reached a total commited size of 1.18GB.
The third run (with the fix) reached a total commited size of 0.23GB
so almost 1GB better.;;;","2022-05-09 13:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8609
Date: 2022-05-09 20:15:21 +0000;;;","2022-05-09 15:06;dukebot;Changeset: 61450bb0
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-05-09 22:03:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/61450bb061ecda9700ddbd387a1f0659ebd1cced
;;;",,,,,,,,,,,,,,,,,,,,,,,
"Improve the snippet ""file not found"" message.",JDK-8283648,5070912,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-03-24 11:49,2022-03-30 17:59,2023-10-01 09:56,2022-03-25 14:21,18,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,"When looking for an external snippet, if it cannot be found, the diagnostic is a basic ""File not found"" message.

It would be more informative if it said something like:

File not found on source path or snippet path.

The use of ""source path"" is deliberate, as compared to any specific option, because it may be the package-oriented source path or the module source path, and even the source path can be set in various ways (--source-path, -sourcepath, -classpath, etc) But the term should be enough to indicate that some path setting is required.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wg3n:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-03-24 21:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7951
Date: 2022-03-25 04:27:55 +0000;;;","2022-03-25 14:21;dukebot;Changeset: cb012a5b
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-03-25 21:20:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cb012a5b625a7707c429f1e95db59018a6dcb992
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[AIX, testbug] MachCodeFramesInErrorFile test fails to find 'Native frames' text",JDK-8283643,5070904,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tsteele,tsteele,tsteele,2022-03-24 10:34,2022-04-27 23:30,2023-10-01 09:56,2022-04-26 08:30,,,,,,,,,,19,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,,,,,,MachCodeFramesInErrorFile.java looks for the text 'Native frames'  in the output after crashInJava. This fails on AIX because the os::platform_print_native_stack runs instead of vmError::print_native_stack [edit: ...which doesn't produce the 'Native frames: ' text that the test is expecting].,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8145184,,,,,,JDK-8283644,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,"0|i2wg1v:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-04 08:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8094
Date: 2022-04-04 15:47:06 +0000;;;","2022-04-26 08:30;dukebot;Changeset: 97a0a292
Author:    Tyler Steele <tyler.steele@ibm.com>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-04-26 15:26:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/97a0a292a6950a3d0a7928d5ac439670c84f0dbe
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaDoc of JFileChooser() need to be updated for default directory in Windows,JDK-8283642,5070903,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,mvs,mvs,2022-03-24 10:06,2022-04-06 23:58,2023-10-01 09:56,2022-03-31 02:05,11,17,18,8,,,,,,19,client-libs,,0,doc_java,sn_115,sqebug,,,,,,,,,,,,,,,,"As per https://docs.oracle.com/en/java/javase/18/docs/api/java.desktop/javax/swing/JFileChooser.html#%3Cinit%3E(), ""Constructs a JFileChooser pointing to the user's default directory. This default depends on the operating system. It is typically the ""My Documents"" folder on Windows, and the user's home directory on Unix."", but on Windows 10 and above the default directory is ""Documents"" folder now, so the Javadoc need to be updated accordingly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283621,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wg1n:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-03-28 00:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7983
Date: 2022-03-28 07:34:52 +0000;;;","2022-03-31 02:05;dukebot;Changeset: 0a9a7b6a
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-03-31 09:01:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0a9a7b6abc8d2c97b91c89eb842f483629132e43
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Large value for CompileThresholdScaling causes assert,JDK-8283641,5070900,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,iklam,iklam,2022-03-24 09:19,2022-05-19 14:06,2023-10-01 09:56,2022-03-24 14:45,11,17,18,19,,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-19,,,,,,,,,,,"$ java -XX:CompileThresholdScaling=12345678901234567890.0 -version
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/powerOfTwo.hpp:54
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/jdk/open/src/hotspot/share/utilities/powerOfTwo.hpp:54), pid=4147940, tid=4147941
#  assert(value > T(0)) failed: value must be > 0
#
# JRE version:  (19.0) (fastdebug build )
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-internal-adhoc.iklam, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
",,,,,,,,,,,JDK-8284252,JDK-8284587,JDK-8284052,JDK-8283912,JDK-8284155,,,,,,,,,,,,,,,,,,,,,JDK-8283807,,JDK-8283013,,,,,,,,,,JDK-8287052,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wg0z:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-24 10:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7944
Date: 2022-03-24 16:34:07 +0000;;;","2022-03-24 14:45;dukebot;Changeset: c1048021
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-03-24 21:42:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c1048021fe57b78bb1f300b977588e1a93a284b6
;;;","2022-03-29 08:56;thartmann;Fix Request (JDK 18u)
Fixes an assert due to an unexpected flag value. The fix is low risk and applies cleanly. Already tested and about to be backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 09:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/73
Date: 2022-03-29 15:55:45 +0000;;;","2022-03-30 04:59;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Nightly tests have passed.;;;","2022-03-30 05:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/316
Date: 2022-03-30 12:00:46 +0000;;;","2022-04-06 06:34;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
Low risk, only a simple change handling overflow when casting.
Clean backport. 
SAP nightly testing passed.;;;","2022-04-06 06:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1016
Date: 2022-04-06 13:35:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
System.out does not use the encoding/charset specified in the Javadoc,JDK-8283620,5070693,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2022-03-21 17:57,2022-10-07 00:14,2023-10-01 09:56,2022-04-26 09:08,18,19,,,,,,,,19,core-libs,,0,additional-information-received,dcsaw,release-note=yes,reproducer-yes,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 11 10.0.22000

openjdk version ""18"" 2022-03-22
OpenJDK Runtime Environment (build 18+36-2087)
OpenJDK 64-Bit Server VM (build 18+36-2087, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
System.out's Javadoc states the following:
The encoding used in the conversion from characters to bytes is equivalent to Console.charset() if the Console exists, Charset.defaultCharset() otherwise.

When there is a Console, this is correct. However, when there isn't a Console, e.g. when redirecting output to a file, System.out now (in JDK 18) uses `native.encoding` rather than the result of calling Charset.defaultCharset(), which is affected by `file.encoding`. You used to be able to control the output of a program in prior JDKs using `file.encoding` because the semantics stated by the Javadoc were correct. Now, you cannot set `native.encoding`, and `sun.stdout.encoding` is an undocumented feature, so it cannot be officially changed any more.

In my opinion, the correct fix is to use `native.encoding` only when `file.encoding` is not specified, which retains the output behavior of JDK 17 and below regardless of if `file.encoding` is specified, and update the Javadoc to reflect this.

I am willing to make a PR to fix this whichever way is preferred.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Reproduction steps made on Linux, but can be adapted to other OSes:
1. Compile the source code attached.
2. Run `java --add-opens=java.base/java.io=ALL-UNNAMED Test >test.txt`
3. Inspect test.txt to see it states the following (Windows shows a different System.out):
console: null
'default' charset: UTF-8
System.out: UTF-8
4. Try changing the 'default' charset and therefore what should be used by System.out according to the Javadoc. Run `java -Dfile.encoding=Cp1252 --add-opens=java.base/java.io=ALL-UNNAMED Test >test.txt`:
console: null
'default' charset: windows-1252
System.out: UTF-8

6. Notice how the System.out does not change, despite the default charset change.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
System.out should change with file.encoding when a Console is not present, as documented by the Javadoc.
ACTUAL -
See reproduction steps, especially #6.

---------- BEGIN SOURCE ----------
public class Test {
  public static void main(String[] args) throws Throwable {
    System.out.println(""console: "" + System.console()); // Show if the console was present
    if (System.console() != null) System.out.println(""console charset: "" + System.console().charset()); // Show the console's charset
    System.out.println(""'default' charset: "" + java.nio.charset.Charset.defaultCharset()); // Show the ""default"" charset
    var charsetField = System.out.getClass().getDeclaredField(""charset"");
    charsetField.setAccessible(true);
    System.out.println(""System.out: "" + charsetField.get(System.out)); // Show the charset used by System.out
  }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Use sun.stdout.encoding, an undocumented and unsupported property.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284778,,,,,,,,JDK-8294940,,,,,,JDK-8187041,JDK-8293957,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2weqz:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-03-22 00:38;tongwan;Observed the following exception on Windows 10:
Exception in thread ""main"" java.lang.NoSuchFieldException: charset
        at java.base/java.lang.Class.getDeclaredField(Class.java:2610)
        at Test.main(Test.java:6)

Requested more information from the submitter about the above output.;;;","2022-03-23 21:30;tongwan;Additional information from the submitter:
Due to the nature of it, it doesn't work on JDKs earlier than 18.;;;","2022-03-23 22:23;tongwan;The observations on Windows 10:
JDK 17: NoSuchFieldException: charset
JDK 18ea+29: Failed, System.out: x-windows-950 for default and file.encoding=Cp1252
JDK 19ea+3: Failed.;;;","2022-03-29 02:32;alanb;The file.encoding property was a ""read-only"" property in older release; it was never supported to run with -Dfile.encoding=Cp1252. In JDK 18, the spec is clear that setting file.encoding to a value other than ""UTF-8"" or ""COMPAT"" leads to unspecified behavior. We may need to look at these scenarios again, or at least see how to get some of these usages onto a supported footing.;;;","2022-03-29 09:37;naoto;I second Alan's comment. As submitter points out `sun.stdout.encoding` can affect the System.out encoding, but that is equally unsupported as `file.encoding` with non UTF-8/COMPAT value.

Unrelated, but in JDK18, we provided `PrintStream.charset()`, so the test case does not have to reflectively get the value of `System.out.charset` with `--add-opens` option. It can simply call `System.out.charset()`.;;;","2022-04-07 16:06;naoto;In fact, the spec for `System.out/err` falling back to `native.encoding` was intentional (L2124-2126): https://github.com/openjdk/jdk/pull/4733/files#diff-bd92d760986b9249dd3c02cc147db4f7e9dbbef90afef4971ee497a50e48c740
The spec for `System.out/err` should be corrected to reflect the JEP 400 change.
Having said that, promoting `sun.stdout/err.encoding` to public properties may mitigate this situation.;;;","2022-04-12 20:31;tongwan;Additional information from the submitter:
I've been tracking this issue, and I realize I may have caused some confusion -- the main behavior issue we have is with Windows 10 + `file.encoding=UTF-8`. This previously allowed us to capture UTF-8 output on Windows 10, for e.g. test suites, but it now produces cp1252 output, which isn't usable for our purposes. I would much appreciate it if sun.stdout/err.encoding were promoted to public properties, as a proper way to control this behavior. Otherwise, there doesn't seem to be a supported way to get UTF-8 output on Windows 10.;;;","2022-04-13 13:20;naoto;Yes, that's what I am proposing here. Please take a look at the CSR linked in this issue. With the current prototype, you get the following. I believe that's what you are requesting:
---
C:\Users\nsato>d:\projects\jdk\git\jdk\build\windows-x64\jdk\bin\jshell JAVASE
|  Welcome to JShell -- Version 19-internal
|  For an introduction type: /help intro

jshell> System.out.charset()
$177 ==> windows-1252

jshell> /exit
|  Goodbye

C:\Users\nsato>d:\projects\jdk\git\jdk\build\windows-x64\jdk\bin\jshell -R-Dstdout.encoding=UTF-8 JAVASE
|  Welcome to JShell -- Version 19-internal
|  For an introduction type: /help intro

jshell> System.out.charset()
$177 ==> UTF-8

jshell>;;;","2022-04-21 16:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8270
Date: 2022-04-15 20:26:55 +0000;;;","2022-04-26 09:08;dukebot;Changeset: 03bcf7b6
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-04-26 16:05:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/03bcf7b6d196f6c5d851059cb6f580767eee4e94
;;;",,,,,,,,,,,,,,,,,,,,
[11] Repair compiler versions handling after backport of 8233787,JDK-8283614,5070868,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-03-24 01:54,2022-07-07 06:26,2023-10-01 09:56,2022-03-24 04:28,11,,,,,,,,,11.0.16,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,"looks like the backport of ""8233787: Break cycle in vm_version* includes""  removed the handling of some VS versions (like _MSC_VER == 1923)  from  abstract_vm_version.cpp; this should be repaired.

This is the backport commit introducing the issue: https://github.com/openjdk/jdk11u-dev/commit/95c7d073e24227962e04f859d9c8bb06ceab861d

Those entries went missing:

      #elif _MSC_VER == 1916
        #define HOTSPOT_BUILD_COMPILER ""MS VC++ 15.9 (VS2017)""
      #elif _MSC_VER == 1920
        #define HOTSPOT_BUILD_COMPILER ""MS VC++ 16.0 (VS2019)""
      #elif _MSC_VER == 1921
        #define HOTSPOT_BUILD_COMPILER ""MS VC++ 16.1 (VS2019)""
      #elif _MSC_VER == 1922
        #define HOTSPOT_BUILD_COMPILER ""MS VC++ 16.2 (VS2019)""
      #elif _MSC_VER == 1923
        #define HOTSPOT_BUILD_COMPILER ""MS VC++ 16.3 (VS2019)""
",,,,,,,,,,,JDK-8289794,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8233787,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wftv:",9223372036854775807,b01,,,,,,,,,,,"2022-03-24 02:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/943
Date: 2022-03-24 09:22:54 +0000;;;","2022-03-24 04:28;roboduke;Changeset: 60e771f8
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-03-24 11:27:15 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/60e771f82d35358ea90ee753611216b2fd5ae28b
;;;","2022-05-04 00:21;dukebot;Changeset: 60e771f8
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-03-24 11:27:15 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/60e771f82d35358ea90ee753611216b2fd5ae28b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/Thread/StopAtExit.java failing in loom repo,JDK-8283610,5070862,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,alanb,alanb,2022-03-24 00:06,2022-05-24 11:29,2023-10-01 09:56,2022-05-03 16:27,repo-loom,,,,,,,,,repo-loom,hotspot,,0,loom,noreg-self,,,,,,,,,,,,,,,,,"This test depends on a private method in ThreadGroup and book keeping that does not exist in the loom repo. In addition the async exception leads to exceptions in class loading when the victim thread exits - this surfaces in the main thread when it attempts to invoke a method in that class.

Exception: java.lang.ThreadDeath thrown from the UncaughtExceptionHandler in thread ""Thread-1""
java.lang.NoClassDefFoundError: Could not initialize class java.lang.Thread$State
	at java.base/jdk.internal.misc.VM.toThreadState(VM.java:348)
	at java.base/java.lang.Thread.threadState(Thread.java:2777)
	at java.base/java.lang.Thread.getThreadGroup(Thread.java:1963)
	at java.base/java.lang.ThreadGroup.activeCount(ThreadGroup.java:364)
	at StopAtExit.main(StopAtExit.java:127)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1532)

Excluding the test for now, need to decide if this test should be deleted in the loom repo.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285507,,,,,,JDK-8284632,JDK-8283467,JDK-8282952,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wfsj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-14 16:04;lmesnik;The test should be updated after stop() deprecation.;;;","2022-04-14 16:17;dcubed;I already updated the test to use JVM/TI StopThread(). See:

JDK-8283467 runtime/Thread/StopAtExit.java needs updating;;;","2022-04-18 01:37;alanb;We will need to decide whether to delete or change this test. The updated test (to use JVMTI StopThread) is still tied to TG bookkeeping that does not exist in the loom repo. Furthermore, the terminally degraded destroy/isDestroyed methods have been degraded in the loom repo to do nothing.;;;","2022-04-18 08:46;dcubed;With [~dholmes] change here:

    JDK-8282952 Thread::exit should be immune to Thread.stop

the memory leak recovery logic should no longer be necessary.
I just haven't had a chance to prove that and remove the code (yet).;;;","2022-05-02 09:45;dcubed;I integrated the following two fixes into jdk/jdk today:

    JDK-8284632 runtime/Thread/StopAtExit.java possibly leaking memory again
    JDK-8285507 revert fix for JDK-8282704 now that JDK-8282952 is fixed

When the above two fixes land in the Loom repos, I'll be able
to check the status of runtime/Thread/StopAtExit.java in that repo.;;;","2022-05-03 14:43;dcubed;Here's the context diff for the ProblemList removal:

$ git diff
diff --git a/test/hotspot/jtreg/ProblemList.txt b/test/hotspot/jtreg/ProblemList.txt
index 4c6c147b8cf..a4d25af639c 100644
--- a/test/hotspot/jtreg/ProblemList.txt
+++ b/test/hotspot/jtreg/ProblemList.txt
@@ -176,9 +176,6 @@ vmTestbase/nsk/jdwp/ThreadReference/ForceEarlyReturn/forceEarlyReturn001/forceEa
 
 # Loom
 
-# obsolete test using Thread.stop
-runtime/Thread/StopAtExit.java                                               8283610 generic-all
-
 runtime/Thread/TooSmallStackSize.java                                        8285832 windows-x64
 
 #### fibers branch only failures


And here's the test results:

$ do_java_test runtime/Thread/StopAtExit.java
INFO: GNUMAKE=make
INFO: GNUMAKE version is: GNU Make 3.81

INFO: JTREG options:
INFO:   JOBS=4
INFO:   TEST_MODE=agentvm
INFO:   EXTRA_PROBLEM_LISTS=ProblemList-extra.txt
INFO:   VM_OPTIONS=
INFO: test_val=runtime/Thread/StopAtExit.java
Test Config: macosx-x86_64-normal-server-release
    INFO: TIMEOUT_FACTOR=4
    Done testing
    Test Run macosx-x86_64-normal-server-release time: 0.76 minutes.

    TEST                                              TOTAL  PASS  FAIL ERROR
    jtreg:open/test/hotspot/jtreg/runtime/Thread/StopAtExit.java
                                                          1     1     0     0

Test Config: macosx-x86_64-normal-server-fastdebug
    INFO: TIMEOUT_FACTOR=6
    Done testing
    Test Run macosx-x86_64-normal-server-fastdebug time: 0.90 minutes.

    TEST                                              TOTAL  PASS  FAIL ERROR
    jtreg:open/test/hotspot/jtreg/runtime/Thread/StopAtExit.java
                                                          1     1     0     0

Test Config: macosx-x86_64-normal-server-slowdebug
    INFO: TIMEOUT_FACTOR=12
    Done testing
    Test Run macosx-x86_64-normal-server-slowdebug time: 1.39 minutes.

    TEST                                              TOTAL  PASS  FAIL ERROR
    jtreg:open/test/hotspot/jtreg/runtime/Thread/StopAtExit.java
                                                          1     1     0     0

Total test time: 3.05 minutes.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Tests may fail with zh locale on MacOS,JDK-8283606,5070856,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,dholmes,dholmes,2022-03-23 22:14,2023-01-30 21:06,2023-10-01 09:56,2022-05-04 17:11,19,,,,,,,,,19,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,"From the test doc of openjdk https://openjdk.java.net/groups/build/doc/testing.html

<quote>
If your locale is non-US, some tests are likely to fail. To work around this you can set the locale to US. On Unix platforms simply setting LANG=""en_US"" in the environment before running tests should work. On Windows or MacOS, setting JTREG=""VM_OPTIONS=-Duser.language=en -Duser.country=US"" helps for most, but not all test cases.
</quote>

However, on  MacOS 12.1, even with the above suggestions, some tests still fail, including the following in tier-1. The tests expects output messages in English, but Chinese message are still produced.

test/hotspot/jtreg/runtime/classFileParserBug/TestEmptyBootstrapMethodsAttr.java
test/langtools/jdk/javadoc/tool/6964914/TestStdDoclet.java
test/langtools/jdk/javadoc/tool/6964914/TestUserDoclet.java
test/langtools/jdk/javadoc/tool/EnsureNewOldDoclet.java
test/langtools/jdk/javadoc/tool/testLocaleOption/TestLocaleOption.java
test/langtools/tools/javac/T8132562/ClassPathWithDoubleQuotesTest.java
test/langtools/tools/javac/options/smokeTests/OptionSmokeTest.java
test/langtools/tools/javac/platform/PlatformProviderTest.java
test/langtools/tools/jdeps/MultiReleaseJar.java

 ",,,,,,,,,,,JDK-8301314,JDK-8300928,JDK-8299346,JDK-8301423,JDK-8299383,JDK-8300927,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283933,,JDK-8275727,,,,,,CODETOOLS-7903149,JDK-8283697,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2wfr7:",9223372036854775807,b22,,,,,,,,,,,"2022-03-23 22:17;dholmes;The initial PR:

https://github.com/openjdk/jdk/pull/7924

was associated with JDK-8275727.

It is not clear to me yet how this issue should be tackled in general. Any test that checks for output strings that might be affected by the Locale setting can fail if the Locale is not the expected ""English"" one. If we need for force specific settings then it is likely better handled in the test library e.g. within ProcessTools.createJavaProcessBuilder.

We may need separate issues/sub-tasks to address tests in different areas e.g. hotspot;;;","2022-03-24 00:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7924
Date: 2022-03-23 15:34:43 +0000;;;","2022-03-24 07:04;rriggs;Why don't these tests fail on other platforms with the same locale?  
What is unique about the way locale defaults are defined that affects these tests?

It might be useful to have some method in ProcessTools that ensured a normalized locale but
that's too big a change to force on every use of ProcessTools. It is likely to break some other
test elsewhere.;;;","2022-03-24 09:11;iklam;Could you update the description to specify exactly what the error condition is?

I.e, you are running on a computer where the default system locale is zh:

- Does the test fail with you run with JTREG=""VM_OPTIONS=-Duser.language=en -Duser.country=US""?
- Or does the test fail with you run WITHOUT that option?

EDIT: I updated the description according to Vickey's reply in the PR.;;;","2022-03-24 13:05;iklam;One possible work-around is:

export JAVA_TOOL_OPTIONS='-Duser.language=en -Duser.country=US' 
make test-only \
    TEST=test/langtools/jdk/javadoc/tool/6964914/TestStdDoclet.java \
    JTREG_OPTIONS=-e:JAVA_TOOL_OPTIONS

make test-only \
    TEST=open/test/langtools/jdk/javadoc/tool/testLocaleOption/TestLocaleOption.java\
    JTREG_OPTIONS=-e:JAVA_TOOL_OPTIONS;;;","2022-05-04 17:11;dukebot;Changeset: 7d545084
Author:    Vikey Chen <vikeytk@gmail.com>
Committer: Ioi Lam <iklam@openjdk.org>
Date:      2022-05-05 00:06:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7d545084f45af44386cb38172fd783f889a8c4e7
;;;","2022-12-21 19:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/963
Date: 2022-12-22 03:12:05 +0000;;;","2022-12-23 01:41;tkiriyama;Fix Request 17u
This patch resolves the tests on non-English locale platform.
This fix can be applied cleanly.
I tried to run these tests on Japanese Windows 10, and all tests are passed.;;;","2022-12-25 18:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1611
Date: 2022-12-26 02:00:01 +0000;;;","2022-12-25 22:56;tkiriyama;Fix Request 11u
This patch resolves the tests on non-English locale platform.
This fix can not be applied cleanly, but risk is low because this fix is test only and the logic is simple.
I tried to run these tests on Japanese Windows 10, and all tests are passed.;;;","2023-01-06 03:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/223
Date: 2023-01-06 11:30:35 +0000;;;","2023-01-09 22:47;tkiriyama;Fix Request 8u
This patch resolves the tests on non-English locale platform.
This fix can not be applied cleanly, but risk is low because this fix is test only and the logic is simple.
I tried to run these tests on Japanese Windows 10, and all tests are passed.;;;",,,,,,,,,,,,,,,,,,
Remove redundant qualifier in Windows specific Attach Operation,JDK-8283603,5070854,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jwaters,jwaters,jwaters,2022-03-23 19:52,2022-03-30 17:59,2023-10-01 09:56,2022-03-28 16:31,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wfqr:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2022-03-23 20:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7935
Date: 2022-03-24 02:53:00 +0000;;;","2022-03-24 07:33;dcubed;Moving from hotspot/other -> hotspot/svc since
the attach API stuff belongs to the Serviceability team.;;;","2022-03-28 16:31;dukebot;Changeset: 9b49900b
Author:    Julian Waters <jwaters@openjdk.org>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2022-03-28 23:30:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9b49900b581bae8529ab30f19e8d18fc8e9c5aad
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[REDO] Invalid generic signature for redefined classes,JDK-8283597,5070848,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,amenkov,amenkov,amenkov,2022-03-23 17:33,2023-08-11 08:23,2023-10-01 09:56,2022-04-04 13:41,17,,,,,,,,,19,hotspot,,0,dcsad,jdk17u-fix-request,jdk17u-fix-yes,regression,reproducer-yes,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
MacOS 11.6.3 (x64)/ Linux Debian 9 (x64 VM)
Java: Temurin 17.0.2 / Oracle 17.0.2

A DESCRIPTION OF THE PROBLEM :
At New Relic we instrument classes to send telemetry data to our servers. We use ASM for bytecode manipulation.

We instrument CompletableFuture, and since Java 17 it has returned an improper value when Class#getGenericSignature0() is called.
This works fine when the running on Java 16 or lower.

The following has a repro app and more information on the investigation done.
https://github.com/meiao/genericSignature-jdk17-bug

Note that the source code added in the ticket will not reproduce the issue by itself. Use the repro app that will download the New Relic agent and execute the app in a way that the bug will occur.

REGRESSION : Last worked in version 16

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Modify CompletableFuture using a Java agent.
Using reflection, call Class#getGenericSignature0() on CompletableFuture.class.
Check the returned String.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/concurrent/Future<TT;>;Ljava/util/concurrent/CompletionStage<TT;>;
ACTUAL -
java/util/concurrent/CompletableFuture

---------- BEGIN SOURCE ----------
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.reflect.Type;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class Tester {

    public static void main(String... args) throws Throwable {

        MethodHandles.Lookup lookup = MethodHandles.lookup();
        MethodHandles.Lookup classLookup = MethodHandles.privateLookupIn(Class.class, lookup);
        MethodHandle getGenericSignature0 = classLookup.findVirtual(Class.class, ""getGenericSignature0"", MethodType.methodType(String.class));
        Object genericSignature = getGenericSignature0.invoke(CompletableFuture.class);

        System.out.println();
        System.out.println(""getGenericSignature0: "" + genericSignature);
        System.out.println(""expected: <T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/concurrent/Future<TT;>;Ljava/util/concurrent/CompletionStage<TT;>;"");
        System.out.println();

        Type type = Tester.class.getDeclaredMethod(""testing"").getGenericReturnType();
        System.out.println(""TYPE: "" + type);
    }

    public CompletableFuture<List<String>> testing() {
        return null;
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Not modifying the CompletableFuture class. Which is not desirable.

FREQUENCY : always


",,,,,,,,,,,JDK-8287054,JDK-8288037,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282241,JDK-8286566,,,,,JDK-8283587,JDK-8286566,,,,,JDK-8267555,CODETOOLS-7901986,,,,,,,,,,,,,,,,,,,generic,,,,,,,17,,generic,,,,,"0|i2wfpf:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-03-28 14:20;amenkov;After pushing fix for JDK-8282241 random tests from serviceability/jvmti/RedefineClasses start to fail with
java.lang.NoClassDefFoundError: jdk/test/lib/helpers/ClassFileInstaller$Manifest
This is caused by JTReg classpath directories sharing between tests.
JTReg recommends to add @build tags for all used libraries, but RedefineClasses don't do it (and this approach doesn't look as a good to me).
Comparing new test from JDK-8282241 fix with other tests in RedefineClasses the only significant difference is new test uses
run compile -g RedefineGenericSignatureTest.java
to include additional debug info, but actually it's not needed as the test only needs source file data and it's included by default.

;;;","2022-03-28 15:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8007
Date: 2022-03-28 22:19:49 +0000;;;","2022-03-28 21:29;dholmes;[~amenkov] I'm still not understanding the failure modes previously caused by the test. Even if the explicit compile command is not present, the RedefineGenericSignatureTest.java file will be compiled implicitly by the ""@run ... RedefineGenericSignatureTest"". How does the explicit compilation cause a difference that then results in other tests failing? I'm concerned this has exposed a bigger problem that we will now hide again without fully understanding it.;;;","2022-03-29 16:30;amenkov;[~dholmes] JTReg uses 2 locations for .class files: for libraries and for test itself:
""run compile -g RedefineGenericSignatureTest.java"" causes compilation of the test and all their dependent classes to test-specific directory.
So I see jdk/test/lib/helpers/ClassFileInstaller.class
in test-support/.../classes/2/serviceability/jvmti/RedefineClasses/RedefineGenericSignatureTest.d
Then ""@run main RedefineClassHelper"" causes compilation of RedefineClassHelper to library directories, but this action includes test classpath, so ClassFileInstaller is not recompiled to lib directory.

Later other test is started and does
""@run main RedefineClassHelper""
JTReg sees that RedefineClassHelper.class is present in lib directory and does not compile it:
===============================
command: build RedefineClassHelper
reason: Named class compiled on demand
elapsed time (seconds): 0.001
result: Passed. All files up to date
===============================
But when it tries to executes it we get NoClassDefFoundError.
;;;","2022-03-29 16:41;amenkov;I tried to move ""@run compile -g RedefineGenericSignatureTest.java"" to be executed after ""@run main RedefineClassHelper"", but got NoClassDefFoundError for some other tests. I believe the reason is the same - ""@run compile"" compiles some classes from libs to test-specific location and later we get NoClassDefFoundError for other test because JTReg cannot detect that implicit dependency.;;;","2022-03-29 19:03;dholmes;[~amenkov] Thanks for the additional information. I thought ""@library /test/lib"" was supposed to solve that kind of problem. We never explicitly build the test library using @build. We have other failure modes e.g. ""java.lang.NoClassDefFoundError: jdk/test/lib/compiler/InMemoryJavaCompiler"". So IIUC compiling RedefineGenericSignatureTest.java causes compilation of dependencies from the test library which get put into the test directory; whereas if ""@run main RedefineClassHelper""  executes first, those same dependencies get compiled into the lib directory. But if a later test uses the same lib file it should also be implicitly compiled into that tests directory, as it would not be found in the other tests directory, and is not present in the lib directory - so I don't completely follow what is going on here. I guess I would need to look at each failure in relation to the execution sequence relative to the RedefineGenericSignatureTest.

Regardless we still seem to have this problem that test lib files are not getting compiled as needed and placed where needed.;;;","2022-03-30 16:44;amenkov;InMemoryJavaCompiler error has the same reason, but the case is more tricky.
RedefineClassHelper class has 2 ways to use:
1) (""@run main RedefineClassHelper"") - creates redefineagent.jar, requires ClassFileInstaller
2) static methods redefineClass - requires InMemoryJavaCompiler
The test failed (TestAddDeleteMethods.java) use both ways.
lib directory contains ClassFileInstaller, but does not contain InMemoryJavaCompiler

So we have:
- TestRedefineObject.java does ""@run driver jdk.test.lib.helpers.ClassFileInstaller Agent""
  this causes compilation ClassFileInstaller to the lib dir;
- RedefineGenericSignatureTest does ""@run compile"", so InMemoryJavaCompiler compiled to test dir
- RedefineGenericSignatureTest does """"@run main RedefineClassHelper""
  this compiles RedefineClassHelper to lib dir, but javac doesn't compile InMemoryJavaCompiler as it's present in test dir
- TestAddDeleteMethods does """"@run main RedefineClassHelper"" - works fine
- TestAddDeleteMethods calls RedefineClassHelper.redefineClass() - it fails with NoClassDefFoundError for InMemoryJavaCompiler
;;;","2022-03-30 16:50;amenkov;Failure with ""@compile"" after ""@run main RedefineClassHelper"" is unclear.
I saw the failure in my local environment, but cannot reproduce it anymore (with ~100 runs).
With my current understanding this should not affect other tests as it compiles everything to test dir.;;;","2022-04-04 13:41;dukebot;Changeset: 0cd46f65
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2022-04-04 20:39:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0cd46f655a77662a3ffee057e03025f37530f3aa
;;;","2022-06-07 04:44;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
A small fix but in core functionality, but we should fix this.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-06-07 04:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/439
Date: 2022-06-07 11:44:55 +0000;;;",,,,,,,,,,,,,,,,,,,
"[LOOM] vmTestbase/nsk/jdb/kill/kill001/kill001.java sometimes fails with ""Some MyThreads were killed""",JDK-8283586,5070833,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2022-03-23 11:57,2022-03-30 11:13,2023-10-01 09:56,2022-03-23 12:00,repo-loom,,,,,,,,,repo-loom,core-svc,,0,noreg-self,,,,,,,,,,,,,,,,,,"The output contains:

# ERROR: Some MyThreads were killed.  nsk.jdb.kill.kill001.kill001a.notKilled = 4 remaining
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Some MyThreads were killed.  nsk.jdb.kill.kill001.kill001a.notKilled = 4 remaining
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.jdb.kill.kill001.kill001.runCases(kill001.java:154)
	at nsk.share.jdb.JdbTest.runTest(JdbTest.java:149)
	at nsk.jdb.kill.kill001.kill001.run(kill001.java:81)
	at nsk.jdb.kill.kill001.kill001.main(kill001.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:142)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:293)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:178)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:343)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:336)

Note there should still be 5 MyThreads, but the output says only 4 are left. The issue seems to be the following:

        // Sleep during waitTime to give debugger a chance to kill debugee's thread.
        // Note vthreads need a short sleep because they will never receive the kill,
        // and therefore sleep the full time, resulting in a test timeout if too long.
        try {
            Thread.currentThread().sleep(kill001a.vthreadMode ? 1000 : kill001a.waitTime);
        } catch (InterruptedException e) {

1000ms is much too short, so during some runs the vthread is exiting sleep before the test has had a chance to verify that the thread is still alive after having issued the kill command. Note the kill command is expected to fail for vthreads and will not terminate the thread, so after the kill is done for all 5 threads, they should still all be alive for a short while (until the sleep times out).

The sleep needs to be longer, but we don't want it to be too long because the test always needs to wait until the sleep completes. 20 seconds should be reasonable.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wfm3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-03-23 12:00;cjplummer;Fixed by https://github.com/openjdk/loom/commit/3b64b706426cd3e0739f3bd4c579f5e7114ac322;;;","2022-03-30 11:13;cjplummer;Turns out that this was not an issue with the thread not sleeping for long enough. On exit each of these 5 debuggee threads does the following:

            kill001a.notKilled++;

There is no lock held when doing this, so sometimes the store overwrites an increment just done by another thread. This is why the output says notKilled is 4 when it should be 5. The fix is a synchronized block around the increment.

Fixed by https://github.com/openjdk/loom/commit/1711c74fa7c0bff0f98aaaa76dbfee0af2d9dc6d;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SSLEngine.unwrap on read-only input ByteBuffer,JDK-8283577,5070824,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ascarpino,wetmore,wetmore,2022-03-23 10:34,2022-05-18 23:21,2023-10-01 09:56,2022-05-17 14:41,,,,,,,,,,19,security-libs,,0,,,,,,,,,,,,,,,,,,,"This was reported on the security-dev alias: 

https://mail.openjdk.java.net/pipermail/security-dev/2022-March/029478.html

---begin---
In Netty we've been trying to design some safer APIs, and attempted to make more use of read-only ByteBuffers.

We discovered that SSLEngine.unwrap does not like read-only input buffers, even though the input buffers should in theory only be read from. We obviously make sure that the output buffers are writable.

By my reading of the javadoc, and the code, I believe this was intended to work - or at least not intended to not work - but probably wasn't tested directly.

When we try we get this stack trace on adopt-openjdk-11.0.7:

    javax.net.ssl.SSLProtocolException: null
    at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:129)
    at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:326)
    at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:269)
    at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:264)
    at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:118)
    at java.base/sun.security.ssl.SSLEngineImpl.decode(SSLEngineImpl.java:668)
    at java.base/sun.security.ssl.SSLEngineImpl.readRecord(SSLEngineImpl.java:623)
    at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:441)
    at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:420)
    at java.base/javax.net.ssl.SSLEngine.unwrap(SSLEngine.java:674)
    at io.netty5.handler.ssl.EngineWrapper.unwrap(EngineWrapper.java:100)
    at io.netty5.handler.ssl.SslHandler.unwrap(SslHandler.java:1227)
    at io.netty5.handler.ssl.SslHandler.decodeJdkCompatible(SslHandler.java:1105)
    at io.netty5.handler.ssl.SslHandler.decode(SslHandler.java:1165)
    at io.netty5.handler.codec.ByteToMessageDecoderForBuffer.decodeRemovalReentryProtection(ByteToMessageDecoderForBuffer.java:384)
    at io.netty5.handler.codec.ByteToMessageDecoderForBuffer.callDecode(ByteToMessageDecoderForBuffer.java:327)
    ... 20 common frames omitted
    Caused by: java.nio.ReadOnlyBufferException: null
    at java.base/javax.crypto.Cipher.doFinal(Cipher.java:2493)
    at java.base/sun.security.ssl.SSLCipher$T12GcmReadCipherGenerator$GcmReadCipher.decrypt(SSLCipher.java:1629)
    at java.base/sun.security.ssl.SSLEngineInputRecord.decodeInputRecord(SSLEngineInputRecord.java:240)
    at java.base/sun.security.ssl.SSLEngineInputRecord.decode(SSLEngineInputRecord.java:197)
    at java.base/sun.security.ssl.SSLEngineInputRecord.decode(SSLEngineInputRecord.java:160)
    at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:108)
    ... 31 common frames omitted


I also tried this on a panama-preview snapshot JDK I have, and got a similar stack trace:

    % java -version
    openjdk version ""19-internal"" 2022-09-20
    OpenJDK Runtime Environment (fastdebug build 19-internal-adhoc.chris.panama-foreign)
    OpenJDK 64-Bit Server VM (fastdebug build 19-internal-adhoc.chris.panama-foreign, mixed mode)


    % git show
    commit 144af9f43cd2d6f88b675b8c85e4034e5b9d6695 (HEAD -> foreign-preview, origin/foreign-preview)


    javax.net.ssl.SSLProtocolException: null
    at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:129)
    at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:371)
    at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:314)
    at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:309)
    at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:121)
    at java.base/sun.security.ssl.SSLEngineImpl.decode(SSLEngineImpl.java:736)
    at java.base/sun.security.ssl.SSLEngineImpl.readRecord(SSLEngineImpl.java:691)
    at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:506)
    at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:482)
    at java.base/javax.net.ssl.SSLEngine.unwrap(SSLEngine.java:719)
    at io.netty5.handler.ssl.EngineWrapper.unwrap(EngineWrapper.java:100)
    at io.netty5.handler.ssl.SslHandler.unwrap(SslHandler.java:1227)
    at io.netty5.handler.ssl.SslHandler.decodeJdkCompatible(SslHandler.java:1105)
    at io.netty5.handler.ssl.SslHandler.decode(SslHandler.java:1165)
    at io.netty5.handler.codec.ByteToMessageDecoderForBuffer.decodeRemovalReentryProtection(ByteToMessageDecoderForBuffer.java:384)
    at io.netty5.handler.codec.ByteToMessageDecoderForBuffer.callDecode(ByteToMessageDecoderForBuffer.java:327)
    ... 20 common frames omitted
    Caused by: java.nio.ReadOnlyBufferException: null
    at java.base/javax.crypto.Cipher.doFinal(Cipher.java:2497)
    at java.base/sun.security.ssl.SSLCipher$T13GcmReadCipherGenerator$GcmReadCipher.decrypt(SSLCipher.java:1933)
    at java.base/sun.security.ssl.SSLEngineInputRecord.decodeInputRecord(SSLEngineInputRecord.java:239)
    at java.base/sun.security.ssl.SSLEngineInputRecord.decode(SSLEngineInputRecord.java:196)
    at java.base/sun.security.ssl.SSLEngineInputRecord.decode(SSLEngineInputRecord.java:159)
    at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:111)
    ... 31 common frames omitted


We can work around this in Netty since we need to support JDK versions that has this issue anyway, but I think it's a bug that should be fixed at some point.
---end---",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285603,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wfk3:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-03-23 10:36;wetmore;Asked if there was a reproducer available.

It's likely we are using in-place encryption, which is conflicting with the output.;;;","2022-03-24 13:31;wetmore;Submitter responded reproducer.
https://github.com/netty/netty/pull/12213#issuecomment-1077796917

Pulling into SSLEngineTemplate.java was easy.

% git diff
diff --git a/test/jdk/javax/net/ssl/templates/SSLEngineTemplate.java b/test/jdk/javax/net/ssl/templates/SSLEngineTemplate.java
index 621aaea3546..f9cf474928a 100644
--- a/test/jdk/javax/net/ssl/templates/SSLEngineTemplate.java
+++ b/test/jdk/javax/net/ssl/templates/SSLEngineTemplate.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2022, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -26,8 +26,8 @@

 /*
  * @test
- * @bug 8250839
- * @summary Improve test template SSLEngineTemplate with SSLContextTemplate
+ * @bug 8283577
+ * @summary SSLEngine.unwrap on read-only input ByteBuffer
  * @build SSLContextTemplate
  * @run main/othervm SSLEngineTemplate
  */
@@ -161,7 +161,15 @@ public class SSLEngineTemplate implements SSLContextTemplate {

             // client unwrap
             log(""---Client Unwrap---"");
-            clientResult = clientEngine.unwrap(sTOc, clientIn);
+
+            // Create a read-only buffer using the inbound buffer as the base,
+            // do the unwrap(), then update the original read-write buffer
+            // with the updated position()/limit().
+            ByteBuffer sTOc_ro = sTOc.asReadOnlyBuffer();
+            clientResult = clientEngine.unwrap(sTOc_ro, clientIn);
+            sTOc.position(sTOc_ro.position());
+            sTOc.limit(sTOc.limit());
+
             logEngineStatus(clientEngine, clientResult);
             runDelegatedTasks(clientEngine);

;;;","2022-03-24 13:37;wetmore;On the third client Unwrap, the first encrypted message (encrypted extensions) is being decrypted and failing.

---Client Unwrap---
javax.net.ssl.SSLProtocolException
	at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:128)
	at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:371)
	at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:314)
	at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:309)
	at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:121)
	at java.base/sun.security.ssl.SSLEngineImpl.decode(SSLEngineImpl.java:736)
	at java.base/sun.security.ssl.SSLEngineImpl.readRecord(SSLEngineImpl.java:691)
	at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:506)
	at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:482)
	at java.base/javax.net.ssl.SSLEngine.unwrap(SSLEngine.java:679)
	at SSLEngineTemplate.runTest(SSLEngineTemplate.java:169)
	at SSLEngineTemplate.main(SSLEngineTemplate.java:132)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)
Caused by: java.nio.ReadOnlyBufferException
	at java.base/javax.crypto.Cipher.doFinal(Cipher.java:2497)
	at java.base/sun.security.ssl.SSLCipher$T13GcmReadCipherGenerator$GcmReadCipher.decrypt(SSLCipher.java:1935)
	at java.base/sun.security.ssl.SSLEngineInputRecord.decodeInputRecord(SSLEngineInputRecord.java:239)
	at java.base/sun.security.ssl.SSLEngineInputRecord.decode(SSLEngineInputRecord.java:196)
	at java.base/sun.security.ssl.SSLEngineInputRecord.decode(SSLEngineInputRecord.java:159)
	at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:111)
	... 11 more

JavaTest Message: Test threw exception: javax.net.ssl.SSLProtocolException
JavaTest Message: shutting down test;;;","2022-03-24 17:10;wetmore;Indeed we are doing in-place decryption as an optimization to avoid extra allocations/copies, and have been doing so since the very first implementation of SSLEngine in JDK 1.5. 

We can either document this behavior as an @implNote and/or change the SSLCipher code (the old CipherBox code) to allocate a new destination ByteBuffer if the src ByteBuffer is read-only.

The latter would be really straightforward in the current code, as the new dst ByteBuffer would be completely independent of the source ByteBuffer, and the resulting source limits/position of the src ByteBuffer are adjusted in the higher levels following decryption.


diff --git a/src/java.base/share/classes/sun/security/ssl/SSLCipher.java b/src/java.base/share/classes/sun/security/ssl/SSLCipher.java
index d44fb11014e..b0f048af008 100644
--- a/src/java.base/share/classes/sun/security/ssl/SSLCipher.java
+++ b/src/java.base/share/classes/sun/security/ssl/SSLCipher.java
@@ -1930,9 +1930,11 @@ enum SSLCipher {
                 cipher.updateAAD(aad);

                 int len, pos = bb.position();
-                ByteBuffer dup = bb.duplicate();
+                ByteBuffer dst = bb.isReadOnly() ? bb.duplicate() :
+                        (bb.isDirect() ? bb.allocateDirect(bb.remaining()) :
+                        bb.allocate(bb.remaining()));
                 try {
-                    len = cipher.doFinal(dup, bb);
+                    len = cipher.doFinal(bb, dst);
                 } catch (IllegalBlockSizeException ibse) {
                     // unlikely to happen
                     throw new RuntimeException(
@@ -1969,7 +1971,7 @@ enum SSLCipher {

                 return new Plaintext(contentType,
                         ProtocolVersion.NONE.major, ProtocolVersion.NONE.minor,
-                        -1, -1L, bb.slice());
+                        -1, -1L, dst);
             }

             @Override
;;;","2022-03-29 11:22;ascarpino;The fix will be two fold:
- Check for a readonly buffer in SSLCipher classes and use an alternative buffer for output.  This will be a memory/performance loss for those using read-only buffers but that is their choice.  The existing read-write bytebuffer path will remain unchanged.
- Document in the spec that wrap/unwrap may overwrite the input buffer.  There is no compatibility risk here because it has been this way since day 1.;;;","2022-04-29 12:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8462
Date: 2022-04-29 03:58:57 +0000;;;","2022-05-17 14:41;dukebot;Changeset: f17c68ce
Author:    Anthony Scarpino <ascarpino@openjdk.org>
Date:      2022-05-17 21:39:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f17c68ce4a0b4f5c3131f4e4626a5a55b7f2f61f
;;;",,,,,,,,,,,,,,,,,,,,,,,
Check for GNU time fails for version >1.7,JDK-8283575,5070820,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,erikj,erikj,erikj,2022-03-23 08:34,2022-03-30 17:57,2023-10-01 09:56,2022-03-24 05:51,,,,,,,,,,19,infrastructure,,0,,,,,,,,,,,,,,,,,,,"The version output of GNU time changed from ""GNU time"" to ""GNU Time"" in version 1.8. We need to update our check for identifying GNU time to handle this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wfj7:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-03-23 08:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7925
Date: 2022-03-23 15:35:44 +0000;;;","2022-03-24 05:51;dukebot;Changeset: 1c4f5fcb
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-03-24 12:48:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1c4f5fcb88892e6c76074eac87b63d81d53647b2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Make Object an abstract class,JDK-8283573,5070817,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,fparain,fparain,fparain,2022-03-23 07:21,2022-03-29 07:14,2023-10-01 09:56,2022-03-29 07:14,repo-valhalla,,,,,,,,,,hotspot,,0,lworld,,,,,,,,,,,,,,,,,,"The latest JVMS draft for Value classes states that the class java.lang.Object must be abstract:

""The class Object is assumed to be declared abstract with its ACC_PERMITS_VALUE flag set.""

The JVMS draft also specifies that the bytecode new must have a special behavior when used with the java.lang.Object class in argument:

""A modern class file should avoid applying the new opcode to the class Object, which is abstract and cannot be instantiated directly. However, for compatibility with bytecode written when Object was not abstract, the Java Virtual Machine supports these instructions by creating instances of the class Identity. The verifier will expect the instruction to be followed by an invocation of the instance initialization method of Object, not Identity, but this anomaly is tolerable because the Identity class requires no initialization.""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wfij:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-23 07:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/602
Date: 2022-01-13 20:22:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8282306 breaks gtests on zero,JDK-8283562,5070805,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-03-23 05:35,2022-06-20 00:17,2023-10-01 09:56,2022-03-23 05:58,19,,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"JDK-8282306 introduced os.is_first_C_frame_vm, but that breaks on zero since the test relies on os::current_frame(), which on all zero platforms is almost empty.

```
[ RUN      ] os.is_first_C_frame_vm
/shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/runtime/test_os.cpp:876: Failure
Value of: os::is_first_C_frame(&cur_frame)
  Actual: true
Expected: false
[  FAILED  ] os.is_first_C_frame_vm (0 ms)
```

A usable fix would be to use getcontext() to implement os::current_frame() on these platforms. But let's just exclude the test for now on Zero.",,,,,,,,,,,JDK-8288419,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282306,,,,,,JDK-8288720,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wffv:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-23 05:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7920
Date: 2022-03-23 12:41:50 +0000;;;","2022-03-23 05:58;dukebot;Changeset: 78ef2fde
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-03-23 12:55:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/78ef2fdef68c5161c8875296e9479026ac89743a
;;;","2022-06-14 00:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/466
Date: 2022-06-14 07:41:01 +0000;;;","2022-06-14 01:18;jbechberger;Fix Request (17u):
Fix test being executed on zero build.
Trivial change.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
G1: Concurrent mark accesses uninitialized BOT of closed archive regions,JDK-8283555,5070797,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,tschatzl,tschatzl,tschatzl,2022-03-23 03:16,2022-08-04 07:19,2023-10-01 09:56,2022-03-24 07:37,18,19,repo-loom,,,,,,,19,hotspot,,0,cds,gc-g1,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,shared-heap,,,,,,,,,,,,,"runtime/cds/appcds/cacheObject/ArchivedIntegerCacheTest.java in the loom repo reproducably crashes with the following stack trace:

V  [libjvm.so+0x7231a4]  oopDesc::size_given_klass(Klass*)+0x14
V  [libjvm.so+0xd8bd97]  HeapRegion::block_size(HeapWordImpl* const*) const+0x377
V  [libjvm.so+0xdad177]  G1BlockOffsetTablePart::block_start(void const*)+0x127
V  [libjvm.so+0xdd1693]  G1CMObjArrayProcessor::process_slice(HeapWordImpl**)+0x333
V  [libjvm.so+0xdc88fc]  void G1CMTask::process_grey_task_entry<true>(G1TaskQueueEntry)+0x2c
V  [libjvm.so+0xdc0dac]  G1CMTask::drain_local_queue(bool) [clone .part.0]+0x8c
V  [libjvm.so+0xdc332b]  G1CMTask::do_marking_step(double, bool, bool)+0x131b
V  [libjvm.so+0xdce88d]  G1CMConcurrentMarkingTask::work(unsigned int)+0x17d
V  [libjvm.so+0x1befb01]  WorkerThread::run()+0x81
V  [libjvm.so+0x1a98230]  Thread::call_run()+0x100
V  [libjvm.so+0x17674b4]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,JDK-8283888,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283471,,,,,,,,JDK-8264908,JDK-8284995,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wfe3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-03-23 04:51;tschatzl;Marking after the first GC crashes:

GC Heap History (2 events):
Event: 4.737 GC heap before
{Heap before GC invocations=0 (full 0):
 garbage-first heap   total 765952K, used 2284K [0x0000000083e00000, 0x0000000100000000)
  region size 1024K, 2 young (2048K), 0 survivors (0K)
 Metaspace       used 812K, committed 1024K, reserved 1114112K
  class space    used 4K, committed 128K, reserved 1048576K
}
Event: 4.742 GC heap after
{Heap after GC invocations=1 (full 0):
 garbage-first heap   total 765952K, used 1500K [0x0000000083e00000, 0x0000000100000000)
  region size 1024K, 1 young (1024K), 1 survivors (1024K)
 Metaspace       used 812K, committed 1024K, reserved 1114112K
  class space    used 4K, committed 128K, reserved 1048576K
}

Improved stack trace:

#41 <signal handler called>
#42 0x00007f51df1fd934 in Klass::layout_helper (this=0x8fff9c808)
    at .../open/src/hotspot/share/oops/klass.hpp:279
#43 oopDesc::size_given_klass (this=0xfff7d000, klass=0x8fff9c808)
    at .../open/src/hotspot/share/oops/oop.inline.hpp:152
#44 0x00007f51df8576fd in oopDesc::size (this=<optimized out>)
    at .../open/src/hotspot/share/oops/oop.inline.hpp:148
#45 HeapRegion::block_size (this=<optimized out>, addr=<optimized out>)
    at .../open/src/hotspot/share/gc/g1/heapRegion.inline.hpp:147
#46 0x00007f51df888821 in G1BlockOffsetTablePart::block_size (p=0xfff7d000, this=0x7f51d8393a48)
    at .../open/src/hotspot/share/gc/g1/g1BlockOffsetTable.inline.hpp:99
#47 G1BlockOffsetTablePart::block_start (this=0x7f51d8393a48, addr=addr@entry=0xfff7d0d0)
    at .../open/src/hotspot/share/gc/g1/g1BlockOffsetTable.inline.hpp:38
#48 0x00007f51df87f61a in HeapRegion::block_start (p=0xfff7d0d0, this=<optimized out>)
    at .../open/src/hotspot/share/gc/g1/heapRegion.inline.hpp:83
#49 0x00007f51df8aad13 in G1CMObjArrayProcessor::process_slice (this=this@entry=0x7f51d80a3378, slice=0xfff7d0d0)
    at .../open/src/hotspot/share/gc/g1/g1ConcurrentMarkObjArrayProcessor.cpp:62
#50 0x00007f51df8a2edc in G1CMTask::process_grey_task_entry<true> (this=this@entry=0x7f51d80a3370, task_entry=...)
    at .../open/src/hotspot/share/gc/g1/g1ConcurrentMark.inline.hpp:185
#51 0x00007f51df89b2af in G1CMTask::scan_task_entry (task_entry=..., this=0x7f51d80a3370)
    at .../open/src/hotspot/share/gc/g1/g1ConcurrentMark.inline.hpp:126
#52 G1CMTask::drain_local_queue (this=0x7f51d80a3370, partially=true)
    at .../open/src/hotspot/share/gc/g1/g1ConcurrentMark.cpp:2356
#53 0x00007f51df89b4fa in G1CMTask::drain_local_queue (partially=true, this=<optimized out>)
    at .../open/src/hotspot/share/gc/g1/g1ConcurrentMark.hpp:770
#54 G1CMBitMapClosure::do_addr (this=this@entry=0x7f51dcb90d10, addr=addr@entry=0xffe01fb8)
    at .../open/src/hotspot/share/gc/g1/g1ConcurrentMark.cpp:88
#55 0x00007f51df89cf2b in G1CMBitMap::iterate (mr=..., cl=0x7f51dcb90d10, this=0x7f51d8090458)
    at .../open/src/hotspot/share/gc/g1/g1ConcurrentMarkBitMap.inline.hpp:46
#56 G1CMTask::do_marking_step (this=this@entry=0x7f51d80a3370, time_target_ms=<optimized out>, do_termination=do_termination@entry=true, 
    is_serial=is_serial@entry=false)

So we crash looking for an object start in the BOT for an array slice at 0xfff7d0d0 (#49).

That address is in a closed-archive region, see below.

|1985|0x00000000fff00000, 0x00000000fffe1000, 0x0000000100000000| 87%|CA|  |TAMS 0x00000000fff00000, 0x00000000fffe1000| Untracked

We should not mark through closed archive regions at all?;;;","2022-03-23 05:05;tschatzl;The additional gc is caused by the VM deciding to do a concurrent gc due to code cache getting full.

[0.039s][info][gc] Using G1
[1.215s][info][gc] GC(0) Pause Young (Concurrent Start) (CodeCache GC Threshold) 6M->1M(1024M) 3.252ms;;;","2022-03-23 07:46;tschatzl;In JDK-8264908 we removed code that implicitly handles queries for any BOT addresses, even ones which BOT were not initialized using G1 BOT's _next_offset_threshold. This change started removing this functionality.

This is problematic, because when marking through closed archive regions, if there is an object that needs to be chunked, this algorithm needs the BOT.

Without initialized BOT this returns garbage, causing various kinds of crashes as seen here and in JDK-8283471.;;;","2022-03-23 08:05;tschatzl;The fix is to initialize the BOT for closed archive regions like we already do for open archive regions.;;;","2022-03-23 08:15;tschatzl;This issue reproduces very well with the Loom repo with -Xcomp due to Loom ""regularly"" causing crashes shown here.;;;","2022-03-23 09:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7923
Date: 2022-03-23 15:29:39 +0000;;;","2022-03-24 07:37;dukebot;Changeset: 19f01ab7
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-03-24 14:35:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/19f01ab70133d244422684f63f118249178bce4a
;;;","2022-03-25 03:39;tschatzl;jdk18u-fix-request

Removes the possibility for a crash with G1 during marking. Has not been observed with 18 yet, but the change that is the requirement for the crashing situation to occur is in 18. Applies cleanly. Low risk as it only adds some setup. No problems in jdk19 CI.;;;","2022-03-25 03:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/54
Date: 2022-03-25 10:43:12 +0000;;;",,,,,,,,,,,,,,,,,,,,,
ControlAcceleratorSupport menu items listener causes memory leak,JDK-8283551,5070733,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,arapte,webbuggrp,webbuggrp,2022-03-22 07:20,2023-07-17 14:58,2023-10-01 09:56,2023-06-28 00:00,jfx13,,,,,,,,,jfx21,javafx,,0,additional-information-received,dcspn,reproducer-yes,sn_147,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Microsoft Windows [Version 10.0.17134.1040]
openjdk version ""13"" 2019-09-17
OpenJDK Runtime Environment AdoptOpenJDK (build 13+33)
OpenJDK 64-Bit Server VM AdoptOpenJDK (build 13+33, mixed mode, sharing)


A DESCRIPTION OF THE PROBLEM :
ControlAcceleratorSupport menu items listener is not cleared in removeAcceleratorsFromScene action, which causes memory leak while moving MenuBar with items to other scene. Removing is called in javafx.scene.control.skin.MenuButtonSkinBase#sceneChangeListener, but it does not handle the items' listener, so it just constantly adds new listeners on scene change, which grow up in memory.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Open provided TwoStagesMenuBarLeakSample.
2. Keep pressing F11.
3. Observe the ControlAcceleratorSupport count in memory analyzing tools - jvisualvm or Eclipse MAT.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
After 3. the ControlAcceleratorSupport count should be moreless the same as after 1.
ACTUAL -
lambda from ControlAcceleratorSupport  count keeps growing up in the memory causing memory leak

---------- BEGIN SOURCE ----------

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.input.KeyCombination;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

public class TwoStagesMenuBarLeakSample
{

    public static void main( String[] args )
    {
        System.err.println( Runtime.version().toString() );
        Application.launch( TwoStagesMenuBarLeakSample.MainFx.class, args );
    }

    public static class MainFx extends Application
    {

        @Override
        public void start( final Stage primaryStage ) throws Exception
        {
            final BorderPane borderPane = new BorderPane( new VBox( new Label( ""sample"" ) ) );
            final Menu one = new Menu( ""_One"" );
            one.getItems().add( new MenuItem( ""Sample 1"" ) );
            one.getItems().add( new MenuItem( ""Sample 2"" ) );
            one.getItems().add( new MenuItem( ""Sample 3"" ) );
            one.getItems().add( new MenuItem( ""Sample 4"" ) );
            final var menuBar = new MenuBar( one );
            borderPane.setTop( menuBar );
            borderPane.setCenter( new Label( ""Press F11 to switch MenuBar to other window."" ) );
            Scene scene = new Scene( borderPane, 800, 600 );
            primaryStage.setScene( scene );
            primaryStage.show();
            final var stage2 = new Stage( StageStyle.DECORATED );
            final BorderPane stage2Container = new BorderPane();
            stage2Container.setCenter( new Label( ""Press F11 to switch MenuBar to other window."" ) );
            stage2.setScene( new Scene( stage2Container, 800, 600 ) );
            primaryStage.addEventHandler( KeyEvent.KEY_PRESSED, aKeyEvent -> {
                if( KeyCombination.keyCombination( ""F11"" ).match( aKeyEvent ) )
                {
                    stage2Container.setTop( menuBar );
                    stage2.requestFocus();
                }
            } );
            stage2.addEventHandler( KeyEvent.KEY_PRESSED, aKeyEvent -> {
                if( KeyCombination.keyCombination( ""F11"" ).match( aKeyEvent ) )
                {
                    borderPane.setTop( menuBar );
                    primaryStage.requestFocus();
                }
            } );
            stage2.show();
        }

    }

}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Recreating menu bar on scene change.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8241364,,,,,,,,,,,,,,,,JDK-8244075,,,,,,"2022-03-23 02:13;pnarayanaswa;TwoStagesMenuBarLeakSample.java;https://bugs.openjdk.org/secure/attachment/98363/TwoStagesMenuBarLeakSample.java",,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wezv:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-03-23 02:15;pnarayanaswa;Mail to submitter:
=============
The issue has been resolved in Java FX 17 [1].
Please share your feedback checking in latest/early-access builds.

[1] https://gluonhq.com/products/javafx/;;;","2022-04-25 22:30;pnarayanaswa;Additional Information from submitter:
==============================
The linked issue (JDK-8244075) is a separate bug, not related to current one, except it touches the same class.
I have tested my issue on the latest JavaFX 17 and it is replicable there.

Please run the test case and observe ControlAccelerationSupport's lambda's count growing in memory.;;;","2023-02-16 07:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1037
Date: 2023-02-16 15:15:11 +0000;;;","2023-06-28 00:00;dukebot;Changeset: 8fd2943c
Author:    Dean Wookey <dwookey@openjdk.org>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2023-06-28 06:58:37 +0000
URL:       https://git.openjdk.org/jfx/commit/8fd2943c52cb47ec247ce0e6657afdc9bdc725ae
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
HttpClient GET method adds Content-Length: 0 header,JDK-8283544,5070744,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,ccleary,webbuggrp,webbuggrp,2022-03-22 10:16,2022-08-09 09:02,2023-10-01 09:56,2022-05-17 03:06,11,17,18,19,,,,,,19,core-libs,,0,dcsaw,reproducer-other,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Using HttpRequest.newBuilder() to create a simple GET() request, and executing it using HttpClient's send() method sends an HTTP 1.1 header containing the content-length: 0 header+value.
Quite some services die on this header because they do not expect a body related header for a get.

The code in question is in Http1Request method headers() which contains:
        if (contentLength == 0) {
            systemHeadersBuilder.setHeader(""Content-Length"", ""0"");
        } else if (contentLength > 0) {
            systemHeadersBuilder.setHeader(""Content-Length"", Long.toString(contentLength));
            streaming = false;
        } else {
            streaming = true;
            systemHeadersBuilder.setHeader(""Transfer-encoding"", ""chunked"");
        }

This always sends a body related header. It should probably skip this part altogether for a GET.


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283605,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wf2b:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-03-22 20:41;tongwan;The source code mentioned in the report can be found at:
https://github.com/openjdk/jdk/blob/master/src/java.net.http/share/classes/jdk/internal/net/http/Http1Request.java#L301;;;","2022-03-29 09:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8017
Date: 2022-03-29 15:44:58 +0000;;;","2022-05-17 03:06;dukebot;Changeset: 6a770932
Author:    Conor Cleary <ccleary@openjdk.org>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-05-17 10:01:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6a7709320d28d8e1593b113fdf39ab583fca3687
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
indentation error at com.sun.tools.javac.comp.Enter::visitTopLevel,JDK-8283543,5070776,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-03-22 20:32,2022-03-23 17:47,2023-10-01 09:56,2022-03-23 03:36,,,,,,,,,,19,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,"line: `c.completer = Completer.NULL_COMPLETER;` has an incorrect indentation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wf9f:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-03-22 20:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7915
Date: 2022-03-23 03:47:51 +0000;;;","2022-03-23 03:36;dukebot;Changeset: 6ed0ba2f
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2022-03-23 10:34:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6ed0ba2f8a2af58c45a6b7be684ef30d15af6ead
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
http://tools.ietf.org/html/* URLs return 404,JDK-8283525,5070747,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lpinto,coffeys,coffeys,2022-03-22 10:40,2022-04-06 23:59,2023-10-01 09:56,2022-04-01 06:28,,,,,,,,,,19,security-libs,,0,starter-bug,,,,,,,,,,,,,,,,,,"http://tools.ietf.org/html/* type URLs no longer work. https should be used.

$ grep -r ""http://tools.ietf.org/html/""
src/java.security.jgss/share/classes/org/ietf/jgss/GSSContext.java: * <a href=""http://tools.ietf.org/html/rfc8353"">
src/java.desktop/share/classes/javax/imageio/plugins/tiff/FaxTIFFTagSet.java: * <a href=""http://tools.ietf.org/html/rfc2306.html"">TIFF-F</a> (RFC 2036) file.
src/jdk.jartool/share/man/jarsigner.1:[http://tools.ietf.org/html/rfc1421].
src/jdk.sctp/share/classes/com/sun/nio/sctp/package-info.java: * <A HREF=""http://tools.ietf.org/html/rfc4960"">RFC4960</A>, and the optional
src/jdk.sctp/share/classes/com/sun/nio/sctp/package-info.java: * <A HREF=""http://tools.ietf.org/html/rfc5061"">RFC5061</A>.
src/jdk.sctp/share/classes/com/sun/nio/sctp/Association.java: * <A HREF=""http://tools.ietf.org/html/rfc5061"">RFC5061</A>, see the
src/java.base/share/classes/java/util/Locale.java: * <a href=""http://tools.ietf.org/html/rfc4647"">RFC 4647 ""Matching of Language
src/java.base/share/classes/java/util/Locale.java: * Tags""</a> and <a href=""http://tools.ietf.org/html/rfc5646"">RFC 5646 ""Tags
src/java.base/share/classes/java/util/Locale.java: * tags, <a href=""http://tools.ietf.org/html/rfc4647"">RFC 4647 Matching of
src/java.base/share/classes/java/util/Locale.java:     * matching. Refer to <a href=""http://tools.ietf.org/html/rfc4647"">RFC 4647
src/java.base/share/classes/java/util/Locale.java:     * <a href=""http://tools.ietf.org/html/rfc4647"">RFC 4647 Matching of
src/java.base/share/classes/java/util/Locale.java:     * <a href=""http://tools.ietf.org/html/rfc4234"">ABNF</a> as follows:
src/java.base/share/classes/java/util/Locale.java:         * <a href=""http://tools.ietf.org/html/rfc2616"">RFC 2616</a>, and it
src/java.base/share/classes/java/util/Locale.java:         *     defined in <a href=""http://tools.ietf.org/html/rfc2616"">RFC
src/java.base/share/classes/java/util/Locale.java:         *     defined in <a href=""http://tools.ietf.org/html/rfc2616"">RFC
src/java.base/share/classes/java/security/cert/CRLReason.java: * is revoked, as defined in <a href=""http://tools.ietf.org/html/rfc5280"">
src/java.base/share/classes/java/security/cert/X509CRLSelector.java: * Please refer to <a href=""http://tools.ietf.org/html/rfc5280"">RFC 5280:
src/java.base/share/classes/java/security/cert/TrustAnchor.java:     * <a href=""http://tools.ietf.org/html/rfc5280"">RFC 5280</a>
src/java.base/share/classes/java/security/cert/X509Certificate.java: * <a href=""http://tools.ietf.org/html/rfc5280"">RFC 5280: Internet X.509
src/java.base/share/classes/java/security/cert/X509CertSelector.java: * Please refer to <a href=""http://tools.ietf.org/html/rfc5280"">RFC 5280:
src/java.base/share/classes/java/security/cert/X509CRL.java: * <a href=""http://tools.ietf.org/html/rfc5280"">RFC 5280: Internet X.509
src/java.base/share/classes/java/security/Key.java: * <a href=""http://tools.ietf.org/html/rfc5280"">RFC 5280:
src/java.base/share/classes/java/security/SecureRandom.java: * <a href=""http://tools.ietf.org/html/rfc4086"">
src/java.base/share/classes/sun/security/x509/X509CRLImpl.java: * <a href=""http://tools.ietf.org/html/rfc5280"">RFC 5280: Internet X.509
src/java.base/share/classes/sun/security/x509/FreshestCRLExtension.java: * <a href=""http://tools.ietf.org/html/rfc5280"">Internet X.509 PKI
src/java.base/share/classes/sun/security/x509/AuthorityInfoAccessExtension.java: * This extension is defined in <a href=""http://tools.ietf.org/html/rfc5280"">
src/java.base/share/classes/sun/security/x509/SubjectInfoAccessExtension.java: * This extension is defined in <a href=""http://tools.ietf.org/html/rfc5280"">
src/java.base/share/classes/sun/security/x509/DeltaCRLIndicatorExtension.java: * <a href=""http://tools.ietf.org/html/rfc5280"">Internet X.509 PKI
src/java.base/share/classes/sun/security/x509/IssuingDistributionPointExtension.java: * <a href=""http://tools.ietf.org/html/rfc5280"">Internet X.509 PKI
src/java.base/share/classes/sun/security/pkcs/PKCS7.java:     * (<a href=""http://tools.ietf.org/html/rfc5280"">RFC 5280</a>).
src/java.base/share/classes/javax/security/auth/x500/X500Principal.java: * <a href=""http://tools.ietf.org/html/rfc2253"">RFC 2253: Lightweight
src/java.base/share/classes/javax/security/auth/x500/X500Principal.java: * both RFC 2253 and <a href=""http://tools.ietf.org/html/rfc1779"">RFC 1779:
src/java.base/share/classes/javax/security/auth/x500/X500Principal.java: * <a href=""http://tools.ietf.org/html/rfc5280"">RFC 5280: Internet X.509
src/java.base/share/classes/javax/security/auth/x500/package-info.java: *   <li><a href=""http://tools.ietf.org/html/rfc1779"">
src/java.base/share/classes/javax/security/auth/x500/package-info.java: *   <li><a href=""http://tools.ietf.org/html/rfc2253"">
src/java.base/share/classes/javax/security/auth/x500/package-info.java: *   <li><a href=""http://tools.ietf.org/html/rfc5280"">
src/java.base/share/classes/javax/security/auth/x500/package-info.java: *   <li><a href=""http://tools.ietf.org/html/rfc4512"">
src/java.base/share/classes/javax/crypto/spec/RC5ParameterSpec.java: * <a href=""http://tools.ietf.org/html/rfc2040""><i>RC5</i></a>
src/java.base/share/native/libzip/zlib/README:http://tools.ietf.org/html/rfc1950 (zlib format), rfc1951 (deflate format) and
src/java.base/share/native/libzip/zlib/deflate.c: *      Available in http://tools.ietf.org/html/rfc1951
src/java.base/share/native/libzip/zlib/zlib.h:  Comments) 1950 to 1952 in the files http://tools.ietf.org/html/rfc1950
src/java.base/share/native/libzip/zlib/ChangeLog:- Update RFC references to use http://tools.ietf.org/html/... [Li]
test/jdk/javax/naming/module/src/authz/org/example/authz/AuthzIdRequestControl.java: * <a href=""http://tools.ietf.org/html/rfc3829"">RFC 3829</a>.
test/jdk/javax/naming/module/src/authz/org/example/authz/AuthzIdResponseControl.java: * <a href=""http://tools.ietf.org/html/rfc3829"">RFC 3829</a>.
test/jdk/java/net/httpclient/http2/java.net.http/jdk/internal/net/http/hpack/DecoderTest.java:    // http://tools.ietf.org/html/rfc7541#appendix-C.2.1
test/jdk/java/net/httpclient/http2/java.net.http/jdk/internal/net/http/hpack/DecoderTest.java:    // http://tools.ietf.org/html/rfc7541#appendix-C.2.2
test/jdk/java/net/httpclient/http2/java.net.http/jdk/internal/net/http/hpack/DecoderTest.java:    // http://tools.ietf.org/html/rfc7541#appendix-C.2.3
test/jdk/java/net/httpclient/http2/java.net.http/jdk/internal/net/http/hpack/DecoderTest.java:    // http://tools.ietf.org/html/rfc7541#appendix-C.2.4
test/jdk/java/net/httpclient/http2/java.net.http/jdk/internal/net/http/hpack/DecoderTest.java:    // http://tools.ietf.org/html/rfc7541#appendix-C.3
test/jdk/java/net/httpclient/http2/java.net.http/jdk/internal/net/http/hpack/DecoderTest.java:    // http://tools.ietf.org/html/rfc7541#appendix-C.4
test/jdk/java/net/httpclient/http2/java.net.http/jdk/internal/net/http/hpack/DecoderTest.java:    // http://tools.ietf.org/html/rfc7541#appendix-C.5
test/jdk/java/net/httpclient/http2/java.net.http/jdk/internal/net/http/hpack/DecoderTest.java:    // http://tools.ietf.org/html/rfc7541#appendix-C.6
test/jdk/java/net/httpclient/http2/java.net.http/jdk/internal/net/http/hpack/EncoderTest.java:    // http://tools.ietf.org/html/rfc7541#appendix-C.2.1
test/jdk/java/net/httpclient/http2/java.net.http/jdk/internal/net/http/hpack/EncoderTest.java:    // http://tools.ietf.org/html/rfc7541#appendix-C.2.2
test/jdk/java/net/httpclient/http2/java.net.http/jdk/internal/net/http/hpack/EncoderTest.java:    // http://tools.ietf.org/html/rfc7541#appendix-C.2.3
test/jdk/java/net/httpclient/http2/java.net.http/jdk/internal/net/http/hpack/EncoderTest.java:    // http://tools.ietf.org/html/rfc7541#appendix-C.2.4
test/jdk/java/net/httpclient/http2/java.net.http/jdk/internal/net/http/hpack/EncoderTest.java:    // http://tools.ietf.org/html/rfc7541#appendix-C.3
test/jdk/java/net/httpclient/http2/java.net.http/jdk/internal/net/http/hpack/EncoderTest.java:    // http://tools.ietf.org/html/rfc7541#appendix-C.4
test/jdk/java/net/httpclient/http2/java.net.http/jdk/internal/net/http/hpack/EncoderTest.java:    // http://tools.ietf.org/html/rfc7541#appendix-C.5
test/jdk/java/net/httpclient/http2/java.net.http/jdk/internal/net/http/hpack/EncoderTest.java:    // http://tools.ietf.org/html/rfc7541#appendix-C.6
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wf2z:",9223372036854775807,b17,,,,,,,,,,,"2022-03-24 08:41;coffeys;edit: these links appear to be working again. (http redirects to new resource) - in any case, we should probably update the links to https;;;","2022-04-01 03:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7956
Date: 2022-03-25 12:10:01 +0000;;;","2022-04-01 06:28;dukebot;Changeset: 63fec5da
Author:    Luis Pinto <luis.pinto@oracle.com>
Committer: Sean Coffey <coffeys@openjdk.org>
Date:      2022-04-01 13:26:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/63fec5da27994b05a58ce1abcfe07a8ed8bc497b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Memory leak in dcmd_arena,JDK-8283520,5070739,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,shade,shade,2022-03-22 08:23,2023-05-28 22:05,2023-10-01 09:56,2022-05-18 02:11,17,18,19,,,,,,,19,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,regression,,,,,,,,,,,,,,,"JDK-8268702 added:

// Since the DcmdFramework does not support dynamically allocated strings,
// we keep them in a thread local arena. The arena is reset between invocations.
static THREAD_LOCAL Arena* dcmd_arena = NULL;

...but that dcmd_arena is not cleared when thread dies.

 So if you run the workload like this:

import javax.management.MBeanServer;
import javax.management.ObjectName;

public class Leak {
  public static void main(String[] args) throws Throwable {
    ObjectName name = ObjectName.getInstance(""com.sun.management:type=DiagnosticCommand"");
    MBeanServer server = java.lang.management.ManagementFactory.getPlatformMBeanServer();
    while (true) {
      new Thread(() -> {
        try {
          server.getMBeanInfo(name);
        } catch (Throwable e) {
          e.printStackTrace();
        }
      }).start();
      Thread.sleep(1L);
    }
  }
}

...then there is a memory leak in:

//
//-                   Tracing (reserved=1089KB, committed=1089KB)
//                            (malloc=2KB #43)
//                            (arena=1087KB #34)
//--
//[0x0000000103c2f358] JfrDCmd::argument_info_array() const+0x1d0
//[0x0000000103ed3c38] jmm_GetDiagnosticCommandArgumentsInfo+0x134
//[0x00000001028e9c6c] getDiagnosticCommandArgumentInfoArray+0x78
//[0x00000001028ea0c4] Java_com_sun_management_internal_DiagnosticCommandImpl_getDiagnosticCommandInfo+0x198
//                             (malloc=2KB type=Tracing #34)

The relevant problem is that once the thread does this Dcmd only once, the arena is kept around even when not in use.

This was observed in the wild: the Prometheus scraper was getting the MBean info, and the delay between scraps was enough to get the new thread at every scrap, which exposed the memory leak.",,,,,,,,,,,JDK-8302832,JDK-8308897,JDK-8309005,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268702,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wf17:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-05-16 06:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8727
Date: 2022-05-16 13:47:53 +0000;;;","2022-05-18 02:11;dukebot;Changeset: 6a8be358
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2022-05-18 09:09:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6a8be358d2af34fab8798077202b998badaa5d54
;;;","2023-05-23 04:30;shade;Fix Request (17u)

Fixes a memory leak, regression in JDK 17. Applies semi-cleanly (git does not apply the patch, but after by-hand resolution, Skara thinks the backport is clear). Testing passes, leak is not observed anymore.;;;","2023-05-23 05:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1388
Date: 2023-05-23 10:58:58 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Hsdis with capstone should annotate output,JDK-8283519,5070737,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2022-03-22 08:14,2022-03-30 17:57,2023-10-01 09:56,2022-03-24 00:54,,,,,,,,,,19,infrastructure,,0,,,,,,,,,,,,,,,,,,,Assembly annotations are missing when using hsdis with capstone backend. They should be added for parity with other backends.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8188073,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wf0r:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-03-22 08:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7904
Date: 2022-03-22 15:20:38 +0000;;;","2022-03-24 00:54;dukebot;Changeset: a35afe84
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-03-24 07:53:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a35afe84c3032cb10720bcd16498e2969cea0b86
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update boot JDK to 18,JDK-8283517,5070735,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2022-03-22 07:42,2022-05-10 03:35,2023-10-01 09:56,2022-03-29 04:55,jfx19,,,,,,,,,jfx19,javafx,,0,noreg-build,sn_114,,,,,,,,,,,,,,,,,"Now that JDK 18 has released we should update the boot JDK for JavaFX to use JDK 18.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285253,JDK-8280280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wf0b:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-03-25 05:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/760
Date: 2022-03-25 12:16:18 +0000;;;","2022-03-29 04:55;dukebot;Changeset: d1fb3d3d
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-03-29 11:53:17 +0000
URL:       https://git.openjdk.java.net/jfx/commit/d1fb3d3d022112b4a61e44530e206146edeb74b6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invisible menus can lead to IndexOutOfBoundsException,JDK-8283509,5070725,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rlichten,rlichten,rlichten,2022-03-22 06:30,2022-04-05 09:45,2023-10-01 09:56,2022-03-30 06:09,jfx17,jfx19,,,,,,,,jfx19,javafx,,0,,,,,,,,,,,,,,,,,,,"If a MenuBar contains invisible menus, navigation using arrow keys can lead to IndexOutOfBoundsException.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-03-22 06:31;rlichten;MenuIndexOutOfBounds.java;https://bugs.openjdk.org/secure/attachment/98357/MenuIndexOutOfBounds.java",,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wey3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-03-22 06:33;rlichten;Steps to reproduce: 
* Start the attached MenuIndexOutOfBounds.java
* Point the mouse at ""two""
* Hit the arrow-left key on the keyboard
=>
Exception in thread ""JavaFX Application Thread"" java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:373)
	at java.base/java.util.ArrayList.get(ArrayList.java:426)
	at javafx.base@19-internal/com.sun.javafx.collections.ObservableListWrapper.get(ObservableListWrapper.java:89)
	at javafx.base@19-internal/com.sun.javafx.collections.VetoableListDecorator.get(VetoableListDecorator.java:305)
	at javafx.controls@19-internal/javafx.scene.control.skin.MenuBarSkin.setFocusedMenuIndex(MenuBarSkin.java:483)
	at javafx.controls@19-internal/javafx.scene.control.skin.MenuBarSkin.lambda$moveToMenu$30(MenuBarSkin.java:1099)
	at java.base/java.util.Optional.ifPresent(Optional.java:176)
	at javafx.controls@19-internal/javafx.scene.control.skin.MenuBarSkin.moveToMenu(MenuBarSkin.java:1098)
	at javafx.controls@19-internal/javafx.scene.control.skin.MenuBarSkin.lambda$new$4(MenuBarSkin.java:254)
	at javafx.base@19-internal/javafx.event.WeakEventHandler.handle(WeakEventHandler.java:79)
	at javafx.base@19-internal/com.sun.javafx.event.CompositeEventHandler$WeakEventFilterRecord.handleCapturingEvent(CompositeEventHandler.java:356)
	at javafx.base@19-internal/com.sun.javafx.event.CompositeEventHandler.dispatchCapturingEvent(CompositeEventHandler.java:98)
	at javafx.base@19-internal/com.sun.javafx.event.EventHandlerManager.dispatchCapturingEvent(EventHandlerManager.java:221)
	at javafx.base@19-internal/com.sun.javafx.event.EventHandlerManager.dispatchCapturingEvent(EventHandlerManager.java:180)
	at javafx.base@19-internal/com.sun.javafx.event.CompositeEventDispatcher.dispatchCapturingEvent(CompositeEventDispatcher.java:43)
	at javafx.base@19-internal/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:52)
	at javafx.base@19-internal/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at javafx.base@19-internal/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at javafx.base@19-internal/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at javafx.base@19-internal/com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
	at javafx.base@19-internal/com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54)
	at javafx.base@19-internal/javafx.event.Event.fireEvent(Event.java:198)
	at javafx.graphics@19-internal/javafx.scene.Scene$KeyHandler.process(Scene.java:4089)
	at javafx.graphics@19-internal/javafx.scene.Scene.processKeyEvent(Scene.java:2146)
	at javafx.graphics@19-internal/javafx.scene.Scene$ScenePeerListener.keyEvent(Scene.java:2614)
	at javafx.graphics@19-internal/com.sun.javafx.tk.quantum.GlassViewEventHandler$KeyEventNotification.run(GlassViewEventHandler.java:218)
	at javafx.graphics@19-internal/com.sun.javafx.tk.quantum.GlassViewEventHandler$KeyEventNotification.run(GlassViewEventHandler.java:150)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:391)
	at javafx.graphics@19-internal/com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleKeyEvent$1(GlassViewEventHandler.java:250)
	at javafx.graphics@19-internal/com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424)
	at javafx.graphics@19-internal/com.sun.javafx.tk.quantum.GlassViewEventHandler.handleKeyEvent(GlassViewEventHandler.java:249)
	at javafx.graphics@19-internal/com.sun.glass.ui.View.handleKeyEvent(View.java:542)
	at javafx.graphics@19-internal/com.sun.glass.ui.View.notifyKey(View.java:966)
	at javafx.graphics@19-internal/com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method)
	at javafx.graphics@19-internal/com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:316)
	at java.base/java.lang.Thread.run(Thread.java:832)
;;;","2022-03-22 06:47;rlichten;javafx.scene.control.skin.MenuBarSkin.setFocusedMenuIndex(int index) assumes that the index passed into it can be taken as index into the container hbox of the MenuBarSkin.

However rebuildUI has 
            if (!menu.isVisible()) continue;
which will prevent an invisible menu from ever becoming added to the container.

On the other hand, findSibling iterates over getSkinnable().getMenus(), regardless of their visibility status. 
;;;","2022-03-22 07:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/759
Date: 2022-03-22 14:42:07 +0000;;;","2022-03-30 06:09;dukebot;Changeset: cff84e24
Author:    Robert Lichtenberger <rlichten@openjdk.org>
Committer: Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2022-03-30 13:06:14 +0000
URL:       https://git.openjdk.java.net/jfx/commit/cff84e24b2de83a57163462fe275ab067034766c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Factor out calculation of actual number of XMM registers,JDK-8283494,5070705,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tschatzl,tschatzl,tschatzl,2022-03-22 01:14,2022-04-06 23:57,2023-10-01 09:56,2022-03-30 11:15,19,,,,,,,,,19,hotspot,,0,c1,cleanup,noreg-build,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,"Depending on the availability of certain extensions to the x86 instruction set, different amounts of xmm registers are available.

The existing compiler code has this calculation of actual number of available xmm registers copy&pasted multiple times.

Factor this out in a single method and use appropriately.

This should also fix a compilation error with no C1 added after JDK-8283327.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283596,,JDK-8283327,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2wetn:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-22 02:25;chagedorn;Triaging as bug fix for compilation error without C1 as there is no separate bug for it.

ILW = Compilation failure without C1, always, build with C1 enabled = MHM = P3;;;","2022-03-23 01:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7917
Date: 2022-03-23 08:52:41 +0000;;;","2022-03-30 11:15;dukebot;Changeset: ce27d9dd
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-03-30 18:13:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ce27d9dd5e1899c74ca2120e3e70420973eb241c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[LOOM] jdb cannot attach to pre-loom JVMs,JDK-8283477,5070688,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2022-03-21 14:57,2022-03-22 12:47,2023-10-01 09:56,2022-03-22 12:47,repo-loom,,,,,,,,,repo-loom,core-svc,,0,,,,,,,,,,,,,,,,,,,"Attaching from the loom jdb to a pre-loom jvm fails with:

com.sun.jdi.InternalException: Unexpected JDWP Error: 103
	at jdk.jdi/com.sun.tools.jdi.JDWPException.toJDIException(JDWPException.java:80)
	at jdk.jdi/com.sun.tools.jdi.EventRequestManagerImpl$EventRequestImpl.set(EventRequestManagerImpl.java:232)
	at jdk.jdi/com.sun.tools.jdi.EventRequestManagerImpl$EventRequestImpl.setEnabled(EventRequestManagerImpl.java:194)
	at jdk.jdi/com.sun.tools.jdi.EventRequestManagerImpl$EventRequestImpl.enable(EventRequestManagerImpl.java:179)
	at jdk.jdi/com.sun.tools.example.debug.tty.VMConnection.setEventRequests(VMConnection.java:476)
	at jdk.jdi/com.sun.tools.example.debug.tty.VMConnection.open(VMConnection.java:378)
	at jdk.jdi/com.sun.tools.example.debug.tty.Env.init(Env.java:63)
	at jdk.jdi/com.sun.tools.example.debug.tty.TTY.main(TTY.java:1176)

103 is ILLEGAL_ARGUMENT. The failure seems to be happening when enabling a ThreadStartRequest for which a PlatformThreadsOnlyFilter has been added. jdb needs to avoid adding this filter when attaching to pre-loom JVMs. The ThreadDeathRequest has the same issue.

A call from jdb to ThreadRefence.isVirtual() also causes an exception:

Exception in thread ""event-handler"" java.lang.UnsupportedOperationException
	at jdk.jdi/com.sun.tools.jdi.JDWPException.toJDIException(JDWPException.java:69)
	at jdk.jdi/com.sun.tools.jdi.ThreadReferenceImpl.isVirtual(ThreadReferenceImpl.java:619)
	at jdk.jdi/com.sun.tools.example.debug.tty.ThreadInfo.addThread(ThreadInfo.java:83)
	at jdk.jdi/com.sun.tools.example.debug.tty.EventHandler.threadStartEvent(EventHandler.java:315)
	at jdk.jdi/com.sun.tools.example.debug.tty.EventHandler.handleEvent(EventHandler.java:149)
	at jdk.jdi/com.sun.tools.example.debug.tty.EventHandler.run(EventHandler.java:78)
	at java.base/java.lang.Thread.run(Thread.java:1532)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wepv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-03-22 01:17;alanb;As things stand now, ThreadReference::isVirtual returns false and ThreadXXXRequest.addPlatformThreadsOnlyFilter does nothing when the target VM is < 19. We'll need to see how to test this without requiring an older JDK in the test environment.;;;","2022-03-22 12:47;cjplummer;Fixed by the following commit:

https://github.com/openjdk/loom/commit/4b2e9899aaf9bbc76c39fb2ff9caaaa180dae8db

Unfortunately I don't believe we do any backwards compatibility testing with jdb or the debug agent. As a result compatibility issues have turned up in the past.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Don't use memset to initialize members in FileMapInfo and fix memory leak,JDK-8283469,5070678,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2022-03-21 12:06,2022-05-23 10:10,2023-10-01 09:56,2022-03-28 05:31,11,17,18,19,,,,,,19,hotspot,,0,cds,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,redhat-interest,,,,,,,,,,"FileMapInfo uses memset in its constructor to initialize data member, it is generally a bad idea. It can break things badly if adds a new member with a non-trivial constructor and memset is not suitable.

Besides, it leaks malloc'd _header member.
 

",,,,,,,,,,,JDK-8286813,JDK-8286906,JDK-8286958,JDK-8286959,JDK-8287173,JDK-8287096,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wenn:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-21 17:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7899
Date: 2022-03-22 00:05:32 +0000;;;","2022-03-28 05:31;dukebot;Changeset: d6fa8b00
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-03-28 12:28:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d6fa8b004bcd0a2fc1015055d0177428889b4c31
;;;","2022-04-11 11:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/97
Date: 2022-04-11 18:13:17 +0000;;;","2022-05-12 17:12;zgu;Fix Request (18u)

I would like to backport this patch to 18u to fix a misuse of memset to initialize object in its constructor and fix a memory leak.

The patch is small and low risk.;;;","2022-05-13 07:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/397
Date: 2022-05-13 14:10:39 +0000;;;","2022-05-13 08:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1084
Date: 2022-05-13 15:17:28 +0000;;;","2022-05-16 05:52;zgu;Fix Request (17u)

I would like to backport this patch to 17u to fix a misuse of memset to initialize object in its constructor and fix a memory leak.

The patch is small and low risk.;;;","2022-05-17 09:59;zgu;Fix Request (11u)

I would like to backport this patch to 11u to fix a misuse of memset to initialize object in its constructor and fix a memory leak.

The patch is small and low risk.;;;",,,,,,,,,,,,,,,,,,,,,,
C2: missing skeleton predicates in peeled loop,JDK-8283466,5070675,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,shade,shade,2022-03-21 11:30,2023-07-13 07:04,2023-10-01 09:56,2022-06-01 23:51,19,,,,,,,,,19,hotspot,,0,c2,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-19,regression,,,,,,,,,,,,,"Synopsis is provisional, feel free to change it as you see fit. 

The attached fuzzer test fails:

$ build/linux-x86_64-server-fastdebug/images/jdk/bin/java -cp 0015/ -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressCCP -XX:+StressIGVN -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation -XX:StressSeed=95886967 Test

#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/opto/gcm.cpp:276), pid=1065282, tid=1065295
#  assert(false) failed: unscheduable graph
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc.shade.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc.shade.jdk, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xdce852]  assert_dom(Block*, Block*, Node*, PhaseCFG const*)+0x1c2

It is semi-intermittent without StressSeed setting.

Bisection points to JDK-8230382 as the first bad commit.

Copied from JDK-8283460 (duplicate bug):
Reopened as separate bug: JDK-8286638.

$ build/linux-x86_64-server-fastdebug/images/jdk/bin/java -cp 0029/ -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation Test
CompileCommand: compileonly Test.* bool compileonly = true
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc: SuppressErrorAt=/gcm.cpp:766
#
# A fatal error has been detected by the Java Runtime Environment:
#
# Internal Error (/home/shade/trunks/jdk/src/hotspot/share/opto/gcm.cpp:766), pid=3733508, tid=3733521
# assert(!LCA_orig->dominates(pred_block) || early->dominates(pred_block)) failed: early is high enough
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc.shade.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc.shade.jdk, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V [libjvm.so+0xdd1fe5] PhaseCFG::insert_anti_dependences(Block*, Node*, bool)+0x18a5

It is somewhat intermittent, and seems to rely on StressIGVN.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283460,JDK-8278420,,,,JDK-8230382,,,,,,JDK-8286638,JDK-8288981,,,,,"2022-03-22 03:51;shade;0015.zip;https://bugs.openjdk.org/secure/attachment/98356/0015.zip","2022-03-28 04:43;epeter;0029.zip;https://bugs.openjdk.org/secure/attachment/98385/0029.zip","2022-03-22 02:19;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/98355/FuzzerUtils.java","2022-04-01 00:37;epeter;ReduceX.java;https://bugs.openjdk.org/secure/attachment/98416/ReduceX.java","2022-03-31 01:14;epeter;Reduced0015.java;https://bugs.openjdk.org/secure/attachment/98408/Reduced0015.java","2022-05-03 02:07;epeter;Reduced0015_1.java;https://bugs.openjdk.org/secure/attachment/98787/Reduced0015_1.java","2022-05-11 01:51;epeter;Reduced0015_2.java;https://bugs.openjdk.org/secure/attachment/98899/Reduced0015_2.java","2022-03-30 00:31;epeter;Reduced0029.java;https://bugs.openjdk.org/secure/attachment/98399/Reduced0029.java","2022-03-22 02:19;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/98352/Test.java","2022-04-01 01:11;chagedorn;Test2.java;https://bugs.openjdk.org/secure/attachment/98417/Test2.java","2022-03-22 02:19;chagedorn;hs_err_pid6767.log;https://bugs.openjdk.org/secure/attachment/98353/hs_err_pid6767.log","2022-03-22 02:19;chagedorn;hs_err_pid6905.log;https://bugs.openjdk.org/secure/attachment/98354/hs_err_pid6905.log",,,,,,,,,,,,,,,,,"0|i2wemz:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-21 14:00;dlong;[~epeter], could you investigate if this is related to the JDK-8230382 changes?;;;","2022-03-21 14:01;dlong;ILW = assert failure with fuzzer; intermittent; no workaround = MMH = P3;;;","2022-03-22 02:13;epeter;[~shade] Might it be that you forgot to attach the fuzzer test?
[~dlong] Ok, I can look into this. Could well be that something got reordered and messed up. Or that it uncovers a bug that was already there.;;;","2022-03-22 02:19;chagedorn;Found a similar looking fuzzer crash (attached as Test.java, hs_err_pid6905.log) that starts to fail after JDK-8230382:

$ java -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:StressSeed=814401927 Test.java

Another assertion is triggered with these flags, also starts to fail after JDK-8230382 (hs_err_pid6767):

#  assert(n->is_Root() || n->is_Region() || n->is_Phi() || n->is_MachMerge() || def_block->dominates(block)) failed: uses must be dominated by definitions

$ java -Xmx1G -Xcomp -Xbatch -XX:-TieredCompilation -XX:CompileOnly=Test -XX:CompileCommand=quiet Test.java

;;;","2022-03-22 03:52;shade;Ah yes, I forgot to attach mine. It is in 0015.zip now.;;;","2022-03-24 07:32;epeter;I narrowed it down to half of JDK-8230382:

only apply src/hotspot/share/opto/castnode.cpp -> CastIINode
The reported tests do not fail

only apply  src/hotspot/share/opto/convertnode.cpp ->  ConvI2LNode
All the reported tests fail;;;","2022-03-24 07:34;epeter;Same behavior of test in JDK-8283460, therefore I closed that one as a duplicate of this one.;;;","2022-03-30 00:32;epeter;I reduced 0029.zip down to a few lines of java. See Reduced0029.java. Reproduces in about 20% of runs.

./java -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation Reduced0029.java

#  Internal Error (/home/emanuel/Documents/fork2-jdk/open/src/hotspot/share/opto/gcm.cpp:766), pid=274185, tid=274198
#  assert(!LCA_orig->dominates(pred_block) || early->dominates(pred_block)) failed: early is high enough;;;","2022-03-31 00:44;epeter;i reduced 0015.zip down to less lines of java. See Reduced0015.java. It seems to consistently reproduce.

./java -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressCCP -XX:+StressIGVN -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation Reduced0015.java

#  Internal Error (/home/emanuel/Documents/fork2-jdk/open/src/hotspot/share/opto/gcm.cpp:1211), pid=274092, tid=274105
#  assert(false) failed: graph should be schedulable
# in PhaseCFG::hoist_to_cheaper_block;;;","2022-04-01 00:33;epeter;I reduced Christian's fuzzer test crash:

java -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:StressSeed=814401927 Test.java

Currently running to further simplify it, but for now look at ReduceX.java

./java -Xcomp -Xbatch -XX:CompileOnly=Test -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN ReduceX.java

#  Internal Error (/home/emanuel/Documents/fork2-jdk/open/src/hotspot/share/opto/gcm.cpp:473), pid=274260, tid=274273
#  assert(early->dominates(LCA)) failed: early is high enough;;;","2022-04-01 00:45;epeter;TODO: reduce Christians fuzzer test with this:

# assert(n->is_Root() || n->is_Region() || n->is_Phi() || n->is_MachMerge() || def_block->dominates(block)) failed: uses must be dominated by definitions

$ java -Xmx1G -Xcomp -Xbatch -XX:-TieredCompilation -XX:CompileOnly=Test -XX:CompileCommand=quiet Test.java;;;","2022-04-01 01:11;chagedorn;Spotted another similar occurrence with a fuzzer test that starts to fail after JDK-8230382 (attached as Test2.java) which might also be related:

$ java -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:StressSeed=785926479

Results in: assert(false) failed: graph should be schedulable
;;;","2022-04-01 01:29;epeter;# .../src/hotspot/share/opto/gcm.cpp:1423), pid=14603, tid=14616
#  assert(false) failed: graph should be schedulable
# in PhaseCFG::schedule_late

Has same pattern like all others.
Before we first expand the type of ConvI2L to input (not TOP). After my refactoring we first filter input and type of ConvI2L, which results in TOP. May be the same bug, or just the same change that reveals multiple bugs.;;;","2022-04-26 08:09;epeter;Picking this up 3 weeks later, some of the tests do not reproduce anymore, sadly.
However, this one reproduces the same way:

./java -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation Reduced0029.java;;;","2022-04-27 03:00;epeter;What I see in this case:
[260 LoadF] used to have [617 Phi] as output, which is eventually removed because it gets top due to [644  ConvI2L] becoming TOP (chain reaction eats away many nodes, including loads and stores in the loop body). When we calculate LCA for [260 LoadF], we now do not see [617 Phi], put its output node [526 Phi], which has a much wider scope, pushing up the LCA above [260 LoadF] - which does not make sense.

I suspect that we maybe should not even enter this loop, because if we already removed the loads / stores, then we actually won't ever do any ""work"". Looking at Reduced0029.java, the loop will actually never be entered. I fear that we allowed the data-flow to deteriorate while the control-flow stays standing.;;;","2022-04-28 02:07;epeter;Update: I am a little closer to understanding now:
We have loop unrolling 2x, and are working with i<=0  --  [min...0].
We have an array access to c[i-1] .
This array access requires a range-check. Unfortunately, the range-check cannot be constant folded and removed:
The input value to the range-check is first range [min...0], but because access is at i-1, we get underflow for min, and so the input for range check is expanded to #int .
However, the dataflow after the range-check is eliminated like this:
We first do have a CastII pinning the data-flow to the range-check.
But after we are in post_loop_opts_phase, we remove the CastII.
Then, the data-flow starts with a ConvI2L node, which has type [1...max-1] (this is because it leads to a memory access, hence range [0..max-1], the lower bound 1 is because of the -1 offset which is calculated in below, technical detail).
The input type to this node however is <=0. So now that the CastII node is gone, we can filter the input range with the range of ConvI2L and see that the result is empty -> TOP.
While the control-flow stays put (range-check), the data-flow erodes (ConvI2L).
Eventually, some memory-Phi node dies below a loadF.
When we try to compute the LCA for all outputs to loadF, we do not see the old memory-Phi we should see, but one that has much larger scope. Then the LCA ends up much higher than loadF, which messes up the asserts.;;;","2022-04-28 02:29;epeter;2 Additions:
Why does this only happen with the ConvI2L refactoring I did earlier?
Before the refactoring, we used to:
1: expand the type to input type (in Ideal)
2: filter input and output type (in Value)
Since we expanded before filtering, we just expanded to input type, then filtering filtered input-type and input-type - so we kept the ConvI2L.

After refactoring:
We do filtering and expansion both in Value. We filter first, and immediately return TOP. The ConvI2L collapses the data-flow.

Second point: Somehow, the range-check expands the type to int, because of underflow (-1), but ConvI2L has no such under/overflow issue, and keeps the smaller range. I need to investigate why there is this difference.;;;","2022-04-28 03:44;epeter;I have a better description now:

Scenario:
type i: [minint...0]
access to c[i-1]

Range-check:
int index = AddI(i, -1)
-> type index: [minint-1 ... -1] -> underflow -> int
CmpU(index, c.size())   [lt] -> checks index>=0 and index<c.size()
Consequence: range-check cannot statically determine that the access is never ok.
Sad, because we can manually tell that the range [minint-1 ... -1] should not pass the range check.

Data-flow:
long index = ConvI2L( AddI(i, -1) )
-> type of ConvI2L: [0...maxint-1]
-> why do we know this? Because this is before an array access. We assume range-check guarantees index in range [0...c.size()-1], and c.size()<=maxint.
Then there is a push_thru_add, and we get:
long index = AddL( ConvI2L(i), -1)
-> type of new ConvI2L: [1...maxint-1]   - because we correct the lo by 1 for the add. Somehow we do not adjust hi, in my opinion it should now be maxint, to correct by 1.
Consequence: if hi is maxint or maxint-1, there is no overflow.
Then, we statically detect that:
type i: [minint...0]
type ConvI2L: [1...maxint-1]
-> filter results in TOP -> data-flow is eliminated sucessfully.

Result in the end:
data-flow collapses, while control-flow (range-check) does not collapse. This leads to issues described above.;;;","2022-04-28 07:13;epeter;With the help of [~thartmann], we tracked it to CmpUNode::Value.
There, we analyze if the in1 is an AddI.
We detect that this AddI may have 2 ranges:
tr1:  int:<=-1:www
tr2:  int:max               (underflow: minint-1)

We then check how these ranges compare to in2:
t2: int:>=0

For this we compute:
const Type* cmp1 = sub(tr1, t2);     -> TypeInt::CC_GT = [1]
const Type* cmp2 = sub(tr2, t2);     -> TypeInt::CC_GE = [0...1]

But then, we only do something with this result if cmp1 == cmp2.
https://github.com/openjdk/jdk/blame/master/src/hotspot/share/opto/subnode.cpp#L832

However, I wonder if we can not just take the union of cmp1 and cmp2, which would be [0...1] = [GE]
Then, the output node [655 Bool] checks for [lt], which we could know is never true.
We could conclude that the Range-check never passes.
This would then also kill the control-flow, in parallel to the data-flow that is already killed with ConvI2L.;;;","2022-04-29 00:31;epeter;Implementation:
const TypeInt* cmp1 = sub(tr1, t2)->is_int();
const TypeInt* cmp2 = sub(tr2, t2)->is_int();
// compute union, so that cmp handles all possible results from the two cases
return cmp1->meet(cmp2);

After this change these do not throw asserts: 0029.zip, Test.java, Test2.java (though probably the last 2 don't reporduce because of other changes in the last 3 weeks).
But 0015.zip still fails:

./java -cp 0015/ -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressCCP -XX:+StressIGVN -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation -XX:StressSeed=578621535 Test

#  Internal Error (/home/emanuel/Documents/jdk/open/src/hotspot/share/opto/gcm.cpp:276), pid=360398, tid=360411
#  assert(false) failed: unscheduable graph;;;","2022-05-02 00:30;epeter;Plan:
Debug 0015.zip, see if related to 0029.zip.
Once both are fixed, go back in commit history, see if Test.java and Test2.java are fixed by these issues.;;;","2022-05-03 02:09;epeter;Reduced 0015.zip again, this reproduces, though with a slightly different assert:

./java -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressCCP -XX:+StressIGVN -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation Reduced0015_1.java

#  Internal Error (/home/emanuel/Documents/jdk/open/src/hotspot/share/opto/loopnode.cpp:5401), pid=235607, tid=235620
#  assert(!had_error) failed: bad dominance

-> reverted the ConvI2L changes, and this still reporduces. This could well be an unrelated bug.

-------- and with different flags:

./java -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressCCP -XX:+StressIGVN -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation -XX:-LoopUnswitching Reduced0015_1.java

#  Internal Error (/home/emanuel/Documents/jdk/open/src/hotspot/share/opto/loopnode.cpp:5834), pid=322227, tid=322240
#  assert(false) failed: Bad graph detected in build_loop_late;;;","2022-05-03 02:57;epeter;Before I had cached a half-reduced result of 0015.zip:

./java -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressCCP -XX:+StressIGVN -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation Reduced0015_2.java

#  Internal Error (/home/emanuel/Documents/jdk/open/src/hotspot/share/opto/gcm.cpp:1423), pid=256502, tid=256515
#  assert(false) failed: graph should be schedulable

This still looks like the original Bug reported through 0015.zip, and is somehow related to the ConvI2L refactoring (at least only occurs after it).;;;","2022-05-03 03:08;epeter;Updated plan:
Debug / fix Reduced0015_2.java
Then see if it also fixes 0015.zip (I expect that), and Reduced0015_1.java (possibly a separate Bug).
Then, we see if the fixes are really separate, and if they are separate enough, we create separate bugs / change-sets.;;;","2022-05-06 06:13;epeter;I just tried different optimization flags with Reduced0015_2.java:

./java -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressCCP -XX:+StressIGVN -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation -XX:-LoopUnswitching Reduced0015_2.java

#  Internal Error (/home/emanuel/Documents/jdk/open/src/hotspot/share/opto/gcm.cpp:276), pid=320662, tid=320675
#  assert(false) failed: unscheduable graph

-------------------------------

./java -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressCCP -XX:+StressIGVN -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation -XX:LoopMaxUnroll=0 -XX:LoopUnrollLimit=0 Reduced0015_2.java

#  Internal Error (/home/emanuel/Documents/jdk/open/src/hotspot/share/opto/loopnode.cpp:5401), pid=320940, tid=320953
#  assert(!had_error) failed: bad dominance

Node: with this one I'm less sure it is related to ConvI2L, given what I quickly saw;;;","2022-05-11 08:04;epeter;rr ./java -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressCCP -XX:+StressIGVN -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation -XX:-LoopUnswitching -XX:StressSeed=147368847 Reduced0015_2.java

Quick summary:
We have a loop i = [1, x), -3
x: #int
array access: a[i-1]

RC is moved out of loop:
we check if in range of a:
init = 1      -> statically true
limit =  roughly x     -> cannot know statically bc #int

Peel Loop 1 iteration:
RC out of loop
Peeled loop with i=1
Loop i = [-2, x), -3
Already here: if we still had the RC now, and only now moved it out of the loop,
the init i=-2 would not pass, and we could statically remove the loop.

Pre-main-post-loop:
pre-loop with 1 iteration
RC out of loop
Peeled loop with i=1
Pre-loop with i=-2
Main i = [-5, something), -3
post-loop (something)
Problem: in the pre-loop we know that i=-2
But we cannot statically tell that we will never enter.
But array access a[i-1]  cannot happen, so it is optimized away starting at the corresponding ConvI2L , which only allows int:>=0
This rips away some data-flow, but the control-flow stays -> causes issues later.


I can reason that we never enter the pre-loop, but the vm-code does not manage to do that.
Why will we never enter it?
if x>=1  then we never enter the loop at all.
If we enter, then we check the limit in the RC that was moved before the loops.
limit-stride+offset  u< a.size()
x- -3 + -1 = x + 2 u< a.size

case distinction:
x>=1 : we never enter loop at all because of loop guard
x in {0,-1,-2} : pass limit RC, we enter loop, but only execute the peeled loop, never enter pre-main-post
x < -2 : fail limit RC, don't enter loop

The problem seems this:
We only run the RC once, in a ""generic"" way that we cannot statically analyze.
But we split the data-flow into separate loops, and ranges. These ranges are more specific and may turn out to be impossible.
But we do not split the ctrl-flow (no duplication of the RC).

With [~chagedorn] we have have been talking about skeleton-predicates. Apparently, these are copied from before a loop, to the cloned loops, eg if we do pre-main-post split. But it seems we don't do that in the peeling. We need to verify this, and see what the possible solutions could be.;;;","2022-05-12 05:40;epeter;It is now clear that we have two bugs here:

0029.zip -> CmpU under/overflow analysis -> new bug JDK-8286638
0015.zip -> skeleton_predicate missing after peeling -> this bug for now;;;","2022-05-19 04:39;epeter;Update:
I reran all reported tests here, none reproduces after fixing CmpU issue in JDK-8286638 and implementing skeleton predicate initialization for peeled loops.

Going back to commits around 22 Mar 2022, applying my new fixes:
Test2.java seems to be fixed with CmpU fix JDK-8286638.
Test.java seems unrelated to peeling skeleton_predicate fix and to CmpU fix.
Test.java does not reproduce after JDK-8284742, however it seems unlikely that this was a true fix.;;;","2022-05-30 05:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8783
Date: 2022-05-19 08:56:22 +0000;;;","2022-06-01 23:51;dukebot;Changeset: 199832a7
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2022-06-02 06:49:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/199832a7101ca9dbfe7744ca0a1c4ff11d8832f2
;;;"
Character.UnicodeBlock.NUM_ENTITIES is out of date,JDK-8283465,5070673,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,smarks,smarks,2022-03-21 11:07,2022-03-30 17:56,2023-10-01 09:56,2022-03-23 12:46,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,"The field NUM_ENTITIES is supposed to be kept up to date with the actual number of entries that are put into the map. In JDK 19 currently there are 737 map entries, but NUM_ENTITIES is 696.

(These different values won't change the actual map table length of 1024, which is determined by dividing the expected size by the default load factor 0.75 and rounding up to the nearest power of two. But when and if the number of block names and aliases reaches 768, the table will actually need to get larger.)

The test java/lang/Character/UnicodeBlock/OptimalMapSize.java is supposed to test for this, but it copies in the table size computation. It would eventually fail if the number of entries were to grow to 768, but it doesn't check that NUM_ENTITIES matches the actual map size. It also asserts that num_entities == 696. I believe the test should be rewritten simply to check that the value of NUM_ENTITIES matches the actual map size, instead of asserting an incorrect value for NUM_ENTITIES and then replicating the HashMap size computation. That would also remove the need to update this test with every Unicode update, and it would remove the dependency on the OptimalCapacity test utility.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wemj:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-03-22 11:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7909
Date: 2022-03-22 18:44:09 +0000;;;","2022-03-23 12:46;dukebot;Changeset: 0ee65e1f
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-03-23 19:44:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0ee65e1ff3eaed4a8a2542562f0ba2a61d0f5894
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] libpng build failures with Xcode13.3,JDK-8283457,5070662,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,jlaskey,jlaskey,2022-03-21 06:34,2022-07-19 09:57,2023-10-01 09:56,2022-03-22 14:52,19,,,,,,,,,19,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,macos,noreg-build,sn_114,xcode,,,,,,,,,,,,"/Volumes/Elephant/Users/jlaskey/Git/jdk/open/src/java.desktop/share/native/libsplashscreen/libpng/pngrutil.c:3584:20: error: performing pointer subtraction with a null pointer has undefined behavior [-Werror,-Wnull-pointer-subtraction]
                   png_isaligned(dp, png_uint_16) &&
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Volumes/Elephant/Users/jlaskey/Git/jdk/open/src/java.desktop/share/native/libsplashscreen/libpng/pngpriv.h:634:29: note: expanded from macro 'png_isaligned'
   (((type)((const char*)ptr-(const char*)0) & \
                            ^~~~~~~~~~~~~~~
/Volumes/Elephant/Users/jlaskey/Git/jdk/open/src/java.desktop/share/native/libsplashscreen/libpng/pngrutil.c:3585:20: error: performing pointer subtraction with a null pointer has undefined behavior [-Werror,-Wnull-pointer-subtraction]
                   png_isaligned(sp, png_uint_16) &&
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Volumes/Elephant/Users/jlaskey/Git/jdk/open/src/java.desktop/share/native/libsplashscreen/libpng/pngpriv.h:634:29: note: expanded from macro 'png_isaligned'
   (((type)((const char*)ptr-(const char*)0) & \
                            ^~~~~~~~~~~~~~~
/Volumes/Elephant/Users/jlaskey/Git/jdk/open/src/java.desktop/share/native/libsplashscreen/libpng/pngrutil.c:3592:23: error: performing pointer subtraction with a null pointer has undefined behavior [-Werror,-Wnull-pointer-subtraction]
                  if (png_isaligned(dp, png_uint_32) &&
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Volumes/Elephant/Users/jlaskey/Git/jdk/open/src/java.desktop/share/native/libsplashscreen/libpng/pngpriv.h:634:29: note: expanded from macro 'png_isaligned'
   (((type)((const char*)ptr-(const char*)0) & \
                            ^~~~~~~~~~~~~~~
/Volumes/Elephant/Users/jlaskey/Git/jdk/open/src/java.desktop/share/native/libsplashscreen/libpng/pngrutil.c:3593:23: error: performing pointer subtraction with a null pointer has undefined behavior [-Werror,-Wnull-pointer-subtraction]
                      png_isaligned(sp, png_uint_32) &&
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Volumes/Elephant/Users/jlaskey/Git/jdk/open/src/java.desktop/share/native/libsplashscreen/libpng/pngpriv.h:634:29: note: expanded from macro 'png_isaligned'
   (((type)((const char*)ptr-(const char*)0) & \
                            ^~~~~~~~~~~~~~~
/Volumes/Elephant/Users/jlaskey/Git/jdk/open/src/java.desktop/share/native/libsplashscreen/libpng/pngrutil.c:4652:34: error: performing pointer subtraction with a null pointer has undefined behavior [-Werror,-Wnull-pointer-subtraction]
         int extra = (int)((temp - (png_bytep)0) & 0x0f);
                                 ^ ~~~~~~~~~~~~
/Volumes/Elephant/Users/jlaskey/Git/jdk/open/src/java.desktop/share/native/libsplashscreen/libpng/pngrutil.c:4656:30: error: performing pointer subtraction with a null pointer has undefined behavior [-Werror,-Wnull-pointer-subtraction]
         extra = (int)((temp - (png_bytep)0) & 0x0f);
                             ^ ~~~~~~~~~~~~
",,,,,,,,,,,JDK-8290052,JDK-8289034,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283564,,,,,,,,,,,,,JDK-8283221,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i2wek3:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-03-21 07:17;jlaskey;Also affected issue;;;","2022-03-21 07:28;jlaskey;Working around with the following changes (NOT RECOMMENDED - no testing)

diff --git a/src/java.desktop/share/native/liblcms/cmstypes.c b/src/java.desktop/share/native/liblcms/cmstypes.c
index 006f98b084d..ce95e5e5038 100644
--- a/src/java.desktop/share/native/liblcms/cmstypes.c
+++ b/src/java.desktop/share/native/liblcms/cmstypes.c
@@ -3433,6 +3433,8 @@ cmsBool ReadSeqID(struct _cms_typehandler_struct* self,
     if (!ReadEmbeddedText(self, io, &seq ->Description, SizeOfTag)) return FALSE;
 
     return TRUE;
+
+    cmsUNUSED_PARAMETER(SizeOfTag);
 }
 
 
@@ -3469,6 +3471,7 @@ void *Type_ProfileSequenceId_Read(struct _cms_typehandler_struct* self, cmsIOHAN
     *nItems = 1;
     return OutSeq;
 
+    cmsUNUSED_PARAMETER(SizeOfTag);
 }
 
 
@@ -5213,6 +5216,8 @@ Error:
    FreeArray(&a);
    cmsDictFree(hDict);
    return NULL;
+
+    cmsUNUSED_PARAMETER(SizeOfTag);
 }
 
 
diff --git a/src/java.desktop/share/native/libsplashscreen/libpng/pngpriv.h b/src/java.desktop/share/native/libsplashscreen/libpng/pngpriv.h
index 73e1e9371a3..a2bbe8bc5ea 100644
--- a/src/java.desktop/share/native/libsplashscreen/libpng/pngpriv.h
+++ b/src/java.desktop/share/native/libsplashscreen/libpng/pngpriv.h
@@ -629,9 +629,10 @@
 #endif
 
 /* This implicitly assumes alignment is always to a power of 2. */
+#undef png_alignof
 #ifdef png_alignof
 #  define png_isaligned(ptr, type)\
-   (((type)((const char*)ptr-(const char*)0) & \
+   (((type)((const char*)ptr) & \
    (type)(png_alignof(type)-1)) == 0)
 #else
 #  define png_isaligned(ptr, type) 0
diff --git a/src/java.desktop/share/native/libsplashscreen/libpng/pngrutil.c b/src/java.desktop/share/native/libsplashscreen/libpng/pngrutil.c
index 5c6244116af..670c0eb2945 100644
--- a/src/java.desktop/share/native/libsplashscreen/libpng/pngrutil.c
+++ b/src/java.desktop/share/native/libsplashscreen/libpng/pngrutil.c
@@ -4649,11 +4649,11 @@ defined(PNG_USER_TRANSFORM_PTR_SUPPORTED)
        */
       {
          png_bytep temp = png_ptr->big_row_buf + 32;
-         int extra = (int)((temp - (png_bytep)0) & 0x0f);
+         int extra = (int)(((intptr_t)temp) & 0x0f);
          png_ptr->row_buf = temp - extra - 1/*filter byte*/;
 
          temp = png_ptr->big_prev_row + 32;
-         extra = (int)((temp - (png_bytep)0) & 0x0f);
+         extra = (int)(((intptr_t)temp) & 0x0f);
          png_ptr->prev_row = temp - extra - 1/*filter byte*/;
       }

;;;","2022-03-21 09:51;prr;When there is a warning in a 3rd party library our rule is not to change the code unless and until the upstream
library has the same patch, so we don't have to re-apply when we update.
So disabling the specific warnings for the affected library+tool chain in the makefiles is the usual solution.;;;","2022-03-21 13:37;prr;This bug is about just the libpng failures since we already have https://bugs.openjdk.java.net/browse/JDK-8283221 for the littlecms failures.;;;","2022-03-22 11:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7911
Date: 2022-03-22 18:53:20 +0000;;;","2022-03-22 14:52;dukebot;Changeset: 33eb89df
Author:    Phil Race <prr@openjdk.org>
Date:      2022-03-22 21:48:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/33eb89dfeb4a43e1ad2c3dd657ec3b6ee7abbb3a
;;;","2022-06-21 14:11;serb;Fix request (18u)

The clean backport.
- Justification: The fix for a build issue. the pre-requirements to make backport of JDK-8286582 clean.
- Risk Analysis: Low
https://github.com/openjdk/jdk18u/pull/174;;;","2022-06-21 14:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/174
Date: 2022-06-21 20:49:19 +0000;;;","2022-06-21 14:47;serb;Fix request (17u)

The clean backport.
- Justification: The fix for a build issue. the pre-requirements to make backport of JDK-8286582 clean.
- Risk Analysis: Low
https://github.com/openjdk/jdk17u-dev/pull/492;;;","2022-06-21 14:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/492
Date: 2022-06-21 21:15:12 +0000;;;",,,,,,,,,,,,,,,,,,,,
C2: assert(_base == Long) failed: Not a Long,JDK-8283451,5070655,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,shade,shade,2022-03-21 05:18,2022-04-07 02:20,2023-10-01 09:56,2022-03-22 07:09,11,16,17,18,19,,,,,19,hotspot,,0,c2,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-19,regression,,,,,,,,"(synopsis is provisional, change as you see fit)

Attached Fuzzer test fails:

$ build/linux-x86_64-server-fastdebug/images/jdk/bin/java -cp 0006/ -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressCCP -XX:+StressIGVN -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation -XX:StressSeed=85215050 Test

#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/opto/type.hpp:1743), pid=3117013, tid=3117054
#  assert(_base == Long) failed: Not a Long
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc.shade.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc.shade.jdk, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x16a6dcf]  PhaseIterGVN::no_dependent_zero_check(Node*) const+0x14f

Stack: [0x00007fa05d747000,0x00007fa05d848000],  sp=0x00007fa05d842f30,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x16a6dcf]  PhaseIterGVN::no_dependent_zero_check(Node*) const+0x14f
V  [libjvm.so+0xeca7a9]  IfNode::dominated_by(Node*, PhaseIterGVN*)+0x389
V  [libjvm.so+0x16aae58]  PhaseIterGVN::transform_old(Node*)+0xb8
V  [libjvm.so+0x16a3f2e]  PhaseIterGVN::optimize()+0x7e
V  [libjvm.so+0xac2ba4]  Compile::Optimize()+0x884
V  [libjvm.so+0xac4b34]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1244
V  [libjvm.so+0x8dcb8b]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x69b
V  [libjvm.so+0xad5cb8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xe48
V  [libjvm.so+0xad6a48]  CompileBroker::compiler_thread_loop()+0x668
V  [libjvm.so+0x1a4563c]  JavaThread::thread_main_inner()+0x28c
V  [libjvm.so+0x1a4bc94]  Thread::call_run()+0x104
V  [libjvm.so+0x162450c]  thread_native_entry(Thread*)+0x10c

Seems to only fail with that particular StressSeed, and bisection points to JDK-8282045 as the first bad commit (that might be accidental).",,,,,,,,,,,JDK-8284128,JDK-8284269,JDK-8284154,JDK-8284518,JDK-8283829,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282045,,,,,,JDK-8260284,JDK-8284130,,,,,"2022-03-21 05:18;shade;0006.zip;https://bugs.openjdk.org/secure/attachment/98344/0006.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2weij:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-21 14:03;dlong;ILW = assert failure with fuzzer; intermittent; no workaround = MMH = P3 ;;;","2022-03-22 05:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7902
Date: 2022-03-22 11:27:56 +0000;;;","2022-03-22 07:09;dukebot;Changeset: fabde3b7
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-03-22 14:06:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fabde3b7b8ed5e576febe8138c14696ccdf636d5
;;;","2022-03-22 07:34;chagedorn;Fixed code was introduced in JDK 16 with JDK-8260284 which was backported to 11. Adding affected versions accordingly.;;;","2022-03-29 08:08;thartmann;Fix Request (JDK 18u)
Fixes an assert in C2. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 08:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/60
Date: 2022-03-29 15:07:39 +0000;;;","2022-03-30 04:03;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Test has passed.;;;","2022-03-30 04:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/313
Date: 2022-03-30 11:05:06 +0000;;;","2022-04-06 01:26;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
Low risk, simple change. 
Clean backport, but I had to remove some flags from the test not known in 11.
Test passes.  SAP nightly testing passes.;;;","2022-04-06 01:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1013
Date: 2022-04-06 08:28:22 +0000;;;",,,,,,,,,,,,,,,,,,,,
C2: segmentation fault in ciMethodBlocks::make_block_at(int),JDK-8283441,5070500,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dlong,webbuggrp,webbuggrp,2022-03-17 08:24,2023-09-25 07:08,2023-10-01 09:56,2022-04-26 00:29,11,17.0.2,18,19,7u351,8,,,,19,hotspot,,0,additional-information-received,c1,c2,dcsswa,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,oracle-triage-19,redhat-interest,reproducer-yes,webbug,"ADDITIONAL SYSTEM INFORMATION :
OS version:
Distributor ID: Ubuntu
Description:    Ubuntu 20.04.2 LTS
Release:        20.04
Codename:       focal

JDK version we used:

openjdk version ""17.0.2"" 2022-01-18
OpenJDK Runtime Environment (build 17.0.2+8-86)
OpenJDK 64-Bit Server VM (build 17.0.2+8-86, mixed mode, sharing)

openjdk version ""18"" 2022-03-22
OpenJDK Runtime Environment (build 18+36-2087)
OpenJDK 64-Bit Server VM (build 18+36-2087, mixed mode, sharing)

openjdk version ""19-ea"" 2022-09-20
OpenJDK Runtime Environment (build 19-ea+13-808)
OpenJDK 64-Bit Server VM (build 19-ea+13-808, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
When we run the test in jdk17.0.2, jdk18 and jdk19-ea, all in compiled mode(with ""-Xcomp""), it crashed with the following message. But when run the test in mixed mode or interpreted mode(with ""-Xint), it passed successfully.

The error message in compiled mode:

jdk17.0.2:
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f0b86b5a37b, pid=32365, tid=32379
#
# JRE version: OpenJDK Runtime Environment (17.0.2+8) (build 17.0.2+8-86)
# Java VM: OpenJDK 64-Bit Server VM (17.0.2+8-86, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x52837b]  ciMethodBlocks::make_block_at(int)+0x3b
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /home/minghai/hs_err_pid32365.log
#
# Compiler replay data is saved as:
# /home/minghai/replay_pid32365.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp

jdk18:
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f9a003d800b, pid=32250, tid=32263
#
# JRE version: OpenJDK Runtime Environment (18.0+36) (build 18+36-2087)
# Java VM: OpenJDK 64-Bit Server VM (18+36-2087, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x54b00b]  ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption)+0x2b
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /home/minghai/hs_err_pid32250.log
#
# Compiler replay data is saved as:
# /home/minghai/replay_pid32250.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp

jdk19-ea:
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f96f291b1fb, pid=32319, tid=32332
#
# JRE version: OpenJDK Runtime Environment (19.0+13) (build 19-ea+13-808)
# Java VM: OpenJDK 64-Bit Server VM (19-ea+13-808, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x5571fb]  ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption)+0x2b
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /home/minghai/hs_err_pid32319.log
#
# Compiler replay data is saved as:
# /home/minghai/replay_pid32319.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. extract the bug.zip
2. in dictionary ""bug"", run command:
java -cp ./bugFiles:./util:./junit.jar:./hamcrest.jar:./target/classes:./target/test-classes org.junit.runner.JUnitCore com.alibaba.fastjson.deserializer.issue1463.TestIssue1463

you may add ""-Xcomp"" or ""-Xint"" to get different results.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The result should be the same since the program are the same, no matter in compiled mode, mixed mode or interpreted mode.
ACTUAL -
When run in compiled mode(with ""-Xcomp""), it crashed. But when run in mixed mode or interpreted mode(with -Xint), it passed successfully.

---------- BEGIN SOURCE ----------
to be attached in bug.zip
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
run the command without -Xcomp or with -Xint

FREQUENCY : always


",,,,,,,,,,,JDK-8286109,JDK-8286106,JDK-8292982,JDK-8289463,JDK-8316902,JDK-8288304,JDK-8292979,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284737,,JDK-8291459,,,,,,JDK-8284877,,,,,,"2022-04-11 23:34;sswsharm;bug.zip;https://bugs.openjdk.org/secure/attachment/98534/bug.zip","2022-04-11 23:47;sswsharm;hs_err_pid2564.log;https://bugs.openjdk.org/secure/attachment/98535/hs_err_pid2564.log","2022-04-11 23:47;sswsharm;replay_pid2564.log;https://bugs.openjdk.org/secure/attachment/98536/replay_pid2564.log",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wdkb:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-20 23:58;sswsharm;additional information requested
======================================
 please share the bug.zip file to reproduce this issue.
======================================;;;","2022-04-11 23:56;sswsharm;Issue is reproduced when code is executed in Compiled mode(-Xcomp) but is not reproduced with (-Xint) 

OS: Windows 10
JDK 8: Fail
JDK 11: Fail
JDK 17.0.2: Fail
JDK 18: Fail

OS: Linux(Ubuntu 20.04)
JDK 8: Fail
JDK 11: Fail
JDK 17.0.2: Fail
JDK 18: Fail

Moving it to Dev team for further analysis.;;;","2022-04-12 00:54;rcastanedalo;The failure can be reproduced more efficiently by limiting compilation to the ""com.alibaba.fastjson.JSON::parseObject"" method:

java -Xcomp -XX:CompileOnly=com.alibaba.fastjson.JSON::parseObject -cp ./bugFiles:./util:./junit.jar:./hamcrest.jar:./target/classes:./target/test-classes org.junit.runner.JUnitCore com.alibaba.fastjson.deserializer.issue1463.TestIssue1463;;;","2022-04-12 01:15;rcastanedalo;ILW = C2 crashes in bytecode parsing; bytecode compiled from unavailable source; disable compilation of affected method = MML = P3;;;","2022-04-12 03:34;thartmann;Once the fix is available, we need to verify that JDK-8284737 is a duplicate.;;;","2022-04-21 17:52;dlong;I wonder if this could be related to JDK-8284877.  In that bug the 3rd-party serialization framework appears to be writing to fields with an object of the wrong type.;;;","2022-04-21 18:57;dlong;The method being compiled (com/alibaba/fastjson/JSON.parseObject) ends abruptly:

       623: areturn
       624: iinc          20, 1
       627: iload         20
       629: iconst_2
       630: if_icmple     336
       (end of bytecodes)

The block appears unreachable, so perhaps that is why the verifier and bytecode rewriter don't complain about it.

In the duplicate bug, the method is JSON.config(), but it has the same problem:
       416: return
       417: iinc          5, 1
       420: iload         5
       422: iconst_2
       423: if_icmple     339
       (end of bytecodes)
;;;","2022-04-22 20:44;dlong;The new verifier checks by bytecodes falling off the end of the method, and the old verify does the same, but only for reachable code.  So we need to be careful of falling off the end when compiling unreachable code verified by the old verifier.;;;","2022-04-22 20:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8374
Date: 2022-04-23 03:50:39 +0000;;;","2022-04-26 00:29;dukebot;Changeset: 94786960
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-04-26 07:25:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/947869609ce6b74d4d28f79724b823d8781adbed
;;;","2022-06-09 01:39;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
A C2 fix we should take.
Clean backport.
Test fails without the fix and passes after fixing.
SAP nightly testing passed.;;;","2022-06-09 02:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/451
Date: 2022-06-09 09:24:22 +0000;;;","2022-06-21 00:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/155
Date: 2022-06-21 07:16:13 +0000;;;","2022-06-24 04:14;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
A C2 fix we should take.
Clean backport.
Test fails without the fix and passes after fixing.   SAP nighlty testing passed.;;;","2022-06-24 04:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1183
Date: 2022-06-24 11:21:33 +0000;;;","2022-08-26 04:42;yan;Fix request (13u, 15u)

I'd like to backport the fix to be on par with LTS releases. Clean port; non-ignored hotspot tests run fine.;;;","2022-08-26 04:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/394
Date: 2022-08-26 11:44:22 +0000;;;","2022-08-26 06:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/261
Date: 2022-08-26 13:26:16 +0000;;;","2023-09-21 07:58;jvanek;After the regular path triaging and one copyright header date amend the patch apply cleanly.
Jdk builds with it and passes the test.  No regressions spotted.;;;","2023-09-22 01:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/376
Date: 2023-09-22 08:29:23 +0000;;;",,,,,,,,,,
JvmtiEnvBase::check_and_skip_hidden_frames hits Error: assert(jvf != __null && jvf->method() != __null) failed,JDK-8283427,5070620,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rpressler,alanb,alanb,2022-03-20 08:03,2022-04-14 08:18,2023-10-01 09:56,2022-04-14 08:18,repo-loom,,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,"serviceability/jvmti/vthread/SuspendResume1/SuspendResume1.java	a is hitting an assert in loom-tier6. 

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/src/hotspot/share/prims/jvmtiEnvBase.cpp:635), pid=316424, tid=316434
#  Error: assert(jvf != __null && jvf->method() != __null) failed
#
# JRE version: Java(TM) SE Runtime Environment (19.0+5) (fastdebug build 19-loom+5-300)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-loom+5-300, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1387845]  JvmtiEnvBase::check_and_skip_hidden_frames(bool, javaVFrame*)+0xf5

Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1387845]  JvmtiEnvBase::check_and_skip_hidden_frames(bool, javaVFrame*)+0xf5
V  [libjvm.so+0x138e2d8]  JvmtiEnvBase::get_vthread_jvf(oop)+0x218
V  [libjvm.so+0x138ed23]  MultipleStackTracesCollector::fill_frames(_jobject*, JavaThread*, oop)+0x1c3
V  [libjvm.so+0x138efee]  VM_GetThreadListStackTraces::doit()+0x18e
V  [libjvm.so+0x1b91d1a]  VM_Operation::evaluate()+0x18a
V  [libjvm.so+0x1bb717b]  VMThread::evaluate_operation(VM_Operation*)+0x1ab
V  [libjvm.so+0x1bb88ef]  VMThread::inner_execute(VM_Operation*)+0x41f
V  [libjvm.so+0x1bb8ab5]  VMThread::loop()+0xb5
V  [libjvm.so+0x1bb8bd4]  VMThread::run()+0xb4
V  [libjvm.so+0x1a97fd0]  Thread::call_run()+0x100
V  [libjvm.so+0x17672c4]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wear:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-14 08:18;rpressler;Seems to have been fixed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix 'exeption' typo,JDK-8283426,5070619,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2022-03-20 06:46,2022-03-30 17:58,2023-10-01 09:56,2022-03-24 12:54,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,In a few places 'exeption' is used in comments instead of 'exception' ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2weaj:",9223372036854775807,b16,,,,,,,,,,,"2022-03-20 06:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7879
Date: 2022-03-20 13:30:01 +0000;;;","2022-03-21 08:17;coffeys;a few more variations of the typo in case they made sense to clean up:

src/java.security.jgss/share/classes/sun/security/krb5/KrbCryptoException.java: * KrbCryptoExceptoin is a wrapper exception for exceptions thrown by JCE.
test/hotspot/jtreg/vmTestbase/nsk/jdwp/Event/EXCEPTION/exception001.java:        // get excepion objectID value for static field
test/jdk/javax/sql/testng/test/rowset/serial/SerialJavaObjectTests.java:     * Validate that an SerialExcepion is thrown when the object specified
src/hotspot/os_cpu/windows_x86/assembler_windows_x86.cpp:// movl reg, fs:[0]                        Get exeception pointer
src/hotspot/share/jfr/dcmd/jfrDcmds.cpp:    // Don't clear excption on startup, JVM should fail initialization.
test/hotspot/jtreg/vmTestbase/nsk/jdi/ThreadReference/ownedMonitors/ownedmonitors001.java:                log3(""Unexpected excption while getting ObjectReference for monitors"");
test/jaxp/javax/xml/jaxp/unittest/validation/Bug4987574.java: * @summary Test schemaFactory.newSchema doesn't throw NullPointerExceptio for empty schema.;;;","2022-03-24 12:54;dukebot;Changeset: dc5a65ab
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-03-24 19:52:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dc5a65ab378f0780f7760965f2b52cbbd7c62aad
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
RedefineRunningMethodsWithBacktrace triggers guarantee(cb()->as_compiled_method()->method() != nullptr) failed,JDK-8283425,5070616,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rpressler,alanb,alanb,2022-03-20 01:30,2022-03-23 02:45,2023-10-01 09:56,2022-03-23 02:45,repo-loom,,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,"serviceability/jvmti/RedefineClasses/RedefineRunningMethodsWithBacktrace.java is failing in the loom repo, typical crash is:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/src/hotspot/share/runtime/stackChunkFrameStream.inline.hpp:139), pid=31262, tid=31498
#  Error: guarantee(cb()->as_compiled_method()->method() != nullptr) failed
#
# JRE version: Java(TM) SE Runtime Environment (19.0+5) (fastdebug build 19-loom+5-292)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-loom+5-292, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x10131ed]  void InstanceStackChunkKlass::iterate_stack<(chunk_frames)0, VerifyStackClosure>(stackChunkOop, VerifyStackClosure*)+0x15bd

Stack: [0x00007feba9bfb000,0x00007feba9cfc000],  sp=0x00007feba9cf8e90,  free space=1015k
Thread 0x00007feb3801bdd0 [31498]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x10131ed]  void InstanceStackChunkKlass::iterate_stack<(chunk_frames)0, VerifyStackClosure>(stackChunkOop, VerifyStackClosure*)+0x15bd
V  [libjvm.so+0xffbb98]  InstanceStackChunkKlass::verify(oop, unsigned long*, int*, int*, int*)+0x7f8
V  [libjvm.so+0x1952fc7]  stackChunkOopDesc::verify(unsigned long*, int*, int*, int*)+0x27
V  [libjvm.so+0xb205f9]  Continuation::debug_verify_continuation(oop)+0x219
V  [libjvm.so+0xb211a7]  bool verify_continuation<1967>(oop) [clone .isra.0]+0x27
V  [libjvm.so+0xb21551]  Continuation::prepare_thaw(JavaThread*, bool)+0x171",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2we9v:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-20 09:49;rpressler;Requires -Xcomp to reproduce;;;","2022-03-21 03:49;eosterlund;I can reproduce locally and the nmethod is a zombie. That means it is probably but not definitely the sweeper that is too trigger happy on this nmethod.;;;","2022-03-23 02:45;rpressler;Feed;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/loopopts/LoopUnswitchingBadNodeBudget.java fails with release VMs due to lack of -XX:+UnlockDiagnosticVMOptions,JDK-8283424,5070615,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-03-19 18:25,2022-05-04 00:11,2023-10-01 09:56,2022-03-21 02:39,11,,,,,,,,,11.0.16,hotspot,,0,oraclejdk-na,oracle-triage-19,tencent-interest,,,,,,,,,,,,,,,,"```
STDERR:
Error: VM option 'UseSwitchProfiling' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.
Error: The unlock option must precede 'UseSwitchProfiling'.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2we9n:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-19 18:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/924
Date: 2022-03-20 01:32:20 +0000;;;","2022-03-21 02:39;roboduke;Changeset: 6e5000fb
Author:    Jie Fu <jiefu@openjdk.org>
Committer: John Jiang <jjiang@openjdk.org>
Date:      2022-03-21 09:38:21 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/6e5000fbbec76e5a19563811d8b2ae3e832c7536
;;;","2022-05-04 00:11;dukebot;Changeset: 6e5000fb
Author:    Jie Fu <jiefu@openjdk.org>
Committer: John Jiang <jjiang@openjdk.org>
Date:      2022-03-21 09:38:21 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/6e5000fbbec76e5a19563811d8b2ae3e832c7536
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"[AOT] Exclude TrackedFlagTest/NotTrackedFlagTest in 11u because of intermittent java.lang.AssertionError: duplicate classes for name Ljava/lang/Boolean;",JDK-8283420,5070608,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-03-19 15:27,2022-05-04 00:12,2023-10-01 09:56,2022-03-21 09:52,11,,,,,,,,,11.0.16,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,oraclejdk-na,oracle-triage-19,,,,,,,,,,,,,,"We see intermittent failures in hotspot tests
compiler/aot/verification/vmflags/TrackedFlagTest.java
compiler/aot/verification/vmflags/NotTrackedFlagTest.java

with the following callstack:

Exception in thread ""main"" java.lang.AssertionError: duplicate classes for name Ljava/lang/Boolean;
	at jdk.aot@11.0.16-internal/jdk.tools.jaotc.AOTCompiledClass.getAOTKlassData(AOTCompiledClass.java:341)
	at jdk.aot@11.0.16-internal/jdk.tools.jaotc.AOTCompiledClass.metadataName(AOTCompiledClass.java:440)
	at jdk.aot@11.0.16-internal/jdk.tools.jaotc.AOTCompiledClass.metadataName(AOTCompiledClass.java:446)
	at jdk.aot@11.0.16-internal/jdk.tools.jaotc.AOTCompiledClass.metadataName(AOTCompiledClass.java:452)
	at jdk.aot@11.0.16-internal/jdk.tools.jaotc.MetadataBuilder.addMetadataEntries(MetadataBuilder.java:185)
	at jdk.aot@11.0.16-internal/jdk.tools.jaotc.MetadataBuilder.createMethodMetadata(MetadataBuilder.java:119)
	at jdk.aot@11.0.16-internal/jdk.tools.jaotc.MetadataBuilder.processMetadataClass(MetadataBuilder.java:70)
	at jdk.aot@11.0.16-internal/jdk.tools.jaotc.MetadataBuilder.processMetadata(MetadataBuilder.java:63)
	at jdk.aot@11.0.16-internal/jdk.tools.jaotc.DataBuilder.prepareData(DataBuilder.java:161)
	at jdk.aot@11.0.16-internal/jdk.tools.jaotc.Main.run(Main.java:230)
	at jdk.aot@11.0.16-internal/jdk.tools.jaotc.Main.run(Main.java:133)
	at jdk.aot@11.0.16-internal/jdk.tools.jaotc.Main.main(Main.java:89)

JBS research yields similar issues JDK-8201248 and JDK-8203835 which were fixed with Graal update JDK-8215224.

Since there are no plans to update Graal in 11u, I request the exclusion of these two tests to reduce noise in the CI systems.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8201248,,,,,,JDK-8203835,JDK-8267704,JDK-8215224,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2we83:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-19 15:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/923
Date: 2022-03-19 22:44:08 +0000;;;","2022-03-20 00:33;clanger;Fix request (11u):
Specific test exclusion for 11u. Reasoning as per the description of this issue. PR reviewed by tstuefe.;;;","2022-03-21 09:51;roboduke;Changeset: d568fc82
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-03-21 16:50:00 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/d568fc823ee1078b5124277e91264d9d467530ff
;;;","2022-05-04 00:12;dukebot;Changeset: d568fc82
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-03-21 16:50:00 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/d568fc823ee1078b5124277e91264d9d467530ff
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
InflaterInputStream holds on to a temporary byte array of 512 bytes,JDK-8283411,5070597,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2022-03-19 07:14,2022-03-23 17:47,2023-10-01 09:56,2022-03-23 02:50,17,,,,,,,,,19,core-libs,,0,noreg-trivial,redhat-interest,,,,,,,,,,,,,,,,,"The java.util.zip.InflaterInputStream has a per instance private member:

private byte[] b = new byte[512];

This member is only used in the implementation of the skip(...) method of this class and it has no other references/uses within that class. 

This member can be made a method local variable within the implementation of skip(...) itself to allow for it to be allocated (and GCed) if and when skip gets called.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282755,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2we5n:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2022-03-19 21:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7875
Date: 2022-03-20 04:24:07 +0000;;;","2022-03-23 02:50;dukebot;Changeset: 91fab6ad
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-03-23 09:47:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/91fab6ad59d2a4baf58802fc6e6039af3dd8d578
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix a C2 crash when filling arrays with unsafe,JDK-8283408,5070593,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pli,pli,pli,2022-03-19 00:15,2023-09-26 06:27,2023-10-01 09:56,2022-03-23 18:51,11,16,17,18,19,8,,,,19,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-11,oracle-triage-19,,,,,,,,,"HotSpot C2 crashes when we use unsafe API to fill an array in a loop. It can be reproduced by the case like below.

        byte[] array = new byte[size];
        int offset = unsafe.arrayBaseOffset(byte[].class);
        for (int i = offset; i < offset + size; i++) {
             unsafe.putByte(array, i, fill);
        }

Crash report

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000ffffb60c5988, pid=2413836, tid=2413852
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc.penli01.jdksrc)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc.penli01.jdksrc, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x6c5988]  AddPNode::bottom_type() const+0x78
#
# Core dump will be written. Default location: /tmp/core.2413836
#
# An error report file with more information is saved as:
# /tmp/scratch/0/hs_err_pid2413836.log
#
# Compiler replay data is saved as:
# /tmp/scratch/0/replay_pid2413836.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#


The crash is caused by a NULL pointer issue when doing loop intrinsify_fill optimization for unsafe fill patterns. Although this only occurs with unsafe call, we still think it's better to fix that because such unsafe call is used in a correct way.

Note that this can be reproduced on AArch64 with default VM options. On x86, it's reproducible with additional option ""-XX:+OptimizeFill"" which is turned off by default.",,,,,,,,,,,JDK-8283827,JDK-8284519,JDK-8284055,JDK-8284271,JDK-8284081,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316954,,,,,,,,JDK-8247307,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2we4r:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-20 23:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7884
Date: 2022-03-21 06:00:31 +0000;;;","2022-03-21 01:22;chagedorn;ILW = Segmentation fault in C2, rare and only when using Unsafe API, possibly disable compilation of affected method = HLM = P3;;;","2022-03-23 18:51;dukebot;Changeset: a6740c01
Author:    Pengfei Li <pli@openjdk.org>
Date:      2022-03-24 01:50:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a6740c010b7d37f991c8547be6ea72b198e9094f
;;;","2022-03-29 07:09;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Test has passed.;;;","2022-03-29 07:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/306
Date: 2022-03-29 14:11:27 +0000;;;","2022-03-29 08:04;thartmann;Fix Request (JDK 18u)
Fixes a segmentation fault in C2. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 08:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/58
Date: 2022-03-29 15:03:48 +0000;;;","2022-03-30 01:50;chagedorn;Starts to fail after JDK-8247307 but the affected code was already there before.;;;","2022-04-06 06:30;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
Low risk, a rather small fix adding a null check.
Clean backport.
Test passes. SAP nightly testing passes.;;;","2022-04-06 06:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1015
Date: 2022-04-06 13:28:05 +0000;;;",,,,,,,,,,,,,,,,,,,,
[macos] a11y : Screen magnifier does not show JMenu name,JDK-8283404,5070584,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,landrews,landrews,2022-03-18 14:38,2023-04-10 10:22,2023-10-01 09:56,2023-04-02 22:38,11,17,18,19,8,,,,,21,client-libs,,0,a11y,accessibility,macos,sn_138,sn_139,sn_140,sn_141,vpat,vpat-11u,vpat-17u,vpat-8u,,,,,,,,"I have a JFrame and couple of JMenu with one or two JMenuItems.
I have enabled Screen Magnifier and when I move mouse over the JMenu screen magnifier does not show the JMenu name where as JMenuItem are shown. I compared with native application and menu text are shown on screen magnifier.

Showing Menu will be very much useful for the user.

Step to reproduce:
------------------------
1) Enable Screen magnifier on theMac
System Preference -> Accessibility -> Zoom -> Select ( Enable Hover Text)
2) Run the attached test  with -Djavax.accessibility.screen_magnifier_present=true option 
3) Move the mouse over the ""File"" or ""Edit"" menu by pressing ""cmd"" button. If the screen magnifier does not show the menu name then the bug is reproduced.

I have attached the screen recording to demonstrate the same.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-03-18 14:34;landrews;JMenuBarTest.java;https://bugs.openjdk.org/secure/attachment/98336/JMenuBarTest.java","2022-03-18 14:35;landrews;ScreenMagnifier_JMenuBug.mov;https://bugs.openjdk.org/secure/attachment/98335/ScreenMagnifier_JMenuBug.mov",,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2we2z:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2023-03-09 21:13;abhiscxk;I am able to reproduce the bug. 

Observation:
It has been observed that the a11y to get the name is not invoked for JMenu, so magnifier doesn't show any magnified text.
When the role is changed from Menu to MenuItem, magnifier does show the magnified text but it broke the other Jmenu features.
Analysis is under progress to find out the root cause.;;;","2023-03-31 08:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13271
Date: 2023-03-31 15:27:50 +0000;;;","2023-04-02 22:38;dukebot;Changeset: ecec611a
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Date:      2023-04-03 05:36:04 +0000
URL:       https://git.openjdk.org/jdk/commit/ecec611af6c6314d7a834392f38468ad3f390e2d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Update Glib to 2.72.0,JDK-8283403,5070582,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,almatvee,almatvee,2022-03-18 14:11,2022-07-07 11:53,2023-10-01 09:56,2022-04-21 13:33,8u341,jfx19,,,,,,,,jfx19,javafx,,0,3rdparty,sn_114,sn_115,sn_116,,,,,,,,,,,,,,,"We currently use GLib version 2.66.7. We should update to the latest stable release, which is version 2.72.0 (released Mar 17, 2022).",,,,,,,,,,,JDK-8286643,JDK-8285403,JDK-8286009,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275177,,,,,,,,,,JDK-8262366,JDK-8283218,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2we2j:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2022-04-07 23:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/768
Date: 2022-04-08 06:49:59 +0000;;;","2022-04-21 13:33;dukebot;Changeset: c4b1a72c
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-04-21 20:29:05 +0000
URL:       https://git.openjdk.java.net/jfx/commit/c4b1a72cc4d9253d1320d83281d50fb1f3bb6145
;;;","2022-04-30 06:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/94
Date: 2022-04-30 13:37:08 +0000;;;","2022-05-09 14:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/54
Date: 2022-05-09 21:07:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Update to gcc 11.2.0 on Linux,JDK-8283402,5070580,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2022-03-18 13:53,2022-11-23 04:46,2023-10-01 09:56,2022-07-11 05:52,8,jfx17,,,,,,,,jfx19,javafx,,0,3rdparty,noreg-build,sn_114,,,,,,,,,,,,,,,," We are currently using gcc 10.3 on Linux. We should upgrade to gcc 11.2 to match JDK 19.
",,,,,,,,,,,JDK-8297496,JDK-8297421,JDK-8294582,,,,,,,,,,,,,,,,,,,,,,,JDK-8283057,,,,,,JDK-8265400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2we23:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-03-25 05:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/761
Date: 2022-03-25 12:19:10 +0000;;;","2022-07-11 05:52;dukebot;Changeset: c7d3fd92
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-07-11 12:48:48 +0000
URL:       https://git.openjdk.org/jfx/commit/c7d3fd9276916ec3964e77148791bd7375487ffc
;;;","2022-11-21 15:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/94
Date: 2022-11-21 23:43:41 +0000;;;","2022-11-22 12:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/120
Date: 2022-11-22 20:31:23 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
ArrayIndexOutOfBoundsException when disconnecting screen(s),JDK-8283401,5070579,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mhanl,mhanl,mhanl,2022-03-18 13:40,2023-09-20 05:43,2023-10-01 09:56,2023-08-11 15:28,jfx19,,,,,,,,,jfx22,javafx,,0,,,,,,,,,,,,,,,,,,,"Newest JavaFX EA build (19-ea+3)
OS = Windows (not sure if also reproducable for other OS)
---

Sometimes an ArrayIndexOutOfBoundsException is thrown when disconnecting screen(s).
It looks like this only can happen when there are multiple screens.
Also the main screen should be the second screen, so when it gets disconnected, everything will move to the first screen.

Related mailing list article: https://mail.openjdk.java.net/pipermail/openjfx-dev/2022-February/033607.html

So in short:
[Screen 1] [Screen 2*]
* =  main screen with JavaFX app
Disconnect Screen 2. -> Sometimes exception.
---

One time my JVM also crashed and generated a hs_err_pid file.
I attached it on this ticket.

The following stacktrace appeared:
java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
    at com.sun.prism.d3d.D3DPipeline.getD3DResourceFactory(D3DPipeline.java:217)
    at com.sun.prism.d3d.D3DPipeline.getResourceFactory(D3DPipeline.java:284)
    at com.sun.scenario.effect.impl.prism.ps.PPSRenderer.validate(PPSRenderer.java:101)
    at com.sun.scenario.effect.impl.prism.ps.PPSRenderer.getCompatibleImage(PPSRenderer.java:221)
    at com.sun.scenario.effect.impl.prism.ps.PPSRenderer.getCompatibleImage(PPSRenderer.java:67)
    at com.sun.scenario.effect.Effect.getCompatibleImage(Effect.java:479)
    at com.sun.javafx.sg.prism.NodeEffectInput.getImageDataForBoundedNode(NodeEffectInput.java:228)
    at com.sun.javafx.sg.prism.NodeEffectInput.filter(NodeEffectInput.java:131)
    at com.sun.scenario.effect.FilterEffect.filter(FilterEffect.java:185)
    at com.sun.scenario.effect.Offset.filter(Offset.java:160)
    at com.sun.scenario.effect.Merge.filter(Merge.java:148)
    at com.sun.scenario.effect.DelegateEffect.filter(DelegateEffect.java:70)
    at com.sun.scenario.effect.impl.prism.PrEffectHelper.render(PrEffectHelper.java:166)
    at com.sun.javafx.sg.prism.EffectFilter.render(EffectFilter.java:61)
    at com.sun.javafx.sg.prism.NGNode.renderEffect(NGNode.java:2384)
    at com.sun.javafx.sg.prism.NGNode.doRender(NGNode.java:2069)
    at com.sun.javafx.sg.prism.NGNode.render(NGNode.java:1964)
    at com.sun.javafx.sg.prism.NGGroup.renderContent(NGGroup.java:270)
    at com.sun.javafx.sg.prism.NGRegion.renderContent(NGRegion.java:579)
    at com.sun.javafx.sg.prism.NGNode.doRender(NGNode.java:2072)
    ... ( a lot of doRender(..), renderContent(..) calls... )
    at com.sun.javafx.tk.quantum.ViewPainter.doPaint(ViewPainter.java:480)
    at com.sun.javafx.tk.quantum.ViewPainter.paintImpl(ViewPainter.java:329)
    at com.sun.javafx.tk.quantum.PresentingPainter.run(PresentingPainter.java:92)
    at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
    at java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
    at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
    at com.sun.javafx.tk.RenderJob.run(RenderJob.java:58)
    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
    at com.sun.javafx.tk.quantum.QuantumRenderer$PipelineRunnable.run(QuantumRenderer.java:126)
    at java.base/java.lang.Thread.run(Thread.java:829)

### REPRODUCE ###
To reproduce this, the scene must have at least one node with an effect:
VBox root = new VBox();
root.setEffect(new Blend());

Also the D3D Pipeline must be used.(See also stacktrace).

The main screen should be the screen which is then disconnected.

To easier reproduce it, there are some 'hacks' which work quite well to test this:
1. Create a static boolean variable in com.sun.prism.impl.ps.BaseShaderContext (e.g. shouldRecreate)
2. In D3DContext#testLostStateAndReset, the variable hr is now changed to D3DERR_DEVICEREMOVED when shouldRecreate is true
3. Create a test scene with a button. The action when the button is pressed should be something like this: BaseShaderContext.shouldRecreate = true
4. On Windows, press Windows + P and select the first option (PC screen only). This will basically 'disconnect' your screens. Interestingly D3D is not reporting a D3DERR_DEVICEREMOVED. 
If you click now on the button and let D3D recreate everything, the exception appears.

Note: The setup should be as above: E.g. use the last screen and make it also the main screen. 

My initial setup [ 1 ][ 2 ][ 3* ]
3 is the main screen with the JavaFX app.
Windows + P -> [ 2 ] (other screens are disconnected)
Now I recreate the D3D pipeline with the button -> Exception.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8239589,,,,,,"2022-03-18 13:43;mhanl;hs_err_pid264.log;https://bugs.openjdk.org/secure/attachment/98334/hs_err_pid264.log",,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2we1v:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-03-18 13:46;kcr;[~mhanl] I seems to recall someone reporting a similar bug a while ago. If I can find it, then I'll close this as a duplicate.

The crash should not be happening though. Does that happen all the time once you get the exception?
UPDATE: I see from the Description that the crash was a one time occurrence. We should look at that, too.;;;","2022-03-18 13:58;mhanl;[~kcr] Sounds good.

No, one time the JavaFX application just worked while I still saw the exception in the console, while another time it was completely black and didn't rendered anymore.
And another time I got the described crash (with the hs_err_pid file).

Unfortunately I'm not very familiar with the more ""low level java code"" or C++ (if needed). But if there is an idea or a potential fix I would be glad helping/testing it.;;;","2022-03-18 13:58;kcr;Turns out I was remembering that this had been discussed on the openjfx-dev mailing list:

https://mail.openjdk.java.net/pipermail/openjfx-dev/2022-February/033607.html

Thank you for filing it.;;;","2022-03-18 14:00;kcr;I'll take a look at it, although not right away, so if you do find something out, that would be helpful. Testing would be helpful, too.
;;;","2022-06-28 13:31;mhanl;Update: I sometimes also got this when switching to other screens. E.g. I connect myself to a docking station where two screen are plugged in. Then I will disconnect the cable and go to another docking station with another 2 screens.
I will check this the upcoming days.;;;","2023-02-09 06:57;mstrauss;I am also encountering this bug with the exact same stack trace.
This happens on a Windows 11 laptop that is connected to a docking station with two screens. When the docking station is disconnected, the error sometimes appears.;;;","2023-02-09 07:12;mhanl;Same for me. 
I checked some more cases and I could also reproduce it when manually disconnecting screens by cable, although the usecase with the docking station worked more often.
 ;;;","2023-02-09 08:47;kcr;I have a setup where I can test this today. If I can reproduce it, I'll add a comment with whatever information I can find.;;;","2023-02-09 09:17;kcr;I tried it about 15 times, but can't reproduce it. My setup is a dual screen case where I made the external monitor the primary screen. I Then launched the program (I tried a couple of different ones including Ensemble8 with various animating objects in case that made a difference) on the external monitor (which was primary at that time), and unplugged it so everything moved to the builtin monitor. No exception was seen. I tried repeating this several times sometimes restarting the program and sometimes not.

I don't have a docking station so this was done by plugging in and unplugging an HDMI cable.
;;;","2023-02-09 09:28;mstrauss;Something that may be related:
1. Put Windows into sleep mode
2. Disconnect the docking station / external monitor
3. Resume Windows

The JavaFX window will be black, sometimes the exception occurs.;;;","2023-02-10 06:55;kcr;I tried that yesterday a few time as well. No luck reproducing it.;;;","2023-02-12 10:45;mstrauss;I think this particular bug is caused by PPSRenderer caching, and later using, a stale Screen instance. This change was introduced in JDK-8239589.

Since Screen instances can't be used after being disposed, an error can occur. Note that the exception only occurs if the adapter ordinal is out of bounds of the D3DResourceFactory array, so it may be the case that if the adapter ordinal of the stale screen just happens to not be an invalid index into the array, the code appears to function normally.

Maybe a solution could be to check whether the cached Screen is not disposed before using it.;;;","2023-05-19 14:28;mhanl;One interesting note:
When 'disconnecting' 2 screens from a 3 screen setup, the screen ordinal from the remaining screen is set to 1.
When the D3DPipeline is reinitialized the adapter count is correctly reported as 1. Now when the D3DResourceFactory is retrieved, we get an index out of bounds as reported above.

Setup: [ 1 ][ 2 ][ 3* ] ; 3 = Main screen, ordinal is: [ 2 ][ 1 ][ 0 ]
When 1 and 3 are disconnected, 2 will by the main screen. And before it had the ordinal 1, and it still has now.
And obviously this will result in an IOOBE.
A simple Math.min() helped and works here. But it is a bit weird that the screen still has ordinal 1.;;;","2023-08-05 06:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1200
Date: 2023-08-05 13:00:36 +0000;;;","2023-08-11 15:28;dukebot;Changeset: a5183e53
Author:    Marius Hanl <mhanl@openjdk.org>
Date:      2023-08-11 22:26:22 +0000
URL:       https://git.openjdk.org/jfx/commit/a5183e539eea3b175825a27b022c07316080c667
;;;","2023-09-20 05:43;kcr;[~mhanl] This seems like a good candidate for backporting to jfx21u if you are interested in doing that. See [1] for instructions.

[1] https://mail.openjdk.org/pipermail/openjfx-dev/2023-August/042200.html;;;",,,,,,,,,,,,,,
[macos] a11y : Screen magnifier does not reflect JRadioButton value change,JDK-8283400,5070578,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,landrews,landrews,2022-03-18 12:47,2023-06-21 14:02,2023-10-01 09:56,2023-03-15 22:01,11,17,18,19,8,,,,,21,client-libs,,0,a11y,accessibility,macos,sn_139,vpat,vpat-11u,vpat-17u,vpat-8u,,,,,,,,,,,"After selecting JRadioButton the screen magnifier does not show that JRadioButton is selected. User has to move mouse way and move back the on the JRadioButton to see that its selected but this does not on the native application as soon the RadioButton is selected the value on the Screen magnifier is also changed.

Step to reproduce:
--------------------------
1) Enable Screen magnifier on theMac
System Preference -> Accessibility -> Zoom -> Select ( Enable Hover Text)
2) Run the SwingSet2 with -Djavax.accessibility.screen_magnifier_present=true option
3) Once SwingSet2 Frame is visible select ""Button Demo"" and select ""Radio Buttons demo"".
4) Press ""cmd"" button and select unselected radioButton if you see the radio button is not selected on the screen magnifier then the bug is reproduced.

I have attached the screen recording for the reference showing that native application and java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309733,,,,,,,,,,,,"2022-03-18 12:47;landrews;ScreenMagnifier_JRadioButton.mov;https://bugs.openjdk.org/secure/attachment/98333/ScreenMagnifier_JRadioButton.mov",,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2we1n:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2023-03-10 04:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12971
Date: 2023-03-10 11:59:07 +0000;;;","2023-03-15 22:01;dukebot;Changeset: eefbaa29
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Date:      2023-03-16 05:00:40 +0000
URL:       https://git.openjdk.org/jdk/commit/eefbaa29567f89e0c28425fe4ed4bddef3a14891
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Null pointer dereference in loopnode.cpp:2851,JDK-8283396,5070573,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlong,shadowbug,shadowbug,2022-03-18 11:30,2022-04-27 05:47,2023-10-01 09:56,2022-04-05 14:09,19,,,,,,,,,19,hotspot,,0,bugdb_33976239,oracle-triage-11,oracle-triage-17,oracle-triage-19,parfait,,,,,,,,,,,,,,Null pointer dereference in loopnode.cpp:2851,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281322,,,,,,,,,,,,,,,,,,,,,,,,,,,,,other,,,,,"0|i2we0j:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-18 13:38;dcubed;Moving from hotspot/runtime -> hotspot/compiler since
the code belongs to the compiler team:

src/hotspot/share/opto/loopnode.cpp;;;","2022-03-18 16:22;dlong;ILW = Potential null pointer dereferences, no known occurrences in practice, no workaround = MLH = P4;;;","2022-04-04 13:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8096
Date: 2022-04-04 20:54:40 +0000;;;","2022-04-05 14:09;dukebot;Changeset: 500f9a57
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-04-05 21:07:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/500f9a577bd7df1321cb28e69893e84b16857dd3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] a11y : Screen magnifier does not show selected Tab,JDK-8283387,5070564,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kizune,landrews,landrews,2022-03-18 11:07,2022-04-13 23:02,2023-10-01 09:56,2022-04-06 21:02,11,17,18,19,8,,,,,19,client-libs,,0,a11y,accessibility,macos,sn_115,vpat,vpat-11u,vpat-17u,vpat-8u,,,,,,,,,,,"After enabling screen magnifier in mac I tried selecting the tab and I could not able to find the different between selected tab and non selected tab. I tried comparing with the native app and I could see the different between selected and non selected tab.  This may be very useful for the accessibility.

Step to reproduce:
----------------------------
1) Enable Screen magnifier on theMac
System Preference -> Accessibility -> Zoom -> Select ( Enable Hover Text)
2) Run the SwingSet2  with -Djavax.accessibility.screen_magnifier_present=true  option
3) Once SwingSet2 Frame is visible select any component. 
example : JInternalFrame demo or JTabbed Demo.
3a) Move the mouse over the tab and select the tab. Tab gets selected. 
3b) Move mouse pointer away from the selected tab and mouse back to the selected tab by pressing ""Cmd"" command. If you see the radio button unselected  then the bug is reproduced.

I have attached the screen recording comparing the native app and Java SwingSet2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-03-18 11:06;landrews;ScreenMagnifier_JTabbedPane.mov;https://bugs.openjdk.org/secure/attachment/98332/ScreenMagnifier_JTabbedPane.mov",,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2wdyj:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-03-25 14:53;kizune;The cause of this bug is that accessible counterpart of the JTabbedPane - JTabbedPane.Page - does not have the getAccessibleValue method so default implementation from abstract class is used and it always returns null, indicating that component is stateless. The idea of the fix is to add reasonable implementation of getAccessibleValue. That might require JSR submission - depending on the exact implementation. ;;;","2022-03-30 15:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8049
Date: 2022-03-30 22:21:51 +0000;;;","2022-04-06 21:02;dukebot;Changeset: d5cd4a3a
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2022-04-07 04:00:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d5cd4a3a28a85bbcaa3c0c7f2e74e0684b5efcab
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] a11y : Screen magnifier shows extra characters (0) at the end JButton accessibility name,JDK-8283383,5070560,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kizune,landrews,landrews,2022-03-18 09:01,2023-05-05 03:44,2023-10-01 09:56,2022-06-08 07:52,11,17,18,19,8,,,,,19,client-libs,,0,a11y,accessibility,cssn22_07_01,jdk11u-a11y-defer,jdk17u-fix-request,jdk17u-fix-yes,macos,noreg-hard,sn_117,sn_118,sn_119,sn_120,vpat-exclude,,,,,,"I am seeing an extra characters (0) when screen magnifier is turn on.
Step to reproduced
---------------------------
1) Enable Screen magnifier on theMac
System Preference -> Accessibility -> Zoom -> Select ( Enable Hover Text) 
2) Run the attached test with -Djavax.accessibility.screen_magnifier_present=true 
3) Press ""Cmd"" button and move the mouse pointer over the button and observe that extra character (0) is seen after the button's set accessibility name. If you see the same then the bug is reproduced.

Note : The extra characters (0) is seen for few component and for others it not seen example JCheckbox.",,,,,,,,,,,JDK-8288909,JDK-8288980,JDK-8289813,JDK-8293505,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-03-18 09:13;landrews;AccessibilityJButtonBug.java;https://bugs.openjdk.org/secure/attachment/98329/AccessibilityJButtonBug.java",,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2wdxn:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-03-28 15:32;kizune;There are components such as Button and Image that should not have any value but still accessibilityValue returns 0 which is being displayed by the magnifier.;;;","2022-06-06 15:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9044
Date: 2022-06-06 22:14:40 +0000;;;","2022-06-08 07:52;dukebot;Changeset: b021d37c
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2022-06-08 14:44:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b021d37cec557059e288d5937a73577233b0b172
;;;","2022-09-07 03:54;jdowland;Fix Request (17u)

I would like to backport this to jdk17u-dev for Oracle parity. Patch is clean, test behaves as expected before and after. Thanks!;;;","2022-09-07 03:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/655
Date: 2022-09-07 10:49:52 +0000;;;","2022-09-07 04:21;jdowland;jdk11u-dev note: jdk11u-dev does not exhibit this bug (yet). This patch would depend upon (at least) 8256109 being backported first.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in FileHeaderHelper,JDK-8283379,5070556,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2022-03-18 07:51,2022-04-12 10:07,2023-10-01 09:56,2022-03-21 05:31,18,19,,,,,,,,19,hotspot,,0,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,,,,,,,,,,,,,,,,Its destructor does not release _header.,,,,,,,,,,,JDK-8284768,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273152,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wdwr:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-19 11:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7872
Date: 2022-03-19 18:12:11 +0000;;;","2022-03-21 05:31;dukebot;Changeset: cb576da5
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-03-21 12:28:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cb576da575ea3c8f14087dd312313843764ca2f4
;;;","2022-04-06 10:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/93
Date: 2022-04-06 17:22:58 +0000;;;","2022-04-06 10:40;zgu;Fix Request (18u)

A clean and low risk backport to fix a memory leak.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Checkpoint classes not renamed properly,JDK-8283378,5070555,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,egahlin,egahlin,egahlin,2022-03-18 07:34,2022-06-23 10:38,2023-10-01 09:56,2022-03-18 07:58,,,,,,,,,,19,hotspot,,0,noreg-build,,,,,,,,,,,,,,,,,,The build doesn't compile properly when files are named CheckPointPool.java and CheckPointEvent.java when the classes are named CheckpointPool.java and CheckpointEvent.java,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283377,,,,,JDK-8283377,,,,,,JDK-8283289,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wdwj:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-03-18 07:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7868
Date: 2022-03-18 14:35:38 +0000;;;","2022-03-18 07:58;dukebot;Changeset: b2aa085e
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-03-18 14:54:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b2aa085e67711a32e1679b68aabb092058dca044
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/c2/cr6865031/Test.java and compiler/runtime/Test6826736.java fails on x86_32,JDK-8283353,5070527,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-03-17 19:41,2022-10-16 11:04,2023-10-01 09:56,2022-03-18 01:02,19,,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-19,tencent-interest,,,,,,,,,,,,,,"Fail on x86_32 due to incorrect VM option 'HeapBaseMinAddress=32g'.

```
STDERR:
Improperly specified VM option 'HeapBaseMinAddress=32g'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
```",,,,,,,,,,,JDK-8295144,JDK-8295386,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wdqb:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-17 19:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7864
Date: 2022-03-18 02:47:09 +0000;;;","2022-03-18 00:48;chagedorn;ILW = Test failure on x86_32 due to invalid VM options, single test on x86_32 only, no workaround = MLH = P4;;;","2022-03-18 01:02;dukebot;Changeset: b96cb048
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-03-18 07:58:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b96cb048f1a7f3ae6e745b245f2b04c64ebb911e
;;;","2022-10-14 06:32;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.;;;","2022-10-14 06:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/793
Date: 2022-10-14 13:39:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[CDS] SharedBaseAddress.java fails on x86_32,JDK-8283352,5070526,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-03-17 19:17,2022-03-23 17:43,2023-10-01 09:56,2022-03-19 00:10,19,,,,,,,,,19,hotspot,,0,cds,tencent-interest,,,,,,,,,,,,,,,,,"runtime/cds/appcds/SharedBaseAddress.java
runtime/cds/SharedBaseAddress.java#id1
runtime/cds/SharedBaseAddress.java#id0

```
[STDERR]
Improperly specified VM option 'SharedBaseAddress=8g'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.


[STDERR]
Improperly specified VM option 'SharedBaseAddress=0x800001000'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wdq3:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-17 19:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7863
Date: 2022-03-18 02:27:14 +0000;;;","2022-03-19 00:10;dukebot;Changeset: 10ccfffa
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-03-19 07:08:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/10ccfffae1f18dd1a3d2f3dca53ad547d3d3ecb5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Bad JNI lookup accessibilityHitTest is shown when Screen magnifier is enabled,JDK-8283347,5070520,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,landrews,landrews,2022-03-17 13:56,2023-05-17 04:26,2023-10-01 09:56,2022-04-07 00:20,17.0.2,17.0.3,,,,,,,,17.0.4,client-libs,,0,18-na,a11y,accessibility,jdk17u-fix-request,jdk17u-fix-yes,macos,oraclejdk-na,,,,,,,,,,,,"Following exception is thrown when Screen magnifier is enabled

Step to reproduce
--------------------------
1) Enable Screen magnifier on theMac
System Preference -> Accessibility -> Zoom -> Select ( Enable Hover Text) 
2) Start SwingSet2 with the following option
-jar -Djavax.accessibility.screen_magnifier_present=true  SwingSet2.jar
3) Press ""CMD"" button on SwingSet2 . If you see the following exception then the bug is reproduced.

This is reproduced only in JDK17 but not reproduced in JDK18 & JDK19

2022-03-15 13:14:57.419 java[22109:3940166] Bad JNI lookup accessibilityHitTest
2022-03-15 13:14:57.420 java[22109:3940166] (
0 libawt_lwawt.dylib 0x0000000105efa3d9 -[JavaComponentAccessibility accessibilityHitTest:withEnv:] + 153
1 libawt_lwawt.dylib 0x0000000105ea6573 -[AWTView accessibilityHitTest:] + 179
2 AppKit 0x00007fff23a20b51 -[NSWindow(NSWindowAccessibility) accessibilityHitTest:] + 309
3 AppKit 0x00007fff235c490c -[NSApplication(NSApplicationAccessibility) accessibilityHitTest:] + 342
4 AppKit 0x00007fff235957f3 CopyElementAtPosition + 150
5 HIServices 0x00007fff25c0aa2b _AXXMIGCopyElementAtPosition + 336
6 HIServices 0x00007fff25c2b708 _XCopyElementAtPosition + 369
7 HIServices 0x00007fff25be993c mshMIGPerform + 182
8 CoreFoundation 0x00007fff20955b04 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ + 41
9 CoreFoundation 0x00007fff209559e5 __CFRunLoopDoSource1 + 619
10 CoreFoundation 0x00007fff2095406f __CFRunLoopRun + 2400
11 CoreFoundation 0x00007fff2095304c CFRunLoopRunSpecific + 563
12 HIToolbox 0x00007fff28b9ba83 RunCurrentEventLoopInMode + 292
13 HIToolbox 0x00007fff28b9b6b6 ReceiveNextEventCommon + 284
14 HIToolbox 0x00007fff28b9b583 _BlockUntilNextEventMatchingListInModeWithFilter + 70
15 AppKit 0x00007fff2315bd72 _DPSNextEvent + 864
16 AppKit 0x00007fff2315a545 -[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 1364
17 libosxapp.dylib 0x0000000105fb659a -[NSApplicationAWT nextEventMatchingMask:untilDate:inMode:dequeue:] + 122
18 AppKit 0x00007fff2314c869 -[NSApplication run] + 586
19 libosxapp.dylib 0x0000000105fb6369 +[NSApplicationAWT runAWTLoopWithApp:] + 169
20 libawt_lwawt.dylib 0x0000000105f02830 +[AWTStarter starter:headless:] + 496
21 libosxapp.dylib 0x0000000105fb803f +[ThreadUtilities invokeBlockCopy:] + 15
22 Foundation 0x00007fff21704b91 __NSThreadPerformPerform + 204
23 CoreFoundation 0x00007fff2095537c __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17
24 CoreFoundation 0x00007fff209552e4 __CFRunLoopDoSource0 + 180
25 CoreFoundation 0x00007fff20955064 __CFRunLoopDoSources0 + 242
26 CoreFoundation 0x00007fff20953a8c __CFRunLoopRun + 893
27 CoreFoundation 0x00007fff2095304c CFRunLoopRunSpecific + 563
28 libjli.dylib 0x00000001059ce0b2 CreateExecutionEnvironment + 386
29 libjli.dylib 0x00000001059c9c15 JLI_Launch + 1413
30 java 0x00000001059b9c09 main + 393
31 libdyld.dylib 0x00007fff20878f3d start + 1
)
Exception in thread ""AppKit Thread"" java.lang.NoSuchMethodError: accessibilityHitTest ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307638,,,,,,JDK-8277707,JDK-8277195,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2wdor:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-03-22 09:29;kizune;Not reproducible in current builds of openjdk, might be problem specific to jdk17;;;","2022-03-31 00:09;mbaesken;Hello [~kizune],  we checked with OpenJDK18 and as stated in the description, the issue was not seen in this release.
Any idea what change is missing in 17 (maybe we could backport it to 17) ?;;;","2022-04-01 13:39;kizune;Hi [~mbaesken], which build have you used to check this issue? There were couple of fixes that went into JDK18 but i thought that all of the important fixes were backported to 17 already. I need to double-check but i need to know which build i'm testing against.;;;","2022-04-04 04:08;lucy;Hi,
~mbaesken asked me to find the jdk18 build which fixed the issue. Here we are: it's jdk18+17:
java version ""18-ea"" 2022-03-15
Java(TM) SE Runtime Environment (build 18-ea+17-1015)
Java HotSpot(TM) 64-Bit Server VM (build 18-ea+17-1015, mixed mode, sharing)

The build directly prior to that, jdk18+16, still shows the error:
java version ""18-ea"" 2022-03-15
Java(TM) SE Runtime Environment (build 18-ea+16-926)
Java HotSpot(TM) 64-Bit Server VM (build 18-ea+16-926, mixed mode, sharing)

I can provide more detail if needed. Just let me know.;;;","2022-04-05 10:58;kizune;Ok, i am not sure of how that happened but the reason of this bug is that in CommonComponentAccessibility.m in function 
- (id)accessibilityHitTest:(NSPoint)point

The 
GET_CACCESSIBILITY_CLASS_RETURN(nil);

is placed after the DECLARE_CLASS_RETURN and DECLARE_STATIC_METHOD_RETURN clauses. That is incorrect. So after i moved it up before the DECLARE_CLASS_RETURN clause the bug stops reproducing.;;;","2022-04-06 00:24;mbaesken;Hi  [~kizune], good catch !
Here :
https://github.com/openjdk/jdk17u-dev/blob/master/src/java.desktop/macosx/native/libawt_lwawt/awt/a11y/CommonComponentAccessibility.m#L1091
the GET_CACCESSIBILITY_CLASS_RETURN(nil);   went doewn a few lines while here
https://github.com/openjdk/jdk/blob/master/src/java.desktop/macosx/native/libawt_lwawt/awt/a11y/CommonComponentAccessibility.m#L1111
it is right after the JNIEnv* env = [ThreadUtilities getJNIEnv];

I created  https://github.com/openjdk/jdk17u-dev/pull/338   to fix this.;;;","2022-04-06 05:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/338
Date: 2022-04-06 12:13:10 +0000;;;","2022-04-07 00:20;dukebot;Changeset: e78f47e5
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-04-07 07:17:57 +0000
URL:       https://git.openjdk.java.net/jdk17u-dev/commit/e78f47e595fe9025f38a326d7a5085eca69979d3
;;;","2022-05-04 01:26;dukebot;Changeset: e78f47e5
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-04-07 07:17:57 +0000
URL:       https://git.openjdk.java.net/jdk17u/commit/e78f47e595fe9025f38a326d7a5085eca69979d3
;;;",,,,,,,,,,,,,,,,,,,,,
TypeError: undefined is not an Object after JDK-8240299,JDK-8283339,5070512,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,attila,cushon,cushon,2022-03-17 10:45,2023-02-07 10:34,2023-10-01 09:56,2023-02-07 10:34,,,,,,,,,,,core-libs,,0,,,,,,,,,,,,,,,,,,,"The following program is accepted by the version of nashorn that shipped in JDK 14, but rejected by the latest version of org.openjdk.nashorn.

My colleague Nicholas Burbaum found that the commit that changed this behaviour is https://github.com/openjdk/nashorn/commit/9b87e5dadcabdf4965a278a4f090c0fffbbd60b7, and minimized the repro. He also mentioned that the fix might be to check against check against ""obj"" instead of ""self"".

```
import org.openjdk.nashorn.api.scripting.NashornScriptEngineFactory;

class NashornTest {

  public static void main(String[] args) throws Exception {
    String js = ""var objectSetPrototypeOf = Object.setPrototypeOf; objectSetPrototypeOf({}, {});"";
    new NashornScriptEngineFactory().getScriptEngine().eval(js);
  }
}
```

java -cp nashorn-core-15.3.jar:asm-9.2.jar:asm-util-9.2.jar:. NashornTest
Exception in thread ""main"" javax.script.ScriptException: TypeError: undefined is not an Object in <eval> at line number 1
	at org.openjdk.nashorn.api.scripting.NashornScriptEngine.throwAsScriptException(NashornScriptEngine.java:463)
	at org.openjdk.nashorn.api.scripting.NashornScriptEngine.evalImpl(NashornScriptEngine.java:447)
	at org.openjdk.nashorn.api.scripting.NashornScriptEngine.evalImpl(NashornScriptEngine.java:399)
	at org.openjdk.nashorn.api.scripting.NashornScriptEngine.evalImpl(NashornScriptEngine.java:395)
	at org.openjdk.nashorn.api.scripting.NashornScriptEngine.eval(NashornScriptEngine.java:151)
	at java.scripting/javax.script.AbstractScriptEngine.eval(AbstractScriptEngine.java:264)
	at NashornTest.main(NashornTest.java:7)
Caused by: <eval>:1 TypeError: undefined is not an Object
	at org.openjdk.nashorn.internal.runtime.ECMAErrors.error(ECMAErrors.java:57)
	at org.openjdk.nashorn.internal.runtime.ECMAErrors.typeError(ECMAErrors.java:212)
	at org.openjdk.nashorn.internal.runtime.ECMAErrors.typeError(ECMAErrors.java:184)
	at org.openjdk.nashorn.internal.runtime.ECMAErrors.typeError(ECMAErrors.java:171)
	at org.openjdk.nashorn.internal.objects.Global.checkObjectCoercible(Global.java:2391)
	at org.openjdk.nashorn.internal.objects.NativeObject.setPrototypeOf(NativeObject.java:201)
	at org.openjdk.nashorn.internal.scripts.Script$\^eval\_/0x0000000800c8e840.:program(<eval>:1)
	at org.openjdk.nashorn.internal.runtime.ScriptFunctionData.invoke(ScriptFunctionData.java:646)
	at org.openjdk.nashorn.internal.runtime.ScriptFunction.invoke(ScriptFunction.java:513)
	at org.openjdk.nashorn.internal.runtime.ScriptRuntime.apply(ScriptRuntime.java:520)
	at org.openjdk.nashorn.api.scripting.NashornScriptEngine.evalImpl(NashornScriptEngine.java:442)
	... 5 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wdmz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@51b0542d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Posix signal handler modification warning triggering incorrectly,JDK-8283337,5070510,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kevinw,kevinw,kevinw,2022-03-17 10:33,2022-11-03 07:26,2023-10-01 09:56,2022-03-31 01:40,19,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,"The signal handler modification check is showing a signal handler change when there is none.

jcmd PID VM.info and hs_err reports contain this info. e.g.

$ jdk-19/bin/jcmd 17446 VM.info
...
Signal Handlers:
   SIGSEGV: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGBUS: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGFPE: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGPIPE: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGXFSZ: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGILL: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGUSR2: SR_handler in libjvm.so, mask=00000000000000000000000000000000, flags=SA_RESTART|SA_SIGINFO
    SIGHUP: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGINT: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGTERM: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGQUIT: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
  *** Handler was modified!
  *** Expected: javaSignalHandler in libjvm.so, mask=11100100110111111111111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGTRAP: SIG_DFL, mask=00000000000000000000000000000000, flags=none

NOT in jdk-19-ea+6
IS  in jdk-19-ea+7 and later

This is happending after:
8279124: VM does not handle SIGQUIT during initialization

In src/hotspot/os/posix/signals_posix.cpp

PosixSignals::print_signal_handler() prints the ""Handler was modified!"" text.
It checks if the saved expected action is non-null, not whether we have 
do_check_signal_periodically[sig] == true

But although set_signal_handler has a parameter do_check, we always populate the SavedSignalHandlers vm_handlers even when this is false.

",,,,,,,,,,,JDK-8296310,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285792,JDK-8285647,,,,,JDK-8279124,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2wdmj:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-17 11:14;dcubed;[~kevinw] - I've linked to JDK-8279124 and added '19' as the ""Affects Version/s"" value.
Should this also be marked as Linux specific?;;;","2022-03-17 12:12;kevinw;Thanks Dan yes was meaning to add the link.  Marked as Linux specific.;;;","2022-03-17 12:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7858
Date: 2022-03-17 19:23:10 +0000;;;","2022-03-31 01:40;dukebot;Changeset: 45d4d7da
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2022-03-31 08:37:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/45d4d7da23f1d56c9bc7d4327892b902ce677764
;;;","2022-10-25 05:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/834
Date: 2022-10-25 11:51:38 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Update libxml2 to 2.9.13,JDK-8283328,5070501,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,hmeda,kcr,kcr,2022-03-17 08:28,2022-05-05 12:52,2023-10-01 09:56,2022-04-01 10:02,8,jfx17,,,,,,,,jfx19,javafx,,0,3rdparty,8bpr-critical-approved,sn_114,sn_115,,,,,,,,,,,,,,,"We currently use libxml2 version 2.9.12. We should update to the latest stable release, which is version 2.9.13.
",,,,,,,,,,,JDK-8285257,JDK-8285256,JDK-8284364,JDK-8285258,JDK-8284328,,,,,,,,,,,,,,,,,,,,,,,JDK-8275181,,,JDK-8286256,JDK-8269131,,,,,,JDK-8283958,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wdkj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-04-01 00:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/764
Date: 2022-03-31 14:47:32 +0000;;;","2022-04-01 10:02;dukebot;Changeset: b0f25212
Author:    Hima Bindu Meda <hmeda@openjdk.org>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2022-04-01 16:58:29 +0000
URL:       https://git.openjdk.java.net/jfx/commit/b0f2521219efc1b0d0c45088736d5105712bc2c9
;;;","2022-04-20 06:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/84
Date: 2022-04-20 13:21:39 +0000;;;","2022-04-20 06:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/41
Date: 2022-04-20 13:24:53 +0000;;;","2022-04-20 06:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/777
Date: 2022-04-20 13:29:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
US_ASCII decoder relies on String.decodeASCII being exhaustive,JDK-8283325,5070497,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,redestad,redestad,redestad,2022-03-17 07:15,2022-07-29 06:38,2023-10-01 09:56,2022-03-17 14:19,19,,,,,,,,,19,core-libs,,0,regression,tier1,tier2,,,,,,,,,,,,,,,,"https://bugs.openjdk.java.net/browse/JDK-8281146 changed String.decodeASCII to be implemented using StringCoding.countPositives, which due to issues with implementation complexity was implemented on aarch64 so that the intrinsic may return a value less than the actual leading positive bytes. 

This causes an issue in US_ASCII.Decoder.decodeArrayLoop which assumes that String.decodeASCII exhaustively decodes all bytes from the source. This is manifesting in our CI as an intermittent error in tools/javac/unicode/Unmappable.java. A simple fix is to ensure this assumption holds by adding a loop to drain any remaining ASCII bytes from the source array in String.decodeASCII. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281146,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wdjn:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3962510e,,,,,,,Verified,,"2022-03-17 07:22;dcubed;Bumping from P4 -> P2 since this is a regression.;;;","2022-03-17 07:26;dcubed;Here's a log file snippet for one of the sightings in jdk-19+15-878-tier1:

tools/javac/unicode/Unmappable.java 


----------direct:(11/695)----------
Unmappable.java:12:3: compiler.err.illegal.char.for.encoding: 20, ascii
Unmappable.java:12:12: compiler.err.illegal.char.for.encoding: 73, ascii
Unmappable.java:12:13: compiler.err.illegal.char.for.encoding: 20, ascii
Unmappable.java:12:14: compiler.err.illegal.char.for.encoding: 3D, ascii
Unmappable.java:12:15: compiler.err.illegal.char.for.encoding: 20, ascii
Unmappable.java:12:16: compiler.err.illegal.char.for.encoding: 22, ascii
Unmappable.java:12:17: compiler.err.illegal.char.for.encoding: 7A, ascii
Unmappable.java:12:18: compiler.err.illegal.char.for.encoding: E4, ascii
Unmappable.java:12:23: compiler.err.unclosed.str.lit
Unmappable.java:14:1: compiler.err.premature.eof
10 errors
result: Failed. Output does not match reference file: Unmappable.out, line 1;;;","2022-03-17 07:30;dcubed;java/nio/charset/coders/Errors.java

US-ASCII, I/O streams
  xyzzy -e-> xyzzy
  \\ud800x -e-> ?x
  \\udc00x -e-> ?x
  \\ud800\\udb00x -e-> ??x
  \\u0080 -e-> ?
  \\u0100 -e-> ?
  \\ud800\\udc00 -e-> ?
  \\uf000 -e-> ?
  \\ufffe -e-> ?
  \\uffff -e-> ?
  x\\x7fy -d-> x\\u007fy
  x\\x80y -d-> \\ufffd\\ufffdy
    ERROR: Mismatch at index 0, expected: x\\ufffdy
  \\xf0\\xf0 -d-> \\ufffd\\ufffd

<snip>

java.lang.Exception: Tests failed: 1
	at Errors.main(Errors.java:213)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.Exception: Tests failed: 1


sun/nio/cs/TestStringCoding.java

Testing(sm=true) TIS-620....done!
Testing(sm=true) US-ASCII....
----------System.err:(16/1359)----------
WARNING: A terminally deprecated method in java.lang.System has been called
WARNING: System::setSecurityManager has been called by TestStringCoding (file:/System/Volumes/Data/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S39444/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fbe5021a-956e-4286-a047-db3b356e73ab/runs/1ba9715f-88b4-4b37-837a-580ff2a947a7/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/classes/3/sun/nio/cs/TestStringCoding.d/)
WARNING: Please consider reporting this to the maintainers of TestStringCoding
WARNING: System::setSecurityManager will be removed in a future release
java.lang.RuntimeException: new String(csn) failed  -> US-ASCII
	at TestStringCoding.testNewString(TestStringCoding.java:182)
	at TestStringCoding.main(TestStringCoding.java:67)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException: new String(csn) failed  -> US-ASCII
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: new String(csn) failed -> US-ASCII
----------rerun:(39/5936)*----------


sun/nio/cs/FindDecoderBugs.java

-----
Results differ for direct buffers: US-ASCII
    ""??""[0/2] => MALFORMED[1] """"[0/19]
    ""??""[1/2] => MALFORMED[1] ""u????""[1/19] (direct)
failures=10000

Passed = 524020376, failed = 10000

----------System.err:(10/519)----------
java.lang.AssertionError: Some tests failed
	at FindDecoderBugs.main(FindDecoderBugs.java:448)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.AssertionError
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.AssertionError: Some tests failed
;;;","2022-03-17 09:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7855
Date: 2022-03-17 16:08:42 +0000;;;","2022-03-17 14:19;dukebot;Changeset: 002e3667
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2022-03-17 21:15:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/002e3667443d94e2303c875daf72cf1ccbbb0099
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
CLDRConverter run time increased by 3x,JDK-8283324,5070496,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,naoto,ihse,ihse,2022-03-17 07:07,2022-06-22 06:45,2023-10-01 09:56,2022-04-21 15:25,19,,,,,,,,,19,core-libs,,0,build-performance,cldr,noreg-build,,,,,,,,,,,,,,,,"Over the course of the last two years, we've seen a more than 25% regression in build time. I've tracked this down to a handful of individual changes.

On of them is JDK-8176706, which causes build time to go up with 21 seconds on my reference machine.

The sudden increase in build time caused by JDK-8176706 needs to be analyzed, to see if it is possible to avoid. 

This might (or might not) also be related to JDK-8282460, which tracks a microbenchmark performance regression of the JDK since JDK-8176706.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288979,,,,,,,,,,,,,JDK-8176706,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wdjf:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2022-03-23 04:44;ihse;I have analyzed this a bit further. The time it takes to run cldrconverter went from 8 to 23 seconds, on my machine. Since this is part of java.base-gensrc, it is on the ""long pole"" for basically anything you'd ever want to build (except hotspot).

I had a cursory look at the source code changed, but could not see any suspicious code that could account for this 300% increase in runtime. Perhaps there's just some stupid code that slipped in. But if the regression is caused by the tool actually having a lot more work to do, we might need to consider making it multithreaded, since this alone blocks the entire build from progressing.;;;","2022-03-23 05:23;naoto;Thanks [~ihse] for taking a stab at it. Some are expected as it is newly parsing CLDR xml sources that are not used before, but 300% increase is not expected. Will take a look.;;;","2022-04-20 16:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8288
Date: 2022-04-18 23:16:18 +0000;;;","2022-04-21 15:25;dukebot;Changeset: f6e9ca0c
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-04-21 22:23:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f6e9ca0cbe671502b6b3b1d0f8fd86f0928f64ea
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
libharfbuzz optimization level results in extreme build times,JDK-8283323,5070495,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-03-17 07:02,2022-12-12 06:47,2023-10-01 09:56,2022-03-24 02:50,11,17,18,19,,,,,,19,infrastructure,,0,build-performance,harfbuzz,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sap-interest,,,,,,,,"Over the course of the last two years, we've seen a more than 25% regression in build time. I've tracked this down to a handful of individual changes.

On of them is JDK-8247872, which causes build time to go up with 24 seconds on my reference machine.

The sudden increase in build time caused by JDK-8247872 needs to be analyzed, to see if it is possible to avoid. ",,,,,,,,,,,JDK-8286751,JDK-8286738,JDK-8298581,JDK-8298577,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8247872,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wdj7:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-03-17 12:40;prr;What platform ? Or more precisely what tool chain ?
This is almost certainly an issue with the slowness of a particular C++ compiler when using C++11 features. I don't see what we can do about it on the JDK side.;;;","2022-03-17 12:41;prr;We don't use the regression label for build performance - or we should not.
I expect that this will get closed out as something like ""external"".;;;","2022-03-17 16:18;ihse;Sorry for lack of relevant information. This is on linux-x64, so using gcc. 

I'm not fully convinced this is just due to longer compilation times of the actual 3rd party code. We might be doing something stupid in how we integrate this into our build.

I'll try to look into it to see if I can figure out what's going on.;;;","2022-03-18 02:00;ihse;This does indeed seem to be the building of libharfbuzz. The time to build it goes from 16 to 34 seconds with this change.

I'll consider this a build issue and change component.;;;","2022-03-18 16:29;prr;As I implied harfbuzz 2.5 and later uses C++ 11 features.
The referenced fix upgraded JDK from using 2.3.1 to 2.7.2.
Other than making g++ much faster for C++ 11 mode what could possibly help ?
You can't depend on the system version, because we need a version much much later than you can expect to find on most Linux distros. And that would only help Linux anyway.
And separating the harfbuzz library from libfontmanager already had to be backed out so that adds to the complication of using a system version;;;","2022-03-21 01:59;ihse;I'm not sure what can help, but I have confirmed that building harfbuzz 2.7.2 directly from their github repo is much faster than when building it in the JDK. I'm still trying to analyze exactly what the difference is. I'll report back here when I know more.;;;","2022-03-21 04:06;ihse;I found the culprit.

LIBFONTMANAGER_OPTIMIZATION := HIGHEST

For some reason, the optimization attempt sends gcc spinning. harfbuzz's official build system compiles the library without any optimization whatsoever. If they had not done that, they might have been interested in trying to figure out what parts of their code that is so inimical to optimization. :-(

When tweaking this to use SIZE instead (often the second-best alternative to get actual optimizations), build times dropped from 37 seconds to 23. 

If the current ""HIGHEST"" level was just set as a assumed proper default, I propose we just change it to ""SIZE"". If there were any actual performance measurement behind this optimization level, I think we need to revisit them and make sure that we still really think they are worth the cost.;;;","2022-03-21 04:40;ihse;I've checked this on Windows and macOS as well. On Windows, there is no significant difference at all between optimization levels. For macOS (that is: clang), there is a difference, but it is not at all as pronounced as for gcc, going from 49 seconds to 62 (on my much slower reference Mac). This is a build speed regression of ~25%, compared to the 60% regression on gcc. It's bad, but not catastrophic.

My proposal would be to change the optimization level for gcc only, and to keep track of the viability of changing the optimization level with future updates of libharfbuzz, in case they fix their code.
;;;","2022-03-23 05:11;ihse;Doing some code archaeology: the current level HIGHEST was introduced in JDK-8255790, which were really about moving libharfbuzz compilation back into libfontmanager. I could find no comments/discussion relating to the change of optimization level, so I assume it was incidental, and just seemed good at the time.

I'll go ahead and create a PR to drop down the optimization level. I have no clue how we should even try to measure if it actually affects anything... I'm assuming not, since the official distribution of harfbuzz builds without optimization, which is an indication that they don't think it makes any difference.;;;","2022-03-23 05:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7919
Date: 2022-03-23 12:25:08 +0000;;;","2022-03-24 02:50;dukebot;Changeset: 2c43ecb4
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-03-24 09:49:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2c43ecb43fa3c94b69478039f1cd70ed4a577768
;;;","2022-05-10 13:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1077
Date: 2022-05-09 21:42:52 +0000;;;","2022-05-11 06:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/392
Date: 2022-05-11 13:37:00 +0000;;;","2022-05-11 07:00;mdoerr;Fix Request (17u):
Older JDK releases can also benefit from this change: saves some build time and makes the libfontmanager.so a bit smaller. Helps xlc 16 on AIX which had shown crashes when building harfbuzz with the highest optimization levels. Low risk because it only changes optimization level of files which are not used by the JDK. Applies cleanly.;;;","2022-05-11 10:27;tsteele;Fix Request 11u:

This request is part of the effort to bring support for xlc 16 to jdk11. The backport does not apply cleanly because the path of the changed file is not the same. Otherwise the changes are identical. Approved by Martin. Risk is low.;;;","2022-12-12 05:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/443
Date: 2022-12-12 12:54:11 +0000;;;","2022-12-12 05:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/316
Date: 2022-12-12 12:58:49 +0000;;;","2022-12-12 05:28;yan;Fix request (13u, 15u)
almost clean backport giving some visible build improvement. In 13u, Awt2dLibraries.gmk is in the old location.;;;",,,,,,,,,,,,
Error message for Windows libraries always points to --with-msvcr-dll no matter the actual file name,JDK-8283320,5070490,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2022-03-17 06:13,2022-03-23 17:42,2023-10-01 09:56,2022-03-17 08:33,,,,,,,,,,19,infrastructure,,0,,,,,,,,,,,,,,,,,,,"TOOLCHAIN_SETUP_MSVC_DLL always points to --with-msvcr-dll if it couldn't find the requested file, even if the dll being searched for was msvcp.dll for instance. This small patch fixes the potentially confusing advice to point to the correct options",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wdi3:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-03-17 06:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7853
Date: 2022-03-17 13:11:19 +0000;;;","2022-03-17 08:33;dukebot;Changeset: 0f1766df
Author:    Julian Waters <jwaters@openjdk.org>
Committer: Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-03-17 15:30:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0f1766dff633e55532d94069d7266a7fe625286c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Videos with unusual sizes cannot be played on windows,JDK-8283318,5070409,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,webbuggrp,webbuggrp,2022-03-16 03:16,2022-05-17 11:46,2023-10-01 09:56,2022-05-06 14:05,jfx11,jfx17,jfx18,,,,,,,jfx19,javafx,,0,additional-information-received,dcspn,reproducer-yes,sn_116,sn_117,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10 21H1, JDK jdk-17.0.2 x64, JFX 17.0.2

A DESCRIPTION OF THE PROBLEM :
Some of the screen capture videos which we produce cannot be played in JavaFX-based players on windows. The issue appears to depend on the video size. Since we are recording screen capture, we cannot pick a ""nice and clean"" video size, it has to match the screen resolution.

I have tracked it down to a handler for a recoverable DirectShow error in modules/javafx.media/src/main/native/gstreamer/plugins/dshowwrapper/dshowwrapper.cpp. That handler is enabled only ""if ((width < height) || (width > 1920 && height > 1080))"", but we seem to require it for smaller and non-portrait videos too. I have built my own version of JavaFX module where the handler was always enabled, which has resolved the problem.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Play the video at 
<link>
with any JavaFX player, eg. the simplistic one attached here.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The window opens and the video is played back inside it.
ACTUAL -
No errors, but no video either, just a blank window.

---------- BEGIN SOURCE ----------
import java.io.File;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

import javafx.beans.binding.Bindings;
import javafx.beans.property.DoubleProperty;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;

public class FXPlayer extends Application {

    @Override
    public void start(Stage stage) {
        File videoFile = new File( FXPlayer.args[0] );


        MediaView mediaView = new MediaView();
        DoubleProperty width = mediaView.fitWidthProperty();
        DoubleProperty height = mediaView.fitHeightProperty();
        width.bind( Bindings.selectDouble( mediaView.sceneProperty(), ""width"" ) );
        height.bind( Bindings.selectDouble( mediaView.sceneProperty(), ""height"" ) );
        mediaView.setPreserveRatio( true );

        MediaPlayer mediaPlayer = new MediaPlayer( new Media( videoFile.toURI().toString() ) );
        mediaPlayer.setMute( true );
        mediaView.setMediaPlayer( mediaPlayer );
        mediaPlayer.play();

        StackPane root = new StackPane();
        root.getChildren().add( mediaView );
        
        Scene scene = new Scene(root, 640, 480);
        stage.setScene(scene);
        stage.show();
    }

    private static String[] args;
    
    public static void main(String[] args) {
        if ( args.length < 1 ) {
            return;
        }
        FXPlayer.args = args;
        launch();
    }

}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-03-17 05:37;pnarayanaswa;FXPlayer.java;https://bugs.openjdk.org/secure/attachment/98316/FXPlayer.java","2022-03-17 05:37;pnarayanaswa;From_submitter.mp4;https://bugs.openjdk.org/secure/attachment/98315/From_submitter.mp4","2022-03-17 11:27;pnarayanaswa;notepad_capture_1900x1088.mp4;https://bugs.openjdk.org/secure/attachment/98322/notepad_capture_1900x1088.mp4","2022-03-17 11:27;pnarayanaswa;notepad_capture_1902x1090.mp4;https://bugs.openjdk.org/secure/attachment/98323/notepad_capture_1902x1090.mp4","2022-03-17 05:37;pnarayanaswa;one_video.mp4;https://bugs.openjdk.org/secure/attachment/98317/one_video.mp4","2022-03-17 05:37;pnarayanaswa;two_video.mp4;https://bugs.openjdk.org/secure/attachment/98318/two_video.mp4",,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,"0|i2wd03:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2022-03-17 05:38;pnarayanaswa;Checked with attached testcase in Windows 10, issue was not reproducible (mp4 file with Frame Width*Frame Height(960 * 540) and (480*640), <attached mp4 file>

Test Result
=========
8u321: Pass
openjfx11: Pass
openjfx17: Pass
openjfx18ea10: Pass

where as submitter shared mp4 file(From_submitter.mp3, Frame Width*Frame Height(1706 * 854)) which didn't render video in openjfx11, 17 and 18ea.

Mail to submitter:
=============
Issue could not be reproduced with other mp4 file (mp4 file with Frame Width*Frame Height(960 * 540), (480*640))
but mp4 file( from the link mentioned Frame Width*Frame Height(1706 * 854)) in the description wasn't rendering the video.

Please correct if any step is missed.;;;","2022-03-17 11:27;pnarayanaswa;Additional information from submitter:
===========================
The issue occurs only for videos of certain sizes. We have produced a number of videos of different dimensions, and some of these were playing correctly, while others didn't. However, we could not find any pattern to it, ie. no way of predicting which sizes will not work. The only thing to note is that the ""nice"", round numbers (like eg. the ones you mentioned) always work. Thus, you will not be able to reproduce the problem using the example videos you attached. Virtually all example mp4 videos on the web use such sizes too.
 
As an example, I have resized the video which I have previously attached with
ffmpeg, eg.:

ffmpeg -i notepad_capture.mp4 -vf scale=1900:1088 -profile:v main notepad_capture_1900x1088.mp4
ffmpeg -i notepad_capture.mp4 -vf scale=1902:1090 -profile:v main notepad_capture_1902x1090.mp4
The first video is playable with a JavaFX player, the second is not.

;;;","2022-04-19 15:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/775
Date: 2022-04-19 22:38:13 +0000;;;","2022-05-06 14:05;dukebot;Changeset: ee7f23d5
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-05-06 21:02:15 +0000
URL:       https://git.openjdk.java.net/jfx/commit/ee7f23d562ebb46ddcfdeff42d1f1855d60f7a65
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
jrt-fs.jar not always deterministically built,JDK-8283315,5070487,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aleonard,aleonard,aleonard,2022-03-17 03:30,2022-05-27 08:29,2023-10-01 09:56,2022-03-18 06:42,19,,,,,,,,,19,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,reproducible-build,,,,,,,,,,,,,,,,"jrt-fs.jar builds identically if built on the exact same physical machine, but if for example it is built on an Intel architecture xLinux machine and then the same source on an AMD architecture machine, it is always different.
Eg.Diff of same jdk-19 source built on an Intel vs AMD:
anleonar@anleonar-mac Downloads % diff -r jdk1 jdk2
Binary files jdk1/jdk-19+14/jmods/java.base.jmod and jdk2/jdk-19+14/jmods/java.base.jmod differ
Binary files jdk1/jdk-19+14/lib/jrt-fs.jar and jdk2/jdk-19+14/lib/jrt-fs.jar differ
Binary files jdk1/jdk-19+14/lib/server/classes_nocoops.jsa and jdk2/jdk-19+14/lib/server/classes_nocoops.jsa differ
diff -r jdk1/jdk-19+14/release jdk2/jdk-19+14/release
15c15
< BUILD_INFO=""OS: Linux Version: 5.8.0-34-generic""
---
> BUILD_INFO=""OS: Linux Version: 5.8.0-43-generic""
",,,,,,,,,,,JDK-8287444,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2wdhf:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-03-17 03:51;ihse;Ohh...! That's an interesting, and disconcerting, find.

Can you check what's different? If you unzip the files, are the contents identical? ;;;","2022-03-17 03:59;aleonard;Yes, the individual file .class contents are identical, but the problem is the jar zip contents ordering.
I have a fix on its way..
jdk1:
﻿﻿Archive:  jdk1/jdk-19+14/lib/jrt-fs.jar
  Length      Date    Time    Name
---------  ---------- -----   ----
        0  09-20-2022 00:00   META-INF/
      305  09-20-2022 00:00   META-INF/MANIFEST.MF
     5065  09-20-2022 00:00   jdk/internal/jimage/ImageStream.class
     2427  09-20-2022 00:00   jdk/internal/jimage/ImageReader$Directory.class
     2036  09-20-2022 00:00   jdk/internal/jimage/ImageReader$Resource.class
    14875  09-20-2022 00:00   jdk/internal/jimage/BasicImageReader.class
     1411  09-20-2022 00:00   jdk/internal/jimage/ImageBufferCache$2.class
...

jdk2:
Archive:  jdk2/jdk-19+14/lib/jrt-fs.jar
  Length      Date    Time    Name
---------  ---------- -----   ----
        0  09-20-2022 00:00   META-INF/
      305  09-20-2022 00:00   META-INF/MANIFEST.MF
     2816  09-20-2022 00:00   jdk/internal/jrtfs/JrtFileStore.class
     6250  09-20-2022 00:00   jdk/internal/jrtfs/JrtFileAttributeView.class
     3347  09-20-2022 00:00   jdk/internal/jrtfs/JrtFileAttributes.class
     9429  09-20-2022 00:00   jdk/internal/jrtfs/ExplodedImage.class
     1793  09-20-2022 00:00   jdk/internal/jrtfs/JrtFileAttributeView$AttrID.class
...
;;;","2022-03-17 04:00;aleonard;Different CPU architectures, eg.Intel vs AMD can produce different file system query ordering at a low level.;;;","2022-03-17 04:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7852
Date: 2022-03-17 11:09:24 +0000;;;","2022-03-17 04:26;ihse;I've thought more than once that we would really need to randomize file order to quickly provoke hidden bugs like this. 

I vaguely remember reading about a FUSE filesystem overlay that would do this, but I can't remember now what it was called, and can't find it on Google. I neither don't remember why I thought we could not use it to fuzz up the build; maybe it was just us lacking man power at the time.

Edit: Found it! Disorderfs -- https://salsa.debian.org/reproducible-builds/disorderfs;;;","2022-03-17 04:37;aleonard;Yes, i've come across the difference between Intel and AMD before, so I do my reproducible compares between these two machines to help detect these issues.;;;","2022-03-18 06:42;dukebot;Changeset: 85cc6f14
Author:    Andrew Leonard <aleonard@openjdk.org>
Date:      2022-03-18 13:40:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/85cc6f1440aa7e073cab894cb9a72d9eed4e8369
;;;","2022-05-26 04:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/411
Date: 2022-05-23 14:29:10 +0000;;;","2022-05-26 06:05;aleonard;Fix Request 17u
Backport the patch to allow reproducibility of the generation of jrt-fs.jar, which 
needs jar entry sorting to ensure a deterministic jar.
Applies cleanly.
Tested successfully.
;;;",,,,,,,,,,,,,,,,,,,,,
re-resolving indirect call to non-entrant nmethod can crash,JDK-8283306,5070476,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dlong,dnsimon,dnsimon,2022-03-17 01:42,2022-05-17 00:28,2023-10-01 09:56,2022-05-05 14:31,19,,,,,,,,,19,hotspot,,0,graal,jdk11-graalvm,jdk17-graalvm,noreg-hard,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,"In SharedRuntime::reresolve_call_site, it is possible for an indirect (i.e. vtable dispatch) call site to be incorrectly decoded as a direct call site on x86 as the decoding blindly inspects the 5th byte prior to the return address. If it is 0xE8 (i.e. opcode of a direct call on x86), then it is determined to be a direct call. However, it could be that there is a 2- or 3-byte indirect call instruction preceded by some other instruction that happens to have 0xE8 at the relevant position. Apparently C1 and C2 never emit such sequences but we're seeing that in rare situations, Graal does. This results in the following crash:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (nativeInst_x86.cpp:290), pid=19, tid=0x00007f410b0f4700
#  guarantee(is_aligned, ""destination must be aligned"");

This can be avoided by making reresolve_call_site double check that there is a reloc info of type relocInfo::static_call_type, relocInfo::virtual_call_type or relocInfo::opt_virtual_call_type at the decoded call address. If there's no reloc info, it must be an indirect call and thus call patching is not done.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276314,JDK-8283056,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wdez:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-17 06:13;chagedorn;ILW = Crash with guarantee when decoding a call site wrongly, rare and only observed with Graal, disable compilation of affected method? = HLM = P3;;;","2022-05-04 00:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8528
Date: 2022-05-04 07:47:28 +0000;;;","2022-05-05 14:31;dukebot;Changeset: 6d7e4461
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-05-05 21:28:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6d7e4461620866992975eb9d5de1519e558de7da
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Thread dump prints ""Carrying virtual thread"" twice",JDK-8283297,5070467,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rpressler,alanb,alanb,2022-03-17 01:13,2022-03-18 12:38,2023-10-01 09:56,2022-03-18 12:38,repo-loom,,,,,,,,,,hotspot,,0,,,,,,,,,,,,,,,,,,,"
Markus spotted that the thread dump may print the message twice, e.g.

""ForkJoinPool-1-worker-9"" #106 [35696] daemon prio=5 os_prio=0 cpu=449015.63ms elapsed=1390.99s tid=0x0000026ca032c030  [0x000000c82ddfe000]
   Carrying virtual thread #3070235
Thread: 0x0000026ca032c030  [0x8b70] State: _at_safepoint _at_poll_safepoint 0
   Carrying virtual thread #3070235
   JavaThread state: _thread_blocked
	at jdk.internal.vm.Continuation.run(java.base/Continuation.java:271)
	at java.lang.VirtualThread.runContinuation(java.base/VirtualThread.java:217)
	at java.lang.VirtualThread$$Lambda$124/0x0000000080136358.run(java.base/Unknown Source)
	at java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(java.base/ForkJoinTask.java:1428)
	at java.util.concurrent.ForkJoinTask.doExec(java.base/ForkJoinTask.java:373)
	at java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(java.base/ForkJoinPool.java:1191)
	at java.util.concurrent.ForkJoinPool.scan(java.base/ForkJoinPool.java:1634)
	at java.util.concurrent.ForkJoinPool.runWorker(java.base/ForkJoinPool.java:1601)
	at java.util.concurrent.ForkJoinWorkerThread.run(java.base/ForkJoinWorkerThread.java:167)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wdcz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-18 12:38;rpressler;Fixed by https://git.openjdk.java.net/loom/commit/c512d9268cc331f0edba42e75450a7ce7245f8bc;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Rename CheckPoint,JDK-8283289,5070451,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,egahlin,egahlin,2022-03-16 14:41,2022-03-23 17:42,2023-10-01 09:56,2022-03-18 06:31,19,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,"Code related to checkpoint events should be spelled ""checkpoint"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283378,JDK-8283377,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wd9f:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-03-16 16:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7847
Date: 2022-03-16 21:44:03 +0000;;;","2022-03-18 06:31;dukebot;Changeset: c72bcfc1
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-03-18 13:27:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c72bcfc1b230d22137ac7f683cf46dc70b6e3d16
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[LOOM] vmTestbase/nsk/jdi/StackFrame/_bounds_/bounds002 is sometimes failing in vthread mode,JDK-8283288,5070450,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2022-03-16 14:39,2022-03-18 23:36,2023-10-01 09:56,2022-03-18 23:36,repo-loom,,,,,,,,,repo-loom,core-svc,,0,noreg-self,,,,,,,,,,,,,,,,,,"This is a test that was recently modified to expect OpaqueFrameException from JDI, since it uses underlying debugging functionality that is not supported for vthreads (setting a local on a frame that is not the topmost frame). Changing it to expect OpaqueFrameException allows the test to pass, and it was also removed from the problem list at the time:

https://github.com/openjdk/loom/commit/6a9145b68e691853c7eeddb6409409137cde7b7b

This is the failure:

setValue(variable, null)
# ERROR: debugger FAILURE> Expected OpaqueFrameException
The following stacktrace is for failure analysis.
nsk.share.TestFailure: debugger FAILURE> Expected OpaqueFrameException
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.jdi.StackFrame._bounds_.bounds002.complain(bounds002.java:68)
	at nsk.jdi.StackFrame._bounds_.bounds002.execTest(bounds002.java:192)
	at nsk.jdi.StackFrame._bounds_.bounds002.run(bounds002.java:86)
	at nsk.jdi.StackFrame._bounds_.bounds002.main(bounds002.java:72)

The reason this is expected to result in OpaqueFrameException is because StackFrame.setValue() is called on the debuggee main() method, and the debuggee is expected to be blocked on the pipe.readln() call that is made from main(), thus main() is expected to not be the topmost frame. However, it's possible that after initially suspending the debuggee, main() has not yet made it as far as the pipe.readln() call, so it is actually safe to set a local in the main() method.

There is a loop at the top of the test that looks for main() in the stack trace. It should also be able to determine if main() is the topmost frame or not, and then adjust the test's expectations based on that.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wd97:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-03-18 23:36;cjplummer;Fixed in the loom repo by https://github.com/openjdk/loom/commit/6d31fb137069c1fe7b15c9546cf8756561c4ca5a;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassLoader.c cleanups,JDK-8283287,5070449,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tsteele,tsteele,tsteele,2022-03-16 14:22,2022-03-23 17:43,2023-10-01 09:56,2022-03-19 00:10,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,"I noticed some older-style code in ClassLoader.c while working on another issue. It's starting to feel like spring where I am, and I'd like to do a little tidying.

Suggested changes:

- Alphabetize includes
- Change instances of 'if (ptr == 0)' to 'if (ptr == NULL)'
- Change instances of 'return 0' to 'return NULL'
- Wrap the bodies of if statements in curly-braces.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wd8z:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ae6d091,,,,,,,,,"2022-03-16 14:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7846
Date: 2022-03-16 21:25:37 +0000;;;","2022-03-19 00:10;dukebot;Changeset: 3e58a438
Author:    Tyler Steele <tyler.steele@ibm.com>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-03-19 07:06:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3e58a438e9051d4c976273eea35e36d37d5428c3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Virtual threads don't correctly maintain the stack reserve zone ,JDK-8283286,5070448,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,dlong,rpressler,rpressler,2022-03-16 14:03,2022-04-14 08:24,2023-10-01 09:56,2022-04-14 08:24,repo-loom,,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,"If a virtual thread parks while inside a method annotated with @ReservedStackAccess, the state of the stack guard is not cleared, and isn't reestablished when the thread remounts.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wd8r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-14 08:24;rpressler;Disabled reserved stack area in virtual threads:

https://git.openjdk.java.net/loom/commit/4c54c53e9f113c262203e330775c95e1123b23b5;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Testbug] Improve TestGetSwapSpaceSize,JDK-8283279,5070440,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,sgehwolf,sgehwolf,2022-03-16 11:44,2022-08-02 11:13,2023-10-01 09:56,2022-03-23 08:02,,,,,,,,,,19,core-svc,,0,docker,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,"JDK-8242480 introduced a test for verifying that swap space size doesn't become negative. The premise is that if --memory and --memory-swap are set to the same value (i.e. no swap), the OperatingSystemMXBean should not return negative values.

However the test might spuriously pass if, for some reason, the host values get returned by the OperatingSystemMXBean. Since the test always runs in a container environment this should not happen and the test should fail.

The test needs to get improved to fail if some strange swap sizes are being returned. E.g. --memory X --memory-swap X, but OperatingSystemMXBean.getTotalSwapSpaceSize > 0.",,,,,,,,,,,JDK-8284513,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8242480,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2wd6z:",9223372036854775807,b16,,,,,,,,,,,"2022-03-17 06:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7854
Date: 2022-03-17 13:40:53 +0000;;;","2022-03-23 08:02;dukebot;Changeset: a7716006
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-03-23 15:00:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a77160065bb6f62314711514f7694fe50f0dc35b
;;;","2022-04-06 06:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/339
Date: 2022-04-06 12:53:57 +0000;;;","2022-04-06 08:55;sgehwolf;Fix Request (OpenJDK 17u):

Please approve backporting this test-only fix to 17u. The test might spuriously pass earlier if pre-condition isn't met. This is now asserted. Should be low risk as it is a test-only change. Container tests continue to pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
ISO 4217 Amendment 171 Update,JDK-8283277,5070438,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,naoto,naoto,naoto,2022-03-16 11:06,2023-04-17 06:48,2023-10-01 09:56,2022-03-21 08:34,,,,,,,,,,19,core-libs,,0,CPU22_10-critical-approved,CPU22_10-critical-SQE-OK,iso4217,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,"The Sierra Leonean LEONE (SLL) is redenominated by removing three (3) zeros from the
denominations. A new currency code SLE/925 representing the new valuation
(1’000 times old SLL/694) is introduced on 1st April 2022 for any internal needs during the
redenomination process, and is replacing SLL as the official currency code, after the transition
period to be determined.
During this transition period, both the old Leone and new Leone will be in physical circulation
for at least 90 days.
The Bank of Sierra Leone will adopt the new code in the local system but SLL/694 shall
remain in use until further notice.
The Sierra Leonean currency shall continue to be the LEONE and this will not change
after redenomination.",,,,,,,,,,,JDK-8291811,JDK-8291115,JDK-8292400,JDK-8306097,JDK-8292012,JDK-8291817,JDK-8290771,JDK-8291529,JDK-8292013,JDK-8299654,JDK-8300349,JDK-8291773,JDK-8292399,JDK-8291123,JDK-8291784,,,,,,,,,,,,,,,,,,,,,,,JDK-8289549,,,,,,JDK-8291062,,,,,,"2022-03-16 11:09;naoto;dl_currency_iso_amendment_171.pdf;https://bugs.openjdk.org/secure/attachment/98304/dl_currency_iso_amendment_171.pdf",,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wd6j:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,Verified,,"2022-03-17 11:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7857
Date: 2022-03-17 18:10:17 +0000;;;","2022-03-21 08:34;dukebot;Changeset: c4dc58e1
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-03-21 15:33:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c4dc58e12e197562dce90c0027aa74c29047cea6
;;;","2022-08-03 13:44;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
A recurring update we should take.
Clean backport.
SAP nightly testing passed.;;;","2022-08-03 15:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/626
Date: 2022-08-03 20:43:40 +0000;;;","2022-08-03 15:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1310
Date: 2022-08-03 20:43:10 +0000;;;","2022-08-04 07:03;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
A recurring update we should take. 
Clean backport except for resolving the @bugs in one of the tests.
SAP nightly testing passed.;;;","2022-08-15 07:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/253
Date: 2022-08-15 14:07:28 +0000;;;","2022-08-15 07:18;yan;Fix request (13u, 15u):

regular (someway belated here) change for every release train.
Not formally clean backport: different lists of bugs in the tests. All currency, resources tests run fine.;;;","2022-08-15 07:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/387
Date: 2022-08-15 14:20:13 +0000;;;","2022-12-02 05:36;dcherepanov;Fix request (8u)
requesting backport for parity with Oracle's jdk8u. Pull request (reviewed by Paul): https://github.com/openjdk/jdk8u-dev/pull/202 ;;;","2022-12-02 05:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/202
Date: 2022-12-02 13:33:24 +0000;;;",,,,,,,,,,,,,,,,,,,
java/io/ObjectStreamClass/ObjectStreamClassCaching.java fails with various GCs,JDK-8283276,5070437,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,plevart,shade,shade,2022-03-16 10:27,2023-08-09 09:50,2023-10-01 09:56,2022-08-04 06:30,17,19,20,,,,,,,20,core-libs,,0,amazon-interest,hgupdate-sync,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,redhat-interest,testbug,,,,,,,,,,,,"Test passes fine with G1. But it fails with other GCs, for example Parallel, Shenandoah, etc:

$ CONF=linux-x86_64-server-fastdebug make test TEST=java/io/ObjectStreamClass/ObjectStreamClassCaching.java TEST_VM_OPTS=""-XX:+UseParallelGC""

test ObjectStreamClassCaching.testCacheReleaseUnderMemoryPressure(): success
test ObjectStreamClassCaching.testCachingEffectiveness(): failure
java.lang.AssertionError: Cache lost entry although memory was not under pressure expected [false] but found [true]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertFalse(Assert.java:67)

This is probably because System.gc() request in the test is handled by different GCs differently.

In fact, the test fails with G1 if we do a second System.gc() in this test. So the test itself is flaky. We should probably stop doing GCs altogether there. ",,,,,,,,,,,JDK-8292129,JDK-8291910,JDK-8314057,JDK-8292151,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277072,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wd6b:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7e74daa7,,,,,,,,,"2022-03-16 10:31;shade;Roman, please take a look?;;;","2022-06-15 23:29;shade;This test keeps failing for me in testing, taking over.;;;","2022-06-15 23:30;shade;In fact, the test fails with G1 if we do a second System.gc() in this test. So the test itself is flaky. We should probably stop doing GCs altogether there.;;;","2022-06-16 01:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/27
Date: 2022-06-16 08:08:15 +0000;;;","2022-07-18 00:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9533
Date: 2022-07-18 07:40:53 +0000;;;","2022-07-29 02:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9684
Date: 2022-07-29 09:05:53 +0000;;;","2022-08-04 06:30;dukebot;Changeset: d4a795d7
Author:    Peter Levart <plevart@openjdk.org>
Date:      2022-08-04 13:25:15 +0000
URL:       https://git.openjdk.org/jdk/commit/d4a795d75aef8d787934f5c05e146c61138a408a
;;;","2022-08-04 06:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/162
Date: 2022-08-04 13:38:08 +0000;;;","2022-08-04 20:55;dukebot;Changeset: 4b3dfe1d
Author:    Peter Levart <plevart@openjdk.org>
Date:      2022-08-04 16:53:57 +0000
URL:       https://git.openjdk.org/jdk/commit/4b3dfe1d22f7fed8a408ee50343d52cf1ac481ef
;;;","2023-08-07 18:36;serb;Fix request (17u)

Clean backport. The fix for a tesbug..

Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/1645;;;","2023-08-07 18:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1645
Date: 2023-08-08 00:27:51 +0000;;;",,,,,,,,,,,,,,,,,,,
[11u] broken JRT_ENTRY_NO_ASYNC after Backport of JDK-8253795,JDK-8283270,5070430,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mdoerr,mdoerr,2022-03-16 08:36,2022-03-23 02:13,2023-10-01 09:56,2022-03-17 02:37,11.0.15,11.0.16,,,,,,,,11.0.15,hotspot,,0,17-na,19-na,intermittent,jdk11u-critical-request,jdk11u-critical-yes,openjdk,,,,,,,,,,,,,"""runtime/Thread/StopAtExit.java"" fails intermittently with ""exception oop already set"" since backport of JDK-8253795 (commit https://github.com/openjdk/jdk11u-dev/commit/eb0708f75aa3c196e41014addfaa5667fd940cc2 ).

JRT_ENTRY_NO_ASYNC was changed to use ThreadInVMfromJava (instead of ThreadInVMfromJavaNoAsyncException) which causes async Exceptions (ThreadDeath) to show up at places where we can't handle them (e.g. forward_exception Runtime1 stub).
"," 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281830,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wd4r:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-16 09:02;mdoerr;Fix Request (11u):
Bug was introduced in 11.0.15. Fix is trivial: Restore behavior of JRT_ENTRY_NO_ASYNC before incorrect JDK-8253795 backport. https://github.com/openjdk/jdk11u/pull/31
Nightly tests have passed.;;;","2022-03-16 09:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u/pull/31
Date: 2022-03-16 15:59:14 +0000;;;","2022-03-16 09:51;sgehwolf;In later JDKs 'ThreadInVMfromJava __tiv(current, false /* check asyncs */);' is being used. The extra async check argument has been introduced with JDK-8263191 (JDK 17+), thus a 11u specific bug.;;;","2022-03-17 02:37;roboduke;Changeset: 3a0074c0
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-03-17 09:35:41 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/3a0074c05f9f6da287db9772fa1fe96ec79cf4a7
;;;","2022-03-23 02:13;roboduke;Changeset: 3a0074c0
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-03-17 09:35:41 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/3a0074c05f9f6da287db9772fa1fe96ec79cf4a7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Improve definition and use of jdk.javadoc.internal.doclets.toolkit.Content,JDK-8283269,5070428,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-03-16 08:26,2022-04-06 23:59,2023-10-01 09:56,2022-04-01 06:09,19,,,,,,,,,19,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284179,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wd4b:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-03-25 07:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7843
Date: 2022-03-16 16:32:09 +0000;;;","2022-04-01 06:09;dukebot;Changeset: dbfac3c9
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-04-01 13:05:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dbfac3c99c749d3dab56559644e6c1bc17160ca8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
gcc is not supported on mac,JDK-8283260,5070418,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-03-16 06:12,2022-03-23 17:41,2023-10-01 09:56,2022-03-16 09:10,19,,,,,,,,,19,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,Nowadays only clang is available as compiler for macOS. We should remove remnants of the gcc support.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wd23:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-03-16 06:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7841
Date: 2022-03-16 13:14:39 +0000;;;","2022-03-16 09:09;dukebot;Changeset: 9b8afce3
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-03-16 16:07:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9b8afce3791080d664c5051a86592706f5b0ade0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove redundant class jdk/internal/agent/spi/AgentProvider,JDK-8283254,5070411,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2022-03-16 03:53,2022-03-23 17:47,2023-10-01 09:56,2022-03-23 04:04,,,,,,,,,,19,core-svc,,0,,,,,,,,,,,,,,,,,,,"There are no uses of jdk/internal/agent/spi/AgentProvider, since the SNMP agent was removed ( 8071367 ).

Remove src/jdk.management.agent/share/classes/jdk/internal/agent/spi/AgentProvider.java
Remove import from src/jdk.management.agent/share/classes/jdk/internal/agent/Agent.java
Remove uses from src/jdk.management.agent/share/classes/module-info.java

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wd0j:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2022-03-22 14:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7912
Date: 2022-03-22 21:19:20 +0000;;;","2022-03-23 04:04;dukebot;Changeset: 61d7d868
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2022-03-23 11:03:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/61d7d868db030d878f4a1c4467075e8d4e116a6e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CompressedClassPointers.java fails on ppc with 'Narrow klass shift: 0' missing,JDK-8283249,5070404,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-03-16 02:21,2023-09-26 07:27,2023-10-01 09:56,2022-03-22 23:48,17,19,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,oraclejdk-na,,,,,,,,,,,,,,,,"These tests are highly vulnerable against ASLR. On PPCLE, we apparently don't manage to map the heap into the lower 4G region, therefore CCS does not live there either.

The test requires for ""-UseCompressedOops -Xshare:off"" and a heap size of 128m and a ccs size of 1G ccs to live in the lower 4G. That is an optimistic assumption.

The VM attaches instead CCS to 0x100000000 (4GB) and calculates Narrow Base/Shift as 0/3, which is totally correct.

As a stop-gap measure, the test should be less strict for PPC. 

A future solution would be to revise this test.",,,,,,,,,,,JDK-8284174,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299387,JDK-8241825,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,"0|i2wcyz:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-17 00:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7837
Date: 2022-03-16 09:43:16 +0000;;;","2022-03-22 23:48;dukebot;Changeset: 58487ddc
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-03-23 06:46:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/58487ddc170f73123668f29c99097b16ba84aa9b
;;;","2022-03-31 22:50;stuefe;Fix Request 17u:

Work around for sporadic errors on ppc. Low risk, applies cleanly.;;;","2022-03-31 22:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/330
Date: 2022-04-01 05:50:38 +0000;;;","2022-12-28 00:18;mbaesken;The test still fails sometimes on Linux ppc64le :

java.lang.RuntimeException: 'Narrow klass shift: 0' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at CompressedClassPointers.largeHeapAbove32GTest(CompressedClassPointers.java:130)

Looks like largeHeapAbove32GTest() should be adjusted too for ppc64le in the same way 8283249 adjusted two other checks.
https://bugs.openjdk.org/browse/JDK-8299387  opened.;;;","2023-09-26 07:27;goetz;JDK-8241825 introduced the failing subtest in jdk15.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Create a test for JDK-4670319,JDK-8283245,5070395,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-03-16 00:06,2022-08-03 11:45,2023-10-01 09:56,2022-04-11 21:23,11,17,18,19,8,,,,,19,client-libs,,0,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,"Create a test for JDK-4670319
When a JTree node is expanded or collapsed, an Accessibility PropertyChange event is fired with the old state of ""collapsed"" and new state of ""expanded"" (or vice versa). The problem is that the source of the event is the AccessibeJTree, and not the AccessibleJTreeNode. This means that an assistive technology listening to this event is unable to report to the user what node was expanded/collapsed.
Fix for JDK-4670319 addresses the above issue. 
This review is for a test for validating the above issue. 
This review is for migrating tests from a closed test suite to open.
",,,,,,,,,,,JDK-8289673,JDK-8291780,JDK-8289702,JDK-8291843,JDK-8289668,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wcwz:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-03-29 01:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8012
Date: 2022-03-29 08:04:42 +0000;;;","2022-04-11 21:23;dukebot;Changeset: 4ce3cf12
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2022-04-12 04:21:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4ce3cf12bff025441f658e1857e92486b5d73ee6
;;;","2022-07-31 05:39;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.17/17.0.5-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nighlty testing passed.;;;","2022-08-01 06:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/615
Date: 2022-07-31 13:10:21 +0000;;;","2022-08-01 06:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1292
Date: 2022-07-31 12:43:06 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
compiler/arguments/TestCodeEntryAlignment.java fails with release VMs,JDK-8283229,5070378,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-03-15 16:45,2022-03-23 17:41,2023-10-01 09:56,2022-03-16 17:10,19,,,,,,,,,19,hotspot,,0,noreg-self,oracle-triage-19,tencent-interest,tier6,,,,,,,,,,,,,,,"```
STDERR:
 stdout: [];
 stderr: [Error: VM option 'CodeCacheSegmentSize' is develop and is available only in debug version of VM.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
]
```
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282355,JDK-8283298,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wct7:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-15 16:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7830
Date: 2022-03-15 23:53:23 +0000;;;","2022-03-16 06:31;chagedorn;ILW = Test fails with release build only, single test, no workaround = MLH = P4;;;","2022-03-16 17:10;dukebot;Changeset: 3da5204b
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-03-17 00:05:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3da5204b3c3a3f95bddcdcfe2628c2e0ed8a12d9
;;;","2022-03-17 06:53;dcubed;The fix for this issue is integrated in jdk-19+14-875.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
ClassLoader.c produces incorrect OutOfMemory Exception when length is 0 (aix),JDK-8283225,5070370,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tsteele,tsteele,tsteele,2022-03-15 14:44,2022-03-23 17:42,2023-10-01 09:56,2022-03-18 00:03,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,"I see NullClassBytesTest.java failing on AIX due to an java.lang.OutOfMemoryError. This failure occurs when the test's custom classloader tries to call defineClass with a 0 length byte array.

While investigating the issue, I discovered that the defineClass procedures implemented in ClassLoader.c throw OutOfMemoryErrors whenever malloc returns NULL. However, (from malloc's man page) ""If size is 0, then malloc() returns either NULL, or a unique pointer value that can later be successfully passed to free()"". On AIX, malloc returns NULL when size is 0, while on other platforms (I checked Linux/x86) it returns a valid memory address. So the OutOfMemoryError thrown on AIX is inaccurate.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,aix,,,,,"0|i2wcrf:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ae6d091,,,,,,,,,"2022-03-15 16:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7829
Date: 2022-03-15 22:58:48 +0000;;;","2022-03-18 00:03;dukebot;Changeset: cab4ff64
Author:    Tyler Steele <tyler.steele@ibm.com>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-03-18 07:02:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cab4ff64541393a974ea91e35167668ef0036804
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove THREAD_NOT_ALIVE from possible JDWP error codes,JDK-8283224,5070369,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,cjplummer,cjplummer,cjplummer,2022-03-15 14:33,2022-09-12 16:41,2023-10-01 09:56,2022-09-07 12:48,19,,,,,,,,,20,core-svc,,0,,,,,,,,,,,,,,,,,,,"THREAD_NOT_ALIVE originates from JVMTI. However, the debug agent converts it to INVALID_THREAD before passing it on to the debug agent client (the debugger, usually JDI). Currently ThreadReference.forceEarlyReturn() is the only API that even bothers to check for it, and it throws com.sun.jdi.IllegalThreadStateException, which is the same thing it already does for INVALID_THREAD.

In the JDWP spec, THREAD_NOT_ALIVE should be changed to ""Not used"".

For the following part of the JDWP spec for ThreadReference.ForceEarlyReturn, the THREAD_NOT_ALIVE entry should be removed. [UPDATE: It looks like this was already done by Loom.]

In the JDI ThreadReference.forceEarlyReturn implementation, the code that checks for THREAD_NOT_ALIVE should be removed. There is no behavior change associated with these changes, and there is no JDI spec update necessary. The spec already says IllegalThreadStateException means ""the thread is not suspended"", and not being alive implies not suspended.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283284,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wcr7:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-09-06 19:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10189
Date: 2022-09-07 02:04:13 +0000;;;","2022-09-07 12:48;dukebot;Changeset: aff9a696
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-09-07 19:46:19 +0000
URL:       https://git.openjdk.org/jdk/commit/aff9a696cb0b281a736e66007a4087923d7abab2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update GStreamer to 1.20.1,JDK-8283218,5070362,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,vdyakov,vdyakov,2022-03-15 12:46,2022-07-07 12:02,2023-10-01 09:56,2022-04-21 13:33,8u341,jfx19,,,,,,,,jfx19,javafx,,0,3rdparty,sn_114,sn_115,sn_116,,,,,,,,,,,,,,,"We currently use GStreamer version 1.18.4. We should update to the latest stable release, which is version 1.20.1 (released Mar 14, 2022)
",,,,,,,,,,,JDK-8286641,JDK-8286008,JDK-8285402,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275178,,,,JDK-8269147,,,,,,,,,,,,JDK-8283403,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wcpn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2022-04-07 23:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/768
Date: 2022-04-08 06:49:59 +0000;;;","2022-04-21 13:33;dukebot;Changeset: c4b1a72c
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-04-21 20:29:05 +0000
URL:       https://git.openjdk.java.net/jfx/commit/c4b1a72cc4d9253d1320d83281d50fb1f3bb6145
;;;","2022-04-30 06:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/94
Date: 2022-04-30 13:37:08 +0000;;;","2022-05-09 14:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/54
Date: 2022-05-09 21:07:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Leak FcObjectSet in getFontConfigLocations() in fontpath.c,JDK-8283217,5070361,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2022-03-15 12:17,2022-04-22 06:32,2023-10-01 09:56,2022-03-21 05:28,11,17,18,19,,,,,,19,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,noreg-other,redhat-interest,,,,,,,,,,"The method does not import FcObjectSetDestroy method, so FcObjectSet is not destroyed.
",,,,,,,,,,,JDK-8284626,JDK-8284627,JDK-8285474,JDK-8284628,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wcpf:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-03-15 12:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7826
Date: 2022-03-15 19:26:19 +0000;;;","2022-03-21 05:28;dukebot;Changeset: 909986c7
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-03-21 12:26:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/909986c7e110c8ac3ba16750be7707b1ec344ee5
;;;","2022-04-05 12:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/91
Date: 2022-04-05 19:22:39 +0000;;;","2022-04-05 12:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1005
Date: 2022-04-05 19:23:56 +0000;;;","2022-04-05 12:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/336
Date: 2022-04-05 19:23:18 +0000;;;","2022-04-05 12:34;zgu;Fix Request (18u)

A clean and low risk backport to fix memory leak.;;;","2022-04-05 12:34;zgu;Fix Request (17u)

A clean and low risk backport to fix memory leak.;;;","2022-04-05 12:34;zgu;Fix Request (11u)

A clean and low risk backport to fix memory leak.;;;",,,,,,,,,,,,,,,,,,,,,,
[macos] Screen Magnifier: Getting java.awt.IllegalComponentStateException when menu item is selected ,JDK-8283215,5070351,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kizune,landrews,landrews,2022-03-15 11:36,2022-04-07 00:00,2023-10-01 09:56,2022-04-04 14:26,18,19,,,,,,,,19,client-libs,,0,17-na,a11y,accessibility,macos,noreg-hard,sn_115,vpat,,,,,,,,,,,,"I have enabled Screen Magnifier on Mac OS ( Accessibility -> Zoom ) and Selecting the menu item throws the following exception

JDK 18 B35 exception
-------------------------------
java.awt.IllegalComponentStateException: component must be showing on the screen to determine its location
	at java.desktop/java.awt.Component.getLocationOnScreen_NoTreeLock(Component.java:2114)
	at java.desktop/java.awt.Component.getLocationOnScreen(Component.java:2088)
	at java.desktop/sun.lwawt.macosx.CAccessibility$23.call(CAccessibility.java:472)
	at java.desktop/sun.lwawt.macosx.CAccessibility$23.call(CAccessibility.java:470)
	at java.desktop/sun.lwawt.macosx.LWCToolkit$CallableWrapper.run(LWCToolkit.java:698)
	at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:97)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:747)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:744)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)


Step to Reproduce
---------------------------
1) Enable Screen magnifier on theMac
System Preference -> Accessibility -> Zoom -> Select ( Enable Hover Text)
2) Run the SwingSet2 Code by passing the following option
 -Djavax.accessibility.screen_magnifier_present=true 
3) Press ""CMD"" button and move the mouse pointer on different swing component on SwingSet2.
4) Click on ""Options"" menu and select the first menu item. If you see the exception then the bug is reproduced.

I have attached the screen recording for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-03-15 11:35;landrews;ScreenMagnifierMenuException.mov;https://bugs.openjdk.org/secure/attachment/98289/ScreenMagnifierMenuException.mov",,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2wcn7:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-03-22 09:22;kizune;Not reproducible on jdk8.;;;","2022-03-28 15:28;kizune;The reason this exception happens is that when menu is being clicked when magnifier is present the magnifier tries to execute the hitTest on the menu item to understand which component is there to grab the accessibility information and it asks cached component (JMenuItem) to perform the test. But both item and its parent component (popup) are not visible anymore so hitTest gets IllegalComponentStateException instead. The idea of the fix is to check for the parent component visibility status before asking it for the location on screen.;;;","2022-03-28 15:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8008
Date: 2022-03-28 22:31:31 +0000;;;","2022-04-04 14:26;dukebot;Changeset: 9440b391
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2022-04-04 21:22:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9440b391933afa672cbb625df010805d4a5ea504
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Fix typo in SystemTray.getTrayIconSize javadoc,JDK-8283203,5070337,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-03-15 10:24,2023-01-23 15:44,2023-10-01 09:56,2023-01-17 09:32,8,,,,,,,,,21,client-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,"The javadoc for the java.awt.SystemTray.getTrayIconSize method:

... Developers may use this methods to acquire the preferred size...

It should be: this method",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wck3:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-01-16 18:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12020
Date: 2023-01-17 01:53:05 +0000;;;","2023-01-17 09:32;dukebot;Changeset: 8c12ae86
Author:    SWinxy <swinxythecat@gmail.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-01-17 17:30:25 +0000
URL:       https://git.openjdk.org/jdk/commit/8c12ae867350a866a6a110ea85d86404f1efb0fb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential off-read when checking JFR's status in awaitFinished,JDK-8283202,5070336,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,mbalao,mbalao,2022-03-15 10:23,2022-03-23 17:42,2023-10-01 09:56,2022-03-18 06:22,17,19,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,"It looks to me that the method ChunkHeader::awaitFinished [0] can potentially read an incorrect offset when checking the status. The correct offset is first set [1] but every time we go through the loop, it's advanced (as a side-effect of reading) [2] and never reset. The right pattern for this seems to be the one here [3].

Note: this observation is based on static code-analysis only, I have not verified it with an actual test and there could be something that I'm overlooking.

--
[0] - https://github.com/openjdk/jdk/blob/jdk-19+13/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/ChunkHeader.java#L166
[1] - https://github.com/openjdk/jdk/blob/jdk-19+13/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/ChunkHeader.java#L172
[2] - https://github.com/openjdk/jdk/blob/jdk-19+13/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/ChunkHeader.java#L174
[3] - https://github.com/openjdk/jdk/blob/jdk-19+13/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/ChunkHeader.java#L118",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wcjv:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-03-16 03:14;egahlin;Great find!

Seems like the sync mechanism has been broking since the inception of event streaming (JDK 14). ;;;","2022-03-16 16:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7845
Date: 2022-03-16 19:30:54 +0000;;;","2022-03-18 06:22;dukebot;Changeset: 4b5079b9
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-03-18 13:18:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4b5079b9836c1cc881f571d060b310f58c8a860c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Linux os::cpu_microcode_revision() stalls cold startup,JDK-8283199,5070333,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-03-15 10:03,2022-12-09 15:25,2023-10-01 09:56,2022-03-22 23:33,11.0.10,17,18,19,,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,regression,startup,,,,,,,,,,,,"Noticed this when staring at timeline profiles for JVM startup. If you run any small startup workload on Linux, there is a significant time gap where JVM does nothing. I pinpointed that to fopen of /proc/cpuinfo due to JDK-8249672.

This does not reproduce if you run startup workloads continuously, as it looks as if /proc/cpuinfo is cached for about a second, and stalls reads after that, I suspect for CPU info updates, like frequency.

Observe:

$ for I in `seq 1 3`; do sleep 1; time build/linux-x86_64-server-release/images/jdk/bin/java -Xms128m -Xmx128m -version > /dev/null 2>&1 ; done

real	0m0.046s
real	0m0.045s
real	0m0.046s

Without the sleep:

$ for I in `seq 1 3`; do time build/linux-x86_64-server-release/images/jdk/bin/java -Xms128m -Xmx128m -version > /dev/null 2>&1 ; done

real	0m0.026s
real	0m0.026s
real	0m0.023s

There is another way to do this: read /sys/devices/system/cpu/cpu0/microcode/version. With dirty patch and sleep 1:

real	0m0.025s
real	0m0.024s
real	0m0.024s

It raises a bigger question if VM features string should be generated on startup, but it seems to take negligible time otherwise, see JDK-8283200. Given JDK-8249672 had been backported to update releases, let's do a pointed fix for this regression first.",,,,,,,,,,,JDK-8298516,JDK-8297330,JDK-8296536,JDK-8298515,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8249672,,,,,,JDK-8283200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wcj7:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-15 10:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7825
Date: 2022-03-15 17:21:43 +0000;;;","2022-03-22 23:33;dukebot;Changeset: 1443f6b9
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-03-23 06:31:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1443f6b9191c127abdae38cadb1a44af3c652f1d
;;;","2022-10-24 02:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/820
Date: 2022-10-24 09:23:07 +0000;;;","2022-10-24 02:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1471
Date: 2022-10-24 09:32:39 +0000;;;","2022-11-08 03:06;shade;Fix Request (17u)

Fixes the major startup time regression. Patch does not apply cleanly due to missing `os::fopen` refactoring. 17u PR acked by Thomas Stuefe.;;;","2022-11-15 10:14;shade;Fix Request (11u)

Same reason as for 17u. Same reason for unclean backport. Same reviewer for backport :);;;",,,,,,,,,,,,,,,,,,,,,,,,
Bad copyright header in UnsafeCopyMemory.java,JDK-8283189,5070322,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2022-03-15 09:03,2022-04-22 04:07,2023-10-01 09:56,2022-03-15 09:31,19,,,,,,,,,19,hotspot,,0,noreg-self,oracle-triage-19,ursqe-triaged,,,,,,,,,,,,,,,,Missing comma after date,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283122,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wcgr:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-15 09:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7824
Date: 2022-03-15 16:06:15 +0000;;;","2022-03-15 09:31;dukebot;Changeset: 12dca36c
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-03-15 16:28:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/12dca36c73583d0ed2e1f684b056100dc1f2ef55
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build time regression caused by JDK-8278917,JDK-8283188,5070320,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ayang,ihse,ihse,2022-03-15 08:43,2022-03-23 17:42,2023-10-01 09:56,2022-03-17 09:20,19,,,,,,,,,19,hotspot,,0,build-performance,,,,,,,,,,,,,,,,,,"Over the course of the last two years, we've seen a more than 25% regression  in build time. I've tracked this down to a handful of individual changes.

On of them is JDK-8278917, which causes hotspot build time to go up with 15-20 seconds on my reference machine (from around 195 s to 215-220 s).

It might be possible to change the inlining logic to avoid this performance hit when building, without sacrificing runtime performance.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278917,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wcgb:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-03-15 09:05;tschatzl;The cause is the inclusion of g1ConcurrentMark.inline.hpp in g1CollectedHeap.inline.hpp.

That file should already have been included before this change though (G1ConcurrentMark is used in several pre-existing methods).;;;","2022-03-16 06:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7839
Date: 2022-03-16 12:29:05 +0000;;;","2022-03-17 09:20;dukebot;Changeset: 31df6a60
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2022-03-17 16:17:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/31df6a60a8853be224d8c8b8c8ca6aea1bae2167
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: loop candidate for superword not always unrolled fully if superword fails,JDK-8283187,5070319,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,roland,roland,2022-03-15 08:35,2022-05-17 23:50,2023-10-01 09:56,2022-03-24 05:56,11,17,18,19,,,,,,19,hotspot,,0,c2,c2-superword,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-19,performance,,,,,,,,,,"IdealLoopTree::policy_unroll_slp_analysis() restricts unrolling of loops that are found to be candidate for superword but if superword then fails, unrolling doesn't always resume.",,,,,,,,,,,JDK-8284267,JDK-8284340,JDK-8283968,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286940,,JDK-8285695,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wcg3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-15 08:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7822
Date: 2022-03-15 15:45:08 +0000;;;","2022-03-16 06:01;chagedorn;ILW = Missing unrolling in C2 when super fails, low?, no workaround = MLH = P4;;;","2022-03-24 05:56;dukebot;Changeset: 14c20bc0
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-03-24 12:53:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/14c20bc0e0ee32b82ffe653ae9e4a0be52d578cb
;;;","2022-03-29 22:59;thartmann;Fix Request (JDK 18u)
Fixes a performance issue in C2. The fix is medium risk and applied cleanly expect for a conflict due to changes to surrounding code in a test file. Already tested and about to be backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 23:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/84
Date: 2022-03-30 05:57:02 +0000;;;","2022-04-01 03:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/333
Date: 2022-04-01 10:16:25 +0000;;;","2022-04-01 03:28;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly except addition of one line in IRNode.java (as mentioned by Tobias in the 18u backport) which had to get done manually. However, Skara recognizes it as clean backport. Included test has passed. Nightly tests as well.;;;",,,,,,,,,,,,,,,,,,,,,,,
Skip failing PredefinedMeshManagerTest tests,JDK-8283183,5070315,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2022-03-15 07:54,2022-03-25 05:54,2023-10-01 09:56,2022-03-16 13:39,jfx17,jfx19,,,,,,,,jfx19,javafx,,0,noreg-self,sn_114,testbug,,,,,,,,,,,,,,,,"The PredefinedMeshManagerTest tests sphereCacheTest and sphereCacheTest fail intermittently due to JDK-8282449, causing some CI test builds and GitHub Actions builds to fail. We should skip these tests until JDK-8282449 is fixed.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282449,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wcf7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-03-15 11:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/754
Date: 2022-03-15 18:50:15 +0000;;;","2022-03-16 13:39;dukebot;Changeset: ff75917c
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-03-16 20:38:08 +0000
URL:       https://git.openjdk.java.net/jfx/commit/ff75917c1be200f8eeba49304eadc67842068df3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SA tests fail with ""ERROR: catch_mach_exception_raise: Message doesn't denote a Unix soft signal.""",JDK-8283179,5070306,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,dcubed,dcubed,2022-03-15 05:54,2022-06-14 08:18,2023-10-01 09:56,2022-04-27 10:59,19,,,,,,,,,19,hotspot,,0,intermittent,tier1,tier3,tier5,tier6,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

serviceability/sa/ClhsdbJstack.java#id0

Here's a snippet from the log file:

Output: 
Attaching to process 85637, please wait...
hsdb> hsdb> + verbose true
hsdb> + jstack -v
Command not valid until attached to a VM
hsdb> + quit
java version ""19-ea"" 2022-09-20
Java(TM) SE Runtime Environment (fastdebug build 19-ea+14-847)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 19-ea+14-847, mixed mode)
ERROR: catch_mach_exception_raise: Message doesn't denote a Unix soft signal. exception_type = 2, codes[0] = 1, codes[num_codes -1] = -725887583, num_codes = 2
ERROR: attach: wait_for_exception: mach_exc_server failure
ERROR: catch_mach_exception_raise() failed '(ipc/rcv) invalid scatter list entry' (268451853)
Unable to connect to process ID 85637:

Can't attach to the process. Issues with reception of the exception message.
sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process. Issues with reception of the exception message.
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$BsdDebuggerLocalWorkerThread.execute(BsdDebuggerLocal.java:168)
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal.attach(BsdDebuggerLocal.java:282)
	at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.attachDebugger(HotSpotAgent.java:637)
	at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.setupDebuggerDarwin(HotSpotAgent.java:625)
	at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.setupDebugger(HotSpotAgent.java:371)
	at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.go(HotSpotAgent.java:336)
	at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.attach(HotSpotAgent.java:141)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.attachDebugger(CLHSDB.java:188)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.run(CLHSDB.java:67)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.main(CLHSDB.java:44)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runCLHSDB(SALauncher.java:281)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)
Caused by: sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process. Issues with reception of the exception message.
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal.attach0(Native Method)
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$1AttachTask.doit(BsdDebuggerLocal.java:273)
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$BsdDebuggerLocalWorkerThread.run(BsdDebuggerLocal.java:143)

[2022-03-14T20:07:22.497792Z] Waiting for completion for process 85656
[2022-03-14T20:07:22.497837Z] Waiting for completion finished for process 85656
 LingeredApp stdout: [];
 LingeredApp stderr: [java version ""19-ea"" 2022-09-20
Java(TM) SE Runtime Environment (fastdebug build 19-ea+14-847)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 19-ea+14-847, compiled mode)
]
 LingeredApp exitValue = 137
----------System.err:(52/3427)----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288429,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,os_x,,,,,"0|i2wcd7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-03-22 07:10;dcubed;Here's a log file snippet for the jdk-19+15-918-tier5 sighting: 

serviceability/sa/ClhsdbFindPC.java#xcomp-process

----------System.err:(46/3091)----------
 stdout: [Attaching to process 3960, please wait...
hsdb> hsdb> + verbose true
hsdb> + examine 0x00007fbc27809210
Command not valid until attached to a VM
hsdb> + quit
];
 stderr: [ERROR: catch_mach_exception_raise: Message doesn't denote a Unix soft signal. exception_type = 1, codes[0] = 1, codes[num_codes -1] = 8, num_codes = 2
ERROR: attach: wait_for_exception: mach_exc_server failure
ERROR: catch_mach_exception_raise() failed '(ipc/rcv) invalid scatter list entry' (268451853)
Unable to connect to process ID 3960:

Can't attach to the process. Issues with reception of the exception message.
sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process. Issues with reception of the exception message.
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$BsdDebuggerLocalWorkerThread.execute(BsdDebuggerLocal.java:168)
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal.attach(BsdDebuggerLocal.java:282)
	at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.attachDebugger(HotSpotAgent.java:637)
	at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.setupDebuggerDarwin(HotSpotAgent.java:625)
	at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.setupDebugger(HotSpotAgent.java:371)
	at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.go(HotSpotAgent.java:336)
	at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.attach(HotSpotAgent.java:141)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.attachDebugger(CLHSDB.java:188)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.run(CLHSDB.java:67)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.main(CLHSDB.java:44)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runCLHSDB(SALauncher.java:281)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)
Caused by: sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process. Issues with reception of the exception message.
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal.attach0(Native Method)
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$1AttachTask.doit(BsdDebuggerLocal.java:273)
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal$BsdDebuggerLocalWorkerThread.run(BsdDebuggerLocal.java:143)
]
 exitValue = 0

java.io.IOException: LingeredApp terminated with non-zero exit code 137
	at jdk.test.lib.apps.LingeredApp.stopApp(LingeredApp.java:426)
	at jdk.test.lib.apps.LingeredApp.stopApp(LingeredApp.java:484)
	at ClhsdbFindPC.testFindPC(ClhsdbFindPC.java:309)
	at ClhsdbFindPC.main(ClhsdbFindPC.java:328)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.io.IOException: LingeredApp terminated with non-zero exit code 137
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.io.IOException: LingeredApp terminated with non-zero exit code 137
----------rerun:(35/7317)*----------;;;","2022-03-22 12:50;cjplummer;This is very odd. The failure mode looks like an OS issue, so I would expect it to just reoccur on a particular host, or at least on a particular macOS version. However, the first time it was on aarch64 with version 12.1 and the second time was on x64 with version 10.15.7. These two macOS hosts couldn't be more different.

They also aren't being run with common JVM flags. The first uses -Xshrare:off and the 2nd -XX:-UseNotificationThread.

Searches show no references to ""invalid scatter list entry"" other than in mach-o source.;;;","2022-04-13 17:39;cjplummer;A few things to note before I go into some ugly details:

1) Failures are almost exclusively on macosx-aarch64. I just see one on macosx-x64.
2) These tests only started to be run on macosx-aarch64 after I pushed the fix for JDK-8270199, which was 2022-01-26.
3) Failures started on 2022-03-14.
4) The failures are only when the test is run with -Xcomp. Note you won't see -Xcomp in the JVM args because the test internally controls if the debuggee is launched with -Xcomp. serviceability/sa/ClhsdbJstack.java#id0  and serviceability/sa/ClhsdbFindPC.java#xcomp-process are both launched the debugee with -Xcomp.

I'll go into details next, but I believe the failure is a result of the debuggee crashing on startup, likely being triggered by the -Xcomp.;;;","2022-04-13 17:44;cjplummer;This is the error message in .jtr file

ERROR: catch_mach_exception_raise: Message doesn't denote a Unix soft signal. exception_type = 2, codes[0] = 1, codes[num_codes -1] = 0xd4bbd5a1, num_codes = 2
ERROR: attach: wait_for_exception: mach_exc_server failure
ERROR: catch_mach_exception_raise() failed '(ipc/rcv) invalid scatter list entry' (0x1000400d)
Unable to connect to process ID 80214:

Parsing the first line of the error message:

ERROR: catch_mach_exception_raise: Message doesn't denote a Unix soft signal. exception_type = 2, codes[0] = 1, codes[num_codes -1] = 0xd4bbd5a1, num_codes = 2

In catch_mach_exception_raise() we have:

  // This message should denote a Unix soft signal, with
  // 1. the exception type = EXC_SOFTWARE
  // 2. codes[0] (which is the code) = EXC_SOFT_SIGNAL
  // 3. codes[1] (which is the sub-code) = SIGSTOP
  if (!(exception_type == EXC_SOFTWARE &&
        codes[0] == EXC_SOFT_SIGNAL    &&
        codes[num_codes -1] == SIGSTOP)) {
    print_error(""catch_mach_exception_raise: Message doesn't denote a Unix ""
                ""soft signal. exception_type = %d, codes[0] = %d, ""
                ""codes[num_codes -1] = 0x%x, num_codes = %d\n"",
                exception_type, codes[0], codes[num_codes - 1], num_codes);
    return MACH_RCV_INVALID_TYPE;
  }

So it is expecting exception_type == EXC_SOFTWARE, but we are getting exception_type == 2:

#define EXC_BAD_INSTRUCTION	2	/* Instruction failed */
#define EXC_SOFTWARE		5	/* Software generated exception */

So it is EXC_BAD_INSTRUCTION, not EXC_SOFTWARE, and I believe this exception is due to a crash. code[0] is 1 and code[1] is 0xd4bbd5a1, which is probably data related to the crash (address of the instruction maybe). As a result of this failure, we return MACH_RCV_INVALID_TYPE.

 #define MACH_RCV_INVALID_TYPE           0x1000400d
/* Invalid msg-type specification in scatter list. */

I'm not sure why this error code was chosen, but it is the error code that ends up resulting in the ""invalid scatter list entry"" message in the last line of the error output above.

The whole attach process is kind of convoluted. It seems that during the attach it expects a SIGSTOP, and catch_mach_exception_raise() should be notified of it via an EXC_SOFTWARE exception, but instead got an EXC_BAD_INSTRUCTION. So I'm guessing the debugee crashed while launching or being attached to. I don't see anything else in the logs that might give a clue as to what happened to the debugee.
;;;","2022-04-13 19:20;cjplummer;Just had a thought. I wonder if this could be due to a compiler generated trap. These usually get passed along to any attached debugger. Maybe SA needs to do something different to ignore it and allow it to be delivered to the hotspot signal handler instead.;;;","2022-04-13 20:20;cjplummer;I added a retry so it keeps on calling wait_for_exception() until it returns without an error. I kept track of the number of times called and also added some extra debug output:

DEBUG: catch_mach_exception_raise: Exception port = 23811 thread_port = 24323 task port 40707 exc type = 2 num_codes 2
ERROR: catch_mach_exception_raise: Message doesn't denote a Unix soft signal. exception_type = 2, codes[0] = 1, codes[num_codes -1] = 0xd4bbd5a1, num_codes = 2
ERROR: attach: wait_for_exception: mach_exc_server failure
ERROR: catch_mach_exception_raise() failed '(ipc/rcv) invalid scatter list entry' (0x1000400d)
DEBUG: catch_mach_exception_raise: Exception port = 23811 thread_port = 40451 task port 40707 exc type = 5 num_codes 2
DEBUG: reply msg from mach_exc_server: (msg->{bits = 0x12, size = 36, remote_port = 0x6003, local_port = 0, reserved = 0x0, id = 0x9c9},)
ERROR: attach: wait_for_exception() failed 1 times
Unable to connect to process ID 50179:

You can see the 1st 4 lines are basically the same failure mode. However, line 5 is the output after the retry, and it succeeds. You can see the exception type is 5 like it should be, not 2. I still made the test failed. I'll try just letting it run and see what happens.;;;","2022-04-14 09:51;cjplummer;This seems to be the source of the EXC_BAD_INSTRUCTION. Note 0xd4bbd5a1 below and also in the debug output above where it is shown as part of the data related to the EXC_BAD_INSTRUCTION.

bool NativeInstruction::is_sigill_zombie_not_entrant() {
  return uint_at(0) == 0xd4bbd5a1; // dcps1 #0xdead
}

void NativeIllegalInstruction::insert(address code_pos) {
  *(juint*)code_pos = 0xd4bbd5a1; // dcps1 #0xdead
}

void NativeJump::patch_verified_entry(address entry, address verified_entry, address dest) {
...
  if (Assembler::reachable_from_branch_at(verified_entry, dest)) {
...
  } else {
    // We use an illegal instruction for marking a method as
    // not_entrant or zombie.
    NativeIllegalInstruction::insert(verified_entry);
  }

So I believe this is expected behavior. I'm just not sure why it only started to reproduce a little over a month ago, and did not reproduce the two months prior (the tests were not run on macos-arch64 prior to that).

In any case, ignoring the EXC_BAD_INSTRUCTION and waiting for the next exception seems to be working.;;;","2022-04-14 09:57;cjplummer;I mentioned that one of the failures was on macox-x64. That one is a bit different:

ERROR: catch_mach_exception_raise: Message doesn't denote a Unix soft signal. exception_type = 1, codes[0] = 1, codes[num_codes -1] = 8, num_codes = 2

So the exception_type is 1, not 2, which means it is a EXC_BAD_ACCESS, not EXC_BAD_INSTRUCTION. The ""8"" I believe is an address. I'm not up to date on all the hotspot methods of trapping, but seems likely that this also is the result of some sort of intentional trap, likely for NPE. It seems that this turns up with SA very very rarely, but should also be addressed.;;;","2022-04-14 15:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8255
Date: 2022-04-14 22:16:36 +0000;;;","2022-04-27 10:59;dukebot;Changeset: 716a80a8
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-04-27 17:57:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/716a80a8385776975c5aa58c0c757f01285e8ab5
;;;",,,,,,,,,,,,,,,,,,,,
Add equals/hashcode to MemorySegment,JDK-8283175,5070302,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-03-15 05:18,2022-03-15 07:10,2023-10-01 09:56,2022-03-15 07:10,repo-panama,,,,,,,,,,tools,,0,foreign-preview,,,,,,,,,,,,,,,,,,"MemorySegment should have a way to compare its instances; this could be useful when e.g. using a memory segment as a hashmap key. Of course there are two possible ways to compare a segment:

* shallow comparison: we just compare segment properties such as size and backing region, to make sure they point to the same region.

* structural comparison: we perform a byte-wise comparison of the segment contents.

The latter operation, while useful, is also very expensive (as its complexity depends on the segment size). MemorySegment already provides a way to compare contents (see MemorySegment::mismatch), so what makes most sense here is to compare segments by making sure they point to the same memory region.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wccb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-03-15 05:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/671
Date: 2022-03-15 12:25:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Preempt.java fails with ZGC,JDK-8283172,5070301,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rpressler,rpressler,rpressler,2022-03-15 04:07,2022-03-15 09:11,2023-10-01 09:56,2022-03-15 09:11,repo-loom,,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,Reproduce with -XX:+UseZGC -XX:+ZVerifyViews -XX:ZCollectionInterval=0.01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wcc3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-15 09:11;rpressler;Fixed by https://git.openjdk.java.net/loom/commit/b03e5cda6340dec68c3e613e5096e6a134d1c714;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Crash when walking stacks with ZGC,JDK-8283125,5070233,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rpressler,rpressler,rpressler,2022-03-14 11:39,2022-03-14 13:41,2023-10-01 09:56,2022-03-14 13:41,repo-loom,,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,"With -XX:+UseZGC -XX:+ZVerifyViews -XX:ZCollectionInterval=0.01 we get crashes in java/lang/management/ThreadMXBean/LockedMonitors.java and java/lang/Thread/virtual/stress/GetStackTraceALot:

HandleArea::allocate_handle(oop) -> assert(oopDesc::is_oop_or_null(obj)) failed: not an oop",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wbwz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-14 13:41;rpressler;Fixed by https://git.openjdk.java.net/loom/commit/1032840fc5cfc15c8bb8e0420324b6e7d33d2cdc and https://git.openjdk.java.net/loom/commit/46da0dd72b269d470b40e9f13235ef342c387a42;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[AIX, s390] UnsafeCopyMemory 'Mismatched' Tests Fail on Big Endian Systems",JDK-8283122,5070228,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stuefe,mdoerr,mdoerr,2022-03-14 10:49,2022-03-16 18:10,2023-10-01 09:56,2022-03-15 07:54,19,,,,,,,,,19,hotspot,,0,noreg-self,oracle-triage-19,testbug,,,,,,,,,,,,,,,,"UnsafeCopyMemory.java contains a few tests with 'mismatched' source and destination size. These tests use Unsafe.copyMemory to copy 4 bytes between longs and ints.

These copies do not happen as expected on big endian systems since the low-order bytes are stored in 'other' half of the long, and a little extra work is required to copy between the correct locations.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283189,JDK-8269119,,,,,,,,,,,,,,,,,,,ppc,s390x,,,,,,,,,,,,,"0|i2wbvv:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-14 10:51;mdoerr;On behalf of Tyler Steele (IBM).;;;","2022-03-14 11:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7811
Date: 2022-03-14 18:19:46 +0000;;;","2022-03-14 17:32;dlong;ILW = 1 test fails; big-endian only; no workaround = MMH = P3;;;","2022-03-15 07:54;dukebot;Changeset: 4de72014
Author:    Tyler Steele <tyler.steele@ibm.com>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-03-15 14:52:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4de72014d3a33469399fec6f428f35c47c4cfbe0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"serviceability/jvmti/thread/GetFrameCount/framecnt01/framecnt01.java failing #VirtualThread-Frozen: number of frames expected: 14, got: 9",JDK-8283101,5070199,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,alanb,alanb,2022-03-14 05:48,2022-11-14 19:18,2023-10-01 09:56,2022-11-04 10:05,19,repo-loom,,,,,,,,20,hotspot,,0,intermittent,loom,noreg-self,tier8,,,,,,,,,,,,,,,"loom repo, tier4

Thread #VirtualThread-Frozen: number of frames expected: 14, got: 9
----------System.err:(12/816)----------
java.lang.RuntimeException: Check failed for VirtualThread[#18,VirtualThread-Frozen]/waiting false 14
	at framecnt01.checkFrames(framecnt01.java:49)
	at framecnt01.main(framecnt01.java:85)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1493)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Check failed for VirtualThread[#18,VirtualThread-Frozen]/waiting false 14
JavaTest Message: shutting down test",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278124,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wbpf:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-04-20 13:58;sspitsyn;The bug is not easy to reproduce. This test is fragile, and so, the bug with a big probability is a test problem.
We discussed with Leonid that might make sense to check-wait for vThread1 to reach parking state instead of sleeping unconditionally. ;;;","2022-04-20 21:45;sspitsyn;The bug is not easy to reproduce. This test is fragile, and so, the bug with a big probability is a test problem.
We discussed with Leonid that might make sense to check-wait for vThread1 to reach parking state instead of sleeping unconditionally.

From the other head, I see a different failure with assert.
I'm not sure this is still reproducible.
This is a part of the hs_err dump:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11744/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3e530009-1c26-46e2-bae8-fecd35a4af04/runs/d2863c62-dd29-48e2-8ade-79ad56dd5021/workspace/open/src/hotspot/share/runtime/thread.cpp:975), pid=1767881, tid=1770962
#  assert(false) failed: Possible safepoint reached by thread that does not allow it
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (fastdebug build 19-internal-2022-04-20-1631313.thomas.schatzl.loom)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-internal-2022-04-20-1631313.thomas.schatzl.loom, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x18d07f8]  JavaThread::check_possible_safepoint()+0xa8
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11733/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3e92de69-fb83-4c79-953f-aec62011ca9a/runs/d74f610c-2ed8-4079-8745-3324aa442ce4/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/scratch/2/core.1767881)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Dtest.vm.opts=-XX:MaxRAMPercentage=6.25 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11733/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3e92de69-fb83-4c79-953f-aec62011ca9a/runs/d74f610c-2ed8-4079-8745-3324aa442ce4/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/tmp -Dtest.tool.vm.opts=-J-XX:MaxRAMPercentage=6.25 -J-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11733/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3e92de69-fb83-4c79-953f-aec62011ca9a/runs/d74f610c-2ed8-4079-8745-3324aa442ce4/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/tmp -Dtest.compiler.opts= -Dtest.java.opts=-Xshare:off -showversion -Dtest.jdk=/opt/mach5/mesos/work_dir/jib-master/install/2022-04-20-1631313.thomas.schatzl.loom/linux-aarch64-debug.jdk/jdk-19/fastdebug -Dcompile.jdk=/opt/mach5/mesos/work_dir/jib-master/install/2022-04-20-1631313.thomas.schatzl.loom/linux-aarch64-debug.jdk/jdk-19/fastdebug -Dtest.timeout.factor=4.0 -Dtest.nativepath=/opt/mach5/mesos/work_dir/jib-master/install/2022-04-20-1631313.thomas.schatzl.loom/linux-aarch64-debug.test/hotspot/jtreg/native -Dtest.root=/opt/mach5/mesos/work_dir/jib-master/install/2022-04-20-1631313.thomas.schatzl.loom/src.full/open/test/hotspot/jtreg -Dtest.name=serviceability/jvmti/thread/GetFrameCount/framecnt01/framecnt01.java -Dtest.file=/opt/mach5/mesos/work_dir/jib-master/install/2022-04-20-1631313.thomas.schatzl.loom/src.full/open/test/hotspot/jtreg/serviceability/jvmti/thread/GetFrameCount/framecnt01/framecnt01.java -Dtest.src=/opt/mach5/mesos/work_dir/jib-master/install/2022-04-20-1631313.thomas.schatzl.loom/src.full/open/test/hotspot/jtreg/serviceability/jvmti/thread/GetFrameCount/framecnt01 -Dtest.src.path=/opt/mach5/mesos/work_dir/jib-master/install/2022-04-20-1631313.thomas.schatzl.loom/src.full/open/test/hotspot/jtreg/serviceability/jvmti/thread/GetFrameCount/framecnt01:/opt/mach5/mesos/work_dir/jib-master/install/2022-04-20-1631313.thomas.schatzl.loom/src.full/open/test/lib -Dtest.classes=/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11733/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3e92de69-fb83-4c79-953f-aec62011ca9a/runs/d74f610c-2ed8-4079-8745-3324aa442ce4/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/classes/2/serviceability/jvmti/thread/GetFrameCount/framecnt01/framecnt01.d -Dtest.class.path=/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11733/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3e92de69-fb83-4c79-953f-aec62011ca9a/runs/d74f610c-2ed8-4079-8745-3324aa442ce4/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/classes/2/serviceability/jvmti/thread/GetFrameCount/framecnt01/framecnt01.d:/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11733/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3e92de69-fb83-4c79-953f-aec62011ca9a/runs/d74f610c-2ed8-4079-8745-3324aa442ce4/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/classes/2/test/lib -Dtest.class.path.prefix=/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11733/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3e92de69-fb83-4c79-953f-aec62011ca9a/runs/d74f610c-2ed8-4079-8745-3324aa442ce4/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/classes/2/serviceability/jvmti/thread/GetFrameCount/framecnt01/framecnt01.d:/opt/mach5/mesos/work_dir/jib-master/install/2022-04-20-1631313.thomas.schatzl.loom/src.full/open/test/hotspot/jtreg/serviceability/jvmti/thread/GetFrameCount/framecnt01:/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11733/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3e92de69-fb83-4c79-953f-aec62011ca9a/runs/d74f610c-2ed8-4079-8745-3324aa442ce4/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/classes/2/test/lib -XX:MaxRAMPercentage=6.25 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11733/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3e92de69-fb83-4c79-953f-aec62011ca9a/runs/d74f610c-2ed8-4079-8745-3324aa442ce4/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/tmp -Xshare:off -Djava.library.path=/opt/mach5/mesos/work_dir/jib-master/install/2022-04-20-1631313.thomas.schatzl.loom/linux-aarch64-debug.test/hotspot/jtreg/native --enable-preview -agentlib:framecnt01 com.sun.javatest.regtest.agent.MainWrapper /opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11733/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3e92de69-fb83-4c79-953f-aec62011ca9a/runs/d74f610c-2ed8-4079-8745-3324aa442ce4/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/serviceability/jvmti/thread/GetFrameCount/framecnt01/framecnt01.d/main.0.jta

Host: ol8-aarch64-462905, AArch64, 8 cores, 46G, Oracle Linux Server release 8.4
Time: Wed Apr 20 22:34:59 2022 UTC elapsed time: 0.342596 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x0000fffdd8082400):  JavaThread ""ForkJoinPool-1-worker-1"" daemon [_thread_in_vm, id=1770962, stack(0x0000fffe1e0d0000,0x0000fffe1e2d0000)]

Stack: [0x0000fffe1e0d0000,0x0000fffe1e2d0000],  sp=0x0000fffe1e2cafe0,  free space=2027k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x18d07f8]  JavaThread::check_possible_safepoint()+0xa8
V  [libjvm.so+0x18d0858]  JavaThread::check_for_valid_safepoint_state()+0x18
V  [libjvm.so+0x147fbb4]  MemAllocator::allocate()+0x124
V  [libjvm.so+0xb05e50]  Freeze<Config<(oop_kind)0, G1BarrierSet> >::allocate_chunk(unsigned long)+0x1b0
V  [libjvm.so+0xb069b4]  Freeze<Config<(oop_kind)0, G1BarrierSet> >::allocate_chunk_slow(unsigned long)+0x14
V  [libjvm.so+0xad7264]  FreezeBase::finalize_freeze(frame const&, frame&, int)+0x354
V  [libjvm.so+0xada134]  FreezeBase::recurse_freeze_interpreted_frame(frame&, frame&, int, bool)+0x494
V  [libjvm.so+0xada314]  FreezeBase::recurse_freeze_interpreted_frame(frame&, frame&, int, bool)+0x674
V  [libjvm.so+0xada314]  FreezeBase::recurse_freeze_interpreted_frame(frame&, frame&, int, bool)+0x674
V  [libjvm.so+0xada314]  FreezeBase::recurse_freeze_interpreted_frame(frame&, frame&, int, bool)+0x674
V  [libjvm.so+0xada314]  FreezeBase::recurse_freeze_interpreted_frame(frame&, frame&, int, bool)+0x674
V  [libjvm.so+0xada314]  FreezeBase::recurse_freeze_interpreted_frame(frame&, frame&, int, bool)+0x674
V  [libjvm.so+0xada314]  FreezeBase::recurse_freeze_interpreted_frame(frame&, frame&, int, bool)+0x674
V  [libjvm.so+0xada314]  FreezeBase::recurse_freeze_interpreted_frame(frame&, frame&, int, bool)+0x674
V  [libjvm.so+0xada314]  FreezeBase::recurse_freeze_interpreted_frame(frame&, frame&, int, bool)+0x674
V  [libjvm.so+0xada314]  FreezeBase::recurse_freeze_interpreted_frame(frame&, frame&, int, bool)+0x674
V  [libjvm.so+0xada314]  FreezeBase::recurse_freeze_interpreted_frame(frame&, frame&, int, bool)+0x674
V  [libjvm.so+0xada314]  FreezeBase::recurse_freeze_interpreted_frame(frame&, frame&, int, bool)+0x674
V  [libjvm.so+0xada314]  FreezeBase::recurse_freeze_interpreted_frame(frame&, frame&, int, bool)+0x674
V  [libjvm.so+0xada314]  FreezeBase::recurse_freeze_interpreted_frame(frame&, frame&, int, bool)+0x674
V  [libjvm.so+0xada314]  FreezeBase::recurse_freeze_interpreted_frame(frame&, frame&, int, bool)+0x674
V  [libjvm.so+0xadad7c]  FreezeBase::freeze_slow()+0x1ec
V  [libjvm.so+0xae6c98]  int freeze_internal<Config<(oop_kind)0, G1BarrierSet> >(JavaThread*, long*)+0x694
V  [libjvm.so+0xae6e68]  int freeze<Config<(oop_kind)0, G1BarrierSet> >(JavaThread*, long*)+0x108
v  ~RuntimeStub::cont_doYield 0x0000fffe3c550a7c
j  jdk.internal.vm.Continuation.yield0(Ljdk/internal/vm/ContinuationScope;Ljdk/internal/vm/Continuation;)Z+18 java.base@19-internal
j  jdk.internal.vm.Continuation.yield(Ljdk/internal/vm/ContinuationScope;)Z+69 java.base@19-internal
j  java.lang.VirtualThread.yieldContinuation()Z+20 java.base@19-internal
j  java.lang.VirtualThread.doPark()V+22 java.base@19-internal
j  java.lang.VirtualThread.park()V+17 java.base@19-internal
j  java.lang.System$2.parkVirtualThread()V+0 java.base@19-internal
j  jdk.internal.misc.VirtualThreads.park()V+3 java.base@19-internal
j  java.util.concurrent.locks.LockSupport.park()V+9 java.base@19-internal
j  framecnt01.lambda$main$1()V+4
j  framecnt01$$Lambda$10+0x0000000100001418.run()V+0
j  java.lang.VirtualThread.run(Ljava/lang/Runnable;)V+66 java.base@19-internal
j  java.lang.VirtualThread$VThreadContinuation.lambda$new$0(Ljava/lang/VirtualThread;Ljava/lang/Runnable;)V+2 java.base@19-internal
j  java.lang.VirtualThread$VThreadContinuation$$Lambda$7+0x00000001000c60c8.run()V+8 java.base@19-internal
j  jdk.internal.vm.Continuation.enter0()V+4 java.base@19-internal
j  jdk.internal.vm.Continuation.enter(Ljdk/internal/vm/Continuation;Z)V+1 java.base@19-internal
J 169  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@19-internal (0 bytes) @ 0x0000fffe3caee09c [0x0000fffe3caee040+0x000000000000005c]
j  jdk.internal.vm.Continuation.run()V+122 java.base@19-internal
j  java.lang.VirtualThread.runContinuation()V+81 java.base@19-internal
j  java.lang.VirtualThread$$Lambda$8+0x00000001000c62e8.run()V+4 java.base@19-internal
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 java.base@19-internal
j  java.util.concurrent.ForkJoinTask.doExec()I+10 java.base@19-internal
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 java.base@19-internal
j  java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I+203 java.base@19-internal
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 java.base@19-internal
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 java.base@19-internal
v  ~StubRoutines::call_stub 0x0000fffe3c5401bc
V  [libjvm.so+0xf5fdcc]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x58c
V  [libjvm.so+0xf60438]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x3e8
V  [libjvm.so+0xf607b4]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x70
V  [libjvm.so+0x10c5818]  thread_entry(JavaThread*, JavaThread*)+0x118
V  [libjvm.so+0x18d1228]  JavaThread::thread_main_inner()+0x238
V  [libjvm.so+0x18ddfb8]  Thread::call_run()+0xf8
V  [libjvm.so+0x15d6704]  thread_native_entry(Thread*)+0x104
C  [libpthread.so.0+0x7868]  start_thread+0x188

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~RuntimeStub::cont_doYield 0x0000fffe3c550a4c
j  jdk.internal.vm.Continuation.yield0(Ljdk/internal/vm/ContinuationScope;Ljdk/internal/vm/Continuation;)Z+18 java.base@19-internal
j  jdk.internal.vm.Continuation.yield(Ljdk/internal/vm/ContinuationScope;)Z+69 java.base@19-internal
j  java.lang.VirtualThread.yieldContinuation()Z+20 java.base@19-internal
j  java.lang.VirtualThread.doPark()V+22 java.base@19-internal
j  java.lang.VirtualThread.park()V+17 java.base@19-internal
j  java.lang.System$2.parkVirtualThread()V+0 java.base@19-internal
j  jdk.internal.misc.VirtualThreads.park()V+3 java.base@19-internal
j  java.util.concurrent.locks.LockSupport.park()V+9 java.base@19-internal
j  framecnt01.lambda$main$1()V+4
j  framecnt01$$Lambda$10+0x0000000100001418.run()V+0
j  java.lang.VirtualThread.run(Ljava/lang/Runnable;)V+66 java.base@19-internal
j  java.lang.VirtualThread$VThreadContinuation.lambda$new$0(Ljava/lang/VirtualThread;Ljava/lang/Runnable;)V+2 java.base@19-internal
j  java.lang.VirtualThread$VThreadContinuation$$Lambda$7+0x00000001000c60c8.run()V+8 java.base@19-internal
j  jdk.internal.vm.Continuation.enter0()V+4 java.base@19-internal
j  jdk.internal.vm.Continuation.enter(Ljdk/internal/vm/Continuation;Z)V+1 java.base@19-internal
J 169  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@19-internal (0 bytes) @ 0x0000fffe3caee09c [0x0000fffe3caee040+0x000000000000005c]
j  jdk.internal.vm.Continuation.run()V+122 java.base@19-internal
j  java.lang.VirtualThread.runContinuation()V+81 java.base@19-internal
j  java.lang.VirtualThread$$Lambda$8+0x00000001000c62e8.run()V+4 java.base@19-internal
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 java.base@19-internal
j  java.util.concurrent.ForkJoinTask.doExec()I+10 java.base@19-internal
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 java.base@19-internal
j  java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I+203 java.base@19-internal
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 java.base@19-internal
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 java.base@19-internal
v  ~StubRoutines::call_stub 0x0000fffe3c5401bc;;;","2022-07-06 11:55;dcubed;Here's a log file snippet from the jdk-19+30-2159-tier8 sighting: 

serviceability/jvmti/thread/GetFrameCount/framecnt01/framecnt01.java

#section:main
----------messages:(4/234)----------
command: main --enable-preview -agentlib:framecnt01 framecnt01
reason: User specified action: run main/othervm/native --enable-preview -agentlib:framecnt01 framecnt01 
Mode: othervm [/othervm specified]
elapsed time (seconds): 52.545
----------configuration:(0/0)----------
----------System.out:(42/2215)----------
Testing:
JVMTI Stack Trace for thread VirtualThread-Live: frame count: 9
 0: framecnt01: checkFrames0(Ljava/lang/Thread;ZI)Z
 1: framecnt01: checkFrames(Ljava/lang/Thread;ZI)V
 2: framecnt01: lambda$main$0()V
 3: framecnt01$$Lambda$1.0x0000000801001510: run()V
 4: java/lang/VirtualThread: run(Ljava/lang/Runnable;)V
 5: java/lang/VirtualThread$VThreadContinuation: lambda$new$0(Ljava/lang/VirtualThread;Ljava/lang/Runnable;)V
 6: java/lang/VirtualThread$VThreadContinuation$$Lambda$7.0x000000080104f478: run()V
 7: jdk/internal/vm/Continuation: enter0()V
 8: jdk/internal/vm/Continuation: enter(Ljdk/internal/vm/Continuation;Z)V

Testing:
JVMTI Stack Trace for thread VirtualThread-Frozen: frame count: 12
 0: java/lang/VirtualThread: yieldContinuation()Z
 1: java/lang/VirtualThread: park()V
 2: java/lang/System$2: parkVirtualThread()V
 3: jdk/internal/misc/VirtualThreads: park()V
 4: java/util/concurrent/locks/LockSupport: park()V
 5: framecnt01: lambda$main$1()V
 6: framecnt01$$Lambda$10.0x0000000801004000: run()V
 7: java/lang/VirtualThread: run(Ljava/lang/Runnable;)V
 8: java/lang/VirtualThread$VThreadContinuation: lambda$new$0(Ljava/lang/VirtualThread;Ljava/lang/Runnable;)V
 9: java/lang/VirtualThread$VThreadContinuation$$Lambda$7.0x000000080104f478: run()V
10: jdk/internal/vm/Continuation: enter0()V
11: jdk/internal/vm/Continuation: enter(Ljdk/internal/vm/Continuation;Z)V

Thread #VirtualThread-Frozen: number of frames expected: 14, got: 12
JVMTI Stack Trace for thread VirtualThread-Frozen: frame count: 12
 0: java/lang/VirtualThread: yieldContinuation()Z
 1: java/lang/VirtualThread: park()V
 2: java/lang/System$2: parkVirtualThread()V
 3: jdk/internal/misc/VirtualThreads: park()V
 4: java/util/concurrent/locks/LockSupport: park()V
 5: framecnt01: lambda$main$1()V
 6: framecnt01$$Lambda$10.0x0000000801004000: run()V
 7: java/lang/VirtualThread: run(Ljava/lang/Runnable;)V
 8: java/lang/VirtualThread$VThreadContinuation: lambda$new$0(Ljava/lang/VirtualThread;Ljava/lang/Runnable;)V
 9: java/lang/VirtualThread$VThreadContinuation$$Lambda$7.0x000000080104f478: run()V
10: jdk/internal/vm/Continuation: enter0()V
11: jdk/internal/vm/Continuation: enter(Ljdk/internal/vm/Continuation;Z)V

----------System.err:(12/816)----------
java.lang.RuntimeException: Check failed for VirtualThread[#36,VirtualThread-Frozen]/waiting false 14
	at framecnt01.checkFrames(framecnt01.java:50)
	at framecnt01.main(framecnt01.java:87)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Check failed for VirtualThread[#36,VirtualThread-Frozen]/waiting false 14
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Check failed for VirtualThread[#36,VirtualThread-Frozen]/waiting false 14
----------rerun:(45/8028)*----------;;;","2022-07-10 23:16;alanb;One thing that would help this test is to get rid of vThread1Started and replace the loop + sleep(100) with:

```
        Thread.State state;
        while ((state = vThread1.getState()) != Thread.State.WAITING) {
            System.out.println(state);
            if (state == Thread.State.TERMINATED)
                throw new RuntimeException(""Thread terminated"");
            Thread.sleep(10);
        }
```;;;","2022-11-02 09:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10951
Date: 2022-11-02 16:06:41 +0000;;;","2022-11-04 10:05;dukebot;Changeset: c206f286
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-11-04 17:01:57 +0000
URL:       https://git.openjdk.org/jdk/commit/c206f28629056c62d5c22686cc39b849e4ecef2f
;;;",,,,,,,,,,,,,,,,,,,,,,,,
JMX connections should default to using an ObjectInputFilter,JDK-8283093,5070190,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kevinw,kevinw,kevinw,2022-03-14 02:43,2023-02-10 11:02,2023-10-01 09:56,2022-10-27 01:25,,,,,,,,,,20,core-svc,,0,release-note=yes,,,,,,,,,,,,,,,,,,"The management.properties file documents a property 
( com.sun.management.jmxremote.serial.filter.pattern )
to define an ObjectInputFilter on JMX connections.

This should be set by default to restrict the types that can be deserialized.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294716,,,,,,,,JDK-8299891,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wbnf:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2022-09-30 05:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10507
Date: 2022-09-30 11:00:28 +0000;;;","2022-10-27 01:25;dukebot;Changeset: 628820f4
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2022-10-27 08:24:01 +0000
URL:       https://git.openjdk.org/jdk/commit/628820f47ef9c9ad3cc62e68db9c4dbc7e659154
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX subclass permission check redundant with strong encapsulation,JDK-8283092,5070188,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kevinw,kevinw,kevinw,2022-03-14 02:25,2022-03-23 17:45,2023-10-01 09:56,2022-03-22 00:58,,,,,,,,,,19,core-svc,,0,noreg-hard,,,,,,,,,,,,,,,,,,"JMX uses RuntimePermission to check (if Security Manager is present) that code is permitted to subclass certain classes.

This SecurityManager check should be removed as unnecessary now we have strong encapsulation with modules.

AgentProvider, PlatformMBeanProvider and PlatformMBeanFinder use a check for RuntimePermission with a name: class.getName() + "".subclass"".

Strong encapsulation ensures that no user-defined class can implement  those abstract classes.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wbmz:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2022-03-15 13:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7827
Date: 2022-03-15 20:22:16 +0000;;;","2022-03-22 00:58;dukebot;Changeset: 37fc77ef
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2022-03-22 07:54:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/37fc77ef60dd97c4acc468ecfeb6753132974720
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create a test or JDK-4715503,JDK-8283087,5070183,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-03-13 23:55,2022-07-25 02:04,2023-10-01 09:56,2022-03-22 02:22,11,17,18,19,8,,,,,19,client-libs,,0,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,"Create a test or JDK-4715503

The getAccessibleContext method for JTable column header cells returns an
AccessibleContext which cannot get the bounding rectangle for table header cells. The Bug causes problems with screen reader review mode.

The test added verifies that the are not exceptions and Bounding rectangles are returned for the Accessible Table Header Cells.",,,,,,,,,,,JDK-8290946,JDK-8289566,JDK-8289669,JDK-8290951,JDK-8289273,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wblv:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-03-14 02:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7807
Date: 2022-03-14 09:28:50 +0000;;;","2022-03-22 02:22;dukebot;Changeset: a6fd0b21
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2022-03-22 09:20:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a6fd0b21ddc1575366eed8d47191f6b14b2d7cb6
;;;","2022-07-22 09:22;goetz;Fix request [11u/17u]

I backport this for parity with 11.0.17&17.0.5-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2022-07-22 09:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/591
Date: 2022-07-22 16:21:48 +0000;;;","2022-07-22 09:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1266
Date: 2022-07-22 16:34:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"RandomGenerator nextDouble(double, double) is documented incorrectly",JDK-8283084,5070174,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlaskey,webbuggrp,webbuggrp,2022-03-13 17:00,2022-06-11 23:37,2023-10-01 09:56,2022-04-21 06:46,17,18,19,,,,,,,19,core-libs,,0,additional-information-received,dcsaw,noreg-doc,reproducer-yes,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
RandomGenerator:
default double nextDouble(double origin, double bound);
https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/RandomGenerator.html#nextDouble(double,double)

default float nextFloat(float origin, float bound);
https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/RandomGenerator.html#nextFloat(float,float)

These methods are documented incorrectly. The default method checks (origin < bound) and (bound - origin) < +infinity.

The exception conditions are incorrect:
""if {@code origin} is not finite,
 or {@code bound} is not finite, or {@code origin}
 is greater than or equal to {@code bound}""

This is not true. Calling with -Double.MAX_VALUE and Double.MAX_VALUE satisfies the documented requirements but actually throws an exception.

The implementation spec is incorrect:

The default implementation checks that {@code origin} and
{@code bound} are positive finite doubles.

This is not true. Origin and Bound can be negative.



STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
import java.util.random.*;

public class NextDoubleBug {
  public static void main(String[] args) {
    RandomGenerator g = RandomGeneratorFactory.of(""L64X128MixRandom"").create(42);
    System.out.printf(""Negative origin and bound are OK: %s%n"", g.nextDouble(-10, -5));
    try {
      g.nextDouble(-Double.MAX_VALUE, Double.MAX_VALUE);
      throw new IllegalStateException(""Infinite range should throw"");
    } catch (IllegalArgumentException expected) {
      System.out.println(""Infinite range throws"");
    }
  }
}

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
> java NextDoubleBug 
Negative origin and bound are OK: -6.5179306489351125
Infinite range throws
ACTUAL -
The result is as expected. This does not match the javadoc behaviour.


---------- BEGIN SOURCE ----------
Provided
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283693,,,,,,,,,,,,,,JDK-8288288,,,,,,"2022-03-13 21:44;tongwan;NextDoubleBug.java;https://bugs.openjdk.org/secure/attachment/98273/NextDoubleBug.java",,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wbjv:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2022-03-13 21:42;tongwan;The observations on Windows 10:
JDK 17: Failed, IllegalArgumentException thrown.
JDK 18ea+29: Failed.
JDK 19ea+3: Failed.;;;","2022-03-20 21:47;pnarayanaswa;Additional Information from submitter:
=============================
The corresponding integer methods also have their @implSpec incorrect:
default int nextInt(int origin, int bound)
default long nextLong(long origin, long bound)

These both state that 
""The default implementation checks that {@code origin} and
{@code bound} are positive {@code longs}""

This is not true.

Note that the @implSpec states that when the range is not a power of 2 then a rejection method is used that:
""the result is re-calculated  by
invoking {@code nextInt()} until the result is greater than or equal
{@code origin} and less than {@code bound}""

This fails to mention that the rejection algorithm is different if the range is greater than the maximum positive value of the primitive type, or smaller. If smaller than the maximum positive value then rejection effectively samples from a reduced range of positive numbers and takes the modulus. I note that for a long time the rejection algorithm for non-power-of-2 range has been documented in java.util.Random.nextInt(int). So it may be helpful to either fully document the algorithm, or at least make the distinction between simple rejection for large ranges and the rejection algorithm for positive ranges.

The positive range algorithm is also used in these methods:
default long nextLong(long bound)
default int nextInt(int bound)

These do not detail the rejection algorithm is the same as for the positive range in the (origin, bound) versions.

;;;","2022-04-05 07:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8109
Date: 2022-04-05 14:05:57 +0000;;;","2022-04-21 06:46;dukebot;Changeset: 85641c65
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2022-04-21 13:45:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/85641c651d1099adcdce6ae355d8d89cfbd7e040
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
java.util.random L128X256MixRandom constructor fails to use byte[] seed,JDK-8283083,5070173,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,webbuggrp,webbuggrp,2022-03-13 16:30,2022-08-09 09:02,2023-10-01 09:56,2022-04-12 10:40,17,18,19,,,,,,,19,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The L128X256MixRandom(byte[]) constructor converts the byte[] to a long[]. The required state size is 8 longs. The current code uses 6 longs. The result is an ArrayIndexOutOfBoundsException is thrown by the byte[] constructor.

This code:

// Convert the seed to 6 long values, of which the last 4 are not all zero.
long[] data = RandomSupport.convertSeedBytesToLongs(seed, 6, 4);

Should be:

// Convert the seed to 8 long values, of which the last 4 are not all zero.
long[] data = RandomSupport.convertSeedBytesToLongs(seed, 8, 4);


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
This does not readily manifest in code. The RandomGeneratorFactory creates the generator using a try-catch block:

    public T create(byte[] seed) {
        Objects.requireNonNull(seed, ""seed must not be null"");
        try {
            ensureConstructors();
            return ctorBytes.newInstance(seed);
        } catch (Exception ex) {
            return create();
        }
    }

The ArrayIndexOutOfBoundsException is caught and a default generator is constructed.

The generator should be the same when the same seed is used:

import java.util.random.*;

public class L128X256MixRandomBug {
  public static void main(String[] args) {

    byte[] seed = {1, 2, 3, 4, 5};

    for (String name : new String[]{
      ""L32X64MixRandom"",
      ""L64X128StarStarRandom"",
      ""L64X128MixRandom"",
      ""L64X256MixRandom"",
      ""L64X1024MixRandom"",
      ""L128X128MixRandom"",
      ""L128X256MixRandom"",
      ""L128X1024MixRandom"",
    }) {
      // This should be reproducible
      RandomGenerator g1 = RandomGeneratorFactory.of(name).create(seed);
      RandomGenerator g2 = RandomGeneratorFactory.of(name).create(seed);

      System.out.printf(""%-21s is reproducible %b%n"", name,
        g1.nextLong() == g2.nextLong());
    }
  }
}

With access to the internal class it should be simple to show that:

// any byte[] length should fail
new L128X256MixRandom(new byte[3])

will throw an ArrayIndexOutOfBoundsException.


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
> java L128X256MixRandomBug
L32X64MixRandom       is reproducible true
L64X128StarStarRandom is reproducible true
L64X128MixRandom      is reproducible true
L64X256MixRandom      is reproducible true
L64X1024MixRandom     is reproducible true
L128X128MixRandom     is reproducible true
L128X256MixRandom     is reproducible true
L128X1024MixRandom    is reproducible true
ACTUAL -
> java L128X256MixRandomBug
L32X64MixRandom       is reproducible true
L64X128StarStarRandom is reproducible true
L64X128MixRandom      is reproducible true
L64X256MixRandom      is reproducible true
L64X1024MixRandom     is reproducible true
L128X128MixRandom     is reproducible true
L128X256MixRandom     is reproducible false
L128X1024MixRandom    is reproducible true

---------- BEGIN SOURCE ----------
Driver program provided.
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
None. The user will be unaware that the input byte[] has been ignored and a default instance was returned.


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-03-13 21:29;tongwan;L128X256MixRandomBug.java;https://bugs.openjdk.org/secure/attachment/98272/L128X256MixRandomBug.java",,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wbjn:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2022-03-13 21:32;tongwan;The observations on Windows 10:
JDK 8 and 11 are not applicable.
JDK 17: Failed, L128X256MixRandom is reproducible false
JDK 18ea+29: Failed.
JDK 19ea+3: Failed.;;;","2022-04-12 08:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8207
Date: 2022-04-12 15:37:19 +0000;;;","2022-04-12 10:40;dukebot;Changeset: 19b140a7
Author:    Raffaello Giulietti <raffaello.giulietti@oracle.com>
Committer: Joe Darcy <darcy@openjdk.org>
Date:      2022-04-12 17:36:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/19b140a7f30ea600d66bcf8370d94f5d6bf6d0d1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"sun.security.x509.X509CertImpl.delete(""x509.info.validity"") nulls out info field",JDK-8283082,5070162,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,weijun,webbuggrp,webbuggrp,2022-03-12 10:38,2023-02-27 12:04,2023-10-01 09:56,2022-07-12 13:17,11,17,18,19,8,,,,,20,security-libs,,0,dcsaw,reproducer-yes,starter-bug,webbug,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
sun.security.x509.X509CertImpl.delete(""x509.info.validity"") nulls out info field instead of calling info.delete(""validity"").

Look at the lines 744-748, https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/sun/security/x509/X509CertImpl.java#L744

            if (attr.getSuffix() != null) {
                info = null;
            } else {
                info.delete(attr.getSuffix());
            }

It seems like the if condition should be negated (or ""if"" branches swapped) in order to do the right thing. 

I understand the client is not normally expected to call this code, because X509CertImpl instance is supposed to remain read-only once initialized from the certificate content.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Initialize X509CertImpl by calling: 

X509CertImpl x509CertImpl = (X509CertImpl) CertificateFactory.getInstance(""X.509"").generateCertificate(<certficate-input-stream>);

disable readOnly flag with:         

Field readOnlyField = X509CertImpl.class.getDeclaredField(""readOnly"");
readOnlyField.setAccessible(true);
readOnlyField.set(x509CertImpl, false);

then execute: 

x509CertImpl.delete(X509CertImpl.NAME + ""."" + X509CertImpl.INFO + ""."" + X509CertInfo.VALIDITY);

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
I expect that ""validity"" field gets ""deleted"", i.e. null-ed out.
ACTUAL -
Instead null-ing happens to the ""info"" field, one level higher in the hierarchy of the qualified name given.

---------- BEGIN SOURCE ----------
import sun.security.x509.X509CertImpl;
import sun.security.x509.X509CertInfo;

import java.io.ByteArrayInputStream;
import java.lang.reflect.Field;
import java.nio.charset.StandardCharsets;
import java.security.cert.CertificateFactory;

public class X509CertImplTest {
    public static void main(String[] args) throws Exception {
        final String cert = ""-----BEGIN CERTIFICATE-----\n"" +
            ""MIIBLjCB1qADAgECAgEBMAoGCCqGSM49BAMCMBIxEDAOBgNVBAMMB2xvY2FsQ0Ew\n"" +
            ""HhcNMjIwMzEwMjMyMjU2WhcNMjIwMzExMjMyMjU2WjAUMRIwEAYDVQQDDAlsb2Nh\n"" +
            ""bGhvc3QwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATSJzFRm9VrWVhcvrb6k/ql\n"" +
            ""PvlhDQdNnUkx9v/LmvoLmM8Wqpw7+805V9ke51P/UbB3UreprwY0SEV18URYY/fM\n"" +
            ""oxswGTAXBgNVHREBAf8EDTALgglsb2NhbGhvc3QwCgYIKoZIzj0EAwIDRwAwRAIg\n"" +
            ""aKRZuRQR+JJCLwqyr5Xbww6fHSBJuxk/63nNxx/yJzECICJZEuDo4a0gL6BprdEK\n"" +
            ""06U7+ookw2vCAy99Qc9p34T4\n"" +
            ""-----END CERTIFICATE-----\n"";

        CertificateFactory certificateFactory = CertificateFactory.getInstance(""X.509"");
        ByteArrayInputStream inStream = new ByteArrayInputStream(cert.getBytes(StandardCharsets.US_ASCII));
        X509CertImpl x509CertImpl = (X509CertImpl) certificateFactory.generateCertificate(inStream);

        //disable readOnly flag
        Field readOnlyField = X509CertImpl.class.getDeclaredField(""readOnly"");
        readOnlyField.setAccessible(true);
        readOnlyField.set(x509CertImpl, false);

        //act
        x509CertImpl.delete(X509CertImpl.NAME + ""."" + X509CertImpl.INFO + ""."" + X509CertInfo.VALIDITY);

        X509CertInfo info = (X509CertInfo) x509CertImpl.get(X509CertImpl.NAME + ""."" + X509CertImpl.INFO);
        assert info != null; // assertion fails if assertions are enabled
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
None.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-03-13 21:01;tongwan;X509CertImplTest.java;https://bugs.openjdk.org/secure/attachment/98271/X509CertImplTest.java",,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wbh7:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,Not verified,,"2022-03-13 21:15;tongwan;The observations on Windows 10:
JDK 8: Failed, assert failed.
JDK 11: Failed.
JDK 17: Failed.
JDK 18ea+29: Failed.
JDK 19ea+3: Failed.;;;","2022-06-28 01:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9306
Date: 2022-06-28 08:33:58 +0000;;;","2022-07-12 13:17;dukebot;Changeset: 31f7fc04
Author:    Jayashree Huttanagoudar <jhuttana@redhat.com>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2022-07-12 20:12:22 +0000
URL:       https://git.openjdk.org/jdk/commit/31f7fc043b4616cb2d5f161cda357d0ebfb795f0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/jvmti/vthread/GetSetLocalTest/GetSetLocalTest.java failing in loom repo,JDK-8283076,5070169,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,alanb,alanb,2022-03-13 09:10,2022-03-21 21:43,2023-10-01 09:56,2022-03-21 21:43,repo-loom,,,,,,,,,repo-loom,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,,"This test is failing regularly in the loom repo on macosx-aarch64, typical output is:

----------System.out:(39/2210)----------
Agent_OnLoad started
Agent_OnLoad finished
testSuspendedVirtualThreads: started for virtual thread: VThread-Producer
testSuspendedVirtualThreads: DEPTH > 0
testSuspendedVirtualThreads: iter: 1
test_GetSetLocal: test_GetLocal with values0
test_GetLocal: mounted: 1 depth: 25 fcount: 33
JVMTI GetLocalInstance succeed for carrier thread top frame Continuation.run()
    local String value at slot 0: msg: 
    local Thread value at slot 1: 0x14f80a640
    local int value at slot 2: 1
    local long value at slot 3: 2
    local float value at slot 5: 3.200000
    local double value at slot 6: 4.500000
test_GetSetLocal: test_SetLocal with values1
test_SetLocal: mounted: 1 depth: 25 fcount: 33
testSuspendedVirtualThreads: UNMOUNTED VTHREAD
testSuspendedVirtualThreads: iter: 6
test_GetSetLocal: test_GetLocal with values0
test_GetLocal: mounted: 0 depth: 7 fcount: 15
    local String value at slot 0: msg: 4.500000047683716
    local Thread value at slot 1: 0x14f80a670
    local int value at slot 2: 1
    local long value at slot 3: 2
    local float value at slot 5: 3.200000
    local double value at slot 6: 4.500000
test_GetSetLocal: test_SetLocal with values1
test_SetLocal: mounted: 0 depth: 7 fcount: 15
check_jvmti_status: JVMTI function returned error: JVMTI_ERROR_THREAD_NOT_ALIVE (15)
FATAL ERROR in native method: get_frame_count: error in JVMTI GetFrameCount call
	at jdk.internal.vm.Continuation.run(java.base@19-loom/Continuation.java:270)
	at java.lang.VirtualThread.runContinuation(java.base@19-loom/VirtualThread.java:217)
	at java.lang.VirtualThread$$Lambda$7/0x000000080104a858.run(java.base@19-loom/Unknown Source)
	at java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(java.base@19-loom/ForkJoinTask.java:1428)
	at java.util.concurrent.ForkJoinTask.doExec(java.base@19-loom/ForkJoinTask.java:373)
	at java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(java.base@19-loom/ForkJoinPool.java:1191)
	at java.util.concurrent.ForkJoinPool.scan(java.base@19-loom/ForkJoinPool.java:1634)
	at java.util.concurrent.ForkJoinPool.runWorker(java.base@19-loom/ForkJoinPool.java:1601)
	at java.util.concurrent.ForkJoinWorkerThread.run(java.base@19-loom/ForkJoinWorkerThread.java:167)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wbir:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-03-21 21:43;sspitsyn;The suggested fix is:

https://github.com/openjdk/loom/commit/54f76b552a292359e3cf1be7db532f1b4ceaaf21;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bad IllegalArgumentException message for out of range rank from ClassDesc.arrayType(int),JDK-8283075,5070159,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,darcy,webbuggrp,webbuggrp,2022-03-12 08:50,2022-08-17 11:26,2023-10-01 09:56,2022-03-15 10:35,17,18,19,,,,,,,19,core-libs,,0,19ea,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The message computation for the `IllegalArgumentException` that’s thrown when calling `ClassDesc.arrayType(int)` in a way that results in the array type having more than 255 dimensions is incorrect.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the attached Java program.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The message of the thrown `IllegalArgumentException` should be: “rank: 300”
ACTUAL -
The `IllegalArgumentException` has the message:
```
Exception in thread ""main"" java.lang.IllegalArgumentException: rank: 100200
	at java.base/java.lang.constant.ClassDesc.arrayType(ClassDesc.java:177)
	at Test.main(Test.java:7)
```

---------- BEGIN SOURCE ----------
import static java.lang.constant.ConstantDescs.*;

public class Test {
	public static void main(final String... args) {
		CD_Object
			.arrayType(100)
			.arrayType(200);
	}
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-03-13 06:34;tongwan;Test.java;https://bugs.openjdk.org/secure/attachment/98269/Test.java",,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wbgj:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-03-13 06:32;tongwan;The observations on Windows 10:
JDK 17: Failed, threw java.lang.IllegalArgumentException: rank: 100200
JDK 18ea+29: Failed.
JDK 19ea+3: Failed.;;;","2022-03-13 08:19;alanb;Yes, the IAE message is confusing as it trying to include the resulting rank. It uses string concatenation instead of addition. In any case, it should be fixed.;;;","2022-03-14 13:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7812
Date: 2022-03-14 19:56:17 +0000;;;","2022-03-15 10:35;dukebot;Changeset: 32f8437d
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-03-15 17:33:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/32f8437d85a003914d5ca35bdddebdc732ab222d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"javax/swing/JTable/8236907/LastVisibleRow.java failed with ""RuntimeException: Test Case Failed!!""",JDK-8283070,5070156,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,dcubed,dcubed,2022-03-12 06:15,2023-01-30 17:10,2023-10-01 09:56,2022-04-05 04:10,19,,,,,,,,,19,client-libs,,0,intermittent,sn_115,tier4,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

javax/swing/JTable/8236907/LastVisibleRow.java

Here's a snippet from the log file:

#section:main
----------messages:(5/190)----------
command: main LastVisibleRow
reason: User specified action: run main LastVisibleRow 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 3.542
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(11/611)----------
java.lang.RuntimeException: Test Case Failed!!
	at LastVisibleRow.main(LastVisibleRow.java:81)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test Case Failed!!
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Test Case Failed!!
----------rerun:(43/5339)*----------
",,,,,,,,,,JDK-8284278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284278,,,,,,,,,,,JDK-8284619,,,,,,"2022-03-28 23:46;tr;VirtualBox_Ubuntu21_04_29_03_2022_12_14_45_1.png;https://bugs.openjdk.org/secure/attachment/98393/VirtualBox_Ubuntu21_04_29_03_2022_12_14_45_1.png",,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2wbfv:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-03-13 21:03;psadhukhan;Related to JDK-8236907;;;","2022-03-23 19:05;prr;This machine is running tests reliably so this is probably test instability.
The error message points to .. well .. nothing .. so maybe more diagnostics needs to be printed when it does fail.
Even if the cause can't be diagnosed then fixing that is suggested.;;;","2022-03-24 06:12;tr;No issue found in Ubuntu 20.04, will make the setup and do the testing in 21.04.;;;","2022-03-28 23:41;tr;Tried reproducing the issue in VM installed Ubuntu 21.04 and 21.10, issue not reproducible. The test case captures the images before and after the Button click and compares the two images, which in turn expects both the images to be matched. Exception in the above scenarios indicates that the two images are not matching, resulting in test case failure.;;;","2022-03-29 00:12;psadhukhan;Try reproducing in the mach5 linux system running full ""open/test/jdk/:jdk_desktop_part1"""" test with this debug image write when RuntimeException is thrown

ImageIO.write(bufferedImageBefore, ""png"", new File(""bufferedImageBefore.png"");
ImageIO.write(bufferedImageAfter, ""png"", new File(""bufferedImageAfter.png"");

Then when this test fail, this 2 png file can be inspected to see what is the difference causing it to fail.;;;","2022-04-05 04:10;dukebot;Changeset: f20ed336
Author:    Tejesh R <tejesh.r@oracle.com>
Committer: Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-04-05 11:09:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f20ed33618efaad308a71814a79a580b709b8152
;;;","2022-04-08 17:20;dcubed;This fix is in jdk-19+17-1120.;;;",,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/event/gc/detailed/TestZPageAllocationEvent.java failing in loom repo,JDK-8283069,5070155,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,alanb,alanb,2022-03-12 01:28,2022-03-19 12:33,2023-10-01 09:56,2022-03-19 12:33,repo-loom,,,,,,,,,repo-loom,hotspot,,0,wrapper,,,,,,,,,,,,,,,,,,"jdk/jfr/event/gc/detailed/TestZPageAllocationEvent.java times out regularly in the loom repo, tier4. This tier runs the tests with the jtreg main wrapper.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278537,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wbfn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-03-15 10:41;mgronlun;JDK-8278537 was closed after testing locally and in mach5, with reference to the fixes for supporting recursive thread id requests. This problem have unfortunately re-appeared.

It turns out that not only getting the thread id, but also stackwalking accesses oops, and this means that also stackwalking becomes recursive for ZGC.

Working to find a way so that a stackwalk can be done without touching oops.;;;","2022-03-19 12:33;mgronlun;Fixed in https://github.com/openjdk/loom/commit/6cad8075e06060f396c10c41c66897fcb427d423;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix non-singleton LoggerFinder error message: s/on/one,JDK-8283049,5070130,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2022-03-11 10:28,2022-03-16 18:08,2023-10-01 09:56,2022-03-14 10:57,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,"When multiple LoggerFinder implementations are found, a ServiceConfigurationError is thrown with message ""More than on LoggerFinder implementation"" rather than ""More than one LoggerFinder implementation"" (s/on/one).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wba3:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3cc899dc,,,,,,,,,"2022-03-11 10:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7780
Date: 2022-03-10 22:28:14 +0000;;;","2022-03-14 10:57;dukebot;Changeset: 70bd57ed
Author:    Carter Kozak <ckozak@ckozak.net>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-03-14 17:54:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/70bd57ed3544cdb41029d425507ba4b9b35c8cdb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Polish java.lang.foreign javadoc,JDK-8283042,5070121,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-03-11 07:07,2022-03-14 09:45,2023-10-01 09:56,2022-03-14 09:45,repo-panama,,,,,,,,,,tools,,0,foreign-preview,,,,,,,,,,,,,,,,,,"The javadoc of the java.lang.foreign package has several inconsistencies:

* not all the classes say what should happen when a `null` is passed; similarly what is done in other APIs, we should list the null-hostile behavior higher-up, in the package level javadoc.

* the notes for value-based and thread-safe are not always consistent.

* Method javadoc uses a mixture of third person and infinitive form.

* Inconsistent use of ""Creates"" vs. ""Returns"" vs. ""Obtains"". Following some analysis in JDK code, ""Creates"" is the common option for indicating creation of something that didn't exist before. ""Returns"" is used in a number of occurrences, including withers. Whereas ""Obtains"" seems relatively uncommon in the JDK and should be replaced.

* The first sentence of many javadoc methods is too long, and lead to a polluted summary page.

* The javadoc for some methods (e.g. GroupLayout::equals) is not rendered correctly, due to an issue in javadoc.

* the ""new"" term is used in several places, not always appropriately (e.g. when we create a slice of a segment, we don't necessarily return a ""new"" segment)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wb83:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-03-11 07:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/669
Date: 2022-03-11 15:16:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[javadoc] Crashes using {@return} with @param,JDK-8283041,5070120,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prappo,jlaskey,jlaskey,2022-03-11 06:46,2022-03-16 18:07,2023-10-01 09:56,2022-03-11 14:43,19,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,"When compiling code with

            /**
             * @param i  array index
             *
             * {@return long value at index}
             */
            private long getLong(int i) {
                return primitives[i];
            }

Had the following reproducible crash,

An exception has occurred in the compiler (19-internal). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
com.sun.tools.javac.util.ClientCodeException: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at jdk.compiler.interim/com.sun.tools.javac.api.ClientCodeWrapper$WrappedTaskListener.started(ClientCodeWrapper.java:869)
	at jdk.compiler.interim/com.sun.tools.javac.api.MultiTaskListener.started(MultiTaskListener.java:119)
	at jdk.compiler.interim/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1309)
	at jdk.compiler.interim/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
	at jdk.compiler.interim/com.sun.tools.javac.main.Main.compile(Main.java:317)
	at jdk.compiler.interim/com.sun.tools.sjavac.comp.SjavacImpl.compile(SjavacImpl.java:117)
	at jdk.compiler.interim/com.sun.tools.sjavac.comp.PooledSjavac.lambda$compile$0(PooledSjavac.java:63)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at jdk.compiler.interim/com.sun.tools.javac.util.List.get(List.java:490)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.Checker.visitReturn(Checker.java:988)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.Checker.visitReturn(Checker.java:110)
	at jdk.compiler.interim/com.sun.tools.javac.tree.DCTree$DCReturn.accept(DCTree.java:910)
	at jdk.compiler.interim/com.sun.source.util.DocTreePathScanner.scan(DocTreePathScanner.java:76)
	at jdk.compiler.interim/com.sun.source.util.DocTreeScanner.scanAndReduce(DocTreeScanner.java:88)
	at jdk.compiler.interim/com.sun.source.util.DocTreeScanner.scan(DocTreeScanner.java:103)
	at jdk.compiler.interim/com.sun.source.util.DocTreeScanner.scanAndReduce(DocTreeScanner.java:111)
	at jdk.compiler.interim/com.sun.source.util.DocTreeScanner.visitParam(DocTreeScanner.java:374)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.Checker.visitParam(Checker.java:922)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.Checker.visitParam(Checker.java:110)
	at jdk.compiler.interim/com.sun.tools.javac.tree.DCTree$DCParam.accept(DCTree.java:805)
	at jdk.compiler.interim/com.sun.source.util.DocTreePathScanner.scan(DocTreePathScanner.java:76)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.Checker.visitDocComment(Checker.java:298)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.Checker.visitDocComment(Checker.java:110)
	at jdk.compiler.interim/com.sun.tools.javac.tree.DCTree$DCDocComment.accept(DCTree.java:346)
	at jdk.compiler.interim/com.sun.source.util.DocTreePathScanner.scan(DocTreePathScanner.java:55)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.Checker.scan(Checker.java:254)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$2.visitDecl(DocLint.java:298)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitMethod(DocLint.java:422)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitMethod(DocLint.java:399)
	at jdk.compiler.interim/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:953)
	at jdk.compiler.interim/com.sun.source.util.TreePathScanner.scan(TreePathScanner.java:86)
	at jdk.compiler.interim/com.sun.source.util.TreeScanner.scanAndReduce(TreeScanner.java:96)
	at jdk.compiler.interim/com.sun.source.util.TreeScanner.scan(TreeScanner.java:111)
	at jdk.compiler.interim/com.sun.source.util.TreeScanner.scanAndReduce(TreeScanner.java:119)
	at jdk.compiler.interim/com.sun.source.util.TreeScanner.visitClass(TreeScanner.java:203)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitClass(DocLint.java:417)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitClass(DocLint.java:399)
	at jdk.compiler.interim/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:860)
	at jdk.compiler.interim/com.sun.source.util.TreePathScanner.scan(TreePathScanner.java:86)
	at jdk.compiler.interim/com.sun.source.util.TreeScanner.scanAndReduce(TreeScanner.java:96)
	at jdk.compiler.interim/com.sun.source.util.TreeScanner.scan(TreeScanner.java:111)
	at jdk.compiler.interim/com.sun.source.util.TreeScanner.scanAndReduce(TreeScanner.java:119)
	at jdk.compiler.interim/com.sun.source.util.TreeScanner.visitClass(TreeScanner.java:203)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitClass(DocLint.java:417)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitClass(DocLint.java:399)
	at jdk.compiler.interim/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:860)
	at jdk.compiler.interim/com.sun.source.util.TreePathScanner.scan(TreePathScanner.java:86)
	at jdk.compiler.interim/com.sun.source.util.TreeScanner.scanAndReduce(TreeScanner.java:96)
	at jdk.compiler.interim/com.sun.source.util.TreeScanner.scan(TreeScanner.java:111)
	at jdk.compiler.interim/com.sun.source.util.TreeScanner.scanAndReduce(TreeScanner.java:119)
	at jdk.compiler.interim/com.sun.source.util.TreeScanner.visitClass(TreeScanner.java:203)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitClass(DocLint.java:417)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitClass(DocLint.java:399)
	at jdk.compiler.interim/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:860)
	at jdk.compiler.interim/com.sun.source.util.TreePathScanner.scan(TreePathScanner.java:86)
	at jdk.compiler.interim/com.sun.source.util.TreeScanner.scan(TreeScanner.java:111)
	at jdk.compiler.interim/com.sun.source.util.TreeScanner.scanAndReduce(TreeScanner.java:119)
	at jdk.compiler.interim/com.sun.source.util.TreeScanner.visitCompilationUnit(TreeScanner.java:152)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitCompilationUnit(DocLint.java:443)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitCompilationUnit(DocLint.java:399)
	at jdk.compiler.interim/com.sun.tools.javac.tree.JCTree$JCCompilationUnit.accept(JCTree.java:614)
	at jdk.compiler.interim/com.sun.source.util.TreePathScanner.scan(TreePathScanner.java:86)
	at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$3.started(DocLint.java:309)
	at jdk.compiler.interim/com.sun.tools.javac.api.ClientCodeWrapper$WrappedTaskListener.started(ClientCodeWrapper.java:865)
	... 10 more
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wb7v:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-03-11 07:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7788
Date: 2022-03-11 15:49:06 +0000;;;","2022-03-11 14:43;dukebot;Changeset: 374193b6
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-03-11 22:41:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/374193b6d2465a356941f9588a0ccf6d97cb76f6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update jdk18u fix version to 18.0.2,JDK-8283037,5070115,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,robm,robm,robm,2022-03-11 06:16,2022-04-07 04:32,2023-10-01 09:56,2022-03-11 07:09,,,,,,,,,,18.0.2,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wb6r:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@271b8dfc,,,,,,,,,"2022-03-11 07:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/41
Date: 2022-03-11 14:40:04 +0000;;;","2022-03-11 07:09;dukebot;Changeset: 6bebb34b
Author:    Rob McKenna <robm@openjdk.org>
Date:      2022-03-11 15:07:59 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/6bebb34bb49ee538e24131bfe65ddae6f636d511
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/crypto/provider/Cipher/AEAD/GCMBufferTest.java failing with -Xcomp after 8273297,JDK-8283022,5070099,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,svkamath,alanb,alanb,2022-03-11 04:16,2022-08-04 09:22,2023-10-01 09:56,2022-04-25 15:46,18,19,repo-loom,,,,,,,19,security-libs,,0,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,oracle-triage-19,,,,,,,,,,,,,,,"This test fails intermittently in the loom repo when running with the wrapper on debug builds with -Xcomp.  Maybe x64 only.

result: Failed. Execution failed: `main' threw exception: java.lang.Exception: Ciphertext mismatch (DIRECT): result (len=12357): 

	at GCMBufferTest.crypto(GCMBufferTest.java:500)
	at GCMBufferTest.encrypt(GCMBufferTest.java:311)
	at GCMBufferTest.test(GCMBufferTest.java:289)
	at GCMBufferTest.main(GCMBufferTest.java:659)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:327)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:271)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:156)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:358)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:351)
",,,,,,,,,,,JDK-8286255,JDK-8286494,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273297,,,,,,,,,,,,,,,,,,,,,,,,,,b17,18,,,,,,,"0|i2wb37:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,Verified,,"2022-03-14 02:18;dlong;All of the failures seem to be with -Xcomp.  I can't find any results for this test from jdk19 running with -Xcomp.;;;","2022-03-14 18:17;dlong;ILW = incorrect crypto result; AVX512 only; disable intrinsic or AVX512 = HMM = P2;;;","2022-03-16 17:26;dlong;This also fails in jdk-18+37 with -Xcomp.;;;","2022-03-17 03:40;dlong;Workarounds: -XX:DisableIntrinsic=_galoisCounterMode_AESCrypt, or -XX:UseAVX=2
;;;","2022-03-17 12:54;dlong;[~svkamath], please take a look at this.;;;","2022-03-17 13:47;svkamath;I will investigate this. Thank you.;;;","2022-04-17 22:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8280
Date: 2022-04-18 05:06:26 +0000;;;","2022-04-21 05:28;thartmann;Moved to security-libs because the fix is in that area.;;;","2022-04-25 15:46;dukebot;Changeset: 3416bfa2
Author:    Smita Kamath <svkamath@openjdk.org>
Committer: Anthony Scarpino <ascarpino@openjdk.org>
Date:      2022-04-25 22:45:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3416bfa2560e240b5e602f10e98e8a06c96852df
;;;","2022-05-03 15:43;svkamath;Fix Request 18u

Backporting this patch fixes the Ciphertext mismatch issue in 18u. The patch applies cleanly to 18u. 
Link to PR: https://github.com/openjdk/jdk18u/pull/120

Please approve. Thank you.;;;","2022-05-03 15:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/120
Date: 2022-05-03 22:42:34 +0000;;;",,,,,,,,,,,,,,,,,,,
riscv: Fix configure integration,JDK-8283020,5070094,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-03-11 03:07,2022-03-14 03:43,2023-10-01 09:56,2022-03-14 03:43,repo-riscv-port,,,,,,,,,repo-riscv-port,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,"The current implementation in the riscv-port modifies make/autoconf/build-aux/autoconf-* files. For legal reasons, this is not something that is allowed. Instead, we need to introduce patches in our wrapper scripts in the same directory.

This patch will restore the original contents of the autoconf-* files, and instead move this logic to the wrapper scripts.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wb23:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-03-11 03:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/riscv-port/pull/66
Date: 2022-03-11 11:16:01 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
11u GHA: Update GCC 9 minor versions,JDK-8283018,5070093,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-03-11 01:49,2022-05-03 23:58,2023-10-01 09:56,2022-03-14 03:46,11.0.15,,,,,,,,,11.0.16,infrastructure,,0,hgupdate-sync,jdk11u-critical-request,jdk11u-critical-yes,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,"Current GHA runs in 11u fail with:

E: Version '9.3.0-17ubuntu1~20.04cross2' for 'gcc-9-aarch64-linux-gnu' was not found
E: Version '9.3.0-17ubuntu1~20.04cross2' for 'g++-9-aarch64-linux-gnu' was not found

We should update these. 11u GHA workflow runs GCC 9, not GCC 10 like the rest of releases, so this is the 11u-specific bug.",,,,,,,,,,,JDK-8283815,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283778,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wb1v:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-03-11 04:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/879
Date: 2022-03-11 09:51:00 +0000;;;","2022-03-11 04:57;shade;Fix Request (11u)

Fixes GHA workflow. 11u-specific patch. See RFR.;;;","2022-03-14 03:46;roboduke;Changeset: 997c55f3
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-03-14 10:45:49 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/997c55f3600cf0c2f74de45f34934617eb3ba599
;;;","2022-03-28 03:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u/pull/35
Date: 2022-03-28 10:39:17 +0000;;;","2022-03-28 04:41;clanger;Fix request II (11u)
I'd like to bring this to 11.0.15 now to unbreak GHA. It also needs a follow up, JDK-8283778, which I'm planning to do in jdk11u directly.
Risk: zero. Only affects Github Actions.;;;","2022-05-03 23:56;dukebot;Changeset: 997c55f3
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-03-14 10:45:49 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/997c55f3600cf0c2f74de45f34934617eb3ba599
;;;",,,,,,,,,,,,,,,,,,,,,,,,
GHA: Workflows break with update release versions,JDK-8283017,5070092,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-03-11 01:26,2022-06-02 02:03,2023-10-01 09:56,2022-03-14 02:06,11,17,18,19,,,,,,19,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,redhat-interest,,,,,,,,,,,"Current GHA workflow only takes VERSION_FEATURE to deduce the bundle names, which means the test jobs in GHA workflows are unable to run.

See for example JDK 18u GHA run:

Build step produce:

Creating jdk-18.0.1-internal+0_linux-x64_bin.tar.gz
Creating jdk-18.0.1-internal+0_linux-x64_bin-symbols.tar.gz
Creating jdk-18.0.1-internal+0_linux-x64_bin-tests-demos.tar.gz

Persist step fails to find it:

Warning: No files were found with the provided path: jdk/build/linux-x64/bundles/jdk-18-internal+0_linux-x64_bin.tar.gz

...because it looks for ""18"", not ""18.0.1"".

17u and 11u hacked the GHA workflow to get tests to work (see JDK-8276130), but this would keep breaking in update releases as 19.0.1, 20.0.1, etc. fork out of the mainline. We should instead fix that in the mainline workflow config.",,,,,,,,,,,JDK-8283165,JDK-8287723,JDK-8283212,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276130,,,,,,JDK-8287336,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wb1n:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-03-11 07:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7785
Date: 2022-03-11 09:27:55 +0000;;;","2022-03-14 02:06;dukebot;Changeset: 01570ca9
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-03-14 09:03:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/01570ca92d234481df2d540027e320b91af415a0
;;;","2022-03-14 02:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/45
Date: 2022-03-14 09:06:34 +0000;;;","2022-03-14 02:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/243
Date: 2022-03-14 09:10:33 +0000;;;","2022-03-14 08:26;shade;Fix Request (18u)

Fixes the GHA testing for 18u. Patch applies cleanly. GHA is green.;;;","2022-03-14 08:26;shade;Fix Request (17u)

Reworks the JDK-8276130 patch for 17u, therefore does not apply cleanly. GHA is still green after this.;;;","2022-05-23 23:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1104
Date: 2022-05-24 06:33:13 +0000;;;","2022-05-25 01:21;clanger;Fix Request (11u)

Requesting backport to keep GHA templates in sync. It also fixes a minor issue with the Mac Aarch64 workflow. Risk is zero as it only affects the GitHub Actions workflow.;;;",,,,,,,,,,,,,,,,,,,,,,
Create a test for JDK-4715496,JDK-8283015,5070090,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-03-11 01:24,2022-08-01 02:07,2023-10-01 09:56,2022-03-29 15:28,11,17,18,19,8,,,,,19,client-libs,,0,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,"Create a test for JDK-4715496

JTable.AccessibleJTableCell.getAccessible name returns the cell instance string instead of the cell text.
The test is being added to verify the same.
",,,,,,,,,,,JDK-8291619,JDK-8289271,JDK-8291617,JDK-8289564,JDK-8289667,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wb17:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-03-11 06:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7787
Date: 2022-03-11 14:17:01 +0000;;;","2022-03-29 15:27;dukebot;Changeset: bfd9c2b3
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2022-03-29 22:26:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bfd9c2b30f17d3341cbe7f48d13d36708e5fafbf
;;;","2022-07-29 09:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/611
Date: 2022-07-29 16:14:15 +0000;;;","2022-07-29 09:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1288
Date: 2022-07-29 16:24:21 +0000;;;","2022-07-31 05:12;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.17/17.0.5-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Simplify Arguments::parse_argument(),JDK-8283013,5070088,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,iklam,iklam,2022-03-11 00:20,2022-04-06 23:59,2023-10-01 09:56,2022-03-31 08:47,19,,,,,,,,,19,hotspot,,0,cmd,,,,,,,,,,,,,,,,,,"The current implementation of  Arguments::parse_argument() seems too complicated:

https://github.com/openjdk/jdk/blob/f8878cb0cc436993ef1222bc13b00b923d91aad1/src/hotspot/share/runtime/arguments.cpp#L1032

It makes a series of sscanf calls. The worst one is here: 

#define SIGNED_FP_NUMBER_RANGE ""[-0123456789.eE+]""
#define SIGNED_NUMBER_RANGE    ""[-0123456789]""
#define        NUMBER_RANGE    ""[0123456789eE+-]""
  char value[BUFLEN + 1];
  char value2[BUFLEN + 1];
  if (sscanf(arg, ""%"" XSTR(BUFLEN) NAME_RANGE ""="" ""%"" XSTR(BUFLEN) SIGNED_NUMBER_RANGE ""."" ""%"" XSTR(BUFLEN) NUMBER_RANGE ""%c"", name, value, value2, &dummy) == 3) {
    // Looks like a floating-point number -- try again with more lenient format string
    if (sscanf(arg, ""%"" XSTR(BUFLEN) NAME_RANGE ""="" ""%"" XSTR(BUFLEN) SIGNED_FP_NUMBER_RANGE ""%c"", name, value, &dummy) == 2) {
      real_name = handle_aliases_and_deprecation(name, warn_if_deprecated);
      if (real_name == NULL) {
        return false;
      }
      JVMFlag* flag = JVMFlag::find_flag(real_name);
      return set_fp_numeric_flag(flag, value, origin);
    }
  }

However, the syntax of -XX is very simple

    -XX:+<name>
    -XX:-<name>
    -XX:<name>=<value>
    -XX:<name>:=<value>

It should be much easier to parse the string once, find out the <name>, <value> and the operator (+, -, =, or :=), and then parse the <value> according the type of <name>

This will make the code faster and easier to understand. It also avoid the following bug:

If you specify a double argument that has no decimal points. e.g., 

  java -XX:SomeDoubleArgument=1234567890

The VM first parses the input into a 64-bit integer, and then convert that to double. However, this means the user cannot specify an integer that's larger than the largest number representable by a 64-bit integer:

$ java -XX:InlineFrequencyRatio=1000000000000000000000000 -version
Improperly specified VM option 'InlineFrequencyRatio=1000000000000000000000000'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.

$ java -XX:InlineFrequencyRatio=1000000000000000000000000.0 -version
java version ""19-internal"" 2022-09-20
Java(TM) SE Runtime Environment (slowdebug build 19-internal-adhoc.iklam.zoo)
Java HotSpot(TM) 64-Bit Server VM (slowdebug build 19-internal-adhoc.iklam.zoo, mixed mode, sharing)

To fix this, we should always use strtod() to parse VM arguments of the double type.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283807,JDK-8283641,,,,,,,,,,,JDK-8284181,JDK-8282773,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wb0r:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-15 11:12;mseledtsov;ILW = MLM = P4;;;","2022-03-24 17:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7916
Date: 2022-03-23 06:19:38 +0000;;;","2022-03-28 04:37;dholmes;The original double support was added as a by-product of JDK-6430224. There is no discussion about why such crude support was added. Initially you couldn't even use an integer value for a double-flag but that was later added. So doing this the right way is long overdue.;;;","2022-03-31 08:47;dukebot;Changeset: 49fcc7a5
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-03-31 15:46:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/49fcc7a5c3619b0580b263bbbb9431ad46c0f154
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"serviceability/sa/ClhsdbThread.java failed with ""'Base of Stack:' missing from stdout/stderr """,JDK-8283010,5070085,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2022-03-11 00:13,2022-09-14 21:36,2023-10-01 09:56,2022-09-07 14:55,19,,,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,"I saw the following failure with ClhsdbThread.java once on Windows:

java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'Base of Stack:' missing from stdout/stderr 

	at ClhsdbThread.main(ClhsdbThread.java:108)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1480)
Caused by: java.lang.RuntimeException: 'Base of Stack:' missing from stdout/stderr 
	at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:340)
	at ClhsdbLauncher.runCmd(ClhsdbLauncher.java:166)
	at ClhsdbLauncher.run(ClhsdbLauncher.java:203)
	at ClhsdbThread.main(ClhsdbThread.java:104)
	... 4 more

In the log you also see:

...
18 Finalizer
State: BLOCKED
Stack in use by Java: 0x000000864f1ff0d0 .. 0x000000864f1ff300
Base of Stack: 0x000000864f200000
Last_Java_SP: 0x000000864f1ff0d0
Last_Java_FP: null
Last_Java_PC: 0x000001bce09683e3
...
Thread Id obtained is: 18
...
hsdb> + thread 18
Couldn't find thread thread

The test finds the above ""Finalizer"" thread output, gleans the threadId from it, and then attempts to use the thread command on that threadId, but there is no longer a thread with that threadId.

This appears to be the same issue as JDK-8280770. Basically each time you attach to a target JVM, thread Id's can change. There is some explanation as to why this can happen in the CR:

https://bugs.openjdk.java.net/browse/JDK-8280770?focusedCommentId=14472814&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14472814

And also some discussion in the PR:

https://github.com/openjdk/jdk/pull/7259#issuecomment-1024508580

So bottom line is that you cannot reliable glean usable threadIds from a previous clhsdb shell session in this manner. The fix for JDK-8280770 was to just accept that on Windows you it might not work, so the output is no longer checked. We can do the same for this test.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280770,,,,,,JDK-8283578,JDK-8293445,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2wb03:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-03-11 00:24;cjplummer;When fixing this bug, it would be nice to also fix the following bug in the error output:

hsdb> + thread 18
Couldn't find thread thread 

The code looks like:

                        out.println(""Couldn't find thread "" + name);

""name"" is the name of the command. It should instead be ""id"".;;;","2022-04-26 11:21;cjplummer;For JDK-8283578 I'm working on a solution to this general testing issue of relaunching clhsdb for each clhsdb sub-command we want to execute. The issue in this CR would be resolved if we only launched clhsdb once, and sent multiple commands to it. The tricky part is getting the output after each command so the next command can be formed. This is what I'm hoping to accomplish with the fix for JDK-8283578. If successful, the same technique can be applied to this CR.;;;","2022-09-06 12:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10185
Date: 2022-09-06 19:26:09 +0000;;;","2022-09-07 14:55;dukebot;Changeset: 51de7658
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-09-07 21:51:46 +0000
URL:       https://git.openjdk.org/jdk/commit/51de765867d4d44fc2e2953a0296ca6804135d89
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
windows-x86-cmp-baseline fails in some jvmti native libs,JDK-8283001,5070075,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,iklam,iklam,2022-03-10 20:47,2022-05-18 23:13,2023-10-01 09:56,2022-05-11 19:31,,,,,,,,,,19,hotspot,,0,noreg-self,reproducible-build,,,,,,,,,,,,,,,,,"Some methods in jvmti libs missed JNICALL 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2waxv:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-05-10 13:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8641
Date: 2022-05-10 20:23:01 +0000;;;","2022-05-11 19:31;dukebot;Changeset: 82d25700
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-05-12 02:30:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/82d257006d6337920bbc78a33cf61c3cb809ce4b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah Generational: Mutator threads may fail to evacuate,JDK-8282997,5070069,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,,kdnilsen,kdnilsen,2022-03-10 17:23,2023-07-24 14:34,2023-10-01 09:56,2023-07-24 14:34,,,,,,,,,,,hotspot,,0,gc-shenandoah,,,,,,,,,,,,,,,,,,"We've observed an assertion error that results when a mutator thread tries to cancel GC due to an allocation failure for an evacuation.  The following stack trace demonstrates the issue:
```
Thread 2 hit Breakpoint 2, report_vm_error (file=0x0, line=0, error_msg=0x0, detail_fmt=0x0) at /home/ubuntu/Devel/kdnilsen/gitfarm\
/borrow-from-old-gen/src/hotspot/share/utilities/debug.cpp:269
269     {
Current language:  auto
The current source language is ""auto; currently c++"".
(rr) up

#1  0x000012b0211ce129 in ThreadStateTransition::transition_from_vm (thread=Reading in symbols for /home/ubuntu/Devel/kdnilsen/gitf\
arm/borrow-from-old-gen/src/hotspot/share/runtime/thread.cpp...done.
0xbd97809a310, to=_thread_blocked, check_asyncs=true) at /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-old-gen/src/hotspot/share/\
runtime/interfaceSupport.inline.hpp:106
106         assert(thread->thread_state() == _thread_in_vm, ""coming from wrong thread state"");
(rr) p thread->thread_state()
Reading in symbols for /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-old-gen/src/hotspot/share/memory/allocation.cpp...done.
Reading in symbols for /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-old-gen/src/hotspot/share/gc/shared/threadLocalAllocBuffer.c\
pp...done.
Reading in symbols for /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-old-gen/src/hotspot/share/gc/shared/gcUtil.cpp...done.
Reading in symbols for /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-old-gen/src/hotspot/share/runtime/mutex.cpp...done.
Reading in symbols for /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-old-gen/src/hotspot/os/posix/os_posix.cpp...done.
$1 = _thread_in_Java

;; The assertion requires thread state to be _thread_in_vm

 (rr) where
 #0  report_vm_error (file=0x0, line=0, error_msg=0x0, detail_fmt=0x0) at /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-old-gen/s\
rc/hotspot/share/utilities/debug.cpp:269
 #1  0x000012b0211ce129 in ThreadStateTransition::transition_from_vm (thread=0xbd97809a310, to=_thread_blocked, check_asyncs=true) \
at /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-old-gen/src/hotspot/share/runtime/interfaceSupport.inline.hpp:106

 #2  0x000012b0211ce869 in ThreadBlockInVMPreprocess<void (JavaThread*)>::ThreadBlockInVMPreprocess(JavaThread*, void (&)(JavaThrea\
d*), bool) (Reading in symbols for /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-old-gen/src/hotspot/share/gc/shenandoah/shenando\
ahHeap.cpp...done.
 this=0x7ff1b80f0580, thread=0xbd97809a310, pr=@0x12b0211ce7ef: {void (JavaThread *)} 0x12b0211ce7ef <ThreadBlockInVMPreprocess<voi\
d (JavaThread*)>::emptyOp(JavaThread*)>, allow_suspend=false) at /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-old-gen/src/hotspo\
t/share/runtime/interfaceSupport.inline.hpp:227

 #3  0x000012b021dda7bd in ShenandoahHeap::try_cancel_gc (this=0xbd9780b4b20) at /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-ol\
d-gen/src/hotspot/share/gc/shenandoah/shenandoahHeap.cpp:2170

 #4  0x000012b021dda86b in ShenandoahHeap::cancel_gc (Reading in symbols for /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-old-ge\
n/src/hotspot/share/gc/shenandoah/shenandoahControlThread.cpp...done.
 this=0xbd9780b4b20, cause=GCCause::_shenandoah_allocation_failure_evac) at /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-old-gen\
/src/hotspot/share/gc/shenandoah/shenandoahHeap.cpp:2185

 #5  0x000012b021dba276 in ShenandoahControlThread::handle_alloc_failure_evac (Reading in symbols for /home/ubuntu/Devel/kdnilsen/g\
itfarm/borrow-from-old-gen/src/hotspot/cpu/x86/abstractInterpreter_x86.cpp...done.
 this=0xbd9781249d0, words=2) at /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-old-gen/src/hotspot/share/gc/shenandoah/shenandoah\
ControlThread.cpp:823

 #6  0x000012b020f42b4c in ShenandoahHeap::try_evacuate_object (this=0xbd9780b4b20, p=0x60336f6c8, thread=0xbd97809a310, from_regio\
n=0x764871e92600, target_gen=YOUNG_GENERATION) at /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-old-gen/src/hotspot/share/gc/shen\
andoah/shenandoahHeap.inline.hpp:445

 #7  0x000012b020f42843 in ShenandoahHeap::evacuate_object (Reading in symbols for /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-\
old-gen/src/hotspot/share/gc/shenandoah/shenandoahRuntime.cpp...done.
 this=0xbd9780b4b20, p=0x60336f6c8, thread=0xbd97809a310) at /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-old-gen/src/hotspot/sh\
are/gc/shenandoah/shenandoahHeap.inline.hpp:365

 #8  0x000012b021e61237 in ShenandoahBarrierSet::load_reference_barrier_mutator<narrowOop> (this=Reading in symbols for /home/ubunt\
u/Devel/kdnilsen/gitfarm/borrow-from-old-gen/src/hotspot/share/gc/shenandoah/shenandoahBarrierSet.cpp...done.
 0xbd9780dfd20, obj=0x60336f6c8, load_addr=0x7fe840fbc) at /home/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-old-gen/src/hotspot/shar\
e/gc/shenandoah/shenandoahBarrierSet.inline.hpp:71

 #9  0x000012b021e60457 in ShenandoahRuntime::load_reference_barrier_strong_narrow (src=0x60336f6c8, load_addr=0x7fe840fbc) at /hom\
e/ubuntu/Devel/kdnilsen/gitfarm/borrow-from-old-gen/src/hotspot/share/gc/shenandoah/shenandoahRuntime.cpp:59
 #10 0x0000647e7aaf997f in ?? ()
 #11 0x0000084f00000001 in ?? ()
 #12 0x0000000000000000 in ?? ()
```
There has been discussion with engineers responsible for the design of the Shenandoah OOM-during-evacuation protocol, and the current assessment is that some redesign of this protocol is required.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305403,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wawj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-03-10 17:30;kdnilsen;I made an attempt to satisfy the constraints of the assertion by forcing the thread state to transition before enterring the thread-blocking protocol.  This attempt is represented by: https://github.com/openjdk/shenandoah/commit/2132a6d151e4c46b71a220100fa478a8be676f13

Further testing revealed that this solution was inadequate.  I subsequently encountered a related crash:
```
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/ubuntu/Devel/kdnilsen/gitfarm/balance-without-cancel/src/hotspot/share/runtime/thread.cpp:956), pid=989524\
, tid=989806
#  assert(false) failed: Possible safepoint reached by thread that does not allow it
#
# JRE version: OpenJDK Runtime Environment (19.0) (slowdebug build 19-internal+0-adhoc.ubuntu.balance-without-cancel)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 19-internal+0-adhoc.ubuntu.balance-without-cancel, mixed mode, tiered, compressed oo\
ps, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1395e26]  JavaThread::check_possible_safepoint()+0x34
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or du\
mping to /home/ubuntu/Devel/kdnilsen/tmp/debug-balance/core.989524)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:-UseNUMA -XX:ActiveProcessorCount=8 -Xmx8g -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:+UnlockExpe\
rimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:-ShenandoahPacing -XX:+ShenandoahVerify -XX:-ShenandoahUncommit -Xlog:gc*=info\
,safepoint*=info:results/genshen/dacapo-hunt/eclipse.jvm.log::filecount=0,filesize=0 -javaagent:/home/ubuntu/Devel/kdnilsen/lib/jHi\
ccup-2.0.10/jHiccup.jar=-l,results/genshen/dacapo-hunt/h2.jhiccup.log,-i,1000,-a /home/ubuntu/Devel/kdnilsen/lib/dacapo-evaluation-\
git+309e1fa.jar --scratch-directory /home/ubuntu/Devel/kdnilsen/tmp/dacapo --no-validation --converge --variance 5 --no-pre-iterati\
on-gc --iterations 10 --size small eclipse

Host: ip-172-31-83-171, Intel(R) Xeon(R) Platinum 8275CL CPU @ 3.00GHz, 1 cores, 188G, Ubuntu 20.04.3 LTS
Time: Sun Mar  6 04:49:38 2022 UTC elapsed time: 7953.731888 seconds (0d 2h 12m 33s)

---------------  T H R E A D  ---------------

Current thread (0x00001c2c080ad790):  JavaThread ""Worker-1: Periodic workspace save."" [_thread_in_vm, id=989806, stack(0x00007fdf43\
1f1000,0x00007fdf432f2000)]

Stack: [0x00007fdf431f1000,0x00007fdf432f2000],  sp=0x00007fdf432f0000,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1395e26]  JavaThread::check_possible_safepoint()+0x34
V  [libjvm.so+0x5f7e38]  ThreadStateTransition::transition_from_vm(JavaThread*, JavaThreadState, bool)+0xe0
V  [libjvm.so+0x5f8443]  ThreadBlockInVMPreprocess<void (JavaThread*)>::ThreadBlockInVMPreprocess(JavaThread*, void (&)(JavaThread*\
), bool)+0x6b
V  [libjvm.so+0x5f7ea6]  ThreadBlockInVM::ThreadBlockInVM(JavaThread*, bool)+0x36
V  [libjvm.so+0x11fe4a7]  ShenandoahHeap::try_cancel_gc()+0x15b
V  [libjvm.so+0x11fe599]  ShenandoahHeap::cancel_gc(GCCause::Cause)+0x3b
V  [libjvm.so+0x11de13e]  ShenandoahControlThread::handle_alloc_failure_evac(unsigned long)+0x8a
V  [libjvm.so+0x32623d]  ShenandoahHeap::try_evacuate_object(oopDesc*, Thread*, ShenandoahHeapRegion*, ShenandoahRegionAffiliation)\
+0x2ff
V  [libjvm.so+0x325f35]  ShenandoahHeap::evacuate_object(oopDesc*, Thread*)+0x24d
V  [libjvm.so+0x1284c8f]  oopDesc* ShenandoahBarrierSet::load_reference_barrier_mutator<narrowOop>(oopDesc*, narrowOop*)+0x11d
V  [libjvm.so+0x1283f51]  ShenandoahRuntime::load_reference_barrier_strong_narrow(oopDesc*, narrowOop*)+0x4d
```
This is triggered by:
```
#ifdef ASSERT

NoSafepointVerifier::NoSafepointVerifier() : _thread(Thread::current()) {
  if (_thread->is_Java_thread()) {
    JavaThread::cast(_thread)->inc_no_safepoint_count();
  }
}

NoSafepointVerifier::~NoSafepointVerifier() {
  if (_thread->is_Java_thread()) {
    JavaThread::cast(_thread)->dec_no_safepoint_count();
  }
}
```
and the above code is executed as part of the JRT_LEAF ""macro"", which sets up NoSafepointVerifier so that any thread that tries to enter a safepoint as a JRT_LEAF will assert out.  

I reverted my previous commit on openjdk/shenandoah master.
;;;","2023-07-24 14:34;wkemper;This code we removed in JDK-8305403.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/lang/reflect/Proxy/Boxing.java failing intermittently on x64 in loom repo,JDK-8282985,5070054,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rpressler,alanb,alanb,2022-03-10 09:46,2022-03-23 02:45,2023-10-01 09:56,2022-03-23 02:45,repo-loom,,,,,,,,,,core-libs,,0,,,,,,,,,,,,,,,,,,,"This test has been failing intermittently in the loom repo for some time. The expected value varies, the only common thing is that it's always x64, never aarch64.

java.lang.RuntimeException: TEST FAILED: wrong double, expected 0.928985305751556 but got 0.0
	at Boxing$TestHandler.invoke(Boxing.java:113)
	at $Proxy19.m(Unknown Source)
	at Boxing.run(Boxing.java:87)
	at Boxing.main(Boxing.java:66)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1488)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wat7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2022-03-23 02:45;rpressler;Fixed;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong parameter passed to GetStringXXXChars in various places,JDK-8282978,5070046,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2022-03-10 07:16,2022-03-16 18:07,2023-10-01 09:56,2022-03-11 05:27,19,,,,,,,,,19,core-libs,,0,noreg-cleanup,redhat-interest,,,,,,,,,,,,,,,,,"Besides JDK-8282897, there are still places that pass JNI_FALSE as the last parameter to GetStringXXXChars, where it expects jboolean*, not jboolean.

Files:
java.desktop/unix/native/libawt_xawt/xawt/XlibWrapper.c
java.base/windows/native/libnet/Inet6AddressImpl.c
java.base/unix/native/libnet/Inet6AddressImpl.c
java.desktop/windows/native/libawt/windows/awt_Win32GraphicsEnv.cpp
java.desktop/windows/native/libawt/windows/awt_Desktop.cpp
java.desktop/windows/native/libawt/windows/awt_Checkbox.cpp
java.desktop/windows/native/libawt/windows/awt_Button.cpp


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282897,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2warf:",9223372036854775807,b14,,,,,,,,,,,"2022-03-10 13:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7779
Date: 2022-03-10 21:12:46 +0000;;;","2022-03-11 05:27;dukebot;Changeset: 0fd09d38
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-03-11 13:25:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0fd09d383b9921f26d2d609ab330630a4520325a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Rendering Issues with Borders on Windows High-DPI systems,JDK-8282958,5070025,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rmahajan,shadowbug,shadowbug,2022-03-10 04:58,2023-05-11 11:30,2023-10-01 09:56,2022-11-01 11:42,11,17,,,,,,,,20,client-libs,,0,11bpr-critical-approved,bugdb_33945310,hidpi,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sustaining,,,,,,,,,,,"There are rendering issues, especially with borders (eg. text fields or etched borders) on high DPI monitors with Windows display scaling of 125% or 150%. They are rendered with different thicknesses or sometimes missing lines with fractional scaling.",,,,,,,,,,,JDK-8296501,JDK-8296503,JDK-8299601,JDK-8297062,JDK-8302585,JDK-8302588,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8059328,JDK-8294921,JDK-8187585,JDK-8294680,,,JDK-8294484,JDK-8015739,JDK-8241561,JDK-8233789,JDK-8297450,JDK-8279614,"2022-11-18 12:03;rmahajan;ScalingIssue2.png;https://bugs.openjdk.org/secure/attachment/101686/ScalingIssue2.png","2022-11-18 12:02;rmahajan;hiDPITest.java;https://bugs.openjdk.org/secure/attachment/101685/hiDPITest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wamr:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-03-11 11:31;prr;Attach the test case. Are you sure this is a 2D bug ? I seriously doubt it. It seems like a Swing issue.
I'm going to change it. And a main bug should never be targeted to an old update release, that's what backports are for.
Also there's work in progress on a bug that deals with borders
https://bugs.openjdk.java.net/browse/JDK-8279614
so some - or all - of this may be duplicates.
And maybe this needs to be split up.;;;","2022-03-11 12:07;aivanov;[~prr] Thanks! I remember I saw a discussion about a similar issue but I couldn't find it. It was JDK-8279614.

There are other similar bugs:
• JDK-8241561: Borders are sometimes painted too thick on HiDPI screens with Windows-LAF
• JDK-8233789: A part of frame line of JComboBox lacks with HIDPI;;;","2022-03-11 13:57;rmahajan;Reproduced the issue with attached test case with 125%, 150% scaling with my
HIDPI monitor on Windows 10. Investigating further.;;;","2022-03-17 11:58;prr;The dev working on 8279614 confirmed that even though his fix isn't final (and is being reworked) that it seems like it should fix the issues with borders reported here.
So I suggest to focus first - in this bug - on the other issues with TextField etc - and yes, as Alexey maybe is implying, there may be other open more specific bugs too. This bug is trying to capture too many issues.;;;","2022-03-18 13:05;rmahajan;[~prr] I agree, tried with fix for 8279614 under code review and it fixes Radio Button group border issue I saw with this bug and saw some issues with line width as pointed out in the review.
Focusing on text fields to start with, and will also try to capture other related issues with other UI elements using sub-tasks. 
;;;","2022-05-26 17:47;rmahajan;I have applied Alisen's changes for JDK-8279614 to my latest JDK branch and I see that it is fixing the etched border issue highlighted in the bug. This change is still under review and 
needs to be approved.

I am working on Textfield border thickness issue now, where the borders show different thickness 

Stepped through in the debugger and narrowed down on the piece of code in paintBorder() in LineBorder.java for text field border. 
Trying with code from Alisen's change after modification and working on fixing this issue with that.
    ;;;","2022-06-08 12:01;vdyakov;as not on review (yet) and not a regression in 19, then move to ""20"" as a possible target
;;;","2022-06-13 10:23;rmahajan;Have a working POC that fixes the issue with different border thickness for different sides of the Textfield border.
Currently I am testing it with different DPIs, border thickness, round vs regular borders, etc. and fixing any issues highlighted in the testing.
From what I see, overall a larger and more structural change to fix all UI elements for HiDPI will be needed to fix this bug.;;;","2022-06-24 16:35;rmahajan;Current code changes for the fix are pretty much in line with Alisen's fix for JDK-8279614,

with some modifications to fit the Lineborder code.

It works good for Scale factor 1.5, 2.0, 2.5, 3.0 and the Textfield border thickness is same for all sides.

It is still not working fine for Scale factor 1.25, 1.75, 2.25, 2.75 . There is some issue where the border is getting offset by half a pixel and I am looking into checking if this can be fixed.;;;","2022-07-14 22:19;rmahajan;Applying the fix for background painting along-with border painting seems to
show better visual results for all scale factor values. With this the border
seems to cover the whole textfield with no background visible like it was
happening earlier with 1.25, 1.75, 2.25 , etc. But I still see some some
issue with border edges at the start which goes away when I resize the
window. Looking into this further to see how can the fix be applied for both
the background and border so that it works for all scale factors.;;;","2022-07-24 17:42;rmahajan;Applying transformations to background and border both is still not working as intended. 
Collected data for the x,y , width, height values for different scaling factors for background and border and using it to see how we can get the border and background aligned.;;;","2022-08-08 06:58;rmahajan;Collected x, y translation and width, height and thickness data for the
Textfield border and also for background with varying scaling values.
After this I was able to improve the calculations for these values for both
the border and background.
Now I see all borders scaled properly and with equal thickness for all sides
of the border for all windows supported scaling values , i.e., 1.25, 1.5,
1.75, 2.25, 2.5, 2.75, 3.25, 3.5, 3.75, 4.25, 4.5, 4.75 and so on and so
forth.
It works for some of the arbitrary scaling values and not for all, for
example I see a missing border on bottom side for 1.33.;;;","2022-10-06 12:00;aivanov;There is also a problem rendering radio buttons and checkboxes with connected monitors with different high dpi settings.
— This is tracked in JDK-8294427;;;","2022-10-13 09:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10681
Date: 2022-10-12 16:41:52 +0000;;;","2022-11-01 11:42;dukebot;Changeset: 9911405e
Author:    Rajat Mahajan <rajat.m.mahajan@oracle.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-11-01 18:38:00 +0000
URL:       https://git.openjdk.org/jdk/commit/9911405e543dbe07767808bad88534abbcc03c5a
;;;","2023-02-14 04:40;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.19-oracle,17.0.7-oracle.
Low risk, windows awt change.
Clean backport.
Tests pass and fails without the fix. SAP nighlty testing passed.;;;","2023-02-14 05:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1172
Date: 2023-02-14 13:15:54 +0000;;;","2023-02-14 05:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1733
Date: 2023-02-14 13:30:05 +0000;;;",,,,,,,,,,,,
Drop MemoryLayout::map,JDK-8282953,5070020,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-03-10 04:29,2022-03-11 02:15,2023-10-01 09:56,2022-03-11 02:15,repo-panama,,,,,,,,,,tools,,0,foreign-preview,,,,,,,,,,,,,,,,,,"The MemoryLayout::map method is an attempt at defining transformation on layouts. Unfortunately, this way of transforming layouts is very limited, as it only allows to replace one layout with another in a location at a time.

As such, it is not possible, for instance, to define a global layout transformation which e.g. flips the endianness of all value layouts nested in a given layout.

It would be better to omit this method from the API, as it takes a good name (MemoryLayout::map) without providing the necessary flexibility.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2waln:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-03-10 04:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/667
Date: 2022-03-10 12:40:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8274980 missed correct handling of MACOSX_BUNDLE_BUILD_VERSION,JDK-8282948,5070015,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-03-10 03:40,2022-03-16 18:05,2023-10-01 09:56,2022-03-10 05:53,19,,,,,,,,,19,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,"If VERSION_BUILD is empty, we must still store a ""0"" in MACOSX_BUNDLE_BUILD_VERSION.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wakj:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-03-10 03:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7773
Date: 2022-03-10 11:49:06 +0000;;;","2022-03-10 05:53;dukebot;Changeset: 9c88c5bb
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-03-10 13:50:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9c88c5bb63fb67f301e843d1bd5700d7e5e95204
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Dump on shutdown live-locks in some conditions,JDK-8282947,5070014,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,shade,shade,2022-03-10 03:14,2023-02-15 07:42,2023-10-01 09:56,2022-05-27 06:01,11,17,18,19,,,,,,19,hotspot,,1,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,jdk8u-jvanek,redhat-interest,,,,,,"One of our tests checks if JFR-enabled builds work. We don't need a recording, so it is dumped to /dev/null. In one of our cases we ended up starting two recordings to /dev/null, and that scenario reliably hangs.

This is most vividly manifests with just:

$ java -XX:StartFlightRecording=filename=/dev/null,dumponexit=true -version
[0.888s][info][jfr,startup] Started recording 1. No limit specified, using maxsize=250MB as default.
[0.888s][info][jfr,startup] 
[0.888s][info][jfr,startup] Use jcmd 2139696 JFR.dump name=1 to copy recording data to file.
openjdk version ""19-internal"" 2022-09-20
OpenJDK Runtime Environment (fastdebug build 19-internal-adhoc.shade.jdk)
OpenJDK 64-Bit Server VM (fastdebug build 19-internal-adhoc.shade.jdk, mixed mode, sharing)
[0.957s][error][jfr        ] Unable to complete I/O operation when dumping recording ""1"" (1)

<exits>

$ java -XX:StartFlightRecording=filename=/dev/null,dumponexit=true -XX:StartFlightRecording=filename=/dev/null,dumponexit=true -version 
[0.891s][info][jfr,startup] Started recording 1. No limit specified, using maxsize=250MB as default.
[0.891s][info][jfr,startup] 
[0.891s][info][jfr,startup] Use jcmd 2139732 JFR.dump name=1 to copy recording data to file.
[0.922s][info][jfr,startup] Started recording 2. No limit specified, using maxsize=250MB as default.
[0.922s][info][jfr,startup] 
[0.922s][info][jfr,startup] Use jcmd 2139732 JFR.dump name=2 to copy recording data to file.
openjdk version ""19-internal"" 2022-09-20
OpenJDK Runtime Environment (fastdebug build 19-internal-adhoc.shade.jdk)
OpenJDK 64-Bit Server VM (fastdebug build 19-internal-adhoc.shade.jdk, mixed mode, sharing)

<100% CPU load>

I debugged it a little to ChunksChannel.transferTo, where the call to:

long w = out.transferFrom(channel, pos, n);

...always returns ""w == 0"" in the live-locking case, thus it gets stuck in the busy loop. It looks to me that ChunksChannel.transferTo completes one channel correctly, but then it moves to nextChannel(), and there ""w == 0"" always. Which probably explains why this only manifests with double /dev/null dump?

FWIW, I don't see any guarantee that FileChannel.transferFrom should eventually succeed with non-zero transferred bytes, so this might be as well the generic problem with JFR code.

Adding this block makes the reproducer above pass:

diff --git a/src/jdk.jfr/share/classes/jdk/jfr/internal/ChunksChannel.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/ChunksChannel.java
index b606105d29e..4ac25b1bc93 100644
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/ChunksChannel.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/ChunksChannel.java
@@ -100,6 +100,9 @@ final class ChunksChannel implements ReadableByteChannel {
                 while (rem > 0) {
                     long n = Math.min(rem, 1024 * 1024);
                     long w = out.transferFrom(channel, pos, n);
+                    if (w == 0) {
+                        throw new IOException(""Transfer failed"");
+                    }
                     pos += w;
                     rem -= w;
                 }

Perhaps a similar case with Dacapo:

$ java -Xlog:jfr  -XX:StartFlightRecording=filename=/dev/null,dumponexit=true -jar dacapo-9.12-MR1-bach.jar -C pmd
[0.830s][info][jfr] Flight Recorder initialized
[0.830s][info][jfr] Repository base directory: /tmp
[0.907s][info][jfr] Started recording ""1"" (1) {dumponexit=true, filename=/dev/null}
[0.908s][info][jfr,startup] Started recording 1. No limit specified, using maxsize=250MB as default.
[0.908s][info][jfr,startup] 
[0.908s][info][jfr,startup] Use jcmd 2194769 JFR.dump name=1 to copy recording data to file.
===== DaCapo 9.12-MR1 pmd starting warmup 1 =====
===== DaCapo 9.12-MR1 pmd completed warmup 1 in 5533 msec =====
===== DaCapo 9.12-MR1 pmd starting warmup 2 =====
===== DaCapo 9.12-MR1 pmd completed warmup 2 in 2273 msec =====
===== DaCapo 9.12-MR1 pmd starting warmup 3 =====
===== DaCapo 9.12-MR1 pmd completed warmup 3 in 2253 msec =====
===== DaCapo 9.12-MR1 pmd starting warmup 4 =====
===== DaCapo 9.12-MR1 pmd completed warmup 4 in 2317 msec =====
===== DaCapo 9.12-MR1 pmd starting =====
===== DaCapo 9.12-MR1 pmd PASSED in 2187 msec =====
[17.229s][info][jfr        ] Stopped recording ""1"" (1). Reason ""Dump on exit"".

<live-locks>

...and with the patch above it passes well.",,,,,,,,,,,JDK-8293031,JDK-8302591,JDK-8292913,JDK-8292651,JDK-8293030,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287463,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wakb:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-04-29 02:30;jvanek;Hello! Is there any chance for this fix?
This is blocking any JFR stress testing.;;;","2022-05-25 12:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8891
Date: 2022-05-25 19:08:16 +0000;;;","2022-05-27 06:01;dukebot;Changeset: 63eb0b7e
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-05-27 13:00:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/63eb0b7e8606dd9cd145e92eeeb744ff5b7be569
;;;","2022-06-07 09:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/148
Date: 2022-06-07 16:43:32 +0000;;;","2022-06-07 10:06;jvanek;I would like  to backport it to all live JDKs,  as this is blocking any JFR stress testing.
Starting with 18, all the way down over 17,11 to 8;;;","2022-07-14 02:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/348
Date: 2022-07-14 09:12:20 +0000;;;","2022-07-14 02:42;jvanek;Fix Request

This bug is 100% prohibting any stress testing above JFR. The fix is very simple and is preventing the endless loop during flushes of JFR data. There should be no danger in backporting it, danger remains when not backported. The test have 100% covering jtreg accompanied. and applies cleanly.
;;;","2022-07-14 13:32;clanger;[~jvanek], please open pull requests to the jdk11u-dev and jdk17u-dev repositories and close the one to jdk17u. Thanks.;;;","2022-07-15 04:14;jvanek;ok. tY!;;;","2022-07-15 05:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/555
Date: 2022-07-15 12:07:31 +0000;;;","2022-08-19 02:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1334
Date: 2022-08-19 09:15:39 +0000;;;","2022-08-26 12:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/262
Date: 2022-08-26 18:59:00 +0000;;;","2022-08-26 12:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/395
Date: 2022-08-26 19:04:38 +0000;;;","2022-08-29 03:32;evergizova;Fix request (15u & 13u)
Requesting backport to 15u & 13u for parity with 11u.
The patch applies cleanly.
Tested with jdk/jfr and tier1 tests; added test fails without the patch and passes with it on Linux.
Added test fails on Windows with ""java.nio.file.NoSuchFileException: \dev\null"", I plan to backport follow-up JDK-8287463 to fix it.;;;","2023-01-19 04:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/233
Date: 2023-01-19 11:58:02 +0000;;;","2023-01-19 04:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/234
Date: 2023-01-19 12:35:37 +0000;;;","2023-01-19 10:24;sgehwolf;[~jvanek] Please only add the fix request label when the patch is ready for integration. Not before. There should also be a ""Fix Request"" comment when asking for approval. I see the PR is 1) not yet reviewed and 2) there seem to be test failures. For that reason I've removed the label. Thanks!;;;","2023-01-26 01:05;jvanek;Fix request (8u)
Requesting backport to 8u to be able of same jfr stress testing as jdk11u and up.
The patch needed ususal renaming and small changes to be jdk8 comaptible.
Tested with jdk/jfr and tier1 tests; added test fails without the patch and passes with it on Linux.
Test needed some removals  of few newer jdk jtreg features: -Xlog:jfr, Path.of(String), adapted @library flag
The test currently  fails on Windows with ""java.nio.file.NoSuchFileException: \dev\null"". I currently do not plan to backport JDK-8287463 to fix it, unelss requested.;;;","2023-01-26 01:30;sgehwolf;[~jvanek] Please work on an 8u version of JDK-8287463. We shouldn't knowingly break other platforms. Note that the @requires fix won't work for 8u. It ought to be something in the test that returns with a skipped message if on windows.;;;","2023-01-31 00:40;jvanek;Fair enough. Will do. Is it blocking this jdk8u backport? Thanx for heads up with @requires.;;;","2023-01-31 01:10;sgehwolf;Yes, I'm not going to approve a backport that knowingly introduces test failures on a platform. Thanks for your cooperation. The test fix for windows should go in in tandem with the bug that introduces the test (this bug).;;;","2023-01-31 03:52;jvanek;[~sgehwolf] one question.  As the fix JDK-8287463 will be few lines in TestDumpDevNull.java, which is delivered by this PR, how exactly it is expected to be blocking the appearance of the file?
Can I fix two bugs by one PR? If so, then I will directly accompany the fix to the https://github.com/openjdk/jdk8u-dev/pull/234
If not, then I need to merge PR234 first and then exclude it on windows. With second PR. 
Or do you require me to second PR, based on PR234, with one patch on the top?
Or should the JDK-8287463 be fixed annonymously, simply in PR234, maybe with JDK-8287463 in comment?
;;;","2023-01-31 04:28;sgehwolf;[~jvanek]
> Or do you require me to second PR, based on PR234, with one patch on the top?

Yes, that --^ This bug introduces TestDumpDevNull.java. Backport of JDK-8287463 should be proposed for review targetting pr/234 branch (i.e. dependent pull request feature). Get it reviewed. Then I'll approve both and you can integrate them both in short succession.;;;","2023-01-31 08:17;jvanek;ok - https://github.com/openjdk/jdk8u-dev/pull/255;;;",,,,,,
Unused weird key in compiler.properties,JDK-8282943,5070011,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,jlahoda,jlahoda,2022-03-10 02:11,2022-03-30 17:59,2023-10-01 09:56,2022-03-28 07:56,19,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,"In:
src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties

there's a weird entry:
compiler.misc.base.membership=\
    all your base class are belong to us

The key appears to be unused. Presumably should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wajn:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-03-23 12:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7929
Date: 2022-03-23 19:16:50 +0000;;;","2022-03-28 07:56;dukebot;Changeset: a5776567
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-03-28 14:53:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a5776567720d66754002247101081c84b4f83442
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create a test for JDK-4529616,JDK-8282933,5070001,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-03-09 22:41,2022-08-02 02:35,2023-10-01 09:56,2022-04-27 11:15,11,17,18,19,8,,,,,19,client-libs,,0,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,"AccessibleJTableCell.isShowing() returns false when the cell is actually on
the screen.
The test validates the fix for the above issue by verifying that the isShowing call returns true when invoked via the  accessiblity context.",,,,,,,,,,,JDK-8289270,JDK-8289565,JDK-8291677,JDK-8291683,JDK-8289665,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wahf:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-03-11 00:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7783
Date: 2022-03-11 06:30:04 +0000;;;","2022-04-27 11:15;dukebot;Changeset: a0b984a7
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-04-27 18:14:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a0b984a778c1f9a89fd3e1e474b5a5165a0841b0
;;;","2022-07-31 06:15;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.17/17.0.5-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nightly testing passed.;;;","2022-08-01 06:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/616
Date: 2022-07-31 13:15:01 +0000;;;","2022-08-01 06:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1293
Date: 2022-07-31 12:56:27 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
a space is needed for the unsupported protocol exception message in ProtocolVersion,JDK-8282932,5070000,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2022-03-09 22:41,2022-03-16 18:06,2023-10-01 09:56,2022-03-10 10:25,17,18,,,,,,,,19,security-libs,,0,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,,,"In class sun.security.ssl.ProtocolVersion, the exception message for unsupported protocol needs a space.
ProtocolVersion pv = ProtocolVersion.nameOf(pn);
if (pv == null) {
    throw new IllegalArgumentException(
           ""Unsupported protocol"" + pn);
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wah7:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-03-09 22:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7769
Date: 2022-03-10 06:52:14 +0000;;;","2022-03-10 10:25;dukebot;Changeset: 1f295239
Author:    John Jiang <jjiang@openjdk.org>
Date:      2022-03-10 18:25:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1f295239b97cccfff24df259215d34c712065867
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Localized monetary symbols are not reflected in `toLocalizedPattern` return value,JDK-8282929,5069909,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,naoto,webbuggrp,webbuggrp,2022-03-08 23:33,2023-07-31 20:26,2023-10-01 09:56,2022-03-14 09:29,13,17,18,19,,,,,,19,core-libs,,0,bugdb_33943087,capbug,CPU22_07-critical-approved,CPU22_07-critical-SQE-OK,dcsaw,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,regression,reproducer-yes,,,,,"A DESCRIPTION OF THE PROBLEM :
NumberFormat.getCurrencyInstance().format(x) use the wrong decimal point for locale fr_CH. The localized pattern show that it have the right decimal point but it does not use for formatting. Instead of the expected comma there is a point.

REGRESSION : Last worked in version 11

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Java Version: 11.0.11+9
Currency:     -1 234,12 CHF with pattern: # ##0,00' '¤
Number:       -1 234,125    with pattern: # ##0,###
ACTUAL -
Java Version: 17.0.2+8-LTS-86
Currency:     -1 234.12 CHF with pattern: # ##0,00 ¤
Number:       -1 234,125    with pattern: # ##0,###

---------- BEGIN SOURCE ----------

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;

public class CurrencyFormatTest {
    public static void main( String[] args ) {
        System.err.println( ""Java Version: "" + System.getProperty( ""java.vm.version"" ) );
        Locale locale = new Locale( ""fr"", ""CH"" );
        NumberFormat javaFormat = NumberFormat.getCurrencyInstance( locale );
        String str = javaFormat.format( -1234.125 );
        System.err.println( ""Currency:     "" + str + "" with pattern: "" + ((DecimalFormat)javaFormat).toLocalizedPattern());

        javaFormat = NumberFormat.getNumberInstance( locale );
        str = javaFormat.format( -1234.125 );
        System.err.println( ""Number:       "" + str + ""    with pattern: "" + ((DecimalFormat)javaFormat).toLocalizedPattern());
    }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8284721,JDK-8286222,JDK-8286310,JDK-8285648,JDK-8284722,JDK-8288104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,b21,13,,generic,,,,,"0|i2w9wz:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,Verified,,"2022-03-09 19:26;tongwan;The observations on Windows 10:
JDK 11: Passed.
JDK 13ea+20: Passed.
JDK 13ea+21: Failed, wrong outputs observed.
JDK 17: Failed.
JDK 18ea+29: Failed.
JDK 19ea+3: Failed.;;;","2022-03-10 13:10;naoto;As of CLDR 39 which the latest JDK depends on, the currency decimal separator in fr-CH locale is '.':
https://unicode-org.github.io/cldr-staging/charts/39/by_type/numbers.symbols.html#7c215da0acf4f2bc
Thus the current behavior is the expected one.;;;","2022-03-11 10:20;naoto;The submitter is correct here. There seems to be a bug in `toLocalizedPattern()` not working correctly for monetary symbols. Reopening/repurposing this JIRA issue to address it.;;;","2022-03-11 12:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7790
Date: 2022-03-11 19:53:20 +0000;;;","2022-03-14 09:29;dukebot;Changeset: c96085ea
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-03-14 16:28:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c96085eaab1f6b21e084b94fcc619d090f0afc97
;;;","2022-04-12 05:16;rreddy;Fix Request (JDK 18u)
Clean backport . Fixes issue with ""toLocalizedPattern"" return value.
Tier1-3 testing is done.;;;","2022-04-12 05:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/100
Date: 2022-04-12 12:25:38 +0000;;;","2022-05-05 06:23;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly except Copyright year update. Included test has passed.;;;","2022-05-05 06:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/383
Date: 2022-05-05 13:26:02 +0000;;;","2022-06-09 02:47;yan;Fix request (15u):
should be backported here, too, for parity with major releases. Applies without shifts with only necessary update in copyright year. Test does pass.;;;","2022-06-09 02:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/218
Date: 2022-06-09 09:45:08 +0000;;;",,,,,,,,,,,,,,,,,,,
Remove InetAddressImplFactory from InetAddress,JDK-8282917,5069981,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aefimov,aefimov,aefimov,2022-03-09 16:33,2022-03-30 17:58,2023-10-01 09:56,2022-03-24 06:53,,,,,,,,,,19,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,"InetAddressImplFactory is redundant and can be removed from InetAddress and the relevant code can be optimized:
    - Move Java_java_net_InetAddressImplFactory_isIPv6Supported from platform specific  InetAddressImplFactory.c to libnet's InetAddress.c.
    - Remove Unix/Windows specific InetAddressImplFactory.c implementations.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wacz:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-03-16 06:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7842
Date: 2022-03-16 13:26:36 +0000;;;","2022-03-24 06:53;dukebot;Changeset: 929b6a35
Author:    Aleksei Efimov <aefimov@openjdk.org>
Date:      2022-03-24 13:50:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/929b6a3556ce6f6ffb1a5ae14b7f87d21598eb21
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/stringtable/StringTableCleaningTest.java verify unavailable at this moment,JDK-8282900,5069962,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rehn,dcubed,dcubed,2022-03-09 12:13,2022-10-10 15:34,2023-10-01 09:56,2022-10-05 05:47,19,,,,,,,,,20,hotspot,,0,intermittent,tier1,tier3,utils,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

runtime/stringtable/StringTableCleaningTest.java

Here's a snippet from the log file:

----------System.err:(15/1048)----------
java.lang.RuntimeException: Missing Callback in [166, 167]
	at runtime.stringtable.StringTableCleaningTest.fail(StringTableCleaningTest.java:67)
	at runtime.stringtable.StringTableCleaningTest.findCallback(StringTableCleaningTest.java:182)
	at runtime.stringtable.StringTableCleaningTest.check(StringTableCleaningTest.java:213)
	at runtime.stringtable.StringTableCleaningTest.checkOutput(StringTableCleaningTest.java:225)
	at runtime.stringtable.StringTableCleaningTest.main(StringTableCleaningTest.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Missing Callback in [166, 167]
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Missing Callback in [166, 167]
----------rerun:(38/7388)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266056,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2wa8r:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-09 12:16;dcubed;[~pliden] - previously fixed this test with a very similar failure mode:

JDK-8266056 runtime/stringtable/StringTableCleaningTest.java failed with ""RuntimeException: Missing Callback in [10, 11]"";;;","2022-03-09 15:03;dcubed;Looks like the test failure is not going to reproduce in
the next Tier1 so lowering the priority from P2 -> P3.;;;","2022-03-11 06:04;pliden;This failure is a bit different from JDK-8266056 mentioned above, which was ZGC specific. This time it failed with G1. Just briefly looked at the test log, and noticed the end of the log looks like this:

[30.182s][info ][gc,start        ] GC(37) Pause Remark
[30.182s][info ][gc              ] GC(37) Pause Remark 5M->5M(20M) 0.008ms
[30.182s][info ][gc              ] GC(37) Concurrent Mark Cycle 6.149ms
[30.205s][info ][stringtable     ] verify unavailable at this moment

And there should be an ""Uncleaned items"" line between the ""Pause"" lines. The ""verify unavailable at this moment"" is suspicious.;;;","2022-03-11 09:14;dcubed;[~pliden] - Thanks for taking a look!;;;","2022-03-15 11:16;mseledtsov;ILW = HLM  = P3
(H because of tier1)
;;;","2022-09-22 04:25;rehn;The stringtable is in the middle of a resize.
The CHT don't (yet) support iteration while resizing.
Some of the Nodes can be visited from both old and new table, those could be visited twice.
Which would be unexpected, so we while resizing you can't scan/iterate the map.
;;;","2022-09-22 04:28;rehn;Since the VerifyCompStrings do:
    _table.put_if_absent(s, true, &created);                                                                           
    assert(created, ""Duplicate strings"");

So we could hit this assert if we did this scanning while resizing.;;;","2022-10-02 23:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10527
Date: 2022-10-03 06:30:40 +0000;;;","2022-10-05 05:47;dukebot;Changeset: bd90c4cf
Author:    Robbin Ehn <rehn@openjdk.org>
Date:      2022-10-05 12:45:18 +0000
URL:       https://git.openjdk.org/jdk/commit/bd90c4cfa63ba2de26f7482ed5d1704f9be9629f
;;;",,,,,,,,,,,,,,,,,,,,,
Fix call parameter to GetStringChars() in HostLocaleProviderAdapter_md.c,JDK-8282897,5069957,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2022-03-09 10:57,2022-03-16 18:06,2023-10-01 09:56,2022-03-10 10:25,19,,,,,,,,,19,core-libs,,0,noreg-cleanup,redhat-interest,,,,,,,,,,,,,,,,,"In  HostLocaleProviderAdapter_md.c, it always passes JNI_FALSE as last parameter to GetStringChars(), but the last parameter of GetStringChars() should be jboolean*, instead of jboolean. It happens to work, because JNI_FALSE = 0, the same as NULL pointer.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282978,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wa7n:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2022-03-10 05:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7775
Date: 2022-03-10 13:33:05 +0000;;;","2022-03-10 10:25;dukebot;Changeset: 879b6445
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-03-10 18:23:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/879b6445e33ad3a07461d01ea8f28a09979a4313
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential memory leak in sun.util.locale.provider.HostLocaleProviderAdapterImpl.getNumberPattern() on Windows,JDK-8282887,5069945,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2022-03-09 08:14,2022-04-03 17:11,2023-10-01 09:56,2022-03-15 07:18,11,17,18,19,,,,,,19,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,noreg-hard,redhat-interest,,,,,,,,,,"File: java.base/windows/native/libjava/HostLocaleProviderAdapter_md.c

The native method: Java_sun_util_locale_provider_HostLocaleProviderAdapterImpl_getNumberPattern(...) {

...
    langtag = (*env)->GetStringChars(env, jlangtag, JNI_FALSE);
    CHECK_NULL_RETURN(langtag, NULL);
    pattern = getNumberPattern(langtag, numberStyle);
    CHECK_NULL_RETURN(pattern, NULL);

    (*env)->ReleaseStringChars(env, jlangtag, langtag);
...
}

If getNumberPattern() call returns NULL, langtag is not released.

Also, the call GetStringChars(env, jlangtag, JNI_FALSE) looks weird, as the last parameter should be a pointer to jboolean, not a jboolean. It works due to JNI_FALSE == 0 (or NULL).
",,,,,,,,,,,JDK-8284217,JDK-8284218,JDK-8284235,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wa4z:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2022-03-10 10:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7777
Date: 2022-03-10 18:40:13 +0000;;;","2022-03-15 07:18;dukebot;Changeset: 2cddf3f5
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-03-15 14:16:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2cddf3f5391518ea40796e6c4759047d51b7b312
;;;","2022-03-30 05:27;zgu;Fix Request (18u)

A clean and low risk backport to fix a memory leak.;;;","2022-03-30 05:27;zgu;Fix Request (17u)

A clean and low risk backport to fix a memory leak.;;;","2022-03-30 05:27;zgu;Fix Request (11u)

A clean and low risk backport to fix a memory leak.;;;","2022-03-30 05:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/317
Date: 2022-03-30 12:21:31 +0000;;;","2022-03-30 05:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/86
Date: 2022-03-30 12:21:01 +0000;;;","2022-03-30 05:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/965
Date: 2022-03-30 12:23:12 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/event/runtime tests failing with jtreg wrapper,JDK-8282877,5069933,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,alanb,alanb,2022-03-09 05:15,2022-03-10 04:16,2023-10-01 09:56,2022-03-10 04:16,repo-loom,,,,,,,,,repo-loom,hotspot,,0,wrapper,,,,,,,,,,,,,,,,,,"2 JFR tests are failing in loom-tier4 with the jtreg wrapper, typical output is show below. For now, the tests are excluded via ProblemList-vthread.txt.


test/jdk/jdk/jfr/event/runtime/TestVMOperation.java fails with:

java.lang.AssertionError: No matching event with VM operation name ParallelGCSystemGC and current threasd as caller
	at jdk.jfr.event.runtime.TestVMOperation.main(TestVMOperation.java:68)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:142)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:271)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:156)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:358)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:351)


test/jdk/jdk/jfr/event/runtime/TestJavaMonitorWaitEvent.java fails with:
----------System.err:(18/1197)----------
java.lang.RuntimeException: Wrong thread id: expected 15 to equal 14
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.jfr.Events.assertThread(Events.java:238)
	at jdk.test.lib.jfr.Events.assertEventThread(Events.java:190)
	at jdk.jfr.event.runtime.TestJavaMonitorWaitEvent.main(TestJavaMonitorWaitEvent.java:101)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:142)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:271)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:156)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:358)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:351)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wa2b:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-03-10 04:16;mgronlun;https://github.com/openjdk/loom/commit/c3383c81c43721d8502b2b13eb72c5544d225418;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bad performance on gather/scatter API caused by different IntSpecies of indexMap,JDK-8282874,5069929,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jzhu,jzhu,jzhu,2022-03-09 04:13,2022-04-03 22:44,2023-10-01 09:56,2022-03-11 20:06,17,18,19,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-11,oracle-triage-19,performance,vectorapi,,,,,,,,,,,,,,,,,,,,,JDK-8283915,JDK-8284098,JDK-8284250,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282722,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wa1f:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-09 04:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7757
Date: 2022-03-09 12:33:49 +0000;;;","2022-03-09 13:49;dlong;ILW = code not inlined as expected, vector gather/scatter API, no workaround = MMH = P3;;;","2022-03-11 20:06;dukebot;Changeset: 5c408c14
Author:    Joshua Zhu <jzhu@openjdk.org>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2022-03-12 04:04:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5c408c1410e15087f735a815b7edc716d514b1b3
;;;","2022-03-29 08:54;thartmann;Fix Request (JDK 18u)
Fixes a performance regression. The fix is low risk and applies cleanly. Already tested and about to be backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 09:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/72
Date: 2022-03-29 15:54:07 +0000;;;","2022-03-30 04:51;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Nightly tests have passed.;;;","2022-03-30 05:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/314
Date: 2022-03-30 11:53:38 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
Bring back SymbolLookup,JDK-8282873,5069928,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-03-09 03:03,2022-03-11 02:23,2023-10-01 09:56,2022-03-11 02:23,repo-panama,,,,,,,,,,tools,,0,foreign-preview,,,,,,,,,,,,,,,,,,"When the foreign API was moved to java.base we initially left out SymbolLookup and moved some of its functionalities to CLinker and ClassLoader.

This moves makes it harder for clients to get a full picture of how to lookup symbols in loaded libraries. Moreover, following recent JDK changes (see JDK-8281335 and JDK-8282608), we can now offer a lookup which provides deterministic library loading/unloading.

Given we have three different ways to provide symbol lookups, and given that users might want to define their own lookup, by combining existing ones, it would be desirable to capture a symbol-lookup capability into a first-class abstraction.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wa17:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-03-09 03:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/666
Date: 2022-03-09 11:10:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/awt/FullScreen/FullscreenWindowProps/FullscreenWindowProps.java fails on Windows 10 with HiDPI screen,JDK-8282863,5069915,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alexsch,alexsch,alexsch,2022-03-09 01:39,2022-06-01 23:30,2023-10-01 09:56,2022-05-31 03:16,19,,,,,,,,,19,client-libs,,0,hidpi,,,,,,,,,,,,,,,,,,"Test java/awt/FullScreen/FullscreenWindowProps/FullscreenWindowProps.java fails on JDK 19.
Failure is observed on Windows 10 laptop with HiDPI screen (resolution 2160x1350, scale 150%).

Here's a snippet from the log file:

#section:main
----------messages:(5/222)----------
command: main FullscreenWindowProps
reason: Assumed action based on file name: run main FullscreenWindowProps 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 20.002
----------configuration:(3/43)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(14/722)----------
Expected: 1024
Actual: 683
java.lang.RuntimeException: width is wrong
	at FullscreenWindowProps.checkSize(FullscreenWindowProps.java:100)
	at FullscreenWindowProps.main(FullscreenWindowProps.java:86)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException: width is wrong
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: width is wrong
----------rerun:(28/2877)*----------",Windows 10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows_10,,,,,"0|i2w9yb:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-03-16 00:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7835
Date: 2022-03-16 07:39:21 +0000;;;","2022-05-31 03:16;dukebot;Changeset: c6e04164
Author:    Dmitry Kulikov <projectd8@yandex.ru>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-05-31 10:14:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c6e041649514b964f5baaa88880c4d146275db8d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create a regression test for JDK-4702690,JDK-8282857,5069906,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-03-08 22:15,2022-10-06 15:26,2023-10-01 09:56,2022-05-31 12:38,11,17,18,19,8,,,,,19,client-libs,,0,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,"Create a regression test for JDK-4702690

In many cases in Swing it is possible to easily programatically determine that a JScrollBar (or two) is scrolling some JPanel (the cannonical case is a JScrollPane). 
In these cases, when accessibility support is instantiated (e.g. the AccessibleJScrollBar is created), a Controller_For and Controled_By relation should be instantiated between the AccessibleJScrollBar and the AccessibleJPanel that the JScrollBar and JPanel are associated with.

This allows various assistive technologies, especially voice-recognition technologies, to better interact with scrolling items.

The test put up validates that the target object for these properties(CONTROLLED_BY, CONTROLLED_FOR) are set appropriately  for JScrollPane and JScrollBar.
",,,,,,,,,,,JDK-8289664,JDK-8289269,JDK-8289563,JDK-8294502,JDK-8294926,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w9wb:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-03-09 00:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7753
Date: 2022-03-09 08:13:55 +0000;;;","2022-05-31 12:38;dukebot;Changeset: 8df5f105
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-05-31 19:37:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8df5f1058fb7244b65fa67bff8fd5a5282d70594
;;;","2022-09-26 01:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/728
Date: 2022-09-26 08:34:00 +0000;;;","2022-09-26 02:11;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2022-10-04 20:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1391
Date: 2022-10-05 03:32:55 +0000;;;","2022-10-05 06:52;phh;Fix Request (11u).

On behalf of Rui Li <ruiamnz@amazon.com>.

Clean Oracle parity test-only backport. Test passes, very low risk.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Debug agent asserts in classTrack_addPreparedClass(),JDK-8282852,5069901,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2022-03-08 18:50,2022-03-16 18:06,2023-10-01 09:56,2022-03-10 11:12,19,,,,,,,,,19,core-svc,,0,,,,,,,,,,,,,,,,,,,"While running com/sun/jdi tests in the loom project, I recently started to see the following assert triggered:

classTrack_addPreparedClass(JNIEnv *env_unused, jclass klass)
{
  jvmtiError error;
  jvmtiEnv* env = trackingEnv;

  if (gdata && gdata->assertOn) {
    // Check this is not already tagged.
    jlong tag;
    error = JVMTI_FUNC_PTR(trackingEnv, GetTag)(env, klass, &tag);
    if (error != JVMTI_ERROR_NONE) {
      EXIT_ERROR(error, ""Unable to GetTag with class trackingEnv"");
    }
    JDI_ASSERT(tag == NOT_TAGGED);   <----------- HERE
  }

Usually when it is triggered I see the following in the test output:

FATAL ERROR in native method: JDWP Assertion Failed, jvmtiError=AGENT_ERROR_INTERNAL(181)
	at jdk.internal.misc.Unsafe.ensureClassInitialized0(java.base@19-loom/Native Method)
	at jdk.internal.misc.Unsafe.ensureClassInitialized(java.base@19-loom/Unsafe.java:1160)
	at java.lang.ref.Reference$ReferenceHandler.run(java.base@19-loom/Reference.java:203)

With some extra debugging output I found that the class in question is java/lang/Cleaner. The assert is very rare, and pretty much only on linux-aarch64, and seems it can impact any of the com/sun/jdi tests. I think I know what's going on, but first some background.

The debug agent calls SetTag on every loaded class, setting the tag to be a pointer to the class signature. This way when the class is unloaded, an ObjectFree event is generated, which the debug agent uses to trigger the sending of a CLASS_UNLOAD to the debugger. classTrack_addPreparedClass() does this tagging, but as you can see above it first asserts that it has not been tagged already. When the debug agent is initialized, it calls JVMTI GetLoadedClasses, and for each class returned it calls classTrack_addPreparedClass(). It then sets up a ClassPrepare event callback so it can tag any additional classes that get loaded later. (There is another bug here. There could be a class loaded after the call to GetLoadedClasses and before setting up the ClassPrepare event callback. These classes will not get tagged, but that is not the cause of these com/sun/jdi failures. JDK-8282851 has been filed.).

What I think is happening is that the Cleaner class has been loaded and is available to GetLoadedClasses, but the ClassPrepare event has not yet been generated. The thread that did the loading gets unscheduled for a short while. In the meantime the debug agent is starting up, calls GetLoadedClasses, and tags all the classes, including Cleaner. It then sets up up the ClassPrepare event callback. At this point the thread that just loaded Cleaner gets some more cycles and generates the ClassPrepare event, but by this time the debug agent has already tagged it since it was included with GetLoadedClasses, so classTrack_addPreparedClass() unexpectedly find the class already tagged.

I think this assert is assuming something which we now know won't always be true. The assert can either be removed, or maybe it should assert that the old tag matches the new tag.

BTW, although this is a long standing bug, but it hadn't been exposed until recently when it was triggered by a recent change in Loom:

""Delay starting finalizer and reference handler threads to phase 2""
https://orahub.oci.oraclecorp.com/jpg-mirrors/loom-open/-/commit/c474b8e233adac6a3aa0672e2bf312906ce262ff
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282851,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w9v7:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-03-08 22:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7752
Date: 2022-03-09 06:14:21 +0000;;;","2022-03-10 11:12;dukebot;Changeset: f5217b47
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-03-10 19:08:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f5217b475e2bfcbc649dd1e067222bf500429663
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah Generational: Investigate assertion failure during verification before mark,JDK-8282844,5069889,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,kdnilsen,kdnilsen,kdnilsen,2022-03-08 15:10,2022-03-29 06:21,2023-10-01 09:56,2022-03-21 17:07,,,,,,,,,,internal,hotspot,,0,gc-shenandoah,,,,,,,,,,,,,,,,,,"When executing:

    ~/Devel/kdnilsen/gitfarm/balance-without-cancel/build/linux-x86_64-server-slowdebug/jdk/bin/java \
    -XX:-UseNUMA -XX:ActiveProcessorCount=8 \
    -Xmx8g -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational \
    -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:-ShenandoahPacing \
    -XX:+ShenandoahVerify -XX:-ShenandoahUncommit \
    -Xlog:gc*=info,safepoint*=info:results/genshen/dacapo-hunt/eclipse.jvm.log::filecount=0,filesize=0 \
    -javaagent:""/home/ubuntu/Devel/kdnilsen/lib/jHiccup-2.0.10/jHiccup.jar=-l,results/genshen/dacapo-hunt/h2.jhiccup.log,-i,1000,-a"" \
    -jar ~/Devel/kdnilsen/lib/dacapo-evaluation-git+309e1fa.jar \
    --scratch-directory ~/Devel/kdnilsen/tmp/dacapo \
    --no-validation --converge --variance 5 --no-pre-iteration-gc \
    --iterations 10 --size small eclipse

We experience the intermittent crash:
Run Generational Balanced Remset Without Cancel branch with memory size 8g on dacapo eclipse
Unzip workspace 
Initialize workspace # To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/shenandoahVerifier.cpp:101
[thread 1062240 also had an error]
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/ubuntu/Devel/kdnilsen/gitfarm/balance-without-cancel/src/hotspot/share/gc/shenandoah/shenandoahVerifier.cpp:101), pid=1062238, tid=1062302
#  Error: Before Mark, Roots; Object start should be within the region

Referenced from:
  interior location: 0x0000001001c5f868
  inside Java heap
    not in collection set
  region: |    6|P  |O|BTE   1001c00000,   1001ffff90,   1002000000|TAMS   1001ffff90|UWM   1001ffff90|U  4095K|T     0B|G     0B|G     0B|S  4095K|L  4095K|CP   0

Object:
  0x0000001004554aa0 - safe print, no details
  region: |   16|R  |Y|BTE   1004400000,   1004406138,   1004800000|TAMS   1004406138|UWM   1004800000|U 24888B|T     0B|G     0B|G     0B|S 24888B|L     0B|CP   0

Raw heap memory:
0x0000001004554a80:   0000000f 0000000f 00002000 00000000
0x0000001004554a90:   00000000 00000000 003c90e7 00000000
0x0000001004554aa0:   0440223b 00000010 00064e10 3ab0eb94
0x0000001004554ab0:   0038b3f0 00389a61 00000000 00000000
0x0000001004554ac0:   0440225b 00000010 00065058 00000100
0x0000001004554ad0:   00000000 00000000 00000000 00000000
0x0000001004554ae0:   000bce33 00000000 00000000 00880505
0x0000001004554af0:   00000000 00000000 0038bec0 00000000
0x0000001004554b00:   00000000 000b873f 003c7b5c 00000000
0x0000001004554b10:   003b8bbb 00000000 00000000 00000000 


#
# JRE version: OpenJDK Runtime Environment (19.0) (slowdebug build 19-internal+0-adhoc.ubuntu.balance-without-cancel)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 19-internal+0-adhoc.ubuntu.balance-without-cancel, mixed mode, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /home/ubuntu/Devel/kdnilsen/tmp/debug-balance/core.1062238)
#
# An error report file with more information is saved as:
# /home/ubuntu/Devel/kdnilsen/tmp/debug-balance/hs_err_pid1062238.log
[thread 1062301 also had an error]
[thread 1062303 also had an error]
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
1 rr has recorded a crash (134) in /home/ubuntu/Devel/kdnilsen/tmp/rr-hunt-eclipse/1646616374/latest-trace

The last few lines of the GC log consist of the following:
...
[6192.586s][info][gc,start         ] GC(63) Concurrent reset
[6192.590s][info][gc,task          ] GC(63) Using 2 of 4 workers for concurrent reset
[6193.308s][info][gc               ] GC(63) Concurrent reset 721.647ms
[6193.327s][info][safepoint,cleanup] updating inline caches, 0.0004119 secs
[6193.328s][info][safepoint,cleanup] compilation policy safepoint handler, 0.0001318 secs
[6193.329s][info][safepoint,cleanup] safepoint cleanup tasks, 0.0030982 secs
[6193.334s][info][safepoint,stats  ] Cleanup                      [             22               3 ][        178760716    4186710    2014580  184962006 ]               0
[6193.336s][info][safepoint        ] Safepoint ""Cleanup"", Time since last: 1012785269 ns, Reaching safepoint: 182947426 ns, At safepoint: 2014580 ns, Total: 184962006 ns
[6193.351s][info][safepoint,cleanup] updating inline caches, 0.0001314 secs
[6193.352s][info][safepoint,cleanup] compilation policy safepoint handler, 0.0001325 secs
[6193.355s][info][safepoint,cleanup] safepoint cleanup tasks, 0.0044812 secs
[6193.356s][info][gc,start         ] GC(63) Pause Init Mark (YOUNG)
[6193.358s][info][gc,task          ] GC(63) Using 4 of 4 workers for init marking
[6193.414s][info][gc,start         ] GC(63) Verify Before Mark, Level 4


It is suspected that this crash is not specific to the balance-without-crash branch of github/shenandoah.

We have an rr recording and are investigating.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-03-08 15:04;kdnilsen;hs_err_pid1062238.log;https://bugs.openjdk.org/secure/attachment/98234/hs_err_pid1062238.log",,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2w9sj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-03-18 13:31;kdnilsen;The root cause of this problem is the following:
1. During full GC, old-gen regions that are pinned do not get collected.
2. Within these uncollected regions, certain dead objects may hold invalid pointers (because update refs does not update dead objects)
3. The intention is that we fill and coalesce dead objects within pinned old-gen regions during full GC.  This code was recently added to https://github.com/openjdk/shenandoah, commit a9a9f138d88a31054db2c4ae169c26f05ebd2da5
4. Debugging of this crash reveals that the coalesce-and-fill effort for pinned old-gen regions will be aborted before it has completely coalesced and filled all dead objects within a region if the GC cancellation flag is left enabled at the start of Full GC.
5. The planned fix is to turn off the GC cancellation flag at the start of Full GC.
6. The commit for this fix has not yet been merged due to a regression observed during testing of the proposed fix.
;;;","2022-03-21 17:06;kdnilsen;This is resolved with commit https://github.com/openjdk/shenandoah/commit/71fe3e547c9da1ca695fb405f7b2b034548f41cc;;;","2022-03-21 17:07;kdnilsen;https://github.com/openjdk/shenandoah/commit/71fe3e547c9da1ca695fb405f7b2b034548f41cc;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JNI primitive type mismatch in frame.cpp,JDK-8282842,5069887,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rpressler,rhalade,rhalade,2022-03-08 14:32,2022-03-09 03:52,2023-10-01 09:56,2022-03-09 03:52,repo-loom,,,,,,,,,,hotspot,,0,parfait,,,,,,,,,,,,,,,,,,"https://github.com/openjdk/loom/blob/fibers/src/hotspot/share/runtime/frame.cpp#L508
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w9s3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-09 03:52;rpressler;Same as upstream;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update file path for HostnameMatcher/cert5.crt in test sun/security/util/Pem/encoding.sh,JDK-8282832,5069877,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rhalade,dcubed,dcubed,2022-03-08 11:57,2023-07-27 20:53,2023-10-01 09:56,2022-03-08 12:36,19,,,,,,,,,19,security-libs,,0,noreg-self,regression,tier2,ursqe-triaged,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

sun/security/util/Pem/encoding.sh

Here's a snippet from the log file:

#section:shell
----------messages:(3/111)----------
command: shell encoding.sh
reason: User specified action: run shell encoding.sh 
elapsed time (seconds): 0.094
----------System.out:(0/0)----------
----------System.err:(6/531)----------
Exception in thread ""main"" java.io.FileNotFoundException: /opt/mach5/mesos/work_dir/jib-master/install/jdk-19+13-801/src.full/open/test/jdk/sun/security/util/Pem/../HostnameMatcher/cert5.crt (No such file or directory)
	at java.base/java.io.FileInputStream.open0(Native Method)
	at java.base/java.io.FileInputStream.open(FileInputStream.java:216)
	at java.base/java.io.FileInputStream.<init>(FileInputStream.java:157)
	at java.base/java.io.FileInputStream.<init>(FileInputStream.java:111)
	at PemEncoding.main(PemEncoding.java:29)
----------rerun:(30/3410)*----------

<snip>

result: Failed. Execution failed: exit code 1

Starting this Tier2 failure as a P2 since this looks like a regression.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282843,,,,,,,,JDK-7192189,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w9pv:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-03-08 12:00;dcubed;It looks like the file that cannot be found was recently touched by:

JDK-7192189: Support endpoint identification algorithm in RFC 6125;;;","2022-03-08 12:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7749
Date: 2022-03-08 20:25:12 +0000;;;","2022-03-08 12:36;dukebot;Changeset: ea19114e
Author:    Rajan Halade <rhalade@openjdk.org>
Date:      2022-03-08 20:34:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ea19114e66326e4be7b4b9995888ad2ead3d37dc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Uninitialised pointer 'derived_cl' when 'derived_mode' is default,JDK-8282831,5069876,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rpressler,rhalade,rhalade,2022-03-08 11:41,2022-03-09 10:27,2023-10-01 09:56,2022-03-09 04:36,repo-loom,,,,,,,,,,hotspot,,0,parfait,,,,,,,,,,,,,,,,,,"https://github.com/openjdk/loom/blob/fibers/src/hotspot/share/compiler/oopMap.cpp#L476

When derived_mode is default, not in (_directly, _, _with_table, _ignore):
Uninitialised pointer 'derived_cl' may be used as argument 3 when calling OopMapDo<OopClosure, DerivedOopClosure, SkipNullValue>::OopMapDo",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w9pn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-09 04:36;rpressler;Fixed by 6b9fe1faeec1843f7802778c8da93b04ff948809;;;","2022-03-09 10:27;rhalade;Link to commit: https://github.com/openjdk/loom/commit/6b9fe1faeec1843f7802778c8da93b04ff948809;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS uncompressed oops archive is not deterministic,JDK-8282828,5069873,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,iklam,iklam,2022-03-08 10:53,2022-05-04 23:40,2023-10-01 09:56,2022-05-02 21:09,19,,,,,,,,,19,hotspot,,0,cds,reproducible-build,,,,,,,,,,,,,,,,,"This is a follow-up to JDK-8253495, which fixes most problems with non-determinism in the CDS archive when compressed oops are enabled.

However, the archive with uncompressed oops ($JAVA_HOME/lib/server/classes_nocoops.jsa) is still non-deterministic. This needs to be fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8253495,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w9oz:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-29 15:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8478
Date: 2022-04-29 22:50:45 +0000;;;","2022-05-02 21:09;dukebot;Changeset: 64b5b2b0
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-05-03 04:06:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/64b5b2b0b3e5156d9b0c5f378ce3a1ae52aa0819
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah Generational: JBB 2015 crash on PPC64 product build,JDK-8282809,5069850,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,wkemper,kdnilsen,kdnilsen,2022-03-08 07:11,2022-03-29 06:21,2023-10-01 09:56,2022-03-18 13:49,,,,,,,,,,internal,hotspot,,0,gc-shenandoah,,,,,,,,,,,,,,,,,,"#  Internal Error (shenandoahHeapRegion.cpp:93), pid=32884, tid=32890
#  fatal error: Illegal region state transition from ""Empty Committed"", at cset
  | 2021|EC |F|BTE    7f7000000,    7f7000000,    7f7800000|TAMS    7f7000000|UWM    7f7000000|U     0B|T     0B|G  
   0B|G     0B|S     0B|L     0B|CP   0
 
#3  0x00007fff937bf710 in VMError::report_and_die (id=<optimized out>, message=<optimized out>, 
    detail_fmt=<optimized out>, detail_args=0x7fff7144d370 ""0\207\032\214\377\177"", thread=<optimized out>, 
    pc=<optimized out>, siginfo=<optimized out>, context=<optimized out>, 
    filename=0x7fff938edf98 ""src/hotspot/share/gc/shenandoah/shenandoahHeapRegion.cpp"", lineno=93, size=0)
    at /usr/work/d056149/openjdk/shenandoah/src/hotspot/share/utilities/vmError.cpp:1750
#4  0x00007fff92ce2684 in report_fatal (error_type=<optimized out>, 
    file=0x7fff938edf98 ""src/hotspot/share/gc/shenandoah/shenandoahHeapRegion.cpp"", line=<optimized out>, 
    detail_fmt=0x7fff938f8908 ""%s"")
    at /usr/work/d056149/openjdk/shenandoah/src/hotspot/share/runtime/thread.hpp:654
#5  0x00007fff935055f4 in ShenandoahHeapRegion::report_illegal_transition (this=0x7fff900df280, 
    method=0x7fff938d17e0 ""cset"")
    at /usr/work/d056149/openjdk/shenandoah/src/hotspot/share/gc/shenandoah/shenandoahHeapRegion.cpp:93
#6  0x00007fff935068ec in ShenandoahHeapRegion::make_cset (this=<optimized out>)
    at /usr/work/d056149/openjdk/shenandoah/src/hotspot/share/gc/shenandoah/shenandoahHeapRegion.cpp:260
#7  0x00007fff934b7fb0 in ShenandoahCollectionSet::add_region (this=<optimized out>, r=<optimized out>)
    at /usr/work/d056149/openjdk/shenandoah/src/hotspot/share/gc/shenandoah/shenandoahCollectionSet.cpp:104
#8  0x00007fff935fa3d0 in ShenandoahOldHeuristics::prime_collection_set (this=0x7fff8c0e9ce0, 
    collection_set=0x7fff8c0fc490)
    at /usr/work/d056149/openjdk/shenandoah/src/hotspot/share/gc/shenandoah/heuristics/shenandoahOldHeuristics.cpp:139
#9  0x00007fff9350cc64 in ShenandoahHeuristics::choose_collection_set (this=0x7fff8c0d8b00, 
    collection_set=0x7fff8c0fc490, old_heuristics=0x7fff8c0e9ce0)
    at /usr/work/d056149/openjdk/shenandoah/src/hotspot/share/gc/shenandoah/heuristics/shenandoahHeuristics.cpp:187
#10 0x00007fff934dca10 in ShenandoahGeneration::prepare_regions_and_collection_set (this=<optimized out>, 
    concurrent=<optimized out>)
    at /usr/work/d056149/openjdk/shenandoah/src/hotspot/share/gc/shenandoah/shenandoahHeap.hpp:783
#11 0x00007fff934bdfb8 in ShenandoahConcurrentGC::op_final_mark (this=0x7fff7195e258)
   henandoah/src/hotspot/share/gc/shenandoah/shenandoahConcurrentGC.cpp:686
#12 0x00007fff934ba330 in ShenandoahConcurrentGC::entry_final_mark (this=0x7fff7195e258)
    at /usr/work/d056149/openjdk/shenandoah/src/hotspot/share/gc/shenandoah/shenandoahConcurrentGC.cpp:333
#13 0x00007fff936273d0 in VM_ShenandoahFinalMarkStartEvac::doit (this=0x7fff7195e0b8)
    at /usr/work/d056149/openjdk/shenandoah/src/hotspot/share/gc/shenandoah/shenandoahVMOperations.cpp:57
#14 0x00007fff937c7974 in VM_Operation::evaluate (this=0x7fff7195e0b8)
    at /usr/work/d056149/openjdk/shenandoah/src/hotspot/share/runtime/vmOperations.cpp:70
#15 0x00007fff937ca174 in VMThread::evaluate_operation (this=0x7fff8c1ad520, op=0x7fff7195e0b8)
    at /usr/work/d056149/openjdk/shenandoah/src/hotspot/share/runtime/vmThread.cpp:282
#16 0x00007fff937caacc in VMThread::inner_execute (this=0x7fff8c1ad520, op=<optimized out>)
    at /usr/work/d056149/openjdk/shenandoah/src/hotspot/share/runtime/vmThread.cpp:429
#17 0x00007fff937caedc in VMThread::loop (this=0x7fff8c1ad520)
    at /usr/work/d056149/openjdk/shenandoah/src/hotspot/share/runtime/vmThread.hpp:99
#18 VMThread::run (this=0x7fff8c1ad520)
    at /usr/work/d056149/openjdk/shenandoah/src/hotspot/share/runtime/vmThread.cpp:175
#19 0x00007fff93716218 in Thread::call_run (this=0x7fff8c1ad520)
    at /usr/work/d056149/openjdk/shenandoah/src/hotspot/share/runtime/thread.cpp:356
#20 0x00007fff9338b9b4 in thread_native_entry (thread=0x7fff8c1ad520)
    at /usr/work/d056149/openjdk/shenandoah/src/hotspot/os/linux/os_linux.cpp:705
#21 0x00007fff93ea9b48 in start_thread () from /lib64/libpthread.so.0
 
The affected HeapRegion is:
(gdb) p r
$1 = (ShenandoahHeapRegion *) 0x7fff900df280
(gdb) p *r
$2 = {static RegionCount = 2039, static RegionSizeBytes = 8388608, static RegionSizeWords = 1048576, 
  static RegionSizeBytesShift = 23, static RegionSizeWordsShift = 20, static RegionSizeBytesMask = 8388607, 
  static RegionSizeWordsMask = 1048575, static HumongousThresholdBytes = 8388608, 
  static HumongousThresholdWords = 1048576, static MaxTLABSizeBytes = 8388608, static MaxTLABSizeWords = 1048576, 
  _index = 2021, _bottom = 0x7f7000000, _end = 0x7f7800000, _new_top = 0x7f7000000, 
  _empty_time = 3827.6774025059999, _state = ShenandoahHeapRegion::_empty_committed, 
  _coalesce_and_fill_boundary = 0x7f7000000, _top = 0x7f7000000, _tlab_allocs = 0, _gclab_allocs = 0, 
  _plab_allocs = 0, _has_young_lab = false, _live_data = 0, _critical_pins = 0, _update_watermark = 0x7f7000000, 
  _affiliation = FREE, _age = 0, static MIN_NUM_REGIONS = 10}
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,linux,,,,,"0|i2w9jv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-03-08 07:14;kdnilsen; Here is my analysis of why this should not be happening.  But there’s something apparently missing in my understanding:
 
At the end of the most recent old-gen collection, we prepared an array of old-gen collection set candidates.  This candidates[] array is initialized by ShenandoahOldHeuristics::prepare_for_old_collections().  In its loop, it asks for each region whether it has_live().  If it does not have live, it invokes make_trash_immediate() and refrains from placing the region into the candidates[] array.
 
During subsequent GC passes, we perform “mixed evacuations” by priming each collection set with some number of regions from the old-gen collection candidates and then adding in as many young-gen regions as the evacuation budget supports.  During the priming of the collection set, we are encountering a region that is “EMPTY Committed”, suggesting that this region should have failed the has_live() test during prepare_for_old_collections() and should have never been placed into the candidates[] array.
 
I’m left wondering if perhaps the concurrent old-gen marking effort which preceded execution of prepare_for_old_collections() may need a memory barrier to make the state of  the has_live() field visible to the control thread that is executing prepare_for_old_collections().;;;","2022-03-08 08:33;wkemper;I'm nearly finished with a patch for this. It's caused by incomplete cancellation of the old generation collection after a global GC.;;;","2022-03-18 13:46;kdnilsen;This has been resolved with commit https://github.com/openjdk/shenandoah/commit/958ea3bc0b42f6a1df05dab1f10498788ad73d2d;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc for restricted method does not reflect updates to --enable-native-access,JDK-8282805,5069846,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-03-08 06:39,2022-03-08 08:13,2023-10-01 09:56,2022-03-08 08:13,repo-panama,,,,,,,,,,tools,,0,foreign-preview,,,,,,,,,,,,,,,,,,"After JDK-8282210, the javadoc for restricted methods is out of sync w.r.t. the behavior of the --enable-native-access flag:

```
* @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option
     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or
     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w9iz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-03-08 07:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/665
Date: 2022-03-08 15:05:54 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Loom: Fix optimized build after commit 4d2710,JDK-8282792,5069829,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,haosun,haosun,haosun,2022-03-08 02:03,2022-03-24 02:22,2023-10-01 09:56,2022-03-24 02:22,repo-loom,,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,"optimized build failed with the following error message.

```
=== Output from failing command(s) repeated here ===
* For target hotspot_variant-server_libjvm_objs_continuation.o:
/home/runner/work/loom/loom/jdk/src/hotspot/share/runtime/continuation.cpp:3055:13: error: 'void print_frames(JavaThread*, outputStream*)' defined but not used [-Werror=unused-function]
 3055 | static void print_frames(JavaThread* thread, outputStream* st) {
      |             ^~~~~~~~~~~~
cc1plus: all warnings being treated as errors

* All command lines available in /home/runner/work/loom/loom/jdk/build/linux--hotspot/make-support/failure-logs.
=== End of repeated output ===
```

I suppose this failure was introduced in commit 4d2710 (link: https://github.com/openjdk/loom/commit/4d2710#diff-74c5a41cb3476b29151b4a13732cf4756879de0aa1b1d8c4d73c38e570413fcfR2851)

In commit 4d2710, one invocation of function print_frames() is moved from ""! PRODUCT"" to ASSERT.
As a result, function print_frames() is not used in optimized VM build.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w9f7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create a regression test for JDK-4699544,JDK-8282778,5069814,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-03-07 22:38,2022-10-12 02:45,2023-10-01 09:56,2022-05-31 12:41,11,17,18,19,8,,,,,19,client-libs,,0,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,"Create a regression test for JDK-4699544

The subclass of javax.swing.JRootPane (AccessibleJRootPane) that implements the accessibility interface javax.accessibility.AccessibleComponent is derived from java.awt.AccessibleAWTComponent, which returns null for getAccessibleAt() because a component does not necessarily have childs.

But the root pane always has a content pane child, so getAccessibleAt() should be overwritten by AccessibleJRootPane appropriately.
",,,,,,,,,,,JDK-8295206,JDK-8288645,JDK-8288747,JDK-8288716,JDK-8288889,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w9bv:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-03-08 00:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7739
Date: 2022-03-08 08:26:11 +0000;;;","2022-05-31 12:41;dukebot;Changeset: cfdbde11
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-05-31 19:38:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cfdbde11f0bc2b61590eec2aaa9906f13c64e19e
;;;","2022-06-20 06:20;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-06-20 06:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/477
Date: 2022-06-20 13:21:01 +0000;;;","2022-10-11 04:45;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2022-10-11 04:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1439
Date: 2022-10-11 11:49:07 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
Create a Regression test for JDK-4515031,JDK-8282777,5069813,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-03-07 22:34,2022-10-12 02:50,2023-10-01 09:56,2022-06-17 01:26,11,17,18,19,8,,,,,20,client-libs,,0,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,"Create a Regression test for JDK-4515031

The issue indicates the need for a a getAccessibleDescription being implemented for the JFileChooser. 
The test added verifies the same. ",,,,,,,,,,,JDK-8289671,JDK-8289192,JDK-8295208,JDK-8289205,JDK-8294508,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w9bn:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-03-08 00:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7738
Date: 2022-03-08 08:17:09 +0000;;;","2022-06-17 01:26;dukebot;Changeset: 523d553e
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2022-06-17 08:22:27 +0000
URL:       https://git.openjdk.org/jdk/commit/523d553e13e7d6fbf0a3befb1c18431738fe8d7f
;;;","2022-09-26 02:03;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2022-09-26 02:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/732
Date: 2022-09-26 09:04:44 +0000;;;","2022-10-11 07:36;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2022-10-11 07:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1442
Date: 2022-10-11 14:42:56 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
JButton text set as HTML content has unwanted padding,JDK-8282772,5069806,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnguyen,dnguyen,dnguyen,2022-03-07 16:47,2022-05-18 23:15,2023-10-01 09:56,2022-05-11 16:32,7u6,,,,,,,,,19,client-libs,,0,sn_115,sn_117,sn_118,,,,,,,,,,,,,,,," FULL PRODUCT VERSION :
java version "" 1.7.0_21 ""
Java(TM) SE Runtime Environment (build 1.7.0_21-b12)
Java HotSpot(TM) 64-Bit Server VM (build 23.21-b01, mixed mode)

ADDITIONAL OS VERSION INFORMATION :
Darwin andr3i-mac.local 12.3.0 Darwin Kernel Version 12.3.0: Sun Jan 6 22:37:10 PST 2013; root:xnu-2050.22.13~1/RELEASE_X86_64 x86_64

EXTRA RELEVANT SYSTEM CONFIGURATION :
Original config described in linked related issue. Currently still an issue in JDK 19 on macOS 11.6.1 Big Sur.

A DESCRIPTION OF THE PROBLEM :
Creating a JButton of size 37X37 with text set to HTML (such as an image of size 19X19), makes the image appear not centered and out of bounds of the button. This issue occurs with HTML images as well as HTML text.

This is reproducible with Metal, Motif, and Nimbus LAFs.
This is an older issue, but has been recently resolved for Aqua LAF only.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1) Create the JButton.
2) Set the text to point to an HTML image
3) Set the button's size to around 37X37 with image's size at 19X19

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The image centered within the JButton.
ACTUAL -
The image has some additional padding in front of it.

REPRODUCIBILITY :
This bug can be reproduced always.

CUSTOMER SUBMITTED WORKAROUND :
No workaround. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8015854,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w9a3:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-03-23 13:36;dnguyen;Recreated issue for non-macOS L&Fs. Modified HtmlButtonImageTest to cycle through all L&Fs. Fixed unwanted padding for Metal and Motif, but source of Nimbus L&F padding still not found.;;;","2022-03-29 11:22;dnguyen;Investigated Nimbus, Synth, and Basic button classes to find where button insets or viewRect are located. SynthButtonUI has getBaseLine which has code similar to what needs to be updated, but this isn't called in testing. BasicButtonUI's methods are being overridden but have not yet located where. Still investigating where this is. Also updated the test to save images for all L&Fs when failed.;;;","2022-04-07 01:00;dnguyen;Discovered NimbusStyle is primarily where Nimbus gets its insets for viewRect calculations. Insets in getBaseLine in SynthButtonUI seem appropriate but when debug statements are inserted, this method never seems to be invoked, nor did it appear when tracing the stack.

When adjusting the insets in NimbusStyle, my test passes but mach5 fails. This seems to be due to some reliance on the default insets for other use cases. I cannot implement the same HTML check for a Nimbus button as I do for other buttons because for other buttons, I can conditionally check for ""BasicHTML.propertyKey"" and set insets to 0. I cannot do the same for Nimbus because, unlike for other L&Fs, the button's BasicHTML.propertyKey is not set for the button yet at NimbusStyle.getInsets. Still looking for a good solution to check for HTML content in NimbusStyle.

I was recommended to look at skin.laf in nimbus instead, and I made edits for the default insets. mach5 test in progress.;;;","2022-04-26 12:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8407
Date: 2022-04-26 19:42:05 +0000;;;","2022-05-11 16:32;dukebot;Changeset: ccbe8faa
Author:    Damon Nguyen <damon.nguyen@oracle.com>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-05-11 23:29:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ccbe8faa00b85a71ba84115c3321e20b661213c5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Create test case for JDK-8262981,JDK-8282771,5069804,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-03-07 15:13,2023-01-26 05:00,2023-10-01 09:56,2022-05-31 12:41,,,,,,,,,,19,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,"Write test case for the following methods of JSlider accessibility. This methods were added in JDK 17
getAccessibleAction() 
getAccessibleActionCount() 
getAccessibleActionDescription()
doAccessibleAction(int direction)",,,,,,,,,,,JDK-8297999,JDK-8301151,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w99n:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-03-07 15:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7734
Date: 2022-03-07 23:31:54 +0000;;;","2022-05-31 12:41;dukebot;Changeset: 8db5247e
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-05-31 19:39:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8db5247ebc827bf4a428c2d46ebdda778be57860
;;;","2023-01-23 08:56;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2023-01-23 09:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1100
Date: 2023-01-23 17:02:13 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
BSD date cannot handle all ISO 8601 formats,JDK-8282769,5069802,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-03-07 14:44,2022-04-08 01:40,2023-10-01 09:56,2022-03-08 06:08,19,,,,,,,,,19,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,"The BSD version of the date command that ships with macOS cannot handle all ISO 8601 formats. More specifically, it cannot handle trailing milliseconds.

This fix will allow it to be more tolerant.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284539,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w997:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-03-07 14:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7733
Date: 2022-03-07 22:47:13 +0000;;;","2022-03-08 06:08;dukebot;Changeset: 0f88fc18
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-03-08 14:04:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0f88fc180cd5abc60605a094efa3f3a54f67f7a0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: compiler/vectorapi/reshape/TestVectorCastNeon.java failed with incorrect result,JDK-8282764,5069795,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,njian,dcubed,dcubed,2022-03-07 09:24,2022-03-31 23:47,2023-10-01 09:56,2022-03-30 02:49,18,19,,,,,,,,19,hotspot,,0,intermittent,oracle-triage-11,oracle-triage-17,oracle-triage-19,tier6,,,,,,,,,,,,,,"Error message:

""RuntimeException: assertEquals: expected 6.2043621E18 to equal 6.2043616E18""

The following test failed in the JDK19 CI:

compiler/vectorapi/reshape/TestVectorCastNeon.java

Here's a snippet from the log file:

----------System.err:(71/6948)----------
WARNING: Using incubator modules: jdk.incubator.vector

TestFramework test VM exited with code 1

Command Line:
/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+13-768/macosx-aarch64-debug.jdk/jdk-19/fastdebug/bin/java -DReproduce=true -cp /System/Volumes/Data/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S39435/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/32f58915-83cb-4f36-aee7-65cfe8e706e4/runs/52ff5d8b-e932-4168-b04c-a48448e8a5d7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/classes/0/compiler/vectorapi/reshape/TestVectorCastNeon.d:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+13-768/src.full/open/test/hotspot/jtreg/compiler/vectorapi/reshape:/System/Volumes/Data/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S39435/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/32f58915-83cb-4f36-aee7-65cfe8e706e4/runs/52ff5d8b-e932-4168-b04c-a48448e8a5d7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/classes/0/test/lib:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+13-768/src.full/open/test/lib:/System/Volumes/Data/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S39435/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/32f58915-83cb-4f36-aee7-65cfe8e706e4/runs/52ff5d8b-e932-4168-b04c-a48448e8a5d7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/classes/0:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+13-768/src.full/open/test/hotspot/jtreg:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar -Djava.library.path=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+13-768/macosx-aarch64-debug.test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=6.25 -Djava.io.tmpdir=/System/Volumes/Data/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S39435/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/32f58915-83cb-4f36-aee7-65cfe8e706e4/runs/52ff5d8b-e932-4168-b04c-a48448e8a5d7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/tmp -XX:+CreateCoredumpOnCrash -XX:+UseZGC -Dir.framework.server.port=64787 --add-modules=jdk.incubator.vector --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED -XX:+UseNeon -DTest=testB64toS64,testB64toS128,testB64toI128,testB64toF128,testS64toB64,testS128toB64,testS64toI128,testS64toF128,testI128toB64,testI128toS64,testI64toL128,testI64toF64,testI128toF128,testI64toD128,testL128toI64,testL128toF64,testL128toD128,testF128toB64,testF128toS64,testF64toI64,testF128toI128,testF64toL128,testF64toD128,testD128toI64,testD128toL128,testD128toF64 -XX:-BackgroundCompilation -XX:CompileCommand=quiet -DWarmup=1 compiler.lib.ir_framework.test.TestVM compiler.vectorapi.reshape.tests.TestVectorCast compiler.vectorapi.reshape.utils.VectorReshapeHelper


Error Output
------------
WARNING: Using incubator modules: jdk.incubator.vector
Exception in thread ""main"" compiler.lib.ir_framework.shared.TestRunException: 

Test Failures (1)
-----------------
Custom Run Test: @Run: runL128toF64 - @Test: testL128toF64:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public static void compiler.vectorapi.reshape.tests.TestVectorCast.runL128toF64() throws java.lang.Throwable
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.AbstractTest.run(AbstractTest.java:104)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:89)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:818)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:249)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:164)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 5 more
Caused by: java.lang.RuntimeException: assertEquals: expected 6.2043621E18 to equal 6.2043616E18
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:189)
	at compiler.vectorapi.reshape.utils.VectorReshapeHelper.runCastHelper(VectorReshapeHelper.java:209)
	at compiler.vectorapi.reshape.tests.TestVectorCast.runL128toF64(TestVectorCast.java:857)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 7 more



	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:853)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:249)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:164)


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.TestVMProcess.throwTestVMException(TestVMProcess.java:238)
	at compiler.lib.ir_framework.driver.TestVMProcess.checkTestVMExitCode(TestVMProcess.java:219)
	at compiler.lib.ir_framework.driver.TestVMProcess.<init>(TestVMProcess.java:74)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:699)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:671)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:324)
	at compiler.vectorapi.reshape.utils.VectorReshapeHelper.runMainHelper(VectorReshapeHelper.java:95)
	at compiler.vectorapi.reshape.TestVectorCastNeon.main(TestVectorCastNeon.java:42)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
----------rerun:(39/8841)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8259948,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,"0|i2w97n:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-07 16:43;dlong;The test doesn't seem to be doing what it claims: ""Test that vector cast intrinsics work as intended on neon"".  It adds the -XX:+UseNeon flag, which means ""Use Neon for CRC32 computation"". ;;;","2022-03-07 16:44;dlong;ILW = test failure; macosx aarch64 only so far; no workaround = MMH = P3;;;","2022-03-09 01:49;qamai;Given:

6.2043621E18F = 1011110101011000011010010100101
6.2043616E18F = 1011110101011000011010010100100

I perceive this may be an issue regarding rounding of the compiled code.;;;","2022-03-10 23:01;njian;The UseNeon flag is incorrectly used in the test, should be UseSVE=0.;;;","2022-03-16 21:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7850
Date: 2022-03-17 04:33:59 +0000;;;","2022-03-30 02:49;dukebot;Changeset: 51c05e82
Author:    Ningsheng Jian <njian@openjdk.org>
Date:      2022-03-30 09:47:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/51c05e8219db5f47d7f56eeb9cdaaee0785b5e7e
;;;",,,,,,,,,,,,,,,,,,,,,,,,
XPathFactoryImpl remove setProperty and getProperty methods,JDK-8282761,5069792,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ewhelan,ewhelan,ewhelan,2022-03-07 08:55,2022-08-22 05:34,2023-10-01 09:56,2022-03-08 03:33,11-pool,17-pool,7-pool,8-pool,,,,,,17.0.4-oracle,xml,,0,CPU22_04-critical-approved,CPU22_04-critical-SQE-OK,hgupdate-sync,jdk11u-critical-request,jdk11u-critical-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-critical-request,jdk17u-critical-yes,openjdk8u-WNF,,,,,,,"In Oracle JDK releases 17u - 7u, JDK-8276141 was backported. 

After having internal discussions, we concluded that it was incorrect to add getter and setter methods to internal packages which are not used and which applications won't have access to. I had backported it to add forward looking value for potential upstream backports, but in fact these changes are not needed and thus, will be removed from Oracle JDK releases.

",,,,,,,,,,,JDK-8282794,JDK-8282908,JDK-8286245,JDK-8283552,JDK-8282813,JDK-8283367,JDK-8282910,JDK-8283366,JDK-8283397,JDK-8282907,JDK-8282912,JDK-8283333,JDK-8282814,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292721,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w96z:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,,,"2022-03-16 05:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u/pull/337
Date: 2022-03-16 12:41:17 +0000;;;","2022-03-17 08:58;goetz;Critical fix request [17u]

I backport this for parity with 17.0.3-oracle. 
No risk, backout of a change.
Clean backout.
SAP nightly tests pass.;;;","2022-03-18 01:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/330
Date: 2022-03-18 08:30:53 +0000;;;","2022-03-18 02:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/184
Date: 2022-03-18 09:01:03 +0000;;;","2022-03-18 02:14;yan;Fix request [13u, 15u]

backout of whatever part of 8276141 was ported to these releases. The relevant tests pass.
We have a day before team repositories are closed, so the changes targeted there.;;;","2022-03-18 03:09;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
No risk, backout of a change.
Clean backport from 13.;;;","2022-03-18 03:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u/pull/32
Date: 2022-03-18 10:07:25 +0000;;;","2022-04-12 09:51;andrew;8u does not yet have JDK-8276141 which introduces these, so we can just avoid this altogether.;;;",,,,,,,,,,,,,,,,,,,,,,
Make ElementKind checks more specific,JDK-8282756,5069785,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-03-07 06:56,2022-04-07 00:00,2023-10-01 09:56,2022-04-04 02:29,19,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w95f:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-03-08 09:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7747
Date: 2022-03-08 17:41:56 +0000;;;","2022-04-04 02:29;dukebot;Changeset: 9d200d6e
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-04-04 09:28:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9d200d6e7a3399d2b5448c27e40eb3b4d14a02df
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
LdapLoginModule throw NPE from logout method after login failure,JDK-8282730,5069754,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jnibedita,ssahoo,ssahoo,2022-03-07 02:03,2023-07-11 06:59,2023-10-01 09:56,2022-08-01 15:33,19,,,,,,,,,20,security-libs,,0,chkesc,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,regression,release-note=yes,,,,,,,,,,,,"LdapLoginModule.java [Line:699] there is no Null check. The Principals are Null because the login failed and logout called after login failure which cause the Principals Null.

Similar issue exists with other LoginModule implementation too.",,,,,,,,,,,JDK-8292597,JDK-8292598,JDK-8296367,JDK-8295474,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290119,,,,,,JDK-8289548,,,,,,,,JDK-8281717,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w8yj:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2022-07-07 21:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9348
Date: 2022-07-01 17:31:06 +0000;;;","2022-08-01 15:33;dukebot;Changeset: 554f44ec
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-08-01 22:28:30 +0000
URL:       https://git.openjdk.org/jdk/commit/554f44ecb1134acff3eaf02e2e1c0e01158ab7e5
;;;","2022-08-18 04:08;jnibedita;Creating backport for JDK 17u and 11u;;;","2022-10-06 13:11;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
Medium+ risk. Change to security files and quite large. Issue can be reproduced easily and backport is clean,
so I'd consider this a needed and useful fix. Recommend to backport it.  It needs a follow up.
Clean backport.
Test passes and fails without the fix.
There is already a CSR for 17. 
SAP nightly testing passed.;;;","2022-10-17 02:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/802
Date: 2022-10-17 09:13:12 +0000;;;","2022-11-02 04:08;goetz;@jnibedita, in the history I see backport JDK-8292598. It is probably a backport for 11, as follow up JDK-8292682 is also  backported to 11.
JDK-8292598 is closed. Is there a good reason for this? Else it would be great if you could open it up.;;;","2022-11-02 04:36;jnibedita;@goetz, JDK-8292598 is now visible.;;;","2022-11-02 05:34;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
Medium risk changing security files.  Clearly fixes an issue, so we should take it.
Clean backport except for Copyright.
Test passes and fails without the fix. SAP nighlty testing passed.;;;","2022-11-02 05:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1491
Date: 2022-11-02 12:32:38 +0000;;;",,,,,,,,,,,,,,,,,,,,,
gc/g1/humongousObjects/TestNoAllocationsInHRegions.java triggers assert in freeze_result finalize_freeze,JDK-8282725,5069749,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rpressler,alanb,alanb,2022-03-07 00:31,2022-03-07 05:31,2023-10-01 09:56,2022-03-07 05:31,repo-loom,,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,"This test is failing in tier5 with this assert

#  Internal Error (/workspace/open/src/hotspot/share/runtime/continuation.cpp:1482), pid=10881, tid=10951
#  Error: assert(chunk == nullptr || (chunk->max_size() == 0) == chunk->is_empty()) failed

Stack: [0x00007f6b5d5f5000,0x00007f6b5d6f6000],  sp=0x00007f6b5d6f38b0,  free space=1018k
Thread 0x00007f6b843daa30 [10951]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xac7084]  freeze_result Freeze<Config<(oop_kind)0, G1BarrierSet> >::finalize_freeze<Compiled>(frame const&, frame&, int)+0x4a4
V  [libjvm.so+0xacac5e]  Freeze<Config<(oop_kind)0, G1BarrierSet> >::recurse_freeze_compiled_frame(frame&, frame&, int, bool)+0x14e
V  [libjvm.so+0xacb24c]  Freeze<Config<(oop_kind)0, G1BarrierSet> >::recurse_freeze_compiled_frame(frame&, frame&, int, bool)+0x73c
V  [libjvm.so+0xacb24c]  Freeze<Config<(oop_kind)0, G1BarrierSet> >::recurse_freeze_compiled_frame(frame&, frame&, int, bool)+0x73c
V  [libjvm.so+0xaca7e1]  Freeze<Config<(oop_kind)0, G1BarrierSet> >::freeze_slow()+0x2c1
V  [libjvm.so+0xa7e8bc]  int freeze0<Config<(oop_kind)0, G1BarrierSet>, false>(JavaThread*, long*)+0x99c
V  [libjvm.so+0xa7ec22]  int freeze<Config<(oop_kind)0, G1BarrierSet> >(JavaThread*, long*)+0xf2
v  ~RuntimeStub::cont_doYield 0x00007f6b6c1e4417
J 680 c2 jdk.internal.vm.Continuation.yield0(Ljdk/internal/vm/ContinuationScope;Ljdk/internal/vm/Continuation;)Z java.base@19-loom (369 bytes) @ 0x00007f6b744f1fac [0x00007f6b744f1f20+0x000000000000008c]
J 668 c2 java.lang.VirtualThread.yieldContinuation()Z java.base@19-loom (55 bytes) @ 0x00007f6b744e8b80 [0x00007f6b744e8940+0x0000000000000240]
J 696% c2 gc.g1.humongousObjects.TestNoAllocationsInHRegions.main([Ljava/lang/String;)V (306 bytes) @ 0x00007f6b744f78d0 [0x00007f6b744f7740+0x0000000000000190]
J 243  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;Z)V java.base@19-loom (0 bytes) @ 0x00007f6b744aa849 [0x00007f6b744aa7c0+0x0000000000000089]
J 676 c2 jdk.internal.vm.Continuation.run()V java.base@19-loom (494 bytes) @ 0x00007f6b744f0100 [0x00007f6b744eff40+0x00000000000001c0]
J 673 c2 java.util.concurrent.ForkJoinTask$AdaptedRunnableAction.exec()Z java.base@19-loom (11 bytes) @ 0x00007f6b744ecf50 [0x00007f6b744ece40+0x0000000000000110]
J 674 c2 java.util.concurrent.ForkJoinTask.doExec()I java.base@19-loom (37 bytes) @ 0x00007f6b744ef194 [0x00007f6b744ef120+0x0000000000000074]
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+13 java.base@19-loom
j  java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I+193 java.base@19-loom
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+53 java.base@19-loom
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 java.base@19-loom
v  ~StubRoutines::call_stub 0x00007f6b6c1cad4a
V  [libjvm.so+0xeeeeb7]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x4e7
V  [libjvm.so+0xeef7dc]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x26c
V  [libjvm.so+0xeef8e7]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x77
V  [libjvm.so+0x10207d9]  thread_entry(JavaThread*, JavaThread*)+0x89
V  [libjvm.so+0x1763b3a]  JavaThread::thread_main_inner()+0x1ea
V  [libjvm.so+0x176b580]  Thread::call_run()+0x100
V  [libjvm.so+0x14b0d84]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w8xf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-07 05:31;rpressler;Fixed by 1e59d93;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Enable javax/swing/JScrollPane/TestMouseWheelScroll.java on macos,JDK-8282716,5069741,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2022-03-06 21:32,2022-04-13 23:03,2023-10-01 09:56,2022-04-12 00:32,,,,,,,,,,19,client-libs,,0,sn_116,test_sprint,,,,,,,,,,,,,,,,,"test/jdk/javax/swing/JScrollPane/TestMouseWheelScroll.java is failing in macos which is why it is currently removed from test run using @requires jtreg tag. 
Need to find why it is failing in macos and enable it to run on macos too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2w8vn:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-04-06 03:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8123
Date: 2022-04-06 10:11:33 +0000;;;","2022-04-12 00:32;dukebot;Changeset: 9545ba7d
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-04-12 07:30:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9545ba7dd95eba78cf234b2cf63165afca513787
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
synthetic arguments are being added to the constructors of static local classes,JDK-8282714,5069727,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,webbuggrp,webbuggrp,2022-03-05 18:55,2022-07-13 23:43,2023-10-01 09:56,2022-07-08 10:28,16,17,18,19,20,,,,,20,tools,,0,dcsad,javac-record,reproducer-yes,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
$ uname -a
Linux skylake 5.10.0-11-amd64 #1 SMP Debian 5.10.92-1 (2022-01-18) x86_64 GNU/Linux

A DESCRIPTION OF THE PROBLEM :
Running the example code causes a VerifyError ""Bad type on operand stack"" to be thrown, even though it compiles successfully.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the sample code.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Expected no output, and exit status of 0.
ACTUAL -
Exception in thread ""main"" java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    TestLocalRecordInInnerClassMethod$Inner$1Record.create(Ljava/lang/Object;)LTestLocalRecordInInnerClassMethod$Inner$1Record; @6: getfield
  Reason:
    Type 'java/lang/Object' (current frame, stack[3]) is not assignable to 'TestLocalRecordInInnerClassMethod$Inner$1Record'
  Current Frame:
    bci: @6
    flags: { }
    locals: { 'java/lang/Object' }
    stack: { uninitialized 0, uninitialized 0, 'java/lang/Object', 'java/lang/Object' }
  Bytecode:
    0000000: bb00 0259 2a2a b400 01b7 0011 b0       

	at TestLocalRecordInInnerClassMethod$Inner.<init>(TestLocalRecordInInnerClassMethod.java:11)
	at TestLocalRecordInInnerClassMethod.main(TestLocalRecordInInnerClassMethod.java:16)

Process finished with exit code 1


---------- BEGIN SOURCE ----------
public class TestLocalRecordInInnerClassMethod {
  class Inner {
    Inner() {
      record Record(Object o) {
        // Commenting out the following line removes the VerifyError
        static Record create(Object obj) { return new Record(obj); }

        // POSSIBLY RELATED:
        // Uncommenting the following line causes a compilation error: ""java: Compilation failed: internal java compiler error""
        //   static Record create() { return new Record(""hi""); }
      }
      new Record(""hi"");
    }
  }

  public static void main(String[] args) {
    new TestLocalRecordInInnerClassMethod().new Inner();
  }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-03-06 20:17;adev;TestLocalRecordInInnerClassMethod.java;https://bugs.openjdk.org/secure/attachment/98196/TestLocalRecordInInnerClassMethod.java",,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2w8sj:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-03-06 20:17;adev;The issue is reproducible.

Compiler crashes with:
Caused by: java.lang.ClassNotFoundException: /\TestLocalRecordInInnerClassMethod
> .\jdk-17.0.2\bin\java TestLocalRecordInInnerClassMethod
Exception in thread ""main"" java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    TestLocalRecordInInnerClassMethod$Inner$1Record.create(Ljava/lang/Object;)LTestLocalRecordInInnerClassMethod$Inner$1Record; @6: getfield
  Reason:
    Type 'java/lang/Object' (current frame, stack[3]) is not assignable to 'TestLocalRecordInInnerClassMethod$Inner$1Record'
  Current Frame:
    bci: @6
    flags: { }
    locals: { 'java/lang/Object' }
    stack: { uninitialized 0, uninitialized 0, 'java/lang/Object', 'java/lang/Object' }
  Bytecode:
    0000000: bb00 0259 2a2a b400 01b7 0011 b0

        at TestLocalRecordInInnerClassMethod$Inner.<init>(TestLocalRecordInInnerClassMethod.java:12)
        at TestLocalRecordInInnerClassMethod.main(TestLocalRecordInInnerClassMethod.java:17);;;","2022-03-06 20:26;adev;The issue affects JDK 16 as well;;;","2022-07-06 15:33;vromero;the issue can be reproduced with enums too:

public class TestEnumInInnerClassMethod {
  class Inner {
    Inner() {
      enum E {
        A
      }
    }
  }
}

An exception has occurred in the compiler (20-internal). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.NullPointerException: Cannot read field ""sym"" because ""this.lvar[0]"" is null
	at jdk.compiler/com.sun.tools.javac.jvm.Code.emitop0(Code.java:568)
	at jdk.compiler/com.sun.tools.javac.jvm.Items$SelfItem.load(Items.java:369)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitIdent(Gen.java:2286)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCIdent.accept(JCTree.java:2664)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:881)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genArgs(Gen.java:906)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitNewClass(Gen.java:1971)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCNewClass.accept(JCTree.java:1854)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:881)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitAssign(Gen.java:2027)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCAssign.accept(JCTree.java:2043)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:881)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitExec(Gen.java:1752)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCExpressionStatement.accept(JCTree.java:1586)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:631)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:682)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitBlock(Gen.java:1101)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1082)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genMethod(Gen.java:971)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitMethodDef(Gen.java:934)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:912)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genClass(Gen.java:2424)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:737)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1635)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1603)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
	at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50);;;","2022-07-07 12:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9412
Date: 2022-07-07 17:09:03 +0000;;;","2022-07-08 10:28;dukebot;Changeset: 9c86c820
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2022-07-08 17:24:27 +0000
URL:       https://git.openjdk.org/jdk/commit/9c86c82091827e781c3919b4b4410981ae322732
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Invalid copyright notice in new test added by JDK-8275715,JDK-8282713,5069738,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,myano,dholmes,dholmes,2022-03-06 16:16,2023-01-05 10:14,2023-10-01 09:56,2022-03-06 17:34,19,,,,,,,,,19,client-libs,,0,tier1,,,,,,,,,,,,,,,,,,The Oracle copyright line is missing a comma after 2021. Possibly there are other issues - use `make validate-source` to check.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275715,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,"0|i2w8uz:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-03-06 16:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7716
Date: 2022-03-07 00:46:12 +0000;;;","2022-03-06 17:34;dukebot;Changeset: 894ffb09
Author:    Masanori Yano <myano@openjdk.org>
Date:      2022-03-07 01:33:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/894ffb098c80bfeb4209038c017d01dbf53fac0f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"VMConnection.open() does not detect if VM failed to be created, resulting in NPE",JDK-8282712,5069737,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,cjplummer,cjplummer,cjplummer,2022-03-06 10:21,2023-08-24 00:22,2023-10-01 09:56,2023-08-17 08:10,19,,,,,,,,,22,core-svc,,0,,,,,,,,,,,,,,,,,,,"The following code in VMConnection.java is problematic:

    synchronized VirtualMachine open() {
        if (connector instanceof LaunchingConnector) {
            vm = launchTarget();
        } else if (connector instanceof AttachingConnector) {
            vm = attachTarget();
        } else if (connector instanceof ListeningConnector) {
            vm = listenTarget();
        } else {
            throw new InternalError(""Invalid connect type"");
        }
        vm.setDebugTraceMode(traceFlags);
...
    }

If any of the xxxTarget() calls being made can fail and return null, this will result in an NPE when vm.SetDebugTraceMode() is called. This results in test failures that look like:

java.io.IOException
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineManagerImpl.createVirtualMachine(VirtualMachineManagerImpl.java:239)
	at jdk.jdi/com.sun.tools.jdi.AbstractLauncher.launch(AbstractLauncher.java:145)
	at jdk.jdi/com.sun.tools.jdi.SunCommandLineLauncher.launch(SunCommandLineLauncher.java:248)
	at VMConnection.launchTarget(VMConnection.java:314)
	at VMConnection.open(VMConnection.java:149)
	at TestScaffold.connect(TestScaffold.java:641)
	at TestScaffold.startUp(TestScaffold.java:365)
	at TestScaffold.startTo(TestScaffold.java:375)
	at TestScaffold.startToMain(TestScaffold.java:370)
	at Java_gTest.runTests(Java_gTest.java:117)
	at TestScaffold.startTests(TestScaffold.java:432)
	at Java_gTest.main(Java_gTest.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1484)

 Unable to launch target VM.
java.lang.NullPointerException: Cannot invoke ""com.sun.jdi.VirtualMachine.setDebugTraceMode(int)"" because ""this.vm"" is null
	at VMConnection.open(VMConnection.java:157)
	at TestScaffold.connect(TestScaffold.java:641)
	at TestScaffold.startUp(TestScaffold.java:365)
	at TestScaffold.startTo(TestScaffold.java:375)
	at TestScaffold.startToMain(TestScaffold.java:370)
	at Java_gTest.runTests(Java_gTest.java:117)
	at TestScaffold.startTests(TestScaffold.java:432)
	at Java_gTest.main(Java_gTest.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1484)

In mdash, the NPE will show up as the reason for the failure, rather than the IOE. I think the real issue is not the failure of open() to detect that vm == null, but the failure off the xxxTarget() methods to throw an exception. They shouldn't ever return null. For example:

    private VirtualMachine attachTarget() {
        AttachingConnector attacher = (AttachingConnector)connector;
        try {
            return attacher.attach(connectorArgs);
        } catch (IOException ioe) {
            ioe.printStackTrace();
            System.err.println(""\n Unable to attach to target VM."");
        } catch (IllegalConnectorArgumentsException icae) {
            icae.printStackTrace();
            System.err.println(""\n Internal debugger error."");
        }
        return null; // Shuts up the compiler
    }

All 3 of the xxxTarget() methods follow a similar pattern. They catch any exceptions thrown, print an error message, and return null. And the comment on the return is also indicative of this code being incorrect. If the code properly re-threw the exception, there would be no need for the return null to ""shut up the compiler"". Another option is for these methods to wrap the exception in a new exception.

There are actually two copies of this VMConnection code. One is in jdb (src/jdk.jdi/share/classes/com/sun/tools/example/debug/tty/VMConnection.java) and one is in used for testing (open/test/jdk/com/sun/jdi/VMConnection.java). Both should be fixed, although I only noticed this code being a problem when running com/sun/jdi tests.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286193,JDK-8293342,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w8ur:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-08-11 20:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15255
Date: 2023-08-12 03:56:05 +0000;;;","2023-08-17 08:10;dukebot;Changeset: 388dcff7
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-08-17 15:09:09 +0000
URL:       https://git.openjdk.org/jdk/commit/388dcff72518c96a15e38ff0b18be8a89836c2d5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/Thread/StopAtExit.java may leak memory,JDK-8282704,5069722,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2022-03-05 07:10,2023-04-20 01:05,2023-10-01 09:56,2022-03-19 06:45,19,,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,tier1,tier3,tier4,tier5,tier6,tier7,tier8,,,,,,,,,"In my recent stress testing of jdk-19 bits, I've run into
StressWrapper_StopAtExit possibly leaking memory.

I added an RSS monitor for the StressWrappers to my stress
kit setup and captured RSS data in my jdk-19+10 stress testing.
I wrote a script to extract the RSS data and another script to do
some initial analysis on that data.

In do_all_check_stress_results.jdk-19+10_1.log:

StressWrapper_StopAtExit release:
n_values=101
max_value=13102752
min_value=80516
max_increase=542264
min_increase=780
Value increased 100 times
WARNING: there might be a leak.

StressWrapper_suspendthrd003 release:
n_values=102
max_value=260024
min_value=43676
max_increase=17628
min_increase=8436
Value increased 101 times
WARNING: there might be a leak.

StressWrapper_suspendthrd003 fastdebug:
n_values=101
max_value=431132
min_value=193884
max_increase=18416
min_increase=6908
Value increased 100 times
WARNING: there might be a leak.

StressWrapper_suspendthrd003 slowdebug:
n_values=74
max_value=1019140
min_value=203728
max_increase=29192
min_increase=13156
Value increased 73 times
WARNING: there might be a leak.


In do_all_check_stress_results.jdk-19+10_2.log:

StressWrapper_suspendthrd003 release:
n_values=102
max_value=326184
min_value=45896
max_increase=18260
min_increase=11096
Value increased 101 times
WARNING: there might be a leak.

StressWrapper_suspendthrd003 fastdebug:
n_values=102
max_value=478212
min_value=193176
max_increase=18756
min_increase=5872
Value increased 101 times
WARNING: there might be a leak.

StressWrapper_suspendthrd003 slowdebug:
n_values=74
max_value=1029096
min_value=198076
max_increase=27360
min_increase=13056
Value increased 73 times
WARNING: there might be a leak.


do_all_check_stress_results.jdk-19+10_3.log:

StressWrapper_StopAtExit release:
n_values=101
max_value=13230152
min_value=78128
max_increase=532040
min_increase=1764
Value increased 100 times
WARNING: there might be a leak.


StressWrapper_suspendthrd003 release:
n_values=102
max_value=173640
min_value=42908
max_increase=10428
min_increase=10428
Value increased 101 times
WARNING: there might be a leak.

StressWrapper_suspendthrd003 fastdebug:
n_values=101
max_value=479636
min_value=193480
max_increase=18764
min_increase=5864
Value increased 100 times
WARNING: there might be a leak.

StressWrapper_suspendthrd003 slowdebug:
n_values=75
max_value=1032804
min_value=204916
max_increase=29068
min_increase=12572
Value increased 74 times
WARNING: there might be a leak.

The StressWrapper_suspendthrd003 leak is being investigated via:

    JDK-8282314 nsk/jvmti/SuspendThread/suspendthrd003 may leak memory

StressWrapper_StopAtExit did report a possible leak in
the 'release' bits config in 2 of the 3 runs so I'm not as
sure that is a real sighting. However, I need to investigate
so I've filed this bug for that purpose.",,,,,,,,,,,JDK-8306498,JDK-8303945,JDK-8304195,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284632,JDK-8285507,,,,,JDK-8283467,JDK-8283651,JDK-8282952,,,,"2022-03-17 11:52;dcubed;do_all_check_stress_results.jdk-19+13_redo_1.log;https://bugs.openjdk.org/secure/attachment/98324/do_all_check_stress_results.jdk-19%2B13_redo_1.log","2022-03-07 14:40;dcubed;java_pid3203068.prof.details1.jpg;https://bugs.openjdk.org/secure/attachment/98216/java_pid3203068.prof.details1.jpg","2022-03-07 14:40;dcubed;java_pid3203068.prof.details2.jpg;https://bugs.openjdk.org/secure/attachment/98217/java_pid3203068.prof.details2.jpg","2022-03-07 14:40;dcubed;java_pid3203068.prof.jpg;https://bugs.openjdk.org/secure/attachment/98218/java_pid3203068.prof.jpg","2022-03-06 07:19;dcubed;jdk-19+12_linux.8282704.zip;https://bugs.openjdk.org/secure/attachment/98187/jdk-19%2B12_linux.8282704.zip","2022-03-13 07:57;dcubed;jdk-19+13_linux.8282704.zip;https://bugs.openjdk.org/secure/attachment/98270/jdk-19%2B13_linux.8282704.zip",,,,,,,,,,,,,,,,,,,,,,,"0|i2w8rf:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-06 07:19;dcubed;$ unzip -l jdk-19+12_linux.8282704.zip
Archive:  jdk-19+12_linux.8282704.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    91348  2022-03-04 05:58   jdk-19+12_1/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.release
   106919  2022-03-05 05:22   jdk-19+12_2/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.release
   110944  2022-03-06 03:37   jdk-19+12_3/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.release
---------                     -------
   309211                     3 files;;;","2022-03-07 14:44;dcubed;VisualVM 2.1.2 to the rescue!

Added screen shots to show where VisualVM says the memory is pinned.
Why are all the StopAtExit threads still present in the MainWrapper's
MainThreadGroup?;;;","2022-03-07 20:50;dholmes;> Why are all the StopAtExit threads still present in the MainWrapper's MainThreadGroup? 

Presumably because the async exception disrupts execution of the code that would remove them.

Update: note that we retry calling Thread.exit three times but we also hit the thread with stop() requests in a tight loop.;;;","2022-03-08 08:28;dcubed;[~dholmes] - We're on the same page since I had the same idea while I
was poking around the code. I may not be able to do anything about this
particular leak. That probably also explains with InterruptAtExit sometimes
appears to have a leak also.

Stress tests can be a pain to get right... sigh...;;;","2022-03-08 12:54;dcubed;Just to fill in the details a little bit more:

src/hotspot/share/runtime/thread.cpp:

void JavaThread::exit(bool destroy_vm, ExitType exit_type) {

<snip>

    // Call Thread.exit(). We try 3 times in case we got another Thread.stop during
    // the execution of the method. If that is not enough, then we don't really care. Thread.stop
    // is deprecated anyhow.
    if (!is_Compiler_thread()) {
      int count = 3;
      while (java_lang_Thread::threadGroup(threadObj()) != NULL && (count-- > 0)) {
        EXCEPTION_MARK;
        JavaValue result(T_VOID);
        Klass* thread_klass = vmClasses::Thread_klass();
        JavaCalls::call_virtual(&result,
                                threadObj, thread_klass,
                                vmSymbols::exit_method_name(),
                                vmSymbols::void_method_signature(),
                                THREAD);
        CLEAR_PENDING_EXCEPTION;
      }
    }


src/java.base/share/classes/java/lang/Thread.java:

    private void exit() {

<snip>

        if (group != null) {
=>        group.threadTerminated(this);
            group = null;
        }

src/java.base/share/classes/java/lang/ThreadGroup.java:

    void threadTerminated(Thread t) {
        synchronized (this) {
=>        remove(t);

            if (nthreads == 0) {
                notifyAll();
            }
            if (daemon && (nthreads == 0) &&
                (nUnstartedThreads == 0) && (ngroups == 0))
            {
                destroy();
            }
        }

So if our stressful calls to ""thread.stop()"" land in this code
path, it possible that the ThreadGroup.remove() call won't
happen... ;;;","2022-03-08 13:04;dcubed;So the problem is that the code path that we're stressing is racy with
respect to ThreadGroups... However, we don't really care about the
ThreadGroup for the purposes of this test. I'm going to verify that I can
repro the OOM on my MBP13 and then, I'm going to checkout using
a throw away ThreadGroup that I can cleanup myself...;;;","2022-03-08 22:09;dholmes;Not sure that is possible Dan. Any ThreadGroup you create is referenced by its parent, and the problem is that the threads are not removing themselves as they should, and you can't manually do that.;;;","2022-03-09 04:21;dholmes;Also InterruptAtExit can't suffer from the same problem.;;;","2022-03-09 14:20;dcubed;I was able to reproduce the failure on my MBP13, but not with my
current default of 6093 seconds/101 minutes. I bumped the value
to 12000 seconds/200 minutes and saw an OOME after 152 minutes:

Test Config: macosx-x86_64-normal-server-release
    INFO: TIMEOUT_FACTOR=4
    Done testing
    Test Run macosx-x86_64-normal-server-release time: 152.26 minutes.

    TEST                                              TOTAL  PASS  FAIL ERROR
    jtreg:open/test/hotspot/jtreg/StressWrapper_StopAtExit.java
    >>                                                       1     0     1     0 <<

    1 failure(s) found in log=do_java_test.macosx-x86_64-normal-server-release.log

    TEST: StressWrapper_StopAtExit.java
    LOG: build/macosx-x86_64-normal-server-release/test-support/jtreg_open_test_hotspot_jtreg_StressWrapper_StopAtExit_java/StressWrapper_StopAtExit.jtr
    Saving build/macosx-x86_64-normal-server-release/test-support/jtreg_open_test_hotspot_jtreg_StressWrapper_StopAtExit_java/StressWrapper_StopAtExit.jtr as /work/shared/bug_hunt/8282704_for_jdk19.git/test_failures.2022-03-09-111835/StressWrapper_StopAtExit.jtr.release

The fastdebug config did not have an OOME in 200 minutes and slowdebug just started.

Update: the slowdebug config did not have an OOME in 200 minutes either.;;;","2022-03-13 07:57;dcubed;$ unzip -l jdk-19+13_linux.8282704.zip
Archive:  jdk-19+13_linux.8282704.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    83418  2022-03-11 05:35   jdk-19+13_1/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.release
   102988  2022-03-12 05:10   jdk-19+13_2/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.release
   107003  2022-03-13 05:06   jdk-19+13_3/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.release
---------                     -------
   293409                     3 files;;;","2022-03-15 13:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7819
Date: 2022-03-15 14:56:29 +0000;;;","2022-03-16 22:46;dholmes;Fixing JDK-8282952 will also fix this test issue.;;;","2022-03-17 01:34;alanb;In addition to David's comment, there are many changes in the loom repo that would require re-writing this test: The private Thread::threadTerminated method is removed, the book keeping associated with thread groups is removed, and several of the terminally deprecated methods in ThreadGroup have even degraded. Furthermore, I hope to degrade Thread.stop in an upcoming release so that it throws UOE unconditionally.;;;","2022-03-17 09:30;dcubed;@dholmes-ora and [~alanb] - I would still prefer to fix this test. I maintain my
stress kit for many releases so having an approved and fixed version of this
test would be good to have. Not just until you (David) fix this bug in JDK19:

JDK-8282952

but for potential backport to earlier releases also. And for earlier versions
of my stress kit, the fixed test will be included in the stress kit itself until
(and if) the fix is backported. Thanks!

If Loom does integrate in JDK19 and Thread.stop() is degraded to throw UOE,
then this test will be removed and I'll create a JVM/TI version of the test for the
stress kit.;;;","2022-03-17 11:59;dcubed;I've attached the latest RSS monitor results with the fix for this
bug (JDK-8282704) and JDK-8282314 in place on my M1 MacMini:

do_all_check_stress_results.jdk-19+13_redo_1.log

My analysis scripts no longer complain about possible leaks.

However, I do still see something suspicious in the max_value values
for StressWrapper_suspendthrd003. Here's all the max_value values
from the most recent run:

$ grep max_value !$
grep max_value do_all_check_stress_results.jdk-19+13_redo_1.log
max_value=72128
max_value=179728
max_value=178400
max_value=142480
max_value=218560
max_value=208368
max_value=43600
max_value=131280
max_value=171328
max_value=202512
max_value=209456
max_value=180880
max_value=65776
max_value=180688
max_value=178720
max_value=69104
max_value=175888
max_value=179760
max_value=63856
max_value=173008
max_value=177680
max_value=125360
max_value=166176
max_value=171936
max_value=157424
max_value=213184
max_value=216320
max_value=62688
max_value=170752
max_value=174416
max_value=142448
max_value=193328
max_value=186352
max_value=56096
max_value=166816
max_value=172960
max_value=568272
max_value=3120272
max_value=1692416

The last three values are for StressWrapper_suspendthrd003 and they
are much higher than any of the other StressWrappers... Since we don't
see an OOME anymore, I have to guess that this is possibly some
native memory leak.

Here's the full entries for StressWrapper_suspendthrd003:

StressWrapper_suspendthrd003 release:
n_values=240
max_value=568272
min_value=55584
max_increase=8496
min_increase=7488
Value did not increase 1 times.
Value decreased 67 times.
Value increased 171 times

StressWrapper_suspendthrd003 fastdebug:
n_values=240
max_value=3120272
min_value=179136
max_increase=354256
min_increase=44256
Value decreased 76 times.
Value increased 163 times

StressWrapper_suspendthrd003 slowdebug:
n_values=240
max_value=1692416
min_value=182048
max_increase=170768
min_increase=15872
Value decreased 73 times.
Value increased 166 times

I haven't used NMT for a long time so I'll likely investigate
this possible issue with another bug...


;;;","2022-03-19 06:45;dukebot;Changeset: 3f923b82
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-03-19 13:43:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3f923b82c31325504430b50dee262fd460004e7b
;;;","2023-04-19 06:51;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-04-19 07:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1278
Date: 2023-04-19 13:55:40 +0000;;;",,,,,,,,,,,,
Properly handle several --without options during configure,JDK-8282700,5069718,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2022-03-05 04:41,2022-03-16 18:07,2023-10-01 09:56,2022-03-11 01:14,,,,,,,,,,19,infrastructure,,0,,,,,,,,,,,,,,,,,,,"Some of the --with-* options that are processed during configure time do not properly handle the corresponding --without options and will crash when processed (For example, --without-version-string), in other more misleading cases the --without-* option may make sense to pass but will actually silently produce incorrect results if they are (For example, --without-build-user and all the --with-vendor-* options). The most elegant way to solve this would simply be to handle such cases and display warnings when they're encountered (or if the option is critical to the build process, throwing an error)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w8qj:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-03-05 07:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7713
Date: 2022-03-05 12:44:36 +0000;;;","2022-03-11 01:14;dukebot;Changeset: cab9def1
Author:    Julian Waters <jwaters@openjdk.org>
Committer: Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-03-11 09:12:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cab9def1c1ab28b0b1a8cf268d0853f6e2bfa77f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] assert(oopDesc::is_oop(obj)) in compiler/valhalla/inlinetypes/TestUnloadedInlineTypeArray.java ,JDK-8282695,5069710,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,mchung,mchung,2022-03-04 17:36,2022-03-08 05:20,2023-10-01 09:56,2022-03-08 05:20,repo-valhalla,,,,,,,,,repo-valhalla,hotspot,,0,c1,lworld,,,,,,,,,,,,,,,,,"After JDK-8282079, compiler/valhalla/inlinetypes/TestUnloadedInlineTypeArray.java started failing when running with -XX:+CheckUnhandledOops

#  Internal Error (src/hotspot/share/runtime/handles.cpp:39), pid=26001, tid=40195
#  assert(oopDesc::is_oop(obj)) failed: not an oop: 0xfffffffffffffff1

Stack: [0x00007000094e0000,0x00007000095e0000],  sp=0x00007000095de970,  free space=1018k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x123d5a9]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6e9
V  [libjvm.dylib+0x123dc2b]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V  [libjvm.dylib+0x670cdd]  report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V  [libjvm.dylib+0x8c2d91]  HandleArea::allocate_handle(oop)+0xd1
V  [libjvm.dylib+0x3c95be]  objArrayHandle::objArrayHandle(Thread*, objArrayOop)+0xce
V  [libjvm.dylib+0xeede91]  ObjArrayKlass::allocate(int, JavaThread*)+0x2f1
V  [libjvm.dylib+0xf1dd7f]  oopFactory::new_valueArray(Klass*, int, JavaThread*)+0x2ef
V  [libjvm.dylib+0xeee13f]  ObjArrayKlass::multi_allocate(int, int*, JavaThread*)+0xaf
V  [libjvm.dylib+0xeee363]  ObjArrayKlass::multi_allocate(int, int*, JavaThread*)+0x2d3
V  [libjvm.dylib+0x4bafc8]  Runtime1::new_multi_array(JavaThread*, Klass*, int, int*)+0x2a8
v  ~RuntimeStub::new_multi_array Runtime1 stub
J 98 c1 TestUnloadedInlineTypeArray.test10(LMyValue10;)V (30 bytes) @ 0x00000001191e6690 [0x00000001191e6640+0x0000000000000050]
j  TestUnloadedInlineTypeArray.main([Ljava/lang/String;)V+46

JDK-8282079 generates Preload attribute in the lambda proxies and dynamic proxies.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w8or:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-06 23:28;thartmann;This is not related to JDK-8282079 and already failed before.;;;","2022-03-07 13:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/668
Date: 2022-03-07 21:27:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/CommandLine/VMDeprecatedOptions.java fails after JDK-8281181,JDK-8282690,5069704,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,iklam,dcubed,dcubed,2022-03-04 13:05,2022-06-15 12:12,2023-10-01 09:56,2022-03-07 16:21,19,,,,,,,,,19,hotspot,,0,problemlist,regression,tier1,tier3,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

runtime/CommandLine/VMDeprecatedOptions.java

Here's a snippet from the log file:

----------System.err:(27/1938)----------
 stdout: [];
 stderr: [Java HotSpot(TM) 64-Bit Server VM warning: Option MaxGCMinorPauseMillis was deprecated in version 8.0 and will likely be removed in a future release.
Java HotSpot(TM) 64-Bit Server VM warning: Option MaxRAMFraction was deprecated in version 10.0 and will likely be removed in a future release.
Java HotSpot(TM) 64-Bit Server VM warning: Option MinRAMFraction was deprecated in version 10.0 and will likely be removed in a future release.
Java HotSpot(TM) 64-Bit Server VM warning: Option InitialRAMFraction was deprecated in version 10.0 and will likely be removed in a future release.
Java HotSpot(TM) 64-Bit Server VM warning: Option TLABStats was deprecated in version 12.0 and will likely be removed in a future release.
Java HotSpot(TM) 64-Bit Server VM warning: Option AllowRedefinitionToAddDeleteMethods was deprecated in version 13.0 and will likely be removed in a future release.
Java HotSpot(TM) 64-Bit Server VM warning: Option UseContainerCpuShares was deprecated in version 19.0 and will likely be removed in a future release.
Unrecognized VM option 'UseContainerCpuShares'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
]
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0]

	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:489)
	at VMDeprecatedOptions.testDeprecated(VMDeprecatedOptions.java:84)
	at VMDeprecatedOptions.main(VMDeprecatedOptions.java:118)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281181,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2w8nf:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-03-04 13:08;dcubed;The jdk-19+13-762-tier1 build-ID only contains the fix for:

JDK-8281181 Do not use CPU Shares to compute active processor count;;;","2022-03-04 13:08;dcubed;[~iklam]. - Can you take a look?;;;","2022-03-04 13:34;dcubed;The test failed on macosx-aarch64, macosx-x64, and windows-x64.
The test passed on linux-aarch64 and linux-x64.

I can't explain that mix of platforms yet.
;;;","2022-03-04 14:16;dcubed;src/hotspot/os/linux/globals_linux.hpp:

  product(bool, UseContainerCpuShares, false,                           \
           ""(Deprecated) Include CPU shares in the CPU availability""     \
           "" calculation."")                                              \

So the flag is only defined on Linux. That explains the platforms.;;;","2022-03-04 14:24;dcubed;$ git diff -r 8acfbc2e21063c3dc088c25c1574bcefa94e5a24 test/hotspot/jtreg/runtime/CommandLine/VMDeprecatedOptions.java
diff --git a/test/hotspot/jtreg/runtime/CommandLine/VMDeprecatedOptions.java b/test/hotspot/jtreg/runtime/CommandLine/VMDeprecatedOptions.java
index a8b5bb31194..164aaa4d9a0 100644
--- a/test/hotspot/jtreg/runtime/CommandLine/VMDeprecatedOptions.java
+++ b/test/hotspot/jtreg/runtime/CommandLine/VMDeprecatedOptions.java
@@ -54,6 +54,8 @@ public class VMDeprecatedOptions {
             {""InitialRAMFraction"",        ""64""},
             {""TLABStats"",                 ""false""},
             {""AllowRedefinitionToAddDeleteMethods"", ""true""},
+            {""UseContainerCpuShares"",      ""false""},
+            {""PreferContainerQuotaForCPUCount"", ""true""},
 
             // deprecated alias flags (see also aliased_jvm_flags):
             {""DefaultMaxRAMFraction"", ""4""},

Both UseContainerCpuShares and PreferContainerQuotaForCPUCount were added to this
test by JDK-8281181 and both are linux-only flags. I'm going to guess that we only see
UseContainerCpuShares fail because it is tested before PreferContainerQuotaForCPUCount,
but I suspect that both are a problem.

[~dholmes] - Can you chime in on this bug when you the get the chance?
;;;","2022-03-04 20:33;dholmes;<sigh> Not often we have platform specific flags like this. The test will need to use Platform.isLinux() to guard the addition of these flags to the list.;;;","2022-03-05 00:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7712
Date: 2022-03-05 08:07:47 +0000;;;","2022-03-07 16:21;dukebot;Changeset: cde923dd
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-03-08 00:19:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cde923dd471a22cd69ea2cd4994bb16eba780804
;;;",,,,,,,,,,,,,,,,,,,,,,
"fileToEncodedURL_[name|signature] symbols are unused",JDK-8282685,5069698,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,ccheung,ccheung,2022-03-04 12:11,2022-03-30 17:59,2023-10-01 09:56,2022-03-25 14:34,19,,,,,,,,,19,hotspot,,0,noreg-trivial,,,,,,,,,,,,,,,,,,The fileToEncodedURL_name and fileToEncodedURL_signature symbols are unused and could be removed from vmSymbols.hpp.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w8m3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-25 13:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7965
Date: 2022-03-25 20:31:56 +0000;;;","2022-03-25 14:34;dukebot;Changeset: 2600f99f
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-03-25 21:31:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2600f99fece951259fa3ef4deeb8da4aa2cc436e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
nsk/jvmti/PopFrame/popframe004 failed with: TEST FAILED: 30 JVMTI events were generated by the function PopFrame(),JDK-8282666,5069676,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,dcubed,dcubed,2022-03-04 08:04,2022-08-03 20:34,2023-10-01 09:56,2022-07-29 14:51,19,,,,,,,,,20,hotspot,,0,tier8,,,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

vmTestbase/nsk/jvmti/PopFrame/popframe004/TestDescription.java

Here's a snippet from the log file:

#section:main
----------messages:(4/242)----------
command: main -agentlib:popframe004 nsk.jvmti.PopFrame.popframe004
reason: User specified action: run main/othervm/native -agentlib:popframe004 nsk.jvmti.PopFrame.popframe004 
Mode: othervm [/othervm specified]
elapsed time (seconds): 38.367
----------configuration:(0/0)----------
----------System.out:(49/2119)----------
nativeMeth(): calling the native nativeMeth2()
nativeMeth2(): calling the Java activeMethod()
popFrameCls (Thread[Thread-1,5,MainThreadGroup]): inside activeMethod()
Going to pop the frame on other thread...
>>>>>>>> Invoke SuspendThread()
<<<<<<<< SuspendThread() is successfully done
>>>>>>>> Invoke PopFrame()
Check PASSED: PopFrame() failed as expected with 32: JVMTI_ERROR_OPAQUE_FRAME
Check PASSED: No JVMTI events were generated by the function PopFrame()
>>>>>>>> Invoke ResumeThread()
<<<<<<<< ResumeThread() is successfully done
popFrameCls (Thread[Thread-1,5,MainThreadGroup]): looping...
TEST FAILED: thread with the method of the popped frame is still alive
Going to pop the native frame on the current thread...
>>>>>>>> Invoke PopFrame()
#### MethodExit event occurred ####
#### MethodExit event occurred ####
Check PASSED: PopFrame() failed as expected with 32: JVMTI_ERROR_OPAQUE_FRAME
popFrameCls (Thread[Thread-1,5,MainThreadGroup]): exiting activeMethod()...
popFrameCls (Thread[Thread-1,5,MainThreadGroup]): exiting...
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
#### MethodExit event occurred ####
TEST FAILED: 30 JVMTI events were generated by the function PopFrame()
----------System.err:(0/0)----------
----------rerun:(44/8497)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w8h7:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-07-11 22:10;sspitsyn;This looks like a test bug. Or at least, the scenario below needs to be double-checked.
The native agent function doPopFrame() is called with the other thread first and then with current thread. 
The doPopFrame function suspends target thread, enables METHOD_EXIT+FRAME_POP events and calls JVMTI PopFrame.
It expects no METHOD_EXIT or FRAME_POP events posted.
However, this function keeps the METHOD_EXIT+FRAME_POP events  enabled on the other thread.
So, when it is called with current thread the METHOD_EXIT event can be posted on the other thread.
In order to prove the above, the method names at the METHOD_EXIT events will need to be printed.
In fact, the log shows  many METHOD_EXIT events have been posted, so is pretty probable scenario.;;;","2022-07-25 18:32;sspitsyn;My previous comment is not quite right.
As it is seen in the log the following message was printed (see last println):
        try {
            if (popFrameClsThr.isAlive())
                popFrameClsThr.join(2000);
        } catch (InterruptedException e) {
            out.println(""TEST INCOMPLETE: caught "" + e);
            totRes = FAILED;
        }
        if (popFrameClsThr.isAlive()) {
            out.println(""TEST FAILED: thread with the method of "" +
                ""the popped frame is still alive"");                                     <== This was printed !!!
            totRes = FAILED;
        }
It means that the timeout 2000 was expired at the call to join(2000):
                popFrameClsThr.join(2000);

The VM debug bits with -Xcomp can be very slow so that the 2000 is not enough.
I'm not sure yet if increasing the join timeout is a solution to this problem.;;;","2022-07-26 07:46;dcubed;The value passed to the join() timeout should be adjusted by
the JTREG timeoutFactor value.;;;","2022-07-29 11:48;sspitsyn;I've come to conclusion the timeout is not needed in join() there.

The suggested fix is:
diff --git a/test/hotspot/jtreg/vmTestbase/nsk/jvmti/PopFrame/popframe004.java b/test/hotspot/jtreg/vmTestbase/nsk/jvmti/PopFrame/popframe004.java
index 5f487b8605b..f2c2678e1c1 100644
--- a/test/hotspot/jtreg/vmTestbase/nsk/jvmti/PopFrame/popframe004.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/jvmti/PopFrame/popframe004.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2022, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -106,7 +106,7 @@ public class popframe004 {
 
         try {
             if (popFrameClsThr.isAlive())
-                popFrameClsThr.join(2000);
+                popFrameClsThr.join();
         } catch (InterruptedException e) {
             out.println(""TEST INCOMPLETE: caught "" + e);
             totRes = FAILED;
;;;","2022-07-29 12:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9689
Date: 2022-07-29 19:08:35 +0000;;;","2022-07-29 14:51;dukebot;Changeset: 15943e42
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-07-29 21:49:27 +0000
URL:       https://git.openjdk.org/jdk/commit/15943e424244abb2fd033521f3ca562f3539e8fd
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Code cleanup: removing double semicolons at the end of lines,JDK-8282657,5069667,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,ihse,jwaters,jwaters,2022-03-04 06:20,2022-03-14 10:26,2023-10-01 09:56,2022-03-07 13:35,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,A significant amount of source files contain dual semicolons where their lines end. This PR aims to cleanup all instances of dual semicolons.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w8f7:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11336cca,,,,,,,,,"2022-03-04 08:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7268
Date: 2022-01-28 14:39:31 +0000;;;","2022-03-07 13:35;dukebot;Changeset: ccad3923
Author:    Matteo Baccan <matteo.baccan@gmail.com>
Committer: Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-03-07 21:33:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ccad39237ab860c5c5579537f740177e3f1adcc9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZGC: vmTestbase/gc/ArrayJuggle/ tests fails intermittently with exit code 97,JDK-8282651,5069660,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rsunderbabu,pchawdhary,pchawdhary,2022-03-04 03:39,2023-06-15 04:41,2023-10-01 09:56,2023-01-20 03:11,11,17,20,,,,,,,21,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,sustaining,zgc,,,,,,,,,,,,,"Test cases : vmTestbase/gc/ArrayJuggle/Juggle*/TestDescription.java
OS: linux x64 20.04
Where: 11u-cpu
Is it a regression: NO (intermittent failure, failed in few runs in Mach5)
jvm args : -server -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -XX:+CreateCoredumpOnCrash

Failure Log :
----------System.out:(85/5070)----------
Stress time: 60 seconds
Stress iterations factor: 1
Stress threads factor: 1
Stress runs factor: 1
Max memory: 1337982976
Sleep time: 500
Iterations: 0
Number of threads: 24
Seed: 1646243835440
Run GC thread: false
Run mem diag thread: false
Run forever: false
Garbage producer: nsk.share.gc.gp.misc.HashedGarbageProducer@12762a6
Memory strategy: high
Object count: 100
Object size: 8027897
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@6d1ca058,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@29ba033e,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@21ac7831,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@5021a5ae,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@5ce4dea6,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@25be85f7,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@67910c81,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@3a40c908,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@402b3108,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@11eb95c7,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@7e71667f,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@4245e830,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@5bff3201,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@16f7d114,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@63400f2b,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@e297f1b,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@2ce43be5,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@433301c,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@67e94ee6,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@22fd34a7,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@2fcb080e,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@32657e3b,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@1fd688ef,5,MainThreadGroup]
Starting Thread[gc.ArrayJuggle.Juggle01.Juggle01$Juggler@54c5cfbe,5,MainThreadGroup]
Exception in 
gc.ArrayJuggle.Juggle01.Juggle01$Juggler@1fd688ef
Exception in 
Exception in 
gc.ArrayJuggle.Juggle01.Juggle01$Juggler@3a40c908
Exception in 
java.lang.OutOfMemoryError: Java heap space
gc.ArrayJuggle.Juggle01.Juggle01$Juggler@433301c
java.lang.OutOfMemoryError: Java heap space
gc.ArrayJuggle.Juggle01.Juggle01$Juggler@5bff3201
Exception in 
gc.ArrayJuggle.Juggle01.Juggle01$Juggler@2ce43be5
java.lang.OutOfMemoryError: Java heap space
	at nsk.share.gc.gp.array.DoubleArrayProducer.create(DoubleArrayProducer.java:35)
	at nsk.share.gc.gp.array.DoubleArrayProducer.create(DoubleArrayProducer.java:33)
	at nsk.share.gc.gp.DerivedProducer.createParent(DerivedProducer.java:38)
	at nsk.share.gc.gp.misc.HashedGarbageProducer.create(HashedGarbageProducer.java:57)
	at gc.ArrayJuggle.Juggle01.Juggle01$Juggler.run(Juggle01.java:58)
	at nsk.share.runner.ThreadsRunner$ManagedThread.run(ThreadsRunner.java:83)
java.lang.OutOfMemoryError: Java heap space
	at nsk.share.gc.gp.array.DoubleArrayProducer.create(DoubleArrayProducer.java:35)
	at nsk.share.gc.gp.array.DoubleArrayProducer.create(DoubleArrayProducer.java:33)
	at nsk.share.gc.gp.DerivedProducer.createParent(DerivedProducer.java:38)
	at nsk.share.gc.gp.misc.HashedGarbageProducer.create(HashedGarbageProducer.java:57)
	at gc.ArrayJuggle.Juggle01.Juggle01$Juggler.run(Juggle01.java:58)
	at nsk.share.runner.ThreadsRunner$ManagedThread.run(ThreadsRunner.java:83)
java.lang.OutOfMemoryError: Java heap space
Failures summary:
java.lang.OutOfMemoryError: Java heap space
java.lang.OutOfMemoryError: Java heap space
	at nsk.share.gc.gp.array.DoubleArrayProducer.create(DoubleArrayProducer.java:35)
	at nsk.share.gc.gp.array.DoubleArrayProducer.create(DoubleArrayProducer.java:33)
	at nsk.share.gc.gp.DerivedProducer.createParent(DerivedProducer.java:38)
	at nsk.share.gc.gp.misc.HashedGarbageProducer.create(HashedGarbageProducer.java:57)
	at gc.ArrayJuggle.Juggle01.Juggle01$Juggler.run(Juggle01.java:58)
	at nsk.share.runner.ThreadsRunner$ManagedThread.run(ThreadsRunner.java:83)
java.lang.OutOfMemoryError: Java heap space
	at nsk.share.gc.gp.array.DoubleArrayProducer.create(DoubleArrayProducer.java:35)
	at nsk.share.gc.gp.array.DoubleArrayProducer.create(DoubleArrayProducer.java:33)
	at nsk.share.gc.gp.DerivedProducer.createParent(DerivedProducer.java:38)
	at nsk.share.gc.gp.misc.HashedGarbageProducer.create(HashedGarbageProducer.java:57)
	at gc.ArrayJuggle.Juggle01.Juggle01$Juggler.run(Juggle01.java:58)
	at nsk.share.runner.ThreadsRunner$ManagedThread.run(ThreadsRunner.java:83)
java.lang.OutOfMemoryError: Java heap space
java.lang.OutOfMemoryError: Java heap space
----------System.err:(16/950)----------
nsk.share.TestFailure: Test exit code: 97
	at nsk.share.test.Tests$TestRunner.execute(Tests.java:90)
	at nsk.share.test.Tests$TestRunner.run(Tests.java:96)
	at nsk.share.gc.GC.runTest(GC.java:114)
	at gc.ArrayJuggle.Juggle01.Juggle01.main(Juggle01.java:88)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:834)

JavaTest Message: Test threw exception: nsk.share.TestFailure: Test exit code: 97
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: nsk.share.TestFailure: Test exit code: 97",,,,,,,,,,,JDK-8301469,JDK-8310121,JDK-8300410,JDK-8301908,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2w8dn:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-07-21 09:28;rsunderbabu;All the OOME occurrence has happened when memory strategy is high. The load exerted by these tests needs to be reviewed.;;;","2022-07-23 09:15;rsunderbabu;The JuggleTests continuously allocate memory and juggle them in various array positions. Over the course of allocation, heap might be fully filled, esp in high memory strategy. The test doesn't take into account OOME and run under the assumption that any freed memory would be immediately GCed. Immediate GC under memory stress is not guaranteed. Hence it is better to explicitly call WhiteBox API to do the job.

test/hotspot/jtreg/vmTestbase/gc/ArrayJuggle/Juggle01/Juggle01.java
-                                array[index] = garbageProducer.create(objectSize);
+                                try {
+                                    array[index] = garbageProducer.create(objectSize);
+                                } catch (OutOfMemoryError e) {
+                                    sun.hotspot.WhiteBox.getWhiteBox().youngGC();
+                                }
                         }
;;;","2022-07-26 08:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9643
Date: 2022-07-26 15:47:39 +0000;;;","2022-07-26 09:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9645
Date: 2022-07-26 16:18:30 +0000;;;","2023-01-03 07:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11830
Date: 2023-01-03 15:14:10 +0000;;;","2023-01-20 03:09;rsunderbabu;Changeset: 1f438a8a
Author: Ramkumar Sunderbabu <rsunderbabu@openjdk.org>
Committer: Fairoz Matte <fmatte@openjdk.org>
Date: 2023-01-18 06:53:04 +0000
URL: https://git.openjdk.org/jdk/commit/1f438a8a702034c2f10c0008e72395f526b15ef5;;;","2023-01-20 03:09;rsunderbabu;Fix was pushed while main bug was targeted to '20'. Reset the main bug to fixed in '21' and copied the Robo Duke entry here.;;;","2023-06-13 11:49;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
No risk, only a test change.
Clean backport. SAP nightly testing passed.;;;","2023-06-13 12:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1431
Date: 2023-06-13 18:54:54 +0000;;;",,,,,,,,,,,,,,,,,,,,,
vmTestbase/gc/gctests/LoadUnloadGC2/LoadUnloadGC2.java fails intermittently with exit code 1,JDK-8282642,5069646,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rsunderbabu,pchawdhary,pchawdhary,2022-03-03 21:36,2022-10-14 09:06,2023-10-01 09:56,2022-08-08 08:12,11,,,,,,,,,20,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sqebug,sustaining,zgc,,,,,,,,,,,,"Test cases : vmTestbase/gc/gctests/LoadUnloadGC2/LoadUnloadGC2.java
OS: linux x64 20.04
Where: 11u-cpu
Is it a regression: NO (intermittent failure)
jvm args : -server -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -XX:+CreateCoredumpOnCrash

Failure Log :
----------System.out:(20/365)----------
Stress time: 60 seconds
Stress iterations factor: 1
Stress threads factor: 1
Stress runs factor: 1
Max memory: 1348468736
Sleep time: 500
Iterations: 0
Number of threads: 24
Seed: 1646270299850
Run GC thread: false
Run mem diag thread: false
Run forever: false
Iteration: 1
Iteration: 2
Iteration: 3
Iteration: 4
Iteration: 5
Iteration: 6
Iteration: 7
Iteration: 8
----------System.err:(4/200)----------

Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread ""MainThread""

Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread ""main""",,,,,,,,,,,JDK-8293982,JDK-8294833,JDK-8293784,JDK-8295366,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2w8aj:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-07-25 09:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9628
Date: 2022-07-25 16:09:27 +0000;;;","2022-08-08 08:12;dukebot;Changeset: 7db5abdd
Author:    Ramkumar Sunderbabu <rsunderbabu@openjdk.org>
Committer: Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-08-08 15:07:48 +0000
URL:       https://git.openjdk.org/jdk/commit/7db5abddd126db388b1a7f89be258e8aa7104da7
;;;","2022-09-30 05:49;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-09-30 06:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/759
Date: 2022-09-30 12:55:39 +0000;;;","2022-09-30 12:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/762
Date: 2022-09-30 18:56:32 +0000;;;","2022-09-30 12:38;vrudomet;Just realized I'm a bit late to the game with my backport. Ok to withdraw my request in favor of Goetz as being first one.;;;","2022-10-13 05:37;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
No risk, only a test change.
Not clean. I had to adapt the test description.
Test passes. SAP nighlty testing passed.;;;","2022-10-13 05:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1456
Date: 2022-10-13 12:36:55 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Create a test for JDK-4740761,JDK-8282640,5069644,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-03-03 21:17,2022-10-11 04:26,2023-10-01 09:56,2022-04-11 18:33,11,17,18,19,8,,,,,19,client-libs,,0,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,"Create a test for JDK-4740761

The issue observed is in a JFrame with a JTextField and a JScrollPane which contains focused component. When the JScrollPane was
is removed from its parent,  focus stays with the the scroller
of the removed JScrollPane, instead of moving to the TextField.

The test verifies the same - i.e. it  verifies that the removal of the scrollpane moves the focus to the JTextField present in the JFrame. ",,,,,,,,,,,JDK-8289265,JDK-8295138,JDK-8288569,JDK-8288857,JDK-8288727,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w8a3:",9223372036854775807,b18,,,,,,,,,,,"2022-03-03 22:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7686
Date: 2022-03-04 05:35:38 +0000;;;","2022-04-11 18:33;dukebot;Changeset: fad3b947
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2022-04-12 01:30:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fad3b9478663d319d1136422e6b4bea72a540544
;;;","2022-06-20 05:29;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-06-20 05:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/473
Date: 2022-06-20 12:29:14 +0000;;;","2022-10-09 23:41;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2022-10-10 00:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1424
Date: 2022-10-10 06:52:04 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
jarsigner output does not explain why an EC key is disabled if its curve has been disabled,JDK-8282633,5069637,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hchao,weijun,weijun,2022-03-03 12:32,2022-03-24 18:27,2023-10-01 09:56,2022-03-15 08:56,,,,,,,,,,19,security-libs,,0,,,,,,,,,,,,,,,,,,,"Try disabling a curve by including its name inside the `jdk.disabled.namedCurves` security property and add `include jdk.disabled.namedCurves` in the `jdk.jar.disabledAlgorithms` security oroperty. The curve should be disabled.

If you sign a JAR file using such a key or verify a signed JAR signed with it, jarsigner will successfully point out the key is weak and the ""signed"" JAR is treated as unsigned. However, the warning messages do not explain why it's weak.

For the signing side, it shows

    The EC signing key has a keysize of 256 which is considered a security risk and is disabled.

For the verification side (with -verbose) it shows

    - Signed by ""CN=a""
        Digest algorithm: SHA-256
        Signature algorithm: SHA256withECDSA, 256-bit key (disabled)

    WARNING: The jar will be treated as unsigned, because it is signed with a weak algorithm that is now disabled by the security property:

      jdk.jar.disabledAlgorithms=include jdk.disabled.namedCurves, MD2, MD5, RSA keySize < 1024, DSA keySize < 1024, SHA1 denyAfter 2019-01-01

Here only the key algorithm and key size are displayed, but the reason why it's disabled -- the curve name -- is not there.

On the other hand, if we disable the curve in `jdk.certpath.disabledAlgorithms`, keytool is able to show

    Subject Public Key Algorithm: 256-bit EC (secp256r1) key (weak)

Here it shows both the keysize and curve name.

BTW, adding `EC keysize < 300` can reach the same result,  but in that case it's easier to understand why. Fortunately, we currently don't support multiple curves with the same keysize.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283665,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w88j:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,,,"2022-03-14 10:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7810
Date: 2022-03-14 17:41:28 +0000;;;","2022-03-15 08:56;dukebot;Changeset: f43ffe21
Author:    Hai-May Chao <hchao@openjdk.org>
Date:      2022-03-15 15:54:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f43ffe211f8ff287697092c39e4c25a16b40a383
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential memory leak in sun.font.FontConfigManager.getFontConfig(),JDK-8282628,5069631,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2022-03-03 10:25,2022-04-22 06:48,2023-10-01 09:56,2022-03-09 05:30,17,18,19,,,,,,,19,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,redhat-interest,,,,,,,,,,,,,"The method is a native method defined in fontpath.c

Java_sun_font_FontConfigManager_getFontConfig  { 

...
 cacheDirs = (*FcConfigGetCacheDirs)(NULL);
    935         if (cacheDirs != NULL) {
    936             while ((cnt < max) && (cacheDir = (*FcStrListNext)(cacheDirs))) {
    937                 jstr = (*env)->NewStringUTF(env, (const char*)cacheDir);
    938                 JNU_CHECK_EXCEPTION(env);
    939 
    940                 (*env)->SetObjectArrayElement(env, cacheDirArray, cnt++, jstr);
    941                 (*env)->DeleteLocalRef(env, jstr);
    942             }
    943             (*FcStrListDone)(cacheDirs);
    944         }

...
}

cacheDir is allocated by (*FcConfigGetCacheDirs)(NULL), but inside the while loop, if there is an exception occurred, macro JNU_CHECK_EXCEPTION(env) [1] ; will return without calling  (*FcStrListDone)(cacheDirs);, therefore, cacheDir is leaked.

[1] #define JNU_CHECK_EXCEPTION(env)                \
    do {                                        \
        if ((env)->ExceptionCheck()) {          \
            return;                             \
        }                                       \
    } while (0)                                 \
",,,,,,,,,,,JDK-8284216,JDK-8284215,JDK-8285476,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w877:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-03-04 05:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7691
Date: 2022-03-04 13:25:12 +0000;;;","2022-03-09 05:30;dukebot;Changeset: 5df2a057
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-03-09 13:27:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5df2a057707eb65148f96710bd57d8dd8d85d1ed
;;;","2022-03-28 17:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/56
Date: 2022-03-29 00:27:54 +0000;;;","2022-03-28 17:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/288
Date: 2022-03-29 00:27:14 +0000;;;","2022-03-28 17:48;zgu;Fix Request (18u)

I would like to backport this clean and low risk patch to 18u. The patch fixes a memory leak.;;;","2022-03-28 17:49;zgu;Fix Request (17u)

I would like to backport this clean and low risk patch to 17u. The patch fixes a memory leak.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Revert semantic of session accessors,JDK-8282626,5069629,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-03-03 10:18,2022-03-08 08:35,2023-10-01 09:56,2022-03-08 08:35,repo-panama,,,,,,,,,,tools,,0,foreign-preview,,,,,,,,,,,,,,,,,,"In an attempt to make memory segments more securable, we have tweaked session accessors to return non-closeable views.

While this effectively prevents clients from closing a session if they only have a memory segment, which might be desirable in some cases, in the general case, and especially in the case of one-off memory segments, associated with a single scope, going down this path is problematic, and introduce asymmetries in the API.

At the same time, close() is just one of the things that an API might want to protect against; clients might allocate memory in the API scope, or make it non-closeable by adding a close action that lasts forever.

In other words, the measures we took harm some use cases without achieving the desired effects of making memory segments more shareable across clients.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w86r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-03-03 10:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/661
Date: 2022-03-03 18:31:27 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1: Fix indentation in G1CollectedHeap::mark_evac_failure_object,JDK-8282619,5069621,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2022-03-03 07:53,2022-03-09 16:03,2023-10-01 09:56,2022-03-03 08:18,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,"Indentation in G1CollectedHeap::mark_evac_failure_object is wrong, indented two spaces too much.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w84z:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-03-03 08:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7678
Date: 2022-03-03 15:55:59 +0000;;;","2022-03-03 08:18;dukebot;Changeset: c777bb3d
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-03-03 16:16:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c777bb3df3234faff24b92e55977c7f4ae750647
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"sun.net.www.protocol.https.HttpsClient#putInKeepAliveCache() doesn't use a lock while dealing with ""inCache"" field",JDK-8282617,5069619,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2022-03-03 07:43,2022-03-09 16:07,2023-10-01 09:56,2022-03-06 00:18,17,,,,,,,,,19,core-libs,,0,noreg-hard,,,,,,,,,,,,,,,,,,"HttpsClient extends sun.net.www.http.HttpClient. HttpClient internally uses a lock when dealing with internal state, in methods like putInKeepAliveCache(). The HttpsClient overrides this method and in its implementation it doesn't use the lock when dealing with the ""inCache"" internal field. This looks like an oversight.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6782751,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w84j:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-03-03 08:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7680
Date: 2022-03-03 16:13:37 +0000;;;","2022-03-06 00:18;dukebot;Changeset: 974ef554
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-03-06 08:16:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/974ef5542fe52f9cb8ffd8751df8a020bca503c9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] C2 does not properly handle circular .ref or value class fields,JDK-8282616,5069618,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2022-03-03 07:39,2023-02-13 03:23,2023-10-01 09:56,2023-02-13 03:23,repo-valhalla,,,,,,,,,repo-valhalla,hotspot,,0,c2,lw4,lworld,,,,,,,,,,,,,,,,Circular .ref or value class fields lead to a segmentation fault due to stack overflow during C2 compilation. The root cause is infinite recursion when C2 creates IR for scalarizing these fields.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296056,,JDK-8302217,,,,,,JDK-8302308,,,,,,"2022-03-03 07:41;thartmann;circularity.patch;https://bugs.openjdk.org/secure/attachment/98170/circularity.patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w84b:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-03 07:42;thartmann;Putting this on hold for now because the fix is complex. Will address once the even larger fix for JDK-8278390 is in.

Tests and some initial prototyping are attached (circularity.patch).;;;","2023-02-13 02:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/824
Date: 2023-02-13 09:58:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
RawNativeLibraryImpl can't be passed to NativeLibraries::findEntry0,JDK-8282608,5069608,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mchung,dcubed,dcubed,2022-03-03 06:48,2022-08-05 10:27,2023-10-01 09:56,2022-03-03 19:43,19,,,,,,,,,19,core-libs,,0,tier4,,,,,,,,,,,,,,,,,,"The following tests failed in the JDK19 CI:

   2 java/foreign/SafeFunctionAccessTest.java
   2 java/foreign/StdLibTest.java
   2 java/foreign/TestDowncall.java
   2 java/foreign/TestFunctionDescriptor.java
   2 java/foreign/TestIllegalLink.java
   2 java/foreign/TestIntrinsics.java
   2 java/foreign/TestNative.java
   2 java/foreign/TestUpcall.java#async
   2 java/foreign/TestUpcall.java#no_scope
   2 java/foreign/TestUpcall.java#scope
   2 java/foreign/TestUpcallException.java
   2 java/foreign/TestUpcallHighArity.java
   2 java/foreign/TestUpcallStructScope.java
   2 java/foreign/TestVarArgs.java
   2 java/foreign/malloc/TestMixedMallocFree.java
   2 java/foreign/stackwalk/TestAsyncStackWalk.java#default_gc
   2 java/foreign/stackwalk/TestAsyncStackWalk.java#zgc
   2 java/foreign/stackwalk/TestStackWalk.java#default_gc
   2 java/foreign/stackwalk/TestStackWalk.java#zgc
   2 java/foreign/upcalldeopt/TestUpcallDeopt.java
   2 java/foreign/valist/VaListTest.java
   2 java/foreign/virtual/TestVirtualCalls.java

So far the tests have failed on linux-aarch64 and linux-x64.

This looks like a regression so I'm starting this bug as a P2.

Here's a snippet from the TestVirtualCalls.java log file:

----------System.out:(49/3901)----------
FATAL ERROR in native method: Wrong field ID passed to JNI
	at jdk.internal.loader.NativeLibraries.findEntry0(java.base@19-ea/Native Method)
	at jdk.internal.loader.RawNativeLibraries$RawNativeLibraryImpl.find(java.base@19-ea/RawNativeLibraries.java:156)
	at jdk.internal.loader.NativeLibrary.lookup(java.base@19-ea/NativeLibrary.java:49)
	at jdk.internal.foreign.SystemLookup.lambda$libLookup$7(jdk.incubator.foreign@19-ea/SystemLookup.java:94)
	at jdk.internal.foreign.SystemLookup$$Lambda$65/0x000000080106f520.lookup(jdk.incubator.foreign@19-ea/Unknown Source)
	at jdk.internal.foreign.SystemLookup.lookup(jdk.incubator.foreign@19-ea/SystemLookup.java:119)
	at jdk.incubator.foreign.CLinker.lookup(jdk.incubator.foreign@19-ea/CLinker.java:173)
	at NativeTestHelper.<clinit>(NativeTestHelper.java:91)
	at jdk.internal.misc.Unsafe.ensureClassInitialized0(java.base@19-ea/Native Method)
	at jdk.internal.misc.Unsafe.ensureClassInitialized(java.base@19-ea/Unsafe.java:1160)
	at jdk.internal.reflect.MethodHandleAccessorFactory.ensureClassInitialized(java.base@19-ea/MethodHandleAccessorFactory.java:300)
	at jdk.internal.reflect.MethodHandleAccessorFactory.newConstructorAccessor(java.base@19-ea/MethodHandleAccessorFactory.java:103)
	at jdk.internal.reflect.ReflectionFactory.newConstructorAccessor(java.base@19-ea/ReflectionFactory.java:201)
	at java.lang.reflect.Constructor.acquireConstructorAccessor(java.base@19-ea/Constructor.java:546)
	at java.lang.reflect.Constructor.newInstanceWithCaller(java.base@19-ea/Constructor.java:496)
	at java.lang.reflect.Constructor.newInstance(java.base@19-ea/Constructor.java:483)
	at org.testng.internal.ObjectFactoryImpl.newInstance(ObjectFactoryImpl.java:23)
	at org.testng.internal.InstanceCreator.instantiateUsingDefaultConstructor(InstanceCreator.java:193)
	at org.testng.internal.InstanceCreator.createInstanceUsingObjectFactory(InstanceCreator.java:113)
	at org.testng.internal.InstanceCreator.createInstance(InstanceCreator.java:79)
	at org.testng.internal.ClassImpl.getDefaultInstance(ClassImpl.java:109)
	at org.testng.internal.ClassImpl.getInstances(ClassImpl.java:167)
	at org.testng.TestClass.getInstances(TestClass.java:102)
	at org.testng.TestClass.initTestClassesAndInstances(TestClass.java:82)
	at org.testng.TestClass.init(TestClass.java:74)
	at org.testng.TestClass.<init>(TestClass.java:39)
	at org.testng.TestRunner.initMethods(TestRunner.java:457)
	at org.testng.TestRunner.init(TestRunner.java:336)
	at org.testng.TestRunner.init(TestRunner.java:289)
	at org.testng.TestRunner.<init>(TestRunner.java:180)
	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:613)
	at org.testng.SuiteRunner.init(SuiteRunner.java:178)
	at org.testng.SuiteRunner.<init>(SuiteRunner.java:112)
	at org.testng.TestNG.createSuiteRunner(TestNG.java:1306)
	at org.testng.TestNG.createSuiteRunners(TestNG.java:1282)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1131)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.lang.invoke.LambdaForm$DMH/0x0000000801002000.invokeStatic(java.base@19-ea/LambdaForm$DMH)
	at java.lang.invoke.LambdaForm$MH/0x0000000801003400.invoke(java.base@19-ea/LambdaForm$MH)
	at java.lang.invoke.Invokers$Holder.invokeExact_MT(java.base@19-ea/Invokers$Holder)
	at jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(java.base@19-ea/DirectMethodHandleAccessor.java:155)
	at jdk.internal.reflect.DirectMethodHandleAccessor.invoke(java.base@19-ea/DirectMethodHandleAccessor.java:104)
	at java.lang.reflect.Method.invoke(java.base@19-ea/Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.lang.Thread.run(java.base@19-ea/Thread.java:828)
----------System.err:(1/56)----------
WARNING: Using incubator modules: jdk.incubator.foreign
----------rerun:(39/7090)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282612,,,,,,,,,,,JDK-8282515,JDK-8290231,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,,,,,"0|i2w823:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ae6d091,,,,,,,Fix failed,,"2022-03-03 06:57;dcubed;There's one changeset in jdk-19+13-736-tier4 that might be related:

JDK-8282515 More clean up on NativeLibraries just for JNI library use

[~mchung] - Can you please take a look?;;;","2022-03-03 09:21;dcubed;The failing tests pass in earlier tiers. It looks like the Tier4 task
definition adds: -Xcheck:jni;;;","2022-03-03 10:29;mchung;NativeLibraries::findEntry0 works only for NativeLibraryImpl instances as it hardcodes the field ID of NativeLibraryImpl::handle field.   RawNativeLibraryImpl should have its own findEntry0 native method to access the  `RawNativeLibraryImpl::handle` field instead.;;;","2022-03-03 14:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7684
Date: 2022-03-03 21:57:19 +0000;;;","2022-03-03 19:43;dukebot;Changeset: 7e1c67d4
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2022-03-04 03:41:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7e1c67d4af76eba688927a24d711181570e965ef
;;;","2022-03-04 07:16;dcubed;The fix for this bug is integrated in jdk-19+13-750.;;;",,,,,,,,,,,,,,,,,,,,,,,,
"runtime/ErrorHandling/MachCodeFramesInErrorFile.java failed with ""RuntimeException: 0 < 2""",JDK-8282607,5069607,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dcubed,dcubed,2022-03-03 06:34,2022-05-14 03:50,2023-10-01 09:56,2022-05-11 13:10,18.0.2,19,,,,,,,,19,hotspot,,0,18u-tier1,hs_err,intermittent,tier3,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

runtime/ErrorHandling/MachCodeFramesInErrorFile.java

Here's a snippet from the log file:

----------System.out:(4/4300)----------
Command line: [/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+13-740/macosx-aarch64-debug.jdk/jdk-19/fastdebug/bin/java -cp /System/Volumes/Data/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S38705/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/733c0776-71e9-4ef5-8d22-2f24223f8fd9/runs/4d71a7bd-e8c7-4955-bd54-170efada6454/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/classes/1/runtime/ErrorHandling/MachCodeFramesInErrorFile.d:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+13-740/src.full/open/test/hotspot/jtreg/runtime/ErrorHandling:/System/Volumes/Data/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S38705/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/733c0776-71e9-4ef5-8d22-2f24223f8fd9/runs/4d71a7bd-e8c7-4955-bd54-170efada6454/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/classes/1/test/lib:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar -Xmx64m --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED -XX:-CreateCoredumpOnCrash -Xcomp -XX:-TieredCompilation -XX:CompileCommand=compileonly,MachCodeFramesInErrorFile$Crasher.crashIn* -XX:CompileCommand=dontinline,MachCodeFramesInErrorFile$Crasher.crashIn* -XX:CompileCommand=dontinline,*/Unsafe.getLong MachCodeFramesInErrorFile$Crasher crashInJava ]
[2022-03-03T13:25:00.880645Z] Gathering output for process 38960
Command line: [/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+13-740/macosx-aarch64-debug.jdk/jdk-19/fastdebug/bin/java -cp /System/Volumes/Data/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S38705/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/733c0776-71e9-4ef5-8d22-2f24223f8fd9/runs/4d71a7bd-e8c7-4955-bd54-170efada6454/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/classes/1/runtime/ErrorHandling/MachCodeFramesInErrorFile.d:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+13-740/src.full/open/test/hotspot/jtreg/runtime/ErrorHandling:/System/Volumes/Data/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S38705/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/733c0776-71e9-4ef5-8d22-2f24223f8fd9/runs/4d71a7bd-e8c7-4955-bd54-170efada6454/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/classes/1/test/lib:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar -Xmx64m --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED -XX:-CreateCoredumpOnCrash -Xcomp -XX:-TieredCompilation -XX:CompileCommand=compileonly,MachCodeFramesInErrorFile$Crasher.crashIn* -XX:CompileCommand=dontinline,MachCodeFramesInErrorFile$Crasher.crashIn* -XX:CompileCommand=dontinline,*/Unsafe.getLong MachCodeFramesInErrorFile$Crasher crashInVM ]
[2022-03-03T13:25:01.064398Z] Gathering output for process 38963
----------System.err:(12/649)----------
java.lang.RuntimeException: 0 < 2
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at MachCodeFramesInErrorFile.run(MachCodeFramesInErrorFile.java:161)
	at MachCodeFramesInErrorFile.main(MachCodeFramesInErrorFile.java:106)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 0 < 2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286771,JDK-8275677,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2w81v:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-03 06:40;dcubed;Here's the code block with the failing assert:

test/hotspot/jtreg/runtime/ErrorHandling/MachCodeFramesInErrorFile.java

        Matcher matcher = Pattern.compile(""\\[MachCode\\]\\s*\\[Verified Entry Point\\]\\s*  # \\{method\\} \\{[^}]*\\} '([^']+)' '([^']+)' in '([^']+)'"", Pattern.DOTALL).matcher(hsErr);
        List<String> machCodeHeaders = matcher.results().map(mr -> String.format(""'%s' '%s' in '%s'"", mr.group(1), mr.group(2), mr.group(3))).collect(Collectors.toList());
        int minExpectedMachCodeSections = Math.max(1, compiledJavaFrames);
        if (machCodeHeaders.size() < minExpectedMachCodeSections) {
            Asserts.fail(machCodeHeaders.size() + "" < "" + minExpectedMachCodeSections);
        };;;","2022-05-11 03:31;dnsimon;I've looked through the failures and in all cases, the problem is that hs_err is truncated while printing the register to memory mapping and always while printing x14. Here are a few examples:

---- Example 1 ----
Register to memory mapping:

 x0=0x000000000000000a is an unknown value
 x1=0x000000000000000a is an unknown value
 x2=0x0 is NULL
 x3=0x000000000000000a is an unknown value
 x4=0x000000013e009080 points into unknown readable memory: 0xabababababababab | ab ab ab ab ab ab ab ab
 x5=0x0000000000000005 is an unknown value
 x6=0x0 is NULL
 x7=0x0 is NULL
 x8=0x0 is NULL
 x9=0x0000000000000001 is an unknown value
x10=0x2010000030300000 is an unknown value
x11=0x0000000000000002 is an unknown value
x12={method} {0x0000000800467b20} 'getLong' '(Ljava/lang/Object;J)J' in 'jdk/internal/misc/Unsafe'
x13=0x0000000080000000 is an unknown value
x14=

---- Example 2 ----
Register to memory mapping:

 x0=0x000000000000000a is an unknown value
 x1=0x000000000000000a is an unknown value
 x2=0x0 is NULL
 x3=0x000000000000000a is an unknown value
 x4=0x000000012002ebc0 is pointing into metadata
 x5=0x0000000000000012 is an unknown value
 x6=0x0 is NULL
 x7=0x0000000136808210 is a thread
 x8=0x0 is NULL
 x9=0x0000000000000001 is an unknown value
x10=0x2010000030300000 is an unknown value
x11=0x0000010000000102 is an unknown value
x12={method} {0x00000008004b0ed0} 'getLong' '(Ljava/lang/Object;J)J' in 'jdk/internal/misc/Unsafe'
x13=0x0000000080000000 is an unknown value
x14=


Is register x14 special on macosx-aarch64? Could this be a missing WX transition in hs-err dumping? Or some unsafe memory access in os::print_location[1]?

BTW, this is also reported by JDK-8275677 which was closed with a resolution of ""External"" (not sure what that means).

[1] https://github.com/openjdk/jdk/blob/73c5e993e17f7435553edae79a1e8d70ece5493d/src/hotspot/share/runtime/os.cpp#L1072;;;","2022-05-11 03:37;dnsimon;I put up a PR to workaround the truncation as I don't believe it is caused by the test itself: https://github.com/openjdk/jdk/pull/8650;;;","2022-05-11 03:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8650
Date: 2022-05-11 10:36:19 +0000;;;","2022-05-11 13:10;dukebot;Changeset: 1c50ea36
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2022-05-11 20:08:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1c50ea36a5878869ecdba7c3135eea4216ade675
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
SSLSocketImpl should not use user_canceled workaround when not necessary,JDK-8282600,5069600,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2022-03-03 02:42,2023-03-14 11:56,2023-10-01 09:56,2022-05-05 05:16,,,,,,,,,,19,security-libs,,0,interop,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-external,noreg-hard,,,,,,,,,,"When testing compatibility of jdk TLS implementation with gnutls, I have found a problem. The problem is, that gnutls does not like use of user_canceled alert when closing TLS-1.3 connection from duplexCloseOutput() (used by socket.close() unless shutdownOutput was called explicitly) and considers it error. (For more details see: [1])

As I understand it, usage of user_canceled alert before close is workaround for an issue of not being able to cleanly initialize full (duplex) close of TLS-1.3 connection (other side is not required to immediately close the after receiving close_notify, unlike in earlier TLS versions). Some legacy programs could probably hang or something, expecting socket.close to perform immediate duplex close. Problem is this is not what user_canceled alert is intended for [2] and it is therefore undefined how the other side handles this. (JDK itself replies to close_notify preceded by user_canceled alert by immediately closing its output [3].)

This fix disables this workaround when it is not necessary (connection is already half-closed by the other side). This way it fixes my case (gnutls client connected to jdk server initiates close) and it should be safe. (As removing workaround altogether could probably reintroduce issues for legacy apps... )

I also ran jdk_security tests locally, which passed for me.

[1] https://bugzilla.redhat.com/show_bug.cgi?id=1918473
[2] https://datatracker.ietf.org/doc/html/rfc8446#section-6.1
[3]
jdk/src/java.base/share/classes/sun/security/ssl/Alert.java

Line 243 in b6c35ae
 if (alert == Alert.CLOSE_NOTIFY) { ",,,,,,,,,,,JDK-8296232,JDK-8304167,JDK-8304057,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282623,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w80b:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-03-03 02:44;sgehwolf;Assigning this to myself on behalf of Zdenek Zambersky who has a PR for this here:
https://github.com/openjdk/jdk/pull/7664;;;","2022-03-03 03:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7664
Date: 2022-03-02 19:04:26 +0000;;;","2022-03-03 08:47;zzambers;Added tag noreg-external, as internal tests are not good fit for this. Additional 3rd party dependencies (gnutls) and setup are required.

Issue can be reproduced by my ssl-tests testsuite, if necessary:
# gnutls-cli and openssl tools need to be first installed
# latest rev of ssl-tests at time of writing is: e264f6c42bc5d94c15eb27548256ab52308d5b04
git clone https://github.com/zzambers/ssl-tests.git && cd ssl-tests
export JAVA_HOME=...
make clean && make SSLTESTS_USE_GNUTLS_CLIENT=1 SSLTESTS_SSL_CONFIG_FILTER='SunJSSE,TLSv1.3,TLSv1.3,TLS_AES_256_GCM_SHA384' SSLTESTS_CUSTOM_JAVA_PARAMS='-Dssltests.serverShutdownOutput=0'
;;;","2022-03-09 13:17;wetmore;Added noreg-hard, as it's not easy to decrypt/analyze protocol data. noreg-external is appropriate.;;;","2022-05-05 05:16;dukebot;Changeset: 7e88ff8a
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-05-05 12:13:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7e88ff8a82cefa2a20acc9d5a9e42858d60fe3a3
;;;","2022-09-21 04:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/709
Date: 2022-09-21 11:22:31 +0000;;;","2022-09-21 04:43;zzambers;Fix request (17u):

Disables TLS 1.3 duplex-close workaround, using user_canceled alert, when not necessary, as it causes issues with gnutls client.
Clean backport, passed jdk_security tests. (should be low risk);;;","2023-03-09 05:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1796
Date: 2023-03-09 12:48:40 +0000;;;","2023-03-09 05:10;zzambers;Fix request (11u):

Disables TLS 1.3 duplex-close workaround, using user_canceled alert, when not necessary, as it causes issues with gnutls client.
Clean backport, passed jdk_security tests. (should be low risk);;;","2023-03-14 10:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/284
Date: 2023-03-14 16:44:47 +0000;;;","2023-03-14 10:54;zzambers;Fix request (8u):

Disables TLS 1.3 duplex-close workaround, using user_canceled alert, when not necessary, as it causes issues with gnutls client.
Clean backport, no regressions jdk_security tests. (should be low risk) ;;;",,,,,,,,,,,,,,,,,,,
JDK-8281472 breaks 32-bit builds and gtests,JDK-8282593,5069569,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,stuefe,stuefe,stuefe,2022-03-03 01:29,2022-07-06 17:20,2023-10-01 09:56,2022-03-03 05:27,19,,,,,,,,,19,hotspot,,0,noreg-build,oraclejdk-na,,,,,,,,,,,,,,,,,"1) I am seeing this on x86, but I assume all 32-bit builds are affected:

```
/shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/runtime/test_largeOptions.cpp: In member function 'virtual void LARGE_OPTION_large_ints_vm_Test::TestBody()':
/shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/runtime/test_largeOptions.cpp:49:51: error: integer overflow in expression [-Werror=overflow]
   for (intx x = max_jint - 1; x <= (intx)max_jint + 1; x++) {
                                    ~~~~~~~~~~~~~~~^~~
/shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/runtime/test_largeOptions.cpp: In member function 'virtual void LARGE_OPTION_small_ints_vm_Test::TestBody()':
/shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/runtime/test_largeOptions.cpp:62:51: error: integer overflow in expression [-Werror=overflow]
   for (intx x = min_jint + 1; x >= (intx)min_jint - 1; x--) {
                                    ~~~~~~~~~~~~~~~^~~
In file included from /shared/projects/openjdk/gtest/googletest/googletest/include/gtest/gtest.h:59:0,
                 from /shared/projects/openjdk/gtest/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h:47,
                 from /shared/projects/openjdk/gtest/googletest/googlemock/include/gmock/gmock-actions.h:47,
                 from /shared/projects/openjdk/gtest/googletest/googlemock/include/gmock/gmock.h:59,
                 from /shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/unittest.hpp:51,
                 from /shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/runtime/test_largeOptions.cpp:29:
/shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/runtime/test_largeOptions.cpp: In member function 'virtual void LARGE_OPTION_large_int_overflow_vm_Test::TestBody()':
/shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/runtime/test_largeOptions.cpp:75:89: error: overflow in implicit constant conversion [-Werror=overflow]
   ASSERT_FALSE(LargeOptionsTest::test_option_value(""CompilerDirectivesLimit"", 4294967296));
                                                                                         ^
/shared/projects/openjdk/gtest/googletest/googletest/include/gtest/internal/gtest-internal.h:1282:34: note: in definition of macro 'GTEST_TEST_BOOLEAN_'
       ::testing::AssertionResult(expression)) \
                                  ^~~~~~~~~~
/shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/runtime/test_largeOptions.cpp:75:3: note: in expansion of macro 'ASSERT_FALSE'
   ASSERT_FALSE(LargeOptionsTest::test_option_value(""CompilerDirectivesLimit"", 4294967296));
   ^~~~~~~~~~~~
```

2) If we exclude the tests which don't build on 32-bit and execute the gtests, we get test errors:

```
[ RUN      ] LARGE_OPTION.large_intxs_vm
/shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/runtime/test_largeOptions.cpp:96: Failure
Expected equality of these values:
  (julong)MaxJNILocalCapacity
    Which is: 18446744071562067968
  x
    Which is: 2147483648
[  FAILED  ] LARGE_OPTION.large_intxs_vm (0 ms)
[ RUN      ] LARGE_OPTION.small_intxs_vm
/shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/runtime/test_largeOptions.cpp:103: Failure
Expected equality of these values:
  MaxJNILocalCapacity
    Which is: -2147483647
  -9223372036854775807
[  FAILED  ] LARGE_OPTION.small_intxs_vm (0 ms)
```
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281472,,,,,,JDK-8282513,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w7tf:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-03 02:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7672
Date: 2022-03-03 09:54:48 +0000;;;","2022-03-03 04:34;dholmes;This is a duplicate of JDK-8282513

There is a draft PR to fix the build issue but some tests still then fail.

Excluding the test on 32-bit may be the most expedient solution.;;;","2022-03-03 05:27;dukebot;Changeset: 5c187e34
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-03-03 13:25:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5c187e34a58769a129a0aae9e4937907c9060202
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(false) failed: graph should be schedulable,JDK-8282592,5069568,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,epeter,epeter,2022-03-03 01:26,2022-05-04 23:45,2023-10-01 09:56,2022-03-22 03:37,17,18,19,,,,,,,19,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-11,oracle-triage-19,regression,,,,,,,,,,"Assert in PhaseCFG::schedule_late

To reproduce:
Run TestOverunrolling.java with additional flag -XX:+StressReflectiveCode.

With jtreg:
path-to-jtreg/jtreg -va -s -jdk:path-to-jdk/jdk/ -javaoptions:""-XX:+StressReflectiveCode"" test/hotspot/jtreg/compiler/loopopts/TestOverunrolling.java

You can find hs_err file in Attachment.

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/gcm.cpp:1423
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/emanuel/Documents/closed-jdk/open/src/hotspot/share/opto/gcm.cpp:1423), pid=268648, tid=268661
#  assert(false) failed: graph should be schedulable
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (slowdebug build 19-internal-2022-02-28-1116307.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 19-internal-2022-02-28-1116307.emanuel..., compiled mode, compressed oops, compressed class ptrs, parallel gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xadfc8b]  PhaseCFG::schedule_late(VectorSet&, Node_Stack&)+0x605
#


Current CompileTask:
C2:  32296 3423    b        compiler.loopopts.TestOverunrolling::test3 (89 bytes)

Stack: [0x00007f3c5d0c6000,0x00007f3c5d1c7000],  sp=0x00007f3c5d1c1960,  free space=1006k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xadfc8b]  PhaseCFG::schedule_late(VectorSet&, Node_Stack&)+0x605
V  [libjvm.so+0xae00cd]  PhaseCFG::global_code_motion()+0x1f3
V  [libjvm.so+0xae08da]  PhaseCFG::do_global_code_motion()+0x60
V  [libjvm.so+0x85c3ea]  Compile::Code_Gen()+0x1c6
V  [libjvm.so+0x85324d]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1567
V  [libjvm.so+0x748299]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x185
V  [libjvm.so+0x87088d]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x899
V  [libjvm.so+0x86f4e7]  CompileBroker::compiler_thread_loop()+0x3df
V  [libjvm.so+0x88fc3b]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x69
V  [libjvm.so+0x124901f]  JavaThread::thread_main_inner()+0x15d
V  [libjvm.so+0x1248ebf]  JavaThread::run()+0x167
V  [libjvm.so+0x12467d0]  Thread::call_run()+0x180
V  [libjvm.so+0x105262b]  thread_native_entry(Thread*)+0x18f",,,,,,,,,,,JDK-8284062,JDK-8284251,JDK-8284151,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256540,,,,,,,,,,,,,,,,JDK-8280600,JDK-8280799,,,,,"2022-03-03 01:26;epeter;hs_err_pid268648.log;https://bugs.openjdk.org/secure/attachment/98167/hs_err_pid268648.log",,,,,,,,,,,,,,,,,,,,b10,19,,,,,,,"0|i2w7t7:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-03 01:31;epeter;For debugging, the replay file may be helpful.
Generate it by running the test with jtreg once.

Then use the generated replay file like this:
./java -XX:+ReplayCompiles -XX:+ReplayIgnoreInitErrors -XX:ReplayDataFile=/home/emanuel/Documents/closed-jdk/JTwork/scratch/replay_pid268648.log -cp /home/emanuel/Documents/closed-jdk/JTwork/classes/compiler/loopopts/TestOverunrolling.d -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -Xcomp -XX:-TieredCompilation -XX:-UseSwitchProfiling -XX:-UseCountedLoopSafepoints -XX:LoopUnrollLimit=250 -XX:-UseG1GC -XX:+UseParallelGC -XX:+StressReflectiveCode;;;","2022-03-03 01:41;chagedorn;ILW = C2 assertion failure in global code motion, single test with -XX:+StressReflectiveCode, use -XX:-StressReflectiveCode = HLM = P3;;;","2022-03-03 04:10;chagedorn;Starts to fail after JDK-8280799.

[~roland] can you have a look at it?;;;","2022-03-03 05:56;roland;I can't reproduce it. Could you attach a replay file?;;;","2022-03-03 06:21;epeter;[~roland] I have just synced my repo, and now I cannot reproduce it either. Maybe someone changed related code. Could be the test does not manifest any more or is even fixed.

[~chagedorn] is checking since when it works again.

It used to reproduce like this:
~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/closed-jdk/build/linux-x64-slowdebug/jdk/ -javaoptions:""-XX:-TieredCompilation -XX:+StressReflectiveCode -XX:-ReduceInitialCardMarks -XX:-ReduceBulkZeroing -XX:-ReduceFieldZeroing -XX:+UnlockDiagnosticVMOptions -XX:+ExpandSubTypeCheckAtParseTime"" /home/emanuel/Documents/closed-jdk/open/test/hotspot/jtreg/compiler/loopopts/TestOverunrolling.java;;;","2022-03-03 06:27;chagedorn;Interesting, it does not fail anymore after JDK-8230382. It might just hide this bug but hard to tell without looking closer into it.;;;","2022-03-03 06:33;epeter;Ok. Well that will require some closer looking into. I'm sure that JDK-8230382 did reorder some optimizations. For example there were some cases where there were dead Int/Long type ranges (eg [0..-1]), which the code previously opened up to a valid range. My reordering replaced it with TOP.
TLDR: that change may have changed the behavior, but should have been a pure refactoring.;;;","2022-03-03 06:36;roland;With JDK-8230382 backed out, I can reproduce it now. I'll investigate the failure.;;;","2022-03-03 06:36;epeter;I can also add that before it used to reproduce on 5 different architectures directly. So I don't think it is anything intermittent.;;;","2022-03-09 05:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7758
Date: 2022-03-09 13:42:01 +0000;;;","2022-03-22 03:37;dukebot;Changeset: 85628a87
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-03-22 10:34:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/85628a871df3fdeec1b422d1c01c222abe45d0a8
;;;","2022-03-29 22:44;thartmann;Fix Request (JDK 18u)
Fixes an assert in C2. The fix is low risk and applies cleanly. Already tested and about to be backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 22:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/80
Date: 2022-03-30 05:43:42 +0000;;;","2022-03-31 07:07;mdoerr;Fix Request (17u)
Should get backported for parity with 17.0.4-oracle. (Related to JDK-8280799.) Applies cleanly. Included test has passed.;;;","2022-03-31 07:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/321
Date: 2022-03-31 14:02:26 +0000;;;",,,,,,,,,,,,,,,
C2: assert(addp->is_AddP() && addp->outcnt() > 0) failed: Don't process dead nodes,JDK-8282590,5069566,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,epeter,epeter,2022-03-03 00:49,2022-04-03 23:03,2023-10-01 09:56,2022-03-22 09:24,15,16,17,18,19,,,,,19,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-11,oracle-triage-19,,,,,,,,,,,"Assert hit in ConnectionGraph::find_second_addp
assert(addp->is_AddP() && addp->outcnt() > 0) failed: Don't process dead nodes

To reproduce, run
test/hotspot/jtreg/compiler/arraycopy/TestArrayCopyAsLoadsStores.java
with additional flags:
-XX:-TieredCompilation -XX:+StressReflectiveCode -XX:-ReduceInitialCardMarks

commandline with jtreg:
path-to-jtreg/bin/jtreg -va -s -jdk:path-to-jdk/jdk/ -javaoptions:""-XX:-TieredCompilation -XX:+StressReflectiveCode -XX:-ReduceInitialCardMarks"" open/test/hotspot/jtreg/compiler/arraycopy/TestArrayCopyAsLoadsStores.java

As far as I can see, it is the second run-statement in TestArrayCopyAsLoadsStores.java, which compared to the first run-statement uses the additional flags
-XX:+IgnoreUnrecognizedVMOptions -XX:+StressArrayCopyMacroNode

You can find the hs_err file in Attachment.

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/escape.cpp:2494
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/emanuel/Documents/closed-jdk/open/src/hotspot/share/opto/escape.cpp:2494), pid=256712, tid=256729
#  assert(addp->is_AddP() && addp->outcnt() > 0) failed: Don't process dead nodes
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (slowdebug build 19-internal-2022-02-28-1116307.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 19-internal-2022-02-28-1116307.emanuel..., mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x9aa351]  ConnectionGraph::find_second_addp(Node*, Node*)+0x4d
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /home/emanuel/Documents/closed-jdk/JTwork/scratch/core.256712)
#
# An error report file with more information is saved as:
# /home/emanuel/Documents/closed-jdk/JTwork/scratch/hs_err_pid256712.log
#
# Compiler replay data is saved as:
# /home/emanuel/Documents/closed-jdk/JTwork/scratch/replay_pid256712.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#


Current CompileTask:
C2:   1771  175    b        compiler.arraycopy.TestArrayCopyAsLoadsStores::m1 (10 bytes)

Stack: [0x00007f10a5d1f000,0x00007f10a5e20000],  sp=0x00007f10a5e1ab10,  free space=1006k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x9aa351]  ConnectionGraph::find_second_addp(Node*, Node*)+0x4d
V  [libjvm.so+0x9a93cc]  ConnectionGraph::is_oop_field(Node*, int, bool*)+0x288
V  [libjvm.so+0x9a8e95]  ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int)+0xcd
V  [libjvm.so+0x9a2622]  ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*)+0x326
V  [libjvm.so+0x9a0f7a]  ConnectionGraph::compute_escape()+0x2b2
V  [libjvm.so+0x9a0c27]  ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*)+0x117
V  [libjvm.so+0x859959]  Compile::Optimize()+0x7ab
V  [libjvm.so+0x8530b5]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x13cf
V  [libjvm.so+0x748299]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x185
V  [libjvm.so+0x87088d]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x899
V  [libjvm.so+0x86f4e7]  CompileBroker::compiler_thread_loop()+0x3df
V  [libjvm.so+0x88fc3b]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x69
V  [libjvm.so+0x124901f]  JavaThread::thread_main_inner()+0x15d
V  [libjvm.so+0x1248ebf]  JavaThread::run()+0x167
V  [libjvm.so+0x12467d0]  Thread::call_run()+0x180
V  [libjvm.so+0x105262b]  thread_native_entry(Thread*)+0x18f",,,,,,,,,,,JDK-8283828,JDK-8284270,JDK-8284156,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256540,,,,,,,,,,,,,,,,JDK-8256400,JDK-8238759,,,,,"2022-03-03 00:48;epeter;hs_err_pid256712.log;https://bugs.openjdk.org/secure/attachment/98166/hs_err_pid256712.log",,,,,,,,,,,,,,,,,,,,b13,15,,,,,,,"0|i2w7sr:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-03 00:51;epeter;For debugging, it may be helpful to use the replay file.
Generate it by first running jtreg.

I used this command to reproduce the bug using the replay file:
./java -XX:+ReplayCompiles -XX:+ReplayIgnoreInitErrors -XX:ReplayDataFile=/home/emanuel/Documents/closed-jdk/JTwork/scratch/replay_pid256712.log -cp /home/emanuel/Documents/closed-jdk/JTwork/classes/compiler/arraycopy/TestArrayCopyAsLoadsStores.d -XX:-TieredCompilation -XX:+StressReflectiveCode -XX:-ReduceInitialCardMarks -ea -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:CompileCommand=dontinline,compiler.arraycopy.TestArrayCopyAsLoadsStores::m* -XX:TypeProfileLevel=200 -XX:+IgnoreUnrecognizedVMOptions -XX:+StressArrayCopyMacroNode;;;","2022-03-03 01:05;chagedorn;ILW = C2 assertion failure during EA, only single test with additional flags, use -XX:-StressReflectiveCode and/or -XX:+ReduceInitialCardMarks = HLM = P3;;;","2022-03-03 05:05;epeter;Replay still reproduces with these flags:
./java -XX:+ReplayCompiles -XX:+ReplayIgnoreInitErrors -XX:ReplayDataFile=/home/emanuel/Documents/closed-jdk/JTwork/scratch/replay_pid324143.log -cp /home/emanuel/Documents/closed-jdk/JTwork/classes/compiler/arraycopy/TestArrayCopyAsLoadsStores.d -XX:-TieredCompilation -XX:+StressReflectiveCode -XX:-ReduceInitialCardMarks -XX:+IgnoreUnrecognizedVMOptions -XX:+StressArrayCopyMacroNode

This narrows it down to the flags mentioned in the Description above.;;;","2022-03-03 22:31;thartmann;A similar/same issue has been fixed in Valhalla (JDK-8256400). I probably missed that it affects mainline as well.;;;","2022-03-04 00:22;chagedorn;Starts to fail after JDK-8238759 which introduced new AddP nodes which later trigger this assertion.;;;","2022-03-04 01:19;epeter;Planning to apply the same fix. And some asserts to make sure someone does not by accident repeat this mistake:

diff --git a/src/hotspot/share/opto/arraycopynode.cpp b/src/hotspot/share/opto/arraycopynode.cpp
index 11560f6419b..6dcc66ee352 100644
--- a/src/hotspot/share/opto/arraycopynode.cpp
+++ b/src/hotspot/share/opto/arraycopynode.cpp
@@ -316,9 +316,6 @@ bool ArrayCopyNode::prepare_array_copy(PhaseGVN *phase, bool can_reshape,
 
     disjoint_bases = true;
 
-    adr_src  = phase->transform(new AddPNode(base_src, base_src, src_offset));
-    adr_dest = phase->transform(new AddPNode(base_dest, base_dest, dest_offset));
-
     BasicType elem = ary_src->klass()->as_array_klass()->element_type()->basic_type();
     if (is_reference_type(elem)) {
       elem = T_OBJECT;
@@ -329,6 +326,9 @@ bool ArrayCopyNode::prepare_array_copy(PhaseGVN *phase, bool can_reshape,
       return false;
     }
 
+    adr_src  = phase->transform(new AddPNode(base_src, base_src, src_offset));
+    adr_dest = phase->transform(new AddPNode(base_dest, base_dest, dest_offset));
+
     // The address is offseted to an aligned address where a raw copy would start.
     // If the clone copy is decomposed into load-stores - the address is adjusted to
     // point at where the array starts.
@@ -566,6 +566,8 @@ Node *ArrayCopyNode::Ideal(PhaseGVN *phase, bool can_reshape) {
   if (!prepare_array_copy(phase, can_reshape,
                           adr_src, base_src, adr_dest, base_dest,
                           copy_type, value_type, disjoint_bases)) {
+    assert(adr_src == NULL, ""no node can be left behind"");
+    assert(adr_dest == NULL, ""no node can be left behind"");
     return NULL;
   }
 
;;;","2022-03-04 01:20;epeter;Added assert to check that no dead nodes stick around after IGVN (except Consts which are expected).

--- a/src/hotspot/share/opto/escape.cpp
+++ b/src/hotspot/share/opto/escape.cpp
@@ -152,6 +152,10 @@ bool ConnectionGraph::compute_escape() {
   java_objects_worklist.append(phantom_obj);
   for( uint next = 0; next < ideal_nodes.size(); ++next ) {
     Node* n = ideal_nodes.at(next);
+    if(n->outcnt()==0) {
+      assert(n->is_Con(), ""only constants are allowed to be dead here"");
+    }
     // Create PointsTo nodes and add them to Connection Graph. Called
     // only once per ideal node since ideal_nodes is Unique_Node list.
     add_node_to_connection_graph(n, &delayed_worklist);;;;","2022-03-04 01:21;epeter;This triggered in many tests. Investigating now.
Had to change some set_req  to set_req_X , such that the old node is properly removed.
The second one did leave dead nodes, I fixed the first one in analogy.

--- a/src/hotspot/share/opto/subtypenode.cpp
+++ b/src/hotspot/share/opto/subtypenode.cpp
@@ -135,7 +135,7 @@ Node *SubTypeCheckNode::Ideal(PhaseGVN* phase, bool can_reshape) {
     Node* obj = AddPNode::Ideal_base_and_offset(addr, phase, con);
     if (con == oopDesc::klass_offset_in_bytes() && obj != NULL) {
       assert(is_oop(phase, obj), ""only for oop input"");
-      set_req(ObjOrSubKlass, obj);
+      set_req_X(ObjOrSubKlass, obj, phase);
       return this;
     }
   }
@@ -144,7 +144,7 @@ Node *SubTypeCheckNode::Ideal(PhaseGVN* phase, bool can_reshape) {
   Node* allocated_klass = AllocateNode::Ideal_klass(obj_or_subklass, phase);
   if (allocated_klass != NULL) {
     assert(is_oop(phase, obj_or_subklass), ""only for oop input"");
-    set_req(ObjOrSubKlass, allocated_klass);
+    set_req_X(ObjOrSubKlass, allocated_klass, phase);
     return this;
   }
 ;;;","2022-03-04 05:14;epeter;I hoped the code below would fix the ConvI2L nodes that were still dead. But I think it did not.
I still put this case in, even though I have seen no case where the code is actually executed.

diff --git a/src/hotspot/share/opto/arraycopynode.cpp b/src/hotspot/share/opto/arraycopynode.cpp
index 6dcc66ee352..4ec4724a839 100644
--- a/src/hotspot/share/opto/arraycopynode.cpp
+++ b/src/hotspot/share/opto/arraycopynode.cpp
@@ -297,6 +297,16 @@ bool ArrayCopyNode::prepare_array_copy(PhaseGVN *phase, bool can_reshape,
     dest_offset = Compile::conv_I2X_index(phase, dest_offset, ary_dest->size());
     if (src_offset->is_top() || dest_offset->is_top()) {
       // Offset is out of bounds (the ArrayCopyNode will be removed)
+      // Below: make sure that we record the nodes, so that they can be deleted later
+      PhaseIterGVN* igvn = phase->is_IterGVN();
+      if (igvn != NULL) {
+        if (!src_offset->is_top()) {
+          igvn->_worklist.push(src_offset);
+        }
+        if (!dest_offset->is_top()) {
+          igvn->_worklist.push(dest_offset);
+        }
+      }
       return false;
     }
 
;;;","2022-03-07 06:51;epeter;I tried debugging a little more.
It seems there is definately at least one case where some ConvI2L nodes survive and go into the ConnectionGraph::compute_escape. Maybe that can be fixed later.

For now, I will push the fix for the assert in the description, and for the last comment (in ArrayCopyNode::prepare_array_copy).;;;","2022-03-07 07:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7728
Date: 2022-03-07 15:04:54 +0000;;;","2022-03-07 08:55;epeter;Made a regression test from the test + flags mentioned in description.
This triggered another bug where nodes were left for dead.
ArrayCopyNode::Ideal - backward_mem and forward_mem can just be abandoned.
So I now clean them up.;;;","2022-03-22 09:24;dukebot;Changeset: d29c7e74
Author:    Emanuel Peter <emanuel.peter@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-03-22 16:23:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d29c7e740d51cb50a1aa0a941a5b460782f8da68
;;;","2022-03-29 08:06;thartmann;Fix Request (JDK 18u)
Fixes an assert in C2 EA. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 08:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/59
Date: 2022-03-29 15:06:14 +0000;;;","2022-03-30 04:55;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Test has passed.;;;","2022-03-30 05:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/315
Date: 2022-03-30 11:57:57 +0000;;;",,,,,,,,,,,,,
[11] set harfbuzz compilation flag to -std=c++11,JDK-8282588,5069564,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2022-03-03 00:12,2022-05-03 23:48,2023-10-01 09:56,2022-03-07 03:43,11.0.3,,,,,,,,,11.0.16,client-libs,,0,harfbuzz,jdk11u-fix-request,jdk11u-fix-yes,oraclejdk-na,,,,,,,,,,,,,,,"As a preparation to update harfbuzz in jdk11u-dev to the versions used in higher JDK (harfbuzz 2.7.2 / 2.8.0) increment the C++ version
for harfbuzz to C++11.
Some time later, the harfbuzz changes are backported.
This gives everybody time to make sure the compilers work with the C++11 flag, or system harfbuzz is used as a workaround.
Discussion and more details about the issue :

https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2022-January/thread.html#11411
https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2022-February/thread.html#11937
https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2022-March/thread.html#12497
",,,,,,,,,,,JDK-8284418,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284206,,,,,,JDK-8267977,JDK-8247872,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2w7sb:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-03-03 03:34;mdoerr;Old discussion: http://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-January/004592.html

Some platforms might need other backports to support C++11.
AIX:
[JDK-8218965] aix:  support xlclang++ in the compiler detection
[JDK-8283323] libharfbuzz optimization level results in extreme build times
(replaces [JDK-8258484] AIX build fails in Harfbuzz with XLC 16.01.0000.0006)
[JDK-8218136] minor hotspot adjustments for xlclang++ from xlc16 on AIX
[JDK-8227171] provide function names in native stack trace on aix with xlc16

Alternative for those platforms: Use configure flag --with-harfbuzz=system. Disadvantage: All machines require new enough version of libharfbuzz installed.
;;;","2022-03-04 00:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/853
Date: 2022-03-04 08:40:59 +0000;;;","2022-03-04 06:03;mbaesken;some compilers supporting the -std=c++11 flag :
Linux       :     gcc 8.2  (gcc 7 should work too)
Windows : VS2017
macOS   : clang / Xcode 13;;;","2022-03-07 03:42;roboduke;Changeset: 86d39a69
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-03-07 11:41:31 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/86d39a69598a4ee559109b46a5b8fa91ae2e2723
;;;","2022-05-03 23:44;dukebot;Changeset: 86d39a69
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-03-07 11:41:31 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/86d39a69598a4ee559109b46a5b8fa91ae2e2723
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Update BCEL md to include the copyright notice,JDK-8282583,5069553,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,joehw,joehw,joehw,2022-03-02 16:04,2022-06-08 07:01,2023-10-01 09:56,2022-03-03 19:17,,,,,,,,,,19,xml,,0,11bpr-critical-approved,17bpr-critical-approved,8bpr-critical-approved,doc-only,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,noreg-doc,,,,,The BCEL md file needs to be updated to include the copyright notice.,,,,,,,,,,,JDK-8282775,JDK-8283638,JDK-8284461,JDK-8284607,JDK-8283492,JDK-8283482,JDK-8283521,JDK-8283483,JDK-8284466,JDK-8288029,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283970,JDK-8283982,JDK-8283958,JDK-8255035,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w7pv:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,,,"2022-03-03 09:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7681
Date: 2022-03-03 17:51:31 +0000;;;","2022-03-03 19:17;dukebot;Changeset: 8478173d
Author:    Joe Wang <joehw@openjdk.org>
Date:      2022-03-04 03:15:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8478173d837113bf603aadb614badd461f474250
;;;","2022-03-14 21:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/47
Date: 2022-03-15 04:25:51 +0000;;;","2022-03-16 05:56;rreddy;Fix request [18u]

I'd like to backport it to JDK18u to update BCEL copyright notice
Backport is clean.;;;","2022-03-16 06:13;rreddy;Fix request [11u]

I'd like to backport it to JDK11u to update BCEL copyright notice
Backport is clean.;;;","2022-03-16 06:13;rreddy;Fix request [8u]

I'd like to backport it to JDK8u to update BCEL copyright notice
Backport is clean.;;;","2022-03-18 00:39;goetz;Ravi, please first backport to 17 and make pull requests before adding the tags.;;;","2022-03-18 05:20;clanger;Removing jdk11u-fix-request for now. I'm also not sure whether Ravi means an Oracle 11u backports which follows a different process.;;;","2022-03-18 05:55;rreddy;Yes , 11u-fix-request and 8u-fix-request has to be removed. I will be doing Oracle 11u and Oracle 8u backports.;;;","2022-03-22 00:36;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a comment change.
Clean backport.;;;","2022-03-22 00:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/276
Date: 2022-03-22 07:51:57 +0000;;;","2022-03-22 08:25;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
No risk, only a comment change.
Clean backport. ;;;","2022-03-22 08:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/936
Date: 2022-03-22 15:27:18 +0000;;;","2022-06-08 06:52;yan;Fix request (15u):

BCEL is updated to the same version, so this change in a comment is necessary, too.;;;","2022-06-08 06:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/216
Date: 2022-06-08 13:45:08 +0000;;;",,,,,,,,,,,,,,,
Unused methods in Utils,JDK-8282582,5069552,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-03-02 14:47,2022-03-09 16:03,2023-10-01 09:56,2022-03-03 06:55,19,,,,,,,,,19,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,"The following methods in the internal Utils class appear to be unused and should be investigated.

compareCaseCompare
excludeDeprecatedMembers
getAnnotationTypes
getBlockTags(javax.lang.model.element.Element,com.sun.source.doctree.DocTree$Kind,com.sun.source.doctree.DocTree$Kind)
getEnums
getIllegalArgumentExceptionType
getInterfaces
getNullPointerExceptionType
getOrdinalValue
getRecords
getTopMostContainingTypeElement
isAnnotated
isAttribute
isAuthor
isComment
isDeprecated
isDocComment
isDocRoot
isEndElement
isEntity
ieEnumConstant
isErroneous
isErrorType
isException
isIdentifier
isInheritDoc
isIntersectionType
isLink
isLinkPlain
isLiteral
isOther
isParam
isPrimitive
isReference
isReturn
isSee
isSerial
isSerialData
isSerialField
isSince
isThrows
isUnknownBlockTag
isUnknownInlineTag
isVersion
isWildcard
overriddenClass
quote",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8210115,JDK-8210114,JDK-8210116,JDK-8210110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w7pn:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-03-02 16:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7670
Date: 2022-03-03 00:43:40 +0000;;;","2022-03-03 06:55;dukebot;Changeset: 57020fd5
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-03-03 14:54:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/57020fd5822148b02e72b60b462a7402658d979a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[LOOM] JVMTI GetThreadState returns incorrect state for vthread waiting on a monitor,JDK-8282579,5069549,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,cjplummer,cjplummer,2022-03-02 13:15,2022-03-04 20:59,2023-10-01 09:56,2022-03-04 20:59,repo-loom,,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,"JVMTI GetThreadState is returning 0x100005 for a vthread waiting on a monitor. That means ALIVE, RUNNABLE, and SUSPENDED (the later since we are at a SUSPEND_ALL breakpoint). It should be 0x100401, which is what I'm seeing on the carrier threads.

The failure can be detected with vmTestbase/nsk/jdi/ObjectReference/waitingThreads/waitingthreads002, which will time out when run in vthread mode:

make test TEST=open/test/hotspot/jtreg/vmTestbase/nsk/jdi/ObjectReference/waitingThreads/waitingthreads002 JTREG_MAIN_WRAPPER=Virtual",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w7oz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-03-04 20:59;sspitsyn;The fix is:
https://github.com/openjdk/loom/commit/326c5c36d44983ed5b4124bdbcf938b51c09074f;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AIOOBE in javax.sound.sampled.Clip,JDK-8282578,5069548,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kizune,mowerfel,mowerfel,2022-03-02 12:47,2022-12-12 13:59,2023-10-01 09:56,2022-12-07 16:33,11,16,17,18,19,8,,,,20,client-libs,,0,11-bp,17-bp,8-bp,fuzzing,sn_117,sn_118,sn_119,sn_120,sn_121,sn_122,sn_123,sn_126,sn_130,sn_132,sn_133,,,,"java.lang.ArrayIndexOutOfBoundsException: 1	com.sun.media.sound.SoftMainMixer.processSystemExclusiveMessage(SoftMainMixer.java:127)
com.sun.media.sound.SoftMainMixer.processMessage(SoftMainMixer.java:1054)
com.sun.media.sound.SoftMainMixer.processMessage(SoftMainMixer.java:1033)
com.sun.media.sound.SoftMainMixer.processMessages(SoftMainMixer.java:435)
com.sun.media.sound.SoftMainMixer.processAudioBuffers(SoftMainMixer.java:489)
com.sun.media.sound.SoftMainMixer$2.fillBuffer(SoftMainMixer.java:880)
com.sun.media.sound.SoftMainMixer$2.read(SoftMainMixer.java:893)
javax.sound.sampled.AudioInputStream.read(AudioInputStream.java:292)
javax.sound.sampled.AudioInputStream.read(AudioInputStream.java:292)
com.sun.media.sound.DirectAudioDevice$DirectClip.open(DirectAudioDevice.java:1153)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2w7or:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7d98911c,,,,,,,,,"2022-06-03 08:40;kizune;In the case of the System Exclusive Message we do not check after reading the message
that it is well formed which may cause ArrayIndexOutOfBoundsException when opening it.
Since checking message is basically the same as parsing it and the message can be of
various length it is easier to just surroud the SysExMessage processing block with
try/catch thus skipping malformed message. This will allow this MIDI file to be played
if the rest of the file is not garbled with.;;;","2022-06-03 08:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9016
Date: 2022-06-03 15:43:39 +0000;;;","2022-12-07 16:33;dukebot;Changeset: af8fb7ee
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2022-12-08 00:32:13 +0000
URL:       https://git.openjdk.org/jdk/commit/af8fb7eef7188ef762399cfb3faf5c8afd49efa7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"ICC_Profile.setData(int, byte[]) invalidates the profile",JDK-8282577,5069547,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,prr,prr,2022-03-02 12:44,2022-12-27 01:29,2023-10-01 09:56,2022-03-14 11:08,11,17,18,19,8,,,,,19,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_113,sn_114,,,,,,,,,,,,,,,"
Upgrading OpenJDK to use LittleCMS 2.13.1 I found that the commit
https://github.com/mm2/Little-CMS/commit/ab5029d60d5dc41a414e4acc472d024e3449d36a
was causing one of our ""stress"" tests to have a native crash inside LittleCMS.
The stress test creates lots of threads updating profiles (internally using cmsReadRawTag/cmswriteRawTag) and then using them so it looked like a threading problem.
I found it to be nothing to do with stress testing nor threading and to be a combination of a JDK mis-use of the LittleCMS APIs exposing a LittleCMS bug which actually causes the crash.

The LittleCMS upstream bug will be dealt with separately but the OpenJDK bug needs to be fixed for this API to work properly regardless of the status of the LittleCMS bug.

ICC_Profile provides an API to update the content of a tag for a profile.
For this the implementation use cmsReadRawTag/cmsWriteRawTag to copiy a profile completely and instantiate a new one.
But this profile is never opened - and the use of the ""Raw"" APIs means it needs to be per the docs at
https://www.littlecms.com/LittleCMS2.13%20API.pdf which state on p67
Accessing tags as raw data
Those functions allows to read/write directly to the ICC profile any data, without checking anything.
As a rule, mixing Raw with cooked doesn't work, so writing a tag as raw and then reading it as cooked
without serializing does result into an error. If that is what you want, you will need to dump the profile to
memory or disk and then reopen it. ",,,,,,,,,,,JDK-8299362,JDK-8298016,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282635,JDK-8272865,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w7oj:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-03-02 12:47;prr;Ironically the implementation properly opens the profile from memory in order to sanity test it but it then discards this and returns the ""raw"" profile. If we instead return the profile that passed sanity checking we are all good.;;;","2022-03-02 12:49;prr;The simple regression test I am proposing for this fix actually validates the returned profile works.
We have no tests that do this ! The closest just tests we don't crash and ignores exceptions.

Running the proposed test on any current release (8->17) fails like this:-
~/jdk17/Contents/Home/bin/java SetTagDataValidation                               
Exception in thread ""main"" java.awt.color.CMMException: LCMS error 13: Couldn't link the profiles
	at java.desktop/sun.java2d.cmm.lcms.LCMS.createNativeTransform(Native Method)
	at java.desktop/sun.java2d.cmm.lcms.LCMS.createTransform(LCMS.java:104)
	at java.desktop/sun.java2d.cmm.lcms.LCMSTransform.doTransform(LCMSTransform.java:143)
	at java.desktop/sun.java2d.cmm.lcms.LCMSTransform.colorConvert(LCMSTransform.java:633)
	at java.desktop/java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:224)
	at SetTagDataValidation.main(SetTagDataValidation.java:61)


With the fix it passes and returns a properly converted colour.;;;","2022-03-02 12:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7668
Date: 2022-03-02 20:53:03 +0000;;;","2022-03-02 16:35;prr;I submitted an issue against LittleCMS describing the problem there : https://github.com/mm2/Little-CMS/issues/308
I also submitted a suggested fix : https://github.com/mm2/Little-CMS/pull/309;;;","2022-03-14 11:08;dukebot;Changeset: f66070b0
Author:    Phil Race <prr@openjdk.org>
Date:      2022-03-14 18:05:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f66070b00d4311c6e3a6fbf38956fa2d5da5fada
;;;","2022-12-22 05:43;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Low risk, simple fix in java desktop.
Clean backport.
Tests pass. SAP nightly testing passed.;;;","2022-12-22 05:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/970
Date: 2022-12-22 13:43:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
"[lworld] C2 asserts with ""re-allocation should be removed by Ideal transformation""",JDK-8282569,5069537,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,mchung,mchung,2022-03-02 09:40,2022-04-05 10:15,2023-10-01 09:56,2022-04-05 00:29,repo-valhalla,,,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,"#  Internal Error (workspace/open/src/hotspot/share/opto/inlinetypenode.cpp:1041), pid=69717, tid=41219
#  assert(!is_default(igvn) && !is_allocated(igvn)) failed: re-allocation should be removed by Ideal transformation

With the fix for JDK-8282079,  change java.util.Optional to value class:

diff --git a/src/java.base/share/classes/java/util/Optional.java b/src/java.base/share/classes/java/util/Optional.java
index cd8b2b6048f..55dac3278a0 100644
--- a/src/java.base/share/classes/java/util/Optional.java
+++ b/src/java.base/share/classes/java/util/Optional.java
@@ -59,7 +59,7 @@ import java.util.stream.Stream;
  * @since 1.8
  */
 @jdk.internal.ValueBased
-public final class Optional<T> {
+public final value class Optional<T> {
     /**
      * Common instance for {@code empty()}.
      */

many of test/jdk/valhalla/valuetypes and test/hotspot/jtreg/runtime/valhalla/inlinetypes fail with this assertion.  ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282079,,,,,,,,,,,,"2022-04-04 09:49;mchung;value-optional-class.patch;https://bugs.openjdk.org/secure/attachment/98436/value-optional-class.patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w7mb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-02 12:41;dlong;ILW = tests failing with assertion = MMH = P3;;;","2022-04-04 09:48;mchung;I now can reproduce this assertion locally with test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestC1.java after the fix for JDK-8284159.

This blocks the migration of java.util.Optional and other VBS classes to value class.  Attached is the patch.;;;","2022-04-04 23:15;thartmann;Thanks Mandy, I'll fix this asap.;;;","2022-04-05 00:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/682
Date: 2022-04-05 07:12:41 +0000;;;","2022-04-05 10:15;mchung;[~thartmann] thanks for the fix.   The test result is looking much better.  ;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"Missing memory edge when spilling MoveF2I, MoveD2L etc",JDK-8282555,5069520,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,epeter,epeter,epeter,2022-03-02 06:33,2022-07-11 17:23,2023-10-01 09:56,2022-05-05 01:20,11,17,18,19,,,,,,19,hotspot,,0,c2,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-19,,,,,,,,,,,,"Original Bug Name:
""java.lang.RuntimeException in HeapByteBufferTest.java with -XX:+OptoScheduling""

These flags lead to intermittent unexpected behavior:
-XX:+UnlockDiagnosticVMOptions -XX:-TieredCompilation -XX:+OptoScheduling

On this test:
test/hotspot/jtreg/compiler/intrinsics/unsafe/HeapByteBufferTest.java

I was able to reproduce stably it with the help of -XX:+StressGCM.
With -XX:AbortVMOnException=java.lang.RuntimeException I can let the java exception crash the VM, and I can go find the StressSeed value.
The hit rate is maybe around 10-20%.
The runtime exception happens in this function:
void ck(double x, double y) 
Occasionally, the test runs into an endless recursion/stack-overflow in:
void ck(double x, double y)
-> not sure why this test was implemented this way, but it essentially seems to lead to a stack-overflow if the value is not identical/expected.

Note, that the values are only half off. I have found these cases:
java.lang.RuntimeException:  x = 39cb23bc2be7f15d, y = 2be7f15d
java.lang.RuntimeException:  x = ae05b6495318f496, y = ae45b6495318f496
java.lang.RuntimeException:  x = 1e96db4e3fda1b95, y = 4c71f0d03fda1b95
java.lang.RuntimeException:  x = 8854ecf2c6878eb1, y = e1c006e6c6878eb1
java.lang.RuntimeException: x = 21a12358cfa01320, y = 32418ea0cfa01320
It is evident that the lower 4 byte of the long is identical, and the upper 4 bytes are diverging.

I have found these seeds / java stack traces:

-XX:StressSeed=123
java.lang.RuntimeException:  x = 39cb23bc2be7f15d, y = 2be7f15d
	at MyByteBuffer.ck(ByteBufferTest.java:214)
	at MyByteBuffer.getLong(ByteBufferTest.java:256)
	at ByteBufferTest.stepUsingViews(ByteBufferTest.java:406)
	at ByteBufferTest.step(ByteBufferTest.java:315)
	at ByteBufferTest.run(ByteBufferTest.java:743)
	at HeapByteBufferTest.main(HeapByteBufferTest.java:51)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:828)

-XX:StressSeed=289413885
java.lang.RuntimeException:  x = ae05b6495318f496, y = ae45b6495318f496
	at MyByteBuffer.ck(ByteBufferTest.java:214)
	at MyByteBuffer.getLong(ByteBufferTest.java:256)
	at ByteBufferTest.stepUsingViews(ByteBufferTest.java:406)
	at ByteBufferTest.step(ByteBufferTest.java:315)
	at ByteBufferTest.run(ByteBufferTest.java:743)
	at HeapByteBufferTest.main(HeapByteBufferTest.java:51)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:828)

-XX:StressSeed=284669752
java.lang.RuntimeException:  x = 21a12358cfa01320, y = 32418ea0cfa01320
	at MyByteBuffer.ck(ByteBufferTest.java:214)
	at MyByteBuffer.getLong(ByteBufferTest.java:256)
	at ByteBufferTest.stepUsingViews(ByteBufferTest.java:406)
	at ByteBufferTest.step(ByteBufferTest.java:315)
	at ByteBufferTest.run(ByteBufferTest.java:743)
	at HeapByteBufferTest.main(HeapByteBufferTest.java:51)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:828)",,,,,,,,,,,JDK-8286881,JDK-8286878,JDK-8288958,JDK-8289467,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256540,,,,,,,,,,JDK-8288467,,,,,,JDK-8282661,JDK-8282665,JDK-8282573,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w7ij:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-03-02 06:38;chagedorn;ILW = Wrong execution of C2 compiled code, rare, no good workaround = HLH = P2;;;","2022-03-03 03:34;epeter;Update for after JDK-8282573:
As far as I see the already reported seeds still reproduce the bug.
Seed 297274261 also triggers the long case.
Using seed 293843391, I can trigger the new RuntimeException for the double case.

Some examples:
 java.lang.RuntimeException:  x = 0.0, y = -4.0479973512229064E-20 (x = 0, y = bbe7e52920000000)
java.lang.RuntimeException:  x = 0.0, y = -195326.078125 (x = 0, y = c107d7f0a0000000)
java.lang.RuntimeException:  x = 0.0, y = -6.72353284159044E-10 (x = 0, y = be071a1500000000)
java.lang.RuntimeException:  x = 5.075650423287514E35, y = 3.456374075838653E-12 (x = 47587038e0000000, y = 3d8e671000000000)

The lower bytes are mostly the same it seems. Not sure if it is the full 4 bytes. It is almost 4 bytes in this representation.
Maybe it is actually 4 bytes, but there were representation changes during the reporting.

one with a java stacktrace:

java.lang.RuntimeException:  x = 0.0, y = 1.08140945408E11 (x = 0, y = 42392db3e0000000)
	at MyByteBuffer.ck(ByteBufferTest.java:222)
	at MyByteBuffer.getFloat(ByteBufferTest.java:247)
	at ByteBufferTest.stepUsingAccessors(ByteBufferTest.java:345)
	at ByteBufferTest.step(ByteBufferTest.java:316)
	at ByteBufferTest.run(ByteBufferTest.java:745)
	at HeapByteBufferTest.main(HeapByteBufferTest.java:51)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:828);;;","2022-03-28 00:58;epeter;I also see that the failure is NOT OptoScheduling specifig. StressGCM helps to reproduce it, as it can invert the scheduling, and since we are missing the dependency edge, this can lead to bad scheduling with wrong results. But I have seen it reproduce without any of these flags also, you just have to be (un)lucky.;;;","2022-05-02 11:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7889
Date: 2022-03-21 11:02:35 +0000;;;","2022-05-05 01:19;dukebot;Changeset: 4a5e7a1a
Author:    Emanuel Peter <emanuel.peter@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-05-05 08:15:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4a5e7a1ada611cfdefdc3b9a6fada05494e07390
;;;","2022-06-21 00:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/158
Date: 2022-06-21 07:26:50 +0000;;;","2022-06-21 07:38;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
A C2 fix we should take. 
Clean backport.
Test passes and fails without the fix. SAP niglty testing passed.;;;","2022-06-21 07:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/485
Date: 2022-06-21 14:39:23 +0000;;;","2022-06-24 04:51;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
A C2 fix we should take.
I had to fix a C++11 construct (nullptr).
Test passes with but also without the fix. SAP nightly testing passed.;;;","2022-06-24 04:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1185
Date: 2022-06-24 11:50:35 +0000;;;","2022-07-11 17:23;epavlova;compiler/intrinsics/unsafe/HeapByteBufferTest.java test passed in JDK 19 ATR.;;;",,,,,,,,,,,,,,,,,,,
Properly initialize L32X64MixRandom state,JDK-8282551,5069515,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlaskey,djelinski,djelinski,2022-03-02 05:39,2022-04-01 09:30,2023-10-01 09:56,2022-03-02 08:44,17,18,19,,,,,,,19,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,redhat-interest,,,,,,,,,,,,,"issue created for https://github.com/openjdk/jdk/pull/7120;

L32X64MixRandom does not initialize x0 and x1 fields.",,,,,,,,,,,JDK-8284185,JDK-8283852,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8248862,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w7hn:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2022-03-02 07:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7120
Date: 2022-01-18 01:39:52 +0000;;;","2022-03-02 08:44;dukebot;Changeset: ce18ff85
Author:    Devin Smith <devinrsmith@protonmail.com>
Committer: Jim Laskey <jlaskey@openjdk.org>
Date:      2022-03-02 16:41:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ce18ff8527cc51805bf11c50c050ea64c3f9dec0
;;;","2022-03-28 02:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/55
Date: 2022-03-28 09:27:57 +0000;;;","2022-03-28 02:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/286
Date: 2022-03-28 09:29:00 +0000;;;","2022-03-28 04:48;sgehwolf;Fix Request (OpenJDK 18u & 17u):

Please approve backporting this fix to JDK 18u and 17u. Both JDKs have this issue as well: Default RandomGenerator returning the same initial integer value. This was originally reported here: https://github.com/adoptium/adoptium-support/issues/480. The patch applies cleanly and is low risk. Testing: Fails reproducer in the adoptium issue before and passes after. Also via GHA.;;;","2022-03-28 04:51;sgehwolf;For the record. A simple reproducer is:

$ cat RandomGeneratorBroken.java 
import java.util.*;
import java.util.random.*;
public class RandomGeneratorBroken {
  public static void main(String[] args) {
    var numbers = new HashSet<>();
    for (int i = 0; i < 1_00; i++) {
      numbers.add(RandomGenerator.getDefault().nextInt());
    }
    System.out.println(numbers.size());
  }
}

Before:

$ java -showversion RandomGeneratorBroken
openjdk version ""17.0.2"" 2022-01-18
OpenJDK Runtime Environment 21.9 (build 17.0.2+8)
OpenJDK 64-Bit Server VM 21.9 (build 17.0.2+8, mixed mode, sharing)
1

After:

$ java -showversion RandomGeneratorBroken
openjdk version ""17.0.4-internal"" 2022-07-19
OpenJDK Runtime Environment (build 17.0.4-internal+0-adhoc.sgehwolf.jdk17u-dev)
OpenJDK 64-Bit Server VM (build 17.0.4-internal+0-adhoc.sgehwolf.jdk17u-dev, mixed mode, sharing)
100;;;",,,,,,,,,,,,,,,,,,,,,,,,
Remove B37 from JDK 18 Artifactory ,JDK-8282543,5069507,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,pkharskii,boconnor,boconnor,2022-03-02 04:23,2022-03-09 07:44,2023-10-01 09:56,2022-03-09 07:44,18,,,,,,,,,18,infrastructure,2017-06-22 00:00,0,,,,,,,,,,,,,,,,,,,"JDK 18 B37 was promoted accidentally a few weeks ago. We don't want to cause any confusion with the final build for JDK 18 which is B36. Please remove B37 from artifactory location.
https://jpg-data.us.oracle.com/artifactory/re-release-local/jdk/18/37/bundles/common/",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w7fv:",9223372036854775807,b36,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@271b8dfc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PKCS11 tests fail on CentOS Stream 9,JDK-8282538,5069500,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,omikhaltcova,omikhaltcova,omikhaltcova,2022-03-02 02:04,2022-07-19 04:04,2023-10-01 09:56,2022-03-28 12:30,,,,,,,,,,19,security-libs,,0,amazon-interest,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,"PKCS11 tests (test/jdk/sun/security/pkcs11/Signature/) fail on the new platform CentOS Stream 9 with the following stack (affected all Java versions):

java.security.ProviderException: Initialization failed
	at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:392)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:125)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:122)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.configure(SunPKCS11.java:122)
	at PKCS11Test.getSunPKCS11(PKCS11Test.java:150)
	at PKCS11Test.getSunPKCS11(PKCS11Test.java:142)
	at PKCS11Test.testNSS(PKCS11Test.java:549)
	at PKCS11Test.main(PKCS11Test.java:210)
	at ByteBuffers.main(ByteBuffers.java:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: 0xCE534351
	at jdk.crypto.cryptoki/sun.security.pkcs11.wrapper.PKCS11.C_Initialize(Native Method)
	at jdk.crypto.cryptoki/sun.security.pkcs11.wrapper.PKCS11$SynchronizedPKCS11.C_Initialize(PKCS11.java:1682)
	at jdk.crypto.cryptoki/sun.security.pkcs11.wrapper.PKCS11.getInstance(PKCS11.java:185)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:346)
	... 13 more

For other Linux platforms these tests pass.",CentOS Stream 9,,,,,,,,,,JDK-8285589,JDK-8285588,JDK-8288826,JDK-8288827,JDK-8289112,JDK-8290297,JDK-8290298,JDK-8290076,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290375,,,,,,JDK-8290523,,,,,,"2022-03-02 02:24;omikhaltcova;ByteBuffers.jtr;https://bugs.openjdk.org/secure/attachment/98142/ByteBuffers.jtr","2022-03-02 02:24;omikhaltcova;InitAgainPSS.jtr;https://bugs.openjdk.org/secure/attachment/98143/InitAgainPSS.jtr","2022-03-02 02:24;omikhaltcova;KeyAndParamCheckForPSS.jtr;https://bugs.openjdk.org/secure/attachment/98144/KeyAndParamCheckForPSS.jtr","2022-03-02 02:24;omikhaltcova;LargeDSAKey.jtr;https://bugs.openjdk.org/secure/attachment/98145/LargeDSAKey.jtr","2022-03-02 02:24;omikhaltcova;ReinitSignature.jtr;https://bugs.openjdk.org/secure/attachment/98146/ReinitSignature.jtr","2022-03-02 02:24;omikhaltcova;SigInteropPSS.jtr;https://bugs.openjdk.org/secure/attachment/98147/SigInteropPSS.jtr","2022-03-02 02:24;omikhaltcova;SigInteropPSS2.jtr;https://bugs.openjdk.org/secure/attachment/98148/SigInteropPSS2.jtr","2022-03-02 02:25;omikhaltcova;SignatureTestPSS.jtr;https://bugs.openjdk.org/secure/attachment/98149/SignatureTestPSS.jtr","2022-03-02 02:25;omikhaltcova;SignatureTestPSS2.jtr;https://bugs.openjdk.org/secure/attachment/98150/SignatureTestPSS2.jtr","2022-03-02 02:25;omikhaltcova;TestDSA.jtr;https://bugs.openjdk.org/secure/attachment/98151/TestDSA.jtr","2022-03-02 02:25;omikhaltcova;TestDSA2.jtr;https://bugs.openjdk.org/secure/attachment/98152/TestDSA2.jtr","2022-03-02 02:25;omikhaltcova;TestDSAKeyLength.jtr;https://bugs.openjdk.org/secure/attachment/98153/TestDSAKeyLength.jtr","2022-03-02 02:25;omikhaltcova;TestRSAKeyLength.jtr;https://bugs.openjdk.org/secure/attachment/98154/TestRSAKeyLength.jtr",,x86_64,,,,,,,,,linux,,,,,"0|i2w7eb:",9223372036854775807,b16,,,,,,,,,,,"2022-03-02 02:53;omikhaltcova;[olga@localhost projects]$ $JTREG_HOME/bin/jtreg -jdk:$JDK_BUILD_HOME $JDK_TEST_HOME
Directory ""JTwork"" not found: creating
Directory ""JTreport"" not found: creating
Test results: failed: 13
Report written to /home/olga/projects/JTreport/html/report.html
Results written to /home/olga/projects/JTwork
Error: Some tests failed or other problems occurred.
[olga@localhost projects]$ cp ./jdk-fork/test/jdk/sun/security/pkcs11/Secmod/cert9.db ./jdk-fork/test/jdk/sun/security/pkcs11/nss/db/
[olga@localhost projects]$ cp ./jdk-fork/test/jdk/sun/security/pkcs11/Secmod/key4.db ./jdk-fork/test/jdk/sun/security/pkcs11/nss/db/
[olga@localhost projects]$ $JTREG_HOME/bin/jtreg -jdk:$JDK_BUILD_HOME $JDK_TEST_HOME
Test results: passed: 13
Report written to /home/olga/projects/JTreport/html/report.html
Results written to /home/olga/projects/JTwork;;;","2022-03-02 02:54;omikhaltcova;The tests failed due to cert9.db and key4.db are missed.
""Starting from NSS 3.35, the database format was upgraded to support SQLite as described in this document. It means that cert9.db and key4.db files may be targeted instead."" (https://firefox-source-docs.mozilla.org/security/nss/legacy/tools/nss_tools_certutil/index.html )
The lowest available version of NSS for downgrade on CentOS Stream 9 is 3.67.;;;","2022-03-02 04:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7658
Date: 2022-03-02 12:05:08 +0000;;;","2022-03-28 12:30;dukebot;Changeset: d8fd2223
Author:    Olga Mikhaltsova <omikhaltcova@openjdk.org>
Committer: Alexey Bakhtin <abakhtin@openjdk.org>
Date:      2022-03-28 19:27:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d8fd22239bafecdaaedb8985ab6d709ed846e808
;;;","2022-04-25 05:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/200
Date: 2022-04-25 12:43:34 +0000;;;","2022-04-25 05:50;omikhaltcova;Fix request (13u, 15u)

The failure of the PKCS11 tests (test/jdk/sun/security/pkcs11/Signature/) is also observed on CentOS Stream 9 with jdk15u ad jdk13u. After copying cert9.db and key4.db it eliminated.;;;","2022-04-25 06:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/343
Date: 2022-04-25 13:18:34 +0000;;;","2022-06-20 08:37;omikhaltcova;Fix request (11u, 17u) 

The same failure of the regression tests group (test/jdk/sun/security/pkcs11/Signature/) is observed on CentOS Stream 9 with jdk11u and jdk17u. After copying cert9.db and key4.db these tests passed.;;;","2022-06-20 08:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1160
Date: 2022-06-20 15:33:33 +0000;;;","2022-06-20 08:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/479
Date: 2022-06-20 15:33:48 +0000;;;","2022-06-21 16:10;omikhaltcova;Fix request (8u) 

The same failure of the regression tests group (test/jdk/sun/security/pkcs11/Signature/) is observed on CentOS Stream 9 with jdk8u. After copying cert9.db and key4.db these tests passed.;;;","2022-06-21 16:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/76
Date: 2022-06-21 23:08:59 +0000;;;",,,,,,,,,,,,,,,,,,
Remove redundant null check in ChaCha20Cipher.engineInit,JDK-8282534,5069495,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aturbanov,jwaters,jwaters,2022-03-02 00:19,2022-03-23 17:43,2023-10-01 09:56,2022-03-19 06:34,17,18,19,,,,,,,19,security-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w7d7:",9223372036854775807,b15,,,,,,,,,,,"2022-03-02 00:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7424
Date: 2022-02-10 13:20:34 +0000;;;","2022-03-19 06:34;dukebot;Changeset: 80415e04
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-03-19 13:31:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/80415e04c5fd6709e7e5b5ffb7a3d9431b672d99
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix API Note in javadoc for javax.net.ssl.SSLSocket,JDK-8282529,5069491,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wetmore,jwaters,jwaters,2022-03-01 23:10,2022-03-16 18:07,2023-10-01 09:56,2022-03-14 07:25,,,,,,,,,,19,security-libs,,0,,,,,,,,,,,,,,,,,,,"Fixed API Note in javadoc for javax.net.ssl.SSLSocket class. API Note was introduced by JDK-8208526 [1]. At that point both Socket.shutdownInput() / Socket.shutdownOutput() and InputStream.close() / OutputStream.close() performed half-close of TLS-1.3 connection. However this behaviour has changed as result of JDK-8216326 [2]. InputStream.close() / OutputStream.close() no longer perform half-close but full socket close, but API Note was never updated.

[1] https://bugs.openjdk.java.net/browse/JDK-8208526
[2] https://bugs.openjdk.java.net/browse/JDK-8216326

Also added some quick text to clarify that SSLSockets can be closed using either shutdownInput()/shutdownOutput() or close(). ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282768,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w7cb:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-03-02 03:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7648
Date: 2022-03-01 17:09:57 +0000;;;","2022-03-04 15:41;wetmore;There are more changes needed, and should probably be done as part of this issue since we're already in this code anyway.  The current code only talks about shutdownInput/shutdownOutput, but makes no mention of the duplex close(), which is the other way to shutdown the SSLSocket.  

https://mail.openjdk.java.net/pipermail/security-dev/2022-March/029167.html
https://mail.openjdk.java.net/pipermail/security-dev/2022-March/029209.html

These two changes will require a CSR to update the @apiNote.
;;;","2022-03-14 07:24;dukebot;Changeset: 08573cc3
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Bradford Wetmore <wetmore@openjdk.org>
Date:      2022-03-14 14:21:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/08573cc3b2370a697a7bd4ad0665ee20ae148d39
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: Incorrect replicate2L_zero rule,JDK-8282528,5069490,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,eliu,eliu,eliu,2022-03-01 23:07,2022-12-16 02:03,2023-10-01 09:56,2022-04-12 21:25,11,17,18,19,9,,,,,19,hotspot,,0,c2,c2-matcher,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-19,,,,,,,,,,,,,,"instruct replicate2L_zero(vecX dst, immI0 zero)
%{
  predicate(UseSVE == 0 && n->as_Vector()->length() == 2);
  match(Set dst (ReplicateI zero));
  ins_cost(INSN_COST);
  format %{ ""movi  $dst, $zero\t# vector (4I)"" %}
  ins_encode %{
    __ eor(as_FloatRegister($dst$$reg), __ T16B,
           as_FloatRegister($dst$$reg),
           as_FloatRegister($dst$$reg));
  %}
  ins_pipe(vmovi_reg_imm128);
%}
This rule outputs vecX, however, it matches ReplicateI node. Should it be ReplicateL?",,,,,,,,,,,JDK-8294737,JDK-8298929,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8079565,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,"0|i2w7c3:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-02 00:28;chagedorn;ILW = Possible wrong matching rule could lead to wrong execution, not observed yet, disable compilation of affected method = HLM = P3;;;","2022-03-24 02:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7939
Date: 2022-03-24 09:14:16 +0000;;;","2022-04-12 21:25;dukebot;Changeset: c3559028
Author:    Eric Liu <eliu@openjdk.org>
Committer: Pengfei Li <pli@openjdk.org>
Date:      2022-04-13 04:21:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c35590282d54d8388f2f7501a30365e0a912bfda
;;;","2022-08-22 01:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/642
Date: 2022-08-22 07:53:45 +0000;;;","2022-09-28 09:03;phh;Fix Request (17u).

On behalf of Yi-Fan Tsai <yftsai@amazon.com>

P3 vector code gen fix, passes tier1 tests.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Default icon is not painted properly,JDK-8282526,5069386,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kizune,webbuggrp,webbuggrp,2022-02-28 06:09,2023-04-06 08:36,2023-10-01 09:56,2022-07-18 13:38,17,18,19,,,,,,,20,client-libs,,0,11-na,17-bp,additional-information-received,dcspn,regression,regression_8182043,reproducer-yes,sn_114,sn_118,sn_119,sn_120,sn_121,sn_122,sn_123,webbug,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10, jdk-19 and jdk-17

A DESCRIPTION OF THE PROBLEM :
I used the javax.swing.filechooser.FileSystemView.getSystemIcon(File) method to get the icon from system. When the file has the default icon, the method returns an icon that looks cropped.
With Java 8 everything is ok. I reproduced the problem with Java 17 and Java 19
I attached a sample in the ""Source code for an executable test case"" section.

REGRESSION : Last worked in version 8u321

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Create the ""D:\\toDelete\\abc.bla"" file into your system. (it has to have an unknown extension)
2. Run the code from the ""Source code for an executable test case"" section with Java 19.


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The icon from the second button should be well painted.
ACTUAL -
The icon from the second button is cropped on the north side.

---------- BEGIN SOURCE ----------
import java.io.File;
import javax.swing.Box;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.filechooser.FileSystemView;
public class SwingDemo {
  
   public static void main(String[] args) {
      JButton button1 = new JButton(""text"");
      Icon icon =  FileSystemView.getFileSystemView().getSystemIcon(new File(""D:\\toDelete\\abc.bla""));
      JButton button2 = new JButton(icon);
      
      Box box = Box.createVerticalBox();
      box.add(button1);
      box.add(button2);
      JFrame frame = new JFrame();
      frame.add(box);
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      frame.setLocationByPlatform(true);
      frame.setSize(500, 300);
      frame.setVisible(true);
   }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
I didn't find a workaround.

FREQUENCY : always


",,,,,,,,,,,JDK-8300231,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293862,JDK-8289708,,,,,JDK-8289707,JDK-8182043,JDK-8289756,JDK-8289705,,,"2022-03-01 22:45;pnarayanaswa;Capture.PNG;https://bugs.openjdk.org/secure/attachment/98131/Capture.PNG","2022-03-07 21:10;pnarayanaswa;Capture_scale100.PNG;https://bugs.openjdk.org/secure/attachment/98225/Capture_scale100.PNG","2022-03-07 21:10;pnarayanaswa;Capture_scale125.PNG;https://bugs.openjdk.org/secure/attachment/98226/Capture_scale125.PNG","2022-03-07 21:10;pnarayanaswa;Capture_scale150.PNG;https://bugs.openjdk.org/secure/attachment/98227/Capture_scale150.PNG","2022-03-01 22:45;pnarayanaswa;SwingDemo.java;https://bugs.openjdk.org/secure/attachment/98132/SwingDemo.java","2022-03-07 02:18;pnarayanaswa;screenshot.png;https://bugs.openjdk.org/secure/attachment/98202/screenshot.png",,,,,,,,,x86_64,,,,,,,17,,windows_10,,,,,"0|i2w6oz:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-03-01 22:45;pnarayanaswa;Checked with attached testcase in Windows 10, cropping of icon was not observed<attached Screenshot for reference>

Mail to submitter:
==============
Please share the screen shot of the issue.;;;","2022-03-07 02:19;pnarayanaswa;Additional Information from Submitter:
============================
I created a screenshot with the differences between Java 8 and Java 19<attached screenshot.png>

As you can observe, the horizontal line from the top of the icon is not painted.
;;;","2022-03-07 21:00;pnarayanaswa;Custom icons is not painted well, (top border line and left border line). Observed when display scale is changed in JDK 17, 18ea, 19ea.<attached screenshot>
The issue is not observed in JDK 8 and 11, 
Test Result
=========
8u321: Pass
11.0.14: Pass
17.0.2: Fail
18ea36: Fail
19ea11: Fail;;;","2022-03-13 13:37;kizune;The main reason for this is that with the new code the image that is returned for default file is a high resolution 32x32 image that is being painted within the 16x16 icon. Because by default the interpolation mode is set no nearest neighbor that creates a visual artifacts. The idea of the fix is to detect the situation where interpolation is required and temporarily set rendering hint to enable bicubic interpolation.;;;","2022-03-13 14:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7805
Date: 2022-03-13 21:06:24 +0000;;;","2022-07-18 13:38;dukebot;Changeset: 6c8d0e61
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2022-07-18 20:33:19 +0000
URL:       https://git.openjdk.org/jdk/commit/6c8d0e617ff59eee1313589b10edbf5830774db5
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Fix 'hierachy' typo,JDK-8282523,5069484,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2022-03-01 22:22,2022-03-07 14:58,2023-10-01 09:56,2022-03-02 05:06,19,,,,,,,,,19,hotspot,,0,cleanup,noreg-cleanup,,,,,,,,,,,,,,,,,In a few places 'hierachy' is used in comments instead of 'hierarchy',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w7ar:",9223372036854775807,b12,,,,,,,,,,,"2022-03-01 22:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7474
Date: 2022-02-15 09:32:52 +0000;;;","2022-03-02 05:06;dukebot;Changeset: d80f6971
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-03-02 13:05:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d80f69718233c484e3c1536ffb793116c1adc058
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove usages of __WithField in compiler tests,JDK-8282512,5069471,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlsmith,dlsmith,dlsmith,2022-03-01 14:34,2022-03-07 16:38,2023-10-01 09:56,2022-03-07 16:38,repo-valhalla,,,,,,,,,repo-valhalla,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,,"We don't anticipate a generalized 'withfield' feature in the language any time soon, so tests that make use of the temporary '__WithField' feature need to be rewritten.

Affected tests:
TestWithfieldC1
TestDeoptimizationWhenBuffering",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282580,,,,,,,,,,JDK-8281283,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w77v:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-02 13:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/664
Date: 2022-03-02 21:20:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use fixed certificate validation date in SSLExampleCert template,JDK-8282511,5069470,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-03-01 14:21,2023-07-24 22:08,2023-10-01 09:56,2022-03-03 11:22,19,,,,,,,,,19,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,tencent-interest,ursqe-triaged,,,,,,,,,,"The certificate used in the SSLExampleCert template could expired, and result in unexpected testing failure.  It is not always easy to replace the certificate if the template get used a lot.

It would be nice if the certificate validation date is set to a fixed date in the validity of the certificate, especially before this template get used in more test cases.",,,,,,,,,,,JDK-8302295,JDK-8312143,JDK-8312703,JDK-8312145,JDK-8299257,JDK-8297565,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w77n:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-03-01 14:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7651
Date: 2022-03-01 22:38:30 +0000;;;","2022-03-03 11:22;dukebot;Changeset: 268fa693
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-03-03 19:20:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/268fa693188b685de6289927ee5a1e99473a50f6
;;;","2022-11-14 01:59;rmarchenko;I'd like to backport this to [17u, 11u, 8u];;;","2022-11-14 07:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/882
Date: 2022-11-14 15:33:26 +0000;;;","2022-11-14 07:48;rmarchenko;Fix request (17u, 11u, 8u)

Clean backport.
The test changed only.

For 8u the test files paths were changed.

Please note that new test added by the change may fail because there are additional changes in the dependant PR (see PR comment for details);;;","2022-12-09 02:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1576
Date: 2022-12-09 10:00:16 +0000;;;","2022-12-09 02:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/207
Date: 2022-12-09 09:59:40 +0000;;;","2023-02-09 08:37;andrew;The 8u backport was not clean but has been reviewed by myself and yan here: https://github.com/openjdk/jdk8u-dev/pull/207;;;",,,,,,,,,,,,,,,,,,,,,,
[exploded image] ResolvedClassTest fails with similar output,JDK-8282509,5069467,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mdoerr,mdoerr,2022-03-01 13:10,2022-03-16 18:05,2023-10-01 09:56,2022-03-10 07:12,19,,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-19,testbug,,,,,,,,,,,,,,,"I see ResolvedTestClass.java fail on my 7.1 AIX test machines with output very similar to the expected output. This may
be a testbug. The test fails expecting the line '@ 3   java.lang.invoke.Invokers$Holder::linkToTargetMethod (9 bytes)  
force inline by annotation'.

--- Linux (expected) output ---
> 128    7 %  b  3       compiler.jsr292.ResolvedClassTest$TestIndy::test @ 11 (33 bytes)
>       @ 3   java.lang.invoke.Invokers$Holder::linkToTargetMethod (9 bytes)   force inline by annotation
>       @ 5   java.lang.invoke.DirectMethodHandle$Holder::invokeStatic (14 bytes)   force inline by annotation
--- AIX (failing) output ---
< 237    7 %  b  3       compiler.jsr292.ResolvedClassTest$TestIndy::test @ 11 (33 bytes)
<       @ 3   java.lang.invoke.LambdaForm$MH/0x00000007c0002400::linkToTargetMethod (9 bytes)   force inline by
annotation
<       @ 5   java.lang.invoke.LambdaForm$DMH/0x00000007c0001c00::invokeStatic (14 bytes)   force inline by annotation

Update: Issue is not platform specific. It seems to be related to CDS which is not available on AIX. Issue can be reproduced on other platforms using an exploded image.

For future reference, it looks to me that this failure is related to missing pre-generated invokers JDK-8247536. As I understand it, these are either not created, or just not linked in the exploded image, and are never created on AIX.
",,,,,,,,,,,JDK-8283024,JDK-8283154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279515,,,,,,JDK-8247536,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w76z:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-01 13:11;mdoerr;On behalf of Tyler Steele (IBM).;;;","2022-03-01 17:09;dlong;I can reproduce this with an ""exploded image"" (one that didn't use jlink).  Could that be what is happening here with your AIX build?;;;","2022-03-01 17:14;dlong;ILW = 1 test fails on 1 platform, no workaround = MMH = P3;;;","2022-03-04 08:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7701
Date: 2022-03-04 16:22:47 +0000;;;","2022-03-09 05:29;mdoerr;@dlong: Right, it is not AIX specific. I've changed the title. Tyler has proposed a PR.;;;","2022-03-10 07:12;dukebot;Changeset: 7c8ea9f0
Author:    Tyler Steele <tyler.steele@ibm.com>
Committer: Martin Doerr <mdoerr@openjdk.org>
Date:      2022-03-10 15:09:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7c8ea9f05b35069e2b5b43e1a0e46f7dbe374e4c
;;;","2022-03-10 07:36;mdoerr;Fix Request (17u):
The affected test was recently backported to 17.0.4 (JDK-8279515). The fix applies cleanly and the test has passed with an exploded image.;;;","2022-03-10 07:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/231
Date: 2022-03-10 15:36:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Updating ASM to 9.2 for JDK 19,JDK-8282508,5069466,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vromero,vromero,vromero,2022-03-01 12:28,2022-05-05 15:05,2023-10-01 09:56,2022-04-04 08:06,,,,,,,,,,19,core-libs,,0,noreg-other,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282446,,,,,,,,,,JDK-8284361,,,,,,JDK-8241627,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w76r:",9223372036854775807,b17,,,,,,,,,,,"2022-03-28 09:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8000
Date: 2022-03-28 16:49:58 +0000;;;","2022-04-04 08:06;dukebot;Changeset: 36b9baa7
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2022-04-04 15:05:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/36b9baa70da4af9b531319ea547884f1141e7cdd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1: Predicted old time in log always zero,JDK-8282484,5069436,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2022-03-01 05:38,2023-05-19 00:59,2023-10-01 09:56,2022-03-03 01:27,13,14,15,16,17,18,19,,,19,hotspot,,0,amazon-interest,ergonomics,gc-g1,,,,,,,,,,,,,,,,"There is a log message at gc+ergo+cset=debug level that reads:

  log_debug(gc, ergo, cset)(""Finish choosing collection set old regions. Initial: %u, optional: %u, ""
                            ""predicted old time: %1.2fms, predicted optional time: %1.2fms, time remaining: %1.2f"",
                            num_initial_regions, num_optional_regions,
                            predicted_initial_time_ms, predicted_optional_time_ms, time_remaining_ms);

The value used for printing the predicted old time is always zero. Instead of using predicted_old_time in the method, predicted_initial_time_ms should be used, and predicted_old_time removed.

Issue introduced in JDK-8218668 apparently.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8218668,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w703:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-03-02 02:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7657
Date: 2022-03-02 09:56:37 +0000;;;","2022-03-03 01:27;dukebot;Changeset: d4d1fbc2
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-03-03 09:26:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d4d1fbc27a2382d8d9545b7bf672cdcc81654404
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ensure that Utils.getAllInterfaces returns unique instances,JDK-8282483,5069435,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-03-01 05:29,2022-03-09 16:03,2023-10-01 09:56,2022-03-03 08:13,19,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,"Instances of TypeMirror that are equal (TypeMirror::equals), aren't necessarily same (Types::isSameType). If care is not taken when putting instances of TypeMirror into a set, that set might end up containing same instances.

If Utils.getAllInterfaces is called on a type that extends or implements a particular interface multiple times (on different levels of its hierarchy), the returned set might contain multiple representations of that interface. For example, I've seen a case where getAllInterfaces that was passed a TypeElement corresponding to java.util.ArrayList returned a set containing 3 instances of TypeMirror corresponding to java.util.Collection<E>.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280713,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w6zv:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-03-02 08:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7659
Date: 2022-03-02 16:01:47 +0000;;;","2022-03-03 08:13;dukebot;Changeset: 080baffa
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-03-03 16:10:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/080baffa6e0b27dbbf169d6c68980351aa484b8e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: Use description instead of enum name for phases,JDK-8282480,5069431,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,chagedorn,chagedorn,chagedorn,2022-03-01 04:52,2022-08-16 23:39,2023-10-01 09:56,2022-03-02 01:00,19,,,,,,,,,19,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,"JDK-8281505 changed the `PrintIdeal` output to use the enum name of a phase when used with `PrintIdealPhase` instead of the description. However, it also changed the phase name shown in the IGV to the enum name. This should be reverted back.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281505,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w6yz:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-01 05:05;chagedorn;ILW = Not showing pretty phase name in IGV anymore, only in IGV, no workaround = LLH = P5;;;","2022-03-01 05:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7645
Date: 2022-03-01 13:03:50 +0000;;;","2022-03-02 01:00;dukebot;Changeset: ed3496e6
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-03-02 08:57:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ed3496e6c030b6b0a3745bf8ef281075afa1cd27
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"[x86, aarch64] vmassert(_last_Java_pc == NULL, ""already walkable""); fails with async profiler",JDK-8282477,5069427,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbechberger,mdoerr,mdoerr,2022-03-01 03:13,2023-08-01 00:14,2023-10-01 09:56,2022-05-04 00:57,19,,,,,,,,,19,hotspot,,0,AsyncGetCallTrace,intermittent,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"We hit the assertion sporadically on x86_64 when using the async profiler via ""AsyncGetCallTrace"". (aarch64 has the same implementation.)
""frame::sender_for_entry_frame"" calls ""capture_last_Java_pc()"" if _last_Java_pc == NULL. Within the latter function, we assert that it is still NULL. However, the async profiler may intercept the JavaThread and set the _last_Java_pc in the JavaFrameAnchor. So, the assertion fires when it sees that the work is already done.
",,,,,,,,,,,JDK-8311694,JDK-8313500,JDK-8313211,JDK-8287931,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284757,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86,,,,,,,,,,,,,"0|i2w6y3:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2022-03-01 03:14;mdoerr;On behalf on Johannes Bechberger.;;;","2022-03-01 04:37;dholmes;Given its signal handler execution context it is a surprise that AGCT doesn't fail more often. Really none of the code executed from there should be updating mutable state of the thread or any other shared data.;;;","2022-03-01 07:32;dcubed;Moving from hotspot/runtime -> hotspot/svc which is
where AsyncGetCallTrace bugs live...;;;","2022-04-12 09:36;jbechberger;This issue should also be observable with JFR.;;;","2022-04-12 09:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8209
Date: 2022-04-12 16:38:11 +0000;;;","2022-05-04 00:57;dukebot;Changeset: 4b2c8220
Author:    Johannes Bechberger <johannes.bechberger@sap.com>
Committer: Martin Doerr <mdoerr@openjdk.org>
Date:      2022-05-04 07:54:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4b2c82200fdc01de868cf414e40a4d891e753f89
;;;","2022-06-01 08:04;jbechberger;Fix Request (17u): 
Improves stability of AsyncGetCallTrace
Doesn't apply clean. Tested manually with jdk-profiling-tester;;;","2022-06-01 08:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/428
Date: 2022-06-01 15:01:00 +0000;;;","2023-02-12 23:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/1
Date: 2023-02-07 11:20:37 +0000;;;","2023-06-19 20:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,
Drop NativeSymbol,JDK-8282476,5069426,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-03-01 02:55,2022-03-02 14:46,2023-10-01 09:56,2022-03-02 14:46,repo-panama,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,"The NativeSymbol class is not that useful, and it is hard to explain what it does. It is currently used in three places:

* As a parameter type, in CLinker::downcallHandle (the entry point of the native function to be invoked)

* As a return type in CLinker::upcallStub

* As a return type in CLinker::lookup/ClassLoader::findNative

Now, in all these cases there are valid (if not superior) alternatives: in parameter position we can replace NativeSymbol with Addresable, and actually gain in expressiveness (as we can just pass raw MemoryAddress, if we happen to have one); in return position we can return a zero-length segment. Support for zero-length segment was made more uniform in  JDK-8280460.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w6xv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-03-01 03:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/658
Date: 2022-03-01 11:03:19 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Loom: Fix build failures for PPC64, S390, ARM32 and Zero",JDK-8282468,5069415,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,haosun,haosun,haosun,2022-02-28 20:03,2022-03-07 05:01,2023-10-01 09:56,2022-03-07 05:01,repo-loom,,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,"In Loom repo, updates made in commits [1][2][3][4] are missing for PPC64, S390, ARM32
and Zero, leading to build failures.

[1] https://github.com/openjdk/loom/commit/4f9b661
[2] https://github.com/openjdk/loom/commit/74b27d0
[3] https://github.com/openjdk/loom/commit/90fb1b9
[4] https://github.com/openjdk/loom/commit/d77311e

Here is the snippet of error msg, produced for ppc64le build.
=== Output from failing command(s) repeated here ===
* For target hotspot_variant-server_libjvm_objs_abstractDisassembler.o:
In file included from /home/runner/work/loom/loom/jdk/src/hotspot/share/runtime/frame.inline.hpp:44,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/oops/stackChunkOop.inline.hpp:32,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/oops/instanceStackChunkKlass.inline.hpp:42,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/memory/iterator.inline.hpp:38,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/utilities/bitMap.inline.hpp:30,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/gc/shared/markBitMap.inline.hpp:33,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/gc/g1/g1ConcurrentMarkBitMap.inline.hpp:30,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/gc/g1/g1ConcurrentMark.inline.hpp:31,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/gc/g1/g1CollectedHeap.inline.hpp:33,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/gc/g1/g1BarrierSet.inline.hpp:31,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/gc/shared/barrierSetConfig.inline.hpp:37,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/oops/access.inline.hpp:31,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/oops/oop.inline.hpp:31,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/compiler/abstractDisassembler.cpp:32:
/home/runner/work/loom/loom/jdk/src/hotspot/cpu/ppc/frame_ppc.inline.hpp:175:18: error: no declaration matches 'intptr_t* frame::interpreter_frame_expression_stack() const'
   ... (rest of output omitted)
* For target hotspot_variant-server_libjvm_objs_abstractInterpreter.o:
In file included from /home/runner/work/loom/loom/jdk/src/hotspot/share/runtime/frame.inline.hpp:44,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/oops/stackChunkOop.inline.hpp:32,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/oops/instanceStackChunkKlass.inline.hpp:42,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/memory/iterator.inline.hpp:38,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/utilities/bitMap.inline.hpp:30,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/gc/shared/markBitMap.inline.hpp:33,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/gc/g1/g1ConcurrentMarkBitMap.inline.hpp:30,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/gc/g1/g1ConcurrentMark.inline.hpp:31,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/gc/g1/g1CollectedHeap.inline.hpp:33,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/gc/g1/g1BarrierSet.inline.hpp:31,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/gc/shared/barrierSetConfig.inline.hpp:37,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/oops/access.inline.hpp:31,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/oops/oopHandle.inline.hpp:30,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/oops/cpCache.inline.hpp:30,
                 from /home/runner/work/loom/loom/jdk/src/hotspot/share/interpreter/abstractInterpreter.cpp:40:
   ... (rest of output omitted)

* All command lines available in /home/runner/work/loom/loom/jdk/build/linux-powerpc64le-hotspot/make-support/failure-logs.
=== End of repeated output ===",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i2w6vf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/sound/sampled/Clip/DataPusherThreadCheck.java fails ,JDK-8282463,5069405,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aturbanov,landrews,landrews,2022-02-28 13:55,2022-12-12 08:30,2023-10-01 09:56,2022-10-30 10:36,19,,,,,,,,,20,client-libs,,0,jdk19u-fix-request,noreg-self,regression,regression_8282463,tier4,,,,,,,,,,,,,,"javax/sound/sampled/Clip/DataPusherThreadCheck.java is fails on Ubuntu 20.04 . The same test case passes on Mac OS Big Sur version 11.6.1, MacBook Pro

This test case was added in jdk 19 via JDK-8279673 
I added a System.out.println to print the thread name and I could not see DataPusher.

----------System.out:(8/286)----------
thread 15 0millis: Line not supported: PCM_UNSIGNED 44100.0 Hz, 8 bit, mono, 1 bytes/frame
thread name : main
thread name : Common-Cleaner
thread name : Notification Thread
thread name : Reference Handler
thread name : Signal Dispatcher
thread name : Finalizer
thread name : MainThread
----------System.err:(12/733)----------
java.lang.RuntimeException: Thread 'DataPusher' isn't found
        at DataPusherThreadCheck.checkThread(DataPusherThreadCheck.java:76)
        at DataPusherThreadCheck.main(DataPusherThreadCheck.java:60)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Thread 'DataPusher' isn't found
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Thread 'DataPusher' isn't found
----------rerun:(27/2025)*----------

#-----testresult-----
elapsed=2775 0\:00\:02.775
end=Mon Feb 28 21\:48\:00 UTC 2022
environment=regtest
execStatus=Failed. Execution failed\: `main' threw exception\: java.lang.RuntimeException\: Thread 'DataPusher' isn't found
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=hostname
javatestOS=Linux 5.11.0-1028-oracle (amd64)
javatestVersion=6.0-ea+b14-2020-11-04
jtregVersion=jtreg 6.1 1
modules=java.desktop
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages build compile main
start=Mon Feb 28 21\:47\:57 UTC 2022
test=javax/sound/sampled/Clip/DataPusherThreadCheck.java

Tested on jdk19 b9
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux_ubuntu,,,,,"0|i2w6t7:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7d98911c,,,,,,,,,"2022-02-28 16:49;vdyakov;[~landrews][~kizune] does it affect JDK 18? 17? 11?;;;","2022-02-28 21:20;landrews;[~vdyakov], the test fails on jdk17 b35 , jdk 18 b36 , JDK 11 ( 11.0.15);;;","2022-10-15 06:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10717
Date: 2022-10-15 13:03:26 +0000;;;","2022-10-30 10:36;dukebot;Changeset: 2e716375
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-10-30 17:33:12 +0000
URL:       https://git.openjdk.org/jdk/commit/2e7163759c75cab6ab5ffa04c13d32ccc95f9719
;;;","2022-12-02 00:46;serb;It fails on jdk 11 and jdk17 because an initial bug JDK-8279673 was fixed in jdk 19.;;;","2022-12-12 05:18;aivanov;The test does not exist in 17 and 11 because JDK-8279673 hasn't been backported.;;;","2022-12-12 05:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/105
Date: 2022-12-12 13:37:25 +0000;;;","2022-12-12 05:58;aivanov;Fix request (19u)

Clean backport. This is to address the failure of the test added by JDK-8279673 to jdk19, which could be considered as a regression.

Review https://github.com/openjdk/jdk19u/pull/105;;;",,,,,,,,,,,,,,,,,,,,,,
"Remove unnecessary use of @SuppressWarnings(""preview"")",JDK-8282462,5069404,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2022-02-28 13:52,2022-03-07 14:54,2023-10-01 09:56,2022-02-28 14:17,19,,,,,,,,,19,core-libs,,0,noreg-build,,,,,,,,,,,,,,,,,,"With JEP 395 Records being a final part of the platform, the @SuppressWarnings(""preview"") annotations needed for its preview iterations can and should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8246771,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w6sz:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3c6c40,,,,,,,,,"2022-02-28 14:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7638
Date: 2022-02-28 21:54:34 +0000;;;","2022-02-28 14:17;dukebot;Changeset: 9d9618a3
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-02-28 22:14:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9d9618a3dd29cb9328a7275375e04eca2af20a93
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use of Preview API in preview methods should not trigger preview warning for the enclosing class,JDK-8282452,5069388,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,jlahoda,jlahoda,2022-02-28 06:14,2022-03-07 14:56,2023-10-01 09:56,2022-03-01 07:57,19,,,,,,,,,19,tools,,0,regression,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w6pf:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-02-28 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7634
Date: 2022-02-28 14:43:19 +0000;;;","2022-03-01 07:57;dukebot;Changeset: b03d66c5
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-03-01 15:54:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b03d66c5016f3821fbf0990e045b71b59ec9a759
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
nmethod::make_deoptimized triggers an assertion,JDK-8282450,5069385,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rbackman,rpressler,rpressler,2022-02-28 05:45,2022-03-24 10:43,2023-10-01 09:56,2022-03-24 10:43,repo-loom,,,,,,,,,repo-loom,hotspot,,0,deoptimization,,,,,,,,,,,,,,,,,,"The callsites in a deoptimized method are verified to not target zombie methods, and this fails.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-02-28 05:43;rpressler;hs_err_pid480479.log;https://bugs.openjdk.org/secure/attachment/98124/hs_err_pid480479.log",,,,,,,,,,,,,,,,,,,,,repo-loom,,,,,,,"0|i2w6or:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-03-24 10:43;alanb;This issue has been fixed so I think we can close this issue.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Intermittent OOM error in PredefinedMeshManagerTest,JDK-8282449,5069384,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,arapte,kcr,kcr,2022-02-28 05:42,2022-04-26 08:09,2023-10-01 09:56,2022-04-21 18:40,jfx17,jfx19,,,,,,,,jfx19,javafx,,0,intermittent,noreg-self,sn_116,test_sprint,testbug,,,,,,,,,,,,,,"We occasionally get OOM errors while running PredefinedMeshManagerTest on some systems. Here is a recent example from our CI build:

PredefinedMeshManagerTest > sphereCacheTest FAILED
    java.lang.OutOfMemoryError: Java heap space
        at java.base/java.util.Arrays.copyOf(Arrays.java:3585)
        at javafx.base@19-ea/com.sun.javafx.collections.ObservableIntegerArrayImpl.ensureCapacity(ObservableIntegerArrayImpl.java:254)
        at javafx.base@19-ea/com.sun.javafx.collections.ObservableIntegerArrayImpl.setAllInternal(ObservableIntegerArrayImpl.java:131)
        at javafx.base@19-ea/com.sun.javafx.collections.ObservableIntegerArrayImpl.setAll(ObservableIntegerArrayImpl.java:156)
        at javafx.graphics@19-ea/javafx.scene.shape.Sphere.createMesh(Sphere.java:442)
        at javafx.graphics@19-ea/javafx.scene.shape.PredefinedMeshManager.getSphereMesh(PredefinedMeshManager.java:119)
        at javafx.graphics@19-ea/javafx.scene.shape.Sphere.doUpdatePeer(Sphere.java:188)
        at javafx.graphics@19-ea/javafx.scene.shape.Sphere$1.doUpdatePeer(Sphere.java:66)
        at javafx.graphics@19-ea/com.sun.javafx.scene.shape.SphereHelper.updatePeerImpl(SphereHelper.java:66)
        at javafx.graphics@19-ea/com.sun.javafx.scene.NodeHelper.updatePeer(NodeHelper.java:103)
        at test.javafx.scene.shape.PredefinedMeshManagerTest.testShapeAddition(PredefinedMeshManagerTest.java:49)
        at test.javafx.scene.shape.PredefinedMeshManagerTest.sphereCacheTest(PredefinedMeshManagerTest.java:90)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283183,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w6oj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-03-15 10:12;kcr;This was just seen on the GitHub action run for the following PR:

https://github.com/openjdk/jfx/pull/753/checks?check_run_id=5557666978

Here is the failing log from the macOS run:

2022-03-14T14:25:39.5202220Z PredefinedMeshManagerTest > sphereCacheTest FAILED
2022-03-14T14:25:39.5258750Z     java.lang.OutOfMemoryError: Java heap space
2022-03-14T14:25:39.5259690Z         at java.base/java.util.Arrays.copyOf(Arrays.java:3585)
2022-03-14T14:25:39.5260820Z         at javafx.base@19-internal/com.sun.javafx.collections.ObservableIntegerArrayImpl.ensureCapacity(ObservableIntegerArrayImpl.java:254)
2022-03-14T14:25:39.5261890Z         at javafx.base@19-internal/com.sun.javafx.collections.ObservableIntegerArrayImpl.setAllInternal(ObservableIntegerArrayImpl.java:131)
2022-03-14T14:25:39.5266880Z         at javafx.base@19-internal/com.sun.javafx.collections.ObservableIntegerArrayImpl.setAll(ObservableIntegerArrayImpl.java:156)
2022-03-14T14:25:39.5267990Z         at javafx.graphics@19-internal/javafx.scene.shape.Sphere.createMesh(Sphere.java:442)
2022-03-14T14:25:39.5268920Z         at javafx.graphics@19-internal/javafx.scene.shape.PredefinedMeshManager.getSphereMesh(PredefinedMeshManager.java:119)
2022-03-14T14:25:39.5270270Z         at javafx.graphics@19-internal/javafx.scene.shape.Sphere.doUpdatePeer(Sphere.java:188)
2022-03-14T14:25:39.5271190Z         at javafx.graphics@19-internal/javafx.scene.shape.Sphere$1.doUpdatePeer(Sphere.java:66)
2022-03-14T14:25:39.5274330Z         at javafx.graphics@19-internal/com.sun.javafx.scene.shape.SphereHelper.updatePeerImpl(SphereHelper.java:66)
2022-03-14T14:25:39.5280200Z         at javafx.graphics@19-internal/com.sun.javafx.scene.NodeHelper.updatePeer(NodeHelper.java:103)
2022-03-14T14:25:39.5281100Z         at test.javafx.scene.shape.PredefinedMeshManagerTest.testShapeAddition(PredefinedMeshManagerTest.java:49)
2022-03-14T14:25:39.5283810Z         at test.javafx.scene.shape.PredefinedMeshManagerTest.sphereCacheTest(PredefinedMeshManagerTest.java:90)
;;;","2022-03-16 13:54;kcr;The test methods in question have been skipped by  JDK-8283183 until this bug is fixed.;;;","2022-04-21 08:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/782
Date: 2022-04-21 15:07:38 +0000;;;","2022-04-21 18:40;dukebot;Changeset: 7ddcb8bd
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2022-04-22 01:38:47 +0000
URL:       https://git.openjdk.java.net/jfx/commit/7ddcb8bdf8549c3c140b8697c781eb294ea2b0dc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
JAR file validation fails,JDK-8282446,5069381,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,cstein,cstein,2022-02-28 04:40,2022-04-05 07:26,2023-10-01 09:56,2022-04-05 07:25,17.0.2,18,19,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,"Running ""jar --validate --file JAR-FILE"" may lead to ""java.lang.UnsupportedOperationException: This feature requires ASM..."" exceptions. Find details in stack trace attached at the end of this description.

The underlying reason is a usage of ""Opcodes.ASM7"" in the sun.tools.jar.FingerPrint class.

Find a minimal reproducer at https://github.com/sormuras/JDK-8282446

{{
java.lang.UnsupportedOperationException: This feature requires ASM9_EXPERIMENTAL
        at java.base/jdk.internal.org.objectweb.asm.ClassVisitor.visitPermittedSubclassExperimental(ClassVisitor.java:299)
        at java.base/jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:715)
        at java.base/jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:432)
        at jdk.jartool/sun.tools.jar.FingerPrint.getClassAttributes(FingerPrint.java:165)
        at jdk.jartool/sun.tools.jar.FingerPrint.<init>(FingerPrint.java:81)
}}

{{
java.lang.UnsupportedOperationException: This feature requires ASM8
        at java.base/jdk.internal.org.objectweb.asm.ClassVisitor.visitRecordComponent(ClassVisitor.java:338)
        at java.base/jdk.internal.org.objectweb.asm.ClassReader.readRecordComponent(ClassReader.java:962)
        at java.base/jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:740)
        at java.base/jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:432)
        at jdk.jartool/sun.tools.jar.FingerPrint.getClassAttributes(FingerPrint.java:165)
        at jdk.jartool/sun.tools.jar.FingerPrint.<init>(FingerPrint.java:81)
}}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282508,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w6nv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@189ffaae,,,,,,,,,"2022-03-02 06:29;cstein;JAR file validation (explicite and on creation of a MRJAR file) should work after updating ASM to 9.2;;;","2022-04-05 07:26;vromero;fixed by: JDK-8282508;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Module finder incorrectly assumes default file system path-separator character,JDK-8282444,5069378,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,chegar,chegar,chegar,2022-02-28 03:11,2023-07-31 06:27,2023-10-01 09:56,2022-03-01 02:39,17,18,,,,,,,,19,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,,,,,,,,,,,,,,"The module finder implementation incorrectly uses the path-separator
character from the default file system, when mapping the relative path
of an entry in an exploded module to a package name. This causes
problems on Windows [*] when using a module finder with a custom file
system that has a path-separator character that differs from that of the
default file system, e.g. the zip file system (which uses '/',
rather than '\' ).

[*]
java.lang.module.FindException: Error reading module: /m2
        at java.base/jdk.internal.module.ModulePath.readModule(ModulePath.java:350)
        at java.base/jdk.internal.module.ModulePath.scanDirectory(ModulePath.java:284)
        at java.base/jdk.internal.module.ModulePath.scan(ModulePath.java:232)
        at java.base/jdk.internal.module.ModulePath.scanNextEntry(ModulePath.java:190)
        at java.base/jdk.internal.module.ModulePath.findAll(ModulePath.java:166)
        at ModulesInCustomFileSystem.listAllModules(ModulesInCustomFileSystem.java:108)
        at ModulesInCustomFileSystem.testZipFileSystem(ModulesInCustomFileSystem.java:97)
        at ModulesInCustomFileSystem.testExplodedModulesInZipFileSystem(ModulesInCustomFileSystem.java:68)
        at ...
Caused by: java.lang.module.InvalidModuleDescriptorException: Package q.r not found in module
        at java.base/jdk.internal.module.ModuleInfo.invalidModuleDescriptor(ModuleInfo.java:1212)
        at java.base/jdk.internal.module.ModuleInfo.doRead(ModuleInfo.java:330)
        at java.base/jdk.internal.module.ModuleInfo.read(ModuleInfo.java:129)
        at java.base/jdk.internal.module.ModulePath.readExplodedModule(ModulePath.java:689)
        at java.base/jdk.internal.module.ModulePath.readModule(ModulePath.java:320)
        ... 36 more",,,,,,,,,,,JDK-8283613,JDK-8283556,JDK-8313410,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2w6n7:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@34132c1c,,,,,,,Verified,,"2022-02-28 03:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7632
Date: 2022-02-28 11:12:17 +0000;;;","2022-02-28 03:20;alanb;[~chegar] Can you update the bug description with a clearer description on the environment? Is the issue with exploded or packaged modules? Also would be useful if you could say if are interposing on the default file system or the scenario is just a custom file system.;;;","2022-02-28 03:47;chegar;I am on Windows. I use the zip file system to open a jar file that contains a module. This scenario is the very same as the test that is modified in the PR. What the test is lacking is a package that contains a sub-package.

Background

In may particular scenario, I build a single artifact that contains both an API and embedded implementation. The API locates its implementation through a SPI. The embedded implementation, along with its dependencies, are placed in a non-loadable structure of the same jar as the API. This way I can put the single jar artifact on the module path, where tools and IDEs can compile against the API (but not the implementation). At runtime, the code locates the implementation by resolving the embedded impl+deps modules and defines them to their own module layer. The module layer finds classes using a custom class loader.

I do not interpose on the default file system, just use the zip file system directly. Note, the module-info.class files are not in the root of the jar, in fact they are something like:
    /IMPL-JARS/<api>/xcontent-impl/module-info.class
    /IMPL-JARS/<api>/jackson-corel/module-info.class
    /IMPL-JARS/<api>/jackson-databindl/module-info.class
   .. 

All this works fine with the trivial change in the linked PR. Along with the expansion of the test that does something similar, just the module-info.class files are in the root of the jar file.
;;;","2022-02-28 04:16;chegar;Oops! I should be more clear. The bug in the JDK's module finder is independent of anything that I'm doing with custom class loading or layout in the jar file, as can be seen by the test update in the PR. The test exercises a scenario that the module finder is expected to support, but does so with modules that have trivially named simple packages, which fails when a subpackage is added. The background above is just information.;;;","2022-03-01 02:39;dukebot;Changeset: 369291b2
Author:    Chris Hegarty <chegar@openjdk.org>
Date:      2022-03-01 10:37:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/369291b265e13d625c5f465da9b1854c0d70c435
;;;","2022-03-15 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u/pull/335
Date: 2022-03-15 13:39:27 +0000;;;","2022-03-15 07:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/48
Date: 2022-03-15 14:26:02 +0000;;;","2022-03-15 08:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u/pull/336
Date: 2022-03-15 14:55:42 +0000;;;","2022-03-15 08:08;chegar;Fix Request: backport to jdk18u, applies cleanly, passed tier1 tests. 
  Backport PR: https://github.com/openjdk/jdk18u/pull/48;;;","2022-03-15 08:09;chegar;Fix Request: backport to jdk17u, applies cleanly, passed tier1 tests. 
  Backport PR: https://github.com/openjdk/jdk17u-dev/pull/266;;;","2022-03-21 05:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/266
Date: 2022-03-21 12:10:53 +0000;;;",,,,,,,,,,,,,,,,,,,
[LOOM] Remove JDI VirtualMachine.supportsVirtualThreads(),JDK-8282439,5069370,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2022-02-27 23:44,2022-05-07 03:28,2023-10-01 09:56,2022-05-07 03:28,repo-loom,,,,,,,,,repo-loom,core-svc,,0,fibers-only,,,,,,,,,,,,,,,,,,"Also remove the JDWP supportsVirtualThreads capability. These were added as a temporary measure so debuggers can determine if the target JDK supports virtual thread. It has been needed because the ""current"" JDK could be based either on the loom repo or jdk mainline repo, both with the same version number, so the version number could not be used to determine if virtual threads was supported.

Once loom is integrated into jdk mainline, debuggers can use the JDK version number to determine if virtual threads are supported, and supportsVirtualThreads() will no longer be needed. However, it can't be removed at the time of integration, because this won't give debuggers a chance to transition off of its use, but it should be removed before RDP1 of the release that loom is integrated into.

The following will need to be removed:

In jdwp.spec:

              (boolean supportsVirtualThreads
                       ""Does the VM support virtual threads, temporary capability"")

In the JDI VirtualMachine.java:

     default boolean supportsVirtualThreads() {
         return false;
     }

In the debug agent VirtualMachineImpl.c:

    /* 22 supportsVirtualThreads, temporary capability */
    (void)outStream_writeBoolean(out, (jboolean)JNI_TRUE);
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w6lf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-03-22 01:32;alanb;I have a local branch with the changes that correspond to only the changes for the Virtual Threads JEP. One of the changes in that branch is to remove this JDWP command and the JDI method.;;;","2022-04-14 22:45;alanb;Just to add to the previous comment, the supportsVirtualThreads is removed the jep-vt branch. This JBS issue is left over to remove it from the fibers branch at some point. The EA builds are produced from the fibers branch so it may be useful for IDEs that are used with both JDK 19 EA and Loom EA builds.;;;","2022-05-07 03:28;alanb;The fibers branch has been sync'ed up from main line. The temporary JDWP command and JDI method were removed as part of this sync up. So I think we can mark this issue as resolved.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: pd_disjoint_words_atomic() needs to be atomic,JDK-8282436,5069365,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tguo,tguo,tguo,2022-02-27 20:44,2022-03-01 22:52,2023-10-01 09:56,2022-03-01 22:52,repo-riscv-port,,,,,,,,,repo-riscv-port,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,,,,,,"WIth reference to https://bugs.openjdk.java.net/browse/JDK-8227369, there is the same issue on the riscv platform ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,"0|i2w6kb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-03-01 22:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/riscv-port/pull/64
Date: 2022-03-02 06:30:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Leading combining diacritic character in string renders incorrectly,JDK-8282434,5069230,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,webbuggrp,webbuggrp,2022-02-24 08:18,2022-09-08 07:34,2023-10-01 09:56,2022-09-06 01:46,17,,,,,,,,,20,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
A string with a leading combining diacritic (https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) will render improperly in jshell

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Open a new jshell instance and create a string with a leading combining diacritic

jshell> ""\u032Ea""

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
jshell should visually separate the double-quotation mark from the string's actual contents

$1 ==> ""‌̮a""

This can be done either by unconditionally emitting a zero-width, non-joiner (\u200C) or by detecting the presence of a leading combining diacritic in a string and conditionally emitting the zero-width, non-joiner.
ACTUAL -
The diacritic has combined with jshell's double-quote mark.

$1 ==> ""̮a""

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-05-11 19:00;adev;Linux.png;https://bugs.openjdk.org/secure/attachment/98911/Linux.png","2022-05-10 12:57;mtrudeau;Screen Shot 2022-05-10 at 12.55.00 PM.png;https://bugs.openjdk.org/secure/attachment/98892/Screen+Shot+2022-05-10+at+12.55.00+PM.png","2022-05-11 18:55;adev;Windows.png;https://bugs.openjdk.org/secure/attachment/98910/Windows.png",,,,,,,,,,,,generic,,,,,,,,,windows_10,,,,,"0|i2w5xn:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-02-27 20:37;adev;I am getting following while combining diacritical marks in jshell
jshell>  ""\u032Ea""
$1 ==> ""?a""

 jshell should visually separate the double-quotation mark from the string's actual contents 

;;;","2022-05-10 12:58;mtrudeau;What platform is this bug on?   On a macOS using JDK 18, I get this -> https://bugs.openjdk.java.net/secure/attachment/98892/Screen%20Shot%202022-05-10%20at%2012.55.00%20PM.png    

See attached image.
;;;","2022-05-11 19:00;adev;Please see the attached image on Windows. We may have issue on Windows but not on Mac or Linux.;;;","2022-07-18 07:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9540
Date: 2022-07-18 14:34:57 +0000;;;","2022-09-06 01:46;dukebot;Changeset: 49558352
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-09-06 08:42:45 +0000
URL:       https://git.openjdk.org/jdk/commit/495583524976fb63575b9a45f329e535e490dc80
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JTable.print() failed with UnsupportedCharsetException on AIX ko_KR locale,JDK-8282422,5069348,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,itakiguchi,itakiguchi,itakiguchi,2022-02-26 08:04,2022-07-16 11:45,2023-10-01 09:56,2022-03-22 18:41,11,17,18,19,,,,,,19,client-libs,,0,8-na,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,"On AIX ko_KR locale, I could see following exception after JTable.print() was called

==========
java.nio.charset.UnsupportedCharsetException: sun.font.X11KSC5601
        at java.base/java.nio.charset.Charset.forName(Charset.java:527)
        at java.desktop/sun.awt.FontConfiguration.getFontCharsetEncoder(FontConfiguration.java:964)
        at java.desktop/sun.awt.FontConfiguration.buildFontDescriptors(FontConfiguration.java:921)
        at java.desktop/sun.awt.FontConfiguration.getFontDescriptors(FontConfiguration.java:884)
        at java.desktop/sun.awt.FontConfiguration.getFontDescriptors(FontConfiguration.java:876)
        at java.desktop/sun.awt.PlatformFont.<init>(PlatformFont.java:74)
        at java.desktop/sun.awt.X11.XFontPeer.<init>(XFontPeer.java:33)
        at java.desktop/sun.awt.X11.XToolkit.getFontPeer(XToolkit.java:952)
        at java.desktop/java.awt.Font.getFontPeer(Font.java:488)
        at java.desktop/java.awt.Font$FontAccessImpl.getFontPeer(Font.java:282)
        at java.desktop/sun.print.PSPrinterJob.platformFontCount(PSPrinterJob.java:1247)
        at java.desktop/sun.print.PSPathGraphics.platformFontCount(PSPathGraphics.java:150)
        at java.desktop/sun.print.PathGraphics.printedSimpleGlyphVector(PathGraphics.java:851)
        at java.desktop/sun.print.PathGraphics.drawGlyphVector(PathGraphics.java:649)
        at java.desktop/sun.font.ExtendedTextSourceLabel.handleDraw(ExtendedTextSourceLabel.java:193)
        at java.desktop/sun.font.Decoration.drawTextAndDecorations(Decoration.java:123)
        at java.desktop/sun.font.ExtendedTextSourceLabel.draw(ExtendedTextSourceLabel.java:197)
        at java.desktop/java.awt.font.TextLine.draw(TextLine.java:776)
        at java.desktop/java.awt.font.TextLayout.draw(TextLayout.java:2609)
        at java.desktop/sun.swing.SwingUtilities2.drawString(SwingUtilities2.java:541)
        at java.desktop/sun.swing.SwingUtilities2.drawStringUnderlineCharAt(SwingUtilities2.java:652)
        at java.desktop/sun.swing.SwingUtilities2.drawStringUnderlineCharAt(SwingUtilities2.java:631)
        at java.desktop/javax.swing.plaf.basic.BasicLabelUI.paintEnabledText(BasicLabelUI.java:138)
        at java.desktop/javax.swing.plaf.basic.BasicLabelUI.paint(BasicLabelUI.java:203)
        at java.desktop/javax.swing.plaf.ComponentUI.update(ComponentUI.java:161)
        at java.desktop/javax.swing.JComponent.paintComponent(JComponent.java:852)
        at java.desktop/sun.swing.table.DefaultTableCellHeaderRenderer.paintComponent(DefaultTableCellHeaderRenderer.java:159)
        at java.desktop/javax.swing.JComponent.printComponent(JComponent.java:1292)
        at java.desktop/javax.swing.JComponent.paint(JComponent.java:1132)
        at java.desktop/javax.swing.CellRendererPane.paintComponent(CellRendererPane.java:170)
        at java.desktop/javax.swing.plaf.basic.BasicTableHeaderUI.paintCell(BasicTableHeaderUI.java:741)
        at java.desktop/javax.swing.plaf.basic.BasicTableHeaderUI.paint(BasicTableHeaderUI.java:683)
        at java.desktop/javax.swing.plaf.ComponentUI.update(ComponentUI.java:161)
        at java.desktop/javax.swing.JComponent.paintComponent(JComponent.java:852)
        at java.desktop/javax.swing.JComponent.printComponent(JComponent.java:1292)
        at java.desktop/javax.swing.JComponent.paint(JComponent.java:1132)
        at java.desktop/javax.swing.JComponent.print(JComponent.java:1274)
        at java.desktop/javax.swing.TablePrintable.print(TablePrintable.java:370)
        at java.desktop/javax.swing.JTable$ThreadSafePrintable$1.run(JTable.java:6630)
        at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:318)
        at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773)
        at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
        at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
        at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
        at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
        at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
        at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
        at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
        at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:117)
        at java.desktop/java.awt.WaitDispatchSupport$2.run(WaitDispatchSupport.java:191)
        at java.desktop/java.awt.WaitDispatchSupport$4.run(WaitDispatchSupport.java:236)
        at java.desktop/java.awt.WaitDispatchSupport$4.run(WaitDispatchSupport.java:234)
        at java.base/java.security.AccessController.doPrivileged(AccessController.java:318)
        at java.desktop/java.awt.WaitDispatchSupport.enter(WaitDispatchSupport.java:234)
        at java.desktop/java.awt.Dialog.show(Dialog.java:1080)
        at java.desktop/java.awt.Component.show(Component.java:1728)
        at java.desktop/java.awt.Component.setVisible(Component.java:1675)
        at java.desktop/java.awt.Window.setVisible(Window.java:1036)
        at java.desktop/java.awt.Dialog.setVisible(Dialog.java:1016)
        at java.desktop/sun.swing.PrintingStatus.showModalOnEDT(PrintingStatus.java:204)
        at java.desktop/sun.swing.PrintingStatus.showModal(PrintingStatus.java:172)
        at java.desktop/javax.swing.JTable.print(JTable.java:6439)
        at java.desktop/javax.swing.JTable.print(JTable.java:6246)
        at java.desktop/javax.swing.JTable.print(JTable.java:6201)
        at java.desktop/javax.swing.JTable.print(JTable.java:6166)
        at java.desktop/javax.swing.JTable.print(JTable.java:6140)
        at WeekdayList$1.actionPerformed(WeekdayList.java:28)
        at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1972)
        at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2313)
        at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
        at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
        at java.desktop/javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:279)
        at java.desktop/java.awt.Component.processMouseEvent(Component.java:6620)
        at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3398)
        at java.desktop/java.awt.Component.processEvent(Component.java:6385)
        at java.desktop/java.awt.Container.processEvent(Container.java:2266)
        at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4995)
        at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2324)
        at java.desktop/java.awt.Component.dispatchEvent(Component.java:4827)
        at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4948)
        at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4575)
        at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4516)
        at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2310)
        at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2780)
        at java.desktop/java.awt.Component.dispatchEvent(Component.java:4827)
        at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:775)
        at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
        at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
        at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
        at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
        at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:97)
        at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:747)
        at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
        at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
        at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
        at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:744)
        at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
        at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
        at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
        at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
        at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
        at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
==========

Test instructions are as follows:
(Note: GUI environment, Korean locale and printer setting are required on AIX system)

1. Compile WeekdayList.java and execute it on ko_KR locale with -Dfile.encoding=COMPAT option on GUI environment
    $ env LANG=ko_KR java -Dfile.encoding=COMPAT WeekdayList
2. Press Print button
3. On print dialog, select ""Print To File"" checkbox, press Print button
4. On file dialog, set ""File Name"", press Save button
   (If file name is there, confirmation dialog is displayed, press ""Yes"" if the file can be overwritten)
5. Then see above exception

According to my investigation, sun.font.X11KSC5601 came from:
  src/java.desktop//unix/classes/sun/font/MFontConfiguration.java:
    encodingMap.put(""ksc5601.1987-0"", ""sun.font.X11KSC5601"");

This issue was happned on following code.
        if (!charsetName.startsWith(""sun.awt."") && !charsetName.equals(""default"")) {
            fc = Charset.forName(charsetName);
        } else {

On JDK8, X11KSC5601 class file is in sun.awt.motif package.

But it seems it was moved to sun.font package by:
    JDK-8035302 Eliminate dependency on jdk.charsets from 2D font code.
I think !charsetName.startsWith(""sun.font."") should be added",,,,,,,,,,,JDK-8287499,JDK-8287501,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8035302,,,,,,"2022-02-26 08:05;itakiguchi;WeekdayList.java;https://bugs.openjdk.org/secure/attachment/98108/WeekdayList.java",,,,,,,,,,,,,,ppc,,,,,,,,,aix,,,,,"0|i2w6gj:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@54799779,,,,,,,,,"2022-02-26 08:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7630
Date: 2022-02-26 16:24:07 +0000;;;","2022-03-04 12:39;prr;""But it seems it was moved to sun.font package by JDK10 (JDK-8187443) ""

I have no idea why you think that. It was moved by https://bugs.openjdk.java.net/browse/JDK-8035302

Also if you are needing these charsets it suggests AIS is still using custom fontconfig.properties files -  
and perhaps needing X11 to rasterise ? ;;;","2022-03-05 21:47;itakiguchi;Phill, thank you for your correction.
Yes, should be JDK-8035302

I'm very sorry, it seemed I just checked by following command.
======
$ git log --oneline src/java.desktop//unix/classes/sun/font/X11KSC5601.java | tail
0a65e8b282f 8276794: Change nested classes in java.desktop to static nested classes
3789983e89c 8187443: Forest Consolidation: Move files to unified layout
======

> Also if you are needing these charsets it suggests AIS is still using custom fontconfig.properties files -
> and perhaps needing X11 to rasterise ? 
AIX 7.* does not have fontconfig and related libs by default.
For UTF-8 locales, I checked X11 rasterizer any more.
 https://bugs.openjdk.java.net/browse/JDK-8230873
But I did not check PostScript file creation.;;;","2022-03-22 18:41;dukebot;Changeset: 6ea996c2
Author:    Ichiroh Takiguchi <itakiguchi@openjdk.org>
Date:      2022-03-23 01:39:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6ea996c20591cafa9673d9c697437ce2c48e4616
;;;","2022-05-29 06:10;itakiguchi;Fix request [17u]

Still I could recreate this issue on jdk-17.0.3+7.
openjdk version ""17.0.3"" 2022-04-19
OpenJDK Runtime Environment Temurin-17.0.3+7 (build 17.0.3+7)
OpenJDK 64-Bit Server VM Temurin-17.0.3+7 (build 17.0.3+7, mixed mode, sharing)

Clean backport.;;;","2022-05-29 06:16;itakiguchi;Fix request [11u]

Still I could recreate this issue on jdk-11.0.15+10.
openjdk version ""11.0.15"" 2022-04-19
OpenJDK Runtime Environment Temurin-11.0.15+10 (build 11.0.15+10)
OpenJDK 64-Bit Server VM Temurin-11.0.15+10 (build 11.0.15+10, mixed mode)

Clean backport except Copyright year.;;;","2022-05-29 06:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1113
Date: 2022-05-29 13:12:15 +0000;;;","2022-05-29 06:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/421
Date: 2022-05-29 13:15:14 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Missing ')' in MacResources.properties,JDK-8282407,5069323,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,almatvee,naoto,naoto,2022-02-25 09:39,2022-07-18 02:47,2023-10-01 09:56,2022-03-17 20:16,19,,,,,,,,,19,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,macos,sn_114,,,,,,,,,,,,,,,"Line 83 of the file `src/jdk.jpackage/macosx/classes/jdk/jpackage/internal/resources/MacResources.properties` contains:
```
message.dmg-cannot-be-overwritten=Dmg file exists ({0} and can not be removed.
```
The right parenthesis is missing in the value.",,,,,,,,,,,JDK-8290439,JDK-8289960,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i2w6az:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-03-11 19:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7797
Date: 2022-03-12 03:12:30 +0000;;;","2022-03-17 20:16;dukebot;Changeset: d83cee98
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-03-18 03:14:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d83cee98b5e6628f19f1b5dea11038079dd0c758
;;;","2022-07-14 08:42;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, fix of translation files.
Clean backport.
SAP nightly testing passed.;;;","2022-07-14 08:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/552
Date: 2022-07-14 15:41:13 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"DrawStringWithInfiniteXform.java failed with ""RuntimeException: drawString with InfiniteXform transform takes long time""",JDK-8282404,5069320,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,dcubed,dcubed,2022-02-25 08:43,2023-07-10 01:07,2023-10-01 09:56,2022-11-17 12:35,19,,,,,,,,,20,client-libs,,0,intermittent,jdk11u-sap-interest,jdk17u-fix-request,jdk17u-fix-yes,macos,noreg-self,sn_113,sn_131,test_sprint_nov_2022,testbug,tier3,,,,,,,,"The following test failed in the JDK19 CI:

java/awt/FontClass/DrawStringWithInfiniteXform.java

Here's a snippet from the log file:

#section:main
----------messages:(5/217)----------
command: main DrawStringWithInfiniteXform
reason: User specified action: run main DrawStringWithInfiniteXform 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 20.774
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(5/409)----------
java.lang.RuntimeException: drawString with InfiniteXform transform takes long time
	at DrawStringWithInfiniteXform$ScheduleTask.run(DrawStringWithInfiniteXform.java:45)
	at java.base/java.util.TimerThread.mainLoop(Timer.java:566)
	at java.base/java.util.TimerThread.run(Timer.java:516)
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: drawString with InfiniteXform transform takes long time
----------rerun:(36/5533)*----------


This failure mode was previously fixed with:

JDK-8273704 DrawStringWithInfiniteXform.java failed : drawString with InfiniteXform transform takes long time",,,,,,,,,,,JDK-8308822,JDK-8308821,JDK-8311275,JDK-8309008,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273704,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x_10.15,,,,,"0|i2w6ab:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-05-19 12:14;vdyakov;is it introduced in 19?;;;","2022-05-19 14:40;prr;No evidence for that. It  has been seen just once. Intermittent test issue
;;;","2022-11-15 19:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11179
Date: 2022-11-16 03:44:24 +0000;;;","2022-11-17 12:35;dukebot;Changeset: a53be204
Author:    Phil Race <prr@openjdk.org>
Date:      2022-11-17 20:33:48 +0000
URL:       https://git.openjdk.org/jdk/commit/a53be204cbc8671ab998e1165f983af3a50e4ae2
;;;","2023-06-30 04:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1523
Date: 2023-06-30 10:58:25 +0000;;;","2023-07-02 09:33;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.9-oracle. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,
EndingDotHostname.java test fails because SSL cert expired,JDK-8282398,5069310,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rhalade,msheppar,msheppar,2022-02-25 04:41,2023-07-24 22:09,2023-10-01 09:56,2022-02-26 09:11,19,,,,,,,,,19,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,testbug,tier2,ursqe-triaged,,,,,,,,,"extract from failure log

Caused by: java.security.cert.CertPathValidatorException: validity check failed
	at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:135)
	at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:224)
	at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:144)
	at java.base/sun.security.provider.certpath.PKIXCertPathValidator.engineValidate(PKIXCertPathValidator.java:83)
	at java.base/java.security.cert.CertPathValidator.validate(CertPathValidator.java:309)
	at java.base/sun.security.validator.PKIXValidator.doValidate(PKIXValidator.java:313)
	... 28 more
Caused by: java.security.cert.CertificateExpiredException: NotAfter: Fri Feb 25 04:50:29 GMT 2022
	at java.base/sun.security.x509.CertificateValidity.valid(CertificateValidity.java:277)
	at java.base/sun.security.x509.X509CertImpl.checkValidity(X509CertImpl.java:619)
	at java.base/sun.security.provider.certpath.BasicChecker.verifyValidity(BasicChecker.java:190)
	at java.base/sun.security.provider.certpath.BasicChecker.check(BasicChecker.java:144)
	at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:125)
	... 33 more",,,,,,,,,,,JDK-8312142,JDK-8312705,JDK-8312146,JDK-8297553,JDK-8300667,JDK-8299197,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8065422,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w683:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-02-25 11:28;rhalade;Test was introduced as part of the fix for JDK-8065422. It uses SSLExampleCert.java for certificates which has just a month of validity.;;;","2022-02-25 11:30;rhalade;Test is also using wrong bug id 8806542, should be 8065422.;;;","2022-02-25 12:02;dcubed;[~rhalade] - Will you have a fix for this bug today? Or should I ProblemList it
to give you time to get a fix in next week? I'd rather not go into the weekend
with 6 failures per Tier2...;;;","2022-02-25 13:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7626
Date: 2022-02-25 21:41:52 +0000;;;","2022-02-26 09:11;dukebot;Changeset: afd4bcbc
Author:    Rajan Halade <rhalade@openjdk.org>
Date:      2022-02-26 17:10:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/afd4bcbc1d1b2a8a1c29005878c8e06c662a1f6e
;;;","2022-11-14 01:59;rmarchenko;I'd like to backport this to [17u, 11u, 8u];;;","2022-11-14 07:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/881
Date: 2022-11-14 15:00:18 +0000;;;","2022-11-14 07:47;rmarchenko;Fix request (17u, 11u, 8u)

Clean backport.
The test changed only.

For 8u the test files paths were changed.

Please note that new test added by the change may fail because there are additional changes in the dependant PR (see PR comment for details)
;;;","2022-12-09 01:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/206
Date: 2022-12-09 09:48:57 +0000;;;","2022-12-09 01:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1575
Date: 2022-12-09 09:47:21 +0000;;;",,,,,,,,,,,,,,,,,,,,
URL.openConnection can throw IOOBE,JDK-8282395,5069307,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,mschoene,mschoene,2022-02-25 04:27,2022-10-17 13:54,2023-10-01 09:56,2022-10-11 02:26,18,,,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,"An incomplete input validation in the URL class can cause an IOOBE to be 
thrown from the openConnection method, where according to the API
documentation no exception is expected to be thrown.

A jshell PoC: 

jshell> new URL(""ftp://.:%@"")
$1 ==> ftp://.:%@

jshell> $1.openConnection()
|  Exception java.lang.IndexOutOfBoundsException
|        at Integer.parseInt (Integer.java:706)
|        at ParseUtil.unescape (ParseUtil.java:163)
|        at ParseUtil.decode (ParseUtil.java:199)
|        at FtpURLConnection.<init> (FtpURLConnection.java:204)
|        at Handler.openConnection (Handler.java:61)
|        at Handler.openConnection (Handler.java:56)
|        at URL.openConnection (URL.java:1126)
|        at (#2:1)
  ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w67f:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-02-25 04:29;mschoene;A resilient application which implements exception handling according to 
Guideline 1-4 of the SCG ""Implement Robust Error/Exceptions handling for 
services"" would not be affected by this issue. ;;;","2022-02-25 05:15;aefimov;Reproducible with 18-ea build:
new URL(""ftp://.:%@"")
$3 ==> ftp://.:%@

jshell> $3.openConnection()
|  Exception java.lang.IndexOutOfBoundsException: Range [1, 3) out of bounds for length 1
|        at Preconditions.outOfBounds (Preconditions.java:100)
|        at Preconditions.outOfBoundsCheckFromToIndex (Preconditions.java:112)
|        at Preconditions.checkFromToIndex (Preconditions.java:349)
|        at Objects.checkFromToIndex (Objects.java:385)
|        at Integer.parseInt (Integer.java:712)
|        at ParseUtil.unescape (ParseUtil.java:166)
|        at ParseUtil.decode (ParseUtil.java:202)
|        at FtpURLConnection.<init> (FtpURLConnection.java:203)
|        at Handler.openConnection (Handler.java:61)
|        at Handler.openConnection (Handler.java:56)
|        at URL.openConnection (URL.java:1094)
|        at (#4:1)

$ java -version
java version ""18-ea"" 2022-03-22
Java(TM) SE Runtime Environment (build 18-ea+34-2083)
Java HotSpot(TM) 64-Bit Server VM (build 18-ea+34-2083, mixed mode, sharing) ;;;","2022-04-08 00:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8155
Date: 2022-04-08 07:52:55 +0000;;;","2022-10-11 02:26;dukebot;Changeset: 4435d56d
Author:    KIRIYAMA Takuya <kiriyama.takuya@fujitsu.com>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-10-11 09:22:33 +0000
URL:       https://git.openjdk.org/jdk/commit/4435d56d3fa232748b22eeb6f2894cc8dc937ccf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[zero] Build broken on AArch64,JDK-8282392,5069304,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ahayward,ahayward,ahayward,2022-02-25 03:40,2022-03-07 14:54,2023-10-01 09:56,2022-02-28 18:26,19,,,,,,,,,19,hotspot,,0,oraclejdk-na,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,"When building for Zero on AArch64, it fails with:

/home/alahay01/java/gerrit_jdk/src/hotspot/share/gc/shared/barrierSetNMethod.cpp: In static member function 'static int BarrierSetNMethod::nmethod_stub_entry_barrier(u_char**)':
/home/alahay01/java/gerrit_jdk/src/hotspot/share/gc/shared/barrierSetNMethod.cpp:58:33: error: 'pauth_strip_pointer' was not declared in this scope
   AARCH64_ONLY(return_address = pauth_strip_pointer(return_address));


This is due to following commit:
6fab8a2d6a9 2022-02-24.. Alan Hayward    8277204: Implement PAC-RET branch protection on Linux/AArch64",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282401,,,,,,,,JDK-8277204,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2w66r:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-25 15:21;dlong;ILW = broken aarch64 zero build = MMH = P3;;;","2022-02-28 04:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7633
Date: 2022-02-28 12:28:39 +0000;;;","2022-02-28 18:26;dukebot;Changeset: c1a28aa0
Author:    Alan Hayward <alan.hayward@arm.com>
Committer: Ningsheng Jian <njian@openjdk.org>
Date:      2022-03-01 02:23:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c1a28aa04ada6c13031eaa85746e6b1d5945d10d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaFX media stubs rely on libav.org,JDK-8282386,5069264,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvos,jvos,jvos,2022-02-25 00:11,2023-03-10 15:29,2023-10-01 09:56,2023-01-10 04:48,jfx18,,,,,,,,,jfx20,javafx,,0,noreg-build,,,,,,,,,,,,,,,,,,"When building the media stubs, we currently download the sources for e.g. libav.tar.gz from libav.org.
The project is discontinued and the sources are not available for download anymore. This is breaking the OpenJFX build unless the sources are already cached (by gradle)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w657:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2023-01-05 06:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/989
Date: 2023-01-05 14:11:10 +0000;;;","2023-01-10 04:48;dukebot;Changeset: 357cd856
Author:    Johan Vos <jvos@openjdk.org>
Date:      2023-01-10 09:41:32 +0000
URL:       https://git.openjdk.org/jfx/commit/357cd8563bd6ca47afd28dd1481afbe2d2458827
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[LOOM] 6 nsk JDI and JDB tests sometimes failing with vthread wrapper due to running out of carrier threads,JDK-8282383,5069261,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2022-02-24 23:30,2023-02-10 06:50,2023-10-01 09:56,2023-01-06 10:56,19,20,repo-loom,,,,,,,21,core-svc,,0,loom,noreg-self,problemlist,tier5,wrapper,,,,,,,,,,,,,,"vmTestbase/nsk/jdi/EventRequestManager/stepRequests/stepreq001/TestDescription.java is sometimes failing with the vthread wrapper. This only seems to happen on macOS. The failures date back to 2021-12-02. There have been about 40 so far. The failure is:

binder> Launching debugee
binder> Waiting for VM initialized
Initial VMStartEvent received: VMStartEvent in thread main
debugee.stdout> Debuggee: starting thread #1 ""thr1""
debugee.stdout> Debuggee: the thread #1 ""thr1"" started
debugee.stdout> Debuggee: starting thread #2 ""thr2""
debugee.stdout> Debuggee: the thread #2 ""thr2"" started
debugee.stdout> Debuggee: starting thread #3 ""thr3""
debugee.stdout> Debuggee: the thread #3 ""thr3"" started
debugee.stdout> Debuggee: starting thread #4 ""thr4""
debugee.stdout> Debuggee: the thread #4 ""thr4"" started
debugee.stdout> Debuggee: starting thread #5 ""thr5""
debugee.stdout> Debuggee: the thread #5 ""thr5"" started
debugee.stdout> Debuggee: starting thread #6 ""thr6""
debugee.stdout> Debuggee: the thread #6 ""thr6"" started
debugee.stdout> Debuggee's thread ""thr1"": going to be blocked
debugee.stdout> Debuggee's thread ""thr5"": going to be blocked
debugee.stdout> Debuggee: starting thread #7 ""thr7""
debugee.stdout> Debuggee's thread ""thr7"": going to be blocked
debugee.stdout> Debuggee's thread ""thr2"": going to be blocked
debugee.stdout> Debuggee's thread ""thr3"": going to be blocked
debugee.stdout> Debuggee's thread ""thr4"": going to be blocked
IOPipe> Caught InterruptedIOException. Wait start time: 1645771754258, exception was thrown at: 1645772054387, wait time: 300129, actual timeout: 300000
# ERROR: IOPipe> Caught InterruptedIOException while listening for PipeIO Listener Thread connection at port 64281:
# ERROR: 	java.net.SocketTimeoutException: Accept timed out
The following stacktrace is for failure analysis.
nsk.share.TestFailure: IOPipe> Caught InterruptedIOException while listening for PipeIO Listener Thread connection at port 64281:  java.net.SocketTimeoutException: Accept timed out
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.Log$Logger.complain(Log.java:736)
	at nsk.share.jpda.BasicSocketConnection.accept(SocketConnection.java:173)
	at nsk.share.jpda.SocketConnection.accept(SocketConnection.java:453)
	at nsk.share.jpda.SocketIOPipe$ListenerThread.run(SocketIOPipe.java:225)

Current list of tests covered by this CR:

vmTestbase/nsk/jdb/kill/kill001/kill001.java 
vmTestbase/nsk/jdi/LocatableEvent/thread/thread001/TestDescription.java
vmTestbase/nsk/jdi/EventRequestManager/stepRequests/stepreq001/TestDescription.java
vmTestbase/nsk/jdi/EventIterator/nextEvent/nextevent001/TestDescription.java
vmTestbase/nsk/jdi/Event/request/request001/TestDescription.java
vmTestbase/nsk/jdi/ObjectReference/waitingThreads/waitingthreads002/TestDescription.java ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285416,JDK-8291429,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,os_x,,,,,"0|i2w64j:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-02-24 23:37;cjplummer;It seems that in almost all cases, the following 4 tests fail together with some sort of socket related timeout:

vmTestbase/nsk/jdi/LocatableEvent/thread/thread001/TestDescription.java
vmTestbase/nsk/jdi/EventRequestManager/stepRequests/stepreq001/TestDescription.java
vmTestbase/nsk/jdi/EventIterator/nextEvent/nextevent001/TestDescription.java
vmTestbase/nsk/jdi/Event/request/request001/TestDescription.java

These failures are a little different than the stepreq001. They timeout waiting for an event:

# ERROR: ##> debugger: ERROR: Exception : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** EXCEPTION while waiting for event ** : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** TIMEOUT while waiting for event **

However, I have to believe all 4 are related since they normally all occur together and all involve I/O timeouts.

Also, I'm only seeing this on macOS 10.15.7.;;;","2022-02-25 13:52;sspitsyn;Do we get this kind of error any time when there is no reply from the debugee?;;;","2022-02-25 14:08;cjplummer;I would assume so as long as the debuggee has not disconnected. For example, I would think a crash would generate VMDisconnectedException.

The stepreq001 is different in that the Listener Thread ""accept"" timed out whereas for the other 3 the failure is due to not receiving an event. However, since these 4 always almost always happen together, I have to assume they are related.;;;","2022-03-14 01:32;cjplummer;The following test was newly converted to use vthreads, and is now failing with a timeout whenever the 4 tests mentioned above fail. Still only seeing on macOS

vmTestbase/nsk/jdi/ObjectReference/waitingThreads/waitingthreads002/TestDescription.java;;;","2022-03-23 13:01;cjplummer;vmTestbase/nsk/jdb/kill/kill001/kill001.java

This test seems to be failing for similar reasons. It doesn't fail in the same test task as the others because it is run in a different test task. However, it also times and and also only does so on macosx-x64.

Starting debuggee class
Sending command: run 
reply[0]: run nsk.share.MainWrapper Virtual nsk.jdb.kill.kill001.kill001a
reply[1]: Set uncaught java.lang.Throwable
reply[2]: Set deferred uncaught java.lang.Throwable
reply[3]: > 
reply[4]: VM Started: Set deferred breakpoint nsk.jdb.kill.kill001.kill001a.main
reply[5]: 
reply[6]: Breakpoint hit: ""thread=main"", nsk.jdb.kill.kill001.kill001a.main(), line=37 bci=0
reply[7]: 37           kill001a _kill001a = new kill001a();
reply[8]: 
reply[9]: main[1] 
Test cases starts.
Sending command: stop in nsk.jdb.kill.kill001.kill001a.breakHere
reply[0]: Set breakpoint nsk.jdb.kill.kill001.kill001a.breakHere
reply[1]: main[1] 
Sending command: cont
receiveReply FAILED due to ""nsk.share.Failure: Prompt is not received during 300200 milliseconds."".
Pending reply output follows:
reply[0]: > 
# ERROR: Caught unexpected exception while executing the test: nsk.share.Failure: Prompt is not received during 300200 milliseconds.

I looked at jstack output for the debuggee. The MainWrapper is blocked waiting for the vthread wrapper to complete, but there is no sign that the vthread wrapper or any other vthread is running. All the CarrierThreads are idle:

        t.setName(""main"");
        Thread.currentThread().setName(""old-m-a-i-n"");
        t.start();
        t.join();  <-- blocked here

""old-m-a-i-n"" #1 [5635] prio=5 os_prio=31 cpu=312.78ms elapsed=493.71s allocated=484K defined_classes=62 tid=0x00007f9b8a80ac10 nid=5635 waiting on condition  [0x0000700009d13000]
   java.lang.Thread.State: WAITING (parking)
Thread: 0x00007f9b8a80ac10  [0x1603] State: _at_safepoint _at_poll_safepoint 0
   JavaThread state: _thread_blocked
	at jdk.internal.misc.Unsafe.park(java.base@19-loom/Native Method)
	- parking to wait for  <0x000000078020c5b0> (a java.util.concurrent.CountDownLatch$Sync)
	at java.util.concurrent.locks.LockSupport.park(java.base@19-loom/LockSupport.java:221)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(java.base@19-loom/AbstractQueuedSynchronizer.java:715)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(java.base@19-loom/AbstractQueuedSynchronizer.java:1047)
	at java.util.concurrent.CountDownLatch.await(java.base@19-loom/CountDownLatch.java:230)
	at java.lang.VirtualThread.joinNanos(java.base@19-loom/VirtualThread.java:714)
	at java.lang.Thread.join(java.base@19-loom/Thread.java:2070)
	at java.lang.Thread.join(java.base@19-loom/Thread.java:2163)
	at nsk.share.MainWrapper.main(MainWrapper.java:73)

However, we must have at some point entered the wrapper vthread and started the debuggee side of the test, because you can see from the log output above that the first breakpoint in the test was hit.;;;","2022-03-24 21:54;cjplummer;These failures are happening on host with just 4 cores, which limits the default number of carrier threads to 4. The tests need at least 6 carrier threads, because they each create 6 virtual threads, all of which will block on a synchronized block, requiring pinning of the carrier thread.;;;","2022-05-03 07:27;dcubed;Here's a log file snippet for he jdk-19-loomvt+1-50-tier5 sighting: 

vmTestbase/nsk/jdi/LocatableEvent/thread/thread001/TestDescription.java 


=> nsk/jdi/LocatableEvent/thread/thread001      TESTING BEGINS
--> debugger: breakpointForCommunication
debugee.stderr> **> debuggee: debuggee started!
debugee.stderr> **> debuggee:        threads has been created
debugee.stderr> **> debuggee:       loop: threadStart(threads[n2])
debugee.stderr> **> debuggee: awThread :   'run': enter  :: threadIndex == 0
debugee.stderr> **> debuggee: awThread : enter synchronized (locks[threadIndex]) ::  threadIndex == 0
debugee.stderr> **> debuggee: awThread :   'run': exit  synchronized (waitnotifyObj)
debugee.stderr> **> debuggee: mwThread :   'run': enter  :: threadIndex == 1
debugee.stderr> **> debuggee: mwThread : enter synchronized (locks[threadIndex]) ::  threadIndex == 1
debugee.stderr> **> debuggee: mwThread :   'run': exit  synchronized (waitnotifyObj)
debugee.stderr> **> debuggee: bpThread :   'run': enter  :: threadIndex == 2
debugee.stderr> **> debuggee: bpThread : enter synchronized (locks[threadIndex]) ::  threadIndex == 2
debugee.stderr> **> debuggee: bpThread :   'run': exit  synchronized (waitnotifyObj)
debugee.stderr> **> debuggee: excThread :   'run': enter  :: threadIndex == 3
debugee.stderr> **> debuggee: excThread : enter synchronized (locks[threadIndex]) ::  threadIndex == 3
debugee.stderr> **> debuggee: excThread :   'run': exit  synchronized (waitnotifyObj)
debugee.stderr> **> debuggee: menThread :   'run': enter  :: threadIndex == 4
debugee.stderr> **> debuggee: menThread : enter synchronized (locks[threadIndex]) ::  threadIndex == 4
debugee.stderr> **> debuggee: menThread :   'run': exit  synchronized (waitnotifyObj)
debugee.stderr> **> debuggee: mexThread :   'run': enter  :: threadIndex == 5
debugee.stderr> **> debuggee: mexThread : enter synchronized (locks[threadIndex]) ::  threadIndex == 5
debugee.stderr> **> debuggee: mexThread :   'run': exit  synchronized (waitnotifyObj)
# ERROR: ##> debugger: ERROR: Exception : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** EXCEPTION while waiting for event ** : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** TIMEOUT while waiting for event **
The following stacktrace is for failure analysis.
nsk.share.TestFailure: ##> debugger: ERROR: Exception : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** EXCEPTION while waiting for event ** : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** TIMEOUT while waiting for event **
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.JDIBase.log3(JDIBase.java:69)
	at nsk.jdi.LocatableEvent.thread.thread001.runTest(thread001.java:226)
	at nsk.jdi.LocatableEvent.thread.thread001.runThis(thread001.java:156)
	at nsk.jdi.LocatableEvent.thread.thread001.run(thread001.java:99)
	at nsk.jdi.LocatableEvent.thread.thread001.main(thread001.java:92)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1585)
# ERROR: ##> debugger: test phase has not finished normally: debuggee is still alive
--> debugger: ......forcing: vm.exit();
TEST FAILED
# ERROR: binder> Debugee VM has not exited correctly: trying to kill it
The following stacktrace is for failure analysis.
nsk.share.TestFailure: binder> Debugee VM has not exited correctly: trying to kill it
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jpda.DebugeeProcess.complain(DebugeeProcess.java:455)
	at nsk.share.jpda.DebugeeProcess.close(DebugeeProcess.java:435)
	at nsk.share.jpda.DebugeeProcess.finalize(DebugeeProcess.java:464)
	at nsk.share.FinalizableObject.finalizeAtExit(FinalizableObject.java:48)
	at nsk.share.Finalizer$FinalizerThread.run(Finalizer.java:122)
------------ Try to print debuggee threads before killing process ------------
The following stacktrace is for failure analysis.
nsk.share.TestFailure: 
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.Debugee.printThreadsInfo(Debugee.java:629)
	at nsk.share.jdi.Debugee.killDebugee(Debugee.java:640)
	at nsk.share.jdi.LocalLaunchedDebugee.killDebugee(Binder.java:1052)
	at nsk.share.jpda.DebugeeProcess.close(DebugeeProcess.java:436)
	at nsk.share.jpda.DebugeeProcess.finalize(DebugeeProcess.java:464)
	at nsk.share.FinalizableObject.finalizeAtExit(FinalizableObject.java:48)
	at nsk.share.Finalizer$FinalizerThread.run(Finalizer.java:122)
com.sun.jdi.VMDisconnectedException: connection is closed
	at jdk.jdi/com.sun.tools.jdi.TargetVM.send(TargetVM.java:293)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.sendToTarget(VirtualMachineImpl.java:1172)
	at jdk.jdi/com.sun.tools.jdi.PacketStream.send(PacketStream.java:79)
	at jdk.jdi/com.sun.tools.jdi.JDWP$VirtualMachine$AllThreads.enqueueCommand(JDWP.java:319)
	at jdk.jdi/com.sun.tools.jdi.JDWP$VirtualMachine$AllThreads.process(JDWP.java:310)
	at jdk.jdi/com.sun.tools.jdi.VMState.allThreads(VMState.java:207)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.allThreads(VirtualMachineImpl.java:458)
	at nsk.share.jdi.Debugee.printThreadsInfo(Debugee.java:598)
	at nsk.share.jdi.Debugee.killDebugee(Debugee.java:640)
	at nsk.share.jdi.LocalLaunchedDebugee.killDebugee(Binder.java:1052)
	at nsk.share.jpda.DebugeeProcess.close(DebugeeProcess.java:436)
	at nsk.share.jpda.DebugeeProcess.finalize(DebugeeProcess.java:464)
	at nsk.share.FinalizableObject.finalizeAtExit(FinalizableObject.java:48)
	at nsk.share.Finalizer$FinalizerThread.run(Finalizer.java:122)
binder> Killing debuggee by forcing target VM to exit
binder> Ignore VMDisconnectedException while forcing debuggee VM to exit:
	com.sun.jdi.VMDisconnectedException: connection is closed


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: ##> debugger: ERROR: Exception : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** EXCEPTION while waiting for event ** : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** TIMEOUT while waiting for event **
# ERROR: ##> debugger: test phase has not finished normally: debuggee is still alive
# ERROR: binder> Debugee VM has not exited correctly: trying to kill it
----------System.err:(0/0)----------;;;","2022-05-03 10:27;cjplummer;This happened on linux-aarch64 but the tests are only problem listed on macosx-x64. It's an 8 core host, which should be enough. Previously only 4 core hosts were an issue.

I've rerun the same test 10 times now on the same host with no issue. I see that it goes up to ""threadIndex == 6"", whereas the above log shows it getting stuck after ""threadIndex == 5"". It needs 7 vthreads (and therefor 7 carrier threads) to get to ""threadIndex == 6"", plus the main debuggee test thread is also a vthread, so that mean a total of 8 vthreads, and that should be ok on an 8 core host, even if they are all synchronizing and pinning the carrier threads. Possibly the test did not get stuck because of a lack of carrier threads, but for some other reason.;;;","2022-07-05 09:41;dcubed;Here's a log file snippet from the  jdk-20+5-200-tier5 sighting: 

vmTestbase/nsk/jdi/LocatableEvent/thread/thread001/TestDescription.java

=> nsk/jdi/LocatableEvent/thread/thread001      TESTING BEGINS
--> debugger: breakpointForCommunication
debugee.stderr> **> debuggee: debuggee started!
debugee.stderr> **> debuggee:        threads has been created
debugee.stderr> **> debuggee:       loop: threadStart(threads[n2])
debugee.stderr> **> debuggee: awThread :   'run': enter  :: threadIndex == 0
debugee.stderr> **> debuggee: awThread : enter synchronized (locks[threadIndex]) ::  threadIndex == 0
debugee.stderr> **> debuggee: awThread :   'run': exit  synchronized (waitnotifyObj)
debugee.stderr> **> debuggee: mwThread :   'run': enter  :: threadIndex == 1
debugee.stderr> **> debuggee: mwThread : enter synchronized (locks[threadIndex]) ::  threadIndex == 1
debugee.stderr> **> debuggee: mwThread :   'run': exit  synchronized (waitnotifyObj)
debugee.stderr> **> debuggee: bpThread :   'run': enter  :: threadIndex == 2
debugee.stderr> **> debuggee: bpThread : enter synchronized (locks[threadIndex]) ::  threadIndex == 2
debugee.stderr> **> debuggee: bpThread :   'run': exit  synchronized (waitnotifyObj)
debugee.stderr> **> debuggee: excThread :   'run': enter  :: threadIndex == 3
debugee.stderr> **> debuggee: excThread : enter synchronized (locks[threadIndex]) ::  threadIndex == 3
debugee.stderr> **> debuggee: excThread :   'run': exit  synchronized (waitnotifyObj)
debugee.stderr> **> debuggee: menThread :   'run': enter  :: threadIndex == 4
debugee.stderr> **> debuggee: menThread : enter synchronized (locks[threadIndex]) ::  threadIndex == 4
debugee.stderr> **> debuggee: menThread :   'run': exit  synchronized (waitnotifyObj)
debugee.stderr> **> debuggee: mexThread :   'run': enter  :: threadIndex == 5
debugee.stderr> **> debuggee: mexThread : enter synchronized (locks[threadIndex]) ::  threadIndex == 5
debugee.stderr> **> debuggee: mexThread :   'run': exit  synchronized (waitnotifyObj)
# ERROR: ##> debugger: ERROR: Exception : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** EXCEPTION while waiting for event ** : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** TIMEOUT while waiting for event **
The following stacktrace is for failure analysis.
nsk.share.TestFailure: ##> debugger: ERROR: Exception : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** EXCEPTION while waiting for event ** : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** TIMEOUT while waiting for event **
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.JDIBase.log3(JDIBase.java:69)
	at nsk.jdi.LocatableEvent.thread.thread001.runTest(thread001.java:226)
	at nsk.jdi.LocatableEvent.thread.thread001.runThis(thread001.java:156)
	at nsk.jdi.LocatableEvent.thread.thread001.run(thread001.java:99)
	at nsk.jdi.LocatableEvent.thread.thread001.main(thread001.java:92)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)
# ERROR: ##> debugger: test phase has not finished normally: debuggee is still alive
--> debugger: ......forcing: vm.exit();
TEST FAILED


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: ##> debugger: ERROR: Exception : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** EXCEPTION while waiting for event ** : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** TIMEOUT while waiting for event **
# ERROR: ##> debugger: test phase has not finished normally: debuggee is still alive
----------System.err:(0/0)----------;;;","2022-10-06 09:45;cjplummer;The fix for JDK-8291429 can be used to fix this issue.;;;","2022-12-05 22:25;cjplummer;I didn't mean to imply that JDK-8291429 fixes this problem for these tests, but only that the fix in JDK-8291429 could also be applied to these tests to fix them. Namely, the use of VThreadRunner.ensureParallelism(<n>) to guarantee that the tests have the needed number of carrier threads.;;;","2022-12-19 18:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11735
Date: 2022-12-20 02:04:01 +0000;;;","2023-01-06 10:56;dukebot;Changeset: d6e9f015
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-01-06 18:49:11 +0000
URL:       https://git.openjdk.org/jdk/commit/d6e9f01584ef84d6390c356fd3b342d9d79899ab
;;;",,,,,,,,,,,,,,,,,
[LOOM] vmTestbase/nsk/jdi/ClassType/invokeMethod/invokemethod011 sometimes fails,JDK-8282379,5069257,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2022-02-24 23:04,2023-05-27 06:37,2023-10-01 09:56,2023-02-09 10:27,19,20,repo-loom,,,,,,,21,core-svc,,0,loom,noreg-self,problemlist,tier5,wrapper,,,,,,,,,,,,,,"On very rare occasion I'm seeing this test fail when using the vthread wrapper. It's popped up a couple of times in my recent runs, but I've been doing a large number runs. I looked in the history and see it also popped up once in CI testing on Jan 27th. The test previously failed a lot for this same reason back in 2021-09-01, but that was back when I was doing a lot of runs while fixing a similar issue.

Similar failures now spotted with the following tests:

vmTestbase/nsk/jdi/ObjectReference/invokeMethod/invokemethod010
vmTestbase/nsk/jdi/ClassType/invokeMethod/invokemethod011
vmTestbase/nsk/jdi/ClassType/invokeMethod/invokemethod013",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286308,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w63n:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-02-24 23:07;cjplummer;Here's some relevant log output. Note that the thread with id=272 is initially running (or ""resumed"" as the output says), and this seems to be expected, but then after the invoke is should be suspended but is not.

Verifying the single threaded invocation (INVOKE_SINGLE_THREADED):
CHECK PASSED: invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tMainThr', id=272)
	is resumed as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr1', id=469)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr2', id=471)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr3', id=475)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr4', id=483)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr5', id=486)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr6', id=876)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr7', id=875)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr8', id=874)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr9', id=873)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr10', id=872)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr11', id=871)
	is suspended as expected
Thread ""InvokingThread"" done


Verifying threads status after method invocation:
# ERROR: TEST FAILED: wrong invocation: 
# ERROR: 	invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tMainThr', id=272)
# ERROR: 	is not suspended again after the invocation
The following stacktrace is for failure analysis.
nsk.share.TestFailure: TEST FAILED: wrong invocation:   invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tMainThr', id=272)
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.jdi.ClassType.invokeMethod.invokemethod011.checkThreads(invokemethod011.java:261)
	at nsk.jdi.ClassType.invokeMethod.invokemethod011.runIt(invokemethod011.java:215)
	at nsk.jdi.ClassType.invokeMethod.invokemethod011.run(invokemethod011.java:103)
	at nsk.jdi.ClassType.invokeMethod.invokemethod011.main(invokemethod011.java:99)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:142)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:270)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:155)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:349)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:342)
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr1', id=469)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr2', id=471)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr3', id=475)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr4', id=483)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr5', id=486)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr6', id=876)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr7', id=875)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr8', id=874)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr9', id=873)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr10', id=872)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr11', id=871)
	is suspended as expected;;;","2022-02-25 13:29;cjplummer;vmTestbase/nsk/jdi/ClassType/invokeMethod/invokemethod013/TestDescription.java also fails (very rarely). The exception is different, but likely also suspend/resume related.

InvokingThread: trying to invoke the method ""dummyMeth (J)J nsk.jdi.ClassType.invokeMethod.invokemethod013t.dummyMeth(long)""
	with the arguments: [9223372036854775807]""
	using the debuggee class ""class nsk.jdi.ClassType.invokeMethod.invokemethod013t (loaded by instance of jdk.internal.loader.ClassLoaders$AppClassLoader(id=889))"" ...
Waiting for debuggee method invocation ...
# ERROR: TEST FAILURE: caught unexpected exception: nsk.share.Failure: unable to continue testing after 10 attempts: debuggee method is not invoked yet
The following stacktrace is for failure analysis.
nsk.share.TestFailure: TEST FAILURE: caught unexpected exception: nsk.share.Failure: unable to continue testing after 10 attempts: debuggee method is not invoked yet
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.jdi.ClassType.invokeMethod.invokemethod013.runIt(invokemethod013.java:221)
	at nsk.jdi.ClassType.invokeMethod.invokemethod013.run(invokemethod013.java:110)
	at nsk.jdi.ClassType.invokeMethod.invokemethod013.main(invokemethod013.java:106)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:142)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:271)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:156)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:355)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:348);;;","2022-05-09 12:27;dcubed;Here's a log file snippet from the jdk-19+22-1528-tier5 sighting:

vmTestbase/nsk/jdi/ClassType/invokeMethod/invokemethod011/TestDescription.java

Verifying the single threaded invocation (INVOKE_SINGLE_THREADED):
CHECK PASSED: invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tMainThr', id=272)
	is resumed as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr1', id=448)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr2', id=452)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr3', id=832)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr4', id=831)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr5', id=830)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr6', id=829)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr7', id=828)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr8', id=827)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr9', id=826)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr10', id=825)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr11', id=824)
	is suspended as expected
Thread ""InvokingThread"" done


Verifying threads status after method invocation:
# ERROR: TEST FAILED: wrong invocation: 
# ERROR: 	invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tMainThr', id=272)
# ERROR: 	is not suspended again after the invocation
The following stacktrace is for failure analysis.
nsk.share.TestFailure: TEST FAILED: wrong invocation:   invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tMainThr', id=272)
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.jdi.ClassType.invokeMethod.invokemethod011.checkThreads(invokemethod011.java:261)
	at nsk.jdi.ClassType.invokeMethod.invokemethod011.runIt(invokemethod011.java:215)
	at nsk.jdi.ClassType.invokeMethod.invokemethod011.run(invokemethod011.java:103)
	at nsk.jdi.ClassType.invokeMethod.invokemethod011.main(invokemethod011.java:99)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1585)
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr1', id=448)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr2', id=452)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr3', id=832)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr4', id=831)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr5', id=830)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr6', id=829)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr7', id=828)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr8', id=827)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr9', id=826)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr10', id=825)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr11', id=824)
	is suspended as expected

Final resumption of the debuggee VM
debugee.stderr> dummyMeth: exiting
InvokingThread: the method returned 9223372036854775807
InvokingThread: exiting
Timeout refired 480 times
# ERROR: TEST FAILED: debuggee process finished with status: 134
The following stacktrace is for failure analysis.
nsk.share.TestFailure: TEST FAILED: debuggee process finished with status: 134
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.jdi.ClassType.invokeMethod.invokemethod011.quitDebuggee(invokemethod011.java:402)
	at nsk.jdi.ClassType.invokeMethod.invokemethod011.runIt(invokemethod011.java:233)
	at nsk.jdi.ClassType.invokeMethod.invokemethod011.run(invokemethod011.java:103)
	at nsk.jdi.ClassType.invokeMethod.invokemethod011.main(invokemethod011.java:99)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1585)


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: TEST FAILED: wrong invocation: 
# ERROR: 	invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tMainThr', id=272)
# ERROR: 	is not suspended again after the invocation
# ERROR: TEST FAILED: debuggee process finished with status: 134
----------System.err:(0/0)----------
----------rerun:(34/8124)*----------;;;","2022-06-22 06:35;dcubed;Here's a log file snippet for the jdk-20+3-98-tier5 sighting: 

vmTestbase/nsk/jdi/ClassType/invokeMethod/invokemethod011/TestDescription.java

Verifying the single threaded invocation (INVOKE_SINGLE_THREADED):
CHECK PASSED: invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tMainThr', id=272)
	is resumed as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr1', id=447)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr2', id=449)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr3', id=452)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr4', id=460)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr5', id=458)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr6', id=464)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr7', id=480)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr8', id=462)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr9', id=470)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr10', id=475)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr11', id=467)
	is suspended as expected
Thread ""InvokingThread"" done


Verifying threads status after method invocation:
# ERROR: TEST FAILED: wrong invocation: 
# ERROR: 	invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tMainThr', id=272)
# ERROR: 	is not suspended again after the invocation
The following stacktrace is for failure analysis.
nsk.share.TestFailure: TEST FAILED: wrong invocation:   invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tMainThr', id=272)
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.jdi.ClassType.invokeMethod.invokemethod011.checkThreads(invokemethod011.java:261)
	at nsk.jdi.ClassType.invokeMethod.invokemethod011.runIt(invokemethod011.java:215)
	at nsk.jdi.ClassType.invokeMethod.invokemethod011.run(invokemethod011.java:103)
	at nsk.jdi.ClassType.invokeMethod.invokemethod011.main(invokemethod011.java:99)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1596)
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr1', id=447)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr2', id=449)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr3', id=452)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr4', id=460)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr5', id=458)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr6', id=464)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr7', id=480)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr8', id=462)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr9', id=470)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr10', id=475)
	is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod011tThr11', id=467)
	is suspended as expected

Final resumption of the debuggee VM
debugee.stderr> dummyMeth: exiting
InvokingThread: the method returned 9223372036854775807
InvokingThread: exiting
Timeout refired 480 times
----------System.err:(0/0)----------;;;","2022-07-06 14:29;cjplummer;From JDK-8286308, which I'm closing as  a dup:

The following test failed in the jdk-19-loomvt CI:

vmTestbase/nsk/jdi/ObjectReference/invokeMethod/invokemethod010/TestDescription.java

Here's a snippet from the log file:

Verifying the single threaded invocation (INVOKE_SINGLE_THREADED):
CHECK PASSED: invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod010tThr', id=272)
is resumed as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr1', id=437)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr2', id=440)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr3', id=451)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr4', id=445)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr5', id=449)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr6', id=829)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr7', id=830)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr8', id=831)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr9', id=832)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr10', id=833)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr11', id=834)
is suspended as expected
Thread ""InvokingThread"" done

Verifying threads status after method invocation:
# ERROR: TEST FAILED: wrong invocation:
# ERROR: invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod010tThr', id=272)
# ERROR: is not suspended again after the invocation
The following stacktrace is for failure analysis.
nsk.share.TestFailure: TEST FAILED: wrong invocation: invoking debuggee thread instance of java.lang.VirtualThread(name='invokemethod010tThr', id=272)
at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
at nsk.share.Log.complain(Log.java:403)
at nsk.jdi.ObjectReference.invokeMethod.invokemethod010.checkThreads(invokemethod010.java:257)
at nsk.jdi.ObjectReference.invokeMethod.invokemethod010.runIt(invokemethod010.java:212)
at nsk.jdi.ObjectReference.invokeMethod.invokemethod010.run(invokemethod010.java:107)
at nsk.jdi.ObjectReference.invokeMethod.invokemethod010.main(invokemethod010.java:103)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.base/java.lang.Thread.run(Thread.java:1585)
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr1', id=437)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr2', id=440)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr3', id=451)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr4', id=445)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr5', id=449)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr6', id=829)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr7', id=830)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr8', id=831)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr9', id=832)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr10', id=833)
is suspended as expected
CHECK PASSED: non-invoking debuggee thread instance of nsk.jdi.ObjectReference.invokeMethod.invokemethod010t$invokemethod010Thr(name='invokemethod010tThr11', id=834)
is suspended as expected
debugee.stderr> invokemethod010tDummyClass: longMeth: exiting
InvokingThread: the method returned 9223372036854775807
InvokingThread: exiting
Timeout refired 480 times
----------System.err:(0/0)----------
----------rerun:(39/6889)*----------

<snip>

result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-19-loomvt+1-55\windows-x64-debug.jdk\jdk-19\fastdebug\bin\java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 545286ms). ;;;","2022-10-25 22:51;cjplummer;This might more readily reproduced with -Xcomp. I've seen it a few times in recent -Xcomp runs I've done, although it doesn't seem that any of the above reported failures were with -Xcomp.;;;","2023-02-03 13:08;cjplummer;It looks like the root cause is that doing the way in which these tests use JDI invoke using INVOKE_SINGLE_THREADED is not always going to work with virtual threads. The invoked method is doing a Thread.sleep(400), and that is at risk of blocking indefinitely if all other threads are blocked form making progress, including the ""VirtualThread-unparker"". Note that technically platform threads could fail in the same manner. However, the reason it only happens now with virtual threads is because the implementation of Thread.sleep() differs for virtual threads, and may require ownership of a monitor that sometimes is held by another thread.

Another issue is that the tests do not do a very good job of error handling when this happens, and give the misleading failure reason of the invoked thread not being suspended after the invoke completed. The reason it is not suspended is because the invoke has actually not completed. There was a timeout that the test did not properly note as the cause of the failure. The test (debugger side) spawns a thread to do the JDI invokeMethod with, and then waits for it with:

                invThr.join(argHandler.getWaitTime()*60000);

This join() times out, but the test assumes once it returns the invoke is complete, even though the invoked thread is actually still in the middle of the invoke. So that is the reason debuggee invokemethod thread is not currently suspended. I've fixed this by having a test check if invThr is still alive after the join. If it is, then the test is made to fail at that point, rather than continuing on and checking the debuggee threads status. The failure then becomes:

nsk.share.TestFailure: TEST FAILED: invoke never completed

At that point a vm.resume() is done to allow the invoke to complete, and the test will exit with this failure.

As for avoiding the failure in the first place (the deadlock in the debuggee during the invoke), this is really a test bug for relying on INVOKE_SINGLE_THREADED and assuming that the invoked thread won't become deadlocked. Since there is a Thread.sleep() call in the invoked method, it can't make this assumption. From the ObjectReference.invoke() spec:

""By default, all threads in the target VM are resumed while the method is being invoked if they were previously suspended by an event or by VirtualMachine.suspend() or ThreadReference.suspend(). This is done to prevent the deadlocks that will occur if any of the threads own monitors that will be needed by the invoked method.""

""The resumption of other threads during the invocation can be prevented by specifying the INVOKE_SINGLE_THREADED bit flag in the options argument; however, there is no protection against or recovery from the deadlocks described above, so this option should be used with great caution.""

For platform threads, sleep() doesn't require any monitors, so these tests never ran into problems before. For virtual threads however there is some synchronization done, and potential reliance on other threads not being suspended. A way around this is to always use sleep(0), which will at least attempt to yield the thread. For platform threads an actual yield is likely. For a virtual thread it will not yield in this particular case because the virtual thread is pinned to the carrier thread due to the jvmti breakpoint callback that is currently in the call chain of the invoked thread. So for virtual threads this effectively the same as sitting in a spin loop with no yielding.
;;;","2023-02-03 13:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12420
Date: 2023-02-03 21:40:59 +0000;;;","2023-02-09 10:27;dukebot;Changeset: f4b72df4
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-02-09 18:25:04 +0000
URL:       https://git.openjdk.org/jdk/commit/f4b72df42863c321d03c32d1d0349892c3e87d50
;;;",,,,,,,,,,,,,,,,,,,,,
Java_sun_awt_X11_XlibWrapper_XSynchronize is wrong and unused,JDK-8282374,5069250,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,dlong,dlong,2022-02-24 15:04,2022-03-30 18:03,2023-10-01 09:56,2022-03-30 10:11,19,,,,,,,,,19,client-libs,,0,sn_113,sn_114,sn_115,,,,,,,,,,,,,,,,"I get a compiler error in Java_sun_awt_X11_XlibWrapper_XSynchronize when building jdk19 with clang 12:

* For target support_native_java.desktop_libawt_xawt_XlibWrapper.o:
ws/jdk/open/src/java.desktop/unix/native/libawt_xawt/xawt/XlibWrapper.c:2191:12: error: cast to smaller integer type 'jint' (aka 'int') from 'int (*)(Display *)' (aka 'int (*)(struct _XDisplay *)') [-Werror,-Wpointer-to-int-cast]
    return (jint) XSynchronize((Display*)jlong_to_ptr(display), (onoff == JNI_TRUE ? True : False));


The error is because XSynchronize returns a pointer.  Casting to jint loses information.  This seems to have gone unnoticed because as far as I can tell this native method is never called.  Perhaps it should just be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w623:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-03-29 06:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8016
Date: 2022-03-29 12:55:34 +0000;;;","2022-03-29 13:44;prr;""clang 12"" .. on Linux ? ;;;","2022-03-29 19:38;dlong;[~prr] Yes, I was trying to see if a macosx aarch64 problem reproduced on linux aarch64, so I used the same compiler.;;;","2022-03-30 10:11;dukebot;Changeset: ec9ab558
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2022-03-30 17:09:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ec9ab558a393992d9188fd22d1e831649bd434aa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[11] build issue on MacOS/aarch64 12.2.1 using Xcode 13.1: call to 'log2_intptr' is ambiguous,JDK-8282372,5069248,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,goetz,macarte,macarte,2022-02-24 14:02,2022-03-01 23:14,2023-10-01 09:56,2022-02-25 14:24,11.0.15,,,,,,,,,11.0.15,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,"Build issue when building on MacOS/aarch64 12.2.1 using Xcode 13.1. The cause being the uintptr_t cast that was removed from line 92 from a commit pulled into PR: https://github.com/openjdk/jdk11u-dev/pull/280

commit: https://github.com/rnkovacs/jdk11u-dev/commit/a5c4e72723e22da242a0e0f7d5168f553d12be7f

file; src/hotspot/cpu/aarch64/macroAssembler_aarch64.hpp: 

@@ -89,7 +89,7 @@ class MacroAssembler: public Assembler {
      = (operand_valid_for_logical_immediate(false /*is32*/,
                                             (uint64_t)Universe::narrow_klass_base())
         && ((uint64_t)Universe::narrow_klass_base()
-             > (1UL << log2_intptr((uintptr_t)Universe::narrow_klass_range()))));


The issue can be resolved by adding the cast back like so:
> (1UL << log2_intptr(checked_cast<uintptr_t>(Universe::narrow_klass_range())))));

BUILD ERROR summary:

In file included from /Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/asm/macroAssembler.hpp:31:
/Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/cpu/aarch64/macroAssembler_aarch64.hpp:92:25: error: call to 'log2_intptr' is ambiguous
             > (1ULL << log2_intptr(Universe::narrow_klass_range()))));
                        ^~~~~~~~~~~

BUILD ERROR in full:

$ make images CONF=macosx-aarch64-normal-server-release
Building target 'images' in configuration 'macosx-aarch64-normal-server-release'
In file included from /Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/precompiled/precompiled.hpp:111:
In file included from /Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/interpreter/abstractInterpreter.hpp:28:
In file included from /Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/asm/macroAssembler.hpp:31:
/Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/cpu/aarch64/macroAssembler_aarch64.hpp:92:25: error: call to 'log2_intptr' is ambiguous
             > (1ULL << log2_intptr(Universe::narrow_klass_range()))));
                        ^~~~~~~~~~~
In file included from /Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/precompiled/precompiled.hpp:111:
In file included from /Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/interpreter/abstractInterpreter.hpp:28:
In file included from /Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/asm/macroAssembler.hpp:31:
/Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/cpu/aarch64/macroAssembler_aarch64.hpp:92:25: error: call to 'log2_intptr' is ambiguous
             > (1ULL << log2_intptr(Universe::narrow_klass_range()))));
                        ^~~~~~~~~~~
/Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/utilities/globalDefinitions.hpp:1094:12: note: candidate function
inline int log2_intptr(uintptr_t x) {
           ^
/Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/utilities/globalDefinitions.hpp:1120:12: note: candidate function
inline int log2_intptr(intptr_t x) {
           ^
/Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/utilities/globalDefinitions.hpp:1094:12: note: candidate function
inline int log2_intptr(uintptr_t x) {
           ^
/Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/utilities/globalDefinitions.hpp:1120:12: note: candidate function
inline int log2_intptr(intptr_t x) {
           ^
1 error generated.
1 error generated.
make[3]: *** [/Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/build/macosx-aarch64-normal-server-release/hotspot/variant-server/libjvm/gtest/objs/precompiled/precompiled.hpp.pch] Error 1
make[3]: *** Waiting for unfinished jobs....
make[3]: *** [/Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/build/macosx-aarch64-normal-server-release/hotspot/variant-server/libjvm/objs/precompiled/precompiled.hpp.pch] Error 1
make[2]: *** [hotspot-server-libs] Error 2

ERROR: Build failed for target 'images' in configuration 'macosx-aarch64-normal-server-release' (exit code 2)

=== Output from failing command(s) repeated here ===
* For target hotspot_variant-server_libjvm_gtest_objs_precompiled_precompiled.hpp.pch:
In file included from /Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/precompiled/precompiled.hpp:111:
In file included from /Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/interpreter/abstractInterpreter.hpp:28:
In file included from /Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/asm/macroAssembler.hpp:31:
/Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/cpu/aarch64/macroAssembler_aarch64.hpp:92:25: error: call to 'log2_intptr' is ambiguous
             > (1ULL << log2_intptr(Universe::narrow_klass_range()))));
                        ^~~~~~~~~~~
/Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/utilities/globalDefinitions.hpp:1094:12: note: candidate function
inline int log2_intptr(uintptr_t x) {
           ^
/Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/utilities/globalDefinitions.hpp:1120:12: note: candidate function
inline int log2_intptr(intptr_t x) {
           ^
1 error generated.
* For target hotspot_variant-server_libjvm_objs_precompiled_precompiled.hpp.pch:
In file included from /Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/precompiled/precompiled.hpp:111:
In file included from /Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/interpreter/abstractInterpreter.hpp:28:
In file included from /Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/asm/macroAssembler.hpp:31:
/Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/cpu/aarch64/macroAssembler_aarch64.hpp:92:25: error: call to 'log2_intptr' is ambiguous
             > (1ULL << log2_intptr(Universe::narrow_klass_range()))));
                        ^~~~~~~~~~~
/Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/utilities/globalDefinitions.hpp:1094:12: note: candidate function
inline int log2_intptr(uintptr_t x) {
           ^
/Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/src/hotspot/share/utilities/globalDefinitions.hpp:1120:12: note: candidate function
inline int log2_intptr(intptr_t x) {
           ^
1 error generated.

* All command lines available in /Users/ahmed/Documents/dev/repos/jdk11u-dev-upstream/build/macosx-aarch64-normal-server-release/make-support/failure-logs.
=== End of repeated output ===

No indication of failed target found.
Hint: Try searching the build log for '] Error'.
Hint: See doc/building.html#troubleshooting for assistance.

make[1]: *** [main] Error 2
make: *** [images] Error 2","MacOS/aarch64 12.2.1

Xcode 13.1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8254072,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2w61n:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-24 14:20;dlong;Since this is related to JDK-8254072, I'm reassigning to runtime for triage.;;;","2022-02-25 04:58;goetz;Fix request [11u]

This is needed to fix the build on mac aarch64.

If someone else is working on this, I can withdraw my PR.;;;","2022-02-25 05:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/841
Date: 2022-02-25 12:55:32 +0000;;;","2022-02-25 14:24;roboduke;Changeset: 80a27773
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2022-02-25 22:23:14 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/80a27773cbba61c0cb47de15c48f7fb9ecb69f4a
;;;","2022-03-01 23:11;roboduke;Changeset: 80a27773
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2022-02-25 22:23:14 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/80a27773cbba61c0cb47de15c48f7fb9ecb69f4a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"Intermittent WebKit build failure on Windows: C1090: PDB API call failed, error code 23",JDK-8282359,5069233,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,hmeda,kcr,kcr,2022-02-24 08:48,2023-04-27 09:27,2023-10-01 09:56,2023-04-04 04:46,8,jfx19,,,,,,,,jfx21,javafx,,0,intermittent,jfx20u-fix-request,jfx20u-fix-yes,noreg-build,sn_124,sn_125,sn_140,sn_141,,,,,,,,,,,"This failure was spotted in a couple recent builds. The error is the same each time, but the point of failure is different. Here is one example:

JavaScriptCore\DerivedSources\unified-sources\UnifiedSource-bfc896e1-2.cpp(9): fatal error C1090: PDB API call failed, error code '23': (0x000006BA)
[1312/4683] Building CXX object Source\JavaScriptCore\CMakeFiles\JavaScriptCore.dir\__\__\JavaScriptCore\DerivedSources\unified-sources\UnifiedSource-da3fe922-1.cpp.obj
FAILED: Source/JavaScriptCore/CMakeFiles/JavaScriptCore.dir/__/__/JavaScriptCore/DerivedSources/unified-sources/UnifiedSource-da3fe922-1.cpp.obj 

I haven't ever seen this in a local build, only in our nightly CI build. Rerunning the build, with no changes, passes.",,,,,,,,,,,JDK-8305776,JDK-8305820,JDK-8305704,JDK-8305788,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278980,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2w5yb:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-02-24 08:53;kcr;We started seeing this recently, around the time of the WebKit 613.1 update, although until we find the root cause, we won't know whether this is a latent issue or something actually caused by the update.
;;;","2022-04-28 06:29;kcr;We continue to see this on our CI builds.;;;","2023-03-31 01:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1079
Date: 2023-03-31 07:57:11 +0000;;;","2023-04-04 04:46;dukebot;Changeset: a264435d
Author:    Hima Bindu Meda <hmeda@openjdk.org>
Date:      2023-04-04 11:44:08 +0000
URL:       https://git.openjdk.org/jfx/commit/a264435dccba6ec386548f76f1ace095d943f4ca
;;;","2023-04-09 21:43;hmeda;Fix Request JFX20u:
Request to approve backport of this commit to jfx20u.
Clean backport and low risk.Needed to keep native WebKit code in sync;;;","2023-04-10 08:44;kcr;jfx20u fix request approved.;;;","2023-04-10 11:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx20u/pull/12
Date: 2023-04-10 17:21:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
"compiler/arguments/TestCodeEntryAlignment.java failed ""guarantee(sect->end() <= tend) failed: sanity""",JDK-8282355,5069228,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,dlong,dcubed,dcubed,2022-02-24 07:37,2022-07-11 17:25,2023-10-01 09:56,2022-03-15 13:18,19,,,,,,,,,19,hotspot,,0,intermittent,oracle-triage-11,oracle-triage-17,oracle-triage-19,tier6,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

compiler/arguments/TestCodeEntryAlignment.java

Here's a snippet from the log file:

----------System.err:(32/1580)*----------
 stdout: [#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (codeBuffer.cpp:962), pid=11972, tid=28988
#  guarantee(sect->end() <= tend) failed: sanity
#
# JRE version:  (19.0+11) (build )
# Java VM: OpenJDK 64-Bit Server VM (19-ea+11-655, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_compiler\\scratch\\2\\hs_err_pid11972.mdmp
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_compiler\\scratch\\2\\hs_err_pid11972.log
#
#
];
 stderr: []
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0]

	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:489)
	at compiler.arguments.TestCodeEntryAlignment.shouldPass(TestCodeEntryAlignment.java:65)
	at compiler.arguments.TestCodeEntryAlignment.driver(TestCodeEntryAlignment.java:70)
	at compiler.arguments.TestCodeEntryAlignment.main(TestCodeEntryAlignment.java:48)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000021ed814f910):  JavaThread ""Unknown thread"" [_thread_in_vm, id=28988, stack(0x0000005780e00000,0x0000005780f00000)]

Stack: [0x0000005780e00000,0x0000005780f00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x69e48a]  os::platform_print_native_stack+0xca  (os_windows_x86.cpp:235)
V  [jvm.dll+0x7fa6fd]  VMError::report+0xc4d  (vmError.cpp:828)
V  [jvm.dll+0x7fc00e]  VMError::report_and_die+0x78e  (vmError.cpp:1656)
V  [jvm.dll+0x7fc677]  VMError::report_and_die+0x47  (vmError.cpp:1437)
V  [jvm.dll+0x25f10a]  report_vm_error+0x8a  (debug.cpp:282)
V  [jvm.dll+0x21b530]  CodeBuffer::verify_section_allocation+0x1a0  (codeBuffer.cpp:962)
V  [jvm.dll+0x219263]  CodeBuffer::~CodeBuffer+0x13  (codeBuffer.cpp:132)
V  [jvm.dll+0x75378a]  stubRoutines_init2+0x10a  (stubRoutines.cpp:367)
V  [jvm.dll+0x38eb07]  init_globals+0xc7  (init.cpp:160)
V  [jvm.dll+0x7a70f1]  Threads::create_vm+0x5a1  (thread.cpp:2809)
V  [jvm.dll+0x4117df]  JNI_CreateJavaVM_inner+0x8f  (jni.cpp:3613)
V  [jvm.dll+0x4131b1]  JNI_CreateJavaVM+0x11  (jni.cpp:3701)
C  [jli.dll+0x526b]  JavaMain+0x113  (java.c:411)
C  [ucrtbase.dll+0x26b4c]
C  [KERNEL32.DLL+0x14ed0]
C  [ntdll.dll+0x7e39b]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283229,,,,,,JDK-8281936,JDK-8281467,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2w5x7:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-02-24 14:35;dlong;It looks like code_size2 used in StubRoutines::initialize2() is too small given the large CodeEntryAlignment.  Instead of increasing code_size2 to support any possible alignment, maybe StubRoutines::initialize2() should take CodeEntryAlignment and the number of stub routines into account when computing the required BufferBlob size.;;;","2022-02-24 14:38;dlong;ILW = assert/crash because stub size too small; in 1 new test on Windows; no workaround = HLH = P2 ;;;","2022-03-12 15:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7800
Date: 2022-03-12 23:28:43 +0000;;;","2022-03-15 13:18;dukebot;Changeset: 1465ea98
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-03-15 20:17:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1465ea98b7736b5960a8b546ccc366c3e3260bdd
;;;","2022-03-16 08:02;dcubed;The fix for this bug was integrated in jdk-19+14-865.;;;","2022-07-11 17:25;epavlova;compiler/arguments/TestCodeEntryAlignment.java test passed in JDK 19 ATR.;;;",,,,,,,,,,,,,,,,,,,,,,,,
"Remove dependancy of TestHttpServer, HttpTransaction, HttpCallback from open/test/jdk/ tests",JDK-8282354,5069227,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchhipa,mchhipa,mchhipa,2022-02-24 07:34,2023-03-27 11:59,2023-10-01 09:56,2022-03-11 02:51,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,"There are some regression tests depending on TestHttpServer. internal API dependency should be removed from tests: 
open/test/jdk/java/net/ProxySelector/LoopbackAddresses.java
open/test/jdk/java/net/ProxySelector/ProxyTest.java
open/test/jdk/java/net/URL/PerConnectionProxy.java
open/test/jdk/java/net/URLConnection/B5052093.java
open/test/jdk/sun/net/www/AuthHeaderTest.java
open/test/jdk/sun/net/www/http/KeepAliveCache/B5045306.java

These test classes should be removed from test library, as these are replace by standard JDK HttpExchange, HttpServer, HttpHandler classes in test.
open/test/jdk/sun/net/www/httptest/AbstractCallback.java
open/test/jdk/sun/net/www/httptest/ClosedChannelList.java
open/test/jdk/sun/net/www/httptest/HttpCallback.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304962,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w5wz:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-02-24 08:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7616
Date: 2022-02-24 16:01:57 +0000;;;","2022-03-11 02:51;dukebot;Changeset: 95ca9443
Author:    Mahendra Chhipa <mahendra.chhipa@oracle.com>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-03-11 10:48:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/95ca94436d12974d98b1b999f9cc8408d64cbe3c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
jpackage does not work if class file has `$$` in the name on windows,JDK-8282351,5069135,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenyuk,webbuggrp,webbuggrp,2022-02-22 10:17,2022-07-28 04:51,2023-10-01 09:56,2022-05-09 19:55,17,,,,,,,,,19,tools,,0,additional-information-received,dcsad,jdk17u-fix-request,jdk17u-fix-yes,reproducer-yes,sn_117,sn_118,webbug,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
java 17, windows 10

A DESCRIPTION OF THE PROBLEM :
First, apologies if this is in the wrong place. I'm unfamilar with the jdk ecosystem and it doesn't seem like other repositories have issue trackers. If this is the wrong place, please point me in the right direction :pray: 


This was seen on 

![Screenshot from 2022-02-22 11-16-20](https://user-images.githubusercontent.com/3514957/155183799-7f74c11d-89ed-4066-9126-e0ba858aad23.png)


If you package up an application that has `$$` in the class file this will not work with `wix` (the tool used to generate an `msi` file on windows). 

This is because the wix pre-processor parses `$$` as a _single_ escaped `$`. 

![Screenshot from 2022-02-22 07-48-02](https://user-images.githubusercontent.com/3514957/155182083-04903556-ccc6-4a03-bd68-2bc1dc7f55a3.png)
![Screenshot from 2022-02-22 07-47-27](https://user-images.githubusercontent.com/3514957/155182087-e21b3a94-002f-4a58-abab-1a0bf141290a.png)


for more information see

- https://github.com/bitcoin-s/bitcoin-s/issues/4116
- https://github.com/wixtoolset/issues/issues/6734
- https://stackoverflow.com/questions/67494578/jpackage-on-windows-the-system-cannot-find-file-error-103/71225242#71225242

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Try to package something with `jpackage` on windows that contains a class file with `$$` in the file name

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
It automatically escapes the `$$` the wix pre-processor requires, see: https://github.com/wixtoolset/issues/issues/6734
ACTUAL -
File not found due to wix dropping a `$` in the file name. The result files wix searches have incorrect file names due to `$` missing. 

For example, this is the error message i see

C:\Users\runneradmin\AppData\Local\Temp\jdk.jpackage10810086746577514793\config\bundle.wxf(1578) : error LGHT0103 : The system cannot find the file 'C:\Users\RUNNER~1\AppData\Local\Temp\jdk.jpackage10810086746577514793\images\win-msi.image\BundleGUI\app\classes\org\bitcoins\bundle\gui\NeutrinoConfigPane$anon$7.class'

and the real file name is 

NeutrinoConfigPane$$anon$7.class


---------- BEGIN SOURCE ----------
see: https://github.com/bitcoin-s/bitcoin-s/tree/2022-02-21-windows-jpackage

and the file that actually tries to use jpackage and build an msi

https://github.com/bitcoin-s/bitcoin-s/blob/7adb862775c3a5bee1cb9b4f2605258e5076d354/.github/workflows/release.yml#L162
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
No known workaround at this time.

FREQUENCY : always


",,,,,,,,,,,JDK-8289947,JDK-8291485,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-02-24 06:27;adev;log.txt;https://bugs.openjdk.org/secure/attachment/98073/log.txt","2022-02-24 06:27;adev;test.zip;https://bugs.openjdk.org/secure/attachment/98072/test.zip",,,,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,"0|i2w5cj:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-02-22 20:33;adev;The issue seems to be on Azul JDK. Requesting submitter to test the same on Oracle JDK;;;","2022-02-24 06:25;adev;I tried to reproduce the issue with Oracle JDK with simple test case.

If there is '$$' in the class name, jpackage exits with error code 103.
Relevant Error message:
    C:\Users\ANDEV\AppData\Local\Temp\jdk.jpackage15585608980253722837\config\bundle.wxf(1153) : error LGHT0103 : The system cannot find the file 'C:\Users\ANDEV\AppData\Local\Temp\jdk.jpackage15585608980253722837\images\win-msi.image\Test\app\Test$MyTest.class'.

The actual class name  is Test$$MyTest.class, while file search includes Test$MyTest.class.

This may be because the double dollar sign ($$) is an escape character for $ in the WiX preprocessor. Quadruple dollar sign ($$$$) is required to survive the preprocessor.

https://github.com/wixtoolset/issues/issues/6734#issuecomment-1047965524;;;","2022-02-24 06:27;adev;Use the following command to reproduce the attached reproduer:
jpackage --type msi -i . --name 'Test'--win-console --main-class Test --main-jar Test.jar --verbose
;;;","2022-02-24 11:40;asemenyuk;I think the most straightforward solution would be to pass the output of WixAppImageFragmentBuilder through a filter that will convert all double dollar sign ($$) into Quadruple dollar sign ($$$$) in text elements of the input XML stream.;;;","2022-05-09 14:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8613
Date: 2022-05-09 21:25:37 +0000;;;","2022-05-09 19:55;dukebot;Changeset: 29395534
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2022-05-10 02:53:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/29395534d9683a802364dc53610dee2b525fb032
;;;","2022-07-25 08:39;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Clean backport.
SAP nighlty testing passed.;;;","2022-07-25 08:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/597
Date: 2022-07-25 15:39:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
handle latest VS2022 in abstract_vm_version,JDK-8282345,5069220,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-02-24 03:20,2023-04-20 05:47,2023-10-01 09:56,2022-02-25 04:30,19,,,,,,,,,19,hotspot,,0,11-bp,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,vs2022,,,,,,,,,,,"Latest VS2022 versions should be handled in abstract_vm_version, e.g. 17.0,
see
https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=msvc-170
Additionally, very old VS versions could be removed from abstract_vm_version.",,,,,,,,,,,JDK-8283549,JDK-8299000,JDK-8295197,JDK-8306563,JDK-8300847,JDK-8294523,JDK-8294912,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276841,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,"0|i2w5vf:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-24 04:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7606
Date: 2022-02-24 12:30:40 +0000;;;","2022-02-25 04:30;dukebot;Changeset: 735e86b0
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-02-25 12:26:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/735e86b0f71c97c2ba35c1cffd9b4492a8ca55bc
;;;","2022-03-22 06:21;mbaesken;Fix request (17u_dev) :
I would like to have the patch in jdk17u as well, because it would be good to handle the new VS version there too (VS2022 is already in jdk17u toolchain_microsoft.m4).  The patch applies cleanly.;;;","2022-03-22 06:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/278
Date: 2022-03-22 13:16:43 +0000;;;","2022-10-09 10:48;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
Small risk, trivial extenstion.
Clean except for copyright. But I do not want to drop support 
for old compilers in this rather old release, 
so I did not remove the corresponding code. 
SAP nighlty testing passed.;;;","2022-10-09 10:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1417
Date: 2022-10-09 17:47:06 +0000;;;","2023-04-10 11:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/299
Date: 2023-04-10 18:05:29 +0000;;;","2023-04-12 11:19;alexsch;Fix request [8u]

This a backport of the fix for parity with Oracle JDK-8299000 8u371
Risk low.
The fix is applied cleanly except the copyright year.
https://github.com/openjdk/jdk8u-dev/pull/299;;;",,,,,,,,,,,,,,,,,,,,,,
Remove case conversion for debugging log in SSLCipher,JDK-8282320,5069197,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xuelei,xuelei,xuelei,2022-02-23 13:56,2022-03-07 14:57,2023-10-01 09:56,2022-03-01 10:23,,,,,,,,,,19,security-libs,,0,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,,,"String.toUpperCase() is used in SSLCipher.java for debugging logging, which is not necessary.  See also comment in PR: https://github.com/openjdk/jdk/pull/7583",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w5qb:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-02-23 14:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7600
Date: 2022-02-23 22:08:03 +0000;;;","2022-03-01 10:23;dukebot;Changeset: eac80214
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-03-01 18:10:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/eac80214aea4f5c148e859b4b163fe42e89596cd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Operation before String case conversion,JDK-8282316,5069188,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-02-23 10:24,2023-05-19 02:19,2023-10-01 09:56,2022-02-24 08:29,17,19,,,,,,,,19,security-libs,,0,amazon-interest,noreg-trivial,tencent-interest,,,,,,,,,,,,,,,,"In the security components, there are cases that the string case-insensitive operations are performed before the case conversion.  The behavior may be not expected.

For example, in the SignatureUtil implementation, the checkName() requires case-insensitive input.  However, the method is called before the case conversion, for example:

            sigName = checkName(sigName).toUpperCase(Locale.ENGLISH);
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w5ob:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-02-23 11:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7598
Date: 2022-02-23 19:25:10 +0000;;;","2022-02-24 08:28;dukebot;Changeset: abc0ce11
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-02-24 16:25:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/abc0ce11dfa0a751a12925763cb168d1d3b4f44a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
nsk/jvmti/SuspendThread/suspendthrd003 may leak memory,JDK-8282314,5069186,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2022-02-23 09:56,2022-03-24 12:17,2023-10-01 09:56,2022-03-10 11:15,19,,,,,,,,,19,hotspot,,0,tier5,tier6,tier7,tier8,,,,,,,,,,,,,,,"In my recent stress testing of jdk-19 bits, I've run into
StressWrapper_suspendthrd003 failing in slowdebug configs
due to ""OutOfMemoryError: Java heap space"". The first
occurrence was in my jdk-19+8 stress testing and the failures
reproduced in jdk-19+9 and jdk-19+10 stress testing.

I added an RSS monitor for the StressWrappers to my stress
kit setup and captured RSS data in my jdk-19+10 stress testing.
I wrote a script to extract the RSS data and another script to do
some initial analysis on that data.

In do_all_check_stress_results.jdk-19+10_1.log:

StressWrapper_StopAtExit release:
n_values=101
max_value=13102752
min_value=80516
max_increase=542264
min_increase=780
Value increased 100 times
WARNING: there might be a leak.

StressWrapper_suspendthrd003 release:
n_values=102
max_value=260024
min_value=43676
max_increase=17628
min_increase=8436
Value increased 101 times
WARNING: there might be a leak.

StressWrapper_suspendthrd003 fastdebug:
n_values=101
max_value=431132
min_value=193884
max_increase=18416
min_increase=6908
Value increased 100 times
WARNING: there might be a leak.

StressWrapper_suspendthrd003 slowdebug:
n_values=74
max_value=1019140
min_value=203728
max_increase=29192
min_increase=13156
Value increased 73 times
WARNING: there might be a leak.


In do_all_check_stress_results.jdk-19+10_2.log:

StressWrapper_suspendthrd003 release:
n_values=102
max_value=326184
min_value=45896
max_increase=18260
min_increase=11096
Value increased 101 times
WARNING: there might be a leak.

StressWrapper_suspendthrd003 fastdebug:
n_values=102
max_value=478212
min_value=193176
max_increase=18756
min_increase=5872
Value increased 101 times
WARNING: there might be a leak.

StressWrapper_suspendthrd003 slowdebug:
n_values=74
max_value=1029096
min_value=198076
max_increase=27360
min_increase=13056
Value increased 73 times
WARNING: there might be a leak.


do_all_check_stress_results.jdk-19+10_3.log:

StressWrapper_StopAtExit release:
n_values=101
max_value=13230152
min_value=78128
max_increase=532040
min_increase=1764
Value increased 100 times
WARNING: there might be a leak.


StressWrapper_suspendthrd003 release:
n_values=102
max_value=173640
min_value=42908
max_increase=10428
min_increase=10428
Value increased 101 times
WARNING: there might be a leak.

StressWrapper_suspendthrd003 fastdebug:
n_values=101
max_value=479636
min_value=193480
max_increase=18764
min_increase=5864
Value increased 100 times
WARNING: there might be a leak.

StressWrapper_suspendthrd003 slowdebug:
n_values=75
max_value=1032804
min_value=204916
max_increase=29068
min_increase=12572
Value increased 74 times
WARNING: there might be a leak.

Since the possible leak reproduced in all three configs
in all three runs of StressWrapper_suspendthrd003, I'm
going to focus on that wrapper first.

StressWrapper_StopAtExit did report a possible leak in
the 'release' bits config in 2 of the 3 runs so I'm not as
sure that is a real sighting.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283651,,,,,,"2022-03-01 10:07;dcubed;java_pid42669.prof.jpg;https://bugs.openjdk.org/secure/attachment/98128/java_pid42669.prof.jpg","2022-03-01 10:07;dcubed;java_pid42669.prof.log_details.jpg;https://bugs.openjdk.org/secure/attachment/98129/java_pid42669.prof.log_details.jpg","2022-02-27 07:00;dcubed;jdk-19+11_linux.8282314.zip;https://bugs.openjdk.org/secure/attachment/98116/jdk-19%2B11_linux.8282314.zip",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w5nv:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-02-23 10:15;dcubed;Just looking at the max RSS value for each of the wrappers is interesting:

$ sed -n -e ':top' -e '/^StressWrapper/{' -e '/ release/{' -e 'p' -e ':mid' -e 'n' -e '/^max_value=/{' -e 'p' -e 'n' -e 'b top' -e '}' -e 'b mid' -e '}' -e '}' do_all_check_stress_results.jdk-19+10_1.log
StressWrapper_find006 release:
max_value=58088
StressWrapper_GetLockOwnerName release:
max_value=123596
StressWrapper_InterruptAtExit release:
max_value=55556
StressWrapper_intrpthrd003 release:
max_value=138244
StressWrapper_IsInterruptedAtExit release:
max_value=53364
StressWrapper_issuspended002 release:
max_value=56576
StressWrapper_objmonusage006 release:
max_value=52204
StressWrapper_popframe011 release:
max_value=124988
StressWrapper_SetNameAtExit release:
max_value=131408
StressWrapper_SetPriorityAtExit release:
max_value=59832
StressWrapper_StopAtExit release:
max_value=13102752
StressWrapper_SuspendAtExit release:
max_value=48396
StressWrapper_suspendthrd003 release:
max_value=260024

With 'release' bits, StressWrapper_StopAtExit hits the highest with 13102752
and StressWrapper_suspendthrd003 has the second highest with 260024.;;;","2022-02-23 10:16;dcubed;$ sed -n -e ':top' -e '/^StressWrapper/{' -e '/ fastdebug/{' -e 'p' -e ':mid' -e 'n' -e '/^max_value=/{' -e 'p' -e 'n' -e 'b top' -e '}' -e 'b mid' -e '}' -e '}' do_all_check_stress_results.jdk-19+10_1.log
StressWrapper_find006 fastdebug:
max_value=195808
StressWrapper_GetLockOwnerName fastdebug:
max_value=203376
StressWrapper_InterruptAtExit fastdebug:
max_value=189408
StressWrapper_intrpthrd003 fastdebug:
max_value=213756
StressWrapper_IsInterruptedAtExit fastdebug:
max_value=188464
StressWrapper_issuspended002 fastdebug:
max_value=197780
StressWrapper_objmonusage006 fastdebug:
max_value=198452
StressWrapper_popframe011 fastdebug:
max_value=194080
StressWrapper_SetNameAtExit fastdebug:
max_value=232340
StressWrapper_SetPriorityAtExit fastdebug:
max_value=194724
StressWrapper_StopAtExit fastdebug:
max_value=11527072
StressWrapper_SuspendAtExit fastdebug:
max_value=193624
StressWrapper_suspendthrd003 fastdebug:
max_value=431132

With 'fastdebug' bits, StressWrapper_StopAtExit hits the highest with 11527072
and StressWrapper_suspendthrd003 has the second highest with 431132.;;;","2022-02-23 10:17;dcubed;$ sed -n -e ':top' -e '/^StressWrapper/{' -e '/ slowdebug/{' -e 'p' -e ':mid' -e 'n' -e '/^max_value=/{' -e 'p' -e 'n' -e 'b top' -e '}' -e 'b mid' -e '}' -e '}' do_all_check_stress_results.jdk-19+10_1.log
StressWrapper_find006 slowdebug:
max_value=197972
StressWrapper_GetLockOwnerName slowdebug:
max_value=203628
StressWrapper_InterruptAtExit slowdebug:
max_value=188576
StressWrapper_intrpthrd003 slowdebug:
max_value=203224
StressWrapper_IsInterruptedAtExit slowdebug:
max_value=195904
StressWrapper_issuspended002 slowdebug:
max_value=202992
StressWrapper_objmonusage006 slowdebug:
max_value=198128
StressWrapper_popframe011 slowdebug:
max_value=196992
StressWrapper_SetNameAtExit slowdebug:
max_value=234668
StressWrapper_SetPriorityAtExit slowdebug:
max_value=194860
StressWrapper_StopAtExit slowdebug:
max_value=13939132
StressWrapper_SuspendAtExit slowdebug:
max_value=196756
StressWrapper_suspendthrd003 slowdebug:
max_value=1019140

With 'slowdebug' bits, StressWrapper_StopAtExit hits the highest with 13939132
and StressWrapper_suspendthrd003 has the second highest with 1019140. 
;;;","2022-02-23 11:52;dcubed;Since StressWrapper_StopAtExit always has a higher RSS than
StressWrapper_suspendthrd003, I'm thinking that StopAtExit is
leaking native memory and suspendthrd003 is leaking Java heap
memory, but that's just a guess at this stage.;;;","2022-02-27 07:00;dcubed;$ unzip -l jdk-19+11_linux.8282314.zip
Archive:  jdk-19+11_linux.8282314.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    19092  2022-02-25 11:13   jdk-19+11_1/failures.linux-x86_64/StressWrapper_suspendthrd003.jtr.slowdebug
    19094  2022-02-27 09:29   jdk-19+11_3/failures.linux-x86_64/StressWrapper_suspendthrd003.jtr.slowdebug
---------                     -------
    38186                     2 files;;;","2022-02-28 12:14;dcubed;Modified StressWrapper_suspendthrd003.java like so:

$ git diff
diff --git a/test/hotspot/jtreg/StressWrapper_suspendthrd003.java b/test/hotspot/jtreg/StressWrapper_suspendthrd003.java
index 1c6262ed876..f3cbd3b53cd 100644
--- a/test/hotspot/jtreg/StressWrapper_suspendthrd003.java
+++ b/test/hotspot/jtreg/StressWrapper_suspendthrd003.java
@@ -5,6 +5,7 @@
  * @library /vmTestbase
  *          /test/lib
  * @run main/othervm/native/timeout=6393
+ *      -XX:+HeapDumpOnOutOfMemoryError
  *      -Xmx128m
  *      -agentlib:suspendthrd003=-waittime=5
  *      nsk.jvmti.SuspendThread.suspendthrd003 6093

and was able to reproduce this failure on my MBP13:

$ do_java_test -c slowdebug hotspot/jtreg/StressWrapper_suspendthrd003.java
INFO: GNUMAKE=make
INFO: GNUMAKE version is: GNU Make 3.81

INFO: JTREG options:
INFO:   JOBS=4
INFO:   TEST_MODE=agentvm
INFO:   EXTRA_PROBLEM_LISTS=ProblemList-extra.txt
INFO:   VM_OPTIONS=
INFO: test_val=hotspot/jtreg/StressWrapper_suspendthrd003.java
Test Config: macosx-x86_64-normal-server-slowdebug
    INFO: TIMEOUT_FACTOR=12
    Done testing
    Test Run macosx-x86_64-normal-server-slowdebug time: 33.96 minutes.

    TEST                                              TOTAL  PASS  FAIL ERROR
    jtreg:open/test/hotspot/jtreg/StressWrapper_suspendthrd003.java
    >>                                                       1     0     1     0 <<

    1 failure(s) found in log=do_java_test.macosx-x86_64-normal-server-slowdebug.log

    TEST: StressWrapper_suspendthrd003.java
    LOG: build/macosx-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_StressWrapper_suspendthrd003_java/StressWrapper_suspendthrd003.jtr
    Saving build/macosx-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_StressWrapper_suspendthrd003_java/StressWrapper_suspendthrd003.jtr as /work/shared/bug_hunt/8282314_for_jdk19.git/test_failures.2022-02-28-125232/StressWrapper_suspendthrd003.jtr.slowdebug


Total test time: 33.96 minutes.

and it looks like I have a heap dump:

$ ls -l build/macosx-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_StressWrapper_suspendthrd003_java/StressWrapper_suspendthrd003
total 172240
-rw-r--r--  1 dcubed  green   2354917 Feb 28 13:26 environment.html
-rw-r--r--  1 dcubed  green       195 Feb 28 13:26 environment.log
-rw-------  1 dcubed  green  69334569 Feb 28 13:25 java_pid42669.hprof
-rw-r--r--@ 1 dcubed  green     94518 Feb 28 13:26 screen1.png

That's a pretty big heapdump file: 69334569 => 66.12MB;;;","2022-03-01 10:14;dcubed;VisualVM 2.1.2 to the rescue!

java_pid42669.prof.jpg
    Shows that we threw an OutOfMemoryError in the MainThread
    with a heapsize of 67,170,102 bytes which is interesting since
    we run this stress test with '-Xmx128m'. We have a java.lang.Object[]
    array that contains 8,192,000 elements and occupies 65,536,024 bytes
   so that's the first thing to look at.

java_pid42669.prof.log_details.jpg
    Shows that the 'log' variable in suspendthrd003 is pinning down
    a Vector logBuffer that contains 8,192,000 elements. Ouch!;;;","2022-03-08 09:52;dcubed;So the nsk/jvmti/SuspendThread/suspendthrd003.java test generates four
logging lines per loop:

$ grep 'log.display' test/hotspot/jtreg/vmTestbase/nsk/jvmti/SuspendThread/suspendthrd003.java
            log.display(""Starting tested thread"");
                log.display(""Sync: thread started"");
            log.display(""Finishing tested thread"");
            log.display(""Sync: thread finished"");

In a recent run of the fixed bits on my MBP13, I saw these counts:

macosx-x86_64-normal-server-fastdebug:
Executed 1672356 loops in 6093 seconds.

macosx-x86_64-normal-server-release:
Executed 260780 loops in 6093 seconds.

macosx-x86_64-normal-server-slowdebug:
Executed 7153680 loops in 6093 seconds.

It's very interesting that we get fewer loops in 'release' bits and
more loops in 'fastdebug' bits and even more in 'slowdebug' bits.

With four messages per loop, in theory we would run into the
8,192,000 ceiling with 2048000 loops. I'm going to have to guess
that without the fix in place, we're able to run fewer loops of the
test across all three configs which is why I only see the OOME
in the slowdebug config.

I just checked my Ubuntu 20.04 server and don't save the logs
for the passing runs so I don't have loop data at my finger tips
for the case where the fix is not in place (jdk-19+11 and earlier).

My jdk-19+12 stress testing included the fix so here are those
loop counts:

linux-x86_64-normal-server-fastdebug:

Executed 663035 loops in 6093 seconds.

linux-x86_64-normal-server-release:

Executed 1877078 loops in 6093 seconds.

linux-x86_64-normal-server-slowdebug:

Executed 2523107 loops in 6093 seconds.

And that data does tell the tale! Only the slowdebug
config is above 2048000 even with the fix in place.

You might be wondering why my MBP13 was able to
execute more loop per config... I was only running the
one stress test on the machine. On the Ubuntu 20.04
machine, I'm running many tests in parallel so the
StressWrapper_suspendthrd003 runs do not have the
machine to themselves like on the MBP13.

The fix that I'm testing provides a new method to clear
the log at the top of each loop. For the suspendthrd003
test, only the log messages for the current loop are
relevant if the current loop fails. ;;;","2022-03-09 12:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7764
Date: 2022-03-09 20:41:37 +0000;;;","2022-03-10 11:15;dukebot;Changeset: bb7ee5a0
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-03-10 19:13:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bb7ee5a04ae21a9f9dc6c59a990f7e571e832f0d
;;;",,,,,,,,,,,,,,,,,,,,
Minor corrections to evbroadcasti32x4 intrinsic on x86,JDK-8282312,5069184,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jnimeh,jnimeh,jnimeh,2022-02-23 08:18,2022-04-07 01:38,2023-10-01 09:56,2022-03-07 21:53,11,17,18,19,,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,noreg-trivial,oracle-triage-19,,,,,,,,,,"The current evbroadcasti32x4 method in assembler_x86.cpp has it requiring AVX512DQ and creating the opcode with an Op/En as T2.  According to the Intel SDM, this form of the vbroadcasti32x4 only requires AVX512F (change to VM_Version::supports_evex()) and should use an Op / En value of T4.",,,,,,,,,,,JDK-8284261,JDK-8283833,JDK-8284145,JDK-8284514,JDK-8284056,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8245512,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2w5nf:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-23 15:52;dlong;ILW = wrong encoding, wrong cpu feature check; unknown impact; no workaround = MMH = P3;;;","2022-02-23 15:56;dlong;What's the impact of using T2 instead of T4?  Could it lead to a wrong result in kernel_crc32_avx512()?;;;","2022-02-23 16:16;jnimeh;That is something I plan on looking into before I integrate this, as I was wondering the same thing.  The T2 Op/En is used with instructions that broadcast in groups of 2 (e.g. vbroadcasti64x2, vbroadcasti32x2).  It may have an impact since it might be only broadcasting 32x2 even though the instruction claims it is 32x4.  The resulting opcode is ""EVEX.512.66.0F38.W0 5A"" both before and after the change which is the 32x4 flavor for this instruction.  I am new to assembly so I admit to being a little sketchy on how the EVEX_T2 or EVEX_T4 attribute asserts itself and what the behavior is.  FWIW the above opcode with a T2 Op/En value doesn't appear to match anything in the SDM.

I'm going to make the change locally and see what regression tests show, but something focused on the kernel_crc32_avx512 is certainly in order since it's the only other consumer of this instruction.;;;","2022-02-23 16:30;jnimeh;One thing I did notice is that currently EVEX_T2 is coupled with EVEX_64bit on that evbroadcasti32x4 method.  Is that functionally the same as EVEX_T4 with EVEX_32bit?  If so, then they should be both broadcasting the same 128-bit address.  Something for me to look into but if anyone knows I'm all ears.;;;","2022-02-23 18:45;dlong;It seems the ""tuple_type"" is not used to encode this instruction, but it would be good to set it correctly.  It looks like the tuple type is used if the Address has a scaled index.;;;","2022-03-07 11:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7732
Date: 2022-03-07 18:08:25 +0000;;;","2022-03-07 21:53;dukebot;Changeset: 8b45dbda
Author:    Jamil Nimeh <jnimeh@openjdk.org>
Date:      2022-03-08 05:50:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8b45dbdae6e5dee85ef65ce25850ce692ad3e965
;;;","2022-03-29 06:58;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. GHA tests have passed.;;;","2022-03-29 07:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/304
Date: 2022-03-29 13:59:50 +0000;;;","2022-03-29 08:12;thartmann;Fix Request (JDK 18u)
Fixes a wrong requirement for emitting an assembly instruction. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 08:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/62
Date: 2022-03-29 15:11:16 +0000;;;","2022-04-06 00:47;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
Low risk, trivial change.
Clean backport.
SAP nightly testing passed.;;;","2022-04-06 00:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1011
Date: 2022-04-06 07:48:12 +0000;;;",,,,,,,,,,,,,,,,,
Fix a typo in javax.lang.model.type.NullType,JDK-8282311,5069183,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-02-23 08:13,2022-03-07 14:56,2023-10-01 09:56,2022-03-01 07:23,19,,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280713,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w5n7:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3c6c40,,,,,,,,,"2022-03-01 05:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7646
Date: 2022-03-01 13:10:14 +0000;;;","2022-03-01 07:23;dukebot;Changeset: 31b61f98
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-03-01 15:21:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/31b61f982c41b52ae99bd8ecf1977a6c0de515e2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Operation before upper case conversion,JDK-8282309,5069181,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-02-23 07:58,2023-05-19 02:20,2023-10-01 09:56,2022-02-23 10:34,17,19,,,,,,,,19,security-libs,,0,amazon-interest,noreg-trivial,tencent-interest,,,,,,,,,,,,,,,,"In the TlsChannelBinding.java implementation, the string operation is placed before the case conversion.  The behavior may be not expected.
            String hashAlg = serverCertificate.getSigAlgName().
-                     replace(""SHA"", ""SHA-"").toUpperCase(Locale.ENGLISH);
+                    toUpperCase(Locale.ENGLISH).replace(""SHA"", ""SHA-"");
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w5mr:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-02-23 08:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7592
Date: 2022-02-23 16:08:49 +0000;;;","2022-02-23 10:34;dukebot;Changeset: 7dc7184c
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-02-23 18:32:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7dc7184c10fc8f7a02113056da979a9846a14cd4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Parallel: Incorrect discovery mode in PCReferenceProcessor,JDK-8282307,5069178,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ayang,ayang,ayang,2022-02-23 06:55,2022-03-02 17:19,2023-10-01 09:56,2022-02-24 09:49,18,19,,,,,,,,19,hotspot,,0,gc-parallel,,,,,,,,,,,,,,,,,,"JDK-8273185 negates the arg, but misses the Full GC in Parallel",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273185,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w5m3:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-02-23 07:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7590
Date: 2022-02-23 14:58:46 +0000;;;","2022-02-24 09:49;dukebot;Changeset: 20e78f7a
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2022-02-24 17:48:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/20e78f7a8e2e589bc4fb7f0c928176048bd9172a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
(se) Pipe.open() creates a Pipe implementation that uses Unix domain sockets (win),JDK-8282296,5069166,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,michaelm,dfuchs,dfuchs,2022-02-23 02:18,2022-03-02 17:18,2023-10-01 09:56,2022-02-23 12:03,19,,,,,,,,,19,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,"src/java.base/windows/classes/sun/nio/ch/PipeImpl.java

    /**
     * Creates a (TCP) Pipe implementation that supports buffering.
     */
    PipeImpl(SelectorProvider sp) throws IOException {
        this(sp, true, false);
    }

The first boolean is `preferAfUnix` - the second one is `buffering` - so this actually creates a Unix Domain pipe with no buffering.

Either the spec or the implementation should be fixed so that they both match.

Note that the only place where this constructor is used seems to be here:

src/java.base/share/classes/sun/nio/ch/SelectorProviderImpl.java:        return new PipeImpl(this);
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280944,,,,,,JDK-8278369,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w5jf:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-02-23 07:09;michaelm;The two boolean parameters were mixed up in that one call site as described. It happened in the fix for JDK-8280944.;;;","2022-02-23 09:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7597
Date: 2022-02-23 17:37:08 +0000;;;","2022-02-23 12:03;dukebot;Changeset: e540e0a8
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2022-02-23 20:02:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e540e0a81b923cce8b2f2689e01703509a4df1de
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
SymbolPropertyEntry::set_method_type fails with assert,JDK-8282295,5069164,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,thartmann,thartmann,2022-02-23 02:00,2022-03-22 02:46,2023-10-01 09:57,2022-03-08 08:11,19,,,,,,,,,19,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,,,,,,,,,,,,,"Running tools/jpackage/share/jdk/jpackage/tests/AppVersionTest.java with -XX:+FullGCALot on macOS aarch64 triggers the following assert:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/Users/tohartma/jdk/open/src/hotspot/share/oops/oopHandle.hpp:53), pid=27741, tid=14343
#  assert(is_empty() || copy.is_empty()) failed: can only copy if empty

Stack: [0x0000000172384000,0x0000000172587000],  sp=0x00000001725857d0,  free space=2053k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x10c41f8]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x5d8
V  [libjvm.dylib+0x10c4930]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40
V  [libjvm.dylib+0x5b5414]  report_vm_error(char const*, int, char const*, char const*, ...)+0x80
V  [libjvm.dylib+0x664630]  SymbolPropertyEntry::set_method_type(oop)+0xb4
V  [libjvm.dylib+0xfe1274]  SystemDictionary::find_method_handle_type(Symbol*, Klass*, JavaThread*)+0x1074
V  [libjvm.dylib+0x59fa58]  ConstantPool::resolve_constant_at_impl(constantPoolHandle const&, int, int, bool*, JavaThread*)+0xdfc
V  [libjvm.dylib+0x5a0d6c]  ConstantPool::copy_bootstrap_arguments_at_impl(constantPoolHandle const&, int, int, int, objArrayHandle, int, bool, Handle, JavaThread*)+0x3f8
V  [libjvm.dylib+0x36bd18]  BootstrapInfo::resolve_args(JavaThread*)+0x6c8
V  [libjvm.dylib+0x36b4cc]  BootstrapInfo::resolve_bsm(JavaThread*)+0x520
V  [libjvm.dylib+0xfe2538]  SystemDictionary::invoke_bootstrap_method(BootstrapInfo&, JavaThread*)+0x3c
V  [libjvm.dylib+0xbdf5c0]  LinkResolver::resolve_dynamic_call(CallInfo&, BootstrapInfo&, JavaThread*)+0x34
V  [libjvm.dylib+0xbdea84]  LinkResolver::resolve_invokedynamic(CallInfo&, constantPoolHandle const&, int, JavaThread*)+0xb8
V  [libjvm.dylib+0x89837c]  InterpreterRuntime::resolve_invokedynamic(JavaThread*)+0x1d4
V  [libjvm.dylib+0x898674]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x268

Code/Assert was introduced by JDK-8249822.

[~dlong] found this.",,,,,,,,,,,JDK-8283201,JDK-8282971,JDK-8283503,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8249822,,,,,,,,,,,,"2022-02-23 03:28;thartmann;hs_err_pid1765123.log;https://bugs.openjdk.org/secure/attachment/98064/hs_err_pid1765123.log","2022-02-23 02:01;thartmann;hs_err_pid27741.log;https://bugs.openjdk.org/secure/attachment/98059/hs_err_pid27741.log",,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w5iz:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-23 02:05;dlong;Reproducible on linux aarch64 and linux x64 with clang versions
clang version 12.0.1 (Red Hat 12.0.1-4.0.1.module+el8.5.0+20428+2b4ecd47)
and
Ubuntu clang version 12.0.0-3ubuntu1~20.04.4
respectively.;;;","2022-02-23 03:28;thartmann;I can also reproduce this on x86_64 with a gcc build (see attached hs_err_pid1765123.log).;;;","2022-02-24 13:14;dlong;The problem seems to be in Universe::release_fullgc_alot_dummy():

	      // No more dummies to release, release entire array instead
	      _fullgc_alot_dummy_array.release(Universe::vm_global());
	      return false;

OopHandle::release() doesn't zero out the handle, so what can happen is the next time we ask for an OopHandle, we can get the same one as _fullgc_alot_dummy_array.  It looks like we can actually end up with multiple OopHandles using the same slot, because release_fullgc_alot_dummy() will continue to release the same handle over and over if resolve() does not return NULL.;;;","2022-03-01 11:15;mseledtsov;ILW = HLM = P3
(full GC is not a production option);;;","2022-03-07 08:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7730
Date: 2022-03-07 16:53:38 +0000;;;","2022-03-08 08:11;dukebot;Changeset: 3e4dfc63
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-03-08 16:10:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3e4dfc63e75db7e8ccbb21a831d8d86fb7c1ac4e
;;;","2022-03-10 05:52;hseigel;Fix Request (18u)
This small fix prevents the intermittent failure described above.  The risk is low because it just nulls out a handle whose oop was freed.  The patch applied cleanly and was tested by running Mach5 tiers 1-2.;;;","2022-03-15 09:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/49
Date: 2022-03-15 16:40:11 +0000;;;","2022-03-21 07:14;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
Simple change, low risk.
Clean backport.
SAP nightly testing passed.;;;","2022-03-21 07:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/271
Date: 2022-03-21 14:21:21 +0000;;;",,,,,,,,,,,,,,,,,,,,
Domain value for system property jdk.https.negotiate.cbt should be case-insensitive,JDK-8282293,5069162,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,ssahoo,ssahoo,ssahoo,2022-02-23 00:59,2022-08-09 09:01,2023-10-01 09:57,2022-03-22 23:48,19,,,,,,,,,19,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"I see the following issues with HTTPS Channel Binding support for Java GSS/Kerberos.

1) The domain value in system property ""jdk.https.negotiate.cbt=domain:<domains>"" is CASE sensitive and looks for exact match.
2) HTTP Client should quit early when ""jdk.https.negotiate.cbt"" refer an INVALID value. Ex: jdk.https.negotiate.cbt=Xyz. It fails with response code 401 after 20 attempts.
3) HTTP Client should quit early when ""jdk.https.negotiate.cbt=never"" for a URL configured with EAP=REQUIRED. It fails with response code 401 after 20 attempts.
4) HTTP Client should quit early when ""jdk.https.negotiate.cbt=domain:<domains>"" contain INVALID/INCORRECT domain names for a URL configured with EAP=REQUIRED. It fails with response code 401 after 20 attempts.
5) When the system property ""http.auth.preference"" set to NTLM for a URL configured with EAP=REQUIRED, it fails. But, it pass with ""http.auth.preference"" set to Kerberos and Negotiate.",,,,,,,,,,,JDK-8284657,JDK-8284659,JDK-8286648,JDK-8285426,JDK-8285894,JDK-8288183,,,,,,,,,,,,,,,,,,,,,,JDK-8279932,,,,,,,,,,JDK-8282298,JDK-8279842,JDK-8282297,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w5ij:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-02-23 02:39;michaelm;1) Yes, I think the match should be case insensitive 

2) When an invalid value is specified, the implementation defaults to the value “never”, which is the same default if the property is not specified. What happens then is the CBT is not sent, the authentication fails, and through the standard retry mechanism, the whole thing is repeated 20 times. There’s no way to “quit early” here as we don’t actually know in the implementation whether the 401 is due to the lack of CBT or whether the credentials were wrong, in which case the user needs an opportunity to retry with new credentials. There is a system property “http.maxRedirects” that can change the number of retries from 20 to something smaller.

3) same as 2)

4) same as 2)

5) We don’t support EAP over NTLM, only Kerberos as this was the reported issue

I’ll fix issue 1) under this bug report. 5) could be requested as an enhancement in a new report.

We could probably reduce the default number of retries as well if requested in another enhancement.;;;","2022-02-23 02:57;ssahoo;I think 20 retries is too much retry for credential failure and it need to be reconsidered.;;;","2022-03-08 09:34;rhalade;A separate bug JDK-8282297 was filed for number 5) so I will update this bug summary to indicate issue 1);;;","2022-03-09 07:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7759
Date: 2022-03-09 15:03:31 +0000;;;","2022-03-22 23:48;dukebot;Changeset: 86015e15
Author:    Sibabrata Sahoo <ssahoo@openjdk.org>
Date:      2022-03-23 06:45:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/86015e15a5105a779ee065cca64479c8d4fbc074
;;;","2022-04-13 04:38;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly on top of JDK-8279842 backport. Included test cases have passed.;;;","2022-04-13 04:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/350
Date: 2022-04-13 11:36:29 +0000;;;","2022-05-09 07:32;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.16-oracle. Applies cleanly on top of JDK-8279842 backport (only BugID addition to test had to get done manually, but Skara recognizes it as clean backport). Included test cases have passed.;;;","2022-05-09 07:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1076
Date: 2022-05-09 14:27:58 +0000;;;",,,,,,,,,,,,,,,,,,,,,
[lworld] runtime/valhalla/inlinetypes/WithFieldAccessorTest.java Xcomp C1 asserts,JDK-8282292,5069160,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fparain,dsimms,dsimms,2022-02-23 00:54,2022-02-25 07:17,2023-10-01 09:57,2022-02-25 07:17,repo-valhalla,,,,,,,,,repo-valhalla,hotspot,,0,c1,lworld,,,,,,,,,,,,,,,,,"Note: this occurs in the newer version of WithFieldAccessorTest.java in:  https://github.com/openjdk/valhalla/pull/653

With -Xcomp on, runtime/valhalla/inlinetypes/WithFieldAccessorTest.java asserts in C1:

""assert(_offset >= 1) failed: illegal call to offset()""

# Problematic frame:
# V  [libjvm.so+0x7add04]  GraphBuilder::withfield(int)+0x444

Current CompileTask:
C1:  42586 6648    b  3       runtime.valhalla.inlinetypes.WithFieldAccessorTest::lambda$main$3 (8 bytes)

Stack: [0x00007fffc2dc1000,0x00007fffc2ec1000],  sp=0x00007fffc2ebe530,  free space=1013k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x7add04]  GraphBuilder::withfield(int)+0x444
V  [libjvm.so+0x7b4ead]  GraphBuilder::iterate_bytecodes_for_block(int)+0x6dd
V  [libjvm.so+0x7b6b6d]  GraphBuilder::iterate_all_blocks(bool)+0x9d
V  [libjvm.so+0x7b2a0d]  GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0xb0d
V  [libjvm.so+0x7b326f]  GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0x18f
V  [libjvm.so+0x7b4046]  GraphBuilder::invoke(Bytecodes::Code)+0xcd6
V  [libjvm.so+0x7b4e3b]  GraphBuilder::iterate_bytecodes_for_block(int)+0x66b
V  [libjvm.so+0x7b6b59]  GraphBuilder::iterate_all_blocks(bool)+0x89
V  [libjvm.so+0x7b7e9f]  GraphBuilder::GraphBuilder(Compilation*, IRScope*)+0x67f
V  [libjvm.so+0x7c824d]  IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool)+0x41d
V  [libjvm.so+0x7c8454]  IR::IR(Compilation*, ciMethod*, int)+0xc4
V  [libjvm.so+0x78a06f]  Compilation::build_hir() [clone .part.0]+0x22f
V  [libjvm.so+0x78ec36]  Compilation::compile_java_method()+0x1b6
V  [libjvm.so+0x78fb10]  Compilation::compile_method()+0x1d0
V  [libjvm.so+0x79058a]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x3ca
V  [libjvm.so+0x791ac3]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1a3
V  [libjvm.so+0xaf6af8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc88
V  [libjvm.so+0xaf78b8]  CompileBroker::compiler_thread_loop()+0x668
V  [libjvm.so+0x19f6b3a]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x19fee80]  Thread::call_run()+0x100
V  [libjvm.so+0x16b91d4]  thread_native_entry(Thread*)+0x104
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w5i3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-23 03:52;dsimms;Trying to inline an invoke_static to a method containing a withfield, and the offset is trashy...C1 missing field resolution via this code path ?;;;","2022-02-24 10:28;fparain;The field to be updated by the withfield bytecode is inaccessible from the current method. In this case, C1 should not try to generate the code performing the copy-and-update but instead insert a deoptimization point because the compiled code doesn't handle illegal access errors.;;;","2022-02-25 06:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/659
Date: 2022-02-25 14:41:46 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Update Xerces2 Java to Version 2.12.2,JDK-8282280,5069147,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,joehw,joehw,joehw,2022-02-22 16:25,2023-04-24 05:59,2023-10-01 09:57,2022-05-17 16:47,,,,,,,,,,19,xml,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,"Updating the JDK to Xerces 2.12.2.

Xerces 2.12.2 is a bug fix release. See details below.


Bugs that apply to the JDK (Xerces distribution without Schema 1.1):

    XERCESJ-1737, XERCESJ-1729, XERCESJ-1731

    Note that JDK has fixed the issue as reported in XERCESJ-1737 in JDK 18. 


Bugs not applicable to the JDK:

    Schema 1.1 specific bug fixes: XERCESJ-1727, XERCESJ-1732, XERCESJ-1726, XERCESJ-1730

    Build or distribution bug (maven, Xerces distribution): XERCESJ-1735, XERCESJ-1722

",,,,,,,,,,,JDK-8289684,JDK-8289681,JDK-8290508,JDK-8290769,JDK-8290770,JDK-8289680,JDK-8290810,,,,,,,,,,,,,,,,,,,,,JDK-8212214,,,,,,,,,,JDK-8242470,JDK-8270646,JCK-7317898,JDK-8306807,JDK-8298708,,JCK-7317710,JDK-8144117,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w5f7:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,Verified,,"2022-05-16 12:30;joehw;The update fixes JDK-8144117.;;;","2022-05-16 12:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8732
Date: 2022-05-16 19:34:11 +0000;;;","2022-05-17 17:08;dukebot;Changeset: 72bd41b8
Author:    Joe Wang <joehw@openjdk.org>
Date:      2022-05-18 00:05:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/72bd41b844e03da4bcb19c2cb38d96975a9ebceb
;;;","2022-07-05 06:03;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
One of the recurring updates of external software.
Clean backport.
Test passes.  SAP nightly testing passed.
Some jck tests (xml_schema/msData/datatypes/Facets/Schemas/jaxp/) have been 
excluded officially to allow this backport.;;;","2022-07-05 06:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/528
Date: 2022-07-05 13:04:45 +0000;;;","2022-07-20 01:22;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
One of the recurring updates of external software.
Clean backport.
Test passes. SAP nightly testing passed.
Some jck tests (xml_schema/msData/datatypes/Facets/Schemas/jaxp/) have been
excluded officially to allow this backport. 
SAP nightly testing passed.;;;","2022-07-20 01:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1245
Date: 2022-07-20 08:22:17 +0000;;;","2022-07-20 07:32;yan;Fix request (13u, 15u)

backport this for consistency and parity with major releases.
Clean backport in both releases.
Tier2 tests run fine.;;;","2022-07-20 07:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/373
Date: 2022-07-20 14:33:27 +0000;;;","2022-07-20 07:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/237
Date: 2022-07-20 14:33:37 +0000;;;",,,,,,,,,,,,,,,,,,,,
Interpret case-insensitive string locale independently,JDK-8282279,5069144,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-02-22 15:39,2023-05-19 02:24,2023-10-01 09:57,2022-02-23 07:45,17,,,,,,,,,19,security-libs,,0,amazon-interest,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,,"The String.toUpperCase() or String.toLowerCase() method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently.

See https://www.ivi.co/java/2011/07/07/4878.html for more details.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,2012-09-16 02:55,2012-07-17 22:51,,,,generic,,,,,"0|i2w5ej:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,,,"2022-02-22 16:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7583
Date: 2022-02-23 00:05:58 +0000;;;","2022-02-23 07:45;dukebot;Changeset: 340a35d8
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-02-23 15:43:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/340a35d8358456620954ae0c668cf3d1d617bb88
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/awt/Robot Screen Capture tests fail after 8280861,JDK-8282270,5069129,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mkartashev,prr,prr,2022-02-22 09:42,2022-06-17 15:02,2023-10-01 09:57,2022-03-21 00:22,19,,,,,,,,,19,client-libs,,0,problemlist,regression,regression_8280861,tier4,,,,,,,,,,,,,,,"java/awt/Robot/HiDPIScreenCapture/HiDPIRobotScreenCaptureTest.java often on Windows

Log from a Windows 10 system
Creating screen capture of java.awt.Rectangle[x=83,y=97,width=400,height=300]
Checking rectangle java.awt.Rectangle[x=0,y=0,width=200,height=150] to have color java.awt.Color[r=0,g=255,b=0]
Checking color at java.awt.Point[x=5,y=5] to be equal to java.awt.Color[r=0,g=255,b=0]... OK
Checking color at java.awt.Point[x=195,y=5] to be equal to java.awt.Color[r=0,g=255,b=0]... OK
Checking color at java.awt.Point[x=100,y=75] to be equal to java.awt.Color[r=0,g=255,b=0]... OK
Checking color at java.awt.Point[x=5,y=145] to be equal to java.awt.Color[r=0,g=255,b=0]... OK
Checking color at java.awt.Point[x=195,y=145] to be equal to java.awt.Color[r=0,g=255,b=0]... OK
Checking rectangle java.awt.Rectangle[x=200,y=0,width=200,height=150] to have color java.awt.Color[r=0,g=0,b=255]
Checking color at java.awt.Point[x=205,y=5] to be equal to java.awt.Color[r=0,g=0,b=255]... OK
Checking color at java.awt.Point[x=395,y=5] to be equal to java.awt.Color[r=0,g=0,b=255]... Mismatch: found java.awt.Color[r=0,g=0,b=0] instead. Check image.png.
----------System.err:(12/735)----------
java.lang.RuntimeException: Wrong image color!
	at HiDPIRobotScreenCaptureTest.checkRectColor(HiDPIRobotScreenCaptureTest.java:146)
	at HiDPIRobotScreenCaptureTest.main(HiDPIRobotScreenCaptureTest.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Wrong image color!
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Wrong image color!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280861,,,,,,"2022-03-09 03:04;aivanov;image.png;https://bugs.openjdk.org/secure/attachment/98239/image.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w5b7:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-02-22 09:45;prr;Another failure - from an Ubuntu 18.04 system - seen twice so far.
The failing test is java/awt/Robot/HiDPIScreenCapture/ScreenCaptureGtkTest.java 
----------System.out:(4/306)----------
command: main -Djdk.gtk.version=2 -Dsun.java2d.uiScale=3 ScreenCaptureGtkTest
reason: User specified action: run main/othervm -Djdk.gtk.version=2 -Dsun.java2d.uiScale=3 ScreenCaptureGtkTest 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 0.908
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(1/128)----------
Checking color at 83, 78 to be equal to java.awt.Color[r=0,g=255,b=0]... Mismatch: found java.awt.Color[r=54,g=52,b=58] instead
----------System.err:(13/785)----------
Gtk-Message: 21:54:37.322: Failed to load module ""canberra-gtk-module""
java.lang.RuntimeException: Wrong screen pixel color
	at ScreenCaptureGtkTest.checkPixelColors(ScreenCaptureGtkTest.java:104)
	at ScreenCaptureGtkTest.main(ScreenCaptureGtkTest.java:92)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Wrong screen pixel color
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Wrong screen pixel color;;;","2022-02-22 12:03;mkartashev;java/awt/Robot/HiDPIScreenCapture/HiDPIRobotScreenCaptureTest.java
Since the Windows failures cannot possibly have their origin in the fix made, the test is apparently either exposes an existing bug in the Windows Robot or is bumping against a peculiarity of that platform and is best to get reverted back to its original form that didn't fail.

java/awt/Robot/HiDPIScreenCapture/ScreenCaptureGtkTest.java 
The coordinates in the log (83, 78) are higher up than the test suggests (83, 97) and I've seen similar failures on Ubuntu 20.04 when the coordinates were set to (0, 0). The color picked matched perfectly with the bar drawn at the top of the screen. I believe it's best to place the test pixels towards the center of the window to avoid desktop elements interference. The test needs to be corrected in that direction.;;;","2022-02-22 12:09;prr;Whatever the reason, they are now failing too often in CI testing.
I am going to problem list them on the specific platforms on which they fail under https://bugs.openjdk.java.net/browse/JDK-8282276
If there's a fix (revertting the test or anything else) then the problem list will need to be updated to de-list them. 
I also suggest that any fix be put through CI testing at least a couple of times before it is approved and pushed;;;","2022-02-24 06:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7613
Date: 2022-02-24 14:32:39 +0000;;;","2022-03-09 03:09;aivanov;I attached the image captured on the Windows host where the test failed.

The frame didn't fit on the screen. According to the screenshot of the entire screen, the resolution on the host was 1024×768. It can't fit the frame which is larger than screen 1200×600, especially when it is positioned at 83*3=248, 97*2=194.

As such, the failure on Windows has nothing to do with JDK-8280861, it's just a coincidence. However, the change in the coordinates of the frame may have contributed to the failure.

https://github.com/openjdk/jdk/pull/7613#issuecomment-1062803401;;;","2022-03-09 03:21;aivanov;On Windows, all the failures occurred on one host.
On Linux, all the failures occurred on one host. The test java/awt/Robot/HiDPIScreenCapture/ScreenCaptureGtkTest.java doesn't save the captured image, there's no way to diagnose what went wrong.;;;","2022-03-21 00:22;dukebot;Changeset: 8a2d5ab0
Author:    Maxim Kartashev <maxim.kartashev@jetbrains.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-03-21 07:21:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8a2d5ab07e6a1668f3e3918bdc8a30bd28a8f93b
;;;",,,,,,,,,,,,,,,,,,,,,,,
Invalid generic signature for redefined classes,JDK-8282241,5068324,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,amenkov,webbuggrp,webbuggrp,2022-02-11 07:52,2022-03-30 17:56,2023-10-01 09:57,2022-03-23 11:34,17,,,,,,,,,19,hotspot,,0,dcsad,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
MacOS 11.6.3 (x64)/ Linux Debian 9 (x64 VM)
Java: Temurin 17.0.2 / Oracle 17.0.2

A DESCRIPTION OF THE PROBLEM :
At New Relic we instrument classes to send telemetry data to our servers. We use ASM for bytecode manipulation.

We instrument CompletableFuture, and since Java 17 it has returned an improper value when Class#getGenericSignature0() is called.
This works fine when the running on Java 16 or lower.

The following has a repro app and more information on the investigation done.
https://github.com/meiao/genericSignature-jdk17-bug

Note that the source code added in the ticket will not reproduce the issue by itself. Use the repro app that will download the New Relic agent and execute the app in a way that the bug will occur.

REGRESSION : Last worked in version 16

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Modify CompletableFuture using a Java agent.
Using reflection, call Class#getGenericSignature0() on CompletableFuture.class.
Check the returned String.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/concurrent/Future<TT;>;Ljava/util/concurrent/CompletionStage<TT;>;
ACTUAL -
java/util/concurrent/CompletableFuture

---------- BEGIN SOURCE ----------
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.reflect.Type;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class Tester {

    public static void main(String... args) throws Throwable {

        MethodHandles.Lookup lookup = MethodHandles.lookup();
        MethodHandles.Lookup classLookup = MethodHandles.privateLookupIn(Class.class, lookup);
        MethodHandle getGenericSignature0 = classLookup.findVirtual(Class.class, ""getGenericSignature0"", MethodType.methodType(String.class));
        Object genericSignature = getGenericSignature0.invoke(CompletableFuture.class);

        System.out.println();
        System.out.println(""getGenericSignature0: "" + genericSignature);
        System.out.println(""expected: <T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/concurrent/Future<TT;>;Ljava/util/concurrent/CompletionStage<TT;>;"");
        System.out.println();

        Type type = Tester.class.getDeclaredMethod(""testing"").getGenericReturnType();
        System.out.println(""TYPE: "" + type);
    }

    public CompletableFuture<List<String>> testing() {
        return null;
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Not modifying the CompletableFuture class. Which is not desirable.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283597,,,,,,,JDK-8283587,,,,,,JDK-8267555,,,,,,"2022-02-22 08:49;adev;JDK-11.log;https://bugs.openjdk.org/secure/attachment/98048/JDK-11.log","2022-02-22 08:49;adev;JDK-16.log;https://bugs.openjdk.org/secure/attachment/98046/JDK-16.log","2022-02-22 08:49;adev;JDK-17.log;https://bugs.openjdk.org/secure/attachment/98047/JDK-17.log","2022-02-22 08:49;adev;genericSignature-jdk17-bug-main.zip;https://bugs.openjdk.org/secure/attachment/98045/genericSignature-jdk17-bug-main.zip",,,,,,,,,,,generic,,,,,,,17,,generic,,,,,"0|i2w0df:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,Fix failed,,"2022-02-22 08:54;adev;I tried to reproduce the issue. Execute run.sh to minimize the effort to reproduce the issue.
I got exception when I tried with JDK 17.0.2. See attached logs.

Following are my observation:
JDK 11 - pass (correct output - TYPE: java.util.concurrent.CompletableFuture<java.util.List<java.lang.String>>)
JDK 16 - pass (correct output - TYPE: java.util.concurrent.CompletableFuture<java.util.List<java.lang.String>>)
JDK 17 - fails (exception occured Exception in thread ""main"" java.lang.reflect.GenericSignatureFormatError: Signature Parse error: expected a class type)

This is a regression.;;;","2022-02-22 15:32;dholmes;Looking at the history I would have to suspect JDK-8267555 may be involved.;;;","2022-02-25 04:01;amenkov;Not able to reproduce with jdk19 and 18:

java version ""19-internal"" 2022-09-20
Java(TM) SE Runtime Environment (fastdebug build 19-internal+0-2022-02-09-1159095.AMENKOV...)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 19-internal+0-2022-02-09-1159095.AMENKOV..., mixed mode, sharing)
----------

----------

getGenericSignature0: <T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/concurrent/Future<TT;>;Ljava/util/concurrent/CompletionStage<TT;>;
expected: <T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/concurrent/Future<TT;>;Ljava/util/concurrent/CompletionStage<TT;>;
OK
TYPE: java.util.concurrent.CompletableFuture<java.util.List<java.lang.String>>


openjdk version ""18"" 2022-03-22
OpenJDK Runtime Environment (build 18+36-2087)
OpenJDK 64-Bit Server VM (build 18+36-2087, mixed mode, sharing)
----------
Java version is: 18. This version of the New Relic Agent does not support versions of Java greater than 17.
----------

getGenericSignature0: <T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/concurrent/Future<TT;>;Ljava/util/concurrent/CompletionStage<TT;>;
expected: <T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/concurrent/Future<TT;>;Ljava/util/concurrent/CompletionStage<TT;>;
OK
TYPE: java.util.concurrent.CompletableFuture<java.util.List<java.lang.String>>
;;;","2022-02-25 04:03;amenkov;But the message ""Java version is: 18. This version of the New Relic Agent does not support versions of Java greater than 17"" looks confusing.
Maybe for jdk18 & jdk19 the agent doesn't instrument classes.
Trying to develop small test to reproduce the issue;;;","2022-02-25 10:03;amenkov;Developed small reproducer. jdk19 is affected.;;;","2022-03-03 07:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7676
Date: 2022-03-03 15:07:05 +0000;;;","2022-03-07 00:55;pnarayanaswa;Additional Information from submitter:
===========================
To run the New Relic Java agent with Java 18+, add the following to the java command:
-Dnewrelic.config.experimental_runtime=true;;;","2022-03-23 11:34;dukebot;Changeset: f0177395
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2022-03-23 18:31:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f01773956fbc092b00c18392735a020ca05257ed
;;;",,,,,,,,,,,,,,,,,,,,,,
jextract crashes when a Java keyword is used in as a function pointer typedef parameter name,JDK-8282235,5069091,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-02-22 07:00,2022-02-22 09:47,2023-10-01 09:57,2022-02-22 09:47,repo-panama,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,"File: test.h

typedef void func(int abstract);

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2w52r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-02-22 08:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/653
Date: 2022-02-22 16:43:41 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Win] GetMousePositionWithPopup test fails due to wrong mouse position,JDK-8282232,5069083,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,vprovodin,vprovodin,2022-02-22 04:22,2023-05-08 14:30,2023-10-01 09:57,2023-05-02 16:24,17,18,19,,,,,,,21,client-libs,,0,sn_141,sn_143,,,,,,,,,,,,,,,,,"The test java/awt/Mouse/GetMousePositionTest/GetMousePositionWithPopup.java fails on Windows running with java options ""-Dsun.java2d.uiScale.enabled=true -Dsun.java2d.uiScale=2"" as follows:

====================8<--------------------

#section:main
----------messages:(5/216)----------
command: main GetMousePositionWithPopup
reason: User specified action: run main GetMousePositionWithPopup 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 0.83
----------configuration:(3/43)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(28/2375)----------
java.lang.RuntimeException: Wrong position reported. Should be [50, 50] but was [29, 29]
	at GetMousePositionWithPopup$3$1.mouseMoved(GetMousePositionWithPopup.java:101)
	at java.desktop/java.awt.Component.processMouseMotionEvent(Component.java:6665)
	at java.desktop/java.awt.Component.processEvent(Component.java:6389)
	at java.desktop/java.awt.Container.processEvent(Container.java:2266)
	at java.desktop/java.awt.Window.processEvent(Window.java:2056)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4995)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2324)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2780)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4827)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:775)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:97)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:747)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:744)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Wrong position reported. Should be [50, 50] but was [29, 29]

====================8<--------------------

The issue was observed on openjdk 19-ea+10-582. It was also observed on 17 and 18

Steps to reproduce:
> java -jar jtreg\lib\jtreg.jar -testjdk:openjdk\jdk-19 -javaoptions:""-Dsun.java2d.uiScale.enabled=true -Dsun.java2d.uiScale=2"" test\jdk\java\awt\Mouse\GetMousePositionTest\GetMousePositionWithPopup.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-02-22 04:22;vprovodin;GetMousePositionWithPopup_win.jtr;https://bugs.openjdk.org/secure/attachment/98043/GetMousePositionWithPopup_win.jtr",,,,,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,"0|i2w50z:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-04 11:31;honkar;Replicable on mainline (21).;;;","2023-04-05 12:18;honkar;The above issue is being caused due to race condition - the Robot's 3rd mouse move is processed after the 2nd Frame's mouseMoved event is already processed causing the test to fail. Fix in-progress.;;;","2023-04-06 16:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13380
Date: 2023-04-06 23:50:26 +0000;;;","2023-05-02 16:24;dukebot;Changeset: 76991c81
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-05-02 23:22:17 +0000
URL:       https://git.openjdk.org/jdk/commit/76991c8129a6599a3dfaa0cfdc77a23014a02b35
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
x86-32: runtime call to SharedRuntime::ldiv corrupts registers,JDK-8282231,5069082,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aph,aph,aph,2022-02-22 03:47,2022-06-19 16:47,2023-10-01 09:57,2022-02-23 02:18,11,17,18,19,,,,,,19,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-19,,,,,,,,"In x86_32.ad, a call to SharedRuntime::ldiv doesn't save all of the call-clobbered registers. Also SharedRuntime::lrem.",,,,,,,,,,,JDK-8284934,JDK-8283835,JDK-8284095,JDK-8284265,JDK-8284137,JDK-8288711,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282004,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2w50r:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-22 05:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7575
Date: 2022-02-22 13:34:03 +0000;;;","2022-02-23 02:18;dukebot;Changeset: ecd85e6f
Author:    Andrew Haley <aph@openjdk.org>
Date:      2022-02-23 10:15:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ecd85e6f0f8906ad1e8aa0a53bf499e8c969ba73
;;;","2022-02-23 15:50;dlong;ILW = random crashes; seen in builds, x86 only; no workaround = MMH = P3;;;","2022-03-29 06:24;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. GHA tests have passed.;;;","2022-03-29 06:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/301
Date: 2022-03-29 13:27:44 +0000;;;","2022-03-29 08:18;thartmann;Fix Request (JDK 18u)
Fixes a register corruption. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 08:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/65
Date: 2022-03-29 15:18:13 +0000;;;","2022-04-06 20:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1017
Date: 2022-04-07 02:56:24 +0000;;;","2022-04-07 19:21;andrew;Fix Request [11u]:

Same issue with register corruption is present on 11u and causes builds to fail when using GCC 12, as DivL does not save the XMM registers.  The backport has been in our Fedora RPMs for some time in order to fix this build failure and we've not seen any issues.  Backport was mostly clean, bar the copyright header change, and has been reviewed by Martin Doerr; https://github.com/openjdk/jdk11u-dev/pull/1017;;;","2022-05-13 09:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/210
Date: 2022-05-13 16:27:35 +0000;;;","2022-06-15 09:47;andrew;Fix Request [15u]:

Same issue with register corruption is present all the way back to 8u. Backport was mostly clean, bar the copyright header change, and has been reviewed by yan: https://github.com/openjdk/jdk15u-dev/pull/210;;;",,,,,,,,,,,,,,,,,,,
contentType should not be a PKCS7's member,JDK-8282220,5069066,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2022-02-21 19:56,2022-02-23 17:52,2023-10-01 09:57,2022-02-22 01:39,17,18,,,,,,,,19,security-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,contentType should be a local variable because it is only used in method parse().,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w4x7:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,,,"2022-02-21 22:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7568
Date: 2022-02-22 06:03:33 +0000;;;","2022-02-22 01:39;dukebot;Changeset: b95310b0
Author:    John Jiang <jjiang@openjdk.org>
Date:      2022-02-22 09:35:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b95310b0908037c6743b937ae43d7bc97e1fb770
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/java/lang/ProcessBuilder/Basic.java fails on AIX,JDK-8282219,5069065,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,itakiguchi,itakiguchi,itakiguchi,2022-02-21 18:25,2023-02-28 03:53,2023-10-01 09:57,2022-02-25 19:35,18,19,,,,,,,,19,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,noreg-self,,,,,,,,,,,"Run jtreg:jdk/java/lang/ProcessBuilder/Basic.java on AIX.

The test fails with following exception:
-----------------------
java.lang.Exception: Stack trace
        at java.base/java.lang.Thread.dumpStack(Thread.java:1375)
        at Basic.fail(Basic.java:2825)
        at Basic.fail(Basic.java:2826)
        at Basic.equal(Basic.java:2832)
        at Basic.realMain(Basic.java:1886)
        at Basic.main(Basic.java:2835)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:828)
Incorrect handling of envstrings containing NULs
java.lang.Exception: Stack trace
        at java.base/java.lang.Thread.dumpStack(Thread.java:1375)
        at Basic.fail(Basic.java:2825)
        at Basic.fail(Basic.java:2826)
        at Basic.check(Basic.java:2829)
        at Basic.realMain(Basic.java:1940)
        at Basic.main(Basic.java:2835)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:828)
java.lang.AssertionError: Some tests failed
        at Basic.main(Basic.java:2837)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:828)
-----------------------

According to my investigation, this issue was happened after following change was applied.
JDK-8272600: (test) Use native ""sleep"" in Basic.java

test.nativepath value was added into AIX's LIBPATH during running this testcase.
On AIX, test.nativepath value should be removed from LIBPATH value before comparing the values.
",,,,,,,,,,,JDK-8286899,JDK-8286777,JDK-8282472,JDK-8300100,JDK-8303338,JDK-8299572,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282239,,,,,JDK-8272600,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,b16,18,,aix,,,,,"0|i2w4wz:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-02-22 04:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7574
Date: 2022-02-22 12:17:59 +0000;;;","2022-02-25 19:35;dukebot;Changeset: c5c6058f
Author:    Ichiroh Takiguchi <itakiguchi@openjdk.org>
Date:      2022-02-26 03:33:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c5c6058fd57d4b594012035eaf18a57257f4ad85
;;;","2022-02-27 22:25;itakiguchi;Fix request [17u]

JDK-8272600 was ported to 17.0.3.
java/lang/ProcessBuilder/Basic.java was failed on 17u on AIX.
I think this one is no risk, only a test change.
Clean backport.;;;","2022-02-28 04:07;goetz;Can you please make a PR against jdk17u-dev?;;;","2022-02-28 06:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/182
Date: 2022-02-28 14:22:37 +0000;;;","2022-05-07 08:44;itakiguchi;Fix request [18u]

JDK-8272600 happens on jdk18
java/lang/ProcessBuilder/Basic.java was failed on 17u on AIX.
I think this one is no risk, only a test change.
Clean backport. ;;;","2022-05-07 08:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/124
Date: 2022-05-07 15:46:57 +0000;;;","2023-02-24 03:57;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
No risk, only a test change.
I had to do a trivial resolve, marked as clean.
Test passes.  SAP nightly testing passed.;;;","2023-02-24 04:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1773
Date: 2023-02-24 11:54:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,
C1: Missing side effects of dynamic class loading during constant linkage,JDK-8282218,5069061,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vlivanov,vlivanov,vlivanov,2022-02-21 13:48,2022-05-17 02:03,2023-10-01 09:57,2022-05-06 16:11,19,,,,,,,,,19,hotspot,,0,c1,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,"(JDK-8282194 covers the special case of dynamic constants.)

C1 handles unresolved constants by performing constant resolution at runtime and then putting the constant value into the generated code by patching it. But it treats the not-yet-resolved value as a pure constant without any side effects. 

It's not the case for constants which trigger class loading using custom class loaders. (All non-String constants do that.)

There are no guarantees that there are no side effects during class loading, so C1 has to be conservative.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282194,,,,,,"2022-02-21 13:49;vlivanov;CustomCLTest.java;https://bugs.openjdk.org/secure/attachment/98040/CustomCLTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w4w3:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-21 13:49;vlivanov;$ java -Xcomp -XX:TieredStopAtLevel=1 -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,*Test::run -XX:+PrintCompilation -XX:-PrintIR CustomCLTest
TRACE: CustomCLTest$Test
0
    499   14    b  1       CustomCLTest$Test::run (35 bytes)
[null, 0]
TRACE: CustomCLTest$Test$T
[class CustomCLTest$Test$T, 0]
1
;;;","2022-02-21 13:52;vlivanov;        public static Object[] run(boolean b) {
            int t1 = COUNTER;
            Class<?> c = null;
            if (b) {
                c = T.class;
            }
            int t2 = COUNTER;
            return new Object[] { c, t2 - t1};
        }


B0 (SV) [0, 7] -> B5 B1 dom B4 pred: B4
empty stack
inlining depth 0
__bci__use__tid____instr____________________________________
  0    1    a4     <instance 0x000000014781c918 klass=java/lang/Class>
. 0    8    i5     a4._112 (I) COUNTER
  4    3    a6     null
  7    2    i7     0
. 7    0     8     if i3 == i7 then B5 else B1

B5 [13, 13] -> B2 dom B0 pred: B0
empty stack
inlining depth 0
__bci__use__tid____instr____________________________________
. 13   0     32    goto B2

B1 (V) [10, 13] -> B2 dom B0 pred: B0
empty stack
inlining depth 0
__bci__use__tid____instr____________________________________
. 10   1    a9     <unloaded object 0x000000013000add0>
. 13   0     10    goto B2

B2 (V) [13, 34] dom B0 pred: B5 B1
Locals:
 1  i5
 2  a11 [ a6 a9] 


empty stack
inlining depth 0
__bci__use__tid____instr____________________________________
  17   1    i14    2
. 18   3    a15    new object array [i14] java/lang/Object
. 24   0    a19    a15[i7] := a11 (L)
  26   1    i20    1
  29   1    i21    i5 - i5 // t2 - t1
. 30   1    a22    invokestatic(i21)
                   java/lang/Integer.valueOf(I)Ljava/lang/Integer;
                   stack [0:a15, 1:a15, 2:i20]
. 33   0    a25    a15[i20] := a22 (L)
. 34   0    a26    areturn a15
;;;","2022-02-22 00:30;chagedorn;ILW = Possible side effects of unresolved constants resulting in undefined behavior, low?, disable C1 compilation of affected method = HLM = P3;;;","2022-02-24 05:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7612
Date: 2022-02-24 13:51:18 +0000;;;","2022-05-06 16:11;dukebot;Changeset: 5212535a
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-05-06 23:09:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5212535a276a92d96ca20bdcfccfbce956febdb1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Handle failures when initializing SystemLookup,JDK-8282215,5069058,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-02-21 08:53,2022-02-22 05:02,2023-10-01 09:57,2022-02-22 05:02,repo-panama,,,,,,,,,,tools,,0,foreign-memaccess+abi,foreign-preview,,,,,,,,,,,,,,,,,"If SystemLookup fails to initialize, clients might get spurious exceptions; these are caused by the fact that `SystemLookup` needs to load some native libraries (e.g. ucrtbase on windows). If that fails, an exception is thrown. It would be better to just return an empty lookup - otherwise clients might not be able to use the linker (even if they don't care about looking up symbols in the standard library).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w4vf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-02-22 02:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/649
Date: 2022-02-22 10:39:06 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SegmentAllocator array factories should use varargs,JDK-8282211,5069054,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jboes,mcimadamore,mcimadamore,2022-02-21 08:20,2022-03-08 00:41,2023-10-01 09:57,2022-03-08 00:41,repo-panama,,,,,,,,,repo-panama,tools,,0,foreign-preview,,,,,,,,,,,,,,,,,,"SegmentAllocator factories such as:

default MemorySegment allocateArray(ValueLayout.OfByte elementLayout, byte[] array);

Should accept a trailing varargs instead - so as to be more usable in cases where the array elements are known statically.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w4uj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-03-07 06:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/664
Date: 2022-03-07 14:18:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Relax policy for restricted method invocation,JDK-8282210,5069053,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jboes,mcimadamore,mcimadamore,2022-02-21 08:18,2022-02-25 00:24,2023-10-01 09:57,2022-02-25 00:24,repo-panama,,,,,,,,,repo-panama,tools,,0,foreign-memaccess+abi,foreign-preview,,,,,,,,,,,,,,,,,"After some feedback, it seems like it would be useful for the foreign API to support a transitional mode where access to restricted methods is allowed (with runtime warnings) when the --enable-native-access flag is not specified. If the flag is specified, the same strict behavior should apply. This relaxation is really only meant to be used by clients/applications that cannot (easily) update the java command line.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w4ub:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-02-24 03:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/655
Date: 2022-02-24 11:13:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ShouldNotReachHere() reached by AsyncGetCallTrace after JDK-8280422,JDK-8282200,5069040,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdoerr,mdoerr,mdoerr,2022-02-21 06:38,2023-05-21 23:47,2023-10-01 09:57,2022-02-24 06:34,19,,,,,,,,,19,hotspot,,0,amazon-interest,,,,,,,,,,,,,,,,,,"The observation of JDK-8280422 does not hold true for AsyncGetCallTrace.

The enhancement JDK-8280422 assumes that ""thread_from_jni_environment can never return NULL"", this is not true when taking AsyncGetCallTrace into consideration.

Profiling a debug build of the JDK running the dacapo benchmark tomcat with async-profiler, results in the following error (from the generated hs_err file):

```
# A fatal error has been detected by the Java Runtime Environment:
#
# Internal Error (../../src/hotspot/share/runtime/thread.hpp:1327), pid=1320, tid=36355
# Error: ShouldNotReachHere()
```

This is related to the beginning of AsyncGetCallTrace:
```
void AsyncGetCallTrace(ASGCT_CallTrace *trace, jint depth, void* ucontext) {
JavaThread* thread;

if (trace->env_id == NULL ||
(thread = JavaThread::thread_from_jni_environment(trace->env_id)) == NULL ||
thread->is_exiting()) {

// bad env_id, thread has exited or thread is exiting
trace->num_frames = ticks_thread_exit; // -8
return;
}
```

Before the PR https://git.openjdk.java.net/jdk/pull/7193 related to the mentioned enhancement, this check was possible, but with the change the JVM aborts in the `thread_from_jni_environment` when `is_exiting()` is true. Therefore this check is superflous. See discussion in this PR. Please comment there as Johannes Bechberger cannot do it in JBS, yet.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280422,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w4rf:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-21 06:40;mdoerr;On behalf of Johannes Bechberger.;;;","2022-02-21 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7559
Date: 2022-02-21 14:43:27 +0000;;;","2022-02-21 12:41;dholmes;Please provide a full hs_err log for analysis. It should not be possible to reach the `ShouldNotReachHere` obviously so if we can reach it then something needs to change. But I need the hs_err file to see how this situation arises. The only way I can think it may be possible is if the JNIEnv for another thread is being stored away somewhere and then used as a proxy for getting the JavaThread at some later arbitrary point time. Such a usage is unsafe unless a ThreadsListHandle is ensuring the target thread cannot terminate and get deleted.;;;","2022-02-21 16:28;dholmes;Never mind about the hs_err log - thanks. I've researched AGCT and see the problem. The ShouldNotReachHere() should be deleted, the comment updated and the AGCT code tweaked. I will prepare an alternate draft PR.

AGCT is always called on the current thread, so is safe in that sense, but it is called via a signal handler and so can occur at any point during the thread's lifetime - including somewhere on the path from is_exiting -> is_terminated -> actually deleted. So the claim we could never encounter a terminated thread in thread_from_jni_environment, unless the VM had terminated was wrong, and the ShouldNotReachHere() must be removed.;;;","2022-02-24 06:34;dukebot;Changeset: 231e48fa
Author:    Johannes Bechberger <johannes.bechberger@sap.com>
Committer: Martin Doerr <mdoerr@openjdk.org>
Date:      2022-02-24 14:32:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/231e48fa63aeb4e35c7c948f958695d62b7157ce
;;;","2022-09-23 06:34;jbechberger;Fix request [17u]

This change should be backported as JDK-8280422 (which it fixes) is also backported.
Minimal changes (replaced ""::cast"" with a C-style cast as the ""cast"" method doesn't seem to be present in JDK17).;;;","2023-05-19 02:02;shade;Hey Johannes, are you planning to backport this to 17u? There should be a PR for jdk17u-dev and proper tag, current one is `jdk17-fix-request`, without `u`.;;;","2023-05-19 02:10;jbechberger;I did not? I have this branch https://github.com/parttimenerd/jdk17u-dev/tree/parttimenerd_8282200 laying around and thought that I'd merged it. But I can definitely create a PR if I get a fix-request-yes.;;;","2023-05-19 03:33;jbechberger;I might be wrong, but ShouldNotReachHere was never present in JDK17, so no need to backport this issue. My fix request was probably a mistake.;;;","2023-05-21 23:47;goetz;Hi [~jbechberger], please first make a PR and get it ready, and then tag the issue. I remove the tag in the meantime.;;;",,,,,,,,,,,,,,,,,,,,
C1: Missing side effects of dynamic constant linkage ,JDK-8282194,5069033,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,vlivanov,vlivanov,2022-02-21 05:10,2022-05-11 15:29,2023-10-01 09:57,2022-02-23 02:18,18,19,,,,,,,,19,hotspot,,0,c1,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,C1 handles unresolved dynamic constants by performing constant resolution at runtime and then putting the constant value into the generated code by patching it. But it treats the not-yet-resolved value as a pure constant without any side effects. It's not the case for dynamic constants which are produced by a user-defined bootstrap method and there are no guarantees that it doesn't have any side effects.,,,,,,,,,,,JDK-8284427,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281942,,JDK-8282218,JDK-8280473,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w4pv:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-21 05:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7557
Date: 2022-02-21 13:20:08 +0000;;;","2022-02-22 00:29;chagedorn;ILW = Possible side effects of unresolved dynamic constants resulting in undefined behavior, low?, disable C1 compilation of affected method = HLM = P3;;;","2022-02-23 02:18;dukebot;Changeset: 93320717
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-02-23 10:17:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9332071784b7150512f7e27b07c290a356d43c2e
;;;","2022-04-04 00:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/88
Date: 2022-04-04 06:57:40 +0000;;;","2022-04-04 00:09;thartmann;Fix Request (JDK 18u)
Fixes incorrect execution of Java code. The fix is low risk and applies cleanly (except a minor conflict due to changes to surrounding code). Tier 1-3 testing is running for JDK 18u.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Typo in javadoc of java.time.format.DateTimeFormatter#getDecimalStyle,JDK-8282190,5069029,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2022-02-21 04:38,2022-02-23 17:52,2023-10-01 09:57,2022-02-21 17:42,17,,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,"The DateTimeFormatter#getDecimalStyle javadoc currently states:
...
     * @return the locale of this formatter, not null

This should instead say something like:

     * @return the DecimalStyle of this formatter, not null",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w4oz:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2022-02-21 04:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7556
Date: 2022-02-21 12:42:37 +0000;;;","2022-02-21 17:42;dukebot;Changeset: e0b49629
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-02-22 01:39:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e0b49629e95c98aabe8b75ec2f7528e7fb6dcffc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unused static field MathContext.DEFAULT_DIGITS,JDK-8282188,5069026,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2022-02-21 04:03,2022-03-02 17:19,2023-10-01 09:57,2022-02-24 03:05,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,"Field {{DEFAULT_DIGITS}} is unused in MathContext class.

    private static final int DEFAULT_DIGITS = 9;

https://github.com/openjdk/jdk/blob/cc7cf81256ed4d74493472017b1c4df20fa2208a/src/java.base/share/classes/java/math/MathContext.java#L61
It is unused at least since initial OpenJDK source upload.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-4851776,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w4ob:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28853e3d,,,,,,,,,"2022-02-21 04:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7538
Date: 2022-02-18 19:07:15 +0000;;;","2022-02-24 03:05;dukebot;Changeset: 3cfffa4f
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-02-24 11:03:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3cfffa4f8e5a0fff7f232130125c549f992b533b
;;;","2022-02-24 09:25;darcy;Looking back into the older histories, the unused field was present since the initial integration of JSR 13 in JDK 5.0 (JDK-4984872).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
CompileBroker::log_metaspace_failure is called from non-Java/compiler threads,JDK-8282172,5069010,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-02-21 01:19,2022-04-07 01:34,2023-10-01 09:57,2022-02-28 05:32,11,17,18,19,,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-11,oracle-triage-19,,,,,,,,,,"In several places in hotspot, we call CompileBroker::log_metaspace_failure(). I believe the intent is to call it from compiler threads only, because it ends up calling: 

  void log_metaspace_failure(const char* reason) {
    ResourceMark rm;
    StringLogMessage lm;
    lm.print(""%4d   COMPILE PROFILING SKIPPED: %s"", -1, reason);
    lm.print(""\n"");
    log(JavaThread::current(), ""%s"", (const char*)lm);
  }

...which would fail the cast in `JavaThread::current()` if current thread is not Java thread (compiler threads are Java threads too).

It clearly manifests on JDK-8282170 test:

12700 breakpoints set
12800 breakpoints set
12900 breakpoints set
13000 breakpoints set
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc: SuppressErrorAt=/thread.hpp:1458
#
# A fatal error has been detected by the Java Runtime Environment:
#
# Internal Error (/home/shade/trunks/jdk/src/hotspot/share/runtime/thread.hpp:1458), pid=889379, tid=889389
# assert(t->is_Java_thread()) failed: incorrect cast to JavaThread


Current thread (0x00007f696c20ba30): VMThread ""VM Thread"" [stack: 0x00007f694f5a5000,0x00007f694f6a5000] [id=889389]

Stack: [0x00007f694f5a5000,0x00007f694f6a5000], sp=0x00007f694f6a3510, free space=1017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V [libjvm.so+0xacfad4] CompilationLog::log_metaspace_failure(char const*)+0x494
V [libjvm.so+0xac84b0] CompileBroker::log_metaspace_failure()+0x20
V [libjvm.so+0x15069e9] Method::build_method_counters(Thread*, Method*)+0x119
V [libjvm.so+0x150851b] BreakpointInfo::set(Method*)+0xfb
V [libjvm.so+0x127d5ea] JvmtiBreakpoint::each_method_version_do(void (Method::*)(int))+0x5a
V [libjvm.so+0x1b342ae] VM_Operation::evaluate()+0x18e
V [libjvm.so+0x1b581f7] VMThread::evaluate_operation(VM_Operation*)+0x1f7
V [libjvm.so+0x1b5925f] VMThread::inner_execute(VM_Operation*)+0x41f
V [libjvm.so+0x1b59425] VMThread::loop()+0xb5
V [libjvm.so+0x1b59548] VMThread::run()+0xb8
V [libjvm.so+0x1a450d4] Thread::call_run()+0x104
V [libjvm.so+0x161b3fc] thread_native_entry(Thread*)+0x10c ",,,,,,,,,,,JDK-8284079,JDK-8283826,JDK-8284058,JDK-8284512,JDK-8284262,,,,,,,,,,,,,,,,,,,,,,,JDK-8282170,,,,,,,,,,,,,,,,JDK-8264149,JDK-8037842,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w4kr:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-21 03:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7555
Date: 2022-02-21 11:22:19 +0000;;;","2022-02-22 00:26;chagedorn;ILW = Assertion failure when logging metaspace failure, only single test, disable compilation logging = HLL = P4;;;","2022-02-28 05:32;dukebot;Changeset: 4e7fb41d
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-02-28 13:29:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4e7fb41dafaf03baabe18ee1dabefed50d69e16d
;;;","2022-03-29 06:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/302
Date: 2022-03-29 13:32:59 +0000;;;","2022-03-29 08:17;thartmann;Fix Request (JDK 18u)
Fixes an assert in the compile broker. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 08:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/64
Date: 2022-03-29 15:16:39 +0000;;;","2022-03-30 02:43;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Nightly tests have passed.;;;","2022-04-06 00:30;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
No risk, only debug coding.
Clean backport.  
SAP nightly testing passed.;;;","2022-04-06 00:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1010
Date: 2022-04-06 07:29:44 +0000;;;",,,,,,,,,,,,,,,,,,,,,
JDK-8282158 changed ECParameters' package by accident,JDK-8282166,5069004,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jjiang,jjiang,jjiang,2022-02-21 00:04,2022-02-23 17:50,2023-10-01 09:57,2022-02-21 00:29,19,,,,,,,,,19,security-libs,,0,noreg-undo,,,,,,,,,,,,,,,,,,JDK-8282158 changed ECParameters' package from sun.security.util to java.security by accident.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282158,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w4jf:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,,,"2022-02-21 00:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7552
Date: 2022-02-21 08:13:01 +0000;;;","2022-02-21 00:29;dukebot;Changeset: 34aae32d
Author:    John Jiang <jjiang@openjdk.org>
Date:      2022-02-21 08:27:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/34aae32de6c1eeaf268d62f20152f831cca5cd29
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.NullPointerException at jdk.compiler/com.sun.tools.javac.comp.Flow,JDK-8282161,5068270,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,,webbuggrp,webbuggrp,2022-02-10 09:53,2022-05-10 13:00,2023-10-01 09:57,2022-05-10 13:00,11,17,,,,,,,,18,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
java compiler 11.0.11

A DESCRIPTION OF THE PROBLEM :
NPE while compiling code with empty diamond to infer generic type. See the code provided

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
compile the code

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
compiles and infers the type from the function argument
ACTUAL -
doesnt compile, NPE

---------- BEGIN SOURCE ----------
import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.math.BigDecimal;
import java.util.Map;

public class Test {

    private static final Gson GSON = new GsonBuilder().create();

    public void testFunc() {
        testFunc2(fromMongoJsonObject(new TypeToken<>() {
        }));
    }

    void testFunc2(Map<Long, BigDecimal> aMap) {
    }

    private static <R> R fromMongoJsonObject(TypeToken<R> aTypeToken) {
        return GSON.fromJson(""Test"", aTypeToken.getType());
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Specify the generic explicitly in diamond:

import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.math.BigDecimal;
import java.util.Map;

public class Test {

    private static final Gson GSON = new GsonBuilder().create();

    public void testFunc() {
        testFunc2(fromMongoJsonObject(new TypeToken<Map<Long, BigDecimal>>() {
        }));
    }

    void testFunc2(Map<Long, BigDecimal> aMap) {
    }

    private static <R> R fromMongoJsonObject(TypeToken<R> aTypeToken) {
        return GSON.fromJson(""Test"", aTypeToken.getType());
    }
}


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274904,JDK-8262095,,,,,"2022-02-20 22:37;adev;Test.java;https://bugs.openjdk.org/secure/attachment/98023/Test.java","2022-02-20 22:37;adev;log.txt;https://bugs.openjdk.org/secure/attachment/98024/log.txt",,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2w01f:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-02-20 22:35;adev;The issue is reproducible with JDK 17.0.2. I checked with build 8 
Please see the attached reproducer and the crash logs.

It is not reproducible wit JDK 18b 13 onwards as it was fixed in JDK-8262095.
However the fix for JDK-8274904 is still crashing.;;;","2022-05-10 13:00;mtrudeau;Fixed in JDK 18.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JShell circularly-required classes cannot be defined,JDK-8282160,5068853,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,webbuggrp,webbuggrp,2022-02-17 05:06,2022-05-18 23:16,2023-10-01 09:57,2022-05-13 02:48,11,14,17,19,9,,,,,19,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
```
$ java --version
openjdk 17.0.1 2021-10-19
OpenJDK Runtime Environment (build 17.0.1+12)
OpenJDK 64-Bit Server VM (build 17.0.1+12, mixed mode)
$ jshell --version
jshell 17.0.1
```

A DESCRIPTION OF THE PROBLEM :
If there are some circularly-required classes in some specific way, they cannot be defined in jshell.

Related bug: https://bugs.openjdk.java.net/browse/JDK-8137064 but that one is fixed. This one still persist in Java 17.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Type into jshell:

```
class Y{ X x; }

class X extends Y{
  @Override
  public String toString() {
    return """";
  }
}
```

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Two classes `X` and `Y` are created.
ACTUAL -
Error messages:

```
|  Error:
|  cannot find symbol
|    symbol:   class Y
|  class X extends Y{
|                  ^
|  Error:
|  method does not override or implement a method from a supertype
|    @Override
|    ^-------^
```

---------- BEGIN SOURCE ----------
See ""steps to reproduce"" above.
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
It's possible to workaround by defining an empty class `X`, then define the class `X` as the actual one.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8137064,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2w3mz:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-02-20 22:24;adev;The issue is reproducible. I can see it from JDK 9 till JDK 19.
PS C:\Users\ANDEV> C:\jdk\jdk-9\bin\jshell
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
|  Welcome to JShell -- Version 9
|  For an introduction type: /help intro

jshell> class Y{ X x; }
|  created class Y, however, it cannot be referenced until class X is declared

jshell>

jshell> class X extends Y{
   ...>   @Override
   ...>   public String toString() {
   ...>     return """";
   ...>   }
   ...> }
|  Error:
|  cannot find symbol
|    symbol:   class Y
|  class X extends Y{
|                  ^
|  Error:
|  method does not override or implement a method from a supertype
|    @Override
|    ^-------^

jshell>;;;","2022-02-28 08:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7635
Date: 2022-02-28 16:08:29 +0000;;;","2022-05-13 02:48;dukebot;Changeset: 11fa03f3
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-05-13 09:45:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/11fa03f3ee0e0224a14f6bcf88cdd92e17ed0784
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
ECParameters InvalidParameterSpecException messages missed ECKeySizeParameterSpec,JDK-8282158,5068999,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2022-02-20 19:46,2022-02-23 17:50,2023-10-01 09:57,2022-02-20 23:59,17,18,,,,,,,,19,security-libs,,0,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,,,"sun.security.util.ECParameters class supports three AlgorithmParameterSpec types, exactly ECParameterSpec, ECGenParameterSpec and ECKeySizeParameterSpec, however the InvalidParameterSpecException messages missed ECKeySizeParameterSpec.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282166,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w4ib:",9223372036854775807,b11,,,,,,,,,,,"2022-02-20 21:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7550
Date: 2022-02-21 04:49:42 +0000;;;","2022-02-20 23:59;dukebot;Changeset: 52a85d80
Author:    John Jiang <jjiang@openjdk.org>
Date:      2022-02-21 07:55:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/52a85d80483f7fefbe26bed6fe3a2ce4bd1bc9fc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Drop redundant <br> elements from tables in java.desktop HTML files,JDK-8282150,5068989,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-02-20 08:36,2022-03-30 05:18,2023-10-01 09:57,2022-03-01 09:09,11,15,8,,,,,,,19,client-libs,,0,cleanup,cssn22_02_02,noreg-doc,sustaining,,,,,,,,,,,,,,,"Many tables in componentProperties.html contain <br> element in the end of the cell. This element has no effect in this case, it can be removed safely without affecting the visual presentation of the tables.

The src/java.desktop/share/classes/javax/swing/plaf/synth/doc-files/componentProperties.html file has many tables with redundant <br> element in table cells.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260328,,,,,,JDK-8282152,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w4g3:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-02-20 10:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7547
Date: 2022-02-20 18:07:54 +0000;;;","2022-03-01 09:09;dukebot;Changeset: b86a8c00
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-03-01 17:01:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b86a8c004f4e67e7b6bf45ce7cf96bcd8520a881
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some -Xlint keys are missing in javac man page,JDK-8282149,5068987,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,asarkar,asarkar,2022-02-20 05:24,2022-05-04 23:33,2023-10-01 09:57,2022-05-02 12:00,17,,,,,,,,,19,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,,"Below 5 -Xlint keys are listed in output of `javac --help-lint` but not in javac man page.

• missing-explicit-ctor
• strictfp
• synchronization
• text-blocks
• preview

javac man page should be updated to include them.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286028,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w4fn:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-03-26 07:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7971
Date: 2022-03-26 14:33:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] waitForIdle after creating frame in JSpinnerMouseAndKeyPressTest.java,JDK-8282147,5068979,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mvs,aivanov,aivanov,2022-02-19 07:02,2022-02-23 17:50,2023-10-01 09:57,2022-02-21 02:12,19,,,,,,,,,19,client-libs,,0,noreg-self,testbug,,,,,,,,,,,,,,,,,"Call Robot.waitForIdle() after createUI and before getting the location of the JSpinner component in the test: javax/swing/JSpinner/4515999/JSpinnerMouseAndKeyPressTest.java.

This is needed to ensure all the events for creating and displaying the frame are processed before interacting with the components on the screen.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281296,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,"0|i2w4dv:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-02-20 00:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7545
Date: 2022-02-20 08:01:28 +0000;;;","2022-02-21 02:12;dukebot;Changeset: bdae1d87
Author:    Manukumar V S <mvs@openjdk.org>
Committer: Abdul Kolarkunnu <akolarkunnu@openjdk.org>
Date:      2022-02-21 10:08:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bdae1d87c16423878e4dcc8a0e87806d77bb5256
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
RandomSupport.convertSeedBytesToLongs sign extension overwrites previous bytes,JDK-8282144,5068962,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jlaskey,webbuggrp,webbuggrp,2022-02-18 14:57,2023-05-17 12:33,2023-10-01 09:57,2022-03-08 05:28,17,18,19,,,,,,,19,core-libs,,0,amazon-interest,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Class: ./java.base/share/classes/jdk/internal/util/random/RandomSupport.java
Method: public static long[] convertSeedBytesToLongs(byte[] seed, int n, int z)

The method attempts to create an array of longs by consuming the input bytes most significant bit first. New bytes are appended to the existing long using the OR operator on the signed byte. Due to sign extension this will overwrite all the existing bits from 63 to 8 if the next byte is negative.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
The bug will not readily manifest as a poorly seeded RNG with many of the bits in the generated long[] set to 1 quickly recovers and outputs a random sequence. Reproducing cannot be done without access to the internal class RandomSupport.

I have extracted the part of the class with the bug into a driver program:

public class RandomSupport {
  private static final char[] HEX_DIGITS =
      {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};

  public static long[] convertSeedBytesToLongs(byte[] seed, int n, int z) {
    final long[] result = new long[n];
    final int m = Math.min(seed.length, n << 3);
    // Distribute seed bytes into the words to be formed.
    for (int j = 0; j < m; j++) {
      // Sign extension bug
      result[j >> 3] = (result[j >> 3] << 8) | seed[j];
    }
    // Filling the rest of the long[] has been removed for brevity.
    // It only matters if the bytes are shorter than the desired length of long[].
    return result;
  }

  public static long[] convertSeedBytesToLongsFixed(byte[] seed, int n, int z) {
    final long[] result = new long[n];
    final int m = Math.min(seed.length, n << 3);
    // Distribute seed bytes into the words to be formed.
    for (int j = 0; j < m; j++) {
      result[j >> 3] = (result[j >> 3] << 8) | (seed[j] & 0xff);
    }
    return result;
  }

  public static void main(String[] args) {
    RandomGenerator rng = RandomGeneratorFactory.of(""L64X128MixRandom"").create(42);
    for (int i = 1; i < 8; i++) {
      byte[] seed = new byte[i];
      for (int j = 0; j < 10; j++) {
        rng.nextBytes(seed);

        for (byte b : seed) {
          System.out.printf(""%c%c"", HEX_DIGITS[(b & 0xf0) >> 4], HEX_DIGITS[b & 0xf]);
        }
        System.out.printf(""  %-16s  %-16s%n"",
            Long.toHexString(convertSeedBytesToLongs(seed, 1, 1)[0]),
            Long.toHexString(convertSeedBytesToLongsFixed(seed, 1, 1)[0]));
      }
    }
  }
}


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Compile and run the driver program:

> javac RandomSupport.java
> java RandomSupport

Column: Description
1: Hex representation of the input byte[], most significant bits first
2: Current long output (hex representation) 
3: Corrected long output (hex representation)

12  12                12              
10  10                10              
38  38                38              
ec  ffffffffffffffec  ec              
8a  ffffffffffffff8a  8a              
7e  7e                7e              
cf  ffffffffffffffcf  cf              
12  12                12              
11  11                11              
d4  ffffffffffffffd4  d4              
7ae2  ffffffffffffffe2  7ae2            
47c8  ffffffffffffffc8  47c8            
3cc0  ffffffffffffffc0  3cc0            
2475  2475              2475            
fdce  ffffffffffffffce  fdce            
7c04  7c04              7c04            
16a4  ffffffffffffffa4  16a4            
0bf1  fffffffffffffff1  bf1             
cb22  ffffffffffffcb22  cb22            
63eb  ffffffffffffffeb  63eb            
6d72b7  ffffffffffffffb7  6d72b7          
ddd3a6  ffffffffffffffa6  ddd3a6          
6194a2  ffffffffffffffa2  6194a2          
d54bc0  ffffffffffffffc0  d54bc0          
3142f5  fffffffffffffff5  3142f5          
643056  643056            643056          
ff94ba  ffffffffffffffba  ff94ba          
86923e  ffffffffffff923e  86923e          
faf8f0  fffffffffffffff0  faf8f0          
b69017  ffffffffffff9017  b69017          
f4b40258  ffffffffffb40258  f4b40258        
c099cae2  ffffffffffffffe2  c099cae2        
9273a475  ffffffffffffa475  9273a475        
99359c54  ffffffffffff9c54  99359c54        
c4bc9ec4  ffffffffffffffc4  c4bc9ec4        
b6fe22ae  ffffffffffffffae  b6fe22ae        
45da4c38  ffffffffffda4c38  45da4c38        
c88f5faf  ffffffffffffffaf  c88f5faf        
7e45efe8  ffffffffffffffe8  7e45efe8        
94c41ade  ffffffffffffffde  94c41ade        
b4e3c54f86  ffffffffffffff86  b4e3c54f86      
b60419a301  ffffffffffffa301  b60419a301      
59c748bb7e  ffffffffffffbb7e  59c748bb7e      
649d200092  ffffffffffffff92  649d200092      
1b92cd6d7d  ffffffffffcd6d7d  1b92cd6d7d      
a53b475f48  ffffffa53b475f48  a53b475f48      
08437a5639  8437a5639         8437a5639       
7957b2be40  ffffffffffffbe40  7957b2be40      
2c725e4ba9  ffffffffffffffa9  2c725e4ba9      
f8e20015f8  fffffffffffffff8  f8e20015f8      
61647952a3cf  ffffffffffffffcf  61647952a3cf    
c1a63d44671c  ffffffa63d44671c  c1a63d44671c    
08f4f39fa3cd  ffffffffffffffcd  8f4f39fa3cd     
627a1e5efe40  fffffffffffffe40  627a1e5efe40    
60971cf0fa75  fffffffffffffa75  60971cf0fa75    
d4b76b20627c  ffffffb76b20627c  d4b76b20627c    
ad3590466c4a  ffffffff90466c4a  ad3590466c4a    
3d31e711953c  ffffffffffff953c  3d31e711953c    
71b26c7c8c98  ffffffffffffff98  71b26c7c8c98    
cbadc78bf991  ffffffffffffff91  cbadc78bf991    
b7aba9f5d8b006  ffffffffffffb006  b7aba9f5d8b006  
e3da732bbdcc12  ffffffffffffcc12  e3da732bbdcc12  
7c3919405eb1ac  ffffffffffffffac  7c3919405eb1ac  
5677bf994db54d  ffffffffffffb54d  5677bf994db54d  
e06cb024107afd  fffffffffffffffd  e06cb024107afd  
65ff73250a89f7  fffffffffffffff7  65ff73250a89f7  
abb44e062013d2  ffffffffffffffd2  abb44e062013d2  
9f938d8a2c2239  ffffffff8a2c2239  9f938d8a2c2239  
375e554d2506c8  ffffffffffffffc8  375e554d2506c8  
90976dbbcf1cb2  ffffffffffffffb2  90976dbbcf1cb2

ACTUAL -
See expected result. The long created by the current code has many bits of the original input bytes overwritten with 1s (the output hex representation contains a lot of leading f characters). This results in loss of information in byte[] seeds.

---------- BEGIN SOURCE ----------
See 'Steps to reproduce'
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
None. Currently any generator created using a random byte[] will not be seeded with the full randomness of the bytes. The only other method to create generators with a RandomGeneratorFactory uses a single long seed. Thus generators can only be created with 64-bits of randomness. Using a random byte[] will generate a long[] array for seeding where only the least significant 8-bits of each long are ensured to be random. The more significant bits have an increasing chance of being set to 1s. This is 1 - 1/(2^7) = 0.9921875 for the highest 8-bits in the long if 8 bytes were used to create it (as it has 7 chances to overwrite the bits as they are shifted up).

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294509,,,,,,,,,,,,"2022-02-19 04:34;tongwan;RandomSupport.java;https://bugs.openjdk.org/secure/attachment/98020/RandomSupport.java",,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2w4b7:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2022-02-19 04:35;tongwan;The observations on Windows 10:
JDK 11: Not applicable
JDK 17: Failed, the output hex representation contains a lot of leading f characters
JDK 18ea+28: Failed.
JDK 19ea+3: Failed.;;;","2022-02-24 06:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7614
Date: 2022-02-24 14:47:50 +0000;;;","2022-03-08 05:28;dukebot;Changeset: 5fab27e1
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2022-03-08 13:25:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5fab27e1b8fdf2ea27cb3b349bd339a4a6ec828b
;;;","2022-03-14 02:01;pnarayanaswa;Additional Information from submitter:
============================
I have just noticed the same sign extension bug applies to 'public static int[] convertSeedBytesToInts(byte[] seed, int n, int z)' in the same RandomSupport class. I was unaware of the other method when I raised this ticket.

The ticket is now marked as resolved. If no feedback is supplied then I will raise a new ticket for the matching bug in int[] seed generation.

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[TestCase] compiler/inlining/ResolvedClassTest.java will fail when --with-jvm-features=-compiler1,JDK-8282142,5068969,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wanghaomin,wanghaomin,wanghaomin,2022-02-18 19:34,2022-04-27 02:28,2023-10-01 09:57,2022-03-04 16:04,18,19,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-19,,,,,,,,,,,,,,,"----------System.err:(22/1285)----------
 stdout: [    336    1    b        compiler.jsr292.ResolvedClassTest$TestStaticInit::test (4 bytes)
                            @ 0   compiler.jsr292.ResolvedClassTest$TestStaticInit$A::m (1 bytes)   failed initial checks
];
 stderr: [openjdk version ""19-internal"" 2022-09-20
OpenJDK Runtime Environment (fastdebug build 19-internal+0-jenkins-slave-20220215150808-jdk-ls-3be7888)
OpenJDK 64-Bit Server VM (fastdebug build 19-internal+0-jenkins-slave-20220215150808-jdk-ls-3be7888, mixed mode, sharing)
]
 exitValue = 0

java.lang.RuntimeException: 'TestStaticInit$A::m (1 bytes)   no static binding' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at compiler.jsr292.ResolvedClassTest.testStaticInit(ResolvedClassTest.java:91)
	at compiler.jsr292.ResolvedClassTest.main(ResolvedClassTest.java:155)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)
",,,,,,,,,,,JDK-8285527,JDK-8285703,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279515,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2w4cr:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-24 14:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7541
Date: 2022-02-19 03:49:58 +0000;;;","2022-02-24 15:11;dlong;It sounds like a test bug.  The test was written to test a C1 issue, and it doesn't normally run with C2 only.;;;","2022-02-24 15:12;dlong;ILW = test failure w/o C1; non-standard config; no workaround = MLH = P4;;;","2022-03-04 16:04;dukebot;Changeset: c459f8f4
Author:    wanghaomin <wanghaomin@loongson.cn>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2022-03-05 00:01:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c459f8f406a99cf78814bb5722f546ae1cdb6c6f
;;;","2022-04-25 08:26;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Test has passed.
;;;","2022-04-25 08:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/363
Date: 2022-04-25 15:28:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
Certain regex can cause a JS trap in WebView,JDK-8282134,5068958,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbhaskar,kcr,kcr,2022-02-18 14:08,2022-07-17 11:08,2023-10-01 09:57,2022-02-22 06:00,8,jfx11,jfx17,jfx19,,,,,,jfx19,javafx,,0,sn_112,,,,,,,,,,,,,,,,,,"See the following:

https://bugs.webkit.org/show_bug.cgi?id=235348
https://trac.webkit.org/changeset/288224

The regex listed in that bug fix can cause a trap exception when applying that regex.

This is not a regression, nor is it a particularly common case, but it seems worth fixing.",,,,,,,,,,,JDK-8282618,JDK-8285853,JDK-8285943,JDK-8290416,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w4ab:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-02-19 03:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/739
Date: 2022-02-19 11:43:00 +0000;;;","2022-02-22 06:00;roboduke;Changeset: 73963960
Author:    Jay Bhaskar <jay.bhaskar@oracle.com>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-02-22 13:58:33 +0000
URL:       https://git.openjdk.java.net/jfx/commit/73963960dc6e56fe34d7aa5fb4ce6f6d2f07acc5
;;;","2022-04-28 10:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/86
Date: 2022-04-28 17:13:19 +0000;;;","2022-04-29 10:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/43
Date: 2022-04-29 17:04:44 +0000;;;","2022-07-16 11:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/835
Date: 2022-07-16 18:52:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"(bf) Remove unused ARRAY_BASE_OFFSET, ARRAY_INDEX_SCALE from read-only Heap Buffers",JDK-8282130,5068953,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aturbanov,aturbanov,aturbanov,2022-02-18 12:08,2022-02-23 17:50,2023-10-01 09:57,2022-02-21 01:05,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,"Two fields in Heap Buffers are unconditionally declared. But they are unused in read-only buffer classes.

    // Cached array base offset
    private static final long ARRAY_BASE_OFFSET = UNSAFE.arrayBaseOffset($type$[].class);

    // Cached array index scale
    private static final long ARRAY_INDEX_SCALE = UNSAFE.arrayIndexScale($type$[].class);

Affected classes: HeapByteBufferR, HeapCharBufferR, HeapDoubleBufferR, HeapFloatBufferR, HeapIntBufferR, HeapLongBufferR, HeapShortBufferR.

By widening '#if[rw]' we can remove redundant fields.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w497:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-02-18 12:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7530
Date: 2022-02-18 10:11:42 +0000;;;","2022-02-21 01:05;dukebot;Changeset: 51f44207
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-02-21 09:03:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/51f4420711b8cace5733180b3291779f11291895
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
optimal capacity tests and test library need to be cleaned up,JDK-8282120,5068940,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smarks,smarks,smarks,2022-02-18 10:27,2022-04-27 23:26,2023-10-01 09:57,2022-04-20 11:47,,,,,,,,,,19,core-libs,,0,noreg-self,,,,,,,,,,,,,,,,,,"Some utility methods in test/lib/jdk/test/lib/util/OptimalCapacity.java attempt to check that various collections such as HashMap have been allocated with the optimal capacity.

These utilities are used by these tests:

test/jdk/java/lang/Character/UnicodeBlock/OptimalMapSize.java
test/jdk/java/lang/Enum/ConstantDirectoryOptimalCapacity.java

There is a problem with the assertions in OptimalCapacity.ofHashMap. This utility method takes an map that has been populated by some code under test and compares its table size to that of (1) a HashMap created with a copy constructor, and (2) a HashMap created with an initial expected size. If these sizes differ, the utility reports an error.

Populating a map using a copy constructor from a map with N mappings has a bug; see JDK-8281631. In addition, the expression used to allocate the enum directory has a similar bug, so this test passed for a long time. When we fixed JDK-8281631, it broke this test. (This test was problem-listed as part of JDK-8281631.)

The OptimalCapacity utilities are really more of a test of HashMap. And the Enum/ConstantDirectoryOptimalCapacity test replicates the map capacity computation (int)(n / 0.75f) + 1 from the creation code in java/lang/Class.java in the test itself, so isn't really testing anything.

I haven't inspected the UnicodeBlock optimal map size test thoroughly but it seems suspicious as well.

At the very least, these tests and the utility class should be cleaned up. I'm not sure how much value they provide, so maybe they should be removed entirely.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283465,JDK-8186958,,,,,JDK-8281631,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w46b:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2022-02-18 12:18;martin;It seems reasonable to continue testing that ""constant maps"" are created optimally, i.e. that they are never resized and that no smaller backing array has that same property.

With much more effort we could insist on specialized maps with zero collisions (""perfect hashing""?);;;","2022-02-18 13:54;smarks;Clearly we want ""constant maps"" to be created with the never-resized and no-smaller-array properties. Whether these needs to be *tested* is a different story. If we had a utility method such as Guava's Maps::newHashMapWithExpectedSize (see JDK-8186958) that were correct (and tested!), then the creation of something like the Enum constant directory would become

    directory = newHashMapWithExpectedSize(universe.length);

Would we then need a test to ensure that the map was actually created with the correct size? I suppose it's possible that universe.length is wrong (i.e., a different number of entries actually gets added to the directory). If universe.length is too large, this test might detect it, but only if the mappings would fit into a smaller array. But if universe.length were too small, this test wouldn't detect it, as the table would be resized to fit the larger number of mappings. Doesn't seem like trying to write such tests is very valuable.
;;;","2022-02-19 16:07;martin;It's hard to judge the return from the effort of checking map memory usage.
Ideally one would need a single line per map

testOptimalMapMemoryUsage(someMap())

IRL one often needs some whitebox pixie dust simply to access the map, hidden away as a private field somewhere.

Today I see (note the excessive duplication!)
        /**
         * 696 - the expected number of entities
         */
        private static final int NUM_ENTITIES = 696;
but it's not obvious what the next maintainer needs to do to maintain whatever property is being optimized.;;;","2022-03-22 19:50;smarks;[~martin] The issue with the UnicodeBlock test is being addressed in JDK-8283465. It fixes both the duplication of this constant within the Character$UnicodeBlock class and in the test. Incidentally, that value of 696 has been out of date for several releases!;;;","2022-04-18 21:33;smarks;Bug JDK-8186958 has been integrated. It adds APIs along the lines of HashMap.newHashMap(numMappings), and the enumConstantDirectory code has been changed to use this new API. Assuming that the enumConstantDirectory code uses the correct value for numMappings, there isn't much point in this test.

The OptimalCapacity library utility is used only by this test. It was used by the Character.UnicodeBlock test, but that dependency has been removed. The utility does something rather strange. It compares 1) the capacity of a given map with the capacity of a temporary map created via a copy constructor, and 2) the capacity of a given map with a the capacity of a temporary map created with a caller-provided capacity value. Case 1) is a test of HashMap, and case 2) pretty much requires the test to have a copy of the capacity computation code from HashMap. As such, this utility isn't adding any value.

The new test added along with JDK-8281631 is fairly comprehensive and should give us confidence that the HashMap sizing computation is correct.

One case could be considered missing, which is: given a HashMap that has been allocated for an expected number of mappings, populate that map with that number of mappings and ensure that the map isn't resized. The HashMap::resize method would need to be instrumented to detect this. However, I note that the OptimalCapacity test and utility doesn't test this, so this isn't a reason not to remove them.;;;","2022-04-19 11:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8303
Date: 2022-04-19 18:12:04 +0000;;;","2022-04-20 11:47;dukebot;Changeset: b2c33f0f
Author:    Stuart Marks <smarks@openjdk.org>
Date:      2022-04-20 18:43:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b2c33f0f86174f5a8cf2229a3f766a2a8cff9d27
;;;",,,,,,,,,,,,,,,,,,,,,,,
[lworld] Enhance CreateSymbols to read Preload attribute,JDK-8282108,5068924,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sadayapalam,rriggs,rriggs,2022-02-18 09:07,2022-02-23 01:12,2023-10-01 09:57,2022-02-23 01:12,repo-valhalla,,,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,,,,,,"The test: tools/javac/platform/CanHandleClassFilesTest.java fails
after updating java.util.Optional to be a value class.

java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at CanHandleClassFilesTest.run(CanHandleClassFilesTest.java:117)
	at CanHandleClassFilesTest.main(CanHandleClassFilesTest.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.IllegalStateException: Unhandled attribute: Preload
	at build.tools.symbolgenerator.CreateSymbols.readAttribute(CreateSymbols.java:2411)
	at build.tools.symbolgenerator.CreateSymbols.inspectClassFile(CreateSymbols.java:1987)
	at build.tools.symbolgenerator.CreateSymbols.loadVersionClasses(CreateSymbols.java:1517)
	at build.tools.symbolgenerator.CreateSymbols.incrementalUpdate(CreateSymbols.java:1849)
	at build.tools.symbolgenerator.CreateSymbols.createIncrementalBaseLine(CreateSymbols.java:1912)
	at build.tools.symbolgenerator.CreateSymbols.main(CreateSymbols.java:4407)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w42r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-02-23 01:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/657
Date: 2022-02-23 09:06:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Valhalla: javac does not correctly recognize value class factory <init>,JDK-8282107,5068923,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,rriggs,rriggs,2022-02-18 09:02,2022-03-06 21:18,2023-10-01 09:57,2022-03-06 21:18,repo-valhalla,,,,,,,,,repo-valhalla,tools,,0,,,,,,,,,,,,,,,,,,,"Several tests fail to compile classes when java.util.Optional is a value class.

Modify java.util.Optional to be a value class and build.
The following tests fail with the message below:

tools/javac/annotations/repeatingAnnotations/combo/TargetAnnoCombo.java	
tools/javac/classfiles/attributes/innerclasses/InnerClassesInInnerEnumTest.java	
tools/javac/classfiles/attributes/innerclasses/InnerClassesTest.java	
tools/javac/jvm/VerboseClassPathTest.java

 bad class file: /modules/java.base/java/util/Optional.class
    method descriptor invalid for <init>",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282525,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w42j:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-02-28 22:27;sadayapalam;Problem shows up only when compiling to a lower source level than one at which primitive and value classes are allowed. Javac is incorrectly downgrading these into non-primitive and non-value classes at those lower levels.

Smaller reproducer:

$ cat V.java
public value class V<T> {
    V(T t) {}
}
$ ~/gitreps/valhalla/build/linux-x86_64-server-release/images/jdk/bin/javac -g V.java
$ cat X.java
public class X {   
   V<String> v = new V("""");
}
$ ~/gitreps/valhalla/build/linux-x86_64-server-release/images/jdk/bin/javac -g --source 16 X.java
warning: [options] system modules path not set in conjunction with -source 16
X.java:2: error: cannot access V
   V<String> v = new V("""");
   ^
  bad class file: ./V.class
    method descriptor invalid for <init>
    Please remove or make sure it appears in the correct subdirectory of the classpath.
1 error
1 warning

;;;","2022-03-01 22:45;sadayapalam;Full treatment of the scenario of compiling against value/primitive class files using a --source/--release level of earlier vintage would be taken up under JDK-8282525. The present ticket would be used to address just the test failures reported here.;;;","2022-03-02 01:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/661
Date: 2022-03-02 09:47:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Missed top/left bouncing for ScrollPane on Raspberry Pi with Touchscreen ,JDK-8282100,5068916,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alexsch,alexsch,alexsch,2022-02-18 06:47,2022-03-11 08:00,2023-10-01 09:57,2022-03-07 10:39,jfx17,,,,,,,,,jfx19,javafx,,0,,,,,,,,,,,,,,,,,,,"Steps to reproduce:
- Run the attached JFXScrollPane.java example on Raspberry Pi with touchscreen.
- Scroll the scroll pane to the right/bottom. There is the bouncing (the node on the scroll pane is scrolled further than its width/height so the white background is visible and then automatically scrolls back to the node bounds).
-Scroll the scroll pane to the left/top. There is no bouncing (the node on the scroll pane is scrolled right to its left/bottom bounds)
","Raspberry Pi 4 Model B
Raspberry Pi 7"" Touch Screen Display

OS: Raspbian GNU/Linux 11 (bullseye)
JDK: 17.0.2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-02-18 06:52;alexsch;JFXScrollPane.java;https://bugs.openjdk.org/secure/attachment/98018/JFXScrollPane.java",,,,,,,,,,,,,,arm,,,,,,,,,other,,,,,"0|i2w40z:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-02-18 07:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/736
Date: 2022-02-18 15:21:49 +0000;;;","2022-03-07 10:39;dukebot;Changeset: ae419d77
Author:    Alexander Scherbatiy <alexsch@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-03-07 18:36:42 +0000
URL:       https://git.openjdk.java.net/jfx/commit/ae419d7780bef540b95d3376817d708e6508ecca
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cherry-pick WebKit 613.1 stabilization fixes (2),JDK-8282099,5068915,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,arapte,arapte,kcr,2022-02-18 06:29,2022-04-13 09:53,2023-10-01 09:57,2022-02-23 00:56,8u331,jfx19,,,,,,,,jfx19,javafx,,0,CPU22_04-critical-approved,CPU22_04-critical-SQE-OK,sn_112,webkit-2.34,,,,,,,,,,,,,,,https://webkitgtk.org/2022/02/17/webkitgtk2.34.6-released.html,,,,,,,,,,,JDK-8284845,JDK-8282373,JDK-8282399,JDK-8282448,JDK-8282660,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281711,,,,,,,,,,,,JDK-8278980,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w40r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-02-22 09:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/740
Date: 2022-02-22 17:15:19 +0000;;;","2022-02-23 00:56;roboduke;Changeset: 6f201f7a
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2022-02-23 08:54:53 +0000
URL:       https://git.openjdk.java.net/jfx/commit/6f201f7a02dba14328d183e7d0db5dede4416ce4
;;;","2022-02-24 13:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/36
Date: 2022-02-24 21:46:20 +0000;;;","2022-03-04 06:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/80
Date: 2022-03-04 14:40:49 +0000;;;","2022-04-13 09:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/774
Date: 2022-04-13 16:00:41 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
LineChart path incorrect when outside lower bound,JDK-8282093,5068684,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abagarwal,webbuggrp,webbuggrp,2022-02-15 20:19,2022-07-13 05:30,2023-10-01 09:57,2022-03-14 07:06,jfx11.0.14,jfx17.0.2,jfx18,,,,,,,jfx19,javafx,,0,11-bp,additional-information-received,dcspn,regression,reproducer-yes,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
JavaFX ver. 17.0.2, tested on Windows and macOS (pretty sure this occurs in Linux too), OpenJFX + OpenJDK (17.0.2 as well)

A DESCRIPTION OF THE PROBLEM :
I have created navigation in LineChart using lower and upper bound properties. I have drawn a step chart and when most left point goes out of chart bound chart is displaying weirdly. It is like point connects to pre-previous point instead of previous one that went out of bound. I can confirm that data property which contains points doesn't modified while that. 

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Draw a step chat
e.g. something like this 

___┌┐__     ___
               └┘	
2. Increase lower bound of X NumberAxis so that some left-side points go out of bound
3. You will see something like this on bound instead of straight lines

a bound
^
|
|\__
|

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Displaying connections between points always same way ignoring bounds
ACTUAL -
Lines goes weird

---------- BEGIN SOURCE ----------
package ru.nucodelabs.gem.view;

import javafx.beans.property.DoubleProperty;

public class VESCurvesNavigator {

    private final double CHANGE_VALUE;
    private final DoubleProperty vesCurvesXLowerBound;
    private final DoubleProperty vesCurvesXUpperBound;
    private final DoubleProperty vesCurvesYLowerBound;
    private final DoubleProperty vesCurvesYUpperBound;

    public VESCurvesNavigator(
            DoubleProperty vesCurvesXLowerBound,
            DoubleProperty vesCurvesXUpperBound,
            DoubleProperty vesCurvesYLowerBound,
            DoubleProperty vesCurvesYUpperBound,
            double changeValue) {
        this.vesCurvesXLowerBound = vesCurvesXLowerBound;
        this.vesCurvesXUpperBound = vesCurvesXUpperBound;
        this.vesCurvesYLowerBound = vesCurvesYLowerBound;
        this.vesCurvesYUpperBound = vesCurvesYUpperBound;
        this.CHANGE_VALUE = changeValue;
    }

    public void zoomIn() {
        if (vesCurvesXLowerBound.get() < vesCurvesXUpperBound.get()
                && vesCurvesXLowerBound.get() < vesCurvesYUpperBound.get()) {
            vesCurvesXLowerBound.set(vesCurvesXLowerBound.get() + CHANGE_VALUE);
            vesCurvesXUpperBound.set(vesCurvesXUpperBound.get() - CHANGE_VALUE);

            vesCurvesYLowerBound.set(vesCurvesYLowerBound.get() + CHANGE_VALUE);
            vesCurvesYUpperBound.set(vesCurvesYUpperBound.get() - CHANGE_VALUE);
        }
    }

    public void zoomOut() {
        vesCurvesXLowerBound.set(vesCurvesXLowerBound.get() - CHANGE_VALUE);
        vesCurvesXUpperBound.set(vesCurvesXUpperBound.get() + CHANGE_VALUE);

        vesCurvesYLowerBound.set(vesCurvesYLowerBound.get() - CHANGE_VALUE);
        vesCurvesYUpperBound.set(vesCurvesYUpperBound.get() + CHANGE_VALUE);
    }

    public void moveRight() {
        vesCurvesXLowerBound.set(vesCurvesXLowerBound.get() + CHANGE_VALUE);
        vesCurvesXUpperBound.set(vesCurvesXUpperBound.get() + CHANGE_VALUE);
    }

    public void moveLeft() {
        vesCurvesXLowerBound.set(vesCurvesXLowerBound.get() - CHANGE_VALUE);
        vesCurvesXUpperBound.set(vesCurvesXUpperBound.get() - CHANGE_VALUE);
    }

    public void moveUp() {
        vesCurvesYLowerBound.set(vesCurvesYLowerBound.get() + CHANGE_VALUE);
        vesCurvesYUpperBound.set(vesCurvesYUpperBound.get() + CHANGE_VALUE);
    }

    public void moveDown() {
        vesCurvesYLowerBound.set(vesCurvesYLowerBound.get() - CHANGE_VALUE);
        vesCurvesYUpperBound.set(vesCurvesYUpperBound.get() - CHANGE_VALUE);
    }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8289378,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283677,,,,,,,,JDK-8276490,,,,,,"2022-02-23 05:25;pnarayanaswa;Capture.PNG;https://bugs.openjdk.org/secure/attachment/98067/Capture.PNG","2022-02-23 05:09;pnarayanaswa;TestApplication.java;https://bugs.openjdk.org/secure/attachment/98066/TestApplication.java",,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2w2lf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-02-18 04:02;pnarayanaswa;Mail to submitter
============
Please share a minimal reproducible testcase, Screenshot of the issue.;;;","2022-02-23 05:25;pnarayanaswa;Checked with attached testcase in Windows 10, Issue reproducible,
Test Result
=========
8u321 : Pass
openjfx11.0.13: Pass
openjfs11.0.14: Fail
openjfx17.0.1: Pass
openjfx17.0.2: Fail
openjfx 18ea7: Pass
openjfx18ea8: Fail
openjfx18ea10: Fail;;;","2022-02-23 05:35;kcr;Given when this started failing, this regression was almost certainly caused by the fix for JDK-8276490. That fix for a line chart bug went into JavaFX 18 and was subsequently backported to 11.0.14 and 17.0.2.
;;;","2022-02-23 05:38;kcr;[~abagarwal] Can you take a look at this?;;;","2022-02-23 05:56;abagarwal;Sure;;;","2022-02-25 23:20;abagarwal;While working on 8276490, I didn't take into account the lower bounds. A change I did caused this regression and wasn't caught because all the new test cases were only for upper bounds. The fix is rather simple. ;;;","2022-02-28 12:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/744
Date: 2022-02-28 18:25:09 +0000;;;","2022-03-14 07:06;dukebot;Changeset: d28f3d78
Author:    Abhinay Agarwal <abhinay.agarwal@gluonhq.com>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-03-14 14:04:33 +0000
URL:       https://git.openjdk.java.net/jfx/commit/d28f3d781a125eae7e89956ff8e37fc7b94646c2
;;;","2022-06-28 00:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/65
Date: 2022-06-28 07:08:00 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Update jib profile to not set build to 0,JDK-8282086,5068900,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-02-18 00:44,2022-02-23 17:49,2023-10-01 09:57,2022-02-18 06:53,19,,,,,,,,,19,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,"The jib profile definition does not play well with JDK-8274980. When using 0 as a marker for ""no build number"", we should not pass that on to configure, since it will trigger a warning.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w3xf:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-02-18 00:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7527
Date: 2022-02-18 08:46:31 +0000;;;","2022-02-18 06:53;dukebot;Changeset: cf6984dd
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-02-18 14:49:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cf6984ddaa5668e78d590c8ad1f2aec0632f0b28
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.time.DateTimeFormatter: wrong definition of symbol F,JDK-8282081,5068835,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2022-02-17 01:13,2022-08-17 11:26,2023-10-01 09:57,2022-03-04 09:01,11,17,18,19,8,,,,,19,core-libs,,0,dcsaw,release-note=yes,reproducer-yes,webbug,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
As a result, java.time.format.DateTimeFormatterBuilder#FIELD_MAP should put java.time.temporal.ChronoField#ALIGNED_WEEK_OF_MONTH to 'F' instead of java.time.temporal.ChronoField#ALIGNED_DAY_OF_WEEK_IN_MONTH.

Symbol F in java.time.DateTimeFormatter should have the same meaning with F in java.text.SimpleDateFormatter, which means the ordinal number of *day of week* in current month defined by java.text.DateFormat#DAY_OF_WEEK_IN_MONTH_FIELD. It should equals ""Math.ceil(day / 7)"" which ""day"" means the day of month.
But in java.time.DateTimeFormatter, it means the ordinal number of day of *aligned week in month* defined by java.time.temporal.ChronoField#ALIGNED_DAY_OF_WEEK_IN_MONTH, which equips ""(day + 1) % 7"".

It may be a mistake caused by similar name of ""DAY_OF_WEEK_IN_MONTH_FIELD"" and ""ALIGNED_DAY_OF_WEEK_IN_MONTH"" but with different meaning.
I found that in JDK-8169482 it changed javadoc's ""week in month"" to ""day of week in month"" from JDK 9. But ""ALIGNED_DAY_OF_WEEK_IN_MONTH"" does not have the same meaning with ""DAY_OF_WEEK_IN_MONTH_FIELD"" in java.text.DateFormat.

Still, the symbol F in java.time.DateTimeFormatter is no use in any pattern. It just may cause an exception.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the test case below.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
It should print ""Sun May 08 00:00:00 UTC 2022"" and ""2022-05-08"".
ACTUAL -
It prints ""Sun May 08 00:00:00 UTC 2022"" with SimpleDateFormat, but throws exception with DateTimeFormatter:


---------- BEGIN SOURCE ----------
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.time.LocalDate;
import java.time.temporal.ChronoField;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.Locale;
import java.util.Date;

public class TestCase {
    public static void main(String []args) {
        String pattern = ""yyyy-MM F EEE"";
		String definition = ""2022-05 2 Sun"";
		SimpleDateFormat sdf = new SimpleDateFormat(pattern);
		try {
			System.out.println(sdf.parse(definition));
		} catch (ParseException e) {
			System.out.println(e);
		}
		
		/* correct formatter
		DateTimeFormatter correctFormatter = new DateTimeFormatterBuilder()
			.appendPattern(""yyyy-MM "")
			.appendValue(ChronoField.ALIGNED_WEEK_OF_MONTH)
			.appendPattern("" EEE"")
			.toFormatter(Locale.ENGLISH);
		System.out.println(correctFormatter.parse(definition, LocalDate::from));
		*/
		
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern, Locale.ENGLISH);
		System.out.println(formatter.parse(definition, LocalDate::from));
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Use DateTimeFormatterBuilder to build a correct DateTimeFormatter with DateTimeFormatterBuilder#appendValue(ChronoField.ALIGNED_WEEK_OF_MONTH).

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282377,,,,,,,,,,,,,,JDK-8169482,,,,,,"2022-02-17 22:21;tongwan;TestCase.java;https://bugs.openjdk.org/secure/attachment/98012/TestCase.java",,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2w3iz:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,Verified,,"2022-02-17 22:20;tongwan;The observations on Windows 10:
JDK 8: Failed, DateTimeParseException thrown.
JDK 11: Failed.
JDK 17: Failed.
JDK 18ea+28: Failed.
JDK 19ea+3: Failed.;;;","2022-02-24 16:19;naoto;As the submitter correctly pointed out (in the example), 'F' should append value of `ChronoField.ALIGNED_WEEK_OF_MONTH`.;;;","2022-02-28 15:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7640
Date: 2022-02-28 23:17:57 +0000;;;","2022-03-04 09:00;dukebot;Changeset: 733c7907
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-03-04 16:57:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/733c7907b0059cc734fd1aa5b8d31f9c3e2e3079
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Lambda deserialization fails for Object method references on interfaces,JDK-8282080,5068896,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jlahoda,cushon,cushon,2022-02-17 21:36,2023-02-08 10:21,2023-10-01 09:57,2022-05-17 06:50,18,,,,,,,,,19,tools,,0,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,,,,,,,,,,,,,,,,"The example serializes and deserializes a lambda for an Object method reference on an interface.

This works for JDK 17 and earlier, but fails with JDK 18.

The regression was introduced by https://bugs.openjdk.java.net/browse/JDK-8272564


```
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.nio.file.Files;
import java.nio.file.Paths;

public class X {
  interface I extends Serializable {}

  interface F<T, R> extends Serializable {
    R apply(T t);
  }

  @SuppressWarnings(""unchecked"")
  public static void main(String[] args) throws Exception {
    F<I, Integer> f = I::hashCode;
    try (OutputStream os = Files.newOutputStream(Paths.get(""o""));
        ObjectOutputStream oos = new ObjectOutputStream(os)) {
      oos.writeObject(f);
    }
    try (InputStream is = Files.newInputStream(Paths.get(""o""));
        ObjectInputStream ois = new ObjectInputStream(is)) {
      f = (F<I, Integer>) ois.readObject();
    }
    System.err.println(f.apply(new I() {}));
  }
}
```

```
$ javac X.java
$ java X
...
Exception in thread ""main"" java.io.InvalidObjectException: ReflectiveOperationException during deserialization
        at java.base/java.lang.invoke.SerializedLambda.readResolve(SerializedLambda.java:280)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at java.base/java.io.ObjectStreamClass.invokeReadResolve(ObjectStreamClass.java:1321)
        at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2301)
        at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1768)
        at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:543)
        at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:501)
        at X.main(X.java:25)
Caused by: java.lang.reflect.InvocationTargetException
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at java.base/java.lang.invoke.SerializedLambda.readResolve(SerializedLambda.java:278)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at java.base/java.io.ObjectStreamClass.invokeReadResolve(ObjectStreamClass.java:1321)
        at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2301)
        at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1768)
        at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:543)
        at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:501)
        at X.main(X.java:25)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:421)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
Caused by: java.lang.IllegalArgumentException: Invalid lambda deserialization
        at X.$deserializeLambda$(X.java:9)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        ... 15 more
```",,,,,,,,,,,JDK-8286884,JDK-8287955,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286047,,,,,,,,JDK-8154236,JDK-8272564,JDK-8174865,JDK-8174864,JDK-8068253,JDK-8300623,JDK-8286843,JDK-8286615,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w3wj:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2022-03-02 09:43;jlahoda;FWIW, even though for the specific testcase above, the change that triggered the issue is JDK-8272564, the problem appears to have existed latently even before, consider testcase:
```
/**
 * @test
 * @compile X.java
 * @run main X
 */
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.nio.file.Files;
import java.nio.file.Paths;

public class X {
  interface I extends Serializable {

        public int hashCode();

  }

  interface F<T, R> extends Serializable {
    R apply(T t);
  }

  @SuppressWarnings(""unchecked"")
  public static void main(String[] args) throws Exception {
    F<I, Integer> f = I::hashCode;
    try (OutputStream os = Files.newOutputStream(Paths.get(""o""));
        ObjectOutputStream oos = new ObjectOutputStream(os)) {
      oos.writeObject(f);
    }
    try (InputStream is = Files.newInputStream(Paths.get(""o""));
        ObjectInputStream ois = new ObjectInputStream(is)) {
      f = (F<I, Integer>) ois.readObject();
    }
    System.err.println(f.apply(new I() {}));
  }
}
```
```
$ ~/tools/jdk/jdk-11/bin/javac X.java 
$ ~/tools/jdk/jdk-11/bin/java X
Exception in thread ""main"" java.io.IOException: unexpected exception type
        at java.base/java.io.ObjectStreamClass.throwMiscException(ObjectStreamClass.java:1626)
        at java.base/java.io.ObjectStreamClass.invokeReadResolve(ObjectStreamClass.java:1256)
        at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2096)
        at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1594)
        at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:430)
        at X.main(X.java:34)
Caused by: java.lang.reflect.InvocationTargetException
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at java.base/java.lang.invoke.SerializedLambda.readResolve(SerializedLambda.java:237)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at java.base/java.io.ObjectStreamClass.invokeReadResolve(ObjectStreamClass.java:1250)
        ... 4 more
Caused by: java.lang.IllegalArgumentException: Invalid lambda deserialization
        at X.$deserializeLambda$(X.java:14)
        ... 14 more
```
;;;","2022-03-31 01:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8054
Date: 2022-03-31 08:13:57 +0000;;;","2022-05-17 06:50;dukebot;Changeset: c0d51d42
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-05-17 13:48:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c0d51d42d9715b44df995328bba978ba61dec3af
;;;","2022-05-17 07:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/133
Date: 2022-05-17 14:01:54 +0000;;;","2022-05-17 07:28;jlahoda;Fix Request
Request to backport this fix to JDK18u, please.
This fix should allow to to generate classfiles that deserialize certain serialized method references. The serialized form can be produced by classfiles produced by various versions of JDK, but JDK 18 cannot deserialize them, so it would be nice to allow their deserialization on classfiles produced by an JDK 18 update.;;;","2022-08-09 05:16;jlahoda;No exception/failure currently:

$ java /tmp/X.java
1636050357
;;;",,,,,,,,,,,,,,,,,,,,,,,,
PKCS11 provider C_sign() impl should handle CKR_BUFFER_TOO_SMALL error,JDK-8282077,5068887,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,valeriep,mikael,mikael,2022-02-17 14:06,2023-05-10 07:43,2023-10-01 09:57,2022-02-18 22:44,19,,,,,,,,,19,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-hard,,,,,,,,,,,,,,"The Java_sun_security_pkcs11_wrapper_PKCS11_C_1Sign function in src/jdk.crypto.cryptoki/share/native/libj2pkcs11/p11_sign.c should check for and handle CKR_BUFFER_TOO_SMALL, much like Java_sun_security_pkcs11_wrapper_PKCS11_C_1SignFinal already does.",,,,,,,,,,,JDK-8307823,JDK-8303287,JDK-8302922,JDK-8305149,JDK-8305348,,,,,,,,,,,,,,,,,,,,,,,JDK-8281566,JDK-8283057,,,,,,,,,JDK-8080462,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w3uj:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2022-02-18 12:40;valeriep;Add the handling for CKR_BUFFER_TOO_SMALL error for C_Sign(...). However, this handling is coded based on PKCS#11 v3.0 spec for completeness handling. Existing buffer size is good enough for current list of supported signature algorithms, so it can't be tested by regression test. Thus the @noreg-hard label.;;;","2022-02-18 13:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7540
Date: 2022-02-18 21:52:59 +0000;;;","2022-02-18 22:44;dukebot;Changeset: d7f31d0d
Author:    Valerie Peng <valeriep@openjdk.org>
Date:      2022-02-19 06:40:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d7f31d0d53bfec627edc83ceb75fc6202891e186
;;;","2023-03-28 03:08;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Small risk, obvious change.
Clean backport. SAP nighlty testing passed
;;;","2023-03-28 03:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1218
Date: 2023-03-28 10:11:41 +0000;;;","2023-05-08 12:56;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle.
Small risk, obvious change.
Clean backport. SAP nightly testing passed.;;;","2023-05-09 02:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1875
Date: 2023-05-09 09:16:49 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
Update java.xml module-info,JDK-8282071,5068878,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,joehw,joehw,joehw,2022-02-17 11:18,2022-08-23 05:39,2023-10-01 09:57,2022-07-08 14:38,18,19,,,,,,,,19,xml,,0,doc-only,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,noreg-doc,,,,,,,,,,,,,"Update the module-info related to reflect the fact that XPath has support for setting properties through the API since 18 (JDK-8276141).

A cut-and-paste error that caused the XPath limits to carry the id of extensionClassLoader will also need to be fixed.
",,,,,,,,,,,JDK-8290106,JDK-8291250,JDK-8292772,JDK-8292773,JDK-8291407,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276141,JDK-8270504,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w3sj:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,,,"2022-07-08 11:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/126
Date: 2022-07-08 18:23:05 +0000;;;","2022-07-08 14:38;dukebot;Changeset: c86c51cc
Author:    Joe Wang <joehw@openjdk.org>
Date:      2022-07-08 21:34:57 +0000
URL:       https://git.openjdk.org/jdk19/commit/c86c51cc72e3457756434b9150b0c5ef2f5d496d
;;;","2022-08-23 05:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/257
Date: 2022-08-23 12:10:19 +0000;;;","2022-08-23 05:21;yan;Fix request (15u, 13u):

""id"" values should be fixed here, too. That part of the fix is applicable.;;;","2022-08-23 05:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/391
Date: 2022-08-23 12:19:00 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Drop workaround from memory segment implementation,JDK-8282070,5068877,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-02-17 11:01,2022-02-18 13:30,2023-10-01 09:57,2022-02-18 13:30,,,,,,,,,,,tools,,0,foreign-memaccess+abi,foreign-preview,,,,,,,,,,,,,,,,,"After the fix for JDK-8276116 (and related fixes) and JDK-8277850 we no longer need implementation workarounds to help C2 hoist bound checks outside hot loops. Now C2 implements optimizations for loops involving long variables, as well as for hoisting alignment checks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w3sb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-02-17 11:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/644
Date: 2022-02-17 19:07:12 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Set correct alignment constraints on ValueLayout constants,JDK-8282069,5068876,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-02-17 10:49,2022-02-21 08:12,2023-10-01 09:57,2022-02-21 08:12,repo-panama,,,,,,,,,,tools,,0,foreign-memaccess+abi,foreign-preview,,,,,,,,,,,,,,,,,"ValueLayout defines some layout constants such as JAVA_INT, JAVA_FLOAT, etc. These constants do not have the correct alignment constraints set because in the past we ran into issues where alignment would not be enforced correctly in all cases, especially for heap segments.

We now have a comprehensive solution to deal with alignment checks in heap segments (as per JDK-8278151) so we are now in a position to add back alignment constraints to value layout constants.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w3s3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-02-18 10:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/647
Date: 2022-02-18 18:14:43 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve support for deterministic closure of shared scopes,JDK-8282061,5068863,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-02-17 08:01,2022-02-25 09:44,2023-10-01 09:57,2022-02-25 09:44,repo-panama,,,,,,,,,,tools,,0,foreign-memaccess,foreign-preview,,,,,,,,,,,,,,,,,"When closing a shared scope, we perform a thread-local handshake. Each thread is inspected, to look for problematic concurrent accesses to the scope being closed.

When such access is detected, we'd like, in principle, to just make the accessing thread fail with an asynchronous exception. We explored this path in Java 15, and this option was considered too complex to maintain going forward.

For these reasons, we settled on an hybrid approach, where we first update the scope state from ALIVE to CLOSING (in which segments will no longer be accessible). Then the handshake tells us if concurrent access is happening, in which case we go back from CLOSING to ALIVE. If no access is happening, we can move from CLOSING to CLOSED, and call the cleanup actions.

This choice, while simpler to implement, has an important drawback: when races between access and close do occur, we can get exceptions both on the closing side *and* on the accessing side.

A possible improvement would consist in:

1. move the scope from ALIVE to CLOSED - no new thread can access segments associated with the scope
2. do an initial handshake, to collect all threads that are accessing the scope concurrently
3. if no thread is found, finish
4. if some threads T1, T2 ... Tn are found, keep doing handshakes (only against these threads) then go back to (3).

This logic converges quickly, because when we do an handshake against a target thread, we also deoptimize that thread. This means that the thread will have to re-load the liveness state of the resource it's accessing, which will eventually result in an exception being thrown (as the scope is CLOSED). So, it is not possible for a thread to remain in a pending state forever.

This algorithm allows to simplify the ResourceScope::close API.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w3p7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-02-17 08:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/643
Date: 2022-02-17 16:11:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RemoteRuntimeImageTest is not actually testing on JDK 8,JDK-8282060,5068862,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sundar,ihse,ihse,2022-02-17 07:45,2022-05-11 23:11,2023-10-01 09:57,2022-05-05 06:28,19,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,"There is a mismatch between the expectations of jdk/jdk/internal/jrtfs/remote/RemoteRuntimeImageTest.java and how it is actually called, which makes the test currently into a no-op.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w3oz:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2022-02-17 07:49;ihse;Some background on what's going on. This test was introduced in JDK 9 in JDK-8141609. At that point, JDK 8 was used as boot JDK. This test want to verify jrtfs functionality on JDK 8, which was easy to do at this point, by passing the boot JDK into the test. This was done using the environment variable JDK8_HOME. This functionality was ported over from the old test makefiles into the new RunTest.gmk.

However, as JDK 9 turned into JDK 10, the boot JDK switched from JDK 8 to 9, but the variable JDK8_HOME kept pointing to the boot JDK. This causes the test to notice this was bad, and just skip running the actual test. So at this point in time, the test has not been actually doing anything for years.;;;","2022-05-05 02:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8547
Date: 2022-05-05 09:00:47 +0000;;;","2022-05-05 06:28;dukebot;Changeset: ede06c3c
Author:    Athijegannathan Sundararajan <sundar@openjdk.org>
Date:      2022-05-05 13:24:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ede06c3c5f74c64dac3889d35b02541897ba4d94
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Clean up com.sun.tools.javac.util.GraphUtils,JDK-8282056,5068859,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-02-17 06:45,2022-02-23 17:49,2023-10-01 09:57,2022-02-18 05:11,19,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280713,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w3ob:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-02-17 09:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7520
Date: 2022-02-17 17:45:48 +0000;;;","2022-02-18 05:11;roboduke;Changeset: f5120b76
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-02-18 13:09:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f5120b764c6f84776e7ea335d7ff59b16f6496b0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mediaplayer not working with HTTP Live Stream link with query parameter appended with file extension m3u8,JDK-8282054,5068249,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,almatvee,webbuggrp,webbuggrp,2022-02-10 04:58,2022-09-20 23:03,2023-10-01 09:57,2022-04-12 14:05,8,jfx11,jfx17,jfx18,,,,,,jfx19,javafx,,0,dcsnr,dcspn,reproducer-other,sn_113,sn_114,sn_115,sn_116,webbug,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 11, Java OpenJdk 17.0.2

A DESCRIPTION OF THE PROBLEM :
Hi, I'm trying to play the following link:
https://bitdash-a.akamaihd.net/content/MI201109210084_1/m3u8s/f08e80da-bf1d-4e3d-8899-f0f6155f6efa.m3u8

It is working fine on mac and windows but issue if any link has query parameters then it will not only on windows but work fine on mac.

The same following link is not working on windows:
https://bitdash-a.akamaihd.net/content/MI201109210084_1/m3u8s/f08e80da-bf1d-4e3d-8899-f0f6155f6efa.m3u8?s=t

Here are logs:
MediaException: UNKNOWN : com.sun.media.jfxmedia.MediaException: Could not create player! : com.sun.media.jfxmedia.MediaException: Could not create player!
	at javafx.scene.media.MediaException.exceptionToMediaException(MediaException.java:146)
	at javafx.scene.media.MediaPlayer.init(MediaPlayer.java:519)
	at javafx.scene.media.MediaPlayer$InitMediaPlayer.run(MediaPlayer.java:533)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: com.sun.media.jfxmedia.MediaException: Could not create player!
	at com.sun.media.jfxmediaimpl.NativeMediaManager.getPlayer(NativeMediaManager.java:297)
	at com.sun.media.jfxmedia.MediaManager.getPlayer(MediaManager.java:118)
	at javafx.scene.media.MediaPlayer.init(MediaPlayer.java:475)

This issue is only on windows and i will change this link by appending it.m3u8 then it will work fine


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
// issue only on windows not mac

 val mediaView = MediaView()
        val media =
            Media(""https://bitdash-a.akamaihd.net/content/MI201109210084_1/m3u8s/f08e80da-bf1d-4e3d-8899-f0f6155f6efa.m3u8?t=s"")
        val player = MediaPlayer(media)
        player.isAutoPlay = true
        mediaView.mediaPlayer = player

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
https://bitdash-a.akamaihd.net/content/MI201109210084_1/m3u8s/f08e80da-bf1d-4e3d-8899-f0f6155f6efa.m3u8
https://bitdash-a.akamaihd.net/content/MI201109210084_1/m3u8s/f08e80da-bf1d-4e3d-8899-f0f6155f6efa.m3u8?t=s

Both links should work but the second link is not working.
ACTUAL -
Getting following crash if query append with link:
MediaException: UNKNOWN : com.sun.media.jfxmedia.MediaException: Could not create player! : com.sun.media.jfxmedia.MediaException: Could not create player!
	at javafx.scene.media.MediaException.exceptionToMediaException(MediaException.java:146)
	at javafx.scene.media.MediaPlayer.init(MediaPlayer.java:519)
	at javafx.scene.media.MediaPlayer$InitMediaPlayer.run(MediaPlayer.java:533)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: com.sun.media.jfxmedia.MediaException: Could not create player!
	at com.sun.media.jfxmediaimpl.NativeMediaManager.getPlayer(NativeMediaManager.java:297)
	at com.sun.media.jfxmedia.MediaManager.getPlayer(MediaManager.java:118)
	at javafx.scene.media.MediaPlayer.init(MediaPlayer.java:475)

---------- BEGIN SOURCE ----------
// issue only on windows not mac

 val mediaView = MediaView()
        val media =
            Media(""https://bitdash-a.akamaihd.net/content/MI201109210084_1/m3u8s/f08e80da-bf1d-4e3d-8899-f0f6155f6efa.m3u8?t=s"")
        val player = MediaPlayer(media)
        player.isAutoPlay = true
        mediaView.mediaPlayer = player
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Change link from this 
https://bitdash-a.akamaihd.net/content/MI201109210084_1/m3u8s/f08e80da-bf1d-4e3d-8899-f0f6155f6efa.m3u8?t=s
to this
https://bitdash-a.akamaihd.net/content/MI201109210084_1/m3u8s/f08e80da-bf1d-4e3d-8899-f0f6155f6efa.m3u8?t=s&s=.m3u8
Or remove query parameters

FREQUENCY : always


",,,,,,,,,,,JDK-8284989,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293971,,,,,,JDK-8282999,,,,,,"2022-02-17 06:02;pnarayanaswa;MediaExample.java;https://bugs.openjdk.org/secure/attachment/98009/MediaExample.java",,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2vzwr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2022-02-17 06:06;pnarayanaswa;Checked with attached test case in Windows 10, issue is observed!, with query parameter in the link(appears link is invalid media HLS stream ) 
but media loads without query parameter or the absolute path to <Filename>.m3u8 

but both link works in VLC media player.
(https://bitdash-a.akamaihd.net/content/MI201109210084_1/m3u8s/f08e80da-bf1d-4e3d-8899-f0f6155f6efa.m3u8
https://bitdash-a.akamaihd.net/content/MI201109210084_1/m3u8s/f08e80da-bf1d-4e3d-8899-f0f6155f6efa.m3u8?t=s)
Test Result:
=========
8u321, openjfx11, 17, 18ea10: same behavior, media doesn't load with query parameter, crash is not observed

;;;","2022-03-10 18:36;almatvee;It works on Mac, since Mac uses different framework (AVFoundation) for HLS playback. This particular issue (url with query parameter) is fixed, however audio in provided stream will not work on Windows and Linux. This is due to audio stream provided as separate stream via EXT-X-MEDIA tag and it is not supported by JavaFX Media. I filed enhancement for this JDK-8282999.;;;","2022-03-10 19:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/750
Date: 2022-03-11 03:01:39 +0000;;;","2022-04-12 14:05;dukebot;Changeset: d1110f47
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-04-12 21:00:41 +0000
URL:       https://git.openjdk.java.net/jfx/commit/d1110f479567c314ecb6848700bcf4552509d7e9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Create a regression test for JDK-8000326,JDK-8282046,5068842,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-02-17 01:47,2022-10-11 04:19,2023-10-01 09:57,2022-03-30 09:07,11,17,18,19,8,,,,,19,client-libs,,0,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,"Create a regression test for CCC8000326

Issue is identified by JDK-8000326, which identifies that after focus moves into JMenuBar, whose focus traversal key is disabled by default, it never moves to other focusable component.
 
By default, pressing the Tab key does not transfer focus from a JMenuBar which is added to a container together with other Swing components, because the focusTraversalKeysEnabled property of JMenuBar is set to false. To resolve this, you should call the JMenuBar.setFocusTraversalKeysEnabled(true) method.
 
The test verifies focus traversal for the above described scenario.",,,,,,,,,,,JDK-8288561,JDK-8288721,JDK-8295135,JDK-8288951,JDK-8289264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289225,,,,,,JDK-8000326,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w3kj:",9223372036854775807,b16,,,,,,,,,,,"2022-02-17 02:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7512
Date: 2022-02-17 09:56:45 +0000;;;","2022-03-30 09:07;dukebot;Changeset: 97c7298a
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-03-30 16:05:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/97c7298a39cdd683508617d904c83cc3261da15b
;;;","2022-06-21 05:20;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-06-21 05:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/482
Date: 2022-06-21 12:26:18 +0000;;;","2022-10-09 10:54;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2022-10-09 11:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1419
Date: 2022-10-09 17:58:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
"When loop strip mining fails, safepoints are removed from loop anyway",JDK-8282045,5068841,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,roland,roland,roland,2022-02-17 01:47,2023-05-03 00:52,2023-10-01 09:57,2022-03-01 06:46,11,17,18,19,,,,,,19,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-19,,,,,,,,,,,,"I noticed that if loop strip mining fails because a safepoint is not found right above the exit test following partial peel for instance, all safepoints are removed from the loop anyway.",,,,,,,,,,,JDK-8284096,JDK-8283917,JDK-8284407,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8186027,JDK-8307131,,,,,JDK-8283451,JDK-8281322,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w3kb:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-17 02:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7513
Date: 2022-02-17 10:00:32 +0000;;;","2022-02-17 15:22;dlong;ILW = mostly unnoticed impact; likelihood unclear; disable stripmining = LMM = P5;;;","2022-03-01 06:46;dukebot;Changeset: 2c5d266f
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-03-01 14:43:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2c5d266f9f20005bc2a6c30dcaa95b059ea59d74
;;;","2022-03-30 03:57;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Skara recognizes it as clean (IRNode.java has different context). Test has passed. ;;;","2022-03-30 04:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/312
Date: 2022-03-30 10:53:22 +0000;;;","2022-04-04 00:20;thartmann;Fix Request (JDK 18u)
Fixes incorrect removal of safepoints from counted loops. The fix is low risk and applies cleanly (except a minor conflict due to changes to surrounding code). The fix was already backported to JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-04-04 00:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/89
Date: 2022-04-04 07:19:02 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
[testbug] FileEncodingTest.java depends on default encoding,JDK-8282042,5068834,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,mbaesken,mbaesken,2022-02-17 00:49,2022-04-25 07:00,2023-10-01 09:57,2022-02-22 08:53,18,19,,,,,,,,19,core-libs,,0,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,noreg-self,,,,,,,,,,,,,,,"I am looking over and addressing tier1 test failures on AIX, and I found one that I believe to be a testbug. FileEncodingTest.java expects the default encoding with '-Dfile.encoding=COMPAT' to be US-ASCII, but on AIX ISO-8859-1 is returned.",,,,,,,,,,,JDK-8285590,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,aix,,,,,"0|i2w3ir:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2022-02-17 15:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7525
Date: 2022-02-17 22:50:37 +0000;;;","2022-02-22 08:53;dukebot;Changeset: 58e1882f
Author:    Tyler Steele <tyler.steele@ibm.com>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2022-02-22 16:50:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/58e1882f3ccc648c5f6d216d37cfd1805889b8d8
;;;","2022-04-08 15:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/96
Date: 2022-04-08 22:16:01 +0000;;;","2022-04-08 15:35;tsteele;jdk18u backport request
This small testbug fix backports cleanly an poses no risk. It was requested that I backport it to have a cleaner AIX build for jdk18.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Change java/util/zip/ZipFile/DeleteTempJar.java to stop HttpServer cleanly in case of exceptions,JDK-8282036,5068827,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tvoniadka,tvoniadka,tvoniadka,2022-02-16 21:15,2023-02-01 02:11,2023-10-01 09:57,2022-06-27 19:00,11,17,18,19,8,,,,,20,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,,,,,,,,,,,,,"The testfile java/util/zip/ZipFile/DeleteTempJar.java has the following syntax:

HttpServer server = //create server;
server.start();
try {
  //the test
  server.stop();
} catch (Throwable) {
  //fail
}

The server.stop() does not get executed in case of encountering a failure. As a result, the test may get hung until a timeout. It should be easy enough to update the test to close the server in failure scenario too.",,,,,,,,,,,JDK-8301598,JDK-8301590,JDK-8299458,JDK-8299446,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w3h7:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2022-06-26 21:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9293
Date: 2022-06-27 04:50:09 +0000;;;","2022-06-27 19:00;dukebot;Changeset: 784fa0ad
Author:    Thejasvi Voniadka <tvoniadka@openjdk.org>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2022-06-28 01:55:17 +0000
URL:       https://git.openjdk.org/jdk/commit/784fa0add77a3e473e2cdbdcc27b3ed076678565
;;;","2023-01-30 10:00;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.19-oracle,17.0.7-oracle.
No risk, only a test change.
Clean backport.
Corresponding test passes. SAP nightly testing passed.
;;;","2023-01-30 10:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1127
Date: 2023-01-30 17:59:32 +0000;;;","2023-01-30 10:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1699
Date: 2023-01-30 18:04:40 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Remove support for unbound sequence layouts,JDK-8282026,5068810,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-02-16 15:00,2022-02-21 06:18,2023-10-01 09:57,2022-02-21 06:18,repo-panama,,,,,,,,,,tools,,0,foreign-preview,,,,,,,,,,,,,,,,,,"Unbound sequence layouts seem to be a corner of the layout API. It is mostly used in code like this:

VarHandle v = MemoryLayout.sequenceLayout(0, JAVA_INT).varHandle(sequenceElement());

Where it looks more like boilerplate than an useful feature - e.g. it could be replaced with:

VarHandle v = JAVA_INT.arrayElementVarHandle();

Without loss of functionality. The other, dubious use case, is to model arrays with unspecified size in jextract - but, since in that case we end up generating a layout that has no size, jextract has to carefully avoid touching that layout too much.

In short, all existing use cases of unbounded sequences could be replaced with sequence layouts whose element size is 0 (which is supported by the API).

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w3df:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-02-17 07:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/642
Date: 2022-02-17 15:23:43 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(ctrl != __null) failed: control out is assumed to be unique after JDK-8281732,JDK-8282025,5068809,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jiefu,jiefu,jiefu,2022-02-16 14:57,2022-06-23 10:41,2023-10-01 09:57,2022-02-17 14:55,19,,,,,,,,,19,hotspot,,0,gc-shenandoah,oraclejdk-na,oracle-triage-19,tencent-interest,,,,,,,,,,,,,,,"The following tests fail after JDK-8281732.

```
compiler/gcbarriers/UnsafeIntrinsicsTest.java
gc/metaspace/TestMetaspacePerfCounters.java
gc/shenandoah/TestEvilSyncBug.java
gc/stringdedup/TestStringDeduplicationFullGC.java
gc/stringdedup/TestStringDeduplicationTableResize.java
gc/stringdedup/TestStringDeduplicationYoungGC.java
serviceability/dcmd/gc/HeapDumpCompressedTest.java
jdk/jfr/event/gc/detailed/TestGCPhaseConcurrent.java
jdk/jfr/event/gc/detailed/TestShenandoahHeapRegionStateChangeEvent.java
jdk/jfr/event/gc/detailed/TestShenandoahHeapRegionInformationEvent.java
jdk/jfr/event/oldobject/TestShenandoah.java
sun/net/www/protocol/https/HttpsURLConnection/B6216082.java
sun/tools/jmap/BasicJMapTest.java
``` 

```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/jdk/src/hotspot/share/opto/node.cpp:2410), pid=157605, tid=157722
#  assert(ctrl != __null) failed: control out is assumed to be unique
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc..jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc..jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, li
nux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1399587]  Node::unique_ctrl_out() const+0x87
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281732,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w3d7:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-16 15:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7508
Date: 2022-02-16 23:08:18 +0000;;;","2022-02-16 15:23;kvn;The failures happened with Shenandoah GC based on fix and log.;;;","2022-02-16 23:51;chagedorn;ILW = C2 assertion failure in Shenandoah GC specific code, multiple tests with Shenandoah GC, choose other GC or disable compilation of affected method = HMM = P2;;;","2022-02-17 14:55;roboduke;Changeset: fdce35f3
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-02-17 22:53:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fdce35f3a1c12a64238d0c76c02451a25b0b4abb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
PropertiesStoreTest and StoreReproducibilityTest jtreg failures due to en_CA locale,JDK-8282023,5068806,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jpai,macarte,macarte,2022-02-16 14:23,2022-08-09 09:02,2023-10-01 09:57,2022-02-28 19:50,18,,,,,,,,,19,core-libs,,0,starter,starter-bug,testonly,,,,,,,,,,,,,,,,"Both PropertiesStoreTest and StoreReproducibilityTest jtreg tests fail when run on a system whose default locale is en_CA (likely anything other than US)

Issue:

The Properties class serializes via the store method and adds a Date comment using Date.toString(), this results in a date looking like: Wed Feb 16 09:27:53 PST 2022

The tests in question use DateTimeFormatter.ofPattern(pattern).parse(text) to read and verify the comment

where the pattern is: ""EEE MMM dd HH:mm:ss zzz uuuu""

This will parse successfully on US systems, however DateTimeFormatter uses the default locale which for en_CA expects the strings for EEE and MMM to end in a period/full-stop e.g.

Wed. Feb. 16 09:27:53 PST 2022

Root cause:

Date.toString() always outputs in ""US"" styled format (it doesn't use any localization)

DateFormatter.ofPattern(pattern).parse(text) defaults to the current locale

Solution:

Change the tests to use US locale: DateTimeFormatter.ofPattern(pattern, Locale.US).parse(text)

Recommendations:

Add a further test to check for regressions in either of Date or DateTimeFormatter by testing:

DateTimeFormatter.ofPattern(""EEE MMM dd HH:mm:ss zzz uuuu"", Locale.US).parse(new Date().toString())


","default Locale = en_CA

Windows and Mac",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282173,,,,,,,,JDK-8231640,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2w3cj:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2022-02-17 05:14;jpai;Hello Mat,
Do you have the logs and the exception stacktrace for these failures? I gave this a quick try with en_CA and both tests continue to pass. The jtreg log file from the failed run will help to see what's different between what I tried and the failed run.;;;","2022-02-17 05:32;jpai;Nevermind, I found a way to reproduce this issue.;;;","2022-02-21 06:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7558
Date: 2022-02-21 14:09:50 +0000;;;","2022-02-28 19:50;dukebot;Changeset: e4d9fc81
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-03-01 03:49:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e4d9fc811e0ef0eb9b097e06525a1183445d8d79
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"Unused static fields DEGREES_TO_RADIANS, RADIANS_TO_DEGREES in StrictMath",JDK-8282019,5068798,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2022-02-16 12:54,2022-02-23 17:49,2023-10-01 09:57,2022-02-17 04:32,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,"Couple of fields in StrictMath are unused since JDK-8244146:
1. DEGREES_TO_RADIANS
2. RADIANS_TO_DEGREES

Methods toDegrees/toRadians used to use this fields. But now StrictMath just calls Math methods.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w3ar:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-02-16 12:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7495
Date: 2022-02-16 14:48:04 +0000;;;","2022-02-17 04:32;roboduke;Changeset: d0e11808
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-02-17 12:31:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d0e11808fd688d96e5cfeb586d1de277f26da5ad
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"sun/net/www/protocol/https/HttpsURLConnection/B6216082.java fails with ""SocketException: Unexpected end of file from server""",JDK-8282017,5068795,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mchhipa,dcubed,dcubed,2022-02-16 12:11,2023-09-20 00:20,2023-10-01 09:57,2022-02-17 09:46,19,,,,,,,,,19,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,problemlist,regression,tier2,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

sun/net/www/protocol/https/HttpsURLConnection/B6216082.java

Here's a snippet from the log file:

#section:main
----------messages:(5/251)----------
command: main B6216082
reason: User specified action: run main/othervm B6216082 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/sun.net.www=ALL-UNNAMED
elapsed time (seconds): 1.31
----------configuration:(4/99)----------
Boot Layer
  add modules: java.base             
  add exports: java.base/sun.net.www ALL-UNNAMED

----------System.out:(3/75)----------
100.101.199.161
https server listen on: 39879
https proxy listen on: 35221
----------System.err:(21/1569)----------
java.net.SocketException: Unexpected end of file from server
	at java.base/sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:936)
	at java.base/sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:759)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.doTunneling0(HttpURLConnection.java:2173)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.doTunneling(HttpURLConnection.java:2135)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:185)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1664)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1588)
	at java.base/java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:529)
	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:308)
	at B6216082.makeHttpCall(B6216082.java:183)
	at B6216082.main(B6216082.java:90)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.net.SocketException: Unexpected end of file from server
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.net.SocketException: Unexpected end of file from server
----------rerun:(38/8066)*----------

I'm starting this bug as a P2 since it looks like a regression.",,,,,,,,,,,JDK-8313513,JDK-8313296,JDK-8316572,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8061729,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w3a3:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-02-16 12:53;dfuchs;The cause of the regression is JDK-8061729
A simple fix seems to be to revert test/jdk/sun/net/www/protocol/https/HttpsURLConnection/TunnelProxy.java to what it was before JDK-8061729;;;","2022-02-16 13:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7503
Date: 2022-02-16 21:10:41 +0000;;;","2022-02-17 09:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7519
Date: 2022-02-17 17:13:38 +0000;;;","2022-02-17 09:46;roboduke;Changeset: cd9a3cf0
Author:    Mahendra Chhipa <mahendra.chhipa@oracle.com>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-02-17 17:45:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cd9a3cf05b2c200709103e2e8596414a62a1c441
;;;","2022-06-20 11:44;msheppar;in corelibs JDK19 ATR run -- JDK19 b26;;;","2023-09-18 07:03;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
No risk, only a test change.
Included in backport of 8061729. Dropped ProblemList change, else clean.
Tests pass. SAP nightly testing passed.
;;;","2023-09-18 07:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1750
Date: 2023-09-18 14:08:41 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
test/jdk/tools/jpackage/windows/WinL10nTest.java test fails if light.exe is not in %PATH%,JDK-8282011,5068765,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,asemenyuk,asemenyuk,2022-02-16 09:40,2023-09-27 00:56,2023-10-01 09:57,2022-02-16 15:25,17,18,,,,,,,,19,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_112,testbug,,,,,,,,,,,,,,"If WinL10nTest.java test is executed in the system where path to WiX toolkit binaries is not in %PATH% environment variable the test fails:

[12:35:15.166] ERROR: Unexpected null value: Check output contains [-cultures:en-us] string
[12:35:15.168] [  FAILED  ] WinL10nTest([name=a.wxl; culture=en-us](length=1), en-us, null).test; checks=7
java.lang.AssertionError: Unexpected null value: Check output contains [-cultures:en-us] string
	at jdk.jpackage.test.TKit.error(TKit.java:264)
	at jdk.jpackage.test.TKit.assertNotNull(TKit.java:624)
	at jdk.jpackage.test.TKit$TextStreamVerifier.apply(TKit.java:810)
	at WinL10nTest.lambda$test$3(WinL10nTest.java:122)
	at jdk.jpackage.test.Functional$ThrowingBiConsumer.lambda$toBiConsumer$0(Functional.java:56)
	at jdk.jpackage.test.PackageTest$Handler.lambda$verifyPackageBundle$2(PackageTest.java:573)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest$Handler.verifyPackageBundle(PackageTest.java:573)
	at jdk.jpackage.test.PackageTest$Handler.accept(PackageTest.java:539)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:461)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:398)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at jdk.jpackage.test.PackageTest.lambda$runActions$21(PackageTest.java:362)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.lambda$runActions$22(PackageTest.java:361)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.runActions(PackageTest.java:360)
	at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:57)
	at WinL10nTest.test(WinL10nTest.java:165)
",,,,,,,,,,,JDK-8316784,JDK-8317017,JDK-8316847,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,"0|i2w33f:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-02-16 09:45;asemenyuk;WinL10nTest.getLightCommandLine() function that filters light.exe command lines from jpackage output at https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/test/jdk/tools/jpackage/windows/WinL10nTest.java#L95
assumes light.exe is in the %PATH% and always specified without the full path. Though jpackage can detect light.exe installed in WiX well-known installation locations. In this case, light.exe is prefixed with the full path in jpackage output.

Need to adjust WinL10nTest.getLightCommandLine() function accordingly.;;;","2022-02-16 10:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7500
Date: 2022-02-16 17:52:43 +0000;;;","2022-02-16 15:25;roboduke;Changeset: 0b00ce17
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2022-02-16 23:23:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0b00ce17cd6b530d9394e79ac8b07208cd4b92f5
;;;","2023-09-26 01:27;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
No risk, only a test change.
Clean backport.
SAP nighlty testing passed including this test.;;;","2023-09-26 01:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1792
Date: 2023-09-26 08:32:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect handling of quoted arguments in ProcessBuilder,JDK-8282008,5068762,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,rriggs,omikhaltcova,omikhaltcova,2022-02-16 09:31,2022-09-07 21:51,2023-10-01 09:57,2022-04-18 12:05,11.0.11-oracle,17,18,,,,,,,19,core-libs,,1,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,regression,,,,,,,,,,,,,"For example, it's needed to execute the following command on Windows:
C:\Windows\SysWOW64\WScript.exe ""MyVB.vbs"" ""C:\Program Files\Git\"" ""Test""
it's equal to:
new ProcessBuilder(""C:\\Windows\\SysWOW64\\WScript.exe"", ""MyVB.vbs"", ""\""C:\\Program Files\\Git\\\"""", ""Test"").start();

But the result of processing ""\""C:\\Program Files\\Git\\\"""" is
1) ""C:\Program"" and ""Files\Git\""     if jdk.lang.Process.allowAmbiguousCommands = true;
2) ""\C:\Program"" and ""Files\Git\\\""  if jdk.lang.Process.allowAmbiguousCommands = false.

The behavior was changed with JDK-8250568, CVE-2021-2161 (Bug 1951231 (CVE-2021-2161) - CVE-2021-2161 OpenJDK: Incorrect handling of partially quoted arguments in ProcessBuilder on Windows (Libraries, 8250568), https://bugzilla.redhat.com/show_bug.cgi?id=1951231 ).
During this security fix the restriction to the string ending with ""\\\"""" was added so now such a string is treated as unquoted even it begins with a quote.
",,,,,,,,,,,JDK-8286626,JDK-8286806,JDK-8293059,JDK-8293058,JDK-8293057,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282989,,,,,,,,,,,,,,JDK-8285734,,,,,,"2022-02-16 09:43;omikhaltcova;Main.java;https://bugs.openjdk.org/secure/attachment/97998/Main.java","2022-02-16 09:43;omikhaltcova;MyVB.vbs;https://bugs.openjdk.org/secure/attachment/97999/MyVB.vbs",,,,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,"0|i2w32r:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-02-16 13:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7504
Date: 2022-02-16 21:19:04 +0000;;;","2022-02-17 05:14;aefimov;Reproduced on JDK18 EA build: 18+36-2087;;;","2022-02-17 06:42;rriggs;""A double quote mark preceded by a backslash (\"") is interpreted as a literal double quote mark ("").""
According to: https://docs.microsoft.com/en-us/cpp/cpp/main-function-command-line-args

That was the reason for the change in JDK-8250568.

So the application supplied quotes combined with the trailing file separator results in unbalanced quotes.

Without the application supplied quotes, the implementation quotes the string (because of the embedded space) and doubles up the backslash so it does not escape the final quote.;;;","2022-02-25 08:19;mkartashev;There's a separate case of a backslash preceded by a backslash followed by a quote (\\""). This was effectively (but perhaps unintentionally) treated as unquoted "" and this is what users seem to continue to expect from this code. And I believe it is a reasonable expectation.;;;","2022-03-10 12:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7709
Date: 2022-03-04 23:20:21 +0000;;;","2022-04-18 12:05;dukebot;Changeset: 897d6c0d
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2022-04-18 19:03:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/897d6c0dc7cdfb3ad92f864f9ad4b50e642197e4
;;;","2022-04-22 06:14;omikhaltcova;Fix request (11u)

This issue is observed on jdk11u as well with the test attached.
All regular tests passed on Windows.;;;","2022-04-22 06:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1040
Date: 2022-04-22 13:09:39 +0000;;;","2022-04-25 06:19;goetz;@omikhaltcova, could you please backport this to 17 first?  Alternatively please explain why the fix is not needed in 17.;;;","2022-05-06 03:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/386
Date: 2022-05-06 10:48:00 +0000;;;","2022-05-06 03:57;omikhaltcova;Fix request (17u) 

This issue is observed on jdk17u as well with the test attached. After applying the patch the test works correctly.
The patch applied cleanly. All regular tests passed on Windows.
;;;",,,,,,,,,,,,,,,,,,,
Bad result for the snippet @link tag if substring/regex consists of whitespace,JDK-8281969,5068720,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prappo,aksinsin,aksinsin,2022-02-16 04:55,2022-07-27 15:51,2023-10-01 09:57,2022-07-14 15:30,18,,,,,,,,,19,tools,,0,javadoc-snippets,,,,,,,,,,,,,,,,,,"What happened
----------------------
Javadoc snippet output displays class name defined in the ""target"" attribute of @link tag instead of white space hyperlink.

How to reproduce
------------------------
use below code and generate javadoc using jdk-18.

public class TestJavaDoc{
/**
     * {@snippet :
     * class HelloWorld {
     *     public static void main(String... args) {
     *         System.out.println(""Hello World!"");// @highlight substring="" "" type=""highlighted""
     *         System.out.println(""Hello World!"");// @link substring="" "" target=""System#out""
     * }
     * }
     * }
     */

public void errorsInLinkTag(){}
}

Actual Output (PFA)
-------------------
For highlight tag, output is correct.
For link tag, ""System "" is displayed over the white space.

Expected Output:
-----------------------
White space used in substring or regex handled properly with hyperlink. 
","*Java:* 18-ea; OpenJDK 64-Bit Server VM 18-ea+27-1924

*Runtime:* OpenJDK Runtime Environment 18-ea+27-1924

*System:* Windows 10 version 10.0 running on amd64; UTF-8; en_IN (nb)",,,,,,,,,,JDK-8291315,JDK-8291437,JDK-8290412,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290243,,,,,,,,,,,,,,,,,,,,,,"2022-02-16 04:55;aksinsin;image.png;https://bugs.openjdk.org/secure/attachment/97992/image.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w2tf:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-07-14 10:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/142
Date: 2022-07-14 17:51:39 +0000;;;","2022-07-14 13:44;prappo;Clarified this issue's summary and improved its formatting.;;;","2022-07-14 14:03;jjg;Can you give some explanation of why the output is as it is in the given screenshot?;;;","2022-07-14 14:16;prappo;[~jjg] it was due to the following two factors:
1. A snippets's markup `@link` tag stripped whitespace
2. A link whose label is an empty content (content != null && content.isEmpty() == true) derived (and still does) the default label from the reference. Hence, ""System"" on the screenshot.

Initially I eliminated both factors, but later decided to minimally eliminate just the first.;;;","2022-07-14 14:27;jjg;[~prappo] Thanks; so the word is being _inserted_ in place of the ""empty label"" before the trailing whitespace?   Being pedantic, it means ""displayed over the white space"" in the description is not technically accurate.
;;;","2022-07-14 15:23;prappo;> so the word is being _inserted_ in place of the ""empty label"" before the trailing whitespace?

Correct. Have a look at jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter#getCrossClassLink to better understand what was happening. BTW, I think I might want to re-propose that first commit I nixed, later in JDK 20. The reason is simpler, clearer code:

% git show 54638958846
commit 54638958846dce0607271c39b330908ee69aec46
Author: Pavel Rappo <prappo@openjdk.org>
Date:   Thu Jul 14 12:14:31 2022 +0100

    fix: allow empty-label links

diff --git a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlDocletWriter.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlDocletWriter.java
index fce9296304b..c3d68cf9f5b 100644
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlDocletWriter.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlDocletWriter.java
@@ -756,7 +756,7 @@ public class HtmlDocletWriter {
                 DocLink link = configuration.extern.getExternalLink(packageElement, pathToRoot,
                                 className + "".html"", refMemName);
                 return links.createLink(link,
-                    (label == null) || label.isEmpty() ? defaultLabel : label, style,
+                    label == null ? defaultLabel : label, style,
                     resources.getText(""doclet.Href_Class_Or_Interface_Title"",
                         getLocalizedPackageName(packageElement)), true);
             }
diff --git a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlLinkInfo.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlLinkInfo.java
index bb9367b85cc..1c36514a90b 100644
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlLinkInfo.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlLinkInfo.java
@@ -426,7 +426,7 @@ public class HtmlLinkInfo extends LinkInfo {
                  PROPERTY_COPY,
                  CLASS_USE_HEADER -> false;
 
-            default -> label == null || label.isEmpty();
+            default -> label == null;
         };
     }
 
diff --git a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/links/LinkInfo.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/links/LinkInfo.java
index aacdbcaa9e2..5713374c64f 100644
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/links/LinkInfo.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/links/LinkInfo.java
@@ -116,7 +116,7 @@ public abstract class LinkInfo {
      * @return the label for this class link.
      */
     public Content getClassLinkLabel(BaseConfiguration configuration) {
-        if (label != null && !label.isEmpty()) {
+        if (label != null) {
             return label;
         } else if (isLinkable()) {
             Content tlabel = newContent();

;;;","2022-07-14 15:30;jjg;Can we get past the `seeTagToContent` work JDK-8290243 before doing more changes in 20, please? :-);;;","2022-07-14 15:30;dukebot;Changeset: 15d3329e
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-07-14 22:27:53 +0000
URL:       https://git.openjdk.org/jdk19/commit/15d3329edd552dcda29d6de2a6f20a5db075b60b
;;;","2022-07-14 15:35;prappo;[~jjg] most certainly so! I didn't mean to scare you with conflicts. I just wanted both to show you what I was talking about and preserve the change.;;;",,,,,,,,,,,,,,,,,,,,,
Absolute path of symlink is null in JFileChooser,JDK-8281966,5068301,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,webbuggrp,webbuggrp,2022-02-11 02:06,2023-09-11 09:38,2023-10-01 09:57,2022-08-10 04:45,11,17,18,19,8,,,,,20,client-libs,,0,dcspn,reproducer-yes,sn_123,sn_124,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Java version is 1.8.0_311, L&F used is Nimbus

A DESCRIPTION OF THE PROBLEM :
JFileChooser is created with selection mode DIRECTORIES_ONLY.
When there is a symlink created by ""mklink /D link target"", this visually appears as a directory in JFileChooser but cannot by selected while normal directory can. By cannot be selected I don't mean it cannot be clicked by mouse or navigated to by arrow keys, but the PropertyChangeEvent for JFileChooser.SELECTED_FILE_CHANGED_PROPERTY reports the newValue to be null and also the Folder name: text field does not change to reflect the path of the selected symlink.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Create a regular directory in windows: mkdir c:\target
2. Create a link targeting this directory: mklink /D c:\link c:\target
3. In JFileChooser, navigate to c:\
4. observe that when you click on target, the newValue of the property correctly reports ""c:\target""
5. click on link directory and see that the newValue reports null

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
newValue = ""c:\link""
ACTUAL -
newValue = null

---------- BEGIN SOURCE ----------
import java.awt.Dimension;
import java.awt.EventQueue;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Arrays;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;

public class FileChooserTest {

    public static void main(String[] args) {
        Arrays.stream(UIManager.getInstalledLookAndFeels()).filter(info -> ""Nimbus"".equals(info.getName())).findFirst().ifPresent(info -> {
            try {
                UIManager.setLookAndFeel(info.getClassName());
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                //
            }
        });

        JFrame frame = new JFrame(""JFileChooser test"");
        frame.setPreferredSize(new Dimension(600, 600));
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogType(JFileChooser.CUSTOM_DIALOG);
        jfc.setControlButtonsAreShown(false);
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jfc.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY.equals(evt.getPropertyName())) {
                    System.out.println(String.format(""Value changed: %s -> %s"", evt.getOldValue(), evt.getNewValue()));
                }
            }
        });
        frame.add(jfc);
        frame.pack();
        EventQueue.invokeLater(() -> frame.setVisible(true));
    }
}

---------- END SOURCE ----------

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8015695,,JDK-8307105,,,,,,JDK-8316029,,,,,,"2022-02-16 02:41;pnarayanaswa;FileChooserTest.java;https://bugs.openjdk.org/secure/attachment/97991/FileChooserTest.java",,,,,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,"0|i2w08b:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-02-16 02:41;pnarayanaswa;Checked with attached test case, Issue is reproducible, 
Test Result:
=========
8: Fail
8u321: Fail
11: Fail
11.0.14: Fail
17: Fail
18ea35: Fail
19ea9: Fail
;;;","2022-07-21 11:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9597
Date: 2022-07-21 18:31:46 +0000;;;","2022-08-10 04:45;dukebot;Changeset: ecfa38ff
Author:    Tejesh R <tr@openjdk.org>
Committer: Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-08-10 11:43:02 +0000
URL:       https://git.openjdk.org/jdk/commit/ecfa38ffa8620e41854a043497f19863da297947
;;;","2023-05-30 02:30;aivanov;The fix introduced a regression which is addressed under JDK-8307105.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointer in InputMethod components in JFXPanel,JDK-8281953,5068303,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,webbuggrp,webbuggrp,2022-02-11 02:17,2022-02-28 16:39,2023-10-01 09:57,2022-02-22 07:06,8,jfx11,jfx17,jfx18,,,,,,jfx19,javafx,,0,dcspn,reproducer-yes,sn_112,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
JavaFX 17.0.1
JDK 11.0.7


A DESCRIPTION OF THE PROBLEM :
The usage of InputMethod components in JFXPanel is not properly synchronized. 
They are used simultaneously by both the JavaFX and AWT threads.
This leads to a NullPointerException if the AWT thread accesses them while the Node is no longer in the scene.

java.lang.NullPointerException: null
	at javafx.scene.control.skin.TextInputControlSkin$6.getTextLocation(TextInputControlSkin.java:308)
	at javafx.scene.Scene$InputMethodRequestsDelegate.getTextLocation(Scene.java:4176)
	at javafx.embed.swing.InputMethodSupport$InputMethodRequestsAdapter.getTextLocation(InputMethodSupport.java:61)
	at sun.awt.im.InputMethodContext.getTextLocation(InputMethodContext.java:278)
	at sun.awt.windows.WInputMethod$1.run(WInputMethod.java:616)
	at java.awt.event.InvocationEvent.dispatch$$$capture(InvocationEvent.java:313)
	at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:770)
	at java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Start the sample
2. Click into 'JavaFx TextField' TextField
3. Focus an window of another application
4. Focus the sample window
5. Make the window small so that 'JavaFx TextField' TextField disappears and make it bigger again
6. Repeat step 5


---------- BEGIN SOURCE ----------
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.control.ToolBar;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;

public class JavaFxInSwing {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {

            JPanel panel = new JPanel();
            panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
            panel.add(new java.awt.TextField(""Swing TextField""));

            final JFXPanel fxPanel = new JFXPanel();
            panel.add(fxPanel);

            JFrame frame = new JFrame(""Test"");
            frame.add(panel);
            frame.setSize(300, 200);
            frame.setVisible(true);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

            Platform.runLater(() -> {
                ToolBar toolBar = new ToolBar();
                toolBar.getItems().addAll(
                        new Label(""JavaFx Label""),
                        new TextField(""JavaFx TextField"")
                );
                fxPanel.setScene(new Scene(new VBox(toolBar), Color.ALICEBLUE));
            });

        });
    }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-02-15 23:17;pnarayanaswa;JavaFxInSwing.java;https://bugs.openjdk.org/secure/attachment/97986/JavaFxInSwing.java",,,,,,,,,,,,,,generic,,,,,,,,,windows_10,,,,,"0|i2w08r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@368b4b86,,,,,,,,,"2022-02-15 23:18;pnarayanaswa;Checked with attached test, Issue is reproducible,
Test Result:
=========
8: Fail
8u321: Fail
openjfx11: Fail
openjfx17: Fail
openjfx18ea10: Fail

Issue was not observed in Ubuntu 20.04.;;;","2022-02-17 05:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/735
Date: 2022-02-17 12:57:27 +0000;;;","2022-02-22 07:06;roboduke;Changeset: a0bb545b
Author:    Eduard Sedov <eduard.sedov@zeiss.com>
Committer: Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2022-02-22 15:05:24 +0000
URL:       https://git.openjdk.java.net/jfx/commit/a0bb545b21d1139dd95d7ee9dea9298e89666d9b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Parser skips too many bytes for fractional types,JDK-8281948,5068692,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-02-15 22:10,2023-05-19 01:14,2023-10-01 09:57,2022-02-16 07:36,14,17,19,,,,,,,19,hotspot,,0,amazon-interest,,,,,,,,,,,,,,,,,,"A program may only subscribe to events of type X, i.e. EventStream::onEvent(""X"", ...)  and when the parser finds an event of any other type in the file, it doesn't read the contents of the event, instead it skips to the next event. 

The parser can also skip values, for example a String or an integer value, when reading constant data in check point events. This can happen when a constant with a certain ID is already known.

Problem is that the amount of bytes to skip is incorrect for float and double values. This has gone unnoticed since only native can create constant types and I believe there is no such type today that uses fractional types. 

Today, Double.SIZE bytes (64) and Float.SIZE (32) are skipped instead of Double.BYTES (8) and Float.BYTES (4). The issue was found when implementing file scrubbing.

We should consider backporting the fix.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w2n7:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-02-15 23:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7488
Date: 2022-02-16 06:47:07 +0000;;;","2022-02-16 07:36;roboduke;Changeset: 7428b376
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-02-16 15:35:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7428b37696f1093094e69410f36dbb74098c9d4d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/arguments/TestCodeEntryAlignment.java fails on AVX512 machines,JDK-8281936,5068676,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jiefu,jiefu,jiefu,2022-02-15 15:28,2022-07-12 13:08,2023-10-01 09:57,2022-02-17 21:03,19,,,,,,,,,19,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-19,tencent-interest,tier6,,,,,,,,,,,,,,"compiler/arguments/TestCodeEntryAlignment.java fails on AVX512 machines

```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jvm/jdk/src/hotspot/cpu/x86/assembler_x86.cpp:12699), pid=8048, tid=8049
#  assert(code_section->limit() - code_section->end() > src_len) failed: code buffer not large enough
#
# JRE version:  (19.0) (fastdebug build )
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc.jvm.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x689ef4]  Assembler::popa()+0xf4
#
```

This can be reproduced by:
  - java -XX:+UnlockExperimentalVMOptions -XX:CodeEntryAlignment=16 on AVX512 machine

```
(gdb) bt
#0  0x00007ffff53e01f7 in emit_copy (code_section=0x7ffff48c19e0,
    src=0x7ffff003f260 ""L\213<$L\213t$\bL\213l$\020L\213d$\030L\213\\$ L\213T$(L\213L$0L\213D$8H\213|$@H\213t$HH\213l$PH\213\\$`H\213T$hH\213L$pH\213D$xH\201Ā"",
    src_len=81) at /home/jvm/jdk/src/hotspot/cpu/x86/assembler_x86.cpp:12699
#1  0x00007ffff53e02a7 in Assembler::popa (this=0x7ffff0027378) at /home/jvm/jdk/src/hotspot/cpu/x86/assembler_x86.cpp:12706
#2  0x00007ffff5ce7dfc in MacroAssembler::pop_IU_state (this=0x7ffff0027378) at /home/jvm/jdk/src/hotspot/cpu/x86/macroAssembler_x86.cpp:2783
#3  0x00007ffff5ce7d72 in MacroAssembler::pop_CPU_state (this=0x7ffff0027378) at /home/jvm/jdk/src/hotspot/cpu/x86/macroAssembler_x86.cpp:2770
#4  0x00007ffff5f4a261 in RegisterSaver::restore_live_registers (masm=0x7ffff0027378, restore_vectors=false)
    at /home/jvm/jdk/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp:437
#5  0x00007ffff5f53fe6 in SharedRuntime::generate_resolve_blob (
    destination=0x7ffff5f3c036 <SharedRuntime::handle_wrong_method(JavaThread*)> ""UH\211\345ATSH\201\354\200\023"", name=0x7ffff67eeaf0 ""wrong_method_stub"")
    at /home/jvm/jdk/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp:3058
#6  0x00007ffff5f36f7b in SharedRuntime::generate_stubs () at /home/jvm/jdk/src/hotspot/share/runtime/sharedRuntime.cpp:103
#7  0x00007ffff59570ad in init_globals () at /home/jvm/jdk/src/hotspot/share/runtime/init.cpp:131
#8  0x00007ffff60eed9d in Threads::create_vm (args=0x7ffff48c1e10, canTryAgain=0x7ffff48c1d03) at /home/jvm/jdk/src/hotspot/share/runtime/thread.cpp:2809
#9  0x00007ffff5a53543 in JNI_CreateJavaVM_inner (vm=0x7ffff48c1e68, penv=0x7ffff48c1e70, args=0x7ffff48c1e10) at /home/jvm/jdk/src/hotspot/share/prims/jni.cpp:3613
#10 0x00007ffff5a5389c in JNI_CreateJavaVM (vm=0x7ffff48c1e68, penv=0x7ffff48c1e70, args=0x7ffff48c1e10) at /home/jvm/jdk/src/hotspot/share/prims/jni.cpp:3701
#11 0x00007ffff79b8141 in InitializeJVM (pvm=0x7ffff48c1e68, penv=0x7ffff48c1e70, ifn=0x7ffff48c1ec0) at /home/jvm/jdk/src/java.base/share/native/libjli/java.c:1459
#12 0x00007ffff79b4f39 in JavaMain (_args=0x7fffffffb130) at /home/jvm/jdk/src/java.base/share/native/libjli/java.c:411
#13 0x00007ffff79bba79 in ThreadJavaMain (args=0x7fffffffb130) at /home/jvm/jdk/src/java.base/unix/native/libjli/java_md.c:651
#14 0x00007ffff779cea5 in start_thread () from /lib64/libpthread.so.0
#15 0x00007ffff72c19fd in clone () from /lib64/libc.so.6
(gdb) p code_section->limit()
$1 = (u_char *) 0x7fffd947d0f8 '\314' <repeats 199 times>, <incomplete sequence \314>...
(gdb) p code_section->end()
$2 = (u_char *) 0x7fffd947d0cb '\314' <repeats 199 times>, <incomplete sequence \314>...
(gdb) p 0x7fffd947d0f8 - 0x7fffd947d0cb
$3 = 45
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282355,JDK-8281467,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w2jn:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-02-15 15:36;jiefu;Suggested fix:
```
diff --git a/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp b/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp
index 6597c91bb42..b55634502fa 100644
--- a/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp
+++ b/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp
@@ -3002,7 +3002,7 @@ RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const cha
   // allocate space for the code
   ResourceMark rm;
 
-  CodeBuffer buffer(name, 1000, 512);
+  CodeBuffer buffer(name, (UseAVX > 2) ? 1200 : 1000, 512);
   MacroAssembler* masm                = new MacroAssembler(&buffer);
 
   int frame_size_in_words;
```;;;","2022-02-15 16:29;dlong;ILW = assert/crash because stub size too small; in 1 new test on AVX512; no workaround = HLH = P2;;;","2022-02-15 18:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7485
Date: 2022-02-16 02:13:03 +0000;;;","2022-02-17 13:30;dcubed;Here's a log file snippet from the jdk-19+10-581-tier6 sighting: 

compiler/arguments/TestCodeEntryAlignment.java

----------System.out:(6/1847)*----------
Command line: [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-19+10-581\\windows-x64-open.jdk\\jdk-19\\bin\\java.exe -cp T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_compiler\\classes\\2\\compiler\\arguments\\TestCodeEntryAlignment.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-19+10-581\\src.full\\open\\test\\hotspot\\jtreg\\compiler\\arguments;T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_compiler\\classes\\2\\test\\lib;T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_compiler\\classes\\2;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\javatest.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\jtreg.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\junit.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\hamcrest.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\testng.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\jcommander.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\guice.jar -XX:+UnlockExperimentalVMOptions -XX:CodeEntryAlignment=16 compiler.arguments.TestCodeEntryAlignment run ]
[2022-02-17T20:46:04.912454500Z] Gathering output for process 33748
[2022-02-17T20:46:04.953663600Z] Waiting for completion for process 33748
[2022-02-17T20:46:06.317079800Z] Waiting for completion finished for process 33748
[2022-02-17T20:46:06.317079800Z] Waiting for completion for process 33748
[2022-02-17T20:46:06.317079800Z] Waiting for completion finished for process 33748
----------System.err:(32/1565)*----------
 stdout: [#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (relocInfo_x86.cpp:106), pid=33748, tid=25288
#  Error: ShouldNotReachHere()
#
# JRE version:  (19.0+10) (build )
# Java VM: OpenJDK 64-Bit Server VM (19-ea+10-581, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_compiler\\scratch\\4\\hs_err_pid33748.mdmp
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_compiler\\scratch\\4\\hs_err_pid33748.log
#
#
];
 stderr: []
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0]

	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:489)
	at compiler.arguments.TestCodeEntryAlignment.shouldPass(TestCodeEntryAlignment.java:65)
	at compiler.arguments.TestCodeEntryAlignment.driver(TestCodeEntryAlignment.java:70)
	at compiler.arguments.TestCodeEntryAlignment.main(TestCodeEntryAlignment.java:48)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0]

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x000002360d742b30):  JavaThread ""Unknown thread"" [_thread_in_vm, id=25288, stack(0x000000371dd00000,0x000000371de00000)]

Stack: [0x000000371dd00000,0x000000371de00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x69e6fa]  os::platform_print_native_stack+0xca  (os_windows_x86.cpp:235)
V  [jvm.dll+0x7faa5d]  VMError::report+0xc4d  (vmError.cpp:828)
V  [jvm.dll+0x7fc36e]  VMError::report_and_die+0x78e  (vmError.cpp:1656)
V  [jvm.dll+0x7fc9d7]  VMError::report_and_die+0x47  (vmError.cpp:1437)
V  [jvm.dll+0x25f0ca]  report_vm_error+0x8a  (debug.cpp:282)
V  [jvm.dll+0x25f003]  report_should_not_reach_here+0x23  (debug.cpp:332)
V  [jvm.dll+0x6eda84]  Relocation::pd_call_destination+0xb4  (relocInfo_x86.cpp:106)
V  [jvm.dll+0x6ec1b5]  CallRelocation::fix_relocation_after_move+0x85  (relocInfo.cpp:358)
V  [jvm.dll+0x21aeb6]  CodeBuffer::relocate_code_to+0x256  (codeBuffer.cpp:771)
V  [jvm.dll+0x21941a]  CodeBuffer::copy_code_to+0x25a  (codeBuffer.cpp:715)
V  [jvm.dll+0x2174b6]  RuntimeBlob::RuntimeBlob+0x136  (codeBlob.cpp:160)
V  [jvm.dll+0x2188b5]  RuntimeStub::new_runtime_stub+0xd5  (codeBlob.cpp:410)
V  [jvm.dll+0x711cb0]  SharedRuntime::generate_resolve_blob+0x4e0  (sharedRuntime_x86_64.cpp:3073)
V  [jvm.dll+0x702967]  SharedRuntime::generate_stubs+0x17  (sharedRuntime.cpp:104)
V  [jvm.dll+0x38edac]  init_globals+0x5c  (init.cpp:132)
V  [jvm.dll+0x7a7411]  Threads::create_vm+0x5a1  (thread.cpp:2809)
V  [jvm.dll+0x411aef]  JNI_CreateJavaVM_inner+0x8f  (jni.cpp:3613)
V  [jvm.dll+0x4134c1]  JNI_CreateJavaVM+0x11  (jni.cpp:3701)
C  [jli.dll+0x526b]  JavaMain+0x113  (java.c:411)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]
;;;","2022-02-17 21:03;roboduke;Changeset: c9289583
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-02-18 05:02:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c9289583eb6919ced3b4115cf981180f6a957fbf
;;;","2022-07-12 13:08;epavlova;Verified by running the test on AVX512 machine ;;;",,,,,,,,,,,,,,,,,,,,,,,,
AsmTools driver uses wrong implementation classes,JDK-8281880,5068611,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlsmith,dlsmith,dlsmith,2022-02-15 12:42,2022-02-15 14:56,2023-10-01 09:57,2022-02-15 14:56,repo-valhalla,,,,,,,,,repo-valhalla,hotspot,,0,,,,,,,,,,,,,,,,,,,"In Valhalla's copy of the AsmTools library, jtreg runs the JtregDriver with a class loader that knows about the original AsmTools bundled with jtreg. As a result, these original classes are used instead of Valhalla's modified implementation.

A test header like the following should run successfully and invoke Valhalla's copy of the classes:

 * @library /test/lib
 * @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*
 * @run driver org.openjdk.asmtools.JtregDriver jasm -strict JasmTest.jasm
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281618,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w257:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-02-15 12:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/650
Date: 2022-02-15 20:51:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't unpack msi installers from test/jdk/tools/jpackage/windows/test/jdk/tools/jpackage/windows/WinShortcutPromptTest.java test,JDK-8281874,5068603,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,asemenyuk,asemenyuk,2022-02-15 10:46,2023-09-27 00:54,2023-10-01 09:57,2022-02-16 09:32,17,18,,,,,,,,19,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_112,testbug,,,,,,,,,,,,,,"Names of msi files created in test/jdk/tools/jpackage/windows/test/jdk/tools/jpackage/windows/WinShortcutPromptTest.java test are too long. 
Running this test locally with test/jdk/tools/jpackage/run_tests.sh script in the mode when the test unpacks created msi files fail because msiexec command can't handle too long absolute path to a directory where to extract msi file.

[16:54:14.363] TRACE: Create [C:\Users\asemenyu\AppData\Local\Temp\jpackage_jtreg_testing\run\support\tools\jpackage\windows\WinShortcutPromptTest\test.0b0624ca\unpacked-msi\unpack.bat] text file...
[16:54:14.363] TRACE: msiexec /a ""C:\ade\work\as\jds\work\10new\jpackage_tests\windows\WinShortcutPromptTestWithShortcutPromptStartMenu-1.0.msi"" /qn TARGETDIR=""C:\Users\asemenyu\AppData\Local\Temp\jpackage_jtreg_testing\run\support\tools\jpackage\windows\WinShortcutPromptTest\test.0b0624ca\unpacked-msi\Program Files""
[16:54:14.375] TRACE: Done
[16:54:14.375] TRACE: exec: Execute [cmd /c .\test.0b0624ca\unpacked-msi\unpack.bat](3); discard I/O...
[16:54:15.479] TRACE: exec: Done. Exit code: 1603
[16:54:18.486] TRACE: exec: Execute [cmd /c .\test.0b0624ca\unpacked-msi\unpack.bat](3); discard I/O...
[16:54:19.336] TRACE: exec: Done. Exit code: 1603
[16:54:23.348] TRACE: exec: Execute [cmd /c .\test.0b0624ca\unpacked-msi\unpack.bat](3); discard I/O...
[16:54:24.225] TRACE: exec: Done. Exit code: 1603
[16:54:29.242] TRACE: exec: Execute [cmd /c .\test.0b0624ca\unpacked-msi\unpack.bat](3); discard I/O...
[16:54:30.174] TRACE: exec: Done. Exit code: 1603
[16:54:36.180] TRACE: exec: Execute [cmd /c .\test.0b0624ca\unpacked-msi\unpack.bat](3); discard I/O...
[16:54:36.837] TRACE: exec: Done. Exit code: 1603
[16:54:43.850] TRACE: exec: Execute [cmd /c .\test.0b0624ca\unpacked-msi\unpack.bat](3); discard I/O...
[16:54:44.511] TRACE: exec: Done. Exit code: 1603
[16:54:52.518] TRACE: exec: Execute [cmd /c .\test.0b0624ca\unpacked-msi\unpack.bat](3); discard I/O...
[16:54:53.196] TRACE: exec: Done. Exit code: 1603
[16:55:02.207] TRACE: exec: Execute [cmd /c .\test.0b0624ca\unpacked-msi\unpack.bat](3); discard I/O...
[16:55:02.839] TRACE: exec: Done. Exit code: 1603
[16:55:12.856] ERROR: Expected [0]. Actual [1603]: Check command [cmd /c .\test.0b0624ca\unpacked-msi\unpack.bat](3) exited with 0 code
[16:55:12.857] [  FAILED  ] WinShortcutPromptTest(true, false, true).test; checks=7
java.lang.AssertionError: Expected [0]. Actual [1603]: Check command [cmd /c .\test.0b0624ca\unpacked-msi\unpack.bat](3) exited with 0 code
	at jdk.jpackage.test.TKit.error(TKit.java:264)
	at jdk.jpackage.test.TKit.assertEquals(TKit.java:567)
	at jdk.jpackage.test.Executor$Result.assertExitCodeIs(Executor.java:183)
	at jdk.jpackage.test.Executor$Result.assertExitCodeIsZero(Executor.java:190)
	at jdk.jpackage.test.WindowsHelper.runMsiexecWithRetries(WindowsHelper.java:82)
	at jdk.jpackage.test.WindowsHelper.lambda$createMsiPackageHandlers$5(WindowsHelper.java:111)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:424)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:396)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at jdk.jpackage.test.PackageTest.lambda$runActions$20(PackageTest.java:360)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.lambda$runActions$21(PackageTest.java:359)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.runActions(PackageTest.java:358)
	at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:51)
	at WinShortcutPromptTest.test(WinShortcutPromptTest.java:118)

Full log of running this test attached.",,,,,,,,,,,JDK-8317016,JDK-8316785,JDK-8316849,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-02-15 13:58;asemenyuk;log.txt;https://bugs.openjdk.org/secure/attachment/97981/log.txt",,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,"0|i2w23f:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-02-15 13:23;asemenyuk;The suggested fix is to shorten the suffixes appended to the output msi installers.
WinShortcutPromptTest.setPackageName() function at https://github.com/openjdk/jdk/blob/master/test/jdk/tools/jpackage/windows/WinShortcutPromptTest.java#L121 needs to be updated.
Change ""ShortcutPrompt"" to ""P"".
Change ""StartMenu"" to ""M"".
Change ""Desktop"" to ""D"".;;;","2022-02-15 14:06;efrenkel;[~asemenyuk] Thanks Alexey. I have updated the spec to reflect this. ;;;","2022-02-15 15:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7484
Date: 2022-02-15 22:56:35 +0000;;;","2022-02-16 09:32;roboduke;Changeset: 81645521
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2022-02-16 17:31:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/81645521c81c7363d199e5051d51043146058a91
;;;","2023-09-26 01:25;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
No risk, only a test change.
Clean backport.
SAP nighlty testing passed which includes this test.;;;","2023-09-26 01:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1791
Date: 2023-09-26 08:27:44 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
Rename ResourceScope to MemorySession,JDK-8281855,5068582,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-02-15 09:31,2022-02-21 07:49,2023-10-01 09:57,2022-02-21 07:49,repo-panama,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,"See:
https://mail.openjdk.java.net/pipermail/panama-dev/2022-February/016152.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w1yr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-02-15 09:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/641
Date: 2022-02-15 17:32:50 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"serviceability/sa/ClhsdbThreadContext.java failed with NullPointerException: Cannot invoke ""sun.jvm.hotspot.gc.shared.GenCollectedHeap.getGen(int)"" because ""this.heap"" is null ",JDK-8281853,5068580,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,dcubed,dcubed,2022-02-15 08:51,2022-03-30 18:02,2023-10-01 09:57,2022-03-29 11:40,19,,,,,,,,,19,hotspot,,0,intermittent,tier3,tier6,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

serviceability/sa/ClhsdbThreadContext.java

Here's a snippet from the log file:

Thread ""Notification Thread"" id=17140 Address=0x00007f76a419a020
r15: 0x00000000ace12900: Error: java.lang.NullPointerException: Cannot invoke ""sun.jvm.hotspot.gc.shared.GenCollectedHeap.getGen(int)"" because ""this.heap"" is null
java.lang.NullPointerException: Cannot invoke ""sun.jvm.hotspot.gc.shared.GenCollectedHeap.getGen(int)"" because ""this.heap"" is null
	at jdk.hotspot.agent/sun.jvm.hotspot.utilities.PointerLocation.isInNewGen(PointerLocation.java:114)
	at jdk.hotspot.agent/sun.jvm.hotspot.utilities.PointerLocation.printOn(PointerLocation.java:277)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.JavaThread.printThreadContextOn(JavaThread.java:498)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor$46.doit(CommandProcessor.java:1699)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2212)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2182)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.run(CommandProcessor.java:2053)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.run(CLHSDB.java:112)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.main(CLHSDB.java:44)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runCLHSDB(SALauncher.java:281)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)
]
 exitValue = -1

java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'Thread ""Common-Cleaner""' missing from stdout/stderr 

	at ClhsdbThreadContext.main(ClhsdbThreadContext.java:109)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)
Caused by: java.lang.RuntimeException: 'Thread ""Common-Cleaner""' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:340)
	at ClhsdbLauncher.runCmd(ClhsdbLauncher.java:166)
	at ClhsdbLauncher.run(ClhsdbLauncher.java:203)
	at ClhsdbThreadContext.main(ClhsdbThreadContext.java:60)
	... 4 more

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'Thread ""Common-Cleaner""' missing from stdout/stderr 

I've also include the NullPointerException that happened before
the complaint about Common-Cleaner.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,windows,,,,"0|i2w1yb:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-02-15 11:35;cjplummer;This looks like another long standing PointerFinder bug being exposed by the new ""threadcontext"" support.

In PointerFinder, when the address is in the the java heap, only one of loc.heap, loc.gen, and loc.tlab get set. Then in PointerLocation we have:

  public boolean isInHeap() {
    return (heap != null || (gen != null));
  }

  public boolean isInNewGen() {
    return ((gen != null) && (gen == ((GenCollectedHeap)heap).getGen(0)));
  }

...
    } else if (isInHeap()) {
      if (isInTLAB()) {
...
      } else {
        if (isInNewGen()) {
          tty.print(""In new generation "");
        } else if (isInOldGen()) {
          Tty.print(""In old generation "");
        } else {
          tty.print(""In unknown section of Java heap"");
        }
...
      }

In this failure case, it looks like we have set loc.gen, so loc.heap is not set. isInHeap() returns true because loc.gen is set. But then when we call isInNewGen(), it relies on loc.heap also having been set. Otherwise you get an NPE when it is referenced. isInOldGen() has the same issue.

So it looks like in general that this is a bug in PointerLocation/PointerFinder whenever the address is in a generational heap. I think this fix is to simply set loc.heap whenever we set loc.gen. It wouldn't hurt to also set it whenever loc.tlab is set. In fact I think this would fix another apparent bug. Notice in the above call we only check isInTLAB() after checking that isInHeap() is true. Since currently we don't set loc.heap if we set loc.tlab, the isInHeap() check will fail. I think the end result of that would be falling through to the assert the end of PointerFinder.printOn():

    } else {
      // This must be last
      if (Assert.ASSERTS_ENABLED) {
        Assert.that(isUnknown(), ""Should have unknown location"");
      }
      tty.println(""In unknown location"");
    }

This is because PointerFinder will not have determined that the location is unknown, but the PointerLocation logic will have concluded that is is unknown and fall through to this code at the bottom, and isUnknown() will be false.;;;","2022-03-19 14:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7873
Date: 2022-03-19 19:34:23 +0000;;;","2022-03-29 11:40;dukebot;Changeset: 2fef5d4a
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-03-29 18:38:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2fef5d4a334fd67b5e2a8f342cd7a5143830ddf1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/CommandLine/OptionsValidation/TestOptionsWithRanges.java fails after JDK-8281467,JDK-8281829,5068548,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2022-02-15 05:43,2022-02-22 16:55,2023-10-01 09:57,2022-02-16 05:47,19,,,,,,,,,19,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-19,regression,tencent-interest,tier6,tier8,,,,,,,,,,,,"

Reproduce:
 - run java -XX:+UnlockExperimentalVMOptions -XX:CodeEntryAlignment=4294967296 with release VMs

```
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGFPE (0x8) at pc=0x00002acf9b157d1b, pid=5064, tid=5088
#
# JRE version:  (19.0) (build )
# Java VM: OpenJDK 64-Bit Server VM (19-internal-adhoc.jvm.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xaaed1b]  MacroAssembler::align(int)+0xb
#
```

```
Stack: [0x00007f2ee355b000,0x00007f2ee365c000],  sp=0x00007f2ee365a848,  free space=1022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xaaed1b]  MacroAssembler::align(int)+0xb
V  [libjvm.so+0xd9d019]  StubGenerator_generate(CodeBuffer*, bool)+0x49
V  [libjvm.so+0xdbf3c3]  StubRoutines::initialize1() [clone .part.30]+0xb3
V  [libjvm.so+0x7f79d1]  init_globals()+0x31
V  [libjvm.so+0xe3dbca]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x2aa
V  [libjvm.so+0x8b1e12]  JNI_CreateJavaVM+0x52
C  [libjli.so+0x381a]  JavaMain+0x8a
C  [libjli.so+0x7a69]  ThreadJavaMain+0x9
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281467,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w1r7:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-15 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7480
Date: 2022-02-15 14:51:29 +0000;;;","2022-02-15 16:18;dlong;ILW = crash with unusual flag value; no workaround = MMH = P3;;;","2022-02-16 05:47;roboduke;Changeset: d5b46665
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-02-16 13:46:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d5b466657e29a5338b84fa9acfc1b76bf8c39d61
;;;","2022-02-17 13:03;dcubed;This fix is integrated in jdk-19+10-582.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Test failures on non-DTrace builds due to incomplete DTrace* flags handling,JDK-8281822,5068538,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-02-15 03:22,2022-04-05 02:45,2023-10-01 09:57,2022-02-16 12:10,17,18,19,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-19,redhat-interest,regression,,,,,,,,,"This reproduces in GHA in x86_32 mode after JDK-8278423, which exposes a problem in DTrace* flags handling.

Reproduces locally too:

$ CONF=linux-x86-server-fastdebug make run-test TEST=serviceability/7170638/SDTProbesGNULinuxTest.java

java.lang.Error: java.lang.RuntimeException: '.note.stapsd' missing from stdout 

	at SDTProbesGNULinuxTest.testLibJvm(SDTProbesGNULinuxTest.java:76)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
",,,,,,,,,,,JDK-8284061,JDK-8284337,JDK-8284246,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278423,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w1oz:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-15 03:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7477
Date: 2022-02-15 11:54:07 +0000;;;","2022-02-15 04:09;dholmes;JDK-8278423 exposed this pre-existing bug.;;;","2022-02-15 16:26;dlong;ILW = test failures in github testing on x86_32;; no workaround = MMH = P3;;;","2022-02-16 12:10;roboduke;Changeset: 847a99b5
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-02-16 20:08:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/847a99b53da6b2c82f7cd5f8634aa7bbae8f445e
;;;","2022-03-29 23:05;thartmann;Fix Request (JDK 18u)
Fixes an issue with dtrace flag handling. The fix is low risk and applied cleanly except for a test change. Already tested and about to be backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 23:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/85
Date: 2022-03-30 06:04:37 +0000;;;","2022-04-04 02:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/335
Date: 2022-04-04 08:58:26 +0000;;;","2022-04-04 02:05;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Version taken from 18u is recognized as clean backport. Nightly tests have passed.;;;",,,,,,,,,,,,,,,,,,,,,,
Debuginfo.diz contains redundant build path after backport JDK-8025936,JDK-8281814,5068529,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dongbohe,dongbohe,dongbohe,2022-02-15 00:53,2022-05-18 20:45,2023-10-01 09:57,2022-04-06 05:17,8-pool,openjdk8u282,,,,,,,,openjdk8u342,infrastructure,,0,11-na,17-na,18-na,19-na,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,"$ bash configure
$ make images
$ cd build/linux-x86_64-normal-server-release/images/j2sdk-image/jre/lib/amd64

Except libjsig.diz, libjvm.diz, libsaproc.diz, the rest of lib*.diz decompression contains the compilation path, as follows:
$ unzip libzip.diz
Archive:  libzip.diz
  inflating: home/hedongbo/myprojects/github/temp/jdk8u-dev/build/linux-x86_64-normal-server-release/jdk/objs/libzip/libzip.debuginfo

https://hg.openjdk.java.net/jdk8u/jdk8u-dev/rev/baa748ba7946#l1.99  $1_DEBUGINFO_FILES includes the build path. 
JDK9 fixes this issue with the following patch:
1. https://github.com/openjdk/jdk9u/commit/ffbb7125b25a88f4495d94c9c8fb25af89af1856#diff-805224b793cfe47bf6bebf62286f34adb363f0352a9dac3689825b823886e534  removed the path with notdir
2. https://github.com/openjdk/jdk9u/commit/a350f3bda730bc3276e060c80dc3c3a6a36e4f72#diff-805224b793cfe47bf6bebf62286f34adb363f0352a9dac3689825b823886e534L887  replaced notdir with subst

Suggested fixes：
diff --git a/make/common/NativeCompilation.gmk b/make/common/NativeCompilation.gmk
--- a/make/common/NativeCompilation.gmk
+++ b/make/common/NativeCompilation.gmk
@@ -530,7 +530,7 @@
             # to be rebuilt properly.
             $$($1_DEBUGINFO_ZIP): $$($1_DEBUGINFO_FILES) $$($1_TARGET)
 		$(CD) $$($1_OBJECT_DIR) \
-		&& $(ZIP) -q $$@ $$($1_DEBUGINFO_FILES)
+		&& $(ZIP) -q $$@ $$(subst $$($1_OBJECT_DIR)/,,$$($1_DEBUGINFO_FILES))
           endif
         else
           ifneq ($$($1_STRIP_POLICY), no_strip)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286989,JDK-8025936,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w1mz:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-02-15 03:52;ihse;[~dongbohe] I can't reproduce this. Are you claiming this is affecting JDK 19, or an update release?;;;","2022-02-15 03:56;ihse;[~dongbohe] Also, as a side note, if you include reproduction steps, make sure you copy/paste them from the console instead of adlibbing them in the bug notes; otherwise a prose reproduction description is better.

`$ bash configurure`

is broken on many levels. You'd need a relative path. You'd need to specify `-with-native-debug-symbols=zipped`. And you'd need to spell `configure` correctly.;;;","2022-02-15 06:37;erikj;This is just in 8u. It was fixed in 9 in JDK-8035134 (which is unfortunately marked confidential due to how it was originally reported).;;;","2022-02-15 17:23;dongbohe;[~ihse] Sorry, I have fixed the typo in the bug notes. This bug was introduced after backport JDK-8025936, only exists in 8u282-b01 and later.;;;","2022-02-15 17:39;dongbohe;The reasons why libjvm.diz, libjsig.diz, libsaproc.diz are OK are as follows:
The codes for generating these files are located in three separate files, and the debuginfo.diz variable in each file does not contain an absolute path. 
libjvm.diz: https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/file/69087d08d473/make/linux/makefiles/vm.make#l373
libjsig.diz: https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/file/69087d08d473/make/linux/makefiles/jsig.make#l78
libsaproc.diz: https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/file/69087d08d473/make/linux/makefiles/saproc.make#l122

For example, the variable LIBJVM_DEBUGINFO   = lib$(JVM).debuginfo in https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/file/69087d08d473/make/linux/makefiles/vm.make#l150 ,and other variables are similar.;;;","2022-02-15 18:19;dongbohe;[~erikj] Hi erikj, I also found out that JDK 19 uses subst to drop the path (replaced notdir with subst in JDK-8150736), not sure which fix should be used.;;;","2022-03-31 01:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk8u-dev/pull/26
Date: 2022-03-30 07:45:08 +0000;;;","2022-03-31 01:46;sgehwolf;Linking JDK-8025936 which introduced this regression.;;;","2022-03-31 02:04;dongbohe;Fix request (8u)

I would like to backport JDK-8035134 to fix debuginfo regression, introduced by JDK-8025936.
It is only a different context, no risk.

Testing: worked correctly after patch.;;;","2022-04-06 05:17;roboduke;Changeset: 62bbb3e6
Author:    Dongbo He <dongbohe@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-04-06 12:15:42 +0000
URL:       https://git.openjdk.java.net/jdk8u-dev/commit/62bbb3e6415d02173eaf443713f8ca3540c0126a
;;;","2022-05-04 08:54;dukebot;Changeset: 62bbb3e6
Author:    Dongbo He <dongbohe@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-04-06 12:15:42 +0000
URL:       https://git.openjdk.java.net/jdk8u/commit/62bbb3e6415d02173eaf443713f8ca3540c0126a
;;;",,,,,,,,,,,,,,,,,,,
assert(_base == Tuple) failed: Not a Tuple after JDK-8280799,JDK-8281811,5068526,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,jiefu,jiefu,2022-02-15 00:14,2022-05-04 22:42,2023-10-01 09:57,2022-03-01 06:10,11,17,18,19,,,,,,19,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-19,tencent-interest,,,,,,,"Reproduce:
 - test compiler/c2/TestCMoveHasTopInput.java with -XX:+UseShenandoahGC

```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jvm/jdk/src/hotspot/share/opto/type.hpp:1782), pid=95812, tid=95826
#  assert(_base == Tuple) failed: Not a Tuple
#

Current CompileTask:
C2:   1264   12    b        TestCMoveHasTopInput::vMeth (97 bytes)

Stack: [0x00007fef5ea1d000,0x00007fef5eb1e000],  sp=0x00007fef5eb184c0,  free space=1005k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x13b01ad]  ProjNode::proj_type(Type const*) const [clone .part.31]+0x3d
V  [libjvm.so+0x14dab9e]  PhaseIterGVN::transform_old(Node*)+0x2be
V  [libjvm.so+0x14d538d]  PhaseIterGVN::optimize()+0x7d
V  [libjvm.so+0x9ec49a]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x2da
V  [libjvm.so+0x16e09fc]  ShenandoahBarrierC2Support::expand(Compile*, PhaseIterGVN&)+0x6c
V  [libjvm.so+0x1618f4f]  ShenandoahBarrierSetC2::expand_barriers(Compile*, PhaseIterGVN&) const+0xf
V  [libjvm.so+0x9e9a1e]  Compile::Optimize()+0x10ae
V  [libjvm.so+0x9eb5dc]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x193c
V  [libjvm.so+0x83e707]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x407
V  [libjvm.so+0x9f8849]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xbf9
V  [libjvm.so+0x9f9418]  CompileBroker::compiler_thread_loop()+0x508
V  [libjvm.so+0x183f7de]  JavaThread::thread_main_inner()+0x2fe
V  [libjvm.so+0x183fa71]  JavaThread::run()+0x231
V  [libjvm.so+0x1845ed6]  Thread::call_run()+0xf6
V  [libjvm.so+0x1458e99]  thread_native_entry(Thread*)+0x109
```",,,,,,,,,,,JDK-8284150,JDK-8284408,JDK-8285892,JDK-8284126,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280799,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w1mb:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-15 01:24;chagedorn;ILW = C2 assertion failure in IGVN, single test with Shenandoah GC only, use other GC = HLM = P3;;;","2022-02-16 05:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7494
Date: 2022-02-16 13:28:48 +0000;;;","2022-03-01 06:10;dukebot;Changeset: fcce24c5
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-03-01 14:09:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fcce24c5b3cd1dab755fd9b6779af71f4dd78773
;;;","2022-03-31 07:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/320
Date: 2022-03-31 13:55:08 +0000;;;","2022-03-31 07:05;mdoerr;Fix Request (17u)
Follow-up fix for JDK-8280799. Not in 17.0.4-oracle because it affects Shenandoah. Applies cleanly. Included test has passed.;;;","2022-04-04 00:24;thartmann;Fix Request (JDK 18u)
Fixes an assert in C2. The fix is low risk and applies cleanly (except a minor conflict due to changes to surrounding code). The fix was already backported to JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-04-04 00:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/90
Date: 2022-04-04 07:23:53 +0000;;;","2022-04-19 15:04;vkempik;It's not only the assertion failure, it's also a crash in non-debug build.
In JetBrainsRuntime17 we had only JDK-8280799 and not JDK-8281811
And Idea was crashing if ShenandoahGC used. backporting JDK-8281811 fixes the issue.
Thanks for fixing this;;;","2022-04-19 23:18;thartmann;Thanks for the clarification.;;;","2022-04-26 01:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1049
Date: 2022-04-26 08:38:03 +0000;;;","2022-04-27 05:49;roland;Fix Request (11):

Fixes a crash in c2 that we've encountered during testing. The patch doesn't apply cleanly and was reviewed here:
https://git.openjdk.java.net/jdk11u-dev/pull/1049
Tested with tier1 and the test of the patch.;;;",,,,,,,,,,,,,,,,,,,
Crash in java_lang_invoke_MethodType::print_signature,JDK-8281771,5068486,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2022-02-14 22:36,2022-03-29 09:53,2023-10-01 09:57,2022-02-15 10:04,17,18,19,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,redhat-interest,,,,,,,,,,,,,"Test compiler/c1/CanonicalizeArrayLength.java and might be other
could crash when executed with
-XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:+PrintDeoptimizationDetails -XX:+TraceDeoptimization -XX:+Verbose -Xcomp

Tail of log:
[15505. Interpreted Frame]
Interpreted frame (sp=0x0000fffca435de50 unextended sp=0x0000fffca435de50, fp=0x0000fffca435dec0, real_fp=0x0000fffca435dec0, pc=0x0000fffcc824bc00)
~deoptimization entry points  [0x0000fffcc824bc00, 0x0000fffcc824d9c0]  7616 bytes
     BufferBlob (0x0000fffcc8235610) used for Interpreter
 - local  [0x0000000773c03078]; #0
 - local  [0x0000000000000000]; #1
 - local  [0x0000000773c02f30]; #2
 - stack  [0x00000007ffd00380]; #1
 - stack  [0x0000000773c03078]; #0
 - monitor[0x0000fffca435de70]
 - bcp    [0x0000000800b35bde]; @6
 - locals [0x0000fffca435df00]
 - method [0x00000008004370e0]; virtual void java.lang.invoke.MethodType.<init>(jobject, jobject)
	{method} {0x00000008004370e0} '<init>' '(Ljava/lang/Class;[Ljava/lang/Class;)V' in public final synchronized 'java/lang/invoke/MethodType'
	bci:    6
	locals:
	   0 a 'java/lang/invoke/MethodType'{0x0000000773c03078} = (#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000fffcccdf67b0, pid=1432766, tid=1432889
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (fastdebug build 19-internal-2022-02-15-0018441.leonid.mesnik.jdk)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-internal-2022-02-15-0018441.leonid.mesnik.jdk, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0xef67b0]  java_lang_invoke_MethodType::print_signature(oop, outputStream*)+0x80
#

The problem is that deoptimization happens right in java.lang.invoke.MethodType.<init> 
while ptype and rtype are not initialized yet.",,,,,,,,,,,JDK-8283847,JDK-8283884,JDK-8283647,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-02-14 22:43;lmesnik;test-support_jtreg_open_test_hotspot_jtreg_compiler_c1_CanonicalizeArrayLength_java_compiler_c1_CanonicalizeArrayLength_hs_err_pid58620.log;https://bugs.openjdk.org/secure/attachment/97973/test-support_jtreg_open_test_hotspot_jtreg_compiler_c1_CanonicalizeArrayLength_java_compiler_c1_CanonicalizeArrayLength_hs_err_pid58620.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w1df:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-14 22:44;lmesnik;The stacktrace:
Stack: [0x000000016d6d8000,0x000000016d8db000],  sp=0x000000016d8d7740,  free space=2045k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x8c1a90]  java_lang_invoke_MethodType::print_signature(oop, outputStream*)+0xb0
V  [libjvm.dylib+0x8794f0]  InstanceKlass::oop_print_value_on(oop, outputStream*)+0x2f0
V  [libjvm.dylib+0xdb4274]  oopDesc::print_value_on(outputStream*) const+0x210
V  [libjvm.dylib+0xf0b834]  StackValue::print_on(outputStream*) const+0x128
V  [libjvm.dylib+0xf0bfb4]  StackValueCollection::print()+0xe8
V  [libjvm.dylib+0x10ae848]  javaVFrame::print()+0x13c
V  [libjvm.dylib+0x10b176c]  vframeArrayElement::unpack_on_stack(int, int, int, frame*, bool, bool, int)+0xe88
V  [libjvm.dylib+0x10b2548]  vframeArray::unpack_to_stack(frame&, int, int)+0x854
V  [libjvm.dylib+0x5d61ac]  Deoptimization::unpack_frames(JavaThread*, int)+0x1c4
v  ~DeoptimizationBlob
j  java.lang.invoke.MethodType.<init>(Ljava/lang/Class;[Ljava/lang/Class;)V+6 java.base@19-internal
j  java.lang.invoke.MethodType.makeImpl(Ljava/lang/Class;[Ljava/lang/Class;Z)Ljava/lang/invoke/MethodType;+17 java.base@19-internal
J 17095 c1 java.lang.invoke.MethodType.methodType(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType; java.base@19-internal (7 bytes) @ 0x000000010fd177b4 [0x000000010fd17740+0x0000000000000074]
J 17087 c1 jdk.internal.reflect.MethodHandleAccessorFactory.getDirectMethod(Ljava/lang/reflect/Method;Z)Ljava/lang/invoke/MethodHandle; java.base@19-internal (83 bytes) @ 0x000000010fce683c [0x000000010fce6780+0x00000000000000bc]
J 17067 c1 jdk.internal.reflect.MethodHandleAccessorFactory.newMethodAccessor(Ljava/lang/reflect/Method;Z)Ljdk/internal/reflect/MethodAccessorImpl; java.base@19-internal (61 bytes) @ 0x000000010fc549e0 [0x000000010fc54840+0x00000000000001a0]
j  jdk.internal.reflect.ReflectionFactory.newMethodAccessor(Ljava/lang/reflect/Method;Z)Ljdk/internal/reflect/MethodAccessor;+31 java.base@19-internal
j  java.lang.reflect.Method.acquireMethodAccessor()Ljdk/internal/reflect/MethodAccessor;+38 java.base@19-internal
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+75 java.base@19-internal
j  com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V+172
j  java.lang.Thread.run()V+11 java.base@19-internal
v  ~StubRoutines::call_stub
V  [libjvm.dylib+0x8a434c]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x4cc
V  [libjvm.dylib+0x8a3234]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x1f8
V  [libjvm.dylib+0x8a33f8]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x70
V  [libjvm.dylib+0x9d6e18]  thread_entry(JavaThread*, JavaThread*)+0x16c
V  [libjvm.dylib+0x102023c]  JavaThread::thread_main_inner()+0x254
V  [libjvm.dylib+0x101d478]  Thread::call_run()+0x21c
V  [libjvm.dylib+0xdce534]  thread_native_entry(Thread*)+0x160
C  [libsystem_pthread.dylib+0x7240]  _pthread_start+0x94


siginfo: si_signo: 11 (SIGSEGV), si_code: 2 (SEGV_ACCERR), si_addr: 0x000000000000000c;;;","2022-02-14 22:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7470
Date: 2022-02-15 06:43:02 +0000;;;","2022-02-15 10:04;roboduke;Changeset: a24498b7
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-02-15 18:01:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a24498b777b76c04d7e6da0a8b5fb501f2fb4944
;;;","2022-03-24 11:53;hseigel;Fix Request (18)

This is a small change that adds a few 'null' checks to prevent crashes. It is low risk.  The patch applied cleanly and was tested with Mach5 tiers 1-2 and by running the crashing test locally multiple times.;;;","2022-03-25 04:37;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Nightly tests have passed.;;;","2022-03-25 04:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/284
Date: 2022-03-25 11:38:49 +0000;;;","2022-03-29 09:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/76
Date: 2022-03-29 16:39:31 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
jextract does not generate parameter names for function pointer typedefs,JDK-8281764,5068474,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,mcimadamore,mcimadamore,2022-02-14 14:40,2022-02-21 18:46,2023-10-01 09:57,2022-02-21 18:46,repo-panama,,,,,,,,,,tools,,0,foreign-jextract,,,,,,,,,,,,,,,,,,"Function pointer typedefs can include parameter names:

typedef int (*foo)(int first, int second);

When extracting this, jextract falls back to x0, x1 (as for typedefs w/o parameter names).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w1ar:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2022-02-15 21:51;sundar;From my memory, clang does not include the parameter names on function pointer type.

$ cat t.h

typedef void (*foo)(int x);

void func(int abc);

$  cc -Xclang -ast-dump  t.h
TranslationUnitDecl 0x7faf91036208 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7faf91036aa0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7faf910367a0 '__int128'
|-TypedefDecl 0x7faf91036b10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7faf910367c0 'unsigned __int128'
|-TypedefDecl 0x7faf91036e18 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7faf91036bf0 'struct __NSConstantString_tag'
|   `-Record 0x7faf91036b68 '__NSConstantString_tag'
|-TypedefDecl 0x7faf91036eb0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7faf91036e70 'char *'
|   `-BuiltinType 0x7faf910362a0 'char'
|-TypedefDecl 0x7faf910371a8 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7faf91037150 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7faf91036f90 'struct __va_list_tag'
|     `-Record 0x7faf91036f08 '__va_list_tag'
|-TypedefDecl 0x7faf9107df70 <t.h:1:1, col:26> col:16 foo 'void (*)(int)'
| `-PointerType 0x7faf9107df10 'void (*)(int)'
|   `-ParenType 0x7faf9107deb0 'void (int)' sugar
|     `-FunctionProtoType 0x7faf9107de80 'void (int)' cdecl
|       |-BuiltinType 0x7faf91036260 'void'
|       `-BuiltinType 0x7faf91036300 'int'
`-FunctionDecl 0x7faf9107e070 <line:3:1, col:18> col:6 func 'void (int)'
  `-ParmVarDecl 0x7faf9107dfe0 <col:11, col:15> col:15 abc 'int'


In the above AST, ParamVarDecl is used for FunctionDecl which has name of the parameter ""abc""
The TypedeclDef decl tree doesn't include parameter names. I'll double check if clang API has a way to retrieve parameter names.
;;;","2022-02-15 22:04;sundar;From the above AST dump clang C++ class that represents function prototype (in typedef) is FunctionProtoType.

https://clang.llvm.org/doxygen/classclang_1_1FunctionProtoType.html

This class doesn't seem to have any way to retrieve function parameter names. Unlikely that clang C wrapper API would be able to retrieve parameter names from function proto object. I'm think this information is dropped for AST. I'll read further to confirm this.;;;","2022-02-15 22:07;sundar;Related reference:

https://github.com/llvm/llvm-project/blob/main/clang/tools/libclang/CXType.cpp;;;","2022-02-16 02:43;sundar;When using libclang sample from ""panama samples"" repo, it shows the following tree

 TypedefDecl foo <foo>
  ParmDecl x <int>
 FunctionDecl func <void (int)>
  ParmDecl abc <int>

=> TypedefDecl cursor has children of type ParamDecl which have the name.

This gets complex for nested cases:

For changed typedef like:

typedef void (*foo)(int x, int y(int s));

we get

 TypedefDecl foo <foo>
  ParmDecl x <int>
  ParmDecl y <int (int)>
   ParmDecl s <int>

ParamDecl ""s"" is a child of ParamDecl y.


;;;","2022-02-18 04:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/panama-foreign/pull/646
Date: 2022-02-18 12:42:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Support Valhalla class file features in asmtools,JDK-8281763,5068470,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlsmith,dlsmith,dlsmith,2022-02-14 12:43,2022-02-16 07:21,2023-10-01 09:57,2022-02-16 07:21,repo-valhalla,,,,,,,,,repo-valhalla,hotspot,,0,,,,,,,,,,,,,,,,,,,"Modify the Valhalla repo's fork of asmtools to support the following class file features:

- ACC_VALUE, ACC_PERMITS_VALUE, and ACC_PRIMITIVE
- Preload attribute
- aconst_init & withfield instructions
- Unnamed factory methods
- Q descriptors
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281283,,,,,,,,,,JDK-8281618,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w19v:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-02-14 12:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/647
Date: 2022-02-14 20:48:06 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"runtime/logging/RedefineClasses.java failed ""assert(addr != __null) failed: invariant""",JDK-8281748,5068454,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sjohanss,dcubed,dcubed,2022-02-14 08:29,2022-02-22 16:54,2023-10-01 09:57,2022-02-15 08:24,19,,,,,,,,,19,hotspot,,0,intermittent,regression,tier3,tier6,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

runtime/logging/RedefineClasses.java

Here's a snippet from the log file:

#section:main
----------messages:(5/423)----------
command: main -Xmx256m -XX:MaxMetaspaceSize=64m -javaagent:redefineagent.jar -Xlog:all=trace:file=all.log RedefineClasses
reason: User specified action: run main/othervm -Xmx256m -XX:MaxMetaspaceSize=64m -javaagent:redefineagent.jar -Xlog:all=trace:file=all.log RedefineClasses 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.compiler,java.instrument
elapsed time (seconds): 25.258
----------configuration:(3/57)----------
Boot Layer
  add modules: java.compiler java.instrument

----------System.out:(21/1838)----------
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/g1CollectedHeap.inline.hpp:101
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13725/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/4b117863-2af8-4bc3-b053-27fc79e5c0b5/runs/d4560e38-0284-41d2-a63b-b8d51aa0981f/workspace/open/src/hotspot/share/gc/g1/g1CollectedHeap.inline.hpp:101), pid=10808, tid=5767
#  assert(addr != __null) failed: invariant
#
# JRE version: Java(TM) SE Runtime Environment (19.0+10) (fastdebug build 19-ea+10-555)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+10-555, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xc7882a]  G1CMIsAliveClosure::do_object_b(oop)+0x38a
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S166338/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a045d65f-89dd-4550-aae7-c4091866e484/runs/eb522503-2821-48f1-9034-ac8b08880ec0/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/scratch/1/core.10808)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S166338/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a045d65f-89dd-4550-aae7-c4091866e484/runs/eb522503-2821-48f1-9034-ac8b08880ec0/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/scratch/1/hs_err_pid10808.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(3/172)----------
java version ""19-ea"" 2022-09-20
Java(TM) SE Runtime Environment (fastdebug build 19-ea+10-555)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 19-ea+10-555, mixed mode)
----------rerun:(40/6962)*----------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007fd040001760):  WorkerThread ""G1 Conc#2"" [stack: 0x00007fd03d3ee000,0x00007fd03d4ee000] [id=5767]

Stack: [0x00007fd03d3ee000,0x00007fd03d4ee000],  sp=0x00007fd03d4ec8b0,  free space=1018k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xc7882a]  G1CMIsAliveClosure::do_object_b(oop)+0x38a
V  [libjvm.so+0x171f4b4]  ReferenceProcessor::discover_reference(oop, ReferenceType)+0x104
V  [libjvm.so+0xc81b53]  bool InstanceRefKlass::try_discover<narrowOop, G1CMOopClosure>(oop, ReferenceType, G1CMOopClosure*)+0x93
V  [libjvm.so+0xc8326d]  void InstanceRefKlass::oop_oop_iterate_discovery<narrowOop, G1CMOopClosure, AlwaysContains>(oop, ReferenceType, G1CMOopClosure*, AlwaysContains&) [clone .isra.0]+0x3d
V  [libjvm.so+0xc835d0]  void InstanceRefKlass::oop_oop_iterate<narrowOop, G1CMOopClosure>(oop, G1CMOopClosure*)+0x240
V  [libjvm.so+0xc83bca]  void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>(G1CMOopClosure*, oop, Klass*)+0x3a
V  [libjvm.so+0xce28bb]  void G1CMTask::process_grey_task_entry<true>(G1TaskQueueEntry)+0x2bb
V  [libjvm.so+0xcda9dc]  G1CMTask::drain_local_queue(bool) [clone .part.0] [clone .constprop.0]+0x8c
V  [libjvm.so+0xcdaeb8]  G1CMBitMapClosure::do_addr(HeapWordImpl**)+0x98
V  [libjvm.so+0xcdc5ac]  G1CMTask::do_marking_step(double, bool, bool)+0x7ac
V  [libjvm.so+0xce79cd]  G1CMConcurrentMarkingTask::work(unsigned int)+0x17d
V  [libjvm.so+0x1a93a81]  WorkerThread::run()+0x81
V  [libjvm.so+0x1943830]  Thread::call_run()+0x100
V  [libjvm.so+0x16258d4]  thread_native_entry(Thread*)+0x104

Since the crash is in G1, I'm starting this bug off in
hotspot/gc for initial triage.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281637,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2w16b:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-02-14 22:47;dholmes;The same stack is seen in a product crash running test:

vmTestbase/nsk/sysdict/vm/stress/chain/chain008/chain008.java

Stack: [0x0000fffbf4ea0000,0x0000fffbf50a0000],  sp=0x0000fffbf509e680,  free space=2041k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x6acae4]  G1CMIsAliveClosure::do_object_b(oopDesc*)+0x14
V  [libjvm.so+0x6ae4f4]  void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>(G1CMOopClosure*, oopDesc*, Klass*)+0xf4
V  [libjvm.so+0x6db2c4]  void G1CMTask::process_grey_task_entry<true>(G1TaskQueueEntry)+0xe4
V  [libjvm.so+0x6d48a0]  G1CMBitMapClosure::do_addr(HeapWordImpl**)+0x20
V  [libjvm.so+0x6d753c]  G1CMTask::do_marking_step(double, bool, bool)+0x61c
V  [libjvm.so+0x6dc65c]  G1CMConcurrentMarkingTask::work(unsigned int)+0xcc
V  [libjvm.so+0xd9aa08]  WorkerThread::run()+0x98
V  [libjvm.so+0xd00418]  Thread::call_run()+0xb8
V  [libjvm.so+0xb8335c]  thread_native_entry(Thread*)+0xdc
C  [libpthread.so.0+0x7868]  start_thread+0x188

sop this seems to be the same underlying issue manifesting in different ways.;;;","2022-02-14 22:53;dholmes;Have to suspect JDK-8281637 as it modified the crashing method.;;;","2022-02-14 23:14;kbarrett;I think [~dholmes] is correct.  JDK-8281637 changed  G1CMIsAliveClosure::do_object_b from calling G1CH::is_obj_ill() to instead almost inline copied that function.  That function was removed as (otherwise) no longer used after that changeset.  I say ""almost inlining"" because is_obj_ill contained an initial null check for the argument oop, which was not included in the inlined copy.  That would account for the failure; a null oop is being passed in and no longer handled properly.;;;","2022-02-15 02:00;sjohanss;Yes, the missing null check *is* the problem, I will work on a quick fix or revert the original change.;;;","2022-02-15 03:10;sjohanss;Hard to reproduce, but looking at the code there is a window in reference discovery where the referent is cleared between the initial check and passed into the is-alive-closure. This it self might be something we should prevent, I'll file an enhancement for that later. 

I plan to fix this to do the same thing we did before, which is return true when NULL is passed in. This is a bit counter-intuitive but will lead to not discovering a reference with a NULL referent.;;;","2022-02-15 03:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7476
Date: 2022-02-15 11:45:00 +0000;;;","2022-02-15 08:24;roboduke;Changeset: 2fe0bf66
Author:    Stefan Johansson <sjohanss@openjdk.org>
Date:      2022-02-15 16:22:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2fe0bf66b7cbbae3dc65249be4b04f4075a98efa
;;;","2022-02-15 09:19;dcubed;The fix for this bug is integrated in jdk-19+10-574.;;;",,,,,,,,,,,,,,,,,,,,,,
[testbug] PrintIdealPhaseTest fails with -Xcomp,JDK-8281741,5068447,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,neliasso,neliasso,neliasso,2022-02-14 07:06,2022-05-06 08:33,2023-10-01 09:57,2022-02-15 01:52,19,,,,,,,,,19,hotspot,,0,noreg-self,oracle-triage-19,tier6,tier7,tier8,ursqe-triaged,,,,,,,,,,,,,"Test method isn't compiled when running with Xcomp, it gets inlined into the parent. Will add dontinline command.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281770,,,,,,,,JDK-8281505,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w14r:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-14 08:05;chagedorn;Failing test added with JDK-8281505.

ILW = Test failure with -Xcomp, single test, don't use -Xcomp = MLH = P4 ;;;","2022-02-14 11:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7465
Date: 2022-02-14 19:02:10 +0000;;;","2022-02-15 01:52;roboduke;Changeset: 1c12b159
Author:    Nils Eliasson <neliasso@openjdk.org>
Date:      2022-02-15 09:49:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1c12b159ffcbb3528a20ac585d8460bf730e303d
;;;","2022-02-16 14:09;dcubed;The fix for this bug is in jdk-19+10-570.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Redundant null check in LineNumberInputStream.read,JDK-8281728,5068433,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2022-02-14 02:13,2022-02-22 16:54,2023-10-01 09:57,2022-02-14 23:12,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,"At start of method, parameter 'b' is compared with null and NPE is thrown in case of null.

    public int read(byte[] b, int off, int len) throws IOException {
        if (b == null) {
            throw new NullPointerException();

But later variable is compared is null again

                if (b != null) {
                    b[off + i] = (byte)c;
                }

Redundant check could be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w11n:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2022-02-14 02:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7409
Date: 2022-02-09 18:51:22 +0000;;;","2022-02-14 23:12;roboduke;Changeset: 622970e4
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-02-15 07:10:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/622970e47cedd6e0b94b74235aa984ad79281389
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spinner with split horizontal arrows and a border places right arrow incorrectly,JDK-8281723,5068427,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jhendrikx,jhendrikx,jhendrikx,2022-02-14 01:14,2022-04-18 13:36,2023-10-01 09:57,2022-04-06 13:02,jfx17,,,,,,,,,jfx19,javafx,,0,,,,,,,,,,,,,,,,,,,"When you have a Spinner with arrows split horizontally (Spinner.STYLE_CLASS_SPLIT_ARROWS_HORIZONTAL) and you also add a border around the control, the right arrow is not placed correctly.  It is off several pixels to the left (the same as the border width).

This is caused by a small bug in the layoutChildren code in SpinnerSkin.  The position of the right arrow is determined without taking the value of ""x"" into account (which can be non-zero).

Fix is trivial, replace:

            // increment is on the right-hand side
            incrementArrowButton.resize(widestArrowButton, h);
            positionInArea(incrementArrowButton, w - widestArrowButton, y,
                    widestArrowButton, h, 0, HPos.CENTER, VPos.CENTER);

With:

            // increment is on the right-hand side
            incrementArrowButton.resize(widestArrowButton, h);
            positionInArea(incrementArrowButton, x + w - widestArrowButton, y,
                    widestArrowButton, h, 0, HPos.CENTER, VPos.CENTER);",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w10b:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-02-14 01:15;jhendrikx;I can provide a PR for this, let me know.;;;","2022-02-14 06:02;kcr;Unless this is a regression introduce specifically in JavaFX 17.0.2 (it isn't), the affected version should be ""openjfx17"".
;;;","2022-02-14 06:03;kcr;[~jhendrikx] Yes, if you'd like to provide a PR, please do.;;;","2022-03-08 23:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/748
Date: 2022-03-09 07:37:31 +0000;;;","2022-04-06 13:02;dukebot;Changeset: ba4c9c68
Author:    John Hendrikx <jhendrikx@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-04-06 19:59:24 +0000
URL:       https://git.openjdk.java.net/jfx/commit/ba4c9c688086857cbfe019c06e51b3d110cc84f7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Cherry-pick WebKit 613.1 stabilization fixes,JDK-8281711,5068412,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,arapte,arapte,arapte,2022-02-13 23:16,2022-04-13 08:58,2023-10-01 09:57,2022-02-17 19:41,8u331,jfx19,,,,,,,,jfx19,javafx,,0,CPU22_04-critical-approved,CPU22_04-critical-SQE-OK,sn_112,webkit-2.34,,,,,,,,,,,,,,,https://webkitgtk.org/2022/02/09/webkitgtk2.34.5-released.html,,,,,,,,,,,JDK-8284834,JDK-8282659,JDK-8282205,JDK-8282370,JDK-8282098,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282099,,,,,,,JDK-8278980,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w0wz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-02-16 00:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/733
Date: 2022-02-16 08:07:35 +0000;;;","2022-02-17 19:41;roboduke;Changeset: 418d3437
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2022-02-18 03:40:58 +0000
URL:       https://git.openjdk.java.net/jfx/commit/418d3437923fed0a298c48b54214af069e3bb3bd
;;;","2022-02-24 11:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/35
Date: 2022-02-24 19:31:18 +0000;;;","2022-03-04 06:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/79
Date: 2022-03-04 14:27:25 +0000;;;","2022-04-13 07:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/772
Date: 2022-04-13 14:15:29 +0000;;;","2022-04-13 08:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/773
Date: 2022-04-13 15:22:22 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
SourceLauncherTest.testSystemProperty isn't being run,JDK-8281705,5068409,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2022-02-13 22:32,2022-04-06 23:57,2023-10-01 09:57,2022-03-30 18:12,,,,,,,,,,19,tools,,0,source-launcher,test-only,,,,,,,,,,,,,,,,,"Changes in https://bugs.openjdk.java.net/browse/JDK-8209963 introduced a ""testSystemProperty"" method in SourceLauncherTest.java. However, that test method is missing a ""@Test"" annotation because of which the (internal toolbox) test framework is skipping running this test.
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8209963,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w0wb:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-02-13 22:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7456
Date: 2022-02-14 06:37:55 +0000;;;","2022-03-30 18:12;dukebot;Changeset: ec0897ab
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-03-31 01:09:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ec0897ab8064ce168f57b1b65c64b760044674dd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/profiling/spectrapredefineclass_classloaders/Launcher.java crash when CodeCache is full,JDK-8281681,5068376,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dlong,alanb,alanb,2022-02-13 07:30,2022-03-02 15:16,2023-10-01 09:57,2022-03-02 15:16,repo-loom,,,,,,,,,repo-loom,hotspot,,0,c2,intermittent,,,,,,,,,,,,,,,,,"This test has been failing in the loom repo for sometime when run with the jtreg wrapper and -Xcomp.

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x000000010787a5d0, pid=54394, tid=23811
#
# JRE version: Java(TM) SE Runtime Environment (19.0+4) (fastdebug build 19-loom+4-115)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-loom+4-115, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Problematic frame:
# V  [libjvm.dylib+0x7a5d0]  CallLeafNoFPDirectNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x104
#
# Core dump will be written. Default location: core.54394
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

Current CompileTask:
C2:  15330 4483    b  4       java.lang.invoke.DelegatingMethodHandle::makeReinvokerForm (344 bytes)

Stack: [0x000000016e978000,0x000000016eb7b000],  sp=0x000000016eb76c20,  free space=2043k
Thread 0x0000000137077210 [23811]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x7a5d0]  CallLeafNoFPDirectNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x104
V  [libjvm.dylib+0xf34bc0]  PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*)+0x12e8
V  [libjvm.dylib+0x57cc00]  Compile::Code_Gen()+0x3c0
V  [libjvm.dylib+0x57a678]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x14e4
V  [libjvm.dylib+0x46f1c0]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x180
V  [libjvm.dylib+0x595e64]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x614
V  [libjvm.dylib+0x595678]  CompileBroker::compiler_thread_loop()+0x29c
V  [libjvm.dylib+0x11902c0]  JavaThread::thread_main_inner()+0x254
V  [libjvm.dylib+0x118d0d4]  Thread::call_run()+0x21c
V  [libjvm.dylib+0xf21c90]  thread_native_entry(Thread*)+0x160
C  [libsystem_pthread.dylib+0x7878]  _pthread_start+0x140",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2w0oz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-28 03:26;dlong;Somehow the assembler's _code_section has become corrupted:

(gdb) down
#9  CodeSection::emit_int32 (x=-721215457, this=0xfffd5c95af20)
    at /workspace/open/src/hotspot/share/asm/codeBuffer.hpp:226
226	    *((int32_t*) curr) = x;
(gdb) p curr
$19 = (address) 0xfffffffffffffffe <error: Cannot access memory at address 0xfffffffffffffffe>
(gdb) p *this
$20 = {_start = 0xfffffffffffffffe <error: Cannot access memory at address 0xfffffffffffffffe>, _mark = 0x0, 
  _end = 0xfffffffffffffffe <error: Cannot access memory at address 0xfffffffffffffffe>, 
  _limit = 0xfffd74511880 '\314' <repeats 199 times>, <incomplete sequence \314>..., _locs_start = 0xfffd38cadf58, 
  _locs_end = 0xfffd38cae01a, _locs_limit = 0xfffd38cafe7a, 
  _locs_point = 0xfffd7450dab4 '\314' <repeats 199 times>, <incomplete sequence \314>..., _locs_own = true, 
  _scratch_emit = false, _index = 1 '\001', _outer = 0xfffd5c95aeb0}

;;;","2022-02-28 16:36;dlong;All the failures seem to be with -Xcomp and vthreads.  23 out of 427 aarch64 runs with -Xcomp and vthreads failed.;;;","2022-02-28 20:21;dlong;According to the latest core dump, we are at line 3834:

3833	      address call = __ trampoline_call(Address(entry, relocInfo::runtime_call_type));
3834	      __ post_call_nop();
3835	      if (call == NULL) {

""call"" is NULL, meaning the CodeCache is supposed to be full:

CodeCache: size=3072Kb used=2627Kb max_used=2892Kb free=444Kb
 bounds [0x0000fffd74270000, 0x0000fffd74570000, 0x0000fffd74570000]
 total_blobs=1158 nmethods=441 adapters=675
 compilation: disabled (not enough contiguous free space left)
              stopped_count=1, restarted_count=0
 full_count=1

This what happens in trampoline_call() when the CodeCache is full:

    if (!in_scratch_emit_size) {
      address stub = emit_trampoline_stub(offset(), entry.target());
      if (stub == NULL) {
        postcond(pc() == badAddress);
        return NULL; // CodeCache is full
      }
    }

So the 0xfffffffffffffffe is not from memory corruption.  It is the special ""badAddress"" address value.  I think the simple fix is to not try to call post_call_nop() when the code cache is full.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
appcds/dynamicArchive/ArchiveConsistency.java fails after JDK-8279997,JDK-8281678,5068368,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,dholmes,dholmes,2022-02-12 14:24,2022-02-22 16:53,2023-10-01 09:57,2022-02-14 10:55,19,,,,,,,,,19,hotspot,,0,tier5,,,,,,,,,,,,,,,,,,"JDK-8279997 added two new test cases and they are failing in tier 5 with release builds:

----------System.err:(30/1746)----------
java version ""19-ea"" 2022-09-20
Java(TM) SE Runtime Environment (fastdebug build 19-ea+10-544)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 19-ea+10-544, mixed mode)
 stdout: [Hello World
];
 stderr: [java version ""19-ea"" 2022-09-20
Java(TM) SE Runtime Environment (fastdebug build 19-ea+10-544)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 19-ea+10-544, mixed mode, sharing)
]
 exitValue = 0

java.lang.RuntimeException: 'warning: -XX:+AutoCreateSharedArchive is unsupported when base CDS archive is not loaded' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at ArchiveConsistency.lambda$doTest$3(ArchiveConsistency.java:218)
	at jdk.test.lib.cds.CDSTestUtils$Result.assertNormalExit(CDSTestUtils.java:149)
	at ArchiveConsistency.doTest(ArchiveConsistency.java:217)
	at ArchiveConsistency.testCustomBase(ArchiveConsistency.java:61)
	at DynamicArchiveTestBase.runTest(DynamicArchiveTestBase.java:76)
	at ArchiveConsistency.main(ArchiveConsistency.java:53)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279997,,,,,,JDK-8281715,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,"0|i2w0n7:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-13 22:40;iklam;Reproduced with both debug and release build:

$ jtreg -vmoptions:-Xshare:off  test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/ArchiveConsistency.java
....
Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 'warning: -XX:+AutoCreateSharedArchive is unsupported when base CDS archive is not loaded' missing from stdout/stderr
;;;","2022-02-13 23:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7457
Date: 2022-02-14 07:38:36 +0000;;;","2022-02-14 10:55;roboduke;Changeset: 16f649b9
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-02-14 18:53:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/16f649b9c5b480d2a8499b1a92939cdf53ecc8dc
;;;","2022-02-14 13:44;dholmes;From the PR:

The test case deletes `baseArchiveName` and then try to use the `-XX:+AutoCreateSharedArchive` flag, etc, to trigger a dynamic dump, which usually will fail (because the base archive doesn't exist) and print out the expected warning.

However, when `-vmoption:-Xshare:off` is specified, `isUseSharedSpacesDisabled()` returns true, and the `run`  method will internally recreated a base archive. This behavior is intended to make all the tests in the `dynamicArchive/` subdirectory work even if `-Xshare:off` is specified, but this would cause the two newly added test cases to fail.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
VMDeprecatedOptions test fails after JDK-8278423,JDK-8281675,5068361,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,dholmes,dholmes,2022-02-12 05:42,2022-02-16 16:22,2023-10-01 09:57,2022-02-12 06:14,19,,,,,,,,,19,hotspot,,0,tier1,,,,,,,,,,,,,,,,,,"JDK-8278423 deprecated the ExtendedDTraceProbes flag and, rightly, added it to the VMDeprecatedOptions test. But DTrace is not enabled in our builds and so the flag is rejected for a different reason:

ExtendedDTraceProbes flag is not applicable for this configuration
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278423,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,"0|i2w0ln:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-12 05:47;dholmes;As far as I can see there is no way to query if DTrace is enabled in a build, so the simplest solution is to just remove this flag check from the test after doing manual verification of the deprecation message.;;;","2022-02-12 06:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7452
Date: 2022-02-12 14:07:07 +0000;;;","2022-02-12 06:13;roboduke;Changeset: 8acfbc2e
Author:    David Holmes <dholmes@openjdk.org>
Date:      2022-02-12 14:12:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8acfbc2e21063c3dc088c25c1574bcefa94e5a24
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
tools/javac/annotations/typeAnnotations/classfile/AnonymousExtendsTest.java fails with AssertionError,JDK-8281674,5068359,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,darcy,dcubed,dcubed,2022-02-11 16:56,2022-08-08 09:50,2023-10-01 09:57,2022-02-11 17:35,19,,,,,,,,,19,tools,,0,regression,tier1,,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

tools/javac/annotations/typeAnnotations/classfile/AnonymousExtendsTest.java

Here's a snippet from the log file:

#section:main
----------messages:(5/152)----------
command: main AnonymousExtendsTest
reason: User specified action: run main AnonymousExtendsTest 
Mode: agentvm
Agent id: 9
elapsed time (seconds): 0.07
----------configuration:(14/1689)----------
Boot Layer
  class path: /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar 
  patch:      java.base /opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S23039/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/12145499-bb9e-4656-907b-7ca94ddd4441/runs/fb1fa7eb-b3d6-47b1-abb2-1e6ae736e8f1/testoutput/test-support/jtreg_open_test_langtools_tier1/patches/java.base

Test Layer
  class path: /opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S23039/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/12145499-bb9e-4656-907b-7ca94ddd4441/runs/fb1fa7eb-b3d6-47b1-abb2-1e6ae736e8f1/testoutput/test-support/jtreg_open_test_langtools_tier1/classes/5/tools/javac/annotations/typeAnnotations/classfile/AnonymousExtendsTest.d
              /opt/mach5/mesos/work_dir/jib-master/install/jdk-19+10-542/src.full/open/test/langtools/tools/javac/annotations/typeAnnotations/classfile

----------rerun:(28/4831)*----------

<snip>

----------System.err:(12/726)----------
java.lang.AssertionError: Unexpected annotations[@AnonymousExtendsTest.TA(1)],[@AnonymousExtendsTest.TA(2)]
	at AnonymousExtendsTest.checkAnnotations(AnonymousExtendsTest.java:71)
	at AnonymousExtendsTest.testIt(AnonymousExtendsTest.java:54)
	at AnonymousExtendsTest.main(AnonymousExtendsTest.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.AssertionError
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.AssertionError: Unexpected annotations[@AnonymousExtendsTest.TA(1)],[@AnonymousExtendsTest.TA(2)]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281462,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2w0l7:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2022-02-11 17:05;dcubed;The only changeset in the jdk-19+10-542-tier1 build ID is:

JDK-8281462 Annotation toString output for enum not reusable for source input

so I have pinged [~darcy] on Slack...;;;","2022-02-11 17:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7450
Date: 2022-02-12 01:23:37 +0000;;;","2022-02-11 17:35;roboduke;Changeset: 6fdfe045
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-02-12 01:33:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6fdfe0458df989a7946b4f52a3023e8a39fb3bbb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
jfr/event/allocation tests fail with release VMs after JDK-8281318 due to lack of -XX:+UnlockDiagnosticVMOptions,JDK-8281638,5068307,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-02-11 03:13,2022-04-06 01:37,2023-10-01 09:57,2022-02-11 03:41,19,,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,noreg-self,tencent-interest,tier3,,,,,,,,,,,"The following three tests fail with release VMs.

jdk/jfr/event/allocation/TestObjectAllocationInNewTLABEvent.java
jdk/jfr/event/allocation/TestObjectAllocationOutsideTLABEvent.java
jdk/jfr/event/allocation/TestObjectAllocationSampleEventThrottling.java

```
STDERR:
Error: VM option 'WhiteBoxAPI' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.
Error: The unlock option must precede 'WhiteBoxAPI'.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
```",,,,,,,,,,,JDK-8283252,JDK-8284436,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281318,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w09n:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-02-11 03:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7441
Date: 2022-02-11 11:29:21 +0000;;;","2022-02-11 03:41;roboduke;Changeset: d254cf28
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-02-11 11:39:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d254cf28c5e72bd9b8de863b831015237640ca25
;;;","2022-02-11 07:51;dcubed;The fix for this bug is integrated in jdk-19+10-531.;;;","2022-03-11 07:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/43
Date: 2022-03-11 15:32:53 +0000;;;","2022-03-11 08:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/241
Date: 2022-03-11 16:17:57 +0000;;;","2022-03-14 02:03;shade;Fix Request (17u, 18u)

Fixes modified JFR tests after JDK-8281318 backport. Applies cleanly. Tests pass in x86_64 and x86_32 modes, in both fastdebug and release.;;;",,,,,,,,,,,,,,,,,,,,,,,,
jdeps:  java.lang.InternalError: Missing message: err.invalid.filters,JDK-8281634,5068299,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,dfuchs,dfuchs,2022-02-11 01:57,2022-02-22 16:53,2023-10-01 09:57,2022-02-14 19:55,17.0.2,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,"There seems to be some resources missing in jdeps resource bundles:

$ java --version
java 17.0.2 2022-01-18 LTS
Java(TM) SE Runtime Environment (build 17.0.2+8-LTS-86)
Java HotSpot(TM) 64-Bit Server VM (build 17.0.2+8-LTS-86, mixed mode, sharing)

$  jdeps -I --package sun.misc --require java.net.http
Exception in thread ""main"" java.lang.InternalError: Missing message: err.invalid.filters
	at jdk.jdeps/com.sun.tools.jdeps.JdepsTask.getMessage(JdepsTask.java:1214)
	at jdk.jdeps/com.sun.tools.jdeps.JdepsTask.reportError(JdepsTask.java:1177)
	at jdk.jdeps/com.sun.tools.jdeps.JdepsTask.run(JdepsTask.java:521)
	at jdk.jdeps/com.sun.tools.jdeps.Main.main(Main.java:49)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2w07v:",9223372036854775807,b10,,,,,,,,,,,"2022-02-13 21:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7455
Date: 2022-02-14 05:27:39 +0000;;;","2022-02-14 19:55;roboduke;Changeset: d4cd8dfe
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-02-15 03:53:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d4cd8dfedbe220fb3b9a68650aba90536e9b12ee
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
HashMap copy constructor and putAll can over-allocate table,JDK-8281631,5068265,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,smarks,webbuggrp,webbuggrp,2022-02-10 08:32,2023-05-17 12:39,2023-10-01 09:57,2022-03-16 09:52,11,17,18,19,8,,,,,19,core-libs,,0,amazon-interest,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
failed on all java 8, 11, and 17
tested only on windows 10.

A DESCRIPTION OF THE PROBLEM :
sometimes HashMap.putAll would cause the hashmap.table be double length than should be.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
for jdk 8-:
just run the tests I provided and see the results.
for jdk 9+:
make a break point before the System.out.println(""a : "" + getArrayLength(a));
then see values of a.table.length, b.table.length, c.table.length, d.table.length using debugger tool.


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
for jdk 8-:
the output should be
a : 16
b : 16
c : 16
d : 16
for jdk 9+:
a.table.length = 16
b.table.length = 16
c.table.length = 16
d.table.length = 16
ACTUAL -
for jdk 8-:
the output should be
a : 16
b : 16
c : 32
d : 32
for jdk 9+:
a.table.length = 16
b.table.length = 16
c.table.length = 32
d.table.length = 32

---------- BEGIN SOURCE ----------
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

public class TestMap {

    public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException {
        HashMap<Object, Object> a = new HashMap<>();
        fill12(a);
        HashMap<Object, Object> b = new HashMap<>(12);
        fill12(b);
        HashMap<Object, Object> c = new HashMap<>(a);
        HashMap<Object, Object> d = new HashMap<>();
        d.putAll(a);
        System.out.println(""a : "" + getArrayLength(a));
        System.out.println(""b : "" + getArrayLength(b));
        System.out.println(""c : "" + getArrayLength(c));
        System.out.println(""d : "" + getArrayLength(d));
    }

    public static void fill12(Map<Object, Object> map) {
        for (int i = 0; i < 12; i++) {
            map.put(i, i);
        }
    }

    public static int getArrayLength(Map<Object, Object> map) throws NoSuchFieldException, IllegalAccessException {
        Field field = HashMap.class.getDeclaredField(""table"");
        field.setAccessible(true);
        Object table = field.get(map);
        return Array.getLength(table);
    }

}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
change the original calculation from (int) (expected / 0.75F + 1) to (int) Math.ceil(expected / 0.75)

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282120,JDK-8186958,JDK-8282178,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2w00b:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,Verified,,"2022-02-10 23:20;tongwan;The observations on Windows 10:
JDK 8: Failed, the values of c and d are 32.
JDK 11: Failed.
JDK 17: Failed.
JDK 18ea+29: Failed.
JDK 19ea+3: Failed.;;;","2022-02-11 00:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7431
Date: 2022-02-10 17:46:36 +0000;;;","2022-02-18 12:31;smarks;See also previous discussion of the HashMap capacity computation here:

http://mail.openjdk.java.net/pipermail/core-libs-dev/2022-February/085581.html
;;;","2022-02-18 12:33;smarks;Work is in progress by the submitter, Xeno Amess. See PR for details.;;;","2022-03-03 17:12;smarks;This change also fixes a bug in WeakHashMap where it would expand the table prematurely, when it reaches the threshold
instead of when it exceeds the threshold.;;;","2022-03-16 09:52;dukebot;Changeset: 3e393047
Author:    XenoAmess <xenoamess@gmail.com>
Committer: Stuart Marks <smarks@openjdk.org>
Date:      2022-03-16 16:48:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3e393047e12147a81e2899784b943923fc34da8e
;;;",,,,,,,,,,,,,,,,,,,,,,,,
KeyAgreement : generateSecret intermittently not resetting,JDK-8281628,5068293,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,weijun,kganapureddy,kganapureddy,2022-02-10 23:54,2022-11-18 09:00,2023-10-01 09:57,2022-03-02 16:42,11,13,14,15,16,17,18,19,8,19,security-libs,,0,conformance,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,"It's noticed that the  KeyAgreement : generateSecret - Not resetting and generating the same secret occasionally.

Please find the attached standalone code - 
The sample initializes the KeyAgreement and generates a secret(secret) , and again try to generate a secret(secret1)

The secret and secret1 does not match occasionally.  

Note - attached sample repeated for 50 times, to see the failure.

Interestingly the generated secret1 after reset mismatches only the first byte of the secret.

The failure output.
===========
#### generateSecret() doesn't successfully reset KeyAgreement object.[-48, 71, -8, -56, -123, 13, 106, -6, 54, -8, -22, -71, -53, 16, 27, 5, 123, -110, 32, -10, 80, 57, -115, 11, -103, 52, 16, -86, 124, -64, 18, -103, 90, 4, 119, 68, -18, -17, -97, 52, -13, -41, -15, -101, -56, -55, -23, 44, -3, -85, -33, 5, 70, 31, -53, 1, 119, 10, 101, 3, 114, 106, 121, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] 
 [0, 71, -8, -56, -123, 13, 106, -6, 54, -8, -22, -71, -53, 16, 27, 5, 123, -110, 32, -10, 80, 57, -115, 11, -103, 52, 16, -86, 124, -64, 18, -103, 90, 4, 119, 68, -18, -17, -97, 52, -13, -41, -15, -101, -56, -55, -23, 44, -3, -85, -33, 5, 70, 31, -53, 1, 119, 10, 101, 3, 114, 106, 121, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
==========


",,,,,,,,,,,JDK-8287546,JDK-8287545,JDK-8290282,JDK-8288880,JDK-8290281,JDK-8288034,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8236141,JCK-7312517,JDK-8287765,,,,,,,,,,"2022-02-10 23:59;kganapureddy;TestGenerateSecret.java;https://bugs.openjdk.org/secure/attachment/97951/TestGenerateSecret.java","2022-05-26 04:05;hkummari;log_in_11u_CPU_CI.txt;https://bugs.openjdk.org/secure/attachment/99096/log_in_11u_CPU_CI.txt",,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w06j:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2022-03-02 13:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7665
Date: 2022-03-02 19:35:50 +0000;;;","2022-03-02 16:42;dukebot;Changeset: 1485883c
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-03-03 00:39:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1485883c9e6e24315bb21f20604b1c326e862a5b
;;;","2022-06-07 04:20;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Low risk, adding initialization.
Clean backport.
SAP nightly testing passed.;;;","2022-06-07 04:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/437
Date: 2022-06-07 11:19:57 +0000;;;","2022-06-13 04:48;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
A valuable fix to security coding.
I had to do some trivial adaptions to the test.
Test passes with the fix and fails without.  SAP nightly testing passed.;;;","2022-06-13 07:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1145
Date: 2022-06-13 11:47:07 +0000;;;","2022-07-13 06:37;yan;Fix request 13u, 15u:
I'd like to backport this useful fix for parity with major releases. 
Small ad-hoc change in the test made to avoid HexFormat.
All crypto tests do pass, including a new one.;;;","2022-07-13 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/367
Date: 2022-07-13 13:42:07 +0000;;;","2022-07-13 06:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/230
Date: 2022-07-13 13:39:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Add asmtools sources as a test library,JDK-8281618,5068279,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlsmith,dlsmith,dlsmith,2022-02-10 13:38,2022-02-15 12:42,2023-10-01 09:57,2022-02-14 12:19,repo-valhalla,,,,,,,,,repo-valhalla,hotspot,,0,,,,,,,,,,,,,,,,,,,"Valhalla tests can't be written cleanly in the jasm format, because the tool bundled with jtreg hasn't been updated to include Valhalla class file features. And we can't really update that tool until the features are included in a standard Java release.

As an alternative, we can add the asmtools sources to the Valhalla repository and then update them to support new/experimental features. Test files in the jasm/jcoder formats should be buildable via the '@run driver' jtreg action.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281763,JDK-8281880,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w03f:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-02-10 13:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/646
Date: 2022-02-10 21:43:59 +0000;;;","2022-02-14 12:03;dlsmith;Example usage: given a source file Foo.jasm in a test directory, the test would typically say:

* @build Foo

or maybe

* @compile Foo.jasm

These lines would be replaced with:

* @library /test/lib
* @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*
* @run driver org.openjdk.asmtools.JtregDriver jasm Foo.jasm;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock caused by jdwp agent,JDK-8281615,5068275,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2022-02-10 12:33,2022-06-02 00:44,2023-10-01 09:57,2022-02-22 19:06,11-pool,17,18,19,,,,,,19,core-svc,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,redhat-interest,serviceability,,,,,,,,,,"Our customer reported a deadlock caused by jdwp agent with jdk11, the stack trace is attached.


Thread 4: while holding classTrackLock monitor tries to allocate memory, that triggers state transition and gets blocked by on going GC safepoint.

#12 ThreadInVMfromNative (thread=0x7ffef4036000, this=0x7ffed41e1560) at src/hotspot/share/runtime/interfaceSupport.inline.hpp:267
#13 jvmti_Allocate (env=0x7ffff000bd70, size=24, mem_ptr=0x7ffed41e15c0, this=<optimized out>) at build/hotspot/variant-server/gensrc/jvmtifiles/jvmtiEnter.cpp:336
#14 0x00007ffff49c6786 in jvmtiAllocate (numBytes=numBytes@entry=24) at src/jdk.jdwp.agent/share/native/libjdwp/util.c:1808
#15 0x00007ffff49a92ad in bagCreateBag (itemSize=itemSize@entry=8, initialAllocation=initialAllocation@entry=10) at src/jdk.jdwp.agent/share/native/libjdwp/bag.c:40   << == Holding classTrackLock monitor
#16 0x00007ffff49a97b0 in classTrack_processUnloads (env=env@entry=0x7ffef4036348) at src/jdk.jdwp.agent/share/native/libjdwp/classTrack.c:91
#17 0x00007ffff49b1253 in event_callback (env=env@entry=0x7ffef4036348, evinfo=evinfo@entry=0x7ffed41e1700) at src/jdk.jdwp.agent/share/native/libjdwp/eventHandler.c:583
#18 0x00007ffff49b215e in cbClassPrepare (jvmti_env=<optimized out>, env=0x7ffef4036348, thread=0x7ffee00010d0, klass=0x7ffee00010d8) at src/jdk.jdwp.agent/share/native/libjdwp/eventHandler.c:892
#19 0x00007ffff6681094 in JvmtiExport::post_class_prepare (thread=0x7ffef4036000, klass=0x840362840) at src/hotspot/share/prims/jvmtiExport.cpp:1337
#20 0x00007ffff64cf5c8 in InstanceKlass::link_class_impl (this=0x840362840, throw_verifyerror=<optimized out>, __the_thread__=0x7ffef4036000) at src/hotspot/share/oops/instanceKlass.cpp:838

Thread 88: VMThread is running G1 Remark code, processing weak roots and trying to post object free event and blocked on classTrackLock monitor

#2  0x00007ffff668f57c in SimpleEnter (Self=<optimized out>, this=<optimized out>) at src/hotspot/share/prims/jvmtiRawMonitor.cpp:150
#3  JvmtiRawMonitor::raw_enter (this=this@entry=0x7ffff07c0000, __the_thread__=__the_thread__@entry=0x7ffff0755800) at src/hotspot/share/prims/jvmtiRawMonitor.cpp:304
#4  0x00007ffff6671cb8 in JvmtiEnv::RawMonitorEnter (this=<optimized out>, rmonitor=0x7ffff07c0000) at src/hotspot/share/prims/jvmtiEnv.cpp:3324
#5  0x00007ffff49c4a7b in debugMonitorEnter (monitor=0x7ffff07c0000) at src/jdk.jdwp.agent/share/native/libjdwp/util.c:1043   << == acquire classTrackLock monitor
#6  0x00007ffff49a9758 in cbTrackingObjectFree (jvmti_env=<optimized out>, tag=140729502422448) at src/jdk.jdwp.agent/share/native/libjdwp/classTrack.c:67
#7  0x00007ffff667fe1d in JvmtiExport::post_object_free (env=0x7ffff07c00f0, tag=140729502422448) at src/hotspot/share/prims/jvmtiExport.cpp:1470
#8  0x00007ffff66a098c in JvmtiTagMap::do_weak_oops (this=0x7ffff07c1940, is_alive=is_alive@entry=0x7fffb4377380, f=f@entry=0x7ffff7182150 <do_nothing_cl>) at src/hotspot/share/prims/jvmtiTagMap.cpp:3377
#9  0x00007ffff66a0ac5 in JvmtiTagMap::weak_oops_do (is_alive=is_alive@entry=0x7fffb4377380, f=f@entry=0x7ffff7182150 <do_nothing_cl>) at src/hotspot/share/prims/jvmtiTagMap.cpp:3325
#10 0x00007ffff667eeca in JvmtiExport::weak_oops_do (is_alive=is_alive@entry=0x7fffb4377380, f=f@entry=0x7ffff7182150 <do_nothing_cl>) at src/hotspot/share/prims/jvmtiExport.cpp:2590
#11 0x00007ffff6b44d11 in WeakProcessor::weak_oops_do (is_alive=is_alive@entry=0x7fffb4377380, keep_alive=0x7ffff7182150 <do_nothing_cl>) at src/hotspot/share/gc/shared/weakProcessor.cpp:38
#12 0x00007ffff640e9a3 in G1ConcurrentMark::weak_refs_work (this=this@entry=0x7ffff00708f0, clear_all_soft_refs=clear_all_soft_refs@entry=false) at src/hotspot/share/gc/g1/g1ConcurrentMark.cpp:1674
#13 0x00007ffff640fc59 in G1ConcurrentMark::remark (this=0x7ffff00708f0) at src/hotspot/share/gc/g1/g1ConcurrentMark.cpp:1163


Start with JDK-8212879 in jdk16, object free events are no longer posted during weak root processing, but they are still posted at safepoints, so potential has the same issue(?)

",,,,,,,,,,,JDK-8287399,JDK-8283207,JDK-8283204,JDK-8287703,JDK-8283206,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287718,,,,,,,,,,,,"2022-02-10 12:33;zgu;stack.txt;https://bugs.openjdk.org/secure/attachment/97950/stack.txt",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w02j:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-02-14 06:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7461
Date: 2022-02-14 14:27:45 +0000;;;","2022-02-22 19:06;dukebot;Changeset: e1060bee
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-02-23 03:04:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e1060bee2adb9f2e07ca09309d0f89132db30f28
;;;","2022-02-28 07:25;zgu;Fix Request (17u)

I would like to backport this clean backport to 17u. The patch fixed bug that can potential deadlock whole JVM, while the risk is low, mainly just moved memory allocation/deallocation (jvmtiAllocate/jvmtiDeallocate) outside classTrack_lock.


;;;","2022-02-28 07:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/183
Date: 2022-02-28 15:21:02 +0000;;;","2022-02-28 07:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/843
Date: 2022-02-28 15:34:10 +0000;;;","2022-02-28 07:44;zgu;Fix Request (11u)

I would like to backport this clean backport to 11u. The patch fixed bug that can potential deadlock whole JVM, while the risk is low, mainly just moved memory allocation/deallocation (jvmtiAllocate/jvmtiDeallocate) outside classTrack_lock.
;;;","2022-02-28 10:09;zgu;Fix Request (18u)

I would like to backport this clean backport to 18u. The patch fixed bug that can potential deadlock whole JVM, while the risk is low, mainly just moved memory allocation/deallocation (jvmtiAllocate/jvmtiDeallocate) outside classTrack_lock.;;;","2022-02-28 10:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/31
Date: 2022-02-28 18:08:09 +0000;;;","2022-03-01 00:12;goetz;Hi [~zgu], is this urgent for 11.0.15 and 17.0.3, or is the next release fine too? This is a brand new change in head.;;;","2022-03-01 06:01;zgu;[~goetz] Checked with our customer, it appears not an urgent one, next release is fine.

Thanks,

-Zhengyu;;;",,,,,,,,,,,,,,,,,,,,
serviceability/sa/ClhsdbFindPC.java fails with java.lang.RuntimeException: 'In code in NMethod for jdk/test/lib/apps/LingeredApp.steadyState' missing from stdout/stderr,JDK-8281614,5068272,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2022-02-10 11:57,2022-03-02 17:18,2023-10-01 09:57,2022-02-23 14:57,repo-loom,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,"Seeing the following failure in the Loom repo.

java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'In code in NMethod for jdk/test/lib/apps/LingeredApp.steadyState' missing from stdout/stderr 
	at ClhsdbFindPC.testFindPC(ClhsdbFindPC.java:306)
	at ClhsdbFindPC.main(ClhsdbFindPC.java:328)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:142)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:270)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:155)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:349)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:342)

Note this is not the same as JDK-8269881, which can potentially produce this same failure message. The difference is that for this CR, the stack dump of the SteadyStateThread is present. For JDK-8269881 it is not. The reason it is failing is because for some reason LingeredApp.steadyState is not compiled anymore, even though we run with -Xcomp

""SteadyStateThread"" #14 prio=0 tid=0x0000fffbd43d3a50 nid=1523267 waiting for monitor entry [0x0000fffba9b0e000]
   java.lang.Thread.State: UNKNOWN
   JavaThread state: _thread_blocked
 - jdk.test.lib.apps.LingeredApp.steadyState(java.lang.Object) @bci=8, line=537, pc=0x0000fffbbc593fac, Method*=0x0000fffba0403638 (Interpreted frame)
	- waiting to lock <0x00000000c1d0f970> (a java.lang.Object)
 - jdk.test.lib.apps.LingeredApp$1.run() @bci=4, line=543, pc=0x0000fffbbcde5ac8, Method*=0x0000fffba0403eb0 (Compiled frame [deoptimized])

hsdb> + findpc 0x00007fb79c5dda75
Address 0x00007fb79c5dda75: In interpreter codelet: monitorenter [0x00007fb79c5dd9c8, 0x00007fb79c5ddbe0)  536 bytes  

This happens with the following variant of the test:
  serviceability/sa/ClhsdbFindPC.java#xcomp-core",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8242168,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w01v:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-02-18 17:49;cjplummer;The issue is that the test task is being run with -XX:+Deoptimize a lot, and this is being passed along to the spawned LingeredApp process. Filtering out this option when spawning the LingeredApp process should fix this issue.;;;","2022-02-18 18:30;cjplummer;Of the 4 test variants:

 * @test id=xcomp-process
 * @test id=xcomp-core
 * @test id=no-xcomp-process
 * @test id=no-xcomp-core

The two ""process"" versions have the following:

 * @requires vm.opt.DeoptimizeALot != true

So this explains why it fails with xcomp-core but not xcomp-process. It's not even run with xcomp-process.;;;","2022-02-18 18:37;cjplummer;Looks like JDK-8242168 was not applied properly. It was suppose to address this issue, but should have done so for the two xcomp variants, not the two process variants.;;;","2022-02-18 19:47;cjplummer;Actually JDK-8242168 was applied right, but there were only two test cases at the time. Both were process test cases (not core file), one with xcomp (and the ""@requires vm.opt.DeoptimizeALot != true "") and one without. When the two additional core files test cases were added, the copy-n-paste of the original two test cases was not done properly, and the @requires went on the #no-xcomp-process rather than the #xcomp-process.;;;","2022-02-18 20:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7542
Date: 2022-02-19 04:00:30 +0000;;;","2022-02-23 14:57;dukebot;Changeset: a6610031
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-02-23 22:55:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a6610031e2816156fa14876457e260282a88d478
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Remove @throws IOException from X509CRLImpl::getExtension docs,JDK-8281567,5068218,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2022-02-09 19:42,2022-02-16 16:20,2023-10-01 09:57,2022-02-10 00:12,18,,,,,,,,,19,security-libs,,0,noreg-doc,tencent-interest,,,,,,,,,,,,,,,,,"In class sun.security.x509.X509CRLImpl, method getExtension(ObjectIdentifier) doesn't declare that IOException would be thrown, so the @throws IOException doc should be removed.

    /**
     * get an extension
     *
     * @param oid ObjectIdentifier of extension desired
     * @return Object of type {@code <extension>} or null, if not found
     * @throws IOException on error
     */
    public Object getExtension(ObjectIdentifier oid) {
        if (extensions == null)
            return null;

        // XXX Consider cloning this
        return extensions.get(OIDMap.getName(oid));
    }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vzpv:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,,,"2022-02-09 22:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7419
Date: 2022-02-10 06:18:28 +0000;;;","2022-02-10 00:12;roboduke;Changeset: 7218d844
Author:    John Jiang <jjiang@openjdk.org>
Date:      2022-02-10 08:11:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7218d8449bfaa3f121b66088a88a194f77f06753
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update cmake to 3.22.3,JDK-8281564,5068214,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,arapte,kcr,kcr,2022-02-09 16:28,2022-05-10 05:38,2023-10-01 09:57,2022-04-05 21:44,8,jfx11,jfx17,jfx19,,,,,,jfx19,javafx,,0,3rdparty,noreg-build,sn_112,sn_113,sn_114,,,,,,,,,,,,,,"We need to update to the latest version of cmake, version 3.22.3.

We currently use cmake 3.13.3, which is quite old and is barely above the minimum needed to build the latest WebKit. It also lacks support for macOS aarch64 builds (so a more recent one needs to be used anyway to build on M1).
",,,,,,,,,,,JDK-8286000,JDK-8286479,JDK-8284562,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281558,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vzoz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-04-04 21:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/767
Date: 2022-04-05 04:54:55 +0000;;;","2022-04-05 21:44;dukebot;Changeset: d960d639
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2022-04-06 04:43:07 +0000
URL:       https://git.openjdk.java.net/jfx/commit/d960d639dc6e37de0cdb69075a31a17090b83a3d
;;;","2022-04-30 06:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/95
Date: 2022-04-30 13:39:32 +0000;;;","2022-05-09 14:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/55
Date: 2022-05-09 21:13:07 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Get rid of deprecated Style Masks constants,JDK-8281555,5068203,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dmarkov,dmarkov,dmarkov,2022-02-09 09:37,2022-02-22 16:54,2023-10-01 09:57,2022-02-15 01:27,19,,,,,,,,,19,client-libs,,0,cssn22_02_01,sustaining,,,,,,,,,,,,,,,,,"The Style Masks constants [1], which are utilised by AWT, were deprecated starting from macOS 10.12 Sierra. It is high time to replace them with new constants introduced by NSWindowStyleMask enumeration [2].

[1] - https://developer.apple.com/documentation/appkit/nspanel/style_masks
[2] - https://developer.apple.com/documentation/appkit/nswindowstylemask",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2vzmj:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-02-09 09:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7408
Date: 2022-02-09 17:50:48 +0000;;;","2022-02-15 01:27;roboduke;Changeset: f82866bc
Author:    Dmitry Markov <dmarkov@openjdk.org>
Date:      2022-02-15 09:26:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f82866bc79cbeeac23716fa6fadd4877f5d0a462
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove guide-specific copyright pages from JDK 8u documentation,JDK-8281551,5068198,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgallard,rgallard,rgallard,2022-02-09 08:26,2022-03-31 00:55,2023-10-01 09:57,2022-03-08 08:14,,,,,,,,,,8u341,docs,,0,CPU22_04-critical-approved,hgupdate-sync,,,,,,,,,,,,,,,,,"Remove these copyright pages as the generated link to the most up-to-date copyright page on each page is sufficient:

https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/title.html
https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/title.html
https://docs.oracle.com/javase/8/docs/technotes/guides/install/title.html
https://docs.oracle.com/javase/8/docs/technotes/guides/scripting/prog_guide/title.html
https://docs.oracle.com/javase/8/docs/technotes/guides/scripting/nashorn/title.html
https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/title.html



",,,,,,,,,,,JDK-8282904,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vzlf:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(VM_Version::supports_avx512bw()) failed for Tests jdk/incubator/vector/,JDK-8281544,5068190,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,epeter,epeter,2022-02-09 06:59,2022-04-03 22:50,2023-10-01 09:57,2022-02-20 23:08,17,18,19,,,,,,,19,hotspot,,0,avx,c2,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-19,vectorapi,zgc,,,,,,,"Running jdk/incubator/vector/ Tests with JVM Flags

-XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+UnlockExperimentalVMOptions -XX:+UseZGC

triggers this assert from src/hotspot/cpu/x86/assembler_x86.cpp.
When reproducing this make sure the machine has AVX3 support, else the code automatically reverts to AVX2 and does not end up triggering the assert.

In particular, I have seen these tests fail:
jdk/incubator/vector/VectorMaxConversionTests.java
jdk/incubator/vector/Vector512ConversionTests.java
jdk/incubator/vector/Vector256ConversionTests.java
jdk/incubator/vector/Vector128ConversionTests.java
jdk/incubator/vector/Long512VectorTests.java
jdk/incubator/vector/Long512VectorLoadStoreTests.java
jdk/incubator/vector/Int512VectorTests.java
jdk/incubator/vector/Int512VectorLoadStoreTests.java
jdk/incubator/vector/Float512VectorTests.java
jdk/incubator/vector/Float512VectorLoadStoreTests.java
jdk/incubator/vector/Double512VectorTests.java
jdk/incubator/vector/Double512VectorLoadStoreTests.java


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (src/hotspot/cpu/x86/assembler_x86.cpp:2577), pid=21597, tid=21784
#  Error: assert(VM_Version::supports_avx512bw()) failed
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (fastdebug build 19-internal+0-2022-02-09-1405029.emanuel.peter.jdk)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-internal+0-2022-02-09-1405029.emanuel.peter.jdk, mixed mode, sharing, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x6a44f4]  Assembler::kmovql(Address, KRegisterImpl*)+0x194
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to xxx)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#


Current CompileTask:
C2:   6215 1774             jdk.incubator.vector.FloatVector$FloatSpecies::maskAll (88 bytes)

Stack: [0x00007efd83afa000,0x00007efd83bfb000],  sp=0x00007efd83bf5870,  free space=1006k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x6a44f4]  Assembler::kmovql(Address, KRegisterImpl*)+0x194
V  [libjvm.so+0x1aaf4b8]  ZSaveLiveRegisters::ZSaveLiveRegisters(MacroAssembler*, ZLoadBarrierStubC2*)+0x578
V  [libjvm.so+0x1aa2291]  ZBarrierSetAssembler::generate_c2_load_barrier_stub(MacroAssembler*, ZLoadBarrierStubC2*) const+0x51
V  [libjvm.so+0x1ab2332]  ZBarrierSetC2::emit_stubs(CodeBuffer&) const+0x112
V  [libjvm.so+0x164d38c]  PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*)+0x2d6c
V  [libjvm.so+0xa9672b]  Compile::Code_Gen()+0x42b
V  [libjvm.so+0xa9bfcb]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x164b
V  [libjvm.so+0x8b29f9]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x669
V  [libjvm.so+0xaabdd8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc88
V  [libjvm.so+0xaacbb8]  CompileBroker::compiler_thread_loop()+0x668
V  [libjvm.so+0x193867a]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x19409c0]  Thread::call_run()+0x100
V  [libjvm.so+0x1623cb4]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,JDK-8283830,JDK-8284257,JDK-8283942,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262355,,,,,,"2022-02-09 07:28;epeter;hs_err_pid21597.log;https://bugs.openjdk.org/secure/attachment/97942/hs_err_pid21597.log","2022-02-09 07:28;epeter;replay_pid21597.log;https://bugs.openjdk.org/secure/attachment/97943/replay_pid21597.log",,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vzjn:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-09 19:22;dlong;ILW = vector test assert with debug build = MMH = P3;;;","2022-02-10 20:12;kvn;The difference from our regular CI testing is using -XX:+UseZGC flag. And call stack shows that it is GC barrier code.
;;;","2022-02-15 01:57;epeter;-XX:UseAVX=3 enables AVX512 in general.
The machine that the test was run on does support AVX3 (AVX512), and even the BW subset of instructions.
However, -XX:+UseKNLSetting makes is_knights_family() return true, which eventually disables CPU_AVX512BW.;;;","2022-02-16 00:12;epeter;Running the tests with flags
-XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseZGC
and simulating Knights Landing with ""sde -knl"" (Intel® Software Development Emulator) also reproduces the bug.

Suggested solution: replace ""Assembler::kmovql"" with ""MacroAssembler::kmov"", which internally choses either ""kmovql"" (if avx512bw enabled), else ""kmovwl"". This is analogous to the use in ""RegisterSaver::save_live_registers"", which seems to perform a similar task to our function ""ZSaveLiveRegisters::ZSaveLiveRegisters"" (see ""ZSaveLiveRegisters::initialize"").;;;","2022-02-16 23:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7510
Date: 2022-02-17 07:51:42 +0000;;;","2022-02-20 23:08;dukebot;Changeset: 4e0b81c5
Author:    Emanuel Peter <emanuel.peter@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-02-21 07:05:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4e0b81c596f2a2eae49127b9ee98c80500b4e319
;;;","2022-03-29 06:10;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Test has passed.;;;","2022-03-29 06:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/299
Date: 2022-03-29 13:12:37 +0000;;;","2022-03-29 08:23;thartmann;Fix Request (JDK 18u)
Fixes an assert in C2. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 08:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/66
Date: 2022-03-29 15:22:58 +0000;;;",,,,,,,,,,,,,,,,,,,,
IGV: schedule approximation computes immediate dominators wrongly,JDK-8281539,5068185,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rcastanedalo,rcastanedalo,rcastanedalo,2022-02-09 05:59,2022-08-16 23:49,2023-10-01 09:57,2022-02-14 00:40,19,,,,,,,,,19,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,"The ServerCompiler module in IGV computes an approximation of C2's schedule for unscheduled graphs, for clustering and showing control flow information in the ""Control Flow"" window. This approximation uses domination information to guide the scheduling of nodes into basic blocks.

In the attached example (graph ""Barrier expand""), IGV computes the following dominator tree:

idom(Block 1) = null
idom(Block 2) = Block 1
idom(Block 3) = Block 2
idom(Block 4) = Block 2
idom(Block 5) = Block 2
idom(Block 6) = Block 2
idom(Block 7) = Block 6
idom(Block 8) = Block 6
idom(Block 9) = Block 8
idom(Block 10) = Block 8
idom(Block 11) = Block 8
idom(Block 12) = Block 11
idom(Block 13) = Block 11
idom(Block 14) = Block 12
idom(Block 15) = Block 14
idom(Block 16) = Block 14
idom(Block 17) = Block 8
idom(Block 18) = Block 17
idom(Block 19) = Block 17

Whereas the expected result is:

(..)
idom(Block 11) = Block 10
(..)
idom(Block 17) = Block 10
(..)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280568,,,,,,,,,,,,,,,,,,,,,,"2022-02-09 05:58;rcastanedalo;fail.xml;https://bugs.openjdk.org/secure/attachment/97938/fail.xml","2022-02-09 05:57;rcastanedalo;wrong-dominator-tree.png;https://bugs.openjdk.org/secure/attachment/97939/wrong-dominator-tree.png",,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vzij:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-02-09 19:23;dlong;ILW = incorrect IGV results = MMH = P3;;;","2022-02-10 01:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7405
Date: 2022-02-09 15:16:42 +0000;;;","2022-02-14 00:40;roboduke;Changeset: 46f52296
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2022-02-14 08:37:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/46f522962f1b2bbb2513823821e332db1093994b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] runtime/cds/appcds/TestDumpClassListSource.java fails with Exception: java.lang.RuntimeException: Class Hello should be printed in classlist,JDK-8281537,5068180,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2022-02-09 05:24,2022-07-05 06:00,2023-10-01 09:57,2022-02-09 05:32,repo-valhalla,,,,,,,,,,hotspot,,0,lworld,,,,,,,,,,,,,,,,,,"After latest merge, test runtime/cds/appcds/TestDumpClassListSource.java started failing with Exception: java.lang.RuntimeException: Class Hello should be printed in classlist.

The cause is a failed matching in the test output because of the injection of an interface by the VM. Fix is to have the text expect this interface to be present.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289747,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vzhf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-02-09 05:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/643
Date: 2022-02-09 13:27:49 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: A wrong parameter is passed to the constructor of LeakKlassWriter,JDK-8281520,5068155,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ddong,ddong,ddong,2022-02-08 22:38,2022-02-15 23:23,2023-10-01 09:57,2022-02-11 08:50,11,,,,,,,,,11.0.15,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,"The following code(jfrTypeSet.cpp:L388) passes a wrong parameter `_artifacts` to the constructor of LeakKlassWriter:
```
 387   } else {
 388     LeakKlassWriter lkw(_leakp_writer, _artifacts, _class_unload);
 389     CompositeKlassWriter ckw(&lkw, &kw);
 390     CompositeKlassWriterRegistration ckwr(&ckw, &reg);
 391     CompositeKlassCallback callback(&ckwr);
 392     _subsystem_callback = &callback;
 393     do_klasses();
 394   }
```

This problem is introduced by JDK-8225797 and fixed by JDK-8233111.
I filed a new issue to fix it since I think backporting JDK-8233111 is not necessary for the moment.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8225797,JDK-8233111,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vzbv:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-02-08 22:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/813
Date: 2022-02-09 06:53:33 +0000;;;","2022-02-10 01:01;ddong;Fix Request (11u).

Fixes a wrong parameter problem introduced by JDK-8225797.

This problem is already fixed by JDK-8233111, but the original patch is too large and not very relevant to it. Hence, I filed a new issue.;;;","2022-02-11 08:50;roboduke;Changeset: 29eb422c
Author:    Denghui Dong <ddong@openjdk.org>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2022-02-11 16:48:03 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/29eb422cb843e76c31bd9b3253359ceccb48082b
;;;","2022-02-15 23:16;roboduke;Changeset: 29eb422c
Author:    Denghui Dong <ddong@openjdk.org>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2022-02-11 16:48:03 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/29eb422cb843e76c31bd9b3253359ceccb48082b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Improve the error message shown when a user tries to install the aarch64 bundle on an intel mac,JDK-8281517,5068152,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,almatvee,agarciar,agarciar,2022-02-08 21:15,2023-06-30 18:00,2023-10-01 09:57,2022-03-28 17:29,11,17,18,8,,,,,,19,install,,0,aarch64,CPU22_07-critical-approved,CPU22_07-critical-SQE-OK,cssn23_02_02,jdk11u-na,jdk17u-na,macos,macos-aarch64-11u,sn_113,sn_114,sn_115,,,,,,,,"If one incorrectly downloads the JDK aarch64 bundle on an intel mac and tries to install it the error message reads -in the case of 17.0.2- ""JDK 17.0.2"" can't be installed on this computer.

It should say instead something like: 
""This installation of JDK 17.0.2 is for arm64 systems. On this computer please download the x64 installer""

NOTE: This issue was fixed in both direction. Meaning installing aarch64 on Intel Mac will give following error message: ""This installation of JDK 17.0.2 is for arm 64 systems. On this computer please download the x64 installer"". Installing x64 on Apple Silicon Mac will give following error message: ""This installation of JDK 17.0.2 is for x64 systems. On this computer please download the arm 64 installer"".",,,,,,,,,,,JDK-8285949,JDK-8287572,JDK-8283906,JDK-8302954,JDK-8302707,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299711,JDK-8304132,,,,,,,,,,,"2022-03-24 21:48;almatvee;Screen Shot 2022-03-24 at 8.00.19 PM.png;https://bugs.openjdk.org/secure/attachment/98374/Screen+Shot+2022-03-24+at+8.00.19+PM.png",,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2vzb7:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6d4c575e,,,,,,,Verified,,"2022-04-08 04:22;goetz;[11u, 17u] 
Not applicable to OpenJDK 11u and 17u. 
No patch visible. Probably a change to the installer that is not open sourced.;;;","2022-06-01 05:28;rcrihfie;verified in build 22, 24;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Two javac tests have bad jtreg `@clean` tags,JDK-8281507,5068141,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,jjg,jjg,2022-02-08 14:59,2023-09-04 02:44,2023-10-01 09:57,2022-02-27 23:36,18,,,,,,,,,19,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,,,,"The following shows invalid use of the `@clean` directive.

grep -r 'clean.*[A-Za-z][*]' open/test/langtools/tools/javac
open/test/langtools/tools/javac/8074306/TestSyntheticNullChecks.java: * @clean TestSyntheticNullChecks*
open/test/langtools/tools/javac/StringConcat/TestIndyStringConcat.java: * @clean TestIndyStringConcat*
open/test/langtools/tools/javac/StringConcat/TestIndyStringConcat.java: * @clean TestIndyStringConcat*
open/test/langtools/tools/javac/StringConcat/TestIndyStringConcat.java: * @clean TestIndyStringConcat*
open/test/langtools/tools/javac/StringConcat/TestIndyStringConcat.java: * @clean TestIndyStringConcat*
open/test/langtools/tools/javac/StringConcat/TestIndyStringConcat.java: * @clean TestIndyStringConcat*

The name should either be a full class name or `package.*`. The use of `*` for globbing has never been supported.

These tests fail under jtreg 7 (now in the early stages of development) because the class name now gives rise to `InvalidPathException` on Windows, because jtreg now uses `java.nio.file.Path` internally instead of `java.io.File`.",,,,,,,,,,,JDK-8315634,JDK-8310282,JDK-8315496,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289798,,,,,,,,,,CODETOOLS-7903091,,,,,,JDK-8151516,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vz8r:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-02-08 15:00;jjg;[~shade] These look like your tests.;;;","2022-02-08 22:43;shade;The first test is not mine, but I can fix it as well.;;;","2022-02-08 22:45;shade;There is now a PR, would you might applying it to your workspace and see if jtreg 7 is happy with it?;;;","2022-02-08 22:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7398
Date: 2022-02-09 06:44:59 +0000;;;","2022-02-09 15:21;jjg;[~shade] 
1. Sorry if I misattributed the test to you; I was going by the output of `git blame`.
2. Thanks for the quick PR;  I recommend using `@clean *`.  Once I realized that was a possibility, I was going to fix it myself, but you beat me to the PR.
3. Either using the PR as written or with `@clean *` should be OK for `jtreg 7`. It was the literal filename of `TestSyntheticNullChecks*.class` that caused problems on Windows.;;;","2022-02-22 23:39;shade;So, would you mind acking that PR then? It had been open for a while now :);;;","2022-02-27 23:36;dukebot;Changeset: 86723d48
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-02-28 07:35:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/86723d4892485651bcae735ed13545ea89b9bb22
;;;","2023-06-16 23:38;goetz;Fix request [17u]

I backport this to enable jtreg 7 in jdk17
No risk, only a test change.
Clean backport.
SAP nightly testing passed.;;;","2023-06-16 23:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1462
Date: 2023-06-17 06:37:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,
JVM options processing silently truncates large illegal options values,JDK-8281472,5068103,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,hseigel,hseigel,2022-02-08 11:43,2022-03-07 14:56,2023-10-01 09:57,2022-03-01 05:25,11,17,19,,,,,,,19,hotspot,,0,cmd,,,,,,,,,,,,,,,,,,"The JVM truncates option values that are greater than the size of the specified option, instead of reporting the values as illegal.

For example, for int option -XX:DeoptimizeObjectsALotThreadCountAll=10123345670 (0x25B65FF06), the JVM assigns the value 1533411078 (0x5B65FF06) to DeoptimizeObjectsALotThreadCountAll.

Similarly, for 64 bit options:

> java -XX:+PrintFlagsFinal -Xint -XX:MaxJNILocalCapacity=12345123451234512345 2>&1 | grep MaxJNILocalCapacity
>     intx MaxJNILocalCapacity                      = -6101620622475039271
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282593,JDK-8282513,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vz0b:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-08 11:45;hseigel;Thanks to [~iklam] for finding that this fails on JDK-11 etc.;;;","2022-02-08 18:10;dholmes;So what is the solution? Convert each numeric value into a double and then check if it is within range for the target type?

These are XX flags so I'm not overly concerned about protecting against all user-errors. Also note that for MaxJNILocalCapacity the overflow actually results in a reasonable interpretation as any negative value implies unlimited, and max_intx is effectively unlimited. ;;;","2022-02-09 07:07;hseigel;Fixing this for int and uint options can be done with a small change such as this:

+++ b/src/hotspot/share/runtime/arguments.cpp
@@ -860,8 +860,14 @@ static bool set_numeric_flag(JVMFlag* flag, char* value, JVMFlagOrigin origin) {
  if (flag->is_int()) {
+    if (v > max_juint || (is_neg && -(intx)v < min_jint)) return false;
    int_v = (int) v;
     if (is_neg) {
       int_v = -int_v;
     }
     return JVMFlagAccess::set_int(flag, &int_v, origin) == JVMFlag::SUCCESS;
   } else if (flag->is_uint()) {
+    if (v > max_juint) return false;
     uint uint_v = (uint) v;
     return JVMFlagAccess::set_uint(flag, &uint_v, origin) == JVMFlag::SUCCESS;
   } else if (flag->is_intx()) {
;;;","2022-02-09 18:57;dholmes;Ah I see we already parse as a 64-bit type when reading a 32-bit value.

But for 64-bit types we'd have to parse as a double.;;;","2022-02-09 23:15;iklam;For 64-bits, we already have checks -- Arguments::atojulong() uses strtoull, which checks overflow.

Max signed 64-bit = 0x7ffffffffffff = 9223372036854775807 

$ java -XX:+PrintFlagsFinal -XX:MaxJNILocalCapacity=92233720368547758071
Improperly specified VM option 'MaxJNILocalCapacity=92233720368547758071'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.

However, there's a bug with signed 64-bit integers with overflow/underflow:

$ java -XX:+PrintFlagsFinal -XX:MaxJNILocalCapacity=9223372036854775807 2>&1 | grep MaxJNILocalCapacity
     intx MaxJNILocalCapacity                      = 9223372036854775807                       {product} {command line}
$ java -XX:+PrintFlagsFinal -XX:MaxJNILocalCapacity=9223372036854775808 2>&1 | grep MaxJNILocalCapacity
     intx MaxJNILocalCapacity                      = -9223372036854775808                      {product} {command line}

$ java -XX:+PrintFlagsFinal -XX:MaxJNILocalCapacity=-9223372036854775808 2>&1 | grep MaxJNILocalCapacity
     intx MaxJNILocalCapacity                      = -9223372036854775808                      {product} {command line}
$ java -XX:+PrintFlagsFinal -XX:MaxJNILocalCapacity=-9223372036854775809 2>&1 | grep MaxJNILocalCapacity
     intx MaxJNILocalCapacity                      = 9223372036854775807                       {product} {command line}
;;;","2022-02-17 11:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7522
Date: 2022-02-17 19:09:26 +0000;;;","2022-03-01 05:25;dukebot;Changeset: a95edee6
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2022-03-01 13:21:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a95edee634c6be52043b55d1a8f3df85a58f97c7
;;;",,,,,,,,,,,,,,,,,,,,,,,
[lworld] check_code.c should not accept Q-signatures as valid,JDK-8281471,5068102,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hseigel,fparain,fparain,2022-02-08 11:42,2022-02-11 05:28,2023-10-01 09:57,2022-02-11 05:26,repo-valhalla,,,,,,,,,repo-valhalla,hotspot,,0,lworld,,,,,,,,,,,,,,,,,,"In the following commit:
https://github.com/openjdk/valhalla/commit/76509b6ff168f1c7025ad8887edc5e4527fcd718
the verification code in file check_code.c has been updated to accept Q-signatures.

But check_code.c is in charge of the verification of class files with version number below 50 (without stack maps), and in those old class files, Q-signatures are not allowed.
The changes should be reverted and check_code.c should be checked to ensure such signatures cause a verification error.

Thanks to Harold Seigel for spotting this issue.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vz03:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-10 10:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/645
Date: 2022-02-10 18:10:56 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"tools/jar/CreateMissingParentDirectories.java fails with ""Should have failed creating jar file""",JDK-8281470,5068101,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cstein,dcubed,dcubed,2022-02-08 11:35,2022-02-16 16:19,2023-10-01 09:57,2022-02-09 03:35,19,,,,,,,,,19,tools,,0,problemlist,tier2,,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

tools/jar/CreateMissingParentDirectories.java

Here's a snippet from the log file:

#section:main
----------messages:(5/186)----------
command: main CreateMissingParentDirectories
reason: Assumed action based on file name: run main CreateMissingParentDirectories 
Mode: agentvm
Agent id: 30
elapsed time (seconds): 0.048
----------configuration:(14/1614)----------
Boot Layer
  class path: /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar 
  patch:      java.base /opt/mach5/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S136895/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7387f48e-c04c-4d99-99ba-0a9d42d3ba7d/runs/1ee9898d-02ef-4cc3-bda1-f9bb48a66142/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/patches/java.base

Test Layer
  class path: /opt/mach5/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S136895/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7387f48e-c04c-4d99-99ba-0a9d42d3ba7d/runs/1ee9898d-02ef-4cc3-bda1-f9bb48a66142/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/classes/0/tools/jar/CreateMissingParentDirectories.d
              /opt/mach5/mesos/work_dir/jib-master/install/jdk-19+9-498/src.full/open/test/jdk/tools/jar

----------rerun:(30/4644)*----------

<snip>

----------System.err:(32/2206)----------
java.lang.Exception: Stack trace
	at java.base/java.lang.Thread.dumpStack(Thread.java:1375)
	at CreateMissingParentDirectories.fail(CreateMissingParentDirectories.java:103)
	at CreateMissingParentDirectories.fail(CreateMissingParentDirectories.java:104)
	at CreateMissingParentDirectories.doFailingTest(CreateMissingParentDirectories.java:92)
	at CreateMissingParentDirectories.realMain(CreateMissingParentDirectories.java:69)
	at CreateMissingParentDirectories.main(CreateMissingParentDirectories.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)
java.lang.Exception: Stack trace
	at java.base/java.lang.Thread.dumpStack(Thread.java:1375)
	at CreateMissingParentDirectories.fail(CreateMissingParentDirectories.java:103)
	at CreateMissingParentDirectories.check(CreateMissingParentDirectories.java:106)
	at CreateMissingParentDirectories.doFailingTest(CreateMissingParentDirectories.java:96)
	at CreateMissingParentDirectories.realMain(CreateMissingParentDirectories.java:71)
	at CreateMissingParentDirectories.main(CreateMissingParentDirectories.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)
java.lang.AssertionError: Some tests failed
	at CreateMissingParentDirectories.main(CreateMissingParentDirectories.java:113)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.AssertionError
JavaTest Message: shutting down test

----------System.out:(3/380)----------
Should have failed creating jar file: /opt/mach5/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S136895/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7387f48e-c04c-4d99-99ba-0a9d42d3ba7d/runs/1ee9898d-02ef-4cc3-bda1-f9bb48a66142/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/tmp/delete5984906417313829787/a/*/test.jar

Passed = 4 failed = 2
result: Failed. Execution failed: `main' threw exception: java.lang.AssertionError: Some tests failed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2vyzv:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@189ffaae,,,,,,,,,"2022-02-08 11:39;dcubed;So far we have sightings on:

  - windows-x64 release bits
  - linux-x64 release bits
  - linux-aarch64 release bits
  - macosx-aarch64 release bits
  - macosx-x64 release bits
  - linux-x64 fastdebug bits;;;","2022-02-08 11:55;dcubed;[~lancea] Sorry for assigning the bug to you. I looked at the committer
in the email changeset notification instead of the author.;;;","2022-02-08 13:06;dcubed;[~cstein] - When you fix this bug, you'll have to UnProblemList the test as part of that
changeset. Please make sure that you run Mach5 Tier2 on your fix.;;;","2022-02-09 03:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7397
Date: 2022-02-09 06:42:51 +0000;;;","2022-02-09 03:35;roboduke;Changeset: 8b384b98
Author:    Christian Stein <cstein@openjdk.org>
Committer: Lance Andersen <lancea@openjdk.org>
Date:      2022-02-09 11:34:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8b384b986a0a6a972c29a2f7a4d9fd40dc479b48
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"On macOS, avoid using /usr/bin/tidy",CODETOOLS-7903152,5072240,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-04-08 17:12,2022-04-11 18:42,2023-10-01 09:57,2022-04-11 18:42,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,"On macOS, /usr/bin/tidy -version reports
HTML Tidy for Mac OS X released on 31 October 2006 - Apple Inc. build 2649

which is very (very) old.  It is generally better to use a newer version, such as installed by HomeBrew in either /opt/homebrew/bin/tidy or /usr/local/bin/tidy.

$ which tidy
/usr/local/bin/tidy
$ tidy --version
HTML Tidy for Apple macOS version 5.6.0
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2woaj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-04-08 17:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/71
Date: 2022-04-09 00:16:21 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when resolving @library from jtreg plugin,CODETOOLS-7903151,5072193,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-04-08 07:22,2022-04-28 13:45,2023-10-01 09:57,2022-04-28 13:45,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,"When attempting to resolve a @library tag using an ""absolute"" path, the plugin looks for a library using the location of TEST.ROOT as a root; if no library is found there, the plugin also look for an alternative root, as a ""external.lib.roots"" in the TEST.ROOT file.

If no library is found, and the TEST.ROOT has no ""external.lib.roots"" property, the plugin fails with a NPE.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wo03:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-04-08 07:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/70
Date: 2022-04-08 14:25:21 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restructure generated files for jtreg self-tests,CODETOOLS-7903150,5072158,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-04-07 13:15,2022-04-07 16:18,2023-10-01 09:57,2022-04-07 16:18,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,"TL;DR: This is just about the output generated by the ""self-tests"" in the jtreg repo.  It is NOT about restructuring the work or report directories generated in jtreg test runs, including when running JDK tests.

Currently, lots of output is written directly into the $(BUILDDIR) directly, making it hard to do selective cleanup. It would be better to write all test output into a new subdirectory.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wnsb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-04-07 14:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/69
Date: 2022-04-07 21:39:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract crashes when C11 keyword _Static_Assert is used in a header,CODETOOLS-7903148,5071922,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-04-06 22:10,2022-05-13 07:05,2023-10-01 09:57,2022-04-07 07:43,,,,,,,,,,,tools,,0,jextract,,,,,,,,,,,,,,,,,,"jextract fails when C11 keyword _Static_Assert is used in a header.


File: test.h
_Static_assert(1 == 1, ""what??"");

$ jextract test.h
_Static_assert(1 == 1, ""what??"");

When assert.h is included in a header and static_assert is used (which is a macro expands to _Static_assert when C language is used).

File: test2.h

#include <assert.h>
  
static_assert(1 == 1, ""what??"");

jextract test2.h also fails with

Invalid Cursor kind value: 602
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wmbv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-04-06 22:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/15
Date: 2022-04-07 05:47:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
unrooted relative paths in checkI18NProps.sh,CODETOOLS-7903147,5071908,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-04-06 14:04,2022-04-06 17:39,2023-10-01 09:57,2022-04-06 17:39,jtreg7.0,,,,,,,,,jtreg7.0,tools,,0,,,,,,,,,,,,,,,,,,,checkI18NProps.sh uses unqualified paths (i.e. relative to current directory) and does not use `$(BUILDDIR)`. It should.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wm8r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-04-06 14:12;jjg;The oversight is presumably that this is a script with no inherent direct access to $(BUILDDIR)

... and worse, the temp files that it creates are in the directory that contains the script!;;;","2022-04-06 16:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/68
Date: 2022-04-06 23:37:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
TypeTranslator is no longer needed,CODETOOLS-7903146,5071861,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-04-06 07:31,2022-05-13 07:06,2023-10-01 09:57,2022-04-06 09:51,,,,,,,,,,,tools,,0,foreign-jextract,,,,,,,,,,,,,,,,,,"Starting from Java 18, carrier types are attached to value layouts. As such we no longer need a separate jextract visitor to map a native type into a Java method type: once we have a function descriptor we can easily generate the required method type using CLinker::upcallType/downcallType.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wlyb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-04-06 08:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/14
Date: 2022-04-06 15:18:05 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cleanup TreeMaker,CODETOOLS-7903145,5071850,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-04-06 02:57,2022-05-13 07:06,2023-10-01 09:57,2022-04-06 07:11,,,,,,,,,,,tools,,0,foreign-jextract,,,,,,,,,,,,,,,,,,Jextract TreeMaker class contains a lot of indirections to paper over minor differences in the factories exposed in the Declaration interface.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wlvv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-04-06 03:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/13
Date: 2022-04-06 10:18:43 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jtreg includes `-javaoption` values in rerun section for @compile tasks in agentvm mode. ,CODETOOLS-7903143,5071703,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-04-04 18:21,2022-04-06 17:41,2023-10-01 09:57,2022-04-06 17:41,jtreg6.1,,,,,,,,,jtreg7.0,tools,,0,,,,,,,,,,,,,,,,,,,"
        Path javacProg = script.getJavacProg();
        List<String> javacVMOpts = script.getTestVMJavaOptions();
        recorder.javac(script.getEnvVars(), javacProg, javacVMOpts, javacProps, javacArgs);

`script.getTestVMJavaOptions();` should be `script.getTestVMOptions(); `",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wkzf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-04-06 14:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/67
Date: 2022-04-06 20:59:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jasm/jdis: implement support of The LocalVariableTable Attribute ,CODETOOLS-7903141,5071541,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,lkuskov,lkuskov,lkuskov,2022-04-01 11:50,2023-08-21 12:25,2023-10-01 09:57,2023-08-21 12:25,asm_tools_7.0,asm_tools_8.0,,,,,,,,asm_tools_8.0,tools,,0,,,,,,,,,,,,,,,,,,,"jdis should generate: 
if there is the option -g: 
var index #name_index:#descriptor_index 
var               0 #50:#51;      // this:""Lconditional001;""
otherwise if -lv option (Print the LocalVariableTable attribute) is used then:
var               0 this:""Lconditional001;""
jasm should be able to parse these statements.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903458,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,asm_tools_7.0,,,,,,,"0|i2wjzf:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@47358cbe,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
remove jpackage usage from makefiles,CODETOOLS-7903140,5071419,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-03-31 04:56,2022-05-13 07:06,2023-10-01 09:57,2022-03-31 05:21,,,,,,,,,,,tools,,0,jextract,,,,,,,,,,,,,,,,,,remove jpackage usage from makefiles. Use jlink with launcher option instead.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wj8b:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-03-31 05:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/12
Date: 2022-03-31 11:58:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
os.simpleArch is x64 for linux-riscv64 in @require context,CODETOOLS-7903138,5071141,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,fjiang,fjiang,fjiang,2022-03-29 01:13,2023-01-24 08:23,2023-10-01 09:57,2023-01-24 08:23,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,RISC-V Port has been integrated into JDK mainline recently (JDK-8276799). Set simpleArch to riscv64 when os.arch is riscv64,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,"0|i2whij:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-03-29 03:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/66
Date: 2022-03-29 10:24:04 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
missing LICENSE file,CODETOOLS-7903131,5070909,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-03-24 11:12,2022-03-24 11:50,2023-10-01 09:57,2022-03-24 11:49,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,Need to add a LICENSE file for doc check.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wg2z:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2631e12c,,,,,,,,,"2022-03-24 11:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/doccheck/pull/2
Date: 2022-03-24 18:15:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update LICENSE,CODETOOLS-7903130,5070902,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-03-24 10:04,2022-03-24 10:38,2023-10-01 09:57,2022-03-24 10:38,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,the LICENSE file in the jtreg repo needs to be updated.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wg1f:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-03-24 10:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/65
Date: 2022-03-24 17:13:49 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract does not handle @argfile,CODETOOLS-7903129,5070901,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-03-24 09:57,2022-05-13 07:03,2023-10-01 09:57,2022-03-25 03:47,,,,,,,,,,,tools,,0,jextract,,,,,,,,,,,,,,,,,,jextract does not handle @argfile. panama-foreign jdk's jextract uses JDK makefile support to support @argfile. Standalone jextract has to implement @argfile support in java. We've code to handle @argfile in CommandLine.java adopted from javac. But call to CommandLine.parse call is missing from JextractTool.java.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2wg17:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-03-24 10:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/4
Date: 2022-03-24 16:59:40 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMH: SecurityManager tests fail on modern JDK,CODETOOLS-7903127,5070822,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2022-03-23 09:03,2022-03-23 11:46,2023-10-01 09:57,2022-03-23 11:46,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,"$ mvn clean test

Tests in error: 
  BenchmarkMinRunnerSecurityManagerTest.invokeAPI:65 » UnsupportedOperation The ...
  ThreadMinRunnerSecurityManagerTest.invokeAPI:65 » UnsupportedOperation The Sec...
  GroupMinRunnerSecurityManagerTest.invokeAPI:69 » UnsupportedOperation The Secu...
  BenchmarkSecurityManagerTest.invokeAPI:83 » Runner Benchmark caught the except...
  ThreadSecurityManagerTest.invokeAPI:83 » Runner Benchmark caught the exception
  BenchmarkMinSecurityManagerTest.invokeAPI:83 » Runner Benchmark caught the exc...
  GroupMinSecurityManagerTest.invokeAPI:87 » Runner Benchmark caught the excepti...
  ThreadMinSecurityManagerTest.invokeAPI:83 » Runner Benchmark caught the except...
  GroupSecurityManagerTest.invokeAPI:87 » Runner Benchmark caught the exception
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wfjn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2022-03-23 09:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmh/pull/67
Date: 2022-03-23 16:14:46 +0000;;;","2022-03-23 11:46;shade;https://github.com/openjdk/jmh/commit/2a318a4738021dc1851ba8d03c6f78939a804413;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMH: async profiler uses wrong option for profiler output,CODETOOLS-7903125,5070799,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2022-03-23 04:28,2022-03-25 11:51,2023-10-01 09:57,2022-03-25 11:51,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,Submitted for PR: https://github.com/openjdk/jmh/pull/65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wfej:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2022-03-23 04:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmh/pull/65
Date: 2022-03-07 08:39:23 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add additional helper methods to TestEnvironment,CODETOOLS-7903124,5070756,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,dbessono,dbessono,dbessono,2022-03-22 13:10,2022-03-23 13:42,2023-10-01 09:57,2022-03-23 13:41,jt6.0,,,,,,,,,jt6.0,tools,,0,,,,,,,,,,,,,,,,,,,Methods like TestEnvironment::lookup or ::resolve need to have additional utility methods that would simplity user's interactions with TestEnvironment instances,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7317463,,,,CODETOOLS-7903123,,,,,,JCK-7317463,JCK-7317458,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wf4z:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3565cd1f,,,,,,,,,"2022-03-22 14:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtharness/pull/25
Date: 2022-03-22 20:54:25 +0000;;;","2022-03-23 13:41;roboduke;Changeset: f76d4b40
Author:    Dmitry Bessonov <dbessono@openjdk.org>
Date:      2022-03-23 20:39:58 +0000
URL:       https://git.openjdk.java.net/jtharness/commit/f76d4b4043ecf4360f24f2cb925f62f981d7213d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Remove JT Agent's dependency on ""java.logging"" module",CODETOOLS-7903123,5070653,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,dbessono,dbessono,dbessono,2022-03-21 05:01,2022-03-22 13:10,2023-10-01 09:57,2022-03-21 06:25,jt6.0,,,,,,,,,jt6.0,tools,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903124,CODETOOLS-7903116,,,,,,JCK-7317456,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wei3:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3565cd1f,,,,,,,,,"2022-03-21 06:25;roboduke;Changeset: 0258efa4
Author:    Dmitry Bessonov <dmitry.bessonov@oracle.com>
Date:      2022-03-21 13:25:02 +0000
URL:       https://git.openjdk.java.net/jtharness/commit/0258efa49b4e42044d2ae7cc64de427c5e7aedca
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"initial jextract tool code, tests and samples",CODETOOLS-7903121,5070458,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-03-16 20:17,2022-05-13 07:04,2023-10-01 09:57,2022-03-23 12:34,,,,,,,,,,,tools,,0,jextract,,,,,,,,,,,,,,,,,,"Push initial jextract tool code, test and samples to jextract GitHub repo.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wdaz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-03-16 20:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/2
Date: 2022-03-17 02:16:06 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
os.simpleArch is x64 for linux-loongarch64/mips64/mips64el in @require context,CODETOOLS-7903120,5070193,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,aoqi,aoqi,aoqi,2022-03-14 04:11,2022-05-16 11:32,2023-10-01 09:57,2022-05-16 11:32,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,"Also set simpleArch to mips64, when os.arch is mips64el.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,other,,,,,,,,,linux,,,,,"0|i2wbo3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-03-14 04:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/64
Date: 2022-03-14 11:22:41 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CODETOOLS-7903093 breaks some `basic` tests,CODETOOLS-7903098,5068354,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-02-11 13:02,2022-02-16 09:38,2023-10-01 09:57,2022-02-12 08:43,,,,,,,,,,jtreg7.0,tools,,0,,,,,,,,,,,,,,,,,,,"A couple of tests fail in jtreg tip.

In CODETOOLS-7903093, two test cases are added into the `Basic` set of tests, but the number of expected items was not updated in a couple of places, causing some tests to fail.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903093,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2w0k3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-02-11 13:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/55
Date: 2022-02-11 21:15:21 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
