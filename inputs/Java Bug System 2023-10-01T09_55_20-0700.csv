Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Inward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Inward issue link (Blocks),Outward issue link (Blocks),Outward issue link (Blocks),Outward issue link (CSR),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Duplicate),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field ( Type of Bug [Challenge] ),Custom field (CPU),Custom field (CPU),Custom field (CPU),Custom field (Cost of Delay),Custom field (Epic Link),Custom field (Imported),Custom field (Indexed),Custom field (Introduced In Build),Custom field (Introduced In Version),Custom field (Number of Tests Affected [Challenge]),Custom field (OS),Custom field (OS),Custom field (Oracle Evaluation),Custom field (Original story points),Custom field (Parent Link),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Resolved In Build),Custom field (Story Points),Custom field (Subcomponent),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Time Spent),Custom field (Understanding),Custom field (Value),Custom field (Verification),Custom field (external_bug),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
"Skara sometimes puts two copies of ""BUGID: TITLE"" in commit message",SKARA-1981,5107035,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,kcr,kcr,2023-07-31 15:07,2023-08-09 09:47,2023-10-01 09:55,2023-08-09 09:47,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"To reproduce:

Create a PR that targets the wrong bug ID, for example, a Backport record instead of the main bug. Now do the following:


1. Add the correct issue as an additional issue solved by this PR using `/issue add`
2. Wait for Skara to add the issue
3. Change the title of the PR to use that bug ID

BUG: Skara will list the BUGID: TITLE line twice in the commit message

NOTE: Normally one would just change the title to refer to the new bug (i.e., skipping steps 1-2). There is no need to use the `/issue add` command, but Skara should still ensure that it removes the additional issue when that issue becomes the primary bug ID.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32k8b:",9223372036854775807,,,,,,,,,,,,"2023-07-31 15:09;kcr;Here is a PR that shows the problem:

https://github.com/openjdk/playground/pull/159

Note that if the issue title already refers to the issue in question, a subsequent `/issue add` with that issue ID will not result in two copies. In that ordering of operations, Skara correctly detects this case and avoids the duplicate. See https://github.com/openjdk/playground/pull/160 for this (non-failing) case.;;;","2023-08-08 14:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1538
Date: 2023-08-01 19:54:58 +0000;;;","2023-08-09 09:47;roboduke;Changeset: be28b1ca
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-08-09 16:46:21 +0000
URL:       https://git.openjdk.org/skara/commit/be28b1cab2024cacaaef7dd9a9c698b456ffd05a
;;;",,,,,,,,,,,,,,,,,,,,
MailingListNotifier will not send an email notification when the first branch of some repos is created,SKARA-1979,5106813,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-07-27 11:16,2023-08-09 13:04,2023-10-01 09:55,2023-08-09 13:03,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"A Leyden committer created a new branch (pregenerate-lambdas) and pushed to it, but skara bot didn't sent email notification to  leyden-dev@openjdk.org.

After investigating, I found the reason is that in the configuration of NotifyBot, we configured branches as '!master'. Due to this configuration, 'master' branch would be ignored in knownRefs. Therefore, in method RepositoryWorkItem#handleNewRef, The NotifyBot would not be able to find a candidate and it will return immediately.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1237,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32iz7:",9223372036854775807,,,,,,,,,,,,"2023-08-09 10:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1539
Date: 2023-08-01 21:10:11 +0000;;;","2023-08-09 13:03;roboduke;Changeset: ae584a67
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-08-09 20:03:34 +0000
URL:       https://git.openjdk.org/skara/commit/ae584a67b854aa4ff35edff352d826ef73e821fc
;;;",,,,,,,,,,,,,,,,,,,,,
Add GitHub user SoniaZaldana,SKARA-1978,5106739,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,szaldana,szaldana,2023-07-26 12:13,2023-07-26 12:42,2023-10-01 09:55,2023-07-26 12:42,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,"Creating this issue per bot comment as I am an OpenJDK commiter. 
Census for reference: 
https://openjdk.org/census#szaldana
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32iir:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Verify my account at Skara,SKARA-1972,5105671,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,robilad,jjose,jjose,2023-07-18 02:50,2023-07-18 13:55,2023-10-01 09:55,2023-07-18 13:55,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,"I raised MR https://github.com/openjdk/jdk21u/pull/11 on this bot replied you have signed the Oracle Contributor Agreement (OCA).
I am oracle employee and also i am part of the Oracle organization on Github.
User name: johnyjose30
Email : johny.jose@oracle.com
Please verify my account at SKARA ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32bxf:",9223372036854775807,,,,,,,,,,,,"2023-07-18 13:55;robilad;Done.;;;",,,,,,,,,,,,,,,,,,,,,,
dqu@openjdk.org doesn't forward emails,SKARA-1961,5103861,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,tbell,dqu,dqu,2023-06-22 02:34,2023-06-22 10:17,2023-10-01 09:55,2023-06-22 09:20,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,"According to document of Skara (https://wiki.openjdk.org/display/SKARA#Skara-OpenJDKEmail). After finishing the previous steps, emails sent to my openjdk email (dqu@openjdk.org) will be forwarded to my registered email of openjdk account but they are not forwarded. Instead, when I send to this email address, I receive such error:

(reason: 550 5.1.1 <dqu@openjdk.org>: Recipient address rejected: User unknown in local recipient table)

I need this forwarding because I need to add my openjdk.org email to my github account. Did I miss some steps? Thanks in advance.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i320r7:",9223372036854775807,,,,,,,,,,,,"2023-06-22 05:26;erikj;Tim, can you check the email configuration?;;;","2023-06-22 09:20;tbell;Skara/OpenJDK alias file updated with new user:

# wc -l ./skara
753 ./skara

# grep dqu ./skara
dqu:            xxxxxxxxxx@yyyyyyyyyy.com
;;;","2023-06-22 10:17;dqu;Thanks for your help, Tim! However, I have tried to use my gmail to send an email to my openjdk.org account, but I still cannot receive the forwarded email. The good news is that gmail won’t receive the above error message from MAILER-DAEMON@oracle.com.

Would it be something wrong with my registered email address? (FYI, I registered openjdk account with a 163.com email address. And I heard that 163.com is prohibited from oracle.com email box but I don’t know if it is true and whether it affects the email forwarding.);;;",,,,,,,,,,,,,,,,,,,,
Add GitHub user DarraghClarke,SKARA-1953,5103539,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,dclarke,dclarke,2023-06-19 07:57,2023-06-20 01:29,2023-10-01 09:55,2023-06-20 01:29,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31yrn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Don't run the second jcheck if there is no .jcheck/conf in source branch,SKARA-1950,5103343,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-06-15 13:40,2023-06-16 09:30,2023-10-01 09:55,2023-06-16 09:30,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"SKARA-1937 triggered CheckWorkItem for many “ancient” prs and if the pr’s source branch doesn’t contain .jcheck/conf , it would trigger the second run of jcheck and then throw some exceptions.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31xk3:",9223372036854775807,,,,,,,,,,,,"2023-06-15 15:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1533
Date: 2023-06-15 20:49:14 +0000;;;","2023-06-16 09:30;roboduke;Changeset: 8a63cc27
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-06-16 16:30:05 +0000
URL:       https://git.openjdk.org/skara/commit/8a63cc27a1041498941310ea7757fc5bd60d06d3
;;;",,,,,,,,,,,,,,,,,,,,,
User not getting push access to backport branch,SKARA-1948,5103198,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2023-06-14 10:21,2023-06-14 14:24,2023-10-01 09:55,2023-06-14 14:24,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,"When a user creates a backport PR using the /backport command, they are supposed to get push access to the branch in the fork repository. On GitHub, this doesn't seem to be working. All the backport branches in https://github.com/openjdk-bots/jdk21 have branch protection rules restricting who can push, but none contain any users in the allow list (except one which I manually modified for now).

This is handled by the method GitHubRepository::restrictPushAccess. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31wo3:",9223372036854775807,,,,,,,,,,,,"2023-06-14 13:06;erikj;After having experimented a bit with this method and API endpoint, my conclusion is the following. For a user to be eligible for listing in a branch protection rule, that user must first have push access in the repository. Just having a pending invite is not enough. 

Given this, I don't see how we can continue to limit push access on branch level in the fork repos. Given the increased usage of /backport command in jdk21, I think we just have to disable this feature.

Maybe we could still let it happen if we can check if the user has accepted the invite. The first time a user creates a /backport, the protection won't be there, but for future /backports, the protection could still be added.;;;","2023-06-14 13:25;zsong;Yes, after investigation, I just got the same conclusion with Erik. A user should be in the list of collaborators first and then the bot would be able to grant push access to specific branch to the user. Currently, if the bot found the user is not a collaborator in this repo, what the bot could do is only to send invitation to the user. And before the user accepts the invitation, the bot is unable to grant push access to the user.;;;","2023-06-14 13:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1532
Date: 2023-06-14 20:46:04 +0000;;;","2023-06-14 13:47;erikj;An alternative solution would be to send out the invitation and then halt the processing of the /backport command until the user has accepted. I don't think it's worth the hassle though, as the user experience will likely be pretty bad.;;;","2023-06-14 14:24;roboduke;Changeset: 9af46280
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-06-14 21:24:00 +0000
URL:       https://git.openjdk.org/skara/commit/9af462809a696150305935218f2501941262a7c5
;;;",,,,,,,,,,,,,,,,,,
Add GitHub user gergo-,SKARA-1945,5103029,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,gbarany,gbarany,2023-06-13 01:51,2023-06-13 06:03,2023-10-01 09:55,2023-06-13 06:03,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,"https://github.com/openjdk/jdk/pull/14441#issuecomment-1588799844

{quote}
Hi @gergo-, welcome to this OpenJDK project and thanks for contributing!

We do not recognize you as Contributor and need to ensure you have signed the Oracle Contributor Agreement (OCA). If you have not signed the OCA, please follow the instructions. Please fill in your GitHub username in the ""Username"" field of the application. Once you have signed the OCA, please let us know by writing /signed in a comment in this pull request.

If you already are an OpenJDK Author, Committer or Reviewer, please click here to open a new issue so that we can record that fact. Please use ""Add GitHub user gergo-"" as summary for the issue.

If you are contributing this work on behalf of your employer and your employer has signed the OCA, please let us know by writing /covered in a comment in this pull request.
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31vmj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update .github/workflows/ci.yml to fix GHA,SKARA-1943,5102997,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-06-12 13:40,2023-06-14 11:41,2023-10-01 09:55,2023-06-14 11:41,,,,,,,1.0,admin,,0,,,,,,,,,,,,,,,,,,"Since last month, the GitHub Action for running tests on macOS has been failing consistently, and the test job always failed due to time out. It seems like that GitHub no longer supports tests on macOS-10.15, so we need to update the configuration.

https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31vff:",9223372036854775807,,,,,,,,,,,,"2023-06-12 13:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1530
Date: 2023-06-12 20:43:21 +0000;;;","2023-06-14 11:41;roboduke;Changeset: b6a82541
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-06-14 18:40:03 +0000
URL:       https://git.openjdk.org/skara/commit/b6a82541e16d06e1efbbf3a51b9b695620e2e11d
;;;",,,,,,,,,,,,,,,,,,,,,
IssueCommand would change pr title in GitLab,SKARA-1936,5102713,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-06-07 15:34,2023-06-08 13:54,2023-10-01 09:55,2023-06-08 13:54,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"In GitLab, when a user wants to create a PR in draft mode, they need to include the prefix ""Draft: "" before the title. However, if the user wants to use the ""/issue"" command to add another issue to this PR, the pr bot will not be able to parse the issue within the PR title. Therefore, the bot will modify the PR title to match the new issue the user wants to add, resulting in the removal of the draft state of the PR.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31toz:",9223372036854775807,,,,,,,,,,,,"2023-06-07 16:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1528
Date: 2023-06-07 22:55:47 +0000;;;","2023-06-08 13:54;roboduke;Changeset: 6f98d0ef
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-06-08 20:53:04 +0000
URL:       https://git.openjdk.org/skara/commit/6f98d0efc50b1f7501e8074d72a07f99ccdb566b
;;;",,,,,,,,,,,,,,,,,,,,,
"Show issue priority as Pn rather than ""n""",SKARA-1935,5102677,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,kcr,kcr,2023-06-07 06:37,2023-06-07 10:06,2023-10-01 09:55,2023-06-07 09:51,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"After SKARA-1912 the issue type and priority for a P3 bug are displayed as:

* JDK-nnnnnnn: Issue Title (Bug - ""3"")

The JBS bug priorities are listed everywhere as P1-Pn so it would be clearer to add the 'P' prefix. Also, it will look better without the quotes, so I propose:

* JDK-nnnnnnn: Issue Title (Bug - P3)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1912,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31tgz:",9223372036854775807,,,,,,,,,,,,"2023-06-07 09:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1527
Date: 2023-06-07 16:26:51 +0000;;;","2023-06-07 09:51;roboduke;Changeset: 159aec26
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-06-07 16:50:58 +0000
URL:       https://git.openjdk.org/skara/commit/159aec26472c02f5cbaaa2cf203b7cd127084274
;;;",,,,,,,,,,,,,,,,,,,,,
Update ext.py to make test compatible with Mercurial6.4,SKARA-1934,5102633,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-06-06 14:29,2023-06-07 09:50,2023-10-01 09:55,2023-06-07 09:50,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"Recently, I updated my mercurial to version 6.4 and RepositoryTests#testRemoteBranches started to fail. 

After investigation, I found that ui.expandpath is deprecated and removed. To make our tests compatible with latest mercurial, we need to update method ls_remote in ext.py",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31t77:",9223372036854775807,,,,,,,,,,,,"2023-06-06 15:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1526
Date: 2023-06-06 21:58:48 +0000;;;","2023-06-07 09:50;roboduke;Changeset: e378bd6e
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-06-07 16:49:48 +0000
URL:       https://git.openjdk.org/skara/commit/e378bd6e6c6b1bb51e8c47d2750071032975995c
;;;",,,,,,,,,,,,,,,,,,,,,
Override abstract method canCreatePullRequest in BitbucketRepository,SKARA-1932,5102539,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-06-05 09:45,2023-06-05 10:30,2023-10-01 09:55,2023-06-05 10:30,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"After integrated SKARA-1903, the build of SKARA failed. The reason is that BitbucketRepository implements interface HostedRepository and in SKARA-1903, a new method canCreatePullRequest was introduced in HostedRepository, so we need to override this method in BitbucketRepository.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31smb:",9223372036854775807,,,,,,,,,,,,"2023-06-05 10:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1525
Date: 2023-06-05 16:47:20 +0000;;;","2023-06-05 10:30;roboduke;Changeset: 29dc11ea
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-06-05 17:30:04 +0000
URL:       https://git.openjdk.org/skara/commit/29dc11ea177af4c0f515a279d5171f05271e663d
;;;",,,,,,,,,,,,,,,,,,,,,
"build{.sh,.bat} fail to detect started p2 jetty process",JMC-8116,5107138,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,reinhapa,reinhapa,reinhapa,2023-08-01 01:32,2023-08-06 18:21,2023-10-01 09:55,2023-08-01 04:05,,,,,,,9.0.0,Release Engineering,,0,,,,,,,,,,,,,,,,,,"When trying to build Java Mission Control using build{.sh,.bat} the started p2 jetty process is not detected since the update to the new jetty server version.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32kv7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5dc4c445,,,,,,,,,"2023-08-01 01:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/510
Date: 2023-08-01 08:36:28 +0000;;;","2023-08-01 04:05;roboduke;Changeset: 75f89e73
Author:    Patrick Reinhart <reinhapa@openjdk.org>
Date:      2023-08-01 11:04:29 +0000
URL:       https://git.openjdk.org/jmc/commit/75f89e73b6ce30d203130e88f50f975820d5a1a9
;;;",,,,,,,,,,,,,,,,,,,,,
Make JfrWizardTest.verifyMinimalRecordingEventSettings work again,JMC-8113,5106735,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,aptmac,aptmac,aptmac,2023-07-26 10:36,2023-07-30 18:20,2023-10-01 09:55,2023-07-27 09:00,,,,,,,9.0.0,Mission Control Client,,0,,,,,,,,,,,,,,,,,,"Opening issue on behalf of GH user @grandmasterpixel for their open PR: [https://github.com/openjdk/jmc/pull/509|https://github.com/openjdk/jmc/pull/502]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32ihv:",9223372036854775807,,,,,,,,,,,,"2023-07-26 11:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/509
Date: 2023-07-25 04:08:04 +0000;;;","2023-07-27 09:00;roboduke;Changeset: e0a24803
Author:    Vincent Alexander Beelte <grandmasterpixel@googlemail.com>
Committer: Alex Macdonald <aptmac@openjdk.org>
Date:      2023-07-27 15:59:06 +0000
URL:       https://git.openjdk.org/jmc/commit/e0a248032c2c29d107687b68a2818daf1901f460
;;;",,,,,,,,,,,,,,,,,,,,,
Automated analysis page does not expand the results for Windows,JMC-8102,5105654,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,vpurnam,vpurnam,vpurnam,2023-07-17 23:07,2023-07-23 18:20,2023-10-01 09:55,2023-07-19 10:44,,,,,,,9.0.0,Mission Control Client,,0,,,,,,,,,,,,,,,,,,Automated analysis page does not expand the results for Windows.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32btn:",9223372036854775807,,,,,,,,,,,,"2023-07-18 09:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/507
Date: 2023-07-18 16:42:24 +0000;;;","2023-07-19 10:44;roboduke;Changeset: 70e4f731
Author:    Virag Purnam <vpurnam@openjdk.org>
Date:      2023-07-19 17:42:31 +0000
URL:       https://git.openjdk.org/jmc/commit/70e4f731495f08c066e9dc548c02a58b844138f6
;;;",,,,,,,,,,,,,,,,,,,,,
Fix project setup of uitests/org.openjdk.jmc.test.jemmy,JMC-8097,5104391,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,clanger,clanger,clanger,2023-06-29 08:22,2023-07-02 18:19,2023-10-01 09:55,2023-06-29 23:13,,,,,,,9.0.0,Mission Control Client,,0,,,,,,,,,,,,,,,,,,"uitests/org.openjdk.jmc.test.jemmy is a plugin project which is no test-project itself but an auxiliary library to other uitests.

Currently, the sources reside in the src/test/java folder and the eclipse configuration would also place the compiled classes in target/test-classes. When one does a plain maven build, without Eclipse involvement or using the clean target, everything works fine since then the compiled classes are generated into target/classes. However, building the project in eclipse generates the classes in target/test-classes and this causes the surefire plugin to pick up some classes as potential tests. Since the test.jemmy project is not configured for launching a test runtime, we then see failures.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3240z:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1c80c3d6,,,,,,,,,"2023-06-29 08:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/503
Date: 2023-06-29 15:37:18 +0000;;;","2023-06-29 23:13;roboduke;Changeset: c98397e0
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-06-30 06:12:02 +0000
URL:       https://git.openjdk.org/jmc/commit/c98397e05424bba2469ef3eba301799c795b6b47
;;;",,,,,,,,,,,,,,,,,,,,,
EventTemplateTest fails for JDKs with custom jfr profiles,JMC-8096,5103710,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,clanger,clanger,clanger,2023-06-20 14:54,2023-06-25 18:20,2023-10-01 09:55,2023-06-22 13:15,,,,,,,9.0.0,Mission Control Client,,0,,,,,,,,,,,,,,,,,,"A downstream JDK might not only have the two OpenJDK default JFR profiles default.jfc and profile.jfc but also contain other custom JFR profiles, such as SapMachine delivers special gc related configurations, like here: [https://github.com/SAP/SapMachine/tree/sapmachine/src/jdk.jfr/share/conf/jfr.|https://github.com/SAP/SapMachine/tree/sapmachine/src/jdk.jfr/share/conf/jfr]


This makes the test EventTemplateTest fail since it expects every possible JFR event in every configuration. It could be fixed by only checking the two default templates tagged with provider=""Oracle"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ztn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1c80c3d6,,,,,,,,,"2023-06-20 15:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/501
Date: 2023-06-20 21:59:00 +0000;;;","2023-06-22 13:15;roboduke;Changeset: 5ace151b
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-06-22 20:14:45 +0000
URL:       https://git.openjdk.org/jmc/commit/5ace151b6dc00096b5b3212edfad40e86f8bcf8d
;;;",,,,,,,,,,,,,,,,,,,,,
Update org.openjdk.jmc.flightrecorder.rules.test/.classpath after JMC-8086,JMC-8095,5103709,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,clanger,clanger,clanger,2023-06-20 14:17,2023-06-25 18:20,2023-10-01 09:55,2023-06-21 23:46,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,The changes brought by JMC-8086 require updating org.openjdk.jmc.flightrecorder.rules.test/.classpath.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-8086,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ztf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@25ad7987,,,,,,,,,"2023-06-20 14:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/500
Date: 2023-06-20 21:20:52 +0000;;;","2023-06-21 23:46;roboduke;Changeset: 3d7614c6
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-06-22 06:44:39 +0000
URL:       https://git.openjdk.org/jmc/commit/3d7614c63156f6db46335748f572bfb1cad67ab5
;;;",,,,,,,,,,,,,,,,,,,,,
Rules dependant on GarbageCollectionInfoRule throw NPE if there is no gcInfo,JMC-8093,5103437,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P5,Fixed,aptmac,aptmac,aptmac,2023-06-16 13:22,2023-06-25 18:20,2023-10-01 09:55,2023-06-19 07:00,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,"This is a pretty specific case, but could happen on shorter recordings nonetheless. If there are no gcs and no gcInfo as a result, the GarbageCollectionInfoRule bails because it looks for EventAvailability.AVAILABLE, but the rules that depend on it will throw an NPE because they look for EventAvailability.ENABLED and the GarbageCollectionsInfo aggregate is null.


The four rules this applies to is:
GcLockerRule
GcStallRule
HeapInspectionRule
SystemGcRule",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31y4z:",9223372036854775807,,,,,,,,,,,,"2023-06-16 13:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/498
Date: 2023-06-16 20:36:21 +0000;;;","2023-06-19 07:00;roboduke;Changeset: cedf50f6
Author:    Alex Macdonald <aptmac@openjdk.org>
Date:      2023-06-19 13:59:07 +0000
URL:       https://git.openjdk.org/jmc/commit/cedf50f6d00209f2d40d594be5996dc5f8a8a7bd
;;;",,,,,,,,,,,,,,,,,,,,,
Refactoring for jmc/application,JMC-8091,5103221,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,clanger,clanger,clanger,2023-06-14 14:13,2023-07-02 18:19,2023-10-01 09:55,2023-06-29 07:39,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,"Build pom.xml files for jmc could be cleaned up:
 * Bump some versions
 * Fix some URLs
 * Improve handling of spotless and checkstyle integration by introducing per project variable that points to configuration directory
 * Add spotless to standard build",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31wt7:",9223372036854775807,,,,,,,,,,,,"2023-06-14 14:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/497
Date: 2023-06-14 21:17:52 +0000;;;","2023-06-29 07:39;roboduke;Changeset: af306fa4
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-06-29 14:38:48 +0000
URL:       https://git.openjdk.org/jmc/commit/af306fa4da0eb3b8d808c22f83409e0ad790e587
;;;",,,,,,,,,,,,,,,,,,,,,
Enhancements for agent pom,JMC-8090,5103143,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,clanger,clanger,clanger,2023-06-14 01:14,2023-06-19 03:28,2023-10-01 09:55,2023-06-14 22:56,,,,,,,9.0.0,Infrastructure,,0,,,,,,,,,,,,,,,,,,"Cleanups and plugin bumps for the agent pom.xml, similar as done for core via JMC-8086.

Also integrate spotless in default build to be able to get rid of the separate spotless check in GHA.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31wbv:",9223372036854775807,,,,,,,,,,,,"2023-06-14 01:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/496
Date: 2023-06-14 08:19:56 +0000;;;","2023-06-14 22:56;roboduke;Changeset: 7d760a51
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-06-15 05:54:28 +0000
URL:       https://git.openjdk.org/jmc/commit/7d760a5146e503c721b2ddb7569523a447ce3579
;;;",,,,,,,,,,,,,,,,,,,,,
Some refactoring for jmc/core,JMC-8086,5102879,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,clanger,clanger,clanger,2023-06-11 15:16,2023-06-25 18:20,2023-10-01 09:55,2023-06-19 21:57,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,"There is room for improvement/refactoring in jmc/core projects. In detail:

Better handling of Spotless and Checkstyle
 * Fix calling spotless/checkstyle directly in submodules by refering to a jmc.config.path variable
 * Integrate spotless into build workflow

Cleanup of core/pom.xml:
 * URL cleanups
 * Plugin version bumps

Test projects don't need to be p2 plugin projects since they only test basic functionality but not in the context of Eclipse/OSGI modules.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-8095,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31up7:",9223372036854775807,,,,,,,,,,,,"2023-06-11 15:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/495
Date: 2023-06-11 22:44:45 +0000;;;","2023-06-19 21:57;roboduke;Changeset: cf2fe2bd
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-06-20 04:55:24 +0000
URL:       https://git.openjdk.org/jmc/commit/cf2fe2bd723bb012f96c5af6f9351c7840246217
;;;",,,,,,,,,,,,,,,,,,,,,
[macOS] java/awt/dnd/NextDropActionTest/NextDropActionTest.java fails with java.lang.RuntimeException: wrong next drop action!,JDK-8313633,5107255,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnguyen,achung,achung,2023-08-02 09:01,2023-08-16 23:29,2023-10-01 09:55,2023-08-10 10:53,22,,,,,,22,client-libs,,0,intermittent,sn_150,,,,,,,,,,,,,,,,"java/awt/dnd/NextDropActionTest/NextDropActionTest.java fails with 
DropTargetListener.drop(): accepting the user drop action=1
DragSourseListener.dragDropEnd():  firstCall=true drop action=1
DropTargetListener.drop(): accepting the user drop action=1
DragSourseListener.dragDropEnd():  firstCall=false drop action=1
FAILURE: wrong drop action:1
java.lang.RuntimeException: wrong next drop action!
	at NextDropActionTest.start(NextDropActionTest.java:165)
	at NextDropActionTest.main(NextDropActionTest.java:67)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1570)

JavaTest Message: Test threw exception: java.lang.RuntimeException: wrong next drop action!
JavaTest Message: shutting down test",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,22,,os_x,,,,,"0|i32ll7:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-08-02 09:18;achung;Test is passing locally on macosx-x64 on JDK22;;;","2023-08-09 15:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15213
Date: 2023-08-09 21:59:23 +0000;;;","2023-08-10 10:53;dukebot;Changeset: d97de826
Author:    Damon Nguyen <dnguyen@openjdk.org>
Date:      2023-08-10 17:52:28 +0000
URL:       https://git.openjdk.org/jdk/commit/d97de8260c19e468c87221e28f29128e56ec8ee1
;;;",,,,,,,,,,,,,,,,,,,,
ciEnv::dump_replay_data use fclose ,JDK-8313632,5107253,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-08-02 08:34,2023-08-10 09:13,2023-10-01 09:55,2023-08-03 05:05,11,17,21,22,,,22,hotspot,,0,ci-replay,oracle-triage-22,,,,,,,,,,,,,,,,"Seems we miss to call  fclose at the end of  ciEnv::dump_replay_data .
This should better be done like it is documented here  in the fdopen example :
https://www.ibm.com/docs/en/i/7.3?topic=functions-fdopen-associates-stream-file-descriptor
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313691,JDK-8313694,,,JDK-8313712,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32lkr:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Fix failed,,"2023-08-02 22:01;thartmann;Same for ciEnv::dump_inline_data.

ILW = Missing fclose, when dumping compilation replay data, no workaround = MLH = P4;;;","2023-08-03 01:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15135
Date: 2023-08-03 08:43:03 +0000;;;","2023-08-03 05:05;dukebot;Changeset: 0f2fce71
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-08-03 12:02:52 +0000
URL:       https://git.openjdk.org/jdk/commit/0f2fce71680355412896b2cb2d96cc85f69324e7
;;;","2023-08-03 05:42;mbaesken;[~thartmann] I looked around a bit in the codebase and found this :
https://github.com/openjdk/jdk/blob/master/src/hotspot/share/utilities/vmError.cpp#L1834
there is another os::fdopen usage and no fclose.  Should we add it there too or is it avoided for some good reason in vmError ?;;;","2023-08-03 05:49;thartmann;I'm not aware of any good reason to avoid it there, so I'd say we should add it.;;;","2023-08-03 06:10;mbaesken;I created https://bugs.openjdk.org/browse/JDK-8313691  for the vmError.cpp related issue.;;;","2023-08-03 06:40;mbaesken;Hello [~thartmann] , I checked the fileStream coding used at both places ciEnv and vmError and seems the destructor of fileStream is already calling fclose on the file pointer :
https://github.com/openjdk/jdk/blob/master/src/hotspot/share/utilities/ostream.cpp#L606
So calling it twice is not needed and not good; probably I  should better remove  the added fclose ?
However the close in case of failing fdopen might still be needed; do you agree to my analysis ?;;;","2023-08-03 07:58;thartmann;Thanks for the details, [~mbaesken]. Good catch, yes, your analysis makes sense to me. I think this should also be reviewed by someone more familiar with the fileStream code.;;;","2023-08-03 11:09;thartmann;We had to backout this change with JDK-8313712 due to massive failures.;;;",,,,,,,,,,,,,,
"SA: stack trace printed using ""where"" command does not show class name",JDK-8313631,5107252,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asmehra,asmehra,asmehra,2023-08-02 08:23,2023-09-28 06:36,2023-10-01 09:55,2023-09-28 06:34,22,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,"The stack trace printed by SA's ""where"" command does not show the class name of the frame's method. An example stack trace:

Java Stack Trace for main
Thread state = BLOCKED
 - private static native void sleepNanos0(long) @0x00007fdd53434d68 @bci = 0, pc = 0x00007fddc7543980 (Interpreted)

 - private static void sleepNanos(long) @0x00007fdd53434dd0 @bci = 33, line = 491, pc = 0x00007fddc753f166 (Interpreted)

 - public static void sleep(long) @0x00007fdd53434510 @bci = 25, line = 522, pc = 0x00007fddc753f166 (Interpreted)

 - public static void main(java.lang.String[]) @0x00007fdd48400488 @bci = 50, line = 8, pc = 0x00007fddc753f166 (Interpreted)

After the fix, output is:

Java Stack Trace for main
Thread state = BLOCKED
 - private static native void sleepNanos0(long) @0x00007f373a4314c0 of public class java.lang.Thread @0x00007f373a0170c8 @bci = 0, pc = 0x00007f37af543c7c (Interpreted)

 - private static void sleepNanos(long) @0x00007f373a431528 of public class java.lang.Thread @0x00007f373a0170c8 @bci = 33, line = 491, pc = 0x00007f37af53f1a2 (Interpreted)

 - public static void sleep(long) @0x00007f373a430c68 of public class java.lang.Thread @0x00007f373a0170c8 @bci = 25, line = 522, pc = 0x00007f37af53f1a2 (Interpreted)

 - public static void main(java.lang.String[]) @0x00007f3730400488 of public class HelloWorld @0x00007f373b000800 @bci = 50, line = 8, pc = 0x00007f37af53f1a2 (Interpreted)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32lkj:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-08-02 10:42;cjplummer;It looks like the issue is in the HTMGenerator.genHTMLForJavaStackTrace() API. It calls genMethodLink(). Maybe it should call genMethodAndKlassLink(). Keep in mind this also impacts the HSDB GUI, which has a window for showing the stack. I think this is ok, but it should be manually tested also since we have no automated test for it.

Note in general I don't like how clhsdb has chosen to use the HTMLGenerator support, which is really mean for the HSDB GUI. HSDB came first, and then clhsdb came later to provide the same functionality as HSDB, but from the command line, so it borrowed from HSDB. The result is formatting that doesn't look that good for clhsdb.
;;;","2023-09-27 13:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15952
Date: 2023-09-27 20:45:00 +0000;;;","2023-09-28 06:34;dukebot;Changeset: 065203d4
Author:    Ashutosh Mehra <asmehra@openjdk.org>
Date:      2023-09-28 13:32:15 +0000
URL:       https://git.openjdk.org/jdk/commit/065203d44a651ee850807bb1f2bed59cea7de3ea
;;;",,,,,,,,,,,,,,,,,,,,
C2 crash due to unexpected exception control flow,JDK-8313626,5107245,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tholenstein,thartmann,thartmann,2023-08-02 05:58,2023-09-05 02:54,2023-10-01 09:55,2023-08-23 01:50,11,17,21,22,8,,22,hotspot,,0,amazon-interest,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,oracle-triage-22,,,,,,,,"I attached a simple reproducer (reproducer.jasm). To reproduce, run:
- java org.openjdk.asmtools.Main jasm reproducer.jasm
- java -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,Test::test* -XX:-TieredCompilation -XX:CompileCommand=dontinline,Test::m Test
 
The underlying issue is that the target of the second exception table entry is inside the try/catch scope:
 
      Exception table:
         from    to  target type
             7    10    13   Class java/lang/Exception
             0    18    15   Class java/lang/Throwable
 
We actually have code in C1 to handle this case:
 
          // It's acceptable for an exception handler to cover itself
          // but we don't handle that in the parser currently.  It's
          // very rare so we bailout instead of trying to handle it.
 
https://github.com/openjdk/jdk/blob/7277bb19f128b84094400cb4262b2e0432e559c5/src/hotspot/share/c1/c1_GraphBuilder.cpp#L2504
 
My understanding is that the JVM Specification does not impose any restrictions on an exception handler covering the same range of instructions as itself. 

I discussed this with [~dholmes] and he agreed that it's legal for an exception handler to cover itself. The only JVMS restrictions on from/to are that from < to and that they are both in the bci range.
 
In fact, the following code generates such an exception handler with itself as target around monitorexit even with javac:
 
void test() { synchronized(this) {  } }
 
         9: astore_2
        10: aload_1
        11: monitorexit
        12: aload_2
 
      Exception table:
         from    to  target type
             4     6     9   any
             9    12     9   any
 
Since there is only a limited set of cases where javac would create such an exception table, C2 is not well tested with these scenarios. I updated my attached reproducer to cover another problematic case.
 
Failure modes are:
 
   0   26  Catch  === 21 22  [[ 27 ]]  !jvms: Test::test1 @ bci:0
   1   27  CatchProj  === 26  [[ 105 ]] #0@bci -1  !jvms: Test::test1 @ bci:0
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error 
(/oracle/jdk2/open/src/hotspot/share/opto/compile.cpp:4003), pid=3085146, 
tid=3085159
#  assert(false) failed: malformed control flow
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 
21-internal-LTS-2023-05-12-0924511.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 
21-internal-LTS-2023-05-12-0924511.tobias..., mixed mode, compressed oops, 
compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x9b8c24]  Compile::final_graph_reshaping()+0x11d4
 
Current CompileTask:
C2:    345   24   !         Test::test1 (5 bytes)
 
Stack: [0x00007f1d57057000,0x00007f1d57158000],  sp=0x00007f1d57152f50,  free 
space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native 
code)
V  [libjvm.so+0x9b8c24]  Compile::final_graph_reshaping()+0x11d4  
(compile.cpp:4003)
V  [libjvm.so+0x9ba774]  Compile::Optimize()+0x1aa4  (compile.cpp:2450)
V  [libjvm.so+0x9bc4a5]  Compile::Compile(ciEnv*, ciMethod*, int, Options, 
DirectiveSet*)+0x1aa5  (compile.cpp:840)
V  [libjvm.so+0x813664]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, 
bool, DirectiveSet*)+0x3c4  (c2compiler.cpp:118)
V  [libjvm.so+0x9c8290]  
CompileBroker::invoke_compiler_on_method(CompileTask*)+0x9e0  
(compileBroker.cpp:2265)
V  [libjvm.so+0x9c9138]  CompileBroker::compiler_thread_loop()+0x628  
(compileBroker.cpp:1944)
V  [libjvm.so+0xe6418e]  JavaThread::thread_main_inner()+0xee  
(javaThread.cpp:717)
V  [libjvm.so+0x172fc98]  Thread::call_run()+0xb8  (thread.cpp:216)
V  [libjvm.so+0x1432a4a]  thread_native_entry(Thread*)+0x11a  
(os_linux.cpp:740)
 
 
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/jdk2/open/src/hotspot/share/opto/multnode.cpp:77), 
pid=3085184, tid=3085197
#  assert((Opcode() != Op_If && Opcode() != Op_RangeCheck) || outcnt() == 2) 
failed: bad if #1
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 
21-internal-LTS-2023-05-12-0924511.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 
21-internal-LTS-2023-05-12-0924511.tobias..., mixed mode, compressed oops, 
compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1397c0c]  MultiNode::proj_out(unsigned int) const+0x8c
 
Current CompileTask:
C2:    306   24   !         Test::test2 (6 bytes)
 
Stack: [0x00007f3577335000,0x00007f3577436000],  sp=0x00007f3577430fd0,  free 
space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native 
code)
V  [libjvm.so+0x1397c0c]  MultiNode::proj_out(unsigned int) const+0x8c  
(multnode.cpp:77)
V  [libjvm.so+0x12635fa]  
PhaseMacroExpand::expand_subtypecheck_node(SubTypeCheckNode*)+0x1fa  
(macro.cpp:2275)
V  [libjvm.so+0x1269c15]  PhaseMacroExpand::expand_macro_nodes()+0xba5  
(macro.cpp:2530)
V  [libjvm.so+0x9ba5ae]  Compile::Optimize()+0x18de  (compile.cpp:2409)
V  [libjvm.so+0x9bc4a5]  Compile::Compile(ciEnv*, ciMethod*, int, Options, 
DirectiveSet*)+0x1aa5  (compile.cpp:840)
V  [libjvm.so+0x813664]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, 
bool, DirectiveSet*)+0x3c4  (c2compiler.cpp:118)
V  [libjvm.so+0x9c8290]  
CompileBroker::invoke_compiler_on_method(CompileTask*)+0x9e0  
(compileBroker.cpp:2265)
V  [libjvm.so+0x9c9138]  CompileBroker::compiler_thread_loop()+0x628  
(compileBroker.cpp:1944)
V  [libjvm.so+0xe6418e]  JavaThread::thread_main_inner()+0xee  
(javaThread.cpp:717)
V  [libjvm.so+0x172fc98]  Thread::call_run()+0xb8  (thread.cpp:216)
V  [libjvm.so+0x1432a4a]  thread_native_entry(Thread*)+0x11a  
(os_linux.cpp:740)
 ",,,,,,,,,,,JDK-8315682,JDK-8314885,JDK-8314886,JDK-8315466,JDK-8315497,JDK-8315189,,,,,,,,,,,,,,,JDK-8307769,,,,,,,,,,,"2023-08-02 05:56;thartmann;reproducer.jasm;https://bugs.openjdk.org/secure/attachment/104937/reproducer.jasm",,,,,,,,,,,,,,,,,,,,,,"0|i32liz:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-02 06:14;thartmann;The ""COMPILE SKIPPED: malformed control flow (not retryable)"" bailouts (asserts since JDK-8303951 in JDK 21) already reproduces with JDK 8u.

The ""bad if"" assert happens since JDK-8238691 in JDK 15.

ILW = Assert during C2 compilation, with exotic bytecode not generated by javac, exclude compilation of affected method = HLM = P3;;;","2023-08-18 06:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15292
Date: 2023-08-15 15:41:50 +0000;;;","2023-08-23 01:50;dukebot;Changeset: f8203cb2
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2023-08-23 08:47:33 +0000
URL:       https://git.openjdk.org/jdk/commit/f8203cb272e6136b784e5c43a500f6a0bfb19c8b
;;;","2023-08-23 06:00;thartmann;Fix Request (JDK 21u):
Fixes a crash during C2 compilation. The fix is low risk (safepoint on backbranch during parsing), applies cleanly and includes a regression test. Tested with tier 1 - 3.;;;","2023-08-23 06:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/92
Date: 2023-08-23 12:59:27 +0000;;;","2023-08-30 04:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1709
Date: 2023-08-30 11:18:57 +0000;;;","2023-08-30 05:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2107
Date: 2023-08-30 11:50:46 +0000;;;","2023-08-30 08:57;shade;Fix Request (17u)

Same reason as for 21u. Applies cleanly. New regression test fails without the fix and passes with it. Other testing passes too. This also contributes to parity with 17.0.10-oracle.;;;","2023-09-04 02:56;shade;Fix Request (11u)

Same reason as for 17u. The wrinkle is that new regression test passes even without the patch. I suspect that is due to more advanced loop optimizations past JDK 11u. Testing passes too.;;;",,,,,,,,,,,,,,
[lworld] runtime/valhalla/inlinetypes/InlineOops.java GenZ assertion on aarch64,JDK-8313607,5107224,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dsimms,dsimms,dsimms,2023-08-02 01:40,2023-08-03 23:34,2023-10-01 09:55,2023-08-03 23:34,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lw4,lw5,lworld,,,,,,,,,,,,,,,"runtime/valhalla/inlinetypes/InlineOops.java#id4

#  Internal Error (/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S119314/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2123954e-43aa-44ff-9459-148bf2f2db5c/runs/c6ae0315-cf94-4e83-b719-68b8b99438f4/workspace/open/src/hotspot/share/asm/register.hpp:255), pid=3891560, tid=3891570
#  assert(regs[i] != regs[j]) failed: Multiple uses of register: r19


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i32leb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-03 23:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/896
Date: 2023-08-04 06:06:31 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
increase timeout for jdk/classfile/CorpusTest.java,JDK-8313602,5107219,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-08-02 01:05,2023-08-24 00:34,2023-10-01 09:55,2023-08-03 01:13,21,22,,,,,22,core-svc,,0,jdk21u-fix-request,jdk21u-fix-yes,,,,,,,,,,,,,,,,"On some slow machines (e.g. Alpine) we see sporadic timeouts of the jdk/classfile/CorpusTest.java  test, even with an increased standard timeout factor. 
The timeouts appeared after  JDK-8294982: Implementation of Classfile API",,,,,,,,,,,JDK-8314926,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294982,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32ld7:",9223372036854775807,b10,,,,,,,,,,,"2023-08-02 01:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15122
Date: 2023-08-02 08:15:01 +0000;;;","2023-08-03 01:13;dukebot;Changeset: bdac348c
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-08-03 08:12:20 +0000
URL:       https://git.openjdk.org/jdk/commit/bdac348c80d451cefbc73eb8313e8511dbb0de31
;;;","2023-08-23 05:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/91
Date: 2023-08-23 12:12:59 +0000;;;","2023-08-23 05:25;mbaesken;jdk21u backport request
I would like to have the patch in jdk21u as well, because the issues are present there too. The patch is low risk and applies cleanly.;;;",,,,,,,,,,,,,,,,,,,
Generational ZGC: NMT assert when the heap fails to expand,JDK-8313593,5107210,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,stefank,stefank,stefank,2023-08-01 23:54,2023-08-10 06:05,2023-10-01 09:55,2023-08-02 05:14,21,22,,,,,22,hotspot,,0,genzgc,hgupdate-sync,jdk21-fix-request,jdk21-fix-yes,sqebug,,,,,,,,,,,,,"The following assert is hit when the JVM fails to commit more memory for the heap:

assert(size > 0) failed: Invalid size
...
V  [libjvm.so+0x185d157]  VirtualMemoryTracker::add_committed_region(unsigned char*, unsigned long, NativeCallStack const&)+0x4d7  (virtualMemoryTracker.cpp:428)
V  [libjvm.so+0x19c1f33]  ZNMT::process_fake_mapping(zoffset, unsigned long, bool)+0xa3  (memTracker.hpp:168)
V  [libjvm.so+0x19db817]  ZPhysicalMemoryManager::commit(ZPhysicalMemory&)+0x47  (zPhysicalMemory.cpp:312)
V  [libjvm.so+0x19d1e4b]  ZPageAllocator::alloc_page_finalize(ZPageAllocation*)+0x6b  (zPageAllocator.cpp:427)

The failure to commit memory is reported by returning that the committed size is zero. We then pass that information to the NMT subsystem, which asserts.",,,,,,,,,,,JDK-8313767,JDK-8313945,,,,,,,,,,,,,,,,,,,JDK-8313230,,,,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,"0|i32lb7:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-08-02 00:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15120
Date: 2023-08-02 07:15:31 +0000;;;","2023-08-02 05:14;dukebot;Changeset: 19e2c8c3
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2023-08-02 12:13:47 +0000
URL:       https://git.openjdk.org/jdk/commit/19e2c8c321823c056091e6e9f6c3d0db7ba9ec2b
;;;","2023-08-02 23:38;stefank;Fix Request

I'd like to get this fix for a regression backported to JDK 21. This fixes an assert/crash when the GC can't commit more memory to expand the Java heap. The failure mode is tricky to reproduce, so I tested the fix by temporarily adding code that induced a failure in the code that expands the Java heap.

This is very simple and low-risk fix. The JDK 22 fix was reviewed by Erik Österlund, Thomas Schatzl, and Thomas Stuefe:
https://git.openjdk.org/jdk/commit/19e2c8c321823c056091e6e9f6c3d0db7ba9ec2b

The fix only affects the new Generational ZGC and doesn't affect any other GCs.;;;","2023-08-03 12:29;kvn;Fix request for JDK 21 approved.;;;","2023-08-03 23:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/163
Date: 2023-08-04 06:33:54 +0000;;;",,,,,,,,,,,,,,,,,,
GCC 7 reports compiler warning in bundled freetype 2.13.0,JDK-8313576,5107193,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2023-08-01 18:57,2023-09-13 13:49,2023-10-01 09:55,2023-08-02 16:40,11.0.21,17.0.9,21,22,,,22,client-libs,,0,17-bp,21-bp,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,oraclejdk-na,,,,,,,"The next error is produced:

share/native/libfreetype/src/base/ftobjs.c:25:0:
share/native/libfreetype/src/base/ftobjs.c: In function 'open_face_from_buffer':
share/native/libfreetype/include/freetype/internal/ftobjs.h:511:47: error: 'args.driver' may be used uninitialized in this function [-Werror=maybe-uninitialized]
 #define FT_MODULE_CLASS( x )    FT_MODULE( x )->clazz
                                               ^~
libfreetype/src/base/ftobjs.c:1738:19: note: 'args.driver' was declared here
     FT_Open_Args  args;",,,,,,,,,,,JDK-8315553,JDK-8313965,JDK-8313964,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306881,,,,,,,,,,,generic,,,,,,,,,,linux,,,,,"0|i32l7f:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-08-01 18:58;serb;reported upstream:
https://gitlab.freedesktop.org/freetype/freetype/-/issues/1245;;;","2023-08-01 19:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15116
Date: 2023-08-02 02:01:44 +0000;;;","2023-08-02 16:40;dukebot;Changeset: 8248e351
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-08-02 23:37:35 +0000
URL:       https://git.openjdk.org/jdk/commit/8248e351d0bed263fb68d8468004a4286e6391af
;;;","2023-08-02 17:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/161
Date: 2023-08-02 23:55:24 +0000;;;","2023-08-03 00:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1635
Date: 2023-08-03 05:12:27 +0000;;;","2023-08-03 09:06;serb;Fix request (17u)

Clean backport. Small fix for GCC7 and a broken build.

Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/1635;;;","2023-08-03 10:07;serb;Fix request (21u)

Clean backport. Small fix for GCC7 and a broken build.

Review 21u: https://github.com/openjdk/jdk21u/pull/39;;;","2023-08-03 10:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/39
Date: 2023-08-03 16:22:13 +0000;;;","2023-08-31 10:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2108
Date: 2023-08-30 18:08:48 +0000;;;","2023-08-31 10:02;serb;Fix request (11u)

Clean backport. Small fix for GCC7 and a broken build.

Review 11u-dev: https://github.com/openjdk/jdk11u-dev/pull/2108;;;",,,,,,,,,,,,,
GenShen: Completing a global mark should also complete an old mark,JDK-8313574,5107190,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,wkemper,wkemper,wkemper,2023-08-01 16:54,2023-08-16 08:43,2023-10-01 09:55,2023-08-16 08:43,repo-shenandoah,,,,,,,hotspot,,0,amazon-interest,gc,gc-shenandoah,genshen,,,,,,,,,,,,,,"The mark context is shared, but each generation maintains a separate flag (`ShenandoahGeneration::_is_marking_complete`) to indicate status of the mark. The remembered set scan will use the mark bitmap only if the old generation mark is complete. Otherwise, it walks the old regions and requires them to be parseable. 

Presently, we make the heap parseable after  global marking finishes, but this work could be deferred to the start of an old mark if we had global mark record completion of old marking.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32l6r:",9223372036854775807,,,,,,,,,,,,"2023-08-04 11:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/304
Date: 2023-08-04 18:17:29 +0000;;;","2023-08-14 14:16;wkemper;Although this work started out as a performance enhancement, it also addresses a bug in which old regions may not be made parseable before they are traversed by either a remembered set scan or verification of the remembered set. In these cases, the collector could attempt to access invalid memory and crash. For this issue, the crash would be preceded by a global collection which is cancelled before ""coalesce and fill"" is completed. The stack trace would show the collector attempting to scan, or verify, the remembered set.;;;",,,,,,,,,,,,,,,,,,,,,
Fix -Wconversion warnings for ResolvedFieldEntry,JDK-8313554,5107168,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,matsaave,matsaave,matsaave,2023-08-01 09:26,2023-08-10 09:14,2023-10-01 09:55,2023-08-04 13:26,,,,,,,22,hotspot,,0,runtime,,,,,,,,,,,,,,,,,"The recent change in JDK-8301996 added more -Wconversion warnings that need to be addressed.

Also:
rewriter.cpp: In member function 'void Rewriter::rewrite_field_reference(address, int, bool)':
src/hotspot/share/interpreter/rewriter.cpp:188:29: warning: conversion from 'int' to 'u2' {aka 'short unsigned int'} may change value [-Wconversion]   
  188 |     Bytes::put_native_u2(p, field_entry_index);
      |                             ^~~~~~~~~~~~~~~~~
src/hotspot/share/interpreter/rewriter.cpp:192:27: warning: conversion from 'int' to 'u2' {aka 'short unsigned int'} may change value [-Wconversion]
  192 |     Bytes::put_Java_u2(p, pool_index); 
      |                           ^~~~~~~~~~
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8177481,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32l1v:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-02 13:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15126
Date: 2023-08-02 19:15:24 +0000;;;","2023-08-04 13:26;dukebot;Changeset: ad6e9e75
Author:    Matias Saavedra Silva <matsaave@openjdk.org>
Date:      2023-08-04 20:24:50 +0000
URL:       https://git.openjdk.org/jdk/commit/ad6e9e75bff24e74c888d9b96c3f698ae0f54127
;;;",,,,,,,,,,,,,,,,,,,,,
VM build without C2 fails after JDK-8312579,JDK-8313530,5107140,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,gbarany,haosun,haosun,2023-08-01 01:57,2023-09-04 04:32,2023-10-01 09:55,2023-08-24 01:08,22,,,,,,22,hotspot,,0,c2,jvmci,oraclejdk-na,oracle-triage-17,oracle-triage-21,oracle-triage-22,regression,,,,,,,,,,,"--------------------------------------
how to reproduce:

./configure --with-jvm-features=-compiler2 --with-debug-level=release
make images JOBS=32

--------------------------------------
here shows the snippet of error log

=== Output from failing command(s) repeated here ===
* For target hotspot_variant-server_libjvm_objs_arguments.o:
In file included from ~/tmp/test/jdk_src/src/hotspot/share/runtime/arguments.cpp:53:
~/tmp/test/jdk_src/src/hotspot/share/runtime/arguments.cpp: In static member function 'static jint Arguments::apply_ergo()':
~/tmp/test/jdk_src/src/hotspot/share/runtime/globals_extension.hpp:35:32: error: 'Flag_EnableVectorSupport_enum' was not declared in this scope
   35 | #define FLAG_MEMBER_ENUM(name) Flag_##name##_enum
      |                                ^~~~~
~/tmp/test/jdk_src/src/hotspot/share/runtime/globals_extension.hpp:80:60: note: in expansion of macro 'FLAG_MEMBER_ENUM'
   80 | #define FLAG_IS_DEFAULT(name)         (JVMFlag::is_default(FLAG_MEMBER_ENUM(name)))
      |                                                            ^~~~~~~~~~~~~~~~
~/tmp/test/jdk_src/src/hotspot/share/runtime/arguments.cpp:4045:8: note: in expansion of macro 'FLAG_IS_DEFAULT'
 4045 |   if (!FLAG_IS_DEFAULT(EnableVectorSupport) && !EnableVectorSupport) {
      |        ^~~~~~~~~~~~~~~
~/tmp/test/jdk_src/src/hotspot/share/runtime/arguments.cpp:4045:49: error: 'EnableVectorSupport' was not declared in this scope; did you mean 'VectorSupport'?
 4045 |   if (!FLAG_IS_DEFAULT(EnableVectorSupport) && !EnableVectorSupport) {
      |                                                 ^~~~~~~~~~~~~~~~~~~
      |                                                 VectorSupport
   ... (rest of output omitted)
* For target hotspot_variant-server_libjvm_objs_deoptimization.o:
~/tmp/test/jdk_src/src/hotspot/share/runtime/deoptimization.cpp: In static member function 'static bool Deoptimization::realloc_objects(JavaThread*, frame*, RegisterMap*, GrowableArray<ScopeValue*>*, JavaThread*)':
~/tmp/test/jdk_src/src/hotspot/share/runtime/deoptimization.cpp:1239:13: error: 'EnableVectorSupport' was not declared in this scope; did you mean 'VectorSupport'?
 1239 |         if (EnableVectorSupport && VectorSupport::is_vector(ik)) {
      |             ^~~~~~~~~~~~~~~~~~~
      |             VectorSupport
~/tmp/test/jdk_src/src/hotspot/share/runtime/deoptimization.cpp: In static member function 'static void Deoptimization::reassign_fields(frame*, RegisterMap*, GrowableArray<ScopeValue*>*, bool, bool)':
~/tmp/test/jdk_src/src/hotspot/share/runtime/deoptimization.cpp:1575:9: error: 'EnableVectorSupport' was not declared in this scope; did you mean 'VectorSupport'?
 1575 |     if (EnableVectorSupport && VectorSupport::is_vector(k)) {
      |         ^~~~~~~~~~~~~~~~~~~
      |         VectorSupport
* For target hotspot_variant-server_libjvm_objs_modules.o:
In file included from ~/tmp/test/jdk_src/src/hotspot/share/classfile/modules.cpp:48:
~/tmp/test/jdk_src/src/hotspot/share/classfile/modules.cpp: In static member function 'static void Modules::define_module(Handle, jboolean, jstring, jstring, jobjectArray, JavaThread*)':
~/tmp/test/jdk_src/src/hotspot/share/runtime/globals_extension.hpp:35:32: error: 'Flag_EnableVectorSupport_enum' was not declared in this scope
   35 | #define FLAG_MEMBER_ENUM(name) Flag_##name##_enum
      |                                ^~~~~
~/tmp/test/jdk_src/src/hotspot/share/runtime/globals_extension.hpp:80:60: note: in expansion of macro 'FLAG_MEMBER_ENUM'
   80 | #define FLAG_IS_DEFAULT(name)         (JVMFlag::is_default(FLAG_MEMBER_ENUM(name)))
      |                                                            ^~~~~~~~~~~~~~~~
~/tmp/test/jdk_src/src/hotspot/share/classfile/modules.cpp:459:9: note: in expansion of macro 'FLAG_IS_DEFAULT'
  459 |     if (FLAG_IS_DEFAULT(EnableVectorSupport)) {
      |         ^~~~~~~~~~~~~~~
~/tmp/test/jdk_src/src/hotspot/share/classfile/modules.cpp:460:24: error: 'EnableVectorSupport' was not declared in this scope; did you mean 'VectorSupport'?
  460 |       FLAG_SET_DEFAULT(EnableVectorSupport, true);
      |                        ^~~~~~~~~~~~~~~~~~~
~/tmp/test/jdk_src/src/hotspot/share/runtime/globals_extension.hpp:85:41: note: in definition of macro 'FLAG_SET_DEFAULT'
   ... (rest of output omitted)

* All command lines available in ~/tmp/test/build-release/make-support/failure-logs.
=== End of repeated output ===",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314951,JDK-8312579,,,,,,,,,,generic,,,,,,,,,,linux,,,,,"0|i32kvn:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-01 23:56;thartmann;ILW = Build fails, non-default configuration without C2, no workaround = HLH = P2;;;","2023-08-01 23:57;thartmann;[~gbarany] could you please have a look?;;;","2023-08-02 00:13;gbarany;The EnableVectorSupport flag is declared in opto/c2_globals.hpp, which is not included if COMPILER2 is not set. But after my changes for JDK-8312579 we try to access this flag in some places guarded by #if COMPILER2_OR_JVMCI.
I'm not sure about the correct fix, I'm leaning towards moving the flag from c2_globals.hpp to the shared compiler_globals.hpp, so that it's accessible even if C2 is disabled but JVMCI is enabled.;;;","2023-08-02 00:15;thartmann;That sounds reasonable to me.;;;","2023-08-03 12:48;kvn;Or you can do similar to C2 intrinsic flags by specifying it in jvmci_globals.hpp when C2 is not available:
  NOT_COMPILER2(product(bool, EnableVectorSupport, false, EXPERIMENTAL, \
;;;","2023-08-22 01:59;haosun;Hi [~gbarany]
May I ask do you have spare time to fix this issue?
If not, do you mind if I assigning this task to myself, since this issue has blocked our internal CI for many days.
Thanks.;;;","2023-08-22 02:06;gbarany;Sorry [~haosun], I had a patch but never got around to opening a PR. Here it is now: https://github.com/openjdk/jdk/pull/15384;;;","2023-08-22 02:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15384
Date: 2023-08-22 09:04:32 +0000;;;","2023-08-24 01:08;dukebot;Changeset: c418933d
Author:    Gergö Barany <gbarany@openjdk.org>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2023-08-24 08:05:33 +0000
URL:       https://git.openjdk.org/jdk/commit/c418933d32a4e158f0e526d1be27b4b00f0c08a6
;;;",,,,,,,,,,,,,,
[JVMCI] fatal error: Never compilable: in JVMCI shutdown,JDK-8313430,5107027,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbarany,dnsimon,dnsimon,2023-07-31 11:19,2023-08-31 00:55,2023-10-01 09:55,2023-08-26 03:14,17,21,22,,,,22,hotspot,,0,amazon-interest,jvmci,oracle-triage-22,,,,,,,,,,,,,,,"VM shutdown involves calling Java code which can schedule further compilations by the CompileBroker. With UseJVMCICompiler, all compilations started once VM shutdown has begun are abandoned since they are unnecessary and can even delay VM shutdown from completing.

The implementation of -XX:+AbortVMOnCompilationFailure should ignore such abandoned compilations to prevent crashes such as:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (compileBroker.cpp:2096), pid=303361, tid=303384
#  fatal error: Never compilable: in JVMCI shutdown
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (build 21-internal-LTS-2023-07-18-1316304.gergo...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21-internal-LTS-2023-07-18-1316304.gergo..., mixed mode, sharing, tiered, jvmci, jvmci compiler, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x6452d9]  CompileBroker::handle_compile_error(CompilerThread*, CompileTask*, ciEnv*, int, char const*) [clone .part.0]+0x29
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/gergo/galahad-ee/galahad-ee/build/linux-x64/test-support/jtreg_open_test_hotspot_jtreg_compiler_intrinsics_TestRotate_java/scratch/core.303361)
#",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,,,,,"2023-08-02 01:28;dnsimon;8313430.patch;https://bugs.openjdk.org/secure/attachment/104932/8313430.patch",,,,,,,,,,,,,,,,,,,,,,"0|i32k6j:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-02 00:03;thartmann;ILW = Assert because method is not compiled, with -XX:+AbortVMOnCompilationFailure and JVMCI during VM shutdown, no workaround but disable -XX:+AbortVMOnCompilationFailure = MLH = P4;;;","2023-08-02 01:28;dnsimon;I've attached a proposed patch (8313430.patch) for fixing this issue.;;;","2023-08-25 12:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15433
Date: 2023-08-25 18:58:31 +0000;;;","2023-08-26 03:14;dukebot;Changeset: acd93102
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-08-26 10:13:23 +0000
URL:       https://git.openjdk.org/jdk/commit/acd93102348f592d6f2e77a4bff6037edf708d55
;;;",,,,,,,,,,,,,,,,,,,
[JVMCI] avoid locking class loader in CompilerToVM.lookupType,JDK-8313421,5107017,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,dnsimon,dnsimon,2023-07-31 09:45,2023-08-22 13:42,2023-10-01 09:55,2023-08-10 01:18,17,21,22,,,,22,hotspot,,0,jvmci,oracle-triage-22,,,,,,,,,,,,,,,,"The CompilerToVM.lookupType method uses a class loader to resolve a String to a class. Currently, the system class loader is used if no class loader is provided. When the system class loader is not parallel capable (e.g. when -Djava.system.class.loader is used) and -Xcomp is specified, this can cause deadlock if the thread that is waiting for the blocking compilation holds the system class loader lock.

The attached all-threads.txt shows such a deadlock between the 2 following threads:
* thread #11, name = 'Java: JVMCI-native CompilerThread0'
* thread #3

The solution is to use a more appropriate class loader. For example, when resolving a boot or platform class, the boot or platform class loader should be used.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,JDK-8314819,,,,,,,"2023-07-31 09:46;dnsimon;all-threads.txt;https://bugs.openjdk.org/secure/attachment/104919/all-threads.txt",,,,,,,,,,,,,,,,,,,,,,"0|i32k4b:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-02 00:23;thartmann;[~dnsimon] This should be HotSpotConstant*Pool* in the description, right?

ILW = Deadlock on system class loader lock, with JVMCI and -Xcomp, no workaround but disable compilation of affected method = HLM = P3 ;;;","2023-08-02 01:18;dnsimon;Yep, thanks for catching that. I've fixed it.;;;","2023-08-03 01:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15128
Date: 2023-08-02 20:33:49 +0000;;;","2023-08-10 01:18;dukebot;Changeset: 83adaf54
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-08-10 08:17:03 +0000
URL:       https://git.openjdk.org/jdk/commit/83adaf5477d1aa0128079a60be8847319dbadccc
;;;",,,,,,,,,,,,,,,,,,,
Template interpreter produces no safepoint check for return bytecodes,JDK-8313419,5107015,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fbredberg,jbechberger,jbechberger,2023-07-31 08:07,2023-08-24 00:22,2023-10-01 09:55,2023-08-18 07:34,22,,,,,,22,hotspot,,0,interpreter,,,,,,,,,,,,,,,,,"The template interpreter produces a safepoint check for return bytecodes (TemplateTable::_return(TosState state)) on x86 [1] and other platforms, but not on aarch64, arm, and riscv.

I describe the bug in more detail at https://mostlynerdless.de/blog/2023/07/31/the-inner-workings-of-safepoints/.

[1] https://github.com/openjdk/jdk/blob/5d193193a3a4c519e7b3d77b27e6b2bf1b11c7f9/src/hotspot/cpu/x86/templateTable_x86.cpp#L2562
[2] https://github.com/openjdk/jdk/blob/5d193193a3a4c519e7b3d77b27e6b2bf1b11c7f9/src/hotspot/cpu/aarch64/templateTable_aarch64.cpp#L2174C27-L2174C27",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,arm,riscv,,,,,,,,,,,,,"0|i32k3v:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-31 09:47;eosterlund;I think the poll you are looking for are in the remove_activation function.;;;","2023-07-31 14:48;jbechberger;It is not. All ports call the remove_activation function in their _return method. Yet the remove_activation function only calls the Interpreter::at_unwind function which in turn only calls methods related to StackWatermarks and not related to the SafepointMechanism. So the ports still differ regarding the calling of the safepoint related methods.;;;","2023-08-08 11:26;mseledtsov;ILW = HLM = P3;;;","2023-08-08 11:28;mseledtsov;Runtime Triage Team: [~jbechberger] could you please add description of the bug here in the JBS issue ?;;;","2023-08-08 15:21;jbechberger;I can add a full description and bug fixes for all platforms in a PR next week.;;;","2023-08-11 06:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15248
Date: 2023-08-11 13:22:19 +0000;;;","2023-08-11 07:27;jwilhelm;[~jbechberger] The full description of the problem should be here, in JBS, not in the PR. Please see the OpenJDK Developers' Guide for more information. In particular read https://openjdk.org/guide/#i-have-a-patch-what-do-i-do and https://openjdk.org/guide/#filing-an-issue. This part is also relevant here: https://openjdk.org/guide/#updating-an-issue-while-fixing

Also, if you intent to fix this issue you should make yourself the assignee of the issue, or at least communicate with the current assignee.;;;","2023-08-18 07:34;dukebot;Changeset: bcba5e97
Author:    Fredrik Bredberg <fbredberg@openjdk.org>
Committer: Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2023-08-18 14:33:03 +0000
URL:       https://git.openjdk.org/jdk/commit/bcba5e97857fd57ea4571341ad40194bb823cd0b
;;;",,,,,,,,,,,,,,,
Fix section label in test/jdk/ProblemList.txt,JDK-8313404,5106998,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2023-07-31 03:54,2023-08-10 06:05,2023-10-01 09:55,2023-08-01 06:46,,,,,,,22,core-libs,,0,hgupdate-sync,,,,,,,,,,,,,,,,,The commit for JDK-8313250 introduced a section label in test/jdk/ProblemList.txt that doesn't follow the convention.,,,,,,,,,,,JDK-8313599,JDK-8313936,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313250,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32k03:",9223372036854775807,b09,,,,,,,,,,,"2023-08-01 05:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15104
Date: 2023-08-01 12:01:13 +0000;;;","2023-08-01 06:46;dukebot;Changeset: 94b50b71
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-08-01 13:45:10 +0000
URL:       https://git.openjdk.org/jdk/commit/94b50b714a3d7696908e13b44eceeec60b82fcc6
;;;","2023-08-01 15:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/158
Date: 2023-08-01 22:31:12 +0000;;;",,,,,,,,,,,,,,,,,,,,
Remove unused 'mask' field from JFormattedTextField,JDK-8313403,5106996,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2023-07-31 03:20,2023-09-27 18:20,2023-10-01 09:55,2023-09-25 11:08,22,,,,,,22,client-libs,,0,cssn23_07_02,noreg-cleanup,sustaining,,,,,,,,,,,,,,,"The private field 'mask' in JFormattedTextField is never used.

I couldn't find any usages of the field, including JNI code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32jzn:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-07-31 03:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15088
Date: 2023-07-31 10:26:44 +0000;;;","2023-09-25 11:08;dukebot;Changeset: b65f4f72
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-09-25 18:06:53 +0000
URL:       https://git.openjdk.org/jdk/commit/b65f4f7220f53b250846c19ca6378450b5c9a61a
;;;",,,,,,,,,,,,,,,,,,,,,
C1: Incorrect LoadIndexed value numbering,JDK-8313402,5106995,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,shade,shade,shade,2023-07-31 03:18,2023-08-28 21:57,2023-10-01 09:55,2023-08-02 04:23,11,17,21,22,,,22,hotspot,,0,amazon-interest,c1,jdk17u-fix-request,jdk17u-fix-yes,jdk21-defer-request,jdk21-defer-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,oracle-triage-22,,,,,,,,"I suspect this is a compiler bug in compact string intrinsics, because it reproduces only with C1. Starts to pass with `-XX:-CompactStrings` (which disables compact strings). Starts to pass `-XX:-Inline` (which disables intrinsics). Starts to pass with `-XX:DisableIntrinsic=_getCharStringU`.

Reproduces reliably after JDK-8268698, but the issue could manifest after JDK-8141132 in any unlucky code.

% CONF=linux-x86_64-server-fastdebug make images test TEST=""java/time/test/java/time/format/TestUnicodeExtension.java"" TEST_VM_OPTS=""-XX:TieredStopAtLevel=1""

...

est test.java.time.format.TestUnicodeExtension.test_withLocale(dz, null, null, null, null, ""??????????, ????????2017 ??????????? ????10 ??????? 3 ?????? 15:00 ?????? ???????????????????????????????????????""): failure
java.time.format.DateTimeParseException: Text '??????????, ????????2017 ??????????? ????10 ??????? 3 ?????? 15:...' could not be parsed at index 74

===============================================
java/time/test/java/time/format/TestUnicodeExtension.java
Total tests run: 531, Passes: 519, Failures: 12, Skips: 0
===============================================",,,,,,,,,,,JDK-8315196,JDK-8314410,JDK-8314984,JDK-8314017,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313676,JDK-8268698,,,"2023-07-31 07:29;shade;Test8313402.java;https://bugs.openjdk.org/secure/attachment/104916/Test8313402.java",,,,,,,,,,,,,,,,,,,,,,"0|i32jzf:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-31 04:55;shade;Bisection points to JDK-8268698.;;;","2023-07-31 06:36;shade;This is a minimal hunk that needs to be reverted from JDK-8268698 to make the test pass:

```
diff --git a/src/java.base/share/classes/java/lang/String.java b/src/java.base/share/classes/java/lang/String.java
index 5c234d4dfac..8487711e87e 100644
--- a/src/java.base/share/classes/java/lang/String.java
+++ b/src/java.base/share/classes/java/lang/String.java
@@ -4825,7 +4825,10 @@ public final class String
      * negative or greater than or equal to {@code length}.
      */
     static void checkIndex(int index, int length) {
-        Preconditions.checkIndex(index, length, Preconditions.SIOOBE_FORMATTER);
+        if (index < 0 || index >= length) {
+            throw new StringIndexOutOfBoundsException(""index "" + index +
+                                                      "", length "" + length);
+        }
     }
 
     /*
```;;;","2023-07-31 07:30;shade;Attached the minimized test case derived from the original jtreg.

$ build/macosx-aarch64-server-fastdebug/images/jdk/bin/java -XX:TieredStopAtLevel=1 Test8313402.java
Exception in thread ""main"" java.time.format.DateTimeParseException: Text 'གཟའ་པ་སངས་, སྤྱི་ལོ་2017 ཟླ་བརྒྱད་པ་ ཚེས་10 ཆུ་ཚོད་ 3 སྐར་མ་ 15:...' could not be parsed at index 74
	at java.base/java.time.format.DateTimeFormatter.parseResolved0(DateTimeFormatter.java:2108)
	at java.base/java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:1936)
	at Test8313402.main(Test8313402.java:18)

$ build/macosx-aarch64-server-fastdebug/images/jdk/bin/java -XX:TieredStopAtLevel=1 -XX:DisableIntrinsic=_getCharStringU Test8313402.java
<OK>

$ build/macosx-aarch64-server-fastdebug/images/jdk/bin/java -XX:TieredStopAtLevel=4 Test8313402.java
<OK>;;;","2023-07-31 08:18;shade;Oh, I have a hypothesis: getCharStringU emits the mismatched LoadIndexed op (reading char from byte[]). LoadIndexed is hashed and subject to GVN. The hash for LoadIndexed does not take ""mismatched"" into account, so we may fold it with another LoadIndexed (e.g. reading byte from byte[]), breaking correctness.

-XX:-UseGlobalValueNumbering fixes the test. 

This patch also fixes the test:

```
diff --git a/src/hotspot/share/c1/c1_Instruction.hpp b/src/hotspot/share/c1/c1_Instruction.hpp
index 6067767da4e..da8ad195008 100644
--- a/src/hotspot/share/c1/c1_Instruction.hpp
+++ b/src/hotspot/share/c1/c1_Instruction.hpp
@@ -954,7 +954,7 @@ LEAF(LoadIndexed, AccessIndexed)
   ciType* declared_type() const;
 
   // generic;
-  HASHING3(LoadIndexed, true, type()->tag(), array()->subst(), index()->subst())
+  HASHING3(LoadIndexed, !mismatched(), type()->tag(), array()->subst(), index()->subst())
 };
```
;;;","2023-07-31 08:43;shade;Actually:

```
$ build/macosx-aarch64-server-fastdebug/images/jdk/bin/java -XX:TieredStopAtLevel=1 -XX:CICompilerCount=1 -XX:+PrintCompilation -XX:+PrintIR0 -XX:+PrintValueNumbering Test8313402.java

. 8    0    a141   a102._20 ([) value
. 2    0    i144   a141.length
  2    0    a148   <instance 0x0000000159f04470 klass=jdk/internal/util/Preconditions$4>
. 5    0    i149   Preconditions.Preconditions_checkIndex(i110, i144, a148)
. 8    0    i152   a141[i110](i144) (B) [rc] ; <---- This

...

. 17   0    a162   a102._20 ([) value
. 1    0    i169   a162.length
  2    0    i170   1
  3    0    i171   i169 >> i170
  2    0    a176   <instance 0x0000000159f04470 klass=jdk/internal/util/Preconditions$4>
. 5    0    i177   Preconditions.Preconditions_checkIndex(i110, i171, a176)
. 7    0    i180   a162[i110] (C)     ; <----- This

...

Value Numbering: LoadIndexed i180 equal to i152  (size 47, entries 27, nesting-diff 0)
```

i180 is from intrinsic, having type (C) and not having length. 
i152 is from somewhere else, having type (B) and having length (implies arraylength check).

Unclear why these are folded together, given HASHING3 should have discriminated on type()->tag(). 

EDIT: type()->tag() is actually ""int"" for both (B) and (C)! The conversion from elt_type() loses the distinction between byte and char.;;;","2023-07-31 09:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15091
Date: 2023-07-31 16:47:56 +0000;;;","2023-08-01 12:24;dlong;ILW = incorrect result; reproduces reliably; disable intrinsic = HMM = P2;;;","2023-08-02 04:23;dukebot;Changeset: 46fbedb2
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-08-02 11:21:34 +0000
URL:       https://git.openjdk.org/jdk/commit/46fbedb2be98a9b8aba042fa9f90c3b25c312cd6
;;;","2023-08-02 06:40;thartmann;[~shade] should this be backported to JDK 21?;;;","2023-08-02 06:42;shade;Yes, and downwards to 17u and 11u. I am not sure we want to have it in 21 GA, as it would probably invalidate some testing. Can be safe to 21.0.1.;;;","2023-08-02 07:00;thartmann;Makes sense. For JDK 21 GA we either need approval for integration or a defer request since this is a P2. I think it would be fine to still integrate it. GAC (initial build) is only next week (Aug 10).;;;","2023-08-03 02:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/37
Date: 2023-08-03 09:32:59 +0000;;;","2023-08-03 04:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1636
Date: 2023-08-03 11:21:29 +0000;;;","2023-08-04 03:01;shade;Fix Request (21u)

Fixes the important C1 bug. Patch applies cleanly. New test fails without the fix, passes with it. Other tests pass too.;;;","2023-08-09 10:44;thartmann;Deferral Request (JDK 21)
Non-trivial fix that needs some more bake time before being released and will therefore be integrated into JDK 21.0.1.;;;","2023-08-14 06:57;shade;Fix Request (17u)

Same reason as 21u. Applies cleanly. Testing passes.;;;",,,,,,,
Array Elements in OldObjectSample event has the incorrect description,JDK-8313394,5106986,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tkiriyama,tkiriyama,tkiriyama,2023-07-31 00:04,2023-08-10 09:13,2023-10-01 09:55,2023-08-03 20:21,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,"The value of ""arrayElements"" which is a field of ""OldObjectSample"" of JFR event is different from the description.

The description attribute of ""arrayElements"" is below.
""If the object is an array, the number of elements, or -1 if it is not an array""
https://github.com/openjdk/jdk/blob/a9d21c61fb12a11e18c6bb8aa903e5a8e42473f1/src/hotspot/share/jfr/metadata/metadata.xml#L743  
This description is returned by ValueDescriptor.getDescription().

But actually, if the object is not an array, ""arrayElements"" is -2147483648, or INT_MIN.

RecordedEvent.toString() outputs N/A if the field value is INT_MIN.

jdk.OldObjectSample {
  startTime = 10:42:35.890 (2023-07-19)
  allocationTime = 10:42:35.872 (2023-07-19)
  objectSize = 24 bytes
  objectAge = 18.1 ms
  lastKnownHeapUsage = 512.0 kB
  object =  [
    java.lang.String
  ]
  arrayElements = N/A
  root = N/A
  eventThread = ""main"" (javaThreadId = 1)
}

However, RecordedEvent.getValue(""arrayElements"") outputs -2147483648. Also, ""arrayElements"" is displayed as -2147483648 on the JMC browser.
This result is different from the description of OldObjectSample.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32jxf:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-07-31 01:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15084
Date: 2023-07-31 07:20:45 +0000;;;","2023-08-03 20:21;dukebot;Changeset: e8c325de
Author:    KIRIYAMA Takuya <kiriyama.takuya@fujitsu.com>
Committer: Erik Gahlin <egahlin@openjdk.org>
Date:      2023-08-04 03:19:53 +0000
URL:       https://git.openjdk.org/jdk/commit/e8c325dea39f959ab6bb310c3913b98655e95734
;;;",,,,,,,,,,,,,,,,,,,,,
--enable-ccache's CCACHE_BASEDIR breaks builds,JDK-8313374,5106959,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jkratochvil,jkratochvil,jkratochvil,2023-07-29 06:55,2023-08-28 14:54,2023-10-01 09:55,2023-08-22 23:27,,,,,,,22,infrastructure,,0,,,,,,,,,,,,,,,,,,"With ccache enabled the dependencies no longer work.

This leads to mysterious compilation errors where one has to `rm -rf build/XXX` and rebuild it from scratch.

I am pretty sure in some cases these broken dependencies lead even to segfaulting code which again gets fixed by `rm -rf build/XXX`. Unfortunately I do not have now a reproducer for such case.

man ccache even documents this problem:
  there might be cases where things break. One known issue is that absolute paths are not reproduced in dependency files

I believe the whole --enable-ccache code should be dropped as default ccache flags is up to ccache upstream, OS vendor and developer's preferences but the ccache defaults should not be quietly changed by the compiled package.


# Tested on Fedora 38 x86_64
git checkout master # ad34be1f329edc8e7155983835cc70d733c014b8
patch -p1 <repro.patch
git checkout -b master-ccache
git commit -a --allow-empty-message -m ''
rm -rf ~/.ccache ~/.cache/ccache
(set -ex;KIND=release;rm -rf build/linux-x86_64-server-$KIND;export PATH=""$(echo ""$PATH""|sed 's#:/usr/lib64/ccache:#:#')"";bash configure --disable-precompiled-headers --enable-ccache --with-debug-level=$KIND --with-boot-jdk=/usr/lib/jvm/java-20;MAKEFLAGS= time make -C build/linux-x86_64-server-$KIND JOBS=32 images)
git checkout master
(set -ex;KIND=release;export PATH=""$(echo ""$PATH""|sed 's#:/usr/lib64/ccache:#:#')"";MAKEFLAGS= time make -C build/linux-x86_64-server-$KIND JOBS=32 images)

->

Updating support/modules_libs/java.base/server/libjvm.so due to 1 file(s)
/usr/bin/ld: openjdk-git/build/linux-x86_64-server-release/hotspot/variant-server/libjvm/objs/g1CollectedHeap.o: in function `G1CollectedHeap::wait_for_collection_finish()':
make/hotspot/../../src/hotspot/share/gc/g1/g1CollectedHeap.hpp:291: undefined reference to `G1UncommitRegionTask::wait_if_active()'
collect2: error: ld returned 1 exit status
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315060,,,,"2023-07-29 06:57;jkratochvil;repro.patch;https://bugs.openjdk.org/secure/attachment/104906/repro.patch",,,,,,,,,,,,,,,,,linux,,,,,"0|i32jrf:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-07-29 07:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15080
Date: 2023-07-29 13:58:37 +0000;;;","2023-08-22 23:27;dukebot;Changeset: 571c435e
Author:    Jan Kratochvil <jkratochvil@openjdk.org>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2023-08-23 06:26:18 +0000
URL:       https://git.openjdk.org/jdk/commit/571c435e1a34dcf08fd7545d531c258c9116ea79
;;;",,,,,,,,,,,,,,,,,,,,,
(fc) FileChannel.size returns 0 on block special files,JDK-8313368,5106785,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,webbuggrp,webbuggrp,2023-07-27 05:30,2023-08-10 06:06,2023-10-01 09:55,2023-08-02 08:29,20,21,,,,,22,core-libs,,0,additional-information-received,amazon-interest,dcsaw,regression,reproducer-yes,webbug,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS Fedora 34
Java 20.0.1+9 (temurin build) (but issue seems to be relevant for 20.0.2 also)

A DESCRIPTION OF THE PROBLEM :
The implementation of FileChannel.size should use ioctl(BLKGETSIZE64) for block special devices.
For java 20 it's never called (checked with strace)

Looks like a regression from https://github.com/openjdk/jdk20/commit/48cc15602b62e81bb179ca9570a1e7d8bbf4d6df

Java 19 (https://github.com/openjdk/jdk19/blob/master/src/java.base/unix/native/libnio/ch/FileDispatcherImpl.c) imports  `<linux/fs.h>` which includes definition of `BLKGETSIZE64`
Java 20 (https://github.com/openjdk/jdk20/blob/master/src/java.base/unix/native/libnio/ch/UnixFileDispatcherImpl.c) doesn't import, so BLKGETSIZE64 is never defined and ioctl is never called

REGRESSION : Last worked in version 20

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
- create block device with non-empty size
- check `blockdev --getsize64 /dev/sample.block` has size not 0
- run `java  SizeError.java`

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Prints size
ACTUAL -
Prints zero and ""WRONG""

---------- BEGIN SOURCE ----------
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.nio.file.Path;

public class SizeError {
	public static void main(String[] args) throws IOException {
		var ch = FileChannel.open(Path.of(""/dev/sample.block""));
		var size = ch.size();
		System.out.println(size);
		if (size == 0L) System.out.println(""WRONG"");
	}
}
---------- END SOURCE ----------

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293331,,,,"2023-07-28 19:37;tongwan;SizeError.java;https://bugs.openjdk.org/secure/attachment/104905/SizeError.java",,,,,,,generic,,,,,,,b17,20,,linux,,,,,"0|i32isz:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-07-27 22:47;tongwan;Requested more details of creating block device with non-empty size from the submitter.;;;","2023-07-28 19:33;tongwan;Additional information from the submitter:
There are 2 options:
- you can use any existing block device (something like `/dev/sda`) and call java with `sudo`
- create new one
    ```
    fallocate -l 10M /var/tmp/test.img
sudo losetup --find --show /var/tmp/test.img
sudo chmod 444 /dev/loop0

   ➜  /usr/bin/java SizeError.java 
   10485760
   ➜ /home/evanslo/.jdks/openjdk-20.0.2/bin/java SizeError.java 
   0
   WRONG
;;;","2023-07-28 19:36;tongwan;The observations on Ubuntu:
JDK 20ea+16: Passed.
JDK 20ea+17: Failed, 0 WRONG returned.
JDK 21ea+20: Failed.;;;","2023-07-29 05:24;alanb;Probably not a main stream usage to have a FileChannel to a block special device but the issue is a remainder that the JDK needs a lot more tests in this area to ensure that any changes catch issues like this.;;;","2023-07-31 11:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15092
Date: 2023-07-31 18:16:49 +0000;;;","2023-08-02 08:29;dukebot;Changeset: 4ba81f63
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-08-02 15:25:59 +0000
URL:       https://git.openjdk.org/jdk/commit/4ba81f631f572d870d0f2c96fefe0cabc55e1841
;;;",,,,,,,,,,,,,,,,,
SuperWord fails due to CMove without matching Bool pack,JDK-8313345,5106930,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,hgreule,hgreule,2023-07-28 10:56,2023-08-24 02:08,2023-10-01 09:55,2023-08-08 22:17,21,22,,,,,22,hotspot,,0,c2,c2-superword,hgupdate-sync,jdk21-fix-request,jdk21-fix-yes,oracle-triage-17,oracle-triage-22,regression,,,,,,,,,,"After JDK-8306302, I'm encountering crashes on certain aarch64 systems:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (../../src/hotspot/share/opto/superword.cpp:2788), pid=2695887, tid=2695905
#  assert(p_bol != nullptr) failed: CMove must have matching Bool pack
#
# JRE version: OpenJDK Runtime Environment (21.0.1) (slowdebug build 21.0.1-testing-builds.shipilev.net-openjdk-jdk21-b1-20230723)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 21.0.1-testing-builds.shipilev.net-openjdk-jdk21-b1-20230723, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x14dc6ac]  SuperWord::output()+0xea8
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/ubuntu/mc/debug_server/core.2695887)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xmx8G -Xms4G -XX:PrintIdealGraphLevel=3 -XX:PrintIdealGraphFile=superword_crash.xml paper.jar --nogui

Host: sirywell-vps, AArch64, 4 cores, 23G, Ubuntu 20.04.6 LTS
Time: Wed Jul 26 19:30:34 2023 UTC elapsed time: 379.393956 seconds (0d 0h 6m 19s)

---------------  T H R E A D  ---------------

Current thread (0x0000ffff1849a7b0):  JavaThread ""C2 CompilerThread1"" daemon [_thread_in_native, id=2695905, stack(0x0000ffff49d92000,0x0000ffff49f90000) (2040K)]


Current CompileTask:
C2: 379394 12918       4       net.minecraft.world.level.levelgen.DensityFunctions$PureTransformer::fillArray (40 bytes)

Stack: [0x0000ffff49d92000,0x0000ffff49f90000],  sp=0x0000ffff49f8a530,  free space=2017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x14dc6ac]  SuperWord::output()+0xea8  (superword.cpp:2788)
V  [libjvm.so+0x14d427c]  SuperWord::SLP_extract()+0x358  (superword.cpp:667)
V  [libjvm.so+0x14d2934]  SuperWord::transform_loop(IdealLoopTree*, bool)+0x51c  (superword.cpp:178)
V  [libjvm.so+0x10ceae0]  PhaseIdealLoop::build_and_optimize()+0x1724  (loopnode.cpp:4661)
V  [libjvm.so+0x8eba44]  PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&, LoopOptsMode)+0x148  (loopnode.hpp:1124)
V  [libjvm.so+0x8ebc40]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x28  (loopnode.hpp:1203)
V  [libjvm.so+0x8dc140]  Compile::optimize_loops(PhaseIterGVN&, LoopOptsMode)+0x8c  (compile.cpp:2156)
V  [libjvm.so+0x8dce94]  Compile::Optimize()+0xbb4  (compile.cpp:2386)
V  [libjvm.so+0x8d6348]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1138  (compile.cpp:842)
V  [libjvm.so+0x798278]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x14c  (c2compiler.cpp:118)
V  [libjvm.so+0x8f8388]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x768  (compileBroker.cpp:2265)
V  [libjvm.so+0x8f71c8]  CompileBroker::compiler_thread_loop()+0x3c4  (compileBroker.cpp:1944)
V  [libjvm.so+0x91c968]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0xa4  (compilerThread.cpp:58)
V  [libjvm.so+0xd7bea8]  JavaThread::thread_main_inner()+0x174  (javaThread.cpp:719)
V  [libjvm.so+0xd7bd28]  JavaThread::run()+0x1e4  (javaThread.cpp:704)
V  [libjvm.so+0x1548cb4]  Thread::call_run()+0x1c4  (thread.cpp:217)
V  [libjvm.so+0x1258b84]  thread_native_entry(Thread*)+0x194  (os_linux.cpp:778)
C  [libpthread.so.0+0x7624]  start_thread+0x184

I was able to reproduce this on OCI Ampere A1 Compute instances as well as on a Raspberry Pi 4 model B. It does not crash on Apple M1.

While the crash above comes from a slowdebug build, normal builds (manually built from master at that point) fail with a SIGSEGV:



#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000ffff9847664c, pid=674132, tid=674405
#
# JRE version: OpenJDK Runtime Environment (22.0) (build 22-internal-adhoc.ubuntu.jdk)
# Java VM: OpenJDK 64-Bit Server VM (22-internal-adhoc.ubuntu.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0xd5664c]  SuperWord::vector_opd(Node_List*, int)+0x24
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/ubuntu/mc/debug_server/core.674132)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xmx8G -Xms4G -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -Daikars.new.flags=true -Dusing.aikars.flags=https://mcflags.emc.gs -Djava.net.preferIPv4Stack=true -XX:NativeMemoryTracking=summary paper.jar --nogui

Host: AArch64, 4 cores, 23G, Ubuntu 20.04.6 LTS
Time: Sun Jul 23 07:26:29 2023 UTC elapsed time: 23.546695 seconds (0d 0h 0m 23s)

---------------  T H R E A D  ---------------

Current thread (0x0000ffff207811d0):  JavaThread ""C2 CompilerThread1"" daemon [_thread_in_native, id=674405, stack(0x0000ffff601bf000,0x0000ffff603bd000) (2040K)]


Current CompileTask:
C2:  23546 11581 %     4       net.minecraft.world.level.levelgen.DensityFunctions$p::a @ 15 (40 bytes)

Stack: [0x0000ffff601bf000,0x0000ffff603bd000],  sp=0x0000ffff603b7fc0,  free space=2019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd5664c]  SuperWord::vector_opd(Node_List*, int)+0x24  (superword.cpp:2873)
V  [libjvm.so+0xd5f528]  SuperWord::output()+0xd88  (superword.cpp:2652)
V  [libjvm.so+0xa87f70]  PhaseIdealLoop::build_and_optimize()+0xe40  (loopnode.cpp:4656)
V  [libjvm.so+0x5be40c]  Compile::Optimize()+0x994  (loopnode.hpp:1114)
V  [libjvm.so+0x5bf90c]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xbcc  (compile.cpp:850)
V  [libjvm.so+0x4f5a48]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xe0  (c2compiler.cpp:119)
V  [libjvm.so+0x5c505c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x9b4  (compileBroker.cpp:2265)
V  [libjvm.so+0x5c7e0c]  CompileBroker::compiler_thread_loop()+0x57c  (compileBroker.cpp:1944)
V  [libjvm.so+0x829234]  JavaThread::thread_main_inner() [clone .part.0]+0xa4  (javaThread.cpp:720)
V  [libjvm.so+0xda6a60]  Thread::call_run()+0xa8  (thread.cpp:217)
V  [libjvm.so+0xb97384]  thread_native_entry(Thread*)+0xdc  (os_linux.cpp:783)
C  [libpthread.so.0+0x7624]  start_thread+0x184

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000010


I sadly don't have a proper reproducer other than starting up a fresh minecraft server. My previous attempts weren't successful. I'll attach IGV graphs from the method that failed to compile (fillArray.xml).

Let me know if there is more information I can provide.


",,,,,,,,,,,JDK-8313999,JDK-8314429,,,,,,,,,,,,,,,,,,,,,,JDK-8306302,,,,,,,,"2023-08-04 09:48;hgreule;Reproducer.java;https://bugs.openjdk.org/secure/attachment/105019/Reproducer.java","2023-08-06 07:13;epeter;Reproducer2.java;https://bugs.openjdk.org/secure/attachment/105022/Reproducer2.java","2023-07-28 10:33;hgreule;fillArray.xml;https://bugs.openjdk.org/secure/attachment/104902/fillArray.xml","2023-08-02 06:40;hgreule;hs_err_pid2695887.log;https://bugs.openjdk.org/secure/attachment/104939/hs_err_pid2695887.log","2023-08-02 06:40;hgreule;replay_pid2695887.log;https://bugs.openjdk.org/secure/attachment/104940/replay_pid2695887.log",,,generic,,,,,,,b25,21,,,,,,,"0|i32jkz:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-02 03:47;thartmann;[~hgreule] could you please share the hs_err* and replay_pid* files?;;;","2023-08-02 07:07;thartmann;Thanks. I would also need the net/minecraft/world/level/levelgen/DensityFunctions class. Is that publicly available somewhere?;;;","2023-08-02 11:43;hgreule;Officially, the Minecraft server software is only provided obfuscated. If you want to dig through (decompiled, remapped) code, there are several tools, e.g. https://github.com/PaperMC/mache (this seems to work for me), or https://github.com/SpongePowered/VanillaGradle (I didn't get that running). 

That's all far from perfect, but I still wasn't successful trying to reduce the code to something smaller that can be shared easily.;;;","2023-08-03 04:53;chagedorn;I was not able to reproduce this with replay compilation due to other failures during replay compilation. [~hgreule] could you share the steps you tried to reliably reproduce this?;;;","2023-08-03 06:16;hgreule;I'm not experienced with the replay compilation, so I can't be of any help there. If you want to run a Minecraft server to reproduce the issue, you need to:
1. Create a directory you want to work in.
2. Visit https://www.minecraft.net/en-us/download/server and download the server jar into the directory created in step 1.
3. You need a file ""eula.txt"" in the same directory, with the content ""eula=true"" to agree to the eula (https://www.minecraft.net/en-us/eula).
4. Run the server jar with ""java -jar server.jar"".
5. The server should start now and crash after a while (it might take multiple minutes when using a slowdebug build to get to the point where it crashes)

Note 1: If you want to rerun the server, you first have to delete the ""world"" directory that was created before. Otherwise, the relevant code won't be called during the startup.
Note 2: The crash in that case might differ from my crashes to some extent due to obfuscation (dhe$p::a instead of net.minecraft.world.level.levelgen.DensityFunctions$p::a).
Note 3: As this seems to be heavily CPU specific, here is the /proc/cpuinfo (omitted the other identical cores) of the OCI instance:
processor       : 0
BogoMIPS        : 50.00
Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp cpuid asimdrdm lrcpc dcpop asimddp ssbs
CPU implementer : 0x41
CPU architecture: 8
CPU variant     : 0x3
CPU part        : 0xd0c
CPU revision    : 1

as well as  the Raspberry Pi:

processor       : 0
BogoMIPS        : 108.00
Features        : fp asimd evtstrm crc32 cpuid
CPU implementer : 0x41
CPU architecture: 8
CPU variant     : 0x0
CPU part        : 0xd08
CPU revision    : 3

If there is any other way I can help, please let me know.;;;","2023-08-03 15:59;epeter;I'm trying to guess a reproducer. So far no result. But I found this instead: JDK-8313720;;;","2023-08-03 16:05;epeter;[~hgreule] Could you run this with ""-XX:+TraceSuperWord""? The log may get very long, so not sure if that is feasible.

In the ""fillArray.xml"" I found this partial jasm code:

0 fast_aload_0
1 invokeinterface
6 aload_1
7 aload_2
8 invokeinterface
13 iconst_0
14 istore_3
15 iload_3
16 aload_1
17 arraylength
18 if_icmpge
21 aload_1
22 iload_3
23 fast_aload_0
24 aload_1
25 iload_3
26 daload
27 invokeinterface
32 dastore
33 iinc
36 goto
39 return

Is there a chance we could extract more details? For example it would be interesting to see what ""27 invokeinterface"" calls.;;;","2023-08-04 09:49;hgreule;Good news! I spent another few hours and actually got a reproducer! I attached the Reproducer.java file. This file reliably causes a JVM crash on the mentioned versions/platforms for me.;;;","2023-08-04 09:50;hgreule;[~epeter] I assume the -XX:+TraceSuperWord output from the original isn't needed anymore? Please let me know if you need further information.;;;","2023-08-04 16:00;epeter;[~hgreule] Thanks very much for the reproducer. I get the same failure on my x64 machine:

./java -XX:CompileCommand=PrintCompilation,*::* -XX:+UseVectorCmov -XX:+UseCMoveUnconditionally Reproducer.java

The reason it only ran on Aarch64 machines for you is that there the flags ""-XX:+UseVectorCmov -XX:+UseCMoveUnconditionally"" are set by default.

Yes, I don't need the flag output for  -XX:+TraceSuperWord, I can debug it myself. Thanks again for the work it took for the reproducer, that is a big help!;;;","2023-08-04 16:25;epeter;./java -XX:CompileCommand=PrintCompilation,Reproducer*::* -XX:CompileCommand=CompileOnly,Reproducer*::fill -XX:-TieredCompilation -Xbatch -XX:+UseVectorCmov -XX:+UseCMoveUnconditionally -XX:+TraceSuperWord Reproducer.java

It looks like the CMove merges the results of the mapSingle methods. We have two Records that implement the Fill interface. The two implementations are inlined bimorphically with a If/Region. The created diamond is then CMoved.

We have a CmpP and Bool outside the loop that determines all CMoveD inside the loop. The CmpP compares the class of the record, and decides which inlined implementation of mapSingle to choose.;;;","2023-08-06 07:14;epeter;I simplified the reproducer a bit more:

./java -XX:CompileCommand=PrintCompilation,Reproducer2*::* -XX:CompileCommand=CompileOnly,Reproducer2*::fill -XX:-TieredCompilation -Xbatch -XX:+UseVectorCmov -XX:+UseCMoveUnconditionally -XX:+TraceSuperWord -XX:+TraceLoopOpts -XX:+PrintInlining Reproducer2.java;;;","2023-08-06 23:15;chagedorn;[~hgreule] great work to extract a reproducer, thanks!;;;","2023-08-06 23:23;chagedorn;ILW = Crash in superword, observed with Minecraft server, use -XX:-UseSuperWord = HMM = P2;;;","2023-08-06 23:54;thartmann;> The reason it only ran on Aarch64 machines for you is that there the flags ""-XX:+UseVectorCmov -XX:+UseCMoveUnconditionally"" are set by default.

[~epeter] Both flags are off by default on all platforms, right?;;;","2023-08-08 03:25;thartmann;I can reproduce the issue on AArch64 without any flags. On x64, we bail out in PhaseIdealLoop::conditional_move because the cost computed via Matcher::float_cmove_cost() is always set to ConditionalMoveLimit:
https://github.com/openjdk/jdk/blob/055b4b426cbc56d97e82219f3dd3aba1ebf977e4/src/hotspot/cpu/x86/matcher_x86.hpp#L81

But on AArch64, it's set to 0:
https://github.com/openjdk/jdk/blob/055b4b426cbc56d97e82219f3dd3aba1ebf977e4/src/hotspot/cpu/aarch64/matcher_aarch64.hpp#L70

We can avoid the bailout on x64 by using -XX:+UseCMoveUnconditionally.

I'll send out a fix for review shortly. We need to get this in before RC on Thursday.;;;","2023-08-08 03:53;thartmann;Workaround: -XX:ConditionalMoveLimit=0;;;","2023-08-08 03:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15189
Date: 2023-08-08 10:50:19 +0000;;;","2023-08-08 07:45;thartmann;Fix Request (JDK 21):
This patch fixes a regression in C2's superword analysis in JDK 21 that leads to a VM crash. Since it occurs with Minecraft, it's likely to also affect other Java applications. The fix is low risk because it's a simple bailout from the superword optimization. Tested up to tier6 + stress jobs (still running).;;;","2023-08-08 15:39;kvn;Fix Request for JDK 21 approved.;;;","2023-08-08 22:17;dukebot;Changeset: d3b578f1
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-08-09 05:16:02 +0000
URL:       https://git.openjdk.org/jdk/commit/d3b578f1c9d296ce8f99c70069df886e9f2dbef9
;;;","2023-08-08 22:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/168
Date: 2023-08-09 05:28:42 +0000;;;",
javac -g on a java file which uses unnamed variable leads to ClassFormatError when launching that class,JDK-8313323,5106906,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jpai,jpai,2023-07-28 05:38,2023-09-12 11:22,2023-10-01 09:55,2023-09-04 00:20,21,,,,,,22,tools,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,"JEP 443 https://openjdk.org/jeps/443 introduced the ""Unnamed Patterns and Variables"" preview feature. Consider the following trivial code (also attached as Foo.java):

public class Foo {
   public static void main(final String[] args) throws Exception {
        final String _ = ""foo bar"";        
        System.out.println(""Demo done"");
   }
}

This uses a unnamed variable.

Now compile it using:

javac -g --enable-preview -source 21 Foo.java

Notice the -g option. The compilation goes through fine. Now try to run that class:

java --enable-preview Foo

This fails with the following error

Error: LinkageError occurred while loading main class Foo
	java.lang.ClassFormatError: Illegal field name """" in class Foo

Everything, including running the compiled class, works fine if -g is left out during compilation.

javac version in use:

javac -version                               
javac 21-ea

java version in use:

java -version 
openjdk version ""21-ea"" 2023-09-19
OpenJDK Runtime Environment (build 21-ea+33-2490)
OpenJDK 64-Bit Server VM (build 21-ea+33-2490, mixed mode, sharing)",,,,,,,,,,,JDK-8315671,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-07-28 05:39;jpai;Foo.java;https://bugs.openjdk.org/secure/attachment/104900/Foo.java",,,,,,,,,,,,,,,,,,,,,,"0|i32jfn:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-07-30 23:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15083
Date: 2023-07-31 06:52:43 +0000;;;","2023-09-04 00:20;dukebot;Changeset: adfc1d6c
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-09-04 07:17:28 +0000
URL:       https://git.openjdk.org/jdk/commit/adfc1d6cd29181c729030d4cbafc8ecf349abab9
;;;","2023-09-04 02:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/128
Date: 2023-09-04 09:15:45 +0000;;;","2023-09-04 05:59;jlahoda;Fix Request

javac is producing invalid classfiles, so it seems desirable to backport, even despite the feature being preview. The fix should generally be safe, and not affect anything besides unnamed variables. Standard javac tests are passing.;;;",,,,,,,,,,,,,,,,,,,
Add missing classpath exception copyright header,JDK-8313312,5106876,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,amitkumar,amitkumar,amitkumar,2023-07-28 02:28,2023-08-24 11:08,2023-10-01 09:55,2023-08-02 22:49,21,,,,,,22,other-libs,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,"Hi,

JDK21 has a copyright issue with following files, where GPLv2 is present but Classpath exception is missing,

Please, if someone can help to fix these issues.

src/java.base/share/classes/jdk/internal/classfile/components/ClassRemapper.java
src/java.base/share/classes/jdk/internal/classfile/components/CodeLocalsShifter.java
src/java.base/share/classes/jdk/internal/classfile/components/CodeRelabeler.java
src/java.base/share/classes/jdk/internal/classfile/components/CodeStackTracker.java
src/java.base/share/classes/jdk/internal/classfile/impl/ClassHierarchyImpl.java
src/java.base/share/classes/jdk/internal/classfile/impl/ClassRemapperImpl.java
src/java.base/share/classes/jdk/internal/classfile/impl/CodeLocalsShifterImpl.java
src/java.base/share/classes/jdk/internal/classfile/impl/CodeRelabelerImpl.java
src/java.base/share/classes/jdk/internal/classfile/impl/CodeStackTrackerImpl.java
src/java.base/share/classes/jdk/internal/classfile/impl/StackCounter.java
src/java.base/share/classes/jdk/internal/classfile/impl/StackMapGenerator.java
src/java.base/share/classes/jdk/internal/classfile/impl/verifier/VerificationWrapper.java
src/java.base/share/classes/jdk/internal/foreign/abi/riscv64/RISCV64Architecture.java
src/java.base/share/classes/jdk/internal/foreign/abi/riscv64/linux/LinuxRISCV64CallArranger.java
src/java.base/share/classes/jdk/internal/foreign/abi/riscv64/linux/LinuxRISCV64Linker.java
src/java.base/share/classes/jdk/internal/foreign/abi/riscv64/linux/TypeClass.java
src/java.base/share/classes/jdk/internal/util/Architecture.java
src/java.base/share/classes/jdk/internal/util/OSVersion.java
src/java.base/share/classes/jdk/internal/util/OperatingSystem.java
src/java.base/share/classes/jdk/internal/util/PlatformProps.java

Mail: https://mail.openjdk.org/pipermail/jdk-dev/2023-July/008040.html
",,,,,,,,,,,JDK-8313726,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32jd7:",9223372036854775807,b10,,,,,,,,,,,"2023-07-28 06:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15070
Date: 2023-07-28 13:02:20 +0000;;;","2023-08-01 23:41;amitkumar;Fix Request (JDK 21): 
This is requested change as GPL v2 code is present without a Classpath exception. This is no/low risk change. ;;;","2023-08-02 22:49;dukebot;Changeset: 53ca75b1
Author:    Amit Kumar <amitkumar@openjdk.org>
Date:      2023-08-03 05:47:22 +0000
URL:       https://git.openjdk.org/jdk/commit/53ca75b18ea419d469758475fac8352bf915b484
;;;","2023-08-08 09:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/166
Date: 2023-08-08 15:55:10 +0000;;;","2023-08-21 11:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/71
Date: 2023-08-17 19:21:55 +0000;;;","2023-08-21 11:45;rriggs;Fix Request (JDK 21u):
This is requested change as GPL v2 code is present without a Classpath exception. This is no/low risk change. 

PR: https://github.com/openjdk/jdk21u/pull/71;;;",,,,,,,,,,,,,,,,,
java/util/Formatter/Padding.java fails on some Locales,JDK-8313307,5106869,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2023-07-28 01:47,2023-09-14 06:04,2023-10-01 09:55,2023-07-31 01:38,21,22,,,,,22,core-libs,,0,amazon-interest,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,testbug,ursqe-triaged,,,,,,,,,,,,"Fails like this:

```
$ CONF=macosx-aarch64-server-fastdebug make images test TEST=java/util/Formatter/Padding.java

...
STARTED    Padding::padding '[216] -0000001.2, % 010.1f, -1.2'
org.opentest4j.AssertionFailedError: expected: <-0000001.2> but was: <-0000001,2>
```

Looks like a locale problem in test.",,,,,,,,,,,JDK-8314252,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299677,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32jbn:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2023-07-28 01:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15066
Date: 2023-07-28 08:49:20 +0000;;;","2023-07-31 01:38;dukebot;Changeset: 408987e1
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-07-31 08:35:31 +0000
URL:       https://git.openjdk.org/jdk/commit/408987e1ca9a42db8019b1bd7e52f85607975dde
;;;","2023-08-10 07:30;shade;Fix Request (21u)

Fixes the recent testbug. Applies cleanly. Test starts to pass.;;;","2023-08-10 07:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/51
Date: 2023-08-10 14:26:28 +0000;;;",,,,,,,,,,,,,,,,,,,
Misleading exception message from STS.Subtask::get when task forked after shutdown,JDK-8313290,5106810,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,webbuggrp,webbuggrp,2023-07-27 10:10,2023-08-24 00:23,2023-10-01 09:55,2023-08-19 11:43,21,,,,,,22,core-libs,,0,21ea,amazon-interest,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Ubuntu 22.04
openjdk 21-ea 2023-09-19
OpenJDK Runtime Environment (build 21-ea+32-2482)
OpenJDK 64-Bit Server VM (build 21-ea+32-2482, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
When using a StructuredTaskScope after shutdown, I get a misleading error message when calling Subtask.get(): ""IllegalStateException: Owner did not join after forking subtasks"".

See example code below. In the code, join() is called right before Subtask.get(), so the error message is clearly not incorrect (in addition to not being helpful).

I'd expect an exception that indicates that the StructuredTaskScope is already shutdown.

Obviously, this is a rather unlikely usage pattern (shutdown() + fork()), but there might be more meaningful cases where this occurs, and then a better exception message might be helpful.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
See example code.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
An exception that indicates that the StructuredTaskScope is shutdown.
ACTUAL -
Exception in thread ""main"" java.lang.IllegalStateException: Owner did not join after forking subtasks
	at java.base/java.util.concurrent.StructuredTaskScope.newIllegalStateExceptionNoJoin(StructuredTaskScope.java:439)
	at java.base/java.util.concurrent.StructuredTaskScope.ensureJoinedIfOwner(StructuredTaskScope.java:477)
	at java.base/java.util.concurrent.StructuredTaskScope$SubtaskImpl.get(StructuredTaskScope.java:927)
	at com.example.Test.main(Test.java:17)

---------- BEGIN SOURCE ----------

import java.util.concurrent.ExecutionException;
import java.util.concurrent.StructuredTaskScope;

public class Test {

	public static void main(String[] args) {
		try (var scope = new StructuredTaskScope.ShutdownOnFailure()) {

			scope.shutdown();

			StructuredTaskScope.Subtask<String> subtask = scope.fork(() -> ""result"");

			scope.join().throwIfFailed();

			subtask.get(); // IllegalStateException: Owner did not join after forking subtasks

		} catch (InterruptedException | ExecutionException e) {
			throw new RuntimeException(e);
		}
	}

}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-07-27 21:52;tongwan;Test.java;https://bugs.openjdk.org/secure/attachment/104808/Test.java",,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32iyj:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,,,"2023-07-27 21:51;tongwan;The observations on Windows 11:
JDK 21ea+33: Failed, IllegalStateException observed. ;;;","2023-07-28 13:14;alanb;If a task is forked when the scope is shutdown then the implementation doesn't force a join when it's the first task forked in a new round of forking. Calling Subtask::get correctly throws ISE, it's just that it doesn't hasn't recorded that join has been called.;;;","2023-08-15 23:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15076
Date: 2023-07-28 20:33:01 +0000;;;","2023-08-19 11:43;dukebot;Changeset: ed0f75f2
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-08-19 18:42:43 +0000
URL:       https://git.openjdk.org/jdk/commit/ed0f75f2666f61ec3d8ccb78594a21db9f1be50a
;;;",,,,,,,,,,,,,,,,,,,
Resolve multiple definition of 'normalize' when statically linking JDK native libraries with user code,JDK-8313277,5106832,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiangli,jiangli,jiangli,2023-07-27 15:58,2023-09-18 15:31,2023-10-01 09:55,2023-09-12 02:07,,,,,,,22,core-svc,,0,,,,,,,,,,,,,,,,,,"We encountered following linker error when statically linking JDK/hotspot native libraries with user natives:

ld: error: duplicate symbol: normalize
>>> defined at FileSystemSupport_md.c:112 (/.../src/java.instrument/unix/native/libinstrument/FileSystemSupport_md.c:112)
>>>            libinstrument_relocatable.o:(normalize) in archive .../lib_static/libinstrument.a
>>> defined at adjust.c
>>>            .../adjust.o:(.text+0x0)

https://gitlab.com/graphviz/graphviz/-/blob/main/lib/neatogen/adjust.c#L830 is an example of the code defines 'normalize'.

This is the last set of duplicating symbol issue related to JDK-8303796 that we've noticed with our prototyping for static JDK support on JDK 11. All other issues found with JDK native and hotspot code (not including third party code such as zlib) have been reported with bugs linked in JDK-8303796.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303796,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32j3f:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@dc685aa,,,,,,,,,"2023-08-08 13:36;jiangli;[~sspitsyn] thanks for looking into this. For our prototype, @cjmoon1 made renaming change for resolving the symbol issue:

https://github.com/openjdk/jdk/compare/master...cjmoon1:jdk:fix_normalize;;;","2023-08-08 13:42;jiangli;We haven't seen symbol issues with other functions defined by https://github.com/openjdk/jdk/blob/515add88ed6c290ee90f3d6f522a22971e37a62c/src/java.instrument/share/native/libinstrument/FileSystemSupport.h#L4, however it's probably a good idea to change those as well.;;;","2023-08-08 14:54;jiangli;[~sspitsyn] could you please help sponsor @cjmoon1's change? Or, I can help sponsor.;;;","2023-08-15 22:02;sspitsyn;[~jiangli] Instead of adding the suffix ""_libinstrument"" I'd suggest to add the prefix ""FFS_"" as an abbreviation of the ""FileSystemSupport"". We can use similar approach for other compiled units from libinstrument if needed.
Do you want this in the JDK 22 only or backports are also considered?
I can re-assign this issue to cjmoon1 if needed.;;;","2023-08-17 08:05;jiangli;[~sspitsyn] Thanks for looking into the issue! ""FFS_"" sounds good. No backport is considered at this point. Targeting for JDK 22 is good.

cjmoon1 is not an OpenJDK author and doesn't have access to the bug system yet. If it works better, you can re-assign the bug to me. Thanks.;;;","2023-08-22 18:34;sspitsyn;[~jiangli] Re-assigned the bug to you.;;;","2023-08-29 16:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15477
Date: 2023-08-29 23:37:06 +0000;;;","2023-09-12 02:07;dukebot;Changeset: 455c471e
Author:    Jiangli Zhou <jiangli@openjdk.org>
Date:      2023-09-12 09:06:08 +0000
URL:       https://git.openjdk.org/jdk/commit/455c471ee36e26dd1ece61c615b8421d65359d5d
;;;",,,,,,,,,,,,,,,
C2:  Sinking node may cause required cast to be dropped,JDK-8313262,5106807,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,roland,shade,shade,2023-07-27 09:53,2023-08-29 22:59,2023-10-01 09:55,2023-08-23 02:02,17,17.0.9,21,22,,,22,hotspot,,0,amazon-interest,c2,gc-shenandoah,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-yes,oracle-triage-22,regression,,,,,,,,,"Recent regression, bisected to JDK-8303279.

There are plenty of tier1 tests failing with TEST_VM_OPTS=""-XX:+UseShenandoahGC"".

A sample failure is:

$ CONF=linux-x86_64-server-fastdebug make reconfigure clean test TEST=java/lang/reflect/PublicMethods/PublicMethodsTest.java TEST_VM_OPTS=""-XX:+UseShenandoahGC""

#  Internal Error (/home/shipilev/shipilev-jdk/src/hotspot/share/opto/subtypenode.cpp:37), pid=10644, tid=10672
#  assert(sub_t != Type::TOP && !TypePtr::NULL_PTR->higher_equal(sub_t)) failed: should be not null
#
# JRE version: OpenJDK Runtime Environment (22.0) (fastdebug build 22-internal-adhoc.shipilev.shipilev-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 22-internal-adhoc.shipilev.shipilev-jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x168c4c1]  SubTypeCheckNode::sub(Type const*, Type const*) const+0x191
",,,,,,,,,,,JDK-8315308,JDK-8314983,JDK-8315194,JDK-8315309,,,,,,,,,,,,,,,,,,,,JDK-8303279,,,,JDK-8252372,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32ixv:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-27 09:53;shade;Roland, could you please take a look? Might be something simple missing in Shenandoah?;;;","2023-07-28 03:07;roland;test case and tentative fix:
https://github.com/rwestrel/jdk/tree/JDK-8313262

The issue is not specific to shenandoah but I don't see how to reproduce it without it.
I will be out for a while. I'll test it and create a PR when I'm back.;;;","2023-08-01 00:55;shade;Thanks! I'll keep an eye on it. Given the JDK-8303279 is backported to 17.0.9 already, would be good to get this into 17u backport this month.;;;","2023-08-02 03:55;thartmann;Prototype fix seems to be specific to code added already by JDK-8252372. Are we sure that JDK-8303279 caused this?

Update: Ah, JDK-8303279 just added the assert but the actual bug is in there since JDK-8252372. ;;;","2023-08-02 04:04;thartmann;ILW = Assert in C2 because Cast is incorrectly removed, reproduces with targeted test and Shenandoah GC, disable compilation of affected method or -XX:-SplitIfBlocks = HMM = P2;;;","2023-08-10 02:25;shade;Hey Roland! Any progress on this one?;;;","2023-08-10 04:18;thartmann;I think Roland is still on vacation, right?;;;","2023-08-21 02:02;shade;Since the original fix that causes the regression is in 17.0.9, we need to get to this as soon as possible.;;;","2023-08-21 04:50;roland;[~shade] I was away. I will most likely create the PR tomorrow.;;;","2023-08-22 00:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15380
Date: 2023-08-22 07:29:13 +0000;;;","2023-08-23 02:02;dukebot;Changeset: 1cee3b9f
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-08-23 08:59:36 +0000
URL:       https://git.openjdk.org/jdk/commit/1cee3b9fd9720e7938029a6992460b9053e65e57
;;;","2023-08-24 00:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/99
Date: 2023-08-24 07:13:09 +0000;;;","2023-08-24 01:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1690
Date: 2023-08-24 08:25:40 +0000;;;","2023-08-25 09:02;shade;Fix Request (17u, 21u)

Fixes the regressions for the fix backported to 17.0.9 and 21.0.1 (JDK-8303279). Applies cleanly. New regression test passes, other tests pass, see relevant PRs.;;;","2023-08-29 22:52;shade;Have been running Fuzzer tests on mainline with different GCs for a while now after this commit, and there seem to be no new issues.;;;",,,,,,,,
JDK21: ProblemList java/lang/ScopedValue/StressStackOverflow.java on linux-x86,JDK-8313260,5106805,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2023-07-27 09:49,2023-08-02 23:17,2023-10-01 09:55,2023-07-28 08:54,21,,,,,,21,core-libs,,0,amazon-interest,noreg-self,,,,,,,,,,,,,,,,"The  java/lang/ScopedValue/StressStackOverflow.java  test was problem listed on generic-x64, see https://bugs.openjdk.org/browse/JDK-8310822

Unfortunately the test fails on linux-x86 as well.",,,,,,,,,,,JDK-8313540,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,generic,,,,,"0|i32ixf:",9223372036854775807,b34,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-07-27 10:18;serb;java.lang.RuntimeException: java.lang.RuntimeException: java.lang.IllegalStateException: Subtask not completed or did not complete successfully
	at StressStackOverflow.lambda$run$1(StressStackOverflow.java:208)
	at java.base/jdk.internal.vm.ScopedValueContainer.runWithoutScope(ScopedValueContainer.java:112)
	at java.base/jdk.internal.vm.ScopedValueContainer.run(ScopedValueContainer.java:98)
	at java.base/java.lang.ScopedValue$Carrier.run(ScopedValue.java:510)
	at StressStackOverflow.run(StressStackOverflow.java:170)
	at StressStackOverflow.main(StressStackOverflow.java:221)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.lang.RuntimeException: java.lang.IllegalStateException: Subtask not completed or did not complete successfully
	at StressStackOverflow.runInNewThread(StressStackOverflow.java:164)
	at StressStackOverflow.lambda$run$1(StressStackOverflow.java:201)
	... 9 more
Caused by: java.lang.IllegalStateException: Subtask not completed or did not complete successfully
	at java.base/java.util.concurrent.StructuredTaskScope$SubtaskImpl.get(StructuredTaskScope.java:936)
	at StressStackOverflow.runInNewThread(StressStackOverflow.java:162)
	... 10 more;;;","2023-07-27 10:22;serb;Test passed on jdk22;;;","2023-07-27 11:19;serb;The GA is affected as well.;;;","2023-07-27 22:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/149
Date: 2023-07-27 18:21:45 +0000;;;","2023-07-28 08:54;dukebot;Changeset: bb63b791
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-07-28 15:52:39 +0000
URL:       https://git.openjdk.org/jdk21/commit/bb63b79112852af3020fe64bac1974d26272b442
;;;",,,,,,,,,,,,,,,,,,
RuntimeInvisibleTypeAnnotationsAttribute.annotations() API Index out of Bound error,JDK-8313258,5106803,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asotona,qxiao,qxiao,2023-07-27 09:43,2023-09-20 22:21,2023-10-01 09:55,2023-09-14 11:32,,,,,,,22,core-libs,,1,classfile-api,,,,,,,,,,,,,,,,,"Test file javac/annotations/typeAnnotations/classfile/CombinationsTargetTest3.java use s ClassfileTestHelper.java to catch an RuntimeInvisibleTypeAnnotationsAttribute and count annotations number like this (within pattern match in switch):
```
                    case RuntimeInvisibleTypeAnnotationsAttribute invtAttr -> {
                        List <TypeAnnotation> tAnnots = invtAttr.annotations();
                        tinvisibles += tAnnots.size();
                        allt += tAnnots.size();
                    }
```
When calling (RuntimeInvisibleTypeAnnotationsAttribute) invtAttr.annotations() API, there is an Index out of Bound error in the CodeImpl.getLabel.

I attached the error screenshot. Test 25 was successfully compiled but fall into error.

This is the source code snippet in CodeImpl.getLabel method (line 102). 
```
    @Override
    public int labelToBci(Label label) {
        LabelImpl lab = (LabelImpl) label;
        if (lab.labelContext() != this)
            throw new IllegalArgumentException(String.format(""Illegal label reuse; context=%s, label=%s"",
                                                             this, lab.labelContext()));
        return lab.getBCI();
    }
```

I checked the original test with old sun.tools.classfile API, and found the bci  (which is 45) is correct. The size of LabelImpl[] (which is 37 according to the error message) generates the error.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315447,JDK-8295058,,,,,,,"2023-07-27 09:37;qxiao;Screenshot 2023-07-27 at 09.36.47.png;https://bugs.openjdk.org/secure/attachment/104807/Screenshot+2023-07-27+at+09.36.47.png","2023-08-09 23:34;liach;Test25.java;https://bugs.openjdk.org/secure/attachment/105066/Test25.java","2023-08-09 23:34;liach;Test25.txt;https://bugs.openjdk.org/secure/attachment/105065/Test25.txt",,,,,,,,,,,,,,,,,,,,"0|i32iwz:",9223372036854775807,b16,,,,,,,,,,,"2023-08-09 23:37;liach;Problematic source code is attached in Test25.java. From txt javap output, it appears the repeating annotation container AC is incorrectly placed on the testm method, while the non-repeating B is correctly placed on the lambda implementation method. This is more of a javac bug than a Classfile API bug.

That said, the Classfile API still needs better handling for out-of-bound offset requests from type annotation attributes, that it should throw IAE; similar invalid attributes can appear from Classfile transformation as well.

;;;","2023-08-31 04:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15511
Date: 2023-08-31 11:09:05 +0000;;;","2023-09-14 11:32;dukebot;Changeset: 6d47fc6d
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-09-14 18:29:01 +0000
URL:       https://git.openjdk.org/jdk/commit/6d47fc6d5b81d6764af322cc17653683f79a89de
;;;",,,,,,,,,,,,,,,,,,,,
Java_sun_awt_windows_ThemeReader_paintBackground release resources in early returns,JDK-8313252,5106793,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-07-27 07:49,2023-09-25 00:12,2023-10-01 09:55,2023-07-31 07:58,17,20,21,22,,,22,client-libs,,0,amazon-interest,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,,,,,,,,,,,,,,"In file ThemeReader.cpp functionJava_sun_awt_windows_ThemeReader_paintBackground 
we create DCs and release them at the end, but seems we miss it in early returns.",,,,,,,,,,,JDK-8316812,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,windows,,,,,"0|i32iur:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-07-28 00:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15064
Date: 2023-07-28 07:52:14 +0000;;;","2023-07-31 07:58;dukebot;Changeset: 3671d83c
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-07-31 14:57:28 +0000
URL:       https://git.openjdk.org/jdk/commit/3671d83c87302ead09d4ebce9cb85bdd803a0c20
;;;","2023-09-21 05:44;mbaesken;jdk21u fix request
I would like to have the patch in jdk21u as well, because the issue is present there too. The backport is clean and low risk.;;;","2023-09-21 05:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/189
Date: 2023-09-21 12:45:13 +0000;;;",,,,,,,,,,,,,,,,,,,
Fix -Wconversion warnings in verifier code,JDK-8313249,5106788,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,coleenp,coleenp,2023-07-27 06:19,2023-08-10 06:05,2023-10-01 09:55,2023-08-01 05:02,22,,,,,,22,hotspot,,0,cleanup,,,,,,,,,,,,,,,,,"In my warnings count:

55 /src/hotspot/share/classfile/verifier.cpp
29 /src/hotspot/share/classfile/stackMapFrame.cpp
18 /src/hotspot/share/classfile/stackMapTableFormat.hpp
15 /src/hotspot/share/classfile/stackMapFrame.hpp
10 /src/hotspot/share/classfile/stackMapTable.cpp

The verifiers functions take u2 for bci and index but then use these as int to print out any verification errors or keep in the stack allocated container types for error reporting.   It also has a comment to use int32_t for various counts on purpose, so passing u2 to these counts doesn't make sense.

  // Logically, the _frame_count (as well as many fields in the StackFrame)
  // should be a u2, but if we defined the variable as that type it will
  // be difficult to detect/recover from overflow or underflow conditions.
  // Widening the type and making it signed will help detect these.
  int32_t              _code_length;
  int32_t              _frame_count;     // Stackmap frame count
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8177481,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32itn:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-27 08:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15056
Date: 2023-07-27 15:51:01 +0000;;;","2023-08-01 05:02;dukebot;Changeset: ee3e0917
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-08-01 11:59:11 +0000
URL:       https://git.openjdk.org/jdk/commit/ee3e0917b393b879a543060ace2537be84f20e82
;;;",,,,,,,,,,,,,,,,,,,,,
C2: setScopedValueCache intrinsic exposes nullptr pre-values to store barriers,JDK-8313248,5106787,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,shade,shade,shade,2023-07-27 05:35,2023-09-29 01:30,2023-10-01 09:55,2023-08-04 02:55,21,22,,,,,22,hotspot,,0,amazon-interest,c2,gc-g1,gc-shenandoah,intrinsic,jdk21-defer-request,jdk21-defer-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,loom,noreg-sqe,oracle-triage-17,oracle-triage-22,,,,"Original found by this test:

$ CONF=linux-x86_64-server-fastdebug make images test TEST=java/lang/ScopedValue/StressStackOverflow.java TEST_VM_OPTS=""-XX:+UseShenandoahGC""

STDOUT:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/shipilev/shipilev-jdk/src/hotspot/share/gc/shenandoah/shenandoahMarkBitMap.cpp:127), pid=36594, tid=36748
#  assert(ShenandoahHeap::heap()->is_in(addr)) failed: Trying to access bitmap 0x00007f0d180d17e0 for address 0x0000000000000000 not in the heap.
#
# JRE version: OpenJDK Runtime Environment (22.0) (fastdebug build 22-internal-adhoc.shipilev.shipilev-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 22-internal-adhoc.shipilev.shipilev-jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x156c625]  ShenandoahMarkBitMap::check_mark(HeapWordImpl**) const+0x125
#

Stack: [0x00007f53342f4000,0x00007f53343f4000],  sp=0x00007f53343f2650,  free space=1017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x156c625]  ShenandoahMarkBitMap::check_mark(HeapWordImpl**) const+0x125  (shenandoahMarkBitMap.cpp:127)
V  [libjvm.so+0x158a8e9]  ShenandoahSATBMarkQueueSet::filter(SATBMarkQueue&)+0x5b9  (shenandoahMarkBitMap.inline.hpp:94)
V  [libjvm.so+0x149ac13]  SATBMarkQueueSet::flush_queue(SATBMarkQueue&)+0x13  (satbMarkQueue.cpp:225)
V  [libjvm.so+0xceb146]  HandshakeOperation::do_handshake(JavaThread*)+0x46  (handshake.cpp:326)
V  [libjvm.so+0xcedde0]  VM_HandshakeAllThreads::doit()+0x5e0  (handshake.cpp:662)
V  [libjvm.so+0x17ef99e]  VM_Operation::evaluate()+0x21e  (vmOperations.cpp:71)
V  [libjvm.so+0x181171a]  VMThread::evaluate_operation(VM_Operation*)+0x15a  (vmThread.cpp:281)
V  [libjvm.so+0x18123ee]  VMThread::inner_execute(VM_Operation*)+0x22e  (vmThread.cpp:435)
V  [libjvm.so+0x181272c]  VMThread::loop()+0x6c  (vmThread.cpp:502)
V  [libjvm.so+0x1812862]  VMThread::run()+0x92  (vmThread.cpp:175)
V  [libjvm.so+0x171994f]  Thread::call_run()+0x12f  (thread.cpp:217)
V  [libjvm.so+0x135105e]  thread_native_entry(Thread*)+0x11e  (os_linux.cpp:783)",,,,,,,,,,,JDK-8314110,,,,,,,,,,,,,,,,,,,,JDK-8310536,,,,,,,JDK-8284161,JDK-8299324,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32itf:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-27 11:29;shade;On Mac, it fails a bit differently:

#  SIGSEGV (0xb) at pc=0x00000001062e68cc, pid=76453, tid=24323
#
# JRE version: OpenJDK Runtime Environment (22.0) (fastdebug build 22-internal-adhoc.shipilev.shipilev-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 22-internal-adhoc.shipilev.shipilev-jdk, mixed mode, sharing, compressed oops, compressed class ptrs, shenandoah gc, bsd-aarch64)
# Problematic frame:
# V  [libjvm.dylib+0x2368cc]  ShenandoahMarkingContext::is_marked_strong(oop) const+0xcc

siginfo: si_signo: 11 (SIGSEGV), si_code: 2 (SEGV_ACCERR), si_addr: 0x0000000104715e10

Stack: [0x000000016d8d0000,0x000000016dad3000],  sp=0x000000016d8f7c20,  free space=159k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x2368cc]  ShenandoahMarkingContext::is_marked_strong(oop) const+0xcc
V  [libjvm.dylib+0x101fea4]  ShenandoahSATBMarkQueueFilterFn::operator()(void const*) const+0x94
V  [libjvm.dylib+0x101fc84]  void SATBMarkQueueSet::apply_filter<ShenandoahSATBMarkQueueFilterFn>(ShenandoahSATBMarkQueueFilterFn, SATBMarkQueue&)+0xac
V  [libjvm.dylib+0xf361dc]  SATBMarkQueueSet::flush_queue(SATBMarkQueue&)+0x20
V  [libjvm.dylib+0x7cf10c]  HandshakeOperation::do_handshake(JavaThread*)+0x5c
V  [libjvm.dylib+0x7d0fe0]  HandshakeState::process_by_self(bool, bool)+0x2b8
V  [libjvm.dylib+0xf33894]  SafepointMechanism::process(JavaThread*, bool, bool)+0x80
V  [libjvm.dylib+0x3e4190]  ThreadStateTransition::transition_from_vm(JavaThread*, JavaThreadState, bool)+0x70
V  [libjvm.dylib+0x86da0c]  InterpreterRuntime::throw_StackOverflowError(JavaThread*)+0x220
j  jdk.internal.vm.ScopedValueContainer.doRun(Ljava/lang/Runnable;)V+0 java.base@22-internal
j  jdk.internal.vm.ScopedValueContainer.run(Ljava/lang/Runnable;)V+21 java.base@22-internal
j  java.lang.ScopedValue$Carrier.runWith(Ljava/lang/ScopedValue$Snapshot;Ljava/lang/Runnable;;;;","2023-07-27 11:40;shade;I am beginning to think that GC barriers wander into red/yellow zone and get wrecked there.;;;","2023-08-01 04:01;shade;More investigation. It is useful to replace the SATB queueing code with the direct runtime (slowpath) code. This would catch the nullptrs coming to SATB barrier before they get in queues. 

```
    __ if_then(pre_val, BoolTest::ne, kit->null()); {
        // logging buffer is full, call the runtime
      const TypeFunc *tf = ShenandoahBarrierSetC2::write_ref_field_pre_entry_Type();
        __ make_leaf_call(tf, CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre_entry), ""shenandoah_wb_pre"", pre_val, tls);
    } __ end_if();  // (pre_val != nullptr)
```

 -XX:+PreserveFramePointer allows a proper stack walk and disassembly when the failure comes from C2 SATB barrier invocation. 
The call to the runtime below can be seen in hs_err like this:

```
#  Internal Error (/home/shipilev/shipilev-jdk/src/hotspot/share/gc/shenandoah/shenandoahRuntime.cpp:47), pid=469, tid=496
#  assert(orig != nullptr) failed: should be optimized out

Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x157a99d]  ShenandoahRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)+0x19d  (shenandoahRuntime.cpp:47)
J 331 c2 java.lang.ScopedValue$Cache.put(Ljava/lang/ScopedValue;Ljava/lang/Object;)V java.base@22-internal (88 bytes) @ 0x00007f0c4c4edadc [0x00007f0c4c4ed640+0x000000000000049c]
J 321 c1 StressStackOverflow$DeepRecursion.run()V (326 bytes) @ 0x00007f0c4497846c [0x00007f0c44972d60+0x000000000000570c]
J 330 c2 StressStackOverflow.fibonacci_pad1(ILjava/lang/Runnable;)J (34 bytes) @ 0x00007f0c4c4ecdc0 [0x00007f0c4c4ecc00+0x00000000000001c0]
J 330 c2 StressStackOverflow.fibonacci_pad1(ILjava/lang/Runnable;)J (34 bytes) @ 0x00007f0c4c4eccbc [0x00007f0c4c4ecc00+0x00000000000000bc]

...

 ;; B36: #      out( B8 ) <- in( B7 )  Freq: 0.000595774
  0x00007f0c4c4edac9:   mov    (%rbx),%rdi                  ;*invokestatic scopedValueCache {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.ScopedValue::scopedValueCache@0 (line 775)
                                                            ; - java.lang.ScopedValue$Cache::put@0 (line 905)
  0x00007f0c4c4edacc:   mov    %r15,%rsi
  0x00007f0c4c4edacf:   movabs $0x7f0c64a28800,%r10   ; <---- call to ShenandoahRuntime::write_ref_field_pre_entry
  0x00007f0c4c4edad9:   call   *%r10
  0x00007f0c4c4edadc:   nopl   0x0(%rax,%rax,1)             ;*invokestatic setScopedValueCache {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.ScopedValue::setScopedValueCache@1 (line 779)
                                                            ; - java.lang.ScopedValue$Cache::put@18 (line 908)
                                                            ;   {other}
  0x00007f0c4c4edae4:   jmp    0x00007f0c4c4ed778
```

`%rdi` is supposed to be the `pre_val` for SATB barrier, and while C2 code emits the null check for it, that null check is nowhere to be seen in the generated code. So that null-check is somehow optimized away.;;;","2023-08-01 04:17;shade;The odd access comes from C2 intrinsic for setScopedValueCache. That access stores the oop to off-heap OopHandle in JavaThread, and enters the SATB path after JDK-8299324. There, it reloads the oop from that oopHandle, and somehow misses the nullcheck. -XX:DisableIntrinsic=_setScopedValueCache makes the test pass.;;;","2023-08-01 04:40;shade;I think I understand. The setter (`setScopedValueCache`) intrinsic passes `val_type` of `_gvn.type(arr)`, which is `narrowoop: java/lang/Object *[int:32] (java/lang/Cloneable,java/io/Serializable):NotNull:exact *`, and thus implies non-nullity. 

So when Shenandoah's SATB barrier reloads, it folds the null-check, assuming the `pre_val` is not null, due to `val_type`. This passes `nullptr` to SATB queues or slowpath, and we crash in either queue filtering or barrier code that does not expect nullptrs on SATB paths. The getter (`scopedValueCache`) constructs the `objects_type` explicitly to imply the value can be null. I think we should do the same for setter, since it can hide the ""getter"" from SATB barrier inside of it.;;;","2023-08-01 04:42;shade;G1 SATB barriers do the same thing, AFAICS, so this makes it a generic C2 ScopeValues intrinsic bug.;;;","2023-08-01 04:44;shade;Seems to exist since the original integration of JDK-8284161. Started to reproduce with Shenandoah after JDK-8299324.;;;","2023-08-01 05:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15105
Date: 2023-08-01 12:18:22 +0000;;;","2023-08-02 00:57;thartmann;ILW = Crash in GC due to unexpected NULL pre_val, reproducible with loom stress test and Shenandoah GC, disable _setScopedValueCache intrinsic = HMM = P2;;;","2023-08-04 02:55;dukebot;Changeset: e8a37b90
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-08-04 09:53:20 +0000
URL:       https://git.openjdk.org/jdk/commit/e8a37b90db8dca4dc3653970b2d66d2faf8ef452
;;;","2023-08-09 03:19;thartmann;[~shade], should this go into JDK 21(u)?;;;","2023-08-09 03:26;shade;Yes, it should, I am going to do it soon.;;;","2023-08-09 03:52;shade;Fix Request (21u)

Fixes the important Loom bug, manifests reliably with Shenandoah. Applies cleanly. Original reproducer fails without the fix, passes with it.;;;","2023-08-09 03:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/50
Date: 2023-08-09 10:51:18 +0000;;;","2023-08-09 10:43;thartmann;Deferral Request (JDK 21)
Non-trivial fix that needs some more bake time before being released and will therefore be integrated into JDK 21.0.1.;;;",,,,,,,,
"Temporarily disable ""malformed control flow"" assert to reduce noise",JDK-8313241,5106777,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2023-07-27 00:56,2023-08-24 02:05,2023-10-01 09:55,2023-07-28 00:01,21,22,,,,,21,hotspot,,0,c2,jdk21-fix-request,jdk21-fix-yes,oracle-triage-17,oracle-triage-22,,,,,,,,,,,,,"JDK-8303951 added asserts before several C2 compilation bailouts that we were never able to trigger in our testing. The ""malformed control flow"" assert now triggers regularly (see JDK-8308392 and JDK-8312980). Let's disable it to reduce the noise in the CI.",,,,,,,,,,,JDK-8313539,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303951,JDK-8308392,JDK-8313208,JDK-8312980,,,,,,,,,,,,,,,,,,,,,,,"0|i32ir7:",9223372036854775807,b34,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2023-07-27 00:57;thartmann;ILW = Assert failures in C2 (harmless in product but massive failures might hide other bugs), intermittent with several tests, no workaround = MHH = P2;;;","2023-07-27 01:00;thartmann;Fix Request (JDK 21):
It's important to fix this in JDK 21 to reduce the noise in testing and the likelihood of others bugs being hidden by these (harmless) assert failures. The risk is low, we will always bail out from compilation. The fix will be tested through tier1-4.;;;","2023-07-27 01:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/146
Date: 2023-07-27 08:05:23 +0000;;;","2023-07-27 04:06;kvn;Fix request for JDK 21 approved.;;;","2023-07-28 00:01;dukebot;Changeset: f242c3b9
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-07-28 06:59:52 +0000
URL:       https://git.openjdk.org/jdk21/commit/f242c3b9f85501f2e425be69f7a61d586020f986
;;;",,,,,,,,,,,,,,,,,,
InetAddress.getCanonicalHostName may return ip address if reverse lookup fails,JDK-8313239,5106775,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jpai,bnayak,bnayak,2023-07-27 00:47,2023-08-16 23:28,2023-10-01 09:55,2023-08-10 03:04,,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"FULL PRODUCT VERSION:

java -version
java version ""1.8.0_361""
Java(TM) SE Runtime Environment (build 1.8.0_361-b09)
Java HotSpot(TM) 64-Bit Server VM (build 25.361-b09, mixed mode)

OS VERSION:

sw_vers
ProductName:		macOS
ProductVersion:		13.3.1
ProductVersionExtra:	(a)
BuildVersion:		22E772610a


A DESCRIPTION OF THE PROBLEM :
getCanonicalHostName returns ip address in macOS instead of fully qualified domain name.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :

Followed these documents to check the macOS machine host name
https://support.apple.com/en-in/guide/mac-help/mchlp2322/mac
https://support.apple.com/en-in/guide/mac-help/mh27452/13.0/mac/13.0

If we verify the macOS machine name it with scutil command we can see the host name.

 scutil --get HostName 
bishnaya-mac
 scutil --get LocalHostName
bishnaya-mac
 scutil --get ComputerName 
bishnaya-mac

If we run the below code it returns ip address
============code==================
import java.net.InetAddress;
import java.net.UnknownHostException;

public class MachineName {

    public static void main(String arg[]) throws UnknownHostException {

        String canHostName = InetAddress.getLocalHost().getCanonicalHostName();
        System.out.println(""Canonical Host Name : ""+canHostName);

    }
}

===========================================

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED - Canonical Host Name : bishnaya-mac
ACTUAL - Canonical Host Name : ip_address_of_machine


",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313677,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,os_x,,,,,"0|i32iqr:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-07-27 00:49;alanb;What does JDK 21 EA or JDK 17 print on this system?;;;","2023-07-27 01:00;bnayak;bishnaya@bishnaya-mac JMS % java -version
java version ""17.0.7"" 2023-04-18 LTS
Java(TM) SE Runtime Environment (build 17.0.7+8-LTS-224)
Java HotSpot(TM) 64-Bit Server VM (build 17.0.7+8-LTS-224, mixed mode, sharing)
bishnaya@bishnaya-mac JMS % cd ~
bishnaya@bishnaya-mac ~ % cd Downloads 
bishnaya@bishnaya-mac Downloads % javac MachineName.java 
bishnaya@bishnaya-mac Downloads % java MachineName 
Canonical Host Name : 192.168.1.15
;;;","2023-07-27 04:48;jpai;I can reproduce against mainline on my local macOS. I'll take a look.
;;;","2023-07-31 03:36;alanb;The spec for getCanonicalHostName probably should be expanded to say when it returns the string representation of the IP address. Right now it reads like it's specific to the SM denied case but it also returned when the host isn't registered with the name service.;;;","2023-08-03 00:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15134
Date: 2023-08-03 07:35:10 +0000;;;","2023-08-10 03:04;dukebot;Changeset: 0cb9ab04
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2023-08-10 10:01:46 +0000
URL:       https://git.openjdk.org/jdk/commit/0cb9ab04f4c408bce7c4bc0e028fa9d4959abd79
;;;",,,,,,,,,,,,,,,,,
Redundant if statement in ZoneInfoFile,JDK-8313231,5106765,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2023-07-26 23:14,2023-08-10 06:04,2023-10-01 09:55,2023-07-31 00:51,17-pool,21,,,,,22,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,"if (i < savingsInstantTransitions.length) {
    // javazic writes the last GMT offset into index 0!
    if (i < savingsInstantTransitions.length) {
        offsets[0] = standardOffsets[standardOffsets.length - 1] * 1000;
        nOffsets = 1;
    }
    ...
}

The second if statement looks unnecessary.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32ioj:",9223372036854775807,b09,,,,,,,,,,,"2023-07-26 23:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15052
Date: 2023-07-27 06:46:46 +0000;;;","2023-07-31 00:51;dukebot;Changeset: f8c2b7fe
Author:    John Jiang <jjiang@openjdk.org>
Date:      2023-07-31 07:49:10 +0000
URL:       https://git.openjdk.org/jdk/commit/f8c2b7fee101d66107704b3ee464737c5ccdc13a
;;;",,,,,,,,,,,,,,,,,,,,,
"DHEKeySizing.java should be modified to use TLS versions TLSv1, TLSv1.1, TLSv1.2",JDK-8313229,5106763,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mullan,rgangadhar,rgangadhar,2023-07-26 22:40,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 10:33,11.0.21,11.0.21-oracle,17.0.9,17.0.9-oracle,21,8u391,22,security-libs,,0,amazon-interest,noreg-self,sqebug,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301700,,,,"2023-07-26 22:47;rgangadhar;DHEKeySizing.txt;https://bugs.openjdk.org/secure/attachment/104797/DHEKeySizing.txt",,,,,,,,,,,,,,,,,,,,,,"0|i32io3:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2023-09-15 08:52;mullan;Update: the current test is actually only testing TLS 1.0. See the getClientContextParameters and getServerContextParameters methods in the test which set the protocol to ""TLSv1"".;;;","2023-09-20 12:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15846
Date: 2023-09-20 19:51:28 +0000;;;","2023-09-21 10:33;dukebot;Changeset: c698b45a
Author:    Sean Mullan <mullan@openjdk.org>
Date:      2023-09-21 17:31:46 +0000
URL:       https://git.openjdk.org/jdk/commit/c698b45a7bcb0eedeed979d482f8ab15cf16baaa
;;;",,,,,,,,,,,,,,,,,,,,
Correct attenuation indicator for removed lights,JDK-8313227,5106761,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,nlisker,nlisker,nlisker,2023-07-26 20:36,2023-08-03 04:57,2023-10-01 09:55,2023-07-27 16:59,jfx18,,,,,,jfx22,javafx,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"When resetting in NGShape3D, the on/off attenuation toggle should be off (0), but it is on (1). This causes a performance degradation when fewer than the max lights (3) are used because the ""empty"" lights undergo attenuation calculation instead of short-circuiting.

This parameter should simply be changed to 0.",,,,,,,,,,,JDK-8313331,JDK-8313324,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32inn:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-07-26 20:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1186
Date: 2023-07-27 03:39:06 +0000;;;","2023-07-27 16:59;dukebot;Changeset: b323db26
Author:    Nir Lisker <nlisker@openjdk.org>
Date:      2023-07-27 23:57:52 +0000
URL:       https://git.openjdk.org/jfx/commit/b323db262906853afbdec7a747f3b2f5b6593b9b
;;;","2023-07-27 17:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1187
Date: 2023-07-28 00:13:16 +0000;;;",,,,,,,,,,,,,,,,,,,,
Redundant condition test in X509CRLImpl,JDK-8313226,5106760,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2023-07-26 20:10,2023-08-10 06:05,2023-10-01 09:55,2023-08-01 15:37,17-pool,21,,,,,22,security-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,"if ((nextByte == DerValue.tag_SequenceOf)
        && (! ((nextByte & 0x0c0) == 0x080))) {
    ...
    ...
}

If nextByte is DerValue.tag_SequenceOf, exactly 0x30, then the test after && always be true.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32inf:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-07-26 21:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15051
Date: 2023-07-27 04:00:21 +0000;;;","2023-08-01 15:37;dukebot;Changeset: 28be34c1
Author:    John Jiang <jjiang@openjdk.org>
Date:      2023-08-01 22:35:27 +0000
URL:       https://git.openjdk.org/jdk/commit/28be34c1b9179e21c8ec5d2f9b05e3f842bb30a1
;;;",,,,,,,,,,,,,,,,,,,,,
Remove Windows specific workaround in LCMS.c for _snprintf,JDK-8313220,5106754,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,serb,serb,serb,2023-07-26 15:50,2023-09-27 18:20,2023-10-01 09:55,2023-09-25 16:03,22,,,,,,22,client-libs,,0,,,,,,,,,,,,,,,,,,"After ""8293162: Drop support for VS2017"" limited current support to VS2019 and VS2022 it is most likely safe to remove various checks related to older VS compilers like VS2015 or VS2013. 
see https://bugs.openjdk.org/browse/JDK-8294901",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32im3:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-08-31 22:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15396
Date: 2023-08-23 00:42:47 +0000;;;","2023-09-25 16:03;dukebot;Changeset: 0dce4c17
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-09-25 23:01:19 +0000
URL:       https://git.openjdk.org/jdk/commit/0dce4c1758d05832e20380cff28d7ed47d693a6e
;;;",,,,,,,,,,,,,,,,,,,,,
PKCS11 tests silently skip execution,JDK-8313206,5106736,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rhalade,rhalade,rhalade,2023-07-26 10:42,2023-09-21 05:15,2023-10-01 09:55,2023-08-08 13:23,17,21,22,,,,22,security-libs,,0,jdk21u-fix-request,jdk21u-fix-yes,noreg-self,,,,,,,,,,,,,,,open/test/jdk/sun/security/pkcs11 look for NSS library for platform and skip execution if library is not found. These tests should be enhanced to throw JTReg SkippedException in such cases so we can have better insigts.,,,,,,,,,,,JDK-8316663,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313575,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32ii3:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-08-02 10:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15125
Date: 2023-08-02 17:51:31 +0000;;;","2023-08-08 13:23;dukebot;Changeset: 515add88
Author:    Rajan Halade <rhalade@openjdk.org>
Date:      2023-08-08 20:21:16 +0000
URL:       https://git.openjdk.org/jdk/commit/515add88ed6c290ee90f3d6f522a22971e37a62c
;;;","2023-09-20 01:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/177
Date: 2023-09-20 08:11:11 +0000;;;","2023-09-20 01:21;mbaesken;jdk21u backport request
I would like to have the patch in jdk21u as well, because the issue is present there too. The backport is low risk and clean.;;;",,,,,,,,,,,,,,,,,,,
Inconsistent order of sections in generated class documentation,JDK-8313204,5106732,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2023-07-26 10:00,2023-08-10 06:04,2023-10-01 09:55,2023-07-28 10:06,22,,,,,,22,tools,,0,,,,,,,,,,,,,,,,,,"Two inconsistencies have been observed in the generated output.

1. annotation types

For an annotation type that defines fields as well as annotation members:
the field summary appears after the annotation members summaries
the field details appear before the annotation members details
so the page is ordered:
   Optional Element Summary
   Field Summary
   Field Details
   Element Details

2. Classes with JavaFX-style properties

The existing order, for classes that have them, is
    Properties
    Nested Classes
    Fields

In general, the order of elements on a page is 
   nested classes
   field-like members
   method-like members

--

This suggests that nested classes should appear before properties, and that the same general order should apply to both summary tables and detail lists.",,,,,,,,,,,,,,,,,,,,,,,,JDK-8312201,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32ih7:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-07-26 12:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15046
Date: 2023-07-26 19:33:42 +0000;;;","2023-07-28 10:06;dukebot;Changeset: e2cb0bc6
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-07-28 17:05:37 +0000
URL:       https://git.openjdk.org/jdk/commit/e2cb0bc6f1816f10603b35a4bfe95423bb68c411
;;;",,,,,,,,,,,,,,,,,,,,,
Enabling modern media controls on webkit 616.1 does not load button images on HTML5 video Element,JDK-8313181,5106687,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbhaskar,jbhaskar,jbhaskar,2023-07-26 04:18,2023-09-02 01:46,2023-10-01 09:55,2023-08-08 23:59,8u391,jfx22,,,,,jfx22,javafx,,0,CPU23_10-critical-approved,CPU23_10-critical-SQE-OK,jfx21u-fix-request,jfx21u-fix-yes,regression,regression_8310681,sn_149,sn_150,,,,,,,,,,,,,,,,,,,,,JDK-8314031,JDK-8314434,JDK-8314032,JDK-8314030,JDK-8314427,JDK-8315565,JDK-8314036,JDK-8314428,,,,,,,,,,,,,,,,,,,,JDK-8310681,JDK-8314230,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32i77:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-08-06 04:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1201
Date: 2023-08-06 11:46:32 +0000;;;","2023-08-08 23:59;dukebot;Changeset: 5d741761
Author:    Jay Bhaskar <jbhaskar@openjdk.org>
Date:      2023-08-09 06:56:30 +0000
URL:       https://git.openjdk.org/jfx/commit/5d741761e751aa047f265d9d816be535a1818aee
;;;","2023-08-09 04:18;jbhaskar;The request is raised for a jfx21u backport.
The main patch https://github.com/openjdk/jfx/pull/1201
fixes the video control issue while playing html5 video

;;;","2023-08-09 04:40;kcr;Approved to go into jfx21u for 21.0.1;;;","2023-08-09 05:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx21u/pull/9
Date: 2023-08-09 12:09:26 +0000;;;","2023-09-01 12:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/144
Date: 2023-09-01 19:51:51 +0000;;;",,,,,,,,,,,,,,,,,
Web Workers timeout with Webkit 616.1,JDK-8313177,5106683,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jbhaskar,jbhaskar,jbhaskar,2023-07-26 04:01,2023-09-01 11:05,2023-10-01 09:55,2023-08-01 05:19,8u391,jfx22,,,,,jfx22,javafx,,0,CPU23_10-critical-approved,CPU23_10-critical-SQE-OK,jfx21u-fix-request,jfx21u-fix-yes,regression,regression_8310681,sn_149,,,,,,,,,,,Some of the web workers timeout. It looks like tests are not being finished.,,,,,,,,,,,JDK-8313703,JDK-8313624,JDK-8313566,JDK-8313623,JDK-8313705,JDK-8313625,JDK-8313555,JDK-8315555,,,,,,,,,,,JDK-8311518,,JDK-8313295,,,,,,,JDK-8310681,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32i6b:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-07-30 23:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1191
Date: 2023-07-31 06:03:58 +0000;;;","2023-08-01 05:19;dukebot;Changeset: 5f5e54fe
Author:    Jay Bhaskar <jbhaskar@openjdk.org>
Date:      2023-08-01 12:16:17 +0000
URL:       https://git.openjdk.org/jfx/commit/5f5e54feb2e816dcb351a28862c798117c3f81e8
;;;","2023-08-02 03:01;jbhaskar; jfx21u-fix-request raised
The fix is for js web worker timeout ( tests fail to finish);;;","2023-08-02 05:03;kcr;Approved to go into jfx21u for 21.0.1 ;;;","2023-08-02 05:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx21u/pull/5
Date: 2023-08-02 12:23:04 +0000;;;","2023-09-01 10:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/141
Date: 2023-09-01 17:32:24 +0000;;;",,,,,,,,,,,,,,,,,
Create fewer predictable port clashes in management tests,JDK-8313174,5106680,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2023-07-26 03:07,2023-08-10 06:04,2023-10-01 09:55,2023-07-27 08:42,,,,,,,22,core-svc,,0,,,,,,,,,,,,,,,,,,"Tests in test/jdk/javax/management/remote/mandatory frequently run together, and try to use the same port for their call to LocateRegistry.createRegistry(port);

The tests have a loop intended to avoid port clashes: this tries a very wide range of ports, and although it does detect a port that is in use, it rarely needs to retry even a few times.

Specifically on linux-aarch64 the port in use detection appears ""racy"" such that the clash sometimes goes unnoticed until it's too late, causing test failures.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32i5n:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1f101086,,,,,,,,,"2023-07-26 04:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15039
Date: 2023-07-26 10:50:09 +0000;;;","2023-07-27 08:42;dukebot;Changeset: 169b6e3c
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-07-27 15:40:13 +0000
URL:       https://git.openjdk.org/jdk/commit/169b6e3cff8f9e0e09cdd5145c2dfe73a88519d1
;;;",,,,,,,,,,,,,,,,,,,,,
src/java.desktop/windows/native/libawt/windows/awt_Robot.cpp GetRGBPixels adjust releasing of resources,JDK-8313164,5106670,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2023-07-26 01:09,2023-09-25 00:09,2023-10-01 09:55,2023-07-27 00:07,11,20,21,22,,,22,client-libs,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,,,,,,,,,,,,,,,In src/java.desktop/windows/native/libawt/windows/awt_Robot.cpp GetRGBPixels we release some resources at the end of the function. However  this should be done as well in some early leaving with throw.,,,,,,,,,,,JDK-8316811,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,windows,,,,,"0|i32i3f:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-07-26 03:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15038
Date: 2023-07-26 10:43:20 +0000;;;","2023-07-27 00:07;dukebot;Changeset: b7545a69
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-07-27 07:06:32 +0000
URL:       https://git.openjdk.org/jdk/commit/b7545a69a27f255cbf26071be5b88f6e3e6b3cd6
;;;","2023-09-20 07:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/181
Date: 2023-09-20 14:47:04 +0000;;;","2023-09-20 07:57;mbaesken;jdk21u backport request
I would like to have the patch in jdk21u as well, because the issue is present there too. The backport is clean and low risk.;;;",,,,,,,,,,,,,,,,,,,
Missing check for os_thread type in os_windows.cpp,JDK-8313141,5106646,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-07-25 22:18,2023-08-10 09:14,2023-10-01 09:55,2023-08-04 22:26,22,,,,,,22,hotspot,,0,os,,,,,,,,,,,,,,,,,"os::os_thread is not handled in os_windows.cpp, and therefore ignores the thread stack size option",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32hy3:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-25 22:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15031
Date: 2023-07-26 05:19:02 +0000;;;","2023-07-28 22:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15079
Date: 2023-07-29 05:13:24 +0000;;;","2023-07-28 22:48;dholmes;This only affects the JfrThreadSampler thread.;;;","2023-08-04 22:26;dukebot;Changeset: 90d795ab
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-08-05 05:24:08 +0000
URL:       https://git.openjdk.org/jdk/commit/90d795abf10bf8b8b53079c1afd19fee7b4cb6cf
;;;",,,,,,,,,,,,,,,,,,,
DerValue::toString should output a hex view of the values in byte array,JDK-8313087,5106592,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2023-07-25 19:33,2023-07-31 12:14,2023-10-01 09:55,2023-07-26 08:18,17-pool,21,,,,,22,security-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,DerValue::toString would output a hex view of the byte array variable buffer.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32hm3:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-07-25 21:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15029
Date: 2023-07-26 04:02:04 +0000;;;","2023-07-26 08:18;dukebot;Changeset: 830413f1
Author:    John Jiang <jjiang@openjdk.org>
Date:      2023-07-26 15:16:52 +0000
URL:       https://git.openjdk.org/jdk/commit/830413f19a6d998ff6c899c05e8fa93b6b2b0644
;;;",,,,,,,,,,,,,,,,,,,,,
MonitoringSupport_lock should be unconditionally initialized after 8304074,JDK-8313081,5106588,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,phh,phh,phh,2023-07-25 13:43,2023-07-31 12:15,2023-10-01 09:55,2023-07-26 12:31,21,22,,,,,22,hotspot,,0,amazon-interest,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,"MonitoringSupport_lock is initialized only when UseG1GC is true, but JDK-8304074 uses it to implement getTotalThreadAllocatedBytes, which is available for all garbage collectors. While the current code sets UseG1GC regardless of which collector is specified, see FLAG_SET_ERGO_IF_DEFAULT(UseG1GC, true) in gcConfig.cpp, if G1 isn't included in the Hotspot build or Hotspot is not running on a server class machine, the lock will not be initialized. The lock's initialization should be unconditional.
",,,,,,,,,,,JDK-8313416,,,,,,,,,,,,,,,,,,,,,,,JDK-8313202,,,,JDK-8304074,,,,,,,,,,,generic,,,,,,,,21,,generic,,,,,"0|i32hl7:",9223372036854775807,b08,,,,,,,,,,,"2023-07-25 14:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15028
Date: 2023-07-25 21:48:24 +0000;;;","2023-07-26 12:31;dukebot;Changeset: a9d21c61
Author:    Paul Hohensee <phh@openjdk.org>
Date:      2023-07-26 19:30:21 +0000
URL:       https://git.openjdk.org/jdk/commit/a9d21c61fb12a11e18c6bb8aa903e5a8e42473f1
;;;","2023-07-27 11:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/20
Date: 2023-07-27 17:58:01 +0000;;;","2023-07-27 12:20;phh;Fix Request (21u).

Clean low risk backport follow-up to JDK-8304074, all management tests pass, including modified one.
;;;",,,,,,,,,,,,,,,,,,,
[lw5] javac parser is not accepting some array types with nullness markers,JDK-8313080,5106587,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-07-25 13:14,2023-07-25 15:15,2023-10-01 09:55,2023-07-25 15:15,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32hkz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-07-25 13:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/889
Date: 2023-07-25 20:40:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Return value corrupted when using CCS + isTrivial (mainline),JDK-8313023,5106530,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jvernee,jvernee,jvernee,2023-07-25 12:16,2023-08-10 06:04,2023-10-01 09:55,2023-07-31 01:04,21,22,,,,,22,core-libs,,0,hgupdate-sync,jdk21-fix-request,jdk21-fix-yes,,,,,,,,,,,,,,,Port of: https://bugs.openjdk.org/browse/JDK-8312473,,,,,,,,,,,JDK-8313614,JDK-8313938,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32h8b:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-07-25 12:27;jvernee;ILW = H (crash if returned value is an address that is dereferenced), M (not common, but reasonable use case), M (Workaround results in loss of performance) = P2;;;","2023-07-25 13:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15025
Date: 2023-07-25 19:17:38 +0000;;;","2023-07-31 01:04;dukebot;Changeset: 6fca2898
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2023-07-31 08:01:17 +0000
URL:       https://git.openjdk.org/jdk/commit/6fca28988794b52a6aa974bed1ed6f4f07e0994b
;;;","2023-07-31 01:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/150
Date: 2023-07-31 08:13:55 +0000;;;","2023-07-31 01:25;jvernee;Fix Request

This bug is the last known hard VM crash issue in JDK 21 when using the Linker API in a supported fashion. Fixing it will allow users to try out the linker API more effectively (which is still in preview in JDK 21), which might help with discovering other bugs. I estimate the risk of the fix to be low: the changes are very minimal, and the fix essentially just turns on the saving and restoring of registers in more cases than before, which in the theoretical worst case scenario just ends up doing unneeded work. The fix has already been integrated into the latest JDK as well: https://github.com/openjdk/jdk/pull/15025;;;",,,,,,,,,,,,,,,,,,
"Remove EA from the JDK 21 version string with first RC promotion on August 10, 2023",JDK-8312985,5106491,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,jwilhelm,boconnor,boconnor,2023-07-25 10:03,2023-08-10 09:04,2023-10-01 09:55,2023-08-07 16:41,,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,,,,,"Remove EA from the JDK 21 version string with first RC promotion on August 10, 2023 (B35)",,,,,,,,,,,JDK-8313946,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32gzn:",9223372036854775807,b35,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@271b8dfc,,,,,,,,,"2023-08-07 16:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/165
Date: 2023-08-07 23:11:27 +0000;;;","2023-08-07 16:40;dukebot;Changeset: bfe037a4
Author:    Jesper Wilhelmsson <jwilhelm@openjdk.org>
Date:      2023-08-07 23:39:12 +0000
URL:       https://git.openjdk.org/jdk21/commit/bfe037a476976f4ab38f79d52c8bcd82782d786c
;;;",,,,,,,,,,,,,,,,,,,,,
javac may crash on a record pattern with too few components,JDK-8312984,5106490,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,jlahoda,jlahoda,2023-07-25 10:00,2023-08-10 09:13,2023-10-01 09:55,2023-08-03 01:39,21,22,,,,,22,tools,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,"Consider code like:
---
public class Err {

    record R(String x) {}

    public void(Object obj) {

        switch(obj) {

            case R(var v, ) -> 1;

        }

    }

}
---

javac may crash on this code:
---
$ ./build/linux-x86_64-server-release/images/jdk/bin/javac -XDdev -XDshould-stop.at=FLOW /tmp/Err.java 
/tmp/Err.java:5: error: <identifier> expected
    public void(Object obj) {
               ^
/tmp/Err.java:9: error: illegal start of type
            case R(var v, ) -> 1;
                          ^
/tmp/Err.java:9: error: not a statement
            case R(var v, ) -> 1;
                               ^
/tmp/Err.java:9: error: incorrect number of nested patterns
            case R(var v, ) -> 1;
                 ^
  required: String
  found: String,<any>
4 errors
An exception has occurred in the compiler (22-internal). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
        at jdk.compiler/com.sun.tools.javac.comp.Flow.makePatternDescription(Flow.java:3483)
...
---
",,,,,,,,,,,JDK-8313862,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32gzf:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-07-25 11:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15024
Date: 2023-07-25 18:08:36 +0000;;;","2023-08-03 01:39;dukebot;Changeset: c3860917
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-08-03 08:37:15 +0000
URL:       https://git.openjdk.org/jdk/commit/c3860917346fb53ed3d23f11d112b58b8cd8448a
;;;","2023-08-03 03:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/38
Date: 2023-08-03 09:55:25 +0000;;;","2023-08-03 03:03;jlahoda;Fix Request

This patch prevents a javac crash in a certain scenario involving erroneous source code. This avoids bad user's experience. The fix itself should generally be very safe, as it simply only prevent the crash. Testing: standard javac regression tests.
;;;",,,,,,,,,,,,,,,,,,,
Fix assembler_aarch64.hpp after JDK-8311847,JDK-8312979,5106484,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,coleenp,coleenp,2023-07-25 08:14,2023-07-31 12:14,2023-10-01 09:55,2023-07-25 14:34,22,,,,,,22,hotspot,,0,cleanup,,,,,,,,,,,,,,,,,"This fails on windows-aarch64 in GHA.

=== Output from failing command(s) repeated here ===
* For target hotspot_variant-server_libjvm_gtest_objs_BUILD_GTEST_LIBJVM_pch.obj:
BUILD_GTEST_LIBJVM_pch.cpp
d:\a\jdk\jdk\src\hotspot\cpu\aarch64\assembler_aarch64.hpp(657): error C2220: the following warning is treated as an error
d:\a\jdk\jdk\src\hotspot\cpu\aarch64\assembler_aarch64.hpp(657): warning C4334: '<<': result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
   ... (rest of output omitted)

* All command lines available in /d/a/jdk/jdk/build/windows-aarch64/make-support/failure-logs.
=== End of repeated output ===

No indication of failed target found.
HELP: Try searching the build log for '] Error'.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313200,,,JDK-8311847,,,,,,,,,,,,,,,,,,,,,,,22,,,,,,,"0|i32gy3:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-25 09:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15023
Date: 2023-07-25 16:10:54 +0000;;;","2023-07-25 14:34;dukebot;Changeset: 2d05d354
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-07-25 21:33:54 +0000
URL:       https://git.openjdk.org/jdk/commit/2d05d3545c8fe4d9e5ad3cee673fc938f84d1901
;;;",,,,,,,,,,,,,,,,,,,,,
MatchResult produces StringIndexOutOfBoundsException for groups outside match,JDK-8312976,5106473,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rgiulietti,webbuggrp,webbuggrp,2023-07-25 06:56,2023-08-17 12:14,2023-10-01 09:55,2023-08-04 00:13,21,22,,,,,22,core-libs,,0,jdk21-defer-request,jdk21-defer-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,regression,webbug,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
JDK 21ea31

A DESCRIPTION OF THE PROBLEM :
With the fix for JDK-8132995 MatchResult only stores the substring covering the match but does not account for capturing groups outside the match, i.e. within look-behind or look-ahead groups.

The correct behavior would be not only consider the start and end of the match but the minimum start and the maximum end of all capturing groups.

REGRESSION : Last worked in version 20.0.2

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile and run the attached program


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
It should print

match from 3 to 6: ABC
prefix: 123
suffix: 456
match from 3 to 6: ABC
prefix: 123
suffix: 456

ACTUAL -
match from 3 to 6: ABC
prefix: 123
suffix: 456
match from 3 to 6: ABC
Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException: Range [-3, 0) out of bounds for length 3
        at java.base/jdk.internal.util.Preconditions$1.apply(Preconditions.java:55)
        at java.base/jdk.internal.util.Preconditions$1.apply(Preconditions.java:52)
        at java.base/jdk.internal.util.Preconditions$4.apply(Preconditions.java:213)
        at java.base/jdk.internal.util.Preconditions$4.apply(Preconditions.java:210)
        at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:98)
        at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckFromToIndex(Preconditions.java:112)
        at java.base/jdk.internal.util.Preconditions.checkFromToIndex(Preconditions.java:349)
        at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4861)
        at java.base/java.lang.String.substring(String.java:2830)
        at java.base/java.util.regex.Matcher$ImmutableMatchResult.group(Matcher.java:348)
        at CapturingGroups.printResult(CapturingGroups.java:27)
        at CapturingGroups.main(CapturingGroups.java:21)


---------- BEGIN SOURCE ----------
import java.nio.CharBuffer;
import java.util.Arrays;
import java.util.regex.MatchResult;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class CapturingGroups {
  public static void main(String[] args) {
      char[] data = ""123ABC456"".toCharArray();
  
      Matcher m = Pattern.compile(""(?<=(\\d{3})).*(?=(\\d{3}))"").matcher(CharBuffer.wrap(data));
  
      if(!m.find()) throw new AssertionError();
  
      printResult(m);
  
      MatchResult mr = m.toMatchResult();
  
      Arrays.fill(data, '*');
  
      printResult(mr);
  }

  private static void printResult(MatchResult mr) {
      System.out.println(""match from "" + mr.start() + "" to "" + mr.end() + "": "" + mr.group());
  
      System.out.println(""prefix: "" + mr.group(1));
      System.out.println(""suffix: "" + mr.group(2));
  }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8314538,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8132995,JDK-8314055,,,,,,,,,,generic,,,,,,,,21,,generic,,,,,"0|i32gvn:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@557d5cff,,,,,,,,,"2023-07-25 15:15;rriggs;Please take a look as this followup issue.;;;","2023-07-27 04:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15053
Date: 2023-07-27 11:25:57 +0000;;;","2023-08-04 00:13;dukebot;Changeset: 61c58fdd
Author:    Raffaello Giulietti <rgiulietti@openjdk.org>
Date:      2023-08-04 07:11:18 +0000
URL:       https://git.openjdk.org/jdk/commit/61c58fdd00727da2841a052477e4f4ecfa7094d6
;;;","2023-08-04 01:48;rgiulietti;Fix Request

This bug is a regression due to JDK-8132995, introduced in 21. The fix should therefore be backported to 21 as well.
The fix passes all tier1,2,3 testsuites, and specific tests covering the bug have been added.;;;","2023-08-04 02:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/164
Date: 2023-08-04 08:58:46 +0000;;;","2023-08-14 01:12;alanb;I've added the jdk21-defer-request and jdk21-defer-yes labels to this issue to make it clear that it has been deferred to jdk21u. While the issue is a regression, we don't expect there is a lot of code accessing the bounds outside of the matched string. A release note has been created for JDK 21 to document the ""known issue"".;;;","2023-08-17 06:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/70
Date: 2023-08-17 13:09:33 +0000;;;",,,,,,,,,,,,,,,,
C1 should not inline through interface calls with non-subtype receiver,JDK-8312909,5106415,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2023-07-25 04:37,2023-09-15 07:21,2023-10-01 09:55,2023-08-03 04:04,11,17,21,22,,,22,hotspot,,0,amazon-interest,c1,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,oracle-triage-22,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/jdk/open/src/hotspot/share/ci/ciInstance.cpp:111), pid=2038524, tid=2038540
#  assert(field->is_static() || klass()->is_subclass_of(field->holder())) failed: invalid access - must be subclass
#
# JRE version: Java(TM) SE Runtime Environment (22.0) (fastdebug build 22-internal-2023-07-05-0633347.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-internal-2023-07-05-0633347.tobias..., compiled mode, emulated-client, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x8dad95]  ciInstance::field_value(ciField*)+0x1e5
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

Current CompileTask:
C1:    505   28    b  1       TestInvokeinterfaceWithBadReceiverHelper::test (8 bytes)

Stack: [0x00007f5f240d2000,0x00007f5f241d3000],  sp=0x00007f5f241d0660,  free space=1017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8dad95]  ciInstance::field_value(ciField*)+0x1e5  (ciInstance.cpp:111)
V  [libjvm.so+0x8d5bad]  ciField::constant_value_of(ciObject*)+0x2d  (ciField.cpp:329)
V  [libjvm.so+0x74e081]  GraphBuilder::access_field(Bytecodes::Code)+0x5a1  (c1_GraphBuilder.cpp:1797)
V  [libjvm.so+0x75294b]  GraphBuilder::iterate_bytecodes_for_block(int)+0x5bb  (c1_GraphBuilder.cpp:2958)
V  [libjvm.so+0x75466d]  GraphBuilder::iterate_all_blocks(bool)+0x9d  (c1_GraphBuilder.cpp:3031)
V  [libjvm.so+0x7507ff]  GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0xb2f  (c1_GraphBuilder.cpp:4080)
V  [libjvm.so+0x751042]  GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0x172  (c1_GraphBuilder.cpp:3556)
V  [libjvm.so+0x7514d7]  GraphBuilder::invoke(Bytecodes::Code)+0x327  (c1_GraphBuilder.cpp:2138)
V  [libjvm.so+0x75293b]  GraphBuilder::iterate_bytecodes_for_block(int)+0x5ab  (c1_GraphBuilder.cpp:2963)
V  [libjvm.so+0x75465b]  GraphBuilder::iterate_all_blocks(bool)+0x8b  (c1_GraphBuilder.cpp:3046)
V  [libjvm.so+0x755b6e]  GraphBuilder::GraphBuilder(Compilation*, IRScope*)+0x59e  (c1_GraphBuilder.cpp:3415)
V  [libjvm.so+0x764b0c]  IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool)+0x35c  (c1_IR.cpp:128)
V  [libjvm.so+0x764ce8]  IR::IR(Compilation*, ciMethod*, int)+0xa8  (c1_IR.cpp:273)
V  [libjvm.so+0x72f911]  Compilation::build_hir() [clone .part.0]+0x1b1  (c1_Compilation.cpp:153)
V  [libjvm.so+0x7319f1]  Compilation::compile_java_method()+0x501  (c1_Compilation.cpp:141)
V  [libjvm.so+0x732139]  Compilation::compile_method()+0x179  (c1_Compilation.cpp:473)
V  [libjvm.so+0x7328c0]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x2f0  (c1_Compilation.cpp:600)
V  [libjvm.so+0x73432e]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xde  (c1_Compiler.cpp:254)
V  [libjvm.so+0xa003e0]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa00  (compileBroker.cpp:2265)
V  [libjvm.so+0xa01268]  CompileBroker::compiler_thread_loop()+0x618  (compileBroker.cpp:1944)
V  [libjvm.so+0xeb38ac]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:719)
V  [libjvm.so+0x178c04a]  Thread::call_run()+0xba  (thread.cpp:217)
V  [libjvm.so+0x148d3dc]  thread_native_entry(Thread*)+0x11c  (os_linux.cpp:778)",,,,,,,,,,,JDK-8313750,JDK-8313959,JDK-8316368,JDK-8313850,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-07-25 04:36;thartmann;35611693.patch;https://bugs.openjdk.org/secure/attachment/104754/35611693.patch","2023-07-25 04:36;thartmann;TestInvokeinterfaceWithBadReceiver.java;https://bugs.openjdk.org/secure/attachment/104755/TestInvokeinterfaceWithBadReceiver.java","2023-07-25 04:36;thartmann;TestInvokeinterfaceWithBadReceiverHelper.jasm;https://bugs.openjdk.org/secure/attachment/104756/TestInvokeinterfaceWithBadReceiverHelper.jasm","2023-07-25 04:36;thartmann;hs_err_pid2038524.log;https://bugs.openjdk.org/secure/attachment/104753/hs_err_pid2038524.log","2023-07-25 04:36;thartmann;replay_pid2038524.log;https://bugs.openjdk.org/secure/attachment/104752/replay_pid2038524.log",,,,,,,,,,,,,,,,,,"0|i32gir:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-25 04:40;thartmann;This is a problem with C1 compiling an interface call with an invalid receiver (see attached test):
		ldc	String ""42"";
		invokeinterface	InterfaceMethod MyInterface.get:""()Ljava/lang/String;"",  1;

String does not implement MyInterface but Class Hierarchy Analysis determined that there is only one implementer of MyInterface:

class MyClass implements MyInterface {
    @Stable
    String field = ""42"";

    public String get() {
        return field;
    }    
}

C1 emits a receiver subtype check (that will obviously fail at runtime and trigger an IncompatibleClassChangeError) and proceeds with inlining the MyClass::get method on the String receiver. It then tries to fold stable field load by loading it's value at compile time which asserts/fails because the String receiver does not have such a field. The fix is to bail out from inlining when we can statically determine that the receiver subtype check will always fail at runtime.;;;","2023-07-25 04:57;thartmann;ILW = Assert during C1 compilation (might crash with release build), edge case, disable inlining or -XX:-FoldStableValues = HLM = P3;;;","2023-07-25 05:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15018
Date: 2023-07-25 12:47:00 +0000;;;","2023-08-03 04:04;dukebot;Changeset: ab1c212a
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-08-03 11:02:42 +0000
URL:       https://git.openjdk.org/jdk/commit/ab1c212ac1097ae6e1122ef1aba47ca51eca11f2
;;;","2023-08-04 03:09;thartmann;Fix Request (21u):
Fixes a crash during C1 compilation. The fix is low risk (bailout from inlining), applies cleanly and includes a regression test. Tested with tier 1 - 3.;;;","2023-08-04 03:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/40
Date: 2023-08-04 10:06:10 +0000;;;","2023-09-13 06:03;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
Small risk, simple change.
Trivial resolve needed.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2023-09-13 06:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1736
Date: 2023-09-13 13:03:25 +0000;;;",,,,,,,,,,,,,,,
Javac accepts char literal as template,JDK-8312821,5106326,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlaskey,tvaleev,tvaleev,2023-07-25 02:46,2023-08-10 09:13,2023-10-01 09:55,2023-08-02 14:02,21,22,,,,,22,tools,,0,,,,,,,,,,,,,,,,,,"Code:

public class Demo {
    public static void main(String[] args) {
        System.out.println(STR.'\{1+2}');
    }
}

Latest javac (build 22-ea+7-489) compiles this and produces 3 as an
output. I believe this is a mistake in the compiler.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285932,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,"0|i32fyz:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-08-01 08:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15106
Date: 2023-08-01 15:28:06 +0000;;;","2023-08-02 14:02;dukebot;Changeset: bc1d2eac
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2023-08-02 21:01:44 +0000
URL:       https://git.openjdk.org/jdk/commit/bc1d2eac9abd5fb38402113c7f0805c21ef7787f
;;;",,,,,,,,,,,,,,,,,,,,,
Incorrect format specifier in a HttpClient log message,JDK-8312818,5106323,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2023-07-25 02:46,2023-07-31 12:14,2023-10-01 09:55,2023-07-25 04:02,,,,,,,22,core-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,"When  the system property jdk.internal.httpclient.debug is set to true, the HttpClient implementation generates internal log messages. One of the log message has an incorrect format specifier which results in the following log message:

> SelectorAttachment Registering %s for %d (%s)

The %s, %d and %s are expected to be replaced with relevant values but because a String is being passed for the %d specifier, the conversion fails which results in the message being printed verbatim.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32fyb:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-07-25 02:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15014
Date: 2023-07-25 09:49:20 +0000;;;","2023-07-25 04:02;dukebot;Changeset: 91fe0323
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2023-07-25 11:00:33 +0000
URL:       https://git.openjdk.org/jdk/commit/91fe03232760ae0a9b56456f2f5f5ee6e483e4ef
;;;",,,,,,,,,,,,,,,,,,,,,
Compiler crash when template processor type is a captured wildcard,JDK-8312814,5106319,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jlaskey,tvaleev,tvaleev,2023-07-25 02:45,2023-08-16 06:14,2023-10-01 09:55,2023-08-01 17:49,21,22,,,,,22,tools,,0,hgupdate-sync,jdk21-fix-request,jdk21-fix-yes,,,,,,,,,,,,,,,"Code sample:

import java.util.List;

public class Demo {

    void x(List<? extends StringTemplate.Processor<String,
RuntimeException>> list) {
        list.get(0)."""";
    }
}

Output (build 22-ea+7-489):
java: An exception has occurred in the compiler (22-ea). Please file a
bug against the Java compiler via the Java bug reporting page
(https://bugreport.java.com) after checking the Bug Database
(https://bugs.java.com) for duplicates. Include your program, the
following diagnostic, and the parameters passed to the Java compiler
in your report. Thank you.
java: java.lang.AssertionError: <captured wildcard>.process
java: at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:162)
java: at jdk.compiler/com.sun.tools.javac.code.Symbol$MethodSymbol.<init>(Symbol.java:1942)
java: at jdk.compiler/com.sun.tools.javac.code.Symbol$MethodSymbol$1.<init>(Symbol.java:1948)
java: at jdk.compiler/com.sun.tools.javac.code.Symbol$MethodSymbol.clone(Symbol.java:1948)
java: at jdk.compiler/com.sun.tools.javac.code.Symbol$MethodSymbol.clone(Symbol.java:1918)
java: at jdk.compiler/com.sun.tools.javac.jvm.Gen.binaryQualifier(Gen.java:265)
java: at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitSelect(Gen.java:2388)
java: at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCFieldAccess.accept(JCTree.java:2581)
java: at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:885)
java: at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitApply(Gen.java:1921)",,,,,,,,,,,JDK-8314430,JDK-8314026,,,,,,,,,,,,,,,,,,,,,,JDK-8285932,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,"0|i32fxf:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-08-01 09:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15107
Date: 2023-08-01 16:22:26 +0000;;;","2023-08-01 09:32;jlaskey;Missing JCStringTemplate.processor translation  in TransTypes;;;","2023-08-01 09:53;jlaskey;jdk21-fix-request: This issue potentially affects any non-simple use of the StringTemplate.Processor type.

Low-risk - part of a preview feature.;;;","2023-08-01 17:49;dukebot;Changeset: f14245b3
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2023-08-02 00:47:20 +0000
URL:       https://git.openjdk.org/jdk/commit/f14245b3880ff735ae231b4c7d2c6b6907c5f7d4
;;;","2023-08-08 11:39;jjg;Fix request approved;;;","2023-08-08 12:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/167
Date: 2023-08-08 19:30:48 +0000;;;",,,,,,,,,,,,,,,,,
"Generational ZGC: Tests crash with assert(index == 0 || is_power_of_2(index))",JDK-8312749,5106251,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,rcastanedalo,aharadigopal,aharadigopal,2023-07-25 00:20,2023-08-31 00:54,2023-10-01 09:55,2023-08-25 00:19,21,22,,,,,22,hotspot,,0,c2,genzgc,oracle-triage-22,sqebug,,,,,,,,,,,,,,"Tests:
compiler/unsafe/GetUnsafeObjectG1PreBarrier.java
compiler/c2/TestNPEHeapBased.java
java/lang/instrument/GetObjectSizeIntrinsicsTest.java#id7
java/lang/instrument/GetObjectSizeIntrinsicsTest.java#id6

Product tested: JDK-21.0.1+2 (ATR run), regression happening from jdk-21+23
OS/architecture: Linux-x64-debug, not seen in product build
Reproducible: Always with below jvm-args
Is it a Regression: yes, started from  jdk-21+23 with the introduction of ZGenerational ZGC
Is it a platform-specific issue: Not sure, currently seen only with linux-x64-debug.


Error:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S75332/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/9f54ee97-f028-4eeb-8d9f-e71282916f83/runs/7a6c13e7-18c4-47c0-803f-9564e908be6a/workspace/open/src/hotspot/cpu/x86/gc/z/zAddress_x86.inline.hpp:35), pid=2718529, tid=2718532
#  assert(index == 0 || is_power_of_2(index)) failed: Incorrect load shift: 11
#
# JRE version: Java(TM) SE Runtime Environment (21.0.1+2) (fastdebug build 21.0.1-ea+2-LTS-6)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21.0.1-ea+2-LTS-6, compiled mode, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x5f0841]  ZPointer::load_shift_lookup(unsigned long)+0x61
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S75487/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b5a7a9b7-646f-4048-af4e-631e65e44fe7/runs/511c385e-5ad4-464a-81d8-dea39b7f0e83/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/scratch/4/core.2718529)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315082,,,,,,,JDK-8315029,,,,JDK-8314994,JDK-8307058,,,"2023-07-25 00:19;aharadigopal;GetUnsafeObjectG1PreBarrier_hs_err_pid2718529.log;https://bugs.openjdk.org/secure/attachment/104749/GetUnsafeObjectG1PreBarrier_hs_err_pid2718529.log",,,,,,,,,,,,,,,,,,,,,,"0|i32fib:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Fix failed,,"2023-08-01 06:42;eosterlund;Me and [~stefank] had a look in rr and could see that essentially an object cloning operation is being performed on an object array. It manifests when the object alignment is above 8 bytes. Then the C2 code is generating an arraycopy where the size to copy is based on the size of the allocation. But the allocation size is larger than the object size, because of the extra padding due to the inflated object alignment. The implication of this is that the arraycopy is performed out of bounds. Usually this doesn't matter because the source bytes are just copied into the replica. However, with Generational ZGC, we apply load barriers on this memory that is out of bounds, and hence uninitialized garbage.

In particular, the clone intrinsic (cf. LibraryCallKit::inline_native_clone) calls the GraphKit::new_array method, which returns a too high array size due to padding, which is used to copy_to_clone() bytes *including* padding, which is uninitialized memory.;;;","2023-08-02 06:56;rcastanedalo;The issue can be simply reproduced on latest mainline (commit ec2f38fd) using an empty Java source file as follows:

$ touch Foo.java
$ java -Xcomp -XX:+UseZGC -XX:+ZGenerational -XX:ObjectAlignmentInBytes=16 -XX:CompileOnly=java.lang.invoke.LambdaForm\$Name::replaceNames Foo.java;;;","2023-08-03 05:44;thartmann;ILW = Crash in GC because load barrier is applied to uninitialized memory, old issue but only manifests with Generational ZGC and -XX:ObjectAlignmentInBytes=16, disable clone intrinsic or compilation of affected method = HLM = P3;;;","2023-08-03 05:51;chagedorn;The assert already fails with the initial commit for Generational ZGC (JDK-8307058).;;;","2023-08-04 01:32;stefank;This is an attempt to fix the bug. I'm leaving it here for those more well-versed in the compilers to take a look at:
https://github.com/openjdk/jdk/compare/master...stefank:jdk:8312749_object_alignment_in_clone

Run with and without -XX:+UseNewCode;;;","2023-08-17 05:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15288
Date: 2023-08-15 12:43:56 +0000;;;","2023-08-25 00:19;dukebot;Changeset: 002b5948
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2023-08-25 07:18:34 +0000
URL:       https://git.openjdk.org/jdk/commit/002b59487094f98d9805997b5d1122c1a411b391
;;;","2023-08-28 00:43;rcastanedalo;Will back out this issue and create a redo that addresses the failures reported in JDK-8315029.;;;",,,,,,,,,,,,,,,
Resolve multiple definition of 'start_timer' when statically linking JDK native libraries with user code ,JDK-8312626,5106125,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiangli,jiangli,jiangli,2023-07-24 16:17,2023-08-10 06:04,2023-10-01 09:55,2023-07-27 12:15,,,,,,,22,client-libs,,0,,,,,,,,,,,,,,,,,,"We ran into following linker error when statically linking JDK/hotspot native libraries with user natives:

ld: error: duplicate symbol: start_timer
>>> defined at awt_ImagingLib.c:190 (/t.../src/java.desktop/share/native/libawt/awt/medialib/awt_ImagingLib.c:190)
>>>            libawt_relocatable.o:(start_timer) in archive .../jdk/jdk11-k8/lib_static/libawt.a
>>> defined at timing.c
>>>            .../timing.o:(.text+0x0)

https://gitlab.com/graphviz/graphviz/-/blob/main/lib/common/timing.c is an example of the code defines 'start_timer'.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303796,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32eqb:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-07-24 17:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15006
Date: 2023-07-25 00:13:12 +0000;;;","2023-07-27 12:15;dukebot;Changeset: c55d29ff
Author:    Jiangli Zhou <jiangli@openjdk.org>
Date:      2023-07-27 19:12:46 +0000
URL:       https://git.openjdk.org/jdk/commit/c55d29ff119598a410e714ef36f47fb6626a1a7a
;;;",,,,,,,,,,,,,,,,,,,,,
Test serviceability/dcmd/vm/TrimLibcHeapTest.java failed: RSS use increased,JDK-8312625,5106124,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,dholmes,dholmes,2023-07-24 15:19,2023-09-13 06:45,2023-10-01 09:55,2023-07-25 22:48,17,21,22,,,,22,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,memory,noreg-self,regression,tier3,,,,,,,,"----------System.out:(47/2726)*----------
Running DCMD 'System.trim_native_heap' through 'JMXExecutor'
---------------- stdout ----------------
Trim native heap: RSS+Swap: 125M->125M (+112K)

---------------- stderr ----------------

----------------------------------------

test TrimLibcHeapTest.jmx(): failure
java.lang.RuntimeException: 'Trim native heap: RSS\\+Swap: \\d+[BKMG]->\\d+[BKMG] \\(-\\d+[BKMG]\\)' missing from stdout/stderr

The test expects to see a final negative amount, but in this case RSS has increased by 112K",Lightweight locking enabled,,,,,,,,,,JDK-8316194,JDK-8314253,,,,,,,,,,,JDK-8268893,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,,"0|i32eq3:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-25 05:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15009
Date: 2023-07-25 06:28:16 +0000;;;","2023-07-25 22:48;dukebot;Changeset: 117f42db
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-07-26 05:46:13 +0000
URL:       https://git.openjdk.org/jdk/commit/117f42dbe9a78bcf43bdf3873d5d86a19a9092d3
;;;","2023-07-26 02:10;stuefe;Backporter note: This issue is not connected to the native autotrim feature added with JDK-8293114. This is just a test for the (much older) manual trimming via jcmd.;;;","2023-08-11 03:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/53
Date: 2023-08-11 10:05:21 +0000;;;","2023-08-11 03:14;shade;Fix Request (21u)

Improves test stability. Applies cleanly. Test passes.;;;","2023-09-01 05:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1718
Date: 2023-09-01 12:18:59 +0000;;;","2023-09-04 05:13;clanger;Fix Request (17u)
Same as for 21u, improves test stability. Test passes in SAP's nightlies.;;;",,,,,,,,,,,,,,,,
WSL Linux build crashes after JDK-8310233,JDK-8312620,5106116,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stuefe,djelinski,djelinski,2023-07-24 12:54,2023-08-30 21:56,2023-10-01 09:55,2023-07-27 06:47,22,,,,,,22,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,large-pages,memory,regression,,,,,,,,,,"WSL 1 linux build crashes with:
#  Internal Error (/home/daniel/dev/jdk/open/src/hotspot/os/linux/hugepages.cpp:150), pid=32425, tid=32430
#  assert(_pagesizes.contains(_default_hugepage_size)) failed: Unexpected configuration: default pagesize (2097152) has no associated directory in /sys/kernel/mm/hugepages..

$ ls /sys/kernel/mm/hugepages
ls: cannot access '/sys/kernel/mm/hugepages': No such file or directory

$ grep Hugepagesize /proc/meminfo
Hugepagesize:       2048 kB

To reproduce, configure with --build=x86_64-unknown-linux-gnu --openjdk-target=x86_64-unknown-linux-gnu --enable-debug, then build as usual.",,,,,,,,,,,JDK-8315124,JDK-8315433,,,,,,,,,,,,,,,,,,,,,,JDK-8310233,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32eob:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-24 13:14;djelinski;possibly related: https://github.com/Microsoft/WSL/issues/3796;;;","2023-07-24 17:57;dholmes;I'm not sure to what extent WSL is a supported environment for us? Do we have an easy way to detect we are running under WSL?

Assigning to [~stuefe] for comment.;;;","2023-07-24 22:38;stuefe;That looks exactly like https://github.com/Microsoft/WSL/issues/3796.

The JVM, since JDK-8310233, expects the huge page information in /sys/kernel/mm/hugepages/hugepage-XXXX to match the hugepage info in /proc/meminfo: the hugepage size in /proc/meminfo should have a corresponding entry in /sys/kernel/mm/hugepages/hugepage-XXXX. That is lined out in https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt. 

Before JDK-8310233, if the information were out of sync, the JVM would just assume that page size was available. I thought it safe to assert here since this stuff is in the kernel since 2.xx.

I mean, sure, I can and probably will disarm the assert, but I consider this a broken kernel. If you cannot trust procfs, I wonder what else is broken.;;;","2023-07-24 23:20;stuefe;[~djelinski] Please test https://github.com/openjdk/jdk/pull/15007 whether this fixes your problem.;;;","2023-07-25 04:33;djelinski;[~stuefe] Yes, the build finished successfully with these changes.;;;","2023-07-25 11:29;jvernee;> I'm not sure to what extent WSL is a supported environment for us?

As far as I know it's supported as much as any other Linux kernel. I've been using it on and off for several years as well.

The build system special cases both WSL 1 and 2, and they are at least supported environments to build in when targeting Windows. Targeting Linux is also possible for builds. 

Running on Linux/WSL is another matter, and can lead to some surprising issues. Such as the JDK assuming that certain kernel APIs are implemented, while they are not. It's probably not covered as much as other Linux kernels.;;;","2023-07-25 18:22;dholmes;Okay so WSL is expected to be a working build platform, which requires some level of actual running of the JDK as well, but generally speaking we don't test nor support running on WSL. So at any time builds could start failing, as per this issue, because of some deficiency in WSL compared to a real Linux system. That seems a difficult position for us to maintain.;;;","2023-07-25 22:03;jwaters;[~dholmes] Of the Windows environments, WSL2 and MSYS2 are the primary supported platforms (and I believe WSL 2 is the de facto default since I don't think Oracle uses any MSYS2 subsystems officially last I heard), while WSL1 is (sort of) deprecated but still supported (albeit in a rather wonky way) for compatibility. MSYS (the original one) used to be supported, but not any longer. I don't know about Cygwin since it's such an old environment, or if Oracle uses Cygwin for official Java releases;;;","2023-07-25 22:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15007
Date: 2023-07-25 06:18:08 +0000;;;","2023-07-26 05:28;stuefe;GHAs use MSYS2. CI/CDs of the companies I know use MSYS2 or cygwin. For local builds, everyone around me uses cygwin. Let's not declare a build environment obsolete that has served us - very stably so - for the last 10+ years.

Fix is for RFR and needs a second review.
;;;","2023-07-26 06:21;jwaters;Ah, I didn't mean that Cygwin was obsolete, just that I don't know what the status of the support for it is. I do know that WSL2 and all of the MSYS2 subsystems are the primary supported environments in the build system for Windows, though;;;","2023-07-26 12:37;djelinski;last time I checked, JDK builds on WSL2 were unstable and slow; I personally use WSL1 for speed - it's ~33% faster than Cygwin for me.
Cygwin is the reference build platform supported by Oracle.;;;","2023-07-26 19:28;dholmes;It is a pity that Cygwin, MSYS, WSL are not even mentioned on:

https://wiki.openjdk.org/display/Build/Supported+Build+Platforms;;;","2023-07-27 06:47;dukebot;Changeset: 25058cd2
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-07-27 13:45:36 +0000
URL:       https://git.openjdk.org/jdk/commit/25058cd23ac9c8993e7acfd82728ee4c623f0914
;;;","2023-08-23 01:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1679
Date: 2023-08-21 12:47:15 +0000;;;","2023-08-23 01:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2086
Date: 2023-08-17 14:50:49 +0000;;;","2023-08-25 05:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/102
Date: 2023-08-25 12:45:41 +0000;;;","2023-08-25 22:34;stuefe;Fix Request 21u: 

I would like to backport this to 21u since it is a pre-requisite for fixing https://bugs.openjdk.org/browse/JDK-8312182 (""THPs cause huge RSS due to thread start timing issue""). 

Patch applies cleanly and risk is small. 

This particular patch fixes a regression post-8310233 which caused build errors when building inside WSL on Windows.;;;","2023-08-26 05:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/108
Date: 2023-08-26 06:00:52 +0000;;;","2023-08-30 02:20;stuefe;Fix Request 17u:

I would like to backport this since it is a pre-requisite for fixing https://bugs.openjdk.org/browse/JDK-8312182 (""THPs cause huge RSS due to thread start timing issue"").

Patch applies cleanly and risk is small.

This particular patch fixes a regression post-8310233 which caused build errors when building inside WSL on Windows. ;;;","2023-08-30 02:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1696
Date: 2023-08-25 11:45:18 +0000;;;",,
Strange error message when switching over long,JDK-8312619,5106115,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jvernee,jvernee,2023-07-24 12:21,2023-08-07 01:22,2023-10-01 09:55,2023-07-26 03:37,22,,,,,,22,tools,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,"When I use this code:

long l = 8L;
int x = switch (l) {
    case 8L -> 1;
    case 4L -> 2;
    default -> throw new UnsupportedOperationException();
}

I get this error message (copied from jshell):

|  Error:
|  constant label of type long is not compatible with switch selector type long
|      case 8L -> 1;
|           ^^
|  Error:
|  constant label of type long is not compatible with switch selector type long
|      case 4L -> 2;
|    

This looks like a bug, as I'd expect 'long' to be compatible with 'long'.",,,,,,,,,,,JDK-8313869,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32eo3:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-07-25 07:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15020
Date: 2023-07-25 14:36:31 +0000;;;","2023-07-26 03:37;dukebot;Changeset: cc2a75e1
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-07-26 10:35:15 +0000
URL:       https://git.openjdk.org/jdk/commit/cc2a75e11c4b5728c547aa764067427fdea8c941
;;;","2023-08-02 23:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/35
Date: 2023-08-03 06:33:30 +0000;;;","2023-08-03 03:01;jlahoda;Fix Request

This significantly improves error message in case a switch has selector of type long/float/double/boolean (which is not allowed at this time), improving the user's experience. The fix itself should generally be safe. Testing: standard javac regression tests.;;;",,,,,,,,,,,,,,,,,,,
SIGSEGV in ConnectionGraph::verify_ram_nodes,JDK-8312617,5106111,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,cslucas,ecaspole,ecaspole,2023-07-24 10:51,2023-09-04 05:48,2023-10-01 09:55,2023-08-02 07:29,22,,,,,,22,hotspot,,0,c2,c2-ea,intermittent,oracle-triage-17,oracle-triage-21,oracle-triage-22,regression,,,,,,,,,,,"This crash happened in weekly promo build testing of 22-b7 using SPECjvm2008 scimark.monte_carlo.

It seems method ConnectionGraph::verify_ram_nodes came with JDK-8287061.


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f50bfeef731, pid=2570475, tid=2570489
#
# JRE version: Java(TM) SE Runtime Environment (22.0+7) (build 22-ea+7-489)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (22-ea+7-489, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x742731]  ConnectionGraph::verify_ram_nodes(Compile*, Node*)+0xc1
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:+UseG1GC -XX:-PrintWarnings -XX:+UseLargePages -XX:+PerfDataSaveToFile -Xlog:gc* ./SPECjvm2008.jar --showversion scimark.monte_carlo -ikv

Host: Intel(R) Xeon(R) Gold 6354 CPU @ 3.00GHz, 72 cores, 502G, Oracle Linux Server release 8.8
Time: Fri Jul 21 00:16:28 2023 UTC elapsed time: 10.288761 seconds (0d 0h 0m 10s)

---------------  T H R E A D  ---------------

Current thread (0x00007f50b81e7520):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=2570489, stack(0x00007f50695d6000,0x00007f50696d7000) (1028K)]


Current CompileTask:
C2:  10288  717       4       spec.benchmarks.scimark.monte_carlo.MonteCarlo::run (26 bytes)

Stack: [0x00007f50695d6000,0x00007f50696d7000],  sp=0x00007f50696d2840,  free space=1010k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x742731]  ConnectionGraph::verify_ram_nodes(Compile*, Node*)+0xc1
V  [libjvm.so+0x64256b]  Compile::Optimize()+0x13db
V  [libjvm.so+0x643aca]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xf2a
V  [libjvm.so+0x571a0d]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x13d
V  [libjvm.so+0x649757]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa97
V  [libjvm.so+0x64c838]  CompileBroker::compiler_thread_loop()+0x698
V  [libjvm.so+0x8f5448]  JavaThread::thread_main_inner() [clone .part.0]+0xb8
V  [libjvm.so+0xe96cf8]  Thread::call_run()+0xa8
V  [libjvm.so+0xcbccfa]  thread_native_entry(Thread*)+0xda

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000028

Registers:
RAX=0x00007f4fe4397600, RBX=0x00000000000008a4, RCX=0x0000000000000000, RDX=0x00007f4fe4397620
RSP=0x00007f50696d2840, RBP=0x00007f50696d28e0, RSI=0x0000000000000000, RDI=0x00007f4fe439f600
R8 =0x00007f4fe4397600, R9 =0x00007f4fe4397600, R10=0x0000000000000000, R11=0x0000000000000000
R12=0x00007f50696d4b20, R13=0x00007f50696d2b30, R14=0x0000000000000000, R15=0x00007f50696d2980
RIP=0x00007f50bfeef731, EFLAGS=0x0000000000010202, CSGSFS=0x002b000000000033, ERR=0x0000000000000004
  TRAPNO=0x000000000000000e
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312744,JDK-8312748,,JDK-8287061,,,,,,,,"2023-07-24 23:34;thartmann;hs_err_pid2570475.log;https://bugs.openjdk.org/secure/attachment/104736/hs_err_pid2570475.log",,,,,,,x86,,,,,,,b07,22,,linux,,,,,"0|i32en7:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-25 00:11;thartmann;ILW = Crash during Escape Analysis (regression in JDK 22 b07 from JDK-8287061), intermittent with SPECjvm2008 MonteCarlo benchmark, -XX:-ReduceAllocationMerges = HML = P2 ;;;","2023-07-25 00:12;thartmann;Cesar, please have a look. Unfortunately, no replay file was saved and I'm not (yet) able to reproduce. ;;;","2023-07-25 00:44;thartmann;The reproducer from (duplicate) JDK-8312744 / JDK-8312748 works:

java compiler.arraycopy.stress.StressCharArrayCopy

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f4120152f76, pid=1874891, tid=1874905
#
# JRE version: Java(TM) SE Runtime Environment (22.0+8) (fastdebug build 22-ea+8-534)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+8-534, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xba7f76]  ConnectionGraph::verify_ram_nodes(Compile*, Node*)+0x146
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
;;;","2023-07-25 01:57;dqu;Hi all, I'm not the reporter but I find that the following reduced version of the test case in JDK-8312748 also triggers the same crash (V  [libjvm.so+0x635d16]  Unique_Node_List::push(Node*)+0x20) on my machine (Linux x64). Hope it helps :P.

```
public class TestSyncStatic implements Cloneable {

  public static void main(String[] args) throws CloneNotSupportedException {
    TestSyncStatic t = new TestSyncStatic();

    for (int i = 0; i < 50_000; ++i) {
      synchronized (TestSyncStatic.class) {
        synchronized (TestSyncStatic.class) {
          t.clone();
        }
        synchronized(TestSyncStatic.class) {
          for (int var0 = 1; var0 < 32; var0++);
        }
      }
    }
  }
}
```;;;","2023-07-25 07:37;dqu;It seems that Cesar's patch in JDK-8287061 just exposes the bug but is **not the root cause**. I have tried to reset the source code using git to the commit just before that patch and still observed that `C->root()` returns null and `_failure_reason` is ""retry without locks coarsening"" after executing `mexp.eliminate_macro_nodes()` in `Compile::Optimize()`.

The reason seems to be that in the fix of JDK-8268347, failure needs to be checked after calling `eliminate_macro_nodes()`. But they only check here: 

https://github.com/openjdk/jdk17/commit/4d8b5c70dff51470210a0ca93b932af1b27c9f27#diff-2faebd05d08f9115f8d9ef771644cf05087a6986c2f9013d7163c6aa720169c3R2577-R2578

but forget to check here (in `Compile::Optimize()`):

https://github.com/openjdk/jdk/blob/9606cbcd2314506d0054ecba1804e5e0c2670cd6/src/hotspot/share/opto/compile.cpp#L2323-L2324

Since there is a `record_failure()` call in `coarsened_locks_consistent()` called by `eliminate_macro_nodes()`, which sets `_root` to null, following access to _root in `ConnectionGraph::verify_ram_nodes()` added by Cesar will crash.;;;","2023-07-25 14:18;cslucas;Yeah, `verify_ram_nodes` is SEGFAULTing because `root()` is returning null since the compilation is already failing with failure reason ""retry without locks coarsening"".

However, we are seeing the SEGFAULT now because I moved the `if (failing()) return;` that was just after the call to `mexp.eliminate_macro_nodes();` to _after_ calling `verify_ram_nodes()`.

I'm going to submit a patch to make `verify_ram_nodes()` check if we are already `failing()` and if so just return.

What do you all think?;;;","2023-07-25 20:11;dqu;Hi Cesar, I think your idea is good. And you could also add another `failing()` test just after `mexp.eliminate_macro_nodes()` call since if compilation has failed we don’t need to do `igvn.optimize()` anymore.;;;","2023-07-26 12:08;kvn;Agree.;;;","2023-07-26 15:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15048
Date: 2023-07-26 22:26:05 +0000;;;","2023-08-02 07:29;dukebot;Changeset: 64467923
Author:    Cesar Soares Lucas <cslucas@openjdk.org>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-08-02 14:27:07 +0000
URL:       https://git.openjdk.org/jdk/commit/6446792327c629dbd1dfc1edfb547065f6fce651
;;;",,,,,,,,,,,,,
handle WideCharToMultiByte return values,JDK-8312612,5106106,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2023-07-24 08:21,2023-09-25 00:13,2023-10-01 09:55,2023-07-28 06:47,17,21,22,,,,22,client-libs,,0,jdk21u-fix-request,,,,,,,,,,,,,,,,,"The function WideCharToMultiByte is used at a number of places of the JDK codebase for conversion purposes.
Unfortunately, the function might fail because of various reasons, so the return value must be checked to avoid undefined behavior or even crashes.
see
https://learn.microsoft.com/en-us/windows/win32/api/stringapiset/nf-stringapiset-widechartomultibyte
especially
https://learn.microsoft.com/en-us/windows/win32/api/stringapiset/nf-stringapiset-widechartomultibyte#return-value

At most places in the coding the return values are already checked, but some are missing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,windows,,,,,"0|i32em3:",9223372036854775807,b09,,,,,,,,,,,"2023-07-25 04:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15015
Date: 2023-07-25 11:17:23 +0000;;;","2023-07-28 06:47;dukebot;Changeset: d9559f9b
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-07-28 13:45:19 +0000
URL:       https://git.openjdk.org/jdk/commit/d9559f9b24ee76c074cefcaf256d11ef5a7cc5b7
;;;","2023-09-21 05:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/188
Date: 2023-09-21 12:40:24 +0000;;;","2023-09-25 00:13;mbaesken;jdk21u backport request
I would like to have the patch in jdk21u as well, because the issue is present there too. The patch applies cleanly and is low-to-medium risk.;;;",,,,,,,,,,,,,,,,,,,
GenShen: Old generation available is unintentionally restricted by mutator's available memory,JDK-8312610,5106104,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wkemper,wkemper,wkemper,2023-07-24 08:10,2023-07-24 14:24,2023-10-01 09:55,2023-07-24 14:24,repo-shenandoah,,,,,,,hotspot,,0,gc,gc-shenandoah,genshen,,,,,,,,,,,,,,,This is an unintended side effect of refactoring the heuristics in:https://bugs.openjdk.org/browse/JDK-8311602 ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311602,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32eln:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-07-24 08:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/301
Date: 2023-07-24 15:13:13 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
"[Lilliput/JDK17] Cherry-pick: 8276333: jdk/jfr/event/oldobject/TestLargeRootSet.java failed ""assert(!contains(edge->reference())) failed: invariant""",JDK-8312606,5106099,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rkennke,rkennke,rkennke,2023-07-24 06:38,2023-07-26 11:19,2023-10-01 09:55,2023-07-26 11:19,repo-lilliput-17,,,,,,,hotspot,,0,amazon-interest,lilliput,,,,,,,,,,,,,,,,"After JDK-8308296 we should also cherry-pick the follow-up fix JDK-8276333 to avoid a mess when merging from upstream jdk17u.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32ekj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-07-24 06:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/54
Date: 2023-07-24 13:47:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Null pointer access in Compile::TracePhase::~TracePhase after JDK-8311976,JDK-8312596,5106087,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asmehra,shade,shade,2023-07-24 03:55,2023-09-04 06:10,2023-10-01 09:55,2023-08-01 12:29,22,,,,,,22,hotspot,,0,c2,oracle-triage-17,oracle-triage-21,oracle-triage-22,regression,sonarcloud-found,,,,,,,,,,,,"SonarCloud reports a new warning here: ""_compile"" can be NULL on this path:

```
Compile::TracePhase::~TracePhase() {
#ifdef ASSERT
  if (PrintIdealNodeCount) {
    tty->print_cr(""phase name='%s' nodes='%d' live='%d' live_graph_walk='%d'"",
                  _phase_name, _compile->unique(), _compile->live_nodes(), _compile->count_live_nodes_by_graph_walk());
  }
```

I think it is a regression since JDK-8311976. 

This is minor, would only manifest in debug builds, but would be good to fix anyway.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311976,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32ehv:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-24 04:45;thartmann;ILW = Potential null pointer access, in debug code with PrintIdealNodeCount, disable PrintIdealNodeCount = MLM = P4;;;","2023-07-24 11:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15002
Date: 2023-07-24 18:16:19 +0000;;;","2023-08-01 12:29;dukebot;Changeset: 7ba8c69a
Author:    Ashutosh Mehra <asmehra@redhat.com>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2023-08-01 19:26:45 +0000
URL:       https://git.openjdk.org/jdk/commit/7ba8c69a2cb094f124234fef5a0f7ac98993c1a4
;;;",,,,,,,,,,,,,,,,,,,,
New parentheses warnings after HarfBuzz 7.2.0 update,JDK-8312592,5106083,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2023-07-24 03:29,2023-07-31 12:13,2023-10-01 09:55,2023-07-25 01:48,11.0.21,17.0.9,21,22,,,22,client-libs,,0,,,,,,,,,,,,,,,,,,"At least GCC 6 fail the build with warnings-as-errors here:

```
../src/java.desktop/share/native/libharfbuzz/hb-subset-plan.cc: In function 'void _collect_layout_variation_indices(hb_subset_plan_t*)':
../src/java.desktop/share/native/libharfbuzz/hb-subset-plan.cc:389:83: error: suggest parentheses around assignment used as truth value [-Werror=parentheses]
     if (unlikely (!plan->check_success (font = _get_hb_font_with_variations (plan)))) {
                                                                                   ^
../src/java.desktop/share/native/libharfbuzz/hb.hh:259:46: note: in definition of macro 'unlikely'
 #define unlikely(expr) (__builtin_expect (!!(expr), 0))
                                              ^~~~
```

This is caused by HarfBuzz update to 7.2.0, JDK-8307301",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307301,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32egz:",9223372036854775807,b08,,,,,,,,,,,"2023-07-24 03:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14996
Date: 2023-07-24 10:37:43 +0000;;;","2023-07-25 01:48;dukebot;Changeset: ea067fc3
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-07-25 08:46:12 +0000
URL:       https://git.openjdk.org/jdk/commit/ea067fc3d2b1fecda694442c7921ecb980377c1e
;;;",,,,,,,,,,,,,,,,,,,,,
GCC 6 build failure after JDK-8280982,JDK-8312591,5106082,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2023-07-24 03:16,2023-08-10 06:05,2023-10-01 09:55,2023-08-02 00:02,21,22,,,,,22,client-libs,,0,amazon-interest,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,noreg-build,oraclejdk-na,regression,,,,,,,,,,,"There is a simple build failure after JDK-8280982 with older GCCs:

```
* For target support_native_java.desktop_libawt_xawt_screencast_pipewire.o:
In file included from /home/buildbot/worker/build-jdkX-debian9/build/src/java.desktop/unix/native/libpipewire/include/spa/buffer/buffer.h:12:0,
                 from /home/buildbot/worker/build-jdkX-debian9/build/src/java.desktop/unix/native/libpipewire/include/pipewire/stream.h:171,
                 from /home/buildbot/worker/build-jdkX-debian9/build/src/java.desktop/unix/native/libawt_xawt/awt/screencast_pipewire.h:36,
                 from /home/buildbot/worker/build-jdkX-debian9/build/src/java.desktop/unix/native/libawt_xawt/awt/screencast_pipewire.c:33:
/home/buildbot/worker/build-jdkX-debian9/build/src/java.desktop/unix/native/libpipewire/include/spa/utils/defs.h:61:24: error: ""__clang_major__"" is not defined [-Werror=undef]
 #elif __GNUC__ >= 7 || __clang_major__ >= 10
                        ^~~~~~~~~~~~~~~
```

There is an obvious fix for this: we need to check for `defined(__GNUC__)` explicitly before touching `__clang_major__`.

(Yes, GCC 6 is old; but we would like to make sure it builds until we run into hard to resolve build issues. This allows modern JDKs to be built in legacy enterprise environments for e.g. portable builds.)",,,,,,,,,,,JDK-8313696,,,,,,,,,,,,,,,,,,,,,,,JDK-8280982,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32egr:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-07-24 03:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14995
Date: 2023-07-24 10:21:52 +0000;;;","2023-08-02 00:02;dukebot;Changeset: 9454b2bb
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-08-02 07:00:37 +0000
URL:       https://git.openjdk.org/jdk/commit/9454b2bbe130fdbe86485b928b80d19156c709ee
;;;","2023-08-02 01:24;shade;Fix Request (21u)

Fixes the build on older toolchains. Applies cleanly. Risk is low: adds a few warning exclusions.;;;","2023-08-02 01:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/32
Date: 2023-08-02 08:22:52 +0000;;;",,,,,,,,,,,,,,,,,,,
[JVMCI] JVMCI support for virtual Vector API objects,JDK-8312579,5106070,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,gbarany,gbarany,gbarany,2023-07-24 00:58,2023-08-10 06:03,2023-10-01 09:55,2023-07-27 03:49,17,21,22,,,,22,hotspot,,0,jvmci,oracle-triage-22,vectorapi,,,,,,,,,,,,,,,"Optimized Vector API values are represented as raw values in SIMD registers. When deoptimizing with such a value in the state, a Java heap object must be recreated. HotSpot has a special ""Location::vector"" location type to mark Vector API values, and it knows how to materialize such values.

Extend the JVMCI code installer to mark the appropriate values as vectors so that JVMCI-compiled code can also deoptimize with Vector API values in SIMD registers.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313530,,,,JDK-8310055,JDK-8223347,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32ee3:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-24 02:14;thartmann;ILW = Missing support for Vector API, Vector API (incubator) with JVMCI, no workaround = MMH = P3;;;","2023-07-24 12:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15003
Date: 2023-07-24 18:58:02 +0000;;;","2023-07-27 03:49;dukebot;Changeset: 271417a0
Author:    Gergö Barany <gbarany@openjdk.org>
Committer: Doug Simon <dnsimon@openjdk.org>
Date:      2023-07-27 10:48:18 +0000
URL:       https://git.openjdk.org/jdk/commit/271417a0e10245504e41c98c65941d5fe21f33ac
;;;",,,,,,,,,,,,,,,,,,,,
Redundant javadoc in X400Address,JDK-8312578,5106069,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2023-07-24 00:54,2023-07-31 12:13,2023-10-01 09:55,2023-07-24 15:15,20,21,,,,,22,security-libs,,0,noreg-doc,tencent-interest,,,,,,,,,,,,,,,,"JDK-8296741 removed the constructor X400Address(byte[] value), but it didn't remove the javadoc for this constructor.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32edv:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-07-24 01:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14990
Date: 2023-07-24 08:04:53 +0000;;;","2023-07-24 15:15;dukebot;Changeset: d63bff67
Author:    John Jiang <jjiang@openjdk.org>
Date:      2023-07-24 22:12:28 +0000
URL:       https://git.openjdk.org/jdk/commit/d63bff672feafc7df4b1324bf7acce105a998913
;;;",,,,,,,,,,,,,,,,,,,,,
jdk/jdk/jfr/jvm/TestChunkIntegrity.java  fails with timeout,JDK-8312574,5106065,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2023-07-24 00:27,2023-08-10 06:04,2023-10-01 09:55,2023-07-28 06:34,21,22,,,,,22,hotspot,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"Since 15th July 2023 we see failures of the test jdk/jdk/jfr/jvm/TestChunkIntegrity.java . The test fails with timeouts, maybe we should try to increase the timeout values of this test ?
Failures occurred so far on macOS and AIX in our nightly tests; so far we observed the timeouts  6 times .

Looking at the test changes, this might be related to  JDK-8303134: JFR: Missing stack trace during chunk rotation stress (pushed on 14th July).",,,,,,,,,,,JDK-8313671,JDK-8313943,,,,,,,,,,,,,,,,,,,JDK-8313304,,,,,,,JDK-8313304,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32ecz:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-07-24 02:24;egahlin;TestChunkIntegrity.java was @ignored before JDK-8303134. Now it is running. ;;;","2023-07-24 04:05;mbaesken;Hi Erik, I try to run the test with increased timeout for a while to see if this helps.;;;","2023-07-28 01:20;mbaesken;With an increased timeout value  ( main/othervm/timeout=300  ) we do well, no failures any more .  I opened https://bugs.openjdk.org/browse/JDK-8313304 for the timeout increase.;;;","2023-07-28 03:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15067
Date: 2023-07-28 10:01:07 +0000;;;","2023-07-28 06:34;dukebot;Changeset: 34173ff0
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-07-28 13:31:13 +0000
URL:       https://git.openjdk.org/jdk/commit/34173ff0d11667baffa6604e6f1886b8976ab2c2
;;;","2023-07-31 08:28;mbaesken;jdk21 backport request
I would like to have the patch in jdk21 as well, to get less test timeouts there.  The patch applies cleanly and is low risk.   Only test fix, so backporting to jdk21 should be okay.;;;","2023-07-31 08:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/29
Date: 2023-07-31 15:26:08 +0000;;;","2023-08-03 00:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/162
Date: 2023-08-03 07:17:58 +0000;;;",,,,,,,,,,,,,,,
Failure during CompileOnly parsing leads to ShouldNotReachHere,JDK-8312573,5106064,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2023-07-24 00:27,2023-09-15 07:20,2023-10-01 09:55,2023-08-01 23:38,11,17,21,,,,21.0.1,hotspot,,0,compilercontrol,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,oracle-triage-22,starter,,,,,,,,,,"java -Xcomp -XX:CompileOnly=,

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (workspace/open/src/hotspot/share/compiler/compilerOracle.cpp:1061), pid=1823394, tid=1823395
#  Error: ShouldNotReachHere()
#
# JRE version:  (21.0+25) (fastdebug build )
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+25-LTS-2118, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xa2240e]  CompilerOracle::parse_compile_only(char*)+0x71e

Stack: [0x00007f4a20a21000,0x00007f4a20b22000],  sp=0x00007f4a20b202b0,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xa2240e]  CompilerOracle::parse_compile_only(char*)+0x71e  (compilerOracle.cpp:1061)
V  [libjvm.so+0xa2258f]  compilerOracle_init()+0x10f
V  [libjvm.so+0xe25a0a]  init_globals()+0xaa
V  [libjvm.so+0x17b0825]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x2c5
V  [libjvm.so+0xf882b5]  JNI_CreateJavaVM+0x75
C  [libjli.so+0x3b0f]  JavaMain+0x8f
C  [libjli.so+0x79d9]  ThreadJavaMain+0x9

The issue was fixed as a side effect of JDK-8027711 in JDK 22 b02. The VM now prints an error:

CompileOnly: An error occurred during parsing
Line: ','
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.

Since a backport of JDK-8027711 is not an option, we might want to extract a point-fix for JDK < 22.",,,,,,,,,,,JDK-8313683,JDK-8313844,JDK-8313682,JDK-8316366,,,,,,,,,,,,,,,,,,,,JDK-8027711,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32ecr:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-27 05:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/19
Date: 2023-07-27 12:01:05 +0000;;;","2023-08-01 23:38;dukebot;Changeset: 6f76b65a
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-08-02 06:36:48 +0000
URL:       https://git.openjdk.org/jdk21u/commit/6f76b65ace50b2361221dddab120e91b057497c1
;;;","2023-08-04 03:11;thartmann;Forgot the fix request. Here it is.

Fix Request (21u):
Fixes a crash during CompileOnly parsing. The patch applies cleanly and includes a regression test. Tested with tier 1 - 3.;;;","2023-09-13 05:46;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
Low risk, printing improvement.
Trivial resolves needed.
Test passes and fails without the fix. SAP nighlty testing passed.;;;","2023-09-13 05:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1735
Date: 2023-09-13 12:46:04 +0000;;;",,,,,,,,,,,,,,,,,,
[TESTBUG] Jtreg compiler/loopopts/superword/TestDependencyOffsets.java fails on 512-bit SVE,JDK-8312570,5106061,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pli,pli,pli,2023-07-24 00:13,2023-09-12 11:14,2023-10-01 09:55,2023-08-28 18:35,21,22,,,,,22,hotspot,,0,noreg-self,oracle-triage-22,,,,,,,,,,,,,,,,"In our recent tests on AArch64 CPUs with 512-bit SVE, we see Hotspot jtreg `compiler/loopopts/superword/TestDependencyOffsets.java` has a large number of IR check failures. The reason is that many of the test loops in the jtreg cannot be vectorized on 512-bit SVE due to data dependence but the test code assumes they can.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298935,,,,,,,,"2023-08-27 21:20;pli;generator.py;https://bugs.openjdk.org/secure/attachment/105262/generator.py",,,,,,,aarch64,,,,,,,,,,generic,,,,,"0|i32ec3:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-25 00:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15010
Date: 2023-07-25 07:42:59 +0000;;;","2023-07-26 03:26;thartmann;ILW = Test fails due to missing vectorization (test bug), single test on AArch64 with 513-bit SVE, no workaround = MLH = P4;;;","2023-08-28 18:35;dukebot;Changeset: e5ea9aa9
Author:    Pengfei Li <pli@openjdk.org>
Date:      2023-08-29 01:34:33 +0000
URL:       https://git.openjdk.org/jdk/commit/e5ea9aa9aa446503fd92cdba0a9653593c958597
;;;",,,,,,,,,,,,,,,,,,,,
FX8-3DFeatures.SpecularColorTestApp throws NPE,JDK-8312564,5106055,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2023-07-23 22:33,2023-08-28 08:09,2023-10-01 09:55,2023-08-28 08:09,internal,,,,,,internal,javafx,,0,javafx-metal,sn_149,sn_151,,,,,,,,,,,,,,,"FX8-3DFeatures.SpecularColorTestApp and FX8-3DFeatures.WritableMapTestApp are throwing below exception:

java.lang.NullPointerException: Cannot invoke ""com.sun.prism.Texture.lock()"" because ""altTex"" is null
    at javafx.graphics@21-internal/com.sun.prism.impl.BaseTexture.getSharedTexture(BaseTexture.java:215)
    at javafx.graphics@21-internal/com.sun.prism.impl.BaseResourceFactory.getCachedTexture(BaseResourceFactory.java:213)
    at javafx.graphics@21-internal/com.sun.prism.impl.BaseResourceFactory.getCachedTexture(BaseResourceFactory.java:170)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGImageView.renderContent(NGImageView.java:121)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.CacheFilter.renderNodeToCache(CacheFilter.java:687)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.CacheFilter.render(CacheFilter.java:587)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGNode.renderCached(NGNode.java:2379)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGNode.doRender(NGNode.java:2065)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGImageView.doRender(NGImageView.java:103)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGNode.render(NGNode.java:1966)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGGroup.renderContent(NGGroup.java:270)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGRegion.renderContent(NGRegion.java:579)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGNode.doRender(NGNode.java:2074)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGNode.render(NGNode.java:1966)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGGroup.renderContent(NGGroup.java:270)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGRegion.renderContent(NGRegion.java:579)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGNode.doRender(NGNode.java:2074)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGNode.render(NGNode.java:1966)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGGroup.renderContent(NGGroup.java:270)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGRegion.renderContent(NGRegion.java:579)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGNode.doRender(NGNode.java:2074)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGNode.render(NGNode.java:1966)
    at javafx.graphics@21-internal/com.sun.javafx.tk.quantum.ViewPainter.doPaint(ViewPainter.java:480)
    at javafx.graphics@21-internal/com.sun.javafx.tk.quantum.ViewPainter.paintImpl(ViewPainter.java:329)
    at javafx.graphics@21-internal/com.sun.javafx.tk.quantum.UploadingPainter.run(UploadingPainter.java:156)
    at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
    at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
    at javafx.graphics@21-internal/com.sun.javafx.tk.RenderJob.run(RenderJob.java:58)
    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
    at javafx.graphics@21-internal/com.sun.javafx.tk.quantum.QuantumRenderer$PipelineRunnable.run(QuantumRenderer.java:126)
    at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,,,,,,,,,,,,,,,JDK-8302050,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,,"0|i32ear:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-08-28 03:03;jdv;Both these tests throw NPE because we don't have createSharedTexture() logic in MTLTexture.java
When we want to re-use the same texture for different wrap modes we use createSharedTexture() logic.

When we launch fx83dfeatures.SpecularColorTestApp from apps/toys/FX8-3DFeatures we see blank screen at first and later on update we see the content.
This was happening because of this NPE. We need implement createSharedTexture() for MTLTexture also.;;;","2023-08-28 08:09;jdv;Changeset: 3270176c
Author:    Jayathirth Rao D V <jayathirth.d.v@oracle.com>
Committer: aghaisas <ajitgh@gmail.com>
Date:      2023-08-28 20:29:40 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/3270176c730c72975a2c60b275d76322c3a9d19d;;;",,,,,,,,,,,,,,,,,,,,,
UnsupportedOperationException when we run FX8-3DFeatures.NearAndFarClipTest,JDK-8312562,5106053,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2023-07-23 22:24,2023-07-24 00:21,2023-10-01 09:55,2023-07-24 00:21,internal,,,,,,internal,javafx,,0,javafx-metal,sn_149,,,,,,,,,,,,,,,,"When we run NearAndFarClipTest or ParallelNearAndFarClipTest of FX8-3DFeatures we get below exception and nothing draws:

java.lang.UnsupportedOperationException: Not implemented
    at javafx.graphics@21-internal/com.sun.prism.mtl.MTLRTTexture.setLinearFiltering(MTLRTTexture.java:128)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGShape.renderContent(NGShape.java:237)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGNode.doRender(NGNode.java:2074)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGNode.render(NGNode.java:1966)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGGroup.renderContent(NGGroup.java:270)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGNode.doRender(NGNode.java:2074)
    at javafx.graphics@21-internal/com.sun.javafx.sg.prism.NGNode.render(NGNode.java:1966)
    at javafx.graphics@21-internal/com.sun.javafx.tk.quantum.ViewPainter.doPaint(ViewPainter.java:480)
    at javafx.graphics@21-internal/com.sun.javafx.tk.quantum.ViewPainter.paintImpl(ViewPainter.java:329)
    at javafx.graphics@21-internal/com.sun.javafx.tk.quantum.UploadingPainter.run(UploadingPainter.java:156)
    at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
    at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
    at javafx.graphics@21-internal/com.sun.javafx.tk.RenderJob.run(RenderJob.java:58)
    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
    at javafx.graphics@21-",,,,,,,,,,,,,,,,,,,,,,,,JDK-8271024,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,,"0|i32eab:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-07-23 23:22;jdv;We dont override setLinearFiltering() in any other pipelines.
We have setLinearFiltering() only in BaseTexture and we just call getLinearFiltering() in each pipeline to set appropriate texture filtering.;;;","2023-07-24 00:21;jdv;Changeset: 1c12816a
Author:    Jayathirth Rao D V <jayathirth.d.v@oracle.com>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2023-07-24 12:41:13 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/1c12816a7395ba15457ee92cefbcebb752c3a28c;;;",,,,,,,,,,,,,,,,,,,,,
Artifact in FX8-3DFeatures.MeshViewer when we update vertices,JDK-8312559,5106051,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2023-07-23 22:06,2023-07-25 04:06,2023-10-01 09:55,2023-07-25 04:04,internal,,,,,,internal,javafx,,0,javafx-metal,sn_149,,,,,,,,,,,,,,,,When we run FX8-3DFeatures.MeshViewer and use option '[' we see that 3D Mesh is getting corrupted,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302050,,,,,,,JDK-8312563,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,,"0|i32e9v:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-07-25 00:52;jdv;Same issue is seen in fx83dfeatures.PNTMeshViewer;;;","2023-07-25 04:04;jdv;Changeset: 2863c973
Author:    Jayathirth Rao D V <jayathirth.d.v@oracle.com>
Committer: aghaisas <ajitgh@gmail.com>
Date:      2023-07-25 15:50:51 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/2863c97376f5f41803c235fb3e84b7abbb8a888f;;;",,,,,,,,,,,,,,,,,,,,,
"Ideographic characters aren't stretched by AffineTransform.scale(2, 1)",JDK-8312555,5106047,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aivanov,shadowbug,shadowbug,2023-07-23 21:31,2023-09-20 06:48,2023-10-01 09:55,2023-08-23 04:49,11,17,20,21,,,22,client-libs,,0,11bpr-critical-approved,8-na,bugdb_35633451,CPU23_10-critical-approved,CPU23_10-critical-SQE-OK,cssn23_07_02,cssn23_08_01,cssn23_08_02,jdk11u-critical-request,jdk11u-critical-yes,jdk17u-critical-request,jdk17u-critical-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,regression,sustaining,"If you apply an affine transform to a font, for example AffineTransform.scale(2, 1), the characters aren't horizontally stretched in JDK 11 and above. It works in correctly in previous versions of Java.

JDK10 or earlier: Characters are stretched horizontally by the specified scale.
JDK11 or later: Spacing between characters is increased instead of stretching the characters horizontally.",,,,,,,,,,,JDK-8315776,JDK-8315782,JDK-8315027,JDK-8314941,JDK-8315775,JDK-8316597,JDK-8315192,JDK-8316598,JDK-8314969,JDK-8315660,JDK-8316353,JDK-8316354,,,,,,,,,,,,,,,,JDK-8204929,JDK-8255387,JDK-8315509,JDK-8316206,"2023-08-01 14:29;aivanov;10 vs 11.png;https://bugs.openjdk.org/secure/attachment/104928/10+vs+11.png","2023-08-17 11:36;aivanov;11-japanese.png;https://bugs.openjdk.org/secure/attachment/105154/11-japanese.png","2023-07-24 02:59;tongwan;Graph.java;https://bugs.openjdk.org/secure/attachment/104714/Graph.java","2023-08-17 11:35;aivanov;ScaledFont.java;https://bugs.openjdk.org/secure/attachment/105153/ScaledFont.java",,,,,,,,,,,,11,,,,,,,"0|i32e8z:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-07-31 09:10;prr;Clearly a regression due to removing T2K from Oracle JDK and relying on freetype.
Not reproducible on macOS. Is it on both Windows and Linux ?;;;","2023-07-31 13:10;aivanov;I see a subtle difference between 10 and 11 but I see the letters are stretched as expected. It doesn't look as if the text is stretched by increasing the spacing between the characters.;;;","2023-08-01 14:37;aivanov;[~prr] I've attached an image, ""10 vs 11.png"", which compares Java 10 and Java 11, top and bottom correspondingly.

The bounding rectangle:

10: 1329×26
11: 1332×26

There are subtle differences in the widths of some characters and spaces between them. Yet none of these differences seems to look like a bug.

I tested on Windows, macOS and Linux. All produce similar images, 10 and 11 have subtle differences, later versions produce the same rendering.

I used ScaledFont.java as the test case:
1. In the first line, it displays the text rendered using the font derived by an affine transform;
2. In the second line, it displays the text by applying the same affine transform to the Graphics object;
3. In the third line, it displays the text without applying any transforms.;;;","2023-08-01 14:52;prr;So it isn't reproducible ?
I was taking it at face value that the person was reporting this because it was true.
I assumed it wasn't reproducible on mac because that never used T2K in the first place.
;;;","2023-08-02 13:25;aivanov;The problem is reproducible in Japanese version of Windows with Java 11 and 17. Only Monospaced logical font is affected.

In Java 20, the problem isn't reproducible, 'Courier New' seems to be used. Yet it may not be capable of displaying Japanese hieroglyphs.;;;","2023-08-11 11:59;aivanov;The problem is also reproducible in English version of Windows, you just need to display hieroglyphs instead of English characters.

The issue is more prominent in Japanese version of Windows because ""MS Gothic"" font is used for English characters too.;;;","2023-08-11 12:03;aivanov;Root cause:
Bitmaps embedded in the font are used to render the characters; the bitmaps aren't transformed, so white-space is seen which fills the requested horizontal size.;;;","2023-08-17 11:44;aivanov;I updated the attached app, ScaledFont.java. I added Japanese and Chinese hieroglyphs to the text rendered: 東京 (Tokyo) and 北京 (Beijing); I modified the list of fonts.

I also updated the screenshot of JDK 11 running the updated version of the ScaledFont.java test case on a Japanese version of Windows.

With the hieroglyphs in the text, the issue is reproducible on an English version of Windows.

I couldn't reproduce the problem on macOS or Linux.

To compile the test case, you need to specify the encoding:
javac -encoding UTF-8 ScaledFont.java;;;","2023-08-17 13:38;aivanov;Fix:
Disable using embedded bitmaps if horizontal transform is different from the vertical one.
It's similar to JDK-8204929 and JDK-8255387.;;;","2023-08-17 13:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15335
Date: 2023-08-17 20:43:59 +0000;;;","2023-08-23 04:49;dukebot;Changeset: 62610203
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-08-23 11:48:22 +0000
URL:       https://git.openjdk.org/jdk/commit/62610203f18095cbd25b456f0622bad033a65a5d
;;;","2023-08-23 05:00;aivanov;Fix request (21u)

Clean backport. It is a fix to a regression introduced in Java 11 with the switch to FreeType font scaler.
https://github.com/openjdk/jdk21u/pull/90;;;","2023-08-23 05:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/90
Date: 2023-08-23 11:55:59 +0000;;;","2023-09-12 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/380
Date: 2023-09-12 13:38:01 +0000;;;","2023-09-12 08:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u/pull/83
Date: 2023-09-12 14:56:39 +0000;;;","2023-09-14 23:45;goetz;Critical request [11u, 17u]

I backport this for parity with 11.0.21/17.0.9-oracle.
As the risk is low I would like to bring this to the October update.
The risk is low, it is a quite simple change in font code.
I had to resolve copyrights and adapt the test to Java 11.
The test fails without the fix, and passes with the fix applied. SAP nightly testing passed.
;;;",,,,,,,
MidiSystem.getSoundbank() throws unexpected SecurityException,JDK-8312535,5106019,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,serb,serb,2023-07-22 14:42,2023-08-30 21:25,2023-10-01 09:55,2023-08-21 18:46,17.0.6,20,21,,,,22,client-libs,,0,11-bp,17-bp,21-bp,8-bp,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,jdk8u-fix-request,regression,,,,"The application may fail to read the ""jdk.sound.jarsoundbank"" property under the security manager, causing the SecurityException to be thrown.",,,,,,,,,,,JDK-8315427,JDK-8315429,JDK-8315430,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293742,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32e2r:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7d98911c,,,,,,,,,"2023-07-23 14:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14986
Date: 2023-07-22 21:45:36 +0000;;;","2023-08-21 18:46;dukebot;Changeset: 87298d2a
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-08-22 01:44:16 +0000
URL:       https://git.openjdk.org/jdk/commit/87298d2ade41c689d3140981a123b0e9130fc651
;;;","2023-08-24 11:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1689
Date: 2023-08-24 05:06:35 +0000;;;","2023-08-24 11:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2095
Date: 2023-08-24 05:10:05 +0000;;;","2023-08-24 11:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/96
Date: 2023-08-24 04:45:57 +0000;;;","2023-08-28 16:22;serb;Fix request (21u 17u 11u)

Clean backport. The fix for a regression in one of the recent CPU. The fix verified by the new test, Other jdk_desktop tests are green.

Review 21u: https://github.com/openjdk/jdk21u/pull/96
Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/1689
Review 11u-dev: https://github.com/openjdk/jdk11u-dev/pull/2095;;;","2023-08-28 18:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/359
Date: 2023-08-28 23:56:22 +0000;;;","2023-08-28 19:21;serb;Fix request (8u)

Clean backport. The fix for a regression in one of the recent CPU. The fix verified by the new test, Other jdk_desktop tests are green.

Review 8u-dev: https://github.com/openjdk/jdk8u-dev/pull/359;;;",,,,,,,,,,,,,,,
JFR: No message for JFR.view when data is missing,JDK-8312533,5106015,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2023-07-22 06:31,2023-07-31 12:13,2023-10-01 09:55,2023-07-25 03:00,21,22,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,"Reproducer 1:
$ java -XX:StartFlightRecording:disk=false MyApplication
$ jcmd MyApplication JFR.view jvm-information

Reproducer 2:
$ java -XX:StartFlightRecording:name=test MyApplication
$ jcmd MyApplication JFR.stop name=test
$ jcmd MyApplication JFR.view hot-methods

Result:
36316:
Command executed successfully

Expected:
36316:
No recording data found on disk.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32e1v:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-07-24 05:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14998
Date: 2023-07-24 12:46:32 +0000;;;","2023-07-25 02:59;dukebot;Changeset: b35ccb27
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-07-25 09:58:29 +0000
URL:       https://git.openjdk.org/jdk/commit/b35ccb27c3c4a43eca4843bc1186a171fa23a7ed
;;;",,,,,,,,,,,,,,,,,,,,,
Test dk/jfr/event/oldobject/TestHeapDeep.java failed: Could not find ChainNode,JDK-8312526,5106007,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,dholmes,dholmes,2023-07-21 14:35,2023-07-31 12:14,2023-10-01 09:55,2023-07-26 03:50,22,,,,,,22,hotspot,,0,tier3,,,,,,,,,,,,,,,,,"Observed after JDK-8312293 was integrated, but history shows it has also been seen in a personal test job nearly 3 weeks prior.

----------System.out:(0/0)----------
----------System.err:(11/638)----------
java.lang.Exception: Could not find ChainNode
	at jdk.jfr.event.oldobject.TestHeapDeep.main(TestHeapDeep.java:64)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1570)

JavaTest Message: Test threw exception: java.lang.Exception: Could not find ChainNode
JavaTest Message: shutting down test

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312293,,,,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,,"0|i32e03:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-07-25 13:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15026
Date: 2023-07-25 19:28:50 +0000;;;","2023-07-26 03:50;dukebot;Changeset: c22cadf3
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-07-26 10:47:25 +0000
URL:       https://git.openjdk.org/jdk/commit/c22cadf32fbfa206f089c9d73c3b7f3db069d47a
;;;",,,,,,,,,,,,,,,,,,,,,
New test runtime/os/TestTrimNative.java#trimNative is failing: did not see the expected RSS reduction,JDK-8312525,5106006,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stuefe,dholmes,dholmes,2023-07-21 14:21,2023-08-25 07:34,2023-10-01 09:55,2023-07-28 22:39,22,,,,,,22,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,memory,,,,,,,,,,,,"----------System.err:(36/1936)----------
 stdout: [[0.189s][info][trimnative] Periodic native trim enabled (interval: 500 ms)
[0.189s][info][trimnative] Native heap trimmer start
Will spike now...
[0.690s][info][trimnative] Periodic Trim (1): 365M->357M (-7928K) 0.596ms
Done spiking.
GC...
Sleeping...
[1.191s][info][trimnative] Periodic Trim (2): 216M->206M (-10616K) 0.605ms
[1.691s][info][trimnative] Periodic Trim (3): 206M->206M (+0B) 0.113ms
[2.191s][info][trimnative] Periodic Trim (4): 206M->206M (+0B) 0.112ms
[2.691s][info][trimnative] Periodic Trim (5): 206M->206M (+0B) 0.110ms
[3.191s][info][trimnative] Periodic Trim (6): 206M->206M (+0B) 0.110ms
[3.692s][info][trimnative] Periodic Trim (7): 206M->206M (+0B) 0.110ms
[4.192s][info][trimnative] Periodic Trim (8): 206M->206M (+0B) 0.144ms
[4.692s][info][trimnative] Periodic Trim (9): 206M->206M (+0B) 0.134ms
[5.192s][info][trimnative] Periodic Trim (10): 206M->206M (+0B) 0.111ms
[5.198s][debug][trimnative] Trim suspended for chunk pool cleaner (1 suspend requests)
[5.198s][debug][trimnative] Trim resumed after chunk pool cleaner
[5.693s][info ][trimnative] Periodic Trim (11): 206M->204M (-1228K) 0.245ms
Done.
[5.906s][info ][trimnative] Native heap trimmer stop
];
 stderr: []
 exitValue = 0

java.lang.RuntimeException: We did not see the expected RSS reduction in the UL log. Expected (with fudge) to see at least a combined reduction of 67108864.
	at TestTrimNative.parseOutputAndLookForNegativeTrim(TestTrimNative.java:204)
	at TestTrimNative.main(TestTrimNative.java:256)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1570)

Appears to only fail on our Oracle Linux 7.9 machines",,,,,,,,,,,JDK-8314109,JDK-8315032,,,,,,,,,,,,,,,,,,,,,,JDK-8293114,,,,,,,,,,,,,,,x86_64,,,,,,,,22,,linux_oracle_7,,,,,"0|i32dzv:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-21 22:54;stuefe;Interesting. I would like to see the malloc tunables settings on that box.

This is not an error, since the glibc apparently already reclaims a lot of memory automatically on free. My assumption is that the system is running possibly with MALLOC_ARENA_MAX=1 and MALLOC_TRIM_THRESHOLD_ to a very low value.;;;","2023-07-23 15:52;dholmes;> Interesting. I would like to see the malloc tunables settings on that box. 

[~stuefe] what needs to be run to show you this information?;;;","2023-07-25 22:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14984
Date: 2023-07-22 06:57:43 +0000;;;","2023-07-28 22:39;dukebot;Changeset: ad34be1f
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-07-29 05:36:58 +0000
URL:       https://git.openjdk.org/jdk/commit/ad34be1f329edc8e7155983835cc70d733c014b8
;;;","2023-07-31 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/26
Date: 2023-07-31 09:21:27 +0000;;;","2023-07-31 02:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1633
Date: 2023-07-31 09:30:40 +0000;;;","2023-08-09 09:20;shade;Fix Request (21u)

Testfix followup for JDK-8312525. Applies semi-cleanly (missing ProblemList hunks). Test passes.;;;","2023-08-14 02:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1662
Date: 2023-08-14 09:33:58 +0000;;;","2023-08-16 00:13;shade;Fix Request (17u)

Same reason as for 21u. ProblemList hunks are missing from 17u PR. Otherwise clean. ;;;",,,,,,,,,,,,,,
[JVMCI] serviceability/dcmd/compiler/CompilerQueueTest.java fails,JDK-8312524,5106004,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dnsimon,dnsimon,2023-07-21 13:12,2023-07-31 12:14,2023-10-01 09:55,2023-07-25 06:14,11,17,21,,,,22,hotspot,,0,jvmci,oracle-triage-22,,,,,,,,,,,,,,,,"The WhiteBox.lockCompilation method is broken under UseJVMCICompiler as shown by the serviceability/dcmd/compiler/CompilerQueueTest.java test failing:

test CompilerQueueTest.jmx(): failure
java.lang.AssertionError: expected [false] but found [true]
    at org.testng.Assert.fail(Assert.java:99)
    at org.testng.Assert.failNotEquals(Assert.java:1037)
    at org.testng.Assert.assertEqualsImpl(Assert.java:140)
    at org.testng.Assert.assertEquals(Assert.java:122)
    at org.testng.Assert.assertEquals(Assert.java:819)
    at org.testng.Assert.assertEquals(Assert.java:829)
    at CompilerQueueTest.run(CompilerQueueTest.java:107)
    at CompilerQueueTest.jmx(CompilerQueueTest.java:144)

There is a similar failure in compiler/whitebox/LockCompilationTest.java:

java.lang.RuntimeException: private int compiler.whitebox.SimpleTestCaseHelper.method() must be in queue: expected true, was false
    at jdk.test.lib.Asserts.fail(Asserts.java:594)
    at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
    at compiler.whitebox.LockCompilationTest.test(LockCompilationTest.java:73)
    at compiler.whitebox.CompilerWhiteBoxTest.runTest(CompilerWhiteBoxTest.java:168)
    at compiler.whitebox.CompilerWhiteBoxTest.main(CompilerWhiteBoxTest.java:131)
    at compiler.whitebox.LockCompilationTest.main(LockCompilationTest.java:49)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
    at java.base/java.lang.Thread.run(Thread.java:1583)
java.lang.RuntimeException: private int compiler.whitebox.SimpleTestCaseHelper.method() must be in queue: expected true, was false
    at jdk.test.lib.Asserts.fail(Asserts.java:594)
    at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
    at compiler.whitebox.LockCompilationTest.test(LockCompilationTest.java:73)
    at compiler.whitebox.CompilerWhiteBoxTest.runTest(CompilerWhiteBoxTest.java:168)
    at compiler.whitebox.CompilerWhiteBoxTest.main(CompilerWhiteBoxTest.java:131)
    at compiler.whitebox.LockCompilationTest.main(LockCompilationTest.java:49)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
    at java.base/java.lang.Thread.run(Thread.java:1583)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32dzf:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-21 13:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14979
Date: 2023-07-21 20:23:31 +0000;;;","2023-07-23 22:37;thartmann;ILW = Test failure because WhiteBox.lockCompilation is not supported by JVCMI, single test with JVMCI, no workaround = MLH = P4;;;","2023-07-25 06:14;dukebot;Changeset: 9606cbcd
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-07-25 13:12:42 +0000
URL:       https://git.openjdk.org/jdk/commit/9606cbcd2314506d0054ecba1804e5e0c2670cd6
;;;",,,,,,,,,,,,,,,,,,,,
sspi.cpp avoid some NULL checks related to free and delete,JDK-8312512,5105989,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2023-07-21 07:46,2023-07-31 12:13,2023-10-01 09:55,2023-07-25 03:57,17,21,22,,,,22,security-libs,,0,,,,,,,,,,,,,,,,,,sspi.cpp contains  a number of NULL checks before free and delete calls that can be avoided.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,windows,,,,,"0|i32dw3:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ce3d383,,,,,,,,,"2023-07-24 00:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14989
Date: 2023-07-24 07:50:44 +0000;;;","2023-07-25 03:57;dukebot;Changeset: bd098806
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-07-25 10:56:23 +0000
URL:       https://git.openjdk.org/jdk/commit/bd098806f768c6afd87cee06b983c13a471268d0
;;;",,,,,,,,,,,,,,,,,,,,,
Thread::getState and JVM TI GetThreadState should return TIMED_WAITING virtual thread is timed parked,JDK-8312498,5105972,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alanb,alanb,alanb,2023-07-21 02:02,2023-09-25 11:26,2023-10-01 09:55,2023-09-19 04:00,19,21,22,,,,22,core-libs,,0,amazon-interest,,,,,,,,,,,,,,,,,"If a virtual thread is in a timed-parked (LockSupport.parkNanos) then Thread::getThread returns WAITING rather than TIMED_WAITING. The Thread::getState method was added for monitoring and management purposes but should be fixed.

JVM TI GetThreadState has a similar issue. It returns the state with the JVMTI_THREAD_STATE_WAITING_INDEFINITELY rather than JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT bit set.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32dsb:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-07-24 11:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14978
Date: 2023-07-21 18:01:45 +0000;;;","2023-09-19 04:00;dukebot;Changeset: 4461eeb3
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-09-19 10:58:12 +0000
URL:       https://git.openjdk.org/jdk/commit/4461eeb31d5ccc89e304329a7dccb9cb130713fc
;;;",,,,,,,,,,,,,,,,,,,,,
assert(0 <= i && i < _len) failed: illegal index after JDK-8287061 on big endian platforms,JDK-8312495,5105968,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rrich,rrich,rrich,2023-07-21 01:02,2023-09-04 05:49,2023-10-01 09:55,2023-07-27 06:43,22,,,,,,22,hotspot,,0,oraclejdk-na,oracle-triage-17,oracle-triage-21,oracle-triage-22,,,,,,,,,,,,,,"After JDK-8287061 the following assertion fails on big endian platforms (AIX, s390, Linux/PPC64be).

assert(0 <= i && i < _len) failed: illegal index at growableArray.hpp:145

Stack:

Stack: [0x00000fff6ac00000,0x00000fff6ae00000],  sp=0x00000fff6adfc280,  free space=2032k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xde9a10]  GrowableArrayView<ScopeValue*>::at(int)+0x84  (growableArray.hpp:145)
V  [libjvm.so+0x109fbd0]  ObjectMergeValue::select(frame&, RegisterMap&)+0x1dc  (debugInfo.cpp:263)
V  [libjvm.so+0x1b7e374]  ScopeDesc::objects_to_rematerialize(frame&, RegisterMap&)+0x224  (scopeDesc.cpp:150)
V  [libjvm.so+0x10d6694]  rematerialize_objects(JavaThread*, int, CompiledMethod*, frame&, RegisterMap&, GrowableArray<compiledVFrame*>*, bool&)+0x1b8  (deoptimization.cpp:333)
V  [libjvm.so+0x10d7924]  Deoptimization::fetch_unroll_info_helper(JavaThread*, int)+0x56c  (deoptimization.cpp:523)
V  [libjvm.so+0x10dfb24]  Deoptimization::uncommon_trap(JavaThread*, int, int)+0x64  (deoptimization.cpp:2572)
v  ~UncommonTrapBlob 0x00000fff8beca2f4
J 1520 c2 vm.mlvm.meth.share.transform.v2.MHCall.check()V (97 bytes) @ 0x00000fff8c63ed58 [0x00000fff8c63e900+0x0000000000000458]
j  vm.mlvm.meth.share.transform.v2.MHPrimitiveTF.computeInboundCall()Lvm/mlvm/meth/share/transform/v2/MHCall;+26
J 1392 c1 vm.mlvm.meth.share.transform.v2.MHMacroTF.addTransformation(Lvm/mlvm/meth/share/transform/v2/MHTF;)Lvm/mlvm/meth/share/transform/v2/MHCall; (95 bytes) @ 0x00000fff84bb96b4 [0x00000fff84bb9080+0x0000000000000634]
j  vm.mlvm.meth.share.MHTransformationGen.createSequence(Lvm/mlvm/meth/share/Argument;Ljava/lang/Object;Ljava/lang/invoke/MethodHandle;[Lvm/mlvm/meth/share/Argument;)Lvm/mlvm/meth/share/transform/v2/MHMacroTF;+66
j  vm.mlvm.meth.stress.compiler.sequences.Test.runThread(I)Z+34

The illegal index is always -559030609 (0xDEADDEAF)

vmTestbase/vm/mlvm/meth/stress/compiler/sequences/Test.java
vmTestbase/jit/escape/AdaptiveBlocking/AdaptiveBlocking001/AdaptiveBlocking001.java
are 2 tests that are prone to the assertion failure.

Analysis:

At https://github.com/openjdk/jdk/blob/master/src/hotspot/share/runtime/stackValue.cpp#L208-L213
the jint value is always put in the part with the lower address of the intptr_t value. On big endian platforms thats the location of the high word therefore the value cannot be cast directly back to jint.
Instead workarounds like these are needed:

https://github.com/openjdk/jdk/blob/8d29329138d44800ee4c0c02dacc01a06097de66/src/hotspot/share/runtime/deoptimization.cpp#L1358-L1391
https://github.com/openjdk/jdk/blob/8d29329138d44800ee4c0c02dacc01a06097de66/src/hotspot/share/runtime/deoptimization.cpp#L1489-L1519

I wonder if this is needed at all or if we could just do this instead:
return UCONST64(0xDEADDEAF00000000) | *(juint*)value_addr

EDIT: yes it is indeed needed but only on big endian. The size of a stack slot is sizeof(intptr_t). On big endian it depends on the type of an integer value where in the slot it is stored (at lower or higher address). Therefore reading the complete intptr_t and then casting it to jint does not work.

Details:

- Let intptr_t* S be the address of a stack slot

- When accessing S, interpreter and compiled code use load/store instructions matching the size of the integer value to be transferred.

- E.g. to access a jint in S, 32bit load/store instructions are used. Thats very much like casting S to jint*

- (jint)*(intptr_t*)S does not work on big endian because the jint part is in the high word of *(intptr_t*)S

- StackValue has to mimic this to be able to transfer the complete intptr_t value. E.g. `interpretedVFrame::set_locals`[1] transfers stack slot values without knowing if the value is a jint or jlong.

[1] https://github.com/openjdk/jdk/blob/842d6329cf5a3da8df7eddb195b5fcb7baadbdc3/src/hotspot/share/runtime/vframe.cpp#L456
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287061,,,,JDK-8312753,,,,,,,,,,,,,,,,,,b07,22,,,,,,,"0|i32drf:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-21 10:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14976
Date: 2023-07-21 14:24:35 +0000;;;","2023-07-23 22:44;thartmann;ILW = Incorrect cast during rematerialization potentially leading to incorrect results, on big endian platforms, disable EA = HMM = P2;;;","2023-07-27 06:43;dukebot;Changeset: 8661b8e1
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2023-07-27 13:40:23 +0000
URL:       https://git.openjdk.org/jdk/commit/8661b8e11568f752c0bc515a028092f77bcaf940
;;;",,,,,,,,,,,,,,,,,,,,
Assertion while running fx83dfeatures.Snapshot3D demo ,JDK-8312493,5105966,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,aghaisas,aghaisas,2023-07-21 00:47,2023-07-21 04:42,2023-10-01 09:55,2023-07-21 04:12,internal,,,,,,internal,javafx,,0,javafx-metal,sn_148,,,,,,,,,,,,,,,,"This is seen on x64 based macBook with a discrete graphics card.

Run  fx83dfeatures.Snapshot3D demo from toys directory with metal rendering pipeline.

It results in an assertion-
-[MTLTextureDescriptorInternal validateWithDevice:]:1344: failed assertion `Texture Descriptor Validation
MTLTextureDescriptor: Depth, Stencil, DepthStencil textures cannot be allocated with MTLStorageModeShared or MTLStorageModeManaged on this device.
'
zsh: abort",,,,,,,,,,,,,,,,,,,,,,,,JDK-8312458,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,os_x,,,,,"0|i32dqz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-07-21 00:56;jdv;This issue doesnt happen in M1, looks like this is happening because of differences in how we treat Private resource between Unified and Discrete memory model : https://developer.apple.com/documentation/metal/resource_fundamentals/choosing_a_resource_storage_mode_for_intel_and_amd_gpus?language=objc

I had kept Managed mode for depth non-msaa texture to match non-msaa color attachment. We dont need any depth data at CPU side, so we can store depth texture in private mode.;;;","2023-07-21 04:12;jdv;Changeset: da59bf6f
Author:    Jayathirth Rao D V <jayathirth.d.v@oracle.com>
Committer: aghaisas <ajitgh@gmail.com>
Date:      2023-07-21 13:41:24 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/da59bf6f4f7c767af365017ea22f906ca4965be0;;;",,,,,,,,,,,,,,,,,,,,,
Remove THP sanity checks at VM startup,JDK-8312492,5105965,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2023-07-21 00:44,2023-08-10 06:05,2023-10-01 09:55,2023-07-31 09:53,22,,,,,,22,hotspot,,0,large-pages,memory,,,,,,,,,,,,,,,,"When starting the JVM with -XX:+UseTransparentHugePages, we need to know if the OS supports THPs:

A) We could run on a super-old kernel (but THPs had been part of the kernel since 2.6.38, which is EOL since 2011, so we can assume all modern kernel can support THPs)
B) We could run on a kernel built without THP support, e.g. an embedded device
C) We could run on a system with THPs disabled by the admin

The JVM does a little sanity test at startup where it mmaps an area the size of a huge page - but in small pages - then calls madvise(MADV_HUGEPAGE) on it. The JVM assumes if the madvise() worked, all is a-ok.

That sanity test has little merit. It will weed out (A) and (B), but not (C) - it will always return success even if THPs are disabled on the system. 

That sanity test is also expensive since we allocate (reserve AND commit) an area, then signal khugepaged by advising to fold it into a large page. That small-paged area is potentially large since there are plans to support 1 GB THP pages in the kernel, so we may end up allocating 1 GB space at startup for this sanity check.

The correct - and much cheaper - way is to check the proc fs whether THPs are enabled. We already do that since JDK-8310233: ""Fix THP detection on Linux"". That check takes care of (A)(B)(C). Therefore we can remove the THP sanity check completely.




",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310262,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i32dqr:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-21 01:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14967
Date: 2023-07-21 08:05:47 +0000;;;","2023-07-31 09:53;dukebot;Changeset: 5362ec9c
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-07-31 16:51:29 +0000
URL:       https://git.openjdk.org/jdk/commit/5362ec9c6e9123d00288497ac9d1879a2bb1ca64
;;;",,,,,,,,,,,,,,,,,,,,,
tools/jpackage/share/AppLauncherEnvTest.java fails with dynamically linked libstdc++,JDK-8312488,5105961,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vpetko,vpetko,vpetko,2023-07-20 23:03,2023-07-31 12:14,2023-10-01 09:55,2023-07-25 13:14,20,21,22,,,,22,tools,,0,,,,,,,,,,,,,,,,,,"The generated image contains libjpackageapplauncheraux.so that contains a destructor function dcon(). 
It sets static logger to the local nopLogAppender, and when the library is unloaded, the follow call sequence occurs:

1) ----> libc runs exit handlers
0x7ffff7f9e028 <(anonymous namespace)::nopLogAppender>
libjpackageapplauncheraux.so!LogAppender::~LogAppender(LogAppender * const this) (/home/vladimirp/git/jdk/src/jdk.jpackage/share/native/common/Log.h:72)
libjpackageapplauncheraux.so!NopLogAppender::~NopLogAppender(NopLogAppender * const this) (/home/vladimirp/git/jdk/src/jdk.jpackage/share/native/common/Log.h:78)
libc.so.6!__run_exit_handlers(int status, struct exit_function_list ** listp, _Bool run_list_atexit, _Bool run_dtors) (exit.c:111)
libc.so.6!__GI_exit(int status) (exit.c:141)
libc.so.6!__libc_start_call_main(int (*)(int, char **, char **) main, int argc, char ** argv) (libc_start_call_main.h:74)
libc.so.6!__libc_start_main_impl(int (*)(int, char **, char **) main, int argc, char ** argv, int (*)(int, char **, char **) init, void (*)(void) fini, void (*)(void) rtld_fini, void * stack_end) (libc-start.c:360)
_start (Unknown Source:0)

2) ---> the the exit handlers run destructor function , but logger is already disposed
0x7ffff7f9e120 <(anonymous namespace)::defaultLoggerMemory>
Logger::LOG_TRACE
0x7ffff7f9e028 <(anonymous namespace)::nopLogAppender>

libc.so.6!__pthread_kill_implementation(int no_tid, int signo, pthread_t threadid) (pthread_kill.c:44)
libc.so.6!__pthread_kill_internal(int signo, pthread_t threadid) (pthread_kill.c:78)
libc.so.6!__GI___pthread_kill(pthread_t threadid, int signo) (pthread_kill.c:89)
libc.so.6!__GI_raise(int sig) (raise.c:26)
libc.so.6!__GI_abort() (abort.c:79)
libstdc++.so.6![Unknown/Just-In-Time compiled code] (Unknown Source:0)
libstdc++.so.6!std::terminate() (Unknown Source:0)
libstdc++.so.6!__cxa_pure_virtual (Unknown Source:0)
libjpackageapplauncheraux.so!Logger::log(const Logger * const this, Logger::LogLevel logLevel, LPCTSTR fileName, int lineNum, LPCTSTR funcName, const tstring & message) (/home/vladimirp/git/jdk/src/jdk.jpackage/share/native/common/Log.cpp:132)
libjpackageapplauncheraux.so!Logger::log(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_pointer message, LPCTSTR funcName, int lineNum, LPCTSTR fileName, Logger::LogLevel logLevel, const Logger * const this) (/usr/include/c++/12/bits/basic_string.tcc:238)
libjpackageapplauncheraux.so!(anonymous namespace)::dcon() (/home/vladimirp/git/jdk/src/jdk.jpackage/linux/native/libapplauncher/LinuxLauncherLib.cpp:171)
ld-linux-x86-64.so.2!_dl_call_fini(void * closure_map) (dl-call_fini.c:43)
ld-linux-x86-64.so.2!_dl_fini() (dl-fini.c:114)
libc.so.6!__run_exit_handlers(int status, struct exit_function_list ** listp, _Bool run_list_atexit, _Bool run_dtors) (exit.c:111)
libc.so.6!__GI_exit(int status) (exit.c:141)
libc.so.6!__libc_start_call_main(int (*)(int, char **, char **) main, int argc, char ** argv) (libc_start_call_main.h:74)
libc.so.6!__libc_start_main_impl(int (*)(int, char **, char **) main, int argc, char ** argv, int (*)(int, char **, char **) init, void (*)(void) fini, void (*)(void) rtld_fini, void * stack_end) (libc-start.c:360)
_start (Unknown Source:0)

This causes a crash with the following message:

pure virtual method called
terminate called without an active exception

Unexpected data in the output fails the test.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-07-20 22:55;vpetko;AppLauncherEnvTest.jtr;https://bugs.openjdk.org/secure/attachment/104684/AppLauncherEnvTest.jtr",,,,,,,,,,,,,,,,,linux,,,,,"0|i32dpv:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-07-21 04:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14971
Date: 2023-07-21 10:55:13 +0000;;;","2023-07-25 13:14;dukebot;Changeset: 78a8a99d
Author:    Vladimir Petko <vpetko@openjdk.org>
Committer: Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2023-07-25 20:12:23 +0000
URL:       https://git.openjdk.org/jdk/commit/78a8a99d990dcc0b77c096bb2ca2c1bb86462e3f
;;;",,,,,,,,,,,,,,,,,,,,,
Return value corrupted when using CCS + isTrivial,JDK-8312473,5105940,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jvernee,jvernee,jvernee,2023-07-20 10:15,2023-07-25 12:16,2023-10-01 09:55,2023-07-20 14:05,repo-panama,,,,,,repo-panama,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,"Due to a bug in the downcall linker stub generation, we don't save the return value when capturing call state for trivial calls, and the return value gets corrupted.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32dl7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-07-20 12:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/848
Date: 2023-07-20 16:20:13 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
/bin/nm  usage in AIX makes needs -X64 flag,JDK-8312466,5105933,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,mbaesken,mbaesken,2023-07-20 07:27,2023-09-12 00:17,2023-10-01 09:55,2023-07-27 03:39,21,22,,,,,22,infrastructure,,0,jdk21u-fix-request,jdk21u-fix-yes,,,,,,,,,,,,,,,,"In the AIX make we use /bin/nm at some places in the build.
But it is used without parameters and this leads to the following error :

/bin/nm  ./hotspot/variant-server/libjvm/objs/ad_ppc.o
0654-210 ./hotspot/variant-server/libjvm/objs/ad_ppc.o is not valid in the current object file mode.
        Use the -X option to specify the desired object mode.

The nm tool needs the additional command line option -X64  .",,,,,,,,,,,JDK-8316091,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313244,,,,,,,,,,,ppc,,,,,,,,,,aix,,,,,"0|i32djn:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-07-26 00:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15036
Date: 2023-07-26 07:52:44 +0000;;;","2023-07-27 02:18;mbaesken;There might be room for improvement for the general handling of NM flags, I opened
https://bugs.openjdk.org/browse/JDK-8313244
8313244: NM flags handling in configure process;;;","2023-07-27 03:39;dukebot;Changeset: 44576a7c
Author:    Andreas Steiner <a.steiner@sap.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-07-27 10:37:40 +0000
URL:       https://git.openjdk.org/jdk/commit/44576a7cca18108adafa7efe88de2a4655e9b074
;;;","2023-09-08 00:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/145
Date: 2023-09-08 07:26:19 +0000;;;","2023-09-10 23:48;asteiner;jdk21u backport request
I would like to have the patch in jdk21u as well, because the tool issue is present there too. The patch is low risk and applies cleanly.;;;",,,,,,,,,,,,,,,,,,
JNI warnings in SunMSCApi provider,JDK-8312461,5105927,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mpowers,djelinski,djelinski,2023-07-20 06:31,2023-08-16 23:29,2023-10-01 09:55,2023-08-10 16:45,22,,,,,,22,security-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,"Running mscapi tests with -Xcheck:jni produces a lot of warnings like:

WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethodV
	at sun.security.mscapi.CKeyStore.loadKeysOrCertificateChains(jdk.crypto.mscapi@22-internal/Native Method)
	at sun.security.mscapi.CKeyStore.engineLoad(jdk.crypto.mscapi@22-internal/CKeyStore.java:729)
	at sun.security.mscapi.CKeyStore$MY.engineLoad(jdk.crypto.mscapi@22-internal/CKeyStore.java:60)
	at java.security.KeyStore.load(java.base@22-internal/KeyStore.java:1500)

Reproducer:
- make test TEST=jdk/sun/security/mscapi JTREG=JAVA_OPTIONS=-Xcheck:jni
- check the resulting JTR files (the tests will pass, the problems are only reported on stdout)

Possible fix:
add JNU_CHECK_EXCEPTION(env) after every CallVoidMethod in loadKeysOrCertificateChains",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i32dib:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-07-31 19:42;mpowers;Daniel's suggested fix is ""spot on"".;;;","2023-08-01 14:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15113
Date: 2023-08-01 21:08:49 +0000;;;","2023-08-10 16:45;dukebot;Changeset: 9abb2a55
Author:    Mark Powers <mpowers@openjdk.org>
Committer: Valerie Peng <valeriep@openjdk.org>
Date:      2023-08-10 23:43:38 +0000
URL:       https://git.openjdk.org/jdk/commit/9abb2a559e4f809f07db1b747660f68b9d943e3b
;;;",,,,,,,,,,,,,,,,,,,,
Crash while taking snapshot in Metal,JDK-8312458,5105924,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,aghaisas,jdv,jdv,2023-07-20 05:03,2023-07-21 03:04,2023-10-01 09:55,2023-07-21 03:04,internal,,,,,,internal,javafx,,0,javafx-metal,regression,regression_8311941,sn_148,,,,,,,,,,,,,,"I was running fx83dfeatures.Snapshot3D test from apps/toys/FX8-3DFeatures and noticed that it crashes on latest metal code. This was working fine when i ran same test on July 11th.

Looks like if we take snapshot of a scene we are seeing this crash.
Also this is regression of https://bugs.openjdk.org/browse/JDK-8311941.
Before https://bugs.openjdk.org/browse/JDK-8311941 it was working fine and after https://bugs.openjdk.org/browse/JDK-8311941 it crashes.

Attached crash log for the same and it reproduces every time.",,,,,,,,,,,,,,,,,,,,,,,JDK-8312493,JDK-8271024,,,,,,,,,,,,,,,,,,"2023-07-20 05:02;jdv;hs_err_pid60867.log;https://bugs.openjdk.org/secure/attachment/104673/hs_err_pid60867.log",,,,,,,generic,,,,,,,,,,os_x,,,,,"0|i32dhn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-07-21 03:04;aghaisas;Changeset: dcd33036
Author:    aghaisas <ajitgh@gmail.com>
Date:      2023-07-21 15:25:08 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/dcd33036a53c82c3927906f787ca71bab539f0be;;;",,,,,,,,,,,,,,,,,,,,,,
Array types in annotation elements show square brackets twice,JDK-8312445,5105911,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,hannesw,hannesw,2023-07-20 02:51,2023-07-31 12:14,2023-10-01 09:55,2023-07-26 06:05,,,,,,,22,tools,,0,,,,,,,,,,,,,,,,,,"When an array type is used as a value in an annotation element, each pair of square brackets is printed twice. This means a one-dimensional array type is rendered as two-dimensional, a two-dimensional array type as four-dimensional and so on.

Example annotation interface:
--------------------------------------------------------------------
import java.lang.annotation.*;
 
@Documented
@Retention(RetentionPolicy.RUNTIME)
public @interface MyAnnotation {
    Class<?> classy();
    Class<?>[] classies();
}
---------------------------------------------------------------

Example annotation host:
---------------------------------------------------------------
@MyAnnotation(classy=AnnotationHost[].class,
              classies={Object[].class, int[].class}) 
public class AnnotationHost {}     
---------------------------------------------------------------

JavaDoc output:
------------------------------------------------------------------
@MyAnnotation(classy=AnnotationHost[][].class,
              classies={java.lang.Object[][].class,int[][].class})
public class AnnotationHost
extends Object
------------------------------------------------------------------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8225210,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32der:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-07-20 03:20;hannesw;The problem is in the `annotationValueToContent` method in `HtmlDocletWriter`, where `utils.getDimension(t)` is added to the type name which already includes the correct number of square brackets.;;;","2023-07-25 06:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15019
Date: 2023-07-25 13:29:55 +0000;;;","2023-07-26 06:05;dukebot;Changeset: 02a04731
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2023-07-26 13:04:39 +0000
URL:       https://git.openjdk.org/jdk/commit/02a04731b1b2e68bf1a79f50d036bedd032128f0
;;;",,,,,,,,,,,,,,,,,,,,
sun.security should use toLowerCase(Locale.ROOT),JDK-8312443,5105909,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2023-07-20 02:13,2023-07-27 10:49,2023-10-01 09:55,2023-07-20 14:50,17,21,,,,,22,security-libs,,0,amazon-interest,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,"sun.security codes should use toLowerCase(Locale.ROOT) instead of toLowerCase().
In addition, no toUpperCase() was found in this code scope.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32deb:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,,,"2023-07-20 02:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14948
Date: 2023-07-20 09:29:50 +0000;;;","2023-07-20 14:50;dukebot;Changeset: 4e8f331a
Author:    John Jiang <jjiang@openjdk.org>
Date:      2023-07-20 21:48:19 +0000
URL:       https://git.openjdk.org/jdk/commit/4e8f331a80fdfbf3b73ad12b41920fcf4f242275
;;;",,,,,,,,,,,,,,,,,,,,,
assert(cast != nullptr) failed: must have added a cast to pin the node,JDK-8312440,5105906,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,pli,pli,2023-07-20 00:56,2023-09-26 23:11,2023-10-01 09:55,2023-07-27 00:26,17,22,,,,,22,hotspot,,0,c2,jdk21u-fix-request,oracle-triage-17,oracle-triage-21,oracle-triage-22,regression,,,,,,,,,,,,"In recent test, we found below assertion failure. Attached Test.java is a reduced case to reproduce.

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/penli01/jdk_src/src/hotspot/share/opto/loopopts.cpp:1721), pid=1778535, tid=1778557
#  assert(cast != nullptr) failed: must have added a cast to pin the node
#
# JRE version: OpenJDK Runtime Environment (22.0) (fastdebug build 22-internal-adhoc.penli01.jdksrc)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 22-internal-adhoc.penli01.jdksrc, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12fc21c]  PhaseIdealLoop::try_sink_out_of_loop(Node*)+0x9fc
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /mnt/local/core.1778535)
#
# An error report file with more information is saved as:
# /mnt/local/hs_err_pid1778535.log
#
# Compiler replay data is saved as:
# /mnt/local/replay_pid1778535.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted (core dumped)
",,,,,,,,,,,JDK-8316817,JDK-8316413,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308103,,,,"2023-07-20 00:58;pli;Test.java;https://bugs.openjdk.org/secure/attachment/104668/Test.java",,,,,,,generic,,,,,,,,22,,generic,,,,,"0|i32ddn:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-20 01:14;chagedorn;Starts to fail after JDK-8308103. [~roland] can you have a look?;;;","2023-07-20 01:31;chagedorn;ILW = Assertion when trying to sink a node in Split If code, edge case, use -XX:-SplitIfBlocks = HLM = P3;;;","2023-07-24 07:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14999
Date: 2023-07-24 14:26:48 +0000;;;","2023-07-27 00:26;dukebot;Changeset: 01e135c9
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-07-27 07:24:46 +0000
URL:       https://git.openjdk.org/jdk/commit/01e135c91018a41800c2df534b1d6dbd396adbf4
;;;","2023-09-25 00:41;goetz;Fix request [21u]

I backport this for parity with 17.0.10-oracle.
After it being backported to 17.0.10-oracle, the risk of bringing it to 21u should be acceptable as this will have much less exposure.
Clean backport on top of 8308103.
Test passes. SAP nighlty testing passed.;;;","2023-09-25 00:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/200
Date: 2023-09-25 07:40:11 +0000;;;",,,,,,,,,,,,,,,,,
"SPECjvm2008/xml.transform with CDS fails with ""can't seal package nu.xom""",JDK-8312434,5105902,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,iklam,iklam,2023-07-19 23:05,2023-08-28 14:54,2023-10-01 09:55,2023-08-22 15:38,17,21,22,,,,22,hotspot,,0,cds,,,,,,,,,,,,,,,,,"Run SPECjvm2008 with the following parameters

java  \
    --add-exports=java.xml/com.sun.org.apache.xerces.internal.parsers=ALL-UNNAMED \
    --add-exports=java.xml/com.sun.org.apache.xerces.internal.util=ALL-UNNAMED \
    -Xms3g -Xmx3g -Xlog:gc \
    -jar SPECjvm2008/SPECjvm2008.jar xml.transform \
    -ikv -fit 1 -wt 0 -i 1 -bt 1

If we change the above command to dump the classlist, create a CDS archive, and run with the CDS archive, the following exception is displayed:
=====
  Benchmark:   xml.transform
  Run mode:    timed run
  Test type:   multi
  Threads:     1
  Iterations:  40
  Run length:  1s
xom canonicalization of chess-fo/Kasparov-Karpov.xml.SAX crashed.
===

If we change the classlist to have only a single line with the class ""nu.xom.Node"", dump the archive and run the app again, the following exception stack is printed:

=====
Error in setup of Benchmark.
spec.harness.StopBenchmarkException: Error invoking bmSetupBenchmarkMethod
	at spec.harness.ProgramRunner.invokeBmSetupBenchmark(ProgramRunner.java:185)
	at spec.harness.ProgramRunner.runBenchmark(ProgramRunner.java:301)
	at spec.harness.ProgramRunner.run(ProgramRunner.java:98)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:118)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at spec.harness.ProgramRunner.invokeBmSetupBenchmark(ProgramRunner.java:183)
	... 2 more
Caused by: java.lang.SecurityException: sealing violation: can't seal package nu.xom: already defined
	at java.base/jdk.internal.loader.BuiltinClassLoader.getAndVerifyPackage(BuiltinClassLoader.java:912)
	at java.base/jdk.internal.loader.BuiltinClassLoader.defineOrCheckPackage(BuiltinClassLoader.java:877)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.defineOrCheckPackage(ClassLoaders.java:211)
	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:849)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:760)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
	at spec.benchmarks.xml.transform.Main.<init>(Main.java:197)
	at spec.benchmarks.xml.transform.Main.setupBenchmark(Main.java:152)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	... 4 more
==========
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-07-20 17:04;iklam;SPECjvm2008.sh;https://bugs.openjdk.org/secure/attachment/104681/SPECjvm2008.sh",,,,,,,,,,,,,,,,,,,,,,"0|i32dcr:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-25 11:19;mseledtsov;ILW = MML = P4;;;","2023-08-11 16:28;ccheung;Using jarsigner to check the xom-1.1.jar, the jar is considered unsigned.

jarsigner -verify -verbose lib/xom-1.1.jar

shows the following at the end of output:

- Signed by ""CN=SPECjvm2008 Development Committee, OU=OSG Java, O=SPEC, L=Warrenton, ST=VA, C=US""
    Digest algorithm: SHA1 (disabled)
    Signature algorithm: SHA1withDSA (disabled), 1024-bit key (weak)

WARNING: The jar will be treated as unsigned, because it is signed with a weak algorithm that is now disabled by the security property:

  jdk.jar.disabledAlgorithms=MD2, MD5, RSA keySize < 1024, DSA keySize < 1024, SHA1 denyAfter 2019-01-01;;;","2023-08-16 12:51;ccheung;After closer look at the MANIFEST.MF, the nu.xom package is sealed.

Name: nu/xom/
Implementation-Vendor: Elliotte Rusty Harold
Sealed: true
Specification-Title: XOM core classes
Implementation-Title: nu.xom
Implementation-Version: 1.1
SHA1-Digest: 2jmj7l5rSw0yVb/vlWAYkK/YBwk=

After further debugging, this seems to be a dump time issue.
In FileMapInfo::update_jar_manifest, there is a check for a signed jar. If the jar is signed, we don't store the manifest data into the ClassPathEntry.
However, the check for signed jar is not precise enough. We only look for the ""-Digest"" substring in the manifest and consider the jar is signed if the substring exists.
At the java level, if a jar file is signed with an algorithm in the jdk.jar.disabledAlgorithms list, the jar is considered unsigned.
So during runtime, the nu.xom.Node is loaded from the archive and the package entry is defined without the manifest info, i.e. without package sealing.
Later when another class from the same package is loaded from the jar, while creating the package entry for the class, it sees that the package has been defined unsealed and resulting in the sealing violation error.;;;","2023-08-17 22:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15339
Date: 2023-08-18 04:57:52 +0000;;;","2023-08-22 15:38;dukebot;Changeset: 9f4a9fe4
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-08-22 22:37:16 +0000
URL:       https://git.openjdk.org/jdk/commit/9f4a9fe488be7ce43f6719c54df25a1fabd8696a
;;;",,,,,,,,,,,,,,,,,,
HttpClient request fails due to connection being considered idle and closed,JDK-8312433,5105901,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2023-07-19 23:05,2023-09-08 13:22,2023-10-01 09:55,2023-07-27 05:17,20,,,,,,22,core-libs,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,regression,,,,,,,,,,,,,,"As reported in net-dev mailing list https://mail.openjdk.org/pipermail/net-dev/2023-July/021689.html

Hi all,

Since I updated Java from 19.0.2 to 20.0.1, I got some errors with connection idle shutdown or closed stream usage when trying to send HTTP requests with java.net.http.HttpClient.

The two following errors are happening. I suspect those are linked even if they don't trigger together.
1. java.net.http.HttpConnectTimeoutException: HTTP connection idle, no active streams. Shutting down.
at jdk.internal.net.http.HttpClientImpl.send(HttpClientImpl.java:890) ~[java.net.http:?]
2.  java.io.IOException: Stream 9 cancelled
at jdk.internal.net.http.Stream.cancel(Stream.java:1229) ~[java.net.http:?]
The detailed stacks are copied below.

Error 1. is caused by an idle connection trying to be used to send the request from what I understood from the code. Error 2. despite saying it is a cancelled streamed is actually happening when the stream is closed if I haven't missed something in the code.
I suspect either the idle connections are not always properly discarded to create a new one or there is a race condition when discarding the idle connections. 

I was not able so far to find where this could happen and I hope you could help me to find where the problem lies.

Thank you in advance for your help,

Best regards,

Nicolas Henneaux

Detailed stacks
1. Caused by: java.net.http.HttpConnectTimeoutException: HTTP connection idle, no active streams. Shutting down.
at jdk.internal.net.http.HttpClientImpl.send(HttpClientImpl.java:890) ~[java.net.http:?]
at jdk.internal.net.http.HttpClientFacade.send(HttpClientFacade.java:133) ~[java.net.http:?]
(...)
Caused by: java.net.http.HttpConnectTimeoutException: HTTP connection idle, no active streams. Shutting down.
at jdk.internal.net.http.Http2Connection$IdleConnectionTimeoutEvent.handle(Http2Connection.java:204) ~[java.net.http:?]
at jdk.internal.net.http.HttpClientImpl.purgeTimeoutsAndReturnNextDeadline(HttpClientImpl.java:1689) ~[java.net.http:?]
at jdk.internal.net.http.HttpClientImpl$SelectorManager.run(HttpClientImpl.java:1299) ~[java.net.http:?]


2. Caused by: java.io.IOException: Stream 9 cancelled
at jdk.internal.net.http.Stream.cancel(Stream.java:1229) ~[java.net.http:?]
at jdk.internal.net.http.Http2Connection.putStream(Http2Connection.java:1237) ~[java.net.http:?]
at jdk.internal.net.http.Stream.registerStream(Stream.java:851) ~[java.net.http:?]
at jdk.internal.net.http.Http2Connection.registerNewStream(Http2Connection.java:1337) ~[java.net.http:?]
at jdk.internal.net.http.Http2Connection.sendFrame(Http2Connection.java:1361) ~[java.net.http:?]
at jdk.internal.net.http.Stream.sendHeadersAsync(Stream.java:823) ~[java.net.http:?]
at jdk.internal.net.http.Exchange.lambda$responseAsyncImpl0$8(Exchange.java:550) ~[java.net.http:?]
at jdk.internal.net.http.Exchange.checkFor407(Exchange.java:430) ~[java.net.http:?]
at jdk.internal.net.http.Exchange.lambda$responseAsyncImpl0$9(Exchange.java:554) ~[java.net.http:?]
at java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:934) ~[?:?]
at java.util.concurrent.CompletableFuture.uniHandleStage(CompletableFuture.java:950) ~[?:?]
at java.util.concurrent.CompletableFuture.handle(CompletableFuture.java:2372) ~[?:?]
at jdk.internal.net.http.Exchange.responseAsyncImpl0(Exchange.java:554) ~[java.net.http:?]
at jdk.internal.net.http.Exchange.responseAsyncImpl(Exchange.java:406) ~[java.net.http:?]
at jdk.internal.net.http.Exchange.responseAsync(Exchange.java:398) ~[java.net.http:?]
at jdk.internal.net.http.MultiExchange.responseAsyncImpl(MultiExchange.java:409) ~[java.net.http:?]
at jdk.internal.net.http.MultiExchange.lambda$responseAsync0$2(MultiExchange.java:342) ~[java.net.http:?]
at java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:1150) ~[?:?]
at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510) ~[?:?]
at java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1773) ~[?:?]
at jdk.internal.net.http.HttpClientImpl$DelegatingExecutor.execute(HttpClientImpl.java:177) ~[java.net.http:?]
at java.util.concurrent.CompletableFuture.completeAsync(CompletableFuture.java:2719) ~[?:?]
at jdk.internal.net.http.MultiExchange.responseAsync(MultiExchange.java:295) ~[java.net.http:?]
at jdk.internal.net.http.HttpClientImpl.sendAsync(HttpClientImpl.java:983) ~[java.net.http:?]
at jdk.internal.net.http.HttpClientImpl.send(HttpClientImpl.java:875) ~[java.net.http:?]
at jdk.internal.net.http.HttpClientFacade.send(HttpClientFacade.java:133) ~[java.net.http:?]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288717,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32dcj:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-07-25 01:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15012
Date: 2023-07-25 08:50:58 +0000;;;","2023-07-27 05:16;dukebot;Changeset: 486c7844
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2023-07-27 12:14:14 +0000
URL:       https://git.openjdk.org/jdk/commit/486c7844f902728ce580c3994f58e3e497834952
;;;","2023-09-04 22:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/134
Date: 2023-09-05 05:38:35 +0000;;;","2023-09-04 22:52;jpai;Fix request

This was a regression in JDK 20, which has been fixed in mainline (JDK 22). Requesting a backport to JDK 21u, to prevent HTTP requests from failing intermittently when HttpClient is used in applications.;;;",,,,,,,,,,,,,,,,,,,
PKCS11 tests fail with NSS 3.91,JDK-8312428,5105896,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,valeriep,vpetko,vpetko,2023-07-19 19:01,2023-09-12 11:16,2023-10-01 09:55,2023-08-29 15:09,17,20,21,22,,,22,security-libs,,0,noreg-self,,,,,,,,,,,,,,,,,"sun/security/pkcs11/Signature/SignatureTestPSS.java
sun/security/pkcs11/Signature/KeyAndParamCheckForPSS.java
sun/security/pkcs11/MessageDigest/TestCloning.java

Running test in Ubuntu mantic:
...
Testing [1024 SHA3-256]
test#1: got expected IKE

java.security.InvalidKeyException: java.security.ProviderException: Initialization failed
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11PSSSignature.engineInitSign(P11PSSSignature.java:547)
	at java.base/java.security.Signature$Delegate.engineInitSign(Signature.java:1357)
	at java.base/java.security.Signature.initSign(Signature.java:636)
	at KeyAndParamCheckForPSS.runTest(KeyAndParamCheckForPSS.java:121)
	at KeyAndParamCheckForPSS.main(KeyAndParamCheckForPSS.java:70)
	at PKCS11Test.premain(PKCS11Test.java:178)
	at PKCS11Test.testNSS(PKCS11Test.java:554)
	at PKCS11Test.main(PKCS11Test.java:214)
	at KeyAndParamCheckForPSS.main(KeyAndParamCheckForPSS.java:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1570)
Caused by: java.security.ProviderException: Initialization failed
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11PSSSignature.initialize(P11PSSSignature.java:344)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11PSSSignature.engineInitSign(P11PSSSignature.java:545)
	... 12 more
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_MECHANISM_PARAM_INVALID
	at jdk.crypto.cryptoki/sun.security.pkcs11.wrapper.PKCS11.C_SignInit(Native Method)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11PSSSignature.initialize(P11PSSSignature.java:337)
	... 13 more
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312429,JDK-8312426,,,,,,,,,,"2023-07-19 19:00;vpetko;KeyAndParamCheckForPSS.txt;https://bugs.openjdk.org/secure/attachment/104657/KeyAndParamCheckForPSS.txt",,,,,,,,,,,,,,,,,,,,,,"0|i32dbf:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2023-07-20 14:41;rhalade;I am able to reproduce this failure on macOS as well with NSS 3.91;;;","2023-07-21 09:12;rhalade;Failure is only seen with 3.91, NSS version 3.90 works fine.;;;","2023-07-27 14:50;valeriep;It is known that the RSASSA-PSS signature impl of NSS will return CKR_MECHANISM_PARAM_INVALID error code when trying to use its PSS signature impl w/ an unsupported digest algorithm.
Existing PSS regression tests try to check if the particular message digest algorithm is supported and will skip it if no support. This has been working fine until NSS 3.91 where SHA-3 support is added. It seems that SHA-3 digests are supported, but not RSASSA-PSS using SHA-3 digests.;;;","2023-08-09 18:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15217
Date: 2023-08-10 00:56:56 +0000;;;","2023-08-29 15:09;dukebot;Changeset: 1c598c22
Author:    Valerie Peng <valeriep@openjdk.org>
Date:      2023-08-29 22:08:34 +0000
URL:       https://git.openjdk.org/jdk/commit/1c598c2245c5c348e946f4d0df653daa6e42da94
;;;",,,,,,,,,,,,,,,,,,
GenShen: In-place region promotion state may carry over when evacuation fails,JDK-8312422,5105890,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wkemper,wkemper,wkemper,2023-07-19 16:15,2023-07-20 08:34,2023-10-01 09:55,2023-07-20 08:34,repo-shenandoah,,,,,,,hotspot,,0,gc,gc-shenandoah,genshen,,,,,,,,,,,,,,,The generational mode manipulates the top of regions which have been reached the tenuring age while they wait for promotion. An evacuation failure may cause the configuration for these regions to become stale after a full collection.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32da3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-07-19 16:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/299
Date: 2023-07-19 23:17:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
SymbolTable::do_add_if_needed hangs when called in InstanceKlass::add_initialization_error path with requesting length exceeds max_symbol_length ,JDK-8312401,5105867,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jiangli,jiangli,jiangli,2023-07-19 10:21,2023-09-04 06:19,2023-10-01 09:55,2023-07-25 09:38,21,22,,,,,22,hotspot,,1,jdk21-fix-request,jdk21-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,"We ran into a hang when testing JDK 21 recently. [~cushon] bisected and found it's related to https://github.com/openjdk/jdk/commit/86b9fce9807eb5cbada90f9fa4d3763e3bff84cb. 

When attaching to the process that hangs, in gdb I saw one thread was always executing SymbolTable::do_add_if_needed. I was able to reproduce the hang with a fastdebug binary as well. After attaching, single stepping within the thread that's executing SymbolTable::do_add_if_needed (with `set scheduler-locking on` in gdb) confirmed it's executing in the while loop forever. 

```
  do {
    if (_local_table->insert(current, lookup, *tmp, &rehash_warning, &clean_hint)) {
      if (_local_table->get(current, lookup, stg, &rehash_warning)) {
...
```

'_local_table->insert' succeeded but '_local_table->get' always failed, which caused the control could never exit the loop. '_local_table->get' failed because 'Symbol::equals' failed due unmatched length comparison. 

The requested length was 27217, which exceeded the max symbol length. Creating the `tmp` Symbol with a length of 27217 did not fail but produced an incorrect result. The `tmp` Symbol had length 158289, which was `27217 & 0xFFFF`. So even when the `tmp` Symbol was successfully inserted to the beginning of the bucket, subsequent '_local_table->get' could not successfully find the newly inserted Symbol due to length mismatch.

```
#0  Symbol::equals (this=0x37953b000018, str=<optimized out>, len=158289)
    at /usr/local/google/home/jianglizhou/openjdk/local_fastdebug/srcs/src/hotspot/share/oops/symbol.hpp:201
201	    if (l != len) return false;
(gdb) p l
$81 = 27217
(gdb) p len
$82 = 158289
```

[~cushon] constructed a simple test case, which can be used to reproduce thee failure.

public class T {
  static {
    if (true) throw new AssertionError(""lorem ipsum "".repeat(16000));
  }

  public static void main(String[] args) {}
}






",,,,,,,,,,,JDK-8313806,,,,,,,,,,,,,,,,,,,,,,,JDK-8312616,,,,JDK-8223657,JDK-8301992,,,,,,,,,,generic,,,,,,,,,,,,,,,"0|i32d4z:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-19 10:24;jiangli;I tried a quick fix, https://github.com/openjdk/jdk/compare/master...jianglizhou:jdk:JDK-8312401 that just uses `char *` without Symbol for the throw message in java_lang_Throwable::create_initialization_error. That allowed the test run to completion.;;;","2023-07-19 10:36;jiangli;In JDK 11, SymbolTable::basic_add has the following:

```
  // Don't allow symbols to be created which cannot fit in a Symbol*.
  if (len > Symbol::max_length()) {
    THROW_MSG_0(vmSymbols::java_lang_InternalError(),
                ""name is too long to represent"");
  }
```

After JDK-8223657, it's not easy to throw a j.l.InternalError in SymbolTable::do_add_if_needed when the requested length exceeds 0xFFFF.

Probably only java_lang_Throwable::detail_message could attempt creating a symbol with extremely long length. One possible solution is to fix all callers (including  java_lang_Throwable::create_initialization_error) of java_lang_Throwable::detail_message to either not using Symbol, or throw a j.l.InternalError if the message length >0xFFFF.
  

;;;","2023-07-19 12:42;jiangli;java_lang_Throwable::detail_message can return nullptr if 'detailed_message' is NULL. java_lang_Throwable::detail_message calls java_lang_String::as_symbol to create the Symbol from the 'detailed_message'. So a much simpler fix is to check the string length in java_lang_String::as_symbol and just return nulllptr if length exceeds Symbol::max_length(). I updated https://github.com/openjdk/jdk/compare/master...jianglizhou:jdk:JDK-8312401. The test can run to completion with the expected exception, with the new fix.

;;;","2023-07-19 13:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14938
Date: 2023-07-19 20:18:01 +0000;;;","2023-07-25 09:38;dukebot;Changeset: 36f3bae5
Author:    Jiangli Zhou <jiangli@openjdk.org>
Date:      2023-07-25 16:37:51 +0000
URL:       https://git.openjdk.org/jdk/commit/36f3bae556783e7a9ab27b2a2f8dbb0d38be3583
;;;","2023-07-25 10:16;jiangli;I swayed between P2 and P3 when filing the bug. After more considerations I think P2 is more appropriate given the nature of the issue and should be back ported to JDK 21. ;;;","2023-07-25 10:30;jiangli;Fix Request

The fix should be backported to jdk21 to prevent runtime hang for the case described in the bug description.
The risk is low.;;;","2023-07-26 12:31;kvn;I suggest to wait few days before backport to JDK 21 to make sure there is no regression after the fix in JDK 22.;;;","2023-08-03 12:31;kvn;Fix request for JDK 21 approved.

I assume there is no regression in JDK 22 based on no new bugs are linked to this RFE. I approve backport.;;;","2023-08-04 11:28;jiangli;Thanks for the backport approval, Vladimir.;;;","2023-08-04 15:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/44
Date: 2023-08-04 22:33:59 +0000;;;",,,,,,,,,,,,
Improve assertions in growableArray,JDK-8312395,5105860,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-07-19 07:55,2023-08-01 00:32,2023-10-01 09:55,2023-07-20 08:10,21,22,,,,,22,hotspot,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,"There are a number of assertions in growableArray , for example to check for a valid index to access/remove  elements.
Those assertions can be improved, e.g. by showing the bad index value used in case of failure.",,,,,,,,,,,JDK-8313523,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32d3f:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-20 00:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14946
Date: 2023-07-20 07:43:51 +0000;;;","2023-07-20 08:10;dukebot;Changeset: b772e67e
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-07-20 15:06:59 +0000
URL:       https://git.openjdk.org/jdk/commit/b772e67e2929afd9f9d6a4b08713e41f891667c0
;;;","2023-07-31 01:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/25
Date: 2023-07-31 08:06:59 +0000;;;","2023-07-31 07:44;mbaesken;jdk21u backport request
I would like to have the change in jdk21u too, because the enhanced assertions would be helpful there too. The backport is clean and low risk.;;;",,,,,,,,,,,,,,,,,,,
[linux] SIGSEGV if kernel was built without hugepage support,JDK-8312394,5105857,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stuefe,stuefe,stuefe,2023-07-19 06:56,2023-08-30 11:06,2023-10-01 09:55,2023-07-20 03:24,22,,,,,,22,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,large-pages,,,,,,,,,,,,JDK-8310233 moved the static hugepage detection code around. It thereby triggered a pre-existing bug where we would not check the result of opendir(3) for NULL before starting to scan the static hugepages configuration directory.,,,,,,,,,,,JDK-8315068,JDK-8315394,,,,,,,,,,,,,,,,,JDK-8312366,,,,,JDK-8310233,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i32d2r:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-19 09:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14936
Date: 2023-07-19 14:11:28 +0000;;;","2023-07-20 03:24;dukebot;Changeset: 94eb44b1
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-07-20 10:23:35 +0000
URL:       https://git.openjdk.org/jdk/commit/94eb44b192ba421692549a178c386ea34164ea50
;;;","2023-08-23 01:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1679
Date: 2023-08-21 12:47:15 +0000;;;","2023-08-23 01:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2086
Date: 2023-08-17 14:50:49 +0000;;;","2023-08-23 23:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/97
Date: 2023-08-24 06:24:57 +0000;;;","2023-08-24 06:22;stuefe;Fix Request 21u:

I would like to backport this to 21u since it is a pre-requisite for fixing https://bugs.openjdk.org/browse/JDK-8312182 (""THPs cause huge RSS due to thread start timing issue"").

Patch applies cleanly and risk is small.

This particular patch fixes a regression post-8310233 which caused crashes on arm32.;;;","2023-08-30 02:16;stuefe;Fix Request 17u:

I would like to backport this to 17u since it is a pre-requisite for fixing https://bugs.openjdk.org/browse/JDK-8312182 (""THPs cause huge RSS due to thread start timing issue"").

Patch applies cleanly and risk is small.

This particular patch fixes a regression post-8310233 which caused crashes on arm32. ;;;","2023-08-30 02:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1695
Date: 2023-08-25 11:41:17 +0000;;;",,,,,,,,,,,,,,,
ARM32 build broken since 8311035,JDK-8312392,5105855,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2023-07-19 06:28,2023-07-24 17:24,2023-10-01 09:55,2023-07-19 09:17,22,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,"/shared/projects/openjdk/jdk-jdk/source/src/hotspot/share/cds/metaspaceShared.cpp:1256: error: undefined reference to 'CompressedKlassPointers::is_valid_base(unsigned char*)'

Weird thing is that nothing in the vicinity changed. The code had been broken before (we call CompressedKlassPointers::is_valid_base(), which we should not to on 32-bit platforms), but the code is guarded by a constant false. It depends on what the compiler decides to do with the unreachable code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311035,,,,,,,,,,,,,,,aarch32,,,,,,,,,,,,,,,"0|i32d2b:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-19 06:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14934
Date: 2023-07-19 13:37:16 +0000;;;","2023-07-19 09:17;dukebot;Changeset: d1c788c5
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-07-19 16:14:25 +0000
URL:       https://git.openjdk.org/jdk/commit/d1c788c52b8de401f42f6c8e9898b6ea12009fee
;;;",,,,,,,,,,,,,,,,,,,,,
Minimal build failure after JDK-8311541,JDK-8312329,5105787,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2023-07-18 18:38,2023-07-24 17:23,2023-10-01 09:55,2023-07-18 21:59,22,,,,,,22,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,"/Users/jiefu/jdk/src/hotspot/share/runtime/os.hpp:1009:22: error: inline function 'os::platform_print_native_stack' is not defined [-Werror,-Wundefined-inline]
  inline static bool platform_print_native_stack(outputStream* st, const void* context,
                     ^
/Users/jiefu/jdk/src/hotspot/share/runtime/javaThread.cpp:1714:13: note: used here
    if (os::platform_print_native_stack(tty, nullptr, buf, O_BUFLEN, lastpc)) {
            ^
1 error generated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311541,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32cn7:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-18 18:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14929
Date: 2023-07-19 01:42:41 +0000;;;","2023-07-18 21:59;dukebot;Changeset: 82612e27
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2023-07-19 04:58:22 +0000
URL:       https://git.openjdk.org/jdk/commit/82612e27255e36d498dcd6700f3b7d264b420180
;;;",,,,,,,,,,,,,,,,,,,,,
GenShen: Cancelled GCs may become stuck in self-cancellation loop,JDK-8312322,5105779,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wkemper,wkemper,wkemper,2023-07-18 15:30,2023-07-20 08:34,2023-10-01 09:55,2023-07-20 08:34,repo-shenandoah,,,,,,,hotspot,,0,gc,gc-shenandoah,,,,,,,,,,,,,,,,"If an old GC is cancelled during its preparation phase, it may not acknowledge the cancellation. This can lead to a situation where the subsequent, interrupting young cycle observes its own cancellation request and does nothing. Which, in turn leads to another request to run a young cycle and so on, ad infinitum.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311217,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32clf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-07-18 15:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/298
Date: 2023-07-18 22:33:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
GenShen: Remembered set scan may encounter garbage objects,JDK-8312321,5105778,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wkemper,wkemper,wkemper,2023-07-18 15:08,2023-07-20 09:24,2023-10-01 09:55,2023-07-20 09:24,repo-shenandoah,,,,,,,hotspot,,0,gc-shenandoah,genshen,,,,,,,,,,,,,,,,"After Shenandoah completes final marking, it will immediately reclaim any regions with no live objects. If unmarked (dead) objects in old regions hold pointers into these reclaimed regions, they must be ""coalesced and filled"" to prevent the remembered set scan from attempting to iterate oops over reclaimed memory.

The bug here is that when a concurrent global cycle reclaims enough memory from regions with no live objects, it will skip the evacuation phases. In such cases, the cycle is essential complete (at least, it cannot be interrupted) after it finishes the early cleanup. In such cases it _must_ coalesce and fill dead objects in old regions after the early cleanup phase.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32cl7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-07-18 15:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/297
Date: 2023-07-18 21:56:20 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
SIGSEGV in jfr.internal.event.EventWriter.putUncheckedByte after JDK-8312086,JDK-8312293,5105750,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mgronlun,dholmes,dholmes,2023-07-18 14:17,2023-08-01 04:11,2023-10-01 09:55,2023-07-21 05:22,21,22,,,,,22,hotspot,,0,hgupdate-sync,jdk21-fix-request,jdk21-fix-yes,tier8,,,,,,,,,,,,,,"Tests:
applications/microbenchmarks/other/Test_8.java#id4
applications/microbenchmarks/other/Test_8.java#id3

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fe7606fe761, pid=35850, tid=35880
#
# JRE version: Java(TM) SE Runtime Environment (22.0+7) (fastdebug build 22-ea+7-443)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+7-443, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# J 1540 c2 jdk.jfr.internal.event.EventWriter.putUncheckedByte(B)V jdk.jfr@22-ea (22 bytes) @ 0x00007fe7606fe761 [0x00007fe7606fe720+0x0000000000000041]
#

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fe7606fe761, pid=35850, tid=35880
#
# JRE version: Java(TM) SE Runtime Environment (22.0+7) (fastdebug build 22-ea+7-443)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+7-443, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# J 1540 c2 jdk.jfr.internal.event.EventWriter.putUncheckedByte(B)V jdk.jfr@22-ea (22 bytes) @ 0x00007fe7606fe761 [0x00007fe7606fe720+0x0000000000000041]
#",,,,,,,,,,,JDK-8313537,JDK-8313263,,,,,,,,,,,,,,,,,,,,,,JDK-8312086,,,,JDK-8312526,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32cez:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-07-20 12:36;mgronlun;// This issue is related to deoptimizing a compiled method that inlines the jdk/jfr/internal/JVM.commit(J)J intrinsic.
//
// Deoptimization unpack frame for method jdk/jfr/internal/event/EventWriter.endEvent()Z
// JRT_LEAF(BasicType, Deoptimization::unpack_frames(JavaThread* thread, int exec_mode))
//
// When the code is deoptimized, the return value from JVM.commit(J)J could be a completely invalid pointer.
//
// PROBLEM ANALYSIS
//
// Stack after unpack
000000b4`34bfe700  000000b4`34bfe700
000000b4`34bfe708  00000237`29db8b63 <<-- bcp (bci:99) // Method jdk/jfr/internal/JVM.commit:(J)J
000000b4`34bfe710  00000000`00000005
000000b4`34bfe718  00000237`29f74c40
000000b4`34bfe720  00000237`29f39210
000000b4`34bfe728  00000235`1afe21e8
000000b4`34bfe730  00000237`29db8c70 <<-- Method: jdk/jfr/internal/event/EventWriter.endEvent()Z
000000b4`34bfe738  000000b4`34bfe700
000000b4`34bfe740  000000b4`34bfe770
000000b4`34bfe748  000000b4`34bfe7c0 <<-- rbp
000000b4`34bfe750  00000235`15b389f6
000000b4`34bfe758  00000000`00000000
000000b4`34bfe760  00000000`00000000
000000b4`34bfe768  deaddeaf`00002013
000000b4`34bfe770  00000235`1d8937e8 <<-- r14 [locals]

// Registers after unpack (note rax)
rax=000002376f9dedac rbx=0000000000000048 rcx=f67412f973520000
rdx=0000000000000008 rsi=000002379a602ff0 rdi=0000023798875fa0
rip=0000023515b59266 rsp=000000b434bfe700 rbp=000000b434bfe748
 r8=00000000000000b8  r9=00000000000000c0 r10=00007ffbbca70000
r11=00007ffbbca71b4b r12=0000000000c00000 r13=0000023729affda8
r14=0000000000000000 r15=000002376f9de920

// bcp
00000237`29db8b63  b8 30 00 41 20 09 

// bci: 99:  0xb8 == invokestatic // Method jdk/jfr/internal/JVM.commit:(J)J (JIT)
// <deoptimization>
// bci: 102: 0x41 == lstore_2 (Interpreter)

// After deopt, the interpreter continues with the lstore_2 instruction:
00000235`15b42da8 498946e8        mov     qword ptr [r14-18h],rax

// Stack after retired lstore_2
000000b4`34bfe700  000000b4`34bfe700
000000b4`34bfe708  00000237`29db8b63 <<-- bcp (bci:99) // Method jdk/jfr/internal/JVM.commit:(J)J
000000b4`34bfe710  00000000`00000005
000000b4`34bfe718  00000237`29f74c40
000000b4`34bfe720  00000237`29f39210
000000b4`34bfe728  00000235`1afe21e8
000000b4`34bfe730  00000237`29db8c70 <<-- Method: jdk/jfr/internal/event/EventWriter.endEvent()Z
000000b4`34bfe738  00000000`00000000
000000b4`34bfe740  000000b4`34bfe770
000000b4`34bfe748  000000b4`34bfe7c0 <<-- rbp
000000b4`34bfe750  00000235`15b389f6
000000b4`34bfe758  00000237`6f9dedac <<--lstore_2 stored the current value in rax, expecting it to hold the return value from commit(). But endEvent inlined commit() and did not place the result there. 00000237`6f9dedac is a pointer to the _thread_state field of the thread: +0x48c _thread_state : 8 ( _thread_in_Java )
000000b4`34bfe760  00000000`00000000
000000b4`34bfe768  deaddeaf`00002013
000000b4`34bfe770  00000235`1d8937e8 <<-- r14 [locals]

// How could a pointer to the _thread_state field of the current thread    +0x48c _thread_state : 8 ( _thread_in_Java ), be treated as the next position returned by JVM.commit(J)J. Why was it placed into rax instead of the real nextPosition?
// When JVM.commit(J)J is inlined heavily, rax is not necessarily used for placing the immediate result from the commit(J)J instructions. For example:

...
000001c9`a4693ae3 4c8b9424e0000000 mov     r10,qword ptr [rsp+0E0h]
000001c9`a4693aeb 4c89942498000000 mov     qword ptr [rsp+98h],r10
000001c9`a4693af3 e828447dff       call    000001c9`a3e67f20 // <<-- this calls the VM function JfrIntrinsicSupport::return_lease. The invoked method return type is void, hence on return, rax contains whatever the register was used for last. Here, it was used for a pointer to the current _thread_state.
000001c9`a4693af8 0f1f8400e8160020 nop     dword ptr [rax+rax+200016E8h]
000001c9`a4693b00 4c8ba424f0000000 mov     r12,qword ptr [rsp+0F0h]
000001c9`a4693b08 4c8b8c24e8000000 mov     r9,qword ptr [rsp+0E8h]
000001c9`a4693b10 4c8b842498000000 mov     r8,qword ptr [rsp+98h]
000001c9`a4693b18 4c8b9424f0000000 mov     r10,qword ptr [rsp+0F0h]
000001c9`a4693b20 4533db          xor     r11d,r11d // r11d == nullptr (rscratch2 is used to return a pointer, not rax)
000001c9`a4693b23 498bcb          mov     rcx,r11
000001c9`a4693b26 e961f1ffff      jmp     000001c9`a4692c8c
...

// This could indicate a more general issue with how deoptimization happens in these kinds of situations. Or it could indicate that the JVM.commit(J)J intrinsic needs something extra to inform the compiler better of how to ""unpack"" for deoptimization.


//
// FIX
//
// Fix: I ensure that rax is always null when returning from the VM JfrIntrinsicSupport::return_lease() call. Its return value is changed from void to void* and always returns a nullptr. In the case of deoptimization post invocation of JVM::commit(J)J, should the buffer lease have been returned, the return value is always null.
//
// Fix: Stack after unpack
00000044`265fec90  00000044`265fec90
00000044`265fec98  000001d3`16db8f63 <<-- bcp (bci:99) // Method jdk/jfr/internal/JVM.commit:(J)J
00000044`265feca0  00000000`00000005
00000044`265feca8  000001d3`16f74e00
00000044`265fecb0  000001d3`16f38f90
00000044`265fecb8  000001d3`7ffb0e90
00000044`265fecc0  000001d3`16db9070 <<-- Method: jdk/jfr/internal/event/EventWriter.endEvent()Z
00000044`265fecc8  00000044`265fec90
00000044`265fecd0  00000044`265fed00
00000044`265fecd8  00000044`265fed50 <-- rbp
00000044`265fece0  000001d3`010289f6
00000044`265fece8  00000000`00000000
00000044`265fecf0  00000000`00000000
00000044`265fecf8  deaddeaf`00002013
00000044`265fed00  000001d3`9f843ee0 <<-- r14 [locals]

// Fix: Registers after unpack (note rax is now 0)
rax=0000000000000000 rbx=0000000000000048 rcx=facfea4f0f970000
rdx=0000000000000008 rsi=000001d5846c8ff0 rdi=000001d587d1afa0
rip=000001d301049266 rsp=00000044265fec90 rbp=00000044265fecd8
 r8=00000000000000b8  r9=00000000000000c0 r10=00007ffbbca70000
r11=00007ffbbca71b4b r12=0000000093c00000 r13=000001d316afffe8

000001d3`16db8f63   b8 30 00 41 20 09 

// bci: 99:  0xb8 == invokestatic // Method jdk/jfr/internal/JVM.commit:(J)J (JIT)
// <deoptimization>
// bci: 102: 0x41 == lstore_2 (Interpreter)

// After deopt, the interpreter continues with the lstore_2 instruction:
000001d3`01031e6a 498b46e8        mov     qword ptr [r14-18h],rax

// Stack after retired lstore_2:
00000044`265fec90  00000044`265fec90
00000044`265fec98  000001d3`16db8f63 <<-- bcp (bci:99) // Method jdk/jfr/internal/JVM.commit:(J)J
00000044`265feca0  00000000`00000005
00000044`265feca8  000001d3`16f74e00
00000044`265fecb0  000001d3`16f38f90
00000044`265fecb8  000001d3`7ffb0e90
00000044`265fecc0  000001d3`16db9070 <<-- Method: jdk/jfr/internal/event/EventWriter.endEvent()Z
00000044`265fecc8  00000000`00000000
00000044`265fecd0  00000044`265fed00
00000044`265fecd8  00000044`265fed50 <<-- rbp
00000044`265fece0  000001d3`010289f6
00000044`265fece8  00000000`00000000 <<--lstore_2 stored the current value located in rax, expecting it to hold the return value from JVM::commit(J)J. With the suggested fix, it is now null because the buffer lease was returned.
00000044`265fecf0  00000000`00000000
00000044`265fecf8  deaddeaf`00002013
00000044`265fed00  000001d3`9f843ee0
00000044`265fed08  00000044`265fed08
00000044`265fed10  000001d3`16f1f31b
;;;","2023-07-20 13:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14962
Date: 2023-07-20 19:59:50 +0000;;;","2023-07-21 04:16;mgronlun;Fix Request

The fix should be backported to jdk21 to prevent SIGSEGV in the JFR code.
The fix is straightforward, applies cleanly, and the risk is very low.;;;","2023-07-21 05:22;dukebot;Changeset: 59f66a3b
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2023-07-21 12:21:35 +0000
URL:       https://git.openjdk.org/jdk/commit/59f66a3b839c5b77c2770fa0bdd76f399d2d86d6
;;;","2023-07-26 10:46;kvn;Fix request for JDK 21 approved.;;;","2023-07-27 02:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/147
Date: 2023-07-27 09:38:51 +0000;;;","2023-07-27 10:28;dcubed;The JDK21 back port is integrated in jdk-21+33-2491.;;;",,,,,,,,,,,,,,,,
StatusResponseManager unused code clean up ,JDK-8312259,5105710,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xuelei,xuelei,xuelei,2023-07-18 10:12,2023-08-16 23:29,2023-10-01 09:55,2023-08-10 10:17,,,,,,,22,security-libs,,0,,,,,,,,,,,,,,,,,,"Removed unused code in StatusResponseManager.java, so that it is easier to make the next improvement to use virtual threads for status fetching.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32c63:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2023-07-18 12:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14924
Date: 2023-07-18 17:43:42 +0000;;;","2023-08-10 10:17;dukebot;Changeset: 79be8d93
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2023-08-10 17:15:56 +0000
URL:       https://git.openjdk.org/jdk/commit/79be8d9383c31be64e57ce1825a79dbbc2aefdd8
;;;",,,,,,,,,,,,,,,,,,,,,
NPE when HSDB visits bad oop,JDK-8312246,5105697,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,snazarki,snazarki,snazarki,2023-07-18 09:13,2023-07-27 10:48,2023-10-01 09:55,2023-07-20 02:23,17,21,22,,,,22,hotspot,,0,amazon-interest,,,,,,,,,,,,,,,,,"During investigation of a customer core file with graphic SA, it printed in stack memory:
````
Error while performing oopsDo for frame sp: 0x00007f2c602378f0, unextendedSP: 0x00007f2c602378f0, fp: 0x00007f2c60237938, pc: 0x00007f2c47e2b88a
java.lang.NullPointerException: Cannot invoke ""sun.jvm.hotspot.gc.g1.HeapRegion.isFree()"" because ""region"" is null
	at jdk.hotspot.agent/sun.jvm.hotspot.HSDB$34$1.addAnnotation(HSDB.java:1099)
	at jdk.hotspot.agent/sun.jvm.hotspot.HSDB$34$1.visitAddress(HSDB.java:1059)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.InterpreterFrameClosure.offsetDo(Frame.java:675)
	at jdk.hotspot.agent/sun.jvm.hotspot.interpreter.OopMapCacheEntry.iterateOop(OopMapCacheEntry.java:38)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Frame.oopsInterpretedDo(Frame.java:591)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Frame.oopsDo(Frame.java:442)
	at jdk.hotspot.agent/sun.jvm.hotspot.HSDB$34.run(HSDB.java:1052)
	at jdk.hotspot.agent/sun.jvm.hotspot.utilities.WorkerThread$MainLoop.run(WorkerThread.java:70)
	at java.base/java.lang.Thread.run(Thread.java:1570
﻿﻿````

The reproducer is attached. 
1. Compile and launch it with G1 enabled. 
2. Attach HSDB 
3. Select ""main"" thread
4. Click ""Stack Memory"" icon on ""Java Threads"" toolbar. 

The fix is trivial (will create PR soon):
diff --git a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HSDB.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HSDB.java
index 9cc51934d08..e59c3da379e 100644
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HSDB.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HSDB.java
@@ -1096,7 +1096,9 @@ public class HSDB implements ObjectHistogramPanel.Listener, SAListener {
                           G1CollectedHeap heap = (G1CollectedHeap)collHeap;
                           HeapRegion region = heap.hrm().getByAddress(handle);

-                          if (region.isFree()) {
+                          if (region == null) {
+                              anno = ""NOTG1REGION"";
+                          } else if (region.isFree()) {
                             anno = ""Free "";
                             bad = false;
                           } else if (region.isYoung()) {
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-07-18 09:13;snazarki;InvalidOop.java;https://bugs.openjdk.org/secure/attachment/104652/InvalidOop.java",,,,,,,,,,,,,,,,,,,,,,"0|i32c37:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-07-18 09:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14922
Date: 2023-07-18 16:47:00 +0000;;;","2023-07-20 02:23;dukebot;Changeset: a7427678
Author:    Sergey Nazarkin <snazarki@openjdk.org>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2023-07-20 09:21:23 +0000
URL:       https://git.openjdk.org/jdk/commit/a7427678e160bf54c57d5bec80650b053dfc9e9a
;;;",,,,,,,,,,,,,,,,,,,,,
[JVMCI] ConstantPool should not force eager resolution,JDK-8312235,5105684,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,dnsimon,dnsimon,2023-07-18 07:15,2023-08-10 06:03,2023-10-01 09:55,2023-07-27 01:42,11,17,21,22,,,22,hotspot,,0,conformance,graal,jvmci,oracle-triage-22,,,,,,,,,,,,,,"The existing jdk.vm.ci.meta.ConstantPool.lookupConstant(int cpi) method forces eager resolving of constants. For DynamicConstant and MethodHandle, this can mean invoking bootstrap methods, something that should not be done during JIT compilation. To avoid this eager resolution, an overloaded version of this method is required:

/**
 * Looks up a constant at the specified index.
 *
 * If {@code resolve == false} and the denoted constant is of type
 * {@code JVM_CONSTANT_Dynamic}, {@code JVM_CONSTANT_MethodHandle} or
 * {@code JVM_CONSTANT_MethodType} and it's not yet resolved then
 * {@code null} is returned.
 *
 * @param cpi the constant pool index
 * @return the {@code Constant} or {@code JavaType} instance representing the constant pool entry
 */
Object lookupConstant(int cpi, boolean resolve);

Likewise, jdk.vm.ci.meta.ConstantPool.lookupBootstrapMethodInvocation(int rawCpi, int opcode) invokes the associated bootstrap method. It should not.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,,,,,,,,,,,,,,,,,,,,9,,,,,,,"0|i32c0b:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-19 00:38;chagedorn;ILW = Wrong eager lookup resolution leading to failures in JCK tests with Graal, Graal only, no workaround = HLH = P2;;;","2023-07-19 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14927
Date: 2023-07-18 20:35:54 +0000;;;","2023-07-27 01:42;dukebot;Changeset: 86821a7c
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-07-27 08:39:32 +0000
URL:       https://git.openjdk.org/jdk/commit/86821a7ce89c51cc3650228c55a4a88c743209e4
;;;","2023-07-27 04:41;thartmann;Lowering priority after discussion with [~dnsimon]: ""this fix is “only” for JDK tests that use -Xcomp. Under normal VM execution, the cp resolution would be done in the interpreter"".;;;",,,,,,,,,,,,,,,,,,,
Remove sun.jvm.hotspot.runtime.VM.buildLongFromIntsPD(),JDK-8312232,5105679,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,cjplummer,asmehra,asmehra,2023-07-18 06:30,2023-08-28 14:54,2023-10-01 09:55,2023-08-22 13:58,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,"sun.jvm.hotspot.runtime.VM.buildLongFromIntsPD() has only two users:
1. StackValueCollection.longAt()
2. ConstantPool.getLongAt()

Its use in ConstantPool.getLongAt() is incorrect and is replaced with Address.getJLongAt() in https://bugs.openjdk.org/browse/JDK-8311971.
The other user StackValueCollection.longAt() is dead code and not used anywhere.

This task is to remove sun.jvm.hotspot.runtime.VM.buildLongFromIntsPD() and clean up the dead code in sun.jvm.hotspot.runtime.StackValueCollection as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32bz7:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-08-21 13:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15371
Date: 2023-08-21 20:21:49 +0000;;;","2023-08-22 13:58;dukebot;Changeset: 7c169a42
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-08-22 20:57:11 +0000
URL:       https://git.openjdk.org/jdk/commit/7c169a426f93a9c5f1223eddeb9ce0427722c8ab
;;;",,,,,,,,,,,,,,,,,,,,,
"Crash involving yield, switch and anonymous classes",JDK-8312229,5105674,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,abimpoudis,abimpoudis,2023-07-18 04:03,2023-07-31 12:14,2023-10-01 09:55,2023-07-26 02:45,17,18,19,20,21,,22,tools,,0,regression,,,,,,,,,,,,,,,,,"public class Bug {
    void test(Object o) {
        Runnable r = () -> {
            var l = switch (o) {
                default -> {
                    Integer i = 42;
                    yield new Runnable() { // ok with lambda, crash with anon
                        public void run() {
                            i.toString(); // crash here, symbol of i is null
                        }
                    };
                }
            };
        };
    }
}

An exception has occurred in the compiler (22-internal). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError
	at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
	at jdk.compiler/com.sun.tools.javac.util.Assert.check(Assert.java:46)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.access(Lower.java:1227)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitIdent(Lower.java:3499)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCIdent.accept(JCTree.java:2715)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2181)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitSelect(Lower.java:4201)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCFieldAccess.accept(JCTree.java:2581)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2181)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitApply(Lower.java:3167)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1816)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2181)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.visitExec(TreeTranslator.java:257)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCExpressionStatement.accept(JCTree.java:1603)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2181)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:70)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.visitBlock(TreeTranslator.java:167)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitBlock(Lower.java:3689)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1092)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2181)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.visitMethodDef(TreeTranslator.java:150)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitMethodDefInternal(Lower.java:2858)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitMethodDef(Lower.java:2774)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:916)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2181)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitClassDef(Lower.java:2323)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:814)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2181)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitNewClass(Lower.java:2956)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCNewClass.accept(JCTree.java:1871)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2181)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2192)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitYield(Lower.java:4181)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCYield.accept(JCTree.java:1677)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2181)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:70)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.visitBlock(TreeTranslator.java:167)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitBlock(Lower.java:3689)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1092)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2181)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:70)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.visitCase(TreeTranslator.java:212)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCCase.accept(JCTree.java:1343)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2181)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translateCases(TreeTranslator.java:94)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.handleSwitch(Lower.java:3801)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitSwitchExpression(Lower.java:3733)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitchExpression.accept(JCTree.java:1399)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2181)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2192)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitLetExpr(Lower.java:4221)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$LetExpr.accept(JCTree.java:3418)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2181)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2192)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitVarDef(Lower.java:3675)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCVariableDecl.accept(JCTree.java:1022)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2181)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:70)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.visitBlock(TreeTranslator.java:167)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitBlock(Lower.java:3689)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1092)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2181)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.visitMethodDef(TreeTranslator.java:150)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitMethodDefInternal(Lower.java:2858)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitMethodDef(Lower.java:2774)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:916)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2181)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitClassDef(Lower.java:2323)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:814)
	at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2181)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translate(Lower.java:2200)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.translateTopLevelClass(Lower.java:4293)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.desugar(JavaCompiler.java:1660)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.desugar(JavaCompiler.java:1474)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:978)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:319)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:178)
	at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:66)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:52)

https://mail.openjdk.org/pipermail/amber-dev/2023-July/008206.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32by3:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-07-19 03:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14930
Date: 2023-07-19 10:44:22 +0000;;;","2023-07-26 02:45;dukebot;Changeset: 1f81e5b1
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-07-26 09:44:50 +0000
URL:       https://git.openjdk.org/jdk/commit/1f81e5b19ebfb7cd1b5a01d6cf79efda7e827c35
;;;",,,,,,,,,,,,,,,,,,,,,
unexpected else with statement causes compiler crash,JDK-8312204,5105553,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,webbuggrp,webbuggrp,2023-07-16 01:01,2023-08-14 11:55,2023-10-01 09:55,2023-08-08 02:29,21,22,,,,,22,tools,,0,additional-information-received,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Verified on Java version 22 (commit: 0e3d91dc213b5173f72e954d9b8e13e1b8343b23)


A DESCRIPTION OF THE PROBLEM :
an unexpected else keyword followed by a statement leads to compiler crash 
i.e. else STATEMENT; seems to crash the javac compiler

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
try to compile code with javac

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
produce a reasonable error message
ACTUAL -
Crashes with the following trace:
An exception has occurred in the compiler (22-internal). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError
        at jdk.compiler/com.sun.tools.javac.parser.VirtualParser$VirtualScanner.errPos(VirtualParser.java:151)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.doRecover(JavacParser.java:3121)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.parseSimpleStatement(JavacParser.java:3090)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.blockStatement(JavacParser.java:2818)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.blockStatements(JavacParser.java:2755)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.block(JavacParser.java:2725)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.block(JavacParser.java:2739)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.methodDeclaratorRest(JavacParser.java:4897)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.topLevelMethodOrFieldDeclaration(JavacParser.java:4771)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.parseCompilationUnit(JavacParser.java:3988)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.parse(JavaCompiler.java:652)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.parse(JavaCompiler.java:629)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.parse(JavaCompiler.java:689)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.parseFiles(JavaCompiler.java:1045)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler$InitialFileParser.parse(JavaCompiler.java:1979)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.parseFiles(JavaCompiler.java:1032)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:951)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:319)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:178)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:66)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:52)

---------- BEGIN SOURCE ----------
public static void test(String[] args) {
        else 1;
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-07-24 02:23;jpai;Foo.java;https://bugs.openjdk.org/secure/attachment/104713/Foo.java","2023-07-17 20:56;adev;Test.java;https://bugs.openjdk.org/secure/attachment/104640/Test.java",,,,,,generic,,,,,,,,,,generic,,,,,"0|i32b77:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-07-17 20:55;adev;I could not reproduce it either with JDK 21 nor JDK 22.
PS C:\test> C:\jdk\openjdk-22-ea+6_windows-x64_bin\jdk-22\bin\javac Test.java
Test.java:3: error: not a statement
        else 1;
             ^
Test.java:3: error: 'else' without 'if'
        else 1;
        ^
2 errors
;;;","2023-07-21 23:08;pnarayanaswa;Additional Information from submitter:
=============================
I just tested the early access build of JDK 22 (access here: https://jdk.java.net/22/, Build 6 (2023/7/13))

with Windows / x64	and the same crash error happened: 

PS C:\jdk-22\bin> ./javac test.java
An exception has occurred in the compiler (22-ea). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError
        at jdk.compiler/com.sun.tools.javac.parser.VirtualParser$VirtualScanner.errPos(VirtualParser.java:151)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.doRecover(JavacParser.java:3121)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.parseSimpleStatement(JavacParser.java:3090)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.blockStatement(JavacParser.java:2818)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.blockStatements(JavacParser.java:2755)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.block(JavacParser.java:2725)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.block(JavacParser.java:2739)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.methodDeclaratorRest(JavacParser.java:4897)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.topLevelMethodOrFieldDeclaration(JavacParser.java:4771)
        at jdk.compiler/com.sun.tools.javac.parser.JavacParser.parseCompilationUnit(JavacParser.java:3988)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.parse(JavaCompiler.java:652)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.parse(JavaCompiler.java:629)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.parse(JavaCompiler.java:689)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.parseFiles(JavaCompiler.java:1045)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler$InitialFileParser.parse(JavaCompiler.java:1979)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.parseFiles(JavaCompiler.java:1032)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:951)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:319)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:178)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:66)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:52)

my test.java: 
public static void test(String[] args) {
        else 1;
}

          ;;;","2023-07-24 02:23;jpai;I could reproduce this on both 21 and mainline (22). I have attached a reproducer (Foo.java), running:

javac Foo.java

on 21 and mainline results in the exception noted in this JBS issue. Running the same command with Java 20 (or lower) results in an (expected) compilation error:

jdk-20.jdk/Contents/Home/bin/javac Foo.java
Foo.java:1: error: class, interface, enum, or record expected
public static void test(String[] args) {
              ^
Foo.java:3: error: class, interface, enum, or record expected
}
^
2 errors;;;","2023-07-31 01:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15086
Date: 2023-07-31 08:43:28 +0000;;;","2023-08-08 02:29;dukebot;Changeset: a1115a7a
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-08-08 09:28:21 +0000
URL:       https://git.openjdk.org/jdk/commit/a1115a7a39438438ec247743718cdc1ec59823d6
;;;",,,,,,,,,,,,,,,,,,
"Clean up common behavior in ""page writers"" and ""member writers""",JDK-8312201,5105641,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2023-07-17 16:08,2023-08-10 06:04,2023-10-01 09:55,2023-07-28 10:49,22,,,,,,22,tools,,0,,,,,,,,,,,,,,,,,,"Following JDK-8312044 it became clear that there is a lack of reasonable common behavior among groups of related classes.

For example, `HtmlDoclet` caused a number of pages to be generated, but there is no common `generatePage` method. Sure, all the page writers individually implement `build`, but there is no common definition of that method. (Nor was there, in the recently-deleted builder classes; the method was just there ""by convention"".)

Related, various pages contain ""members"", but there is no common way that members are handled. Even on the `ClassWriter` page, the summary tables are handled in a very different fashion to the detail lists for each kind of member. In general, the various subtypes of `AbstractMemberWriter` should provide similar methods for the different kinds of member, so that the enclosing page can just iterate over the kinds of `AbstractMemberWriter` to generate the appropriate content.  This is done haphazardly, with the result that while some member writers provide the _ability_ to generate kinds of content, the methods are not always invoked. (This was revealed in the work for JDK-8312044,  by the IDE reporting that some methods were not called.)",,,,,,,,,,,,,,,,,,,,,,,JDK-8313204,,,,,,,,,,,JDK-8312044,,,,JDK-8284447,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32bqr:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-07-26 18:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15049
Date: 2023-07-27 01:44:36 +0000;;;","2023-07-28 10:49;dukebot;Changeset: 402cb6a5
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-07-28 17:48:31 +0000
URL:       https://git.openjdk.org/jdk/commit/402cb6a550f60c75f93c709b5e5902f3757a8acd
;;;","2023-07-28 11:49;jjg;This change primarily focusses on the ""member writers"", and not on the ""page writers"".;;;",,,,,,,,,,,,,,,,,,,,
Fix Parse::catch_call_exceptions memory leak,JDK-8312200,5105640,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jsjolen,jsjolen,jsjolen,2023-07-17 14:03,2023-07-24 17:23,2023-10-01 09:55,2023-07-19 02:05,11,17,21,22,8,,22,hotspot,,0,amazon-interest,c2,memory-leak,oracle-triage-22,,,,,,,,,,,,,,Parse::catch_call_exceptions has a memory leak where arrays are allocated onto the node_arena. Fix this by allocating them somewhere else.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32bqj:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-17 23:58;chagedorn;ILW = Memory leak in C2 parsing but harmless, always, no workaround = LHH = P4;;;","2023-07-18 04:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14921
Date: 2023-07-18 11:33:38 +0000;;;","2023-07-19 02:04;dukebot;Changeset: d33e8e6f
Author:    Johan Sjölen <jsjolen@openjdk.org>
Date:      2023-07-19 09:03:53 +0000
URL:       https://git.openjdk.org/jdk/commit/d33e8e6f93d7b0806e1d0087c3c0a11fe1bc8e21
;;;",,,,,,,,,,,,,,,,,,,,
ProblemList test/hotspot/jtreg/applications/ctw/modules/jdk_crypto_ec.java ,JDK-8312196,5105636,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ascarpino,ascarpino,ascarpino,2023-07-17 12:41,2023-07-24 17:16,2023-10-01 09:55,2023-07-17 13:39,,,,,,,22,hotspot,,0,ProblemList,,,,,,,,,,,,,,,,,Adding it to the problem list,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312194,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32bpn:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-07-17 13:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14909
Date: 2023-07-17 19:51:38 +0000;;;","2023-07-17 13:39;dukebot;Changeset: 6ae152d1
Author:    Anthony Scarpino <ascarpino@openjdk.org>
Date:      2023-07-17 20:37:40 +0000
URL:       https://git.openjdk.org/jdk/commit/6ae152d1bec6de8b2ab5cf559bddc7069825e5dd
;;;",,,,,,,,,,,,,,,,,,,,,
Changes in JDK-8284493 use wrong copyright syntax,JDK-8312195,5105635,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,darcy,darcy,darcy,2023-07-17 12:34,2023-07-24 17:15,2023-10-01 09:55,2023-07-17 12:46,22,,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284493,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32bpf:",9223372036854775807,b07,,,,,,,,,,,"2023-07-17 12:46;dukebot;Changeset: 295ae119
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2023-07-17 19:44:08 +0000
URL:       https://git.openjdk.org/jdk/commit/295ae1190dfb6ac3d00d3cf2d8c8c131f5c319b5
;;;","2023-07-17 12:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14908
Date: 2023-07-17 19:40:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,
test/hotspot/jtreg/applications/ctw/modules/jdk_crypto_ec.java cannot handle empty modules,JDK-8312194,5105634,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lmesnik,ascarpino,ascarpino,2023-07-17 12:21,2023-08-16 23:28,2023-10-01 09:55,2023-08-10 08:20,22,,,,,,22,hotspot,,0,ProblemList,,,,,,,,,,,,,,,,,"test/hotspot/jtreg/applications/ctw/modules/jdk_crypto_ec.java

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: modules:jdk.crypto.ec(at /opt/mach5/mesos/work_dir/jib-master/install/jdk-22+7-451/linux-x64-debug.jdk/jdk-22/fastdebug/lib/modules) does not have any classes: expected 0 > 0
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312196,,,,JDK-8308398,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32bp7:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-07-18 09:25;ascarpino;I don't know.. As it is in hotspot, it is checking the contents of modules, which is not a hotspot feature.  I just filed it under security-libs because it was a security module.  But if it truly belongs in a different component, feel free to change it.;;;","2023-07-19 10:03;rhalade;Moving this to hotspot component after consulting with hotspot team.;;;","2023-07-25 10:40;ascarpino;IMO, wIth no classes in the module for this test to check, either the test should be deleted or the underlying code should be able to handle modules with no classes.;;;","2023-08-08 20:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15201
Date: 2023-08-09 03:03:47 +0000;;;","2023-08-10 08:20;dukebot;Changeset: e7c83ea9
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-08-10 15:18:34 +0000
URL:       https://git.openjdk.org/jdk/commit/e7c83ea948f8b2cd7caf7e59d3cf6b087807dba7
;;;",,,,,,,,,,,,,,,,,,
ColorConvertOp.filter for the default destination is too slow,JDK-8312191,5105631,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,serb,serb,2023-07-17 11:27,2023-09-27 18:20,2023-10-01 09:55,2023-09-25 13:56,17,21,22,,,,22,client-libs,,0,amazon-interest,,,,,,,,,,,,,,,,,"The code below works 10 times slower than converting the image pixel by pixel using ICC_ColorSpace.to/From.
=======
ColorConvertOp sharedOp = new ColorConvertOp(srcCS, dstCS, null);
BufferedImage dst = sharedOp.filter(src, null);
=======",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32boj:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-07-18 16:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14910
Date: 2023-07-17 20:59:05 +0000;;;","2023-09-25 13:56;dukebot;Changeset: e5f05b5a
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-09-25 20:54:00 +0000
URL:       https://git.openjdk.org/jdk/commit/e5f05b5a963774914751d9c241dd5693ed06af0b
;;;",,,,,,,,,,,,,,,,,,,,,
TestStringEncodingFails for UTF-32,JDK-8312186,5105626,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jvernee,jvernee,jvernee,2023-07-17 11:09,2023-07-17 16:07,2023-10-01 09:55,2023-07-17 16:07,repo-panama,,,,,,repo-panama,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,"Now that UTF-32 is a part of StandardCharsets, we should add support in the FFM API as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32bnf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-07-17 13:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/847
Date: 2023-07-17 19:30:12 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
THPs cause huge RSS due to thread start timing issue,JDK-8312182,5105621,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stuefe,stuefe,stuefe,2023-07-17 09:53,2023-08-30 11:07,2023-10-01 09:55,2023-07-21 07:21,11,17,21,22,8,,22,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,large-pages,redhat-interest,,,,,,,,,,,"If THP (Transparent Huge Pages) are enabled unconditionally on the system, java applications that use many threads may see a huge Resident Set Size. That footprint is caused by thread stacks being mostly paged in. This page-in is caused by thread stack memory being transformed into huge pages by khugepaged; later, those huge pages usually shatter into small pages when Java guard pages are established at thread start, but the remaining splinter small pages remain paged in.

Note that this effect is independent of any JVM switches; it happens regardless of -XX:+UseTransparentHugePages.

JDK-8303215 attempted to fix this problem by making it unlikely that thread stack boundaries are aligned to THP page size. Unfortunately, that was not sufficient. We still see JVMs with huge footprints, especially if they did create many Java threads in rapid succession.

Demonstration:

10000 idle threads with 100 MB pre-touched java heap, -Xss2M, on x64, will consume:

A) Baseline (THP disabled on system): 369 MB
B) THP=""always"", JDK-8303215 present: 1.5 GB .. >2 GB (very wobbly)
C) THP=""always"", JDK-8303215 present, artificial delay after thread start: 20,6 GB (!).
Cause:

The problem is caused by timing. When we create multiple Java threads, the following sequence of actions happens:

In the parent thread:

    the parent thread calls pthread_create(3)
    pthread_create(3) creates the thread stack by calling mmap(2)
    pthread_create(3) calls clone(2) to start the child thread
    repeat to start more threads

Each child thread:

    queries its stack dimensions
    handshakes with the parent to signal lifeness
    establishes guard pages at the low end of the stack

The thread stack mapping is established in the parent thread; the guard pages are placed by the child threads. There is a time window in which the thread stack is already mapped into address space, but guard pages still need to be placed.

If the parent is faster than the children, it will have created mappings faster than the children can place guard pages on them.

For the kernel, these thread stacks are just anonymous mappings. It places them adjacent to each other to reduce address space fragmentation. As long as no guard pages are placed yet, all these thread stack mappings (VMAs) have the same attributes - same permission bits, all anonymous. Hence, the kernel will fold them into a single large VMA.

That VMA may be large enough to be eligible for huge pages. Now the JVM races with the khugepaged: If khugepaged is faster than the JVM, it will have converted that larger VMA partly or fully into hugepages before the child threads start creating guard pages.

The child threads will catch up and create guard pages. That will splinter the large VMA into several smaller VMAs (two for each thread, one for the usable thread section, and one protected for the guards). Each of these VMAs will typically be smaller than a huge page, and typically not huge-page-aligned. The huge pages created by khugepaged will mostly shatter into small pages, but these small pages remain paged-in. Effect: we pay memory for the whole thread stacks even though the threads did not start yet.

This is a similar effect as described in JDK-8303215; but we assumed it only affects individual threads when it affects whole regions of adjacent thread stacks.
Example:

Let's create three threads. Each thread stack, including guard pages, is 2M + 4K sized (+4K because of JDK-8303215).

Their thread stacks will be located at: ( [base .. end .. guard]:

T1: [7feea53ff000 .. 7feea5202000 .. 7feea51fe000] 
T2: [7feea5600000 .. 7feea5403000 .. 7feea53ff000] 
T3: [7feea5801000 .. 7feea5604000 .. 7feea5600000]

After pthread_create(3), their thread stacks exist without JVM guard pages. Kernel merges the VMAs of their thread stacks into a single mapping > 6MB. khugepaged then coalesces their small pages into 3 huge pages:

```
7feea51fe000-7feea5801000 rw-p 00000000 00:00 0    <<<------- all three stacks as one VMA
Size:               6156 kB
KernelPageSize:        4 kB
MMUPageSize:           4 kB
Rss:                6148 kB
Pss:                6148 kB
Shared_Clean:          0 kB
Shared_Dirty:          0 kB
Private_Clean:         0 kB
Private_Dirty:      6148 kB
Referenced:         6148 kB
Anonymous:          6148 kB
LazyFree:              0 kB
AnonHugePages:      6144 kB      <<<---------- 3x2MB huge pages
ShmemPmdMapped:        0 kB
FilePmdMapped:         0 kB
Shared_Hugetlb:        0 kB
Private_Hugetlb:       0 kB
Swap:                  0 kB
SwapPss:               0 kB
Locked:                0 kB
THPeligible:    1    
VmFlags: rd wr mr mw me ac sd 
```

Threads start and create their respective guard pages. The single VMA splinters into 6 smaller VMAs. The huge pages shatter into small pages that remain paged-in:

```
7feea51fe000-7feea5202000 ---p 00000000 00:00 0   <<----- guard pages for T1
Size:                 16 kB
...
7feea5202000-7feea53ff000 rw-p 00000000 00:00 0   <<------ thread stack for T1
Size:               2036 kB
KernelPageSize:        4 kB
MMUPageSize:           4 kB
Rss:                2036 kB
Pss:                2036 kB
Private_Dirty:      2036 kB   <<<--------  all pages resident
...
7feea53ff000-7feea5403000 ---p 00000000 00:00 0   <<----- guard pages for T2
Size:                 16 kB
...
7feea5403000-7feea5600000 rw-p 00000000 00:00 0   <<------ thread stack for T2
Size:               2036 kB
KernelPageSize:        4 kB
MMUPageSize:           4 kB
Rss:                2036 kB
Pss:                2036 kB
Private_Dirty:      2036 kB   <<<--------  all pages resident
...
7feea5600000-7feea5604000 ---p 00000000 00:00 0    <<----- guard pages for T3 
Size:                 16 kB
...
7feea5604000-7feea5801000 rw-p 00000000 00:00 0    <<------ thread stack for T3
Size:               2036 kB
KernelPageSize:        4 kB
MMUPageSize:           4 kB
Rss:                2036 kB
Pss:                2036 kB
Private_Dirty:      2036 kB   <<<--------  all pages resident
...
```",,,,,,,,,,,JDK-8315396,JDK-8315122,,,,,,,,,,,,,,,,,,,,,,JDK-8312211,,,,JDK-8310233,JDK-8303215,JDK-8312585,JDK-8314139,,,,,,,,,,,,,,,,,,linux,,,,,"0|i32bmb:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-17 11:54;stuefe;A very simple solution is to let the glibc create a guard page. We normally don't do that for Java threads. But if glibc creates the guard page, it does so by mprotecting the end of the stack *before* cloning the child thread. That means there will not exist a time within which the thread stack VMA will be mergeable with the preceding adjacent VMA.

Note, however, that establishing glibc guards in addition to JVM guards costs one additional VMA per thread (now 3, before 2) since glibc guard and JVM guard cannot be merged; the issue is tracked by JDK-8312211.;;;","2023-07-18 08:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14919
Date: 2023-07-18 08:14:56 +0000;;;","2023-07-21 07:21;dukebot;Changeset: 84b325b8
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-07-21 14:19:57 +0000
URL:       https://git.openjdk.org/jdk/commit/84b325b844c08809448a9c073a11443d9e3c3f8e
;;;","2023-08-04 04:44;stuefe;Note: downports planned (11, 17, possibly 8);;;","2023-08-15 02:39;stuefe;All JDKs down to 8 are affected (I did not test earlier versions).

Starting 10000 threads with 2MB stack, Xmx=Xms=1G, +AlwaysPreTouch:

RSS, in GB, per JDK release:

THP Mode ""always""
jdk 8: 	6-8
jdk 11:	11-13
jdk 17: 11-13

THP Mode ""never""
jdk 8: 	11-13
jdk 11:	1.2
jdk 17: 1.2
;;;","2023-08-18 23:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2086
Date: 2023-08-17 14:50:49 +0000;;;","2023-08-21 09:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1679
Date: 2023-08-21 12:47:15 +0000;;;","2023-08-25 22:37;stuefe;Fix Request 21u: 

I want to backport this to 21u since it can cause huge RSS bloat and performance problems on Linux when THPs are unconditionally enabled.

The patch applies cleanly and the risk is small. 
;;;","2023-08-25 23:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/103
Date: 2023-08-25 12:48:36 +0000;;;","2023-08-30 02:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1697
Date: 2023-08-25 11:57:30 +0000;;;","2023-08-30 02:39;stuefe;Fix Request 17u:

I want to backport this to 17u since it can cause huge RSS bloat and performance problems on Linux when THPs are unconditionally enabled.

The patch applies cleanly and the risk is small. 

The actual changes in this patch are very limited: if THPs are unconditionally enabled, always let the libc alloate a guard page and slightly alter stack sizes that are (THP page size) in size. Even though this (very slightly) increases stack sizes, the observed effect would be a possibly large reduction in RSS because the patch prevents unwanted hugepage clustering of thread stack pages.

GHA ran through successfully (before the last rebase). I also did a lot of manual tests on Ubuntu x64 to verify the problem being solved by this patch.;;;",,,,,,,,,,,,
CDS dynamic dump crashes when verifying unlinked class from static archive,JDK-8312181,5105620,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccheung,iklam,iklam,2023-07-17 09:37,2023-08-10 06:05,2023-10-01 09:55,2023-08-01 13:34,22,,,,,,22,hotspot,,0,cds,,,,,,,,,,,,,,,,,"Scenario:

class Foo with class version 51, one of its supertypes, Bar is version 49.
class Bar cannot be verified - linking Bar would result in VerifyError.

Dump Foo and Bar in a static archive.
Both classes will be in ""unlinked"" state because class Bar is old.

Issue encountered when Foo is verified at runtime while dumping the dynamic archive.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312427,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32bm3:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-18 11:12;mseledtsov;ILW = HLM = P3
Likelihood is low because this is uncommon scenario with really old class file versions.;;;","2023-07-21 16:52;ccheung;VM crashes as follows:

#  Internal Error (.../jdk/open/src/hotspot/share/classfile/systemDictionaryShared.cpp:183), pid=4030059, tid=4030061
#  assert(!k->is_shared()) failed: sanity
....
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x174c8b8]  SystemDictionaryShared::get_info(InstanceKlass*) [clone .part.0]+0x28  (systemDictionaryShared.cpp:183)
V  [libjvm.so+0x174f4b5]  (arguments.hpp:536)
V  [libjvm.so+0x13a02a3]  MetaspaceShared::try_link_class(JavaThread*, InstanceKlass*)+0x133  (metaspaceShared.cpp:819)
V  [libjvm.so+0x13a3d8f]  MetaspaceShared::link_shared_classes(bool, JavaThread*)+0x26f  (metaspaceShared.cpp:599)
V  [libjvm.so+0xb9b381]  DynamicArchive::dump_at_exit(JavaThread*, char const*)+0x101  (dynamicArchive.cpp:546)
V  [libjvm.so+0xe83f07]  before_exit(JavaThread*, bool)+0x97  (java.cpp:446)
V  [libjvm.so+0x17b680f]  Threads::destroy_vm()+0x26f  (threads.cpp:885)
V  [libjvm.so+0xf88bd3]  jni_DestroyJavaVM+0xa3  (jni.cpp:3729)
C  [libjli.so+0x43e2]  JavaMain+0x2c2  (java.c:600)
C  [libjli.so+0x7c59]  ThreadJavaMain+0x9  (java_md.c:650)
;;;","2023-07-28 14:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15077
Date: 2023-07-28 21:20:56 +0000;;;","2023-08-01 13:34;dukebot;Changeset: bf707775
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-08-01 20:31:25 +0000
URL:       https://git.openjdk.org/jdk/commit/bf7077752aa6676b0a5a7f799b6823f38fbd8196
;;;",,,,,,,,,,,,,,,,,,,
(bf) MappedMemoryUtils passes incorrect arguments to msync (aix),JDK-8312180,5105619,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tsteele,tsteele,tsteele,2023-07-17 09:37,2023-08-24 00:22,2023-10-01 09:55,2023-08-18 07:01,,,,,,,22,core-libs,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,"While debugging a failure in TestByteBuffer.java, I noticed that  msync is called on the wrong address and with a too-large length on AIX. These values come from calling force on a memory segment which passes them to the msync procedure on Unix platforms. Before passing the address and length to msync, they are modified wrt pagesize and some internal state.

In my testing, the value returned by the Bits.pageSize() method (called internally in MappedMemoryUtils), is incorrect in the context of msync. I suspect this has to to with Dynamic Variable Page Sizes [1]. The VM is aware of the coarse-grained (eg. 64 KiB) page size, but mappings appear to operate on the fine-grained (eg. 4 KiB) page size returned by sysconf(_SC_PAGE_SIZE) and mentioned specifically in the AIX msync description [2].

Sample values:

- A call to force made with these values: address: 0xA00000007FB2000 index: 0 length: 0x20
- Results in a call to force0 made with these values: address: 0xA00000007FB0000 len: 0x2020

- sysconf(_SC_PAGE_SIZE) returns: 0x1000
- Bits.pageSize() returns: 0x10000 (note the extra zero)

As one might expect, when called with the wrong address and length, the msync procedure call often produces errors depending on which mapping appears at the large page boundary, and how much memory was mapped there.

[1] https://www.ibm.com/docs/en/aix/7.2?topic=support-dynamic-variable-page-size
[2] https://www.ibm.com/docs/en/aix/7.2?topic=m-msync-subroutine",,,,,,,,,,,JDK-8314922,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,"0|i32blv:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-07-17 15:02;tsteele;Hi Alan, I see you changed the title. I don't believe the address size is incorrect. The arguments to msync--address, and length--have the wrong values. If I missed something about the size of the address let me know. For now, I am removing the word size, but keeping the other edits to the title.;;;","2023-07-17 15:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14904
Date: 2023-07-17 17:21:01 +0000;;;","2023-07-20 13:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14963
Date: 2023-07-20 20:19:20 +0000;;;","2023-08-18 07:01;dukebot;Changeset: fdac6a6a
Author:    Tyler Steele <tsteele@openjdk.org>
Date:      2023-08-18 13:58:58 +0000
URL:       https://git.openjdk.org/jdk/commit/fdac6a6ac871366614efe44aca58ab520766b5c8
;;;","2023-08-21 06:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/77
Date: 2023-08-21 13:40:36 +0000;;;","2023-08-22 07:17;tsteele;jdk 21u fix request

This relatively minor change to the way page sizes are reported on AIX is a prerequisite for a fix to TestByteBuffer. The change applied cleanly. The risk is low & testing looks good.;;;",,,,,,,,,,,,,,,,,
missing JVMTI events from vthreads parked during JVMTI attach,JDK-8312174,5105599,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,webbuggrp,webbuggrp,2023-07-17 03:14,2023-09-18 15:22,2023-10-01 09:55,2023-09-11 19:50,21,,,,,,22,hotspot,,0,amazon-interest,capbug,loom,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Ubunu 22.10 x86_64 

openjdk version ""22-ea"" 2024-03-19
OpenJDK Runtime Environment (build 22-ea+6-393)
OpenJDK 64-Bit Server VM (build 22-ea+6-393, mixed mode, sharing)

openjdk version ""21-ea"" 2023-09-19
OpenJDK Runtime Environment (build 21-ea+31-2444)
OpenJDK 64-Bit Server VM (build 21-ea+31-2444, mixed mode, sharing)

commit 81c4e8f916a04582698907291b6505d4484cf9c2
from https://github.com/openjdk/jdk.git

A DESCRIPTION OF THE PROBLEM :
VirtualThreadEnd events are not posted for virtual threads that were parked while an agent was loaded into a running JVM. This also applied to the mount/unmount extension events.

These events are posted for virtual threads that were mounted during attach. In the builds mentioned above, events for mounted vhtreads were incomplete, but with the fix for JDK-8311556, all events seem to be posted for vthreads mounted during attach.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
With the attached sample and JAVA_HOME set to a JDK 21 or 22: 

g++ -std=c++11 -shared -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -fPIC VThreadEventTest.cpp -o libVThreadEventTest.so

$JAVA_HOME/bin/javac VThreadEventTest.java

LD_LIBRARY_PATH=. $JAVA_HOME/bin/java  -Djdk.attach.allowAttachSelf=true -XX:+EnableDynamicAgentLoading VThreadEventTest

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Process exits with 0. 
ACTUAL -
Process exits with 1 and prints  

end: 4 (exp: 17), unmount: 7 (exp: 20), mount: 0 (exp: 13)
unexpected count

for the builds mentioned above and 

end: 7 (exp: 17), unmount: 10 (exp: 20), mount: 3 (exp: 13)
unexpected count

with a build from the repo at the commit mentioned above.

---------- BEGIN SOURCE ----------
-- VThreadEventTest.java ----------------------------------------------------------- 
import com.sun.tools.attach.VirtualMachine;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.LockSupport;

public class VThreadEventTest {
    private static native int getEndCount();
    private static native int getMountCount();
    private static native int getUnmountCount();

    private static volatile boolean attached;

    public static void main(String[] args) throws Exception {
        if (Runtime.getRuntime().availableProcessors() < 8) {
            System.out.println(""WARNING: test expects at least 8 processors."");
        }
        try (ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor()) {
            for (int threadCount = 0; threadCount < 10; threadCount++) {
                executorService.execute(() -> {
                    LockSupport.parkNanos(1_000_000L * 7_000);
                });
            }
            for (int threadCount = 0; threadCount < 4; threadCount++) {
                executorService.execute(() -> {
                    while (!attached) {
                        // keep mounted
                    }
                });
            }
            for (int threadCount = 0; threadCount < 3; threadCount++) {
                executorService.execute(() -> {
                    while (!attached) {
                        // keep mounted
                    }
                    LockSupport.parkNanos(1_000_000L * 100);
                });
            }
            Thread.sleep(2_000);
            VirtualMachine vm = VirtualMachine.attach(String.valueOf(ProcessHandle.current().pid()));
            vm.loadAgentLibrary(""VThreadEventTest"");
            Thread.sleep(500);
            attached = true;
        }
        int endCount = getEndCount();
        int unmountCount = getUnmountCount();
        int mountCount = getMountCount();
        int endExpected = 10 + 4 + 3;
        int unmountExpected = 10 + 4 + 3 * 2;
        int mountExpected = 10 + 3;
        System.out.println(""end: "" + endCount + "" (exp: "" + endExpected + ""), unmount: "" + unmountCount +
                "" (exp: "" + unmountExpected + ""), mount: "" + mountCount + "" (exp: "" + mountExpected + "")"");
        if (endCount != endExpected || unmountCount != unmountExpected || mountCount != mountExpected) {
            System.out.println(""unexpected count"");
            System.exit(1);
        }
    }
}
------------------------------------------------------------------------------------
-- VThreadEventTest.java -----------------------------------------------------------
#include <jvmti.h>
#include <cstring>
#include <mutex>

#ifdef _WIN32
#define VARIADICJNI __cdecl
#else
#define VARIADICJNI JNICALL
#endif

namespace {
    jvmtiEnv *jvmti = nullptr;
    std::mutex lock;
    int endCount = 0;
    int unmountCount = 0;
    int mountCount = 0;

    void checkJvmti(int code, const char* message) {
        if (code != JVMTI_ERROR_NONE) {
            printf(""Error %s: %d\n"", message, code);
            abort();
        }
    }

    void JNICALL vthreadEnd(jvmtiEnv *jvmti_env, JNIEnv* jni_env, jthread virtual_thread) {
        std::lock_guard<std::mutex> lockGuard(lock);
        endCount++;
    }

    void VARIADICJNI vthreadUnmount(jvmtiEnv* jvmti_env, ...) {
        std::lock_guard<std::mutex> lockGuard(lock);
        unmountCount++;
    }

    void VARIADICJNI vthreadMount(jvmtiEnv* jvmti_env, ...) {
        std::lock_guard<std::mutex> lockGuard(lock);
        mountCount++;
    }
}

extern ""C"" JNIEXPORT jint JNICALL Java_VThreadEventTest_getEndCount(JNIEnv* jni_env, jclass clazz) {
    std::lock_guard<std::mutex> lockGuard(lock);
    return endCount;
}

extern ""C"" JNIEXPORT jint JNICALL Java_VThreadEventTest_getMountCount(JNIEnv* jni_env, jclass clazz) {
    std::lock_guard<std::mutex> lockGuard(lock);
    return mountCount;
}

extern ""C"" JNIEXPORT jint JNICALL Java_VThreadEventTest_getUnmountCount(JNIEnv* jni_env, jclass clazz) {
    std::lock_guard<std::mutex> lockGuard(lock);
    return unmountCount;
}

extern ""C"" JNIEXPORT jint JNICALL Agent_OnAttach(JavaVM *vm, char *options, void *reserved) {
    printf(""attached\n"");
    if (vm->GetEnv(reinterpret_cast<void **>(&jvmti), JVMTI_VERSION) != JNI_OK || !jvmti) {
        printf(""Could not initialize JVMTI\n"");
        abort();
    }
    jvmtiCapabilities capabilities;
    memset(&capabilities, 0, sizeof(capabilities));
    capabilities.can_support_virtual_threads = 1;
    checkJvmti(jvmti->AddCapabilities(&capabilities), ""adding capabilities"");

    jvmtiEventCallbacks callbacks;
    memset(&callbacks, 0, sizeof(callbacks));
    callbacks.VirtualThreadEnd = &vthreadEnd;
    checkJvmti(jvmti->SetEventCallbacks(&callbacks, (jint)sizeof(callbacks)), ""setting callbacks"");
    checkJvmti(jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_VIRTUAL_THREAD_END, nullptr), ""enabling vthread end event"");

    jint extensionCount = 0;
    jvmtiExtensionEventInfo* extensions;
    checkJvmti(jvmti->GetExtensionEvents(&extensionCount, &extensions), ""getting extension events"");
    jint unmountIndex = -1;
    jint mountIndex = -1;
    for (int exIndex = 0; exIndex < extensionCount; exIndex++) {
        jvmtiExtensionEventInfo &eventInfo = extensions[exIndex];
        if (strcmp(eventInfo.id, ""com.sun.hotspot.events.VirtualThreadUnmount"") == 0) {
            unmountIndex = eventInfo.extension_event_index;
        } else if (strcmp(eventInfo.id, ""com.sun.hotspot.events.VirtualThreadMount"") == 0) {
            mountIndex = eventInfo.extension_event_index;
        }
    }
    if (unmountIndex == -1 || mountIndex == -1) {
        printf(""extension events not found."");
        abort();
    }
    checkJvmti(jvmti->SetExtensionEventCallback(unmountIndex, vthreadUnmount), ""setting extension callback"");
    checkJvmti(jvmti->SetEventNotificationMode(JVMTI_ENABLE, static_cast<jvmtiEvent>(unmountIndex), nullptr), ""enabling extension event"");
    checkJvmti(jvmti->SetExtensionEventCallback(mountIndex, vthreadMount), ""setting extension callback"");
    checkJvmti(jvmti->SetEventNotificationMode(JVMTI_ENABLE, static_cast<jvmtiEvent>(mountIndex), nullptr), ""enabling extension event"");

    printf(""vthread events enabled\n"");
    return JVMTI_ERROR_NONE;
}
------------------------------------------------------------------------------------

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316283,JDK-8316250,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32bhf:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-08-29 03:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15467
Date: 2023-08-29 10:09:21 +0000;;;","2023-09-11 19:50;dukebot;Changeset: fda142ff
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2023-09-12 02:46:47 +0000
URL:       https://git.openjdk.org/jdk/commit/fda142ff6cfefa12ec1ea4d4eb48b3c1b285bc04
;;;",,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Fix oop array element alignment,JDK-8312171,5105605,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-07-17 03:59,2023-07-17 07:11,2023-10-01 09:55,2023-07-17 07:11,repo-lilliput-17,,,,,,,hotspot,,0,amazon-interest,lilliput,,,,,,,,,,,,,,,,"When running with -COOPS, oop array elements need to be 8-byte-aligned. We have this correct in runtime, but not in the SA. Notably, the problem manifests with ZGC.",,,,,,,,,,JDK-8310010,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32bir:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-07-17 04:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/53
Date: 2023-07-17 11:07:50 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
(dc) DatagramChannel's socket adaptor does not release carrier thread when blocking in receive,JDK-8312166,5105597,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alanb,alanb,alanb,2023-07-17 03:03,2023-09-15 11:44,2023-10-01 09:55,2023-07-19 06:19,21,22,,,,,22,core-libs,,0,amazon-interest,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,loom,noreg-hard,,,,,,,,,,,,"DatagramChannel is virtual thread friendly, meaning the underlying carrier thread is released when a virtual thread blocks in receive or read.

DatagramChannel's socket adaptor (used by DatagramSocket) is not currently virtual thread friendly. The original changes proposed to address this in JDK 19 had issues where the underlying temporary direct buffer was being allocated from one carrier, and returned to the buffer cace of a different carrier. It was a performance rather than a correctness issue so we decided to not include this change. This issue needs to re-visited.


",,,,,,,,,,,JDK-8316377,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32bgz:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-07-17 03:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14901
Date: 2023-07-17 10:10:20 +0000;;;","2023-07-19 06:19;dukebot;Changeset: 028068a6
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-07-19 13:17:37 +0000
URL:       https://git.openjdk.org/jdk/commit/028068a655bb08e016e7a915c2b2f6abc1e480a0
;;;","2023-09-15 11:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/167
Date: 2023-09-15 18:32:44 +0000;;;",,,,,,,,,,,,,,,,,,,,
Fix typos in java.desktop Swing,JDK-8312165,5105596,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2023-07-17 02:41,2023-09-20 22:22,2023-10-01 09:55,2023-09-15 02:21,11,17,21,22,,,22,client-libs,,0,swing,,,,,,,,,,,,,,,,,"Found many typos in java.desktop by IDEA's inspection Proofreading | Typo",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316556,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32bgr:",9223372036854775807,b16,,,,,,,,,,,"2023-07-17 02:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14847
Date: 2023-07-12 08:33:30 +0000;;;","2023-09-15 02:21;dukebot;Changeset: 89cb290b
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2023-09-15 09:18:28 +0000
URL:       https://git.openjdk.org/jdk/commit/89cb290bb0b3947126d836789f0f68a6b98215cd
;;;",,,,,,,,,,,,,,,,,,,,,
"Refactor Arrays.hashCode for long, boolean, double, float, and Object arrays",JDK-8312164,5105595,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-07-17 02:29,2023-07-24 17:24,2023-10-01 09:55,2023-07-19 10:22,22,,,,,,22,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,Refactor by using utility methods.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312424,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32bgj:",9223372036854775807,b07,,,,,,,,,,,"2023-07-17 02:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14900
Date: 2023-07-17 09:36:35 +0000;;;","2023-07-19 10:22;dukebot;Changeset: b5b6f4e7
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-07-19 17:21:19 +0000
URL:       https://git.openjdk.org/jdk/commit/b5b6f4e7a77db4d13e19e186d3cd402cd7c626ea
;;;",,,,,,,,,,,,,,,,,,,,,
Crash in dominance check when compiling unnamed patterns,JDK-8312163,5105594,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abimpoudis,abimpoudis,abimpoudis,2023-07-17 02:23,2023-07-25 05:13,2023-10-01 09:55,2023-07-19 00:39,,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,,"public class Bug {
    sealed interface A permits B {}
    record B() implements A {}

    record Rec(A a, A b) {}

    public void test(Rec r)
    {
        switch (r) {
            case Rec(_, B()): break;
            case Rec(_, _):
        }
    }
}

produces:

An exception has occurred in the compiler (22-internal). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError: Unknown pattern: ANYPATTERN
	at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:162)
	at jdk.compiler/com.sun.tools.javac.comp.Check.patternDominated(Check.java:4759)
	at jdk.compiler/com.sun.tools.javac.comp.Check.patternDominated(Check.java:4748)
	at jdk.compiler/com.sun.tools.javac.comp.Check.checkSwitchCaseLabelDominated(Check.java:4703)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.handleSwitch(Attr.java:1854)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.visitSwitch(Attr.java:1605)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitch.accept(JCTree.java:1299)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:662)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:736)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:755)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1439)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1092)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:662)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:736)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.visitMethodDef(Attr.java:1229)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:916)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:662)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:736)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:5648)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5536)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5360)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:5299)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1365)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:978)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:319)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:178)
	at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:66)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:52)
printing javac parameters to: /Users/bibou/dev/jdk/build/macosx-aarch64-server-release/JTwork/scratch/javac.20230717_112156.args
result: Error. compiler crashed (exit code 4)",,,,,,,,,,,JDK-8312230,JDK-8312954,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32bgb:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-07-17 15:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14912
Date: 2023-07-17 21:57:07 +0000;;;","2023-07-18 05:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/134
Date: 2023-07-18 12:07:18 +0000;;;","2023-07-19 00:39;dukebot;Changeset: 48760d7a
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-07-19 07:37:21 +0000
URL:       https://git.openjdk.org/jdk21/commit/48760d7a044560dea6eeaca675ed27b5096cadd8
;;;",,,,,,,,,,,,,,,,,,,,
Renderperf test: Framework throws exception for some tests with large object count,JDK-8312149,5105579,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kpk,kpk,kpk,2023-07-16 23:47,2023-09-20 02:22,2023-10-01 09:55,2023-09-14 23:47,internal,,,,,,internal,javafx,,0,noreg-self,sn_152,testbug,,,,,,,,,,,,,,,"RenderPerf test framework throws following exception on running certain tests with higher object count.
java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at renderperf.RenderPerfTest.main(RenderPerfTest.java:1192)
Caused by: java.lang.RuntimeException: Timeout waiting for test execution completion.
	at renderperf.RenderPerfTest$PerfMeter.exec(RenderPerfTest.java:972)
	at renderperf.RenderPerfTest.testButton(RenderPerfTest.java:1096)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)

This exception can be observed with LargeText and LargeColorText tests with object count more than 10000 in metal pipeline and 30000 in OpenGL",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32bcz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-09-14 23:47;kpk;Made changes to handle the exception and show error message.;;;","2023-09-14 23:47;kpk;Changeset: d5c30410
Author:    Karthik P K <kpk@openjdk.org>
Date:      2023-09-15 12:10:58 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/d5c30410a988ced52b67c123c568e2f23cb4da4f;;;",,,,,,,,,,,,,,,,,,,,,
jcmd VM.metaspace vslist has no newline character before the Class: label.,JDK-8312138,5105568,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,phh,kyukihiro,kyukihiro,2023-07-16 22:41,2023-08-02 04:07,2023-10-01 09:55,2023-07-18 06:12,11,,,,,,11.0.21,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,"jcmd VM.metaspace vslist prints :

Virtual space lists:
   Non-Class:
1 nodes, current node: 0x00007ff78009a360

node @0x00007ff78009a360: reserved=8.00 MB, committed=4.25 MB ( 53%), used=4.19 MB ( 52%)
   [0x00007ff760990000, 0x00007ff760dc0000, 0x00007ff760dd0000, 0x00007ff761190000)       Class:
1 nodes, current node: 0x00007ff78009a160

node @0x00007ff78009a160: reserved=1.00 GB, committed=512.00 KB ( <1%), used=398.00 KB ( <1%)
   [0x0000000100000000, 0x0000000100063800, 0x0000000100080000, 0x0000000140000000)

There is no newline charaster before the ""Class:"" label.
The logs are not easy to read and users can misread the useful logs.
","Intel(R) Xeon(R) Platinum 8358P CPU 2.60GHz, 4 core, 8GB Memory
Red Hat Enterprise Linux release 8.6",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32baj:",9223372036854775807,b01,,,,,,,,,,,"2023-07-16 23:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2043
Date: 2023-07-17 05:58:45 +0000;;;","2023-07-17 22:56;kyukihiro;Fix Request 11u
I would like to fix this issue because the logs are not easy to read and users can misread the useful logs.
There is no risk, because the fix is just adding a newline character and it's not complicated.
Testing:
  hotspot_all, a specific test to confirm the fix.;;;","2023-07-18 06:12;dukebot;Changeset: f8d6c54b
Author:    Kimura Yukihiro <kimura.yukihiro@jp.fujitsu.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-07-18 13:09:48 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/f8d6c54babc6af846607b6e8fe826de7e8c387d3
;;;","2023-08-02 04:07;dukebot;Changeset: f8d6c54b
Author:    Kimura Yukihiro <kimura.yukihiro@jp.fujitsu.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-07-18 13:09:48 +0000
URL:       https://git.openjdk.org/jdk11u/commit/f8d6c54babc6af846607b6e8fe826de7e8c387d3
;;;",,,,,,,,,,,,,,,,,,,
FileDescriptor.sync should temporarily increase parallelism,JDK-8312127,5105545,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2023-07-15 06:52,2023-08-15 00:02,2023-10-01 09:55,2023-07-17 22:16,21,22,,,,,22,core-libs,,0,amazon-interest,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,If FileDescriptor.sync is called from a virtual thread then it will capture the carrier for the duration of the fsync/equivalent. It should temporarily bump up parallelism as is done with other file ops.,,,,,,,,,,,JDK-8314254,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314120,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32b5f:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2023-07-17 08:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14893
Date: 2023-07-15 13:54:46 +0000;;;","2023-07-17 22:16;dukebot;Changeset: fbe51e38
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-07-18 05:13:14 +0000
URL:       https://git.openjdk.org/jdk/commit/fbe51e388d8a7475f162f10aa788a6d37ec4c6d8
;;;","2023-08-10 09:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/52
Date: 2023-08-10 16:06:10 +0000;;;","2023-08-11 00:54;shade;Fix Request (21u)

Improves virtual thread performance around FD.sync calls. Important for Loom adoption. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,
NullPointerException in CertStore.getCRLs after 8297955,JDK-8312126,5105540,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mullan,mbalao,mbalao,2023-07-15 00:59,2023-09-20 22:22,2023-10-01 09:55,2023-09-15 06:14,11.0.21,17.0.8,21,,,,22,security-libs,,0,amazon-interest,regression,,,,,,,,,,,,,,,,"After 8297955 a CRL selector whose IssuerNames contains the value ""null"" (invalid) makes CertStore.getCRLs to throw a NullPointerException. Previous to 8297955, this same selector threw a CertStoreException when passed to CertStore.getCRLs.

A CertStoreException looks more aligned to the CertStore.getCRLs API documentation: ""@throws CertStoreException if an exception occurs"".

The underlying reason is that after 8297955 the LDAPRequest constructor passes the received ""name"" to the LdapName constructor. The LdapName constructor expects this value to be non-null. Thus, it does not throw an InvalidNameException —which the LDAPRequest constructor would have turned into a CertStoreException— and tries to get the length of the name, which ends in a NullPointerException. The LDAPRequest constructor does not handle the NullPointerException so it bubbles up to the caller.

Before 8297955, the LDAPRequest constructor called ""checkName"" which, in the event of a null name, explicitly threw a CertStoreException.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297955,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32b4b:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-07-17 07:21;mullan;[~mbalao] I looked into this more and I don't think it is a bug, at least not in the way it is described. The JDK LDAPCertStore implementation never passes null to LDAPRequest(String). If the selector contains a null issuerNames field, it will throw a CertStoreException prior to calling LDAPRequest(String):

https://github.com/openjdk/jdk/blob/3fb9d117e353af6f007e701a8cd635763bd3cc28/src/java.naming/share/classes/sun/security/provider/certpath/ldap/LDAPCertStoreImpl.java#L767

Let me know if I missed a code path that you are seeing where the name could be null.;;;","2023-07-19 22:32;mbalao;Hi Sean,

Thanks for having a look at this.

This is the call stack that I saw in our internal test:

java.lang.NullPointerException: Cannot invoke ""String.length()"" because ""name"" is null
	at java.naming/javax.naming.ldap.Rfc2253Parser.<init>(Rfc2253Parser.java:48)
	at java.naming/javax.naming.ldap.LdapName.parse(LdapName.java:806)
	at java.naming/javax.naming.ldap.LdapName.<init>(LdapName.java:125)
	at java.naming/sun.security.provider.certpath.ldap.LDAPCertStoreImpl$LDAPRequest.<init>(LDAPCertStoreImpl.java:231)
	at java.naming/sun.security.provider.certpath.ldap.LDAPCertStoreImpl.getCRLs(LDAPCertStoreImpl.java:788)
	at java.naming/sun.security.provider.certpath.ldap.LDAPCertStore.engineGetCRLs(LDAPCertStore.java:293)

While our test invokes an internal API directly (and I omitted that part of the call stack), I think that the missing bit for a public API invocation is java.security.cert.CertStore::getCRLs because this function invokes engineGetCRLs on a CertStoreSpi, and LDAPCertStore is a CertStoreSpi.

Looking at the code that you pointed out and trying to explain the difference in observed behavior, I wonder if it's possible that issuerNames has a non-null value but issuerName obtained either here [1] or here [2] can have a null one.

--
[1] - https://github.com/openjdk/jdk/blob/3fb9d117e353af6f007e701a8cd635763bd3cc28/src/java.naming/share/classes/sun/security/provider/certpath/ldap/LDAPCertStoreImpl.java#L778
[2] - https://github.com/openjdk/jdk/blob/3fb9d117e353af6f007e701a8cd635763bd3cc28/src/java.naming/share/classes/sun/security/provider/certpath/ldap/LDAPCertStoreImpl.java#L783;;;","2023-07-21 12:08;mullan;[~mbalao] Ok, I see the distinction and how you can call the getCRLs() of an LDAP CertStore to avoid the code paths I mentioned earlier. 

For the first case, X500Principal.getName should never return null - if it does I think it is a bug. 

For the second case, I guess you are passing a Collection that has a null element to X509CRLSelector.setIssuerNames?

IMO, a better fix is for the code here to do an ""instanceof String"" check before casting it to String and if that is false, ignore it instead of passing it to LDAPRequest: 

https://github.com/openjdk/jdk/blob/3fb9d117e353af6f007e701a8cd635763bd3cc28/src/java.naming/share/classes/sun/security/provider/certpath/ldap/LDAPCertStoreImpl.java#L783
;;;","2023-09-14 08:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15745
Date: 2023-09-14 14:59:07 +0000;;;","2023-09-15 06:06;mullan;A null issuerName would normally be rejected earlier by X509CRLSelector.setIssuerNames. However, X509CRLSelector is not final, so it is still important for the LDAPCertStore to be coded defensively and check for nulls to protect against X509CRLSelector subclasses that might skip this check.;;;","2023-09-15 06:14;dukebot;Changeset: 3c743cfe
Author:    Sean Mullan <mullan@openjdk.org>
Date:      2023-09-15 13:12:15 +0000
URL:       https://git.openjdk.org/jdk/commit/3c743cfea00692d0b938cb1cbde936084eecf369
;;;",,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Reinstate use of BiasedLockingCounters,JDK-8312095,5105498,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-07-14 05:06,2023-07-14 10:04,2023-10-01 09:55,2023-07-14 10:04,repo-lilliput-17,,,,,,repo-lilliput-17,hotspot,,0,lilliput,,,,,,,,,,,,,,,,,In x86_64.ad we accidentally dropped _counters to NULL in a fast_lock() call. This means we're not counting BiasedLocking calls correctly. Let's fix that. It is only relevant in 17 because biased locking has been removed in later release.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,generic,,,,,"0|i32auz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-14 05:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/52
Date: 2023-07-14 12:08:54 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Incorrect javadoc comment text,JDK-8312093,5105496,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2023-07-14 04:54,2023-07-25 04:44,2023-10-01 09:55,2023-07-16 23:46,21,,,,,,22,tools,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"Consider code like:
```
public class Test {
    /***/
    void main() {
    }
}
```

When looking at the javadoc comment ('/***/`) through Trees.getDocComment, '/' is returned, which then gets passed to the DocCommentTree and creates confusions with positions.
",,,,,,,,,,,JDK-8312094,JDK-8312923,,,,,,,,,,,,,,,,,,,,,,JDK-8305100,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32auj:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-07-14 08:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14890
Date: 2023-07-14 15:00:37 +0000;;;","2023-07-16 23:46;dukebot;Changeset: 1c9691b1
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-07-17 06:43:16 +0000
URL:       https://git.openjdk.org/jdk/commit/1c9691b1f762812aa090b88507d60a2e2e5f4933
;;;","2023-07-17 02:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/132
Date: 2023-07-17 09:38:46 +0000;;;",,,,,,,,,,,,,,,,,,,,
Assertion in Ensemble8->3D Cubes demo when metal API validation is enabled,JDK-8312083,5105485,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,aghaisas,aghaisas,2023-07-14 02:51,2023-07-17 09:42,2023-10-01 09:55,2023-07-16 21:55,internal,,,,,,internal,javafx,,0,3d,javafx-metal,sn_148,,,,,,,,,,,,,,,"Enable Metal API validation and metal shader validation on terminal:
export METAL_DEVICE_WRAPPER_TYPE=1
export MTL_SHADER_VALIDATION=1 

Launch Ensemble8 app using metal rendering pipeline.

Select -
3D Cubes or 3D Box demo.

It results in an assertion:

 Metal API Validation Enabled
-[MTLDebugBlitCommandEncoder generateMipmapsForTexture:]:1115: failed assertion `Generate Mipmaps For Texture Validation
[tex mipmapLevelCount](1) must be > 1.
'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271024,,,,,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,,"0|i32as3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-07-16 20:48;jdv;I am able to reproduce this assertion in M1 machine also.
We are creating a dummy 1x1 diffuse map when we have only diffuse color in the material, looks like we are generating mipmaps for this 1x1 texture also and it is causing this assertion.;;;","2023-07-16 21:55;jdv;Changeset: 47ea3134
Author:    Jayathirth Rao D V <jayathirth.d.v@oracle.com>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2023-07-17 10:17:02 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/47ea3134f80b726667ef2e9929778d3ce9d5ae75;;;",,,,,,,,,,,,,,,,,,,,,
12.1.4: Typo in non-normative text explaining candidate main methods,JDK-8312082,5105484,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbierman,gbierman,gbierman,2023-07-14 02:28,2023-07-25 04:53,2023-10-01 09:55,2023-07-14 11:54,,,,,,,22,specification,,0,hgupdate-sync,noreg-doc,,,,,,,,,,,,,,,,"In 12.1.4 there is non-normative text explaining how this preview feature increases the number of methods that are considered a *candidate* for execution. It correctly observes there are 12 basic forms:

1-3: {public, protected, package} void main()
4-6: {public, protected, package} void main(String[])
7-9: {public, protected, package} static void main()
10-12: {public, protected, package} static void main(String[])

It then *erroneously* claims that supporting `String...` as an alternative for `String[]` doubles this number to 24. It doesn't; it increases the number by 6 to 18.",,,,,,,,,,,JDK-8312244,JDK-8312943,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32arv:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7441ef8d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[PPC] JcmdScale.java Failing on AIX,JDK-8312078,5105481,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dkumari,dkumari,dkumari,2023-07-14 01:22,2023-08-10 06:06,2023-10-01 09:55,2023-08-02 07:40,22,,,,,,22,hotspot,,0,nmt,,,,,,,,,,,,,,,,,"runtime/NMT/JcmdScale.java failed with: java.lang.RuntimeException: 'Incorrect scale value: (null)' missing from stdout/stderr on AIX

----------System.err:(18/876)----------
 stdout: [14024992:
Incorrect scale value:
];
 stderr: []
 exitValue = 0

java.lang.RuntimeException: 'Incorrect scale value: (null)' missing from stdout/stderr

        at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
        at JcmdScale.main(JcmdScale.java:83)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:580)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
        at java.base/java.lang.Thread.run(Thread.java:1570)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,aix,,,,,"0|i32ar7:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-19 02:53;amitkumar;Does it make sense to update title as “[PPC]Testname failing on AIX” , and the log which is present in current title could be moved to the description section?;;;","2023-07-24 02:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14935
Date: 2023-07-19 13:41:38 +0000;;;","2023-08-02 07:40;dukebot;Changeset: c1a3f143
Author:    Deepa Kumari <dpakri181@gmail.com>
Committer: Tyler Steele <tsteele@openjdk.org>
Date:      2023-08-02 14:39:33 +0000
URL:       https://git.openjdk.org/jdk/commit/c1a3f143bf881dac6d6e517293c79a68129c6f5a
;;;",,,,,,,,,,,,,,,,,,,,
FileChooser.win32.newFolder is not updated when changing Locale,JDK-8312075,5105226,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tr,pnarayanaswa,pnarayanaswa,2023-07-11 03:28,2023-09-13 22:40,2023-10-01 09:55,2023-09-07 21:27,11,17,20,21,8,,22,client-libs,,0,dcspn,reproducer-yes,sn_149,sn_150,sn_151,sn_152,webbug,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Operating System Details
System Windows 11 Pro, build 23486.1000

Java SE Version
Version ""20.0.1""

A DESCRIPTION OF THE PROBLEM :
Detailed Description of the Problem
1) To see the result you must click above in the window, on the middle button.
2) Entering without any identification, we can change the country, simply ""New Folder"" remains constant.
3) Entering the identification ""fr"" we can still change the country; however the identification remains ""Nouveau dossier"".

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Steps to Reproduce
Run the application in source code

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Expected Result
The translation of ""New Folder"" may vary by country.
ACTUAL -
Actual Result
The translation of ""New Folder"" always remains constant.

---------- BEGIN SOURCE ----------
File ""JFileChooserTest.java""
package fileChooser;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Locale;
import java.util.ResourceBundle;

import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.UIManager;

public class JFileChooserTest extends JFrame implements ItemListener {
	private static final long serialVersionUID = 1L;
	
	private JComboBox<String> selectedString;
	private ResourceBundle res;
	
	public static void main(String[] args) throws Exception {
		UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		new JFileChooserTest(args.length == 0 ? """" : args[0]);
    }
	
	private void onLocaleChange(String locale) {
		res = ResourceBundle.getBundle(""fileChooser.bundle"", new Locale(locale));
		
		UIManager.put(""FileChooser.acceptAllFileFilterText"", res.getString(""accept_all""));
		UIManager.put(""FileChooser.directoryOpenButtonText"", res.getString(""open_text""));
		UIManager.put(""FileChooser.openButtonText"", res.getString(""open_text""));
		UIManager.put(""FileChooser.saveButtonText"", res.getString(""save_text""));
		UIManager.put(""FileChooser.cancelButtonText"", res.getString(""cancel_text""));
		UIManager.put(""FileChooser.lookInLabelText"", res.getString(""file_look""));
		UIManager.put(""FileChooser.saveInLabelText"", res.getString(""file_save""));
		UIManager.put(""FileChooser.fileNameLabelText"", res.getString(""file_name""));
		UIManager.put(""FileChooser.filesOfTypeLabelText"", res.getString(""file_type""));
		UIManager.put(""FileChooser.win32.newFolder"", res.getString(""new_folder""));
		UIManager.put(""FileChooser.win32.newFolder.subsequent"", res.getString(""new_folder"") + "" ({0})"");
	}

	public JFileChooserTest(String selected) {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLayout(new FlowLayout());
		onLocaleChange(selected);
		
		add(new JLabel(""Language:""));
		add(selectedString = new JComboBox<String>(new String[] {""en"", ""fr""}));
		selectedString.setSelectedIndex(selected.equals(""fr"") ? 1 : 0);
		selectedString.addItemListener(this);
		
		add(new JButton(new AbstractAction(""Push me to open a file chooser"") {
			private static final long serialVersionUID = 1L;
			@Override
			public void actionPerformed(ActionEvent e) {
				JFileChooser chooser = new JFileChooser();
				chooser.setDialogTitle(res.getString(""open_text""));
				chooser.showOpenDialog(null);
			}
		}));

		setSize(340, 240);
		setVisible(true);
	}
	
	@Override
	public void itemStateChanged(ItemEvent e) {
		if (e.getSource() == selectedString) {
			onLocaleChange((String)selectedString.getSelectedItem());
		}
	}
}

File ""bundle_fr.properties""
accept_all = Tous les fichiers
accept_disk = Image disque
open_text = Ouvrir
save_text = Sauvegarder
cancel_text = Annuler
file_look = Regarder dans :
file_save = Sauver dans :
file_name = Nom du fichier :
file_type = Type :
new_folder = Nouveau dossier

File ""bundle.properties""
accept_all = All Files
accept_disk = Disk Image
open_text = Open
save_text = Save
cancel_text = Cancel
file_look = Look in:
file_save = Save in:
file_name = File name:
file_type = Files of type:
new_folder = New Folder

---------- END SOURCE ----------

FREQUENCY : always",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-07-14 00:16;pnarayanaswa;JFileChooserTest.java;https://bugs.openjdk.org/secure/attachment/104605/JFileChooserTest.java","2023-07-14 00:16;pnarayanaswa;bundle.properties;https://bugs.openjdk.org/secure/attachment/104603/bundle.properties","2023-07-14 00:16;pnarayanaswa;bundle_fr.properties;https://bugs.openjdk.org/secure/attachment/104604/bundle_fr.properties",,,,,x86_64,,,,,,,,,,windows,,,,,"0|i3296j:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-07-14 00:17;pnarayanaswa;Checked with attached testcase, Issue is reproducible, on change of locale other properties are changed, the new_folder is not changing
Test Result
=========
8: Fail
jdk11: Fail
jdk17: Fail
jdk20: Fail
jdk21ea : Fail

;;;","2023-07-28 04:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15069
Date: 2023-07-28 10:56:47 +0000;;;","2023-08-04 05:28;aivanov;If I run SwingSet2 in German, the buttons and folder name get translated to German as expected.

java -Duser.language=de -Duser.country=DE -jar ./build/SwingSet2.jar

SwingSet2 doesn't seem to have French localisation.
Does it not work automatically if you add a resource bundle?;;;","2023-08-04 13:17;aivanov;By the way, Java 8 has French resources for JFileChooser:

java -Duser.language=fr -Duser.country=FR -jar ./build/SwingSet2.jar

If you open JFileChooser, its interface is in French, the New Folder button displays ""Crée un dossier"", the folder created is named ""Nouveau dossier"".;;;","2023-08-04 14:35;prr;Right, So SwingSet may not be the best thing to use to compare French and German.
Definitely the main-line version of SwingSet2 only has German

jar tf SwingSet2.jar|grep propert
resources/swingset.properties
resources/swingset_de.properties
resources/swingset_ja.properties
resources/swingset_zh_CN.properties

But so far as I can see the JDK sources have French and German support for the L&Fs and both are built
the output below is on Mac so it doesn't show the Win L&F but I see no reason they wouldn't be copied
and the sources for the localisation properties files for FR and DE look to support all the same messages

cd build/macosx-x86_64-server-release/jdk/modules/java.desktop

% find . -name '*_fr.class'
./sun/print/resources/serviceui_fr.class
./sun/awt/resources/awt_fr.class
./com/apple/laf/resources/aqua_fr.class
./com/sun/swing/internal/plaf/metal/resources/metal_fr.class
./com/sun/swing/internal/plaf/basic/resources/basic_fr.class
./com/sun/swing/internal/plaf/synth/resources/synth_fr.class
./com/sun/java/swing/plaf/motif/resources/motif_fr.class
./com/sun/accessibility/internal/resources/accessibility_fr.class
;;;","2023-08-08 22:46;tr;As per my understanding, the issue is w.r.t change in locale during application run time. When user switch from English to French Locale (In this test, using property file), all other component text labels are updated with French locale except New Folder.;;;","2023-09-07 21:27;dukebot;Changeset: 3a00ec86
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-09-08 04:26:14 +0000
URL:       https://git.openjdk.org/jdk/commit/3a00ec863904abd09ddcdc4b6dcf1147c52e0aae
;;;",,,,,,,,,,,,,,,,
Deprecate for removal the -Xnoagent option,JDK-8312072,5105474,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2023-07-14 00:03,2023-07-24 17:16,2023-10-01 09:55,2023-07-17 22:42,,,,,,,22,hotspot,,0,release-note=yes,,,,,,,,,,,,,,,,,"java command currently allows -Xnoagent to be passed. This option has been ignored for many releases and doesn't provide any functionality. 

This option should be marked as deprecated for removal. A warning log will be printed noting this deprecation.

In a future release the option should be removed and the java launcher will fail with an error if this option is passed.",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312073,,,,,,,,,,,,JDK-8312150,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32apn:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-14 00:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14882
Date: 2023-07-14 07:34:03 +0000;;;","2023-07-16 19:49;dholmes;[~jpai] please also file the enhancement request to actually do the removal in JDK 23. Thanks.;;;","2023-07-16 23:52;jpai;I've now created https://bugs.openjdk.org/browse/JDK-8312150 for the actual removal.;;;","2023-07-17 22:42;dukebot;Changeset: 8ec136e6
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2023-07-18 05:41:37 +0000
URL:       https://git.openjdk.org/jdk/commit/8ec136e6f0fa684255274181d09c86251ef5428f
;;;",,,,,,,,,,,,,,,,,,,
Socket.connect does not timeout when profiling,JDK-8312065,5105465,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yyang,apangin,apangin,2023-07-13 19:06,2023-09-15 08:07,2023-10-01 09:55,2023-09-15 08:05,11,17,8,,,,17.0.10,core-libs,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"The issue was originally reported at https://github.com/async-profiler/async-profiler/issues/769

When the wall clock profiler is enabled, `Socket.connect(address, timeout)` does not return after timeout elapses. This happens, because the poll() syscall is repeatedly restarted due to EINTR, but the timeout argument is not adjusted.

I have reproduced the bug in pure Java without a profiler, see attached SocketTimeoutBug.java

The issue happens on JDK 8 and JDK 11. JDK 13 switched the JDK to a new SocketImpl that doesn't have this issue. The old SocketImpl is still present in JDK 17 so it can be duplicated when running with -Djdk.net.usePlainSocketImpl.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-07-13 19:06;apangin;SocketTimeoutBug.java;https://bugs.openjdk.org/secure/attachment/104602/SocketTimeoutBug.java",,,,,,,generic,,,,,,,,,,linux,,,,,"0|i32ann:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-07-13 19:19;apangin;socketConnect implementation in PlainSocketImpl calls NET_Poll() to wait until connection is established or timeout elapses: https://github.com/openjdk/jdk11u/blob/d286dded5f7714d54fe57b999a5553653d45218b/src/java.base/unix/native/libnet/PlainSocketImpl.c#L348

socketConnect() calls NET_Poll() in a loop, checks for EINTR and decrements timeout as needed. However, the issue is that NET_Poll() itself is implemented as a macro that automatically restarts poll() with the same arguments in case of EINTR: https://github.com/openjdk/jdk11u/blob/d286dded5f7714d54fe57b999a5553653d45218b/src/java.base/linux/native/libnet/linux_close.c#L398-L400

All callers of NET_Poll() already check for EINTR, so the fix is to remove do-while loop in the implementation of NET_Poll().;;;","2023-07-13 20:10;yyang;Comment on behalf of the original reporter Long Yang. Do you mind if he takes over this bug?;;;","2023-07-14 05:14;apangin;Yi Yang, if you wish. Please update 'Assignee' field accordingly.;;;","2023-08-03 20:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1639
Date: 2023-08-04 03:02:00 +0000;;;","2023-09-06 08:28;phh;Removed jdk17-fix-request (should be jdk17u-fix-request), PR still under review.;;;","2023-09-13 05:25;roboduke;[jdk17u-fix-request] Approval Request from Long Yang
I would like to fix this issue. 
This problem can be reproduced using pure Java code, or it can be reproduced by sending signal from an external profiling tool. If triggered, it may cause the thread to block abnormally. 
Low risk: The repair is clear，do not perform redundant loop retries for NET_Poll. Existing tests have proven that it does not affect the original functions, and a dedicated test for this issue has been added.
Testing: All GHA tests are passed. I ran all the jtreg tests (test/jdk/java/net/ServerSocket,test/jdk/java/net/Socket,test/jdk/java/net/SocketOption,test/jdk/java/net/ipv6) related to jdk.net.usePlainSocketImpl on my host, all passed. I've also added a test for this issue, the unfixed JDK fails, the fixed version passes.;;;","2023-09-15 08:05;dukebot;Changeset: 1ce12c4f
Author:    Long Yang <yanglongplus@hotmail.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-09-15 15:03:39 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/1ce12c4f33d3d6905703d95df2574f4037dfd57d
;;;",,,,,,,,,,,,,,,,
Simplify and modernize java.util.BitSet.equals,JDK-8312019,5105405,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-07-13 03:21,2023-07-27 10:49,2023-10-01 09:55,2023-07-20 06:56,22,,,,,,22,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32aab:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2023-07-13 03:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14868
Date: 2023-07-13 10:50:30 +0000;;;","2023-07-20 06:56;dukebot;Changeset: 9fa944e6
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-07-20 13:54:45 +0000
URL:       https://git.openjdk.org/jdk/commit/9fa944e63f7bec76eab21f85cc5109ed7419a0ab
;;;",,,,,,,,,,,,,,,,,,,,,
[s390x] TestSigInfoInHsErrFile.java Failure,JDK-8312014,5105400,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amitkumar,amitkumar,amitkumar,2023-07-13 01:25,2023-07-24 17:25,2023-10-01 09:55,2023-07-19 11:50,22,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,"Recently TestSigInfoInHsErrFile.java started failing on s390x architecture. It checks for a regex pattern:
patterns.add(Pattern.compile(""siginfo: si_signo: \\d+ \\(SIGSEGV\\), si_code: \\d+ \\(SEGV_.*\\), si_addr: "" + crashAddress + "".*""));

But the string is: siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000000

si_addr is not matching with regex required si_addr format.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s390x,,,,,,,,,,linux,,,,,"0|i32a97:",9223372036854775807,b07,,,,,,,,,,,"2023-07-14 05:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14888
Date: 2023-07-14 12:44:03 +0000;;;","2023-07-19 11:50;dukebot;Changeset: 6f662130
Author:    Sidraya <sidraya.jayagond@ibm.com>
Committer: Tyler Steele <tsteele@openjdk.org>
Date:      2023-07-19 18:49:24 +0000
URL:       https://git.openjdk.org/jdk/commit/6f6621303ad54a7dfd880c9472a387706a4466ff
;;;",,,,,,,,,,,,,,,,,,,,,
avoid UnixConstants.java.template  warning: '__linux__' is not defined  on AIX,JDK-8312013,5105399,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-07-13 01:05,2023-07-19 21:19,2023-10-01 09:55,2023-07-13 07:05,21,22,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,"We run into this build warning on AIX :
/jdk/src/java.base/unix/classes/sun/nio/fs/UnixConstants.java.template:127:7: warning: '__linux__' is not defined, evaluates to 0 [-Wundef]
#elif __linux__
1 warning generated.

Looks like the preprocessor check should be adjusted, because the macro is not present on non-Linux systems.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32a8z:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-07-13 02:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14864
Date: 2023-07-13 09:19:42 +0000;;;","2023-07-13 07:05;dukebot;Changeset: b587fc51
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-07-13 14:02:52 +0000
URL:       https://git.openjdk.org/jdk/commit/b587fc51a8bde2794f929b43af79fa7be00c9081
;;;",,,,,,,,,,,,,,,,,,,,,
Test java/lang/Thread/virtual/JfrEvents::testVirtualThreadPinned failed,JDK-8311992,5105380,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,dholmes,dholmes,2023-07-12 21:58,2023-08-02 16:04,2023-10-01 09:55,2023-07-14 09:03,21,,,,,,22,core-libs,,0,noreg-self,tier5,,,,,,,,,,,,,,,,"STARTED    JfrEvents::testVirtualThreadPinned 'testVirtualThreadPinned()'
org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:180)
	at JfrEvents.testVirtualThreadPinned(JfrEvents.java:120)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32a4r:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-07-12 22:29;alanb;The sleep(1) in the synchronized block is the issue. In the right conditions, it can be pinned for more than 500ms, resulting in a JFR event, meaning the test will emit 3 rather than the expected 2 events.;;;","2023-07-14 03:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14884
Date: 2023-07-14 09:42:05 +0000;;;","2023-07-14 09:03;dukebot;Changeset: 0d2196f8
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-07-14 16:01:26 +0000
URL:       https://git.openjdk.org/jdk/commit/0d2196f8e5b03577a14ff97505718f4fa53f3792
;;;",,,,,,,,,,,,,,,,,,,,
Test java/lang/Thread/virtual/Reflection.java timed out,JDK-8311989,5105377,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,dholmes,dholmes,2023-07-12 21:21,2023-08-10 06:05,2023-10-01 09:55,2023-08-02 03:42,22,,,,,,22,core-libs,,0,noreg-self,tier5,,,,,,,,,,,,,,,,"Nothing to go on:

----------System.err:(16/1024)----------
STARTED    Reflection::testInvokeStatic1 'testInvokeStatic1()'
SUCCESSFUL Reflection::testInvokeStatic1 'testInvokeStatic1()'
STARTED    Reflection::testInvokeStatic2 'testInvokeStatic2()'
SUCCESSFUL Reflection::testInvokeStatic2 'testInvokeStatic2()'
STARTED    Reflection::testInvokeStatic3 'testInvokeStatic3()'
SUCCESSFUL Reflection::testInvokeStatic3 'testInvokeStatic3()'
STARTED    Reflection::testInvokeStatic4 'testInvokeStatic4()'
SUCCESSFUL Reflection::testInvokeStatic4 'testInvokeStatic4()'
STARTED    Reflection::testInvokeStatic5 'testInvokeStatic5()'
SUCCESSFUL Reflection::testInvokeStatic5 'testInvokeStatic5()'
STARTED    Reflection::testInvokeStatic6 'testInvokeStatic6()'
SUCCESSFUL Reflection::testInvokeStatic6 'testInvokeStatic6()'
STARTED    Reflection::testInvokeInstance1 'testInvokeInstance1()'
SUCCESSFUL Reflection::testInvokeInstance1 'testInvokeInstance1()'
STARTED    Reflection::testInvokeInstance2 'testInvokeInstance2()'
SUCCESSFUL Reflection::testInvokeInstance2 'testInvo
result: Error. Agent error: java.lang.Exception: Agent 36 timed out with a timeout of 480 seconds; check console log for any additional details
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32a43:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-07-13 02:16;alanb;I can't immediately tell if this issue is related to this test or something else. Has process 20224 running jtreg crashed? In the agent VM (process 33448) it looks like AgentVMThread com.sun.javatest.regtest.agent.JUnitRunner$PrintingListener.executionFinished is trying to write to the jtreg output stream, ditto for virtual thread #56 which is blocked trying to flush the jtreg output stream (albeit from the uncaught exception handler so there may be more that we aren't seeing in logs).;;;","2023-07-27 00:56;alanb;I haven't been able to duplicate this but the REE in the second sighting to enough to see that the unparker is unable to unpark the first virtual thread, the printing of the stack trace by the UHE parked and can't continue as the custom scheduler has shutdown. The test should be waiting for the unparker to terminate before it shuts down the custom scheduler.;;;","2023-07-29 06:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15073
Date: 2023-07-28 15:44:54 +0000;;;","2023-08-02 03:42;dukebot;Changeset: 6faf05c6
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-08-02 10:40:25 +0000
URL:       https://git.openjdk.org/jdk/commit/6faf05c6ddb3a0bcf4dce9516b8fca15d25cd80f
;;;",,,,,,,,,,,,,,,,,,,
Disable runtime/os/TestTracePageSizes.java for ShenandoahGC,JDK-8311986,5105372,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lzhai,lzhai,lzhai,2023-07-12 19:09,2023-07-19 21:20,2023-10-01 09:55,2023-07-14 06:56,17,21,22,,,,22,hotspot,,0,amazon-interest,gc-shenandoah,testbug,,,,,,,,,,,,,,,"Hi,

$ make run-test CONF=fastdebug TEST=""runtime/os/TestTracePageSizes.java"" JTREG=""VM_OPTIONS=-XX:+UseShenandoahGC""

ACTION: main -- Failed. Execution failed: `main' threw exception: java.lang.AssertionError: Page sizes mismatch: 4 != 2048
REASON: User specified action: run main/othervm -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:-SegmentedCodeCache -XX:+UseTransparentHugePages TestTracePageSizes 
TIME:   0.353 seconds
messages:
command: main -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:-SegmentedCodeCache -XX:+UseTransparentHugePages TestTracePageSizes
reason: User specified action: run main/othervm -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:-SegmentedCodeCache -XX:+UseTransparentHugePages TestTracePageSizes 
started: Thu Jul 13 09:57:18 CST 2023
Mode: othervm [/othervm specified]
finished: Thu Jul 13 09:57:19 CST 2023
elapsed time (seconds): 0.353
configuration:
STDOUT:
STDERR:
java.lang.AssertionError: Page sizes mismatch: 4 != 2048
	at TestTracePageSizes.main(TestTracePageSizes.java:294)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1570)

JavaTest Message: Test threw exception: java.lang.AssertionError: Page sizes mismatch: 4 != 2048
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.AssertionError: Page sizes mismatch: 4 != 2048
rerun:
cd /mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_os_TestTracePageSizes_java/scratch/0 && \
HOME=/home/loongson \
LANG=zh_CN.UTF-8 \
LC_ALL=C \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/images/test \
_JVM_DWARF_PATH=/mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_os_TestTracePageSizes_java/classes/0/runtime/os/TestTracePageSizes_compiler-options.d:/mnt/repo/openjdk/jdk/test/hotspot/jtreg/runtime/os:/mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_os_TestTracePageSizes_java/classes/0/test/lib:/mnt/repo/openjdk/jdk/test/lib:/mnt/download/jtreg/lib/javatest.jar:/mnt/download/jtreg/lib/jtreg.jar \
    /mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/mnt/download/jdk-20.0.1 -Djava.io.tmpdir=/mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_os_TestTracePageSizes_java/tmp -XX:+UseShenandoahGC' \
        -Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=4.16667 -J-Dtest.boot.jdk=/mnt/download/jdk-20.0.1 -J-Djava.io.tmpdir=/mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_os_TestTracePageSizes_java/tmp -J-XX:+UseShenandoahGC' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts= \
        -Dtest.jdk=/mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=4.0 \
        -Dtest.nativepath=/mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native \
        -Dtest.root=/mnt/repo/openjdk/jdk/test/hotspot/jtreg \
        -Dtest.name=runtime/os/TestTracePageSizes.java#compiler-options \
        -Dtest.file=/mnt/repo/openjdk/jdk/test/hotspot/jtreg/runtime/os/TestTracePageSizes.java \
        -Dtest.src=/mnt/repo/openjdk/jdk/test/hotspot/jtreg/runtime/os \
        -Dtest.src.path=/mnt/repo/openjdk/jdk/test/hotspot/jtreg/runtime/os:/mnt/repo/openjdk/jdk/test/lib \
        -Dtest.classes=/mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_os_TestTracePageSizes_java/classes/0/runtime/os/TestTracePageSizes_compiler-options.d \
        -Dtest.class.path=/mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_os_TestTracePageSizes_java/classes/0/runtime/os/TestTracePageSizes_compiler-options.d:/mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_os_TestTracePageSizes_java/classes/0/test/lib \
        -Dtest.class.path.prefix=/mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_os_TestTracePageSizes_java/classes/0/runtime/os/TestTracePageSizes_compiler-options.d:/mnt/repo/openjdk/jdk/test/hotspot/jtreg/runtime/os:/mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_os_TestTracePageSizes_java/classes/0/test/lib \
        -XX:MaxRAMPercentage=4.16667 \
        -Dtest.boot.jdk=/mnt/download/jdk-20.0.1 \
        -Djava.io.tmpdir=/mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_os_TestTracePageSizes_java/tmp \
        -XX:+UseShenandoahGC \
        -Djava.library.path=/mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native \
        -XX:+AlwaysPreTouch \
        -Xmx128m \
        -Xlog:pagesize:ps-%p.log \
        -XX:-SegmentedCodeCache \
        -XX:+UseTransparentHugePages \
        com.sun.javatest.regtest.agent.MainWrapper /mnt/repo/openjdk/jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_os_TestTracePageSizes_java/runtime/os/TestTracePageSizes_compiler-options.d/main.2.jta

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.AssertionError: Page sizes mismatch: 4 != 2048

Thanks,
Leslie Zhai",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32a2z:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-07-12 19:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14858
Date: 2023-07-13 02:16:15 +0000;;;","2023-07-14 06:56;dukebot;Changeset: 167d1c18
Author:    Leslie Zhai <lzhai@openjdk.org>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2023-07-14 13:54:46 +0000
URL:       https://git.openjdk.org/jdk/commit/167d1c183546a9501a4f255baecc8a4a5b859ab1
;;;",,,,,,,,,,,,,,,,,,,,,
ListView sometimes throws an IndexOutOfBoundsException,JDK-8311983,5105369,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,jhendrikx,jhendrikx,2023-07-12 17:42,2023-09-20 03:56,2023-10-01 09:55,2023-08-17 07:53,jfx21,,,,,,jfx22,javafx,,0,sn_150,,,,,,,,,,,,,,,,,"Steps to reproduce:

Scroll the all the way down by dragging the scrollbar thumb.  Now try to scroll back up by clicking on the bar near the top (not on the thumb).

I managed to reproduce this with 21-ea-24 but couldn't in 19.0.2.1 (but there seems to be another problem there, as you can't click the bar all the way back up in that way).

Exception in thread ""JavaFX Application Thread"" java.lang.IndexOutOfBoundsException: Index -1 out of bounds for length 2

      at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100)

      at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106)

      at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302)

      at java.base/java.util.Objects.checkIndex(Objects.java:359)

      at java.base/java.util.ArrayList.get(ArrayList.java:427)

      at javafx.controls/javafx.scene.control.skin.VirtualFlow.updateCellSize(VirtualFlow.java:3099)

      at javafx.controls/javafx.scene.control.skin.VirtualFlow.positionCell(VirtualFlow.java:1975)

      at javafx.controls/javafx.scene.control.skin.VirtualFlow.scrollPixels(VirtualFlow.java:1650)

      at javafx.controls/javafx.scene.control.skin.VirtualFlow.tryScrollOneCell(VirtualFlow.java:1565)

      at javafx.controls/javafx.scene.control.skin.VirtualFlow.scrollTo(VirtualFlow.java:1536)

      at javafx.controls/com.sun.javafx.scene.control.VirtualScrollBar.adjustValue(VirtualScrollBar.java:142)

      at javafx.controls/com.sun.javafx.scene.control.behavior.ScrollBarBehavior.lambda$20(ScrollBarBehavior.java:162)

      at javafx.controls/com.sun.javafx.scene.control.behavior.ScrollBarBehavior.trackPress(ScrollBarBehavior.java:173)

      at javafx.controls/javafx.scene.control.skin.ScrollBarSkin.lambda$7(ScrollBarSkin.java:411)

      at javafx.base/com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86)

      at javafx.base/com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:232)

      at javafx.base/com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:189)

      at javafx.base/com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59)

      at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58)

      at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)

      at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)

      at javafx.controls/javafx.scene.control.skin.VirtualFlow.lambda$2(VirtualFlow.java:369)

      at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)

      at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)

      at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)

      at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)

      at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)

      at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)

      at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)

      at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)

      at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)

      at javafx.base/com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)

      at javafx.base/com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54)

      at javafx.base/javafx.event.Event.fireEvent(Event.java:198)

      at javafx.graphics/javafx.scene.Scene$MouseHandler.process(Scene.java:3984)

      at javafx.graphics/javafx.scene.Scene.processMouseEvent(Scene.java:1890)

      at javafx.graphics/javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2708)

      at javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:411)

      at javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:1)

      at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)

      at javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$2(GlassViewEventHandler.java:450)

      at javafx.graphics/com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424)

      at javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449)

      at javafx.graphics/com.sun.glass.ui.View.handleMouseEvent(View.java:551)

      at javafx.graphics/com.sun.glass.ui.View.notifyMouse(View.java:937)

      at javafx.graphics/com.sun.glass.ui.mac.MacView.notifyMouse(MacView.java:127)

Code:

package org.int4.sdui.ui;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class Main2 {

  public static void main(String[] args) {
    Application.launch(UI.class, args);
  }

  public static class UI extends Application {

    @Override
    public void start(Stage primaryStage) throws InterruptedException {
      Image image1 = new Image(""https://picsum.photos/512/512"");
      Image image2 = new Image(""https://picsum.photos/512/512"");

      TextArea prompt = new TextArea(""a flower on Mars"");
      Button button = new Button(""Submit"");
      ListView<Image> listView = new ListView<>();

      while(image1.isBackgroundLoading() || image2.isBackgroundLoading()) {
        Thread.sleep(100);
      }

      listView.getItems().addAll(image1, image2);
      listView.setCellFactory(lv -> {
        final ImageView imageView = new ImageView();

        return new ListCell<>() {
          protected void updateItem(Image image, boolean empty) {
            super.updateItem(image, empty);
            if(empty) {
              setGraphic(null);
            }
            else {
              imageView.setImage(image);
              setGraphic(imageView);
            }
          }
        };
      });

      HBox hbox = new HBox() {{
        getChildren().addAll(
          new VBox() {{
            getChildren().addAll(prompt, button);
          }},
          listView
        );
      }};

      HBox.setHgrow(listView, Priority.ALWAYS);

      Scene scene = new Scene(hbox);

      primaryStage.setScene(scene);
      primaryStage.show();
    }
  }
}


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316590,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32a2b:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-07-13 05:00;kcr;[~jvos] Since this is in VirtualFlow, you might want to take a look?;;;","2023-07-13 08:05;angorya;Attachment <video2904038776.mp4> could not be scanned. The system has removed attachment. Please check the file before attempting to upload it again;;;","2023-07-13 08:06;angorya;added a video clip;;;","2023-08-02 15:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1194
Date: 2023-08-02 22:21:20 +0000;;;","2023-08-17 07:53;dukebot;Changeset: e5bb4e14
Author:    Marius Hanl <mhanl@openjdk.org>
Date:      2023-08-17 14:51:31 +0000
URL:       https://git.openjdk.org/jfx/commit/e5bb4e141cba5f49e0bdcc788d1751c8770d17d5
;;;","2023-09-20 01:44;arapte;The fix seems to be causing a regression.
- Run ensemble
- Scroll slowly, observe that the chart image on ensemble launch page flickers.
- Click on the radio button below image, the image vanishes

Issue does not occur after reverting this change,
git revert e5bb4e141cba5f49e0bdcc788d1751c8770d17d5;;;",,,,,,,,,,,,,,,,,
Test gc/stringdedup/TestStringDeduplicationAgeThreshold.java#ZGenerational timed out,JDK-8311981,5105367,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dholmes,dholmes,dholmes,2023-07-12 17:32,2023-08-23 15:28,2023-10-01 09:55,2023-08-14 14:21,21,22,,,,,22,hotspot,,0,amazon-interest,genzgc,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,noreg-hard,release-note=yes,tier4,-Xcomp,,,,,,,,,"[31.351s][debug][stringdedup,phases,start] Idle start
[31.353s][info ][gc                      ] Allocation Stall (main) 5.679ms
[31.361s][info ][gc,reloc                ] GC(10) y: Using tenuring threshold: 4 (Computed)
[31.361s][info ][gc,phases               ] GC(10) y: Concurrent Select Relocation Set 12.333ms
[31.368s][info ][gc,phases               ] GC(10) y: Pause Relocate Start 0.033ms
];
 stderr: []
 exitValue = 134

java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [134]
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)
	at gc.stringdedup.TestStringDeduplicationTools.testAgeThreshold(TestStringDeduplicationTools.java:487)
	at gc.stringdedup.TestStringDeduplicationAgeThreshold.main(TestStringDeduplicationAgeThreshold.java:107)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1570)

JavaTest Message: Test threw exception: java.lang.RuntimeException

The exit 134 is presumably an abort triggered from the timeout. There is no hs_err file produced.",,,,,,,,,,,JDK-8314902,,,,,,,,,,,,,,,,,,,,JDK-8313153,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,21,,windows,,,,,"0|i32a1v:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-07 04:53;stefank;This is a deadlock between the VMOperation_lock, HandshakeState lock and the ZGC relocation code.
Young Generation GC Thread:
 - Requested to start the Relocation phase via a VMOperation GC Pause
 - The VMThread completed that VMOperation GC Pause
 - The thread is just about to return from wait()ing on the VMThread
   - but it is stuck in the wait() because it can't acquire VMOperation_lock
    - the lock is held by Thread 16

Thread 16: performing class loading
 - Needed to deoptimize and handshake all threads
  - Tried to publish a handshake VMOpration
   - Took the VMOperation_lock!
   - Failed to publish the VMop because another VMOp is active
   - Called wait()
    - About to exit wait and calls ~ThreadBlockInVMPreprocess
     - which checked SafepointMechanism::should_process
      - which called HandshakeState::has_operation which *tried* and
        failed to take its own HandshakeState lock ...

VMThread running an unrelated VM operation:
 - ""Handshaked"" Thread 16
  - Took Thread 16's HandshakeState lock!
  - Started StackWatermark processing thread 16's oops
   - Needs to relocate an object, but couldn't because there's no more memory ...
    - delegated the relocation to the GC threads
    - waits for the GC threads to relocate objects
     - the GC threads will not make progress while Young Generation GC Thread is blocked

Stack traces:
Young Generation GC Thread:
  __lll_lock_wait ()
  __pthread_mutex_cond_lock ()
  pthread_cond_wait@@GLIBC_2.3.2 ()
  PlatformMonitor::wait
  Monitor::wait_without_safepoint_check
<<< Acquiring VMOperationLock
  MonitorLocker::wait
  VMThread::wait_until_executed
  VMThread::execute
  VM_ZOperation::pause
  ZGenerationYoung::pause_relocate_start
  ZGenerationYoung::collect
  ZDriverMinor::gc

Thread 16 (LWP 2216049):
  __lll_lock_wait
  pthread_mutex_lock 
  PlatformMutex::lock
  Mutex::lock_without_safepoint_check
  Mutex::lock_without_safepoint_check
<<< Acquiring HandshakeState lock
  MutexLocker::MutexLocker
  HandshakeState::has_operation
  SafepointMechanism::should_process
  SafepointMechanism::should_process
  ThreadBlockInVMPreprocess<InFlightMutexRelease>::~ThreadBlockInVMPreprocess
  Monitor::wait
<<< VMOperation lock
  MonitorLocker::wait
  VMThread::wait_until_executed
  VMThread::execute
  Handshake::execute
  Deoptimization::deoptimize_all_marked
  DeoptimizationScope::deoptimize_marked
  InstanceKlass::add_to_hierarchy

VMThread
  pthread_cond_wait@@GLIBC_2.3.2
  PlatformMonitor::wait
  ZConditionLock::wait
<<< Waits for Young Generation GC Thread
  ZRelocateQueue::add_and_wait
  ZRelocate::relocate_object
  ZUncoloredRoot::barrier<void (*)(zaddress)>
  ZUncoloredRoot::process
  InterpreterOopMap::iterate_oop
  frame::oops_interpreted_do
  frame::oops_interpreted_do
  frame::oops_do
  ZStackWatermark::process
  StackWatermarkFramesIterator::process_one
  StackWatermark::start_processing_impl
  StackWatermark::start_processing
  StackWatermark::start_processing
  StackWatermarkSet::start_processing
  HandshakeOperation::prepare
  HandshakeState::try_process
<<< HandshakeState lock (of Thread 16)
  HandshakeState::try_process
  VM_HandshakeAllThreads::doit
  VM_Operation::evaluate
  VMThread::evaluate_operation
  VMThread::inner_execute
  VMThread::loop
;;;","2023-08-07 17:52;dholmes;We have determined that this is a bug in the handshake logic and so I'm moving to runtime and taking this bug.;;;","2023-08-07 17:54;dholmes;From internal discussions:

David""
My initial thought is thread 16 is in the wrong. We shouldn't being trying to do the handshake op when holding the lock. I thought we did something to avoid that.

Stefan:
Yeah. I see this code:
    if (SafepointMechanism::should_process(_thread, _allow_suspend)) {
      _pr(_thread);
      SafepointMechanism::process_if_requested(_thread, _allow_suspend, false /* check_async_exception */);
    }
where the _pr(_thread) code is a call to InFlightMutexRelease::operator():
  void operator()(JavaThread* current) {
    _in_flight_mutex->release_for_safepoint();
    _in_flight_mutex = nullptr;
  }
So, I think we release the monitor before calling process_if_requested. Unfortunately, that doesn't help because this problem happens with the should_process call. (edited) 

Patricio:
I think one possible fix would be to change has_operation(bool allow_suspend, bool check_async_exception) to use a trylock instead and if it fails just return true, which will force to take the processing path and release the lock (in this case the VMOperation_lock).;;;","2023-08-10 21:51;dholmes;By making `has_operation` non-blocking and just return true if the lock cannot be acquired, we introduce a potential spurious ""true"" from SafepointMechanism::should_process(). I've examined all the callers to see the effects of this and have determined it is functionally harmless:

- ObjectSynchronizer::chk_for_block_req

We check for a real handshake/safepoint operation via ThreadBlockInVM.

- ~ThreadBlockInVMPreprocess

We will execute the `_pr` callback and then check for a real operation to process. There are 3 callbacks that we need to consider:

  - ThreadBlockInVMPreprocess<InFlightMutexRelease>

   This is the desired behaviour in the deadlock case as `_pr` will release the inflight mutex.

  - ThreadBlockInVMPreprocess<ExitOnSuspend>
  - ThreadBlockInVMPreprocess<ClearSuccOnSuspend>

  In both cases we only act if the target is suspended, which indicates there must have been a suspend handshake operation.

- Handshake::execute

Another case of executing a TBIVM.

- CodeInstaller::initialize_buffer

Executes a ThreadToNativeFromVM to check for an operation.

- BytecodeInterpreter RETURN_SAFEPOINT macro

Similar to the TBIVM and TTNFVM this call a JRT_ENTRY that performs the safepoint/handshake check. Functionally harmless as before, but you wouldn't want a lot of false positives here.

- ZeroInterpreter::native_entry

Will call JavaThread::check_special_condition_for_native_trans to check for safepint etc. 

- ZeroInterpreter::getter_entry
- ZeroInterpreter::setter_entry
- ZeroInterpreter::empty_entry

Calls normal_entry to force a slow path that checks for safepoints etc.

;;;","2023-08-10 22:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15240
Date: 2023-08-11 05:09:31 +0000;;;","2023-08-10 22:16;dholmes;Once this has baked for a little while I will backport to 21u.;;;","2023-08-11 00:19;stefank;I tagged this with release-note=yes for the JDK21 build.;;;","2023-08-14 14:21;dukebot;Changeset: f142470d
Author:    David Holmes <dholmes@openjdk.org>
Date:      2023-08-14 21:18:57 +0000
URL:       https://git.openjdk.org/jdk/commit/f142470deaebbf9cff7f6f28842972393506b7c4
;;;","2023-08-22 18:01;dholmes;JDK 21u Fix request

This is an important fix for Generational ZGC so we should get it in 21u as soon as possible. The fix seems stable and was analyzed to have low-risk.

Thanks.;;;","2023-08-22 18:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/83
Date: 2023-08-23 01:22:16 +0000;;;",,,,,,,,,,,,,
Inconsistency in usage of CITimeVerbose to generate compilation logs,JDK-8311976,5105361,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,asmehra,asmehra,asmehra,2023-07-12 15:27,2023-09-04 06:11,2023-10-01 09:55,2023-07-20 22:26,22,,,,,,22,hotspot,,0,diagnostics,oracle-triage-17,oracle-triage-21,oracle-triage-22,starter,,,,,,,,,,,,,"For C2 logging of timing information for each phase to tty and to compilation log is controlled by CITimeVerbose [0]. However, for C1 CITimeVerbose only controls the logging of timing information to tty and not to the compilation log [1]. 
Logging to tty for both C1 and C2 is done in TraceTime [3] - that explains the common behavior for tty.

This difference in logging behavior can be a source of confusion when timing information for C1 and C2 compilation phases is required, which can be easily avoided if C1 follows the same behavior as C2.

[0] https://github.com/openjdk/jdk/blob/489a32fe40e2a2c539296d51d4ffc0abc036d33c/src/hotspot/share/opto/compile.cpp#L4336-L4338
[1] https://github.com/openjdk/jdk/blob/489a32fe40e2a2c539296d51d4ffc0abc036d33c/src/hotspot/share/c1/c1_Compilation.cpp#L88-L90
[2] https://github.com/openjdk/jdk/blob/489a32fe40e2a2c539296d51d4ffc0abc036d33c/src/hotspot/share/runtime/timerTrace.cpp#L78-L86",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312596,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32a0j:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-12 22:20;thartmann;ILW = CITimeVerbose VM flags does not control logging to the compilation log, with CITimeVerbose and LogCompilation, no workaround = LMH = P5;;;","2023-07-13 15:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14880
Date: 2023-07-13 22:35:43 +0000;;;","2023-07-20 22:26;dukebot;Changeset: 3e8f1eb8
Author:    Ashutosh Mehra <asmehra@redhat.com>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-07-21 05:25:31 +0000
URL:       https://git.openjdk.org/jdk/commit/3e8f1eb82039d4943abf79380f35ad1ec1927b45
;;;",,,,,,,,,,,,,,,,,,,,
SA's ConstantPool.java uses incorrect computation to read long value in the constant pool,JDK-8311971,5105352,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asmehra,asmehra,asmehra,2023-07-12 12:21,2023-07-24 17:24,2023-10-01 09:55,2023-07-19 07:26,22,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,"Comparing String.class generated by SA's dumpclass command with the original String class (using javap) the `serialVersionUID` field is different in the two classs.
In the original it is:

  private static final long serialVersionUID;
    descriptor: J     
    flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL
    ConstantValue: long -6849794470754667710l

In the dumped class it is:

  private static final long serialVersionUID;
    descriptor: J
    flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL
    ConstantValue: long 2050732866l

Long value is read by ConstantPool use this method:

  public long getLongAt(long index) {
    int oneHalf = getAddress().getJIntAt(indexOffset(index + 1));
    int otherHalf   = getAddress().getJIntAt(indexOffset(index));
    // buildLongFromIntsPD accepts higher address value, lower address value
    // in that order.
    return VM.getVM().buildLongFromIntsPD(oneHalf, otherHalf);
  } 

This is not correct because each entry in the runtime constant pool is 8-bytes (on 64-bit platforms) and the long value is stored as at ""index"" and the value at ""index+1"" is not used. This code above tries to read ""oneHalf"" from ""index+1"" which is not valid.
The correct way is to just use getAddress().getJLongAt(indexOffset(index)).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i329yj:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-07-12 12:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14855
Date: 2023-07-12 19:48:52 +0000;;;","2023-07-19 07:26;dukebot;Changeset: c1190375
Author:    Ashutosh Mehra <asmehra@redhat.com>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-07-19 14:24:16 +0000
URL:       https://git.openjdk.org/jdk/commit/c1190375fc6def8a5520549157389f615161d7d7
;;;",,,,,,,,,,,,,,,,,,,,,
Some jtreg tests failing on x86 with error 'unrecognized VM options' (C2 flags),JDK-8311964,5105343,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dhanalla,dhanalla,dhanalla,2023-07-12 11:16,2023-09-12 11:26,2023-10-01 09:55,2023-09-06 04:39,17,22,,,,,22,hotspot,,0,noreg-self,oracle-triage-22,starter,,,,,,,,,,,,,,,"Following jtreg tests are failing on x86 due to c2 flags LoopUnswitching, OptimizeFill and StressCCP are not available in x86 binary.

test/hotspot/jtreg/compiler/loopopts/TestInfiniteLoopWithUnmergedBackedgesMain.java
error: Unrecognized VM option 'LoopUnswitching'
Introduced by commit: https://github.com/microsoft/openjdk-jdk17u/commit/ee63f83ed705c9cd3c49316fc4936668744f415d#diff-ac9e408e8f32ed8c6260b005b8c386bc7a0a8738a8b8d2fe91c82b66f9f6ab7e

test/hotspot/jtreg/compiler/loopopts/TestBackedgeLoadArrayFillMain.java
error: Unrecognized VM option 'OptimizeFill' 
Introduced by commit: https://github.com/microsoft/openjdk-jdk17u/commit/d21597aec91bbd41960923385f6a1feb31f14a0c

test/hotspot/jtreg/compiler/rangechecks/TestRangeCheckCmpUOverflowVsSub.java
error: Unrecognized VM option 'StressCCP'
Introduced by commit: https://github.com/microsoft/openjdk-jdk17u/commit/e6c27925d23fe283a23c6adbe263658909c3739d#diff-36a07bd10ab86c032882232a1d18b96fb6a399c01dc05739c24ea12e9abc2d55",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,windows,,,,,"0|i329wj:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-12 22:07;thartmann;The tests seem to be missing a '@requires vm.compiler2.enabled'. I think this is not specific to JDK 17u but also affects mainline.

ILW = Tests fail due to unsupported VM flags (test bug), 3 tests with VM build without C2, no workaround = MLH = P4;;;","2023-07-20 14:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14942
Date: 2023-07-19 23:19:28 +0000;;;","2023-09-06 04:39;dukebot;Changeset: 024133b0
Author:    singhnitin <REDMOND+singhnitin@nitin>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-09-06 11:36:13 +0000
URL:       https://git.openjdk.org/jdk/commit/024133b089d911dcc3ea70dfdaa6b150b14a9eb4
;;;",,,,,,,,,,,,,,,,,,,,
c++filt is now ibm-llvm-cxxfilt when using xlc17 / clang on AIX,JDK-8311955,5105332,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-07-12 08:46,2023-08-03 08:40,2023-10-01 09:55,2023-07-23 23:26,21,22,,,,,22,infrastructure,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,Currently configure checks on some envs  for c++filt . This seems to be incorrect for the clang toolchain on AIX (e.g. xlc 17).,,,,,,,,,,,JDK-8313700,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i329u3:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-07-13 00:27;dholmes;Seems needed to me:

./make/autoconf/toolchain.m4:      UTIL_REQUIRE_TOOLCHAIN_PROGS(CXXFILT, c++filt)
./make/hotspot/lib/CompileJvm.gmk:          $$(NM) $$< | $$(CXXFILT) | $$(EGREP) '$$(DEMANGLED_REGEXP)' | $$(GREP) $$(UNDEF_PATTERN); \
;;;","2023-07-13 00:36;mbaesken;Hi David,  the  first finding is just the check/setup in configure.
But the second one is valid , looks like we use the c++filt  there for  checking  that global operators new and delete are not present in hotspot  objects.
Probably we have to adjust or disable this for AIX  (new xlc17 seems to have another c++filt ).;;;","2023-07-13 01:05;dholmes;Sure, I was just showing how c++filt becomes CXXFILT.;;;","2023-07-14 05:13;mbaesken;When using xlc17  on AIX ,  the mentioned tool is /opt/IBM/openxlC/17.1.1/tools/ibm-llvm-cxxfilt .
So without workarounds (e.g. softlink) or an old c++filt available, configure will fail. This should be addressed.;;;","2023-07-21 05:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14972
Date: 2023-07-21 11:38:13 +0000;;;","2023-07-21 07:52;mbaesken;After this change, the AIX compiler-tools directory  /opt/IBM/openxlC/<version-number>/tools  has to be added as well to the PATH before running configure, so that ibm-llvm-cxxfilt  is found.;;;","2023-07-23 23:26;dukebot;Changeset: 03288864
Author:    Andreas Steiner <a.steiner@sap.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-07-24 06:24:00 +0000
URL:       https://git.openjdk.org/jdk/commit/0328886450a4978f1edbe06a59d2ab8f733d19a9
;;;","2023-08-02 04:51;mbaesken;jdk21u backport request
I would like to have the patch in jdk21u as well, because the tool issue is present there too.  The patch is low risk and applies cleanly.;;;","2023-08-02 04:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/34
Date: 2023-08-02 11:47:33 +0000;;;",,,,,,,,,,,,,,
clearRTT should clear entire RTT when scissor rect is not set,JDK-8311927,5105300,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,arapte,arapte,arapte,2023-07-12 01:47,2023-07-17 09:42,2023-10-01 09:55,2023-07-12 01:54,internal,,,,,,internal,javafx,,0,javafx-metal,sn_148,,,,,,,,,,,,,,,,"The Prism architecture maintains a pool of textures and reuses them when possible.
These textures need to be cleared before being reused.
In above scenario, scissor rect would be disabled.",,,,,,,,,,,,,,,,,,,,,,,,JDK-8271024,,,,,,,,,,,,,,,,,,"2023-07-12 01:53;arapte;new-side-effect.png;https://bugs.openjdk.org/secure/attachment/104576/new-side-effect.png","2023-07-12 01:53;arapte;popup-menu-issue-fixed.png;https://bugs.openjdk.org/secure/attachment/104575/popup-menu-issue-fixed.png",,,,,,,,,,,,,,,,,,,,,"0|i329mz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-07-12 01:53;arapte;The fix for this change also fixes an issue that Popup menu get clipped when moving mouse over it.
But, introduces a new side effect. [please check screenshots]
;;;","2023-07-12 01:54;arapte;Changeset: 53b23ed5
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2023-07-12 14:18:21 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/53b23ed5b0cda2ab21c031c9d3ae3b2ed1aedf53;;;",,,,,,,,,,,,,,,,,,,,,
java/lang/ScopedValue/StressStackOverflow.java takes 9mins in tier1,JDK-8311926,5105299,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2023-07-12 01:37,2023-08-08 05:08,2023-10-01 09:55,2023-07-12 08:45,21,22,,,,,22,core-libs,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,noreg-self,,,,,,,,,,,,,,3 runs * 3 mins is too long in tier1.,,,,,,,,,,,JDK-8313950,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i329mr:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-07-12 02:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14849
Date: 2023-07-12 09:00:33 +0000;;;","2023-07-12 08:45;dukebot;Changeset: 7304316a
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-07-12 15:44:41 +0000
URL:       https://git.openjdk.org/jdk/commit/7304316a8c55a4c0f2a96d1b99ba9e97e49ed7f4
;;;","2023-08-04 03:39;clanger;Fix request (21u):
Follow up to JDK-8308609. Tested in SAP nightlies, test only fix.;;;","2023-08-04 03:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/42
Date: 2023-08-04 10:33:31 +0000;;;",,,,,,,,,,,,,,,,,,,
TestIRMatching.java fails on RISC-V,JDK-8311923,5105296,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gcao,gcao,gcao,2023-07-12 01:21,2023-08-01 19:01,2023-10-01 09:55,2023-07-19 06:15,17,21,22,,,,22,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-yes,noreg-self,oraclejdk-na,oracle-triage-22,,,,,,,,,,,"
Hi, we are experiencing test case failure in test test/hotspot/jtreg/testlibrary_tests/ir_framework/tests/TestIRMatching.java:
```
One or more @IR rules failed:

Failed IR Rules (1) of Methods (1)
----------------------------------
1) Method ""public java.lang.Object[] ir_framework.tests.CheckCastArray.arrayCopy(java.lang.Object[],java.lang.Class)"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={}, failOn={""_#CHECKCAST_ARRAYCOPY#_""}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintOptoAssembly"":
       - failOn: Graph contains forbidden nodes:
         * Constraint 1: ""(.*((?i:call_leaf_nofp,runtime)|CALL,\\s?runtime leaf nofp|BCTRL.*.leaf call).*checkcast_arraycopy.*)""
           - Matched forbidden node:
             * 15a +   CALL, runtime leaf nofp 0x0000003f7fbd9600	#@CallLeafNoFPDirect checkcast_arraycopy

>>> Check stdout for compilation output of the failed methods
```

After troubleshooting, the problem is related to the definition of the matching rules for the CHECKCAST_ARRAY, CHECKCAST_ARRAY_OF fields in test/hotspot/jtreg/compiler/lib/ir_framework/IRNode.java:
```
    public static final String CHECKCAST_ARRAY = PREFIX + ""CHECKCAST_ARRAY"" + POSTFIX;
    static {
        String regex = ""(((?i:cmp|CLFI|CLR).*precise \\[.*:|.*(?i:mov|or).*precise \\[.*:.*\\R.*(cmp|CMP|CLR))"" + END;
        optoOnly(CHECKCAST_ARRAY, regex);
    }

    public static final String CHECKCAST_ARRAY_OF = COMPOSITE_PREFIX + ""CHECKCAST_ARRAY_OF"" + POSTFIX;
    static {
        String regex = ""(((?i:cmp|CLFI|CLR).*precise \\[.*"" + IS_REPLACED + "":|.*(?i:mov|or).*precise \\[.*"" + IS_REPLACED + "":.*\\R.*(cmp|CMP|CLR))"" + END;
        optoOnly(CHECKCAST_ARRAY_OF, regex);
    }
```
This rule is used to match the Opto compilation log of the `array()/arrayCopy()` method of the subclass CheckCastArray in test/hotspot/jtreg/testlibrary_tests/ir_framework/tests/TestIRMatching.java. If the match does not work, the above test fails.

The `array()` part of the Opto log for CheckCastArray on the aarch64 platform is as follows:
```
06c     B2: #	out( B5 B3 ) &lt;- in( B1 )  Freq: 0.999999
06c +   mov  R12, narrowklass: precise [ir_framework/tests/MyClass: 0x0000ffff58420808 * (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
074 +   cmp  R10, R12	 // compressed ptr
078     bne  B5	# unsigned  P=0.100000 C=-1.000000
```
The `array()` part of the Opto log for CheckCastArray on the riscv platform is as follows:
```
054     B2: #	out( B5 B3 ) &lt;- in( B1 )  Freq: 0.999999
054 +   mv  R29, narrowklass: precise [ir_framework/tests/MyClass: 0x0000003f34437df8 * (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr, #@loadConNKlass
062 +   bne  R7, R29, B5	#@cmpN_branch  P=0.100000 C=-1.000000
```
From the above Opto log, we can see that the match rule of CHECKCAST_ARRAY in test/hotspot/jtreg/compiler/lib/ir_framework/IRNode.java can be matched with aarch64. However, on the riscv platform, since the mv instruction is generated, it does not correspond to the matching rule, so the test case fails. To solve this problem, we modified the match rules defined by CHECKCAST_ARRAY, CHECKCAST_ARRAY_OF in test/hotspot/jtreg/compiler/lib/ir_framework/IRNode.java to include the mv directive in the match rules.


Same problem with ALLOC_ARRAY, ALLOC_ARRAY_OF in test/hotspot/jtreg/compiler/lib/ir_framework/IRNode.java
```
    public static final String ALLOC_ARRAY = PREFIX + ""ALLOC_ARRAY"" + POSTFIX;
    static {
        String optoRegex = ""(.*precise \\[.*\\R((.*(?i:mov|xor|nop|spill).*|\\s*|.*(LGHI|LI).*)\\R)*.*(?i:call,static).*wrapper for: _new_array_Java"" + END;
        allocNodes(ALLOC_ARRAY, ""AllocateArray"", optoRegex);
    }

    public static final String ALLOC_ARRAY_OF = COMPOSITE_PREFIX + ""ALLOC_ARRAY_OF"" + POSTFIX;
    static {
        String regex = ""(.*precise \\[.*"" + IS_REPLACED + "":.*\\R((.*(?i:mov|xorl|nop|spill).*|\\s*|.*(LGHI|LI).*)\\R)*.*(?i:call,static).*wrapper for: _new_array_Java"" + END;
        optoOnly(ALLOC_ARRAY_OF, regex);
    }
```
This rule is used to match the compilation log of the `allocArray()` method of the subclass AllocArray in test/hotspot/jtreg/testlibrary_tests/ir_framework/tests/TestIRMatching.java, and if it doesn't match it also fails. test fails.
The `allocArray()` part of the Opto log for AllocArray on the aarch64 platform is as follows:
```
1a8     B14: #	out( B17 B15 ) &lt;- in( B1 )  Freq: 0.000100017
1a8 +   mov  R1, precise [ir_framework/tests/MyClass: 0x0000ffff244beb58 * (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# ptr
	
1b4     call,static 0x0000ffff6fb9c540 	// ==&gt;  wrapper for: _new_array_Java
        # ir_framework.tests.AllocArray::allocArray @ bci:2 (line 930) L[0]=_ STK[0]=R29
        # OopMap {rfp=Oop off=440/0x1b8}
```
The `allocArray()` part of the Opto log for AllocArray on the riscv platform is as follows:
```
16a     B14: #	out( B17 B15 ) &lt;- in( B1 )  Freq: 0.000100017
16a +   mv  R11, precise [ir_framework/tests/MyClass: 0x00007fff4c34c018 * (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# ptr, #@loadConP
182 +   li R12, #2	# int, #@loadConI
184     CALL,static 0x00007fff9bb74840	#@CallStaticJavaDirect wrapper for: _new_array_Java
        # ir_framework.tests.AllocArray::allocArray @ bci:2 (line 930) L[0]=_ STK[0]=R8
        # OopMap {fp=Oop off=392/0x188}
```
As we can see in the above logs, the aarch64 log matches the empty line under precise, which also matches the ALLOC_ARRAY_OF rule in test/hotspot/jtreg/compiler/lib/ir_framework/IRNode.java, but in the riscv log. precise is followed by the li, which doesn't match the rule and therefore also causes the test case to fail. To solve this problem, we firstly modified the loadConI, loadConL nodes in riscv.ad, and changed the log message of li into mv, and secondly, we modified the ALLOC_ARRAY and ALLOC_ARRAY_OF match rule in test/hotspot/jtreg/compiler/lib/ir_framework/IRNode.java, and added the mv directive to the match rule.",,,,,,,,,,,JDK-8312465,JDK-8313577,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,,linux,,,,,"0|i329m3:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-12 01:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14848
Date: 2023-07-12 08:39:11 +0000;;;","2023-07-12 06:54;chagedorn;ILW = IR framework internal test failure due to wrong IR node default regex, only single test and on riscv, no workaround = MLH = P4;;;","2023-07-19 06:15;dukebot;Changeset: e7adbdb1
Author:    Gui Cao <gcao@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2023-07-19 13:14:03 +0000
URL:       https://git.openjdk.org/jdk/commit/e7adbdb1f1506b82392907f7e4a5c8882d3198eb
;;;","2023-07-19 06:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/12
Date: 2023-07-19 13:22:26 +0000;;;","2023-07-19 07:27;gcao;Fix Request (21u):
Hi, I would like to backport this to jdk21u to make TestIRMatching.java test work on Linux RISC-V platform, `test/hotspot/jtreg/testlibrary_tests/ir_framework/tests/TestIRMatching.java` passed with fastdebug build using qemu system and unmatched board.;;;","2023-07-21 00:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1611
Date: 2023-07-21 07:26:55 +0000;;;","2023-07-26 19:27;gcao;Fix Request (17u):
Hi, I would like to backport this to jdk17u to make TestIRMatching.java test work on Linux RISC-V platform, `test/hotspot/jtreg/testlibrary_tests/ir_framework/tests/TestIRMatching.java` passed with fastdebug build using qemu system and unmatched board. Backport PR has been reviewed and approved by Paul Hohensee and Fei Yang;;;",,,,,,,,,,,,,,,,
[macOS] right-Option key fails to generate release event,JDK-8311922,5104522,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnguyen,webbuggrp,webbuggrp,2023-07-02 02:41,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 09:43,20,21,,,,,22,client-libs,,0,dcspn,macos,regression,reproducer-yes,sn_149,sn_150,sn_151,sn_153,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Also replicates in pre-release Java 22.

A DESCRIPTION OF THE PROBLEM :
The right-option key on a Mac keyboard does not behave consistent with the left-option key and other paired modifier keys. It fails to generate a keyReleased event (instead it seems to generate a second keyPressed event when the key is released). Also, getKeyLocation() reports as KeyEvent.KEY_LOCATION_STANDARD rather than KeyEvent.KEY_LOCATION_RIGHT.

This is observed in recent versions of Java. Running the same test under Java 14 produces a different result. The keyReleased event and key location are reported correctly. However, the keycodes for the right-Option key are completely different from the left-Option key, which is not the same for other modifier keys.

REGRESSION : Last worked in version 14

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the test case program (see source below) on a MacOS machine. Press and Release the right-option key and other modifier keys, left and right. 

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Key Pressed and Released events should be generated as appropriate. Key location should be ""left"" and ""right"" depending on which modifier key is pressed.

ACTUAL -
Pressing & releasing left-option and other modifier keys, such as left or right-shift, reports ""Pressed"" & ""Released"". Pressing right-option reports ""Pressed"" but releasing it does not report ""Released"", status remains as Pressed.

 Also notice that the Location of the right-option key is reported as ""Standard"" but all other paired modifier keys report as ""left"" or ""right"".

---------- BEGIN SOURCE ----------
package events;

/*
 * KeyEventDemo
 */

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.*;
import javax.swing.*;

class KeyEventDemo extends JFrame
        implements KeyListener,
        ActionListener
{
    JTextArea displayArea;
    JTextField typingArea;
    static final String newline = System.getProperty(""line.separator"");

    public static void main(String[] args) {
        /* Use an appropriate Look and Feel */
        try {
            //UIManager.setLookAndFeel(""com.sun.java.swing.plaf.windows.WindowsLookAndFeel"");
            //UIManager.setLookAndFeel(""com.sun.java.swing.plaf.gtk.GTKLookAndFeel"");
            UIManager.setLookAndFeel(""javax.swing.plaf.metal.MetalLookAndFeel"");
        } catch (UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        /* Turn off metal's use of bold fonts */
        UIManager.put(""swing.boldMetal"", Boolean.FALSE);

        //Schedule a job for event dispatch thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }

    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI() {
        //Create and set up the window.
        KeyEventDemo frame = new KeyEventDemo(""KeyEventDemo (Java "" + System.getProperty(""java.version"") + "")"");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Set up the content pane.
        frame.addComponentsToPane();


        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }

    private void addComponentsToPane() {

        JButton button = new JButton(""Clear"");
        button.addActionListener(this);

        typingArea = new JTextField(20);
        typingArea.addKeyListener(this);

        //Uncomment this if you wish to turn off focus
        //traversal.  The focus subsystem consumes
        //focus traversal keys, such as Tab and Shift Tab.
        //If you uncomment the following line of code, this
        //disables focus traversal and the Tab events will
        //become available to the key event listener.
        //typingArea.setFocusTraversalKeysEnabled(false);

        displayArea = new JTextArea();
        displayArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(displayArea);
        scrollPane.setPreferredSize(new Dimension(375, 125));

        getContentPane().add(typingArea, BorderLayout.PAGE_START);
        getContentPane().add(scrollPane, BorderLayout.CENTER);
        getContentPane().add(button, BorderLayout.PAGE_END);
    }

    public KeyEventDemo(String name) {
        super(name);
    }


    /** Handle the key typed event from the text field. */
    public void keyTyped(KeyEvent e) {
        displayInfo(e, ""KEY TYPED: "");
    }

    /** Handle the key pressed event from the text field. */
    public void keyPressed(KeyEvent e) {
        displayInfo(e, ""KEY PRESSED: "");
    }

    /** Handle the key released event from the text field. */
    public void keyReleased(KeyEvent e) {
        displayInfo(e, ""KEY RELEASED: "");
    }

    /** Handle the button click. */
    public void actionPerformed(ActionEvent e) {
        //Clear the text components.
        displayArea.setText("""");
        typingArea.setText("""");

        //Return the focus to the typing area.
        typingArea.requestFocusInWindow();
    }

    /*
     * We have to jump through some hoops to avoid
     * trying to print non-printing characters
     * such as Shift.  (Not only do they not print,
     * but if you put them in a String, the characters
     * afterward won't show up in the text area.)
     */
    private void displayInfo(KeyEvent e, String keyStatus){

        //You should only rely on the key char if the event
        //is a key typed event.
        int id = e.getID();
        String keyString;
        if (id == KeyEvent.KEY_TYPED) {
            char c = e.getKeyChar();
            keyString = ""key character = '"" + c + ""'"";
        } else {
            int keyCode = e.getKeyCode();
            keyString = ""key code = "" + keyCode
                    + "" (""
                    + KeyEvent.getKeyText(keyCode)
                    + "")"";
        }

        int modifiersEx = e.getModifiersEx();
        String modString = ""extended modifiers = "" + modifiersEx;
        String tmpString = KeyEvent.getModifiersExText(modifiersEx);
        if (tmpString.length() > 0) {
            modString += "" ("" + tmpString + "")"";
        } else {
            modString += "" (no extended modifiers)"";
        }

        String actionString = ""action key? "";
        if (e.isActionKey()) {
            actionString += ""YES"";
        } else {
            actionString += ""NO"";
        }

        String locationString = ""key location: "";
        int location = e.getKeyLocation();
        if (location == KeyEvent.KEY_LOCATION_STANDARD) {
            locationString += ""standard"";
        } else if (location == KeyEvent.KEY_LOCATION_LEFT) {
            locationString += ""left"";
        } else if (location == KeyEvent.KEY_LOCATION_RIGHT) {
            locationString += ""right"";
        } else if (location == KeyEvent.KEY_LOCATION_NUMPAD) {
            locationString += ""numpad"";
        } else { // (location == KeyEvent.KEY_LOCATION_UNKNOWN)
            locationString += ""unknown"";
        }

        displayArea.append(keyStatus + newline
                + ""    "" + keyString + newline
                + ""    "" + modString + newline
                + ""    "" + actionString + newline
                + ""    "" + locationString + newline);
        displayArea.setCaretPosition(displayArea.getDocument().getLength());
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Not known.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-07-12 00:07;pnarayanaswa;Capture.png;https://bugs.openjdk.org/secure/attachment/104573/Capture.png","2023-08-22 11:18;dnguyen;Fixed_EventNameLocation.png;https://bugs.openjdk.org/secure/attachment/105221/Fixed_EventNameLocation.png","2023-07-12 00:59;pnarayanaswa;KeyEventDemo.java;https://bugs.openjdk.org/secure/attachment/104574/KeyEventDemo.java",,,,,x86_64,,,,,,,b01,20,,os_x,,,,,"0|i324u3:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-07-12 00:38;pnarayanaswa;Checked with attached testcase in macOS Ventura 13.2.1, issue is reproducible for right-option-key<attached screenshot>
Test Result
==========
8u371: Pass
11.0.19: Pass
17.0.7: Pass
19.0.2: Pass
20.0.1:Fail b01 <-Regression
21ea30 :Fail;;;","2023-07-19 14:18;dnguyen;Reproduced issue using given test with modifications. Currently investigating Mac key bindings map.;;;","2023-08-22 10:49;dnguyen;Found the source of the issue. Modifications to the options key for macOS AWTEvent were made in JDK20. Working on cleaning up the changed code to only include what's actually needed to fix the regression.;;;","2023-08-25 11:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15432
Date: 2023-08-25 17:53:51 +0000;;;","2023-09-21 09:43;dukebot;Changeset: 83b01cf3
Author:    Damon Nguyen <dnguyen@openjdk.org>
Date:      2023-09-21 16:42:14 +0000
URL:       https://git.openjdk.org/jdk/commit/83b01cf3c28bc38b953d6e7e41bb7d730d91179f
;;;",,,,,,,,,,,,,,,,,,
MAP_FAILED definition seems to be obsolete in src/java.desktop/unix/native/common/awt/fontpath.c,JDK-8311917,5105290,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-07-12 00:00,2023-07-31 07:50,2023-10-01 09:55,2023-07-13 00:13,21,22,,,,,22,client-libs,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,There is a MAP_FAILED definition in src/java.desktop/unix/native/common/awt/fontpath.c but it is never used in the coding and seems to be obsolete.,,,,,,,,,,,JDK-8313418,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i329kr:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-07-12 00:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14843
Date: 2023-07-12 07:07:05 +0000;;;","2023-07-13 00:12;dukebot;Changeset: a38a421f
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-07-13 07:11:14 +0000
URL:       https://git.openjdk.org/jdk/commit/a38a421f62efbcc0fc9c6a08738b5f0ab38a4594
;;;","2023-07-31 00:44;mbaesken;jdk21u backport request
I would like to have the change in jdk21u as well, because the cleanup would be nice to have there too. Risk is low, backport is clean.,;;;","2023-07-31 00:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/24
Date: 2023-07-31 07:40:43 +0000;;;",,,,,,,,,,,,,,,,,,,
Concurrency regression in the PBKDF2 key impl of SunJCE provider,JDK-8311902,5105276,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,valeriep,valeriep,valeriep,2023-07-11 17:07,2023-07-27 06:37,2023-10-01 09:55,2023-07-19 15:30,21,,,,,,21,security-libs,,0,amazon-interest,noreg-other,,,,,,,,,,,,,,,,Changes for JDK-8301553 introduced a concurrency regression to the PBKDF2 key implementation of the SunJCE provider. This should be fixed.,,,,,,,,,,,JDK-8312957,JDK-8312305,,,,,,,,,,,,,,,,,JDK-8310553,JDK-8311297,,,,JDK-8301553,,,,JDK-8312306,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i329hn:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,Verified,,"2023-07-12 19:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14859
Date: 2023-07-13 02:46:10 +0000;;;","2023-07-19 10:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/139
Date: 2023-07-19 17:51:20 +0000;;;","2023-07-19 18:26;dukebot;Changeset: 6786fa4b
Author:    Valerie Peng <valeriep@openjdk.org>
Date:      2023-07-20 01:23:53 +0000
URL:       https://git.openjdk.org/jdk21/commit/6786fa4bfd536897b80136ee912a387a45957115
;;;",,,,,,,,,,,,,,,,,,,,
jdk/javax/swing/ProgressMonitor/ProgressTest.java does not show the ProgressMonitorInputStream all the time,JDK-8311881,5105251,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,landrews,landrews,2023-07-11 10:07,2023-07-27 10:51,2023-10-01 09:55,2023-07-24 02:24,20,21,,,,,22,client-libs,,0,atr,macos,,,,,,,,,,,,,,,,If jdk/javax/swing/ProgressMonitor/ProgressTest.java is run back to back or on the first run ProgressMonitorInputStream is not shown. User can see only test instruction frame.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-07-11 22:09;psadhukhan;progressmonitor.png;https://bugs.openjdk.org/secure/attachment/104572/progressmonitor.png",,,,,,,generic,,,,,,,,,,os_x,windows,,,,"0|i329c3:",9223372036854775807,b08,,,,,,,,,,,"2023-07-11 10:32;azvegint;At least I can see this on macOS.
The progress bar window appears after adding Thread.sleep(250); before the thread.start();

However, I can observe another strange thing: 
When I change the delay to 500, it is no longer displays ""MB Read"" note

pmis.getProgressMonitor().setNote(total/(1024*1024)+"" MB Read"");;;;","2023-07-11 22:08;psadhukhan;[~landrews] In which platform you see this? Since you made it as generic, I thought you have seen this in all platform.
I could not reproduce this in windows10 in multiple tries(6-7) back to back..Attached is screenshot I see...;;;","2023-07-11 22:39;landrews;[~psadhukhan], I found this issue in MAC OS x86_64 13.2.1;;;","2023-07-12 01:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14844
Date: 2023-07-12 07:36:56 +0000;;;","2023-07-14 02:33;tr;I am able to reproduce the issue in Windows too. It's not MacOS specific.;;;","2023-07-24 02:24;dukebot;Changeset: 197981b4
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-07-24 09:22:14 +0000
URL:       https://git.openjdk.org/jdk/commit/197981b431fb7c7e6740ac45a671b99d1c7583c6
;;;",,,,,,,,,,,,,,,,,
SA ClassWriter generates invalid invokedynamic code,JDK-8311879,5105245,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dqu,asotona,asotona,2023-07-11 08:34,2023-07-24 17:25,2023-10-01 09:55,2023-07-19 12:27,,,,,,,22,hotspot,,0,noreg-other,,,,,,,,,,,,,,,,,"Invokedynamic instructions generated by the SA ClassWriter do not refer to valid constant pool entries.

More strict constant pool control in javap reveals that `serviceability/sa/ClhsdbDumpclass.java` test fails with errors (see attached log).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294969,JDK-8311103,,,,,,,"2023-07-11 08:35;asotona;error.log;https://bugs.openjdk.org/secure/attachment/104560/error.log",,,,,,,,,,,,,,,,,,,,,,"0|i329ar:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-07-12 02:14;dqu;Hi Adam, I think it is a good catch because `javap` doesn't verify this!

And the fix seems also to be straightforward.

--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/jcore/ByteCodeRewriter.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/jcore/ByteCodeRewriter.java
@@ -102,7 +102,7 @@ public class ByteCodeRewriter
           // Invokedynamic require special handling
           cpCacheIndex = ~cpCacheIndex;
           cpCacheIndex = bytes.swapInt(cpCacheIndex);
-          return (short) cpCache.getEntryAt(cpCacheIndex).getConstantPoolIndex();
+          return (short) cpCache.getIndyEntryAt(cpCacheIndex).getConstantPoolIndex();
        } else if (fmt.contains(""JJ"")) {
           // change byte-ordering and go via cache
           return (short) cpCache.getEntryAt((int) (0xFFFF & bytes.swapShort((short)cpCacheIndex))).getConstantPoolIndex();

According to the code snippet in hotspot:

https://github.com/openjdk/jdk/blob/753bd563ecca6bb5ff9b5ebc0957bc1854dce78d/src/hotspot/share/interpreter/rewriter.cpp#L291-L294

;;;","2023-07-12 06:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14852
Date: 2023-07-12 13:49:17 +0000;;;","2023-07-12 16:25;cjplummer;Added noreg-other label since the issue is not reproducible until JDK-8294969  is pushed.;;;","2023-07-12 20:30;dqu;Thanks for your information, Chris. An assertion like the following code snippet in `sun.jvm.hotspot.tools.jcore.ByteCodeRewriter` might also catch this.

short cpIndex = (short) cpCache.getIndyEntryAt(cpCacheIndex).getConstantPoolIndex();
Assert.that(cpool.getTagAt(cpIndex).isInvokeDynamic(), ""CP Entry should be InvokeDynamic"");

You could refer to my PR above.;;;","2023-07-13 11:19;iklam;I changed the name to ""SA ClassWriter generates invalid invokedynamic code"" since we have multiple ClassWriter.java in the JDK repo.;;;","2023-07-13 19:31;dqu;Yes, thank you, Ioi. I’ll update the PR name accordingly.;;;","2023-07-19 12:27;dukebot;Changeset: aa23fd98
Author:    Daohan Qu <dqu@openjdk.org>
Committer: Chris Plummer <cjplummer@openjdk.org>
Date:      2023-07-19 19:25:40 +0000
URL:       https://git.openjdk.org/jdk/commit/aa23fd98f528069f5c613f43e335a0585a490176
;;;",,,,,,,,,,,,,,,,
[Lilliput] Disallow accessing oop metadata vmStructs with +UCOH,JDK-8311875,5105239,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2023-07-11 06:53,2023-07-19 04:23,2023-10-01 09:55,2023-07-19 04:23,repo-lilliput,,,,,,repo-lilliput,hotspot,,0,lilliput,,,,,,,,,,,,,,,,,"Similar to JDK-8311866, but for mainline version.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311866,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3299f:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-11 07:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput/pull/101
Date: 2023-07-11 14:45:06 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
StructuredTaskScope.shutdown does not interrupt newly started threads,JDK-8311867,5105225,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alanb,dbessono,dbessono,2023-07-11 03:25,2023-07-25 04:41,2023-10-01 09:55,2023-07-13 00:34,21,,,,,,22,core-libs,,0,conformance,hgupdate-sync,loom,,,,,,,,,,,,,,,"The following doesn't complete (shutdown) in a short period of time as expected (checked on MacOS/arm64)

        for (int i = 0; i<10; i++) {
            try (var stof = new StructuredTaskScope.ShutdownOnFailure(""name"", r -> Thread.ofPlatform().unstarted(r))) {
                stof.fork(() -> {
                    Thread.sleep(Duration.ofMinutes(5));
                    return ""result 2"";
                });
                stof.fork(() -> {throw new RuntimeException(""exception 1""); });
                stof.fork(() -> {
                    Thread.sleep(Duration.ofMinutes(5));
                    return ""result 3"";
                });
                stof.join();
            }
        }


No problem seen if switching to Thread.ofVirtual() (and any number of iterations)",,,,,,,,,,,JDK-8312918,JDK-8312066,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3296b:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,,,"2023-07-11 04:34;alanb;I've changed the title on this issue to make it a bit clearer what this is about. This a timing bug with shutdown while new threads are starting. More specifically, the underlying thread flock is filtering out unstarted threads, which seems to be a left over from the original thread dump code in the loom repo.;;;","2023-07-11 23:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14833
Date: 2023-07-11 17:03:26 +0000;;;","2023-07-13 00:34;dukebot;Changeset: 92a04e20
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-07-13 07:33:01 +0000
URL:       https://git.openjdk.org/jdk/commit/92a04e201e68aa4d682053cef4b36180ec5620f5
;;;","2023-07-13 11:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/123
Date: 2023-07-13 15:58:24 +0000;;;",,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Disallow accessing oop metadata vmStructs with +UCOH,JDK-8311866,5105224,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,shade,shade,shade,2023-07-11 03:23,2023-07-12 08:34,2023-10-01 09:55,2023-07-12 08:34,repo-lilliput-17,,,,,,repo-lilliput-17,hotspot,,0,lilliput,,,,,,,,,,,,,,,,,"Allowing external tools to access e.g. `oopDesc::_metadata._klass` with `+UCOH` is error-prone. We have seen async-profiler poking into this field to resolve classes:
 
https://github.com/async-profiler/async-profiler/blob/117594bb4d1ce61b073c8a9cea438b33f3f09c81/src/vmStructs.cpp#L158-L161",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311875,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32963:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-11 03:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/51
Date: 2023-07-11 10:51:53 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
"GenShen: assertion failed ""Old generation affiliated regions must be less than capacity""",JDK-8311843,5105200,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,wkemper,wkemper,wkemper,2023-07-10 15:32,2023-08-29 13:52,2023-10-01 09:55,2023-08-29 13:52,repo-shenandoah,,,,,,,hotspot,,0,amazon-interest,gc-shenandoah,genshen,,,,,,,,,,,,,,,"This assertion failure has been observed in `TestAllocOutOfMemory.java` and `TestThreadFailure.java`.

```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/Users/runner/work/shenandoah/shenandoah/src/hotspot/share/gc/shenandoah/shenandoahFullGC.cpp:184), pid=6021, tid=18435
#  assert(heap->old_generation()->used_regions_size() <= heap->old_generation()->max_capacity()) failed: Old generation affiliated regions must be less than capacity
#
# JRE version: OpenJDK Runtime Environment (22.0) (fastdebug build 22-internal-earthling-amzn-5c2860661e52317ff513ca58924d71f1d8fff596)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 22-internal-earthling-amzn-5c2860661e52317ff513ca58924d71f1d8fff596, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, bsd-amd64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311883,,,,,,,,"2023-08-17 22:31;ysr;TestClassLoaderLeak.jtr;https://bugs.openjdk.org/secure/attachment/105159/TestClassLoaderLeak.jtr",,,,,,,,,,,,,,,,,,,,,,"0|i3290r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-07-28 15:09;ysr;Recently observed in GHA testing at https://github.com/ysramakrishna/shenandoah/actions/runs/5694503099 with the following tests:
* gc/shenandoah/oom/TestClassLoaderLeak
* gc/shenandoah/oom/TestThreadFailure

Seems to be pretty difficult to reproduce on my local repo so far.;;;","2023-08-15 15:22;ysr;I seem to now have a reproducible test case. I'll pick this up.;;;","2023-08-17 22:34;ysr;This appears to be an issue with the region affiliation accounting by a full gc.
A jtr file is attached from TestClassLoaderLeak with genshen w/adaptive tenuring enabled:

```
CONF=fastdebug make test TEST=""test/hotspot/jtreg/gc/shenandoah/oom/TestClassLoaderLeak.java""
```;;;","2023-08-18 11:41;ysr;Reprioritized to P2, since it's a fastdebug jtreg failure and indicates an invariant violation that might compromise subsequent operation.;;;","2023-08-21 12:08;ysr;This seems to be the crux of the issue. It appears as if, at least in my set up, I need `-ClassUnloading +ClassUnloadingWithConcMark +ShenandoahGenerationalAdaptiveTenuring` to be true and then this happens reliably. Need to look at the combination of class unloading flags to make sure that we don't end up with wires crossed. The test explicitly wants to check for this, per test modes and comments for each of the test modes, requiring the global setting `-ClassUnloading` to override local settings that might conflict. (Note to self: I'd like to also verify that configuration doesn't change if order of these flags is reversed etc.).
```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/ysr/workplace/ysr/genshen-ysr/shenandoah/src/hotspot/share/gc/shenandoah/shenandoahVerifier.cpp:433), pid=40059, tid=40069
#  guarantee(stats.span() <= generation_capacity) failed: After Full GC: generation (OLD) size spanned by regions (479) must not exceed current capacity (119M)
#
# JRE version: OpenJDK Runtime Environment (22.0) (slowdebug build 22-internal-adhoc.ysr.shenandoah)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 22-internal-adhoc.ysr.shenandoah, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1436c97]  ShenandoahGenerationStatsClosure::validate_usage(bool, char const*, ShenandoahGeneration*, ShenandoahCalculateRegionStatsClosure&)+0x249
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xmx128m -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+UseShenandoahGC -Xlog:gc*=info -XX:+ShenandoahVerify -XX:+VerifyBeforeGC -XX:+VerifyAfterGC -XX:ShenandoahGCMode=generational -XX:ShenandoahGCHeuristics=adaptive -XX:-ClassUnloading -XX:+ClassUnloadingWithConcurrentMark TestClassLoaderLeak test

Host: dev-dsk-ysr-2a-87502c94.us-west-2.amazon.com, Intel(R) Xeon(R) CPU E5-2676 v3 @ 2.40GHz, 40 cores, 157G, Amazon Linux release 2 (Karoo)
Time: Mon Aug 21 18:59:28 2023 UTC elapsed time: 2.399857 seconds (0d 0h 0m 2s)

---------------  T H R E A D  ---------------

Current thread (0x00007f2a9c209430):  VMThread ""VM Thread""          [id=40069, stack(0x00007f2a821fd000,0x00007f2a822fd000) (1024K)]

Stack: [0x00007f2a821fd000,0x00007f2a822fd000],  sp=0x00007f2a822fafe0,  free space=1015k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1436c97]  ShenandoahGenerationStatsClosure::validate_usage(bool, char const*, ShenandoahGeneration*, ShenandoahCalculateRegionStatsClosure&)+0x249  (shenandoahVerifier.cpp:433)
V  [libjvm.so+0x1433a3e]  ShenandoahVerifier::verify_at_safepoint(char const*, ShenandoahVerifier::VerifyRememberedSet, ShenandoahVerifier::VerifyForwarded, ShenandoahVerifier::VerifyMarked, ShenandoahVerifier::VerifyCollectionSet, ShenandoahVerifier::VerifyLiveness, ShenandoahVerifier::VerifyRegions, ShenandoahVerifier::VerifySize, ShenandoahVerifier::VerifyGCState)+0x972  (shenandoahVerifier.cpp:918)
V  [libjvm.so+0x143449b]  ShenandoahVerifier::verify_after_fullgc()+0x3d  (shenandoahVerifier.cpp:1173)
V  [libjvm.so+0x1374266]  ShenandoahFullGC::do_it(GCCause::Cause)+0x9b4  (shenandoahFullGC.cpp:383)
V  [libjvm.so+0x13735ae]  ShenandoahFullGC::op_full(GCCause::Cause)+0x2d4  (shenandoahFullGC.cpp:190)
V  [libjvm.so+0x1367757]  ShenandoahDegenGC::op_degenerated_futile()+0x35  (shenandoahDegeneratedGC.cpp:479)
V  [libjvm.so+0x13671e4]  ShenandoahDegenGC::op_degenerated()+0xb48  (shenandoahDegeneratedGC.cpp:349)
V  [libjvm.so+0x136663c]  ShenandoahDegenGC::entry_degenerated()+0xec  (shenandoahDegeneratedGC.cpp:86)
V  [libjvm.so+0x1432a23]  VM_ShenandoahDegeneratedGC::doit()+0x3b  (shenandoahVMOperations.cpp:67)
V  [libjvm.so+0x162ea3e]  VM_Operation::evaluate()+0xda  (vmOperations.cpp:71)
V  [libjvm.so+0x16985a6]  VMThread::evaluate_operation(VM_Operation*)+0x62  (vmThread.cpp:281)
V  [libjvm.so+0x1698e86]  VMThread::inner_execute(VM_Operation*)+0x3c4  (vmThread.cpp:435)
V  [libjvm.so+0x169927b]  VMThread::loop()+0x131  (vmThread.cpp:502)
V  [libjvm.so+0x169816c]  VMThread::run()+0xfa  (vmThread.cpp:175)
V  [libjvm.so+0x157e442]  Thread::call_run()+0x1a4  (thread.cpp:217)
V  [libjvm.so+0x1204afa]  thread_native_entry(Thread*)+0x1b9  (os_linux.cpp:783)

```;;;","2023-08-22 09:31;ysr;Reassigned to William as he's working on a fix.;;;","2023-08-25 10:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/311
Date: 2023-08-25 17:45:44 +0000;;;",,,,,,,,,,,,,,,,
Duplicate qualified enum constants not detected,JDK-8311825,5105177,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2023-07-10 08:30,2023-07-25 04:44,2023-10-01 09:55,2023-07-18 01:25,21,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,,"This code compiles fine:
```
public enum QualEnum {
    A, B;
    private void test() {
        switch (this) {
           case QualEnum.A -> {}
           case QualEnum.A -> {}
           case QualEnum.B -> {}
        }
    }
}
```

although it should not.
",,,,,,,,,,,JDK-8312924,JDK-8312084,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i328vn:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-07-13 05:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14870
Date: 2023-07-13 12:52:28 +0000;;;","2023-07-14 03:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/128
Date: 2023-07-14 09:58:28 +0000;;;","2023-07-18 01:25;dukebot;Changeset: b6827ff3
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-07-18 08:22:37 +0000
URL:       https://git.openjdk.org/jdk21/commit/b6827ff331b8a6ce89e50446788b1fcc626f4d92
;;;",,,,,,,,,,,,,,,,,,,,
AIX : test/jdk/java/foreign/TestLayouts.java fails because of different output - expected [[i4](struct)] but found [[I4](struct)],JDK-8311822,5105174,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pminborg,mbaesken,mbaesken,2023-07-10 08:09,2023-08-08 03:56,2023-10-01 09:55,2023-07-24 08:02,22,,,,,,22,core-libs,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"The jtreg test  jdk/java/foreign/TestLayouts.java  .
currently fails on AIX, it runs into this error  :
 
test TestLayouts.testStructSizeAndAlign(): success
test TestLayouts.testStructToString(): failure
java.lang.AssertionError: expected [[i4](struct)] but found [[I4](struct)]
        at org.testng.Assert.fail(Assert.java:99)
        at org.testng.Assert.failNotEquals(Assert.java:1037)
        at org.testng.Assert.assertEqualsImpl(Assert.java:140)
        at org.testng.Assert.assertEquals(Assert.java:122)
        at org.testng.Assert.assertEquals(Assert.java:629)
        at org.testng.Assert.assertEquals(Assert.java:639)
        at TestLayouts.testStructToString(TestLayouts.java:264)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:580)
        at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
        at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
        at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
        at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
        at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
        at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
        at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
        at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
        at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
        at org.testng.TestRunner.privateRun(TestRunner.java:764)
        at org.testng.TestRunner.run(TestRunner.java:585)
        at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
        at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
        at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
        at org.testng.SuiteRunner.run(SuiteRunner.java:286)
        at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
        at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
        at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
        at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
        at org.testng.TestNG.runSuites(TestNG.java:1069)
        at org.testng.TestNG.run(TestNG.java:1037)
        at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
        at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:580)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
        at java.base/java.lang.Thread.run(Thread.java:1570)
test TestLayouts.testUnionPaddingAndAlign(B1): success
test TestLayouts.testUnionPaddingAndAlign(C2): success
 
This might be related to the fact that AIX is big-endian.",,,,,,,,,,,JDK-8313665,JDK-8313942,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311630,,,,,,,,,,,ppc,,,,,,,,,,aix,,,,,"0|i328uz:",9223372036854775807,b08,,,,,,,,,,,"2023-07-10 20:23;amitkumar;I guess either this PR or similar change, could fix this test case:  https://github.com/openjdk/jdk/pull/14801/files#diff-85d59b266a1d8795247fe9de481098e56425da62a4e48d557c514328c5d5294c;;;","2023-07-11 07:59;rriggs;Please reassign if there is a more appropriate person to resolve this.;;;","2023-07-24 02:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14994
Date: 2023-07-24 09:51:33 +0000;;;","2023-07-24 08:02;dukebot;Changeset: d1cc2782
Author:    Per Minborg <pminborg@openjdk.org>
Date:      2023-07-24 15:00:47 +0000
URL:       https://git.openjdk.org/jdk/commit/d1cc2782606e8a3cfead9055aa845e48e851edd4
;;;","2023-08-01 15:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/157
Date: 2023-08-01 21:57:17 +0000;;;",,,,,,,,,,,,,,,,,,
Incorrect exhaustivity computation,JDK-8311815,5105167,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2023-07-10 07:30,2023-07-25 05:13,2023-10-01 09:55,2023-07-17 01:22,21,,,,,,22,tools,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"Originally reported here:
https://mail.openjdk.org/pipermail/compiler-dev/2023-July/023724.html

Consider the following code:
```
class Test22 {

  record Pair(I i1, I i2) {}

  sealed interface I {}

  record C() implements I {}

  record D() implements I {}

  void exhaustinvenessWithInterface(Pair pairI) {
    switch (pairI) {
      case Pair(D fst, C snd) -> {
      }
      case Pair(C fst, C snd) -> {
      }
      case Pair(C fst, I snd) -> {
      }
      case Pair(D fst, D snd) -> {
      }
    }
  }
}
```

The switch in this code should be exhaustive, but javac reports an exhaustivity error for this code:
```
$ javac Test22.java 
Test22.java:13: error: the switch statement does not cover all possible input values
    switch (pairI) {
    ^
1 error
```",,,,,,,,,,,JDK-8312159,JDK-8312955,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i328tf:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-07-13 08:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14872
Date: 2023-07-13 15:22:02 +0000;;;","2023-07-17 01:22;dukebot;Changeset: a4412166
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-07-17 08:19:51 +0000
URL:       https://git.openjdk.org/jdk/commit/a4412166ec8526db5e5e8e1ca324f86124055b30
;;;","2023-07-18 11:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/138
Date: 2023-07-18 18:25:29 +0000;;;",,,,,,,,,,,,,,,,,,,,
C1: Uninitialized PhiResolver::_loop field,JDK-8311813,5105165,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,crakoczy,shade,shade,2023-07-10 07:19,2023-09-20 08:44,2023-10-01 09:55,2023-07-12 12:25,11,17,21,22,8,,22,hotspot,,0,amazon-interest,c1,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,jdk8u-fix-request,oracle-triage-22,sonarcloud-found,starter,,,,,"SonarCloud complains that `PhiResolver::_loop` field is not initialized after leaving the constructor.

There is an assert in `PhiResolver::move`, which implies the default value should be `nullptr`:

```
void PhiResolver::move(ResolveNode* src, ResolveNode* dest) {
...
    // cylce in graph detected
    assert(_loop == nullptr, ""only one loop valid!"");
    _loop = dest;
...
}
```",,,,,,,,,,,JDK-8316611,JDK-8316221,JDK-8316612,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i328sz:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-10 23:15;thartmann;ILW = Uninitialized field, never observed, no workaround = MLH = P4;;;","2023-07-11 13:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14819
Date: 2023-07-10 23:47:56 +0000;;;","2023-07-12 12:25;dukebot;Changeset: 489a32fe
Author:    Chad Rakoczy <chadrako@amazon.com>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2023-07-12 19:24:18 +0000
URL:       https://git.openjdk.org/jdk/commit/489a32fe40e2a2c539296d51d4ffc0abc036d33c
;;;","2023-09-06 14:07;crakoczy;Fix Request (17u)

Clean trivial backport to fix uninitialized field;;;","2023-09-06 14:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1720
Date: 2023-09-06 21:09:24 +0000;;;","2023-09-06 14:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1721
Date: 2023-09-06 21:32:52 +0000;;;","2023-09-06 14:39;crakoczy;Fix Request (11u)

Clean trivial backport to fix uninitialized field;;;","2023-09-06 14:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2123
Date: 2023-09-06 21:40:00 +0000;;;","2023-09-06 14:53;crakoczy;Fix Request (8u)

Clean trivial backport to fix uninitialized field;;;","2023-09-06 14:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/369
Date: 2023-09-06 21:53:15 +0000;;;","2023-09-07 06:11;clanger;[~crakoczy], could you please backport the fix to jdk21u as well since this is the next LTS? Thanks.;;;","2023-09-07 09:19;crakoczy;Fix Request (21u)

Clean trivial backport to fix uninitialized field;;;","2023-09-07 09:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/141
Date: 2023-09-07 16:20:38 +0000;;;",,,,,,,,,,
Class ButtonAccessibility is implemented twice,JDK-8311806,5105153,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kizune,mpaus,mpaus,2023-07-10 04:11,2023-07-25 08:34,2023-10-01 09:55,2023-07-18 10:58,jfx21,,,,,,jfx22,javafx,,0,hgupdate-sync,sn_148,,,,,,,,,,,,,,,,"When I run a JavaFX application on macOS (Intel) Ventura I get the following warning message:
objc[9828]: Class ButtonAccessibility is implemented in both /Users/mpaus/.openjfx/cache/21-ea+null/x86_64/libglass.dylib (0x3a700c8c0) and /Library/Java/JavaVirtualMachines/jdk-20.0.1+9/Contents/Home/lib/libawt_lwawt.dylib (0x3abd52820). One of the two will be used. Which one is undefined.
I don't know whether this is an issue but probably something one should look into. Also note that the JavaFX build is reported as ""null"".","macOS Ventura Version 13.4.1 (22F82)
JavaFX 21-ea+24",,,,,,,,,,JDK-8312292,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301311,JDK-8301312,,,,,,,,,,,,,,,,,,,,,,,,,"0|i328qb:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7a09e639,,,,,,,,,"2023-07-10 11:04;kizune;It is not a problem but the warning might be misleading so i will rename FX a11y classes so they have some sort of prefix different from the AWT/Swing native part.;;;","2023-07-10 13:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1174
Date: 2023-07-10 20:39:34 +0000;;;","2023-07-18 10:58;dukebot;Changeset: ad5e66a7
Author:    Alexander Zuev <kizune@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-07-18 17:55:53 +0000
URL:       https://git.openjdk.org/jfx/commit/ad5e66a7ca31994ecbdae3fc7d0b951e0a6f8197
;;;","2023-07-18 10:59;kcr;Even though this is a P4 bug, it might be a good fix to backport to JDK 21 during RDP1.;;;","2023-07-18 13:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1179
Date: 2023-07-18 20:17:13 +0000;;;",,,,,,,,,,,,,,,,,,
"Clean up ScrollPane: drop redundant initialiser, mark scroller final",JDK-8311805,5105152,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2023-07-10 04:04,2023-07-12 14:00,2023-10-01 09:55,2023-07-11 12:44,11,17,21,22,8,,22,client-libs,,0,noreg-cleanup,sustaining,,,,,,,,,,,,,,,,"ScrollPane.layout has a redundant initialiser:
        Dimension vs = getViewportSize();
The value of 'vs' variable is reassigned below.

The scroller field in ScrollPane.PeerFixer can be final.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311689,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i328q3:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-07-11 04:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14827
Date: 2023-07-11 11:44:15 +0000;;;","2023-07-11 12:44;dukebot;Changeset: aac903db
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-07-11 19:41:42 +0000
URL:       https://git.openjdk.org/jdk/commit/aac903dbfb7dfb42464cad23aa9f1d536b55cfc1
;;;",,,,,,,,,,,,,,,,,,,,,
java/net/httpclient/ResponsePublisher.java fails intermittently with AssertionError: Found some outstanding operations,JDK-8311792,5105139,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dclarke,dfuchs,dfuchs,2023-07-10 02:11,2023-08-31 00:55,2023-10-01 09:55,2023-08-28 03:04,21,,,,,,22,core-libs,,0,httpclient,intermittent,tier2,,,,,,,,,,,,,,,"AssertionError: Found some outstanding operations or unreleased resources in 320 clients after 50 iterations and 3770 ms, waited 500 ms
Http1TestServer: stop
Http1TestServer: stop
Http2TestServerImpl: stop
Http2TestServerImpl: stop
config ResponsePublisher.teardown(): failure
java.lang.AssertionError: WARNING: tracker for HttpClientImpl(45) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(49) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(56) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(61) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(87) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(111) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(112) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(118) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(143) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(148) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(149) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(159) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(175) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(180) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(182) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(189) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(245) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(246) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(255) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(280) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(312) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(320) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
Found 0 client still active, with 0 operations still pending out of 320 tracked clients.
	at ReferenceTracker.check(ReferenceTracker.java:308)
	at ReferenceTracker.check(ReferenceTracker.java:121)
	at ResponsePublisher.teardown(ResponsePublisher.java:441)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:61)
	at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:366)
	at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:320)
	at org.testng.TestRunner.invokeTestConfigurations(TestRunner.java:617)
	at org.testng.TestRunner.afterRun(TestRunner.java:847)
	at org.testng.TestRunner.run(TestRunner.java:588)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,,"0|i328n7:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-07-10 02:17;dfuchs;The thread dumps shows some RUNNABLE thread in Thread::start, called from Http2Connection.close. It looks as if the test should be updated to wait for the previous client to be closed/GC'ed before starting the next test / iteration in order to avoid resource exhaustion.

Possibly the timeout waiting for client to terminate in teardown should also be extended,;;;","2023-08-16 05:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15307
Date: 2023-08-16 12:23:27 +0000;;;","2023-08-28 03:04;dukebot;Changeset: 1664e793
Author:    Darragh Clarke <dclarke@openjdk.org>
Date:      2023-08-28 10:03:42 +0000
URL:       https://git.openjdk.org/jdk/commit/1664e793eb725d6328751657d5718df96175da29
;;;",,,,,,,,,,,,,,,,,,,,
ClassLoadUnloadTest fails on AIX after JDK-8193513,JDK-8311788,5105134,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-07-10 00:58,2023-07-19 21:17,2023-10-01 09:55,2023-07-13 00:06,22,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,"The change JDK-8193513  enhanced the test runtime/logging/ClassLoadUnloadTest.java . Unfortunately the test started to fail after this on AIX :

----------System.err:(16/744)----------
 stdout: [];
 stderr: []
 exitValue = 0

java.lang.RuntimeException: '[class,load,cause]' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at ClassLoadUnloadTest.checkFor(ClassLoadUnloadTest.java:64)
	at ClassLoadUnloadTest.main(ClassLoadUnloadTest.java:128)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1570)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8193513,,,,,,,,,,,ppc,,,,,,,,,,aix,,,,,"0|i328m3:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-10 08:02;mbaesken;Looks like the StringCoding class is not loaded/initialized in e.g. a HelloWorld on AIX, compare  Linux vs. AIX :

/linuxx86_64/images/jdk/bin/java -Xlog:class*  Hello   |   grep StringCoding

[0.049s][info][class,load       ] java.lang.StringCoding source: shared objects file
[0.049s][info][class,init       ] 268 Initializing 'java/lang/StringCoding'(no method) (0x0000000800074450)

/rs6000_64/images/jdk/bin/java  -Xlog:class*   Hello   |   grep StringCoding
<nothing>

So probably some other class than StringCoding should be used in the test.
;;;","2023-07-11 06:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14829
Date: 2023-07-11 13:15:11 +0000;;;","2023-07-13 00:06;dukebot;Changeset: 812dadb0
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-07-13 07:05:57 +0000
URL:       https://git.openjdk.org/jdk/commit/812dadb0f9d59eae95b76d1f05570675bc33cc6f
;;;",,,,,,,,,,,,,,,,,,,,
Wrong visible amount in Adjustable of ScrollPane,JDK-8311689,5105034,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,aivanov,aivanov,aivanov,2023-07-09 10:57,2023-07-25 04:33,2023-10-01 09:55,2023-07-11 06:46,11.0.21-oracle,17.0.9-oracle,21,22,8u391,,22,client-libs,,0,11-bp,17-bp,21-bp,8-bp,cssn23_07_01,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,regression,regression_8297923,sustaining,,,,,"When ScrollPane is laid out, it may use stale insets and therefore wrong size of the viewport to set the visible amount in its Adjustable instances. For this reason, it may not allow scrolling to view the entire content of its child component.",,,,,,,,,,,JDK-8311889,JDK-8311891,JDK-8312589,JDK-8312901,JDK-8312681,JDK-8311887,JDK-8311886,JDK-8312225,,,,,,,,,,,JDK-8311632,,,,,JDK-8297923,JDK-8310054,,,JDK-8311805,,,,,,,,,,,,,,,,,,b26,21,,windows,,,,,"0|i327zv:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-07-09 10:58;aivanov;This bug is similar in its nature to JDK-8310054, it's just in a different location which I overlooked.;;;","2023-07-10 10:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14815
Date: 2023-07-10 17:23:22 +0000;;;","2023-07-11 06:46;dukebot;Changeset: b3f34039
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-07-11 13:43:15 +0000
URL:       https://git.openjdk.org/jdk/commit/b3f34039fedd3c49404783ec880e1885dceb296b
;;;","2023-07-11 07:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/111
Date: 2023-07-11 14:47:58 +0000;;;","2023-07-13 05:46;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
Follow up to 8297923.
Clean on top of the two predecessors.
SAP nightly testing passed. Test passes on Win.;;;","2023-07-13 07:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1578
Date: 2023-07-13 12:28:57 +0000;;;","2023-07-18 04:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2047
Date: 2023-07-18 11:38:26 +0000;;;","2023-07-23 02:03;goetz;ix request [11u]

I backport this for parity with 11.0.21-oracle.
Required follow up of 8297923.
Clean backport from 17 of combined change.
SAP nighlty testing passed. Tests pass on win for combined change.;;;",,,,,,,,,,,,,,,
Disabled tests in test/jdk/sun/java2d/marlin,JDK-8311666,5105012,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cushon,cushon,cushon,2023-07-07 16:19,2023-07-12 13:56,2023-10-01 09:55,2023-07-10 09:16,11,17,21,22,8,,22,client-libs,,0,amazon-interest,,,,,,,,,,,,,,,,,"Several tests in test/jdk/sun/java2d/marlin are not being run because they are missing jtreg @test comments.

The tests are

* ScaleTest.java added in https://bugs.openjdk.java.net/browse/JDK-6829659 - 
* StrokeShapeTest.java added in https://bugs.openjdk.java.net/browse/JDK-6829678
* ThinLineTest.java added in https://bugs.openjdk.java.net/browse/JDK-6829673

This bug tracks enabling the skipped tests.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6829678,JDK-6829673,JDK-6829659,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i327uz:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-07-07 16:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14807
Date: 2023-07-07 23:20:05 +0000;;;","2023-07-10 09:16;dukebot;Changeset: b285ed72
Author:    Liam Miller-Cushon <cushon@openjdk.org>
Date:      2023-07-10 16:13:06 +0000
URL:       https://git.openjdk.org/jdk/commit/b285ed72aebe2d802fa9c071372cea6c09870b9a
;;;",,,,,,,,,,,,,,,,,,,,,
Memory leak in Java_jdk_internal_org_jline_terminal_impl_jna_linux_CLibraryImpl_ttyname_1r,JDK-8311647,5104987,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2023-07-07 04:32,2023-07-25 04:43,2023-10-01 09:55,2023-07-13 15:10,21,22,,,,,22,tools,,0,hgupdate-sync,regression,sonarcloud-found,starter,,,,,,,,,,,,,,"Introduced by JDK-8306983. On error path, we do not `delete` the recently allocated `data`.

At least two spots:

https://github.com/openjdk/jdk/blob/0ef03f122866f010ebf50683097e9b92e41cdaad/src/jdk.internal.le/macosx/native/lible/CLibrary.cpp#L193C22-L193C22

https://github.com/openjdk/jdk/blob/0ef03f122866f010ebf50683097e9b92e41cdaad/src/jdk.internal.le/linux/native/lible/CLibrary.cpp#L189",,,,,,,,,,,JDK-8312100,JDK-8312921,,,,,,,,,,,,,,,,,,,,,,JDK-8306983,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i327pf:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2023-07-11 09:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14832
Date: 2023-07-11 16:51:15 +0000;;;","2023-07-13 15:10;dukebot;Changeset: 43099a85
Author:    Jenny Shivayogi <kspeeyu@amazon.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-07-13 22:09:21 +0000
URL:       https://git.openjdk.org/jdk/commit/43099a85b16f036666d4e93106d2908ad75f9216
;;;","2023-07-14 02:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/126
Date: 2023-07-14 09:23:38 +0000;;;",,,,,,,,,,,,,,,,,,,,
Memory leak in jspawnhelper spawnChild after JDK-8307990,JDK-8311645,5104985,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2023-07-07 04:14,2023-07-25 04:39,2023-10-01 09:55,2023-07-11 09:57,21,22,,,,,22,core-libs,,0,amazon-interest,hgupdate-sync,noreg-hard,regression,sonarcloud-found,starter,,,,,,,,,,,,"JDK-8307990 introduced two conditional return statements that return without free-ing the allocated `buf`.

Here:
 1. https://github.com/openjdk/jdk/commit/39f6d807dbbe0c9ecd72fe2f76bfbc3091b43c80#diff-ffbcab6325b2ae4b57a81e39c51c155cb2dab372bc915060dfc47159c345797fR561
 2. https://github.com/openjdk/jdk/commit/39f6d807dbbe0c9ecd72fe2f76bfbc3091b43c80#diff-ffbcab6325b2ae4b57a81e39c51c155cb2dab372bc915060dfc47159c345797fR569",,,,,,,,,,,JDK-8312912,JDK-8312025,,,,,,,,,,,,,,,,,,,,,,JDK-8307990,,,,,,,,,,,,,,,,,,,,,,b26,21,,,,,,,"0|i327oz:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-07-10 11:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14809
Date: 2023-07-08 02:05:27 +0000;;;","2023-07-11 09:57;dukebot;Changeset: 401c3dea
Author:    Jenny Shivayogi <kspeeyu@amazon.com>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2023-07-11 16:55:23 +0000
URL:       https://git.openjdk.org/jdk/commit/401c3dea5d8823bc9c0f40506ddad46e983ebf68
;;;","2023-07-13 01:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/120
Date: 2023-07-13 08:31:37 +0000;;;",,,,,,,,,,,,,,,,,,,,
"When multiple users run tools/jpackage/share/LicenseTest.java, Permission denied for writing /var/tmp/*.files",JDK-8311631,5104969,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenyuk,lzhai,lzhai,2023-07-07 00:43,2023-09-27 00:04,2023-10-01 09:55,2023-07-24 09:24,21,22,,,,,22,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,noreg-self,,,,,,,,,,,,"Sun Yaqi reported:

The prerequisite is to install the rpmbuild command, when multiple users switch to write /var/tmp/*.files will have the permission forbidden.

The complete test output follows:

    /var/tmp/rpm-tmp.jW3o4P: line 47: /var/tmp/commonlicensetest.app.files: Permission denied
    error: Bad exit status from /var/tmp/rpm-tmp.jW3o4P (%install)

    RPM build errors:
        Bad exit status from /var/tmp/rpm-tmp.jW3o4P (%install)
[11:04:54.440] Returned: 1

[11:04:54.440] java.io.IOException: Command [rpmbuild, -bb, /tmp/jdk.jpackage13540147031297722847/SPECS/commonlicensetest.spec, --define, %_sourcedir /tmp/jdk.jpackage13540147031297722847/images, --define, %_rpmdir /home/sunyaqi/jdk-ls/build/linux-x86_64-server-release/test-support/jtreg_test_jdk_tools_jpackage_share_LicenseTest_java/scratch/0/./testCommon/output, --define, %_topdir /tmp/jdk.jpackage13540147031297722847, --define, %_rpmfilename commonlicensetest-1.0-1.x86_64.rpm] exited with 1 code
    at jdk.jpackage/jdk.jpackage.internal.Executor.executeExpectSuccess(Executor.java:90)
    at jdk.jpackage/jdk.jpackage.internal.LinuxRpmBundler.buildRPM(LinuxRpmBundler.java:313)
    at jdk.jpackage/jdk.jpackage.internal.LinuxRpmBundler.buildPackageBundle(LinuxRpmBundler.java:165)
    at jdk.jpackage/jdk.jpackage.internal.LinuxPackageBundler.execute(LinuxPackageBundler.java:163)
    at jdk.jpackage/jdk.jpackage.internal.Arguments.generateBundle(Arguments.java:688)
    at jdk.jpackage/jdk.jpackage.internal.Arguments.processArguments(Arguments.java:553)
    at jdk.jpackage/jdk.jpackage.main.Main.execute(Main.java:92)
    at jdk.jpackage/jdk.jpackage.main.Main.main(Main.java:53)
[11:04:54.503] jdk.jpackage.internal.PackagerException: java.io.IOException: Command [rpmbuild, -bb, /tmp/jdk.jpackage13540147031297722847/SPECS/commonlicensetest.spec, --define, %_sourcedir /tmp/jdk.jpackage13540147031297722847/images, --define, %_rpmdir /home/sunyaqi/jdk-ls/build/linux-x86_64-server-release/test-support/jtreg_test_jdk_tools_jpackage_share_LicenseTest_java/scratch/0/./testCommon/output, --define, %_topdir /tmp/jdk.jpackage13540147031297722847, --define, %_rpmfilename commonlicensetest-1.0-1.x86_64.rpm] exited with 1 code
    at jdk.jpackage/jdk.jpackage.internal.LinuxPackageBundler.execute(LinuxPackageBundler.java:176)
    at jdk.jpackage/jdk.jpackage.internal.Arguments.generateBundle(Arguments.java:688)
    at jdk.jpackage/jdk.jpackage.internal.Arguments.processArguments(Arguments.java:553)
    at jdk.jpackage/jdk.jpackage.main.Main.execute(Main.java:92)
    at jdk.jpackage/jdk.jpackage.main.Main.main(Main.java:53)
Caused by: java.io.IOException: Command [rpmbuild, -bb, /tmp/jdk.jpackage13540147031297722847/SPECS/commonlicensetest.spec, --define, %_sourcedir /tmp/jdk.jpackage13540147031297722847/images, --define, %_rpmdir /home/sunyaqi/jdk-ls/build/linux-x86_64-server-release/test-support/jtreg_test_jdk_tools_jpackage_share_LicenseTest_java/scratch/0/./testCommon/output, --define, %_topdir /tmp/jdk.jpackage13540147031297722847, --define, %_rpmfilename commonlicensetest-1.0-1.x86_64.rpm] exited with 1 code
    at jdk.jpackage/jdk.jpackage.internal.Executor.executeExpectSuccess(Executor.java:90)
    at jdk.jpackage/jdk.jpackage.internal.LinuxRpmBundler.buildRPM(LinuxRpmBundler.java:313)
    at jdk.jpackage/jdk.jpackage.internal.LinuxRpmBundler.buildPackageBundle(LinuxRpmBundler.java:165)
    at jdk.jpackage/jdk.jpackage.internal.LinuxPackageBundler.execute(LinuxPackageBundler.java:163)
    ... 4 more
[11:04:54.571] TRACE: exec: Done. Exit code: 1
[11:04:54.576] ERROR: Expected [0]. Actual [1]: Check command [/home/sunyaqi/jdk-ls/build/linux-x86_64-server-release/images/jdk/bin/jpackage --input ./testCommon/input --dest ./testCommon/output --name CommonLicenseTest --type rpm --main-jar hello.jar --main-class Hello --license-file testCommon/license.txt -J-Djlink.debug=true --verbose](17) exited with 0 code
[11:04:54.577] [  FAILED  ] LicenseTest.testCommon; checks=4
[11:04:54.579] [==========] 1 tests ran
[11:04:54.579] [  PASSED  ] 0 tests
[11:04:54.581] [  FAILED  ] 1 test, listed below
[11:04:54.581] [  FAILED  ] LicenseTest.testCommon; workDir=[./testCommon]
[11:04:54.581] 1 FAILED TEST
----------System.err:(55/3890)----------
java.lang.AssertionError: Expected [0]. Actual [1]: Check command [/home/sunyaqi/jdk-ls/build/linux-x86_64-server-release/images/jdk/bin/jpackage --input ./testCommon/input --dest ./testCommon/output --name CommonLicenseTest --type rpm --main-jar hello.jar --main-class Hello --license-file testCommon/license.txt -J-Djlink.debug=true --verbose](17) exited with 0 code
    at jdk.jpackage.test.TKit.error(TKit.java:273)
    at jdk.jpackage.test.TKit.assertEquals(TKit.java:576)
    at jdk.jpackage.test.Executor$Result.assertExitCodeIs(Executor.java:186)
    at jdk.jpackage.test.Executor.execute(Executor.java:224)
    at jdk.jpackage.test.JPackageCommand.execute(JPackageCommand.java:780)
    at jdk.jpackage.test.PackageTest$Handler.accept(PackageTest.java:587)
    at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:501)
    at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:413)
    at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
    at java.base/java.lang.Iterable.forEach(Iterable.java:75)
    at jdk.jpackage.test.PackageTest.lambda$runActions$24(PackageTest.java:383)
    at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
    at jdk.jpackage.test.PackageTest.lambda$runActions$25(PackageTest.java:382)
    at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
    at jdk.jpackage.test.PackageTest.runActions(PackageTest.java:381)
    at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:58)
    at LicenseTest.testCommon(LicenseTest.java:104)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
    at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
    at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:141)
    at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:126)
    at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1707)
    at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
    at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:123)
    at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
    at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
    at jdk.jpackage.test.TKit.runTests(TKit.java:122)
    at jdk.jpackage.test.Main.runTests(Main.java:79)
    at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
    at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
    at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
    at jdk.jpackage.test.Main.main(Main.java:75)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
    at java.base/java.lang.Thread.run(Thread.java:1583)",,,,,,,,,,,JDK-8316093,JDK-8317004,,,,,,,,,,,,,,,,,,,,,,JDK-8314121,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i327lf:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-07-07 10:38;asemenyuk;Why would somebody run multiple instances of some jpackage test asynchronously?;;;","2023-07-08 03:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14802
Date: 2023-07-07 09:51:23 +0000;;;","2023-07-09 23:40;lzhai;Hi Alexey,

Sun Yaqi replied:

The testing process is briefly described as follows：
After user sunyaqi successfully executes jpackage, switches to user b permission denied to write /var/tmp/*.files.
Indicates the user group to which /var/tmp/*.files belongs when user sunyaqi successfully executes jpackage:

-rw-r--r-- 1 sunyaqi       sunyaqi         4492 7月  10 11:24 addlaunchertest.app.files
-rw-r--r-- 1 sunyaqi       sunyaqi        18682 7月  10 11:24 addlaunchertest.files
-rw-r--r-- 1 sunyaqi       sunyaqi       432296 7月  10 11:24 addlaunchertest.filesystem.files
-rw-r--r-- 1 sunyaqi       sunyaqi         5372 7月  10 11:22 bug8230933addlaunchertest.app.files
-rw-r--r-- 1 sunyaqi       sunyaqi        25346 7月  10 11:22 bug8230933addlaunchertest.files
-rw-r--r-- 1 sunyaqi       sunyaqi       432296 7月  10 11:22 bug8230933addlaunchertest.filesystem.files
-rw-r--r-- 1 sunyaqi       sunyaqi         4746 7月  10 11:48 commonlicensetest.app.files
-rw-r--r-- 1 sunyaqi       sunyaqi        21032 7月  10 11:48 commonlicensetest.files
-rw-r--r-- 1 sunyaqi       sunyaqi       432296 7月  10 11:48 commonlicensetest.filesystem.files

Switching between different users' accounts is able to reproduce the issue.

Thanks,
Leslie Zhai;;;","2023-07-11 18:49;asemenyuk;The problem seems to be with the use of `%{_tmppath}` rpm macro as the root for intermediate files required to assemble an rpm package during ""rpmbuild"" command execution triggered by jpackage.
%{_tmppath} expands into /var/tmp, i.e. not a user-specific directory.
%{_builddir} expands to a user-specific directory and is a better alternative to %{_tmppath}. Besides files created in %{_tmppath} and not cleaned up when ""rpmbuild"" command completes.;;;","2023-07-24 09:24;dukebot;Changeset: fac9f88c
Author:    sunyaqi <sunyaqi@loongson.cn>
Committer: Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2023-07-24 16:22:57 +0000
URL:       https://git.openjdk.org/jdk/commit/fac9f88c52a07d972bad48d9ec116cb7e0fc5052
;;;","2023-09-08 00:12;mbaesken;jdk21u backport request
I would like to have the patch in jdk21u as well, because the issue is present there too.  The backport is low risk and applies cleanly.;;;","2023-09-08 00:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/144
Date: 2023-09-08 07:09:47 +0000;;;","2023-09-26 06:18;mbaesken;jdk17u-dev backport request
I would like to have the patch in jdk17u-dev as well, because the issue is present there too. The backport is low risk and applies cleanly.;;;","2023-09-26 06:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1796
Date: 2023-09-26 13:12:31 +0000;;;",,,,,,,,,,,,,,
Change read_icc_profile() to static function in java.desktop/share/native/libjavajpeg/imageioJPEG.c,JDK-8311606,5104940,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiangli,jiangli,jiangli,2023-07-06 16:10,2023-07-12 13:59,2023-10-01 09:55,2023-07-11 09:55,22,,,,,,22,client-libs,,0,,,,,,,,,,,,,,,,,,"Changing read_icc_profile() in java.desktop/share/native/libjavajpeg/imageioJPEG.c to static function can avoid potential duplicate symbol issue when statically linking with JDK. The specific symbol could be defined in certain jpeg library.

Following is an example of the linking failure:

```
ld: error: duplicate symbol: read_icc_profile
>>> defined at imageioJPEG.c:1295 (/.../java.desktop/share/native/libjavajpeg/imageioJPEG.c:1295)
>>>            libjavajpeg_relocatable.o:(read_icc_profile) in archive .../lib_static/libjavajpeg.a
>>> defined at iccjpeg.c
>>>            .../iccjpeg.o:(.text+0x0)
clang: error: linker command failed with exit code 1 (use -v to see invocation)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303796,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i327ez:",9223372036854775807,b06,,,,,,,,,,,"2023-07-06 17:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14794
Date: 2023-07-07 00:44:33 +0000;;;","2023-07-11 09:55;dukebot;Changeset: e154b0d6
Author:    Jiangli Zhou <jiangli@openjdk.org>
Date:      2023-07-11 16:53:44 +0000
URL:       https://git.openjdk.org/jdk/commit/e154b0d6cdde3071b2c43abd8aacc79c51914564
;;;",,,,,,,,,,,,,,,,,,,,,
GenShen: Missing card mark barrier when processing references,JDK-8311599,5104933,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wkemper,wkemper,wkemper,2023-07-06 13:26,2023-07-06 15:39,2023-10-01 09:55,2023-07-06 15:39,repo-shenandoah,,,,,,,hotspot,,0,gc-shenandoah,genshen,,,,,,,,,,,,,,,,"Following crash was observed executing `eclipse` benchmark of dacapo suite:
```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/codebuild/output/src4279/src/s3/00/src/hotspot/share/oops/compressedOops.inline.hpp:140), pid=6003, tid=6042
#  assert(check_alignment(result)) failed: address not aligned: 0x00000008baadbabe
#
# JRE version: OpenJDK Runtime Environment (21.0) (fastdebug build 21-root-shenandoah-x86-template.389bb7)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 21-root-shenandoah-x86-template.389bb7, mixed mode, sharing, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Core dump will be written. Default location: /codebuild/output/src156/src/s3/00/results/core.6003.%i
#
# An error report file with more information is saved as:
# results/genshen/dacapo/1/hs_err_pid6003.log
```

The command line was:
```
java -XX:ErrorFile=results/genshen/dacapo/1/hs_err_pid%p.log -XX:-TieredCompilation -XX:+UseShenandoahGC -XX:+UnlockExperimentalVMOptions -XX:ShenandoahGCMode=generational -XX:-ShenandoahPacing -XX:+UnlockDiagnosticVMOptions -XX:-ShenandoahUncommit -Xms12g -Xmx12g -XX:+ShenandoahVerify -XX:+UnlockDiagnosticVMOptions -XX:+ShenandoahAllocFailureALot -javaagent:/tmp/jHiccup.jar=-l,results/genshen/dacapo/1/eclipse.jhiccup.log,-i,1000,-a -Xlog:async -Xlog:gc*=info,safepoint*=info,handshake*=info:results/genshen/dacapo/1/eclipse.jvm.log::filecount=0,filesize=0 -jar /tmp/dacapo-evaluation-git-0d047f55.jar --scratch-directory /tmp/dacapo-scratch/dacapo --no-validation --latency-csv --converge --variance 5 --log-directory /tmp/dacapo-scratch/eclipse eclipse
```
Stack trace indicates a problem with remembered set scanning (perhaps problem for verifier itself):

```
V  [libjvm.so+0xad48b3]  report_vm_error(char const*, int, char const*, char const*, ...)+0xf3
V  [libjvm.so+0x61a69c]
V  [libjvm.so+0x1816822]  void ShenandoahVerifyOopClosure::do_oop_work<narrowOop>(narrowOop*)+0x132
V  [libjvm.so+0x1751af3]  void InstanceRefKlass::oop_oop_iterate_discovery<narrowOop, OopIterateClosure, MrContains const>(oop, ReferenceType, OopIterateClosure*, MrContains const&)+0x103
V  [libjvm.so+0x1752150]  void OopOopIterateBoundedDispatch<OopIterateClosure>::Table::oop_oop_iterate_bounded<InstanceRefKlass, narrowOop>(OopIterateClosure*, oop, Klass*, MemRegion)+0x5b0
V  [libjvm.so+0x17d137b]  void ShenandoahScanRemembered<ShenandoahDirectCardMarkRememberedSet>::process_clusters<OopIterateClosure>(unsigned long, unsigned long, HeapWordImpl**, OopIterateClosure*, bool, unsigned int)+0x89b
V  [libjvm.so+0x17d2972]  ShenandoahScanRemembered<ShenandoahDirectCardMarkRememberedSet>::roots_do(OopIterateClosure*)+0x272
V  [libjvm.so+0x17d0786]  ShenandoahRootVerifier::roots_do(OopIterateClosure*)+0x266
V  [libjvm.so+0x1818225]  ShenandoahVerifierReachableTask::work(unsigned int)+0x855
```

When reference processing threads operate on the discovered list, they may create old-to-young pointers. Such pointers need to be recorded in the remembered set.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i327df:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-07-06 13:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/294
Date: 2023-07-06 20:20:17 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Minor doc issue in MemorySegment::copy,JDK-8311593,5104927,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mcimadamore,jvernee,jvernee,2023-07-06 09:35,2023-07-25 04:33,2023-10-01 09:55,2023-07-11 14:48,repo-panama,,,,,,22,core-libs,,0,foreign-memaccess+abi,hgupdate-sync,noreg-doc,,,,,,,,,,,,,,,"The copy overloads:

    static void copy(MemorySegment srcSegment, long srcOffset,
                     MemorySegment dstSegment, long dstOffset, long bytes)

And

    static void copy(MemorySegment srcSegment, ValueLayout srcElementLayout, long srcOffset,
                     MemorySegment dstSegment, ValueLayout dstElementLayout, long dstOffset,
                     long elementCount)

Refer to 'this segment' in their javadoc:

    If the source segment overlaps with *this segment*...

This should the 'the destination segment' instead. Since both of these methods are static, there is no 'this segment'.",,,,,,,,,,,JDK-8312902,JDK-8311900,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i327c3:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-07-10 04:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14813
Date: 2023-07-10 11:00:54 +0000;;;","2023-07-10 08:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/107
Date: 2023-07-10 15:08:00 +0000;;;","2023-07-10 17:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/109
Date: 2023-07-11 00:40:40 +0000;;;",,,,,,,,,,,,,,,,,,,,
ECKeySizeParameterSpec causes too many exceptions on third party providers,JDK-8311592,5104926,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,ascarpino,ascarpino,ascarpino,2023-07-06 09:24,2023-09-15 07:15,2023-10-01 09:55,2023-07-25 08:50,11-pool,17-pool,21-pool,22,,,22,security-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,noreg-hard,oracle-bp,,,,,,,,,,,"ECKeySizeParameterSpec is an internal class used by ECUtil and SunEC for generating EC keys.  When ECUtil.getParameterSpec() calls a third party provider with ECKeySizeParameterSpec, InvalidParameterSpecException is thrown before trying again with the public ECParameterSpec is used.  Applications with many EC keygen calls, such as TLS, can create and handle an excessive number of InvalidParameterSpecException objects",,,,,,,,,,,JDK-8314686,JDK-8316364,JDK-8315632,JDK-8314687,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i327bv:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2023-07-20 17:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14916
Date: 2023-07-18 03:58:50 +0000;;;","2023-07-25 08:50;dukebot;Changeset: e554fdee
Author:    Anthony Scarpino <ascarpino@openjdk.org>
Date:      2023-07-25 15:48:31 +0000
URL:       https://git.openjdk.org/jdk/commit/e554fdee254ce51d605fe127b73644620e87e23b
;;;","2023-08-23 07:18;coffeys;Fix Request:
Reduce the excessive number of InvalidParameterSpecException objects created in TLS environments where non-JDK provider may be in use;;;","2023-08-25 00:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/101
Date: 2023-08-25 06:52:51 +0000;;;","2023-09-13 05:10;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
Medium risk, small change but to essential component.
Clean backport. SAP nightly testing passed.;;;","2023-09-13 05:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1733
Date: 2023-09-13 12:09:21 +0000;;;",,,,,,,,,,,,,,,,,
Add SystemModulesPlugin test case that splits module descriptors with new local variables defined by DedupSetBuilder,JDK-8311591,5104924,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,mchung,mchung,2023-07-06 09:05,2023-09-05 08:31,2023-10-01 09:55,2023-08-15 15:37,22,,,,,,22,tools,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,testonly,,,,,,,,,,,,,,"jlink --system-modules plugin may create the module descriptors in chunks by multiple methods.   Need to extend SystemModulesPlugin test case that splits module descriptors with new local variables defined by DedupSetBuilder.   The test modules would need to use qualified exports/opens and uses.
",,,,,,,,,,,JDK-8315704,,,,,,,,,,,,,,,,,,,,,,,JDK-8240567,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i327bf:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2023-08-10 14:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15234
Date: 2023-08-10 21:42:41 +0000;;;","2023-08-15 15:37;dukebot;Changeset: bc8e9f44
Author:    Christoph Schwentker <siedlerkiller@gmail.com>
Committer: Mandy Chung <mchung@openjdk.org>
Date:      2023-08-15 22:34:37 +0000
URL:       https://git.openjdk.org/jdk/commit/bc8e9f44a39ff59b59b2d1d5d546a148be75a2f2
;;;","2023-08-16 11:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/66
Date: 2023-08-16 18:26:57 +0000;;;","2023-09-01 09:32;mchung;JDK 21u Fix Request

Test only fix.  This is an additional test added to verify JDK-8240567 which has been backport to JDK 21u.  

The PR is https://github.com/openjdk/jdk21u/pull/127.;;;","2023-09-01 10:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/126
Date: 2023-09-01 17:12:39 +0000;;;","2023-09-01 10:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/127
Date: 2023-09-01 17:33:10 +0000;;;",,,,,,,,,,,,,,,,,
C2: RepeatCompilation compiler directive does not choose stress seed randomly,JDK-8311588,5104921,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,chagedorn,chagedorn,chagedorn,2023-07-06 08:03,2023-09-04 06:12,2023-10-01 09:55,2023-07-10 00:45,17,22,,,,,22,hotspot,,0,c2,compilercontrol,oracle-triage-22,,,,,,,,,,,,,,,"Using the compiler directive RepeatCompilation, to only repeat a subset of the compilations, in combination with StressIGVN/CCP/GCM/LCM, only sets the stress seed once to a random value. Afterward, it keeps the seed for all repeated compilations. This should be changed to always select a random seed as we are already doing for -XX:RepeatCompilation=X.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272703,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i327ar:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-06 08:12;chagedorn;ILW = Not selecting a random seed with RepeatCompilation directive, only with this directive and stress flags, no workaround = LLH = P5;;;","2023-07-06 08:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14786
Date: 2023-07-06 15:11:05 +0000;;;","2023-07-10 00:45;dukebot;Changeset: 06a1a15d
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2023-07-10 07:44:16 +0000
URL:       https://git.openjdk.org/jdk/commit/06a1a15d014f5ca48f62f5f0c8e8682086c4ae0b
;;;",,,,,,,,,,,,,,,,,,,,
Add JRadioButtonMenuItem to bug8031573.java,JDK-8311585,5104918,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rmahajan,aivanov,aivanov,2023-07-06 06:36,2023-09-14 00:22,2023-10-01 09:55,2023-09-01 14:51,11,17,22,8,,,22,client-libs,,0,cssn23_08_01,cssn23_08_02,hidpi,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,noreg-self,sustaining,,,,,,,,,,"The javax/swing/JMenuItem/8031573/bug8031573.java test displays a JCheckBoxMenuItem to verify whether the checkmark is rendered crisp on High DPI displays.

A JRadioButtonMenuItem should be added to the menu in the bug8031573.java test to ensure radio mark is also rendered crisp.",,,,,,,,,,,JDK-8316267,JDK-8316041,JDK-8316216,JDK-8316139,,,,,,,,,,,,,,,,,,,,JDK-8031573,JDK-8294427,,,,,,,,,,,,,,,,,,,,,,8u20,,,,,,,"0|i327a3:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-08-27 14:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15441
Date: 2023-08-27 21:41:43 +0000;;;","2023-09-01 14:51;dukebot;Changeset: 4f90abaf
Author:    Rajat Mahajan <rmahajan@openjdk.org>
Committer: Harshitha Onkar <honkar@openjdk.org>
Date:      2023-09-01 21:49:49 +0000
URL:       https://git.openjdk.org/jdk/commit/4f90abaf17716493bad740dcef76d49f16d69379
;;;","2023-09-08 13:03;rmahajan;Fix request (21u)
Clean backport. It is a minor code change to an existing test to expand its coverage and needs to be backported to previous JDK versions

https://github.com/openjdk/jdk21u/pull/148;;;","2023-09-08 14:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/148
Date: 2023-09-08 20:54:37 +0000;;;",,,,,,,,,,,,,,,,,,,
tableswitch broken by JDK-8310577,JDK-8311583,5104916,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,coleenp,coleenp,2023-07-06 06:10,2023-07-19 21:19,2023-10-01 09:55,2023-07-13 06:21,22,,,,,,22,hotspot,,0,verifier,,,,,,,,,,,,,,,,,"The fix for the -Wconversion errors broke the verifier for tableswitch and lookupswitch, that use 64 bit integers to do range checking.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310577,,,,,,,,,,,,,,,,,,,,,,,22,,,,,,,"0|i3279n:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-06 12:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14788
Date: 2023-07-06 19:53:46 +0000;;;","2023-07-13 06:21;dukebot;Changeset: 135f64e6
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-07-13 13:20:52 +0000
URL:       https://git.openjdk.org/jdk/commit/135f64e603266e0bb8852edf77d21a9cd79388ce
;;;",,,,,,,,,,,,,,,,,,,,,
Remove spec change docs for JEPs 440 and 441 from the closed repo,JDK-8311565,5104898,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbierman,gbierman,gbierman,2023-07-06 02:33,2023-07-25 04:49,2023-10-01 09:55,2023-07-07 14:03,,,,,,,22,specification,,0,hgupdate-sync,noreg-doc,,,,,,,,,,,,,,,,"As JEPs 440 and 441 finalise their features into the language and the JLS, there is no need to keep their corresponding spec change documents in the repo.",,,,,,,,,,,JDK-8312934,JDK-8311665,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3275n:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7441ef8d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] deadlock with JVMTI thread suspension,JDK-8311557,5104887,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,never,never,never,2023-07-05 23:01,2023-08-21 13:59,2023-10-01 09:55,2023-08-15 08:46,22,,,,,,22,hotspot,,0,jvmci,oracle-triage-22,,,,,,,,,,,,,,,,"The JVMCI compiler threads can be suspended by JVMTI because they aren't hidden from external view.  If it's suspended while background compilation is disabled then it's possible to deadlock.  For example vmTestbase/nsk/jdb/resume/resume002/resume002.java deadlocks because the JVMCI compiler thread is suspended while holding the MethodCompileQueue_lock and a blocking compile has been requested by the JDWP thread.  This seems to affect a bunch of the debugging tests.

At a minimum I think we should make CompilerThread::is_hidden_from_external_view return true for UseJVMCINativeLibrary.  We're still exposed to this problem with jargraal though but it's not quite clear how to we could fix that.

The following call stacks below show the hang.  This is the call stack from the blocked JDWP agent.

  thread #19, name = 'Java: JDWP Transport Listener: dt_socket'
    frame #0: 0x00007ff817bfa0ee libsystem_kernel.dylib`__psynch_cvwait + 10
    frame #1: 0x00007ff817c36758 libsystem_pthread.dylib`_pthread_cond_wait + 1242
    frame #2: 0x00000001043c025b libjvm.dylib`PlatformMonitor::wait(this=0x00006000028ac198, millis=<unavailable>) at os_posix.cpp:1900:18 [opt]
    frame #3: 0x000000010433fbf0 libjvm.dylib`Monitor::wait(this=0x00006000028ac190, timeout=0) at mutex.cpp:254:25 [opt]
    frame #4: 0x00000001039d1715 libjvm.dylib`CompileBroker::wait_for_completion(CompileTask*) [inlined] MonitorLocker::wait(this=<unavailable>, timeout=0) at mutexLocker.hpp:255:21 [opt]
    frame #5: 0x00000001039d170b libjvm.dylib`CompileBroker::wait_for_completion(task=0x00006000039f0910) at compileBroker.cpp:1709:10 [opt]
    frame #6: 0x00000001039d06d8 libjvm.dylib`CompileBroker::compile_method_base(method=0x000070000971b118, osr_bci=-1, comp_level=<unavailable>, hot_method=<unavailable>, hot_count=<unavailable>, compile_reason=<unavailable>, blocking=true, thread=0x00007ff018822210) at compileBroker.cpp:1306:5 [opt]
    frame #7: 0x00000001039d1fc5 libjvm.dylib`CompileBroker::compile_method(method=0x000070000971b118, osr_bci=-1, comp_level=<unavailable>, hot_method=0x000070000971b118, hot_count=1, compile_reason=Reason_Tiered, directive=0x00007ff0181049c0, __the_thread__=0x00007ff018822210) at compileBroker.cpp:1457:5 [opt]
    frame #8: 0x00000001039d185c libjvm.dylib`CompileBroker::compile_method(method=0x000070000971b118, osr_bci=-1, comp_level=4, hot_method=<unavailable>, hot_count=<unavailable>, compile_reason=<unavailable>, __the_thread__=0x00007ff018822210) at compileBroker.cpp:1325:17 [opt]
    frame #9: 0x00000001039ac86c libjvm.dylib`CompilationPolicy::compile(mh=0x000070000971b118, bci=-1, level=<unavailable>, __the_thread__=0x00007ff018822210) at compilationPolicy.cpp:811:5 [opt]
    frame #10: 0x00000001039abf66 libjvm.dylib`CompilationPolicy::event(methodHandle const&, methodHandle const&, int, int, CompLevel, CompiledMethod*, JavaThread*) [inlined] CompilationPolicy::method_invocation_event(mh=0x000070000971b118, imh=<unavailable>, level=CompLevel_full_profile, nm=<unavailable>, __the_thread__=<unavailable>) at compilationPolicy.cpp:1147:7 [opt]
    frame #11: 0x00000001039abeea libjvm.dylib`CompilationPolicy::event(method=0x000070000971b118, inlinee=0x000070000971b1b0, branch_bci=<unavailable>, bci=<unavailable>, comp_level=CompLevel_full_profile, nm=0x000000010e286d90, __the_thread__=0x00007ff018822210) at compilationPolicy.cpp:732:5 [opt]
    frame #12: 0x00000001038243cc libjvm.dylib`Runtime1::counter_overflow(JavaThread*, int, Method*) [inlined] counter_overflow_helper(current=0x00007ff018822210, branch_bci=-1, m=<unavailable>) at c1_Runtime1.cpp:481:12 [opt]
    frame #13: 0x0000000103824181 libjvm.dylib`Runtime1::counter_overflow(current=0x00007ff018822210, bci=-1, method=<unavailable>) at c1_Runtime1.cpp:488:14 [opt]
    frame #14: 0x0000000115176f31
    frame #15: 0x000000010e28763b
    frame #16: 0x0000000103dadce8 libjvm.dylib`JavaCalls::call_helper(result=<unavailable>, method=<unavailable>, args=<unavailable>, __the_thread__=<unavailable>) at javaCalls.cpp:415:7 [opt]
    frame #17: 0x0000000103dac813 libjvm.dylib`JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*) [inlined] JavaCalls::call(result=0x000070000971ba18, method=0x000070000971b908, args=0x000070000971b970, __the_thread__=0x00007ff018822210) at javaCalls.cpp:329:3 [opt]
    frame #18: 0x0000000103dac7f8 libjvm.dylib`JavaCalls::call_virtual(result=<unavailable>, spec_klass=0x000000080002e1f8, name=0x000000080052d168, signature=0x0000000800512c88, args=<unavailable>, __the_thread__=0x00007ff018822210) at javaCalls.cpp:185:3 [opt]
    frame #19: 0x0000000103dac930 libjvm.dylib`JavaCalls::call_virtual(result=<unavailable>, receiver=<unavailable>, spec_klass=<unavailable>, name=<unavailable>, signature=<unavailable>, __the_thread__=0x00007ff018822210) at javaCalls.cpp:191:3 [opt]
    frame #20: 0x00000001040b5105 libjvm.dylib`JvmtiEnvBase::get_subgroups(current_thread=0x00007ff018822210, group_hdl=Handle @ r13, count_ptr=0x000070000971bb54, group_objs_p=0x000070000971bb30) at jvmtiEnvBase.cpp:815:3 [opt]
    frame #21: 0x00000001040a4b3a libjvm.dylib`JvmtiEnv::GetThreadGroupChildren(this=0x00007ff018104600, group=<unavailable>, thread_count_ptr=0x000070000971bc34, threads_ptr=0x000070000971bc28, group_count_ptr=0x000070000971bc30, groups_ptr=0x000070000971bc20) at jvmtiEnv.cpp:1684:9 [opt]
    frame #22: 0x00000001040494fc libjvm.dylib`jvmti_GetThreadGroupChildren(env=0x00007ff018104600, group=<unavailable>, thread_count_ptr=0x000070000971bc34, threads_ptr=0x000070000971bc28, group_count_ptr=<unavailable>, groups_ptr=<unavailable>) at jvmtiEnter.cpp:1174:20 [opt]
    frame #23: 0x0000000100cc86bc libjdwp.dylib`children(in=0x000070000971bc70, out=0x000070000971bcc8) at ThreadGroupReferenceImpl.c:108:18 [opt]
    frame #24: 0x0000000100cd0e33 libjdwp.dylib`debugLoop_run at debugLoop.c:162:33 [opt]

This is the suspended JVMCI native compiler thread:

  thread #16, name = 'Java: JVMCI-native CompilerThread0'
    frame #0: 0x00007ff817bfa0ee libsystem_kernel.dylib`__psynch_cvwait + 10
    frame #1: 0x00007ff817c36758 libsystem_pthread.dylib`_pthread_cond_wait + 1242
    frame #2: 0x00000001043c025b libjvm.dylib`PlatformMonitor::wait(this=0x00007ff00f80d3e0, millis=<unavailable>) at os_posix.cpp:1900:18 [opt]
    frame #3: 0x000000010433f94b libjvm.dylib`Monitor::wait_without_safepoint_check(this=0x00007ff00f80d3d8, timeout=0) at mutex.cpp:226:27 [opt]
    frame #4: 0x0000000103cf2c6a libjvm.dylib`HandshakeState::do_self_suspend(this=0x00007ff00f80d3c8) at handshake.cpp:684:11 [opt]
    frame #5: 0x0000000103cf3da8 libjvm.dylib`ThreadSelfSuspensionHandshake::do_thread(this=<unavailable>, thr=0x00007ff00f80ce10) at handshake.cpp:700:33 [opt]
    frame #6: 0x0000000103cf0767 libjvm.dylib`HandshakeOperation::do_handshake(this=0x0000600002dc1c80, thread=0x00007ff00f80ce10) at handshake.cpp:326:20 [opt]
    frame #7: 0x0000000103cf27df libjvm.dylib`HandshakeState::process_by_self(this=0x00007ff00f80d3c8, allow_suspend=<unavailable>, check_async_exception=<unavailable>) at handshake.cpp:569:13 [opt]
    frame #8: 0x00000001044d28cf libjvm.dylib`SafepointMechanism::process(thread=0x00007ff00f80ce10, allow_suspend=<unavailable>, check_async_exception=<unavailable>) at safepointMechanism.cpp:159:96 [opt]
    frame #9: 0x0000000103780c72 libjvm.dylib`ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState, bool) [inlined] SafepointMechanism::process_if_requested(thread=0x00007ff00f80ce10, allow_suspend=true, check_async_exception=<unavailable>) at safepointMechanism.inline.hpp:83:5 [opt]
    frame #10: 0x0000000103780c62 libjvm.dylib`ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState, bool) [inlined] SafepointMechanism::process_if_requested_with_exit_check(thread=0x00007ff00f80ce10, check_async_exception=<unavailable>) at safepointMechanism.inline.hpp:88:3 [opt]
    frame #11: 0x0000000103780c62 libjvm.dylib`ThreadStateTransition::transition_from_native(thread=0x00007ff00f80ce10, to=_thread_in_vm, check_asyncs=true) at interfaceSupport.inline.hpp:106:5 [opt]
    frame #12: 0x0000000103fbe14d libjvm.dylib`JVMCIEnv::init_env_mode_runtime(JavaThread*, JNIEnv_*, bool) [inlined] ThreadToNativeFromVM::~ThreadToNativeFromVM(this=0x00007000093125b8) at interfaceSupport.inline.hpp:191:5 [opt]
    frame #13: 0x0000000103fbe13a libjvm.dylib`JVMCIEnv::init_env_mode_runtime(JavaThread*, JNIEnv_*, bool) [inlined] ThreadToNativeFromVM::~ThreadToNativeFromVM(this=0x00007000093125b8) at interfaceSupport.inline.hpp:190:27 [opt]
    frame #14: 0x0000000103fbe13a libjvm.dylib`JVMCIEnv::init_env_mode_runtime(JavaThread*, JNIEnv_*, bool) [inlined] JNIAccessMark::~JNIAccessMark(this=0x00007000093125b0) at jniAccessMark.inline.hpp:38:7 [opt]
    frame #15: 0x0000000103fbe131 libjvm.dylib`JVMCIEnv::init_env_mode_runtime(JavaThread*, JNIEnv_*, bool) [inlined] JNIAccessMark::~JNIAccessMark(this=0x00007000093125b0) at jniAccessMark.inline.hpp:38:7 [opt]
    frame #16: 0x0000000103fbe131 libjvm.dylib`JVMCIEnv::init_env_mode_runtime(this=0x0000700009312710, thread=0x00007ff00f80ce10, parent_env=<unavailable>, jni_enomem_is_fatal=<unavailable>) at jvmciEnv.cpp:201:1 [opt]
    frame #17: 0x0000000103fbe57a libjvm.dylib`JVMCIEnv::JVMCIEnv(JavaThread*, JVMCICompileState*, char const*, int) at jvmciEnv.cpp:208:3 [opt]
    frame #18: 0x0000000103fbe55d libjvm.dylib`JVMCIEnv::JVMCIEnv(this=0x0000700009312710, thread=<unavailable>, compile_state=0x0000700009312668, file=<unavailable>, line=<unavailable>) at jvmciEnv.cpp:204:106 [opt]
    frame #19: 0x00000001039d452c libjvm.dylib`CompileBroker::invoke_compiler_on_method(task=0x00006000039f0910) at compileBroker.cpp:2196:16 [opt]
    frame #20: 0x00000001039d36d7 libjvm.dylib`CompileBroker::compiler_thread_loop() at compileBroker.cpp:1944:11 [opt]
    frame #21: 0x0000000103de0d56 libjvm.dylib`JavaThread::thread_main_inner(this=0x00007ff00f80ce10) at javaThread.cpp:719:5 [opt]

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,JDK-8314324,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32737:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2023-07-06 04:43;chagedorn;ILW = Deadlock with JVMCI compiler thread, only with JVMCI and JVMTI, use -XX:+BackgroundCompilation = HLM = P3;;;","2023-07-06 23:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14799
Date: 2023-07-07 06:13:21 +0000;;;","2023-07-10 13:24;never;This is more properly a serviceability problem so I've updated the subcomponent.  [~sspitsyn] I'm wondering if there's some intermediate way that we could safely treat the JVMCI compiler threads as Java threads.  The main thing we want to avoid is permitting suspend from working on these threads as they might be doing internal things where the suspension could lead to a deadlock.  Could we safely make JavaThread::java_suspend return false for is_Compiler_thread or could that lead to some confusion in the API?  In the context of libgraal there's only a few places where the thread might do Java-ish stuff like call into regular Java code for error reporting.  If it's hidden can you still debug the thread for instance?;;;","2023-08-15 08:46;dukebot;Changeset: 004651dd
Author:    Tom Rodriguez <never@openjdk.org>
Date:      2023-08-15 15:44:33 +0000
URL:       https://git.openjdk.org/jdk/commit/004651ddc281be04ea736807797658d64a5a7337
;;;",,,,,,,,,,,,,,,,,,,
GetThreadLocalStorage not working for vthreads mounted during JVMTI attach,JDK-8311556,5104311,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,webbuggrp,webbuggrp,2023-06-28 04:27,2023-07-25 10:09,2023-10-01 09:55,2023-07-12 18:57,21,,,,,,22,hotspot,,0,capbug,dcsswa,hgupdate-sync,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Ubunu 22.10 x86_64 
openjdk version ""21-ea"" 2023-09-19
OpenJDK Runtime Environment (build 21-ea+28-2377)
OpenJDK 64-Bit Server VM (build 21-ea+28-2377, mixed mode, sharing)

or

openjdk version ""22-ea"" 2024-03-19
OpenJDK Runtime Environment (build 22-ea+3-184)
OpenJDK 64-Bit Server VM (build 22-ea+3-184, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
GetThreadLocalStorage/SetThreadLocalStorage for virtual threads that are mounted while an agent is loaded into a running JVM does not work as expected. A value set with SetThreadLocalStorage on such a thread cannot be retrieved with GetThreadLocalStorage after the thread is unmounted and remounted.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
With the attached sample and JAVA_HOME set to a JDK 21 or 22:

g++ -shared -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -fPIC VThreadTls.cpp -o libVThreadTls.so
$JAVA_HOME/bin/javac VThreadTls.java

LD_LIBRARY_PATH=. $JAVA_HOME/bin/java -Djdk.attach.allowAttachSelf=true -XX:+EnableDynamicAgentLoading VThreadTls attach

With JVMTI initialized at launch the sample works as expected:

LD_LIBRARY_PATH=. $JAVA_HOME/bin/java -agentlib:VThreadTls VThreadTls


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Process exits with 0. 
ACTUAL -
Process exits with 1 and prints errors about non-matching values

---------- BEGIN SOURCE ----------
-- VThreadTls.java ----------------------------------------------------------- 
import com.sun.tools.attach.VirtualMachine;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class VThreadTls {
    public static native long getTls();
    public static native void setTls(long value);
    
    public static volatile boolean attached;
    public static volatile boolean error;

    public static void main(String[] args) throws Exception {
        try (ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor()) {
            for (int threadCount = 0; threadCount < 100; threadCount++) {
                executorService.execute(() -> {
                    try {
                        while (!attached) {
                            // keep mounted
                        }
                        long threadId = Thread.currentThread().threadId();
                        setTls(threadId);
                        long mountedValue = getTls();
                        if (mountedValue != threadId) {
                            System.out.println(""wrong tls value while still mounted: "" + threadId + "", "" + mountedValue);
                            error = true;
                            return;
                        }

                        for (int repetion = 0; repetion < 1000; repetion++) {
                            Thread.sleep(1);
                            long tlsValue = getTls();
                            if (tlsValue != threadId) {
                                System.out.println(""wrong tls value after yield: "" + threadId + "", "" + tlsValue);
                                error = true;
                                return;
                            }
                        }
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                });
            }
            if (args.length == 1 && args[0].equals(""attach"")) {
                VirtualMachine vm = VirtualMachine.attach(String.valueOf(ProcessHandle.current().pid()));
                vm.loadAgentLibrary(""VThreadTls"");
            }
            Thread.sleep(500);
            attached = true;
        }
        if (error) {
            System.exit(1);
        }
    }
}
------------------------------------------------------------------------------
-- VThreadTls.cpp ------------------------------------------------------------
#include <jvmti.h>
#include <cstdlib>
#include <cstring>

namespace {
    jvmtiEnv *jvmti = nullptr;

    void checkJvmti(int code, const char* message) {
        if (code != JVMTI_ERROR_NONE) {
            printf(""Error %s: %d\n"", message, code);
            abort();
        }
    }
}

extern ""C"" JNIEXPORT jlong JNICALL Java_VThreadTls_getTls(JNIEnv* jni_env, jclass clazz) {
    void* data;
    checkJvmti(jvmti->GetThreadLocalStorage(nullptr, &data), ""get tls"");
    return (jlong)data;
}

extern ""C"" JNIEXPORT void JNICALL Java_VThreadTls_setTls(JNIEnv* jni_env, jclass clazz, jlong value) {
    checkJvmti(jvmti->SetThreadLocalStorage(nullptr, (void*)value), ""get tls"");
}

extern ""C"" JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *vm, char *options, void *reserved) {
    if (vm->GetEnv(reinterpret_cast<void **>(&jvmti), JVMTI_VERSION) != JNI_OK || !jvmti) {
        printf(""Could not initialize JVMTI\n"");
        abort();
    }
    jvmtiCapabilities capabilities;
    memset(&capabilities, 0, sizeof(capabilities));
    capabilities.can_support_virtual_threads = 1;
    checkJvmti(jvmti->AddCapabilities(&capabilities), ""adding capabilities"");
    return JVMTI_ERROR_NONE;
}

extern ""C"" JNIEXPORT jint JNICALL Agent_OnAttach(JavaVM *vm, char *options, void *reserved) {
    printf(""attached\n"");
    fflush(stdout);
    return Agent_OnLoad(vm, options, reserved);
}
------------------------------------------------------------------------------
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
don't use GetThreadLocalStorage/SetThreadLocalStorage for virtual threads when the agent is loaded into a running JVM.

FREQUENCY : always


",,,,,,,,,,,JDK-8312930,JDK-8312281,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-07-05 22:42;sswsharm;VThreadTls.cpp;https://bugs.openjdk.org/secure/attachment/104514/VThreadTls.cpp","2023-07-05 22:42;sswsharm;VThreadTls.java;https://bugs.openjdk.org/secure/attachment/104515/VThreadTls.java",,,,,,generic,,,,,,,,,,generic,,,,,"0|i323j7:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-07-05 22:45;sswsharm;VThreadTls.cpp looks to be incomplete , nullptr gives error.
 
VThreadTls.cpp:6:23: error: 'nullptr' was not declared in this scope
     jvmtiEnv *jvmti = nullptr;
                       ^
VThreadTls.cpp: In function 'jlong Java_VThreadTls_getTls(JNIEnv*, jclass)':
VThreadTls.cpp:18:45: error: 'nullptr' was not declared in this scope
     checkJvmti(jvmti->GetThreadLocalStorage(nullptr, &data), ""get tls"");
                                             ^
VThreadTls.cpp: In function 'void Java_VThreadTls_setTls(JNIEnv*, jclass, jlong)':
VThreadTls.cpp:23:45: error: 'nullptr' was not declared in this scope

Moving it to dev team for analysis.;;;","2023-07-07 16:55;sspitsyn;The test is passed now.
Closing this as a dup of JDK-8297286.;;;","2023-07-11 07:54;ddamodaran;[~sspitsyn] This issue was closed and marked as duplicate with a bug fixed in JDK 21 b17. But the issue was originally reported against a latest build b28. Please clarify this.;;;","2023-07-11 16:10;sspitsyn;It was found the issue is not really a dup of JDK-8296324.
Re-openning the bug report. Need to fix it in 22.;;;","2023-07-11 16:14;sspitsyn;The suggested fix is:
diff --git a/src/hotspot/share/prims/jvmtiEnvBase.cpp b/src/hotspot/share/prims/jvmtiEnvBase.cpp
index 73d7a3b3246..19876c91443 100644
--- a/src/hotspot/share/prims/jvmtiEnvBase.cpp
+++ b/src/hotspot/share/prims/jvmtiEnvBase.cpp
@@ -1640,8 +1640,9 @@ private:
         count++;
         continue; // no need in JvmtiThreadState correction below if in transition
       }
-      if (_whitebox_used) {
-        correct_jvmti_thread_state(jt); // needed in testing environment only
+      // needed when _enabled or in testing environment
+      if (_enable || _whitebox_used) {
+        correct_jvmti_thread_state(jt);
       }
     }
     return count;
;;;","2023-07-11 19:16;sspitsyn;[~ddamodaran] The modified test (modification was needed to convert it to a jtreg form) from submitter did not fail in both 21 and 22. The bug submitter identified the issue in my version of the test. I've fixed it and observed the test failing. So, the bug has been reopened.;;;","2023-07-11 20:51;ddamodaran;[~sspitsyn] Thanks for looking into this.;;;","2023-07-11 22:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14842
Date: 2023-07-12 05:02:53 +0000;;;","2023-07-12 18:57;dukebot;Changeset: 11a5115c
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2023-07-13 01:55:37 +0000
URL:       https://git.openjdk.org/jdk/commit/11a5115caf179a1bbed5311e12ed3851e026c5c5
;;;","2023-07-12 20:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/117
Date: 2023-07-13 03:41:28 +0000;;;","2023-07-18 10:12;sspitsyn;[~ddamodaran] Yes, I'm going to bp it to 21.;;;",,,,,,,,,,,,
"AArch64: [ZGC] Many tests fail with ""assert(allocates2(pc)) failed: not in CodeBuffer memory"" on some CPUs",JDK-8311548,5104878,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,haosun,haosun,haosun,2023-07-05 20:17,2023-07-25 04:31,2023-10-01 09:55,2023-07-10 15:01,21,22,,,,,22,hotspot,,0,genzgc,hgupdate-sync,,,,,,,,,,,,,,,,"==================
Problem
==================

When testing jtreg cases under ""test/hotspot/jtreg/compiler, test/hotspot/jtreg/gc"", we got many ZGC related test failures on Thunder X CPU and Thunder X2 CPU.

==================
Here lists the failed test cases.
==================

compiler/gcbarriers/TestZGCBarrierElision.java#id0
compiler/gcbarriers/TestZGCBarrierElision.java#id1
compiler/gcbarriers/UnsafeIntrinsicsTest.java#ZGenerationalDebug
compiler/loopopts/TestRangeCheckPredicatesControl.java#ZGenerational
compiler/loopstripmining/TestNoWarningLoopStripMiningIterSet.java#ZGenerational
compiler/uncommontrap/TestDeoptOOM.java#ZGenerational
compiler/vectorapi/VectorRebracket128Test.java#ZGenerational 
gc/TestReferenceClearDuringReferenceProcessing.java#ZGenerational
gc/TestSystemGC.java#ZGenerational
gc/stress/gcbasher/TestGCBasherWithZ.java#id0
gc/stress/gcbasher/TestGCBasherWithZ.java#id2
gc/stress/gcold/TestGCOldWithZ.java#id0
gc/stringdedup/TestStringDeduplicationAgeThreshold.java#ZGenerational
gc/stringdedup/TestStringDeduplicationFullGC.java#ZGenerational
gc/stringdedup/TestStringDeduplicationInterned.java#ZGenerational
gc/stringdedup/TestStringDeduplicationPrintOptions.java#ZGenerational
gc/stringdedup/TestStringDeduplicationTableResize.java#ZGenerational
gc/stringdedup/TestStringDeduplicationYoungGC.java#ZGenerational
gc/z/TestAllocateHeapAt.java
gc/z/TestAlwaysPreTouch.java
gc/z/TestGarbageCollectorMXBean.java
gc/z/TestMemoryMXBean.java
gc/z/TestMemoryManagerMXBean.java
gc/z/TestNoUncommit.java
gc/z/TestPageCacheFlush.java
gc/z/TestRelocateInPlace.java
gc/z/TestSmallHeap.java
gc/z/TestUncommit.java
gc/z/TestZForceDiscontiguousHeapReservations.java
gc/z/TestZNMT.java 

==================
Error message:
==================

----------System.out:(17/813)----------
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (~/jdk_build/jdk_src/src/hotspot/share/asm/codeBuffer.hpp:200), pid=108369, tid=108373
#  assert(allocates2(pc)) failed: not in CodeBuffer memory: 0x0000ffff9c921100 <= 0x0000ffff9c934c04 <= 0x0000ffff9c934c00
#
# JRE version:  (22.0) (fastdebug build )
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 22-internal-git-0916e6a60, mixed mode, sharing, compressed class ptrs, z gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x45413c]  Instruction_aarch64::~Instruction_aarch64()+0xbc
#
# Core dump will be written. Default location: /tmp/core.108369

==================
Backtrace info
==================

Stack: [0x0000ffffada02000,0x0000ffffadc00000],  sp=0x0000ffffadbfcb50,  free space=2026k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x4542bc]  Instruction_aarch64::~Instruction_aarch64()+0xbc  (codeBuffer.hpp:200)
V  [libjvm.so+0x121a154]  MacroAssembler::pop(unsigned int, Register)+0x174  (assembler_aarch64.hpp:1489)
V  [libjvm.so+0x195e300]  ZCopyRuntimeCallSpill::restore()+0x3a0  (macroAssembler_aarch64.hpp:465)
V  [libjvm.so+0x19575b0]  copy_load_barrier(MacroAssembler*, Register, Address, Register)+0x120  (zBarrierSetAssembler_aarch64.cpp:438)
V  [libjvm.so+0x1957ab4]  copy_load_barrier(MacroAssembler*, FloatRegister, Address, Register, Register, FloatRegister)+0x3e4  (zBarrierSetAssembler_aarch64.cpp:511)
V  [libjvm.so+0x195cd24]  ZBarrierSetAssembler::copy_load_at(MacroAssembler*, unsigned long, BasicType, unsigned long, FloatRegister, FloatRegister, Address, Register, Register, FloatRegister)+0x234  (zBarrierSetAssembler_aarch64.cpp:734)
V  [libjvm.so+0x16ccf6c]  StubGenerator::ArrayCopyBarrierSetHelper::copy_load_at_32(FloatRegister, FloatRegister, Address)+0xac  (stubGenerator_aarch64.cpp:736)
V  [libjvm.so+0x16e42f4]  StubGenerator::copy_memory(unsigned long, BasicType, bool, Register, Register, Register, int)+0x684  (stubGenerator_aarch64.cpp:1241)
V  [libjvm.so+0x16e5ab0]  StubGenerator::generate_conjoint_copy(int, bool, bool, unsigned char*, unsigned char**, char const*, bool)+0x320  (stubGenerator_aarch64.cpp:1579)
V  [libjvm.so+0x16ed7c8]  StubGenerator::generate_arraycopy_stubs()+0x448  (stubGenerator_aarch64.cpp:1810)
V  [libjvm.so+0x16c8c40]  StubGenerator_generate(CodeBuffer*, StubCodeGenerator::StubsKind)+0x53c  (stubGenerator_aarch64.cpp:8292)
V  [libjvm.so+0x16f304c]  initialize_stubs(StubCodeGenerator::StubsKind, int, int, char const*, char const*, char const*)+0x11c  (stubRoutines.cpp:234)
V  [libjvm.so+0x16f41ec]  StubRoutines::initialize_final_stubs()+0x56c  (stubRoutines.cpp:318)
V  [libjvm.so+0xd671b0]  init_globals2()+0x70  (init.cpp:180)
V  [libjvm.so+0x17ac1c8]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x318  (threads.cpp:564)
V  [libjvm.so+0xec5ecc]  JNI_CreateJavaVM+0x7c  (jni.cpp:3577)
C  [libjli.so+0x3ebc]  JavaMain+0x7c  (java.c:1506)
C  [libjli.so+0x73bc]  ThreadJavaMain+0xc  (java_md.c:650)
C  [libc.so.6+0x7d5c8] 


==================
Some notes
==================
1. we didn't see the failures in other CPUs, including Neoverse N1 and N2.

2. the failure can also be reproduced in Thunder X and X2 via the following test command

`./jdk/bin/java -XX:+UseZGC -XX:+ZGenerational --version `

3. from the backtrace, we can see, it's an assembler failure and the VM failed during generating ""final stubs"".

4. based on my investigation, the root cause should be that VM flag ""AvoidUnalignedAccesses"" is enabled by default on CPUs like Thunder X and X2. Hence, more instructions would be generated especially with ZGC. As a result, the buffer size for final stubs overflows.

This failure should be also reproduced on all(or almost) AArch64 CPUs with the following command:

`./jdk/bin/java -XX:+UseZGC -XX:+ZGenerational -XX:+AvoidUnalignedAccesses --version`

Note that I verified this on Neoverse N1 and N2.
",,,,,,,,,,,JDK-8312898,JDK-8311863,,,,,,,,,,,,,,,,,,,,,,JDK-8307058,,,,,,,,,,,,,,,aarch64,,,,,,,,21,,generic,,,,,"0|i32717:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-07-05 20:25;haosun;==================
Note-1:
==================
this failure was introduced with JDK-8307058 (https://bugs.openjdk.org/browse/JDK-8307058).
I verified that the failure occurred with the commit of JDK-8307058.

Hence, I set "" Affects Version/s"" as ""21, 22"", and set ""Introduced In Version"" as ""21"".

==================
Note-2:
==================
As I mentioned in the ""Description"" session, the VM would crash on the AArch64 CPUs with the following command

`./jdk/bin/java -XX:+UseZGC -XX:+ZGenerational -XX:+AvoidUnalignedAccesses --version`

Hence, I put the ""priority"" of this JBS as ""P2"" bug.

Please correct me if I misunderstood something. Thanks.;;;","2023-07-06 23:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14800
Date: 2023-07-07 06:38:10 +0000;;;","2023-07-10 15:01;dukebot;Changeset: 4b1403d0
Author:    Hao Sun <haosun@openjdk.org>
Date:      2023-07-10 22:00:31 +0000
URL:       https://git.openjdk.org/jdk/commit/4b1403d06b99b91ddd89ad6e54669b0595f1f8e5
;;;","2023-07-10 15:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/108
Date: 2023-07-10 22:08:41 +0000;;;",,,,,,,,,,,,,,,,,,,
JFR TestNativeMemoryUsageEvents fails in huge pages configuration,JDK-8311536,5104867,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mgronlun,mseledtsov,mseledtsov,2023-07-05 15:22,2023-07-25 04:39,2023-10-01 09:55,2023-07-13 05:15,21,,,,,,22,hotspot,,0,atr,hgupdate-sync,noreg-self,,,,,,,,,,,,,,,"Test that failed: jdk/jfr/event/runtime/TestNativeMemoryUsageEvents.java
Platform: linux-x64 (Oracle Linux 8.7) with huge pages configured
JVM flags: -XX:+UseLargePages

---------------- Details:
java.lang.RuntimeException: heap should have grown and NMT should show that: expected 134217728 > 134217728
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertGreaterThan(Asserts.java:343)
	at jdk.jfr.event.runtime.TestNativeMemoryUsageEvents.verifyHeapGrowth(TestNativeMemoryUsageEvents.java:155)
	at jdk.jfr.event.runtime.TestNativeMemoryUsageEvents.main(TestNativeMemoryUsageEvents.java:188)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
",,,,,,,,,,,JDK-8312913,JDK-8312032,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298341,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,,"0|i326yr:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-07-12 07:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14853
Date: 2023-07-12 14:46:39 +0000;;;","2023-07-13 05:15;dukebot;Changeset: 6895debf
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2023-07-13 12:13:44 +0000
URL:       https://git.openjdk.org/jdk/commit/6895debf66debd2d9df066b228e24eba0fc7a2a6
;;;","2023-07-13 05:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/121
Date: 2023-07-13 12:22:22 +0000;;;",,,,,,,,,,,,,,,,,,,,
SegmentAllocator::allocateArray call can be ambiguous,JDK-8311533,5104864,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,jvernee,jvernee,2023-07-05 14:52,2023-07-12 14:54,2023-10-01 09:55,2023-07-12 14:54,repo-panama,,,,,,repo-panama,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,"A call to SegmentAllocator::allocateArray, such as:

    allocator.allocateArray(JAVA_LONG, 10);

Is somewhat ambiguous. It is not clear whether this should create an uninitialized long array with 10 elements, or a long array with a single element initialized to '10'.

i.e. either of the following overloads of allocateArray is applicable:

    default MemorySegment allocateArray(MemoryLayout elementLayout, long count)
    default MemorySegment allocateArray(ValueLayout.OfLong elementLayout, long... elements)

Overload resolution picks the former.

We could rename one of these methods to disambiguate a use case such as this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i326y3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-07-10 03:22;mcimadamore;The overloads are currently organized as follows:

allocate(MemoryLayout) // 1-element allocation
allocate(ValueLayout.OfX, X) // 1-element allocation and set
allocateArray(MemoryLayout, long size) // multi-element allocation
allocateArray(ValueLayout.OfX, X...) // multi-element allocation and set

So, when X=long, there is (as shown) an ambiguity between the two allocateArray variants, with the compiler preferring the non-varargs variant (as per most-specific rules). This is typically what you want overload-wise, but since here the two methods have a completely different semantics, this results in surprising behavior as:

allocateArray(JAVA_LONG, 1, 2, 3)

has very different semantics from:

allocateArray(JAVA_LONG, 1)

(note also that these methods used to be non-variadic, in which case no ambiguity would be possible).

While it would be possible to do tricks with the variadic signatures (e.g. force method to only work when number of elements is >= 2) such tricks would come at the expense of the use case where an existing array is passed as initialization value.

Few observation:

* the distinction between allocate/allocateArray is not really super-important, as the former is just a special case of the latter which allows to avoid variadic array creation
* the ambiguity arises because we accept an element count AFTER the layout parameter

In principle, we could address all the use cases using the following non-ambiguous APIs:

allocate(long, long) // primitive
allocate(MemoryLayout) // calls allocate(layout.byteSize, layout.byteAlignment)
allocate(long size, MemoryLayout) // calls allocate(MemoryLayout.sequenceLayout(size, layout)) // note order of parameters, which now mirrors the MemoryLayout::sequenceLayout factory
allocate(ValueLayout.OfInt, int...) // calls allocate(array.length, layout).copyFrom(MemorySegment.ofArray(array)) ...
... // repeat for all primitives

Note that there's no longer a distinction between allocate/allocateArray - it's just allocate. Note also that it is not possible to confuse:

allocate(JAVA_LONG, 10) // one-element, value of 10

with

allocate(10, JAVA_LONG) // ten elements, no initialization value

If we wanted to spell things out more clearly we could call the latter allocateArray (but not sure it's necessary).

Also, if we wanted, we could retain the specialized allocate/set methods that only accept one element (which javac will prefer over their variadic counterparts, as expected). E.g. make overload resolution work for us, rather than against us.

;;;","2023-07-10 07:31;jvernee;I think:

allocate(JAVA_LONG, 10)

vs

allocate(10, JAVA_LONG)

Will create confusion for readers. I think the intuitive meaning of either of these variants is: allocate 10 longs worth of space (people think of calloc). So, I think we should rename the former variant. Maybe 'makeArray' or 'arrayOf' can work.;;;","2023-07-11 14:54;mcimadamore;While I agree it's confusing, I'm not sure calling the former ""XYZArray"" would make it much clearer given there's only one element.

Perhaps using `allocateFrom` for all the variants that take an initial value might be a good disambiguation. In that it's clear that the allocation method also takes an initial value (which might be either a single value - optimization - or a varargs array). This also mimic MemorySegment::copyFrom naming wise.;;;","2023-07-12 03:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/845
Date: 2023-07-12 10:20:43 +0000;;;",,,,,,,,,,,,,,,,,,,
Remove IDE specific SuppressWarnings,JDK-8311528,5104859,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2023-07-05 13:01,2023-07-12 13:56,2023-10-01 09:55,2023-07-10 10:10,,,,,,,22,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,There is an IDE specific `@SuppressWarnings(EqualsWhichDoesntCheckParameterClass)` in `java.util.Calendar#equals()` method. Leaving this non-generic warning would be problematic for readers who are unfamiliar with it.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i326wz:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-07-06 14:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14790
Date: 2023-07-06 21:03:29 +0000;;;","2023-07-10 10:10;dukebot;Changeset: 63f32fbe
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-07-10 17:07:26 +0000
URL:       https://git.openjdk.org/jdk/commit/63f32fbe9771b8200f707ed5d1d0e6555ad90f8b
;;;",,,,,,,,,,,,,,,,,,,,,
Add performance information to ArrayList javadoc,JDK-8311517,5104847,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smarks,rriggs,rriggs,2023-07-05 08:16,2023-08-10 09:14,2023-10-01 09:55,2023-08-04 13:22,21,,,,,,22,core-libs,,0,doc-only,noreg-doc,,,,,,,,,,,,,,,,"The JEP for sequenced collection (https://openjdk.org/jeps/431) would add addFirst(), removeFirst() and reversed() methods to lists.

However, the Javadoc of List mentions:
> The size, isEmpty, get, set, iterator, and listIterator operations run in constant time. The add operation runs in amortized constant time, that is, adding n elements requires O(n) time. All of the other operations run in linear time (roughly speaking). The constant factor is low compared to that for the LinkedList implementation.

...

... this should be updated to include that reversed() runs in constant time while addFirst() and removeFirst() run in linear time. 

See: https://mail.openjdk.org/pipermail/core-libs-dev/2023-June/107328.html",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313723,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i326ub:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2023-07-26 04:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15040
Date: 2023-07-26 11:02:20 +0000;;;","2023-07-26 15:15;smarks;It's reasonable to add performance assertions in this class specification, inasmuch as some already exist and they're incomplete. However, we probably don't want to add them to all the collections in general. The reasons are that a) it's not all that useful, and b) getting it right is a lot of work. Among the reasons this information isn't all that useful is that constant factors can have a surprisingly large effect on the performance of a system. Also, for things like spliterators, it can be quite difficult to characterize asymptotic performance.;;;","2023-08-04 13:22;dukebot;Changeset: b463c6d3
Author:    danthe1st <daniel@wwwmaster.at>
Committer: Stuart Marks <smarks@openjdk.org>
Date:      2023-08-04 20:21:25 +0000
URL:       https://git.openjdk.org/jdk/commit/b463c6d3b0f27c8f124b5733cb9e7677542abe37
;;;",,,,,,,,,,,,,,,,,,,,
Incorrect regex in TestMetaSpaceLog.java,JDK-8311514,5104844,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dqu,dqu,dqu,2023-07-05 07:45,2023-09-20 13:05,2023-10-01 09:55,2023-07-07 04:51,17,21,22,,,,22,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-yes,testbug,,,,,,,,,,,,"The regex used in gc/logging/TestMetaSpaceLog.java to capture the metaspace size change doesn't write correctly.

It is written like this:
metaSpaceRegexp = Pattern.compile("".*Metaspace: ([0-9]+).*->([0-9]+).*"");

For the following log,
[gc,metaspace   ] GC(0) Metaspace: 11895K(14208K)->11895K(14208K) NonClass: 10552K(12544K)->10552K(12544K) Class: 1343K(1664K)->1343K(1664K)

It intends to capture the metaspace size before and after the GC, which is the first 11895 and second 11895 separately. But as this regex is greedy, it will capture the first 11895 and the last 1343.

This mistake might cause the test always to succeed.

It might be changed to:
metaSpaceRegexp = Pattern.compile("".*Metaspace: ([0-9]+)K\\([0-9]+K\\)->([0-9]+)K\\([0-9]+K\\).*"");",,,,,,,,,,,JDK-8316550,JDK-8316625,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8211123,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i326tn:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-07-06 02:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14782
Date: 2023-07-06 09:23:06 +0000;;;","2023-07-07 04:51;dukebot;Changeset: 9084b6c9
Author:    Daohan Qu <dqu@openjdk.org>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-07-07 11:49:29 +0000
URL:       https://git.openjdk.org/jdk/commit/9084b6c9d5b6550059fee39d6335fed467f1c45c
;;;","2023-07-10 02:06;shade;Test added by JDK-8211123, linking up.;;;","2023-09-13 07:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1737
Date: 2023-09-13 14:44:08 +0000;;;","2023-09-13 08:09;roboduke;[jdk17u-fix-request] Approval Request from Elif Aslan
“Clean backport. Fix a jtreg test for capturing wrong value. Low risk. GHA tested”;;;","2023-09-13 08:10;roboduke;[jdk21u-fix-request] Approval Request from Elif Aslan
;;;","2023-09-13 08:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/159
Date: 2023-09-13 15:01:11 +0000;;;",,,,,,,,,,,,,,,,
Improve description of NativeLibrary JFR event,JDK-8311511,5104840,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-07-05 06:33,2023-08-15 00:12,2023-10-01 09:55,2023-07-06 23:56,22,,,,,,22,hotspot,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,The JFR NativeLibrary event description  should be improved.,,,,,,,,,,,JDK-8314257,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i326sr:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-07-05 07:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14774
Date: 2023-07-05 14:39:59 +0000;;;","2023-07-06 23:56;dukebot;Changeset: 848abd28
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-07-07 06:55:32 +0000
URL:       https://git.openjdk.org/jdk/commit/848abd2831ab38d99b6b76b55cbe8d84c28be330
;;;","2023-08-11 08:01;mbaesken;jdk21 backport request
I would like to have the patch in jdk21u as well, because the improved descriptions would be helpful there too. The backport is low risk and clean.;;;","2023-08-11 08:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/56
Date: 2023-08-11 14:59:44 +0000;;;",,,,,,,,,,,,,,,,,,,
ZGC: RAII use of IntelJccErratumAlignment,JDK-8311508,5104837,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aboldtch,shade,shade,2023-07-05 06:24,2023-08-16 23:28,2023-10-01 09:55,2023-08-10 00:20,21,22,,,,,22,hotspot,,0,genzgc,sonarcloud-found,,,,,,,,,,,,,,,,"SonarCloud reports the potential bug in the code below:
 Name this temporary ""IntelJccErratumAlignment"" object if you want to use it in for RAII.

```
static void emit_store_fast_path_check_c2(MacroAssembler* masm, Address ref_addr, bool is_atomic, Label& medium_path) {
#ifdef COMPILER2
  // This is a JCC erratum mitigation wrapper for calling the inner check
  int size = store_fast_path_check_size(masm, ref_addr, is_atomic, medium_path);
  // Emit JCC erratum mitigation nops with the right size
  IntelJccErratumAlignment(*masm, size);  // <----------- COMPLAINS HERE
  // Emit the JCC erratum mitigation guarded code
  emit_store_fast_path_check(masm, ref_addr, is_atomic, medium_path);
#endif
```

The comment seems to imply that `emit_store_fast_path_check` needs to be guarded by `IntelJccErratumAlignment`. I think it is innocuous at this point, as `~IntelJccErratumAlignment` only carries the assert. Is this use correct, though?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307058,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i326s3:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-07-06 00:04;aboldtch;Naming it and creating a correct scope for RAII semantics seems to be more correct from an assert point of view. 
Maybe the IntelJccErratumAlignment should assert and disallow a jcc_size of 0, and assert in destructor that 'pc() - _start_pc > 0'.

The same issue seems to exist in z_x86_64.ad file in z_load_barrier.;;;","2023-08-08 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15191
Date: 2023-08-08 13:49:24 +0000;;;","2023-08-10 00:20;dukebot;Changeset: e080a0b4
Author:    Axel Boldt-Christmas <aboldtch@openjdk.org>
Date:      2023-08-10 07:18:31 +0000
URL:       https://git.openjdk.org/jdk/commit/e080a0b4c0878dc19f40ef0f51e645f3a4708c62
;;;",,,,,,,,,,,,,,,,,,,,
[17u] Remove designator DEFAULT_PROMOTED_VERSION_PRE=ea for release 17.0.8,JDK-8311467,5104794,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2023-07-04 23:58,2023-07-18 23:23,2023-10-01 09:55,2023-07-18 13:37,17.0.8,,,,,,17.0.8,infrastructure,,0,,,,,,,,,,,,,,,,,,"As discussed in https://github.com/openjdk/jdk17u-dev/pull/307, we'd like to have DEFAULT_PROMOTED_VERSION_PRE set to 'ea' in dev source trees and remove it for GA tagged source levels.",,,,,,,,,,,JDK-8312350,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i326ij:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@271b8dfc,,,,,,,,,"2023-07-18 13:36;dukebot;Changeset: 3197a9b0
Author:    Christoph Langer <christoph.langer@sap.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-07-05 09:11:13 +0000
URL:       https://git.openjdk.org/jdk17u/commit/3197a9b02992c9f95154b4b5e2b420e82f420cf2
;;;",,,,,,,,,,,,,,,,,,,,,,
[11u] Remove designator DEFAULT_PROMOTED_VERSION_PRE=ea for release 11.0.20,JDK-8311465,5104792,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2023-07-04 23:58,2023-07-18 23:37,2023-10-01 09:55,2023-07-18 13:51,11.0.20,,,,,,11.0.20,infrastructure,,0,,,,,,,,,,,,,,,,,,"As discussed in https://github.com/openjdk/jdk17u-dev/pull/307, we'd like to have DEFAULT_PROMOTED_VERSION_PRE set to 'ea' in dev source trees and remove it for GA tagged source levels.",,,,,,,,,,,JDK-8312361,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i326i3:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@271b8dfc,,,,,,,,,"2023-07-18 13:51;dukebot;Changeset: a829804d
Author:    Christoph Langer <christoph.langer@sap.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-07-05 09:22:24 +0000
URL:       https://git.openjdk.org/jdk11u/commit/a829804de566fb89ad0fe45d242a09db24a5867c
;;;",,,,,,,,,,,,,,,,,,,,,,
7.3 Missing indentation in grammar for OrdinaryCompilationUnit,JDK-8311382,5104158,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbierman,webbuggrp,webbuggrp,2023-06-26 07:23,2023-07-19 07:51,2023-10-01 09:55,2023-07-19 07:51,20,,,,,,21,specification,,0,dcsad,noreg-doc,reproducer-other,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :

The grammar for an OrdinaryCompilationUnit is defined in JLS 7.3 as

OrdinaryCompilationUnit:
    [PackageDeclaration] {ImportDeclaration}
    {TopLevelClassOrInterfaceDeclaration}

The second line is missing an additional indentation and should read (per the convention of JLS 2.4):

OrdinaryCompilationUnit:
    [PackageDeclaration] {ImportDeclaration}
        {TopLevelClassOrInterfaceDeclaration}


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i322l7:",9223372036854775807,,,,,,,,,,,,"2023-07-04 21:59;adev;The web version https://docs.oracle.com/javase/specs/jls/se20/html/jls-7.html#jls-7.3 has:
OrdinaryCompilationUnit:
[PackageDeclaration] {ImportDeclaration} {TopLevelClassOrInterfaceDeclaration} 

whereas the pdf version https://docs.oracle.com/javase/specs/jls/se20/jls20.pdf section 7.3 has:
OrdinaryCompilationUnit:
[PackageDeclaration] {ImportDeclaration}
{TopLevelClassOrInterfaceDeclaration}
;;;",,,,,,,,,,,,,,,,,,,,,,
MethodExitTest may fail with stack buffer overrun,JDK-8311301,5104622,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2023-07-04 10:13,2023-07-12 13:52,2023-10-01 09:55,2023-07-06 01:53,21,22,,,,,22,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,"Spotted when running tier1 tests on Windows JVM build with clang.
MethodExitTest failed with:
----------System.out:(6/187)----------
Agent_OnLoad started
Agent_OnLoad finished

ThreadStart: cthread: 000001E0573A5980, name: main
ThreadStart: GetThreadLocalStorage for carrier thread returned value 111 as expected

----------System.err:(0/0)----------
...
test result: Failed. Unexpected exit from test [exit code: -1073740791]

This exit code translates to STATUS_STACK_BUFFER_OVERRUN. No hs_err file is generated, but there's an entry in Windows event log:

Faulting application name: java.exe, version: 22.0.0.0, time stamp: 0x64a2ef1a
Faulting module name: MethodExitTest.dll, version: 0.0.0.0, time stamp: 0x64a31b75
Exception code: 0xc0000409
Fault offset: 0x00000000000039f5

This, along with the test output, points to stack overrun in libMethodExitTest.cpp / ThreadStart.

Looking at the method, it passes a variable loc_tls_data of type long to SetThreadLocalStorage, and then calls GetThreadLocalStorage to retrieve the stored value back to the same variable.
The problem here is that ThreadLocalStorage is a pointer, which is 8 bytes long on 64 bit architectures. Long on Windows can only store 4 bytes, so the call to GetThreadLocalStorage overwrites additional 4 bytes on stack. When the code is compiled by MS compiler, the overrun is ignored, but clang-compiled code detects the overrun and crashes the application.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i325gb:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-07-04 12:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14770
Date: 2023-07-04 17:33:02 +0000;;;","2023-07-06 01:53;dukebot;Changeset: 3d813ae3
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-07-06 08:52:28 +0000
URL:       https://git.openjdk.org/jdk/commit/3d813ae39f4422dd47473608eb8911e2483c6c32
;;;",,,,,,,,,,,,,,,,,,,,,
Improve java.lang.ref.Cleaner rendered documentation,JDK-8311290,5104609,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-07-04 05:22,2023-07-12 13:51,2023-10-01 09:55,2023-07-05 07:13,22,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"1. Missing leading asterisk interferes with example indentation. Nothing in JDK-8276700 (or review thereof) which introduced those lines suggests that it was on purpose.
2. link/linkplain are used suboptimally",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i325df:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-07-04 05:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14768
Date: 2023-07-04 12:40:26 +0000;;;","2023-07-05 07:13;dukebot;Changeset: 2cffef21
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-07-05 14:10:44 +0000
URL:       https://git.openjdk.org/jdk/commit/2cffef21201c3e8be87c92234712839bff531047
;;;",,,,,,,,,,,,,,,,,,,,,
report some fontconfig related environment variables in hs_err file,JDK-8311285,5104606,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-07-04 03:21,2023-07-27 23:45,2023-10-01 09:55,2023-07-07 03:30,17,21,22,,,,22,hotspot,,0,amazon-interest,hs_err,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,"There are a number of important environment variables influencing how fontconfig works.
See for example
https://man.archlinux.org/man/fonts-conf.5
Some of them should be added to the list of reported environment variables in hs_err file because e.g. a bad setting for some of them can even lead sometimes to crashes.",,,,,,,,,,,JDK-8312895,JDK-8313298,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i325cr:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-04 04:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14767
Date: 2023-07-04 11:47:49 +0000;;;","2023-07-07 03:30;dukebot;Changeset: 0ef03f12
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-07-07 10:27:51 +0000
URL:       https://git.openjdk.org/jdk/commit/0ef03f122866f010ebf50683097e9b92e41cdaad
;;;","2023-07-21 07:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1614
Date: 2023-07-21 14:28:28 +0000;;;","2023-07-21 07:36;mbaesken;jdk17 backport request
I would like to have the patch in jdk17u-dev as well, because it would be a nice enhancement. The patch is low risk and  applies cleanly.;;;","2023-07-26 05:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/17
Date: 2023-07-26 12:17:51 +0000;;;","2023-07-26 05:26;mbaesken;jdk21u backport request
I would like to have the patch in jdk21u  as well, because it would be a nice enhancement. The patch is low risk and applies cleanly.;;;",,,,,,,,,,,,,,,,,
TestStressIGVNAndCCP.java failed with different IGVN traces for the same seed,JDK-8311279,5104598,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,chagedorn,enikitin,enikitin,2023-07-04 02:32,2023-07-12 13:52,2023-10-01 09:55,2023-07-05 23:33,17,21,22,,,,22,hotspot,,0,amazon-interest,atr,c2,noreg-self,oracle-triage-22,testbug,,,,,,,,,,,,"Test message: ""got different IGVN traces for the same seed"" (for the seed value of ""0"", AFAIU).

Please find output diff (a pretty messy one) attached. 

The test arguments were:

'-ea -esa -Dcom.oracle.usagetracker.config.file=<some_config_file>'

Usage tracker config contents, just in case:
com.oracle.usagetracker.logToFile=<some_path>/usage-tracker.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252219,,,,"2023-07-04 02:32;enikitin;diff_message;https://bugs.openjdk.org/secure/attachment/104502/diff_message",,,,,,,,,,,,,,,,,,,,,,"0|i325az:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-04 07:21;chagedorn;Looking at the output, it seems that one run got compile id 1, while the other one got compile id 2. This makes a difference for the debug_idx which is printed for a dead node as ""compile id * 10000000000 + node index"":

compile id 1:
CompileCommand\: compileonly compiler/debug/TestStressIGVNAndCCP.sum bool compileonly \= true < < 80 Phi \=\=\= _ _ _ [[ ]] [10000000080] ...

compile id 2:
CompileCommand\: compileonly compiler/debug/TestStressIGVNAndCCP.sum bool compileonly \= true < < 80 Phi \=\=\= _ _ _ [[ ]] [20000000080] ...

I was not able to reproduce this but my suspicion is that in one VM, we've compiled a native method wrapper or a method handle intrinsic but not in the other one. This would explain the different compile id because we are always only compiling a single method with the given JVM flags. A native compilation can be triggered, for example, by passing -esa:

     60    1     n       java.lang.invoke.MethodHandle::invokeBasic()I (native)   
     60    2     n       java.lang.invoke.MethodHandle::linkToSpecial(LL)I (native)   (static)
     69    3    b        compiler.debug.TestStressIGVNAndCCP::sum (27 bytes)

To fix this, we could use the -XX:+CICountNative flag which uses a separate counter for native compilations:
     50    1     n       java.lang.invoke.MethodHandle::invokeBasic()I (native)   
     51    2     n       java.lang.invoke.MethodHandle::linkToSpecial(LL)I (native)   (static)
     59    1    b        compiler.debug.TestStressIGVNAndCCP::sum (27 bytes)

This is the same approach as done in JDK-8269342 to reliably crash with -XX:CICrashAt=1 in the first compilation.;;;","2023-07-04 07:23;chagedorn;ILW = Single harmless test failure, rare, no workaround = LLH = P5;;;","2023-07-05 02:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14771
Date: 2023-07-05 09:10:48 +0000;;;","2023-07-05 23:33;dukebot;Changeset: edb2be10
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2023-07-06 06:32:05 +0000
URL:       https://git.openjdk.org/jdk/commit/edb2be10fb897834ed78ab4493d3a4f73dc2e140
;;;",,,,,,,,,,,,,,,,,,,
JavaDoc index comparator is not transitive,JDK-8311264,5104582,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,hannesw,hannesw,2023-07-04 00:17,2023-07-25 04:28,2023-10-01 09:55,2023-07-06 00:09,17,18,19,20,21,,22,tools,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"The comparator used to sort items for the JavaDoc index pages does not guarantee transitivity. 

The index item comparator is a composite comparator which uses different sub-comparators for specific pairs of items being compared. The problem is that the element sub-comparator uses the qualified or simple element name as comparison key, while the sub-comparators that compare search tags or search tags to elements use the item label as key.

For example, consider the following index items:

 - class ""Date""
 - method ""date()""
 - search tag ""Date/Time""

The element comparator uses the simple element name for methods and classes, thus compares ""date"" to ""Date"" when comparing the method to the class. Because of collation rules it determines that ""date"" < ""Date"".

The label comparator uses the item label when comparing a search tag to an element, therefore it compares ""date()"" to ""Date/Time"" when comparing the method to the search tag, and ""Date"" to ""Date/Time"" when comparing the search tag to the class. Because of collation rules, it determines that ""date()"" > ""Date/Time"" and ""Date/Time"" > ""Date"". By the rule of transitivity, this implies that ""date()"" > ""Date"", which is the opposite of what the element comparator returned in direct comparison.

This bug was triggered by JDK-8286470 adding a lot of section items to the index page, one of which was the ""Date/Time"" search tag described in the example above. The attached screenshot shows the effect on the `D` index page (the `date(...)` methods should be listed before the `Date` and `DATE` entries, right after `dataVector`).
",,,,,,,,,,,JDK-8312888,JDK-8311577,,,,,,,,,,,,,,,,,,,JDK-8309233,,,JDK-8309233,,,,JDK-8286470,,,,"2023-07-05 09:21;hannesw;Screenshot 2023-07-05 at 18.19.12.png;https://bugs.openjdk.org/secure/attachment/104511/Screenshot+2023-07-05+at+18.19.12.png",,,,,,,generic,,,,,,,,,,generic,,,,,"0|i3257f:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-07-04 03:55;hannesw;There are two possible ways to fix this: 

 - always use the index item label in the first stage of comparison
 - use qualified or simple element name (depending on element kind) in first comparison stage when comparing an element item to a search tag item

The second solution has the benefit of preserving the current sorting order within element index items, but on the downside it is a bit more complicated to implement and keep the code consistent. ;;;","2023-07-05 09:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14776
Date: 2023-07-05 15:56:51 +0000;;;","2023-07-06 00:09;dukebot;Changeset: 0741cd32
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2023-07-06 07:08:20 +0000
URL:       https://git.openjdk.org/jdk/commit/0741cd3289ccc89777449711ab20d6c32711f494
;;;","2023-07-06 02:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/100
Date: 2023-07-06 09:35:30 +0000;;;",,,,,,,,,,,,,,,,,,,
[AIX] TestAlwaysPreTouchStacks.java fails due to java.lang.RuntimeException: Did not find expected NMT output,JDK-8311261,5104580,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,varadam,varadam,varadam,2023-07-04 00:08,2023-07-31 12:13,2023-10-01 09:55,2023-07-24 08:37,22,,,,,,22,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,"On AIX, track_as_vm() returns false [https://github.com/openjdk/jdk/blob/master/src/hotspot/share/services/memReporter.cpp#L225] which causes it to move to else part and prints “Stack: “, but the test is expecting the pattern : "".*stack: reserved=(\\d+), committed=(\\d+).*”. 

stdout: [Alive: 2
Alive: 7
Alive: 4
Alive: 1
Alive: 0
Alive: 15
Alive: 11
Alive: 14
Alive: 12
Alive: 9
Alive: 13
Alive: 8
Alive: 10
Alive: 5
Alive: 6
Alive: 3

Native Memory Tracking:

Total: reserved=219152338, committed=219152338
       malloc: 219152338 #54209
       mmap:   reserved=0, committed=0

-                     Class (reserved=124465, committed=124465)
                            (classes #769)
                            (  instance classes #662, array classes #107)
                            (malloc=124465 #1877) (peak=124657 #1867) 
                            (  Metadata:   )
                            (    reserved=67108864, committed=5767168)
                            (    used=5649248)
                            (    waste=117920 =2.04%)
                            (  Class space:)
                            (    reserved=1073741824, committed=524288)
                            (    used=476976)
                            (    waste=47312 =9.02%)
 
-                    Thread (reserved=181151776, committed=181151776)
                            (thread #33)
                            (Stack: 181037448)
                            (malloc=76048 #221) (peak=84656 #226) 
                            (arena=38280 #67) (peak=272664 #26)
 
-                      Code (reserved=761752, committed=761752)
                            (malloc=761752 #22964) (peak=761872 #22970) 
                            (arena=0 #0) (peak=984 #1)
 
-                        GC (reserved=27922954, committed=27922954)
                            (malloc=27922954 #658) (peak=27923042 #656) 
 
-                 GCCardSet (reserved=29928, committed=29928)
                            (malloc=29928 #387) (at peak) 
 
-                  Compiler (reserved=209820, committed=209820)
                            (malloc=6564 #56) (peak=6700 #57) 
                            (arena=203256 #7) (peak=4603120 #15)
 
-                  Internal (reserved=703467, committed=703467)
                            (malloc=703467 #20791) (peak=705041 #20801) 
 
-                    Symbol (reserved=2853042, committed=2853042)
                            (malloc=978914 #3895) (at peak) 
                            (arena=1874128 #1) (at peak)
 
-    Native Memory Tracking (reserved=870288, committed=870288)
                            (malloc=2944 #29) (peak=3024 #30) 
                            (tracking overhead=867344)
 
-               Arena Chunk (reserved=4141992, committed=4141992)
                            (malloc=4141992 #257) (peak=6517056 #258) 
 
-                   Tracing (reserved=313, committed=313)
                            (malloc=313 #9) (at peak) 
 
-                Statistics (reserved=128, committed=128)
                            (malloc=128 #2) (at peak) 
 
-                 Arguments (reserved=77, committed=77)
                            (malloc=77 #4) (at peak) 
 
-                    Module (reserved=200536, committed=200536)
                            (malloc=200536 #2055) (at peak) 
 
-           Synchronization (reserved=150912, committed=150912)
                            (malloc=150912 #943) (at peak) 
 
-            Serviceability (reserved=17080, committed=17080)
                            (malloc=17080 #9) (peak=17416 #13) 
 
-                 Metaspace (reserved=12864, committed=12864)
                            (malloc=12864 #10) (at peak) 
 
-      String Deduplication (reserved=608, committed=608)
                            (malloc=608 #8) (at peak) 
 
-           Object Monitors (reserved=336, committed=336)
                            (malloc=336 #1) (at peak) 
 
];
 stderr: []
 exitValue = 0

java.lang.RuntimeException: Did not find expected NMT output
        at TestAlwaysPreTouchStacks.main(TestAlwaysPreTouchStacks.java:149)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:580)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
        at java.base/java.lang.Thread.run(Thread.java:1570)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,aix,,,,,"0|i3256z:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-04 00:09;varadam;A fix for this test is  
1. 
	git diff src/hotspot/share/services/threadStackTracker.hpp
	diff --git a/src/hotspot/share/services/threadStackTracker.hpp b/src/hotspot/share/services/threadStackTracker.hpp
	index db7fc0e8569..41a39842c23 100644
	--- a/src/hotspot/share/services/threadStackTracker.hpp
	+++ b/src/hotspot/share/services/threadStackTracker.hpp
	@@ -74,7 +74,8 @@ public:
 	 static void new_thread_stack(void* base, size_t size, const NativeCallStack& stack);
   	static void delete_thread_stack(void* base, size_t size);
 
	-  static bool   track_as_vm()  { return AIX_ONLY(false) NOT_AIX(true); }
	+  //static bool   track_as_vm()  { return AIX_ONLY(false) NOT_AIX(true); }
	+  static bool   track_as_vm()  { return true; }
  	 static size_t thread_count() { return _thread_count; }
       
	However, on AIX by default the page is not aligned [https://github.com/openjdk/jdk/blob/master/src/hotspot/os/aix/porting_aix.cpp#L872] hence track_as_vm() should return false for AIX. ;;;","2023-07-18 10:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14923
Date: 2023-07-18 17:07:09 +0000;;;","2023-07-24 08:37;dukebot;Changeset: d5c6b0d0
Author:    Varada M <mvarada2000@gmail.com>
Committer: Tyler Steele <tsteele@openjdk.org>
Date:      2023-07-24 15:35:22 +0000
URL:       https://git.openjdk.org/jdk/commit/d5c6b0d0bbad696045eb46e268d28c86cb8c2a4e
;;;",,,,,,,,,,,,,,,,,,,,
Some cpp files are compiled with -std:c11 flag,JDK-8311247,5104564,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2023-07-03 09:41,2023-08-14 11:56,2023-10-01 09:55,2023-08-09 05:28,22,,,,,,22,infrastructure,,0,noreg-build,,,,,,,,,,,,,,,,,"The following warning was reported when compiling certain CPP files on Windows with clang:
warning: argument unused during compilation: '-std:c11'

This argument is only relevant when building C files. CPP files are supposed to be built with -std:c++14.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3253f:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-07-03 11:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14758
Date: 2023-07-03 17:15:17 +0000;;;","2023-08-09 05:28;dukebot;Changeset: e9f751ab
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-08-09 12:26:32 +0000
URL:       https://git.openjdk.org/jdk/commit/e9f751ab161ae3663e13108a47fdf722fcb84d67
;;;",,,,,,,,,,,,,,,,,,,,,
JFR: Remove t.printStackTrace() in PeriodicEvents,JDK-8311245,5104562,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2023-07-03 07:46,2023-07-25 04:31,2023-10-01 09:55,2023-07-11 04:06,20,21,22,,,,22,hotspot,,0,hgupdate-sync,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312899,JDK-8311872,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302883,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3252z:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-07-03 08:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14754
Date: 2023-07-03 14:47:50 +0000;;;","2023-07-11 04:06;dukebot;Changeset: a1cfc969
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-07-11 11:03:36 +0000
URL:       https://git.openjdk.org/jdk/commit/a1cfc9695405fe517fae1b9f760ae42b85f66be9
;;;","2023-07-11 05:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/110
Date: 2023-07-11 12:16:04 +0000;;;",,,,,,,,,,,,,,,,,,,,
Some 3D demos are getting slashed in Ensemble8,JDK-8311225,5104535,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2023-07-02 22:31,2023-07-04 01:26,2023-10-01 09:55,2023-07-04 01:26,internal,,,,,,internal,javafx,,0,javafx-metal,sn_147,,,,,,,,,,,,,,,,"Looks like we are not blitting 3D content to the window with appropriate offset and this causes some of the 3D content to go out of the window.

Attached image for OpenGL and Metal.",,,,,,,,,,,,,,,,,,,,,,,,JDK-8302050,,,,,,,,,,,,,,,,,,"2023-07-02 22:34;jdv;Metal.png;https://bugs.openjdk.org/secure/attachment/104489/Metal.png","2023-07-02 22:34;jdv;OpenGL.png;https://bugs.openjdk.org/secure/attachment/104490/OpenGL.png",,,,,,generic,,,,,,,,,,os_x,,,,,"0|i324wz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-07-03 21:47;jdv;Verified that this is not a recent regression and this issue is seen from the time https://bugs.openjdk.org/browse/JDK-8305804 was fixed.
Also this is not related to some offset issue in MTLContext.blit() logic. Because in this scenario both source and destination offset are (0,0).;;;","2023-07-03 23:19;jdv;We are creating nextPowerOf64 RTT Texture in MTLResourceFactory.createRTTexture(). So in our case we need (600,600) but we create (640,640) texture.

Also the intermediate blitting between sourceRTT to DestinationRTT is happening only in case where we have 3D drawing in Ensemble8 so we don't this extra offset in other 2D demos. If i remove nextPowerOf64 texture for RTT then i dont see the artifact. In case of OpenGL or D3D we don't force creation of nextPowerOf64 textures for RTT, only in the case where ""PrismSettings.forcePow2"" is enabled we use nextPowerOfTwo textures.;;;","2023-07-04 00:26;jdv;Looks like logic for using nextPowerOf64 textures for RTT was added in initial stages of metal development as a workaround.
Over current code removal of nextPowerOf64 textures is not causing any errors, this is also verified by Ambarish.

So removed usage of nextPowerOf64 and added texture conditions same as D3D implementation.;;;","2023-07-04 01:26;jdv;Changeset: 1499a7fd
Author:    Jayathirth Rao D V <jayathirth.d.v@oracle.com>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2023-07-04 12:53:44 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/1499a7fdbdfd94a12c5a00beee9c11917301ce23;;;",,,,,,,,,,,,,,,,,,,
Artifacts on speed gauge when we move mouse over the menu buttons,JDK-8311223,5104533,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,arapte,jdv,jdv,2023-07-02 22:17,2023-07-07 11:45,2023-10-01 09:55,2023-07-04 01:49,internal,,,,,,internal,javafx,,0,javafx-metal,sn_147,,,,,,,,,,,,,,,,"On the latest metal branch when we run run speed gauge demo and move mouse over the menu/home button of Ensmeble8 we see white patches and they are not getting cleared properly. Attached image for the same.

Reverting the patch under https://bugs.openjdk.org/browse/JDK-8311042 resolves this issue. Looks like regression of JDK-8311042.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-07-02 22:17;jdv;White_patches.png;https://bugs.openjdk.org/secure/attachment/104488/White_patches.png",,,,,,,generic,,,,,,,,,,os_x,,,,,"0|i324wj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-07-02 22:18;jdv;This issue can be seen in stopwatch demo also. Ajit has also verified this issue on his AMD discrete Macbook Pro.;;;","2023-07-04 01:49;arapte;Changeset: ca713402
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2023-07-04 14:14:52 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/ca713402480d39054be785e136d56fe85cc1db92;;;",,,,,,,,,,,,,,,,,,,,,
strace004 can fail due to unexpected stack length after JDK-8309408,JDK-8311222,5104532,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,dholmes,dholmes,2023-07-02 21:42,2023-08-24 00:23,2023-10-01 09:55,2023-08-18 18:48,22,,,,,,22,core-svc,,0,noreg-self,tier8,,,,,,,,,,,,,,,,"Test: vmTestbase/nsk/monitoring/stress/thread/strace004/TestDescription.java

JDK-8309408 introduced sleepNanos but didn't adjust the maximum expected stack depth for this test.

# ERROR: Length of the stack trace is 207, but expected to be not greater than 206

Snapshot of thread: 0
	 0: jdk.internal.event.ThreadSleepEvent.isEnabled(ThreadSleepEvent.java:-1)
	 1: jdk.internal.event.ThreadSleepEvent.isTurnedOn(ThreadSleepEvent.java:39)
	 2: java.lang.Thread.beforeSleep(Thread.java:456)
	 3: java.lang.Thread.sleepNanos(Thread.java:486)
	 4: java.lang.Thread.sleep(Thread.java:522)
	 5: nsk.monitoring.stress.thread.RunningThread.waitForSign(strace001.java:411)
	 6: nsk.monitoring.stress.thread.RunningThread.recursionNative(Native Method)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309408,,,,,,,,,,,,,,,,,,,,,,,22,,,,,,,"0|i324wb:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2023-07-09 07:44;alanb;[~lmesnik] Would you have cycles to take this one as it could be a few weeks before I can get to it? I think we should look at replacing some of these NSK monitoring tests as they are just too tied to the JDK implementation and require changes each time we touch this code. In this case, I did of course run all tiers and ran the tests in vmTestbase/nsk/monitoring/stress many times before integrating the change to the Thread.sleep implementation as I knew, from previous changes, that these tests often require updates when touching this area. Ideally tests for ThreadMXBean should be completely independent of JDK internals.;;;","2023-08-17 09:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15332
Date: 2023-08-17 16:26:15 +0000;;;","2023-08-18 18:48;dukebot;Changeset: 58f5826f
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-08-19 01:46:40 +0000
URL:       https://git.openjdk.org/jdk/commit/58f5826ff48c20446a0c2ea44da107867126f638
;;;",,,,,,,,,,,,,,,,,,,,
jcstress shouldn't be executed concurrently,JDK-8311198,5104499,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2023-06-30 14:37,2023-07-12 13:00,2023-10-01 09:55,2023-07-07 13:06,22,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,jcstress tests try to utilize whole host and should not be executed concurrently,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i324oz:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simplify and modernize equals and hashCode in java.text,JDK-8311188,5104489,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-06-30 12:46,2023-07-24 17:17,2023-10-01 09:55,2023-07-18 08:14,22,,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i324mr:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-07-03 04:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14752
Date: 2023-07-03 11:12:32 +0000;;;","2023-07-18 08:14;dukebot;Changeset: 1dfb0fb3
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-07-18 15:12:09 +0000
URL:       https://git.openjdk.org/jdk/commit/1dfb0fb3e22c3616fdfa3a8249be526c44dbe890
;;;",,,,,,,,,,,,,,,,,,,,,
VirtualFlow jump when cellcount changes,JDK-8311185,5104481,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvos,jvos,jvos,2023-06-30 10:34,2023-09-06 09:24,2023-10-01 09:55,2023-07-15 08:08,jfx17,jfx20,jfx21,,,,jfx22,javafx,,0,,,,,,,,,,,,,,,,,,"When a Control using a VirtualFlow contains variable sized cells, and a cell is added, the position of the visible cells is sometimes wrong.
This happens when the top-most cell is larger than average, and positioned near its bottom.
When a cell is added, the cache with the cell sizes is cleared, but the current index and the offset of the first cell is preserved. In case the offset is larger than the average cell size, this will lead to a shift to the next cell to become visible.
",,,,,,,,,,,JDK-8315803,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-06-30 10:35;jvos;TableViewVariableCellSizeBug.java;https://bugs.openjdk.org/secure/attachment/104481/TableViewVariableCellSizeBug.java",,,,,,,,,,,,,,,,,,,,,,"0|i324kz:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-06-30 10:38;jvos;The attached program demonstrate the problem. It shows a TableView with a large number of rows, where the row with index 29 has a prefHeight of 100 where the other rows have a prefHeight of 25.
When scrolling through the tableview to row 29, where only a small part of the row stays in the viewport, and then clicking the ""add item"", one can observe that the row 30, 31 or 32 becomes the top-row.;;;","2023-06-30 10:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1164
Date: 2023-06-30 17:43:56 +0000;;;","2023-07-15 07:23;kcr;I can confirm that this fails all the way back to JavaFX 17, so not a recent regression.

This seems like a good candidate for backporting to the jfx21 stabilization branch, once it is fixed in master.;;;","2023-07-15 08:08;dukebot;Changeset: 0371b349
Author:    Johan Vos <jvos@openjdk.org>
Date:      2023-07-15 15:06:30 +0000
URL:       https://git.openjdk.org/jfx/commit/0371b349c929a0f8e71d8f2a01b1e565bb885e6c
;;;","2023-09-06 09:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/163
Date: 2023-09-06 16:02:08 +0000;;;",,,,,,,,,,,,,,,,,,
Remove unused mapping test files,JDK-8311183,5104479,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2023-06-30 09:42,2023-07-25 04:30,2023-10-01 09:55,2023-07-05 16:29,,,,,,,22,core-libs,,0,hgupdate-sync,noreg-cleanup,,,,,,,,,,,,,,,,"There is a test data file `
jdk/test/sun/nio/cs/mapping/JIS0212.b2c.private` which contains the following wording: 
```
#	Recipient is granted the right to make copies in any form for
#	internal distribution and to freely use the information supplied
#	in the creation of products supporting Unicode.  Unicode, Inc.
#	specifically excludes the right to re-distribute this file directly
#	to third parties or other organizations whether for profit or not.
```
However this mapping file is not used in any of the regression tests, thus it should be removed. Also some other mappings that have `.private` extension are in the same situation. Should be removed too.",,,,,,,,,,,JDK-8311659,JDK-8312894,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i324kj:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3962510e,,,,,,,,,"2023-07-03 10:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14757
Date: 2023-07-03 17:02:58 +0000;;;","2023-07-05 16:29;dukebot;Changeset: d072c40f
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-07-05 23:27:36 +0000
URL:       https://git.openjdk.org/jdk/commit/d072c40ff175c653802796673baef47e24038891
;;;","2023-07-05 17:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/98
Date: 2023-07-06 00:30:14 +0000;;;",,,,,,,,,,,,,,,,,,,,
Generational ZGC: gc/z/TestSmallHeap.java failed with OutOfMemoryError,JDK-8311179,5104474,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,stefank,dcubed,dcubed,2023-06-30 07:42,2023-08-16 06:15,2023-10-01 09:55,2023-08-08 02:59,21,22,,,,,22,hotspot,,0,genzgc,hgupdate-sync,intermittent,loom,noreg-self,tier5,,,,,,,,,,,,"The following test failed in the JDK22 CI:

gc/z/TestSmallHeap.java

Here's a snippet from the log file:

[1.421s][info][gc,heap ] GC(92) y: Heap Statistics:
[1.421s][info][gc,heap ] GC(92) y:                Mark Start          Mark End        Relocate Start      Relocate End           High               Low         
[1.421s][info][gc,heap ] GC(92) y:  Capacity:        8M (100%)          8M (100%)          8M (100%)          8M (100%)          8M (100%)          8M (100%)   
[1.421s][info][gc,heap ] GC(92) y:      Free:        0M (0%)            0M (0%)            0M (0%)            0M (0%)            0M (0%)            0M (0%)     
[1.421s][info][gc,heap ] GC(92) y:      Used:        8M (100%)          8M (100%)          8M (100%)          8M (100%)          8M (100%)          8M (100%)   
[1.421s][info][gc,heap ] GC(92) y: Young Generation Statistics:
[1.421s][info][gc,heap ] GC(92) y:                Mark Start          Mark End        Relocate Start      Relocate End    
[1.421s][info][gc,heap ] GC(92) y:      Used:        2M (25%)           2M (25%)           2M (25%)           2M (25%)    
[1.421s][info][gc,heap ] GC(92) y:      Live:         -                 0M (0%)            0M (0%)            0M (0%)     
[1.421s][info][gc,heap ] GC(92) y:   Garbage:         -                 1M (25%)           1M (25%)           1M (25%)    
[1.421s][info][gc,heap ] GC(92) y: Allocated:         -                 0M (0%)            0M (0%)            0M (0%)     
[1.421s][info][gc,heap ] GC(92) y: Reclaimed:         -                  -                 0M (0%)            0M (0%)     
[1.421s][info][gc,heap ] GC(92) y:  Promoted:         -                  -                 0M (0%)            0M (0%)     
[1.421s][info][gc,heap ] GC(92) y: Compacted:         -                  -                  -                 0M (0%)     
[1.421s][info][gc      ] GC(92) Minor Collection (High Usage) 8M(100%)->8M(100%) 0.010s
[1.438s][info][gc      ] GC(93) Minor Collection (High Usage)
[1.447s][info][gc      ] GC(93) y: Relocation Stall (VM Thread) 8.939ms
[1.447s][info][gc      ] GC(93) y: Relocation Stall (VM Thread) 0.102ms
[1.447s][info][gc      ] Allocation Stall (old-m-a-i-n) 68.503ms
[1.451s][info][gc      ] GC(93) Minor Collection (High Usage) Aborted
[1.452s][info][gc      ] GC(88) Major Collection (Allocation Stall) Aborted
];
 stderr: [Exception in thread ""old-m-a-i-n"" java.lang.OutOfMemoryError: Java heap space
	at gc.z.TestSmallHeap$Test.main(TestSmallHeap.java:47)
	at java.base/java.lang.invoke.LambdaForm$DMH/0x0000000801003000.invokeStatic(LambdaForm$DMH)
	at java.base/java.lang.invoke.LambdaForm$MH/0x0000000801004400.invoke(LambdaForm$MH)
	at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(DirectMethodHandleAccessor.java:154)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at jdk.test.lib.process.ProcessTools.lambda$main$6(ProcessTools.java:901)
	at jdk.test.lib.process.ProcessTools$$Lambda/0x00000008010016c0.run(Unknown Source)
	at java.base/java.lang.Thread.runWith(Thread.java:1583)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:309)
	at java.base/java.lang.VirtualThread$VThreadContinuation$1.run(VirtualThread.java:190)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:320)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:312)
	at java.base/jdk.internal.vm.Continuation.enterSpecial(Native Method)
]
 exitValue = 1

java.lang.RuntimeException: 'Success' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at gc.z.TestSmallHeap.main(TestSmallHeap.java:64)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:309)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 'Success' missing from stdout/stderr

This is the third rendition of this issue. See:

JDK-8234619 ZGC: gc/z/TestSmallHeap.java failure with Out Of Memory
JDK-8240714 ZGC: TestSmallHeap.java failed due to OutOfMemoryError",,,,,,,,,,,JDK-8314432,JDK-8314067,,,,,,,,,,,,,,,,,,,,,,JDK-8240714,JDK-8234619,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,"0|i324jf:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-07-03 14:44;dholmes;If this is always failing with Virtual Threads then perhaps we should exclude it from such a test run? The heap usage of virtual threads will be very different compared to regular threads.;;;","2023-08-07 12:43;clanger;We're seeing this issue nearly every day in our CI. Can the test be excluded for now?;;;","2023-08-07 13:27;stefank;[~clanger] I think we can remove 8M from the configuration and see if that helps.;;;","2023-08-08 01:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15184
Date: 2023-08-08 08:18:20 +0000;;;","2023-08-08 02:59;dukebot;Changeset: 28fd7a17
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2023-08-08 09:57:52 +0000
URL:       https://git.openjdk.org/jdk/commit/28fd7a1739fd3c50c43ebfe6017a835225a453c6
;;;","2023-08-08 06:41;clanger;Thanks, [~stefank]. Let's see if this will make the problem disappear.;;;","2023-08-09 00:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/169
Date: 2023-08-09 07:27:28 +0000;;;",,,,,,,,,,,,,,,,
Classfile.PREVIEW_MINOR_VERSION doesn't match that read from class files,JDK-8311172,5104467,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,liach,liach,liach,2023-06-30 06:06,2023-07-24 17:15,2023-10-01 09:55,2023-07-17 04:55,22,,,,,,22,core-libs,,0,classfile-api,,,,,,,,,,,,,,,,,"`Classfile.PREVIEW_MINOR_VERSION`, currently -1, is correct when passed to `ClassBuilder::withVersion`, but is incorrect when compared to `ClassModel::minorVersion`, which only sets the bits of 2 lowest bytes to 1 (65536). Discovered when trying to replace an asserted preview minor version with this constant in test porting.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i324hv:",9223372036854775807,b07,,,,,,,,,,,"2023-06-30 06:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14731
Date: 2023-06-30 13:10:55 +0000;;;","2023-07-17 04:55;dukebot;Changeset: 3fb9d117
Author:    Chen Liang <liach@openjdk.org>
Committer: Adam Sotona <asotona@openjdk.org>
Date:      2023-07-17 11:53:32 +0000
URL:       https://git.openjdk.org/jdk/commit/3fb9d117e353af6f007e701a8cd635763bd3cc28
;;;",,,,,,,,,,,,,,,,,,,,,
Simplify and modernize equals and hashCode in security area,JDK-8311170,5104465,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-06-30 04:50,2023-08-24 09:43,2023-10-01 09:55,2023-08-09 05:35,22,,,,,,22,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314934,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i324hf:",9223372036854775807,b10,,,,,,,,,,,"2023-06-30 09:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14738
Date: 2023-06-30 16:16:38 +0000;;;","2023-08-09 05:35;dukebot;Changeset: 19ae62ae
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-08-09 12:34:40 +0000
URL:       https://git.openjdk.org/jdk/commit/19ae62ae2cd2bbb436924b296151021864a3fcd9
;;;",,,,,,,,,,,,,,,,,,,,,
Simplify and modernize equals and hashCode for java.net,JDK-8311162,5104457,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-06-30 02:03,2023-07-12 13:42,2023-10-01 09:55,2023-06-30 08:19,22,,,,,,22,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i324fn:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-06-30 02:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14726
Date: 2023-06-30 09:17:42 +0000;;;","2023-06-30 08:19;dukebot;Changeset: e3a7e020
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-06-30 15:17:23 +0000
URL:       https://git.openjdk.org/jdk/commit/e3a7e020d2d92e4eafe79b3ecebf31ec058bc48f
;;;",,,,,,,,,,,,,,,,,,,,,
"[macOS, Accessibility] VoiceOver: No announcements on JRadioButtonMenuItem and JCheckBoxMenuItem",JDK-8311160,5104454,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abhiscxk,mbaesken,mbaesken,2023-06-30 01:24,2023-09-05 08:49,2023-10-01 09:55,2023-08-06 22:03,11,17,20,21,22,8,22,client-libs,,0,a11y,accessibility,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,macos,sn_147,sn_149,sn_150,vpat,vpat-11u,vpat-17u,vpat-8u,,,,,"================
Test environment
================
Apple M1 Pro, macOS Ventura version 13.4.1

java version ""20"" 2023-03-21
Java(TM) SE Runtime Environment (build 20+36-2344)
Java HotSpot(TM) 64-Bit Server VM (build 20+36-2344, mixed mode, sharing)

openjdk version ""21-ea"" 2023-09-19
OpenJDK Runtime Environment (build 21-ea+26-2328)
OpenJDK 64-Bit Server VM (build 21-ea+26-2328, mixed mode, sharing)

================
Test application 
================
SwingSet2.jar
SwingSet2 can be downloaded from:
https://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html#swingset2

======================
Test to reproduce bugs
======================
1. On macOS, start VoiceOver (for example with shortcut Option-Command-F5).

2. Start SwingSet2.jar with jdk-21 (or idk-20, which behaves the same).
-> SwingSet2 window is displayed. The ToggleButton “JInternalFrame demo” has the keyboard focus.

3. Press F10 to open the menu of the SwingSet2 application.
-> The ""File"" menu is selected and expanded.
-> VoiceOver announces: ""menu (5 items). You are currently in a menu.""

4. Press Right Arrow key.
-> The ""Look & Feel"" menu is selected and expanded.
-> VoiceOver announces: ""menu (4 items). You are currently in a menu.""

5. Press Down Arrow key.
-> The ""Java Look & Feel"" radio button menu item is selected.
Bug: VoiceOver does not announce anything.

6. Press Down Arrow key.
-> The ""Nimbus Look & Feel"" radio button menu item is selected.
Same bug as mentioned before.

7. Press Right Arrow key twice.
-> The ""Options"" menu is selected and expanded.
-> VoiceOver announces: ""menu (2 items). You are currently in a menu.""

8. Press Down Arrow key.
-> The ""Enable Tool Tips"" checkbox menu item is selected.
Same bug as mentioned above.

9. Press Down Arrow key.
-> The ""Enable Drag Support"" checkbox menu item is selected.
Same bug as mentioned above.


Note: Mentioning a bug on VoiceOver announcement does not mean that the issue is on VoiceOver’s side, rather it is the result of the issue and the cause of the issue needs to be found. 
",,,,,,,,,,,JDK-8314381,,,,,,,,,,,,,,,,,,,,,,,JDK-8314878,INTJDK-7631083,,,,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,,"0|i324ez:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2023-06-30 11:05;vdyakov;[~kizune] please evaluate is it macOS constrain or a bug in jdk a11y on macOS;;;","2023-07-05 08:51;kizune;This is a Java bug, for some reason on Mac VoiceOver ignores non-standard menu items such as RadioButton and CheckBox menu items. It is not a regression - i can reproduce it on all versions of Java i tried it on as far as jdk 8.;;;","2023-07-30 22:13;abhiscxk;Able to reproduce the issue on mainline JDK. ;;;","2023-07-31 22:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15098
Date: 2023-08-01 05:43:52 +0000;;;","2023-08-06 22:03;dukebot;Changeset: c1f4595e
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Date:      2023-08-07 05:02:16 +0000
URL:       https://git.openjdk.org/jdk/commit/c1f4595e64b0ea0439c6e7f61a6a92b56b526d97
;;;","2023-08-07 09:06;vdyakov;[~abhiscxk] could you back port it to 21u?;;;","2023-08-08 23:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/48
Date: 2023-08-09 06:01:49 +0000;;;","2023-08-08 23:09;abhiscxk;[~vdyakov] Yeah, raised a PR to back port.;;;",,,,,,,,,,,,,,,
Regression: The fix for TableView and TreeTableView menu button affects all table column headers,JDK-8311127,5104425,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jpereda,jpereda,jpereda,2023-06-29 16:21,2023-09-06 09:01,2023-10-01 09:55,2023-07-07 05:45,jfx17.0.7,jfx20,,,,,jfx21,javafx,,0,regression,regression_8087673,,,,,,,,,,,,,,,,"After JDK-8087673, the fix to take into account the width of the menu button applies to _all_ the TableColumnHeaders, while it should only be applied to the header of the last visible column.

TableHeaderRow::updateCornerPadding already mentions:

    // When the corner region is visible, and the vertical scrollbar is not,
    // in case the corner region is over the header of the last
    // visible column, if any, we have to consider its width as extra padding
    // for that header, to prevent the content of the latter from being partially
    // covered.

so the padding for the tableHeaderRow is calculated based on the last visible column:

padding = getRootHeader().getColumnHeaders().stream()
                    .filter(header -> header.isLastVisibleColumn)
...
cornerPadding.set(padding);

While this is correct, in TableColumnHeader::layoutChildren the width of _every_ header is calculated based on this padding:

        double cornerRegionPadding = tableHeaderRow == null ? 0.0 : tableHeaderRow.cornerPadding.get();
        double w = snapSizeX(getWidth()) - (snappedLeftInset() + snappedRightInset()) - cornerRegionPadding;

which is wrong for every header but the one from the last visible column.

In fact, the pics in the PR description (https://github.com/openjdk/jfx/pull/886#issue-1354147047) already show this issue, if one looks carefully:

- before.png: Before the fix, columns 5-8 headers have some padding to the left (expected), and column 9 is wrong (arrow is not visible). 

- after.png: After the fix, headers of columns 5-8 have way less padding to the left (wrong!), and column 9 is fixed (arrow is visible).

This issue can be reproduced always since JavaFX 20 (and also since 17.0.7).",,,,,,,,,,,JDK-8315802,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8087673,,,,"2023-06-29 16:14;jpereda;after.png;https://bugs.openjdk.org/secure/attachment/104465/after.png","2023-06-29 16:14;jpereda;before.png;https://bugs.openjdk.org/secure/attachment/104464/before.png",,,,,,,,,,,,,b03,jfx20,,,,,,,"0|i3248j:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-06-29 16:26;angorya;[~jpereda] would you like to take this on?;;;","2023-07-03 03:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1166
Date: 2023-07-03 10:01:51 +0000;;;","2023-07-07 05:45;dukebot;Changeset: 5aad0406
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2023-07-07 12:43:08 +0000
URL:       https://git.openjdk.org/jfx/commit/5aad0406e5ab18d9da56e8adb4c013b93be1ba3d
;;;","2023-09-06 07:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/162
Date: 2023-09-06 14:23:39 +0000;;;",,,,,,,,,,,,,,,,,,,
Fix typos in java.base,JDK-8311122,5104419,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-06-29 14:05,2023-07-25 04:27,2023-10-01 09:55,2023-07-04 12:05,22,,,,,,22,core-libs,,0,hgupdate-sync,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311571,JDK-8312887,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32477:",9223372036854775807,b05,,,,,,,,,,,"2023-06-29 14:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14718
Date: 2023-06-29 21:17:49 +0000;;;","2023-07-04 12:05;dukebot;Changeset: 7b3c2dc5
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-07-04 19:03:09 +0000
URL:       https://git.openjdk.org/jdk/commit/7b3c2dc5f45afc3646ff5cdc0f6efd68e0b70ea5
;;;","2023-07-04 12:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/94
Date: 2023-07-04 19:05:58 +0000;;;",,,,,,,,,,,,,,,,,,,,
Type in java.lang.reflect.AccessFlag.METHOD_PARAMETER,JDK-8311115,5104412,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,jlaskey,jlaskey,2023-06-29 12:30,2023-07-12 13:42,2023-10-01 09:55,2023-06-29 13:33,17,,,,,,22,core-libs,,0,doc-only,hgupdate-sync,noreg-doc,,,,,,,,,,,,,,,s/loccation/location/,,,,,,,,,,,JDK-8311364,JDK-8311119,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266670,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i3245n:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2023-06-29 13:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14717
Date: 2023-06-29 20:14:10 +0000;;;","2023-06-29 13:32;dukebot;Changeset: d9796626
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2023-06-29 20:31:57 +0000
URL:       https://git.openjdk.org/jdk/commit/d97966266e343671693825d2211a34fa45dd271d
;;;","2023-06-29 13:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/82
Date: 2023-06-29 20:37:09 +0000;;;",,,,,,,,,,,,,,,,,,,,
Remove invalid pointer cast and clean up setLabel() in awt_MenuItem.cpp,JDK-8311113,5104408,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,djelinski,djelinski,2023-06-29 11:41,2023-09-25 11:27,2023-10-01 09:55,2023-09-19 10:41,11,17,20,21,22,8,22,client-libs,,0,sn_148,sn_149,sn_150,sn_151,sn_153,,,,,,,,,,,,,"Reported by Clang:

src\java.desktop\windows\native\libawt\windows\awt_MenuItem.cpp(712,22): warning: cast to 'unsigned short *' from smaller integer type 'WCHAR' (aka 'unsigned short') [-Wint-to-pointer-cast]
    mii.dwTypeData = (LPTSTR)(*sb);
                     ^~~~~~~~~~~~~
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i3244r:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-06-30 11:01;aivanov;I don't understand why it complains here: sb is of type LPCTSTR and mii.dwTypeData is of type LPTSTR, they differ only in 'C' which is 'constant' modifier.

Perhaps, dereferencing has to be removed.;;;","2023-06-30 11:11;aivanov;It looks a safer value would be NULL: we don't store the string value of the menu — it's owner-drawn as specified by MFT_OWNERDRAW type. 

Moreover, the pointer we set in AwtMenuItem::SetLabel becomes invalid. It's called from AwtMenuItem::_SetLabel. The latter gets converts the jstring to LPCTSTR using JNU_GetStringPlatformChars. After SetLabel is called, the platform chars are released by JNU_ReleaseStringPlatformChars — the pointer has just become invalid.

Accessing an invalid pointer is a bad idea.

We should update the code, which will greatly simplify it: no label needs to be passed, even the SetLabel method becomes redundant.;;;","2023-06-30 11:15;djelinski;We are not planning an upgrade to Clang. I'm experimenting with it to see how it works.

I'm not sure why this doesn't crash. Maybe we don't have any tests? Either that, or the value is never used.;;;","2023-06-30 11:15;honkar; [~aivanov] mii.dwTypeData is of type LPTSTR. https://learn.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-menuiteminfoa.
;;;","2023-06-30 11:38;honkar;[~djelinski] Thanks for clarifying. I was actually not sure of the context of the JBS bug as the description said Clang and the warning was for a native windows file. 
True, I don't see dwTypeData referenced anywhere in awt_MenuItem.cpp except for on line#712;;;","2023-06-30 11:44;aivanov;[~djelinski] It's never used. The drawing (AwtMenuItem::DrawSelf) and measuring (AwtMenuItem::MeasureSelf) code uses jstring from the Java object. When required, it converts to native string and draws the text.

I don't understand why we do so many things, including removing the menu item and re-adding it, where the only effect SetLabel has is calling RedrawMenuBar to re-draw the menu.

There could be minutia that I didn't catch from my quick analysis.;;;","2023-08-14 11:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15276
Date: 2023-08-14 18:03:21 +0000;;;","2023-09-19 10:41;dukebot;Changeset: 0c972468
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-09-19 17:37:49 +0000
URL:       https://git.openjdk.org/jdk/commit/0c972468e7d72c991f28943f602232e0317ea21d
;;;",,,,,,,,,,,,,,,
tautological-compare warning in awt_Win32GraphicsDevice.cpp,JDK-8311109,5104404,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,djelinski,djelinski,2023-06-29 11:23,2023-07-12 13:48,2023-10-01 09:55,2023-07-03 13:46,11,17,20,21,22,8,22,client-libs,,0,sn_147,,,,,,,,,,,,,,,,,"Reported by clang:

src\java.desktop\windows\native\libawt\windows\awt_Win32GraphicsDevice.cpp(902,27): warning: self-comparison always evaluates to true [-Wtautological-compare]
            (mi1.dwFlags  == mi1.dwFlags))
                          ^",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3243v:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-06-30 10:15;honkar;There might be a typo here - mi1 (monitor 1) needs to be compared with mi2 (monitor 2) .;;;","2023-07-03 11:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14760
Date: 2023-07-03 18:28:40 +0000;;;","2023-07-03 13:46;dukebot;Changeset: d8a01216
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-07-03 20:43:17 +0000
URL:       https://git.openjdk.org/jdk/commit/d8a012161ad68d08467a6632c2bfb7c4dc341d28
;;;",,,,,,,,,,,,,,,,,,,,
dangling-gsl warning in libwixhelper.cpp,JDK-8311104,5104399,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenyuk,djelinski,djelinski,2023-06-29 09:25,2023-08-10 06:04,2023-10-01 09:55,2023-07-27 09:10,20,21,22,,,,22,tools,,0,sn_149,,,,,,,,,,,,,,,,,"While experimenting with clang build on Windows, I noticed the following warning:

jdk\open\src\jdk.jpackage\windows\native\libwixhelper\libwixhelper.cpp(75,36): warning: object backing the pointer will be destroyed at the end of the full-expression [-Wdangling-gsl]
    const LPCTSTR upgradeCodeStr = upgradeCode.toMsiString().c_str();
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~

The code was recently introduced in JDK-8283707.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283707,JDK-8288293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3242r:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-06-29 11:31;vdyakov;Introduced in 20;;;","2023-07-26 11:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15044
Date: 2023-07-26 18:42:47 +0000;;;","2023-07-27 09:10;dukebot;Changeset: 0ca2bfd7
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2023-07-27 16:07:54 +0000
URL:       https://git.openjdk.org/jdk/commit/0ca2bfd77960a84486d10d910aa47b2aa9c14e22
;;;",,,,,,,,,,,,,,,,,,,,
Synchron XMLHttpRequest not receiving data,JDK-8311097,5104390,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bae,oschmidtmer,oschmidtmer,2023-06-29 08:18,2023-09-15 07:06,2023-10-01 09:55,2023-09-01 02:33,jfx17.0.6,jfx20,,,,,jfx22,javafx,,0,8-bp,jfx21u-fix-request,jfx21u-fix-yes,regression,regression_8285881,,,,,,,,,,,,,"Since an updated Webkit, synchron XMLHttpRequests do not receive the full data.
Debugging shows, that the call to ""twkDidReceiveData"" in
com.sun.webkit.network.URLLoader receives a buffer with the full length of received data. However the Network-dataReceived entry from the WebView-Debugger only shows 1 byte of data.

Attached is a sample gradle project, that uses undertow to demonstrate this.
This opens a WebViews, that has two links with onClick-handlers for XMLHttpRequests.
In both cases a line with ""[""N"",""J"",""20.0.0.111"",""_"",""1030924534.5084621120561509448.7657568095387879952.0.0"",3,""469033f83c8474486a45259c78f58a10""]"" should be written to System.out.

On ""Sync"" only ""["" is written.",,,,,,,,,,,JDK-8316232,JDK-8315570,JDK-8315530,JDK-8316231,JDK-8316230,,,,,,,,,,,,,,,,,,,,,,,JDK-8285881,,,,"2023-07-11 05:42;oschmidtmer;XMLHTTPRequest2.zip;https://bugs.openjdk.org/secure/attachment/104557/XMLHTTPRequest2.zip","2023-06-29 08:12;oschmidtmer;XMLHttpRequest.zip;https://bugs.openjdk.org/secure/attachment/104459/XMLHttpRequest.zip",,,,,,,,,,,,,,,,windows,,,,,"0|i3240r:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-07-05 00:58;hmeda;[~oschmidtmer] Could you please detailed steps to reproduce the issue?;;;","2023-07-05 02:14;oschmidtmer;1. XMLHttpRequest.zip contains a gradle project, please import it to your IDE
2. Run the class ""Start.java"". This starts a small HTTP server bound to 127.0.0.1 and opens a JavaFX WebView, where ""alert"" is send to System.out and a simple page is opened:
There are two links, ""Sync"" and ""Async"" which start either synchron or asynchron requests and show the response in an ""alert"".
3. Try both:
""sync"" only writes ""["" to System.out via the ""alert"".
""async"" a much longer String.
Both should have the same ouput.

When opened in a external browser, the sample page is found as ""http://localhost/"", the prepared response for the XMLHttpRequest under ""http://localhost/xhr"" .;;;","2023-07-10 04:54;hmeda;[~oschmidtmer] I tried importing the project using IntelliJ IDE. While executing, I see below error:
UT005071: Undertow request failed HttpServerExchange{ GET /}

Could you let me know if there are any additional dependencies?;;;","2023-07-11 05:50;oschmidtmer;I missed, that the resource loading for the start page in the sample didn't work in build jars. When running in eclipse it did fine.
I've updated the sample.;;;","2023-08-30 07:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1227
Date: 2023-08-30 14:32:37 +0000;;;","2023-08-31 08:25;kcr;[~bae] Once you integrate this fix into the mainline, can you also backport it to jfx21u? If you want to make the request, I'll approve it. See [1] for instructions.

[1] https://mail.openjdk.org/pipermail/openjfx-dev/2023-August/042200.html;;;","2023-09-01 02:33;dukebot;Changeset: 82f27748
Author:    Andrew Brygin <bae@openjdk.org>
Committer: Dmitry Cherepanov <dcherepanov@openjdk.org>
Date:      2023-09-01 09:31:20 +0000
URL:       https://git.openjdk.org/jfx/commit/82f2774895b41ce81215012556483b1519495d5d
;;;","2023-09-01 02:51;bae;Fix request for jfx21u:
I would like to backport this change to jfx21u, because the problem is applicable to all jfx versions with webkit above v614.1.
The change applies cleanly. The risk seems to be low: we just correct the data accumulation for synchronous requests. Supplied test demonstrates that the change works as expected.
;;;","2023-09-01 04:24;kcr;Approved to backport to jfx21u for 21.0.1.;;;","2023-09-01 04:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx21u/pull/12
Date: 2023-09-01 11:47:09 +0000;;;","2023-09-02 05:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/146
Date: 2023-09-02 12:47:18 +0000;;;",,,,,,,,,,,,
 Please disable runtime/jni/nativeStack/TestNativeStack.java on armhf,JDK-8311092,5103393,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,pnarayanaswa,pnarayanaswa,2023-06-16 05:32,2023-07-25 04:38,2023-10-01 09:55,2023-07-03 15:26,21,,,,,,22,hotspot,,0,dcsswa,hgupdate-sync,regression,reproducer-no,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Java 21 on Ubuntu 23.10 (mantic)

A DESCRIPTION OF THE PROBLEM :
os::current_frame() is stubbed out on armhf and thus test always fails because it can not produce native frames. 
See void JavaThread::print_jni_stack() implementation.


REGRESSION : Last worked in version 21

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
jtwork_dir=jtreg_work
report_dir=jtreg_report
BOOTJDK_HOME=/usr/lib/jvm/java-1.20.0-openjdk-armhf
JDK_TO_TEST=`pwd`/build/linux-arm-server-slowdebug/images/jdk/
export JAVA_HOME=/usr/lib/jvm/java-1.20.0-openjdk-armhf
native_path=$(pwd)/build/linux-arm-server-slowdebug/images/test/hotspot/jtreg/native \
jtreg  \
    -verbose:full \
    -automatic \
    -timeout:5 \
    -workDir:""${jtwork_dir}"" \
    -reportDir:""${report_dir}"" \
    -jdk:${JDK_TO_TEST} \
    -vmoption:-Dtest.boot.jdk=${BOOTJDK_HOME} \
    -nativepath:${native_path} \
    test/hotspot/jtreg/runtime/jni/nativeStack/TestNativeStack.java


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
test passes
ACTUAL -
test fails with 
result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 'thread_start' missing from stdout/stderr


FREQUENCY : always
",,,,,,,,,,,JDK-8312016,JDK-8312911,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,arm,,,,,,,,,,linux,,,,,"0|i31xv7:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-02 18:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14750
Date: 2023-07-03 01:24:20 +0000;;;","2023-07-03 15:26;dukebot;Changeset: 0916e6a6
Author:    Vladimir Petko <vladimir.petko@canonical.com>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2023-07-03 22:25:20 +0000
URL:       https://git.openjdk.org/jdk/commit/0916e6a603a595e2280765f9159f9be24ada4af6
;;;","2023-07-05 13:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/97
Date: 2023-07-05 20:35:36 +0000;;;","2023-07-06 19:27;vpetko;Fix Request jdk21

This issue should be backported as the same test exists in jdk21 and fails on armhf platform.

The risk of fix is low as only specific (arm) architecture is excluded from the test. 

There is no dependencies on other backports.

Testing:

Test is excluded on ARMHF:
==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR   
   jtreg:test/hotspot/jtreg/runtime/jni/nativeStack/TestNativeStack.java
                                                         0     0     0     0   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-arm-server-release'

Test passes on amd64:
==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR   
   jtreg:test/hotspot/jtreg/runtime/jni/nativeStack/TestNativeStack.java
                                                         1     1     0     0   
==============================
TEST SUCCESS

Stopping javac server
Finished building target 'test' in configuration 'linux-x86_64-server-release'

;;;","2023-07-06 20:52;dholmes;[~vpetko] this can be backported directly to JDK 21, it does not have to wait for 21u and no specific approval is needed for JDK 21 for a test bug during RDP1.;;;","2023-07-06 21:54;vpetko;[~dholmes] thank you!!! I have removed the tag. Is it sufficient to have the PR[1] above or do I need to do something more?

[1] https://git.openjdk.org/jdk21/pull/97;;;","2023-07-06 22:32;dholmes;The PR is sufficient - now approved.;;;",,,,,,,,,,,,,,,,
KeytoolReaderP12Test.java fail on localized Windows platform,JDK-8311081,5104367,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,tkiriyama,tkiriyama,2023-06-28 21:42,2023-09-12 11:14,2023-10-01 09:55,2023-08-28 13:39,11,17,21,22,,,22,security-libs,,0,amazon-interest,noreg-self,testbug,,,,,,,,,,,,,,,"The environment in which I ran the test is as follows:
JDK: 21-ea
OS: Windows 10
Locale: ja

The following test failed on localized Windows platform:

java/security/KeyStore/PKCS12/KeytoolReaderP12Test.java 

Here's a snippet from the log file of KeytoolReaderP12Test.java:

---
java.lang.RuntimeException: 'Alias name: pkcs12testenduser1' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at KeytoolReaderP12Test.lambda$runAndValidate$0(KeytoolReaderP12Test.java:141)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1707)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at KeytoolReaderP12Test.runAndValidate(KeytoolReaderP12Test.java:140)
	at KeytoolReaderP12Test.readTest(KeytoolReaderP12Test.java:123)
	at KeytoolReaderP12Test.main(KeytoolReaderP12Test.java:57)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1592)
---
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8048830,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i323vn:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-06-30 13:38;naoto;Trying to reproduce the issue on English Windows set to Japanese, but so far could not reproduce it.;;;","2023-07-06 14:39;jlu;[~tkiriyama] Are you able to provide any additional context on this bug? I have automated some test runs on a Windows machine with a Japanese locale but also could not reproduce the issue. 

Is this an intermittent issue for you?;;;","2023-07-07 02:33;tkiriyama;This problem always happens.
In the Japanese locale, many tests have similar problems, but most of them can be worked around by adding the ""-Duser.language=en -Duser.country=US "" options when running jtreg.
However, in KeytoolReaderP12Test.java the test fails because the added options are not valid.

My environment SystemLocale
```
>chcp
現在のコード ページ: 932

> Get-WinSystemLocale

LCID             Name             DisplayName
----             ----             -----------
1041             ja-JP            日本語 (日本)
```

Locale on cygwin:
```
LANG=C
LC_CTYPE=""C""
LC_NUMERIC=""C""
LC_TIME=""C""
LC_COLLATE=""C""
LC_MONETARY=""C""
LC_MESSAGES=""C""
LC_ALL=
```;;;","2023-07-07 11:56;jlu;Thank you Takuya,

That was very helpful. I will submit a PR shortly with a fix.;;;","2023-07-07 12:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14806
Date: 2023-07-07 18:58:02 +0000;;;","2023-08-28 13:39;dukebot;Changeset: b4b2fecb
Author:    Justin Lu <jlu@openjdk.org>
Date:      2023-08-28 20:36:32 +0000
URL:       https://git.openjdk.org/jdk/commit/b4b2fecb42d9f14d73e8d79a9e59dee4d697f9cf
;;;",,,,,,,,,,,,,,,,,
Windows builds fail without precompiled headers after JDK-8310728,JDK-8311064,5104348,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,djelinski,djelinski,djelinski,2023-06-28 13:19,2023-07-12 13:39,2023-10-01 09:55,2023-06-28 23:08,22,,,,,,22,hotspot,,0,noreg-build,,,,,,,,,,,,,,,,,"Builds fail with the following errors:

xPhysicalMemory.obj : error LNK2001: unresolved external symbol ""public: __cdecl PlatformMutex::~PlatformMutex(void)"" (??1PlatformMutex@@QEAA@XZ)
xVirtualMemory.obj : error LNK2001: unresolved external symbol ""public: __cdecl PlatformMutex::~PlatformMutex(void)"" (??1PlatformMutex@@QEAA@XZ)
zVirtualMemory.obj : error LNK2001: unresolved external symbol ""public: __cdecl PlatformMutex::~PlatformMutex(void)"" (??1PlatformMutex@@QEAA@XZ)
zPhysicalMemory.obj : error LNK2001: unresolved external symbol ""public: __cdecl ZListNode<class ZMemory>::~ZListNode<class ZMemory>(void)"" (??1?$ZListNode@VZMemory@@@@QEAA@XZ)
zVirtualMemory_windows.obj : error LNK2019: unresolved external symbol ""public: enum zoffset __cdecl ZMemory::start(void)const "" (?start@ZMemory@@QEBA?AW4zoffset@@XZ) referenced in function ""public: static void __cdecl ZVirtualMemoryManagerSmallPages::PlaceholderCallbacks::create_callback(class ZMemory const *)"" (?create_callback@PlaceholderCallbacks@ZVirtualMemoryManagerSmallPages@@SAXPEBVZMemory@@@Z)
zVirtualMemory_windows.obj : error LNK2019: unresolved external symbol ""public: enum zoffset_end __cdecl ZMemory::end(void)const "" (?end@ZMemory@@QEBA?AW4zoffset_end@@XZ) referenced in function ""public: static void __cdecl ZVirtualMemoryManagerSmallPages::PlaceholderCallbacks::shrink_from_back_callback(class ZMemory const *,unsigned __int64)"" (?shrink_from_back_callback@PlaceholderCallbacks@ZVirtualMemoryManagerSmallPages@@SAXPEBVZMemory@@_K@Z)
zVirtualMemory_windows.obj : error LNK2019: unresolved external symbol ""public: unsigned __int64 __cdecl ZMemory::size(void)const "" (?size@ZMemory@@QEBA_KXZ) referenced in function ""public: static void __cdecl ZVirtualMemoryManagerSmallPages::PlaceholderCallbacks::create_callback(class ZMemory const *)"" (?create_callback@PlaceholderCallbacks@ZVirtualMemoryManagerSmallPages@@SAXPEBVZMemory@@@Z)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310728,,,,,,,,,,,,,,,,,,,,,,b04,22,,,,,,,"0|i323rf:",9223372036854775807,b05,,,,,,,,,,,"2023-06-28 14:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14701
Date: 2023-06-28 21:13:50 +0000;;;","2023-06-28 23:08;dukebot;Changeset: af319d96
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-06-29 06:05:53 +0000
URL:       https://git.openjdk.org/jdk/commit/af319d963f180a23a0a9acdc9a4972f90ee586e0
;;;",,,,,,,,,,,,,,,,,,,,,
JFR: RecordedThread::getOSThreadId() should return -1 if thread is virtual,JDK-8311040,5104318,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,egahlin,egahlin,2023-06-28 05:26,2023-07-25 04:47,2023-10-01 09:55,2023-07-18 09:01,21,22,,,,,22,hotspot,,0,hgupdate-sync,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312266,JDK-8312928,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i323kr:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-07-18 04:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14920
Date: 2023-07-18 11:23:37 +0000;;;","2023-07-18 09:01;dukebot;Changeset: 9905f758
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2023-07-18 16:00:30 +0000
URL:       https://git.openjdk.org/jdk/commit/9905f7582270634eb19f7d9cb67210a174da9a85
;;;","2023-07-18 09:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/135
Date: 2023-07-18 16:05:03 +0000;;;",,,,,,,,,,,,,,,,,,,,
Incorrect exhaustivity computation,JDK-8311038,5104316,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jlahoda,jlahoda,jlahoda,2023-06-28 05:23,2023-07-25 04:46,2023-10-01 09:55,2023-07-14 01:23,21,,,,,,22,tools,,0,conformance,hgupdate-sync,tck-red-22,,,,,,,,,,,,,,,"Consider code like:
---
public class Test {

    record Rec(Object t) {}

    private void test1() {
        Rec r = new Rec(""test"");
        int res = switch (r) {
            case Rec(String x): {
                yield 4;
            }
            case Rec(Object x): {
                yield -3;
            }
        };

        if (r instanceof Rec(String x)) {
            System.out.println(x.length());
        }
    }

    private void test2() {
        Rec r = new Rec(""test"");
        int res = switch (r) {
            case Rec(String x): {
                yield x.length();
            }
            case Rec(Object x): {
                yield -3;
            }
        };
    }

}
---

this leads to:
---
/home/work/src/jdk/jdk/test/langtools/tools/Test.java:14: error: the switch expression does not cover all possible input values
        int res = switch (r) {
                  ^
/home/work/src/jdk/jdk/test/langtools/tools/Test.java:30: error: the switch expression does not cover all possible input values
        int res = switch (r) {
                  ^
2 errors
---

which is obviously wrong, because the switches are exhaustive.

Also not that code like:
---
public class Test {

    record Rec(Object t) {}

    private void test0() {
        Rec r = new Rec(""test"");
        int res = switch (r) {
            case Rec(String x): {
                yield 4;
            }
            case Rec(Object x): {
                yield -3;
            }
        };
    } 
}
---

despite having the overall structure as the original code. That is a Symbol completion issue that needs to be handled as well.",,,,,,,,,,,JDK-8311039,JDK-8312927,,,,,,,,,,,,,,,,,,,,,,JCK-7319464,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i323kb:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-28 13:02;eananeva;JCK21 tests failed:

lang/STMT/stmt485/stmt48501m0111/stmt48501m0111.html
lang/STMT/stmt485/stmt48501m0101/stmt48501m0101.html;;;","2023-06-29 06:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14711
Date: 2023-06-29 13:24:05 +0000;;;","2023-07-14 01:23;dukebot;Changeset: bbb7ce51
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-07-14 08:21:48 +0000
URL:       https://git.openjdk.org/jdk/commit/bbb7ce5137cd3e8365552b42610e19b7ebe43ba1
;;;","2023-07-14 03:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/127
Date: 2023-07-14 09:57:59 +0000;;;",,,,,,,,,,,,,,,,,,,
Fix typo in javac man page,JDK-8311034,5104312,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-06-28 04:30,2023-07-12 13:37,2023-10-01 09:55,2023-06-28 06:49,22,,,,,,22,tools,,0,hgupdate-sync,noreg-doc,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311355,JDK-8311048,,,,,,,,,,,,,,,,,,,,,,JDK-8310363,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i323jf:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-28 04:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14694
Date: 2023-06-28 11:34:05 +0000;;;","2023-06-28 06:49;dukebot;Changeset: f17bfeec
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-06-28 13:48:16 +0000
URL:       https://git.openjdk.org/jdk/commit/f17bfeec61b753eb0eb8a48df9bf5ccc3bcd9eb3
;;;","2023-06-28 07:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/76
Date: 2023-06-28 14:00:02 +0000;;;",,,,,,,,,,,,,,,,,,,,
[macos] PrinterJob does not take into account Sides attribute,JDK-8311033,5104310,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alexsch,alexsch,alexsch,2023-06-28 04:27,2023-09-04 03:16,2023-10-01 09:55,2023-07-28 03:26,17,8,,,,,22,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,macos,,,,,,,,,,"PrinterJob class with sides attribute prints pages according to the printer default settings.

Steps to reproduce:
- Compile the attached JavaSidesAttributePrinting.java sample which passes a sides attribute provided as the program argument to the PrinterJob and prints 2 pages.
- Run the sample with the ONE_SIDED and DUPLEX argument:
--------------------------
> javac JavaSidesAttributePrinting.java
> java JavaSidesAttributePrinting ONE_SIDED
> java JavaSidesAttributePrinting DUPLEX
--------------------------

Expected result:
The first two pages should be printed as one sided.
The second two pages should be printed as duplex.

Actual result:
All pages are printed as one sided or duplex according to the printer default settings.
","OS: macOS
JDK: 20.0.1
",,,,,,,,,,JDK-8314772,JDK-8315638,JDK-8315115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-06-28 04:27;alexsch;JavaSidesAttributePrinting.java;https://bugs.openjdk.org/secure/attachment/104448/JavaSidesAttributePrinting.java",,,,,,,,,,,,,,,,,os_x,,,,,"0|i323iz:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-06-28 04:31;alexsch;javaPrinterJobToNSPrintInfo method from CPrinterJob does not set Sides attribute to NSPrintInfo:

https://github.com/openjdk/jdk/blob/c3f10e847999ec254893de5a1a5de32fd07f715a/src/java.desktop/macosx/native/libawt_lwawt/awt/CPrinterJob.m#L426;;;","2023-06-30 03:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14727
Date: 2023-06-30 10:00:46 +0000;;;","2023-07-28 03:26;dukebot;Changeset: a3d67231
Author:    Alexander Scherbatiy <alexsch@openjdk.org>
Date:      2023-07-28 10:25:22 +0000
URL:       https://git.openjdk.org/jdk/commit/a3d67231a71fbe37c509fcedd54c679b4644c0d9
;;;","2023-08-21 05:33;alexsch;Fix request [11u]

The fix allows to print pages with DUPLEX and TUMBLE attributes on macOS.
Manual test/jdk/java/awt/print and test/jdk/javax/print tests were run to check printing on macOS with and without the fix. ;;;","2023-08-21 05:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2091
Date: 2023-08-21 12:28:45 +0000;;;","2023-08-27 22:44;alexsch;Fix request [17u]

The fix allows to print pages with DUPLEX and TUMBLE attributes on macOS.
Manual test/jdk/java/awt/print and test/jdk/javax/print tests were run to check printing on macOS with and without the fix. ;;;","2023-08-27 22:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1701
Date: 2023-08-28 05:43:22 +0000;;;","2023-08-28 07:47;clanger;[~alexsch], would you mind backporting this to JDK21 as well since this an LTS release, too, and we should have the same behavior/fixes there as in other LTS releases. Thanks.;;;","2023-08-28 11:39;alexsch;Fix request [21]

The fix allows to print pages with DUPLEX and TUMBLE attributes on macOS.
Manual test/jdk/java/awt/print and test/jdk/javax/print tests were run to check printing on macOS with and without the fix. ;;;","2023-08-28 11:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/174
Date: 2023-08-28 18:38:53 +0000;;;","2023-08-28 13:54;alexsch;Fix request [21u]

The fix allows to print pages with DUPLEX and TUMBLE attributes on macOS.
Manual test/jdk/java/awt/print and test/jdk/javax/print tests were run to check printing on macOS with and without the fix. ;;;","2023-08-28 14:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/116
Date: 2023-08-28 20:53:54 +0000;;;",,,,,,,,,,,
Empty value for java.protocol.handler.pkgs system property can lead to unnecessary classloading attempts of protocol handlers,JDK-8311032,5104309,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2023-06-28 04:08,2023-07-12 13:38,2023-10-01 09:55,2023-06-28 18:32,11,17,20,,,,22,core-libs,,0,noreg-hard,,,,,,,,,,,,,,,,,"java.net.URL allows applications to specify a value for the java.protocol.handler.pkgs system property to point to protocol handlers for the URL instance. As noted in the javadoc of the java.net.URL constructor:

     *     the constructor reads the value of the system property:
     *     <blockquote>{@systemProperty
     *         java.protocol.handler.pkgs
     *     }</blockquote>
     *     If the value of that system property is not {@code null},
     *     it is interpreted as a list of packages separated by a vertical
     *     slash character '{@code |}'. The constructor tries to load
     *     the class named:
     *     <blockquote>{@code
     *         <package>.<protocol>.Handler
     *     }</blockquote>
     *     where {@code <package>} is replaced by the name of the package
     *     and {@code <protocol>} is replaced by the name of the protocol.
     *     If this class does not exist, or if the class exists but it is not
     *     a subclass of {@code URLStreamHandler}, then the next package
     *     in the list is tried.


The implementation in its current form matches this expected semantics. The implementation however doesn't take into account an empty value for the java.protocol.handler.pkgs system property.

So if an application is a launched with this system property value being empty:

java -Djava.protocol.handler.pkgs= Foo.java

Then this leads to the URL constructor attempting to class load a class of the form "".jar.Handler"" (for example for the jar protocol). Since the fully qualified classname cannot start with a ""."", this class loading attempt is bound to fail (and it does). In its current implementation, when that happens, the implementation then tries to load that class using the system classloader, which too will fail.
These classloading attempts for this malformed classname can be expensive, especially if the application is running in application classpath mode and the classpath consists large number of jars.

Not attempting to locate such a class when the package name prefix value is empty would be a good thing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308184,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i323ir:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-06-28 04:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14693
Date: 2023-06-28 11:15:53 +0000;;;","2023-06-28 18:32;dukebot;Changeset: 8f5a3848
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2023-06-29 01:30:46 +0000
URL:       https://git.openjdk.org/jdk/commit/8f5a38488c354b21f1033e1cbdfa0a400f2622fc
;;;",,,,,,,,,,,,,,,,,,,,,
JTable header border vertical lines are not aligned with data grid lines,JDK-8311031,5104308,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,tr,tr,2023-06-28 03:43,2023-08-10 09:13,2023-10-01 09:55,2023-08-02 21:46,11,17,21,,,,22,client-libs,,0,sn_149,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
java version 11 and above.

Windows 10, 225% screen scale

A DESCRIPTION OF THE PROBLEM :
There is a miss-match between painting of JTable header border and its data grid border. The issue occurs in Metal Look and Feel only. This can be observed when when scaling factor is increased and hence in the example 225% scaling factor is chosen.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Set screen scale on Windows to 225% .
Run code.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The Table header border should be aligned with data grid vertical lines
ACTUAL -
The Table header border is not aligned with data grid vertical lines

---------- BEGIN SOURCE ----------
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class TableSample {
    JFrame f;
    JTable j;
    TableSample()
    {
        f = new JFrame();
        f.setTitle(""JTable - 225% scaling"");

        String[][] data = {
                { ""Java"", ""Java"", ""Java""},
                { ""Java"", ""Java"", ""Java""}
        };

        String[] columnNames = { ""Size"", ""Size"", ""Size""};

        j = new JTable(data, columnNames);
        j.setBounds(30, 40, 200, 300);

        JScrollPane sp = new JScrollPane(j);
        f.add(sp);
        f.setSize(500, 200);
        f.setVisible(true);
    }
    
    public static void main(String[] args) throws UnsupportedLookAndFeelException, ClassNotFoundException, InstantiationException, IllegalAccessException {
        System.setProperty(""sun.java2d.uiScale"", ""2.25"");       
        UIManager.setLookAndFeel(""javax.swing.plaf.metal.MetalLookAndFeel"");
        new TableSample();
    }
}

---------- END SOURCE ----------

FREQUENCY : always",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-06-28 03:47;tr;JTableHeaderBorderIssue.png;https://bugs.openjdk.org/secure/attachment/104447/JTableHeaderBorderIssue.png",,,,,,,generic,,,,,,,,,,generic,,,,,"0|i323ij:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-07-04 04:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14766
Date: 2023-07-04 11:01:27 +0000;;;","2023-08-02 21:46;dukebot;Changeset: 87d7e976
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-08-03 04:44:41 +0000
URL:       https://git.openjdk.org/jdk/commit/87d7e976cbb9a4441f6f215252383b41b2b69f97
;;;",,,,,,,,,,,,,,,,,,,,,
Some G1 specific tests do not set -XX:+UseG1GC,JDK-8311026,5104303,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-06-28 00:56,2023-07-28 00:15,2023-10-01 09:55,2023-06-30 04:37,21,22,,,,,22,hotspot,,0,gc-g1,jdk21u-fix-request,jdk21u-fix-yes,noreg-self,,,,,,,,,,,,,,"Most G1 tests set  -XX:+UseG1GC, but a few (e.g. gc/g1/TestVerificationInConcurrentCycle.java) miss that.
This is usually just fine and no problem because G1 is the default anyway.
However in some cases where a custom JVM changes the default those tests start to fail which is not really necessary.",,,,,,,,,,,JDK-8313301,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i323hf:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-30 01:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14722
Date: 2023-06-30 08:11:47 +0000;;;","2023-06-30 04:37;dukebot;Changeset: a7d168b5
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-06-30 11:35:02 +0000
URL:       https://git.openjdk.org/jdk/commit/a7d168b522bb05345a40ae1fb18942ba663d3182
;;;","2023-07-26 06:12;mbaesken;jdk21u backport request
I would like to have the patch in jdk21u as well, because the issue is present there too The patch is clean and low risk.;;;","2023-07-26 06:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/18
Date: 2023-07-26 13:09:28 +0000;;;",,,,,,,,,,,,,,,,,,,
assert(false) failed: EA: missing memory path,JDK-8311023,5104300,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbhateja,jbhateja,jbhateja,2023-06-27 23:42,2023-07-25 04:27,2023-10-01 09:55,2023-07-05 08:39,21,22,,,,,22,hotspot,,0,c2,hgupdate-sync,oracle-triage-11,oracle-triage-17,oracle-triage-22,regression,vectorIntrinsics,,,,,,,,,,,"Command Line: java -jar /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar -va -timeout:4 -jdk:$JAVA_HOME -javaoptions:""-XX:CompileThresholdScaling=0.1 -XX:UseAVX=2 -Xbatch -XX:-TieredCompilation"" Float256VectorTests.java

test Float256VectorTests.hashCodeFloat256VectorTestsSmokeTest(float[i + 1]): success
 160  StoreI  === 126 116 159 152  [[ 16 182 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:3] (java/lang/Cloneable,java/io/Serializable):NotNull:exact[2] *,iid=45, idx=13; !jvms: AbstractSpecies::hashCode @ bci:29 (line 668)
 182  VectorizedHashCode  === 126 160 110 22 41 180  [[ 192 ]]  !jvms: Arrays::hashCode @ bci:56 (line 4365) AbstractSpecies::hashCode @ bci:32 (line 669)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jatinbha/sandboxes/jdk2/jdk/src/hotspot/share/opto/escape.cpp:3583), pid=3765325, tid=3765340
#  assert(false) failed: EA: missing memory path
#
# JRE version: OpenJDK Runtime Environment (22.0) (fastdebug build 22-internal-adhoc.root.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 22-internal-adhoc.root.jdk, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xbfc845]  ConnectionGraph::split_unique_types(GrowableArray<Node*>&, GrowableArray<ArrayCopyNode*>&, GrowableArray<MergeMemNode*>&)+0x3e75
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /home/jatinbha/sandboxes/jdk2/jdk/test/jdk/jdk/incubator/vector/JTwork/scratch/core.3765325)
#
# An error report file with more information is saved as:
# /home/jatinbha/sandboxes/jdk2/jdk/test/jdk/jdk/incubator/vector/JTwork/scratch/hs_err_pid3765325.log
#
# Compiler replay data is saved as:
# /home/jatinbha/sandboxes/jdk2/jdk/test/jdk/jdk/incubator/vector/JTwork/scratch/replay_pid3765325.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#


Current CompileTask:
C2:  23897 3343    b        jdk.incubator.vector.AbstractSpecies::hashCode (36 bytes)

Stack: [0x00007fcbdca19000,0x00007fcbdcb1a000],  sp=0x00007fcbdcb14d50,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xbb8ccb]  ConnectionGraph::split_unique_types(GrowableArray<Node*>&, GrowableArray<ArrayCopyNode*>&, GrowableArray<MergeMemNode*>&)+0x218b  (escape.cpp:3583)
V  [libjvm.so+0xbc1f26]  ConnectionGraph::compute_escape()+0x22d6
V  [libjvm.so+0xbc2533]  ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*)+0x133
V  [libjvm.so+0x9eec4c]  Compile::Optimize()+0x80c
V  [libjvm.so+0x9f1506]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1b96
V  [libjvm.so+0x84b214]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x3c4
V  [libjvm.so+0x9fd410]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa00
V  [libjvm.so+0x9fe298]  CompileBroker::compiler_thread_loop()+0x618
V  [libjvm.so+0xeb5e7c]  JavaThread::thread_main_inner()+0xcc
V  [libjvm.so+0x179575a]  Thread::call_run()+0xba
V  [libjvm.so+0x1495c1c]  thread_native_entry(Thread*)+0x11c",,,,,,,,,,,JDK-8312886,JDK-8311560,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282664,,,,,,,,,,,x86_64,,,,,,,b06,21,,,,,,,"0|i323gr:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-29 03:20;thartmann;ILW = Assert during C2's EA, single vector api test with non-default flags, disable EA or compilation of affected method = HLM = P3;;;","2023-07-03 08:31;jbhateja;Minimal test showcasing the problem.
--------------------------------------------------
import java.util.Arrays;
 
public class hashcode {
    public static int micro() {
        int[] a = { 10, 20, 30, 40, 50, 60};
        return Arrays.hashCode(a);
    }

    public static void main(String [] args) {
        int res = 0;
        for (int i = 0; i < 10000; i++) {
            res += micro();
        }
        System.out.println(""PASS"");
    }
}
;;;","2023-07-03 15:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14764
Date: 2023-07-03 21:55:44 +0000;;;","2023-07-05 08:39;dukebot;Changeset: 6ebb0e3b
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2023-07-05 15:37:38 +0000
URL:       https://git.openjdk.org/jdk/commit/6ebb0e3bd4ba3579c66cdc5a329e95df7bda5b95
;;;","2023-07-05 23:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/99
Date: 2023-07-06 06:03:49 +0000;;;",,,,,,,,,,,,,,,,,,
Typo cleanup in Classfile API,JDK-8311020,5104297,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,liach,liach,liach,2023-06-27 22:58,2023-07-12 13:39,2023-10-01 09:55,2023-06-28 22:44,,,,,,,22,core-libs,,0,classfile-api,,,,,,,,,,,,,,,,,"Since the Classfile API is transitioning to preview, it's a good time to review the  minor typos in the API. I have discovered a few by running IDE inspection over the API and its implementation and skimming through the API, which are fixed in the upcoming patch.

More complex problems will be posted to the mailing list, so that desirable solutions are found and consensus are reached before we make changes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i323g3:",9223372036854775807,b05,,,,,,,,,,,"2023-06-27 23:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14687
Date: 2023-06-28 06:09:08 +0000;;;","2023-06-28 22:44;dukebot;Changeset: cbf418a4
Author:    Chen Liang <liach@openjdk.org>
Committer: Adam Sotona <asotona@openjdk.org>
Date:      2023-06-29 05:44:02 +0000
URL:       https://git.openjdk.org/jdk/commit/cbf418a4863f92241f116f782f9a676b7cb4771d
;;;",,,,,,,,,,,,,,,,,,,,,
jdk/jfr/tool/TestView.java can't find event,JDK-8311007,5104282,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2023-06-27 14:40,2023-07-12 13:36,2023-10-01 09:55,2023-06-28 05:31,,,,,,,22,hotspot,,0,hgupdate-sync,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311088,JDK-8311362,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i323cr:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-06-27 22:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14686
Date: 2023-06-27 21:42:33 +0000;;;","2023-06-28 05:31;dukebot;Changeset: e3f18af1
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-06-28 12:29:43 +0000
URL:       https://git.openjdk.org/jdk/commit/e3f18af1dfca1be292a76ed209a7e4ca75ca94da
;;;","2023-06-28 13:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/79
Date: 2023-06-28 20:26:30 +0000;;;",,,,,,,,,,,,,,,,,,,,
missing @since info in jdk.xml.dom,JDK-8311006,5104281,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,joehw,jjg,jjg,2023-06-27 14:02,2023-08-10 09:13,2023-10-01 09:55,2023-08-03 14:51,21,,,,,,22,xml,,0,noreg-doc,,,,,,,,,,,,,,,,,"A script reports the following:

## packages for jdk.xml.dom:  org.w3c.dom.css org.w3c.dom.html org.w3c.dom.stylesheets org.w3c.dom.xpath
no @since in open/src/jdk.xml.dom/share/classes/org/w3c/dom/xpath/XPathEvaluator.java
no @since in open/src/jdk.xml.dom/share/classes/org/w3c/dom/xpath/XPathException.java
no @since in open/src/jdk.xml.dom/share/classes/org/w3c/dom/xpath/XPathExpression.java
no @since in open/src/jdk.xml.dom/share/classes/org/w3c/dom/xpath/XPathNSResolver.java
no @since in open/src/jdk.xml.dom/share/classes/org/w3c/dom/xpath/XPathNamespace.java
no @since in open/src/jdk.xml.dom/share/classes/org/w3c/dom/xpath/XPathResult.java
found:  83
missing:  6",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i323cj:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@13d55830,,,,,,,,,"2023-08-02 15:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15129
Date: 2023-08-02 22:26:37 +0000;;;","2023-08-03 14:51;dukebot;Changeset: d60352e2
Author:    Joe Wang <joehw@openjdk.org>
Date:      2023-08-03 21:49:05 +0000
URL:       https://git.openjdk.org/jdk/commit/d60352e26fd8b7e51eeaf299e3f88783b739b02a
;;;",,,,,,,,,,,,,,,,,,,,,
missing @since info in jdk.net,JDK-8311001,5104276,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dclarke,jjg,jjg,2023-06-27 13:49,2023-07-20 00:00,2023-10-01 09:55,2023-07-04 05:20,21,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"A script reports the following:

## packages for jdk.net:  jdk.net jdk.nio
no @since in open/src/jdk.net/share/classes/jdk/net/Sockets.java
found:  4
missing:  1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310827,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i323bf:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-06-29 02:11;dfuchs;The Sockets class was already present in 1.8 when the jdk.net package was added:
https://hg.openjdk.org/jdk8u/jdk8u-dev/jdk/file/7fcf35286d52/src/share/classes/jdk/net

An @since 1.8 should be added to class.;;;","2023-07-03 08:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14756
Date: 2023-07-03 15:52:55 +0000;;;","2023-07-04 05:20;dukebot;Changeset: 7655b487
Author:    Darragh Clarke <dclarke@openjdk.org>
Date:      2023-07-04 12:19:23 +0000
URL:       https://git.openjdk.org/jdk/commit/7655b487da5cd2e570e19e9f64fbacfa5eb8d155
;;;",,,,,,,,,,,,,,,,,,,,
missing @since info in jdk.management,JDK-8311000,5104275,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,jjg,jjg,2023-06-27 13:48,2023-07-12 13:42,2023-10-01 09:55,2023-06-30 01:30,21,,,,,,22,core-svc,,0,noreg-doc,,,,,,,,,,,,,,,,,"A script reports the following:

## packages for jdk.management:  com.sun.management
no @since in open/src/jdk.management/share/classes/com/sun/management/GarbageCollectionNotificationInfo.java
found:  8
missing:  1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i323b7:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2023-06-29 04:16;kevinw;src/share/classes/com/sun/management/GarbageCollectionNotificationInfo.java is introduced in jdk7 by 
7036199: Adding a notification to the implementation of GarbageCollectorMXBeans;;;","2023-06-29 04:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14708
Date: 2023-06-29 11:48:43 +0000;;;","2023-06-30 01:30;dukebot;Changeset: c08c9831
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-06-30 08:28:19 +0000
URL:       https://git.openjdk.org/jdk/commit/c08c9831df2428e9d083a56eda5ebf00623ba961
;;;",,,,,,,,,,,,,,,,,,,,
Add @since info in jdk.jsobject files,JDK-8310999,5104274,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,jjg,jjg,2023-06-27 13:46,2023-07-12 13:52,2023-10-01 09:55,2023-07-05 11:24,21,,,,,,22,deploy,,0,noreg-doc,,,,,,,,,,,,,,,,,"A script reports the following:

## packages for jdk.jsobject:  netscape.javascript
no @since in open/src/jdk.jsobject/share/classes/netscape/javascript/JSException.java
no @since in open/src/jdk.jsobject/share/classes/netscape/javascript/JSObject.java
found:  0
missing:  2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i323az:",9223372036854775807,b05,,,,,,,,,,,"2023-07-05 07:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14775
Date: 2023-07-05 14:51:31 +0000;;;","2023-07-05 11:24;dukebot;Changeset: 6eba096c
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2023-07-05 18:21:48 +0000
URL:       https://git.openjdk.org/jdk/commit/6eba096ca2e6bf3b7244c632e37b32f2e47b4acc
;;;",,,,,,,,,,,,,,,,,,,,,
missing @since tags in jdk.httpserver,JDK-8310997,5104272,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dclarke,jjg,jjg,2023-06-27 13:42,2023-07-12 13:49,2023-10-01 09:55,2023-07-04 05:23,21,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"A script reports the following:

## packages for jdk.httpserver:  com.sun.net.httpserver com.sun.net.httpserver.spi
no @since in open/src/jdk.httpserver/share/classes/com/sun/net/httpserver/Authenticator.java
no @since in open/src/jdk.httpserver/share/classes/com/sun/net/httpserver/BasicAuthenticator.java
no @since in open/src/jdk.httpserver/share/classes/com/sun/net/httpserver/HttpPrincipal.java
no @since in open/src/jdk.httpserver/share/classes/com/sun/net/httpserver/spi/HttpServerProvider.java
found:  13
missing:  4
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i323aj:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-06-29 02:02;dfuchs;These classes were all present in 1.6 when the HttpServer was added

https://hg.openjdk.org/jdk6/jdk6/jdk/file/8deef18bb749/src/share/classes/com/sun/net/httpserver
https://hg.openjdk.org/jdk6/jdk6/jdk/file/8deef18bb749/src/share/classes/com/sun/net/httpserver/spi

An @since 1.6 should be added.;;;","2023-07-03 08:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14755
Date: 2023-07-03 15:51:06 +0000;;;","2023-07-04 05:23;dukebot;Changeset: 607ddaa0
Author:    Darragh Clarke <dclarke@openjdk.org>
Date:      2023-07-04 12:19:44 +0000
URL:       https://git.openjdk.org/jdk/commit/607ddaa0e6a8d609aa7e4667abf40ac4c4692961
;;;",,,,,,,,,,,,,,,,,,,,
Missing @since tags in jdk.attach,JDK-8310993,5104268,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,jjg,jjg,2023-06-27 13:36,2023-07-12 13:42,2023-10-01 09:55,2023-06-30 10:51,21,,,,,,22,core-svc,,0,noreg-doc,,,,,,,,,,,,,,,,,"A script reports the following:

## packages for jdk.attach:  com.sun.tools.attach com.sun.tools.attach.spi
no @since in open/src/jdk.attach/share/classes/com/sun/tools/attach/AgentInitializationException.java
no @since in open/src/jdk.attach/share/classes/com/sun/tools/attach/AgentLoadException.java
no @since in open/src/jdk.attach/share/classes/com/sun/tools/attach/AttachNotSupportedException.java
no @since in open/src/jdk.attach/share/classes/com/sun/tools/attach/AttachPermission.java
found:  4
missing:  4",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3239n:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2023-06-27 13:37;jjg;I'm not sure what is this correct component/subcomponent for this one;;;","2023-06-29 10:19;alanb;The Attach API was added in JDK 6. The main API classes have @since, it seems the exceptions and the permission class were missed at the time.;;;","2023-06-30 01:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14724
Date: 2023-06-30 08:44:22 +0000;;;","2023-06-30 10:51;dukebot;Changeset: 19601ebe
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-06-30 17:49:56 +0000
URL:       https://git.openjdk.org/jdk/commit/19601ebe9192773a1a47ec3e003b9f1a6808d3de
;;;",,,,,,,,,,,,,,,,,,,
missing @since tags in java.xml,JDK-8310991,5104266,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,joehw,jjg,jjg,2023-06-27 13:31,2023-08-10 06:05,2023-10-01 09:55,2023-08-01 18:39,21,,,,,,22,xml,,0,noreg-doc,,,,,,,,,,,,,,,,,"A script reports the following

## packages for java.xml:  javax.xml javax.xml.catalog javax.xml.datatype javax.xml.namespace javax.xml.parsers javax.xml.stream javax.xml.stream.events javax.xml.stream.util javax.xml.transform javax.xml.transform.dom javax.xml.transform.sax javax.xml.transform.stax javax.xml.transform.stream javax.xml.validation javax.xml.xpath org.w3c.dom org.w3c.dom.bootstrap org.w3c.dom.events org.w3c.dom.ls org.w3c.dom.ranges org.w3c.dom.traversal org.w3c.dom.views org.xml.sax org.xml.sax.ext org.xml.sax.helpers
no @since in open/src/java.xml/share/classes/org/w3c/dom/CDATASection.java
no @since in open/src/java.xml/share/classes/org/w3c/dom/CharacterData.java
no @since in open/src/java.xml/share/classes/org/w3c/dom/Comment.java
no @since in open/src/java.xml/share/classes/org/w3c/dom/DocumentFragment.java
no @since in open/src/java.xml/share/classes/org/w3c/dom/EntityReference.java
no @since in open/src/java.xml/share/classes/org/w3c/dom/NodeList.java
no @since in open/src/java.xml/share/classes/org/w3c/dom/Notation.java
no @since in open/src/java.xml/share/classes/org/w3c/dom/ProcessingInstruction.java
found:  180
missing:  8",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32397:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@13d55830,,,,,,,,,"2023-08-01 12:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15109
Date: 2023-08-01 19:32:40 +0000;;;","2023-08-01 18:39;dukebot;Changeset: 528596fa
Author:    Joe Wang <joehw@openjdk.org>
Date:      2023-08-02 01:37:40 +0000
URL:       https://git.openjdk.org/jdk/commit/528596fa937f8589f71fa06929fbb75f62142a4f
;;;",,,,,,,,,,,,,,,,,,,,,
Missing @since tags in java.management.rmi,JDK-8310988,5104263,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,jjg,jjg,2023-06-27 13:26,2023-07-12 13:42,2023-10-01 09:55,2023-06-30 01:28,21,,,,,,22,core-svc,,0,,,,,,,,,,,,,,,,,,"A script reports the following:

## packages for java.management.rmi:  javax.management.remote.rmi
no @since in open/src/java.management.rmi/share/classes/javax/management/remote/rmi/NoCallStackClassLoader.java
no @since in open/src/java.management.rmi/share/classes/javax/management/remote/rmi/RMIConnectionImpl_Stub.java
no @since in open/src/java.management.rmi/share/classes/javax/management/remote/rmi/RMIServerImpl_Stub.java
found:  7
missing:  3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3238j:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1f101086,,,,,,,,,"2023-06-29 05:20;kevinw;src/java.management.rmi/share/classes/javax/management/remote/rmi/NoCallStackClassLoader.java
(C) 2003
in intial load of jdk5u repo
Most likely should be since 1.5
(com.sun.jmx.remote.opt.util.NoCallStackClassLoader.class was in the jmxremote_optional bundle)



src/java.management.rmi/share/classes/javax/management/remote/rmi/RMIConnectionImpl_Stub.java
(C) 2002
implements RMIConnection which is since 1.5
not in jdk5 rep, as the file is created at build time
./jdk/src/share/classes/javax/management/remote/rmi/RMIConnectionImpl.java exists and is since 1.5


src/java.management.rmi/share/classes/javax/management/remote/rmi/RMIServerImpl_Stub.java
(C) 2002
implements RMIServer which is since 1.5
""./jdk/src/share/classes/javax/management/remote/rmi/RMIServerImpl.java"" exists and is since 1.5


Latest jdk shows:

Date:   Thu Mar 19 15:34:34 2020 -0400
    8241073: Pre-generated Stubs for javax.management, Activation, Naming

We stopped generating these two files, and put them in the repo in jdk15, so ""since 15""?

But the class was generally available since jdk 1.5 (and can't be any earlier), so since 1.5 (one dot five, not fifteen) makes more sense.

;;;","2023-06-29 09:10;kevinw;src/java.management.rmi/share/classes/javax/management/remote/rmi/NoCallStackClassLoader.java is not a public class, will update only the other two files identified.;;;","2023-06-29 09:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14714
Date: 2023-06-29 16:08:15 +0000;;;","2023-06-30 01:28;dukebot;Changeset: 660cd256
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-06-30 08:26:44 +0000
URL:       https://git.openjdk.org/jdk/commit/660cd256b72154b966208174dbf9abe95c9bfd60
;;;",,,,,,,,,,,,,,,,,,,
Missing @since tag(s) in java/util/logging/ErrorManager.java,JDK-8310987,5104262,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,jjg,jjg,2023-06-27 13:24,2023-07-12 13:42,2023-10-01 09:55,2023-06-30 09:09,21,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"A script reports the following file, with no occurrence of any use of `@since`

## packages for java.logging:  java.util.logging
no @since in open/src/java.logging/share/classes/java/util/logging/ErrorManager.java
found:  16
missing:  1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3238b:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3cc899dc,,,,,,,,,"2023-06-29 01:52;dfuchs;java.util.logging was added in Java 2 SE 1.4. I have checked the API documentation of Java 1.4.2. and the java.util.logging.ErrorManager is already present there.
It seems it should have an @since 1.4 like all the other classes in the package.;;;","2023-06-30 02:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14725
Date: 2023-06-30 09:06:20 +0000;;;","2023-06-30 09:09;dukebot;Changeset: e8ff74c7
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-06-30 16:06:50 +0000
URL:       https://git.openjdk.org/jdk/commit/e8ff74c7e84ec2440a51fee1b4c45e87332807a0
;;;",,,,,,,,,,,,,,,,,,,,
jdk/internal/util/ArchTest.java fails after JDK-8308452 failed with Method isARM(),JDK-8310982,5104256,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rriggs,dcubed,dcubed,2023-06-27 12:17,2023-09-13 07:38,2023-10-01 09:55,2023-06-27 13:57,22,,,,,,22,core-libs,,0,jdk21u-fix-request,jdk21u-fix-yes,regression,tier1,tier4,,,,,,,,,,,,,"The following test failed in the JDK22 CI:

jdk/internal/util/ArchTest.java

Here's a snippet from the log file:

#section:junit
----------messages:(8/318)----------
command: junit ArchTest
reason: User specified action: run junit ArchTest 
started: Tue Jun 27 18:25:51 UTC 2023
Mode: agentvm
Agent id: 18
Additional exports to unnamed modules from @modules: java.base/jdk.internal.util java.base/jdk.internal.misc
finished: Tue Jun 27 18:25:51 UTC 2023
elapsed time (seconds): 0.137
----------configuration:(14/1529)----------

<snip>

----------System.err:(183/16672)----------
STARTED    ArchTest::is64BitVsCurrent 'is64BitVsCurrent()'
SUCCESSFUL ArchTest::is64BitVsCurrent 'is64BitVsCurrent()'
STARTED    ArchTest::isLittleEndianVsCurrent 'isLittleEndianVsCurrent()'
SUCCESSFUL ArchTest::isLittleEndianVsCurrent 'isLittleEndianVsCurrent()'
STARTED    ArchTest::checkParams '[1] aarch64, AARCH64, 64, LITTLE_ENDIAN, true'
SUCCESSFUL ArchTest::checkParams '[1] aarch64, AARCH64, 64, LITTLE_ENDIAN, true'
STARTED    ArchTest::checkParams '[2] amd64, X64, 64, LITTLE_ENDIAN, false'
SUCCESSFUL ArchTest::checkParams '[2] amd64, X64, 64, LITTLE_ENDIAN, false'
STARTED    ArchTest::checkParams '[3] arm, ARM, 32, LITTLE_ENDIAN, true'
org.opentest4j.AssertionFailedError: Method isARM(): returned true, should be (ARM == AARCH64) ==> expected: <false> but was: <true>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1153)
	at ArchTest.checkParams(ArchTest.java:129)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestTemplateMethod(TimeoutExtension.java:94)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:142)
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:110)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1009)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1009)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1707)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1707)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:110)
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:44)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:142)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:95)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1570)
FAILED     ArchTest::checkParams '[3] arm, ARM, 32, LITTLE_ENDIAN, true'
STARTED    ArchTest::checkParams '[4] i386, X86, 32, LITTLE_ENDIAN, false'
SUCCESSFUL ArchTest::checkParams '[4] i386, X86, 32, LITTLE_ENDIAN, false'
STARTED    ArchTest::checkParams '[5] loongarch64, LOONGARCH64, 64, LITTLE_ENDIAN, false'
SUCCESSFUL ArchTest::checkParams '[5] loongarch64, LOONGARCH64, 64, LITTLE_ENDIAN, false'
STARTED    ArchTest::checkParams '[6] mips64el, MIPS64EL, 64, LITTLE_ENDIAN, false'
SUCCESSFUL ArchTest::checkParams '[6] mips64el, MIPS64EL, 64, LITTLE_ENDIAN, false'
STARTED    ArchTest::checkParams '[7] mipsel, MIPSEL, 32, LITTLE_ENDIAN, false'
SUCCESSFUL ArchTest::checkParams '[7] mipsel, MIPSEL, 32, LITTLE_ENDIAN, false'
STARTED    ArchTest::checkParams '[8] ppc64, PPC64, 64, BIG_ENDIAN, false'
SUCCESSFUL ArchTest::checkParams '[8] ppc64, PPC64, 64, BIG_ENDIAN, false'
STARTED    ArchTest::checkParams '[9] ppc64le, PPC64LE, 64, LITTLE_ENDIAN, false'
SUCCESSFUL ArchTest::checkParams '[9] ppc64le, PPC64LE, 64, LITTLE_ENDIAN, false'
STARTED    ArchTest::checkParams '[10] riscv64, RISCV64, 64, LITTLE_ENDIAN, false'
SUCCESSFUL ArchTest::checkParams '[10] riscv64, RISCV64, 64, LITTLE_ENDIAN, false'
STARTED    ArchTest::checkParams '[11] s390, S390, 64, BIG_ENDIAN, false'
SUCCESSFUL ArchTest::checkParams '[11] s390, S390, 64, BIG_ENDIAN, false'
STARTED    ArchTest::checkParams '[12] s390x, S390, 64, BIG_ENDIAN, false'
SUCCESSFUL ArchTest::checkParams '[12] s390x, S390, 64, BIG_ENDIAN, false'
STARTED    ArchTest::checkParams '[13] x64, X64, 64, LITTLE_ENDIAN, false'
SUCCESSFUL ArchTest::checkParams '[13] x64, X64, 64, LITTLE_ENDIAN, false'
STARTED    ArchTest::checkParams '[14] x86, X86, 32, LITTLE_ENDIAN, false'
SUCCESSFUL ArchTest::checkParams '[14] x86, X86, 32, LITTLE_ENDIAN, false'
STARTED    ArchTest::checkParams '[15] x86_64, X64, 64, LITTLE_ENDIAN, false'
SUCCESSFUL ArchTest::checkParams '[15] x86_64, X64, 64, LITTLE_ENDIAN, false'
STARTED    ArchTest::nameVsCurrent 'nameVsCurrent()'
System property os.arch: ""aarch64"", Architecture.current(): ""AARCH64""
SUCCESSFUL ArchTest::nameVsCurrent 'nameVsCurrent()'
JavaTest Message: JUnit Platform Failure(s): 1

[ JUnit Containers: found 5, started 5, succeeded 5, failed 0, aborted 0, skipped 0]
[ JUnit Tests: found 18, started 18, succeeded 17, failed 1, aborted 0, skipped 0]

java.lang.Exception: JUnit test failure
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:149)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:95)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1570)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.Exception: JUnit test failure",,,,,,,,,,,JDK-8316203,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308452,,,,,,,,,,,aarch64,,,,,,,,,,generic,,,,,"0|i3236z:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-06-27 12:21;dcubed;[~rriggs] - Looks like your fix for:

JDK-8308452 Extend internal Architecture enum with byte order and address size

is failing the modified test.;;;","2023-06-27 13:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14685
Date: 2023-06-27 19:55:02 +0000;;;","2023-06-27 13:57;dukebot;Changeset: 7f094353
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2023-06-27 20:54:53 +0000
URL:       https://git.openjdk.org/jdk/commit/7f094353673f5047643a2d7b512d0de8c665f215
;;;","2023-06-27 14:54;dcubed;The fix is integrated in jdk-22+4-262.;;;","2023-09-11 03:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/151
Date: 2023-09-11 10:21:05 +0000;;;","2023-09-11 04:26;roboduke;[jdk21u-fix-request] Approval Request from Aleksey Shipilëv
;;;",,,,,,,,,,,,,,,,,
java.util.FormatItemModifier should not be protected,JDK-8310975,5104248,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlaskey,jlaskey,jlaskey,2023-06-27 09:03,2023-07-12 13:34,2023-10-01 09:55,2023-06-27 11:47,,,,,,,22,core-libs,,0,hgupdate-sync,,,,,,,,,,,,,,,,,The nested class is incorrectly marked as protected.,,,,,,,,,,,JDK-8311350,JDK-8310981,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32357:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2023-06-27 09:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14681
Date: 2023-06-27 16:11:43 +0000;;;","2023-06-27 11:47;dukebot;Changeset: 315242b7
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2023-06-27 18:45:37 +0000
URL:       https://git.openjdk.org/jdk/commit/315242b7417a4774765f139b841b385dc7c94c50
;;;","2023-06-27 12:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/72
Date: 2023-06-27 18:56:53 +0000;;;",,,,,,,,,,,,,,,,,,,,
NMT: Arena diffs miss the scale,JDK-8310974,5104247,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2023-06-27 08:51,2023-07-12 13:37,2023-10-01 09:55,2023-06-28 07:10,17,21,22,,,,22,hotspot,,0,amazon-interest,nmt,,,,,,,,,,,,,,,,"See for example:

```
Compiler (reserved=175324KB +135838KB, committed=175324KB +135838KB)
    (malloc=29999KB +5558KB #23578 +8965)
    (arena=145325KB +130279 #17 -5)
```

The +130279 should actually be +130279KB.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281213,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3234z:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-27 09:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14680
Date: 2023-06-27 16:01:04 +0000;;;","2023-06-28 07:10;dukebot;Changeset: 46e4ee1e
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-06-28 14:07:58 +0000
URL:       https://git.openjdk.org/jdk/commit/46e4ee1e80652203bd59d968ea72b27681bdf312
;;;",,,,,,,,,,,,,,,,,,,,,
gb18030-2000 not selectable with LANG=zh_CN.GB18030 after JDK-8301119,JDK-8310947,5104216,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,naoto,sgehwolf,sgehwolf,2023-06-27 04:57,2023-08-01 10:04,2023-10-01 09:55,2023-07-13 09:36,11.0.20,17.0.8,21,22,,,openjdk8u392,core-libs,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"JDK-8301119 introduced GB18030-2022 support. As a fallback, a property jdk.charset.GB18030 has been introduced to select the older 2000 standard. However, that no longer seems to be selectable with the Chinese locale and using the GB18030 encoding (which now defaults to 'gb18030-2022`).

This test:
$ cat Test.java 
import java.nio.charset.Charset;
public class Test {
	public static void main(String[] args) {
		Charset.forName(""GB18030"");
		if (""2000"".equals(System.getProperty(""jdk.charset.GB18030""))) {
		  Charset.forName(""gb18030-2000"");
		} else {
		  Charset.forName(""gb18030-2022"");
		}
	}
}

Fails when run as such:

$ LANG=zh_CN.GB18030 ./build/linux-x86_64-server-release/images/jdk/bin/java -Djdk.charset.GB18030=2000 Test
Exception in thread ""main"" java.nio.charset.UnsupportedCharsetException: gb18030-2000
	at java.base/java.nio.charset.Charset.forName(Charset.java:543)
	at Test.main(Test.java:6)
$ echo $?
1

",,,,,,,,,,,JDK-8312324,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301119,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i322y3:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3962510e,,,,,,,,,"2023-06-27 07:48;alanb;I wonder if running with LANG=zh_CN.GB18030 is causing GB18030 to be loaded early in the startup. If it is, then the system property can't be used to select the older version.;;;","2023-06-27 09:32;sgehwolf;Yes, that's my understanding: LANG=zh_CN.GB18030 would cause it to initialize early, picking gb18030-2022 as the alias due to this code:

    // Assumes non-2000 standard if initialized during System.initPhase1(),
    // as the system property is not ready to be read in that case.
    static final boolean IS_2000 =
        VM.initLevel() >= 1 &&
        ""2000"".equals(GetPropertyAction.privilegedGetProperty(""jdk.charset.GB18030"", """"));

At that point there is no way to get back to a different alias mapping. In older JDKs this is solved with a late init hook: AbstractCharsetProvider.charsetForName() and related init() calls.

Is there any other way (other than the property) to select the older version?;;;","2023-06-29 16:42;naoto;[~sgehwolf], would you please elaborate on the following more?
```
In older JDKs this is solved with a late init hook: AbstractCharsetProvider.charsetForName() and related init() calls.
```
alias switching at runtime is first introduced with this JDK-8301119 and none before.;;;","2023-06-30 01:26;sgehwolf;[~neato]. See `init()` in ExtendedCharsets.java in JDK 8 for example:

https://github.com/openjdk/jdk8u-dev/blob/6244292d28e1cddcc70bc4dbf98adad13fe1e3d7/jdk/src/share/classes/sun/nio/cs/ext/ExtendedCharsets.java#L1140..L1143

Certain charsets, for example `Shift_JIS` change the alias mapping from {""sjis"", ""shift_jis"", ""shift-jis"", ""ms_kanji"", ""x-sjis"", ""csShiftJIS"" } to { ""sjis"" } at runtime.

See:

https://github.com/openjdk/jdk8u-dev/blob/6244292d28e1cddcc70bc4dbf98adad13fe1e3d7/jdk/src/share/classes/sun/nio/cs/ext/ExtendedCharsets.java#L1206
https://github.com/openjdk/jdk8u-dev/blob/6244292d28e1cddcc70bc4dbf98adad13fe1e3d7/jdk/src/share/classes/sun/nio/cs/ext/ExtendedCharsets.java#L142

All this seems to pre-date OpenJDK being available as open source.;;;","2023-06-30 10:19;naoto;Thanks.
However I would guess those JDK8's mechanism was in the same boat as this GB18030's (not tried though) because the init() code simply returns if the VM has not booted:
```
        if (!sun.misc.VM.isBooted())
            return;
```;;;","2023-07-04 07:22;sgehwolf;My understanding is that it would not be in the same boat as the alias lookup routine would call init() first before checking for the alias in the map (as the test exercises). I.e. init() would get called late enough (a second time; since initialize != true) for the VM to have booted.;;;","2023-07-07 09:31;naoto;That depends on the charset. If the charset is the default encoding in the underlying OS, then the charset would have been initialized before the system property is set up. I think that is the case in JDK8 too.;;;","2023-07-07 16:32;naoto;Since it is not possible to choose the correct alias from the system property if the underlying OS's encoding is `GB18030`, The only option I can see for this is to provide both mappings with static aliases. Then the system property may only serve as selecting the default GB18030 mapping.;;;","2023-07-12 04:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/339
Date: 2023-07-12 11:21:53 +0000;;;","2023-07-13 09:36;dukebot;Changeset: 4dc1305c
Author:    Andrew John Hughes <andrew@openjdk.org>
Date:      2023-07-13 16:33:19 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/4dc1305cafe7913b194e9a8ebc01c49e6dc14a6d
;;;","2023-07-19 04:52;dukebot;Changeset: fc1b2b4e
Author:    Andrew John Hughes <andrew@openjdk.org>
Date:      2023-07-13 16:33:19 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/fc1b2b4e13a8c9f42a5eaba2e991b24463385989
;;;","2023-08-01 10:03;dukebot;Changeset: 4dc1305c
Author:    Andrew John Hughes <andrew@openjdk.org>
Date:      2023-07-13 16:33:19 +0000
URL:       https://git.openjdk.org/jdk8u/commit/4dc1305cafe7913b194e9a8ebc01c49e6dc14a6d
;;;",,,,,,,,,,,
[Lilliput/JDK17] Streamline and cleanup GC code,JDK-8310944,5104213,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-06-27 04:26,2023-06-30 03:27,2023-10-01 09:55,2023-06-30 03:27,repo-lilliput-17,,,,,,repo-lilliput-17,hotspot,,0,amazon-interest,lilliput,,,,,,,,,,,,,,,,"We have a bunch of ugly hacks in GC code paths where we do stuff like:
if (UseCompactObjectHeaders) {
 // fetch object Klass* or size in a safe way...
} else {
  // fetch object Klass* or size in the traditional way
}

This happens in various places in similar ways. I propose to add relevant methods to oopDesc, and make all GC code use those new methods instead.

This helps streamline and clean up a bunch of GC code.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i322xf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-29 03:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/50
Date: 2023-06-27 11:31:43 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
java/lang/Class/forName/ForNameNames.java fails after being added by JDK-8310242,JDK-8310922,5104184,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mchung,dcubed,dcubed,2023-06-26 13:48,2023-07-12 13:32,2023-10-01 09:55,2023-06-26 14:26,22,,,,,,22,core-libs,,0,hgupdate-sync,testonly,tier1,,,,,,,,,,,,,,,"The following test fails in the JDK22 CI:

java/lang/Class/forName/ForNameNames.java

Here's a snippet from the log file:

----------System.err:(171/15597)----------
STARTED    ForNameNames::testForName '[1] java.lang.String, class java.lang.String'
SUCCESSFUL ForNameNames::testForName '[1] java.lang.String, class java.lang.String'
STARTED    ForNameNames::testForName '[2] [Ljava.lang.String;, class [Ljava.lang.String;'
SUCCESSFUL ForNameNames::testForName '[2] [Ljava.lang.String;, class [Ljava.lang.String;'
STARTED    ForNameNames::testForName '[3] ForNameNames$Inner, class ForNameNames$Inner'
SUCCESSFUL ForNameNames::testForName '[3] ForNameNames$Inner, class ForNameNames$Inner'
STARTED    ForNameNames::testForName '[4] [LForNameNames$Inner;, class ForNameNames$Inner'
org.opentest4j.AssertionFailedError: expected: <ForNameNames.Inner> but was: <ForNameNames.Inner[]>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1142)
	at ForNameNames.testForName(ForNameNames.java:60)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestTemplateMethod(TimeoutExtension.java:94)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:142)
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:110)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1009)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1009)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1707)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1707)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:110)
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:44)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:142)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:95)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1570)
FAILED     ForNameNames::testForName '[4] [LForNameNames$Inner;, class ForNameNames$Inner'
STARTED    ForNameNames::testForName '[5] [[I, class [[I'
SUCCESSFUL ForNameNames::testForName '[5] [[I, class [[I'
STARTED    ForNameNames::testInvalidNames '[1] I'
SUCCESSFUL ForNameNames::testInvalidNames '[1] I'
STARTED    ForNameNames::testInvalidNames '[2] int[]'
SUCCESSFUL ForNameNames::testInvalidNames '[2] int[]'
STARTED    ForNameNames::testInvalidNames '[3] ForNameNames.Inner'
SUCCESSFUL ForNameNames::testInvalidNames '[3] ForNameNames.Inner'
STARTED    ForNameNames::testInvalidNames '[4] [java.lang.String'
SUCCESSFUL ForNameNames::testInvalidNames '[4] [java.lang.String'
STARTED    ForNameNames::testInvalidNames '[5] [Ljava.lang.String'
SUCCESSFUL ForNameNames::testInvalidNames '[5] [Ljava.lang.String'
STARTED    ForNameNames::testInvalidNames '[6] [Ljava/lang/String;'
SUCCESSFUL ForNameNames::testInvalidNames '[6] [Ljava/lang/String;'
STARTED    ForNameNames::testModule 'testModule()'
SUCCESSFUL ForNameNames::testModule 'testModule()'
JavaTest Message: JUnit Platform Failure(s): 1

[ JUnit Containers: found 6, started 6, succeeded 6, failed 0, aborted 0, skipped 0]
[ JUnit Tests: found 12, started 12, succeeded 11, failed 1, aborted 0, skipped 0]

java.lang.Exception: JUnit test failure
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:149)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:95)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1570)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.Exception: JUnit test failure",,,,,,,,,,,JDK-8310928,JDK-8311347,,,,,,,,,,,,,,,,,,,,,,JDK-8310242,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i322qz:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-06-26 13:50;dcubed;[~mchung] - The new test added by:

JDK-8310242 Clarify the name parameter to Class::forName

is failing.;;;","2023-06-26 14:13;dholmes;Line 46

>  Arguments.of(""[LForNameNames$Inner;"", Inner.class),

should be:

> Arguments.of(""[LForNameNames$Inner;"", Inner[].class),;;;","2023-06-26 14:26;dukebot;Changeset: 7c6a28fd
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-06-26 21:25:09 +0000
URL:       https://git.openjdk.org/jdk/commit/7c6a28fd0c49e33fe8ffc87c2bbfa5bf7d1551a3
;;;","2023-06-26 14:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14667
Date: 2023-06-26 21:21:41 +0000;;;","2023-06-26 16:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/65
Date: 2023-06-26 20:25:40 +0000;;;",,,,,,,,,,,,,,,,,,
runtime/ErrorHandling/TestAbortVmOnException.java times out due to core dumps taking a long time on OSX,JDK-8310919,5104181,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfenacci,dcubed,dcubed,2023-06-26 13:25,2023-07-12 13:40,2023-10-01 09:55,2023-06-29 05:10,22,,,,,,22,hotspot,,0,intermittent,noreg-self,oracle-triage-22,tier1,tier3,,,,,,,,,,,,,"The following test timed out in the JDK22 CI:

runtime/ErrorHandling/TestAbortVmOnException.java

Here's a snippet from the log file:

#section:driver
----------messages:(10/316)----------
command: driver TestAbortVmOnException
reason: User specified action: run driver TestAbortVmOnException 
started: Mon Jun 26 13:23:36 GMT 2023
Mode: agentvm
Agent id: 6
Timeout refired 480 times
Timeout information:
--- Timeout information end.
finished: Mon Jun 26 13:36:02 GMT 2023
elapsed time (seconds): 745.706
----------configuration:(14/1990)----------

<snip>

result: Error. Agent error: java.lang.Exception: Agent 6 timed out with a timeout of 480 seconds; check console log for any additional details


Since this is a new test recently added by:

JDK-8264899 C1: -XX:AbortVMOnException does not work if all methods in the call stack are compiled with C1 and there are no exception handlers

I'm starting this bug off in hotspot/compiler for initial triage.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264899,,,,JDK-8267433,,,,,,,,,,,aarch64,,,,,,,,,,os_x,,,,,"0|i322qb:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-26 23:07;thartmann;Damon, please have a look.;;;","2023-06-26 23:19;thartmann;The test seems to wait for the output of the process it spawned:

""AgentVMThread"" #115 prio=5 tid=0x000000012283f810 nid=14931 waiting on condition [0x000000017189a000]
   java.lang.Thread.State: WAITING (parking)
   JavaThread state: _thread_blocked
 - jdk.internal.misc.Unsafe.park(boolean, long) @bci=0 (Interpreted frame)
	- parking to wait for <0x00000006c000d588> (a java/util/concurrent/FutureTask)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=27, line=221 (Interpreted frame)
 - java.util.concurrent.FutureTask.awaitDone(boolean, long) @bci=208, line=500 (Interpreted frame)
 - java.util.concurrent.FutureTask.get() @bci=13, line=190 (Interpreted frame)
 - jdk.test.lib.process.OutputBuffer$LazyOutputBuffer$StreamTask.get() @bci=4, line=109 (Interpreted frame)
 - jdk.test.lib.process.OutputBuffer$LazyOutputBuffer.getStdout() @bci=4, line=139 (Interpreted frame)It seems
 - jdk.test.lib.process.OutputAnalyzer.getStdout() @bci=4, line=563 (Interpreted frame)
 - jdk.test.lib.process.OutputAnalyzer.stdoutShouldNotBeEmpty() @bci=1, line=189 (Interpreted frame)
 - TestAbortVmOnException.parseOutput(java.lang.Process, java.lang.String) @bci=10, line=75 (Interpreted frame)
 - TestAbortVmOnException.main(java.lang.String[]) @bci=75, line=56 (Interpreted frame)
 - java.lang.invoke.LambdaForm$DMH+0x00000003000c0000.invokeStatic(java.lang.Object, java.lang.Object) @bci=10 (Interpreted frame)
 - java.lang.invoke.LambdaForm$MH+0x0000000300141800.invoke(java.lang.Object, java.lang.Object, java.lang.Object) @bci=33 (Interpreted frame)
 - java.lang.invoke.Invokers$Holder.invokeExact_MT(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) @bci=20 (Interpreted frame)
 - jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(java.lang.Object, java.lang.Object[]) @bci=55, line=154 (Interpreted frame)
 - jdk.internal.reflect.DirectMethodHandleAccessor.invoke(java.lang.Object, java.lang.Object[]) @bci=23, line=103 (Interpreted frame)
 - java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]) @bci=102, line=580 (Interpreted frame)
 - com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run() @bci=10, line=333 (Interpreted frame)
 - java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable) @bci=5, line=1583 (Interpreted frame)
 - java.lang.Thread.run() @bci=19, line=1570 (Interpreted frame)

Maybe it's just really long running and the timeout should be increased. Also, it's running with -Xcomp -XX:TieredStopAtLevel=3 but without a CompileOnly to restrict the number of methods being compiled.

ILW = Test times out, intermittent in tier1, no workaround = MLH = P4;;;","2023-06-28 17:17;dholmes;This is simply the problem of core dumps taking a long time to generate on macOS i.e. the test should specifiy -XX:-CreateCoredumpOnCrash;;;","2023-06-28 22:00;thartmann;Interesting, do we have a tracking bug for this issue?;;;","2023-06-28 23:15;dfenacci;Thanks [~dholmes]. It is probably a good idea anyway since the test ""creates"" three of them every time by default.;;;","2023-06-29 03:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14704
Date: 2023-06-29 06:35:15 +0000;;;","2023-06-29 05:10;dukebot;Changeset: e5744b81
Author:    Damon Fenacci <dfenacci@openjdk.org>
Date:      2023-06-29 12:07:54 +0000
URL:       https://git.openjdk.org/jdk/commit/e5744b8120548a161f75aa098826a6798d85f90f
;;;",,,,,,,,,,,,,,,,
Remove 2 malformed java/foreign ProblemList entries,JDK-8310914,5104176,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jvernee,jvernee,jvernee,2023-06-26 12:21,2023-07-12 13:35,2023-10-01 09:55,2023-06-27 13:42,22,,,,,,22,core-libs,,0,hgupdate-sync,noreg-self,,,,,,,,,,,,,,,,"https://github.com/openjdk/jdk/pull/11019 added 2 problem list entries that are malformed:

java/foreign/callarranger/TestAarch64CallArranger.java generic-x86
java/foreign/TestLargeSegmentCopy.java generic-x86

A comment about this was left on the PR, but it looks like it went unnoticed due to the conversation already being resolved.

Neither of these entries is needed, since the first test doesn't exist anymore, and the latter is explicitly disabled in the jtreg test header.",,,,,,,,,,,JDK-8311062,JDK-8311360,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i322p7:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-06-26 14:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14664
Date: 2023-06-26 19:33:50 +0000;;;","2023-06-27 13:42;dukebot;Changeset: f07e396b
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2023-06-27 20:40:04 +0000
URL:       https://git.openjdk.org/jdk/commit/f07e396bda4567fd35677704b9aa974426266363
;;;","2023-06-27 13:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/75
Date: 2023-06-27 20:48:57 +0000;;;",,,,,,,,,,,,,,,,,,,,
java.io.InvalidObjectException has redundant `@since` tag,JDK-8310909,5104171,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2023-06-26 11:21,2023-07-12 13:32,2023-10-01 09:55,2023-06-26 15:26,21,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"
/**
 * Indicates that one or more deserialized objects failed validation
 * tests.  The argument should provide the reason for the failure.
 *
 * @see ObjectInputValidation
 * @since 1.1
 *
 * @since   1.1
 */",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i322o3:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2023-06-26 11:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14662
Date: 2023-06-26 18:32:30 +0000;;;","2023-06-26 15:26;dukebot;Changeset: 46add3f8
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-06-26 22:24:32 +0000
URL:       https://git.openjdk.org/jdk/commit/46add3f8e3ea5d08130e0342390f998979c2a14e
;;;",,,,,,,,,,,,,,,,,,,,,
Non-standard `@since` tag in `com.sun.java.accessibility.util.package-info`,JDK-8310908,5104170,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2023-06-26 11:10,2023-07-12 13:32,2023-10-01 09:55,2023-06-26 15:25,21,,,,,,22,client-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"The package-info.java file for com.sun.java.accessibility.util has a non-standard `@since` tag of `JDK1.7`.

It is the only such usage and should be changed to just 1.7

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i322nv:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2023-06-26 11:14;jjg;Not sure if this is the right component/sub-component.   I couldn't find a more obvious one.;;;","2023-06-26 11:39;jjg;Moved to client-libs/javax.accessibility;;;","2023-06-26 11:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14663
Date: 2023-06-26 18:38:26 +0000;;;","2023-06-26 15:25;dukebot;Changeset: 8f5b6771
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-06-26 22:22:49 +0000
URL:       https://git.openjdk.org/jdk/commit/8f5b6771b8eb43c695fe2bfed100f17376b9efe7
;;;",,,,,,,,,,,,,,,,,,,
Add missing file,JDK-8310907,5104169,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,darcy,darcy,darcy,2023-06-26 11:04,2023-07-12 13:30,2023-10-01 09:55,2023-06-26 11:15,21,22,,,,,22,tools,,0,hgupdate-sync,noreg-self,tier1,tier4,,,,,,,,,,,,,,Add empty.out omitted from JDK-8310861.,,,,,,,,,,,JDK-8311345,JDK-8310926,,,,,,,,,,,,,,,,,,,,,,JDK-8310861,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i322nn:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-26 11:15;dukebot;Changeset: 815ac6ee
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2023-06-26 18:14:32 +0000
URL:       https://git.openjdk.org/jdk/commit/815ac6eeb3017ea1969219f38fb3e0d003629760
;;;","2023-06-26 11:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14661
Date: 2023-06-26 18:11:38 +0000;;;","2023-06-26 14:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/63
Date: 2023-06-26 17:04:41 +0000;;;",,,,,,,,,,,,,,,,,,,,
[lw5] addressing review comments on null restricted types,JDK-8310905,5104166,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-06-26 10:09,2023-07-19 20:18,2023-10-01 09:55,2023-07-19 20:18,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,addressing review comments added to: https://github.com/openjdk/valhalla/pull/872,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310598,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i322mz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-27 21:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/880
Date: 2023-06-28 04:11:15 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
(fc) FileChannel.transferXXX async close and interrupt issues,JDK-8310902,5104163,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alanb,alanb,alanb,2023-06-26 08:57,2023-07-12 13:39,2023-10-01 09:55,2023-06-28 22:44,1.4.0,22,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,"This issue tracks a number of bugs with FileChannel.transferTo/transerFrom that arise when the source or target channel is closed, or the thread is interrupted. More specifically:

- The direct implementations operate on the raw FD and don't prevent the target/source channel from being closed during the transfer.

- The transferTo/transferFrom methods are specified to throw ClosedByInterruptException after closing both channels. This is implemented inconsistently, and leaves one channel open in several cases.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i322mb:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-06-26 23:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14656
Date: 2023-06-26 17:14:15 +0000;;;","2023-06-28 22:44;dukebot;Changeset: f4b900b6
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-06-29 05:42:19 +0000
URL:       https://git.openjdk.org/jdk/commit/f4b900b607b2e857a0177d1e3061fd4dfc6b5f75
;;;",,,,,,,,,,,,,,,,,,,,,
VarHandleTestExact fails,JDK-8310893,5104152,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jvernee,jvernee,jvernee,2023-06-26 05:38,2023-06-26 06:26,2023-10-01 09:55,2023-06-26 06:26,repo-panama,,,,,,repo-panama,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,"This test started failing after the recent integration of: https://bugs.openjdk.org/browse/JDK-8310362

Changes to that test are missing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i322jv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-06-26 06:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/842
Date: 2023-06-26 13:03:20 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
ScopedValue throwing StructureViolationException should be clearer,JDK-8310892,5104151,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alanb,dbessono,dbessono,2023-06-26 05:27,2023-07-25 04:33,2023-10-01 09:55,2023-07-10 05:35,21,,,,,,22,core-libs,,0,conformance,hgupdate-sync,loom,noreg-doc,,,,,,,,,,,,,,"Java SE 21 & JDK 21
DRAFT 21-ea+28-LTS-2377

Many method's specs in j.l.ScopedValue+Carrier contain the following assertion

""Once closed, StructureViolationException is thrown.""

e.g. https://download.java.net/java/early_access/jdk21/docs/api/java.base/java/lang/ScopedValue.Carrier.html#call(java.util.concurrent.Callable)

As experiments show it seems the spec should mention IllegalStateException instead of StructureViolationException

UPD: this original note above is based on reading of the following block that is repeated 6 times in the specs for j.l.ScopedValue+Carrier methods

========
Scoped values are intended to be used in a structured manner. If op creates a StructuredTaskScope but does not close it, then exiting op causes the underlying construct of each StructuredTaskScope created in the dynamic scope to be closed. This may require blocking until all child threads have completed their sub-tasks. The closing is done in the reverse order that they were created. Once closed, StructureViolationException is thrown.
========

The last sentence could give an impression that it's the scope instance which is throwing StructureViolationException when we are calling, say, StructuredTaskScope::fork after the scope is closed, - while it's throwing IllegalStateException. 

Actually the carrier's methods are expected to throw StructureViolationException if STS was not properly closed by the op.
",,,,,,,,,,,JDK-8311916,JDK-8312903,,,,,,,,,,,,,,JDK-8311024,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i322jn:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-06-26 05:40;alanb;ScopedValue runWhere/callWhere/getWhere (and the Carrier equivalents) throw StructureViolationException if the op completes without closing any STS. It looks like the @throws has got lost, we can fix that.

Do you have an example where runWhere/callWhere/getWhere throw IllegalStateException?;;;","2023-06-26 06:06;dbessono;Reading of the following paragraph copied across spec 
===
Scoped values are intended to be used in a structured manner. If op creates a StructuredTaskScope but does not close it, then exiting op causes the underlying construct of each StructuredTaskScope created in the dynamic scope to be closed. This may require blocking until all child threads have completed their sub-tasks. The closing is done in the reverse order that they were created. Once closed, StructureViolationException is thrown.
===

doesn't clearly give an impression of who is expected to throw StructureViolationException, the ::fork method inside the op throws IllegalStateException

""Once closed, StructureViolationException is thrown"" statement is confusing and could give the following impression of where to expect SVE


        ScopedValue.where(ScopedValue.newInstance(), new Object()).run(() -> {
                    var scope = new StructuredTaskScope<>();
                    try (scope) {
                        scope.fork(Object::new);
                        scope.join();
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                    // ISE thrown
                    scope.fork(Object::new);
                });

while if we don't close STS, then we get SVE from method ScopedValue.Carrier::run (and other methods)

        ScopedValue.where(ScopedValue.newInstance(), new Object()).run(() -> {
            var scope = new StructuredTaskScope<>();
            scope.fork(Object::new);
            scope.fork(Object::new);
            try {scope.join();} catch (InterruptedException e) {}
        });

the methods that have the quoted same block of text look deserving to have StructuredViolationException specified in a more direct manner, for example

e.g. ScopedValue.Carrier::run may have

 @throws StructuredViolationException If the op creates a StructuredTaskScope but does not close it

such declaration in 6 run*/get*/call* methods would greatly improve the understanding of the expected behaviour;;;","2023-06-26 06:26;dbessono;the following assertion looks deserving to be easily perceivable from the text:

    If op creates a StructuredTaskScope but does not close it …  StructureViolationException is thrown

Currently there's plenty of detail in ""..."" so this simple statement above is not easy to grasp from the mentioned paragraph on the first reading.
;;;","2023-06-26 06:38;alanb;I've changed the title of this issue. The ISE in the example is because fork is being called on a closed STS. As regards ScopedValue + StructureViolationException then we can try to improve the wording, and adding the missing ""@throws StructureViolationException"".;;;","2023-06-26 09:23;dbessono;Thank you [~alanb], I've updated the description with some follow-up notes, reflecting communication in the comments.;;;","2023-06-27 08:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14679
Date: 2023-06-27 15:34:58 +0000;;;","2023-07-10 05:35;dukebot;Changeset: 623cfcd0
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-07-10 12:33:29 +0000
URL:       https://git.openjdk.org/jdk/commit/623cfcd04b0c4662e614cb6a3bf52536abc02d5a
;;;","2023-07-11 10:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/113
Date: 2023-07-11 17:21:13 +0000;;;",,,,,,,,,,,,,,,
Normalize identifier names,JDK-8310890,5104149,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-06-26 05:21,2023-07-12 13:33,2023-10-01 09:55,2023-06-27 08:49,22,,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,"- When comparing two refs, a variable name that has ""his"" or ""her"" is its name makes the reader pause and think: why? Usually, it's ""other"", ""that"", ""their(s)"", ""our(s)"", etc.

- In the context of charsets, ""hisName"" is simply misleading to a first-time reader. Although it might seem like a pronoun, in fact, ""his"" is truncated ""historical"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i322j7:",9223372036854775807,b04,,,,,,,,,,,"2023-06-26 11:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14653
Date: 2023-06-26 14:07:03 +0000;;;","2023-06-27 08:49;dukebot;Changeset: f6133edb
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-06-27 15:47:29 +0000
URL:       https://git.openjdk.org/jdk/commit/f6133edb08dd7a7d764638c5b1cdd5c3e56ed64e
;;;",,,,,,,,,,,,,,,,,,,,,
Width/height of window is not set after calling sizeToScene,JDK-8310885,5103867,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,arapte,webbuggrp,webbuggrp,2023-06-22 03:28,2023-08-17 09:28,2023-10-01 09:55,2023-08-16 08:55,8,jfx11,jfx17,jfx20,jfx21,,jfx22,javafx,,0,dcspn,reproducer-yes,sn_150,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS: RedHat Linux 9.1, Gnome 40.10
JRE: 17 (2021-09-14)
JFX: 20.0.1

A DESCRIPTION OF THE PROBLEM :
If sizeToScene is called on a hidden stage and later setWidth/setHeight are called while the stage is still hidden, the values set are ignored when the stage is finally shown. The width and height correspond to the size of the scene.
The culprit is most likely this code (in Window#showing):
...
            if (sizeToScene) {
                if (newVisible) {
                    // Now that the visibleChanged has completed, the insets of the window
                    // might have changed (e.g. due to setResizable(false)). Reapply the
                    // sizeToScene() request if needed to account for the new insets.
                    sizeToScene();
                }

                // Reset the flag unconditionally upon visibility changes
                sizeToScene = false;
            }
...

I think setting setWidth/Height should unset the sizeToScene flag (given that it means that the user no longer wants the window to be sized to the scene).
I can provide a PR if this solution seems correct.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
See the description or example code.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The window should have size 1000x1000.
ACTUAL -
The window has size 27x45.

---------- BEGIN SOURCE ----------
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.stage.Stage;

public class StageSizeTest extends Application {
    @Override
    public void start(final Stage primaryStage) {
        final var scene = new Scene(new Label(""test""));
        primaryStage.setScene(scene);
        primaryStage.sizeToScene();
        primaryStage.setWidth(1000);
        primaryStage.setHeight(1000);
        primaryStage.show();
        System.out.println(primaryStage.getWidth());
        System.out.println(primaryStage.getHeight());
    }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-06-26 03:22;pnarayanaswa;StageSizeTest.java;https://bugs.openjdk.org/secure/attachment/104417/StageSizeTest.java",,,,,,,generic,,,,,,,,,,generic,,,,,"0|i320sj:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-06-26 03:22;pnarayanaswa;Checked with attached testcase in Windows 10 and Ubuntu 20.04, Width and height is not set.

Test Result 
===========
Windows 10 - 34.66666793823242, 54.66666793823242
Ubuntu 20.04 - 25.0, 16.0

Moving to JDK project for more review.;;;","2023-07-13 04:43;kcr;This is not a common operation, nor is it a regression, so lowering the priority to P4.;;;","2023-08-03 08:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1195
Date: 2023-08-03 14:57:50 +0000;;;","2023-08-05 06:49;kcr;[~arapte] The reporter of this bug has submitted a PR. Can you review and sponsor it?
;;;","2023-08-16 08:55;dukebot;Changeset: 5c3e8329
Author:    Guillaume Tâche <tga@bger.ch>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2023-08-16 15:52:43 +0000
URL:       https://git.openjdk.org/jfx/commit/5c3e83293eaf364d7288cd1e609d89c4b20bd91e
;;;",,,,,,,,,,,,,,,,,,
Runthese30m crashes with klass should be in the placeholders during verification,JDK-8310874,5104127,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,tschatzl,tschatzl,2023-06-26 01:15,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 05:19,22,,,,,,22,hotspot,,0,gc-g1,intermittent,,,,,,,,,,,,,,,,"During testing JDK-8140326 / PR#14220 Runthese30m failed with

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S14089/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ecc844bd-9306-47c3-9126-67f95d362502/runs/54847e98-aa9c-4094-8db6-332b8cd97bde/workspace/open/src/hotspot/share/classfile/loaderConstraints.cpp:474), pid=506426, tid=506437
#  guarantee(entry != nullptr) failed: klass should be in the placeholders
#
# JRE version: Java(TM) SE Runtime Environment (22.0) (fastdebug build 22-internal-2023-06-22-1449194.thomas.schatzl.jdk)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-internal-2023-06-22-1449194.thomas.schatzl.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1229348]  LoaderConstraintTable::verify()+0x1d8


---------------  T H R E A D  ---------------

Current thread (0x00007f51ec20fa70):  VMThread ""VM Thread""          [id=506437, stack(0x00007f51c4b27000,0x00007f51c4c27000) (1024K)]

Stack: [0x00007f51c4b27000,0x00007f51c4c27000],  sp=0x00007f51c4c24f80,  free space=1015k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1229348]  LoaderConstraintTable::verify()+0x1d8  (loaderConstraints.cpp:474)
V  [libjvm.so+0x173ba85]  SystemDictionary::verify()+0x25  (systemDictionary.cpp:2399)
V  [libjvm.so+0x17e06bf]  Universe::verify(VerifyOption, char const*)+0x66f  (universe.cpp:1157)
V  [libjvm.so+0xc60285]  G1ConcurrentMark::verify_during_pause(G1HeapVerifier::G1VerifyType, G1ConcurrentMark::VerifyLocation)+0xf5  (g1ConcurrentMark.cpp:1091)
V  [libjvm.so+0xc651e9]  G1ConcurrentMark::remark()+0x89  (g1ConcurrentMark.cpp:1255)
V  [libjvm.so+0xd2a2c6]  VM_G1PauseConcurrent::doit()+0x1c6  (g1VMOperations.cpp:173)
V  [libjvm.so+0x1872219]  VM_Operation::evaluate()+0x139  (vmOperations.cpp:71)
V  [libjvm.so+0x189285b]  VMThread::evaluate_operation(VM_Operation*)+0x10b  (vmThread.cpp:281)
V  [libjvm.so+0x18933cf]  VMThread::inner_execute(VM_Operation*)+0x3bf  (vmThread.cpp:435)
V  [libjvm.so+0x18935b4]  VMThread::loop()+0x84  (vmThread.cpp:502)
V  [libjvm.so+0x18936b7]  VMThread::run()+0x87  (vmThread.cpp:175)
V  [libjvm.so+0x1793dfa]  Thread::call_run()+0xba  (thread.cpp:217)
V  [libjvm.so+0x1491adc]  thread_native_entry(Thread*)+0x11c  (os_linux.cpp:778)
Registers:
RAX=0x00007f51f50e3000, RBX=0x00007f50900b7e70, RCX=0x00007f51f48f6b88, RDX=0x00007f51f48aad88
RSP=0x00007f51c4c24f80, RBP=0x00007f51c4c24fe0, RSI=0x00000000000001da, RDI=0x00007f51f48f6a18
R8 =0x00000000000001ce, R9 =0x00007f50900b3898, R10=0x00007f5090050750, R11=0x0000000000000000
R12=0x00007f51f4ddb604, R13=0x0000000000000001, R14=0x00007f51100fc8d0, R15=0x0000000000000000
RIP=0x00007f51f3f65348, EFLAGS=0x0000000000010246, CSGSFS=0x002b000000000033, ERR=0x0000000000000006
  TRAPNO=0x000000000000000e

This is a special build of that change with
- VerifyDuringGC, VerifyBeforeGC, VerifyAfterGC set to true in gc_globals.hpp

- in g1_globals.hpp G1EvacuationFailureALot set to true

- (this is a fastdebug build failure, so it's not relevant, but I also set EVAC_FAILURE_INJECTOR to 1 in line 38 of that file to also have induced evacuation failure functionality in product builds too)

All of these flags just change timing of gcs.

The failure is in verification at the start of the Remark pause (g1ConcurrentMark.cpp:1255) before doing anything in particular.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262046,JDK-8316711,,,,,,,,,,,,,,,,,,,,,,,,,"0|i322eb:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-27 11:09;mseledtsov;ILW = HLL = P4;;;","2023-07-12 14:19;coleenp;From the core file and reproducers, this test crashes because it expects an InstanceKlass in the loader constraint table to either already be in the dictionary or be in the process of loading, ie. in the placeholders table.  For non-parallel capable class loaders, defineClass doesn't use the placeholder table for synchronization because the VM takes out the class_loader lock for these.  It would probably be preferable if non-parallel capable class loaders worked the same as the others, or we can remove the assert.

There are multiple safepoints after an InstanceKlass has been added to the loader constraint table before it's finally added to the dictionary.  A lot of threads line up on the Compile_lock in add_to_hierarchy.;;;","2023-07-14 04:51;coleenp;I'll remove the assert to help with backporting.;;;","2023-07-14 05:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14887
Date: 2023-07-14 12:39:50 +0000;;;","2023-07-14 07:01;coleenp;A better fix: https://github.com/openjdk/jdk/pull/14889;;;","2023-07-14 07:04;coleenp;ILW = HLM = P3

This is a guarantee so if GC verification is used in product mode, it could assert and cause a crash.  GC verification is often used to find other bugs.  I think this might be a P3 and worth backporting to older versions.  This bug has existed forever.;;;","2023-07-16 18:33;dholmes;So IIUC the loader constraint checking logic should have been adjusted as part of JDK-8262046, when we stopped using the placeholder table for non-parallel-capable loaders.;;;","2023-07-24 05:54;coleenp;No, I didn't change this with JDK-8262046.  That change was cleanup and refactoring.  We have always only used the placeholder table to support parallel capable class loaders (user-defined parallel-capable and the boot loader).;;;","2023-07-24 18:57;dholmes;Sorry Coleen looks like my attempt to track down when things changed failed. This guarantee has been in place for a long time (JDK-6920977)  so exactly when did we change things in this area to make the guarantee invalid?;;;","2023-07-25 05:20;coleenp;The guarantee has never been valid for the case of non-parallel capable class loaders because they've never been in the placeholder table.  It's just very unlikely (but obvious from the core file). 

The JDK-6920977 issue where addClass gets an OOM is half fixed because there is a HAS_PENDING_EXCEPTION check after its call, which removes the failed InstanceKlass from the placeholder table (in find_or_define_instance_class).  It's not removed from the loader constraint table though.;;;","2023-07-25 05:33;coleenp;From JDK 8:

    // Add class just loaded
    // If a class loader supports parallel classloading handle parallel define requests
    // find_or_define_instance_class may return a different InstanceKlass
    if (is_parallelCapable(class_loader)) {
      k = find_or_define_instance_class(class_name, class_loader, k, THREAD);
    } else {
      define_instance_class(k, THREAD);
    }
  }

Which makes me really think adding the class unconditionally to the placeholder table is a much better solution.  It'll also give a common landing area for the code needed to remove the InstanceKlass from the placeholder table, the CLDG and the loader constraint table.

The code to remove the class from the CLDG was added after JDK 8 in two places.  Now in find_or_define_instance_class, which calls a helper:

// If a class loader supports parallel classloading handle parallel define requests.
// find_or_define_instance_class may return a different InstanceKlass
InstanceKlass* SystemDictionary::find_or_define_instance_class(Symbol* class_name, Handle class_loader,
                                                               InstanceKlass* k, TRAPS) {
  InstanceKlass* defined_k = find_or_define_helper(class_name, class_loader, k, THREAD);
  // Clean up original InstanceKlass if duplicate or error
  if (!HAS_PENDING_EXCEPTION && defined_k != k) {
    // If a parallel capable class loader already defined this class, register 'k' for cleanup.
    assert(defined_k != nullptr, ""Should have a klass if there's no exception"");
    k->class_loader_data()->add_to_deallocate_list(k);
  } else if (HAS_PENDING_EXCEPTION) {
    assert(defined_k == nullptr, ""Should not have a klass if there's an exception"");
    k->class_loader_data()->add_to_deallocate_list(k);
  }
  return defined_k;
}
;;;","2023-07-25 05:39;coleenp;
>     // If a parallel capable class loader already defined this class, register 'k' for cleanup.

This comment should say parallelDefine class loader - ie. using the option AllowParallelDefineClass for a parallel capable non-bootstrap class loader.;;;","2023-08-01 10:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14889
Date: 2023-07-14 14:00:13 +0000;;;","2023-09-14 12:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15752
Date: 2023-09-14 18:59:14 +0000;;;","2023-09-21 05:19;dukebot;Changeset: b3d75fe1
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-09-21 12:17:34 +0000
URL:       https://git.openjdk.org/jdk/commit/b3d75fe12ec74e3c2445ef2615425867ccb7d4a2
;;;",,,,,,,,
Thread.interrupt() method's javadoc has an incorrect {@link},JDK-8310868,5104119,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2023-06-25 22:53,2023-07-12 13:29,2023-10-01 09:55,2023-06-25 23:27,,,,,,,22,core-libs,,0,hgupdate-sync,noreg-doc,,,,,,,,,,,,,,,,"The implNote in Thread.interrupt() method states:

> * @implNote In the JDK Reference Implementation, interruption of a thread
     * that is not alive still records that the interrupt request was made and
     * will report it via {@link #interrupted} and {@link #isInterrupted()}.

The {@link #interrupted} in its current form links to an internal package private field and should instead have been {@link #interrupted()}. In its current form the javadoc is rendered without a link to ""interrupted""",,,,,,,,,,,JDK-8310884,JDK-8311342,,,,,,,,,,,,,,,,,,,,,,JDK-8139744,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i322cj:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-06-25 23:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14646
Date: 2023-06-26 05:58:41 +0000;;;","2023-06-25 23:27;dukebot;Changeset: 013367b4
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2023-06-26 06:25:08 +0000
URL:       https://git.openjdk.org/jdk/commit/013367b4831094cdd330564378de69deccd0dc4b
;;;","2023-06-25 23:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/62
Date: 2023-06-26 06:28:07 +0000;;;",,,,,,,,,,,,,,,,,,,,
Build failure after  JDK- 8305341,JDK-8310863,5104114,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jwaters,dholmes,dholmes,2023-06-25 17:36,2023-07-12 13:29,2023-10-01 09:55,2023-06-25 22:41,22,,,,,,22,core-svc,,1,,,,,,,,,,,,,,,,,," c:\sb\prod\1687737602\workspace\open\src\jdk.jdwp.agent\share\native\libjdwp\ArrayReferenceImpl.c(26): fatal error C1083: Cannot open include file: 'stdalign.h': No such file or directory

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305341,,,,,,,,,,,,,,,,,,,,,,,22,,windows,,,,,"0|i322bf:",9223372036854775807,b04,,,,,,,,,,,"2023-06-25 19:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14645
Date: 2023-06-26 02:30:06 +0000;;;","2023-06-25 22:41;dukebot;Changeset: 8242c647
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-06-26 05:38:04 +0000
URL:       https://git.openjdk.org/jdk/commit/8242c647b9d31320757363b69e7048a109ce86df
;;;",,,,,,,,,,,,,,,,,,,,,
Improve location reporting for javac serial lint warnings,JDK-8310861,5104110,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,darcy,darcy,darcy,2023-06-25 14:37,2023-07-12 13:30,2023-10-01 09:55,2023-06-26 09:58,21,,,,,,22,tools,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"For a subset of the expanded serial lint warnings (JDK-8202056, JDK-8160675), javac uses the location of the enclosing type rather than the method or field in question.",,,,,,,,,,,JDK-8310925,JDK-8311344,,,,,,,,,,,,,,,,,,,,,,JDK-8202056,JDK-8160675,JDK-8310835,,JDK-8310907,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i322aj:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-25 18:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14644
Date: 2023-06-26 00:54:32 +0000;;;","2023-06-26 09:58;dukebot;Changeset: 289f218a
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2023-06-26 16:56:40 +0000
URL:       https://git.openjdk.org/jdk/commit/289f218a32558bbbf7e6c589b4618757bd6d043f
;;;","2023-06-26 10:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/63
Date: 2023-06-26 17:04:41 +0000;;;",,,,,,,,,,,,,,,,,,,,
[Mac] Silence OpenGL deprecation warnings,JDK-8310847,5104093,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mfox,mfox,mfox,2023-06-24 10:38,2023-07-20 12:02,2023-10-01 09:55,2023-07-14 07:27,jfx21,,,,,,jfx22,javafx,,0,,,,,,,,,,,,,,,,,,The Mac build issues a fair number of warnings about OpenGL being deprecated. OpenGL was deprecated in 10.14 and now that the minimum deployment target for JavaFX is 11.0 across the board the warnings are showing up in both the Intel and Apple Silicon builds. Until Mac switches over to Metal the warnings are just noise.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i3226r:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-06-24 10:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1161
Date: 2023-06-24 17:53:31 +0000;;;","2023-07-14 07:27;dukebot;Changeset: 440ce43e
Author:    Martin Fox <martin@nlazyt.com>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-07-14 14:24:15 +0000
URL:       https://git.openjdk.org/jfx/commit/440ce43e8d45c781e65d0e8527d084e7d628f4a6
;;;",,,,,,,,,,,,,,,,,,,,,
Skip failing test InitialWindowSizeTest on Linux,JDK-8310846,5104091,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mstrauss,kcr,kcr,2023-06-24 08:42,2023-07-17 14:57,2023-10-01 09:55,2023-06-26 09:39,jfx21,,,,,,jfx21,javafx,,0,noreg-self,testbug,,,,,,,,,,,,,,,,"As noted in JDK-8310845, the InitialWindowSizeTest, which was added to test the (Windows-specific) fix for JDK-8299348, fails on Linux. This test needs to be skipped on Linux until JDK-8310845 is fixed like this:

        // JDK-8310845
        assumeFalse(PlatformUtil.isLinux());
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310845,JDK-8299348,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i3226b:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2023-06-24 19:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1162
Date: 2023-06-25 02:10:58 +0000;;;","2023-06-26 09:39;dukebot;Changeset: d010d41c
Author:    Michael Strauß <mstrauss@openjdk.org>
Date:      2023-06-26 16:37:39 +0000
URL:       https://git.openjdk.org/jfx/commit/d010d41cc9519a792957c6dda8275757b4664704
;;;",,,,,,,,,,,,,,,,,,,,,
[lw5] add several regression tests,JDK-8310840,5104085,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-06-23 20:06,2023-06-23 20:42,2023-10-01 09:55,2023-06-23 20:42,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,"tests for javadoc, javax.lang.model and several others",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310598,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3224z:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-23 20:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/878
Date: 2023-06-24 03:10:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
[lw5] implicit constructors must be public and declared in a value class,JDK-8310839,5104084,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-06-23 19:28,2023-06-23 19:56,2023-10-01 09:55,2023-06-23 19:56,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310598,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3224r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-23 19:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/877
Date: 2023-06-24 02:32:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Correct range notations in MethodTypeDesc specification,JDK-8310838,5104083,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,liach,liach,liach,2023-06-23 18:04,2023-07-12 13:32,2023-10-01 09:55,2023-06-26 15:09,12,17,21,22,,,22,core-libs,,0,hgupdate-sync,noreg-doc,,,,,,,,,,,,,,,,"In the specifications of 3 methods in MethodTypeDesc: parameterType, changeParameterType, insertParameterTypes, the range notation used in @throws IndexOutOfBoundsException clause is malformed; it probably intended to be in a {@code} inline tag than a pair of {}, as seen in dropParameterTypes.",,,,,,,,,,,JDK-8311209,JDK-8311373,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3224j:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-06-23 18:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14635
Date: 2023-06-24 01:07:48 +0000;;;","2023-06-26 15:09;dukebot;Changeset: a197ee79
Author:    Chen Liang <liach@openjdk.org>
Committer: Mandy Chung <mchung@openjdk.org>
Date:      2023-06-26 22:07:35 +0000
URL:       https://git.openjdk.org/jdk/commit/a197ee797b3580d9f85636522587d3f6418dff6a
;;;","2023-06-26 15:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/66
Date: 2023-06-26 22:28:23 +0000;;;",,,,,,,,,,,,,,,,,,,,
[lw5] reflective creation of arrays of non-nullable types,JDK-8310832,5104077,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-06-23 15:07,2023-06-23 15:21,2023-10-01 09:55,2023-06-23 15:21,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310598,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32237:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-23 15:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/876
Date: 2023-06-23 22:12:21 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
typo in the parameter name in @throws of ClassDesc::ofDescriptor ,JDK-8310830,5104075,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,mchung,mchung,2023-06-23 14:25,2023-07-12 13:35,2023-10-01 09:55,2023-06-27 12:32,21,,,,,,22,core-libs,,0,hgupdate-sync,noreg-doc,,,,,,,,,,,,,,,,"static ClassDesc ofDescriptor(String descriptor)

Throws:
IllegalArgumentException - if the name string is not in the correct format

Should be:
IllegalArgumentException - if the descriptor string is not in the correct format",,,,,,,,,,,JDK-8310983,JDK-8311351,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3222r:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-06-27 12:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14683
Date: 2023-06-27 19:06:26 +0000;;;","2023-06-27 12:32;dukebot;Changeset: 4bce38c6
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2023-06-27 19:30:59 +0000
URL:       https://git.openjdk.org/jdk/commit/4bce38c6d7792596879a6e1081140b698b899471
;;;","2023-06-27 12:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/73
Date: 2023-06-27 19:42:37 +0000;;;",,,,,,,,,,,,,,,,,,,,
guarantee(!HAS_PENDING_EXCEPTION) failed in ExceptionTranslation::doit,JDK-8310829,5104074,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dnsimon,dnsimon,dnsimon,2023-06-23 14:23,2023-08-07 13:17,2023-10-01 09:55,2023-06-30 13:13,21,22,,,,,22,hotspot,,0,hgupdate-sync,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-22,,,,,,,,,,,,,"An OOME thrown when trying to resolve the VMSupport class in the process of translating an exception to/from the HotSpot heap from/to the libgraal heap cause the VM to exit. For example:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S105670/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/343e7bfd-9479-4364-8b2d-73c5c4318fbf/runs/a24f1bdd-aeda-4a23-ab67-843dd4397358/workspace/open/src/hotspot/share/jvmci/jvmciEnv.cpp:395), pid=3185151, tid=3185166
#  Error: guarantee(!HAS_PENDING_EXCEPTION) failed

Stack: [0x0000ffff9c4ad000,0x0000ffff9c8a9000],  sp=0x0000ffff9c8a5e40,  free space=4067k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xf7afe4]  ExceptionTranslation::doit(JavaThread*)+0x624  (jvmciEnv.cpp:395)
V  [libjvm.so+0xf63ad0]  JVMCIEnv::~JVMCIEnv() [clone .part.0]+0x240  (jvmciEnv.cpp:494)
V  [libjvm.so+0xf18778]  c2v_lookupType(JNIEnv_*, _jobject*, _jstring*, _jobject*, long, unsigned char)+0x228  (jvmciCompilerToVM.cpp:636)
C  [libjvmcicompiler.so+0xef71c4]  jdk.vm.ci.hotspot.HotSpotResolvedJavaType* jdk.vm.ci.hotspot.CompilerToVM::lookupType(java.lang.String*, jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl*, long, bool)+0x294

Time: Fri Jun 23 08:10:51 2023 UTC elapsed time: 0.717002 seconds (0d 0h 0m 0s)


Internal exceptions (2 events):
Event: 0.590 Thread 0x0000ffff981b5e30 Exception <a 'java/lang/OutOfMemoryError'{0x00000000ff01c130}> (0x00000000ff01c130) 
thrown [/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S105670/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/343e7bfd-9479-4364-8b2d-73c5c4318fbf/runs/a24f1bdd-aeda-4a23-ab67-843dd4397358/workspace/open/src/hotspot/share/gc/shared/memAllocator.cpp, line 136]
Event: 0.713 Thread 0x0000ffff981b5e30 Exception <a 'java/lang/OutOfMemoryError'{0x00000000ff01be58}> (0x00000000ff01be58) 
thrown [/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S105670/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/343e7bfd-9479-4364-8b2d-73c5c4318fbf/runs/a24f1bdd-aeda-4a23-ab67-843dd4397358/workspace/open/src/hotspot/share/gc/shared/memAllocator.cpp, line 136]
",,,,,,,,,,,JDK-8311237,JDK-8311376,,,,,,,,,,,,,,,,,,,,,,JDK-8313899,JDK-8310055,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3222j:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-25 00:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14641
Date: 2023-06-25 06:58:14 +0000;;;","2023-06-25 23:56;thartmann;ILW = Guarantee failure due to pending exception, with JVMCI/libgraal when OOME occurs during translation of an exception, no workaround = HLH = P2;;;","2023-06-30 13:13;dukebot;Changeset: f6bdccb4
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-06-30 20:10:24 +0000
URL:       https://git.openjdk.org/jdk/commit/f6bdccb45caca0f69918a773a9ad9b2ad91b702f
;;;","2023-07-03 00:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/91
Date: 2023-07-03 07:13:14 +0000;;;",,,,,,,,,,,,,,,,,,,
java.sql java.sql.rowset packages have no `@since` info,JDK-8310828,5104073,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,jjg,jjg,2023-06-23 13:52,2023-07-12 13:34,2023-10-01 09:55,2023-06-27 10:25,21,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"There are no `@since` tags in the SQL package-info.java files.

jjg-mac:jdk.ref (master ‣ master) $ ls -d open/src/java.sql*
open/src/java.sql               open/src/java.sql.rowset
jjg-mac:jdk.ref (master ‣ master) $ find open/src/java.sql* -name package-info.java
open/src/java.sql/share/classes/java/sql/package-info.java
open/src/java.sql/share/classes/javax/sql/package-info.java
open/src/java.sql.rowset/share/classes/javax/sql/rowset/spi/package-info.java
open/src/java.sql.rowset/share/classes/javax/sql/rowset/package-info.java
open/src/java.sql.rowset/share/classes/javax/sql/rowset/serial/package-info.java
open/src/java.sql.rowset/share/classes/com/sun/rowset/providers/package-info.java
open/src/java.sql.rowset/share/classes/com/sun/rowset/package-info.java
jjg-mac:jdk.ref (master ‣ master) $ find open/src/java.sql* -name package-info.java | xargs grep '@since'
jjg-mac:jdk.ref (master ‣ master) $ 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3222b:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@57fef174,,,,,,,,,"2023-06-26 11:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14652
Date: 2023-06-26 13:00:31 +0000;;;","2023-06-27 10:25;dukebot;Changeset: fb283dff
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2023-06-27 17:22:41 +0000
URL:       https://git.openjdk.org/jdk/commit/fb283dff04a6fe11c8a7d44498ddd2075234e4dd
;;;",,,,,,,,,,,,,,,,,,,,,
[lw5] loading NonAtomic can produce completion errors,JDK-8310819,5104064,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-06-23 11:20,2023-06-23 14:33,2023-10-01 09:55,2023-06-23 14:33,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310598,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3220b:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-23 14:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/875
Date: 2023-06-23 21:15:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
GcInfoBuilder float/double signature mismatch,JDK-8310816,5104060,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2023-06-23 10:52,2023-07-12 13:29,2023-10-01 09:55,2023-06-26 01:37,,,,,,,22,core-svc,,0,noreg-hard,,,,,,,,,,,,,,,,,GcInfoBuilder.c has a method setDoubleValueAtObjectArray which creates a new object and sets it in an array.  It means to create a Double but uses a signature for Float.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i321zf:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2023-06-23 12:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14631
Date: 2023-06-23 18:10:59 +0000;;;","2023-06-26 01:37;dukebot;Changeset: a96e92c8
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-06-26 08:35:52 +0000
URL:       https://git.openjdk.org/jdk/commit/a96e92c83dd3cb36c10282724466e6d1339f58f6
;;;",,,,,,,,,,,,,,,,,,,,,
"Clarify the name of the main class, services and provider classes in module descriptor ",JDK-8310815,5104059,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,mchung,mchung,2023-06-23 10:42,2023-08-24 00:23,2023-10-01 09:55,2023-08-18 10:12,21,,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,"The spec of ModuleDescriptor::mainClass, ModuleDescriptor::uses,  ModuleDescriptor.Provides::service and ModuleDescriptor.Provides::providers state that these APIs return a fully qualified class name.   The current behavior returns a binary name.",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314455,,,,,,,,JDK-4628117,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i321z7:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@34132c1c,,,,,,,,,"2023-08-16 11:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15317
Date: 2023-08-16 18:42:00 +0000;;;","2023-08-18 10:12;dukebot;Changeset: 50a2ce01
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-08-18 17:10:39 +0000
URL:       https://git.openjdk.org/jdk/commit/50a2ce01f4d1d42d7a537b48a669b5a75a583df5
;;;",,,,,,,,,,,,,,,,,,,,,
Clarify the targetName parameter of Lookup::findClass,JDK-8310814,5104058,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,mchung,mchung,2023-06-23 10:34,2023-07-25 04:46,2023-10-01 09:55,2023-07-18 09:09,21,,,,,,22,core-libs,,0,hgupdate-sync,noreg-doc,,,,,,,,,,,,,,,,The spec for Lookup::findClass needs to be updated to reflect the current behavior.   It requires a binary name or a string representing an array class in the form as returned by Class::getName.,,,,,,,,,,,JDK-8312258,JDK-8312926,,,,,,,,,,,,,,JDK-8310833,,,,,,,,JDK-4628117,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i321yz:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2023-06-23 15:51;mchung;test/jdk/java/lang/invoke/accessClassAndFindClass/TestFindClass.java shows the use of binary name.;;;","2023-06-26 14:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14668
Date: 2023-06-26 21:34:40 +0000;;;","2023-07-18 09:09;dukebot;Changeset: b4dce0d6
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-07-18 16:07:35 +0000
URL:       https://git.openjdk.org/jdk/commit/b4dce0d62479c2494c02570a60319cb1a5932940
;;;","2023-07-18 09:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/136
Date: 2023-07-18 16:25:17 +0000;;;",,,,,,,,,,,,,,,,,,,
[lw5] addressing pending issues now that non-nullable types are available,JDK-8310812,5104055,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-06-23 10:13,2023-06-23 10:50,2023-10-01 09:55,2023-06-23 10:50,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310598,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i321yb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-23 10:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/874
Date: 2023-06-23 17:41:55 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
"assert(reserved_rgn != nullptr) failed: Add committed region, No reserved region found",JDK-8310743,5103985,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,aboldtch,mdoerr,mdoerr,2023-06-23 06:19,2023-07-12 13:48,2023-10-01 09:55,2023-07-03 07:09,21,22,,,,,22,hotspot,,0,genzgc,hgupdate-sync,,,,,,,,,,,,,,,,"The assertion was hit once while testing compiler/loopstripmining/TestNoWarningLoopStripMiningIterSet.java#ZGenerational on PPC64le. (May or may not be platform specific.)

Heap initialization failed. See attached hs_err file.
",,,,,,,,,,,JDK-8311379,JDK-8311292,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-06-23 06:19;mdoerr;hs_err_pid90190.log;https://bugs.openjdk.org/secure/attachment/104403/hs_err_pid90190.log",,,,,,,,,,,,,,,,,,,,,,"0|i321ir:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-26 00:13;stefank;I think this can happen if we fail to reserve memory anywhere in the range [heap base, heap base + MaxHeapSize). In that case we fake the address of the committed memory, but that range will not correspond to reserved memory for the heap.;;;","2023-06-26 04:07;stefank;I think this is a platform-independent bug. We either need to figure out how to solve this, or back out the previous attempt to fix the NMT over reporting bug.;;;","2023-06-28 06:30;stefank;Axel is working on a fix for this issue.;;;","2023-06-30 06:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14730
Date: 2023-06-30 13:07:17 +0000;;;","2023-07-03 07:09;dukebot;Changeset: f393975d
Author:    Axel Boldt-Christmas <aboldtch@openjdk.org>
Date:      2023-07-03 14:06:58 +0000
URL:       https://git.openjdk.org/jdk/commit/f393975d1b9423835a7aa42f6ffc0656499701d7
;;;","2023-07-03 07:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/92
Date: 2023-07-03 14:24:05 +0000;;;",,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Revert JVMCI _metadata field removal,JDK-8310742,5103984,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-06-23 06:18,2023-06-26 00:55,2023-10-01 09:55,2023-06-26 00:55,repo-lilliput-17,,,,,,repo-lilliput-17,hotspot,,0,amazon-interest,lilliput,,,,,,,,,,,,,,,,"We removed _metadata._klass field from JVMCI interfaces. This is no longer necessary since we introduced UseCompactObjectHeaders, with the caveat that JVMCI can only be used with -UCOH.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i321ij:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-23 06:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/48
Date: 2023-06-23 13:41:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Build failure after JDK-8310577 with GCC8,JDK-8310735,5103977,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,lucy,lucy,2023-06-23 06:03,2023-09-05 09:18,2023-10-01 09:55,2023-06-23 07:11,22,,,,,,22,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,"I see 
/net/usr.work/d003504/Workspace/OpenJDK/jdk/jdk/src/hotspot/share/oops/arrayOop.hpp:141:17: error: comparison is always true due to limited range of data type [-Werror=type-limits]
     assert(type >= 0 && type < T_CONFLICT, ""wrong type"");
            ~~~~~^~~~

At least on linux x86_64 and on linux s390x, using gcc8.

Reason: 
In share/utilities/globalDefinitions.hpp, this modification
- enum BasicType {
+ enum BasicType : u1 {
forced BasicType to be unsigned. As a consequence, at least the above comparison is always true. 

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310577,,,,,,,,,,,generic,,,,,,,b04,22,,generic,,,,,"0|i321gz:",9223372036854775807,b04,,,,,,,,,,,"2023-06-23 06:25;jiefu;We also found this bug.
So would you like to fix it, [~lucy]?;;;","2023-06-23 06:38;lucy;The simple fix would be to revert the change in this one line. But this would most likely undermine the intention of the original change. 

I have contacted Coleen directly (via mail) and asked her to have a look. I'm not sure in which timezone she lives. Might well be it's early morning for her.

I would suggest to wait a few more hours.;;;","2023-06-23 06:38;jiefu;I assigned it to myself to fix it as soon as possible.
Hope you wouldn't mind it.
Thanks.;;;","2023-06-23 06:41;lucy;Sure. Build errors are bothering.;;;","2023-06-23 06:49;jiefu;Thanks [~lucy].

I suggest removing '>= 0' conditions in the asserts since BasicType had been made to be unsigned.
https://github.com/openjdk/jdk/pull/14627;;;","2023-06-23 06:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14627
Date: 2023-06-23 13:45:21 +0000;;;","2023-06-23 07:11;dukebot;Changeset: e78fd466
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2023-06-23 14:08:56 +0000
URL:       https://git.openjdk.org/jdk/commit/e78fd46679182b10d726cde37d39a34d9cd9a10a
;;;",,,,,,,,,,,,,,,,
[Lilliput/JDK17] Enter object_iterate_impl() RESOLVE path only when +UCOH,JDK-8310733,5103975,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-06-23 05:50,2023-06-23 11:44,2023-10-01 09:55,2023-06-23 11:44,repo-lilliput-17,,,,,,repo-lilliput-17,hotspot,,0,amazon-interest,lilliput,,,,,,,,,,,,,,,,"In HeapRegion::object_iterate_impl() we currently enter the RESOLVE path when doing full-GC, regardless if it's +UCOH or -UCOH. We should only enter RESOLVE path with +UCOH.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i321gj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-23 06:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/46
Date: 2023-06-23 12:53:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
JDK-8303215 is incomplete,JDK-8310687,5103930,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2023-06-22 21:29,2023-09-19 11:58,2023-10-01 09:55,2023-07-21 07:21,21,22,,,,,22,hotspot,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,large-pages,sustaining,,,,,,,,,,,,,"JDK-8303215 added a workaround to deal with too-eager THP page coalescation for thread stacks that could lead to a much higher thread stack use than planned.

The workaround helps a lot already, but it is still incomplete in light of JDK-8310233.

We do this workaround even if unnecessary (when THPs are disabled on the system). And we may use the wrong page size when multiple *static* hugepage sizes are configured on the system, which may make the fix ineffectual for java threads (e.g. THP assumes lp size is 1G, causing the condition in os::create_thread to fail).

I am working on a solution for JDK-8310233. I plan to separate cleanly, at the os::Linux namespace, *static* hugepages from THPs such that we can query the THP page size and mode independently from the large-page-abstraction in the os namespace. Once done, the JDK-8303215 workaround can be altered to use THP state and THP page size instead.


",,,,,,,,,,,JDK-8315397,JDK-8315123,,,,,,,,,,,,,,,,,,,,,,JDK-8303215,,,,JDK-8310261,JDK-8310233,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3216j:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-18 08:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14919
Date: 2023-07-18 08:14:56 +0000;;;","2023-07-21 07:21;dukebot;Changeset: 84b325b8
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-07-21 14:19:57 +0000
URL:       https://git.openjdk.org/jdk/commit/84b325b844c08809448a9c073a11443d9e3c3f8e
;;;","2023-08-18 23:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2086
Date: 2023-08-17 14:50:49 +0000;;;","2023-08-21 09:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1679
Date: 2023-08-21 12:47:15 +0000;;;","2023-08-25 23:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/103
Date: 2023-08-25 12:48:36 +0000;;;","2023-08-30 02:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1697
Date: 2023-08-25 11:57:30 +0000;;;",,,,,,,,,,,,,,,,,
[lw5] check that only value classes with implicit constructor can implement NonAtomic,JDK-8310686,5103929,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-06-22 19:56,2023-06-23 09:38,2023-10-01 09:55,2023-06-23 09:38,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310598,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3216b:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-23 09:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/873
Date: 2023-06-23 16:27:43 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
[lw5] adding support for null restricted types,JDK-8310685,5103928,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-06-22 19:37,2023-06-22 20:02,2023-10-01 09:55,2023-06-22 20:02,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310598,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32163:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-22 19:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/872
Date: 2023-06-23 02:43:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
[lw5] adding missing ImplicitCreation and NullRestricted visitors in regression tests,JDK-8310684,5103927,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-06-22 19:23,2023-06-22 19:34,2023-10-01 09:55,2023-06-22 19:34,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310598,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3215v:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-22 19:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/871
Date: 2023-06-23 02:28:13 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
No package-info (and @since) for package jdk.nio.mapmode,JDK-8310682,5103923,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,jjg,jjg,2023-06-22 16:21,2023-07-12 13:30,2023-10-01 09:55,2023-06-26 09:32,21,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"The package jdk.nio.mapmode contains (just) ExtendedMapMode, added in JDK 14.

There is no package-info.java for the package, and hence no `@since` info.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3214z:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-06-23 09:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14628
Date: 2023-06-23 16:30:15 +0000;;;","2023-06-26 09:32;dukebot;Changeset: d32eb015
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-06-26 16:28:48 +0000
URL:       https://git.openjdk.org/jdk/commit/d32eb015f056b09fa9ae99a2a84b7056cd3d9259
;;;",,,,,,,,,,,,,,,,,,,,,
Update WebKit to 616.1,JDK-8310681,5103922,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,hmeda,vdyakov,vdyakov,2023-06-22 16:06,2023-09-13 09:15,2023-10-01 09:55,2023-07-28 05:49,8u391,jfx22,,,,,jfx22,javafx,,0,3rdparty,CPU23_10-release-candidate,jfx21u-fix-request,jfx21u-fix-yes,noreg-other,sn_148,sn_149,webkit-2.40,,,,,,,,,,"This will update JavaFX WebKit to 616.1, based on GTK WebKit 2.40.x

https://github.com/WebKit/WebKit/wiki/GLib-Stable-Branches
",,,,,,,,,,,JDK-8313351,JDK-8312742,JDK-8313329,JDK-8313326,JDK-8315546,JDK-8313352,JDK-8313327,,,,,,JDK-8304563,JDK-8275225,JDK-8314520,,,JDK-8299977,,,,,,JDK-8314212,JDK-8313177,JDK-8313181,JDK-8313711,JDK-8314230,JDK-8313321,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3214r:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-07-20 09:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1180
Date: 2023-07-20 15:36:28 +0000;;;","2023-07-28 05:49;dukebot;Changeset: 2dc699a8
Author:    Hima Bindu Meda <hmeda@openjdk.org>
Date:      2023-07-28 12:47:44 +0000
URL:       https://git.openjdk.org/jfx/commit/2dc699a8661fb23040c9f8e3905713229e615816
;;;","2023-07-28 05:56;hmeda;Fix Request JFX21u:
Request to approve backport of this commit to jfx21u.
Clean backport. Needed to keep native WebKit code in sync ;;;","2023-07-28 06:00;kcr;Approved to go into jfx21u for 21.0.1;;;","2023-07-28 06:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx21u/pull/3
Date: 2023-07-28 13:06:48 +0000;;;","2023-09-01 02:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/134
Date: 2023-09-01 09:05:27 +0000;;;","2023-09-01 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/140
Date: 2023-09-01 13:39:57 +0000;;;",,,,,,,,,,,,,,,,
GenShen: In-place region promotions may fail,JDK-8310680,5103921,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wkemper,wkemper,wkemper,2023-06-22 15:54,2023-06-26 10:27,2023-10-01 09:55,2023-06-26 10:27,repo-shenandoah,,,,,,,hotspot,,0,gc,gc-shenandoah,genshen,,,,,,,,,,,,,,,"GenShen may age regions prematurely, causing them to be selected for promotion without being prepared.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3214j:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-22 16:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/290
Date: 2023-06-22 22:58:38 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
"[lw5] test refactoring, repurposing primitive classes tests",JDK-8310679,5103920,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-06-22 15:47,2023-06-22 16:02,2023-10-01 09:55,2023-06-22 16:02,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310598,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3214b:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-22 16:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/870
Date: 2023-06-22 22:50:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
[lw5] add implicit constructors,JDK-8310678,5103918,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-06-22 14:40,2023-06-22 15:12,2023-10-01 09:55,2023-06-22 15:12,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,"add support for implicit constructors, add the ImplicitCreation and NullRestricted class file attributes, and the NonAtomic interface",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310598,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3213v:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-22 15:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/869
Date: 2023-06-22 22:06:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Normalize comment blocks in newly-converted package-info.java files,JDK-8310667,5103905,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2023-06-22 10:49,2023-06-29 08:34,2023-10-01 09:55,2023-06-23 06:57,jfx21,,,,,,jfx21,javafx,,0,noreg-doc,sn_146,,,,,,,,,,,,,,,,"This is a follow-up fix for JDK-8180066. As mentioned in the description of PR #1159 [1], we should normalize the javadoc comment blocks in the package-info.java files, which were converted from package.html.

Ordinarily, this would be a low-priority cleanup task, but it is also the best solution to a CI test failure that was introduced by JDK-8180066 and is being tracked by JDK-8310654. As such I am setting the priority of this bug to match that of JDK-8310654.

[1] https://github.com/openjdk/jfx/pull/1159 ",,,,,,,,,,,,,,,,,,,,,,,,JDK-8310579,,,,,,,,,,JDK-8180066,JDK-8310654,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3210z:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2023-06-22 11:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1160
Date: 2023-06-22 18:38:43 +0000;;;","2023-06-23 06:57;dukebot;Changeset: 152a43e1
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2023-06-23 13:55:17 +0000
URL:       https://git.openjdk.org/jfx/commit/152a43e13ed36f781e64b8220ae9c73ec9f05a52
;;;",,,,,,,,,,,,,,,,,,,,,
gradle validateSourceSets task not run when TEST_ONLY=true,JDK-8310666,5103904,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,arapte,kcr,kcr,2023-06-22 10:34,2023-09-15 07:06,2023-10-01 09:55,2023-09-11 04:45,jfx21,,,,,,jfx22,javafx,,0,noreg-build,sn_152,test_sprint,,,,,,,,,,,,,,,"To reproduce this:

$ gradle sdk shims
$ gradle -PTEST_ONLY=true test

The `validateSourceSets` tasks should be run, but aren't.

I discovered this while trying to figure out why JDK-8310654 wasn't caught prior to integration. A GHA test run should have caught the problem, but didn't because validateSourceSets` wasn't run.

We need to add validateSourceSets to the list of tasks that are considered ""test"" tasks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310654,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3210r:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2023-06-22 10:35;kcr;We should get this into jfx21, if possible, to avoid a similar situation to what happened with JDK-8310654.;;;","2023-09-11 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1237
Date: 2023-09-11 09:23:06 +0000;;;","2023-09-11 04:45;dukebot;Changeset: 325be565
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2023-09-11 11:41:57 +0000
URL:       https://git.openjdk.org/jfx/commit/325be5657b0ba9633917c90e23dd4e8f34234421
;;;",,,,,,,,,,,,,,,,,,,,
[lw5] remove compiler support for primitive classes,JDK-8310664,5103901,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-06-22 09:24,2023-06-22 14:39,2023-10-01 09:55,2023-06-22 13:44,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,"Remove support for primitive classes in the compiler:
 - switches for checking if primitive classes are allowed and code protected by them
 - remove flavors, Q-types, primitive classes related predicates
 - uses of `.ref` `.val` and projections related code
 - parser support for primitive classes
 - removing the PRIMITIVE_CLASS and ACC_PRIMITIVE flags and its uses
 - some minor refactorings and adjustments to regression tests
 - removing Type.ConstantPoolQType",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310598,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32103:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-22 13:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/868
Date: 2023-06-22 20:24:50 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Fix OptoRuntime::new_array_nozero_C,JDK-8310662,5103900,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rkennke,rkennke,rkennke,2023-06-22 08:40,2023-06-22 14:22,2023-10-01 09:55,2023-06-22 14:22,repo-lilliput-17,,,,,,,hotspot,,0,amazon-interest,lilliput,,,,,,,,,,,,,,,,"There's a severe bug in OptoRuntime::new_array_nozero_C() where we could end up clearing other memory because we add a byte-sized offset to a pointer base:

```
    HeapWord* obj = cast_from_oop<HeapWord*>(result);
    if (aligned_hs_bytes > hs_bytes) {
      Copy::zero_to_bytes(obj + hs_bytes, aligned_hs_bytes - hs_bytes);
    }
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i320zv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-22 09:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/43
Date: 2023-06-22 16:07:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
RISC-V: __builtin___clear_cache can fail silently.,JDK-8310656,5103893,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rehn,rehn,rehn,2023-06-22 07:48,2023-07-25 04:37,2023-10-01 09:55,2023-07-02 09:17,19,20,21,22,,,22,hotspot,,0,hgupdate-sync,oraclejdk-na,,,,,,,,,,,,,,,,"If __builtin___clear_cache fails (e.g. EPERM) it is unnoticed.
That can cause the VM to crash on what seems like a perfectly fine instruction with SIGILL ILL_ILLOPC.
If you don't know that this syscall is critical it's very hard to debug.

In JDK 19 the VM emits the syscall itself, but never checks the return value. Same issue.",,,,,,,,,,,JDK-8312010,JDK-8312908,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,,,,,,,"0|i320yb:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-27 01:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14670
Date: 2023-06-27 08:19:47 +0000;;;","2023-07-02 09:17;dukebot;Changeset: faf1b822
Author:    Robbin Ehn <rehn@openjdk.org>
Date:      2023-07-02 16:15:28 +0000
URL:       https://git.openjdk.org/jdk/commit/faf1b822d03b726413d77a2b247dfbbf4db7d57e
;;;","2023-07-02 11:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/90
Date: 2023-07-02 18:35:30 +0000;;;",,,,,,,,,,,,,,,,,,,,
validateSourceSets task fails on javafx/scene/package-info.java after JDK-8180066,JDK-8310654,5103891,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2023-06-22 07:38,2023-06-29 08:34,2023-10-01 09:55,2023-06-23 06:57,jfx21,,,,,,jfx21,javafx,,0,noreg-self,regression,sn_146,testbug,,,,,,,,,,,,,,"Steps to reproduce:

$ gradle :graphcs:test
...
validating packages for modules/javafx.graphics/src/main/java
*** ERROR: File location <modules/javafx.graphics/src/main/java/javafx/scene/package-info.java> does not match package name <example>

FAILURE: Build failed with an exception.

* Where:
Build file 'build.gradle' line: 266

* What went wrong:
Execution failed for task ':graphics:validateSourceSets'.
> FAIL: Package validation failed

The converted package-info.java file has an example with ""package example;"", which is being picked up as the package for that file by the (too simplistic) parsing done by validateSourceSets in build.gradle.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8180066,,,,JDK-8310666,JDK-8310667,,,,,,,,,,,,,,,,,,jfx21,,,,,,,"0|i320xv:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-06-22 08:23;kcr;The reason I didn't catch this before integrating the fix for JDK-8180066 is that all of the scripts I ran for testing, including the GHA test script, run the tests with ""-PTEST_ONLY=true"" (as expected). There is a bug in the implementation of TEST_ONLY in that it doesn't consider the validateSourceSets tasks to be ""test"" tasks, so they are skipped. I'll file a separate bug for that.
;;;","2023-06-22 10:43;kcr;The root cause of this bug is that the parsing logic in the `validatePackages` test method in build.gradle doesn't filter out block comments that don't start with a leading '*'.

I already want to normalize the javadoc comment blocks in the converted package-info.java files, as mentioned in the description of PR #1159 [1]. Doing that will also fix this test failure.

[1] https://github.com/openjdk/jfx/pull/1159
;;;","2023-06-22 11:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1160
Date: 2023-06-22 18:38:43 +0000;;;","2023-06-23 06:57;dukebot;Changeset: 152a43e1
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2023-06-23 13:55:17 +0000
URL:       https://git.openjdk.org/jfx/commit/152a43e13ed36f781e64b8220ae9c73ec9f05a52
;;;",,,,,,,,,,,,,,,,,,,
[lworld] ValueConstantDesc fails after merge with jdk-21+25,JDK-8310651,5103888,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,thartmann,thartmann,2023-06-22 07:31,2023-07-13 09:01,2023-10-01 09:55,2023-07-13 09:01,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lworld,,,,,,,,,,,,,,,,,"java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertTrue(Assert.java:45)
	at org.testng.Assert.assertTrue(Assert.java:55)
	at ValueConstantDesc.asValueType(ValueConstantDesc.java:118)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:582)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:582)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i320x7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-12 14:38;mchung;It's a merge issue.   The fix for JDK-8304928 changes to special case an array type that the logic to determine Q-descriptor is moved to the array type case but misses the normal class case.

diff --git a/src/java.base/share/classes/java/lang/constant/ClassDescImpl.java b/src/java.base/share/classes/java/lang/constant/ClassDescImpl.java
index 8f233eaa131..c947b35bf38 100644
--- a/src/java.base/share/classes/java/lang/constant/ClassDescImpl.java
+++ b/src/java.base/share/classes/java/lang/constant/ClassDescImpl.java
@@ -73,18 +73,23 @@ final class ClassDescImpl implements ClassDesc {
             }
             // Class.forName is slow on class or interface arrays
             int depth = ConstantUtils.arrayDepth(descriptor);
-            Class<?> clazz = lookup.findClass(internalToBinary(descriptor.substring(depth + 1, descriptor.length() - 1)));
-            if (isValue) {
-                if (!PrimitiveClass.isPrimitiveClass(clazz)) {
-                    throw new LinkageError(clazz.getName() + "" is not a primitive class"");
-                }
-                clazz = PrimitiveClass.asValueType(clazz);
-            }
+            Class<?> clazz = findClass(lookup, internalToBinary(descriptor.substring(depth + 1, descriptor.length() - 1)));
             for (int i = 0; i < depth; i++)
                 clazz = clazz.arrayType();
             return clazz;
         }
-        return lookup.findClass(internalToBinary(dropFirstAndLastChar(descriptor)));
+        return findClass(lookup, internalToBinary(dropFirstAndLastChar(descriptor)));
+    }
+
+    private Class<?> findClass(MethodHandles.Lookup lookup, String name) throws ReflectiveOperationException {
+        Class<?> c = lookup.findClass(name);
+        if (isValue) {
+            if (!PrimitiveClass.isPrimitiveClass(c)) {
+                throw new LinkageError(c.getName() + "" is not a primitive class"");
+            }
+            return PrimitiveClass.asValueType(c);
+        }
+        return c;
     }
;;;","2023-07-12 14:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/885
Date: 2023-07-12 21:48:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Javadoc around prototype-less functions might be incorrect,JDK-8310646,5103883,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2023-06-22 06:37,2023-07-14 11:08,2023-10-01 09:55,2023-07-14 11:08,21,22,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,"Currently, the javadoc in Linker describes prototype-less functions as variadic functions [1].

However, this is inconsistent with other C documentation [2], which says that ""Only prototyped function declarations may be variadic."" [2]

Also, on closer inspection of the ABI, it seems that prototype-less functions don't follow the variadic ABI [3] (at least on certain platforms)

It seems that we should update the text regarding prototype-less functions. Removing their mention from the variadic function section

[1]: https://github.com/openjdk/jdk/blob/370b8b2644e8951ba177c39199036c79ecf49401/src/java.base/share/classes/java/lang/foreign/Linker.java#L396
[2]: https://en.cppreference.com/w/c/language/variadic
[3]: https://godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,selection:(endColumn:1,endLineNumber:11,positionColumn:1,positionLineNumber:11,selectionStartColumn:1,selectionStartLineNumber:11,startColumn:1,startLineNumber:11),source:'void+func1()%3B%0Avoid+func2(int+x,+...)%3B%0A%0Avoid+call1()+%7B%0A++++func1(1,+42)%3B%0A%7D%0A%0Avoid+call2()+%7B%0A++++func2(1,+42)%3B%0A%7D%0A'),l:'5',n:'0',o:'C+source+%231',t:'0')),k:38.1366179239669,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:armv8-cclang1600,deviceViewOpen:'1',filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'0',intel:'0',libraryCode:'0',trim:'1'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,libs:!(),options:'-target+arm64-apple-darwin',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+armv8-a+clang+16.0.0+(Editor+%231)',t:'0')),k:61.863382076033105,l:'4',m:100,n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308645,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i320w3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-07-14 09:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/846
Date: 2023-07-13 21:53:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
CancelledResponse.java does not use HTTP/2 when testing the HttpClient,JDK-8310645,5103882,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccleary,ccleary,ccleary,2023-06-22 06:32,2023-07-12 13:50,2023-10-01 09:55,2023-07-05 04:05,,,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,"In CancelledResponse.java the test only checks the HttpClient against HTTP/1.1 when cancelling a BodySubscriber while receiving data. In the interest of more coverage, the test should be extended (or a new test should be created) to cover the client in the case of a HTTP/2 connection.

In addition, a new test could use more canonical methods of testing such as making use of the HttpTestServerAdapters library.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i320vv:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-06-27 02:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14625
Date: 2023-06-23 12:13:47 +0000;;;","2023-07-05 04:05;dukebot;Changeset: 00ac46c0
Author:    Conor Cleary <ccleary@openjdk.org>
Date:      2023-07-05 11:04:10 +0000
URL:       https://git.openjdk.org/jdk/commit/00ac46c06d8a7154a007cd67092bd80226a02fc3
;;;",,,,,,,,,,,,,,,,,,,,,
Misformatted copyright messages in FFM,JDK-8310643,5103880,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,pminborg,pminborg,pminborg,2023-06-22 05:00,2023-08-14 11:55,2023-10-01 09:55,2023-08-07 04:00,22,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,Many of the copyright messages in the FFM API and implementation classes are not well formatted. We should have the same messages in all files. This includes test files as well. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313880,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i320vf:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-07-26 08:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15042
Date: 2023-07-26 15:43:12 +0000;;;","2023-08-07 04:00;dukebot;Changeset: 0b4387e3
Author:    Per Minborg <pminborg@openjdk.org>
Date:      2023-08-07 10:58:11 +0000
URL:       https://git.openjdk.org/jdk/commit/0b4387e3a33dd360efc5856126394739256505f8
;;;",,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Remove unnecessary check in G1ParScanThreadState,JDK-8310642,5103879,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-06-22 04:40,2023-06-22 09:03,2023-10-01 09:55,2023-06-22 09:03,repo-lilliput-17,,,,,,repo-lilliput-17,hotspot,,0,amazon-interest,lilliput,,,,,,,,,,,,,,,,"G1ParScanThreadState::do_copy_to_survivor_space() has an unnecessary change against upstream:

 if (old_mark.is_marked()) {
    // Already forwarded by somebody else, return forwardee.
    return old->forwardee(old_mark);
  }

All callers of this method already do the same, so this only adds code and possible affects performance for no reason.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i320v7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-22 04:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/42
Date: 2023-06-22 11:51:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Filtering a TableView with a large number of items freezes the UI,JDK-8310638,5103875,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jvos,jpereda,jpereda,2023-06-22 03:47,2023-09-06 04:24,2023-10-01 09:55,2023-06-27 11:22,jfx20,,,,,,jfx21,javafx,,0,regression,,,,,,,,,,,,,,,,,"Filtering a TableView that has a large number of items, after scrolling away from the top, freezes the UI.

This can be seen running the attached test:
- Scroll to the bottom (dragging the scrollbar for instance)
- Press the button to apply a filter
- The UI freezes for more than 30 seconds

At some point there is also this OOME error:

Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread ""InvokeLaterDispatcher""

The issue can be reproduced always, starting from JavaFX 20.",,,,,,,,,,,JDK-8315772,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-06-22 02:56;jpereda;FilterTableViewTest.java;https://bugs.openjdk.org/secure/attachment/104393/FilterTableViewTest.java",,,,,,,,,,,,,,,jfx20,,,,,,,"0|i320ub:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-06-26 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1163
Date: 2023-06-26 13:41:24 +0000;;;","2023-06-27 11:22;dukebot;Changeset: 8b1a446c
Author:    Johan Vos <jvos@openjdk.org>
Date:      2023-06-27 18:20:40 +0000
URL:       https://git.openjdk.org/jfx/commit/8b1a446ca9519f468aa1cf6ee9876b6035dcac37
;;;","2023-09-06 04:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/160
Date: 2023-09-06 11:02:23 +0000;;;",,,,,,,,,,,,,,,,,,,,
test/jdk/sun/nio/cs/TestCharsetMapping.java is spuriously passing,JDK-8310631,5103868,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,naoto,sgehwolf,sgehwolf,2023-06-22 03:32,2023-09-27 18:20,2023-10-01 09:55,2023-09-25 11:06,11.0.20,17.0.8,21,22,,,22,core-libs,,0,amazon-interest,noreg-self,,,,,,,,,,,,,,,,"The test TestCharsetMapping.java looks up the charsets to test by looking for the 'charsets' file in a directory relative to test sources. That relative path to the directory containing that file is wrong and, thus, the test passes with this output (and no (!) tests are run):

----------System.out:(1/34)----------
Nothing done, not in a jdk repo:

When the path is actually fixed, the test fails!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i320sr:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3962510e,,,,,,,,,"2023-06-22 06:13;sgehwolf;This diff solves one of the GB18030 related failure.

diff --git a/make/data/charsetmapping/charsets b/make/data/charsetmapping/charsets
index 4ee272f0b7a..85e0a172cc7 100644
--- a/make/data/charsetmapping/charsets
+++ b/make/data/charsetmapping/charsets
@@ -479,6 +479,7 @@ charset x-IBM874 IBM874
 # alias for GB18030 is generated at runtime
 charset GB18030 GB18030
     package sun.nio.cs
+    alias   gb18030-2022
     type    source
 
 ########################################################
diff --git a/test/jdk/sun/nio/cs/TestCharsetMapping.java b/test/jdk/sun/nio/cs/TestCharsetMapping.java
index c7bd101aa42..8ddbe1dfffb 100644
--- a/test/jdk/sun/nio/cs/TestCharsetMapping.java
+++ b/test/jdk/sun/nio/cs/TestCharsetMapping.java
@@ -569,7 +569,7 @@ public class TestCharsetMapping {
 
     public static void main(String args[]) throws Exception {
         Path dir = Paths.get(System.getProperty(""test.src"", ""."") +
-                             ""/../../../../src/java.base/share/data/charsetmapping"");
+                             ""/../../../../../make/data/charsetmapping"");
         if (!Files.exists(dir)) {
             // not inside jdk repo, no mappings, exit silently
             log.println(""Nothing done, not in a jdk repo: "");


But then it's down to those 7 failures:

$ grep 'error' build/linux-x86_64-server-release/test-support/jtreg_test_jdk_sun_nio_cs_TestCharsetMapping_java/sun/nio/cs/TestCharsetMapping.jtr
testing: x-MS950-HKSCS       [error loading mappings failed]
testing: x-IBM942C           [error loading mappings failed]
testing: x-IBM943C           [error loading mappings failed]
testing: x-IBM834            [error loading mappings failed]
testing: x-IBM949C           [error loading mappings failed]
testing: x-IBM964            [error loading mappings failed]
testing: x-IBM29626C         [error loading mappings failed];;;","2023-06-22 06:15;sgehwolf;[~itakiguchi] Would you have an idea how to fix these?;;;","2023-09-18 18:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15807
Date: 2023-09-19 01:01:14 +0000;;;","2023-09-25 11:06;dukebot;Changeset: e3201d1d
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-09-25 18:03:52 +0000
URL:       https://git.openjdk.org/jdk/commit/e3201d1d13433857a1b34ff0ca93f9ae1a4e22aa
;;;",,,,,,,,,,,,,,,,,,,
java/security/cert/CertPathValidator/OCSP/OCSPTimeout.java fails with RuntimeException  Server not ready,JDK-8310629,5103865,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdonovan,msheppar,msheppar,2023-06-22 03:08,2023-07-24 17:16,2023-10-01 09:55,2023-07-18 03:46,,,,,,,22,security-libs,,0,intermittent,noreg-self,sbr,,,,,,,,,,,,,,,"
----------messages:(7/489)----------
command: main OCSPTimeout 1000 true
reason: User specified action: run main/othervm OCSPTimeout 1000 true 
started: Sun Jun 18 01:11:16 UTC 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/sun.security.x509=ALL-UNNAMED --add-exports java.base/sun.security.provider.certpath=ALL-UNNAMED --add-exports java.base/sun.security.util=ALL-UNNAMED
finished: Sun Jun 18 01:11:23 UTC 2023
elapsed time (seconds): 6.967
----------configuration:(6/279)----------
Boot Layer
  add modules: java.base                                
  add exports: java.base/sun.security.provider.certpath ALL-UNNAMED
               java.base/sun.security.util              ALL-UNNAMED
               java.base/sun.security.x509              ALL-UNNAMED

----------System.out:(9/285)----------
Generated Root CA KeyPair
Generated End Entity KeyPair
Root CA Created:
Issuer: CN=Root CA Cert, O=SomeCompany
Subject: CN=Root CA Cert, O=SomeCompany
Serial: 1

[MainThread]: nextUpdate set to Sun Jun 18 02:11:17 UTC 2023
[MainThread]: Response Content-Length field disabled
----------System.err:(12/658)----------
java.lang.RuntimeException: Server not ready
	at OCSPTimeout.createPKI(OCSPTimeout.java:194)
	at OCSPTimeout.main(OCSPTimeout.java:89)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Server not ready
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Server not ready


The following code is prone to intermittent this failures under heavy OS load

185:         rootOcsp = new SimpleOCSPServer(rootKeystore, passwd, ROOT_ALIAS, null);
186:         rootOcsp.enableLog(debug);
187:         rootOcsp.setNextUpdateInterval(3600);
188:         rootOcsp.setDisableContentLength(true);
189:         rootOcsp.start();
190: 
191:         // Wait 5 seconds for server ready
192:         boolean readyStatus = rootOcsp.awaitServerReady(5, TimeUnit.SECONDS);
193:         if (!readyStatus) {
194:             throw new RuntimeException(""Server not ready"");
195:         }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,,"0|i320s3:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-07-17 10:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14905
Date: 2023-07-17 17:45:56 +0000;;;","2023-07-18 03:46;dukebot;Changeset: b20dc1e9
Author:    Matthew Donovan <mdonovan@openjdk.org>
Date:      2023-07-18 10:45:41 +0000
URL:       https://git.openjdk.org/jdk/commit/b20dc1e9cda1ea3a76b3f14c778c6816e5cc1c0c
;;;",,,,,,,,,,,,,,,,,,,,,
GcInfoBuilder.c missing JNI Exception checks,JDK-8310628,5103864,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2023-06-22 02:53,2023-07-12 13:28,2023-10-01 09:55,2023-06-23 10:44,17,21,22,,,,22,core-svc,,0,amazon-interest,noreg-hard,,,,,,,,,,,,,,,,"There are several missing JNI Exception checks in src/jdk.management/share/native/libmanagement_ext/GcInfoBuilder.c
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294473,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i320rv:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2023-06-22 04:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14613
Date: 2023-06-22 10:10:07 +0000;;;","2023-06-23 10:44;dukebot;Changeset: a9c0a0f6
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-06-23 17:42:13 +0000
URL:       https://git.openjdk.org/jdk/commit/a9c0a0f6b915f9ddaa97d83bad4f3c2b38810636
;;;",,,,,,,,,,,,,,,,,,,,,
Test serviceability/sa/ClhsdbDumpclass.java fails after 8242152: 'StackMapTable:' missing from stdout/stderr,JDK-8310618,5103853,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dqu,dholmes,dholmes,2023-06-22 00:41,2023-09-04 02:50,2023-10-01 09:55,2023-06-22 06:16,22,,,,,,22,hotspot,,0,regression,tier1,tier3,tier4,,,,,,,,,,,,,,"
java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'StackMapTable:' missing from stdout/stderr
	at ClhsdbDumpclass.main(ClhsdbDumpclass.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1570)
Caused by: java.lang.RuntimeException: 'StackMapTable:' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at ClhsdbDumpclass.main(ClhsdbDumpclass.java:92)
	... 4 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8242152,,,,,,,,,,,,,,,,,,,,,,,22,,,,,,,"0|i320pf:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-06-22 00:42;dholmes;Failing in debug builds;;;","2023-06-22 01:58;dqu;Figured out. I came across a situation similar to this one https://github.com/openjdk/jdk/pull/3004#issuecomment-800679752. On my PC, ptrace attach is disabled by default so this test in fact doesn't run!

The command line output shows nothing strange (all tests pass). But in summary.txt There is such a line:

> serviceability/sa/ClhsdbDumpclass.java  Passed. Skipped: jtreg.SkippedException: SA Attach not expected to work. Ptrace attach not supported.

When I enable ptrace attach, the release build also shows failures. So it is not a bug that only manifests in debug build.

The problem is that when you use `javap Main.class` it only shows an abbr. information. If you want to show detailed information (including `StackMapTable`) you need to add `-v` or `-verbose` option. (I forget this because I often use an alias for `javap -v -p` on my own system.)

Lessons learned: next time I will check summary.txt after running the tests. Could we show some info on the tty in such a case (SA Attach doesn't work)? Some CI passes may also due to this, so CI may also need some reconfiguration.;;;","2023-06-22 02:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14612
Date: 2023-06-22 09:17:46 +0000;;;","2023-06-22 06:16;dukebot;Changeset: 370b8b26
Author:    Daohan Qu <dqu@openjdk.org>
Committer: Kevin Walls <kevinw@openjdk.org>
Date:      2023-06-22 13:15:27 +0000
URL:       https://git.openjdk.org/jdk/commit/370b8b2644e8951ba177c39199036c79ecf49401
;;;","2023-06-22 06:36;dcubed;The fix for this bug was integrated in for jdk-22+4-193.;;;","2023-09-04 02:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/130
Date: 2023-09-04 09:42:24 +0000;;;",,,,,,,,,,,,,,,,,
Missing `@since` tags in java.lang.foreign,JDK-8310591,5103825,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pminborg,jjg,jjg,2023-06-21 15:39,2023-07-12 13:26,2023-10-01 09:55,2023-06-22 05:00,21,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"open/src/java.base/share/classes/java/lang/foreign/package-info.java:151: error: no @since info
package java.lang.foreign;
^
open/src/java.base/share/classes/java/lang/foreign/SegmentAllocator.java:75: error: no @since info
public interface SegmentAllocator {
       ^
open/src/java.base/share/classes/java/lang/foreign/SymbolLookup.java:124: error: no @since info
public interface SymbolLookup {
       ^
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310592,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i320j7:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-06-22 00:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14611
Date: 2023-06-22 07:18:13 +0000;;;","2023-06-22 05:00;dukebot;Changeset: 5a30fb66
Author:    Per Minborg <pminborg@openjdk.org>
Date:      2023-06-22 11:59:33 +0000
URL:       https://git.openjdk.org/jdk/commit/5a30fb6664e748fe41606eecda1f882a9a3c66b8
;;;",,,,,,,,,,,,,,,,,,,,,
GetThreadState spec mentions undefined JVMTI_THREAD_STATE_MONITOR_WAITING,JDK-8310585,5103818,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,amenkov,amenkov,2023-06-21 13:55,2023-07-12 13:35,2023-10-01 09:55,2023-06-27 13:36,,,,,,,22,hotspot,,0,noreg-doc,,,,,,,,,,,,,,,,,"Spec for GetThreadState function (examples section) says:


The state of a thread at a Object.wait(3000) would be:
                JVMTI_THREAD_STATE_ALIVE + JVMTI_THREAD_STATE_WAITING +
                    JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT +
                    JVMTI_THREAD_STATE_MONITOR_WAITING

JVMTI spec does not define JVMTI_THREAD_STATE_MONITOR_WAITING constant.
It should be JVMTI_THREAD_STATE_IN_OBJECT_WAIT

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i320hn:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-06-23 16:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14634
Date: 2023-06-23 22:59:54 +0000;;;","2023-06-27 13:36;dukebot;Changeset: a97f98fb
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2023-06-27 20:35:03 +0000
URL:       https://git.openjdk.org/jdk/commit/a97f98fb8a933b43cd4485c3791ac8ca016bc49f
;;;",,,,,,,,,,,,,,,,,,,,,
GetThreadState reports blocked and runnable for pinned suspended virtual threads,JDK-8310584,5103817,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,amenkov,amenkov,amenkov,2023-06-21 13:47,2023-07-24 17:17,2023-10-01 09:55,2023-07-18 13:17,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,"If virtual thread is blocked (BLOCKED_ON_MONITOR_ENTER, WAITING_INDEFINITELY, WAITING_WITH_TIMEOUT) and the virtual is pinned and suspended, GetThreadState reports RUNNABLE bit:
- ALIVE RUNNABLE BLOCKED_ON_MONITOR_ENTER SUSPENDED
- ALIVE RUNNABLE WAITING WAITING_INDEFINITELY IN_OBJECT_WAIT SUSPENDED
- ALIVE RUNNABLE WAITING WAITING_WITH_TIMEOUT IN_OBJECT_WAIT SUSPENDED
- ALIVE RUNNABLE WAITING WAITING_WITH_TIMEOUT PARKED SUSPENDED",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310066,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i320hf:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-06-21 13:48;amenkov;JDK-8310066 implements test for this issue;;;","2023-07-13 12:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14878
Date: 2023-07-13 19:18:38 +0000;;;","2023-07-18 13:17;dukebot;Changeset: af5bf817
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2023-07-18 20:16:41 +0000
URL:       https://git.openjdk.org/jdk/commit/af5bf81754072fa5879726cfacb7404892b553f0
;;;",,,,,,,,,,,,,,,,,,,,
no `@since` for StandardDoclet,JDK-8310575,5103808,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2023-06-21 11:28,2023-07-12 13:24,2023-10-01 09:55,2023-06-21 12:58,21,,,,,,22,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,"The `StandardDoclet` interface has no `@since` tag.

It should be `@since 9`",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i320ff:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-06-21 12:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14603
Date: 2023-06-21 19:00:19 +0000;;;","2023-06-21 12:58;dukebot;Changeset: f286e5a5
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-06-21 19:56:51 +0000
URL:       https://git.openjdk.org/jdk/commit/f286e5a5e151c241556f0f1b8d6648423186a097
;;;",,,,,,,,,,,,,,,,,,,,,
GenShen: Should not update-references for in-place-promotions,JDK-8310574,5103807,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wkemper,wkemper,wkemper,2023-06-21 11:11,2023-06-26 11:25,2023-10-01 09:55,2023-06-26 11:25,repo-shenandoah,,,,,,,hotspot,,0,gc,gc-shenandoah,genshen,,,,,,,,,,,,,,,"If the collection set is empty and there are regions which can be promoted in place, then the init-update-refs safepoint will not retire TLABs. As a consequence, the update references phase may walk into unallocated memory and crash.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i320f7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-22 16:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/291
Date: 2023-06-22 23:41:25 +0000;;;","2023-06-23 19:08;ysr;The following tests appear to be affected by this bug:

gc/shenandoah/mxbeans/TestChurnNotifications.java#generational 
gc/shenandoah/mxbeans/TestPauseNotifications.java#generational
gc/shenandoah/oom/TestThreadFailure.java;;;",,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Missing klass gap initialization in ContiguousSpace::allocate_temporary_filler,JDK-8310558,5103793,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2023-06-21 08:23,2023-06-21 11:37,2023-10-01 09:55,2023-06-21 11:37,repo-lilliput-17,,,,,,,hotspot,,0,,,,,,,,,,,,,,,,,,"This is Lilliput JDK 17 specific, later versions have JDK-8278568 refactoring.

We have missed the `set_klass_gap(0)` line in the patch here:

```
    } else {
      assert(size == CollectedHeap::min_fill_size(),
             ""size for smallest fake object doesn't match"");
      instanceOop obj = (instanceOop) cast_to_oop(allocate(size));
-     obj->set_mark(markWord::prototype());
-     obj->set_klass_gap(0);
-     obj->set_klass(vmClasses::Object_klass());
+     if (UseCompactObjectHeaders) {
+       obj->set_mark(vmClasses::Object_klass()->prototype_header());
+     } else {
+       obj->set_mark(markWord::prototype());
+       obj->set_klass(vmClasses::Object_klass());
+     }
    }
  }
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i320c3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-21 08:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/40
Date: 2023-06-21 15:39:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
vmTestbase/nsk/jdb/interrupt/interrupt001/interrupt001.java timed out due to missing prompt,JDK-8310551,5103786,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,dcubed,dcubed,2023-06-21 07:32,2023-08-11 14:29,2023-10-01 09:55,2023-07-14 11:41,21,22,,,,,22,core-svc,,0,hgupdate-sync,intermittent,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,problemlist,tier4,tier6,tier8,,,,,,,,,"The following test timed out in the JDK21 CI:

vmTestbase/nsk/jdb/interrupt/interrupt001/interrupt001.java

Here's a snippet from the log file:

#section:main
----------messages:(6/1956)----------
command: main nsk.jdb.interrupt.interrupt001.interrupt001 -arch=linux-x64 -waittime=5 -debugee.vmkind=java -transport.address=dynamic -jdb=/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+28-2370/linux-x64-debug.jdk/jdk-21/fastdebug/bin/jdb -java.options=""-XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S24786/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7017c33b-e64b-4be6-9c80-dd90f1817134/runs/94477d99-63d4-48b7-9576-5f84f27a68c5/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdb/tmp -Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation"" -workdir=. -debugee.vmkeys=""-XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S24786/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7017c33b-e64b-4be6-9c80-dd90f1817134/runs/94477d99-63d4-48b7-9576-5f84f27a68c5/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdb/tmp -Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation""
reason: User specified action: run main/othervm nsk.jdb.interrupt.interrupt001.interrupt001 -arch=${os.family}-${os.simpleArch} -waittime=5 -debugee.vmkind=java -transport.address=dynamic -jdb=${test.jdk}/bin/jdb -java.options=""${test.vm.opts} ${test.java.opts}"" -workdir=. -debugee.vmkeys=""${test.vm.opts} ${test.java.opts}"" 
started: Wed Jun 21 11:39:31 UTC 2023
Mode: othervm [/othervm specified]
finished: Wed Jun 21 11:50:55 UTC 2023
elapsed time (seconds): 683.638
----------configuration:(0/0)----------
----------System.out:(173/11140)----------
Launching process by array of args: 
    args[0]: >/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+28-2370/linux-x64-debug.jdk/jdk-21/fastdebug/bin/jdb<
    args[1]: >-J-XX:MaxRAMPercentage=4.16667<
    args[2]: >-J-Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20<
    args[3]: >-J-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S24786/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7017c33b-e64b-4be6-9c80-dd90f1817134/runs/94477d99-63d4-48b7-9576-5f84f27a68c5/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdb/tmp<
    args[4]: >-J-Xcomp<
    args[5]: >-J-XX:+CreateCoredumpOnCrash<
    args[6]: >-J-ea<
    args[7]: >-J-esa<
    args[8]: >-J-XX:CompileThreshold=100<
    args[9]: >-J-XX:+UnlockExperimentalVMOptions<
    args[10]: >-J-server<
    args[11]: >-J-XX:-TieredCompilation<
    args[12]: >-connect<
    args[13]: >com.sun.jdi.CommandLineLaunch:vmexec=java,options= ""-XX:MaxRAMPercentage=4.16667"" ""-Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20"" ""-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S24786/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7017c33b-e64b-4be6-9c80-dd90f1817134/runs/94477d99-63d4-48b7-9576-5f84f27a68c5/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdb/tmp"" ""-Xcomp"" ""-XX:+CreateCoredumpOnCrash"" ""-ea"" ""-esa"" ""-XX:CompileThreshold=100"" ""-XX:+UnlockExperimentalVMOptions"" ""-server"" ""-XX:-TieredCompilation"",main=nsk.jdb.interrupt.interrupt001.interrupt001a  -waittime 5<
#>  
#>  WARNING: switching log to verbose mode,
#>      because error is complained
#>  
launcher > Starting jdb launching local debuggee
Creating file for jdb stdout stream: ./jdb.stdout
Creating file for jdb session: ./jdb.session
Creating file for jdb stderr stream: ./jdb.stderr
Setting first breakpoint
Sending command: stop in nsk.jdb.interrupt.interrupt001.interrupt001a.main
reply[0]: Deferring breakpoint nsk.jdb.interrupt.interrupt001.interrupt001a.main.
reply[1]: It will be set after the class is loaded.
reply[2]: > 
Starting debuggee class
Sending command: run 
reply[0]: run nsk.jdb.interrupt.interrupt001.interrupt001a  -waittime 5
reply[1]: Set uncaught java.lang.Throwable
reply[2]: Set deferred uncaught java.lang.Throwable
reply[3]: > 
reply[4]: VM Started: Set deferred breakpoint nsk.jdb.interrupt.interrupt001.interrupt001a.main
reply[5]: 
reply[6]: Breakpoint hit: ""thread=main"", nsk.jdb.interrupt.interrupt001.interrupt001a.main(), line=69 bci=0
reply[7]: 69           interrupt001a _interrupt001a = new interrupt001a();
reply[8]: 
reply[9]: main[1] 
Test cases starts.
Sending command: stop in nsk.jdb.interrupt.interrupt001.interrupt001a.breakHere
reply[0]: Set breakpoint nsk.jdb.interrupt.interrupt001.interrupt001a.breakHere
reply[1]: main[1] 
Sending command: cont
reply[0]: > 
reply[1]: Breakpoint hit: ""thread=main"", nsk.jdb.interrupt.interrupt001.interrupt001a.breakHere(), line=73 bci=0
reply[2]: 73        static void breakHere () {}
reply[3]: 
reply[4]: main[1] 
Sending command: threads 
reply[0]: Group system:
reply[1]:   (java.lang.ref.Reference$ReferenceHandler)498              Reference Handler   running
reply[2]:   (java.lang.ref.Finalizer$FinalizerThread)499               Finalizer           cond. waiting
reply[3]:   (java.lang.Thread)500                                      Signal Dispatcher   running
reply[4]:   (java.lang.Thread)497                                      Notification Thread running
reply[5]: Group main:
reply[6]:   (java.lang.Thread)1                                        main                running (at breakpoint)
reply[7]:   (nsk.jdb.interrupt.interrupt001.interrupt001a$MyThread)728 Thread-0            cond. waiting
reply[8]:   (nsk.jdb.interrupt.interrupt001.interrupt001a$MyThread)729 Thread-1            cond. waiting
reply[9]:   (nsk.jdb.interrupt.interrupt001.interrupt001a$MyThread)730 Thread-2            cond. waiting
reply[10]:   (nsk.jdb.interrupt.interrupt001.interrupt001a$MyThread)731 Thread-3            cond. waiting
reply[11]:   (nsk.jdb.interrupt.interrupt001.interrupt001a$MyThread)732 Thread-4            cond. waiting
reply[12]: Group InnocuousThreadGroup:
reply[13]:   (jdk.internal.misc.InnocuousThread)526                     Common-Cleaner      cond. waiting
reply[14]:   (jdk.internal.misc.InnocuousThread)716                     Cleaner-0           cond. waiting
reply[15]: main[1] 
Sending command: threads 
reply[0]: Group system:
reply[1]:   (java.lang.ref.Reference$ReferenceHandler)498              Reference Handler   running
reply[2]:   (java.lang.ref.Finalizer$FinalizerThread)499               Finalizer           cond. waiting
reply[3]:   (java.lang.Thread)500                                      Signal Dispatcher   running
reply[4]:   (java.lang.Thread)497                                      Notification Thread running
reply[5]: Group main:
reply[6]:   (java.lang.Thread)1                                        main                running (at breakpoint)
reply[7]:   (nsk.jdb.interrupt.interrupt001.interrupt001a$MyThread)728 Thread-0            cond. waiting
reply[8]:   (nsk.jdb.interrupt.interrupt001.interrupt001a$MyThread)729 Thread-1            cond. waiting
reply[9]:   (nsk.jdb.interrupt.interrupt001.interrupt001a$MyThread)730 Thread-2            cond. waiting
reply[10]:   (nsk.jdb.interrupt.interrupt001.interrupt001a$MyThread)731 Thread-3            cond. waiting
reply[11]:   (nsk.jdb.interrupt.interrupt001.interrupt001a$MyThread)732 Thread-4            cond. waiting
reply[12]: Group InnocuousThreadGroup:
reply[13]:   (jdk.internal.misc.InnocuousThread)526                     Common-Cleaner      cond. waiting
reply[14]:   (jdk.internal.misc.InnocuousThread)716                     Cleaner-0           cond. waiting
reply[15]: main[1] 
Sending command: set nsk.jdb.interrupt.interrupt001.interrupt001a.allWorkersAreWaiting=true
reply[0]:  nsk.jdb.interrupt.interrupt001.interrupt001a.allWorkersAreWaiting=true = true
reply[1]: main[1] 
Sending command: interrupt 728
reply[0]: main[1] 
Sending command: interrupt 729
reply[0]: main[1] 
Sending command: interrupt 730
reply[0]: main[1] 
Sending command: interrupt 731
reply[0]: main[1] 
Sending command: interrupt 732
reply[0]: main[1] 
Sending command: threads 
reply[0]: Group system:
reply[1]:   (java.lang.ref.Reference$ReferenceHandler)498              Reference Handler   running
reply[2]:   (java.lang.ref.Finalizer$FinalizerThread)499               Finalizer           cond. waiting
reply[3]:   (java.lang.Thread)500                                      Signal Dispatcher   running
reply[4]:   (java.lang.Thread)497                                      Notification Thread running
reply[5]: Group main:
reply[6]:   (java.lang.Thread)1                                        main                running (at breakpoint)
reply[7]:   (nsk.jdb.interrupt.interrupt001.interrupt001a$MyThread)728 Thread-0            cond. waiting
reply[8]:   (nsk.jdb.interrupt.interrupt001.interrupt001a$MyThread)729 Thread-1            cond. waiting
reply[9]:   (nsk.jdb.interrupt.interrupt001.interrupt001a$MyThread)730 Thread-2            cond. waiting
reply[10]:   (nsk.jdb.interrupt.interrupt001.interrupt001a$MyThread)731 Thread-3            cond. waiting
reply[11]:   (nsk.jdb.interrupt.interrupt001.interrupt001a$MyThread)732 Thread-4            cond. waiting
reply[12]: Group InnocuousThreadGroup:
reply[13]:   (jdk.internal.misc.InnocuousThread)526                     Common-Cleaner      cond. waiting
reply[14]:   (jdk.internal.misc.InnocuousThread)716                     Cleaner-0           cond. waiting
reply[15]: main[1] 
Sending command: cont
receiveReply FAILED due to ""nsk.share.Failure: Prompt is not received during 300200 milliseconds."".
Pending reply output follows:
reply[0]: > 
reply[1]: Breakpoint hit: ""thread=main"", nsk.jdb.interrupt.interrupt001.interrupt001a.breakHere(), line=73 bci=0
reply[2]: 73        static void breakHere () {}
reply[3]: 
reply[4]: main[1] 
# ERROR: Caught unexpected exception while executing the test: nsk.share.Failure: Prompt is not received during 300200 milliseconds.
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Caught unexpected exception while executing the test: nsk.share.Failure: Prompt is not received during 300200 milliseconds.
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)
	at nsk.share.Log.complain(Log.java:402)
	at nsk.share.jdb.JdbTest.failure(JdbTest.java:74)
	at nsk.share.jdb.JdbTest.runTest(JdbTest.java:158)
	at nsk.jdb.interrupt.interrupt001.interrupt001.run(interrupt001.java:82)
	at nsk.jdb.interrupt.interrupt001.interrupt001.main(interrupt001.java:76)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
nsk.share.Failure: Prompt is not received during 300200 milliseconds.
	at nsk.share.jdb.Jdb.waitForPrompt(Jdb.java:503)
	at nsk.share.jdb.Jdb.receiveReply(Jdb.java:404)
	at nsk.share.jdb.Jdb.receiveReplyFor(Jdb.java:351)
	at nsk.share.jdb.Jdb.receiveReplyFor(Jdb.java:333)
	at nsk.jdb.interrupt.interrupt001.interrupt001.runCases(interrupt001.java:128)
	at nsk.share.jdb.JdbTest.runTest(JdbTest.java:149)
	at nsk.jdb.interrupt.interrupt001.interrupt001.run(interrupt001.java:82)
	at nsk.jdb.interrupt.interrupt001.interrupt001.main(interrupt001.java:76)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Waiting for jdb exits
# ERROR: jdb did not exit after timeout.
Sending quit command to jdb.
Sending command: quit
# ERROR: TEST FAILED
The following stacktrace is for failure analysis.
nsk.share.TestFailure: TEST FAILED
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)
	at nsk.share.Log.complain(Log.java:402)
	at nsk.share.jdb.JdbTest.runTest(JdbTest.java:225)
	at nsk.jdb.interrupt.interrupt001.interrupt001.run(interrupt001.java:82)
	at nsk.jdb.interrupt.interrupt001.interrupt001.main(interrupt001.java:76)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: Caught unexpected exception while executing the test: nsk.share.Failure: Prompt is not received during 300200 milliseconds.
# ERROR: jdb did not exit after timeout.
# ERROR: TEST FAILED
----------System.err:(0/0)----------
----------rerun:(43/10266)*----------",,,,,,,,,,,JDK-8314178,JDK-8312413,JDK-8313255,JDK-8312956,JDK-8312962,JDK-8313477,JDK-8312614,,,,,,,,,,,,,,,,,,,,,JDK-8308232,,,,,,,,,,,aarch64,x86_64,,,,,,,,,linux,,,,,"0|i320aj:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-06-21 10:18;cjplummer;No changes to this test in the past few years. I don't there have been any jdb or JDI changes in the past few weeks.;;;","2023-06-21 10:47;cjplummer;The test executes the following 3 commands:

        reply = jdb.receiveReplyFor(JdbCommand.threads);
        reply = jdb.receiveReplyFor(JdbCommand.cont, true);

        reply = jdb.receiveReplyFor(JdbCommand.eval + DEBUGGEE_RESULT);

You can see from the output that it has executed the first two, but not the 3rd, so it is still waiting for the reply from the ""cont"" command. From the output it appears that the reply was received, so I'm not sure why it is still waiting:

Sending command: cont
receiveReply FAILED due to ""nsk.share.Failure: Prompt is not received during 300200 milliseconds."".
Pending reply output follows:
reply[0]: > 
reply[1]: Breakpoint hit: ""thread=main"", nsk.jdb.interrupt.interrupt001.interrupt001a.breakHere(), line=73 bci=0
reply[2]: 73        static void breakHere () {}
reply[3]: 
reply[4]: main[1] 

This is exactly the output we expect for the ""cont"" command, and receiveReplyFor() should be seeing the ""main[1]"" prompt in the output and returning. I'm not sure why it's not.

Nothing has changed in this area recently. I'll keep an eye out for more failures. If we see them, I'll instrument receiveReplyFor() to provide some additional details that may give a clue as to why it is not seeing the ""main[1]"" prompt.;;;","2023-07-10 12:29;cjplummer;I spent a lot of time debugging this. Without going into all the details of everything I tried, I'll just point out that it appeared that the expected prompt output was somehow being blocked from appearing while executing in the waitForPrompt() loop, only to then appear once the loop was exited. I couldn't figure out why, so I eventually decided to track down which build this first started happening in. I had to go back 3 weeks before the first sighting of this bug before I found builds that did not reproduce it. I'm not sure why it didn't reproduce during this 3 period given how frequently it reproduced after that point, but the builds during this period definitely all reproduce it if you run a couple hundred time.

The root cause is JDK-8308232. It added code to make the test launch jdb in a way that would pass a couple of extra arguments to the debugeee:

                cmdline += "" -waittime "" + argumentHandler.getWaitTime();
                if (argumentHandler.verbose()) {
                    cmdline += "" -verbose"";
                }

Since the test was not run with -verbose, it had to be the addition of -waittime that caused the issue. Seemed kind of odd, but once I tracked down why it made sense.

The default waittime is 2 minutes:

    public int getWaitTime() {
        String val = options.getProperty(""waittime"", ""2"");

Pretty much all tests are run with a specified waittime of 5 minutes, which you'll find in the @run arguments the test

 *      -waittime=5

This previously only affected the test, not the debuggee, but with JDK-8308232, both test and debuggee now have the same waittime.

On the test side waitForPrompt() uses waittime to decide how long it should wait for a the prompt to appear:

        long delta = 200; // time in milliseconds to wait at every iteration.
        long total = 0;    // total time has waited.
        long max = getLauncher().getJdbArgumentHandler().getWaitTime() * 60 * 1000;  // maximum time to wait.
        while ((total += delta) <= max) {
            ...
            found = findPrompt(stdoutBuffer, true, startPos);
            ...
        }

On the debuggee side for this test we have:

        long waitTime = argumentHandler.getWaitTime() * 60 * 1000;
        long startTime = System.currentTimeMillis();
        while (notInterrupted.get() > 0 && System.currentTimeMillis() - startTime <= waitTime) {
            synchronized (waitnotify) {
                try {
                    waitnotify.wait(waitTime);
                } catch (InterruptedException e) {
                    log.display(""Main thread was interrupted while waiting"");
                }
            }
        }
        ...
        breakHere(); // a break to check if MyThreads were interrupted

This loop is also using waittime before it times out, which is ok. It is suppose to loop until all test threads have been interrupted (the main thread is not expected to be interrupted), and this should happen right away. However, notice it also uses waittime in waitnotify.wait(waitTime). This wait() call is expected to be short because if we've entered the loop, then that means not all threads have been interrupted yet, and we should get a notify when the the next thread is interrupted. However, it's possible that by the time we get to the wait() call, all threads have already been interrupted, and there will be no notify. This means the wait() call ends up essentially sleeping for the loop's entire waittime before timing out. Other than wasting time, this isn't necessarily an issue. Given that the waittime used to be 2 minutes and the test was willing to wait 5 minutes for the prompt, it all still worked. However...

The waittime for the debuggee used is 5 minutes, same as the waittime the test uses to control the waitForPrompt loop. This means if we ever enter the loop, we are going to wait for 5 minutes. If all threads are already interrupted before the wait(), it means the debuggee will wait 5 minutes before proceeding to the breakpoint line, which generates the prompt that waitForPrompt is looking for. So there is a race here. The debuggee is going to produce the prompt after 5 minutes and the waitForPrompt loop is going to wait up to 5 minutes for it to appear. Normally it appears in time because normally the threads have all been interrupted before entering the loop, so we never get to the wait() call, but sometimes this is not the case, and the wait() call is resulting in the prompt not appearing in time (just barely not in time).

So this explains why it always appeared that the expected output was being blocked while in the waitForPrompt() loop, but was unblocked (and ready) once the loop exited. There was nothing about the waitForPrompt() loop that was preventing the output. The prevention was in the 5 minute delay being done by the debuggee.

This appears to be a test bug. I think the debuggee should be waiting for some small increment, like 200ms, and not base the amount of time it waits on waittime.
;;;","2023-07-10 15:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14817
Date: 2023-07-10 20:17:21 +0000;;;","2023-07-14 11:41;dukebot;Changeset: c84866ac
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-07-14 18:39:34 +0000
URL:       https://git.openjdk.org/jdk/commit/c84866ac0dcda487fe2abc2a8841f237df0a395b
;;;","2023-07-17 11:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/133
Date: 2023-07-17 18:29:08 +0000;;;","2023-08-09 08:41;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.9-oracle. Applies cleanly except removal from ProblemList. (Not problem listed in 17u). Test has passed.;;;","2023-08-09 08:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1654
Date: 2023-08-09 15:40:26 +0000;;;",,,,,,,,,,,,,,,
Adjust references to rt.jar,JDK-8310550,5103785,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-06-21 06:53,2023-07-12 13:54,2023-10-01 09:55,2023-07-06 23:59,17,21,22,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,There are a few references to rt.jar in comments and in the codebase itself.  Some of them might be removed or adjusted.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i320ab:",9223372036854775807,b06,,,,,,,,,,,"2023-06-21 08:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14593
Date: 2023-06-21 15:18:19 +0000;;;","2023-07-06 23:59;dukebot;Changeset: 25cbe85d
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-07-07 06:57:23 +0000
URL:       https://git.openjdk.org/jdk/commit/25cbe85d6f46bed82c7f1266ce52c86943e29d60
;;;",,,,,,,,,,,,,,,,,,,,,
avoid potential leaks in KeystoreImpl.m related to JNU_CHECK_EXCEPTION early returns,JDK-8310549,5103784,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2023-06-21 06:50,2023-07-12 13:25,2023-10-01 09:55,2023-06-22 00:10,21,22,,,,,22,security-libs,,0,amazon-interest,hgupdate-sync,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,In src/java.base/macosx/native/libosxsecurity/KeystoreImpl.m there are a few JNU_CHECK_EXCEPTION macro usages that could potentially cause leaks.,,,,,,,,,,,JDK-8311378,JDK-8311777,JDK-8311272,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,,"0|i320a3:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-06-21 07:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14590
Date: 2023-06-21 14:10:20 +0000;;;","2023-06-22 00:10;dukebot;Changeset: 7da3f199
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-06-22 07:08:54 +0000
URL:       https://git.openjdk.org/jdk/commit/7da3f1999fc5d1b9162443d97dfae7fe7b04dfc5
;;;","2023-06-30 05:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/86
Date: 2023-06-30 12:28:43 +0000;;;","2023-07-05 00:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1543
Date: 2023-07-05 07:51:42 +0000;;;","2023-07-05 01:07;mbaesken;jdk17 backport request
I would like to have the patch in jdk17u-dev as well, because the issue is present there too.  The patch is clean and low risk.;;;",,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Shenandoah/JVMTI heap-walk crashes,JDK-8310534,5103766,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-06-21 04:02,2023-06-21 09:03,2023-10-01 09:55,2023-06-21 09:03,repo-lilliput-17,,,,,,,hotspot,,0,amazon-interest,lilliput,,,,,,,,,,,,,,,,"I observe a crash in JVMTI heap-walk code when running Shenandoah even with -UCOH:

make run-test TEST=serviceability/jvmti/Heap/IterateHeapWithEscapeAnalysisEnabled.java TEST_VM_OPTS=""-XX:+UseShenandoahGC""

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/rkennke/src/openjdk/lilliput-jdk17u/src/hotspot/share/gc/shenandoah/shenandoahNMethod.cpp:180), pid=19088, tid=19095
#  Error: Shenandoah assert_correct failed; Forwardee must point to a heap address

Referenced from:
  interior location: 0x00007f7828c280fb
  outside of Java heap
  0x00007f7828c280fb is at entry_point+155 in (nmethod*)0x00007f7828c27e90

Object:
  0x00000000f00015b0 - klass 0x00000008000018c8 java.lang.Class
    not allocated after mark start
    not after update watermark
        marked strong
    not marked weak
    not in collection set
  mark: marked(0x000000251a69d703)
  region: |    0|R  |BTE     f0000000,     f0040000,     f0040000|TAMS     f0040000|UWM     f0040000|U   256K|T   256K|G     0B|S     0B|L   238K|CP   0

Forwardee:
  0x000000251a69d700 - safe print, no details

See attached hs_err for more details.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-06-21 04:04;rkennke;hs_err_pid19088.log;https://bugs.openjdk.org/secure/attachment/104383/hs_err_pid19088.log",,,,,,,generic,,,,,,,,,,generic,,,,,"0|i32063:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-06-21 06:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/37
Date: 2023-06-21 12:24:20 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Cleanup indentation in jfc files,JDK-8310512,5103741,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2023-06-21 00:43,2023-07-12 13:24,2023-10-01 09:55,2023-06-21 13:07,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,There are some indentation flaws in JFR's jfc files.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3200j:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-06-21 00:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14579
Date: 2023-06-21 07:46:26 +0000;;;","2023-06-21 13:07;dukebot;Changeset: 3be50da6
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-06-21 20:04:03 +0000
URL:       https://git.openjdk.org/jdk/commit/3be50da636b986b267d15c4caa0147c100b96111
;;;",,,,,,,,,,,,,,,,,,,,,
New test runtime/ClassInitErrors/TestStackOverflowDuringInit.java failed,JDK-8310489,5103717,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dholmes,dholmes,dholmes,2023-06-20 15:46,2023-07-12 13:32,2023-10-01 09:55,2023-06-26 17:16,22,,,,,,22,hotspot,,0,intermittent,tier1,,,,,,,,,,,,,,,,Despite all the pre-integration testing on x64 this test failed in its first run in the actual tier 1 CI. The SOE is triggered in the wrong place.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309034,,,,,,,,,,,,,,,,,,,,,,,22,,,,,,,"0|i31zv7:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-21 12:31;coleenp;SOE is one of those exceptions that we probably can't use to reliably test anything.;;;","2023-06-21 19:23;dholmes;So the way this test works is that it has the form:

void recurse() {
  try {
    recurse();
  } finally {
   x();
  }
}
so the call to recurse() eventually throws SOE and we try to invoke x() which fails, in a predictable way, by also throwing SOE. When this test fails we see the original SOE being thrown, indicating that x() succeeded. So somehow the initial SOE is not thrown directly by the attempt to invoke recurse(), but by something incidental that requires a more significant amount of stack, such that when the SOE is thrown and we start the finally block, we've already freed up enough stack for the call to x() to complete successfully.

I can make the test more robust by allowing for x() to succeed in these rare instances, but it would hide if we actually stopped testing what the test is trying to test - the correct capture of the SOE as the cause of a class initialization failure.

If I could get the failure to reproduce I would be able to investigate what code actually causes the initial ""unexpected"" SOE.;;;","2023-06-25 18:44;dholmes;My previous analysis was inaccurate. Here is the code:

class a {
    Boolean b;
    {
        try {
            Long.valueOf(509505376256L);
            Boolean c =
                true ? new d().b
                : 5 != ((e)java.util.HashSet.newHashSet(301758).clone()).f;
        } finally {
            Long.valueOf(0);
        }
    }
}

Bear in mind that class 'd` extends class `a`.

When the test passes the initial SOE happens here:

Long.valueOf(509505376256L)
 -> Long.<init>(val)
    -> Number.<init>()   <- SOE here

we then hit the finally block:

Long.valueOf(0);
  LongCache.<clinit>  <- second SOE here

and so LongCache is marked as erroneous and we get the class initialization error we expect later on.

In the failing case the initial SOE hits when we invoke d.<init>() and we then hit the finally block, but this time Long.valueof throws the SOE immediately and we don't reach the <clinit> of LongCache.

However, this is strange because we throw SOE when invoking d.<init>(), yet immediately before that we successfully called Long.valueOf(509505376256L). Now you could explain that if Long.valueOf got inlined, but in that case why would d.<init> not also get inlined?;;;","2023-06-25 23:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14648
Date: 2023-06-26 06:38:52 +0000;;;","2023-06-25 23:47;dholmes;I've extracted the essence of the test into a version that is easier to understand and documented the expect behaviour. I change to interpreter mode to remove any chance of JIT oddities.;;;","2023-06-26 08:35;dcubed;[~dholmes] - We usually add the 'problemlist' label after the ProblemListing
changeset is integrated.;;;","2023-06-26 14:50;dholmes;[~dcubed] Fixed the label. I'm not adding to PL now anyway.;;;","2023-06-26 17:16;dukebot;Changeset: 39fa4e63
Author:    David Holmes <dholmes@openjdk.org>
Date:      2023-06-27 00:13:42 +0000
URL:       https://git.openjdk.org/jdk/commit/39fa4e6371dffbe8e09f7dbeeed27194bf99b53e
;;;",,,,,,,,,,,,,,,
Fix build failure caused by JDK-8310049,JDK-8310458,5103680,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-06-20 10:49,2023-07-12 13:20,2023-10-01 09:55,2023-06-20 11:17,,,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,"JDK-8310049 introduced a bad copyright header in NullCharsetName.java. There is a missing ',' after 2023.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31zmz:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3962510e,,,,,,,,,"2023-06-20 11:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14568
Date: 2023-06-20 17:58:39 +0000;;;","2023-06-20 11:17;dukebot;Changeset: 11201067
Author:    Justin Lu <jlu@openjdk.org>
Date:      2023-06-20 18:16:33 +0000
URL:       https://git.openjdk.org/jdk/commit/11201067a8d429fcb03f90830abec1842efae5fd
;;;",,,,,,,,,,,,,,,,,,,,,
[JVMCI] compiler/runtime/TestConstantDynamic: lookupConstant returned an object of incorrect type: null,JDK-8310425,5103645,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,davleopo,davleopo,davleopo,2023-06-20 08:07,2023-07-25 04:28,2023-10-01 09:55,2023-06-27 01:31,21,22,,,,,22,hotspot,,0,hgupdate-sync,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-22,,,,,,,,,,,,,"jvmciCompilerToVM does not properly handle dynamic constants that are null. 

C2V_VMENTRY_NULL(jobject, resolvePossiblyCachedConstantInPool, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint index))
  constantPoolHandle cp(THREAD, UNPACK_PAIR(ConstantPool, cp));
  oop obj = cp->resolve_possibly_cached_constant_at(index, CHECK_NULL);
  constantTag tag = cp->tag_at(index);
  if (tag.is_dynamic_constant() || tag.is_dynamic_constant_in_error()) {
    if (obj == Universe::the_null_sentinel()) {
      return JVMCIENV->get_jobject(JVMCIENV->get_JavaConstant_NULL_POINTER());
    }

checks for the null sentinel however resolve_possibly_cached_constant_at will return nullptr for null dynamic constants. 

This lets the TestConstantDynamic test fail with jvmci and graal. 

Also, we dont have to check for the dynamic constant error because in that case  cp->resolve_possibly_cached_constant_at already throws.",,,,,,,,,,,JDK-8312889,JDK-8311582,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31zf7:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-20 23:30;chagedorn;ILW = Wrong handling of dynamic constants that are null, only with graal and jvmci, no workaround = MLH = P4;;;","2023-06-22 00:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14582
Date: 2023-06-21 10:26:19 +0000;;;","2023-06-27 01:31;dukebot;Changeset: 15878360
Author:    David Leopoldseder <davleopo@openjdk.org>
Committer: Doug Simon <dnsimon@openjdk.org>
Date:      2023-06-27 08:29:55 +0000
URL:       https://git.openjdk.org/jdk/commit/15878360bf22c88a6e4038f05efa6db08d72b309
;;;","2023-07-06 04:26;thartmann;Updated ILW = MMH = P3;;;","2023-07-06 04:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/101
Date: 2023-07-06 11:28:49 +0000;;;",,,,,,,,,,,,,,,,,,
Shenandoah: Auxiliary bitmap is not madvised for THP,JDK-8310388,5103609,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2023-06-20 07:04,2023-08-15 02:10,2023-10-01 09:55,2023-08-04 11:42,17,21,22,,,,22,hotspot,,0,amazon-interest,gc-shenandoah,large-pages,,,,,,,,,,,,,,,"Found during JDK-8310110 when the Tracing test would mysteriously fail for the THP case with Shenandoah.

When committing the AUX bitmap (which we do only when needed), we don't hand in the THP page size to os::commit. So Aux bitmap uses system page size.

I'm not sure if this is deliberate or not. It may be deliberate since the AUX bitmap is short-lived, so coalescing the pages may be not what we want. In that case, we should reserve the aux bitmap with system page size. If this is not deliberate, we should call os::commit() with the alignment parameter set to page size to cause it to madvise correctly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310110,JDK-8310111,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31z77:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-20 07:07;stuefe;When fixed (one way or the other), enable Shenandoah THP trace test in runtime/os/TestTracePageSizes.java;;;","2023-06-20 07:31;shade;Seems to be an omission in JDK-8220153, and I don't believe the omission was deliberate.

Aux bitmap is used for JVMTI/JFR/HeapDump heap iteration, which is somewhat important performance-wise for production uses. (See for example JDK-8307348). But aux bitmap is also uncommitted after use, which means if we opt-in to THP, then we would have to rely on THP not trashing and giving us the defragged memory the next time around, and that we do not induce additional page splits after the iteration is done and some other process needs smaller pages. For regular heap uncommits this ""noisy neighborship"" can be mitigated by setting -Xmx == -Xms, which would disable uncommits. But aux bitmap would be uncommited always.

So, I am leaning towards keeping aux bitmap non-THP-ed. We could/should document this in comments, though.;;;","2023-07-15 08:42;stuefe;[~shade] Does the same logic not apply to the primary bitmap? The one we commit/uncommit slice-wise? Should we also avoid using THPs for that one?;;;","2023-07-17 03:50;shade;I don't think the same argument applies to the primary bitmap. If users allow to uncommit parts of the heap by setting Xmx != Xms or not disabling -ShenandoahUncommit, *and* they commit/uncommit often, they get exposed to whatever dynamic oddities in OS memory management behavior, including THP hiccups. For aux bitmap it matters much more, because users have no control at all about aux bitmap uncommits. Even it users do _everything right_, they would still be exposed to THP hiccups if we allow auxbitmap to be THP madvised. ;;;","2023-07-20 08:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14953
Date: 2023-07-20 11:19:53 +0000;;;","2023-08-04 11:42;dukebot;Changeset: 017e0c78
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-08-04 18:40:16 +0000
URL:       https://git.openjdk.org/jdk/commit/017e0c7850e305877e3e0b1d4644b5605225e07c
;;;",,,,,,,,,,,,,,,,,
Handle problems in core-related tests on macOS when codesign tool does not work,JDK-8310380,5103600,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-06-20 06:13,2023-07-12 13:36,2023-10-01 09:55,2023-06-27 23:52,21,22,,,,,22,hotspot,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"Currently,  a number of tests fail on macOS because they miss the core file (e.g. serviceability/sa/TestJmapCore.java).
The reason is that configure detects on some setups that codesign does not work (""checking if debug mode codesign is possible... no) .
So adding the needed entitlement  to generate cores is not done in the build. This is currently not checked later in the tests.
But without the entitlement,  a core is not generated.",,,,,,,,,,,JDK-8311375,JDK-8311228,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,,"0|i31z57:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2023-06-20 06:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14562
Date: 2023-06-20 13:23:16 +0000;;;","2023-06-27 23:52;dukebot;Changeset: 39c104df
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-06-28 06:51:05 +0000
URL:       https://git.openjdk.org/jdk/commit/39c104df44f17c1d65e35becd4272f73e2c6610c
;;;","2023-06-30 05:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/87
Date: 2023-06-30 12:35:27 +0000;;;",,,,,,,,,,,,,,,,,,,,
Relax prerequisites for java.base-jmod target,JDK-8310379,5103599,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,erikj,erikj,erikj,2023-06-20 06:13,2023-08-02 23:22,2023-10-01 09:55,2023-06-21 10:21,,,,,,,22,infrastructure,,0,,,,,,,,,,,,,,,,,,"The top level target ""java.base-jmod"" currently has all other jmod targets on the prerequisites list. This is because we store a checksum for every non upgradeable module in java.base and most of the modules aren't upgradeable.  But, since we do have upgradeable modules, those shouldn't be on the prerequisites list for java.base-jmod. 

Fixing this won't impact the build much, but certainly won't hurt either. ",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313661,,,,,,,JDK-8313274,,,,JDK-8310055,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31z4z:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,Fix failed,,"2023-06-20 06:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14561
Date: 2023-06-20 13:16:59 +0000;;;","2023-06-21 10:21;dukebot;Changeset: 72501cf7
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-06-21 17:18:15 +0000
URL:       https://git.openjdk.org/jdk/commit/72501cf76703352800eb8979a53d59a83791d626
;;;",,,,,,,,,,,,,,,,,,,,,
UTIL_ARG_WITH fails when arg is disabled,JDK-8310369,5103589,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,erikj,erikj,erikj,2023-06-20 05:13,2023-07-12 13:21,2023-10-01 09:55,2023-06-21 02:58,,,,,,,22,infrastructure,,0,,,,,,,,,,,,,,,,,,"I've recently tried to use UTIL_ARG_WITH for new configure arguments in a project repository and discovered some issues. The project in question may or may not end up in mainline at some point in the future, but I think fixing these general issues in UTIL_ARG_WITH is worth it independent of my specific use case.

For TYPE ""directory"" the check if the value is a valid directory is supposed to optionally check for files in the CHECK_FOR_FILES list. The default value of this list is "":"" (due to autoconf peculiarities) but the check is performed if the value is non empty. This means that if you call UTIL_ARG_WITH with TYPE ""directory"" and no CHECK_FOR_FILES, it will always fail because there is no file "":"" in the given directory.

When an optional arg is defined, the validation check is still being performed when the arg has been disabled (--without-arg). This makes it impossible to disable something of for example TYPE ""directory"" as the directory check will fail. The current configure script in OpenJDK only has macro calls of type ""string"" and ""literal"" where this doesn't cause problems, because an empty string as value passes validation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31z2r:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-06-20 05:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14558
Date: 2023-06-20 12:34:08 +0000;;;","2023-06-21 02:58;dukebot;Changeset: 7ea22cd3
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-06-21 09:57:26 +0000
URL:       https://git.openjdk.org/jdk/commit/7ea22cd38510e54107889dbec01d47a10aa6f52d
;;;",,,,,,,,,,,,,,,,,,,,,
[XWayland][Screencast] screen capture error message in debug ,JDK-8310334,5103550,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,azvegint,azvegint,2023-06-19 11:11,2023-08-24 00:22,2023-10-01 09:55,2023-08-18 03:45,21,22,,,,,22,client-libs,,0,sn_150,wayland,wayland_screencast,wayland_x11_compatibility,,,,,,,,,,,,,,"after JDK-8309756 I see

onStreamStateChanged:309 screenId#39[loc(0,0) size(2560x1440)] state 2 (paused) -> 0 (unconnected) err (null)
onCoreError:490 !!! pipewire error: id 0, seq: 88, res: -9 (Unknown error -9): connection error
doCleanup:115 STOPPING loop

following fixes the issue.

diff --git a/src/java.desktop/unix/native/libawt_xawt/awt/screencast_pipewire.c b/src/java.desktop/unix/native/libawt_xawt/awt/screencast_pipewire.c
index a5443784e00..cdbe08e55bd 100644
--- a/src/java.desktop/unix/native/libawt_xawt/awt/screencast_pipewire.c
+++ b/src/java.desktop/unix/native/libawt_xawt/awt/screencast_pipewire.c
@@ -896,8 +896,8 @@ JNIEXPORT jint JNICALL Java_sun_awt_screencast_ScreencastHelper_getRGBPixelsImpl
 
             fp_pw_thread_loop_lock(pw.loop);
             fp_pw_stream_set_active(screenProps->data->stream, FALSE);
-            fp_pw_stream_disconnect(screenProps->data->stream);
             fp_pw_thread_loop_unlock(pw.loop);
+            fp_pw_stream_disconnect(screenProps->data->stream);
         }
     }
     doCleanup();",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31yu3:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-08-15 11:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15250
Date: 2023-08-11 17:19:40 +0000;;;","2023-08-18 03:45;dukebot;Changeset: 2f04bc5f
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-08-18 10:44:20 +0000
URL:       https://git.openjdk.org/jdk/commit/2f04bc5f934887029d8bcc13cf722d8498a35120
;;;",,,,,,,,,,,,,,,,,,,,,
HttpClient: debugging interestOps/readyOps could cause exceptions and smaller cleanup,JDK-8310330,5103546,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-06-19 09:22,2023-07-12 13:20,2023-10-01 09:55,2023-06-20 08:55,,,,,,,22,core-libs,,0,httpclient,noreg-cleanup,,,,,,,,,,,,,,,,"java.net.http has debug statement that prints interestOps/readyOps, but obtaining those from SelectionKey could raise exceptions.
Also ALPN constants should probably be extracted to their own class.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31yt7:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-06-19 10:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14546
Date: 2023-06-19 16:34:10 +0000;;;","2023-06-20 08:55;dukebot;Changeset: 99d2a9af
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-06-20 15:51:43 +0000
URL:       https://git.openjdk.org/jdk/commit/99d2a9afa95a1f1aa090316e702d8f508e094729
;;;",,,,,,,,,,,,,,,,,,,,,
Incorrect position of the synthetic unnamed class,JDK-8310326,5103542,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,jlahoda,jlahoda,2023-06-19 08:56,2023-07-12 13:19,2023-10-01 09:55,2023-06-20 03:36,21,,,,,,22,tools,,0,,,,,,,,,,,,,,,,,,"Consider code like:
---
void main() {
}
---

There will be a synthetic unnamed class created, wrapping the top-level methods and fields. But, the start position of the synthetic unnamed class is (in the case above) ""5"", not ""0"", as it could be expected.

Also, the synthetic class has (synthetic) modifiers tree, which also has position ""5"", although ""-1"" (NOPOS) would be more adequate for synthetic modifiers.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ysb:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-19 12:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14548
Date: 2023-06-19 19:01:28 +0000;;;","2023-06-20 03:36;dukebot;Changeset: 4ca548fe
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-06-20 10:34:52 +0000
URL:       https://git.openjdk.org/jdk/commit/4ca548fe74419dc9e110489e3d2d3adf695ef37f
;;;",,,,,,,,,,,,,,,,,,,,,
Failing HotSpot Compiler directives are too verbose,JDK-8310316,5103530,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,enothum,thartmann,thartmann,2023-06-19 06:31,2023-07-27 10:51,2023-10-01 09:55,2023-07-24 02:20,11,17,21,,,,22,hotspot,,0,compilercontrol,diagnostics,oracle-triage-22,starter,,,,,,,,,,,,,,"The jcmd/Diagnostic Command for adding compiler directives from a named file, dumps the entire file it is given when it sees an error.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304957,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ypn:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-07-21 05:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14957
Date: 2023-07-20 15:04:28 +0000;;;","2023-07-24 02:20;dukebot;Changeset: 04f39e1f
Author:    Eric Nothum <eric.nothum@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-07-24 09:17:09 +0000
URL:       https://git.openjdk.org/jdk/commit/04f39e1f1e0e6c8adf75f59792f4f5b2496f7a31
;;;",,,,,,,,,,,,,,,,,,,,,
"Misplaced ""unnamed classes are a preview feature and are disabled by default"" error",JDK-8310314,5103527,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2023-06-19 06:16,2023-07-12 13:18,2023-10-01 09:55,2023-06-20 05:30,21,,,,,,22,tools,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"The error about disabled unnamed classes is put on a weird place - at the end of the file. Consider:
---
$ cat Test.java
void main() {
    System.err.println(""Hello!"");
}

$ java Test.java
Test.java:4: error: unnamed classes are a preview feature and are disabled by default.

  (use --enable-preview to enable unnamed classes)
1 error
error: compilation failed
---

Would be better if the error was placed at the first non-class member of the unnamed class.
",,,,,,,,,,,JDK-8310348,JDK-8310440,JDK-8310361,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31yoz:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-19 08:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14544
Date: 2023-06-19 15:51:13 +0000;;;","2023-06-20 02:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/36
Date: 2023-06-20 09:29:23 +0000;;;","2023-06-20 05:30;jlahoda;Fixed as JDK-8310348.;;;",,,,,,,,,,,,,,,,,,,,
C2: 8275201 broke constant folding of array store check in some cases,JDK-8310299,5103504,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,roland,roland,2023-06-19 01:41,2023-07-12 13:40,2023-10-01 09:55,2023-06-29 00:43,19,20,21,22,,,22,hotspot,,0,amazon-interest,c2,hgupdate-sync,oracle-triage-11,oracle-triage-17,oracle-triage-22,performance,,,,,,,,,,,"Following test case fails:

public class TestArrayElementTypeLoad {
    public static void main(String[] args) {
        TestFramework.run();
    }

    static final A[] array = new A[1];

    @Test
    @IR(phase = { CompilePhase.ITER_GVN1 }, failOn = { IRNode.SUBTYPE_CHECK })
    public static void test1(A a) {
        array[0] = a;
    }

    @Run(test = ""test1"")
    private void test1Runner() {
        test1(new A());
        test1(new B());
    }

    static class A {
    }

    static class B extends A {
    }
}",,,,,,,,,,,JDK-8311363,JDK-8311091,,,,,,,,,,,,,,,,,,,JDK-8289161,,,JDK-8275201,JDK-8289161,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31yjv:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-19 02:04;chagedorn;ILW = Array store check is not folded in some cases, medium?, no workaround = MMH = P3;;;","2023-06-19 02:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14536
Date: 2023-06-19 08:56:26 +0000;;;","2023-06-19 03:48;thartmann;Could this explain JDK-8289161?;;;","2023-06-19 04:32;roland;[~thartmann] Not impossible I suppose. running performance testing with the patch would give an indication.;;;","2023-06-19 05:26;thartmann;Right, I added a comment to JDK-8289161.;;;","2023-06-19 05:32;roland;Thanks.;;;","2023-06-29 00:43;dukebot;Changeset: be64d3ac
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-06-29 07:41:04 +0000
URL:       https://git.openjdk.org/jdk/commit/be64d3ac3cf9da2658038d64233f080da8011dc8
;;;","2023-06-29 04:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/81
Date: 2023-06-29 11:32:13 +0000;;;",,,,,,,,,,,,,,,
assert(static_cast<T1>(result) == thing) with ctw,JDK-8310297,5103502,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,roland,roland,2023-06-19 01:04,2023-07-12 13:22,2023-10-01 09:55,2023-06-21 04:46,22,,,,,,22,hotspot,,0,ctw,,,,,,,,,,,,,,,,,"Running ctw with https://repo1.maven.org/maven2/net/codebuilders/unoil/4.1.6/unoil-4.1.6.jar I get:

#  Internal Error (/home/roland/jdk-jdk/src/hotspot/share/utilities/globalDefinitions.hpp:522), pid=3554522, tid=3554523
#  assert(static_cast<T1>(result) == thing) failed: must be

  [libjvm.so+0xdb4569]  signed char checked_cast<signed char, int>(int)+0x40  (globalDefinitions.hpp:522)
V  [libjvm.so+0xd9ffe8]  initialize_static_primitive_field(fieldDescriptor*, Handle)+0xde  (javaClasses.cpp:820)
V  [libjvm.so+0xda02b2]  initialize_static_field(fieldDescriptor*, Handle, JavaThread*)+0xc9  (javaClasses.cpp:854)
V  [libjvm.so+0xd5d97d]  InstanceKlass::do_local_static_fields(void (*)(fieldDescriptor*, Handle, JavaThread*), Handle, JavaThread*)+0xa9  (instanceKlass.cpp:1717)
V  [libjvm.so+0xda0721]  java_lang_Class::initialize_mirror_fields(Klass*, Handle, Handle, Handle, JavaThread*)+0x6f  (javaClasses.cpp:918)
V  [libjvm.so+0xda0f41]  java_lang_Class::allocate_mirror(Klass*, bool, Handle, Handle, Handle&, Handle&, JavaThread*)+0x473  (javaClasses.cpp:1017)
V  [libjvm.so+0xda10da]  java_lang_Class::create_mirror(Klass*, Handle, Handle, Handle, Handle, JavaThread*)+0x168  (javaClasses.cpp:1047)
V  [libjvm.so+0x8c25c4]  ClassFileParser::fill_instance_klass(InstanceKlass*, bool, ClassInstanceInfo const&, JavaThread*)+0xf9c  (classFileParser.cpp:5344)
V  [libjvm.so+0x8c15a4]  ClassFileParser::create_instance_klass(bool, ClassInstanceInfo const&, JavaThread*)+0xac  (classFileParser.cpp:5168)
V  [libjvm.so+0x107da41]  KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, ClassLoadInfo const&, JavaThread*)+0x283  (klassFactory.cpp:204)
V  [libjvm.so+0x1580790]  SystemDictionary::resolve_class_from_stream(ClassFileStream*, Symbol*, Handle, ClassLoadInfo const&, JavaThread*)+0x144  (systemDictionary.cpp:888)
V  [libjvm.so+0x1580a4a]  SystemDictionary::resolve_from_stream(ClassFileStream*, Symbol*, Handle, ClassLoadInfo const&, JavaThread*)+0x6c  (systemDictionary.cpp:926)
V  [libjvm.so+0xec52b7]  jvm_define_class_common(char const*, _jobject*, signed char const*, int, _jobject*, char const*, JavaThread*)+0x241  (jvm.cpp:896)
V  [libjvm.so+0xec5f88]  JVM_DefineClassWithSource+0x9c  (jvm.cpp:1060)
C  [libjava.so+0xd885]  Java_java_lang_ClassLoader_defineClass1+0x205  (ClassLoader.c:139)

It happens following JDK-8309692.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309692,,,,JCK-7319449,,,,,,,,,,,,,,,,,,,22,,,,,,,"0|i31yjf:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-20 00:43;chagedorn;[~coleenp] Since this starts to happen after JDK-8309692, can you also have a look at that?;;;","2023-06-20 06:11;coleenp;How do I run -XX:+CompileTheWorld now?;;;","2023-06-20 06:28;roland;Hi Coleen,

$ cd test/hotspot/jtreg/testlibrary/ctw/
$ ALT_BOOTDIR=/home/roland/jdk-jdk/build/linux-x86_64-server-fastdebug/images/jdk/ make

then:

$ cd dist
$ JAVA_HOME=/home/roland/jdk-jdk/build/linux-x86_64-server-fastdebug/images/jdk sh ./ctw.sh /home/roland/tmp/unoil-4.1.6.jar

Let me know if that works for you.;;;","2023-06-20 11:14;mseledtsov;ILW = HLM = P3;;;","2023-06-20 13:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14571
Date: 2023-06-20 20:05:44 +0000;;;","2023-06-21 04:45;coleenp;[~roland] Thank you for reporting this and for the directions on how to run it.;;;","2023-06-21 04:46;dukebot;Changeset: 70e1c92a
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-06-21 11:45:37 +0000
URL:       https://git.openjdk.org/jdk/commit/70e1c92a7f1b5450058a2dd7dbdf9d88eb85e970
;;;",,,,,,,,,,,,,,,,
Bug in assignment operator of ReservedMemoryRegion,JDK-8310275,5103478,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rschmelter,rschmelter,rschmelter,2023-06-18 23:23,2023-08-21 14:02,2023-10-01 09:55,2023-08-16 08:02,22,,,,,,22,hotspot,,0,nmt,,,,,,,,,,,,,,,,,"The assignment operator of ReservedMemoryRegion doesn't clear the initial committed regions list, so the original committed regions are still present after the assignment (and can even be outside of the new reserved region).

As far as I can see this code is only triggered when a reserved region of a stack was not properly unregistered via ThreadStackTracker::delete_thread_stack() when a thread ends. So it should happen very rarely, if at all.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ye3:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-04 00:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14440
Date: 2023-06-13 07:33:12 +0000;;;","2023-08-16 08:02;dukebot;Changeset: 24e896d7
Author:    Ralf Schmelter <rschmelter@openjdk.org>
Date:      2023-08-16 15:00:50 +0000
URL:       https://git.openjdk.org/jdk/commit/24e896d7c905de5030f1b62cf922c15bb7bef311
;;;",,,,,,,,,,,,,,,,,,,,,
Javadoc for Class#isPrimitive() is incorrect regarding Class objects for primitives,JDK-8310267,5103470,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,sbrannen,sbrannen,2023-06-18 07:54,2023-07-12 13:28,2023-10-01 09:55,2023-06-23 12:38,,,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,"The Javadoc for java.lang.Class.isPrimitive() currently states:

> These objects may only be accessed via the following public static final variables, and are the only Class objects for which this method returns true.

However, it is also possible to access each of the Class objects for primitives via boolean.class, byte.class, char.class, short.class, int.class, long.class, float.class, double.class, and void.class.

For example, the following unit test (using JUnit Jupiter and AssertJ) passes.

@Test
void isPrimitive() {
    assertThat(Integer.TYPE).isEqualTo(int.class);
    assertThat(Integer.TYPE).isSameAs(int.class);
    assertThat(Integer.TYPE.isPrimitive()).isTrue();
    assertThat(int.class.isPrimitive()).isTrue();
}

Please update the Javadoc for java.lang.Class.isPrimitive() to reflect that.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6361826,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ycb:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2023-06-20 17:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14574
Date: 2023-06-21 00:00:54 +0000;;;","2023-06-23 12:38;dukebot;Changeset: 0314292c
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2023-06-23 19:35:57 +0000
URL:       https://git.openjdk.org/jdk/commit/0314292cb2d55474d8fb3d0ef46129be7e4f1838
;;;",,,,,,,,,,,,,,,,,,,,,
(process) jspawnhelper should not use argv[0],JDK-8310265,5103462,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stuefe,stuefe,stuefe,2023-06-17 11:17,2023-07-25 04:29,2023-10-01 09:55,2023-06-20 21:57,17,21,22,,,,22,core-libs,,0,amazon-interest,hgupdate-sync,redhat-interest,,,,,,,,,,,,,,,"Reported by jarabekit@gmail.com [1]

jspawnhelper uses argv[0] to receive the fd string from the parent. That breaks with conventions and trips over certain tools like binfmt_misc.

For details, see linked ML discussion.

[1] https://mail.openjdk.org/pipermail/core-libs-dev/2023-June/107738.html",,,,,,,,,,,JDK-8311654,JDK-8312893,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8213192,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31yaj:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-06-17 13:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14531
Date: 2023-06-17 18:24:54 +0000;;;","2023-06-20 21:57;dukebot;Changeset: 47d00a4c
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-06-21 04:55:43 +0000
URL:       https://git.openjdk.org/jdk/commit/47d00a4cbeff5d757dda9c660dfd2385c02a57d7
;;;","2023-07-07 06:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/103
Date: 2023-07-06 19:42:08 +0000;;;",,,,,,,,,,,,,,,,,,,,
In PhaseChaitin::Split defs and phis are leaked,JDK-8310264,5103460,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jsjolen,jsjolen,jsjolen,2023-06-17 09:04,2023-07-12 13:38,2023-10-01 09:55,2023-06-28 14:23,11,17,21,22,8,,22,hotspot,,0,amazon-interest,memory-leak,oracle-triage-22,,,,,,,,,,,,,,,defs and phis are resource allocated but not protected by a ResourceMark.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ya3:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-17 09:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14530
Date: 2023-06-17 16:08:53 +0000;;;","2023-06-18 23:23;chagedorn;ILW = Unnecessary live time extension of two Node_Lists in PhaseChaitin, always, no workaround = LHH = P4 ;;;","2023-06-28 14:23;dukebot;Changeset: 02b17d79
Author:    Johan Sjölen <jsjolen@openjdk.org>
Date:      2023-06-28 21:20:35 +0000
URL:       https://git.openjdk.org/jdk/commit/02b17d793bfcea611c654049c9ab680b70fb5685
;;;",,,,,,,,,,,,,,,,,,,,
Clarify the name parameter to Class::forName,JDK-8310242,5103434,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,mchung,mchung,2023-06-16 12:53,2023-07-12 13:32,2023-10-01 09:55,2023-06-26 12:58,21,,,,,,22,core-libs,,0,doc-only,hgupdate-sync,noreg-doc,,,,,,,,,,,,,,,"The spec of the 3-arg Class::forName does not specify the format of the name for an array type which is neither a fully-qualified name nor binary name.

It's of the form: one or more of ""["" + binary name of the element type + "";'.
",,,,,,,,,,,JDK-8311346,JDK-8310927,,,,,,,,,,,,,,JDK-8310244,,,,,JDK-6249190,,,JDK-8309819,,,,JDK-6249190,JDK-4628117,JDK-8310922,,,,,,,,,,,,,,,,,,,,,,,,"0|i31y4b:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-06-16 13:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14528
Date: 2023-06-16 19:58:08 +0000;;;","2023-06-26 12:58;dukebot;Changeset: 7db2f087
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-06-26 19:56:24 +0000
URL:       https://git.openjdk.org/jdk/commit/7db2f08756b0aa1d79cdd2356ed42aa5ab8bc58b
;;;","2023-06-26 13:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/65
Date: 2023-06-26 20:25:40 +0000;;;",,,,,,,,,,,,,,,,,,,,
OffsetDateTime compareTo redundant computation,JDK-8310241,5103433,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2023-06-16 12:51,2023-07-12 13:42,2023-10-01 09:55,2023-06-29 14:06,,,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,"In java.time.OffsetDateTime.compareTo() the return value is redundantly computed if both OffsetDateTime instances have the same offset.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31y43:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2023-06-22 12:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14618
Date: 2023-06-22 19:03:03 +0000;;;","2023-06-29 14:06;dukebot;Changeset: 11fd34e1
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2023-06-29 21:05:37 +0000
URL:       https://git.openjdk.org/jdk/commit/11fd34e196b29d2f2fd276c36f59a3c3b3ce7280
;;;",,,,,,,,,,,,,,,,,,,,,
[test bug] javax/swing/JTableHeader/6889007/bug6889007.java fails,JDK-8310238,5103429,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2023-06-16 11:23,2023-07-12 13:35,2023-10-01 09:55,2023-06-27 13:22,20,21,22,,,,22,client-libs,,0,sn_147,,,,,,,,,,,,,,,,,"The stability improvements for https://bugs.openjdk.org/browse/JDK-8299713
didn't help and this test fails every time in CI the first time it is run.

It passes on re-run because in that case the preceding test is different.
And the preceding test on the first run is a somewhat similar test which just
uses a TableHeader but is dragging the headers around and uses a decorated window
The key is that  leaves the cursor always in the same position
right around the where the final column of the table will be drawn in this test
That other test is javax/swing/JTableHeader/6884066/bug6884066.java

As a result when this test (bug6889007.java) is run on its own you see this (print the state each time, not just on error)
oldColumn -1 newColumn 0header.getCursor java.awt.Cursor[Default Cursor] cursor java.awt.Cursor[East Resize Cursor]
oldColumn 0 newColumn 1header.getCursor java.awt.Cursor[East Resize Cursor] cursor java.awt.Cursor[East Resize Cursor]
oldColumn 1 newColumn 2header.getCursor java.awt.Cursor[East Resize Cursor] cursor java.awt.Cursor[East Resize Cursor]
oldColumn 2 newColumn 3header.getCursor java.awt.Cursor[East Resize Cursor] cursor java.awt.Cursor[East Resize Cursor]
oldColumn 3 newColumn 4header.getCursor java.awt.Cursor[East Resize Cursor] cursor java.awt.Cursor[East Resize Cursor]
oldColumn 4 newColumn -1header.getCursor java.awt.Cursor[East Resize Cursor] cursor java.awt.Cursor[East Resize Cursor]

but when you run it after the decorated test - or by placing the mouse pointer at the exact place on the screen where column 4
will be rendered you see something like this
oldColumn -1 newColumn 4header.getCursor java.awt.Cursor[Default Cursor] cursor java.awt.Cursor[East Resize Cursor]
oldColumn 4 newColumn 0header.getCursor java.awt.Cursor[Default Cursor] cursor java.awt.Cursor[East Resize Cursor]
Exception in thread ""AWT-EventQueue-0"" java.lang.RuntimeException: Wrong type of cursor!
    at bug6889007$MyTableHeaderUI.rolloverColumnUpdated(bug6889007.java:125)

So if the mouse starts *anywhere* over the window then the test will fail.

The easy fix is to move the mouse to some other location first, or a bit trickier (but will also work on Wayland) is to see
if location is within this window before starting the movements and set a flag not to ignore the case when newColumn == 0
regardless of the value of oldColumn. Perhaps do both. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31y37:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-06-16 12:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14527
Date: 2023-06-16 19:25:14 +0000;;;","2023-06-27 13:22;dukebot;Changeset: 2cf5c2f4
Author:    Phil Race <prr@openjdk.org>
Date:      2023-06-27 20:19:56 +0000
URL:       https://git.openjdk.org/jdk/commit/2cf5c2f4b6cdb52a3560ab03d272f19f47b22b17
;;;",,,,,,,,,,,,,,,,,,,,,
Fix THP detection on Linux,JDK-8310233,5103423,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2023-06-16 10:44,2023-08-30 02:16,2023-10-01 09:55,2023-07-16 21:57,21,22,,,,,22,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,large-pages,redhat-interest,,,,,,,,,,"Today, if we use UseTransparentHugePages, we assume that the static hugepage detection we do is valid for THPs:
- that THPs use the page size (in hotspot used as ""default large page size"") found in /proc/memlimit Hugepagesize)
- that THPs are enabled if that page size is >0.

Both assumptions are incorrect. THPs are enabled depending on the mode in `/sys/kernel/mm/transparent_hugepage/enabled` (tri-state). And the pagesize used by khugepaged is the one set in `/sys/kernel/mm/transparent_hugepage/hpage_pmd_size`. The latter can differ from the default large page size on the system (e.g. static hugepage default size could be 1g, whereas THP hugepage size is 2m).

-------------

Example 1: System has THPs disabled, but static hugepages (1g, 2m) configured:

```
thomas@starfish $ cat /sys/kernel/mm/transparent_hugepage/enabled
always madvise [never]
thomas@starfish $ cat /proc/meminfo | grep Hugepage
Hugepagesize:    1048576 kB
```

We incorrectly assume THPs are enabled, and that THP page size is 1G (!), which we then proceed and use as heap page size, causing the heap size to be rounded up from 512m -> 1G:

```
thomas@starfish $ ./images/jdk/bin/java -Xmx512m -XX:+UseLargePages -XX:+UseTransparentHugePages -Xlog:pagesize -version
[0.001s][info][pagesize] Using the default large page size: 1G
[0.001s][info][pagesize] Usable page sizes: 4k, 2M, 1G
...
[0.016s][info][pagesize] Heap:  min=1G max=1G base=0x00000000c0000000 size=1G page_size=1G
```

----------

Example 2: System has THPs enabled, but THP page size is just *2M*, whereas the system uses a static default hugepage size of *1G*:

```
thomas@starfish $ cat /sys/kernel/mm/transparent_hugepage/enabled
always [madvise] never
thomas@starfish $ cat /sys/kernel/mm/transparent_hugepage/hpage_pmd_size 
2097152
thomas@starfish $ cat /proc/meminfo | grep Hugepage
Hugepagesize:    1048576 kB
```

WTHP page size is not correctly recognized as 2M. Instead, we again use 1G as page size for the heap:

```
thomas@starfish $ ./images/jdk/bin/java -Xmx512m -XX:+UseLargePages -XX:+UseTransparentHugePages -Xlog:pagesize -version
[0.001s][info][pagesize] Using the default large page size: 1G
[0.001s][info][pagesize] Usable page sizes: 4k, 2M, 1G
...
[0.010s][info][pagesize] Heap:  min=1G max=1G base=0x00000000c0000000 size=1G page_size=1G
```
",,,,,,,,,,,JDK-8315349,JDK-8314918,,,,,,,,,,,,,,,,,JDK-8310261,,JDK-8310295,,,JDK-8312182,JDK-8310687,,,JDK-8312394,JDK-8312366,JDK-8310262,JDK-8312620,,,,,,,,,,,,,,,,,,,,,,,"0|i31y1v:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-01 12:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14739
Date: 2023-06-30 16:26:43 +0000;;;","2023-07-16 21:57;dukebot;Changeset: 37ca9024
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-07-17 04:56:10 +0000
URL:       https://git.openjdk.org/jdk/commit/37ca9024ef59d99cae0bd7e25b2e6d3c1e085f97
;;;","2023-07-19 00:20;marchof;After this change the arm32 build crashes for me (when using the JVM), see JDK-8312366.;;;","2023-07-24 12:55;djelinski;After this change the WSL linux build crashes, see JDK-8312620;;;","2023-08-15 02:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/60
Date: 2023-08-15 09:22:23 +0000;;;","2023-08-21 02:24;stuefe;Fix Request 21u:

I would like to backport this to 21u since it is a pre-requisite for fixing https://bugs.openjdk.org/browse/JDK-8312182 (""THPs cause huge RSS due to thread start timing issue"").

The backport applies cleanly. The risk is small.

After this patch, we need two follow-up patches to correct errors in rare corner case scenarios (arm32 SBCs and building on windows inside WSL):

- JDK-8312394 [linux] SIGSEGV if kernel was built without hugepage support (https://bugs.openjdk.org/browse/JDK-8312394)
- JDK-8312620 WSL Linux build crashes after JDK-8310233 (https://bugs.openjdk.org/browse/JDK-8312620)

and I will prepare and push them in short order (but obviously, this patch needs to be pushed first).

;;;","2023-08-23 01:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1679
Date: 2023-08-21 12:47:15 +0000;;;","2023-08-23 01:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2086
Date: 2023-08-17 14:50:49 +0000;;;","2023-08-25 05:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1694
Date: 2023-08-25 10:55:00 +0000;;;","2023-08-25 23:09;stuefe;Fix Request 17u: 

(note: not for the October CPU; I will delay pushing this till after the fork).

I would like to backport this to 17u since it is a pre-requisite for fixing https://bugs.openjdk.org/browse/JDK-8312182 (""THPs cause huge RSS due to thread start timing issue""). 

The backport did not apply cleanly; however, there are no actual differences. The only change preventing cleanliness was the NULL->nullptr change. 

Patch is tested (GHAs and personal tests with various THP settings) and reviewed (https://github.com/openjdk/jdk17u-dev/pull/1694).

After this patch, we need two follow-up patches to correct errors in rare corner case scenarios (arm32 SBCs and building on windows inside WSL): 

- JDK-8312394 [linux] SIGSEGV if kernel was built without hugepage support (https://bugs.openjdk.org/browse/JDK-8312394) 
- JDK-8312620 WSL Linux build crashes after JDK-8310233 (https://bugs.openjdk.org/browse/JDK-8312620) 

and I will prepare them too and line them up such that I can push them in short order.;;;",,,,,,,,,,,,,
java.time.Clock$TickClock.millis() fails in runtime when tick is 1 microsecond,JDK-8310232,5103413,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2023-06-16 08:27,2023-07-12 13:41,2023-10-01 09:55,2023-06-29 09:16,17.0.7,21,22,,,,22,core-libs,,0,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When `TickClock` is created with a tick that is less than a millisecond its `millis()` method throws ArithmeticException division by zero.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. create a microsecond precision clock:
Clock microsecondPrecisionClock = Clock.tick(Clock.systemUTC(), Duration.ofNanos(1000));

2. Call millis() method throw runtime exception
microsecondPrecisionClock.millis(); // java.lang.ArithmeticException: / by zero

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Get current millisecond instant of the clock without throwing an error
ACTUAL -
java.lang.ArithmeticException: / by zero

---------- BEGIN SOURCE ----------
public class TickClockTest {
    public static void main(String[] args) {
        Clock microsecondPrecisionClock = Clock.tick(Clock.systemUTC(), Duration.ofNanos(1000));
        microsecondPrecisionClock.millis();
    }
}
---------- END SOURCE ----------

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,os_x,,,,,"0|i31xzn:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2023-06-16 10:51;rriggs;Sample stacktrace:
 Exception java.lang.ArithmeticException: / by zero
|        at Math.floorMod (Math.java:1641)
|        at Clock$TickClock.millis (Clock.java:762);;;","2023-06-16 15:22;naoto;Offending code:
```
            return millis - Math.floorMod(millis, tickNanos / 1000_000L);
```
Computing floor modulus in nano precision, then convert it to millis would avoid the `/ by zero` exception;;;","2023-06-26 10:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14657
Date: 2023-06-26 17:31:29 +0000;;;","2023-06-29 09:16;dukebot;Changeset: a995aa6c
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-06-29 16:15:02 +0000
URL:       https://git.openjdk.org/jdk/commit/a995aa6cd1cd89c2ca6db72b060177eaf7065377
;;;",,,,,,,,,,,,,,,,,,,
serviceability/jvmti/thread/GetStackTrace/getstacktr03/getstacktr03.java failing,JDK-8310211,5103395,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dcubed,alanb,alanb,2023-06-16 06:02,2023-08-04 03:03,2023-10-01 09:55,2023-06-16 10:39,22,,,,,,22,hotspot,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,noreg-self,regression,tier1,tier3,,,,,,,,,,,"This test is very sensitive to changes to Thread/VirtualThread as the test expects to see specific frames in stack traces. JDK-8308609 has removed an override of the internal runWith method so this test needs adjusting.

This should fix it:

--- a/test/hotspot/jtreg/serviceability/jvmti/thread/GetStackTrace/getstacktr03/libgetstacktr03.cpp
+++ b/test/hotspot/jtreg/serviceability/jvmti/thread/GetStackTrace/getstacktr03/libgetstacktr03.cpp
@@ -44,7 +44,7 @@ static frame_info expected_virtual_frames[] = {
     {""Lgetstacktr03;"", ""dummy"", ""()V""},
     {""Lgetstacktr03;"", ""chain"", ""()V""},
     {""Lgetstacktr03$Task;"", ""run"", ""()V""},
-    {""Ljava/lang/VirtualThread;"", ""runWith"", ""(Ljava/lang/Object;Ljava/lang/Runnable;)V""},
+    {""Ljava/lang/Thread;"", ""runWith"", ""(Ljava/lang/Object;Ljava/lang/Runnable;)V""},
     {""Ljava/lang/VirtualThread;"", ""run"", ""(Ljava/lang/Runnable;)V""},
     {""Ljava/lang/VirtualThread$VThreadContinuation$1;"", ""run"", ""()V""},
     {""Ljdk/internal/vm/Continuation;"", ""enter0"", ""()V""},",,,,,,,,,,,JDK-8313755,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308609,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31xvn:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-06-16 09:14;dcubed;This appears to be a regression caused by the following fix:

JDK-8308609 java/lang/ScopedValue/StressStackOverflow.java fails with ""-XX:-VMContinuations""

I'm bumping the priority from P3 -> P2. How was this failure
not caught by pre-integration testing?;;;","2023-06-16 09:53;dcubed;I'm checking out [~alanb]'s patch in an urgent Mach5 Tier1 job.;;;","2023-06-16 10:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14524
Date: 2023-06-16 17:10:08 +0000;;;","2023-06-16 10:39;dukebot;Changeset: 16134f44
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2023-06-16 17:38:01 +0000
URL:       https://git.openjdk.org/jdk/commit/16134f44221e46f71d91fdba08e30705b0e1f92f
;;;","2023-06-16 10:57;dcubed;The fix for this bug is integrated in jdk-22+3-128.;;;","2023-08-03 00:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/36
Date: 2023-08-03 06:58:31 +0000;;;","2023-08-03 01:20;clanger;Fix request (21u)
Needed as a follow up to JDK-8308609. Testfix, verified in SAP nightlies.;;;",,,,,,,,,,,,,,,,
Reduce verbose locale output in -XshowSettings launcher option,JDK-8310201,5103379,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coffeys,coffeys,coffeys,2023-06-16 04:02,2023-07-24 17:15,2023-10-01 09:55,2023-07-17 01:31,21,22,,,,,22,tools,,0,release-note=yes,,,,,,,,,,,,,,,,,"Currently, the ""-XshowSettings"" launcher command prints all available locales, thus making the output very verbose by default and making it harder to see settings, e.g.

    available locales = , af, af_NA, af_ZA, af_ZA_#Latn, agq, agq_CM, agq_CM_#Latn,
        ak, ak_GH, ak_GH_#Latn, am, am_ET, am_ET_#Ethi, ann, ann_NG,
        ann_NG_#Latn, ar, ar_001, ar_AE, ar_BH, ar_DJ, ar_DZ, ar_EG,
        ar_EG_#Arab, ar_EH, ar_ER, ar_IL, ar_IQ, ar_JO, ar_KM, ar_KW,
        ar_LB, ar_LY, ar_MA, ar_MR, ar_OM, ar_PS, ar_QA, ar_SA,
        ar_SD, ar_SO, ar_SS, ar_SY, ar_TD, ar_TN, ar_YE, as,
        as_IN, as_IN_#Beng, asa, asa_TZ, asa_TZ_#Latn, ast, ast_ES, ast_ES_#Latn,
        az, az_AZ, az_AZ_#Cyrl, az_AZ_#Latn, az__#Cyrl, az__#Latn, bas, bas_CM,
        bas_CM_#Latn, be, be_BY, be_BY_#Cyrl, be__TARASK, bem, bem_ZM, bem_ZM_#Latn,
        bez, bez_TZ, bez_TZ_#Latn, bg, bg_BG, bg_BG_#Cyrl, bgc, bgc_IN,
        bgc_IN_#Deva, bho, bho_IN, bho_IN_#Deva, bm, bm_ML, bm_ML_#Latn, bn,
        bn_BD, bn_BD_#Beng, bn_IN, bo, bo_CN, bo_CN_#Tibt, bo_IN, br,
        br_FR, br_FR_#Latn, brx, brx_IN, brx_IN_#Deva, bs, bs_BA, bs_BA_#Cyrl,
        bs_BA_#Latn, bs__#Cyrl, bs__#Latn, ca, ca_AD, ca_ES, ca_ES_#Latn, ca_ES_VALENCIA,
        ca_FR, ca_IT, ccp, ccp_BD, ccp_BD_#Cakm, ccp_IN, ce, ce_RU,
        ce_RU_#Cyrl, ceb, ceb_PH, ceb_PH_#Latn, cgg, cgg_UG, cgg_UG_#Latn, chr,
        chr_US, chr_US_#Cher, ckb, ckb_IQ, ckb_IQ_#Arab, ckb_IR, cs, cs_CZ,
        cs_CZ_#Latn, cv, cv_RU, cv_RU_#Cyrl, cy, cy_GB, cy_GB_#Latn, da,
        da_DK, da_DK_#Latn, da_GL, dav, dav_KE, dav_KE_#Latn, de, de_AT,
        de_BE, de_CH, de_DE, de_DE_#Latn, de_IT, de_LI, de_LU, dje,
        dje_NE, dje_NE_#Latn, doi, doi_IN, doi_IN_#Deva, dsb, dsb_DE, dsb_DE_#Latn,
        dua, dua_CM, dua_CM_#Latn, dyo, dyo_SN, dyo_SN_#Latn, dz, dz_BT,
        dz_BT_#Tibt, ebu, ebu_KE, ebu_KE_#Latn, ee, ee_GH, ee_GH_#Latn, ee_TG,
        el, el_CY, el_GR, el_GR_#Grek, en, en_001, en_150, en_AE,
        en_AG, en_AI, en_AS, en_AT, en_AU, en_BB, en_BE, en_BI,
        en_BM, en_BS, en_BW, en_BZ, en_CA, en_CC, en_CH, en_CK,
        en_CM, en_CX, en_CY, en_DE, en_DG, en_DK, en_DM, en_ER,
        en_FI, en_FJ, en_FK, en_FM, en_GB, en_GD, en_GG, en_GH,
        en_GI, en_GM, en_GU, en_GY, en_HK, en_IE, en_IL, en_IM,
        en_IN, en_IO, en_JE, en_JM, en_KE, en_KI, en_KN, en_KY,
        en_LC, en_LR, en_LS, en_MG, en_MH, en_MO, en_MP, en_MS,
        en_MT, en_MU, en_MV, en_MW, en_MY, en_NA, en_NF, en_NG,
        en_NL, en_NR, en_NU, en_NZ, en_PG, en_PH, en_PK, en_PN,
        en_PR, en_PW, en_RW, en_SB, en_SC, en_SD, en_SE, en_SG,
        en_SH, en_SI, en_SL, en_SS, en_SX, en_SZ, en_TC, en_TK,
        en_TO, en_TT, en_TV, en_TZ, en_UG, en_UM, en_US, en_US_#Latn,
        en_US_POSIX, en_VC, en_VG, en_VI, en_VU, en_WS, en_ZA, en_ZM,
        en_ZW, eo, eo_001, eo_001_#Latn, es, es_419, es_AR, es_BO,
        es_BR, es_BZ, es_CL, es_CO, es_CR, es_CU, es_DO, es_EA,
        es_EC, es_ES, es_ES_#Latn, es_GQ, es_GT, es_HN, es_IC, es_MX,
        es_NI, es_PA, es_PE, es_PH, es_PR, es_PY, es_SV, es_US,
        es_UY, es_VE, et, et_EE, et_EE_#Latn, eu, eu_ES, eu_ES_#Latn,
        ewo, ewo_CM, ewo_CM_#Latn, fa, fa_AF, fa_IR, fa_IR_#Arab, ff,
        ff_BF_#Adlm, ff_BF_#Latn, ff_CM_#Adlm, ff_CM_#Latn, ff_GH_#Adlm, ff_GH_#Latn, ff_GM_#Adlm, ff_GM_#Latn,
        ff_GN, ff_GN_#Adlm, ff_GN_#Latn, ff_GW_#Adlm, ff_GW_#Latn, ff_LR_#Adlm, ff_LR_#Latn, ff_MR_#Adlm,
        ff_MR_#Latn, ff_NE_#Adlm, ff_NE_#Latn, ff_NG_#Adlm, ff_NG_#Latn, ff_SL_#Adlm, ff_SL_#Latn, ff_SN,
        ff_SN_#Adlm, ff_SN_#Latn, ff__#Adlm, ff__#Latn, fi, fi_FI, fi_FI_#Latn, fil,
        fil_PH, fil_PH_#Latn, fo, fo_DK, fo_FO, fo_FO_#Latn, fr, fr_BE,
        fr_BF, fr_BI, fr_BJ, fr_BL, fr_CA, fr_CD, fr_CF, fr_CG,
        fr_CH, fr_CI, fr_CM, fr_DJ, fr_DZ, fr_FR, fr_FR_#Latn, fr_GA,
        fr_GF, fr_GN, fr_GP, fr_GQ, fr_HT, fr_KM, fr_LU, fr_MA,
        fr_MC, fr_MF, fr_MG, fr_ML, fr_MQ, fr_MR, fr_MU, fr_NC,
        fr_NE, fr_PF, fr_PM, fr_RE, fr_RW, fr_SC, fr_SN, fr_SY,
        fr_TD, fr_TG, fr_TN, fr_VU, fr_WF, fr_YT, frr, frr_DE,
        frr_DE_#Latn, fur, fur_IT, fur_IT_#Latn, fy, fy_NL, fy_NL_#Latn, ga,
        ga_GB, ga_IE, ga_IE_#Latn, gd, gd_GB, gd_GB_#Latn, gl, gl_ES,
        gl_ES_#Latn, gsw, gsw_CH, gsw_CH_#Latn, gsw_FR, gsw_LI, gu, gu_IN,
        gu_IN_#Gujr, guz, guz_KE, guz_KE_#Latn, gv, gv_IM, gv_IM_#Latn, ha,
        ha_GH, ha_NE, ha_NG, ha_NG_#Latn, haw, haw_US, haw_US_#Latn, he,
        he_IL, he_IL_#Hebr, hi, hi_IN, hi_IN_#Deva, hi_IN_#Latn, hi__#Latn, hr,
        hr_BA, hr_HR, hr_HR_#Latn, hsb, hsb_DE, hsb_DE_#Latn, hu, hu_HU,
        hu_HU_#Latn, hy, hy_AM, hy_AM_#Armn, ia, ia_001, ia_001_#Latn, id,
        id_ID, id_ID_#Latn, ig, ig_NG, ig_NG_#Latn, ii, ii_CN, ii_CN_#Yiii,
        is, is_IS, is_IS_#Latn, it, it_CH, it_IT, it_IT_#Latn, it_SM,
        it_VA, ja, ja_JP, ja_JP_#Jpan, ja_JP_JP_#u-ca-japanese, jgo, jgo_CM, jgo_CM_#Latn,
        jmc, jmc_TZ, jmc_TZ_#Latn, jv, jv_ID, jv_ID_#Latn, ka, ka_GE,
        ka_GE_#Geor, kab, kab_DZ, kab_DZ_#Latn, kam, kam_KE, kam_KE_#Latn, kde,
        kde_TZ, kde_TZ_#Latn, kea, kea_CV, kea_CV_#Latn, kgp, kgp_BR, kgp_BR_#Latn,
        khq, khq_ML, khq_ML_#Latn, ki, ki_KE, ki_KE_#Latn, kk, kk_KZ,
        kk_KZ_#Cyrl, kkj, kkj_CM, kkj_CM_#Latn, kl, kl_GL, kl_GL_#Latn, kln,
        kln_KE, kln_KE_#Latn, km, km_KH, km_KH_#Khmr, kn, kn_IN, kn_IN_#Knda,
        ko, ko_KP, ko_KR, ko_KR_#Kore, kok, kok_IN, kok_IN_#Deva, ks,
        ks_IN, ks_IN_#Arab, ks_IN_#Deva, ks__#Arab, ks__#Deva, ksb, ksb_TZ, ksb_TZ_#Latn,
        ksf, ksf_CM, ksf_CM_#Latn, ksh, ksh_DE, ksh_DE_#Latn, ku, ku_TR,
        ku_TR_#Latn, kw, kw_GB, kw_GB_#Latn, ky, ky_KG, ky_KG_#Cyrl, lag,
        lag_TZ, lag_TZ_#Latn, lb, lb_LU, lb_LU_#Latn, lg, lg_UG, lg_UG_#Latn,
        lkt, lkt_US, lkt_US_#Latn, ln, ln_AO, ln_CD, ln_CD_#Latn, ln_CF,
        ln_CG, lo, lo_LA, lo_LA_#Laoo, lrc, lrc_IQ, lrc_IR, lrc_IR_#Arab,
        lt, lt_LT, lt_LT_#Latn, lu, lu_CD, lu_CD_#Latn, luo, luo_KE,
        luo_KE_#Latn, luy, luy_KE, luy_KE_#Latn, lv, lv_LV, lv_LV_#Latn, mai,
        mai_IN, mai_IN_#Deva, mas, mas_KE, mas_KE_#Latn, mas_TZ, mdf, mdf_RU,
        mdf_RU_#Cyrl, mer, mer_KE, mer_KE_#Latn, mfe, mfe_MU, mfe_MU_#Latn, mg,
        mg_MG, mg_MG_#Latn, mgh, mgh_MZ, mgh_MZ_#Latn, mgo, mgo_CM, mgo_CM_#Latn,
        mi, mi_NZ, mi_NZ_#Latn, mk, mk_MK, mk_MK_#Cyrl, ml, ml_IN,
        ml_IN_#Mlym, mn, mn_MN, mn_MN_#Cyrl, mni, mni_IN, mni_IN_#Beng, mni__#Beng,
        mr, mr_IN, mr_IN_#Deva, ms, ms_BN, ms_ID, ms_MY, ms_MY_#Latn,
        ms_SG, mt, mt_MT, mt_MT_#Latn, mua, mua_CM, mua_CM_#Latn, my,
        my_MM, my_MM_#Mymr, mzn, mzn_IR, mzn_IR_#Arab, naq, naq_NA, naq_NA_#Latn,
        nb, nb_NO, nb_NO_#Latn, nb_SJ, nd, nd_ZW, nd_ZW_#Latn, nds,
        nds_DE, nds_DE_#Latn, nds_NL, ne, ne_IN, ne_NP, ne_NP_#Deva, nl,
        nl_AW, nl_BE, nl_BQ, nl_CW, nl_NL, nl_NL_#Latn, nl_SR, nl_SX,
        nmg, nmg_CM, nmg_CM_#Latn, nn, nn_NO, nn_NO_#Latn, nnh, nnh_CM,
        nnh_CM_#Latn, no, no_NO, no_NO_#Latn, no_NO_NY, nus, nus_SS, nus_SS_#Latn,
        nyn, nyn_UG, nyn_UG_#Latn, oc, oc_ES, oc_ES_#Latn, oc_FR, oc_FR_#Latn,
        om, om_ET, om_ET_#Latn, om_KE, or, or_IN, or_IN_#Orya, os,
        os_GE, os_GE_#Cyrl, os_RU, pa, pa_IN, pa_IN_#Guru, pa_PK, pa_PK_#Arab,
        pa__#Arab, pa__#Guru, pcm, pcm_NG, pcm_NG_#Latn, pis, pis_SB, pis_SB_#Latn,
        pl, pl_PL, pl_PL_#Latn, ps, ps_AF, ps_AF_#Arab, ps_PK, pt,
        pt_AO, pt_BR, pt_BR_#Latn, pt_CH, pt_CV, pt_GQ, pt_GW, pt_LU,
        pt_MO, pt_MZ, pt_PT, pt_ST, pt_TL, qu, qu_BO, qu_EC,
        qu_PE, qu_PE_#Latn, raj, raj_IN, raj_IN_#Deva, rm, rm_CH, rm_CH_#Latn,
        rn, rn_BI, rn_BI_#Latn, ro, ro_MD, ro_RO, ro_RO_#Latn, rof,
        rof_TZ, rof_TZ_#Latn, ru, ru_BY, ru_KG, ru_KZ, ru_MD, ru_RU,
        ru_RU_#Cyrl, ru_UA, rw, rw_RW, rw_RW_#Latn, rwk, rwk_TZ, rwk_TZ_#Latn,
        sa, sa_IN, sa_IN_#Deva, sah, sah_RU, sah_RU_#Cyrl, saq, saq_KE,
        saq_KE_#Latn, sat, sat_IN, sat_IN_#Olck, sat__#Olck, sbp, sbp_TZ, sbp_TZ_#Latn,
        sc, sc_IT, sc_IT_#Latn, sd, sd_IN, sd_IN_#Deva, sd_PK, sd_PK_#Arab,
        sd__#Arab, sd__#Deva, se, se_FI, se_NO, se_NO_#Latn, se_SE, seh,
        seh_MZ, seh_MZ_#Latn, ses, ses_ML, ses_ML_#Latn, sg, sg_CF, sg_CF_#Latn,
        shi, shi_MA, shi_MA_#Latn, shi_MA_#Tfng, shi__#Latn, shi__#Tfng, si, si_LK,
        si_LK_#Sinh, sk, sk_SK, sk_SK_#Latn, sl, sl_SI, sl_SI_#Latn, smn,
        smn_FI, smn_FI_#Latn, sms, sms_FI, sms_FI_#Latn, sn, sn_ZW, sn_ZW_#Latn,
        so, so_DJ, so_ET, so_KE, so_SO, so_SO_#Latn, sq, sq_AL,
        sq_AL_#Latn, sq_MK, sq_XK, sr, sr_BA, sr_BA_#Cyrl, sr_BA_#Latn, sr_CS,
        sr_ME, sr_ME_#Cyrl, sr_ME_#Latn, sr_RS, sr_RS_#Cyrl, sr_RS_#Latn, sr_XK_#Cyrl, sr_XK_#Latn,
        sr__#Cyrl, sr__#Latn, su, su_ID, su_ID_#Latn, su__#Latn, sv, sv_AX,
        sv_FI, sv_SE, sv_SE_#Latn, sw, sw_CD, sw_KE, sw_TZ, sw_TZ_#Latn,
        sw_UG, ta, ta_IN, ta_IN_#Taml, ta_LK, ta_MY, ta_SG, te,
        te_IN, te_IN_#Telu, teo, teo_KE, teo_UG, teo_UG_#Latn, tg, tg_TJ,
        tg_TJ_#Cyrl, th, th_TH, th_TH_#Thai, th_TH_TH_#u-nu-thai, ti, ti_ER, ti_ET,
        ti_ET_#Ethi, tk, tk_TM, tk_TM_#Latn, to, to_TO, to_TO_#Latn, tok,
        tok_001, tok_001_#Latn, tr, tr_CY, tr_TR, tr_TR_#Latn, tt, tt_RU,
        tt_RU_#Cyrl, twq, twq_NE, twq_NE_#Latn, tzm, tzm_MA, tzm_MA_#Latn, ug,
        ug_CN, ug_CN_#Arab, uk, uk_UA, uk_UA_#Cyrl, ur, ur_IN, ur_PK,
        ur_PK_#Arab, uz, uz_AF, uz_AF_#Arab, uz_UZ, uz_UZ_#Cyrl, uz_UZ_#Latn, uz__#Arab,
        uz__#Cyrl, uz__#Latn, vai, vai_LR, vai_LR_#Latn, vai_LR_#Vaii, vai__#Latn, vai__#Vaii,
        vi, vi_VN, vi_VN_#Latn, vun, vun_TZ, vun_TZ_#Latn, wae, wae_CH,
        wae_CH_#Latn, wo, wo_SN, wo_SN_#Latn, xh, xh_ZA, xh_ZA_#Latn, xog,
        xog_UG, xog_UG_#Latn, yav, yav_CM, yav_CM_#Latn, yi, yi_001, yi_001_#Hebr,
        yo, yo_BJ, yo_NG, yo_NG_#Latn, yrl, yrl_BR, yrl_BR_#Latn, yrl_CO,
        yrl_VE, yue, yue_CN, yue_CN_#Hans, yue_HK, yue_HK_#Hant, yue__#Hans, yue__#Hant,
        zgh, zgh_MA, zgh_MA_#Tfng, zh, zh_CN, zh_CN_#Hans, zh_HK, zh_HK_#Hans,
        zh_HK_#Hant, zh_MO, zh_MO_#Hans, zh_MO_#Hant, zh_SG, zh_SG_#Hans, zh_TW, zh_TW_#Hant,
        zh__#Hans, zh__#Hant, zu, zu_ZA, zu_ZA_#Latn
 
This level of detail should be printed only if the -XshowSettings:locale subcommand is specified (we can continue to print all other locale details with -XshowSettings)
",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311826,,,,,,,,JDK-8311653,,,,JDK-8281658,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31xs3:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5d8045fc,,,,,,,,,"2023-07-14 03:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14885
Date: 2023-07-14 10:01:16 +0000;;;","2023-07-17 01:31;dukebot;Changeset: f6e23ae4
Author:    Sean Coffey <coffeys@openjdk.org>
Date:      2023-07-17 08:28:16 +0000
URL:       https://git.openjdk.org/jdk/commit/f6e23ae4519f8eb877ae28a0bfbb4820c9718f91
;;;",,,,,,,,,,,,,,,,,,,,,
Update the index page for specs,JDK-8310200,5103378,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbierman,gbierman,gbierman,2023-06-16 04:00,2023-07-12 12:59,2023-10-01 09:55,2023-06-16 09:16,,,,,,,21,specification,,0,noreg-doc,,,,,,,,,,,,,,,,,The file closed/make/data/docs-resources/specs/index.html needs updating to reflect the preview JEPs for JDK21.,,,,,,,,,,,JDK-8310448,JDK-8310229,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31xrv:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7441ef8d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Generational ZGC: Lock-order asserts in JVMTI IterateThroughHeap,JDK-8310194,5103371,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,stefank,stefank,stefank,2023-06-16 02:13,2023-07-12 13:19,2023-10-01 09:55,2023-06-20 06:48,21,22,,,,,22,hotspot,,0,genzgc,hgupdate-sync,jvmti,,,,,,,,,,,,,,,"We see this lock order problem:

assert(false) failed: Attempting to acquire lock ObjectSynchronizer Weak alloc lock/oopstorage out of order with lock Service_lock/service -- possible deadlock

V  [libjvm.so+0x13fcc3c]  Mutex::check_rank(Thread*)+0x36c  (mutex.cpp:447)
V  [libjvm.so+0x13fdee0]  Mutex::lock_without_safepoint_check()+0x50  (mutex.cpp:145)
V  [libjvm.so+0x14819b9]  OopStorage::allocate()+0x29  (mutexLocker.hpp:199)
V  [libjvm.so+0x18a8bd0]  WeakHandle::WeakHandle(OopStorage*, oop)+0x20  (weakHandle.cpp:37)
V  [libjvm.so+0x144e4f2]  ObjectMonitor::ObjectMonitor(oop)+0x62  (objectMonitor.cpp:261)
V  [libjvm.so+0x17337f5]  ObjectSynchronizer::inflate(Thread*, oop, ObjectSynchronizer::InflateCause)+0x675  (synchronizer.cpp:1425)
V  [libjvm.so+0x1736036]  ObjectSynchronizer::FastHashCode(Thread*, oop)+0x146  (synchronizer.cpp:1001)
V  [libjvm.so+0x146491f]  oopDesc::slow_identity_hash()+0x6f  (oop.cpp:112)
V  [libjvm.so+0x11bf2c5]  JvmtiTagMapTable::remove(oop)+0x265  (oop.inline.hpp:366)
V  [libjvm.so+0x11b6e0f]  CallbackWrapper::~CallbackWrapper()+0xef  (jvmtiTagMap.cpp:248)
V  [libjvm.so+0x11b290c]  IterateThroughHeapObjectClosure::do_object(oop)+0x59c  (jvmtiTagMap.cpp:1089)
V  [libjvm.so+0x1999518]  ZHeapIteratorContext::mark_and_push(oop) const [clone .part.0]+0x58  (zHeapIterator.cpp:81)
V  [libjvm.so+0x199c6d4]  ZHeapIteratorUncoloredRootOopClosure::do_oop(oop*)+0x154  (zHeapIterator.cpp:161)
V  [libjvm.so+0x19bda57]  ZNMethod::nmethod_oops_do_inner(nmethod*, OopClosure*)+0x47  (zNMethod.cpp:264)
V  [libjvm.so+0x19bdc1e]  ZNMethod::nmethod_oops_do(nmethod*, OopClosure*)+0x8e  (zNMethod.cpp:254)
V  [libjvm.so+0x1196195]  JvmtiDeferredEventQueue::oops_do(OopClosure*, CodeBlobClosure*)+0x45  (jvmtiImpl.cpp:1027)
V  [libjvm.so+0x15e5dd9]  ServiceThread::oops_do_no_frames(OopClosure*, CodeBlobClosure*)+0x59  (serviceThread.cpp:220)
V  [libjvm.so+0x1796ac6]  Thread::oops_do(OopClosure*, CodeBlobClosure*)+0x76  (thread.cpp:431)
V  [libjvm.so+0x19fad72]  ZJavaThreadsIterator::apply(ThreadClosure*)+0x102  (zRootsIterator.cpp:136)
V  [libjvm.so+0x19fb135]  ZRootsIteratorStrongUncolored::apply(ThreadClosure*, NMethodClosure*)+0x35  (zRootsIterator.cpp:96)
V  [libjvm.so+0x1997bed]  ZHeapIterator::push_strong_roots(ZHeapIteratorContext const&)+0x10d  (zHeapIterator.cpp:376)
V  [libjvm.so+0x199a37c]  ZHeapIterator::object_iterate(ObjectClosure*, unsigned int)+0x7c  (zHeapIterator.cpp:388)
V  [libjvm.so+0x199476e]  ZHeap::object_iterate(ObjectClosure*, bool)+0x5e  (zHeap.cpp:297)
V  [libjvm.so+0x11b787c]  VM_HeapIterateOperation::doit()+0x5c  (jvmtiTagMap.cpp:877)
V  [libjvm.so+0x18758e9]  VM_Operation::evaluate()+0x139  (vmOperations.cpp:71)
V  [libjvm.so+0x189868b]  VMThread::evaluate_operation(VM_Operation*)+0x10b  (vmThread.cpp:281)
V  [libjvm.so+0x18991ff]  VMThread::inner_execute(VM_Operation*)+0x3bf  (vmThread.cpp:435)
V  [libjvm.so+0x18993e4]  VMThread::loop()+0x84  (vmThread.cpp:502)
V  [libjvm.so+0x18994e7]  VMThread::run()+0x87  (vmThread.cpp:175)
V  [libjvm.so+0x179739a]  Thread::call_run()+0xba  (thread.cpp:217)

We think that this lock ordering problem is limited to an assert and will not cause deadlocks.

There are multiple alternatives to fix this:
1) Don't inflate monitors during safepoints
2) Don't take the Service_lock while safepointed
3) Split Service_lock and create a new lock for the deferred JVMTI events. This lock will have another rank which doesn't conflict with the oopstorage lock.
4) Don't apply non-GC closures while iterating over the root set

We think that (4) is the best approach since it makes the code more robust and prevents similar lock order bugs.

",,,,,,,,,,,JDK-8311025,JDK-8311353,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,"0|i31xqb:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-16 04:27;stefank;It turns out that Singlegen ZGC already do (4), so this bug is limited to Generational ZGC.;;;","2023-06-16 05:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14518
Date: 2023-06-16 11:52:51 +0000;;;","2023-06-20 06:48;dukebot;Changeset: 4e4e586d
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2023-06-20 13:46:49 +0000
URL:       https://git.openjdk.org/jdk/commit/4e4e586dac3f4be15a6488a6b72aa9e2cd5d43db
;;;","2023-06-27 01:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/69
Date: 2023-06-27 08:20:27 +0000;;;",,,,,,,,,,,,,,,,,,,
com/sun/tools/attach/warnings/DynamicLoadWarningTest.java second failure on AIX,JDK-8310191,5103368,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2023-06-16 01:08,2023-07-12 13:16,2023-10-01 09:55,2023-06-18 23:41,21,22,,,,,22,core-svc,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"After push of JDK-8307478 , the following test started to fail on AIX :
com/sun/tools/attach/warnings/DynamicLoadWarningTest.java ; failure output :

java.lang.RuntimeException: 'WARNING: A JVM TI agent has been loaded dynamically' found in stderr
	at jdk.test.lib.process.OutputAnalyzer.stderrShouldNotContain(OutputAnalyzer.java:320)
	at DynamicLoadWarningTest$AppRunner.stderrShouldNotContain(DynamicLoadWarningTest.java:308)
	at DynamicLoadWarningTest.testLoadOneJvmtiAgent(DynamicLoadWarningTest.java:138)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)

Should be handled in a similar way to  JDK-8309549 .",,,,,,,,,,,JDK-8311319,JDK-8310527,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309549,,,,,,,,,,,ppc,,,,,,,,,,aix,,,,,"0|i31xpn:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2023-06-16 03:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14515
Date: 2023-06-16 10:44:47 +0000;;;","2023-06-18 23:41;dukebot;Changeset: 6a63badd
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-06-19 06:39:58 +0000
URL:       https://git.openjdk.org/jdk/commit/6a63badd8ea3e79cd9fc3cb33aff499fc9a6d3f1
;;;","2023-06-21 01:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/45
Date: 2023-06-21 08:27:38 +0000;;;",,,,,,,,,,,,,,,,,,,,
Improve Generational ZGC jtreg testing,JDK-8310187,5103363,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aboldtch,aboldtch,aboldtch,2023-06-16 00:32,2023-07-17 07:02,2023-10-01 09:55,2023-06-20 03:09,21,22,,,,,22,hotspot,,0,genzgc,hgupdate-sync,noreg-self,zgc,,,,,,,,,,,,,,"The current implementation for testing generational ZGC with jtreg is implemented with a filter on the mode flag `ZGenerational`. Because of this only environments which set this flag explicitly will run most of the tests. 
So they get missed in Github Actions and for developers running jtreg locally without supplying the `ZGenerational` flag.

The proposed change here is to introduce two new jtreg requirement properties, `vm.gc.ZGenerational` and `vm.gc.ZSinglegen`. These flags will effectively behave the same as the existing `vm.gc.<GC>` flags but also take the specific ZGC mode in account.

If no gc flags are supplied to jtreg and the `vm.gc.Z` is true (the build includes ZGC) both `vm.gc.ZGenerational` and `vm.gc.ZSinglegen` will be true.

If `-XX:+UseZGC` is supplied then both `vm.gc.ZGenerational` and `vm.gc.ZSinglegen` will also be true.

If `-XX:{+,-}ZGenerational` is supplied then either  `vm.gc.ZGenerational` or `vm.gc.ZSinglegen` be true depending on the flags value.

And if `vm.gc.Z` is false both `vm.gc.ZGenerational` and `vm.gc.ZSinglegen` will be false.

This change also splits the relevant tests into two distinct runs for the two modes. And the respective test ids are set to `ZGenerational` or `ZSinglegen` to make it easier to distinguish the runs.

This also solves the issue that some compiler tests will never run with generational ZGC unless the `TEST_VM_FLAGLESS` is set. This is because the current filter `vm.opt.final.ZGenerational` requires the flag to be explicit, but these compiler tests uses `vm.flagless`. 

The introduction of  `vm.gc.ZGenerational` and `vm.gc.ZSinglegen` harmonizes the way you specify generational / single gen ZGC test with the way it is done for other gcs with `vm.gc.<GC>`",,,,,,,,,,,JDK-8310623,JDK-8311333,,,,,,,,,,,,,,,,,,,,,,JDK-8295210,JDK-8311982,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31xoj:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-06-16 02:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14509
Date: 2023-06-16 09:14:10 +0000;;;","2023-06-20 03:09;dukebot;Changeset: a0595761
Author:    Axel Boldt-Christmas <aboldtch@openjdk.org>
Date:      2023-06-20 10:08:13 +0000
URL:       https://git.openjdk.org/jdk/commit/a0595761ef35c4eec8cb84326a869b9473cd5bba
;;;","2023-06-20 04:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/37
Date: 2023-06-20 11:17:40 +0000;;;",,,,,,,,,,,,,,,,,,,,
Update GitHub Actions to use boot JDK for building jtreg,JDK-8310183,5103359,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cstein,cstein,cstein,2023-06-15 22:57,2023-07-12 23:31,2023-10-01 09:55,2023-06-16 02:59,21,22,,,,,22,infrastructure,,0,noreg-self,,,,,,,,,,,,,,,,,"Updating GitHub Actions to use pre-installed JDK 17 for building jtreg did not work out: https://bugs.openjdk.org/browse/JDK-8309934

Tests building jtreg with the current boot JDK, downloaded/cached/installed by a previous GHA workflow step are showing more stable results - the ""Bad address"" error did not occur (yet). Why that error occurs with pre-installed JDKs is still not understood.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309934,,,,,,,,,,,,,,,generic,,,,,,,,,,windows,,,,,"0|i31xnn:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-06-15 23:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14507
Date: 2023-06-16 06:05:16 +0000;;;","2023-06-16 02:59;dukebot;Changeset: c2b043e6
Author:    Christian Stein <cstein@openjdk.org>
Date:      2023-06-16 09:58:19 +0000
URL:       https://git.openjdk.org/jdk/commit/c2b043e6cd3a4100c771f9cc98eaf41f70ecce3f
;;;",,,,,,,,,,,,,,,,,,,,,
"DateTimeFormatter date formats (ISO_LOCAL_DATE) separated with hyphen, not dash",JDK-8310182,5103111,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2023-06-13 14:11,2023-07-12 13:34,2023-10-01 09:55,2023-06-27 09:15,20,,,,,,22,core-libs,,0,additional-information-received,dcsaw,hgupdate-sync,noreg-doc,webbug,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
According to ISO_LOCAL_DATE's JavaDoc:
This returns an immutable formatter capable of formatting and parsing
     * the ISO-8601 extended local date format.
     * The format consists of:
     * <ul>
     * <li>Four digits or more for the {@link ChronoField#YEAR year}.
     * Years in the range 0000 to 9999 will be pre-padded by zero to ensure four digits.
     * Years outside that range will have a prefixed positive or negative symbol.
     * <li>A dash
     * <li>Two digits for the {@link ChronoField#MONTH_OF_YEAR month-of-year}.
     *  This is pre-padded by zero to ensure two digits.
     * <li>A dash
     * <li>Two digits for the {@link ChronoField#DAY_OF_MONTH day-of-month}.
     *  This is pre-padded by zero to ensure two digits.

The separator which splits years from months and months from days is the *hyphen-minus* (U+0x002D), ASCII's ambiguous character which is the only one resembling minuses, hyphens and dashes, not an actual dash, so calling it a dash is at least misleading.

Other DateTimeFormatter date formats (ISO_ORDINAL_DATE and ISO_WEEK_DATE) must have the same issue.

ISO 8601 uses hyphens as separators, so actually returning dashes would not comply. On the other hand, the hyphen-minus is the CSS hyphenate-character, so just changing the documentation will leave the issue that web pages consider such dates as containing line breaking opportunities, causing dates at the end of a line to be split on 2 lines. One solution might be to use the NON-BREAKING HYPHEN (U+0x2011).

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
ImHex can be used to open DateTimeFormatter.java and validate the issue, which can be found at line 801 (among others).


FREQUENCY : always


",,,,,,,,,,,JDK-8310977,JDK-8311349,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i31w4r:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2023-06-14 18:46;tongwan;Requested a simple reproducer from the submitter.;;;","2023-06-15 22:55;tongwan;Additional information from the submitter:
I would say this is a design/documentation issue. I guess the best way to see it is to check the code.
The impact this has on word breaking on the Web, or just the reported issue, i.e. that ISO_LOCAL_DATE et al contain hyphen-minuses? Hyphens, minus signs and dashes are visually very similar, so reproducing this in console may be difficult to appreciate (if not impossible, depending on your fonts).
To examine the code, you can use a hexadecimal editor. ImHex is an open source (free) hex editor which lets you perform text search, so you can quickly get to the file's relevant part.
;;;","2023-06-16 11:48;naoto;Modifying the document from `dash` to `hyphen-minus (U+002D)` is the least disruptive solution.;;;","2023-06-22 13:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14620
Date: 2023-06-22 20:36:48 +0000;;;","2023-06-27 09:15;dukebot;Changeset: ec45bd64
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-06-27 16:13:20 +0000
URL:       https://git.openjdk.org/jdk/commit/ec45bd64d504d579aef54c924fb8ca75a944036f
;;;","2023-06-27 10:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/70
Date: 2023-06-27 17:07:50 +0000;;;",,,,,,,,,,,,,,,,,
JDK 11 G1 crash during full GC with +UseStringDeduplication,JDK-8310176,5103352,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,manc,manc,manc,2023-06-15 18:33,2023-08-02 04:04,2023-10-01 09:55,2023-07-10 12:59,11,12,,,,,11.0.21,hotspot,,0,gc-g1,google-interest,jdk11u-fix-request,jdk11u-fix-yes,sustaining,,,,,,,,,,,,,"We run into crashes in JDK 11 with +UseStringDeduplication. The root cause is that StringDedupTable::unlink_or_oops_do() tries to load from an adjusted pointer during G1 Full GC adjust task, i.e. load *p after calling cl->keep_alive(p). The value of p has been updated to a new location, but the new location does not contain a valid object because the object at old p has not been copied yet.

This bug no longer exists in JDK 13 thanks to JDK-8213229, which made this change to g1FullGCAdjustTask.cpp:
```
---  _adjust_string_dedup(NULL, &_adjust, G1StringDedup::is_enabled()) {
+++ _string_dedup_cleaning_task(NULL, &_adjust, false) {
```
This avoids resizing and rehashing StringDedupTable during full GC.

We can fix the bug in JDK 11 with a two-line change, without backporting JDK-8213229.

Attached is a stack trace when this crash happens:

#  SIGSEGV (0xb) at pc=0x00007fc9936b48e5 (sent by kill), pid=6664, tid=6696
...
# Problematic frame:
# V  [libjvm.so+0x6b48e5]  AltHashing::halfsiphash_32(unsigned long, unsigned char const*, int)+0x35
#
...
Current thread (0x000057e67d9e4000):  GCTaskThread ""GC Thread#1"" [stack: 0x00007fc95b2fe000,0x00007fc95b400000] [id=6696]

Stack: [0x00007fc95b2fe000,0x00007fc95b400000],  sp=0x00007fc95b3fe268,  free space=1024k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x6b48e5]  AltHashing::halfsiphash_32(unsigned long, unsigned char const*, int)+0x35
V  [libjvm.so+0x116fd87]  StringDedupTable::unlink_or_oops_do(StringDedupUnlinkOrOopsDoClosure*, unsigned long, unsigned long, unsigned int)+0x117
V  [libjvm.so+0x116fbb4]  StringDedupTable::unlink_or_oops_do(StringDedupUnlinkOrOopsDoClosure*, unsigned int)+0x94
V  [libjvm.so+0xa5776c]  G1FullGCAdjustTask::work(unsigned int)+0x24c
V  [libjvm.so+0x12fe33a]  GangWorker::loop()+0x6a
V  [libjvm.so+0x12fe1ae]  AbstractGangWorker::run()+0x1e
V  [libjvm.so+0x1233b8b]  Thread::call_run()+0xcb
V  [libjvm.so+0x10604d8]  thread_native_entry(Thread*)+0x348
C  [libpthread.so.0+0x74e8]  start_thread+0xc8


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8213229,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31xm3:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-15 18:47;manc;Fix request [11u]

This fixes a bug that only affects JDK 11 and JDK 12. I have created a PR: https://github.com/openjdk/jdk11u-dev/pull/1948.
Low risk. All tier1 tests passed.;;;","2023-06-15 18:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1948
Date: 2023-06-16 01:43:48 +0000;;;","2023-06-29 13:20;manc;Fix request [11u]

This fixes a bug that only affects JDK 11 and JDK 12. https://github.com/openjdk/jdk11u-dev/pull/1948 has been reviewed with an LGTM.
The PR contains a new test that exposes this bug.
Low risk. All tier1 jtreg tests passed (which include the tests TestStringDeduplication*.java for -XX:+UseStringDeduplication).;;;","2023-07-10 12:59;dukebot;Changeset: e2431290
Author:    Man Cao <manc@openjdk.org>
Committer: Jiangli Zhou <jiangli@openjdk.org>
Date:      2023-07-10 19:58:26 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/e24312905bbb976810c2a47990fede28d30d1802
;;;","2023-08-02 04:04;dukebot;Changeset: e2431290
Author:    Man Cao <manc@openjdk.org>
Committer: Jiangli Zhou <jiangli@openjdk.org>
Date:      2023-07-10 19:58:26 +0000
URL:       https://git.openjdk.org/jdk11u/commit/e24312905bbb976810c2a47990fede28d30d1802
;;;",,,,,,,,,,,,,,,,,,
Bump version numbers for 21.0.1,JDK-8310171,5103346,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,robm,robm,robm,2023-06-15 14:25,2023-09-18 14:12,2023-10-01 09:55,2023-06-15 17:02,,,,,,,21.0.1,infrastructure,,0,jdk21u-fix-request,jdk21u-fix-yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31xkr:",9223372036854775807,b01,,,,,,,,,,,"2023-06-15 14:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/1
Date: 2023-06-15 21:33:56 +0000;;;","2023-06-15 17:03;dukebot;Changeset: 40eb08d4
Author:    Rob McKenna <robm@openjdk.org>
Date:      2023-06-16 00:00:41 +0000
URL:       https://git.openjdk.org/jdk21u/commit/40eb08d43f9af03052b3f173fbe433736147119f
;;;",,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Specialize full-GC loops,JDK-8310156,5103327,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-06-15 08:28,2023-06-20 07:33,2023-10-01 09:55,2023-06-20 07:33,repo-lilliput-17,,,,,,repo-lilliput-17,hotspot,,0,amazon-interest,lilliput,,,,,,,,,,,,,,,,We already ported most of JDK-8305896 to Lilliput/JDK17. What's missing is the specialization of the full-GC loops so that performance on the legacy path is not impacted and performance on the alt-GC-forwarding path is minimized.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i31xgj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-15 09:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/32
Date: 2023-06-15 15:59:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
RandomCommandsTest fails due to unexpected VM exit code after JDK-8282797,JDK-8310143,5103309,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,rcastanedalo,rcastanedalo,2023-06-15 06:06,2023-07-12 13:20,2023-10-01 09:55,2023-06-21 00:06,22,,,,,,22,hotspot,,0,compilercontrol,intermittent-low-frequency,noreg-self,oracle-triage-22,,,,,,,,,,,,,,"RandomCommandsTest fails intermittently (with fairly low frequency) with the following exception:

 stdout: [CompileCommand: print compiler/compilercontrol@%/share/pool/subpack/Klass.*nonexistent()V bool print = true
CompileCommand: ControlIntrinsic nonexistent*.$method* const char* ControlIntrinsic = '-maxF'
CompileCommand: An error occurred during parsing
Error: Unrecognized intrinsic detected in ControlIntrinsic: maxF
Line: 'ControlIntrinsic nonexistent* $method* -maxF'

Usage: '-XX:CompileCommand=<option>,<method pattern>' - to set boolean option to true
Usage: '-XX:CompileCommand=<option>,<method pattern>,<value>'
Use:   '-XX:CompileCommand=help' for more information and to list all option.

];
 stderr: [Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
]
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)
	at compiler.compilercontrol.share.scenario.Scenario.execute(Scenario.java:118)
	at compiler.compilercontrol.share.MultiCommand.test(MultiCommand.java:103)
	at compiler.compilercontrol.mixed.RandomCommandsTest.main(RandomCommandsTest.java:43)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1583)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]

Also seen for other intrinsics, e.g.:

Line: 'ControlIntrinsic,*,- (Ljava/lang/Float;)Ljava/lang/Double;,+fabs'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282797,,,,,,,,,,,,,,,,,,,22,,,,,,,"0|i31xcj:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-15 06:59;thartmann;This does reproduce for me:

java -XX:CompileCommand=ControlIntrinsic,*,""- (Ljava/lang/Float;)Ljava/lang/Double;"",+fabs
CompileCommand: ControlIntrinsic *.-(Ljava/lang/Float;)Ljava/lang/Double; const char* ControlIntrinsic = '+fabs'
CompileCommand: An error occurred during parsing
Error: Unrecognized intrinsic detected in ControlIntrinsic: fabs
Line: 'ControlIntrinsic,*,- (Ljava/lang/Float;)Ljava/lang/Double;,+fabs'

Usage: '-XX:CompileCommand=<option>,<method pattern>' - to set boolean option to true
Usage: '-XX:CompileCommand=<option>,<method pattern>,<value>'
Use:   '-XX:CompileCommand=help' for more information and to list all option.

Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.

I think it's a regression from JDK-8282797. Before, we would print the same error but not exit the VM, which the test does not expect.;;;","2023-06-15 07:05;thartmann;ILW = Test fails because invalid CompileCommand now exits the VM (test bug), intermittent with single randomized test, no workaround = MLH = P4  ;;;","2023-06-16 03:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14514
Date: 2023-06-16 10:28:12 +0000;;;","2023-06-19 04:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14538
Date: 2023-06-19 11:27:10 +0000;;;","2023-06-21 00:06;dukebot;Changeset: 67fbd873
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-06-21 07:05:41 +0000
URL:       https://git.openjdk.org/jdk/commit/67fbd87378a9b3861f1676977f9f2b36052add29
;;;",,,,,,,,,,,,,,,,,,
NMT: thread count in Thread section of VM.native_memory output confusing with virtual threads,JDK-8310134,5103297,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gziemski,alanb,alanb,2023-06-15 04:11,2023-08-21 14:00,2023-10-01 09:55,2023-08-15 10:08,22,,,,,,22,hotspot,,0,loom,nmt,,,,,,,,,,,,,,,,"An application with a few thousand virtual threads seems this in the VM.native_memory output

Thread (reserved=53MB, committed=6MB)
             (thread #53)
             (stack: reserved=53MB, committed=6MB)

""thread #53"" is a bit confusing here as it's very different to the number of j.l.Threads in use. Given the output is native memory usage then maybe the prefix for this line should say that it's the number of native thread stacks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314227,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31x9v:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-31 14:54;gziemski;I'm not totally against augmenting the word ""Thread"" to distinguish it from ""Loom thread"" if we need to, but are j.l.Threads visible in any way or form in NMT output that we need to do this?

If we have to rename ""Thread"" to ""Native Thread"", do we an official designation for ""Loom threads""?

Does anyone have an opinion here? [~dholmes][~tstuefe];;;","2023-07-31 20:15;dholmes;I consider everything reported by NMT to be native so I'm not sure why anyone would try to map this output to the number of virtual threads. My only concern with actually stating ""Native Thread"" is that someone may then ask ""where are the non-native threads?"". I'm not convinced this is really a problem that needs addressing.;;;","2023-08-01 04:10;alanb;The Oracle products that were confused by the output interpreted ""(thread #53)"" to mean 53 threads, even though the application had several thousands of threads. The suggestion in this JBS issue was just to adjust the wording to make it clearer that its 53 native thread stacks, there was no suggestion to say anything about virtual threads or invite questions about same.;;;","2023-08-01 18:49;dholmes;Okay ""Native Threads"" can be applied.;;;","2023-08-02 08:33;gziemski;So the suggestion is to change the output from:

Thread (reserved=53MB, committed=6MB) 
             (thread #53) 
             (stack: reserved=53MB, committed=6MB) 

to:

Thread (reserved=53MB, committed=6MB) 
             (native threads stacks=53) 
             (stack: reserved=53MB, committed=6MB) 

or something similar, did I get this right?;;;","2023-08-02 19:43;dholmes;I was thinking change:

Thread (reserved=53MB, committed=6MB)
             (thread #53)
             (stack: reserved=53MB, committed=6MB)

to: 

Native Threads (reserved=53MB, committed=6MB)
                         (thread #53)
                         (stack: reserved=53MB, committed=6MB)

;;;","2023-08-03 04:22;alanb;It would also be helpful to change ""thread"" to ""threads"" in the second line, only because #<threadId> is used in other parts of the system and people could be forgiven for reading this as thread #53 rather the number of native thread stacks.;;;","2023-08-03 08:17;gziemski;From:

Thread (reserved=53MB, committed=6MB) 
             (thread #53) 
             (stack: reserved=53MB, committed=6MB) 

to: 

Native Threads (reserved=53MB, committed=6MB) 
                         (threads=53) 
                         (stack: reserved=53MB, committed=6MB) 

Are we sure we need to change ""Thread"" -> ""Native Threads""?;;;","2023-08-03 23:52;dholmes;> Are we sure we need to change ""Thread"" -> ""Native Threads""? 

Yes that is the critical distinction Alan is looking for.;;;","2023-08-04 03:57;alanb;No, I wasn't looking for the heading to change, it was just the line ""thread #53"" which was being read by some people as ""53 threads"" when it's actually the number of native thread stacks that are tracked.

;;;","2023-08-06 15:43;dholmes;It makes much more sense to me to clearly mark the whole section as ""Native Threads"" than just the one line with the thread count. The latter would just invite confusion because people may think that different sets of threads are involved.;;;","2023-08-10 09:22;gziemski;I see ""#"" used throughout the output to mean ""count"" or ""instances"". If we want to fix the threads related one, we should keep things consistent and make the same change in all the other places.

Here is what the full output looks like right now:

Total: reserved=10313678607, committed=734367503
       malloc: 69676815 #169891
       mmap:   reserved=10244001792, committed=664690688

-                 Java Heap (reserved=8589934592, committed=541065216)
                            (mmap: reserved=8589934592, committed=541065216) 
 
-                     Class (reserved=1074097725, committed=2584125)
                            (classes #3493)
                            (  instance classes #3183, array classes #310)
                            (malloc=355901 #8996) (peak=356301 #8999) 
                            (mmap: reserved=1073741824, committed=2228224) 
                            (  Metadata:   )
                            (    reserved=67108864, committed=13631488)
                            (    used=13478112)
                            (    waste=153376 =1.13%)
                            (  Class space:)
                            (    reserved=1073741824, committed=2228224)
                            (    used=2038840)
                            (    waste=189384 =8.50%)
 
-                    Thread (reserved=41001424, committed=41001424)
                            (thread #32)
                            (stack: reserved=40894464, committed=40894464)
                            (malloc=65728 #221) (peak=76448 #231) 
                            (arena=41232 #70) (peak=486120 #32)
 
-                      Code (reserved=255918536, committed=10678728)
                            (malloc=2286024 #65940) (peak=2286104 #65944) 
                            (mmap: reserved=253632512, committed=8392704) 
                            (arena=0 #0) (peak=984 #1)
 
-                        GC (reserved=224173983, committed=66969503)
                            (malloc=22302623 #1348) (peak=22335503 #1348) 
                            (mmap: reserved=201871360, committed=44666880) 
 
-                 GCCardSet (reserved=30160, committed=30160)
                            (malloc=30160 #390) (at peak) 
 
-                  Compiler (reserved=291416, committed=291416)
                            (malloc=91112 #209) (peak=105700 #209) 
                            (arena=200304 #4) (peak=42702104 #14)
 
-                  Internal (reserved=2245988, committed=2245988)
                            (malloc=2213220 #62071) (peak=2214225 #62082) 
                            (mmap: reserved=32768, committed=32768) 
 
-                     Other (reserved=169904, committed=169904)
                            (malloc=169904 #6) (at peak) 
 
-                    Symbol (reserved=3867820, committed=3867820)
                            (malloc=1240948 #9472) (at peak) 
                            (arena=2626872 #1) (at peak)
 
-    Native Memory Tracking (reserved=3041728, committed=3041728)
                            (malloc=323472 #3661) (peak=323936 #3664) 
                            (tracking overhead=2718256)
 
-        Shared class space (reserved=16777216, committed=13770752, readonly=0)
                            (mmap: reserved=16777216, committed=13770752) 
 
-               Arena Chunk (reserved=33908576, committed=33908576)
                            (malloc=33908576 #1205) (peak=45552872 #1257) 
 
-                   Tracing (reserved=313, committed=313)
                            (malloc=313 #9) (at peak) 
 
-                Statistics (reserved=128, committed=128)
                            (malloc=128 #2) (at peak) 
 
-                 Arguments (reserved=178, committed=178)
                            (malloc=178 #5) (at peak) 
 
-                    Module (reserved=67672, committed=67672)
                            (malloc=67672 #1257) (at peak) 
 
-                 Safepoint (reserved=8192, committed=8192)
                            (mmap: reserved=8192, committed=8192) 
 
-           Synchronization (reserved=961784, committed=961784)
                            (malloc=961784 #14949) (peak=961848 #14950) 
 
-            Serviceability (reserved=17512, committed=17512)
                            (malloc=17512 #27) (peak=17680 #29) 
 
-                 Metaspace (reserved=67145056, committed=13667680)
                            (malloc=36192 #28) (at peak) 
                            (mmap: reserved=67108864, committed=13631488) 
 
-      String Deduplication (reserved=608, committed=608)
                            (malloc=608 #8) (at peak) 
 
-           Object Monitors (reserved=18096, committed=18096)
                            (malloc=18096 #87) (at peak) ;;;","2023-08-10 09:36;gziemski;We could have something like this perhaps:

Total: reserved=10313678607, committed=734367503
       malloc: 69676815 count=169891
       mmap:   reserved=10244001792, committed=664690688

-                 Java Heap (reserved=8589934592, committed=541065216)
                            (mmap: reserved=8589934592, committed=541065216) 
 
-                     Class (reserved=1074097725, committed=2584125)
                            (count=3493)
                            (instance classes count=3183, array classes count=310)
                            (malloc=355901 count=8996) (peak=356301 count=8999) 
                            (mmap: reserved=1073741824, committed=2228224) 
                            (  Metadata:   )
                            (    reserved=67108864, committed=13631488)
                            (    used=13478112)
                            (    waste=153376 =1.13%)
                            (  Class space:)
                            (    reserved=1073741824, committed=2228224)
                            (    used=2038840)
                            (    waste=189384 =8.50%)
 
-                    Thread (reserved=41001424, committed=41001424)
                            (count=32)
                            (stack: reserved=40894464, committed=40894464)
                            (malloc=65728 count=221) (peak=76448 count=231) 
                            (arena=41232 count=70) (peak=486120 count=32)
 
-                      Code (reserved=255918536, committed=10678728)
                            (malloc=2286024 count=65940) (peak=2286104 count=65944) 
                            (mmap: reserved=253632512, committed=8392704) 
                            (arena=0 count=0) (peak=984 count=1)
 
-                        GC (reserved=224173983, committed=66969503)
                            (malloc=22302623 count=1348) (peak=22335503 count=1348) 
                            (mmap: reserved=201871360, committed=44666880) 
 
-                 GCCardSet (reserved=30160, committed=30160)
                            (malloc=30160 count=390) (at peak) 
 
-                  Compiler (reserved=291416, committed=291416)
                            (malloc=91112 count=209) (peak=105700 count=209) 
                            (arena=200304 count=4) (peak=42702104 count=14)
 
-                  Internal (reserved=2245988, committed=2245988)
                            (malloc=2213220 count=62071) (peak=2214225 count=62082) 
                            (mmap: reserved=32768, committed=32768) 
 
-                     Other (reserved=169904, committed=169904)
                            (malloc=169904 count=6) (at peak) 
 
-                    Symbol (reserved=3867820, committed=3867820)
                            (malloc=1240948 count=9472) (at peak) 
                            (arena=2626872 count=1) (at peak)
 
-    Native Memory Tracking (reserved=3041728, committed=3041728)
                            (malloc=323472 count=3661) (peak=323936 count=3664) 
                            (tracking overhead=2718256)
 
-        Shared class space (reserved=16777216, committed=13770752, readonly=0)
                            (mmap: reserved=16777216, committed=13770752) 
 
-               Arena Chunk (reserved=33908576, committed=33908576)
                            (malloc=33908576 count=1205) (peak=45552872 count=1257) 
 
-                   Tracing (reserved=313, committed=313)
                            (malloc=313 count=9) (at peak) 
 
-                Statistics (reserved=128, committed=128)
                            (malloc=128 count=2) (at peak) 
 
-                 Arguments (reserved=178, committed=178)
                            (malloc=178 count=5) (at peak) 
 
-                    Module (reserved=67672, committed=67672)
                            (malloc=67672 count=1257) (at peak) 
 
-                 Safepoint (reserved=8192, committed=8192)
                            (mmap: reserved=8192, committed=8192) 
 
-           Synchronization (reserved=961784, committed=961784)
                            (malloc=961784 count=14949) (peak=961848 count=14950) 
 
-            Serviceability (reserved=17512, committed=17512)
                            (malloc=17512 count=27) (peak=17680 count=29) 
 
-                 Metaspace (reserved=67145056, committed=13667680)
                            (malloc=36192 count=28) (at peak) 
                            (mmap: reserved=67108864, committed=13631488) 
 
-      String Deduplication (reserved=608, committed=608)
                            (malloc=608 count=8) (at peak) 
 
-           Object Monitors (reserved=18096, committed=18096)
                            (malloc=18096 count=87) (at peak) ;;;","2023-08-10 09:37;gziemski;Needs CSR approval I think.;;;","2023-08-10 09:45;gziemski;The minimum change here would be go from:

- Class (reserved=1074097725, committed=2584125) 
                            (classes #3493) 
...
- Thread (reserved=41001424, committed=41001424) 
                            (thread #32) 

to:

- Class (reserved=1074097725, committed=2584125) 
                            (classes #3493) 
...
- Thread (reserved=41001424, committed=41001424) 
                            (threads #32) 

but even that needs CSR I think, and if we need to tweak the output and go through the approval process, then I would take the opportunity to clean this more throughly and change all ""#"" to ""count="".

- Class (reserved=1074097725, committed=2584125) 
                            (count=3493) 
...
- Thread (reserved=41001424, committed=41001424) 
                            (count=32) 

etc...

Any opinions?;;;","2023-08-10 16:02;dholmes;The output format is not specified so I don't think a CSR request is needed for a minor tweak, but we also need to be aware of any tests parsing/matching the output. I don't see any need to change anything except adding the word ""native"" in one of two places for this issue. If you want to fix the grammar so plurals are used that would be a separate issue please.

;;;","2023-08-11 05:51;alanb;I don't have an opinion on the heading. Just to say again that the original confusion/discussion was due to the word ""thread"" in the summary output. If this is changed to ""threads"" (plural) then it would go a long way to avoid someone thinking this output is for thread with id 19.

```
-                    Thread (reserved=19511KB, committed=19511KB)
                            (thread #19)
                            (stack: reserved=19456KB, committed=19456KB)
                            (malloc=33KB #118) 
                            (arena=21KB #37)
```


 This issue was created because the summary output says ""thread"" rather than ""threads"". ;;;","2023-08-13 14:51;dholmes;>  This issue was created because the summary output says ""thread"" rather than ""threads"".

[~alanb] I did not get that from any of the previous discussion nor the bug description!

>  maybe the prefix for this line should say that it's the number of native thread stacks. 

The extra bit of information here is the word ""native"";;;","2023-08-14 00:32;alanb;Just to say again, the original confusion was the line ""(thread #53)"" as someone interpreted it as the thread with id 53. We use #<threadId> in string representations, thread dumps, and a few other places so maybe not too surprising that it was mis-read. The number 53 is the number of native thread stacks that are tracked so the line could be changed to say that, or minimally changing ""thread"" to ""threads"" that it is at least clear that it's a thread count. I don't have any strong opinion on the heading.;;;","2023-08-14 05:35;jsjolen;""number of native threads: 53"", ""native thread count: 53"", ""native threads: 53"" would all be more descriptive.;;;","2023-08-14 08:00;gziemski;If you look at the bigger picture (all the output) the colon character is used to group a subsection (i.e. more than one value reported), ex:

                            (stack: reserved=19456KB, committed=19456KB) 

Here we report only one value, so if anything it should be:

""number of native threads=53"", ""native thread count=53"", ""native threads=53""

but personally I think we should simply go with ""threads=53"" and handle any bigger/remaining issues, like David suggested, in a follow up.;;;","2023-08-14 13:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15277
Date: 2023-08-14 19:33:32 +0000;;;","2023-08-15 10:08;dukebot;Changeset: f2399546
Author:    Gerard Ziemski <gziemski@openjdk.org>
Date:      2023-08-15 17:06:28 +0000
URL:       https://git.openjdk.org/jdk/commit/f23995465767fa7319d2f6fac62b6ec74c0e4986
;;;"
Effectivelly final condition not enforced in guards for binding variables from the same case,JDK-8310133,5103295,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2023-06-15 04:09,2023-07-12 13:20,2023-10-01 09:55,2023-06-21 02:18,21,,,,,,22,tools,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"Consider this snippet of code:
---
public class Test {

    public static void main(String[] args) {
        Object o = null;
        switch (o) {
            case String s when s.isEmpty() -> {
                s = null;
            }
            default -> {} 
        }
    }
}
---

javac accepts this code, even though 's' is not effectively final and is used inside the guard. But, variables declared outside of the guard must be (effectively) final.",,,,,,,,,,,JDK-8310503,JDK-8311327,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31x9f:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-15 09:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14498
Date: 2023-06-15 16:21:59 +0000;;;","2023-06-21 02:18;dukebot;Changeset: 01623f6a
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-06-21 09:16:12 +0000
URL:       https://git.openjdk.org/jdk/commit/01623f6a5724d3eb250c48656be0aaf28df11750
;;;","2023-06-21 02:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/46
Date: 2023-06-21 09:17:57 +0000;;;",,,,,,,,,,,,,,,,,,,,
C2: assert(false) failed: scalar_input is neither phi nor a matchin reduction,JDK-8310130,5103292,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,chagedorn,chagedorn,2023-06-15 03:48,2023-07-12 13:36,2023-10-01 09:55,2023-06-27 22:53,21,22,,,,,22,hotspot,,0,c2,c2-superword,hgupdate-sync,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-22,regression,,,,,,,,,,"The attached Java Fuzzer test starts to fail after JDK-8302652:

To reproduce:
$ java -Xcomp -XX:CompileCommand=compileonly,Test::* Test.java
$ java -Xcomp -XX:CompileCommand=compileonly,Reduced::* Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S9638/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7cab5968-cfac-4917-b50c-ee11433deb3c/runs/89e28e37-02bc-4ad0-8809-7a3c3140d816/workspace/open/src/hotspot/share/opto/loopopts.cpp:4249), pid=1696577, tid=1696600
#  assert(false) failed: scalar_input is neither phi nor a matchin reduction
#
# JRE version: Java(TM) SE Runtime Environment (21.0+26) (fastdebug build 21-ea+26-LTS-2328)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+26-LTS-2328, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12b07f6]  PhaseIdealLoop::move_unordered_reduction_out_of_loop(IdealLoopTree*)+0x896
..........
Command Line: -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S161740/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a03df349-195e-43a5-997a-9d6208db5f95/runs/30281575-d526-4e59-b473-1cda18ba846e/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_javafuzzer_BigTest_java/tmp Test
........
Current CompileTask:
C2:    471    8    b  4       Test::vMeth (313 bytes)

Stack: [0x00007f0aeda00000,0x00007f0aedb00000],  sp=0x00007f0aedafac00,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12b07f6]  PhaseIdealLoop::move_unordered_reduction_out_of_loop(IdealLoopTree*)+0x896  (loopopts.cpp:4249)
V  [libjvm.so+0x1296c54]  PhaseIdealLoop::build_and_optimize()+0x1414  (loopnode.cpp:4673)
V  [libjvm.so+0x9f2939]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x3b9  (loopnode.hpp:1124)
V  [libjvm.so+0x9ef4a7]  Compile::Optimize()+0xe97  (compile.cpp:2156)
V  [libjvm.so+0x9f16d6]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1b96  (compile.cpp:842)
V  [libjvm.so+0x84b3e4]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x3c4  (c2compiler.cpp:118)
V  [libjvm.so+0x9fd5e0]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa00  (compileBroker.cpp:2265)
V  [libjvm.so+0x9fe468]  CompileBroker::compiler_thread_loop()+0x618  (compileBroker.cpp:1944)
V  [libjvm.so+0xeb651c]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:719)
V  [libjvm.so+0x1795d7a]  Thread::call_run()+0xba  (thread.cpp:217)
V  [libjvm.so+0x149623c]  thread_native_entry(Thread*)+0x11c  (os_linux.cpp:778)
",,,,,,,,,,,JDK-8311358,JDK-8311058,,,,,,,,,,,,,,,,,,,,,,JDK-8302652,,,,,,,,"2023-06-15 03:46;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/104311/FuzzerUtils.java","2023-06-15 03:46;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/104310/Reduced.java","2023-06-15 06:38;epeter;Reduced2.java;https://bugs.openjdk.org/secure/attachment/104320/Reduced2.java","2023-06-15 07:55;epeter;Reduced3.java;https://bugs.openjdk.org/secure/attachment/104321/Reduced3.java","2023-06-15 03:46;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/104312/Test.java","2023-06-15 03:48;chagedorn;hs_err_pid1696577.log;https://bugs.openjdk.org/secure/attachment/104309/hs_err_pid1696577.log",,,,,,,,,b24,21,,,,,,,"0|i31x8r:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-15 03:49;chagedorn;ILW = C2 assertion failure, single Java Fuzzer test, use -XX:-UseSuperWord or disable compilation of affected method = HLM = P3;;;","2023-06-15 05:27;epeter;Had a quick look. The reduction loop looks like this:

(rr) p current->dump_bfs(10,current,""#dA"")
dist apd dump
---------------------------------------------
   5   6   852  Phi  === 844 497 999  [[ 834 ]]  #long !orig=[752],[683],[641],[331],253 !jvms: Reduced::test @ bci:36 (line 16)
   4   6   834  OrL  === _ 852 835  [[ 828 ]]  !orig=[742],[668],[321],255 !jvms: Reduced::test @ bci:39 (line 16)
   3   6   828  OrL  === _ 834 829  [[ 817 ]]  !orig=[734],[321],255 !jvms: Reduced::test @ bci:39 (line 16)
   2   6   817  OrL  === _ 828 818  [[ 816 ]]  !orig=[668],[321],255 !jvms: Reduced::test @ bci:39 (line 16)
   1   6   816  OrL  === _ 817 824  [[ 999 ]]  !orig=[321],255 !jvms: Reduced::test @ bci:39 (line 16)
   0   0   999  OrReductionV  === _ 816 998  [[ 320 852 ]]  !orig=[742],[668],[321],255 !jvms: Reduced::test @ bci:39 (line 16)

This means we have a mix of scalar and vector reductions. This is probably due to partial reduction.
I added the assert we hit here because I was not sure if something like this could ever happen. Now we have an example.
I'll investigate more, but most likely we will just remove the assert and accept the bailout of this specific optimization.;;;","2023-06-15 06:39;epeter;Reduced it a bit more:

java -Xcomp -XX:-TieredCompilation -XX:CompileCommand=compileonly,Reduced2::test -XX:+TraceNewVectors -XX:+TraceSuperWord -XX:UseAVX=2 -XX:+TraceLoopOpts Reduced2.java;;;","2023-06-15 07:56;epeter;Constructed a quite different example of the same issue:

./java -Xcomp -XX:-TieredCompilation -XX:CompileCommand=compileonly,Reduced3::test -XX:+TraceNewVectors -XX:+TraceSuperWord -XX:+TraceLoopOpts -XX:MaxVectorSize=16 Reduced3.java;;;","2023-06-19 01:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14494
Date: 2023-06-15 14:42:14 +0000;;;","2023-06-27 22:53;dukebot;Changeset: 526dba1a
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-06-28 05:52:26 +0000
URL:       https://git.openjdk.org/jdk/commit/526dba1a2942e444bf11d03d8eaf014b5ef20ccf
;;;","2023-06-28 07:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/77
Date: 2023-06-28 14:38:43 +0000;;;",,,,,,,,,,,,,,,,
SetupNativeCompilation LIBS should match the order of the other parameters,JDK-8310129,5103291,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-06-15 03:41,2023-07-12 13:12,2023-10-01 09:55,2023-06-15 09:32,,,,,,,22,infrastructure,,0,,,,,,,,,,,,,,,,,,"I made the mistake of complicating the target pairs of LIBS and reversing the order they're specified in SetupNativeCompilation. They should match the sequence used in the other arguments, and since they're not used yet I'll take the opportunity to clean this up",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31x8j:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-06-15 03:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14489
Date: 2023-06-15 10:41:29 +0000;;;","2023-06-15 09:32;dukebot;Changeset: 653a8d0c
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-06-15 16:29:31 +0000
URL:       https://git.openjdk.org/jdk/commit/653a8d0cce267a0087f8b157a86c713e4ec5e1c1
;;;",,,,,,,,,,,,,,,,,,,,,
Switch with unnamed patterns erroneously non-exhaustive,JDK-8310128,5103290,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abimpoudis,abimpoudis,abimpoudis,2023-06-15 03:14,2023-07-12 13:14,2023-10-01 09:55,2023-06-16 00:06,21,,,,,,22,tools,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"sealed interface Animal permits Dog, Chicken {};
record Dog(String name, int age) implements Animal {};
record Chicken(String name, int age) implements Animal {};

void main() { 
    Animal a1 = new Dog(""Yodel"", 4);
    Animal a2 = new Chicken(""Purple Head"", 5);

    switch (a1) {
        case Dog(var name, _) -> System.out.println(""Dog: "" + name);
        case Chicken(var name, _) -> System.out.println(""Chicken: "" + name);
        // default -> System.out.println(""Unknown animal"");
    }
}",,,,,,,,,,,JDK-8310430,JDK-8310199,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,"0|i31x8b:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-15 03:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14488
Date: 2023-06-15 10:23:42 +0000;;;","2023-06-16 00:06;dukebot;Changeset: 32243ef4
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-06-16 07:03:28 +0000
URL:       https://git.openjdk.org/jdk/commit/32243ef47df75241302e243b4fd9627d686437fe
;;;","2023-06-16 01:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/23
Date: 2023-06-16 08:08:10 +0000;;;",,,,,,,,,,,,,,,,,,,,
C1: Missing receiver null check in Reference::get intrinsic,JDK-8310126,5103288,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,davleopo,davleopo,2023-06-15 03:08,2023-07-24 21:47,2023-10-01 09:55,2023-06-18 22:11,11,17,20,21,22,,22,hotspot,,0,amazon-interest,c1,hgupdate-sync,intrinsic,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-22,,,,,,,,,,,"Originally reported against Graal https://github.com/oracle/graal/issues/6350 .

The following code segfaults in C1 compiled tier 1 code with graal (only the tier 1 version crashes, the tier 3 compile of it does not).

#############################
import java.lang.ref.WeakReference;
import java.math.MathContext;

class T {
  int f() {
    int q = 43837, p;
    MathContext u = null;
    for (int w = 648; w < 9230; w += 1)
      try {
        p = u.getPrecision();
      } catch (Throwable x) {
      } finally {
      }
    WeakReference r = null;
    try {
      while (r.get() != null) {}
    } catch (Throwable x) {
    } finally {
    }
    return (int) (long) q;
  }

  public static void main(String[] g) {
    T t = new T();
    for (; ; ) t.f();
  }
}
#############################

Reproduce with /jdk-21/bin/java -XX:TieredStopAtLevel=1 T1 

Does not crash with regular tiered compilation because c2 compile of this is fine. Crashes with Graal because graal does not OSR compile this loop because the call target method of u.getPrecision(); is not resolved (in fact its always null and throws). MDO has exception seen but no profile so graal rejects OSR. This leads to C1 tier 1 compile of it which fails. Simulate with stop at tier 1 to fault immediately. Theoretically if a similar example would trigger C2 rejecting compile of such an example this could lead to a tier 1 compile of it without graal and expose the problem as well. ","(Reproduced with OpenJDK 64-Bit Server VM (build 21-ea+26-2328, mixed mode, sharing))",,,,,,,,,,JDK-8312670,JDK-8311793,JDK-8311329,JDK-8311037,JDK-8310602,,,,,,,,,,,,,,,,,,,,,,,JDK-8201543,,,,"2023-06-15 01:40;davleopo;T1.java;https://bugs.openjdk.org/secure/attachment/104305/T1.java","2023-06-15 05:37;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/104319/Test.java","2023-06-15 01:40;davleopo;hs_err_pid86805.log;https://bugs.openjdk.org/secure/attachment/104306/hs_err_pid86805.log",,,,,,,,,,,,b12,11,,,,,,,"0|i31x7v:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-15 05:37;thartmann;I attached a simplified Test.java. The root cause is a missing argument null check in the '_Reference_get' C1 intrinsic.

Run with java -XX:TieredStopAtLevel=1 -XX:CompileCommand=compileonly,Test::test -XX:CompileCommand=quiet -Xbatch Test.java
;;;","2023-06-15 06:22;thartmann;This is a regression from JDK-8201543 in JDK 11 b12.;;;","2023-06-15 06:27;thartmann;ILW = Missing null check in C1 compiled code, with Reference::get intrinsic and null argument, -XX:DisableIntrinsic=_Reference_get = HLM = P3;;;","2023-06-15 06:30;thartmann;The problem is in LIRGenerator::do_Reference_get. After JDK-8201543, no CodeEmitInfo is passed to access_load_at and therefore no implicit null check is emitted.;;;","2023-06-16 02:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14511
Date: 2023-06-16 09:28:38 +0000;;;","2023-06-18 22:11;dukebot;Changeset: 02aaab12
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-06-19 05:08:45 +0000
URL:       https://git.openjdk.org/jdk/commit/02aaab12e331e5a4c249f1d281c4439e2e7c914f
;;;","2023-06-20 02:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1474
Date: 2023-06-20 09:37:09 +0000;;;","2023-06-21 03:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/51
Date: 2023-06-21 10:28:51 +0000;;;","2023-06-23 01:58;shade;Fix Request (17u)

Fixes a corner case bug/regression in C1. Applies cleanly. New test fails before the patch and passes with it. The patch itself is simple, and IMO comes with minor/acceptable risk for 17u.;;;",,,,,,,,,,,,,,
Resource files should be moved to appropriate directories,JDK-8310118,5103278,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,hannesw,hannesw,2023-06-15 01:59,2023-08-14 11:56,2023-10-01 09:55,2023-08-09 00:02,17,18,19,20,21,,22,tools,,0,,,,,,,,,,,,,,,,,,"JavaDoc generated documentation contains a number of standard resources, including files with `.svg`, `.js` and `.css` extension. Most of these files are currently copied to the top level directory of the generated API docs. Generated documentation contains directories called `script-dir` and `resources`, and these should be used for the above-mentioned files. 

Since `resources` is a valid identifier name in Java, that directory should also be renamed to something that cannot conflict with module or package names, such as `resource-dir` or `resource-files`. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i31x5n:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-08-07 08:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15180
Date: 2023-08-07 14:42:08 +0000;;;","2023-08-09 00:02;dukebot;Changeset: 77e5739f
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2023-08-09 07:01:15 +0000
URL:       https://git.openjdk.org/jdk/commit/77e5739f60d5a3d62642be55462e90d66c374bf3
;;;",,,,,,,,,,,,,,,,,,,,,
Skip ReplaceCriticalClassesForSubgraphs when EnableJVMCI is specified,JDK-8310108,5103267,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yzheng,yzheng,yzheng,2023-06-14 23:56,2023-07-19 21:18,2023-10-01 09:55,2023-07-13 00:21,,,,,,,22,hotspot,,0,cds,noreg-self,,,,,,,,,,,,,,,,"With EnableJVMCI it appends the jdk.internal.vm.ci module and thus disables optimized module handling and full module graph. See 

https://github.com/openjdk/jdk/blob/master/src/hotspot/share/runtime/arguments.cpp#L1880-L1890
https://github.com/openjdk/jdk/blob/4d4706967d44b6908406818bb135f94130f373a0/src/hotspot/share/runtime/arguments.cpp#L1256-L1260
https://github.com/openjdk/jdk/blob/4d4706967d44b6908406818bb135f94130f373a0/src/hotspot/share/cds/metaspaceShared.cpp#L1531
https://github.com/openjdk/jdk/blob/4d4706967d44b6908406818bb135f94130f373a0/src/hotspot/share/cds/heapShared.cpp#L976-L981

This fails ReplaceCriticalClassesForSubgraphs.

[0.001s][info][cds] optimized module handling: disabled due to incompatible property: jdk.module.addmods.0=jdk.internal.vm.ci
...
[0.022s][info][cds] optimized module handling: disabled
[0.022s][info][cds] full module graph: disabled
...
[0.033s][info][cds,heap  ] subgraph jdk.internal.module.ArchivedBootLayer cannot be used because full module graph is disabled
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,JDK-8266329,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31x37:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-15 00:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14485
Date: 2023-06-15 07:15:16 +0000;;;","2023-07-13 00:21;dukebot;Changeset: 1b0dd7c2
Author:    Yudi Zheng <yzheng@openjdk.org>
Committer: Doug Simon <dnsimon@openjdk.org>
Date:      2023-07-13 07:20:18 +0000
URL:       https://git.openjdk.org/jdk/commit/1b0dd7c254dc1a087874c8726d8d26b9a41d4145
;;;",,,,,,,,,,,,,,,,,,,,,
sun.security.ssl.SSLHandshake.getHandshakeProducer() incorrectly checks handshakeConsumers,JDK-8310106,5103264,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2023-06-14 22:54,2023-08-15 00:09,2023-10-01 09:55,2023-06-15 22:40,11,17,21,22,openjdk8u272,,22,security-libs,,0,amazon-interest,jdk21u-fix-request,jdk21u-fix-yes,noreg-trivial,,,,,,,,,,,,,,"The sun.security.ssl.SSLHandshake enum has a method called getHandshakeProducer(ConnectionContext) which is expected to return a HandshakeProducer. The SSLHandshake has an array which keeps tracks of such producers. The implementation of this getHandshakeProducer() has this line:

if (handshakeConsumers.length == 0) {
      return null;
}

This appears to be a typo and instead should have been checking the length of handshakeProducers instead of handshakeConsumers. The rest of this method implementation correctly uses and works only on the handshakeProducers. ",,,,,,,,,,,JDK-8314256,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8196584,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31x2j:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2023-06-15 01:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14483
Date: 2023-06-15 06:02:13 +0000;;;","2023-06-15 22:40;dukebot;Changeset: db133dbc
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2023-06-16 05:38:10 +0000
URL:       https://git.openjdk.org/jdk/commit/db133dbc02a7f38104fdbca967c59f758c6f4336
;;;","2023-06-19 00:02;shade;Introduced in original TLS 1.3 implementation: JDK-8196584.;;;","2023-08-11 06:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/55
Date: 2023-08-11 13:49:44 +0000;;;","2023-08-11 07:26;shade;Fix Request (21u)

Fixes a minor bug in original TLS 3.0 implementation. Applies cleanly. Tests pass.;;;",,,,,,,,,,,,,,,,,,
LoongArch64 builds are broken after JDK-8304913,JDK-8310105,5103263,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,aoqi,aoqi,aoqi,2023-06-14 21:05,2023-07-12 13:18,2023-10-01 09:55,2023-06-19 14:07,21,,,,,,22,tools,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"jdk.tools.jlink.plugin.PluginException: ModuleTarget is malformed: No enum constant jdk.internal.util.Architecture.LOONGARCH64
	at jdk.jlink/jdk.tools.jlink.builder.DefaultImageBuilder.storeFiles(DefaultImageBuilder.java:181)
	at jdk.jlink/jdk.tools.jlink.internal.ImagePluginStack.storeFiles(ImagePluginStack.java:486)
	at jdk.jlink/jdk.tools.jlink.internal.ImageFileCreator.writeImage(ImageFileCreator.java:168)
	at jdk.jlink/jdk.tools.jlink.internal.ImageFileCreator.create(ImageFileCreator.java:100)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask$ImageHelper.retrieve(JlinkTask.java:860)
	at jdk.jlink/jdk.tools.jlink.internal.ImagePluginStack.operate(ImagePluginStack.java:194)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.createImage(JlinkTask.java:423)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.run(JlinkTask.java:286)
	at jdk.jlink/jdk.tools.jlink.internal.Main.run(Main.java:56)
	at jdk.jlink/jdk.tools.jlink.internal.Main.main(Main.java:34)
Error: jdk.tools.jlink.plugin.PluginException: ModuleTarget is malformed: No enum constant jdk.internal.util.Architecture.LOONGARCH64",,,,,,,,,,,JDK-8311308,JDK-8310444,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304913,,,,,,,,,,,other,,,,,,,,,,,,,,,"0|i31x2b:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2023-06-14 21:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14482
Date: 2023-06-15 04:40:59 +0000;;;","2023-06-19 14:07;dukebot;Changeset: 137a5f7c
Author:    Ao Qi <aoqi@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2023-06-19 21:05:55 +0000
URL:       https://git.openjdk.org/jdk/commit/137a5f7c2ce35258702b28565f6feb7cb7f1d68e
;;;","2023-06-20 09:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/39
Date: 2023-06-20 15:49:42 +0000;;;","2023-06-20 09:19;shade;Build is broken. Should be at least P2.;;;",,,,,,,,,,,,,,,,,,,
Test: javax/net/ssl/DTLS/DTLSWontNegotiateV10.java timed out,JDK-8310070,5103227,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdonovan,dholmes,dholmes,2023-06-14 15:30,2023-07-26 06:41,2023-10-01 09:55,2023-07-13 10:53,22,,,,,,22,security-libs,,0,noreg-self,tier2,ursqe-triaged,,,,,,,,,,,,,,,"----------configuration:(12/801)----------
Boot Layer
  add modules: java.security.jgss java.base                         
  add exports: java.base/sun.security.util                          ALL-UNNAMED
               java.security.jgss/sun.security.jgss.krb5            ALL-UNNAMED
               java.security.jgss/sun.security.krb5                 ALL-UNNAMED
               java.security.jgss/sun.security.krb5.internal        ALL-UNNAMED
               java.security.jgss/sun.security.krb5.internal.ccache ALL-UNNAMED
               java.security.jgss/sun.security.krb5.internal.crypto ALL-UNNAMED
               java.security.jgss/sun.security.krb5.internal.ktab   ALL-UNNAMED
  add opens:   java.security.jgss/sun.security.krb5                 ALL-UNNAMED
               java.security.jgss/sun.security.krb5.internal        ALL-UNNAMED

----------System.out:(12/443)----------
server: Enabled protocols: DTLSv1.0
server: Handshake status = NEED_UNWRAP
server: Reading data from remote endpoint.
client: Enabled protocols: DTLSv1.0 DTLSv1.2
client: Handshake status = NEED_WRAP
client: Generating handshake packets.
client: Running delegated tasks.
client: Generated 1 packets.
client: Sending handshake packets.
client: Handshake status = NEED_UNWRAP
client: Reading data from remote endpoint.
Timeout refired 480 times
----------System.err:(0/0)----------
----------rerun:(46/9482)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31wub:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2023-06-26 10:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14658
Date: 2023-06-26 17:38:04 +0000;;;","2023-07-13 10:53;dukebot;Changeset: af7f95e2
Author:    Matthew Donovan <mdonovan@openjdk.org>
Date:      2023-07-13 17:52:27 +0000
URL:       https://git.openjdk.org/jdk/commit/af7f95e24ad5981c5de4b5dbf37da6f4f5e42129
;;;",,,,,,,,,,,,,,,,,,,,,
Restore javac manpage updates,JDK-8310067,5103223,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,dholmes,dholmes,2023-06-14 14:56,2023-07-12 12:59,2023-10-01 09:55,2023-06-19 14:16,21,22,,,,,22,tools,,0,hgupdate-sync,manpage,,,,,,,,,,,,,,,,"JDK-8296656 and JDK-8015831 both updated the open javac nroff manpage - javac.1, but those changes were not applied to the closed markdown sources used to generate the nroff files. As a result regeneration of the nroff files loses those changes. The changes need to be applied to the markdown sources.",,,,,,,,,,,JDK-8310347,JDK-8310450,,,,,,,,,,,,,,,,,,,,,,JDK-8015831,JDK-8296656,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,"0|i31wtn:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-14 15:08;dholmes;Missing changes from 8296656:

diff --git a/src/jdk.compiler/share/man/javac.1 b/src/jdk.compiler/share/man/javac.1
index c9fcdb7d05c8..b28938d255a9 100644
--- a/src/jdk.compiler/share/man/javac.1
+++ b/src/jdk.compiler/share/man/javac.1
@@ -736,6 +736,9 @@ constructors in public and protected classes in exported packages.
 \f[V]options\f[R]: Warns about the issues relating to use of command
 line options.
 .IP \[bu] 2
+\f[V]output-file-clash\f[R]: Warns if any output file is overwritten during compilation.
+This can occur, for example, on case-insensitive filesystems.
+.IP \[bu] 2
 \f[V]overloads\f[R]: Warns about the issues related to method overloads.
 .IP \[bu] 2
 \f[V]overrides\f[R]: Warns about the issues related to method overrides.


Missing changes from 8015831:

diff --git a/src/jdk.compiler/share/man/javac.1 b/src/jdk.compiler/share/man/javac.1
index 945e9fd78f2d..9a7492911dd0 100644
--- a/src/jdk.compiler/share/man/javac.1
+++ b/src/jdk.compiler/share/man/javac.1
@@ -772,6 +772,9 @@ instances of value-based classes.
 \f[V]text-blocks\f[R]: Warns about inconsistent white space characters
 in text block indentation.
 .IP \[bu] 2
+\f[V]this-escape\f[R]: Warns about constructors leaking
+\f[V]this\f[R] prior to subclass initialization.
+.IP \[bu] 2
 \f[V]try\f[R]: Warns about the issues relating to the use of try blocks
 (that is, try-with-resources).
 .IP \[bu] 2
@@ -2209,6 +2212,48 @@ Alternately, you can remove the \f[V]static\f[R] keyword from the
 declaration of the method \f[V]m1\f[R].
 .RE
 .TP
+\f[V]this\-escape\f[R]
+Warns about constructors leaking \f[V]this\f[R] prior to subclass
+initialization.
+For example, this class:
+.RS
+.IP
+.nf
+\f[CB]
+public class MyClass {
+  public MyClass() {
+    System.out.println(this.hashCode());
+  }
+}
+\f[R]
+.fi
+.PP
+generates the following warning:
+.IP
+.nf
+\f[CB]
+MyClass.java:3: warning: [this-escape] possible 'this' escape
+                         before subclass is fully initialized
+    System.out.println(this.hashCode());
+                                    ^
+\f[R]
+.fi
+.PP
+A 'this' escape warning is generated when a constructor does something
+that might result in a subclass method being invoked before the
+constructor returns.
+In such cases the subclass method would be operating on an incompletely
+initialized instance.
+In the above example, a subclass of \f[V]MyClass\f[R] that overrides
+\f[V]hashCode()\f[R] to incorporate its own fields would likely produce
+an incorrect result when invoked as shown.
+.PP
+Warnings are only generated if a subclass could exist that is outside
+of the current module (or package, if no module) being compiled.
+So, for example, constructors in final and non-public classes do not
+generate warnings.
+.RE
+.TP
 \f[V]try\f[R]
 Warns about issues relating to the use of \f[V]try\f[R] blocks,
 including try-with-resources statements.;;;",,,,,,,,,,,,,,,,,,,,,,
[Shenandoah] Incomplete SATB buffers may not be processed during degenerated young collection,JDK-8310062,5103217,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wkemper,wkemper,wkemper,2023-06-14 13:35,2023-06-15 09:35,2023-10-01 09:55,2023-06-15 09:35,repo-shenandoah,,,,,,,hotspot,,0,gc-shenandoah,genshen,,,,,,,,,,,,,,,,"When Shenandoah's young generation exhausts available memory, it transitions to a ""degenerated"" cycle. If old marking is in progress, SATB queues need to be drained before evacuation to avoid invalidating any pointers in the queues. In the case when old marking is active and the concurrent collection failed during root scan, the SATB queues might not be drained - this is an error.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31wsb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-14 13:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/287
Date: 2023-06-14 20:51:04 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Note if implicit annotation processing is being used,JDK-8310061,5103216,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,darcy,darcy,darcy,2023-06-14 13:30,2023-09-01 09:28,2023-10-01 09:55,2023-06-28 14:03,21,,,,,,22,tools,,0,hgupdate-sync,release-note=yes,,,,,,,,,,,,,,,,"By default, the long-standing policy is that annotation processing is implicitly enabled. As that policy may change in the future (JDK-8306819), users should get some notice they are relying on implicit processing.",,,,,,,,,,,JDK-8311361,JDK-8311073,,,,,,,,,,,,,,,,,,,,,,JDK-8308245,JDK-8315534,JDK-8306819,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ws3:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-16 11:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14499
Date: 2023-06-15 18:16:57 +0000;;;","2023-06-28 14:03;dukebot;Changeset: 3df36c4f
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2023-06-28 21:00:28 +0000
URL:       https://git.openjdk.org/jdk/commit/3df36c4f101e094d6f6beccadc004742b47d045a
;;;","2023-06-28 14:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/80
Date: 2023-06-28 21:43:16 +0000;;;",,,,,,,,,,,,,,,,,,,,
ScrollPane insets are incorrect,JDK-8310054,5103208,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aivanov,aivanov,aivanov,2023-06-14 12:30,2023-07-24 02:15,2023-10-01 09:55,2023-06-16 10:26,21,,,,,,22,client-libs,,0,21-bp,cssn23_06_01,cssn23_06_02,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,regression,regression_8297923,sustaining,,,,,,,"After the size of ScrollPane child component changes, it recalculates the size of the scroll bars and hides or shows them as necessary. This situation is handled in WScrollPanePeer.childResized.

After JDK-8297923, setSpans is run asynchronously on the toolkit thread, so setInsets which follows it sets the incorrect values.",,,,,,,,,,,JDK-8311313,JDK-8310470,JDK-8312224,JDK-8312588,JDK-8310469,JDK-8311427,JDK-8310467,JDK-8310672,,,,,,,,,,,,,,,,JDK-8297923,,,,JDK-8310056,JDK-8311689,JDK-8306137,,,,,,,,,,,,,,,,b26,21,,windows,,,,,"0|i31wqb:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-06-14 13:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14478
Date: 2023-06-14 20:17:32 +0000;;;","2023-06-16 10:26;dukebot;Changeset: d6c2ee34
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-06-16 17:24:07 +0000
URL:       https://git.openjdk.org/jdk/commit/d6c2ee3448a14b3e5a392aacc11ed8e47d388f80
;;;","2023-06-19 07:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/33
Date: 2023-06-19 14:18:24 +0000;;;","2023-07-10 08:41;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
Required follow-up if 8297923 is backported.
Resolved copyright, marked clean.
SAP nightly testing passed. Test passes on Win.;;;","2023-07-10 08:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1564
Date: 2023-07-10 15:41:12 +0000;;;","2023-07-11 12:48;aivanov;Note: this bug had been found before backports to 17u, 11u, 8u were complete. Thus, it affects only 21 where JDK-8297923 was integrated.

Oracle backports to LTS releases used a cumulative patch combining both fixes together. Thus, this regression was never in Oracle 17u, 11u, 8u, not even for a minute.;;;","2023-07-12 02:03;aivanov;Note: backporting this changeset depends on the test added in JDK-8306137.;;;","2023-07-13 07:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1578
Date: 2023-07-13 12:28:57 +0000;;;","2023-07-18 04:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2047
Date: 2023-07-18 11:38:26 +0000;;;","2023-07-23 02:03;goetz;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
Required follow up of 8297923.
Clean backport from 17 of combined change.
SAP nighlty testing passed. Tests pass on win for combined change.;;;",,,,,,,,,,,,,
VarHandle and slice handle derived from layout are lacking alignment check,JDK-8310053,5103207,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2023-06-14 12:23,2023-07-12 13:20,2023-10-01 09:55,2023-06-28 14:04,21,22,,,,,22,core-libs,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"It was discovered that var handles and slice method handles derived from layouts through MemoryLayout::varHandle or MemoryLayout::sliceHandle or lacking the needed alignment checks.

Only an alignment check for the final accessed value is done, but this means the access might not be aligned for the root layout. Take for instance this struct layout:

        MemoryLayout.structLayout(
            JAVA_INT,
            JAVA_SHORT.withName(""x""));

When the field ""x"" is accessed, we only check that the access is aligned according to the alignment constraint of the JAVA_SHORT, rather than the alignment constraint of the struct layout itself (which might be more strict).

We should check that the access is aligned according to the alignment constraint of the root layout.",,,,,,,,,,,JDK-8311321,JDK-8310552,JDK-8310493,,,,,,,,,,,,,JDK-8310068,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31wq3:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-06-14 15:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14475
Date: 2023-06-14 19:30:10 +0000;;;","2023-06-20 17:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/42
Date: 2023-06-21 00:08:03 +0000;;;","2023-06-28 14:02;jvernee;Changeset: e022e876
Author: Jorn Vernee <jvernee@openjdk.org>
Date: 2023-06-21 00:03:13 +0000
URL: https://git.openjdk.org/jdk/commit/e022e876543b65b531027662326f35b497861f33;;;","2023-06-28 14:03;jvernee;This issue had 2 fix versions (21 and 22) when the patch for it was integrated (into the openjdk/jdk repo, targeting 22). This resulted in a backport issue being created automatically for the main fix version, 22: https://bugs.openjdk.org/browse/JDK-8310493

I've changed the fix version of this issue to just 22, and resolved it as fixed manually (based on the information found in the backport issue);;;",,,,,,,,,,,,,,,,,,,
Drop sequence layout factory with inferred count,JDK-8310048,5103200,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-06-14 10:45,2023-07-12 09:05,2023-10-01 09:55,2023-06-14 11:25,repo-panama,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,The sequence layout factory that accepts only the element layout makes it too easy for developers to reach for the wrong thing (and creating an insanely huge layout).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307530,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31woj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-06-14 10:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/838
Date: 2023-06-14 17:50:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] ZGC fixes and cleanups,JDK-8310042,5103190,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-06-14 08:39,2023-06-14 13:30,2023-10-01 09:55,2023-06-14 13:30,repo-lilliput-17,,,,,,,hotspot,,0,amazon-interest,lilliput,,,,,,,,,,,,,,,,"In ZGC, we don't need to change zLiveMap.inline.hpp and can revert to upstream state. In zBarrierSetC2.cpp we need to relax an assert.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i31wmb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-14 08:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/31
Date: 2023-06-14 15:42:04 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
"[lworld] C2 compilation fails with assert ""array can't be flattened""",JDK-8310034,5103176,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2023-06-14 07:20,2023-06-21 06:45,2023-10-01 09:55,2023-06-21 06:45,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,c2,lworld,,,,,,,,,,,,,,,,"applications/ctw/modules/java_base.java fails since the recent merge with mainline:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (workspace/open/src/hotspot/share/opto/parse2.cpp:95), pid=608028, tid=608042
#  assert((EnablePrimitiveClasses && (FlatArrayElementMaxSize != 0)) && is_reference_type(bt) && elemptr->can_be_inline_type() && !ary_t->klass_is_exact() && !ary_t->is_not_null_free() && (!elemptr->is_inlinetypeptr() || elemptr->inline_klass()->flatten_array())) failed: array can't be flattened
#

Current CompileTask:
C2: 140310 20664    b  4       java.lang.ScopedValue::get (63 bytes)

Stack: [0x00007f35184aa000,0x00007f35185ab000],  sp=0x00007f35185a7700,  free space=1013k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x153a044]  Parse::array_load(BasicType)+0x3c4  (parse2.cpp:95)
V  [libjvm.so+0x1546db9]  Parse::do_one_bytecode()+0xc19  (parse2.cpp:2870)
V  [libjvm.so+0x1530a12]  Parse::do_one_block()+0x522  (parse1.cpp:1649)
V  [libjvm.so+0x15318d0]  Parse::do_all_blocks()+0x130  (parse1.cpp:741)
V  [libjvm.so+0x1536575]  Parse::Parse(JVMState*, ciMethod*, float)+0xf95  (parse1.cpp:645)
V  [libjvm.so+0x877748]  ParseGenerator::generate(JVMState*)+0x168  (callGenerator.cpp:100)
V  [libjvm.so+0xa29636]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1716  (compile.cpp:782)
V  [libjvm.so+0x87551b]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x3eb  (c2compiler.cpp:118)
V  [libjvm.so+0xa35520]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa00  (compileBroker.cpp:2265)
V  [libjvm.so+0xa36388]  CompileBroker::compiler_thread_loop()+0x5f8  (compileBroker.cpp:1944)
V  [libjvm.so+0xef61ac]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:720)
V  [libjvm.so+0x17f795a]  Thread::call_run()+0xba  (thread.cpp:217)
V  [libjvm.so+0x14e096c]  thread_native_entry(Thread*)+0x11c  (os_linux.cpp:778)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31wj7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-21 05:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/864
Date: 2023-06-21 12:47:20 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Clarify return value of Java Time compareTo methods,JDK-8310033,5103175,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2023-06-14 07:00,2023-08-10 06:04,2023-10-01 09:55,2023-07-27 07:02,,,,,,,22,core-libs,,0,doc-api,hgupdate-sync,,,,,,,,,,,,,,,,"The description of java.util.Instant.compareTo(Instant) is not clear that a negative value is ""before"", zero is equal, and positive is ""after"".

Other java.time classes also describe the compareTo result as the comparator value and do not mention zero.",,,,,,,,,,,JDK-8313548,JDK-8313934,,,,,,,,,,,,,,JDK-8310064,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31wiz:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2023-06-16 12:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14479
Date: 2023-06-14 20:35:54 +0000;;;","2023-07-27 07:02;dukebot;Changeset: 8650026f
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2023-07-27 14:01:25 +0000
URL:       https://git.openjdk.org/jdk/commit/8650026ff16e5c5eff897f9fd39c0c35fd8b7367
;;;","2023-07-31 12:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/153
Date: 2023-07-31 19:48:45 +0000;;;",,,,,,,,,,,,,,,,,,,,
Fix -Wconversion warnings in nmethod and compiledMethod related code,JDK-8310027,5103169,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,coleenp,coleenp,2023-06-14 06:27,2023-07-12 13:19,2023-10-01 09:55,2023-06-20 06:37,11,17,22,,,,22,hotspot,,0,cleanup,oracle-triage-11,oracle-triage-17,oracle-triage-22,,,,,,,,,,,,,,"The nmethod.hpp and compiledMethod.hpp files have implicit address to int conversions for returning offsets and sizes.Since hopefully an nmethod size should never exceed 32 bits, this seems safe to simply add explicit casts.

The question is which is better:

+  int oops_size         () const                  { return int((address)  oops_end         () - (address)  oops_begin         ()); }

Or

 +  int oops_size         () const                  { return (int)((address)  oops_end         () - (address)  oops_begin         ()); }

It doesn't seem like we should slow down compilation or add noise to make these

+  int oops_size         () const                  { return checked_cast<int>((address)  oops_end         () - (address)  oops_begin         ()); }

Compiling with -Wconversion and not -Werror gives these counts for warnings:

5523 /scratch/cphillim/hg/21more-conversion/src/hotspot/share/code/nmethod.hpp
5523 /scratch/cphillim/hg/21more-conversion/src/hotspot/share/code/compiledMethod.hpp
4150 /scratch/cphillim/hg/21more-conversion/src/hotspot/share/code/relocInfo.hpp

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8177482,JDK-8177481,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31whn:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-14 23:26;thartmann;ILW = Conversion warnings in code (harmless), no issue observed, no workaround = MLH = P4;;;","2023-06-16 05:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14505
Date: 2023-06-15 22:49:36 +0000;;;","2023-06-20 06:37;dukebot;Changeset: e1906e76
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-06-20 13:35:11 +0000
URL:       https://git.openjdk.org/jdk/commit/e1906e76412fa506cf72447dcb9adc896b92ae81
;;;",,,,,,,,,,,,,,,,,,,,
Skip failing scene change tests on macOS,JDK-8310024,5103166,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kcr,kcr,kcr,2023-06-14 05:38,2023-06-23 18:12,2023-10-01 09:55,2023-06-14 10:24,jfx20,,,,,,jfx21,javafx,,0,noreg-self,sn_146,testbug,,,,,,,,,,,,,,,"The following tests fail on macOS and need to be skipped until the bugs are fixed:

SceneChangeEventsTest::testSceneChange [macOS 13] -- JDK-8300094
SceneChangeShouldNotFocusStageTest::windowShouldRemainIconified -- JDK-8305675",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305675,JDK-8300094,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31wgz:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@18948797,,,,,,,,,"2023-06-14 06:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1153
Date: 2023-06-14 13:39:52 +0000;;;","2023-06-14 10:24;dukebot;Changeset: 8d13ba93
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2023-06-14 17:22:43 +0000
URL:       https://git.openjdk.org/jfx/commit/8d13ba93b5f01768a6ac2df81c6e026d3d85c86d
;;;",,,,,,,,,,,,,,,,,,,,,
[lworld] C1 compilation asserts with new lightweight locking,JDK-8310022,5103164,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2023-06-14 05:20,2023-06-14 07:22,2023-10-01 09:55,2023-06-14 07:22,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,c1,lworld,,,,,,,,,,,,,,,,"This is a regression from the recent merge with mainline which brought JDK-8291555 in:

runtime/CommandLine/OptionsValidation/TestOptionsWithRanges.java

-Xmx1024m -XX:-ZapUnusedHeapArea -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:LockingMode=2

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (workspace\open\src\hotspot\share\c1/c1_LIR.hpp:436), pid=49736, tid=39020
#  assert(is_single_cpu() && !is_virtual()) failed: type check
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-lworld4ea-LTS-2023-06-13-1417486.tobias.hartmann.valhalla)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-lworld4ea-LTS-2023-06-13-1417486.tobias.hartmann.valhalla, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: C:\sb\prod\1686667763\testoutput\test-support\jtreg_open_test_hotspot_jtreg_hotspot_runtime\scratch\1\hs_err_pid49736.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xmx1024m -XX:-ZapUnusedHeapArea -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:LockingMode=2 optionsvalidation.JVMStartup

Host: win2019-x64-512985, AMD EPYC 7J13 64-Core Processor                , 12 cores, 23G,  Windows Server 2019 , 64 bit Build 17763 (10.0.17763.475)
Time: Tue Jun 13 15:58:36 2023 /GM elapsed time: 0.150294 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x0000015846f2a1c0):  JavaThread ""C1 CompilerThread0"" daemon [_thread_in_native, id=39020, stack(0x000000208b900000,0x000000208ba00000) (1024K)]


Current CompileTask:
C1:    150   38   !   3       java.util.concurrent.ConcurrentHashMap::putVal (432 bytes)

Stack: [0x000000208b900000,0x000000208ba00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xcd3e71]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xf83a17]  VMError::report+0x1467  (vmError.cpp:966)
V  [jvm.dll+0xf85d55]  VMError::report_and_die+0x645  (vmError.cpp:1758)
V  [jvm.dll+0xf863f4]  VMError::report_and_die+0x64  (vmError.cpp:1523)
V  [jvm.dll+0x57814b]  report_vm_error+0x5b  (debug.cpp:191)
V  [jvm.dll+0x34fb89]  LIR_Opr::as_register+0x99  (c1_LIR.cpp:38)
V  [jvm.dll+0x363bd3]  LIR_Assembler::emit_lock+0xd3  (c1_LIRAssembler_x86.cpp:3734)
V  [jvm.dll+0x350bf1]  LIR_OpLock::emit_code+0x21  (c1_LIR.cpp:1208)
V  [jvm.dll+0x359c00]  LIR_Assembler::emit_lir_list+0x190  (c1_LIRAssembler.cpp:311)
V  [jvm.dll+0x35940a]  LIR_Assembler::emit_block+0x13a  (c1_LIRAssembler.cpp:276)
V  [jvm.dll+0x3596db]  LIR_Assembler::emit_code+0x7b  (c1_LIRAssembler.cpp:234)
V  [jvm.dll+0x31c147]  Compilation::emit_code_body+0x157  (c1_Compilation.cpp:354)
V  [jvm.dll+0x31bb98]  Compilation::compile_java_method+0x2a8  (c1_Compilation.cpp:415)
V  [jvm.dll+0x31bdaf]  Compilation::compile_method+0x19f  (c1_Compilation.cpp:477)
V  [jvm.dll+0x31a8f9]  Compilation::Compilation+0x2d9  (c1_Compilation.cpp:607)
V  [jvm.dll+0x31d285]  Compiler::compile_method+0xa5  (c1_Compiler.cpp:255)
V  [jvm.dll+0x51c417]  CompileBroker::invoke_compiler_on_method+0x897  (compileBroker.cpp:2268)
V  [jvm.dll+0x519815]  CompileBroker::compiler_thread_loop+0x395  (compileBroker.cpp:1945)
V  [jvm.dll+0x8528d9]  JavaThread::thread_main_inner+0x279  (javaThread.cpp:721)
V  [jvm.dll+0xeec50d]  Thread::call_run+0x1cd  (thread.cpp:222)
V  [jvm.dll+0xcd2532]  os::win32::thread_native_entry+0xa2  (os_windows.cpp:554)
C  [ucrtbase.dll+0x2268a]
C  [KERNEL32.DLL+0x17974]
C  [ntdll.dll+0x5a0b1]


Different failure mode with:

java -Xmx1024m -XX:-ZapUnusedHeapArea -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:LockingMode=2 -Xcomp

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla/open/src/hotspot/cpu/x86/c1_LIRGenerator_x86.cpp:332), pid=2668007, tid=2668021
#  assert(LockingMode != LM_LIGHTWEIGHT) failed: LM_LIGHTWEIGHT not yet compatible with EnableValhalla
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-lworld4ea-LTS-2023-06-02-1135579.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-lworld4ea-LTS-2023-06-02-1135579.tobias..., compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x7e0aae]  LIRGenerator::do_MonitorEnter(MonitorEnter*)+0x40e
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /oracle/valhalla/open/hs_err_pid2668007.log
#
# Compiler replay data is saved as:
# /oracle/valhalla/open/replay_pid2668007.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310021,,,,,,,JDK-8310023,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31wgj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-14 07:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/862
Date: 2023-06-14 14:09:27 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
MIPS builds are broken after JDK-8304913,JDK-8310019,5103161,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rriggs,shade,shade,2023-06-14 04:15,2023-07-12 13:18,2023-10-01 09:55,2023-06-19 11:31,21,,,,,,22,tools,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"This is similar to other arches. JDK-8308270 can be used as fix template.
Add mipsel and mips64sel to jdk.internal.util.architecture.",,,,,,,,,,,JDK-8310457,JDK-8311310,,,,,,,,,,,,,,,,,,,,,,JDK-8304913,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31wfv:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2023-06-14 08:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14471
Date: 2023-06-14 15:04:41 +0000;;;","2023-06-19 11:31;dukebot;Changeset: 33c6ec9d
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2023-06-19 18:29:14 +0000
URL:       https://git.openjdk.org/jdk/commit/33c6ec9d4eb36649a94125aa005dc6b961dcd2c1
;;;","2023-06-20 09:23;shade;Build breakage, adjusting the priority to P2 to match other build failures caused by JDK-8304913 and allow backport to JDK 21.;;;","2023-06-20 10:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/40
Date: 2023-06-20 17:02:04 +0000;;;",,,,,,,,,,,,,,,,,,,
ZGC: Unbounded asynchronous unmapping can lead to running out of address space,JDK-8310015,5103156,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,eosterlund,eosterlund,eosterlund,2023-06-14 04:01,2023-07-12 13:17,2023-10-01 09:55,2023-06-19 07:54,,,,,,,21,hotspot,,0,genzgc,redhat-interest,zgc,,,,,,,,,,,,,,,"ZGC (both generational and non-generational) use asynchronous unmapping. Today the amount of unmapping requests we can queue up is unbounded. This can lead to a classic consumer producer problem, where the consumer is slower than the producer, and we eventually run out of address space and have to shut down.
This issue seeks to focus on the unbounded nature of the asynchronous unmapping.",,,,,,,,,,,JDK-8310288,JDK-8310436,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308783,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31wer:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Not verified,,"2023-06-16 03:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14513
Date: 2023-06-16 10:23:23 +0000;;;","2023-06-19 00:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/28
Date: 2023-06-19 07:31:47 +0000;;;","2023-06-19 07:54;dukebot;Changeset: 14c5091a
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2023-06-19 14:53:11 +0000
URL:       https://git.openjdk.org/jdk21/commit/14c5091a9f28c9a2c5ea77613375710de97ee52d
;;;","2023-07-11 05:27;enikitin;The issue is performance-related and no test is provided. As it is not possible to quickly estimate the performance effects, I close the the test without verification.;;;",,,,,,,,,,,,,,,,,,,
[Lilliput] SA: Fix oop array element alignment,JDK-8310010,5103151,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-06-14 03:02,2023-07-17 04:07,2023-10-01 09:55,2023-07-17 04:07,repo-lilliput,repo-lilliput-17,,,,,repo-lilliput,hotspot,,0,amazon-interest,lilliput,,,,,,,,,,,,,,,,"When running with -COOPS, oop array elements need to be 8-byte-aligned. We have this correct in runtime, but not in the SA. Notably, the problem manifests with ZGC.",,,,,,,,,,,JDK-8312171,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i31wdn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-06-14 03:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput/pull/96
Date: 2023-06-14 10:12:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
some JVMCI tests fail when VM options include -XX:+EnableJVMCI,JDK-8309974,5103109,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dnsimon,dnsimon,2023-06-13 13:49,2023-09-14 00:21,2023-10-01 09:55,2023-06-15 08:55,22,,,,,,22,hotspot,,0,jvmci,noreg-self,oracle-triage-22,,,,,,,,,,,,,,,"make LOG=info TEST=""compiler/jvmci"" TEST_OPTS=VM_OPTIONS=""-XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI"" test

results in these tests failing:

compiler/jvmci/events/JvmciShutdownEventTest.java
compiler/jvmci/jdk.vm.ci.hotspot.test/src/jdk/vm/ci/hotspot/test/HotSpotConstantReflectionProviderTest.java
compiler/jvmci/meta/StableFieldTest.java

Adding TEST_MODE=othervm makes the tests pass:

make LOG=info TEST=""compiler/jvmci"" TEST_OPTS=VM_OPTIONS=""-XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI"" JTREG=TEST_MODE=othervm test

As far as I can tell, this has something to do with these tests using the ClassFileInstaller to install a JVMCI specific test class AND requiring JVMCI modules to be exported. For example:

/**
 * @test
 * @bug 8151664
 * @requires vm.jvmci
 * @library /test/lib /
 * @modules java.base/jdk.internal.misc
 * @modules java.base/jdk.internal.vm.annotation
 *          jdk.internal.vm.ci/jdk.vm.ci.hotspot
 *          jdk.internal.vm.ci/jdk.vm.ci.meta
 *          jdk.internal.vm.ci/jdk.vm.ci.runtime
 *
 * @compile StableFieldTest.java
 * @run driver jdk.test.lib.helpers.ClassFileInstaller compiler.jvmci.meta.StableFieldTest
 * @run main/othervm -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:-UseJVMCICompiler -Xbootclasspath/a:. compiler.jvmci.meta.StableFieldTest
 */

I think what happens is that `TEST_OPTS=VM_OPTIONS=""-XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI""` causes `@requires vm.jvmci` to evaluate to true but when ` jdk.test.lib.helpers.ClassFileInstaller compiler.jvmci.meta.StableFieldTest` is run, the java subprocess does not inherit the `-XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI` options and so it fails when trying to export the JVMCI modules:

ACTION: driver -- Error. Can't init module exports: module not found: jdk.internal.vm.ci
REASON: User specified action: run driver jdk.test.lib.helpers.ClassFileInstaller compiler.jvmci.meta.StableFieldTest
TIME:   0.213 seconds
messages:
command: driver jdk.test.lib.helpers.ClassFileInstaller compiler.jvmci.meta.StableFieldTest
reason: User specified action: run driver jdk.test.lib.helpers.ClassFileInstaller compiler.jvmci.meta.StableFieldTest
started: Tue Jun 13 22:47:43 CEST 2023
Mode: agentvm
Agent id: 2
Additional exports to unnamed modules from @modules: java.base/jdk.internal.misc java.base/jdk.internal.vm.annotation jdk.internal.vm.ci/jdk.vm.ci.hotspot jdk.internal.vm.ci/jdk.vm.ci.meta jdk.internal.vm.ci/jdk.vm.ci.runtime
finished: Tue Jun 13 22:47:44 CEST 2023
elapsed time (seconds): 0.213
",,,,,,,,,,,JDK-8316266,JDK-8316127,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,"2023-06-13 13:51;dnsimon;StableFieldTest.jtr.txt;https://bugs.openjdk.org/secure/attachment/104286/StableFieldTest.jtr.txt",,,,,,,,,,,,,,,,,,,,,,"0|i31w4b:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-14 01:25;chagedorn;ILW = Multiple JVMCI test failures with -XX:+EnableJVMCI, few tests, use -XX:-EnableJVMCI = MML = P4;;;","2023-06-14 12:26;dnsimon;[~jjg] helped me diagnose the problem. In the process, we discovered there's a bug in jtreg in that the TEST_MODE=othervm execution mentioned in the issue description should also have failed.

The solution is that the test needs the execution of ClassFileInstaller to inherit any extra VM options passed to jtreg. This is achieved by using `@run main/othervm` instead of `@run driver` to execute the ClassFileInstaller.

[~jjg] explanation of `@run driver` helped me so I'm copying it here as a useful reference: The intended use of driver is for cases to either ""extend"" jtreg functionality or to allow script-like functionality to be written in Java, and in both cases, the intent is to run with the class with ""default"" options.   It is expected that the functionality being tested is not in the driver class, it is in a class that is run, in some non-standard custom way, by the driver class.;;;","2023-06-14 13:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14476
Date: 2023-06-14 20:04:41 +0000;;;","2023-06-15 08:55;dukebot;Changeset: 8b4af46b
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-06-15 15:53:08 +0000
URL:       https://git.openjdk.org/jdk/commit/8b4af46be4447a7bc3b58f4054488e8bc50ee111
;;;","2023-07-11 07:50;dnsimon;[~jjg] is there an issue for the jtreg bug (https://github.com/openjdk/jdk/pull/14476#issuecomment-1593324748) that can be linked to this issue?;;;",,,,,,,,,,,,,,,,,,
ParallelGC young collections very slow in DelayInducer,JDK-8309960,5103084,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,ayang,tschatzl,tschatzl,2023-06-13 11:16,2023-07-18 11:47,2023-10-01 09:55,2023-06-19 04:10,21,22,,,,,21,hotspot,,0,gc-parallel,gc-pending-review,performance,,,,,,,,,,,,,,,"In the benchmark DelayInducer from JDK-8062128 Parallel GC young collections are extremely slow compared to G1.

I.e. with -Xmn1g -Xms3g -Xmx3g on both collectors, G1 takes 130-360ms for young collections, Parallel GC young collections take 666-8863(!)ms.

There seems to be a problem with the work queue/task stealing. See the attached logs showing task queue statistics; just compare the steal statistics (prefixed with ""st-"") where parallel gc looks extremely bad.",,,,,,,,,,,JDK-8310136,JDK-8310434,,,,,,,,,,,,,,,,,,,,,,JDK-8311163,,,,JDK-8300447,JDK-8310031,,,"2023-06-13 11:16;tschatzl;delayinducer-g1.txt;https://bugs.openjdk.org/secure/attachment/104282/delayinducer-g1.txt","2023-06-13 11:25;tschatzl;delayinducer-parallel-jdk20.txt;https://bugs.openjdk.org/secure/attachment/104283/delayinducer-parallel-jdk20.txt","2023-06-13 11:29;tschatzl;delayinducer-parallel-jdk21.txt;https://bugs.openjdk.org/secure/attachment/104284/delayinducer-parallel-jdk21.txt","2023-06-13 11:16;tschatzl;delayinducer-parallel.txt;https://bugs.openjdk.org/secure/attachment/104281/delayinducer-parallel.txt",,,,,,,,,,,,,,,,,,,"0|i31vyr:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2023-06-13 11:26;tschatzl;Seems to be particularly bad with 21/22, the second young gc with parallel gc is twice as slow than 20 or earlier releases (see attached pause times in delayinducer-parallel-jdk20.txt).

I.e. looks like a regression in 21.;;;","2023-06-13 11:44;tschatzl;The regression has been introduced with JDK-8300447. The performance is still very bad compared to G1 though after backing it out, but it's not a regression any more.;;;","2023-06-13 11:51;tschatzl;Fwiw, the initial change in JDK-8300447 is good.;;;","2023-06-14 07:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14469
Date: 2023-06-14 14:09:07 +0000;;;","2023-06-15 05:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/22
Date: 2023-06-15 12:12:23 +0000;;;","2023-06-19 04:10;dukebot;Changeset: 4d81b899
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2023-06-19 11:09:04 +0000
URL:       https://git.openjdk.org/jdk21/commit/4d81b8998ae2e5c02a47264496bb87cc0c18808c
;;;","2023-07-18 11:45;enikitin;Verified manually and in CI. The effect, it should be noted, is intermittent - some runs show very little or negligible difference between fixed and flawed ParallelGC. But many show 2-4x difference. ;;;",,,,,,,,,,,,,,,,
JFR: Display N/A for missing data amount,JDK-8309959,5103083,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2023-06-13 11:01,2023-07-12 13:09,2023-10-01 09:55,2023-06-14 05:07,11,17,21,,,,22,hotspot,,0,hgupdate-sync,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"If an event value is Long.MIN_VALUE, ""N/A"" should be displayed. This is a follow up fix to JDK-8309550",,,,,,,,,,,JDK-8310875,JDK-8310338,JDK-8311341,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309550,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31vyj:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-06-13 11:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14454
Date: 2023-06-13 18:41:39 +0000;;;","2023-06-14 05:07;dukebot;Changeset: 9872a141
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-06-14 12:05:27 +0000
URL:       https://git.openjdk.org/jdk/commit/9872a14192ce3964b934c19ab685342ffd396986
;;;","2023-06-14 06:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1438
Date: 2023-06-14 13:45:36 +0000;;;","2023-06-14 09:52;fthevenet;Fix Request (17u)

Backporting this patch causes fields in JFR events with a value equal to Long.MIN_VALUE to be printed as ""N/A"" instead of ""-8EB"", which conveys the intended meaning for that specific value (i.e. Not Applicable or Not Available).

The risk is low, as the change is trivial and with a narrow scope.
The original change also touches src/jdk.jfr/share/classes/jdk/jfr/internal/util/ValueFormatter.java but this file was introduced with JDK-8306703 which is JDK 21+ only, so changes to it shouldn't get backported.

Backport requires JDK-8309550 to be applied first

Ran tiers1 and jdk_jfr tests. ;;;","2023-06-20 08:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1968
Date: 2023-06-20 15:43:12 +0000;;;","2023-06-20 09:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1969
Date: 2023-06-20 16:05:35 +0000;;;","2023-06-22 07:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/56
Date: 2023-06-22 14:10:33 +0000;;;",,,,,,,,,,,,,,,,
Incorrect @since tag format in Container.java,JDK-8309958,5103082,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,honkar,jjg,jjg,2023-06-13 10:48,2023-07-12 13:10,2023-10-01 09:55,2023-06-14 12:52,21,,,,,,22,client-libs,,0,noreg-trivial,sn_146,,,,,,,,,,,,,,,,"There are a couple of instances in Container.java of `@since: 1.5` ... note the incorrect use of `:` immediately after the tag.

Admittedly, these are on private methods and do not show up in the public API, but they are showing up in scripts being used to audit `@since` values.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31vyb:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-06-14 11:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14474
Date: 2023-06-14 18:25:31 +0000;;;","2023-06-14 12:52;dukebot;Changeset: ee4ab670
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-06-14 19:49:24 +0000
URL:       https://git.openjdk.org/jdk/commit/ee4ab6709ebaf8a1b1e9f297a7c53205987f3eba
;;;",,,,,,,,,,,,,,,,,,,,,
Matcher uses @since {@inheritDoc},JDK-8309955,5103079,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,jjg,jjg,2023-06-13 10:43,2023-07-12 13:07,2023-10-01 09:55,2023-06-13 11:42,20,,,,,,22,core-libs,,0,hgupdate-sync,noreg-doc,,,,,,,,,,,,,,,,"There are a couple of recent additions to `java.util.regex.Matcher` that use `@since {@inheritDoc}`

While it does work in JDK 20, 21, it is not a supported combination.
It would be better to change these two instances to literal `@since 20`.",,,,,,,,,,,JDK-8309963,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31vxn:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@557d5cff,,,,,,,,,"2023-06-13 11:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14452
Date: 2023-06-13 18:08:55 +0000;;;","2023-06-13 11:42;dukebot;Changeset: bfef3c3e
Author:    Raffaello Giulietti <rgiulietti@openjdk.org>
Date:      2023-06-13 18:40:47 +0000
URL:       https://git.openjdk.org/jdk/commit/bfef3c3e80d4df98bdb0d853c2e2711cdd8252ce
;;;","2023-06-13 12:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/14
Date: 2023-06-13 18:55:20 +0000;;;",,,,,,,,,,,,,,,,,,,,
HttpClient should not use Instant.now() as Instant source for deadlines,JDK-8309939,5103063,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-06-13 08:37,2023-07-12 13:17,2023-10-01 09:55,2023-06-19 06:28,,,,,,,22,core-libs,,0,httpclient,noreg-hard,,,,,,,,,,,,,,,,"The HttpClient uses Instant.now() to create deadlines for timeouts. This could have undesirable effects since Instant.now() is linked to the wall clock, which is not monotonic. Instead HttpClient should use a monotonic instant source for the purpose of setting and comparing deadlines.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31vu3:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-06-13 08:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14450
Date: 2023-06-13 15:40:34 +0000;;;","2023-06-19 06:28;dukebot;Changeset: f8f8bfbe
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-06-19 13:26:26 +0000
URL:       https://git.openjdk.org/jdk/commit/f8f8bfbea15de0a57415ba27ad5722b6a4add07a
;;;",,,,,,,,,,,,,,,,,,,,,
"Mac - SystemMenuBar, IndexOutOfBoundsException on change",JDK-8309935,5103058,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fkirmaier,fkirmaier,fkirmaier,2023-06-13 06:36,2023-07-17 14:58,2023-10-01 09:55,2023-07-11 03:53,jfx20,,,,,,jfx21,javafx,,0,,,,,,,,,,,,,,,,,,"On Mac, the SystemMenuBar sometimes throws an java.lang.IndexOutOfBoundsException.

This happens, when the list of menu items are changed, and some of the previous items were not visible.



Exception in thread ""JavaFX Application Thread"" java.lang.IndexOutOfBoundsException
        at javafx.graphics/com.sun.glass.ui.Menu.insert(Menu.java:134)
        at javafx.graphics/com.sun.javafx.tk.quantum.GlassSystemMenu.insertMenu(GlassSystemMenu.java:185)
        at javafx.graphics/com.sun.javafx.tk.quantum.GlassSystemMenu.lambda$insertMenu$1(GlassSystemMenu.java:163)
        at javafx.base/com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329)
        at javafx.base/com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73)
        at javafx.base/javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:239)
        at javafx.base/javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482)
        at javafx.base/javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541)
        at javafx.base/javafx.collections.ObservableListBase.endChange(ObservableListBase.java:211)
        at javafx.base/javafx.collections.ModifiableObservableListBase.add(ModifiableObservableListBase.java:162)
        at javafx.controls/com.sun.javafx.scene.control.GlobalMenuAdapter.insertItem(GlobalMenuAdapter.java:134)
        at javafx.controls/com.sun.javafx.scene.control.GlobalMenuAdapter$2.onChanged(GlobalMenuAdapter.java:106)
        at javafx.base/com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329)
        at javafx.base/com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73)
        at javafx.base/javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:239)
        at javafx.base/javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482)
        at javafx.base/javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541)
        at javafx.base/javafx.collections.ObservableListBase.endChange(ObservableListBase.java:211)
        at javafx.base/javafx.collections.ModifiableObservableListBase.add(ModifiableObservableListBase.java:162)
        at java.base/java.util.AbstractList.add(AbstractList.java:111)
        at com.jpro.hellojpro.TestMenuBar.lambda$createMenuBar$0(TestMenuBar.java:56)
        at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:457)
        at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
        at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:456)
        at javafx.graphics/com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i31vsz:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-06-13 06:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1152
Date: 2023-06-13 13:52:46 +0000;;;","2023-07-11 03:53;dukebot;Changeset: a91b34d1
Author:    Florian Kirmaier <fkirmaier@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-07-11 10:50:29 +0000
URL:       https://git.openjdk.org/jfx/commit/a91b34d1245efcfd68bac7cffc84d57f39aff06f
;;;",,,,,,,,,,,,,,,,,,,,,
Update GitHub Actions to use JDK 17 for building jtreg,JDK-8309934,5103057,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cstein,cstein,cstein,2023-06-13 06:33,2023-07-12 23:31,2023-10-01 09:55,2023-06-13 13:34,17,21,22,,,,22,infrastructure,,0,amazon-interest,hgupdate-sync,noreg-self,,,,,,,,,,,,,,,"Update GitHub Actions to use pre-installed JDK 17 for building jtreg, as the current pre-installed JDK 11 fails with the following error:

```
    /bin/sh: line 1: C:/hostedtoolcache/windows/Java_Temurin-Hotspot_jdk/11.0.19-7/x64/bin/javac: Bad address
    make: *** [jtdiff.gmk:36: D:/a/jdk/jdk/jtreg/src/build/classes.com.sun.javatest.diff.ok] Error 126
    Error: Process completed with exit code 2.
```

Switching from 11 to 17 seems to mend the (unknown underlying) issue for the time being.",,,,,,,,,,,JDK-8310439,JDK-8310343,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310183,,,,,,,,,,,generic,,,,,,,,,,windows,,,,,"0|i31vsr:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-06-13 06:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14448
Date: 2023-06-13 13:38:16 +0000;;;","2023-06-13 13:34;dukebot;Changeset: 8aad881e
Author:    Christian Stein <cstein@openjdk.org>
Date:      2023-06-13 20:32:29 +0000
URL:       https://git.openjdk.org/jdk/commit/8aad881e803fddc26f45270f779ff0c0e5a095d8
;;;","2023-06-14 03:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/18
Date: 2023-06-14 10:07:01 +0000;;;","2023-06-14 05:05;kcr;[~cstein] Since this is a test-only bug, it meets the criteria for backporting to 21 (otherwise, as a P4 bug, it wouldn't). However, the JBS record is currently lacking the ""noreg-self"" label, which is needed to identify it as a test bug. Please add the label.;;;","2023-06-14 08:26;shade;Note: the underlying issue is not fixed, I think. 

Just got the same GHA failure with 17u:

```
 C:/hostedtoolcache/windows/Java_Temurin-Hotspot_jdk/17.0.7-7/x64/bin/java -cp ""D:/a/lilliput/lilliput/jtreg/src/build/classes;D:/a/lilliput/lilliput/jtreg/src/build/deps/jtharness/build/binaries/lib/javatest.jar"" \
    -Dprogram=jtreg com.sun.javatest.regtest.Main -help all > D:/a/lilliput/lilliput/jtreg/src/build/jtreg-usage.txt
/bin/sh: line 1: C:/hostedtoolcache/windows/Java_Temurin-Hotspot_jdk/17.0.7-7/x64/bin/javac: Bad address
```;;;","2023-06-14 12:41;cstein;[~jjg] found this https://github.com/msys2/MSYS2-packages/issues/2282 and it looks like it could work around the underlying issue.

No, it introduces other errors:

> Run # Prevent ""Bad address"" errors
[build.sh][INFO] CYGWIN_OR_MSYS=1
[build.sh][INFO] JAVA_HOME: C:\hostedtoolcache\windows\Java_Temurin-Hotspot_jdk\11.0.19-7\x64
[build.sh][INFO] Downloading https://archive.apache.org/dist/ant/binaries/apache-ant-1.10.8-bin.zip to /d/a/jdk/jdk/jtreg/src/make/../build/deps/apache-ant-1.10.8-bin.zip
[build.sh][INFO] Unpacking /d/a/jdk/jdk/jtreg/src/make/../build/deps/apache-ant-1.10.8-bin.zip in /d/a/jdk/jdk/jtreg/src/make/../build/deps/ant
[build.sh][INFO] ANT: /d/a/jdk/jdk/jtreg/src/make/../build/deps/ant/apache-ant-1.10.8/bin/ant
[build.sh][INFO] None of JTHARNESS_JAVATEST_JAR, JTHARNESS_ARCHIVE_URL or JTHARNESS_ARCHIVE_URL_BASE are set; building from source
[build.sh][INFO] CYGWIN_OR_MSYS=1
[build.sh][INFO] ANT: /d/a/jdk/jdk/jtreg/src/make/../build/deps/ant/apache-ant-1.10.8/bin/ant
[build.sh][INFO] Downloading https://git.openjdk.java.net/jtharness/archive/jt6.0-b24.zip to /d/a/jdk/jdk/jtreg/src/make/../build/deps/jtharness/src/../source.zip
[build.sh][INFO] Unpacking /d/a/jdk/jdk/jtreg/src/make/../build/deps/jtharness/src/../source.zip in /d/a/jdk/jdk/jtreg/src/make/../build/deps/jtharness/src
Error: Could not find or load main class org.apache.tools.ant.launch.Launcher
Caused by: java.lang.ClassNotFoundException: org.apache.tools.ant.launch.Launcher
Error: Process completed with exit code 1.;;;","2023-06-15 08:57;cstein;Using the boot JDK, downloaded/cached/installed in a previous step of the workflow, seems to be a safer and better approach to build jtreg: https://github.com/sormuras/jdk/actions/runs/5280848764/jobs/9553580303;;;","2023-06-19 05:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/31
Date: 2023-06-19 11:39:21 +0000;;;",,,,,,,,,,,,,,,
JFR: View issues,JDK-8309928,5103050,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2023-06-13 05:06,2023-07-12 13:10,2023-10-01 09:55,2023-06-14 05:29,21,22,,,,,22,hotspot,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"- jdk/jdk/tool/View.java contains bug print to standard out that should be removed
- test/jdk/jdk/jfr/tool/TestView.java refers incorrectly to TestJcmdView.java
- Unknown option not reported as expected for 'jfr view'. Needed for TestView.java to work
- Incorrect percentile chosen with P90 aggregator
- Incorrect syntax is incorrect 'jfr help view', missing bracket

",,,,,,,,,,,JDK-8310307,JDK-8310435,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31vr7:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-06-13 11:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14451
Date: 2023-06-13 17:53:03 +0000;;;","2023-06-14 05:29;dukebot;Changeset: 84d010a2
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-06-14 12:26:51 +0000
URL:       https://git.openjdk.org/jdk/commit/84d010a24bd59b80fa9e9158d41eab696a7292a9
;;;","2023-06-19 04:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/29
Date: 2023-06-19 11:13:39 +0000;;;",,,,,,,,,,,,,,,,,,,,
C2: assert(false) failed: Bad graph detected in build_loop_late after JDK-8305189,JDK-8309902,5103024,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,chagedorn,chagedorn,2023-06-13 00:23,2023-07-12 13:41,2023-10-01 09:55,2023-06-29 23:58,21,22,,,,,22,hotspot,,0,c2,hgupdate-sync,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-22,regression,,,,,,,,,,,"The following Java Fuzzer test fails after JDK-8305189 with the following assertion:

To reproduce:
$ java -Xcomp -XX:CompileCommand=compileonly,Test::* Test.java
$ java -Xcomp -XX:CompileCommand=compileonly,Reduced::* Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S9638/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7cab5968-cfac-4917-b50c-ee11433deb3c/runs/89e28e37-02bc-4ad0-8809-7a3c3140d816/workspace/open/src/hotspot/share/opto/loopnode.cpp:6101), pid=31952, tid=31967
#  assert(false) failed: Bad graph detected in build_loop_late
#
# JRE version: Java(TM) SE Runtime Environment (21.0+26) (fastdebug build 21-ea+26-LTS-2328)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+26-LTS-2328, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12953f8]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x9a8
...........
Command Line: -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S9617/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/22e17643-863f-4109-a641-efb37041dde2/runs/40615183-9cee-43d6-a5bd-08247939f04a/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_javafuzzer_BigTest_java/tmp Test
..........
Current CompileTask:
C2:    517    8   !b  4       Test::iMeth (318 bytes)

Stack: [0x00007f33d0963000,0x00007f33d0a64000],  sp=0x00007f33d0a5ed30,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12953f8]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x9a8  (loopnode.cpp:6101)
V  [libjvm.so+0x129552d]  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)+0xbd  (loopnode.cpp:6004)
V  [libjvm.so+0x1295e75]  PhaseIdealLoop::build_and_optimize()+0x635  (loopnode.cpp:4444)
V  [libjvm.so+0x9f2939]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x3b9  (loopnode.hpp:1124)
V  [libjvm.so+0x9ef4a7]  Compile::Optimize()+0xe97  (compile.cpp:2156)
V  [libjvm.so+0x9f16d6]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1b96  (compile.cpp:842)
V  [libjvm.so+0x84b3e4]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x3c4  (c2compiler.cpp:118)
V  [libjvm.so+0x9fd5e0]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa00  (compileBroker.cpp:2265)
V  [libjvm.so+0x9fe468]  CompileBroker::compiler_thread_loop()+0x618  (compileBroker.cpp:1944)
V  [libjvm.so+0xeb651c]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:719)
V  [libjvm.so+0x1795d7a]  Thread::call_run()+0xba  (thread.cpp:217)
V  [libjvm.so+0x149623c]  thread_native_entry(Thread*)+0x11c  (os_linux.cpp:778)",,,,,,,,,,,JDK-8311365,JDK-8311166,JDK-8311096,,,,,,,,,,,,,,,,,,,,,JDK-8305189,,,,,,,,"2023-06-13 00:22;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/104269/FuzzerUtils.java","2023-06-13 00:22;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/104268/Reduced.java","2023-06-13 00:23;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/104266/Test.java","2023-06-13 00:23;chagedorn;hs_err_pid31952.log;https://bugs.openjdk.org/secure/attachment/104267/hs_err_pid31952.log",,,,,,,,,,,b25,21,,,,,,,"0|i31vlf:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-13 00:24;chagedorn;ILW = Bad graph assertion, single Java fuzzer test, disable compilation of affected method = HLM = P3;;;","2023-06-13 00:24;chagedorn;[~roland] Can you have a look at it?;;;","2023-06-27 03:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14672
Date: 2023-06-27 10:02:37 +0000;;;","2023-06-29 23:58;thartmann;Changeset: 26efff75
Author: Roland Westrelin <roland@openjdk.org>
Date: 2023-06-29 15:05:49 +0000
URL: https://git.openjdk.org/jdk/commit/26efff758684b9c5615fb3b087538d713e6eca10;;;","2023-06-29 23:58;thartmann;Fix was pushed while main issue was targeted to '21'. Reset the main issue to fixed in '22' and copied the Robo Duke entry here.;;;","2023-06-30 00:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/83
Date: 2023-06-30 07:07:30 +0000;;;",,,,,,,,,,,,,,,,,
compiler/vectorapi/VectorLogicalOpIdentityTest.java fails on SVE system with UseSVE=0,JDK-8309894,5103016,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xgong,xgong,xgong,2023-06-12 23:56,2023-07-12 13:48,2023-10-01 09:55,2023-07-03 18:37,21,22,,,,,22,hotspot,,0,noreg-self,oracle-triage-22,vectorapi,,,,,,,,,,,,,,,"Some sub tests fails with IR test failure when this test is run on SVE systems with ""-XX:UseSVE=0"". 
Here is part of the failure log:

```
Command Line:
/home/ent-user/ci-scripts/jdk_build/build-fastdebug/images/jdk/bin/java -DReproduce=true -cp /home/ent-user/ci-scripts/jdk_build/jtwork_rerun/classes/compiler/vectorapi/VectorLogicalOpIdentityTest.d:/home/ent-user/ci-scripts/jdk_build/jdk_src/test/hotspot/jtreg/compiler/vectorapi:/home/ent-user/ci-scripts/jdk_build/jtwork_rerun/classes/test/lib:/home/ent-user/ci-scripts/jdk_build/jdk_src/test/lib:/home/ent-user/ci-scripts/jdk_build/jtwork_rerun/classes:/home/ent-user/ci-scripts/jdk_build/jdk_src/test/hotspot/jtreg:/home/ent-user/jtreg/jtreg-git/build/images/jtreg/lib/javatest.jar:/home/ent-user/jtreg/jtreg-git/build/images/jtreg/lib/jtreg.jar -Djava.library.path=/home/ent-user/ci-scripts/jdk_build/build-fastdebug/images/test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -ea -esa -Xmx768m -server -XX:UseSVE=0 -Djdk.test.docker.image.name=ubuntu -Djdk.test.docker.image.version=22.04 -Djdk.incubator.vector.test.loop-iterations=500 -DweakAttempts=100000 -Dir.framework.server.port=35695 --add-modules=jdk.incubator.vector -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompilerDirectivesFile=test-vm-compile-commands-pid-215737.log -XX:CompilerDirectivesLimit=391 -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.vectorapi.VectorLogicalOpIdentityTest

One or more @IR rules failed:

Failed IR Rules (6) of Methods (6)
----------------------------------
1) Method ""public static void compiler.vectorapi.VectorLogicalOpIdentityTest.testAndMaskSameValue1()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={""sve"", ""true"", ""avx512"", ""true""}, applyIf={}, applyIfCPUFeature={}, counts={""_#AND_V#_"", ""1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintIdeal"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\d+(\s){2}(AndV.*)+(\s){2}===.*)""
           - Failed comparison: [found] 2 = 1 [given]
             - Matched nodes (2):
               * 359  AndV  === _ 358 458  [[ 239 ]]  #vectorx[4]:{int} !jvms: IntVector::lanewiseTemplate @ bci:192 (line 834) IntMaxVector::lanewise @ bci:9 (line 276) IntMaxVector::lanewise @ bci:4 (line 41) VectorLogicalOpIdentityTest::testAndMaskSameValue1 @ bci:47 (line 311)
               * 457  AndV  === _ 205 458  [[ 358 ]]  #vectorx[4]:{int} !jvms: IntVector::lanewiseTemplate @ bci:192 (line 834) IntMaxVector::lanewise @ bci:9 (line 276) IntMaxVector::lanewise @ bci:4 (line 41) VectorLogicalOpIdentityTest::testAndMaskSameValue1 @ bci:39 (line 310)

2) Method ""public static void compiler.vectorapi.VectorLogicalOpIdentityTest.testAndMaskSameValue2()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={""sve"", ""true"", ""avx512"", ""true""}, applyIf={}, applyIfCPUFeature={}, counts={""_#AND_V#_"", ""1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintIdeal"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\d+(\s){2}(AndV.*)+(\s){2}===.*)""
           - Failed comparison: [found] 2 = 1 [given]
             - Matched nodes (2):
               * 267  AndV  === _ 266 184  [[ 160 ]]  #vectorx[2]:{long} !jvms: LongVector::lanewiseTemplate @ bci:193 (line 792) LongMaxVector::lanewise @ bci:9 (line 271) LongMaxVector::lanewise @ bci:4 (line 41) VectorLogicalOpIdentityTest::testAndMaskSameValue2 @ bci:47 (line 332)
               * 361  AndV  === _ 184 432  [[ 266 ]]  #vectorx[2]:{long} !jvms: LongVector::lanewiseTemplate @ bci:193 (line 792) LongMaxVector::lanewise @ bci:9 (line 271) LongMaxVector::lanewise @ bci:4 (line 41) VectorLogicalOpIdentityTest::testAndMaskSameValue2 @ bci:39 (line 331)
```
Cause is these tests should be run on sve hardware with sve enabled. Option ""-XX:UseSVE=0"" will disable the SVE without changing the cpu feature. So these tests run since the cpu feature is matched, but the JVM environment is not sve.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309895,,JDK-8309896,JDK-8309897,JDK-8309898,JDK-8311130,,,,JDK-8309697,JDK-8288294,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i31vjn:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-13 00:07;thartmann;[~xgong] could you please add more information to the bug? I assume this is a test bug? What's the failure mode?;;;","2023-06-13 00:08;thartmann;Initial ILW = Test fails (test bug), single test with UseSVE=0, no workaround = MLH = P4;;;","2023-06-13 00:09;xgong;Sorry, I forgot to add the details. I will add this now. Thanks!;;;","2023-06-13 03:20;thartmann;Thanks!;;;","2023-06-18 18:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14533
Date: 2023-06-19 01:49:57 +0000;;;","2023-07-03 18:37;dukebot;Changeset: 60544f90
Author:    Xiaohong Gong <xgong@openjdk.org>
Date:      2023-07-04 01:35:03 +0000
URL:       https://git.openjdk.org/jdk/commit/60544f9088c11e4718a9cd77f21792c6ba387440
;;;",,,,,,,,,,,,,,,,,
TestStringDeduplicationInterned.java waits for the wrong condition,JDK-8309890,5103012,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stefank,stefank,stefank,2023-06-12 22:46,2023-07-12 13:08,2023-10-01 09:55,2023-06-13 23:31,17,21,22,,,,22,hotspot,,0,amazon-interest,,,,,,,,,,,,,,,,,"There's a section in the test that waits up to 10 seconds for a string to be deduplicated and then does a final verification that the string was correctly deduplicated. However, the initial waiting gets passed the wrong comparison string, which has the effect that this test always waits for 10 seconds before proceeding.

The problem is here:
            if (!waitForDeduplication(dupString3, baseString)) {
                if (getValue(dupString3) != getValue(internedString)) { 

where the first line should say:
            if (!waitForDeduplication(dupString3, internedString)) {",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8254598,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31vir:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-12 22:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14437
Date: 2023-06-13 05:48:32 +0000;;;","2023-06-13 23:31;dukebot;Changeset: 63fe413d
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2023-06-14 06:30:05 +0000
URL:       https://git.openjdk.org/jdk/commit/63fe413d93861c79af5587859f01822980969c24
;;;","2023-06-14 03:48;shade;Seems to be introduced by JDK-8254598, so the issue stretches back to at least 17.;;;",,,,,,,,,,,,,,,,,,,,
[s390] Missing return statement after calling jump_to_native_invoker method in generate_method_handle_dispatch.,JDK-8309889,5103010,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amitkumar,amitkumar,amitkumar,2023-06-12 22:10,2023-08-28 14:25,2023-10-01 09:55,2023-07-03 21:37,,,,,,,22,hotspot,,0,jdk21u-fix-request,jdk21u-fix-yes,oraclejdk-na,,,,,,,,,,,,,,,"This issue is created on behalf of Sidraya.
Missing return statement after calling jump_to_native_invoker method in generate_method_handle_dispatch, it leads to assert(is_valid()) failed: invalid register.",,,,,,,,,,,JDK-8315143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s390x,,,,,,,,,,,,,,,"0|i31vib:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-25 23:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14647
Date: 2023-06-26 06:05:12 +0000;;;","2023-07-03 21:37;dukebot;Changeset: 514816ed
Author:    Sidraya Jayagond <sidraya.jayagond@ibm.com>
Committer: Amit Kumar <amitkumar@openjdk.org>
Date:      2023-07-04 04:35:18 +0000
URL:       https://git.openjdk.org/jdk/commit/514816ed7d7dea1fb13d32b80aef89774bee13d3
;;;","2023-08-25 10:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/106
Date: 2023-08-25 17:45:18 +0000;;;",,,,,,,,,,,,,,,,,,,,
missing @since tags in `com.sun.source.*`,JDK-8309884,5103002,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2023-06-12 16:50,2023-07-12 13:07,2023-10-01 09:55,2023-06-13 10:43,21,,,,,,22,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,"... StringTemplateTree, DirectiveTree, LambdaExpressionTree, Trees",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31vgj:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-12 17:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14434
Date: 2023-06-13 00:20:05 +0000;;;","2023-06-13 10:43;dukebot;Changeset: b5b5b7ce
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-06-13 17:40:34 +0000
URL:       https://git.openjdk.org/jdk/commit/b5b5b7ce7220df650f6142c40d6e89c0462877ce
;;;",,,,,,,,,,,,,,,,,,,,,
"no `@since` info in com.sun.tools.javac package-info.java, Main.java",JDK-8309883,5103001,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2023-06-12 15:58,2023-07-12 13:23,2023-10-01 09:55,2023-06-21 11:02,21,,,,,,22,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,"There is no @since info in com.sun.tools.javac package-info.java, Main.java

Both files should be `@since 1.5`",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31vgb:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-12 16:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14431
Date: 2023-06-12 23:17:42 +0000;;;","2023-06-21 11:02;dukebot;Changeset: 226c6a09
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-06-21 18:00:14 +0000
URL:       https://git.openjdk.org/jdk/commit/226c6a097d9ec2fb66a678546ccd56b513494693
;;;",,,,,,,,,,,,,,,,,,,,,
LinkedHashMap adds an errant serializable field,JDK-8309882,5103000,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,smarks,smarks,smarks,2023-06-12 15:52,2023-07-12 13:04,2023-10-01 09:55,2023-06-13 08:18,,,,,,,22,core-libs,,0,eclipse-collections-found,hgupdate-sync,noreg-trivial,,,,,,,,,,,,,,,"A new field 'putMode' had been added to LinkedHashMap in the initial Sequenced Collection implementation (JDK-8266571). Since the class is serializable, this resulted in an unintended change to the serial format. The field should be marked 'transient' to restore the previous serial format.",,,,,,,,,,,JDK-8309975,,,,,,,,,,,,,JDK-8280836,,JDK-8309885,,,,,,,,,,,,JDK-8266571,JDK-8310821,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31vg3:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2023-06-12 17:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14433
Date: 2023-06-13 00:03:35 +0000;;;","2023-06-12 18:01;smarks;This change was detected by serialization tests in the EclipseCollections project and reported through the Quality Outreach program. See

https://github.com/eclipse/eclipse-collections/pull/1461

for some disucussion.;;;","2023-06-13 08:18;dukebot;Changeset: e1386856
Author:    Stuart Marks <smarks@openjdk.org>
Date:      2023-06-13 15:16:28 +0000
URL:       https://git.openjdk.org/jdk/commit/e138685648fb7a756a05f314af2883ce408abdd2
;;;","2023-06-13 13:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/15
Date: 2023-06-13 20:20:32 +0000;;;",,,,,,,,,,,,,,,,,,,
NMethod barriers may remain armed when regions are promoted in place,JDK-8309874,5102991,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wkemper,wkemper,wkemper,2023-06-12 11:26,2023-06-15 10:26,2023-10-01 09:55,2023-06-15 10:26,,,,,,,,hotspot,,0,gc-shenandoah,genshen,,,,,,,,,,,,,,,,"In-place promotions are executed during the evacuation phase, even when the collection set is empty. In this case, the nmethod barriers will remain armed. This causes the generational mode to take the slow path through the nmethod entry and may cause other problems.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ve3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-14 13:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/286
Date: 2023-06-14 20:30:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Using -proc:full should be considered requesting explicit annotation processing,JDK-8309870,5102987,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2023-06-12 10:12,2023-06-14 23:44,2023-10-01 09:55,2023-06-12 11:16,21,,,,,,22,tools,,0,hgupdate-sync,noreg-trivial,,,,,,,,,,,,,,,,"While the new -proc:full option (JDK-8308245), specifies the current default annotation + compilation policy, using that option should be regarded as explicitly requesting annotation processing.",,,,,,,,,,,JDK-8309879,,,,,,,,,,,,,,,,,,,,,,,JDK-8308245,JDK-8306819,,,JDK-6988436,,,,,,,,,,,,,,,,,,,21,,,,,,,"0|i31vd7:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-12 10:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14423
Date: 2023-06-12 17:28:48 +0000;;;","2023-06-12 11:16;dukebot;Changeset: 3ce1240c
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2023-06-12 18:14:27 +0000
URL:       https://git.openjdk.org/jdk/commit/3ce1240ca1b4139980444c171e317f4bfeff9314
;;;","2023-06-12 12:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/10
Date: 2023-06-12 19:35:39 +0000;;;",,,,,,,,,,,,,,,,,,,,
redundant class field RSAPadding.md,JDK-8309867,5102984,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xuelei,xuelei,xuelei,2023-06-12 09:33,2023-06-14 23:44,2023-10-01 09:55,2023-06-12 13:44,,,,,,,22,security-libs,,0,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,,The class field RSAPadding.md can be converted to a local variable.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31vcj:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2023-06-12 09:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14422
Date: 2023-06-12 16:39:33 +0000;;;","2023-06-12 13:44;dukebot;Changeset: 80a8144a
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2023-06-12 20:42:53 +0000
URL:       https://git.openjdk.org/jdk/commit/80a8144af5aae104188de9cc182e6d59c1466732
;;;",,,,,,,,,,,,,,,,,,,,,
Unsafe list operations in JfrStringPool,JDK-8309862,5102979,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mgronlun,mgronlun,mgronlun,2023-06-12 08:44,2023-09-24 23:32,2023-10-01 09:55,2023-06-13 04:49,17,21,22,,,,22,hotspot,,0,8bpr-critical-approved,amazon-interest,bugdb_35469729,bugdb_35630692,hgupdate-sync,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,"JDK-8233705 : Let artifact iteration running time be a function of incrementally tagged artifacts

was a follow-up enhancement for improved performance and scalability for JDK-8226511: Implement JFR Event Streaming.

With JDK-8226511, the Jfr Recorder Thread collects artifacts every second instead of only at chunk rotation. As such, it became crucial that the JFR subsystems support concurrent access.

JDK-8233705 extended the concept of a JfrMemorySpace, a JFR memory abstraction area, to make it ""epoch-aware"". An epoch-aware mspace selects free and full lists as a function of the current epoch. An epoch-aware mspace lets the JFR Recorder Thread have exclusive access to the lists used in the previous epoch while the threads continue to operate on the current epoch lists.

JDK-8233705 updated the JfrCheckpointManager's mspaces to become epoch-aware. A flush operation, performed by the JFR Recorder Thread every second, operates on the current live lists concurrently with other threads. As such, it must not make unsafe changes to this list, as other threads are iterating it. It only writes data from the list during flush and postpones destructive changes until after the epoch shift. This invariant allows the JFR Recorder Thread exclusive access to the previous epoch lists, letting it issue destructive operations exclusively.

JDK-8233705 also updated the operation types used in JfrStringPool to mirror JfrCheckpointManager. Unfortunately, those operation types only work correctly with an epoch-aware mspace because it builds on the invariant of exclusive list access for the JFR Recorder Thread, and the JfrStringPool mspace was not made epoch-aware.

Typically, this is not a problem because the string pool pressure must be so high as to fill more than 1 Mb of strings, each having a max size of 128 bytes, approximately 8192 unique event strings, within a 1-second window. Should that occur, the system will dynamically allocate new memory for the mspace, in what is called a ""transient"" buffer.

The bug is that the JFR Recorder Thread excises and deletes transient buffers in the JfrStringPool from the current epoch live lists, where this is only an allowed operation on previous epoch lists (for mutual exclusion). Another thread could be iterating the live list while the JFR Recorder Thread removes and deletes a node.

This fix fills in the missing parts done to JfrCheckpointManager as part of JDK-8233705 but was omitted for JfrStringPool. Most importantly, it makes the underlying mspace epoch-aware, splits the write operation into a flush operation for current epoch lists (i.e. flush performs no destructive operations to the lists), and will let write and clear operate on the correct, previous epoch lists, exclusively where it can issue destructive operations.

In addition, it includes better memory reuse of JfrStringPool transient buffers because they always accommodate at least 512 kb of size. Previously, the buffer was retired immediately, even though there might be a lot of free space left. Now the transient buffers are not retired immediately but only when full, in the same manner as for ""regular"" preallocated buffers.",,,,,,,,,,,JDK-8310714,JDK-8311014,JDK-8309948,JDK-8309962,JDK-8309931,JDK-8309951,,,,,,,,,,,,,,,JDK-8309762,,,JDK-8309762,JDK-8309917,,,JDK-8233705,JDK-8226511,,,,,,,,,,,,,,,,,,15,,,,,,,"0|i31vbf:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-06-12 12:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14426
Date: 2023-06-12 19:07:09 +0000;;;","2023-06-13 04:49;dukebot;Changeset: 05f896a1
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2023-06-13 11:47:47 +0000
URL:       https://git.openjdk.org/jdk/commit/05f896a153ee950b21bae251d2870a8adfe4f04a
;;;","2023-06-13 05:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/12
Date: 2023-06-13 11:52:29 +0000;;;","2023-06-14 08:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1439
Date: 2023-06-14 14:50:46 +0000;;;","2023-06-14 09:58;shade;Fix Request (17u)

Fixes the important bug in JFR, and matches 17.0.9-oracle. Does not apply cleanly due to contextual differences, but bots think the backport is clean after the merge. JFR tests pass.;;;","2023-06-15 07:41;goetz;[17u] 
It's  brand new in head, but let's hope it proves itself until 17.0.9 is delivered.;;;","2023-06-15 11:45;shade;True. The testing looks clean. I'll wait a bit to see if there are any follow-up issues emerge.;;;",,,,,,,,,,,,,,,,
Make editorial changes to spec change document for JEPs 440&441,JDK-8309859,5102976,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbierman,gbierman,gbierman,2023-06-12 08:15,2023-07-12 12:58,2023-10-01 09:55,2023-06-13 14:41,,,,,,,22,specification,,0,hgupdate-sync,noreg-doc,,,,,,,,,,,,,,,,A number of minor changes were made to the spec after converting to docbook. These should be applied to the original spec change document,,,,,,,,,,,JDK-8310057,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31var:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7441ef8d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ciReplay TestServerVM test fails with Graal,JDK-8309854,5102971,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,dnsimon,dnsimon,2023-06-12 07:42,2023-07-12 13:04,2023-10-01 09:55,2023-06-13 09:14,21,22,,,,,22,hotspot,,0,ci-replay,graal,noreg-self,oracle-triage-22,,,,,,,,,,,,,,"java.lang.Error: Can't create replay: java.lang.RuntimeException: Crash JVM exits gracefully: expected 0 to not equal 0
        at compiler.ciReplay.CiReplayBase.generateReplay(CiReplayBase.java:192)
        at compiler.ciReplay.CiReplayBase.runTest(CiReplayBase.java:130)
        at compiler.ciReplay.VMBase.main(VMBase.java:33)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
        at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.lang.RuntimeException: Crash JVM exits gracefully: expected 0 to not equal 0
        at jdk.test.lib.Asserts.fail(Asserts.java:594)
        at jdk.test.lib.Asserts.assertNotEquals(Asserts.java:394)
        at compiler.ciReplay.CiReplayBase.generateReplay(CiReplayBase.java:187)
        ... 6 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31v9n:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-13 05:53;thartmann;The assert triggers because the VM does not crash with -XX:CICrashAt=1. Also Graal does not support replay compilation (see JDK-8181747), so the corresponding tests should simply be excluded. I think the fix is:

diff --git a/test/hotspot/jtreg/compiler/ciReplay/TestServerVM.java b/test/hotspot/jtreg/compiler/ciReplay/TestServerVM.java
index afa2b0a14da..90af3e36f99 100644
--- a/test/hotspot/jtreg/compiler/ciReplay/TestServerVM.java
+++ b/test/hotspot/jtreg/compiler/ciReplay/TestServerVM.java
@@ -26,7 +26,7 @@
  * @bug 8011675
  * @library / /test/lib
  * @summary testing of ciReplay with using generated by VM replay.txt
- * @requires vm.flightRecorder != true & vm.compMode != ""Xint"" & vm.debug == true & vm.flavor == ""server""
+ * @requires vm.flightRecorder != true & vm.compMode != ""Xint"" & vm.debug == true & vm.compiler2.enabled
  * @modules java.base/jdk.internal.misc
  * @build jdk.test.whitebox.WhiteBox
  * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox
;;;","2023-06-13 05:57;thartmann;ILW = Test fails (test bug), single test with Graal as JIT, no workaround = MLH = P4;;;","2023-06-13 06:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14447
Date: 2023-06-13 13:04:32 +0000;;;","2023-06-13 09:14;dukebot;Changeset: 3eec179c
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-06-13 16:13:42 +0000
URL:       https://git.openjdk.org/jdk/commit/3eec179c726e66bc1d0638dfe6e05f46fcea9d10
;;;",,,,,,,,,,,,,,,,,,,
StructuredTaskScope.join description improvements,JDK-8309853,5102969,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alanb,alanb,alanb,2023-06-12 07:18,2023-07-17 06:44,2023-10-01 09:55,2023-06-21 21:31,21,22,,,,,22,core-libs,,0,hgupdate-sync,loom,noreg-doc,,,,,,,,,,,,,,,"StructuredTaskScope's class description introduces join as waiting for all subtasks to finish but the join/joinUntil are phrased in terms of waiting for all threads to finish. The wording should be consistent.

ShutdownOnXXX join inherit the description for join/joinUntil. It would better if they overrode the specification to make it clear that they wait until all subtasks finished or a subtask to succeed or fail.",,,,,,,,,,,JDK-8310688,JDK-8311335,,,,,,,,,,,,,,JDK-8309933,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31v97:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,,,"2023-06-13 09:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14419
Date: 2023-06-12 14:32:07 +0000;;;","2023-06-21 21:31;dukebot;Changeset: 3661cdee
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-06-22 04:29:13 +0000
URL:       https://git.openjdk.org/jdk/commit/3661cdee1b20ab2868025637871d22bb30add6bd
;;;","2023-06-22 05:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/55
Date: 2023-06-22 10:45:02 +0000;;;",,,,,,,,,,,,,,,,,,,,
FrameForm and RegisterForm constructors should initialize all members ,JDK-8309847,5102960,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2023-06-12 05:05,2023-07-12 13:09,2023-10-01 09:55,2023-06-14 04:48,11,17,22,,,,22,hotspot,,0,c2,cleanup,oracle-triage-22,starter,,,,,,,,,,,,,,"Reported by Vladimir Petko <vladimir.petko@canonical.com>, see:
https://mail.openjdk.org/pipermail/hotspot-dev/2023-June/075315.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31v77:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-12 05:06;thartmann;ILW = Constructor does not initialize all members, no issues observed with current code, no workaround = MLH = P4;;;","2023-06-12 21:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14435
Date: 2023-06-13 02:26:01 +0000;;;","2023-06-14 04:48;dukebot;Changeset: e3d6fc87
Author:    Vladimir Petko <vladimir.petko@canonical.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-06-14 11:47:02 +0000
URL:       https://git.openjdk.org/jdk/commit/e3d6fc875b98c9ac2e63aec4a52bcf1515d797df
;;;",,,,,,,,,,,,,,,,,,,,
Clarify API note in Class::getName and MethodType::toMethodDescriptorString,JDK-8309819,5102927,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,liach,liach,liach,2023-06-12 00:30,2023-07-12 13:44,2023-10-01 09:55,2023-06-30 16:39,21,22,,,,,22,core-libs,,0,hgupdate-sync,noreg-doc,,,,,,,,,,,,,,,,"The API specification for descriptorString not being a strict inverse of Class::forName and MethodType::fromDescriptorString are not entirely correct. 

1. Class::descriptorString was never an inverse of Class::forName, which takes a binary name instead. Class::getName was a partial inverse instead.
2. MethodType::toMethodDescriptorString ends with a meaningless sentence: ""fromMethodDescriptorString,  because the latter requires a suitable class loader argument."", and the ""Note:"" section can be replaced with an `@apiNote`.
3. Both of these didn't mention hidden classes as a reason that prevents the inversion operation, in addition to distinct classloaders.

A few user-defined anchor links are replaced with updated javadoc link tag format as well.",,,,,,,,,,,JDK-8311210,JDK-8311374,,,,,,,,,,,,,,JDK-8309823,,,,,,,,,,,,JDK-8310242,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31uzv:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2023-06-12 01:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14411
Date: 2023-06-12 07:58:29 +0000;;;","2023-06-30 16:39;dukebot;Changeset: 8c8e9d91
Author:    Chen Liang <liach@openjdk.org>
Committer: Mandy Chung <mchung@openjdk.org>
Date:      2023-06-30 23:37:53 +0000
URL:       https://git.openjdk.org/jdk/commit/8c8e9d911d388f6ee621ed4d322efc56a9876708
;;;","2023-06-30 17:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/89
Date: 2023-07-01 00:45:32 +0000;;;",,,,,,,,,,,,,,,,,,,,
BytecodePrinter cannot handle unlinked classes,JDK-8309811,5102914,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,iklam,iklam,2023-06-11 22:12,2023-07-12 13:38,2023-10-01 09:55,2023-06-28 15:52,22,,,,,,22,hotspot,,0,interpreter,,,,,,,,,,,,,,,,,"BytecodePrinter always uses Bytes::get_native_u2/u4 to read the index of bytecodes such as the field and invoke bytecodes. However, if this class is not yet linked, the indices should be read using Bytes::get_Java_u2/u4

(x64 and most supported CPUs are little endian, so the ""java"" and ""native"" byte ordering are reversed.)

https://github.com/openjdk/jdk/blob/16c3d53b1bb60b1c1570731041f564bf13b45098/src/hotspot/share/interpreter/bytecodeTracer.cpp#L66-L67

This is not a problem for -XX:+TraceBytecodes, which only traces classes that have been linked. However, we'd get bad output when calling Method::print_codes_on() for unlinked classes.

==========================

Test case is the same as in JDK-8309808

// Output: (debug VM)
$ java -XX:+UseNewCode -cp ~/tmp BytecodeTracerTest
[....]
[  0] 0x0000000801000a18 class BytecodeTracerTest$Unlinked loader data: 0x00007f3ae0273a40 for instance a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000007ffce70a8}
0x00007f3aa8400888 method <init> : ()V
0x00007f3aa8400880    0 aload_0
0x00007f3aa8400881    1 invokespecial CP[65792] not in CP <<<<<
0x00007f3aa8400884    4 return

0x00007f3aa8400940 method toString : ()Ljava/lang/String;
0x00007f3aa8400930    0 aload_0
0x00007f3aa8400931    1 invokevirtual CP[67328] not in CP   <<<<<
0x00007f3aa8400934    4 invokedynamic CP[62719] not in CP <<<<<
0x00007f3aa8400939    9 areturn

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309808,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31uwz:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-22 22:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14623
Date: 2023-06-23 05:18:36 +0000;;;","2023-06-28 15:52;dukebot;Changeset: ded13707
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2023-06-28 22:50:24 +0000
URL:       https://git.openjdk.org/jdk/commit/ded137073ac1b2086a577508172626898999e275
;;;",,,,,,,,,,,,,,,,,,,,,
BytecodeTracer prints wrong BSM for invokedynamic,JDK-8309808,5102911,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,iklam,iklam,2023-06-11 22:05,2023-07-12 13:10,2023-10-01 09:55,2023-06-14 14:15,22,,,,,,22,hotspot,,0,interpreter,,,,,,,,,,,,,,,,,"/// Test case
import java.io.Serializable;

public class BytecodeTracerTest {
    public static class Unlinked implements Serializable {
        public String toString() {
            return ""Unlinked"" + this.hashCode();
        }
    }
    public static void main(String args[]) {
        System.out.println(""num args = "" + args.length);
    }
    public Serializable cast(Unlinked f) {
        // Verifying this method causes the ""Unlinked"" class to be loaded. However
        // the ""Unlinked"" class is never used during the execution of
        // BytecodeTracerTest.main(), so it is not linked by HotSpot.
        return f;
    }
}

// Modify exit_globals() in init.cpp to be:

+extern ""C"" JNIEXPORT void findclass(const char* class_name_pattern, int flags);
 
 void exit_globals() {
   static bool destructorsCalled = false;
+  if (UseNewCode) {
+    findclass(""BytecodeTracerTest"", 0xff);
+    findclass(""BytecodeTracerTest$Unlinked"", 0xff);
+  }

// Output: (debug VM)
$ java -XX:+UseNewCode -cp ~/tmp BytecodeTracerTest
0x00007f3aa8400398 static method main : ([Ljava/lang/String;)V
0x00007f3aa8400380    0 getstatic 7 <java/lang/System.out/Ljava/io/PrintStream;> 
0x00007f3aa8400383    3 fast_aload_0
0x00007f3aa8400384    4 arraylength
0x00007f3aa8400385    5 invokedynamic 1 <java/lang/Object.<init>()V>   <<<<< WRONG
0x00007f3aa840038a   10 invokevirtual 17 <java/io/PrintStream.println(Ljava/lang/String;)V> 
0x00007f3aa840038d   13 return
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309811,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31uwb:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-12 15:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14429
Date: 2023-06-12 21:56:30 +0000;;;","2023-06-14 14:15;dukebot;Changeset: 931625a9
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2023-06-14 21:14:01 +0000
URL:       https://git.openjdk.org/jdk/commit/931625a9304ec2761ca9035d69fd33f6beadb124
;;;",,,,,,,,,,,,,,,,,,,,,
java/nio/file/Files/CopyAndMove.java fails when using second test directory,JDK-8309778,5102881,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lzhai,lzhai,lzhai,2023-06-11 20:25,2023-09-21 06:09,2023-10-01 09:55,2023-06-15 23:17,21,22,,,,,22,core-libs,,0,noreg-self,,,,,,,,,,,,,,,,,"Sun Yaqi reported the issue:

The test case (java/nio/file/Files/CopyAndMove.java) fail with java.nio.file.NoSuchFileException: ./name1692782213124882428/link when it is a different volume/file system.
The createSymbolicLink(link, source) failed to create a symbolic link because a relative path was used.

STDERR:
dir1: /tmp/name7460415070033184926 (xfs)
dir2: ./name3202546005695331436 (ext4)
java.nio.file.NoSuchFileException: ./name3202546005695331436/link
    at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
    at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
    at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
    at java.base/sun.nio.fs.UnixFileSystem.copy(UnixFileSystem.java:1005)
    at java.base/sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:300)
    at java.base/java.nio.file.Files.copy(Files.java:1303)
    at CopyAndMove.copyAndVerify(CopyAndMove.java:662)
    at CopyAndMove.testCopyFileToFile(CopyAndMove.java:914)
    at CopyAndMove.main(CopyAndMove.java:74)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
    at java.base/java.lang.Thread.run(Thread.java:1583)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i31upn:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-06-12 15:45;bpb;Would the submitter please provide a self-contained test case?

Meanwhile, resolving as incomplete.;;;","2023-06-12 18:12;lzhai;Hi Brain,

Sun Yaqi provided the self-contained test case: java/nio/file/Files/CopyAndMove.java

Could you reopen the bug for her please?

Thanks,
Leslie Zhai;;;","2023-06-12 18:56;bpb;[~lzhai] To be accurate, that is an existing test case. Was this run in some way different from the default?;;;","2023-06-12 19:48;lzhai;Hi Brain,

Sun Yaqi replied:

The default way is the make command, but there is no test coverage for a *different* file system.
And the *different* way is through the jtreg command trigger problems on a *different* file system.

Hope to make it clear that this run in some way different from the default.

Thanks,
Leslie Zhai;;;","2023-06-12 20:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14436
Date: 2023-06-13 03:40:53 +0000;;;","2023-06-13 01:32;alanb;The CopyAndMove test will re-run the copy/move tests when the jtreg work directory is on a different file system to tmp file system. The tests for copying the target of sym links are failing when a second test directory is used because the target does not exist. I've changed the title of this issue tome it clearer what this is about.;;;","2023-06-14 09:11;iris;Update to use an existing ""noreg"" label.  ""noreg-test"" is a guess based on the Description and PR.  The complete list is here:
https://openjdk.org/guide/#noreg;;;","2023-06-15 23:17;dukebot;Changeset: cfae6ef2
Author:    sunyaqi <sunyaqi@loongson.cn>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2023-06-16 06:15:55 +0000
URL:       https://git.openjdk.org/jdk/commit/cfae6ef2f61f0a6611de2f66e6e773c547ba7878
;;;",,,,,,,,,,,,,,,
Leak class loader constraints,JDK-8309761,5102858,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2023-06-09 19:13,2023-07-25 04:30,2023-10-01 09:55,2023-06-12 07:04,20-pool,21,22,,,,22,hotspot,,0,amazon-interest,hgupdate-sync,,,,,,,,,,,,,,,,ConstraintSet's destructor does not deallocate contained loader constraints,,,,,,,,,,,JDK-8311660,JDK-8312896,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291969,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ukz:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-09 20:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14407
Date: 2023-06-10 02:29:55 +0000;;;","2023-06-12 07:04;dukebot;Changeset: 8e4e6b05
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2023-06-12 14:03:17 +0000
URL:       https://git.openjdk.org/jdk/commit/8e4e6b056c5ecf731f84a71e4e319d2a27734ec2
;;;","2023-06-12 07:12;shade;Seems to be introduced by JDK-8291969.;;;","2023-07-02 12:42;zgu;Fix Request (21u)

A clean backport to fix memory leaks.;;;","2023-07-02 12:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/6
Date: 2023-07-02 19:40:58 +0000;;;","2023-07-07 09:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/105
Date: 2023-07-07 16:08:14 +0000;;;",,,,,,,,,,,,,,,,,
com/sun/jdi/ReferrersTest.java fails with virtual test thread factory,JDK-8309757,5102853,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2023-06-09 16:41,2023-07-12 13:07,2023-10-01 09:55,2023-06-13 11:09,22,,,,,,22,core-svc,,0,loom,noreg-self,,,,,,,,,,,,,,,,"This test launches a debuggee, which creates 11 instances of its main class, stores them in a static array of the main class, and then the debugger side iterates over all referrers to the main class instaces. Usually this is a pretty quick process and doesn't produce much in the way of output while walking the reference tree of referrers. However, with virtual threads the tree walking and output get unwieldy, and eventually it fails with:

IOException reading output of child java interpreter:Stream closed
java.lang.IllegalThreadStateException
	at jdk.jdi/com.sun.tools.jdi.JDWPException.toJDIException(JDWPException.java:76)
	at jdk.jdi/com.sun.tools.jdi.ThreadReferenceImpl.name(ThreadReferenceImpl.java:197)
	at jdk.jdi/com.sun.tools.jdi.ThreadReferenceImpl.toString(ThreadReferenceImpl.java:637)
	at java.base/java.lang.String.valueOf(String.java:4461)
	at ReferrersTest.showReferrers(ReferrersTest.java:438)
	at ReferrersTest.showReferrers(ReferrersTest.java:466)

And ReferrersTest.showReferrers() has recursed about 200 levels deep. I'm not sure the order of these errors can be relied on. It looks like while walking the referrers tree, the test eventually stumbled upon a thread that had exited (but its Thread object was still alive), and this resulted in the test aborting. If I catch these exceptions, eventually the test times out while still working on referrers.

Judging by some of the output, it appears that introducing the TestScaffold class as a referrer to the main debuggee class is the root cause of all these extra referrers.

The test has a provision to cut off the recursion:

        // We have to stop going up a referrer chain in some cases
        Type rt = objRef.type();
        if (rt instanceof ClassType) {
            ClassType ct = (ClassType)rt;
            String name = ct.name();
            if (name.equals(""sun.awt.SoftCache$ValueCell"")) {
                return;
            }
            if (name.equals(""java.lang.ref.Finalizer"")) {
                return;
            }
            if (name.equals(""java.lang.ref.SoftReference"")) {
                return;
            }
            // oh oh, should really check for a subclass of ClassLoader :-)
            if (name.indexOf(""ClassLoader"") >= 0) {
                return;
            }
            // No doubt there are other reasons to stop ...
        }

Adding TestScaffold to the list makes it so the referrer tree walking output is almost identical to what it is when not using virtual threads. Adding java.lang.reflect.Method instead does a slightly better job.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285422,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ujv:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-06-09 17:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14405
Date: 2023-06-09 23:58:39 +0000;;;","2023-06-13 11:09;dukebot;Changeset: d7251c17
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-06-13 18:07:43 +0000
URL:       https://git.openjdk.org/jdk/commit/d7251c1755779f8c4fdeac16ccb797ed45b1dfd4
;;;",,,,,,,,,,,,,,,,,,,,,
 Occasional crashes with pipewire screen capture on Wayland,JDK-8309756,5102852,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,prr,prr,2023-06-09 15:18,2023-07-12 13:13,2023-10-01 09:55,2023-06-15 15:50,21,22,,,,,22,client-libs,,0,hgupdate-sync,noreg-other,sn_146,wayland,,,,,,,,,,,,,,"Some tests trigger a not very reproducible crash, and it wasn't clear if it was a bug in pipewire.

Whilst investigating another issue regarding capture of full screen windows, I found a
way to make the crash more reproducible.

On my VirtualBox if I had just one CPU configured I could trigger a crash 80% of the time.
If I configured 6 (my default) it rarely crashed.

The reported error was typically something like

munmap_chunk(): invalid pointer

or

double free or corruption (out)

or

tcache_thread_shutdown(): unaligned tcache chunk detected

and the error came right during clean up and it didn't crash
if I commented out calls to
        fp_pw_thread_loop_stop(pw.loop);
        fp_pw_thread_loop_destroy(pw.loop);

I turned on pipewire debugging at various levels from 1-5, eg
export PIPEWIRE_DEBUG=2
but it wasn't pointing to a smoking gun but it seemed like we perhaps
had a threading related issue since the number of cores affected reproducibility.

After a bit of studying the code with this in mind I think I found the problem.
We are using the thread loop functions (ie those mentioned above) and in such
a case  it is required to use pw_thread_loop_lock() / pw_thread_loop_unlock()
around calls

https://pipewire.github.io/pipewire/page_thread_loop.html
""The lock needs to be held whenever you call any PipeWire function that uses an object associated with this loop.""

That's not super-specific but I noticed that a previous part of the clean up probably needed these calls but was missing them
Adding then as shown here seems to completely cure the crashes

--- a/src/java.desktop/unix/native/libawt_xawt/awt/screencast_pipewire.c
+++ b/src/java.desktop/unix/native/libawt_xawt/awt/screencast_pipewire.c
@@ -887,8 +887,10 @@ JNIEXPORT jint JNICALL Java_sun_awt_screencast_ScreencastHelper_getRGBPixelsImpl
             screenProps->captureData = NULL;
             screenProps->shouldCapture = FALSE;
 
+            fp_pw_thread_loop_lock(pw.loop);
             fp_pw_stream_set_active(screenProps->data->stream, FALSE);
             fp_pw_stream_disconnect(screenProps->data->stream);
+            fp_pw_thread_loop_unlock(pw.loop);
         }
     }

I also noticed that the function doCleanUp() has
            if (screenProps->data->stream) {
                fp_pw_stream_disconnect(screenProps->data->stream);
                fp_pw_stream_destroy(screenProps->data->stream);
                screenProps->data->stream = NULL;
            }      

This
(1) Again doesn't have any locking but it doesn't seem to be causing a problem here but I think should be added anyway
(2) Seems to repeat the disconnect call. I'm inclined to leave this alone for now since it doesn't seem to cause harm
but I don't know that its guaranteed to be idempotent.  This needs more analysis probably under a separate bug id.",,,,,,,,,,,JDK-8310432,JDK-8310256,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ujn:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-06-09 15:19;prr;testing looked OK with just the first extra lock/unlock pair but I am going to re-test with the 2nd pair as well before sending out a review;;;","2023-06-12 14:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14428
Date: 2023-06-12 21:24:16 +0000;;;","2023-06-15 15:50;dukebot;Changeset: d3d0dbc3
Author:    Phil Race <prr@openjdk.org>
Date:      2023-06-15 22:47:57 +0000
URL:       https://git.openjdk.org/jdk/commit/d3d0dbc36369da0c17a66f8b633e73a150ab8c4f
;;;","2023-06-16 13:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/25
Date: 2023-06-16 20:33:32 +0000;;;",,,,,,,,,,,,,,,,,,,
com/sun/jdi/SetLocalWhileThreadInNative.java fails with virtual test thread factory due to OpaqueFrameException,JDK-8309752,5102845,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2023-06-09 13:31,2023-06-14 23:44,2023-10-01 09:55,2023-06-12 11:09,22,,,,,,22,core-svc,,0,loom,noreg-self,,,,,,,,,,,,,,,,"com/sun/jdi/SetLocalWhileThreadInNative.java is failing with OpaqueFrameException when using the virtual test thread factory. The reason is because JDI only supports calling StackFrame.setValue() on the topmost frame of a virtual thread. The test is calling it on the ThreadReference.frames(2), so the OpaqueFrameException is correct behavior and the test needs to adapt.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285422,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ui3:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-06-09 16:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14402
Date: 2023-06-09 20:47:13 +0000;;;","2023-06-12 11:09;dukebot;Changeset: 1612b6dc
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-06-12 18:07:40 +0000
URL:       https://git.openjdk.org/jdk/commit/1612b6dc6e7075e1c0c82d0e92910051c8066fe5
;;;",,,,,,,,,,,,,,,,,,,,,
Expand timeout windows for tests in JDK-8179502,JDK-8309740,5102831,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jnimeh,jnimeh,jnimeh,2023-06-09 09:31,2023-07-13 21:40,2023-10-01 09:55,2023-06-23 15:02,21,,,,,,21,security-libs,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,"The tests introduced in JDK-8179502, OCSPTimeout.java, CRLReadTimeout.java, and AIACertTimeout.java intermittently have failures due to timing variances based on the test system they are run on and current load on the system.  The timeout windows for the tests were somewhat narrow and should be widened in order to allow them to run successfully on a wider array of test platforms.",,,,,,,,,,,JDK-8310806,JDK-8311339,,,,,,,,,,,,,,,,,,,JDK-8309754,,,JDK-8179502,,,,JDK-8309754,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31uez:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-06-16 11:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14526
Date: 2023-06-16 18:19:45 +0000;;;","2023-06-23 08:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/58
Date: 2023-06-23 14:55:45 +0000;;;","2023-06-23 15:02;dukebot;Changeset: 17b6f7b9
Author:    Jamil Nimeh <jnimeh@openjdk.org>
Date:      2023-06-23 21:59:55 +0000
URL:       https://git.openjdk.org/jdk21/commit/17b6f7b9a5a14a869d3f1efd0ab51fea4fa40c83
;;;",,,,,,,,,,,,,,,,,,,,
"[macOS, Accessibility] VoiceOver: Incorrect announcements of JRadioButton",JDK-8309733,5102824,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,kizune,mbaesken,mbaesken,2023-06-09 07:18,2023-07-12 13:27,2023-10-01 09:55,2023-06-23 03:13,21,,,,,,22,client-libs,,0,a11y,accessibility,hgupdate-sync,macos,noreg-hard,regression,regression_8283400,sn_145,sn_146,vpat,,,,,,,,"================
Test environment
================
Apple M1 Pro, macOS Ventura version 13.4

openjdk version ""21-ea""
OpenJDK Runtime Environment (build 21-ea+23-1988)
OpenJDK 64-Bit Server VM (build 21-ea+23-1988, mixed mode, sharing)

================
Test application 
================
SwingSet2.jar
SwingSet2 can be downloaded from:
https://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html#swingset2

======================
Test to reproduce bugs
======================
1. On macOS, start VoiceOver (for example with shortcut Option-Command-F5).

2. Start SwingSet2.jar with jdk-21.
-> SwingSet2 window is displayed. The Togglebutton “JInternalFrame demo” has the keyboard focus.

3. Press Right Arrow key once.
-> The ToggleButton “JButton JRadioButton JToggleButton JCheckbox demo” has the keyboard focus.

4. Press Space key.
-> The tab group “Button Demo” is shown.

5. Press Tab key twice.
-> The Buttons tab has the keyboard focus.

4. Press Right Arrow key once.
-> The Radio Buttons tab is selected.

5. Press Tab key once.
-> The “Radio One” RadioButton has the keyboard focus.
VoiceOver announces “Entering Radio Buttons tab group. Radio One, radio button. You are currently on a radio button. To select this option, press Control-Option-Space.”

6. Press Control-Option-Space.
-> The “Radio One” RadioButton is selected.
VoiceOver announces “Selected, Radio One, radio button. You are currently on a selected radio button.

7. Press Control-Option-Right Arrow.
-> The “Radio Two” RadioButton, which is not selected, has the keyboard focus.
VoiceOver announces “Selected, Radio One, radio button. You are currently on a radio button. To select this option, press Control-Option-Space.”
Bug: VoiceOver announces the wrong radio button (Radio One instead of Radio Two).
Expected announcement: ""Radio Two, radio button, 2 of 3. ...""


Note 1: This bug does not happen with jdk-20, tested with:
java version ""20"" 2023-03-21
Java(TM) SE Runtime Environment (build 20+36-2344)

Note 2: Mentioning a bug on VoiceOver announcement does not mean that the issue is on VoiceOver’s side, rather it is the result of the issue and the cause of the issue needs to be found. ",,,,,,,,,,,JDK-8311337,JDK-8310824,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283400,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,,"0|i31udf:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2023-06-14 09:54;vdyakov;As a regression, it requires a fix in the mainline and back port to 21;;;","2023-06-21 13:32;kizune;This regression is caused by the fix for JDK-8283400

While processing value change events the native peer has been notified about the value update even when there is no actual value change happened, that caused voice announcer to refetch the data from the java side and as a result the announcement gets constructed from the different events and represents the incorrect data. The fix is to check if the value is updated before passing the event to the native peer.;;;","2023-06-21 13:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14605
Date: 2023-06-21 20:37:01 +0000;;;","2023-06-21 14:03;vdyakov;It requires back port to 21 forked repo;;;","2023-06-23 03:13;dukebot;Changeset: d1d2b55c
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2023-06-23 10:11:25 +0000
URL:       https://git.openjdk.org/jdk/commit/d1d2b55ce0b950e07f6e3761983f73fd58079627
;;;","2023-06-23 11:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/59
Date: 2023-06-23 18:45:41 +0000;;;",,,,,,,,,,,,,,,,,
Assert privileges while reading the jdk.incubator.vector.VECTOR_ACCESS_OOB_CHECK system property,JDK-8309727,5102815,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chegar,chegar,chegar,2023-06-09 05:57,2023-06-14 23:43,2023-10-01 09:55,2023-06-09 12:26,20.0.1,21,,,,,22,core-libs,,0,hgupdate-sync,vectorapi,,,,,,,,,,,,,,,,"A trivial use of the Vector API when run with the security manager and a domain that does not grant permissions fails as follows:

java.lang.ExceptionInInitializerError
        at jdk.incubator.vector/jdk.incubator.vector.IntVector.fromArray(IntVector.java:2941)
        at VectorRuns.countRunAscendingVector(VectorRuns.java:80)
        at VectorRuns.main(VectorRuns.java:45)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:580)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
        at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.security.AccessControlException: access denied (""java.util.PropertyPermission"" ""jdk.incubator.vector.VECTOR_ACCESS_OOB_CHECK"" ""read"")
        at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:488)
        at java.base/java.security.AccessController.checkPermission(AccessController.java:1071)
        at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:411)
        at java.base/java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:1146)
        at java.base/java.lang.System.getProperty(System.java:966)
        at java.base/java.lang.Integer.getInteger(Integer.java:1351)
        at java.base/java.lang.Integer.getInteger(Integer.java:1307)
        at jdk.incubator.vector/jdk.incubator.vector.VectorIntrinsics.<clinit>(VectorIntrinsics.java:34)
        ... 7 more"," 

 

 ",,,,,,,,,,JDK-8309857,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ubf:",9223372036854775807,b02,,,,,,,,,,,"2023-06-09 06:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14392
Date: 2023-06-09 13:02:18 +0000;;;","2023-06-09 12:26;dukebot;Changeset: cee5724d
Author:    Chris Hegarty <chegar@openjdk.org>
Date:      2023-06-09 19:25:21 +0000
URL:       https://git.openjdk.org/jdk/commit/cee5724d09b9ef9bd528fb721b756cb052265e3d
;;;","2023-06-09 12:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/3
Date: 2023-06-09 19:44:32 +0000;;;",,,,,,,,,,,,,,,,,,,,
AIX build fails after JDK-8280982,JDK-8309703,5102790,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mbaesken,mbaesken,mbaesken,2023-06-09 01:03,2023-06-14 23:43,2023-10-01 09:55,2023-06-11 23:57,21,,,,,,22,client-libs,,0,hgupdate-sync,oraclejdk-na,,,,,,,,,,,,,,,,"After
JDK-8280982: [Wayland] [XWayland] java.awt.Robot taking screenshots
the AIX build fails.
We get

* For target support_native_java.desktop_libawt_xawt_screencast_pipewire.o:
In file included from /aixbuild/jdk-dev/src/java.desktop/unix/native/libawt_xawt/awt/screencast_pipewire.c:33:
In file included from /aixbuild/jdk-dev/src/java.desktop/unix/native/libawt_xawt/awt/screencast_pipewire.h:40:
In file included from /aixbuild/jdk-dev/src/java.desktop/unix/native/libpipewire/include/spa/debug/types.h:17:
In file included from /aixbuild/jdk-dev/src/java.desktop/unix/native/libpipewire/include/spa/utils/type-info.h:33:
In file included from /aixbuild/jdk-dev/src/java.desktop/unix/native/libpipewire/include/spa/param/type-info.h:8:
In file included from /aixbuild/jdk-dev/src/java.desktop/unix/native/libpipewire/include/spa/param/param-types.h:50:
In file included from /aixbuild/jdk-dev/src/java.desktop/unix/native/libpipewire/include/spa/param/audio/type-info.h:8:
In file included from /aixbuild/jdk-dev/src/java.desktop/unix/native/libpipewire/include/spa/param/audio/raw-types.h:18:
/aixbuild/jdk-dev/src/java.desktop/unix/native/libpipewire/include/spa/param/audio/raw.h:15:10: fatal error: 'endian.h' file not found

I cannot find  endian.h  on my AIX machine.
Maybe it does not exist there, <sys/machine.h>  includes some info on byte order etc. instead .
Not sure if this inclusion is needed at all on AIX.",,,,,,,,,,,JDK-8309855,,,,,,,,,,,,,,,,,,,,,,,JDK-8280982,,,,,,,,,,,,,,,ppc,,,,,,,,,,aix,,,,,"0|i31u5v:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-06-09 03:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14390
Date: 2023-06-09 10:12:57 +0000;;;","2023-06-11 23:57;dukebot;Changeset: 3981297f
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-06-12 06:56:16 +0000
URL:       https://git.openjdk.org/jdk/commit/3981297fd34a628dff44898e6c60455cf071741a
;;;","2023-06-12 07:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/8
Date: 2023-06-12 14:13:15 +0000;;;","2023-06-12 13:59;prr;FWIW I'd be at least a little surprised if Pipewire or Wayland is (ever ?) a thing on AIX.
Perhaps none of this code needs to be built / delivered on AIX, but if the easiest thing is to build it then that's OK.;;;",,,,,,,,,,,,,,,,,,,
Generational ZGC: compiler/gcbarriers/UnsafeIntrinsicsTest.java fails in nmt_commit,JDK-8309675,5102758,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,stefank,stefank,stefank,2023-06-08 11:01,2023-06-29 00:22,2023-10-01 09:55,2023-06-08 12:44,21,22,,,,,22,hotspot,,0,genzgc,hgupdate-sync,noreg-self,regression,tier3,tier5,tier6,tier8,,,,,,,,,,"The failure happens because we have extra verification code that is incorrect to use when calling the NMT tracking code.

Here's log file snippet:

#section:main
----------messages:(7/765)----------
command: main -XX:+UseZGC -XX:+UnlockDiagnosticVMOptions -XX:+ZVerifyOops -XX:ZCollectionInterval=1 -XX:-CreateCoredumpOnCrash -XX:CompileCommand=dontinline,*::mergeImpl* compiler.gcbarriers.UnsafeIntrinsicsTest
reason: User specified action: run main/othervm -XX:+UseZGC -XX:+UnlockDiagnosticVMOptions -XX:+ZVerifyOops -XX:ZCollectionInterval=1 -XX:-CreateCoredumpOnCrash -XX:CompileCommand=dontinline,*::mergeImpl* compiler.gcbarriers.UnsafeIntrinsicsTest 
started: Thu Jun 08 16:57:40 UTC 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-opens java.base/jdk.internal.misc=ALL-UNNAMED
finished: Thu Jun 08 16:57:41 UTC 2023
elapsed time (seconds): 1.738
----------configuration:(5/166)----------
<snip>

----------System.out:(16/904)----------
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f1f6f71ba90, pid=1001731, tid=1001734
#
# JRE version:  (21.0+26) (fastdebug build )
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+26-LTS-2327, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x19d3a90]  ZPhysicalMemoryManager::nmt_commit(zoffset, unsigned long) const+0xb0
#
# CreateCoredumpOnCrash turned off, no core file dumped
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S1058/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/69630e22-1db4-46ce-a756-6e23cc9835c7/runs/31397100-7e82-4520-986e-f9e3e88d1558/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/scratch/0/hs_err_pid1001731.log
#
#
----------System.err:(0/0)----------
----------rerun:(47/7826)*----------",,,,,,,,,,,JDK-8309683,,,,,,,,,,,,,,,,,,,,JDK-8311066,,,,,,,JDK-8306841,,,,,,,,,,,,,,,,,,,21,,,,,,,"0|i31tyz:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-08 11:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14382
Date: 2023-06-08 18:05:46 +0000;;;","2023-06-08 11:13;stefank;The reason why this failure only has been seen on this test is that it explicitly enables -XX:+ZVerifyOops, which turns on the verification code.;;;","2023-06-08 12:44;dukebot;Changeset: c4e65425
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2023-06-08 19:41:26 +0000
URL:       https://git.openjdk.org/jdk/commit/c4e6542514be19cebb41a0c390645db0a191504f
;;;","2023-06-08 12:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/2
Date: 2023-06-08 19:51:56 +0000;;;","2023-06-08 13:11;dcubed;The fix for this bug is integrated in jdk-22+1-6 and jdk-21+26-2329.;;;","2023-06-09 12:45;dcubed;The compiler/gcbarriers/UnsafeIntrinsicsTest.java#ZDebug
failures started happening in jdk-21+26-2327-tier3 which
only includes the fix for:

JDK-8306841 Generational ZGC: NMT reports Java heap size larger than max heap size

so this test failure looks like a regression caused by JDK-8306841.;;;",,,,,,,,,,,,,,,,,
Avoid using jvmci.Compiler property to determine if Graal is enabled,JDK-8309671,5102754,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yzheng,yzheng,yzheng,2023-06-08 10:09,2023-07-12 13:02,2023-10-01 09:55,2023-06-13 02:05,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,"serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitor.java checks if System.getProperty(""jvmci.Compiler"") is graal and will not enforce checking line number derived from uncommon trap debug info. However, Graal does not set this property explicitly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ty3:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2023-06-08 10:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14381
Date: 2023-06-08 17:14:39 +0000;;;","2023-06-13 02:05;dukebot;Changeset: 4f23fc1f
Author:    Yudi Zheng <yzheng@openjdk.org>
Committer: Doug Simon <dnsimon@openjdk.org>
Date:      2023-06-13 09:02:37 +0000
URL:       https://git.openjdk.org/jdk/commit/4f23fc1f273ea30f49c5412a2f25c07f8982d5b5
;;;",,,,,,,,,,,,,,,,,,,,,
java -help output for --module-path / -p is incomplete,JDK-8309670,5102753,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cstein,alanb,alanb,2023-06-08 10:08,2023-07-12 13:27,2023-10-01 09:55,2023-06-26 13:32,21,22,9,,,,21,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,"The output currently has

    --module-path <module path>...
                  A : separated list of directories, each directory
                  is a directory of modules.

The elements of a module path can be a module artifact, an exploded module, or directory containing modules.

We should consider updating this, and the man page too.",,,,,,,,,,,JDK-8310724,JDK-8311314,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31txv:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5d8045fc,,,,,,,,,"2023-06-19 04:01;cstein;java --help could read like:

```
\    -p <module path>\n\
\                  Specifies where to find application modules with a {0} separated\n\
\                  list of path elements. Each element can be a module artifact,\n\
\                  an exploded module, or a directory containing modules.\n\
\    --upgrade-module-path <module path>...\n\
\                  Specifies where to find module replacements of upgradeable modules\n\
\                  in the runtime image with a list of path elements. Each element can be
\                  a module artifact, an exploded module, or a directory containing modules.\n\
```;;;","2023-06-19 04:02;cstein;The Java launcher man page section could read like:

```
`--module-path` *modulepath*... or `-p` *modulepath*
:   Specifies where to find application modules with a list of path elements.
    The elements of a module path can be a module artifact, an exploded module,
    or a directory containing modules.

    On Windows, semicolons (`;`) separate path elements in this list;
    on other platforms it is a colon (`:`).

`--upgrade-module-path` *modulepath*...
:   Specifies where to find module replacements of upgradeable modules in the
    runtime image with a list of path elements.
    The elements of a module path can be a module artifact, an exploded module,
    or a directory containing modules.

    On Windows, semicolons (`;`) separate path elements in this list;
    on other platforms it is a colon (`:`).
```;;;","2023-06-20 06:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14564
Date: 2023-06-20 13:54:15 +0000;;;","2023-06-23 04:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/57
Date: 2023-06-23 11:32:04 +0000;;;","2023-06-26 13:32;dukebot;Changeset: cdb8c707
Author:    Christian Stein <cstein@openjdk.org>
Date:      2023-06-26 20:29:40 +0000
URL:       https://git.openjdk.org/jdk21/commit/cdb8c707275d8dd14caaa2ba1951e2f8932b96c6
;;;",,,,,,,,,,,,,,,,,,
"test fails ""assert(check_alignment(result)) failed: address not aligned: 0x00000008baadbabe""",JDK-8309663,5102746,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,dcubed,dcubed,2023-06-08 06:54,2023-08-14 11:55,2023-10-01 09:55,2023-08-07 11:29,21,22,,,,,22,hotspot,,0,amazon-interest,problemlist,tier5,Xcomp,zgc,,,,,,,,,,,,,"The following test failed in the JDK21 CI:

serviceability/jvmti/vthread/FollowReferences/VThreadStackRefTest.java#default

Here's a snippet from the log file:

#section:main
----------messages:(6/398)----------
command: main -Djdk.virtualThreadScheduler.parallelism=1 -agentlib:VThreadStackRefTest VThreadStackRefTest
reason: User specified action: run main/othervm/native -Djdk.virtualThreadScheduler.parallelism=1 -agentlib:VThreadStackRefTest VThreadStackRefTest 
started: Thu Jun 08 03:32:05 UTC 2023
Mode: othervm [/othervm specified]
finished: Thu Jun 08 03:32:32 UTC 2023
elapsed time (seconds): 26.98
----------configuration:(0/0)----------
----------System.out:(41/2859)----------
created class VThreadStackRefTest$VThreadUnmountedReferenced
created class VThreadStackRefTest$VThreadUnmountedEnded
created class VThreadStackRefTest$VThreadMountedReferenced
created class VThreadStackRefTest$VThreadMountedJNIReferenced
created class VThreadStackRefTest$PThreadReferenced
threads:
  - vthreadUnmounted: VirtualThread[#32]/waiting
  - vthreadEnded: VirtualThread[#35]/terminated
  - vthreadMounted: VirtualThread[#36]/runnable@ForkJoinPool-1-worker-1
  - pthread: Thread[#37,Thread-1,5,MainThreadGroup]
test classes:
  (0) class VThreadStackRefTest$VThreadUnmountedReferenced
  (1) class VThreadStackRefTest$VThreadUnmountedJNIReferenced
  (2) class VThreadStackRefTest$VThreadMountedReferenced
  (3) class VThreadStackRefTest$VThreadMountedJNIReferenced
  (4) class VThreadStackRefTest$PThreadReferenced
  (5) class VThreadStackRefTest$VThreadUnmountedEnded
Thread VirtualThread[#32]/waiting: unmounted
Thread VirtualThread[#36]/runnable@ForkJoinPool-1-worker-1: mounted
JNI local: index = 3, thread_id = 36
Stack local: index = 2, thread_id = 36
Stack local: index = 4, thread_id = 37
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S14090/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/12aad8ed-cf3c-41cb-8164-344f33d1386e/runs/683ff040-6fd8-48dd-9782-2bb011040acf/workspace/open/src/hotspot/share/oops/compressedOops.inline.hpp:140), pid=14722, tid=14742
#  assert(check_alignment(result)) failed: address not aligned: 0x00000008baadbabe
#
# JRE version: Java(TM) SE Runtime Environment (21.0+26) (fastdebug build 21-ea+26-LTS-2277)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+26-LTS-2277, compiled mode, sharing, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x5ed590]  CompressedKlassPointers::decode_not_null(unsigned int, unsigned char*)+0xa0
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S1109/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/423bf862-ffee-460e-82a8-41c38006fe63/runs/fdcf1912-6ed8-40cd-b14a-9b71de02efa6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_loom/scratch/1/core.14722)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S1109/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/423bf862-ffee-460e-82a8-41c38006fe63/runs/fdcf1912-6ed8-40cd-b14a-9b71de02efa6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_loom/scratch/1/hs_err_pid14722.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(40/6613)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007fd4e413d890):  VMThread ""VM Thread""          [id=14742, stack(0x00007fd4d894c000,0x00007fd4d8a4c000) (1024K)]

Stack: [0x00007fd4d894c000,0x00007fd4d8a4c000],  sp=0x00007fd4d8a48ee0,  free space=1011k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x5ed590]  CompressedKlassPointers::decode_not_null(unsigned int, unsigned char*)+0xa0  (compressedOops.inline.hpp:140)
V  [libjvm.so+0x11b7281]  CallbackWrapper::CallbackWrapper(JvmtiTagMap*, oop)+0xa1  (compressedOops.inline.hpp:134)
V  [libjvm.so+0x11ba031]  CallbackInvoker::invoke_advanced_stack_ref_callback(jvmtiHeapReferenceKind, long, long, int, _jmethodID*, long, int, oop)+0xd1  (jvmtiTagMap.cpp:1736)
V  [libjvm.so+0x11bab27]  JNILocalRootsClosure::do_oop(oop*)+0x167  (jvmtiTagMap.cpp:2001)
V  [libjvm.so+0x14103da]  nmethod::oops_do(OopClosure*, bool)+0x29a  (nmethod.cpp:1773)
V  [libjvm.so+0x11b66ff]  StackRefCollector::do_frame(vframe*)+0x11f  (nmethod.hpp:551)
V  [libjvm.so+0x11b6834]  StackRefCollector::process_frames(vframe*)+0x34  (jvmtiTagMap.cpp:2353)
V  [libjvm.so+0x11bb464]  VM_HeapWalkOperation::collect_vthread_stack_refs(oop)+0x434  (jvmtiTagMap.cpp:2886)
V  [libjvm.so+0x11bbdc7]  VM_HeapWalkOperation::visit(oop)+0x5e7  (jvmtiTagMap.cpp:2910)
V  [libjvm.so+0x11b6b1e]  VM_HeapWalkOperation::doit()+0x2ce  (jvmtiTagMap.cpp:2958)
V  [libjvm.so+0x1872459]  VM_Operation::evaluate()+0x139  (vmOperations.cpp:71)
V  [libjvm.so+0x189515b]  VMThread::evaluate_operation(VM_Operation*)+0x10b  (vmThread.cpp:281)
V  [libjvm.so+0x1895ccf]  VMThread::inner_execute(VM_Operation*)+0x3bf  (vmThread.cpp:435)
V  [libjvm.so+0x1895eb4]  VMThread::loop()+0x84  (vmThread.cpp:502)
V  [libjvm.so+0x1895fb7]  VMThread::run()+0x87  (vmThread.cpp:175)
V  [libjvm.so+0x1793f8a]  Thread::call_run()+0xba  (thread.cpp:217)
V  [libjvm.so+0x149505c]  thread_native_entry(Thread*)+0x11c  (os_linux.cpp:775)

Since we're crashing during a heap walk operation, I'm starting this
bug off in hotspot/gc for initial triage.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,,"0|i31twb:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-06-08 07:06;stefank;There was a recent change to FollowReferences:
---
commit 207fbcb08319c4cae976fc5248780d4b438ae5f9
Author: Alex Menkov <amenkov@openjdk.org>
Date:   Wed May 24 20:26:10 2023 +0000

    8299414: JVMTI FollowReferences should support references from VirtualThread stack

    Reviewed-by: sspitsyn, kevinw
---

It would be good to get an initial assessment from the SVC team.;;;","2023-06-08 11:57;amenkov;The crash occurs when FollowReferences explores stack references for unmounted virtual thread (from stackChunks) and looking for JNI locals for compiled nmethod;;;","2023-06-08 12:29;stefank;I looked at the code and I couldn't see any load barrier infrastructure that made it safe for this code to load oops. Did I miss it or is this the reason for this crash? Could you explain how you make sure that you are allowed to read the oops in the stackChunk?;;;","2023-06-09 02:16;stefank;This code is dubious for various reasons:
---
      // Follow oops from compiled nmethod.
      if (jvf->cb() != nullptr && jvf->cb()->is_nmethod()) {
        _blk->set_context(_thread_tag, _tid, _depth, method);
        jvf->cb()->as_nmethod()->oops_do(_blk);
---

1) This lacks appropriate load barriers. This works for non-vthreads because we have other infrastructure that applies the correct barriers for ""on-stack"" oops. Something else is needed for vthreads. There are different ways to solve this:
a) Call run_nmethod_entry_barrier() before calling oops_do, or
b) Use NMethodAccess<ON_PHANTOM_OOP_REF>::oop_load before passing the oop to _blk

2) _blk is a JNILocalRootsClosure and the nmethod oops are not JNILocals nor roots.

3) The stackChunk this code is visiting is not a root and the code still uses JNILocalRootsClosure

4) It's unclear if we really should be visiting the nmethod oops here. Most oops will be visited by report_java_stack_refs, because locals and expressions from the nmethods are included (with the correct barriers). We tried to find out why we visit the nmethod oops here but only found JDK-8038797, which lacks details of why this needed to be added. Maybe [~coleenp] remembers more.

/ StefanK & ErikÖ;;;","2023-06-09 08:14;coleenp;>  Maybe [~coleenp] remembers more.

At first I thought I added that because Mikael said that GC needed it, but I think the reason is that there are oops in the nmethod oops section that keep metadata alive that aren't in the locals and expression stack.
;;;","2023-06-09 17:11;amenkov;> 2) _blk is a JNILocalRootsClosure and the nmethod oops are not JNILocals nor roots.
> 3) The stackChunk this code is visiting is not a root and the code still uses JNILocalRootsClosure 

JNILocalRootsClosure reports JVMTI_HEAP_REFERENCE_JNI_LOCAL reference. The spec was updated recently, this kind means only ""JNI local reference"", it may be root or not root. ""JNILocalRootsClosure"" is just a historical name (like CallbackInvoker::report_stack_ref_root which reports ""Local variable on a thread stack"", root or not root). Maybe to avoid confusion it make sense to rename classes/functions which contain ""root"", but are used for not root objects.

> 4) It's unclear if we really should be visiting the nmethod oops here. Most oops will be visited by report_java_stack_refs, because locals and expressions from the nmethods are included (with the correct barriers). We tried to find out why we visit the nmethod oops here but only found JDK-8038797, which lacks details of why this needed to be added. Maybe [~coleenp] remembers more. 

> At first I thought I added that because Mikael said that GC needed it, but I think the reason is that there are oops in the nmethod oops section that keep metadata alive that aren't in the locals and expression stack. 

I think if a reference from nmethod is reported as local/expression, it should not be reported additionally as JNI local, but for now I prefer to keep the code as is (to handle oops which are not in locals/expressions).
As a fix for this issue I'm going to add load barriers for nmethods.
;;;","2023-06-13 18:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14460
Date: 2023-06-14 01:02:09 +0000;;;","2023-08-07 11:29;dukebot;Changeset: 83edffa6
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2023-08-07 18:27:33 +0000
URL:       https://git.openjdk.org/jdk/commit/83edffa608d998a118d1d12f62d73be40a8982bc
;;;",,,,,,,,,,,,,,,
C2: failed: XMM register should be 0-15 (UseKNLSetting and ConvF2HF),JDK-8309660,5102743,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,epeter,epeter,epeter,2023-06-08 05:21,2023-07-12 13:46,2023-10-01 09:55,2023-07-02 23:52,20,21,22,,,,22,hotspot,,0,c2,c2-superword,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,,,,"Since JDK-20, this seems to reproduce:

/oracle-work/jdk-20.0.2/fastdebug/bin/java -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:CompileCommand=compileonly,Test2::test -XX:CompileCommand=printcompilation,Test2::* -XX:-TieredCompilation Test2.java

Looks like bad combo of ConvF2HF and KNL.

-------------- Original Info ------------
During work for JDK-8308606 and JDK-8303113 I wanted to whitelist ""AlignVector"" in the IR framework. Then I hit this issue with test
compiler/vectorization/TestFloatConversionsVector.java

The ""-XX:+UseKNLSetting -XX:+AlignVector"" combo is not a real hardware.

I reduced it down to Test.java

./java -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+AlignVector -XX:CompileCommand=compileonly,Test::test -XX:CompileCommand=printcompilation,Test::* -XX:-TieredCompilation -XX:+TraceSuperWord Test.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle-work/jdk-fork0/open/src/hotspot/cpu/x86/assembler_x86.cpp:11506), pid=1769078, tid=1769091
#  assert(((!attributes->uses_vl()) || (attributes->get_vector_len() == AVX_512bit) || (!_legacy_mode_vl) || (attributes->is_legacy_mode()))) failed: XMM register should be 0-15
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (slowdebug build 21-internal-LTS-2023-06-07-1344422.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 21-internal-LTS-2023-06-07-1344422.emanuel..., mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x655b2a]  Assembler::vex_prefix_and_encode(int, int, int, Assembler::VexSimdPrefix, Assembler::VexOpcode, InstructionAttr*)+0x15a
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /oracle-work/jdk-fork0/build/linux-x64-slowdebug/jdk/bin/core.1769078)
#
# An error report file with more information is saved as:
# /oracle-work/jdk-fork0/build/linux-x64-slowdebug/jdk/bin/hs_err_pid1769078.log
#
# Compiler replay data is saved as:
# /oracle-work/jdk-fork0/build/linux-x64-slowdebug/jdk/bin/replay_pid1769078.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289552,JDK-8239331,JDK-8309662,,"2023-06-08 05:11;epeter;Test.java;https://bugs.openjdk.org/secure/attachment/104230/Test.java","2023-06-08 06:22;epeter;Test2.java;https://bugs.openjdk.org/secure/attachment/104231/Test2.java","2023-06-08 05:17;epeter;hs_err_pid1769078.log;https://bugs.openjdk.org/secure/attachment/104229/hs_err_pid1769078.log","2023-06-08 05:17;epeter;replay_pid1769078.log;https://bugs.openjdk.org/secure/attachment/104228/replay_pid1769078.log",,,,,,,,,,,,,,,,,,,"0|i31tvn:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-08 05:22;epeter;May be related to JDK-8239331.;;;","2023-06-08 05:28;epeter;First investigation, values at assert:

attributes->uses_vl() = true

attributes->get_vector_len() == 0
AVX_512bit == 2

_legacy_mode_vl == true

attributes->is_legacy_mode() == false;;;","2023-06-08 05:30;epeter;This seems not to reproduce with jdk-20.0.2, so I'd assume it is a rather recent regression. And jdk-19.0.2 responds like this:

Test.java:5: error: cannot find symbol
            s[i] = Float.floatToFloat16(f[i]);;;;","2023-06-08 05:44;chagedorn;Starts to fail after JDK-8289552.;;;","2023-06-08 05:48;chagedorn;ILW = Assertion failure on KNL, low, use -XX:-UseSuperWord or disable compilation of affected method = MLM = P4 ;;;","2023-06-08 06:08;epeter;It is indeed a ""regression"" from JDK-8298935. The issue is that since that change, this example does not vectorize anymore with AlignVector, and the issue seems to happen when we try to vectorize but fail to do so.
We don't vectorize it anymore because we don't take in memops that were rejected during find_adjacent_refs, since that lead to some bugs. After find_adjacent_refs, we now only have the StoreC, the StoreF are rejected because they might not align with the StoreC. So vectorization becomes ""Unprofitable"".
Need to figure out why that lets us hit the assert.;;;","2023-06-08 06:22;epeter;Ok, I can indeed reproduce it with JDK-20 now, with an example that also does not vectorize back there (strided access, not adjacent):

/oracle-work/jdk-20.0.2/fastdebug/bin/java -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+AlignVector -XX:CompileCommand=compileonly,Test2::test -XX:CompileCommand=printcompilation,Test2::* -XX:-TieredCompilation -XX:+TraceSuperWord -XX:-Verbose Test2.java

# assert(((!attributes->uses_vl()) || (attributes->get_vector_len() == AVX_512bit) || (!_legacy_mode_vl) || (attributes->is_legacy_mode()))) failed: XMM register should be 0-15;;;","2023-06-08 06:32;epeter;Update: it reproduces without AlignVector. It is hence really a KNL issue!

/oracle-work/jdk-20.0.2/fastdebug/bin/java -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:-AlignVector -XX:CompileCommand=compileonly,Test2::test -XX:CompileCommand=printcompilation,Test2::* -XX:-TieredCompilation -XX:+TraceSuperWord -XX:-Verbose Test2.java;;;","2023-06-08 06:41;epeter;Node:
239  convF2HF_reg_reg  === _ 244 240  [[ 238 ]]

We are talking about this instruction:
vcvtps2ph
pre=Assembler::VEX_SIMD_66
opc=Assembler::VEX_OPCODE_0F_3A
VEX.128.66.0F3A
requires F16C

https://www.felixcloutier.com/x86/vcvtps2ph

We also check for that here:
    case Op_ConvF2HF:
    case Op_ConvHF2F:
      if (!VM_Version::supports_float16()) {
        return false;
      }

But then we set ""use_vl = true"" in Assembler::vcvtps2ph. Even though we have never checked for AVX512VL, and it seems not to be present on KNL!

  if (is_intel()) { // Intel cpus specific settings
    if (is_knights_family()) {
      _features &= ~CPU_VZEROUPPER;
      _features &= ~CPU_AVX512BW;
      _features &= ~CPU_AVX512VL;
      _features &= ~CPU_AVX512DQ;
      _features &= ~CPU_AVX512_VNNI;
      _features &= ~CPU_AVX512_VAES;
      _features &= ~CPU_AVX512_VPOPCNTDQ;
      _features &= ~CPU_AVX512_VPCLMULQDQ;
      _features &= ~CPU_AVX512_VBMI;
      _features &= ~CPU_AVX512_VBMI2;
      _features &= ~CPU_CLWB;
      _features &= ~CPU_FLUSHOPT;
      _features &= ~CPU_GFNI;
      _features &= ~CPU_AVX512_BITALG;
      _features &= ~CPU_AVX512_IFMA;
    }
  }

This patch makes it work, though I can only test it on my AVX512 machine:

diff --git a/src/hotspot/cpu/x86/assembler_x86.cpp b/src/hotspot/cpu/x86/assembler_x86.cpp
index 2902abfc661..5686e349866 100644
--- a/src/hotspot/cpu/x86/assembler_x86.cpp
+++ b/src/hotspot/cpu/x86/assembler_x86.cpp
@@ -1944,7 +1944,7 @@ void Assembler::vcvtdq2pd(XMMRegister dst, XMMRegister src, int vector_len) {
 
 void Assembler::vcvtps2ph(XMMRegister dst, XMMRegister src, int imm8, int vector_len) {
   assert(VM_Version::supports_evex() || VM_Version::supports_f16c(), """");
-  InstructionAttr attributes(vector_len, /* rex_w */ false, /* legacy_mode */ false, /* no_mask_reg */ true, /*uses_vl */ true);
+  InstructionAttr attributes(vector_len, /* rex_w */ false, /* legacy_mode */ false, /* no_mask_reg */ true, /*uses_vl */ false);
   int encode = vex_prefix_and_encode(src->encoding(), 0, dst->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3A, &attributes);
   emit_int24(0x1D, (0xC0 | encode), imm8);
 }
;;;","2023-06-08 07:26;epeter;I think this is a bug / regression of JDK-8289552

[~svkamath] I see that you added it, what do you think? Or is it more complicated?
[~jbhateja] [~sviswanathan] You reviewed it, so maybe you'd know too.

https://github.com/openjdk/jdk/commit/07946aa49c97c93bd11675a9b0b90d07c83f2a94;;;","2023-06-08 07:46;epeter;Here the draft PR:
https://github.com/openjdk/jdk/pull/14379;;;","2023-06-09 03:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14379
Date: 2023-06-08 14:45:54 +0000;;;","2023-07-02 23:52;dukebot;Changeset: 2c29705d
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-07-03 06:50:16 +0000
URL:       https://git.openjdk.org/jdk/commit/2c29705d7bc9cf3d9884abf81ba6d3eeff881d73
;;;",,,,,,,,,,
GenShen: Regression in LRU cache benchmark,JDK-8309639,5102718,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wkemper,ysr,ysr,2023-06-07 18:05,2023-08-17 14:03,2023-10-01 09:55,2023-08-17 14:03,,,,,,,,hotspot,,0,gc-shenandoah,genshen,performance,,,,,,,,,,,,,,,"From Christine Flood, see https://github.com/openjdk/jdk/pull/14185#issuecomment-1579278537 :

I wrote an LRU program back in 2017 which allocates trees and stores them in an array in a round robin fashion, freeing the last allocated. At the time this was written it's purpose was to show how generational GCs can hit the wall and start performing very badly. I ran this on a clean openjdk build, a genshen build in generational mode and a genshen build in non-generational mode. These results are repeatable for me.

I would like to understand where the degradation is coming from before moving forward with this patch since it appears to penalize those who wish to just run traditional Shenandoah.

Clean
cflood@fedora java_programs]$ ~/genshen/cleanjdk/build/linux-x86_64-server-release/images/jdk/bin/java -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC LRU 1000 1000
Took 341892ms to allocate 1000000 trees in a cache of 1000

Genshen generational (we expect this to be bad)
[cflood@fedora java_programs]$ ~/genshen/jdk/build/linux-x86_64-server-release/images/jdk/bin/java -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational LRU 1000 1000
Took 442012ms to allocate 1000000 trees in a cache of 1000

Genshen non-generational (shows what I feel is a significant degradation from the clean build)
[cflood@fedora java_programs]$ ~/genshen/jdk/build/linux-x86_64-server-release/images/jdk/bin/java -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC LRU 1000 1000
Took 395679ms to allocate 1000000 trees in a cache of 1000

I think that generational Shenandoah can be a big win for some applications, but I want to fully understand the cost for all applications.

I can't attach a .java file so here it is inline in the post.

class TreeNode {
  public TreeNode left, right;
  public int val;
}

public class LRU {
static int cache_size;
static int reps;
static int tree_height=16;

private static TreeNode[] trees;

private static int getIndex(int i) {return i % cache_size;}
private static TreeNode makeTree(int h) {
    if (h == 0) { return null;}
    else {
    TreeNode res = new TreeNode();
    res.left = makeTree(h - 1);
    res.right = makeTree(h - 1);
    res.val = h;
    return res;
}
}

public static void main(String[] args) {
    if (args.length != 2) {
        System.err.println(""LRU requires args: cache_size reps"");
        return;
    }
    cache_size = Integer.parseInt(args[0]);
    reps = Integer.parseInt(args[1]) * cache_size;
    trees = new TreeNode[cache_size];

    long start = System.currentTimeMillis();
    for (int i = 0; i < reps; i++)
        trees[getIndex(i)] = makeTree(tree_height);
    long end = System.currentTimeMillis();
    long ms = end - start;

    System.out.println(""Took "" + ms + ""ms to allocate "" + reps + "" trees in a cache of "" + cache_size);
}
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307314,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31tq3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-09 09:51;kdnilsen;We have confirmed that the Generational Shenandoah version of Single-Generation Shenandoah is performing 623 collections, vs JDK 20 version of Single-Generation Shenandoah is performing only 151 collections.

We have further confirmed that all of the Generational Shenandoah collections are abbreviated, and that every one of the collections is labeled as a learning cycle.

We believe we understand the origin of this regression:

1. We discovered during testing of Generational Shenandoah that the presence of abbreviated cycles in the recent GC history would sometimes confuse the triggering heuristic.  The triggering heuristic uses recent GC times as a predictor for how much time the next GC will take.  This results in late triggers and degenerated cycles if the triggering heuristic believes that all GC cycles will be as fast as a recently observed abbreviated cycle.

2. So in the Generational Shenandoah version of this code, we disqualify abbreviated GC cycle times from the calculation of ""average GC"" time.

3. Apparently, for the same reason, we do not count an abbreviated cycle as a learning cycle, because an abbreviated cycle contributes nothing to our knowledge of how long a normal GC cycle takes.

Here's a possible way to address this:

At the end of concurrent marking, if we choose to abbreviate this cycle, add the following code:

```
if we are in learning mode and we are abbreviating this cycle:
  add the approximation that normal-gc-time = concurrent-mark-time * 2.5, and claim credit for one learning cycle
```

Note: For a run of specjbb, which performed 1068 GC cycles, the total time spent in concurrent marking was 1,426 seconds, concurrent evacuation 387 seconds, concurrent update refs 1,161 seconds.  The ratio of concurrent marking to total GC time is approximately 2.1.  Choosing to multiply by 2.5 allows triggers to be conservatively early.
;;;","2023-08-16 16:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/307
Date: 2023-08-16 23:31:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,
"runtime/handshake/HandshakeTimeoutTest.java fails with ""has not cleared handshake op"" and SIGILL",JDK-8309637,5102716,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,pchilanomate,dcubed,dcubed,2023-06-07 17:33,2023-08-11 04:58,2023-10-01 09:55,2023-07-10 12:10,17,21,22,,,,22,hotspot,,0,amazon-interest,hgupdate-sync,intermittent,tier3,tier6,,,,,,,,,,,,,"The following test failed in the JDK21 CI:

runtime/handshake/HandshakeTimeoutTest.java

Here's a snippet from the log file:

#section:driver
----------messages:(10/314)----------
command: driver HandshakeTimeoutTest
reason: User specified action: run driver HandshakeTimeoutTest 
started: Thu Jun 08 00:07:12 UTC 2023
Mode: agentvm
Agent id: 20
Timeout refired 480 times
Timeout information:
--- Timeout information end.
finished: Thu Jun 08 00:25:47 UTC 2023
elapsed time (seconds): 1114.304
----------configuration:(16/2322)----------

<snip>

----------System.out:(9/3199)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+26-2315/linux-aarch64-debug.jdk/jdk-21/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S1202/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/cd44baf6-092f-4661-a29c-adac949180d2/runs/a8c08a39-9b81-4625-911c-585bed94f792/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/classes/0/runtime/handshake/HandshakeTimeoutTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+26-2315/src.full/open/test/hotspot/jtreg/runtime/handshake:/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S1202/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/cd44baf6-092f-4661-a29c-adac949180d2/runs/a8c08a39-9b81-4625-911c-585bed94f792/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/classes/0/testlibrary:/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S1202/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/cd44baf6-092f-4661-a29c-adac949180d2/runs/a8c08a39-9b81-4625-911c-585bed94f792/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/classes/0/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.2/1/bundles/jtreg-7.2+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.2/1/bundles/jtreg-7.2+1.zip/jtreg/lib/junit-platform-console-standalone-1.9.2.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.2/1/bundles/jtreg-7.2+1.zip/jtreg/lib/testng-7.3.0.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.2/1/bundles/jtreg-7.2+1.zip/jtreg/lib/jcommander-1.78.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.2/1/bundles/jtreg-7.2+1.zip/jtreg/lib/guice-4.2.3.jar -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-aarch64/jdk-20_linux-aarch64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S1202/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/cd44baf6-092f-4661-a29c-adac949180d2/runs/a8c08a39-9b81-4625-911c-585bed94f792/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/tmp -XX:+UnlockExperimentalVMOptions -XX:LockingMode=2 -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+HandshakeALot -XX:GuaranteedSafepointInterval=10 -XX:ParallelGCThreads=1 -XX:ConcGCThreads=1 -XX:CICompilerCount=2 -XX:+UnlockExperimentalVMOptions -XX:HandshakeTimeout=50 -XX:-CreateCoredumpOnCrash HandshakeTimeoutTest$Test ]
[2023-06-08T00:07:12.855566071Z] Gathering output for process 425423
[2023-06-08T00:24:39.032496596Z] Waiting for completion for process 425423
[2023-06-08T00:24:39.033703163Z] Waiting for completion finished for process 425423
Output and diagnostic info for process 425423 was saved into 'pid-425423-output.log'
[2023-06-08T00:24:39.044912100Z] Waiting for completion for process 425423
[2023-06-08T00:24:39.045004620Z] Waiting for completion finished for process 425423
[2023-06-08T00:24:39.045066061Z] Waiting for completion for process 425423
[2023-06-08T00:24:39.046061546Z] Waiting for completion finished for process 425423
----------System.err:(18/775)----------
 stdout: [[0.347s][error][handshake] Handshake timeout: HandshakeALot(0x0000ffff882b07f8), pending threads: 1
[0.348s][error][handshake] JavaThread 0x0000ffffa432b360 has not cleared handshake op: 0x0000ffff882b07f8
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGILL (0x4) at pc=0x0000ffffab082b48 (sent by kill), pid=425423, tid=425482
#
# JRE version: Java(TM) SE Runtime Environment (21.0+26) (fastdebug build 21-ea+26-LTS-2315)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+26-LTS-2315, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# C  [libc.so.6+0x23b48][thread 425475 also had an error]
];
 stderr: []
 exitValue = 134


JavaTest Message: Test complete.

result: Error. Agent error: java.lang.Exception: Agent 20 timed out with a timeout of 480 seconds; check console log for any additional details

While there is a SIGILL crash, the artifacts link does not include
an hs_err_pid file.",,,,,,,,,,,JDK-8312904,JDK-8311953,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,linux,,,,,"0|i31tpn:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-07 17:46;dholmes;Same failure mode has been seen in past 2 days without use of fast-locking.;;;","2023-06-13 11:12;mseledtsov;ILW = HLH = P2;;;","2023-06-30 22:39;pchilanomate;The test is timing out because we are hitting a deadlock. The JavaThread doing the error reporting deadlocks trying to acquire a lock it already owns, and the Watcher thread never kicks in to shutdown the VM because it hasn't been created yet and will never be: the ""main"" JavaThread is blocked in Threads::create_vm(), somewhere before creating the Watcher thread, waiting to acquire a lock that the error reporting thread owns.

More specifically from the two core dumps I opened:

- In one case, a compiler thread receives the SIGILL signal while inside a ThreadCritical section. It then calls ThreadCritical again from inside error reporting and deadlocks. Meanwhile the ""main"" thread has also blocked waiting to enter a ThreadCritical section while initializing some class somewhere around call_initPhase2().
 
- On the other case, a compiler thread receives the SIGILL signal while inside a malloc call in the C library. It then calls again malloc from inside the error reporting and deadlocks. Meanwhile the ""main"" thread has blocked waiting to acquire the CodeCache_lock while resolving some class also somewhere around call_initPhase2(), but the owner of the CodeCache_lock is the error reporting thread.


We could change the HandshakeTimeout value in the test to make sure the Watcher thread has already been created before the timeout. But it seems this has uncovered a more fundamental bug. The Watcher thread should be one of the very first things we create if we are using it as a watchdog in case of deadlocks during error reporting. Also, but less important, there is no specific Periodic task for monitoring hangs during error reporting and we are relying that the Watcher thread will be created due to the 2 Periodic tasks that I see are added during VM creation: ChunkPoolCleaner(5 seconds interval) and StatSamplerTask(interval controlled by PerfDataSamplingInterval, set to 50ms as default). ;;;","2023-07-05 14:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14777
Date: 2023-07-05 18:15:50 +0000;;;","2023-07-10 12:10;dukebot;Changeset: 57e7e82f
Author:    Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2023-07-10 19:09:27 +0000
URL:       https://git.openjdk.org/jdk/commit/57e7e82fa1cfb82bee6ff242d9a730c42bde663f
;;;","2023-07-11 05:48;shade;This actually affects things prior to JDK 21 as well, right?;;;","2023-07-11 09:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/112
Date: 2023-07-11 15:42:45 +0000;;;","2023-07-11 09:54;pchilanomate;[~shade] We didn't seem to hit this issue before but yes this should also affect earlier releases.;;;",,,,,,,,,,,,,,,
JDK 21 RDP1 L10n resource files update,JDK-8309632,5102706,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlu,jlu,jlu,2023-06-07 12:00,2023-07-12 13:13,2023-10-01 09:55,2023-06-16 14:12,21,,,,,,21,globalization,,0,,,,,,,,,,,,,,,,,,"This issue is responsible for updating the translations of all the localize(able) resources in the JDK. Primarily, the changes between JDK 21 RDP 1 (6/8) and the integration of the JDK 20 RDP 2 L10n drop (1/26) will be translated.",,,,,,,,,,,JDK-8310431,JDK-8310168,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i31tnf:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@52b4192d,,,,,,,,,"2023-06-12 14:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/11
Date: 2023-06-12 21:21:05 +0000;;;","2023-06-12 15:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14430
Date: 2023-06-12 22:00:01 +0000;;;","2023-06-16 14:12;dukebot;Changeset: a1c1d97a
Author:    Justin Lu <jlu@openjdk.org>
Date:      2023-06-16 21:11:00 +0000
URL:       https://git.openjdk.org/jdk21/commit/a1c1d97a4e07bae872b5608b4d8d8f85195edd82
;;;",,,,,,,,,,,,,,,,,,,,
Clean up tests that reference deploy modules,JDK-8309630,5102703,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mchung,mchung,mchung,2023-06-07 11:52,2023-08-04 12:49,2023-10-01 09:55,2023-06-07 18:02,21,,,,,,21,core-libs,,0,testonly,,,,,,,,,,,,,,,,,"test/jdk/tools/jimage/VerifyJimage.java
test/jdk/java/lang/SecurityManager/CheckAccessClassInPackagePermissions.java

jdk.deploy and other deployment modules no longer exist.   These tests should be updated",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31tmr:",9223372036854775807,b26,,,,,,,,,Verified,,"2023-06-07 12:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14367
Date: 2023-06-07 19:03:31 +0000;;;","2023-06-07 18:02;dukebot;Changeset: e8a59843
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-06-08 01:00:44 +0000
URL:       https://git.openjdk.org/jdk/commit/e8a59843f21e347ba1494290c393ef7b344e3b70
;;;",,,,,,,,,,,,,,,,,,,,,
Incorrect sorting of DirtyCardQueue buffers,JDK-8309627,5102697,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kbarrett,kbarrett,kbarrett,2023-06-07 10:11,2023-06-14 23:43,2023-10-01 09:55,2023-06-10 10:11,21,,,,,,22,hotspot,,0,gc-g1,gc-pending-review,,,,,,,,,,,,,,,,"When refining a buffer of cards, the buffer is first sorted, to improve locality.  However, the sort function's return type is wrong.  G1RefineBufferedCards::compare_card uses the difference between the cards as the result (negative -> lt, zero -> eq, positive -> gt).  But it returns an int, so discards all but the low 32 bits of that difference.  This renders the ""sort"" potentially more of a ""randomizer"".  However, since the pointers being compared are in the card table, the range of the results probably fit in 32bits.  Only for really large heaps or small card sizes (after JDK-8272773 made GCCardSizeInBytes configurable) are we likely to lose any bits from the narrowing conversion.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8087198,JDK-8272773,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31tlf:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-07 11:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14365
Date: 2023-06-07 18:02:37 +0000;;;","2023-06-07 22:58;shade;Gauging impact: This impacts sorter when ptrdiff_t narrows to int, losing precision. This happens when ptrdiff_t is larger than 2 gigapointers, which means the card table is larger than 16GB. With default card size of 512 bytes, this means a heap larger than 8TB. Even with lowest card size of 128 bytes, this still requires 2TB heap. This is within reach of current workloads, although rare.;;;","2023-06-10 10:11;dukebot;Changeset: b94b679e
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2023-06-10 17:08:46 +0000
URL:       https://git.openjdk.org/jdk/commit/b94b679e9a82ff2ee6daee9631ce707e9b9eaf6b
;;;",,,,,,,,,,,,,,,,,,,,
[Windows] hs_err files sometimes miss information about the code containing the error,JDK-8309613,5102683,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mdoerr,mdoerr,2023-06-07 07:18,2023-07-12 13:08,2023-10-01 09:55,2023-06-14 01:31,11,17,20,21,,,22,hotspot,,0,hgupdate-sync,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"Some hs_err files were uploaded for JDK-8307683. The error ""DEBUG MESSAGE: duplicated predicate failed which is impossible"" is triggered by a C2 compiled method, but the hs_err files miss information about the nmethod. (The native stack trace is unable to identify it.) This should get added because it's important to analyze the bug or to find a warkaround (exclude).",,,,,,,,,,,JDK-8310736,JDK-8310131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,windows,,,,,"0|i31tib:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-07 07:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14358
Date: 2023-06-07 14:32:13 +0000;;;","2023-06-14 01:31;dukebot;Changeset: bd79db39
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2023-06-14 08:28:39 +0000
URL:       https://git.openjdk.org/jdk/commit/bd79db3930f192f6742e29a63a6d1c3bc3dd3385
;;;","2023-06-14 01:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/17
Date: 2023-06-14 08:35:08 +0000;;;","2023-06-21 07:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1482
Date: 2023-06-21 14:04:47 +0000;;;","2023-06-23 03:35;mdoerr;Fix Request (17u):
We need better hs_err files to analyze crashes like the one mentioned in the description above. The PR provides this for 17u. It doesn't apply cleanly, but integration is pretty straightforward (already reviewed). Tested manually like for the upstream PR.;;;",,,,,,,,,,,,,,,,,,
[REDO] JDK-8307153 JVMTI GetThreadState on carrier should return STATE_WAITING,JDK-8309612,5102682,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,dcubed,dcubed,2023-06-07 07:15,2023-07-04 16:37,2023-10-01 09:55,2023-06-08 23:13,21,,,,,,22,hotspot,,0,hgupdate-sync,intermittent,regression,tier1,tier3,,,,,,,,,,,,,"The following test failed in the JDK21 CI:

serviceability/jvmti/vthread/SuspendResume1/SuspendResume1.java#default

Here's a snippet from the log file:

#section:main
----------messages:(6/419)----------
command: main -Djava.util.concurrent.ForkJoinPool.common.parallelism=1 -agentlib:SuspendResume1 SuspendResume1
reason: User specified action: run main/othervm/native/timeout=600 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1 -agentlib:SuspendResume1 SuspendResume1 
started: Wed Jun 07 13:54:37 GMT 2023
Mode: othervm [/othervm specified]
finished: Wed Jun 07 13:55:06 GMT 2023
elapsed time (seconds): 28.409
----------configuration:(0/0)----------
----------System.out:(54/2938)----------
Agent init started
Agent init finished

## Java: runIt: Starting threads
## Java: started thread: TestedThread0
## Java: started thread: TestedThread1
## Java: started thread: TestedThread2
## Java: started thread: TestedThread3
## Java: started thread: TestedThread4
## Java: started thread: TestedThread5
## Java: started thread: TestedThread6
## Java: started thread: TestedThread7
## Java: started thread: TestedThread8
## Java: started thread: TestedThread9
## Java: started thread: TestedThread10
## Java: started thread: TestedThread11
## Java: started thread: TestedThread12
## Java: started thread: TestedThread13
## Java: started thread: TestedThread14
## Java: started thread: TestedThread15
## Java: started thread: TestedThread16
## Java: started thread: TestedThread17
## Java: started thread: TestedThread18
## Java: started thread: TestedThread19

## Java: runIt: testing Suspend/Resume

## TestSuspendResume: Test carrier threads

## Agent: thread[0] 0x7ff5d2faf9d8 ForkJoinPool-1-worker-1: state after suspend:  ALIVE WAITING WAITING_INDEFINITELY PARKED SUSPENDED (1049233)
## Agent: thread[0] 0x7ff5d2faf9d8 ForkJoinPool-1-worker-1: state after resume:  ALIVE WAITING WAITING_INDEFINITELY PARKED (657)

## Agent: thread[1] 0x7ff5d2faf9e8 ForkJoinPool-1-worker-2: state after suspend:  ALIVE WAITING WAITING_INDEFINITELY PARKED SUSPENDED (1049233)
## Agent: thread[1] 0x7ff5d2faf9e8 ForkJoinPool-1-worker-2: state after resume:  ALIVE RUNNABLE (5)

## Agent: thread[2] 0x7ff5d2faf9f0 ForkJoinPool-1-worker-3: state after suspend:  ALIVE WAITING WAITING_INDEFINITELY (145)
## Agent: FAILED: SuspendThread did not turn on SUSPENDED flag for carrier thread:
#  state:  ALIVE WAITING WAITING_INDEFINITELY (145)
## Agent: SuspendThread:  virtual thread of carrier thread has state:  ALIVE RUNNABLE (5)
FATAL ERROR in native method: check_resumed_state: expected SUSPENDED flag in thread state
	at SuspendResume1.TestSuspendResume(Native Method)
	at SuspendResume1.test_vthreads(SuspendResume1.java:115)
	at SuspendResume1.runIt(SuspendResume1.java:91)
	at SuspendResume1.run(SuspendResume1.java:82)
	at SuspendResume1.main(SuspendResume1.java:75)
	at java.lang.invoke.LambdaForm$DMH/0x0000000801002000.invokeStatic(java.base@21-ea/LambdaForm$DMH)
	at java.lang.invoke.LambdaForm$MH/0x0000000801003400.invoke(java.base@21-ea/LambdaForm$MH)
	at java.lang.invoke.Invokers$Holder.invokeExact_MT(java.base@21-ea/Invokers$Holder)
	at jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(java.base@21-ea/DirectMethodHandleAccessor.java:154)
	at jdk.internal.reflect.DirectMethodHandleAccessor.invoke(java.base@21-ea/DirectMethodHandleAccessor.java:103)
	at java.lang.reflect.Method.invoke(java.base@21-ea/Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.lang.Thread.runWith(java.base@21-ea/Thread.java:1596)
	at java.lang.Thread.run(java.base@21-ea/Thread.java:1583)
----------System.err:(0/0)----------
----------rerun:(35/7886)*----------",,,,,,,,,,,JDK-8311326,JDK-8310594,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310066,JDK-8307153,,,,,,,,,,x86_64,,,,,,,,,,linux,os_x,,,,"0|i31ti3:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-06-07 07:24;dcubed;[~sspitsyn] - Looks like your fix for JDK-8307153 is failing a test
in Tier1 on at least 4 platforms. ;;;","2023-06-07 07:44;dcubed;jdk-21+26-2304 - 2 failures
jdk-21+26-2305 - 5 failures
jdk-21+26-2306 - 2 failures;;;","2023-06-07 08:20;dcubed;Now that the fix for:

JDK-8307153 JVMTI GetThreadState on carrier should return STATE_WAITING

has been backed out, this bug has been morphed into a [REDO] bug
and the priority lowered from P2 -> P3 to match the original.;;;","2023-06-07 11:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14366
Date: 2023-06-07 18:42:34 +0000;;;","2023-06-08 23:13;dukebot;Changeset: f91e9ba7
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2023-06-09 06:12:48 +0000
URL:       https://git.openjdk.org/jdk/commit/f91e9ba757f04983655c23542e06973805465249
;;;","2023-06-21 11:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/43
Date: 2023-06-21 02:07:33 +0000;;;",,,,,,,,,,,,,,,,,
update JVMTI history table for jdk 21,JDK-8309602,5102669,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,sspitsyn,sspitsyn,2023-06-07 05:23,2023-06-12 20:57,2023-10-01 09:55,2023-06-07 21:05,21,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,,"The JVM TI history table needs to be updated for jdk 21 to list:
 - Virtual threads finalized to be a permanent feature.
 - Agent start-up in the live phase now specified to print a warning.

The JVM TI history table has no normative changes. This update does not need a CSR.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31tf7:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-06-07 05:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14352
Date: 2023-06-07 12:32:14 +0000;;;","2023-06-07 21:05;dukebot;Changeset: 5af9d2a0
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2023-06-08 04:04:05 +0000
URL:       https://git.openjdk.org/jdk/commit/5af9d2a0ac82ad83dc83461e5b8ce793cc995ad3
;;;",,,,,,,,,,,,,,,,,,,,,
[JVMCI] AMD64#getLargestStorableKind returns incorrect mask kind,JDK-8309601,5102668,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbarany,gbarany,gbarany,2023-06-07 05:22,2023-08-24 02:15,2023-10-01 09:55,2023-06-18 19:30,21,22,,,,,22,hotspot,,0,jvmci,oracle-triage-17,oracle-triage-21,,,,,,,,,,,,,,,jdk.vm.ci.amd64.AMD64#getLargestStorableKind(RegisterCategory) unconditionally returns AMD64Kind.MASK64 for mask registers. This is only correct if the target supports AVX512BW. On other AVX512 versions this should be MASK16.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,,,,,,,,x86,,,,,,,,,,,,,,,"0|i31tez:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-07 23:37;chagedorn;ILW = Returning wrong mask if no AVX512BW support, low?, no workaround = MLH = P4;;;","2023-06-13 06:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14441
Date: 2023-06-13 08:24:23 +0000;;;","2023-06-18 19:30;dukebot;Changeset: 492d25c8
Author:    Gergö Barany <gbarany@openjdk.org>
Committer: Tom Rodriguez <never@openjdk.org>
Date:      2023-06-19 02:28:05 +0000
URL:       https://git.openjdk.org/jdk/commit/492d25c8df0f818d6f6e3a18a82bfad8fa95c282
;;;",,,,,,,,,,,,,,,,,,,,
Allow javadoc to process unnamed classes,JDK-8309595,5102662,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlaskey,jlaskey,jlaskey,2023-06-07 04:45,2023-06-20 09:59,2023-10-01 09:55,2023-06-08 10:53,21,,,,,,22,tools,,0,hgupdate-sync,,,,,,,,,,,,,,,,,Unnamed classes are rejected by javadoc because they are synthetic.,,,,,,,,,,,JDK-8310441,JDK-8310364,,,,,,,,,,,,,,JDK-8310452,,,,,,,,,,,,JDK-8309957,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,"0|i31tdn:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-06-07 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14356
Date: 2023-06-07 13:50:35 +0000;;;","2023-06-08 10:53;dukebot;Changeset: 0be39054
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2023-06-08 17:51:11 +0000
URL:       https://git.openjdk.org/jdk/commit/0be39054a631f282acc7ea05b2d98878a2b250bf
;;;","2023-06-08 11:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/1
Date: 2023-06-08 17:56:29 +0000;;;",,,,,,,,,,,,,,,,,,,,
Socket.setOption(TCP_QUICKACK) uses wrong level,JDK-8309591,5102655,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vtewari,alanb,alanb,2023-06-07 02:49,2023-08-21 08:47,2023-10-01 09:55,2023-06-27 19:51,11,17,21,,,,22,core-libs,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,noreg-hard,,,,,,,,,,,"setsockopt is called with level SOL_SOCKET, reported here:
  https://mail.openjdk.org/pipermail/net-dev/2023-June/021457.html
",,,,,,,,,,,JDK-8314640,JDK-8314660,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8145635,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31tc3:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-06-07 05:33;djelinski;the problem was carried over to the AIX port:
setsockopt(fd, SOL_SOCKET, TCP_NODELAYACK, &optval, sizeof (optval));

looks like that should have ben SOL_TCP (or IPPROTO_TCP) as well;;;","2023-06-27 02:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14671
Date: 2023-06-27 09:23:49 +0000;;;","2023-06-27 19:51;dukebot;Changeset: 56a73a6f
Author:    Vyom Tewari <vtewari@openjdk.org>
Date:      2023-06-28 02:49:52 +0000
URL:       https://git.openjdk.org/jdk/commit/56a73a6f0f3d38379cecea1de5eacb751febca95
;;;","2023-06-28 01:19;shade;Seems to exist since the original change, JDK-8145635.;;;","2023-08-14 02:52;shade;AFAICS, before this fix, the calls were effectively modifying SO_PRIORITY:

    rv = setsockopt(fd, SOL_SOCKET, TCP_QUICKACK, &optval, sizeof (optval));

/usr/src/kernels/5.4.247-169.350.amzn2int.x86_64/include/uapi/asm-generic/socket.h:#define SO_PRIORITY	12
/usr/src/kernels/5.4.247-169.350.amzn2int.x86_64/include/uapi/linux/tcp.h:#define TCP_QUICKACK		12;;;","2023-08-14 03:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/57
Date: 2023-08-14 10:02:54 +0000;;;","2023-08-14 03:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1664
Date: 2023-08-14 10:49:42 +0000;;;","2023-08-14 09:06;shade;Fix Request (21u)

Fixes the important bug in network code: the performance feature does not work as expected. Applies cleanly. Tests pass.;;;","2023-08-17 00:10;shade;Fix Request (17u)

Same reason as for 21u. Does not apply cleanly, because AIX chunks are missing. 17u PR acked by Paul.;;;",,,,,,,,,,,,,,
[lworld] Feature version post merge doesn't match CheckFeatureGate1.java & CheckFeatureGate2.java,JDK-8309586,5102650,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dsimms,dsimms,dsimms,2023-06-06 23:58,2023-06-07 00:08,2023-10-01 09:55,2023-06-07 00:08,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw4,lworld,,,,,,,,,,,,,,,,Minor version tweak to expected output,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31taz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-07 00:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/859
Date: 2023-06-07 07:02:19 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
sun/security/pkcs11/Signature/TestRSAKeyLength.java fails after JDK-8301553,JDK-8309569,5102634,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mbalao,dcubed,dcubed,2023-06-06 14:47,2023-07-27 06:39,2023-10-01 09:55,2023-06-07 18:25,21,,,,,,21,security-libs,,0,noreg-other,problemlist,regression,tier2,,,,,,,,,,,,,,"The following test failed in the JDK21 CI:

sun/security/pkcs11/Signature/TestRSAKeyLength.java

Here's a snippet from the macosx-x64 sighting:

#section:main
----------messages:(7/307)----------
command: main TestRSAKeyLength
reason: User specified action: run main/othervm TestRSAKeyLength 
started: Tue Jun 06 21:21:07 GMT 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.crypto.cryptoki
finished: Tue Jun 06 21:21:10 GMT 2023
elapsed time (seconds): 2.829
----------configuration:(3/47)----------
Boot Layer
  add modules: jdk.crypto.cryptoki

----------System.out:(4/291)----------
Beginning test run TestRSAKeyLength...
nssLibDir: /System/Volumes/Data/mesos/work_dir/jib-master/install/jpg/tests/jdk/nsslib/nsslib-macosx_x64/3.46/nsslib-macosx_x64-3.46.zip/nsslib/
Running test with provider SunPKCS11-NSS (security manager disabled) ...
Testing RSA signature SHA1withRSA
----------System.err:(26/1633)----------
java.security.ProviderException: cancel failed
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11Signature.cancelOperation(P11Signature.java:338)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11Signature.reset(P11Signature.java:278)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11Signature.engineInitSign(P11Signature.java:497)
	at java.base/java.security.Signature$Delegate.engineInitSign(Signature.java:1357)
	at java.base/java.security.Signature.initSign(Signature.java:636)
	at java.base/java.security.SignedObject.sign(SignedObject.java:250)
	at java.base/java.security.SignedObject.<init>(SignedObject.java:168)
	at TestRSAKeyLength.main(TestRSAKeyLength.java:89)
	at PKCS11Test.premain(PKCS11Test.java:178)
	at PKCS11Test.testNSS(PKCS11Test.java:554)
	at PKCS11Test.main(PKCS11Test.java:214)
	at TestRSAKeyLength.main(TestRSAKeyLength.java:47)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_ARGUMENTS_BAD
	at jdk.crypto.cryptoki/sun.security.pkcs11.wrapper.PKCS11.C_VerifyFinal(Native Method)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11Signature.cancelOperation(P11Signature.java:312)
	... 15 more

JavaTest Message: Test threw exception: java.security.ProviderException: cancel failed
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.security.ProviderException: cancel failed
----------rerun:(37/8504)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301553,,,,,,,,,,,x86_64,,,,,,,,,,generic,,,,,"0|i31t7f:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,Verified,,"2023-06-06 15:29;dcubed;When this bug is fixed, the ProblemList entry needs to be restored to:

sun/security/pkcs11/Signature/TestRSAKeyLength.java 8295343 linux-all 

if JDK-8295343 is still unresolved.;;;","2023-06-06 21:17;mbalao;I'm working on this issue. The cause of the problem is know. I'll propose a fix soon.;;;","2023-06-07 13:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14369
Date: 2023-06-07 20:24:12 +0000;;;","2023-06-07 18:25;dukebot;Changeset: 760cb04a
Author:    Martin Balao <mbalao@openjdk.org>
Date:      2023-06-08 01:24:26 +0000
URL:       https://git.openjdk.org/jdk/commit/760cb04a2e099a3af9199d77a234af75a18cce5d
;;;",,,,,,,,,,,,,,,,,,,
javac crashes attempting to -Xprint on a class file of an unnamed class,JDK-8309568,5102630,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jlaskey,darcy,darcy,2023-06-06 14:16,2023-08-15 10:20,2023-10-01 09:55,2023-06-07 04:35,21,,,,,,21,tools,,0,noreg-other,,,,,,,,,,,,,,,,,Test development for JDK-8309503 found that javac crashed attempting to -Xprint on a class file of an unnamed class.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309503,,,,JDK-8306112,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31t6j:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2023-06-06 15:20;darcy;Test would fail without this fix will be included in JDK-8309503.;;;","2023-06-06 15:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14344
Date: 2023-06-06 22:14:57 +0000;;;","2023-06-07 04:35;dukebot;Changeset: a6726b66
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2023-06-07 11:34:23 +0000
URL:       https://git.openjdk.org/jdk/commit/a6726b66dbb3ffa7b2245bb9c27c4bc87148f39c
;;;",,,,,,,,,,,,,,,,,,,,
jdk.jfr.internal.Utils::formatDataAmount method should gracefully handle amounts equal to Long.MIN_VALUE,JDK-8309550,5102608,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fthevenet,fthevenet,fthevenet,2023-06-06 08:16,2023-06-19 06:17,2023-10-01 09:55,2023-06-07 06:01,11,17,20,21,8,,21,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"The method formatDataAmount(String formatter, long amount) in jdk.jfr.internal.Utils throws a StringIndexOutOfBoundsException when amount is equal to Long.MIN_VALUE.

A comment in the method itself warns that Long.MIN_VALUE isn't properly handled since its absolute value is negative, but no explicit attempt to reject such value is ever made (e.g. throw IllegalArgumentException): instead this will cause the rest of the code to fail with the exception above.

It is important that Long.MIN_VALUE amounts be handled correctly by this method because it is used by jdk.jfr.internal.tool.PrettyWriter which in turn in called by RecordedEvent.toString and the ""jfr print"" command, which therefore fail with the above exception when encountering recordings that contain events with a field typed as BYTES and a value of Long.MIN_VALUE.

This is not a theoretical risk either, as for example every instance of jdk.YoungGenerationConfiguration captured when using ShenandoahGC (and I suspect any other non-generational GC) appear to have a maxSize field with a value of Long.MIN_VALUE.",,,,,,,,,,,JDK-8310312,,,,,,,,,,,,,,,,,,,,,,,JDK-8309959,,,,,,,,"2023-06-06 11:28;fthevenet;shenGC_recording.jfr;https://bugs.openjdk.org/secure/attachment/104199/shenGC_recording.jfr",,,,,,,,,,,,,,,,,,,,,,"0|i31t1n:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-06-06 11:34;fthevenet;The attached file shenGC_recording.jfr can be used as a reproducer.
It was captured from a minimal ""hello worlrd"" sample with argument ""-XX:+UseShenandoahGC""
The command ""jfr print shenGC_recording.fr"" using  21-ea+25-2212 results in: 

$ jfr print shenGC_recording.jfr
jfr print: unexpected internal error, Index -1 out of bounds for length 6
java.lang.StringIndexOutOfBoundsException: Index -1 out of bounds for length 6
        at java.base/jdk.internal.util.Preconditions$1.apply(Preconditions.java:55)
        at java.base/jdk.internal.util.Preconditions$1.apply(Preconditions.java:52)
        at java.base/jdk.internal.util.Preconditions$4.apply(Preconditions.java:213)
        at java.base/jdk.internal.util.Preconditions$4.apply(Preconditions.java:210)
        at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:98)
        at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106)
        at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302)
        at java.base/java.lang.String.checkIndex(String.java:4828)
        at java.base/java.lang.StringLatin1.charAt(StringLatin1.java:46)
        at java.base/java.lang.String.charAt(String.java:1555)
        at jdk.jfr/jdk.jfr.internal.Utils.formatDataAmount(Utils.java:127)
        at jdk.jfr/jdk.jfr.internal.Utils.formatBytes(Utils.java:155)
        at jdk.jfr/jdk.jfr.internal.tool.PrettyWriter.printFormatted(PrettyWriter.java:595)
        at jdk.jfr/jdk.jfr.internal.tool.PrettyWriter.printValue(PrettyWriter.java:357)
        at jdk.jfr/jdk.jfr.internal.tool.PrettyWriter.printFieldValue(PrettyWriter.java:276)
        at jdk.jfr/jdk.jfr.internal.tool.PrettyWriter.print(PrettyWriter.java:214)
        at jdk.jfr/jdk.jfr.internal.tool.PrettyWriter.print(PrettyWriter.java:75)
        at jdk.jfr/jdk.jfr.internal.tool.EventPrintWriter.print(EventPrintWriter.java:82)
        at jdk.jfr/jdk.jfr.internal.tool.Print.execute(Print.java:165)
        at jdk.jfr/jdk.jfr.internal.tool.Main.main(Main.java:92);;;","2023-06-06 12:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14341
Date: 2023-06-06 19:08:11 +0000;;;","2023-06-07 06:01;dukebot;Changeset: a1ab377d
Author:    Frederic Thevenet <fthevenet@openjdk.org>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-06-07 12:58:57 +0000
URL:       https://git.openjdk.org/jdk/commit/a1ab377d995dce4d636b908e96bd168dc3a9f3e5
;;;","2023-06-13 01:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1423
Date: 2023-06-13 08:06:51 +0000;;;","2023-06-13 01:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1942
Date: 2023-06-13 08:09:57 +0000;;;","2023-06-14 09:44;fthevenet;Fix Request (17u)

Backporting this patch prevents an unexpected StringIndexOutOfBoundsException being thrown while printing JFR events having one or more fields typed as BYTES with a value of Long.MIN_VALUE). Such events are generally presents in recordings of Shenandoah and ZGC.

The risk is low, as change is trivial and with a narrow scope.
The original change also touches src/jdk.jfr/share/classes/jdk/jfr/internal/util/ValueFormatter.java but this file was introduced with JDK-8306703 which is JDK 21+ only, so changes to it shouldn't get backported.

Backport requires follow up issue JDK-8309959

Ran tiers1 and jdk_jfr tests.;;;",,,,,,,,,,,,,,,,,
com/sun/tools/attach/warnings/DynamicLoadWarningTest.java fails on AIX,JDK-8309549,5102607,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2023-06-06 08:14,2023-07-04 16:35,2023-10-01 09:55,2023-06-12 00:09,21,,,,,,22,core-svc,,0,hgupdate-sync,,,,,,,,,,,,,,,,,"After push of JDK-8307478 , the following test started to fail on AIX :
com/sun/tools/attach/warnings/DynamicLoadWarningTest.java ; it always fails on AIX with the output :

----------System.err:(294/28579)----------
STARTED DynamicLoadWarningTest::testLoadJavaAgent 'testLoadJavaAgent()'
SUCCESSFUL DynamicLoadWarningTest::testLoadJavaAgent 'testLoadJavaAgent()'
STARTED DynamicLoadWarningTest::testLoadOneJvmtiAgent '[1] DynamicLoadWarningTest$$Lambda/0x000000040020bd88@600d90bb'
org.opentest4j.AssertionFailedError: expected: <1> but was: <2>
at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:528)
at DynamicLoadWarningTest$AppRunner.stderrShouldContain(DynamicLoadWarningTest.java:298)
at DynamicLoadWarningTest.testLoadOneJvmtiAgent(DynamicLoadWarningTest.java:125)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
 ",,,,,,,,,,,JDK-8311315,JDK-8310515,,,,,,,,,,,,,,,,,,,,,,JDK-8310191,,,,JDK-8307478,,,,"2023-06-07 00:32;mbaesken;DynamicLoadWarningTest_aix.jtr;https://bugs.openjdk.org/secure/attachment/104211/DynamicLoadWarningTest_aix.jtr",,,,,,,ppc,,,,,,,,,,aix,,,,,"0|i31t1f:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2023-06-06 08:23;alanb;com/sun/tools/attach/warnings/DynamicLoadWarningTest.java is a new test added by JDK-8307478 (implementation of JEP 451). The check for a duplicate agent library appears to be problematic on AIX, maybe dlopen behaves differently on that platform? 

[~mbaesken] Is there any way that you could attach a sample .jtr file, maybe editing it to avoid revealing things about the environment that you don't want to reveal? ;;;","2023-06-07 00:33;mbaesken;I attached a slightly modified jtr file of the failing test.;;;","2023-06-07 01:24;alanb;One of the tests in testLoadOneJvmtiAgent is to load the same agent twice, it expects one warning. In the output we see:

WARNING: A JVM TI agent has been loaded dynamically (/priv/testr/outputdir/grmpf/testdata/jtreg/jtreg_test_21/test/jdk/jtreg/native/libJvmtiAgent1.so)
WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning
WARNING: Dynamic loading of agents will be disallowed by default in a future release

WARNING: A JVM TI agent has been loaded dynamically (/priv/testr/outputdir/grmpf/testdata/jtreg/jtreg_test_21/test/jdk/jtreg/native/libJvmtiAgent1.so)
WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning
WARNING: Dynamic loading of agents will be disallowed by default in a future release

so we've got two warnings. 

JvmtiAgentList::is_dynamic_lib_loaded is the function that is called to check if an agent library was previously loaded. It's looking at os_lib, the handle returned by dlopen. The man pages for dlopen on Linux and macOS are clear that a second call to dlopen with the same path returns the same handle. I suspend the issue is that dlopen on AIX working differently and that a different handle is being returned. Is that something you could check?;;;","2023-06-07 02:11;mbaesken;This is what I find in the manpage  of AIX 7.2 or 7.3 :
https://www.ibm.com/docs/en/aix/7.2?topic=d-dlopen-subroutine
https://www.ibm.com/docs/en/aix/7.3?topic=d-dlopen-subroutine
""If the module is already loaded, it is not loaded again, but a new, unique value will be returned by the dlopen subroutine.""

Sounds different to what Linux documents in the manpage:
https://man7.org/linux/man-pages/man3/dlopen.3.html
""If the same shared object is opened again with dlopen(), the same object handle is returned.""

Should I check for more details with our local AIX experts?;;;","2023-06-07 08:10;mwthomps;ILW=MMH=P3;;;","2023-06-08 00:27;alanb;[~mbaesken] Thanks for the links. The check to see if an agent library was previously loaded assumes the the same handle is returned if dlopen'ed a second or subsequent time. It would be possible to check canonical path or compare st_dev/st_ino but it would add complexity. A simple string compare of agent name or os_lib_path isn't sufficient in some cases, esp. when the path is relative.  The spec doesn't require that warnings be de-duplicated so maybe it can be tolerated on AIX, in which case one of the tests in testLoadOneJvmtiAgent should be skipped when Platform.isAix() is true. WDYT?;;;","2023-06-08 23:57;mbaesken;Hi [~alanb],
>The spec doesn't require that warnings be de-duplicated so maybe it can be tolerated on AIX, in which case one of the tests in testLoadOneJvmtiAgent should be >skipped when Platform.isAix() is true. WDYT?

I think the skipping you suggested makes sense - do you want to post a PR or should I test/try it and post one ?;;;","2023-06-09 04:23;alanb;[~mbaesken] It would be great if you have time to take this one. Skipping the duplicate warning test should be as simple as

```
--- a/test/jdk/com/sun/tools/attach/warnings/DynamicLoadWarningTest.java
+++ b/test/jdk/com/sun/tools/attach/warnings/DynamicLoadWarningTest.java
@@ -119,10 +119,13 @@ class DynamicLoadWarningTest {
         test().whenRunning(loadJvmtiAgent1)
                 .stderrShouldContain(JVMTI_AGENT_WARNING);
 
-        // dynamically load loadJvmtiAgent1 twice, should be one warning
-        test().whenRunning(loadJvmtiAgent1)
-                .whenRunning(loadJvmtiAgent1)
-                .stderrShouldContain(JVMTI_AGENT_WARNING, 1);
+        // dynamically load loadJvmtiAgent1 twice, should be one warning on platforms
+        // that can detect if an agent library was previously loaded
+        if (!Platform.isAix()) {
+            test().whenRunning(loadJvmtiAgent1)
+                    .whenRunning(loadJvmtiAgent1)
+                    .stderrShouldContain(JVMTI_AGENT_WARNING, 1);
+        }
```

but I have no way to test it.


;;;","2023-06-09 06:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14393
Date: 2023-06-09 13:39:26 +0000;;;","2023-06-12 00:09;dukebot;Changeset: 4d66d977
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-06-12 07:07:38 +0000
URL:       https://git.openjdk.org/jdk/commit/4d66d977450e083214da3dba6ad4ed851c6c1cb4
;;;","2023-06-12 00:30;mbaesken;After the issue above has been fixed we unfortunately still get this  new error :

java.lang.RuntimeException: 'WARNING: A JVM TI agent has been loaded dynamically' found in stderr
	at jdk.test.lib.process.OutputAnalyzer.stderrShouldNotContain(OutputAnalyzer.java:320)
	at DynamicLoadWarningTest$AppRunner.stderrShouldNotContain(DynamicLoadWarningTest.java:308)
	at DynamicLoadWarningTest.testLoadOneJvmtiAgent(DynamicLoadWarningTest.java:138)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)

And indeed 'WARNING: A JVM TI agent has been loaded dynamically'  can be found in the log on AIX, so there is still something wrong .;;;","2023-06-12 00:44;alanb;[~mbaesken] The 4th test in testLoadOneJvmtiAgent also loads the same agent twice, the first via the command line, the second into the running VM, a warning is not expected as the agent library is previously loaded. So same issue as JDK-8309549, needs to be skipped on AIX.;;;","2023-06-16 01:10;mbaesken;I created JDK-8310191 to address the second issue.;;;","2023-06-21 00:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/44
Date: 2023-06-21 07:29:03 +0000;;;",,,,,,,,,
Thread.interrupted from virtual thread needlessly resets interrupt status,JDK-8309545,5102603,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alanb,alanb,alanb,2023-06-06 07:43,2023-09-15 11:35,2023-10-01 09:55,2023-06-09 00:32,21,,,,,,22,core-libs,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,loom,noreg-perf,,,,,,,,,,,,,"Sergey Kuksenko found this issue. If Thread.interrupted (to ""get and clear"" the interrupt status) is called from a virtual thread then it always resets the carrier's interrupt status. It shouldn't do that when the interrupt status is not set, meaning it should be just a volatile read when not set.

Here is Sergey's benchmark using a semaphore. Note that we can't add this to the micro benchmark suite until a new version of JMH is released. The output here compares a virtual thread against a platform thread, before/after fixing this issue.

```
Benchmark                             Mode  Cnt   Score   Error  Units
Locks.Virtual.testFairSemaphore  avgt    5  77.582 ± 0.524  ns/op
Locks.Virtual.testSemaphore      avgt    5  71.746 ± 0.407  ns/op
Locks.testFairSemaphore          avgt    5  47.200 ± 2.633  ns/op
Locks.testSemaphore              avgt    5  46.469 ± 0.308  ns/op

Benchmark                             Mode  Cnt   Score   Error  Units
Locks.Virtual.testFairSemaphore  avgt    5  53.144 ± 0.149  ns/op
Locks.Virtual.testSemaphore      avgt    5  45.381 ± 1.018  ns/op
Locks.testFairSemaphore          avgt    5  47.620 ± 0.688  ns/op
Locks.testSemaphore              avgt    5  46.767 ± 0.676  ns/op
```

and a micro that just calls Thread.interrupted() gives results:

```
it was:
Benchmark           Mode  Cnt   Score   Error  Units
Inter.Virtual.test  avgt    4  42.044 ± 0.736  ns/op
Inter.test          avgt    4   1.134 ± 0.120  ns/op

Benchmark           Mode  Cnt  Score   Error  Units
Inter.Virtual.test  avgt    4  1.125 ± 0.008  ns/op
Inter.test          avgt    4  1.123 ± 0.013  ns/op
```",,,,,,,,,,,JDK-8316376,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31t0j:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-06-08 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14361
Date: 2023-06-07 15:12:40 +0000;;;","2023-06-09 00:32;dukebot;Changeset: 97df6cf5
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-06-09 07:30:03 +0000
URL:       https://git.openjdk.org/jdk/commit/97df6cf55ab66552612bf0a2eefb83c0783fd586
;;;","2023-09-15 11:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/166
Date: 2023-09-15 18:25:16 +0000;;;",,,,,,,,,,,,,,,,,,,,
"compiler/jvmci/TestEnableJVMCIProduct.java fails with ""JVMCI compiler 'graal' specified by jvmci.Compiler not found""",JDK-8309542,5102600,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dnsimon,dcubed,dcubed,2023-06-06 07:16,2023-06-12 20:49,2023-10-01 09:55,2023-06-06 09:15,21,,,,,,21,hotspot,,0,intermittent,noreg-self,oracle-triage-21,regression,tier1,,,,,,,,,,,,,"The following test failed in the JDK21 CI:

compiler/jvmci/TestEnableJVMCIProduct.java

Here's a snippet from the log file:

JVMCI compiler 'graal' specified by jvmci.Compiler not found
];
 stderr: []
 exitValue = 1

java.lang.RuntimeException: 'jvmci.Compiler=graal' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at TestEnableJVMCIProduct.test(TestEnableJVMCIProduct.java:98)
	at TestEnableJVMCIProduct.main(TestEnableJVMCIProduct.java:65)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1583)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 'jvmci.Compiler=graal' missing from stdout/stderr",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309136,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,,"0|i31szv:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-06 07:19;dcubed;The failing test was recently modified by:

JDK-8309136 [JVMCI] add -XX:+UseGraalJIT flag;;;","2023-06-06 07:20;dcubed;[~dnsimon] - Please take a look at this Tier1 test failure when you get the chance.;;;","2023-06-06 08:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14336
Date: 2023-06-06 14:54:35 +0000;;;","2023-06-06 08:53;chagedorn;ILW = Tier1 test failure, single test and intermittent, no workaround = HLH = P2;;;","2023-06-06 09:15;dukebot;Changeset: 0f0fda7a
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-06-06 16:12:37 +0000
URL:       https://git.openjdk.org/jdk/commit/0f0fda7abc68693d7d764b587bf5588b7cae74d1
;;;",,,,,,,,,,,,,,,,,,
"@JEP(number=430, title=""String Templates"") should use default status",JDK-8309534,5102591,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlaskey,jlaskey,jlaskey,2023-06-06 05:36,2023-06-12 20:48,2023-10-01 09:55,2023-06-06 06:29,21,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,,"Status was incorrectly specified as 

@JEP(number=430, title=""String Templates"", status=""First Preview"")

Should be 

@JEP(number=430, title=""String Templates)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31sxv:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-06-06 05:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14332
Date: 2023-06-06 12:39:58 +0000;;;","2023-06-06 06:29;dukebot;Changeset: ca6f07f9
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2023-06-06 13:01:04 +0000
URL:       https://git.openjdk.org/jdk/commit/ca6f07f9ab70d552061a2715342f1227287f2d94
;;;",,,,,,,,,,,,,,,,,,,,,
java/lang/Class/getDeclaredField/FieldSetAccessibleTest should filter modules that depend on JVMCI,JDK-8309532,5102589,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mchung,dnsimon,dnsimon,2023-06-06 04:09,2023-07-21 07:36,2023-10-01 09:55,2023-06-07 11:46,,,,,,,21,core-libs,,0,testonly,,,,,,,,,,,,,,,,,"Loading com.oracle.graal.vector.lir.aarch64.AArch64ASIMDMove$LoadInlineConstant
----------System.err:(30/3022)----------
WARNING: Using incubator modules: jdk.incubator.vector, jdk.incubator.concurrent
java.lang.IllegalAccessError: superinterface check failed: class com.oracle.graal.vector.nodes.simd.SimdConstant (in module com.oracle.graal.graal_enterprise) cannot access class jdk.vm.ci.meta.SerializableConstant (in module jdk.internal.vm.ci) because module jdk.internal.vm.ci does not export jdk.vm.ci.meta to module com.oracle.graal.graal_enterprise
	at java.base/java.lang.ClassLoader.defineClass2(Native Method)
	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1109)
	at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:182)
	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:821)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassInModuleOrNull(BuiltinClassLoader.java:741)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:665)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
	at java.base/java.lang.Class.getDeclaredFields0(Native Method)
	at java.base/java.lang.Class.privateGetDeclaredFields(Class.java:3401)
	at java.base/java.lang.Class.getDeclaredFields(Class.java:2470)
	at FieldSetAccessibleTest.testSetFieldsAccessible(FieldSetAccessibleTest.java:90)
	at FieldSetAccessibleTest.test(FieldSetAccessibleTest.java:130)
	at FieldSetAccessibleTest.test(FieldSetAccessibleTest.java:244)
	at FieldSetAccessibleTest.test(FieldSetAccessibleTest.java:200)
	at FieldSetAccessibleTest.run(FieldSetAccessibleTest.java:184)
	at FieldSetAccessibleTest$TestCase.run(FieldSetAccessibleTest.java:307)
	at FieldSetAccessibleTest.main(FieldSetAccessibleTest.java:175)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)

JavaTest Message: Test threw exception: java.lang.IllegalAccessError: superinterface check failed: class com.oracle.graal.vector.nodes.simd.SimdConstant (in module com.oracle.graal.graal_enterprise) cannot access class jdk.vm.ci.meta.SerializableConstant (in module jdk.internal.vm.ci) because module jdk.internal.vm.ci does not export jdk.vm.ci.meta to module com.oracle.graal.graal_enterprise
JavaTest Message: shutting down test

The packages in jdk.internal.vm.ci are dynamically exported[1] to com.oracle.graal.graal_enterprise. This is not done if jargraal is not initialized. FieldSetAccessibleTest should limit scanning the boot class path to avoid this problem.

There is a similar failure in for jdk/internal/jimage/JImageOpenTest.java: 
java.lang.IllegalAccessError: superinterface check failed: class com.oracle.graal.vector.nodes.simd.SimdConstant (in module com.oracle.graal.graal_enterprise) cannot access class jdk.vm.ci.meta.SerializableConstant (in module jdk.internal.vm.ci) because module jdk.internal.vm.ci does not export jdk.vm.ci.meta to module com.oracle.graal.graal_enterprise
	at java.base/java.lang.ClassLoader.defineClass2(Native Method)
	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1109)
	at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:182)
	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:821)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassInModuleOrNull(BuiltinClassLoader.java:741)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:665)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:497)
	at java.base/java.lang.Class.forName(Class.java:476)
	at JImageOpenTest$1.lambda$run$0(JImageOpenTest.java:60)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
	at JImageOpenTest$1.run(JImageOpenTest.java:57)
	at java.base/java.lang.Thread.run(Thread.java:1583)
STATUS:Failed.`main' threw exception: java.lang.IllegalAccessError: superinterface check failed: class com.oracle.graal.vector.nodes.simd.SimdConstant (in module com.oracle.graal.graal_enterprise) cannot access class jdk.vm.ci.meta.SerializableConstant (in module jdk.internal.vm.ci) because module jdk.internal.vm.ci does not export jdk.vm.ci.meta to module com.oracle.graal.graal_enterprise
STATUS:Failed.`main' threw exception: java.lang.IllegalAccessError: superinterface check failed: class com.oracle.graal.vector.nodes.simd.SimdConstant (in module com.oracle.graal.graal_enterprise) cannot access class jdk.vm.ci.meta.SerializableConstant (in module jdk.internal.vm.ci) because module jdk.internal.vm.ci does not export jdk.vm.ci.meta to module com.oracle.graal.graal_enterprise

These failures occur in a JDK that includes jargraal-ee in the runtime image (e.g. GraalVM EE).

[1] https://github.com/oracle/graal/blob/f749c67d655734b5ca8d047b289c5faf5acb75eb/compiler/src/jdk.internal.vm.compiler/src/org/graalvm/compiler/serviceprovider/GraalServices.java#L204-L210",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,"2023-06-06 04:09;dnsimon;FieldSetAccessibleTest.jtr.log;https://bugs.openjdk.org/secure/attachment/104195/FieldSetAccessibleTest.jtr.log","2023-06-06 04:09;dnsimon;JImageOpenTest.jtr.log;https://bugs.openjdk.org/secure/attachment/104196/JImageOpenTest.jtr.log","2023-06-06 14:25;mchung;test.patch;https://bugs.openjdk.org/secure/attachment/104203/test.patch",,,,,,,,,,,,,,,,,,,,"0|i31sxf:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,Verified,,"2023-06-06 04:45;alanb;FieldSetAccessibleTest has a link a modules to ignore, does it pass if the Graal modules are filtered out?;;;","2023-06-06 05:05;dnsimon;Indeed with this patch, the test passes:
diff --git a/test/jdk/java/lang/Class/getDeclaredField/FieldSetAccessibleTest.java b/test/jdk/java/lang/Class/getDeclaredField/FieldSetAccessibleTest.java
index 12cab1f5d0f..c7a3c6a67b1 100644
--- a/test/jdk/java/lang/Class/getDeclaredField/FieldSetAccessibleTest.java
+++ b/test/jdk/java/lang/Class/getDeclaredField/FieldSetAccessibleTest.java
@@ -289,7 +289,8 @@ public class FieldSetAccessibleTest {
             Set<String> mods = Set.of(""javafx.deploy"", ""jdk.deploy"", ""jdk.plugin"", ""jdk.javaws"",
                 // All JVMCI packages other than jdk.vm.ci.services are dynamically
                 // exported to jdk.internal.vm.compiler
-                ""jdk.internal.vm.compiler""
+                ""jdk.internal.vm.compiler"",
+                ""com.oracle.graal.graal_enterprise""
             );
             return ModuleFinder.ofSystem().findAll().stream()
                                .map(mref -> mref.descriptor().name())
;;;","2023-06-06 14:15;mchung;One possible solution to filter out all modules that directly and indirectly depends on jdk.internal.vm.compiler.  [~dnsimon] can you try the attached test.patch?
;;;","2023-06-07 09:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14362
Date: 2023-06-07 16:06:54 +0000;;;","2023-06-07 11:46;dukebot;Changeset: 02bce0b1
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-06-07 18:44:27 +0000
URL:       https://git.openjdk.org/jdk/commit/02bce0b1452b804f3a7883ca8bf29a524b73672e
;;;","2023-07-11 07:28;dnsimon;The jdk/internal/jimage/JImageOpenTest.java still fails on jargraal-ee. It will need the same treatment as FieldSetAccessibleTest.java.;;;",,,,,,,,,,,,,,,,,
Incorrect result with unwrapped iotaShuffle.,JDK-8309531,5102588,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbhateja,jbhateja,jbhateja,2023-06-06 04:05,2023-07-25 04:27,2023-10-01 09:55,2023-07-04 22:48,18,19,20,21,22,,22,hotspot,,0,c2,hgupdate-sync,oracle-triage-11,oracle-triage-17,oracle-triage-21,vectorapi,,,,,,,,,,,,"Following test shows incorrect results with -XX:-TieredCompilation, but works fine with -XX:TieredStopAtLevel=1

IPROMPT>java --add-modules=jdk.incubator.vector -cp . shuffle
WARNING: Using incubator modules: jdk.incubator.vector
[res] 30378688 [time] 35 ms
IPROMPT>java --add-modules=jdk.incubator.vector -XX:TieredStopAtLevel=1 -cp . shuffle
WARNING: Using incubator modules: jdk.incubator.vector
[res] 4096 [time] 1351 ms

------------------------------------------------------------------------------------------
import jdk.incubator.vector.*;

public class shuffle {
   public static int micro(int i) {
      return ShortVector.SPECIES_512.iotaShuffle(i, 1, false)
                                    .toVector()
                                    .reinterpretAsShorts()
                                    .reduceLanes(VectorOperators.ADD);
   }
   public static void main(String [] args) {
      int res = 0;
      for (int i = 0; i < 10000; i++) {
          res += micro(i & 31);
      }
      long t1 = System.currentTimeMillis();
      for (int i = 0; i < 1000000; i++) {
          res += micro(i & 31);
      }
      long t2 = System.currentTimeMillis();
      System.out.println(""[res] "" + res + "" [time] "" + (t2-t1) + "" ms"");
   }
}
--------------------------------------------------------------------------------------------

Looks like the problem with the comparison predicate in iotaShuffle inline expander.
",,,,,,,,,,,JDK-8312885,JDK-8311558,,,,,,,,,,,,,,,,,,,,,,JDK-8311305,,,,JDK-8304450,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31sx7:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-06 05:00;chagedorn;Does not reproduce with latest JDK. inline_vector_shuffle_iota() was removed with JDK-8304450.;;;","2023-06-06 05:07;chagedorn;ILW = Incorrect result with vector API iotaShuffle, low?, disable intrinsic with -XX:DisableIntrinsic=_VectorShuffleIota = HLM = P3;;;","2023-06-28 05:20;jbhateja;After backing out Shuffle related overhaul from JDK-mainline.

https://bugs.openjdk.org/browse/JDK-8310459, problem will also appear in mainline.

I plan to add a fix in mainline followed by a backport to earlier versions.;;;","2023-06-28 11:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14700
Date: 2023-06-28 17:59:07 +0000;;;","2023-07-04 22:48;dukebot;Changeset: d6578bff
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2023-07-05 05:46:24 +0000
URL:       https://git.openjdk.org/jdk/commit/d6578bff1c69ebc165fc9734e6503bd2d5d021c2
;;;","2023-07-04 22:53;thartmann;[~jbhateja] this is a P3 bug and we are in RDP 1, no need for a fix request to integrate this into JDK 21, see https://openjdk.org/jeps/3;;;","2023-07-04 22:54;jbhateja;Needs to be backported to jdk21u to fix the incorrectness around unwrapped shuffleIota API, scope of fix is limited to vector API which is an incubating module. Other APIs dependent on shuffleIota i.e. slice / unslice operations use wrapped version of this API and are not effected by the fix.;;;","2023-07-04 23:00;jbhateja;>> [~jbhateja] this is a P3 bug and we are in RDP 1, no need for a fix request to integrate this into JDK 21, see https://openjdk.org/jeps/3

Got it, thanks!,  we should still backport it to 20 , 19 and 18 ?;;;","2023-07-04 23:19;thartmann;I can take care of the backport to JDK 21. I think it's too late for JDK 20.0.2 and I'm not sure though if anyone is still maintaining 18 and 19.;;;","2023-07-04 23:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/95
Date: 2023-07-05 06:21:35 +0000;;;","2023-07-05 00:41;jbhateja;Thanks Tobias;;;",,,,,,,,,,,,
Stale cached data from Matcher.namedGroups() after Matcher.usePattern(),JDK-8309515,5102549,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,rgiulietti,webbuggrp,webbuggrp,2023-06-05 11:00,2023-07-21 07:36,2023-10-01 09:55,2023-06-07 14:42,20,21,,,,,21,core-libs,,0,dcsaw,regression,reproducer-yes,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS independent; bug can be seen in java.util.regex.Matcher source code, introduced in commit openjdk/jdk@ce85cac for issue 8065554.

A DESCRIPTION OF THE PROBLEM :
In addressing issue JDK-8065554 (MatchResult should provide values of named-capturing groups), commit openjdk/jdk@ce85cac added a namedGroups field in Matcher to cache the map from parentPattern.namedGroups().

The map is lazily cached, only when the field is null and namedGroups() is called (which may be indirectly through a call of start(String), end(String), or group(String). The same cached value will then continue to be returned even if Matcher.usePattern is later called and the new Pattern has different named groups, or no named groups, or the same named groups mapped to different integers. Therefore, symptoms can include seeing the wrong results when retrieving by named groups, or spurious IllegalArgumentExceptions for groups that the new pattern provides, or exceptions not thrown for groups that the new pattern doesn't provide, or exceptions for an invalid group index when calling a method that takes a group name.

Could be fixed by eliminating the local copy and simply having Matcher.namedGroups() call parentPattern.namedGroups() unconditionally, or by having Matcher.usePattern simply null the field, so the correct map will be lazily cached when next needed.


REGRESSION : Last worked in version 17

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
jshell in version 20:

var p1 = Pattern.compile(""(?<a>...)(?<b>...)"");
var p2 = Pattern.compile(""(?<b>...)(?<a>...)"");
var m = p1.matcher(""foobar"");
m.matches()
// ==> true
m.group(""a"")
// ==> ""foo""
m.usePattern(p2)
m.matches()
// ==> true
m.group(""a"")
// ==> ""foo""  WRONG RESULT: should be ""bar"" for p2

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Using p1, (?<a>...)(?<b>...), on the string ""foobar"" should return ""foo"" for group a.
Using p2, (?<b>...)(?<a>...), on the string ""foobar"" should return ""bar"" for group a.
ACTUAL -
After usePattern(p2) on the string ""foobar"", ""foo"" is incorrectly returned for group a, because the group name to group index mapping for pattern p1 is still cached.

CUSTOMER SUBMITTED WORKAROUND :
Calls to m.namedGroups() on a Matcher m can be replaced with calls to m.pattern().namedGroups(), and any calls to m.start(String), m.end(String), or m.group(String) can be replaced with code that maps the name string to an integer index using m.pattern().namedGroups(), throwing the proper exception if not found, and then calls start(int), end(int), or group(int).

In code that must also compile on Java < 20 where the namedGroups() method is unknown, a MethodHandle can be constructed for it at runtime, or variant code can be supplied in a multi-version jar.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8065554,,,,"2023-06-05 23:41;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/104194/Main.java",,,,,,,generic,,,,,,,b18,20,,generic,,,,,"0|i31soj:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@557d5cff,,,,,,,Verified,,"2023-06-06 00:34;tongwan;The observations on Windows 10:
JDK 17: Passed, p2 returned ""bar""
JDK 20ea+17: Passed.
JDK 20ea+18: Failed.
JDK 21ea+20: Failed.;;;","2023-06-07 04:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14350
Date: 2023-06-07 11:20:02 +0000;;;","2023-06-07 14:42;dukebot;Changeset: 90027ff2
Author:    Raffaello Giulietti <rgiulietti@openjdk.org>
Date:      2023-06-07 21:39:53 +0000
URL:       https://git.openjdk.org/jdk/commit/90027ff204fcf441db6bd0076e253474631757c8
;;;","2023-06-14 18:39;tongwan;Additional information from the submitter:
While ""REGRESSION : Last worked in version 17"" appears in the report, I have had no problems in 18 or 19 either. The named groups functionality seems to have been reliable from 8 through 19, with this regression first appearing in 20.;;;",,,,,,,,,,,,,,,,,,,
Regression test ExtraImportSemicolon.java refers to the wrong bug,JDK-8309511,5102567,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,acobbs,acobbs,acobbs,2023-06-05 18:46,2023-07-12 13:16,2023-10-01 09:55,2023-06-16 15:51,21,,,,,,22,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,"Regression test ExtraImportSemicolon.java contains ""@bug 5059679"" but that's the wrong bug number. It should say ""@bug 8027682"" instead.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8027682,,,,,,,,,,,,,,,generic,,,,,,,,21,,generic,,,,,"0|i31ssj:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-05 18:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14327
Date: 2023-06-06 01:52:34 +0000;;;","2023-06-16 15:51;dukebot;Changeset: bcc4d368
Author:    Archie Cobbs <acobbs@openjdk.org>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2023-06-16 22:49:22 +0000
URL:       https://git.openjdk.org/jdk/commit/bcc4d36857b0907e865d0afc4447f9b0780f8101
;;;",,,,,,,,,,,,,,,,,,,,,
com/sun/jdi/RedefineNestmateAttr/TestNestmateAttr.java fails with virtual test thread factory,JDK-8309509,5102565,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2023-06-05 16:57,2023-06-12 20:54,2023-10-01 09:55,2023-06-07 10:51,21,,,,,,21,core-svc,,0,loom,noreg-self,,,,,,,,,,,,,,,,"The test fails with the virtual test thread factory because it tries to find the ""main"" thread in the list of threads returned by JDI, but ""main"" is a virtual thread and will only be returned by JDI if the debug agent is launched with includevirtualthreads=y. As a result the thread is not found and the test asserts:

java.lang.RuntimeException: assertTrue: expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:472)
	at TestNestmateAttr.checkGoodTransforms(TestNestmateAttr.java:511)
	at TestNestmateAttr.methodEntered(TestNestmateAttr.java:320)
	at TestScaffold$EventHandler.notifyEvent(TestScaffold.java:205)
	at TestScaffold$EventHandler.run(TestScaffold.java:279)
	at java.base/java.lang.Thread.run(Thread.java:1583)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285422,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ss3:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-06-05 17:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14324
Date: 2023-06-06 00:02:47 +0000;;;","2023-06-07 10:51;dukebot;Changeset: a54f4d4a
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-06-07 17:49:05 +0000
URL:       https://git.openjdk.org/jdk/commit/a54f4d4ab9537ac7e070dd82e26f73c90d82290a
;;;",,,,,,,,,,,,,,,,,,,,,
Possible memory leak in JPEG image loader,JDK-8309508,5102564,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,kcr,kcr,2023-06-05 16:37,2023-06-23 14:42,2023-10-01 09:55,2023-06-12 09:01,8,jfx20,,,,,jfx21,javafx,,0,noreg-hard,sn_145,sn_146,,,,,,,,,,,,,,,Code inspection reveals a possible memory leak in the JPEG image loader where buffers are not always freed by error handling code. We should fix this as a best practice.,,,,,,,,,,,JDK-8309929,JDK-8310154,JDK-8310153,,,,,,,,,,,JDK-8304153,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31srv:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-06-08 22:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1151
Date: 2023-06-09 05:18:16 +0000;;;","2023-06-12 09:01;dukebot;Changeset: bd24fc72
Author:    Jayathirth D V <jdv@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-06-12 15:58:43 +0000
URL:       https://git.openjdk.org/jfx/commit/bd24fc7286725358f109863e6cc8a6c3abb354e1
;;;",,,,,,,,,,,,,,,,,,,,,
com/sun/jdi/MultiBreakpointsTest.java fails with virtual test thread factory,JDK-8309506,5102560,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2023-06-05 15:08,2023-06-12 20:49,2023-10-01 09:55,2023-06-06 11:19,21,,,,,,21,core-svc,,0,loom,noreg-self,,,,,,,,,,,,,,,,"The test fails when the main debuggee thread is a virtual thread, because virtual threads are always daemon threads. Because of this all the test threads that the debuggee creates are also daemon threads. The main deuggee thread immediately exits after creating the test threads, and at that point there are no non-daemon threads left running to keep the debuggee process alive, so the test threads never get a chance to do all the work that is expected of them.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285422,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31sqz:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-06-05 15:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14323
Date: 2023-06-05 22:13:29 +0000;;;","2023-06-06 11:19;dukebot;Changeset: 571fbdc3
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-06-06 18:17:47 +0000
URL:       https://git.openjdk.org/jdk/commit/571fbdc3110440ec3a36bb6005dc5a0358696df5
;;;",,,,,,,,,,,,,,,,,,,,,
com/sun/jdi/MethodEntryExitEvents.java due to finding wrong main thread,JDK-8309505,5102559,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2023-06-05 14:49,2023-06-12 20:50,2023-10-01 09:55,2023-06-06 11:35,21,,,,,,21,core-svc,,0,loom,noreg-self,,,,,,,,,,,,,,,,"The test fails because it tries to determine the main debuggee thread by allowing it run until the debuggee class is loaded (it waits for the ClassPrepareEvent). Normally this would be done on the main debuggee thread. However, when using virtual threads, the main thread has yet to spawn the virtual thread to run the test on.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285422,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31sqr:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-06-05 14:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14322
Date: 2023-06-05 21:55:02 +0000;;;","2023-06-06 11:35;dukebot;Changeset: 16ab7bfe
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-06-06 18:34:18 +0000
URL:       https://git.openjdk.org/jdk/commit/16ab7bfe22b96ec8c4b7b7197d55fa41d36e3875
;;;",,,,,,,,,,,,,,,,,,,,,
Remove workaround in bin/idea.sh for non standard JVMCI file layout ,JDK-8309501,5102553,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,never,never,never,2023-06-05 12:09,2023-06-12 20:49,2023-10-01 09:55,2023-06-06 08:55,,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,,,,,The fix for JDK-8303588 made JVMCI conform to the standard build layout which broke the workaround in bin/idea.sh,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303588,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31spf:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-06-05 12:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14318
Date: 2023-06-05 19:12:52 +0000;;;","2023-06-06 08:55;dukebot;Changeset: 7edd0540
Author:    Tom Rodriguez <never@openjdk.org>
Date:      2023-06-06 15:53:54 +0000
URL:       https://git.openjdk.org/jdk/commit/7edd0540e06444313647acd133c230785ddaf8ee
;;;",,,,,,,,,,,,,,,,,,,,,
javac fails to report compiler.err.no.java.lang with annotation processing enabled,JDK-8309499,5102551,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cushon,cushon,cushon,2023-06-05 11:32,2023-07-12 13:15,2023-10-01 09:55,2023-06-16 09:46,,,,,,,22,tools,,0,,,,,,,,,,,,,,,,,,"The following example shows that javac fails to report an error for a compilation with an empty bootclasspath (or system module path) if annotation processing is enabled.

An error should be reported regardless of whether annotation processing is enabled. I suspect this is a bug related to deferred diagnostic handling with annotation processors, and the Abort that's being thrown is causing a deferred diagnostic handler to get lost somewhere.

The bug reproduces for newer language levels and --system instead of -bootclasspath, I used -bootclasspath for the repro because it's easier to demonstrate than to create an empty system module path.

=== T.java
class T {
  String s;
}
=== P.java
import java.util.Set;
import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.element.TypeElement;

public class P extends AbstractProcessor {
  @Override
  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
    return false;
  }
}
===

$ javac -fullversion
javac full version ""21-ea+25-2212""

# without annotation processing enabled, javac reports the expected compiler.err.no.java.lang error

$ javac T.java -source 8 -target 8 -bootclasspath empty  -XDrawDiagnostics
- compiler.warn.option.obsolete.source: 8
- compiler.warn.option.obsolete.target: 8
- compiler.warn.option.obsolete.suppression
- compiler.err.no.java.lang
1 error
3 warnings

# with annotation processing enabled, javac doesn't report an error, and finishes with exit code 0, but the compilation fails internally and doesn't produce output

$ javac T.java -source 8 -target 8 -bootclasspath empty  -XDrawDiagnostics -processor P
- compiler.warn.option.obsolete.source: 8
- compiler.warn.option.obsolete.target: 8
- compiler.warn.option.obsolete.suppression
3 warnings

$ echo $?
0

# adding -XDdev shows an internal Abort is being thrown, but with processing enabled the diagnostic isn't getting emitted before the compilation completes:

$ javac T.java -source 8 -target 8 -bootclasspath empty  -XDrawDiagnostics -processor P -XDdev
- compiler.warn.option.obsolete.source: 8
- compiler.warn.option.obsolete.target: 8
- compiler.warn.option.obsolete.suppression
com.sun.tools.javac.util.Abort
        at jdk.compiler/com.sun.tools.javac.comp.TypeEnter$ImportsPhase.importJavaLang(TypeEnter.java:337)
        at jdk.compiler/com.sun.tools.javac.comp.TypeEnter$ImportsPhase.resolveImports(TypeEnter.java:388)
        at jdk.compiler/com.sun.tools.javac.comp.TypeEnter$ImportsPhase.runPhase(TypeEnter.java:324)
        at jdk.compiler/com.sun.tools.javac.comp.TypeEnter$Phase.doCompleteEnvs(TypeEnter.java:285)
        at jdk.compiler/com.sun.tools.javac.comp.TypeEnter$Phase.completeEnvs(TypeEnter.java:254)
        at jdk.compiler/com.sun.tools.javac.comp.TypeEnter.complete(TypeEnter.java:201)
        at jdk.compiler/com.sun.tools.javac.code.Symbol.complete(Symbol.java:682)
        at jdk.compiler/com.sun.tools.javac.code.Symbol$ClassSymbol.complete(Symbol.java:1412)
        at jdk.compiler/com.sun.tools.javac.comp.Enter.complete(Enter.java:614)
        at jdk.compiler/com.sun.tools.javac.comp.Enter.main(Enter.java:591)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.enterTrees(JavaCompiler.java:1060)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:935)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:319)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:178)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)
3 warnings",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31soz:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-07 14:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14370
Date: 2023-06-07 21:03:20 +0000;;;","2023-06-16 09:46;dukebot;Changeset: 53abba3a
Author:    Liam Miller-Cushon <cushon@openjdk.org>
Date:      2023-06-16 16:43:22 +0000
URL:       https://git.openjdk.org/jdk/commit/53abba3a5acee3e4d776fe8a42a307b827fda54d
;;;",,,,,,,,,,,,,,,,,,,,,
[JVMCI] race in CallSiteTargetValue recording,JDK-8309498,5102548,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,never,never,never,2023-06-05 10:17,2023-07-10 00:26,2023-10-01 09:55,2023-06-08 09:12,21,22,,,,,22,hotspot,,0,hgupdate-sync,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,,,,intermittent failures with Graal on ContinuousCallSiteTargetChange showed that when constructing the CallSiteTargetValue Assumption we read the value twice so the dependency and the value in the program might be different leading to incorrect execution.,,,,,,,,,,,JDK-8311332,JDK-8310605,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31sob:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-05 10:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14315
Date: 2023-06-05 17:20:48 +0000;;;","2023-06-06 00:53;chagedorn;ILW = Incorrect execution with Graal, medium?, no workaround = MMH = P3 ;;;","2023-06-08 09:12;dukebot;Changeset: bb966827
Author:    Tom Rodriguez <never@openjdk.org>
Date:      2023-06-08 16:11:33 +0000
URL:       https://git.openjdk.org/jdk/commit/bb966827ac445d805bac5005d0fbda0c61111252
;;;","2023-06-21 03:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/50
Date: 2023-06-21 10:28:33 +0000;;;",,,,,,,,,,,,,,,,,,,
[11u] tools/jmod/hashes/HashesOrderTest.java fails intermittently,JDK-8309476,5102525,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,mdoerr,mdoerr,2023-06-05 07:24,2023-06-13 23:53,2023-10-01 09:55,2023-06-12 23:32,11,,,,,,11.0.20,tools,,0,intermittent,jdk11u-critical-request,jdk11u-critical-yes,noreg-self,oraclejdk-na,,,,,,,,,,,,,"The test 'tools/jmod/hashes/HashesOrderTest.java', introduced by JDK-8240903, was backported to 11.0.17 via JDK-8287791. However, JDK11 doesn't support specifying ""--date"". This appears to be needed in order to make the test reliable. The hashes of two jmod files may differ if the timestamp differs.

The ""--date"" option was implemented with JDK-8276766 for JDK 19 and has only been backported to JDK 17. It is a feature that comes with a CSR and might not be worthwile doing for the JDK11 updates release. For now, the test should be marked as @intermittent until JDK-8276766 is brought to JDK11 updates.

jmod create --class-path mods/m63b lib2/m63b.jmod
jmod create --module-path lib1 --hash-modules .* --class-path mods/ma lib1/ma.jmod
jmod create --module-path lib2 --hash-modules .* --class-path mods/ma lib2/ma.jmod
test HashesOrderTest.test(): failure
java.lang.AssertionError: expected [-1] but found [14]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:797)
	at org.testng.Assert.assertEquals(Assert.java:807)
	at HashesOrderTest.test(HashesOrderTest.java:91)",,,,,,,,,,,JDK-8309987,,,,,,,,,,,,,,,,,,,,,,,JDK-8287791,,,,JDK-8240903,JDK-8276766,,,,,,,,,,,,,,,,,,11.0.17,,,,,,,"0|i31sj7:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2023-06-06 22:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u/pull/72
Date: 2023-06-07 05:32:24 +0000;;;","2023-06-12 02:55;clanger;Fix request (11u):
Tagging the recently backported test that is shaky as intermittent. No risk, test-only. Acked by mdoerr.;;;","2023-06-12 23:32;dukebot;Changeset: 0770b1f0
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-06-13 06:30:25 +0000
URL:       https://git.openjdk.org/jdk11u/commit/0770b1f04fed2d6e59ef15a872b4806f2d4767b9
;;;",,,,,,,,,,,,,,,,,,,,
Test java/foreign/TestByteBuffer.java fails: a problem with msync (aix),JDK-8309475,5102524,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tsteele,goetz,goetz,2023-06-05 07:11,2023-08-28 14:17,2023-10-01 09:55,2023-08-18 13:13,,,,,,,22,core-libs,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,"Test java/foreign/TestByteBuffer.java  fails on AIX in subtest testMappedSegmentAsByteBuffer. Native C-method msync() returns with errno EINVAL because flag MS_SYNC is set although the preceding call for mmap issued mode MAP_PRIVATE. This is working as documented for AIX (msync Subroutine - IBM Documentation). Other Unix implementations like linux do not have this restriction. 
 
According to javadoc of the calling java method java.base/java/nio/MappedByteBuffer.force() (MappedByteBuffer (Java SE 21 & JDK 21 [build 25])) this combination of flags should be allowed to result in a noop call of force(). Therefore, the failing call of msync should be avoided at least for AIX if according mmap was using flag MAP_PRIVATE.
 
Problem: in the current sequence of calls, this information is not available in the method calling msync().


java.io.UncheckedIOException: java.io.IOException: Invalid argument (msync with parameter MS_SYNC failed)
	at java.base/java.nio.MappedMemoryUtils.force(MappedMemoryUtils.java:105)
	at java.base/java.nio.Buffer$2.force(Buffer.java:890)
	at java.base/jdk.internal.misc.ScopedMemoryAccess.forceInternal(ScopedMemoryAccess.java:317)
	at java.base/jdk.internal.misc.ScopedMemoryAccess.force(ScopedMemoryAccess.java:305)
	at java.base/jdk.internal.foreign.MappedMemorySegmentImpl.force(MappedMemorySegmentImpl.java:92)
	at TestByteBuffer.testMappedSegmentAsByteBuffer(TestByteBuffer.java:321)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.io.IOException: Invalid argument (msync with parameter MS_SYNC failed)
	at java.base/java.nio.MappedMemoryUtils.force0(Native Method)
	at java.base/java.nio.MappedMemoryUtils.force(MappedMemoryUtils.java:103)
	... 34 more
",,,,,,,,,,,JDK-8315142,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,"0|i31siz:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-07-17 16:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14914
Date: 2023-07-17 23:20:10 +0000;;;","2023-07-25 07:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14964
Date: 2023-07-20 20:55:36 +0000;;;","2023-08-18 13:13;dukebot;Changeset: 395fc788
Author:    Tyler Steele <tsteele@openjdk.org>
Date:      2023-08-18 20:11:24 +0000
URL:       https://git.openjdk.org/jdk/commit/395fc78880a91eeb06a08c1abf6905d580a650c0
;;;","2023-08-22 09:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/82
Date: 2023-08-22 16:36:59 +0000;;;","2023-08-24 09:55;tsteele;jdk21u fix request

I'd like to backport this fix to 21 to make it available there. The change applies cleanly, and testing looks good. The change affects only the AIX platform; risk is low.;;;",,,,,,,,,,,,,,,,,,
[IR Framework] Wrong @ForceCompile link in README,JDK-8309474,5102522,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,enothum,thartmann,thartmann,2023-06-05 06:59,2023-07-10 00:26,2023-10-01 09:55,2023-06-07 13:18,17,21,,,,,21,hotspot,,0,cleanup,ir-framework,noreg-doc,oracle-triage-11,oracle-triage-17,oracle-triage-21,starter,,,,,,,,,,,"Reported by Frederic Parain:

The @ForceCompile link in https://github.com/openjdk/jdk/blob/master/test/hotspot/jtreg/compiler/lib/ir_framework/README.md incorrectly refers to https://github.com/openjdk/jdk/blob/master/test/hotspot/jtreg/compiler/lib/ir_framework/DontCompile.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8254129,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31sij:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-07 04:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14347
Date: 2023-06-07 07:11:31 +0000;;;","2023-06-07 13:18;dukebot;Changeset: 92beb855
Author:    Eric Nothum <eric.nothum@oracle.com>
Committer: Christian Hagedorn <chagedorn@openjdk.org>
Date:      2023-06-07 20:16:51 +0000
URL:       https://git.openjdk.org/jdk/commit/92beb85510a809b15c9bd5a4c19c305fc339a2c9
;;;",,,,,,,,,,,,,,,,,,,,,
Limit key characters in static index pages,JDK-8309471,5102518,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,hannesw,hannesw,2023-06-05 05:50,2023-07-12 13:14,2023-10-01 09:55,2023-06-26 08:53,,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,,"With JDK-8286470 we included section links in the javadoc-generated index files to allow searching for for section headings. This also caused section links to appear in the static index pages. Unfortunately, section links are usually not curated to make sense in such an index. It also caused new split-index pages to be created for numeric characters in JDK documentation because many headings in JDK documentation begin with an ordinal number (see attached screenshot). 

Update: The initial solution was to exclude section links from the static index pages. This was changed to including section links, but using the first valid Java identifier start character as key. The title of this issue has been updated to reflect the new approach.",,,,,,,,,,,JDK-8310221,JDK-8311343,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286470,JDK-8309233,,,"2023-06-05 06:22;hannesw;Screenshot 2023-06-05 at 15.21.12.png;https://bugs.openjdk.org/secure/attachment/104189/Screenshot+2023-06-05+at+15.21.12.png",,,,,,,generic,,,,,,,,,,generic,,,,,"0|i31shn:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-06-05 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14312
Date: 2023-06-05 13:50:06 +0000;;;","2023-06-19 04:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/30
Date: 2023-06-19 11:18:54 +0000;;;","2023-06-26 08:53;dukebot;Changeset: 8748b462
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2023-06-26 15:51:37 +0000
URL:       https://git.openjdk.org/jdk21/commit/8748b462db052afa45038bf09b7ad3dc5ecf8c2b
;;;",,,,,,,,,,,,,,,,,,,,
Pattern dominance should be adjusted,JDK-8309467,5102514,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2023-06-05 05:31,2023-06-14 23:33,2023-10-01 09:55,2023-06-13 00:34,21,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,,"As a recent change, the specification for pattern dominance in the switch statement needs to be updated, so that guarded patterns do not dominate constants case labels.",,,,,,,,,,,JDK-8309827,,,,,,,,,,,,,,,JDK-8309469,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31sgr:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-11 12:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14314
Date: 2023-06-05 14:48:13 +0000;;;","2023-06-12 01:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/6
Date: 2023-06-12 08:49:04 +0000;;;","2023-06-13 00:34;dukebot;Changeset: 83ea2935
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-06-13 07:33:27 +0000
URL:       https://git.openjdk.org/jdk21/commit/83ea2935815141bd7a930f3920889b1f2233d208
;;;",,,,,,,,,,,,,,,,,,,,
[AIX] vmTestbase/nsk/jvmti/RunAgentThread/agentthr001/TestDescription.java crashing due to empty while loop,JDK-8309462,5102510,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jkern,jkern,jkern,2023-06-05 03:53,2023-06-14 23:33,2023-10-01 09:55,2023-06-13 01:29,21,,,,,,21,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,"The sys_thread_3() function contains an empty while loop, which by the standard can be optimized away. Please refer to discussion in https://github.com/llvm/llvm-project/issues/60622.
The xlc17 compiler is doing so, and IBM claims that they are following the standard and will not fix this on compiler side.
So we have (at least) 3 ways to circumvent this behavior.

1. We can introduce the call of a nop library function, which will hinder the optimizer to throw away the loop (This is our proposed solution, but instead of a heavy looping thread, the result is a more or less idle thread):
#include <unistd.h>
static void
sys_thread_3(jvmtiEnv* jvmti, JNIEnv* jni, void *p)                               
{
                while (1) {
                  sleep(1);
                }
}

2. We can make use of a volatile variable in the loop body which also hinders the optimizer to throw away the loop:
static void
sys_thread_3(jvmtiEnv* jvmti, JNIEnv* jni, void *p)            
{
                volatile int i = 1;
                while (i) {
                  i += 2;
                }
}

3. We can use the __attribute__ ((optnone)) modifier in the function declaration to suppress the optimization at all:
static void
sys_thread_3(jvmtiEnv* jvmti, JNIEnv* jni, void *p) __attribute__ ((optnone))                             
{
                while (1) {
                }
}

To make the third approach platform independent, we can implement it in the following way:
In globalDefinitions.hpp
#ifndef OPTNONE
#define OPTNONE
#endif

In globalDefinitions_xlc.hpp
// optnone support
//
// To use if a function should not be optimized
// Usage:
//   void* func(size_t size) OPTNONE {...}
#define OPTNONE     __attribute__(( optnone))

With this we can change libagentthr001.cpp in a platform independent way to
static void
sys_thread_3(jvmtiEnv* jvmti, JNIEnv* jni, void *p) OPTNONE                             
{
     while (1) {
     }
}

",,,,,,,,,,,JDK-8309839,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,21,,aix,,,,,"0|i31sfv:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-06-06 02:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14330
Date: 2023-06-06 09:51:09 +0000;;;","2023-06-06 09:32;dcubed;Moving to hotspot/jvmti for triage purposes since this
affects a specific JVM/TI test.;;;","2023-06-12 07:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/9
Date: 2023-06-12 14:36:56 +0000;;;","2023-06-13 01:29;dukebot;Changeset: 08eff92b
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2023-06-13 08:27:55 +0000
URL:       https://git.openjdk.org/jdk21/commit/08eff92b5e1e42cf299c1da8d5fa88d92b840505
;;;",,,,,,,,,,,,,,,,,,,
6.3: Remove unnecessary rules regarding shadowing and pattern variables,JDK-8309459,5102508,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbierman,gbierman,gbierman,2023-06-05 02:11,2023-06-05 03:43,2023-10-01 09:55,2023-06-05 03:43,,,,,,,,specification,,0,noreg-doc,,,,,,,,,,,,,,,,,"Section 6.3 of the JLS contains a number of rules specifying compile-time errors regarding pattern variables and shadowing. For example, in JLS 6.3.1.1 a rule is given for the conditional-and expression `a && b`:

    It is a compile-time error if any pattern variable introduced by `a` when true is already in scope at `b`.

Strictly speaking this rule (and similar rules appearing in 6.3) is not necessary, as pattern variables are just local variable declarations and so the normal shadowing rules apply. (This wasn't the case in earlier drafts, which explains the origin of these rules...)

This rule and similar ones in 6.3 should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31sff:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7441ef8d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[riscv-port-jdk17u] Remove unused RoundDoubleModeV C2 node,JDK-8309427,5102473,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gcao,gcao,gcao,2023-06-05 00:05,2023-07-09 19:32,2023-10-01 09:55,2023-06-08 18:15,repo-riscv-port-17,,,,,,repo-riscv-port-17,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,,,,,"Hi, here we want to remove the RoundDoubleModeV node that is not being used, we found that the reason the RoundDoubleModeV node is not called in RISC-V is that the PopulateIndex node needs to be added to enable SuperWord optimization (an algorithm for automatic vectorization). In addition to this, the node RoundDoubleMode needs to be implemented in its scalar form, which is not implemented in riscv.ad. But there is no floating point to floating point instruction in riscv that does not change the width by, so what we need to do here may simply be to remove the RoundDoubleModeV node. refer: https://bugs.openjdk.org/browse/JDK-8298342",,,,,,,,,,,JDK-8311768,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,,linux,,,,,"0|i31s7n:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-05 00:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/68
Date: 2023-06-05 07:29:42 +0000;;;","2023-06-19 20:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,
com/sun/jdi/StepTest.java fails with virtual thread wrapper,JDK-8309420,5102467,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2023-06-04 20:59,2023-06-12 20:55,2023-10-01 09:55,2023-06-07 11:05,21,,,,,,21,core-svc,,0,loom,noreg-self,,,,,,,,,,,,,,,,"The test has two issues. The first is that it assume that once the VMStart event has arrived and one ""step into"" is done, it will be in the main method of the debuggee. Once there, it determines the debuggee class name by looking at the classtype of topmost frame. The problems is when using virtual threads, it is actually in TestScaffold.main() at this point, so the wrong class name is gleaned from the frame. To fix this the test can just saves away the debuggee class name, which is passed to the test as the 4th argument.

The other issue is that the test assumes once it gets to the debuggee go() method, there are only two frames on the stack. It's more like 16 when using virtual threads. The test needs to account for this by counting the number of frames when go() is entered rather than assuming it will be 2.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285422,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31s6b:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-06-04 21:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14307
Date: 2023-06-05 04:03:57 +0000;;;","2023-06-07 11:05;dukebot;Changeset: e3f3ac08
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-06-07 18:03:49 +0000
URL:       https://git.openjdk.org/jdk/commit/e3f3ac0825e63ef5cec8e5f7e53ee0dbee263ac4
;;;",,,,,,,,,,,,,,,,,,,,,
Misstatement in semantics of methods in javax.lang.model.ElementFilter,JDK-8309416,5102463,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,prappo,darcy,2023-06-04 18:52,2023-06-12 20:47,2023-10-01 09:55,2023-06-05 09:38,21,,,,,,21,core-libs,,0,doc-only,noreg-doc,,,,,,,,,,,,,,,,"The class-level docs of ElementFilter state:

""The returned sets and lists are new collections and do use the argument as a backing store.""

when they should state:

""The returned sets and lists are new collections and do _not_ use the argument as a backing store.""",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309417,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31s5f:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3c6c40,,,,,,,,,"2023-06-04 19:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14306
Date: 2023-06-05 02:16:51 +0000;;;","2023-06-05 09:38;dukebot;Changeset: 2b38343e
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2023-06-05 16:36:19 +0000
URL:       https://git.openjdk.org/jdk/commit/2b38343e4db75aabd3825c766092df75ba44c930
;;;",,,,,,,,,,,,,,,,,,,,,
jtreg runs into race conditions for multi-modules tests,CODETOOLS-7903507,5106098,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,cstein,cstein,cstein,2023-07-24 06:36,2023-08-14 07:09,2023-10-01 09:55,2023-07-25 13:09,,,,,,,jtreg7.3,tools,,0,,,,,,,,,,,,,,,,,,"jtreg should not run into race conditions using multi-modules test setup.

Find details of the race condition at: https://bugs.openjdk.org/browse/JDK-8312482 ""Apparent corrupt jar file junit-platform-console-standalone-1.9.2.jar""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312482,,,JDK-8312482,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32ekb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2023-07-24 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/161
Date: 2023-07-24 13:44:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Asmtools: jdis prints BootstrapMethod attribute if detailed output is off ,CODETOOLS-7903506,5105958,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,lkuskov,lkuskov,lkuskov,2023-07-20 19:09,2023-07-25 20:51,2023-10-01 09:55,2023-07-25 20:51,asm_tools_8.0,,,,,,asm_tools_8.0,tools,,0,,,,,,,,,,,,,,,,,,"jdis Test03.class
public super class Test03 version 65:0
{
  public static Field bField:I;

  public Method ""<init>"":""()V""
    stack  1 locals  1
  {
         aload_0;
         invokespecial     Method java/lang/Object.""<init>"":""()V"";
         return;
  }
  public static Method run:""()Z""
    stack  2 locals  1
  {
         sipush            139;
         putstatic         Field bField:""I"";
         getstatic         Field bField:""I"";
         istore_0;
         iload_0;
         sipush            139;
         if_icmpeq         L31;
         getstatic         Field java/lang/System.out:""Ljava/io/PrintStream;"";
         iload_0;
         invokedynamic     InvokeDynamic REF_invokeStatic:Method java/lang/invoke/StringConcatFactory.makeConcatWithConstants:
                           ""(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;"":
                           makeConcatWithConstants:""(I)Ljava/lang/String;"" {
                             String ""instead of . got \u0001""
                           };
         invokevirtual     Method java/io/PrintStream.println:""(Ljava/lang/String;)V"";
         iconst_0;
         ireturn;
  L31:   stack_frame_type  append;
         locals_map        int;
         iconst_1;
         ireturn;
  }
  public static varargs Method main:""([Ljava/lang/String;)V""
    stack  1 locals  1
  {
         invokestatic      Method Test01.run:""()Z"";
         pop;
         return;
  }

  SourceFile               ""Test03.java"";

  public static final InnerClass Lookup = class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles;

  BootstrapMethod #45 #43;
} // end Class Test03 compiled from ""Test03.java""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b02,,,,,,,,"0|i32dp7:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@47358cbe,,,,,,,,,"2023-07-25 20:51;lkuskov;MR: https://github.com/openjdk/asmtools/pull/59;;;",,,,,,,,,,,,,,,,,,,,,,
JMH: Reset worker interrupt status after iteration,CODETOOLS-7903498,5103517,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2023-06-19 04:50,2023-06-20 01:26,2023-10-01 09:55,2023-06-20 01:26,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"GHA testing shows that there are still intermittent failures on NonInterruptibleInterruptTest, mostly with executor-fjp.

```
invokeAPI(org.openjdk.jmh.it.interrupts.NonInterruptibleInterruptTest)  Time elapsed: 38.465 sec  <<< ERROR!
org.openjdk.jmh.runner.RunnerException: Benchmark caught the exception
	at org.openjdk.jmh.runner.Runner.runBenchmarks(Runner.java:572)
	at org.openjdk.jmh.runner.Runner.internalRun(Runner.java:309)
	at org.openjdk.jmh.runner.Runner.run(Runner.java:185)
	at ...
	Suppressed: java.lang.Exception: java.lang.InterruptedException
		at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:551)
		at ...
	Caused by: java.lang.InterruptedException
		at java.base/java.util.concurrent.CyclicBarrier.dowait(CyclicBarrier.java:212)
		at java.base/java.util.concurrent.CyclicBarrier.await(CyclicBarrier.java:363)
		at org.openjdk.jmh.runner.BenchmarkHandler.getWorkerData(BenchmarkHandler.java:459)
         ...
```

Reproduces well on Linux with:
 % taskset -c 0,1 mvn clean install -pl jmh-core-it -am -Dtest=NonInterruptibleInterruptTest -DfailIfNoTests=false -P executor-fjp

The root cause is that sometimes we do not reach any interrupt-checking method after benchmark exits and slides towards the exit. This would make a new barrier code capture the interrupts, like in the case above. This is actually a problem for the next iteration too: the iteration might finish too soon by catching the interrupt from previous timing-out iteration.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ymr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2023-06-19 13:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmh/pull/112
Date: 2023-06-19 20:49:58 +0000;;;","2023-06-20 01:26;roboduke;Changeset: 47f651b7
Author:    Aleksey Shipilëv <shipilev@amazon.de>
Committer: GitHub <noreply@github.com>
Date:      2023-06-20 10:23:12 +0000
URL:       https://git.openjdk.org/jmh/commit/47f651b72d05c2c335f8ced5ed33f2fb0dd26720
;;;",,,,,,,,,,,,,,,,,,,,,
JMH: Infrastructure code should yield occasionally for virtual executor to make progress,CODETOOLS-7903492,5102738,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2023-06-08 04:21,2023-06-09 05:43,2023-10-01 09:55,2023-06-09 05:43,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"For example, ControlStopTest intermittently times out in GHA when executed with executor-virtual. It looks like resource starvation.

Reproducible with current JDK 21-ea and dropping to 2 CPUs:

```
% taskset -c 0,1 mvn clean install -pl jmh-core-it -am -P executor-virtual -Dtest=ControlStopTest -DfailIfNoTests=false
```

jstack shows one FJP thread is carrying a virtual thread, while another thread is not picking the other one up:

```
""ForkJoinPool-1-worker-1"" #21 [6122] daemon prio=5 os_prio=0 cpu=188404.34ms elapsed=188.43s tid=0x00007f312437cb70  [0x00007f30fd2c9000
]
   Carrying virtual thread #20
        at jdk.internal.vm.Continuation.run(java.base@21-internal/Continuation.java:251)
        at java.lang.VirtualThread.runContinuation(java.base@21-internal/VirtualThread.java:223)
        at java.lang.VirtualThread$$Lambda/0x000000080107e418.run(java.base@21-internal/Unknown Source)
        at java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(java.base@21-internal/ForkJoinTask.java:1423)
        at java.util.concurrent.ForkJoinTask.doExec(java.base@21-internal/ForkJoinTask.java:387)
        at java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(java.base@21-internal/ForkJoinPool.java:1312)
        at java.util.concurrent.ForkJoinPool.scan(java.base@21-internal/ForkJoinPool.java:1843)
        at java.util.concurrent.ForkJoinPool.runWorker(java.base@21-internal/ForkJoinPool.java:1808)
        at java.util.concurrent.ForkJoinWorkerThread.run(java.base@21-internal/ForkJoinWorkerThread.java:188)

""ForkJoinPool-1-worker-2"" #23 [6123] daemon prio=5 os_prio=0 cpu=102.03ms elapsed=188.43s tid=0x00007f30bc000e80 nid=6123 waiting on condition  [0x00007f30fd1c9000]
   java.lang.Thread.State: WAITING (parking)
        at jdk.internal.misc.Unsafe.park(java.base@21-internal/Native Method)
        - parking to wait for  <0x00000000ff773a18> (a java.util.concurrent.ForkJoinPool)
        at java.util.concurrent.locks.LockSupport.park(java.base@21-internal/LockSupport.java:371)
        at java.util.concurrent.ForkJoinPool.awaitWork(java.base@21-internal/ForkJoinPool.java:1893)
        at java.util.concurrent.ForkJoinPool.runWorker(java.base@21-internal/ForkJoinPool.java:1809)
        at java.util.concurrent.ForkJoinWorkerThread.run(java.base@21-internal/ForkJoinWorkerThread.java:188)
```

The infrastructure waits when warmup is ready, which never ends:

```
""main"" #1 [6101] prio=5 os_prio=0 cpu=200.59ms elapsed=188.66s tid=0x00007f3124027f50 nid=6101 waiting on condition  [0x00007f312c758000
]
   java.lang.Thread.State: WAITING (parking)
        at jdk.internal.misc.Unsafe.park(java.base@21-internal/Native Method)
        - parking to wait for  <0x00000000ff6421d0> (a java.util.concurrent.CountDownLatch$Sync)
        at java.util.concurrent.locks.LockSupport.park(java.base@21-internal/LockSupport.java:221)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(java.base@21-internal/AbstractQueuedSynchronizer.java:754)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(java.base@21-internal/AbstractQueuedSynchron
izer.java:1099)
        at java.util.concurrent.CountDownLatch.await(java.base@21-internal/CountDownLatch.java:230)
        at org.openjdk.jmh.runner.InfraControlL2.awaitWarmupReady(InfraControl.java:236)
        at org.openjdk.jmh.runner.InfraControl.awaitWarmupReady(InfraControl.java:40)
        at org.openjdk.jmh.runner.BenchmarkHandler.runIteration(BenchmarkHandler.java:334)
        at org.openjdk.jmh.runner.BaseRunner.runBenchmark(BaseRunner.java:262)
        at org.openjdk.jmh.runner.BaseRunner.runBenchmark(BaseRunner.java:233)
        at org.openjdk.jmh.runner.BaseRunner.doSingle(BaseRunner.java:138)
        at org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked(BaseRunner.java:75)
        at org.openjdk.jmh.runner.ForkedRunner.run(ForkedRunner.java:72)
        at org.openjdk.jmh.runner.ForkedMain.main(ForkedMain.java:86)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31tuj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2023-06-08 04:21;shade;Any ideas, [~skuksenko]?;;;","2023-06-08 06:40;alanb;Do you see anymore with `jcmd <pid> Thread.dump_to_file -format=json <file>` and opening up the output with a JSON reader?;;;","2023-06-08 07:42;shade;Yes, I see both FJP threads are in `Continuation.run`:

```
      {
        ""container"": ""ForkJoinPool-1\/jdk.internal.vm.SharedThreadContainer@efa42e9"",
        ""parent"": ""<root>"",
        ""owner"": null,
        ""threads"": [
         {
           ""tid"": ""21"",
           ""name"": ""ForkJoinPool-1-worker-1"",
           ""stack"": [
              ""java.base\/jdk.internal.vm.Continuation.run(Continuation.java:251)"",
              ""java.base\/java.lang.VirtualThread.runContinuation(VirtualThread.java:223)"",
              ""java.base\/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)"",
              ""java.base\/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)"",
              ""java.base\/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)"",
              ""java.base\/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)"",
              ""java.base\/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)"",
              ""java.base\/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)""
           ]
         },
         {
           ""tid"": ""23"",
           ""name"": ""ForkJoinPool-1-worker-2"",
           ""stack"": [
              ""java.base\/jdk.internal.vm.Continuation.run(Continuation.java:251)"",
              ""java.base\/java.lang.VirtualThread.runContinuation(VirtualThread.java:223)"",
              ""java.base\/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)"",
              ""java.base\/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)"",
              ""java.base\/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)"",
              ""java.base\/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)"",
              ""java.base\/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)"",
              ""java.base\/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)""
           ]
         }
        ],
        ""threadCount"": ""2""
      }
```

...and #20 running the benchmark code after passing preSetup CountDownLatch, while #22 sitting parked on that CountDownLatch:

```
        ""container"": ""java.util.concurrent.ThreadPoolExecutor@6ea6d14e\/jdk.internal.vm.SharedThreadContainer@722032c3"",
        ""parent"": ""<root>"",
        ""owner"": null,
        ""threads"": [
         {
           ""tid"": ""20"",
           ""name"": ""org.openjdk.jmh.it.control.ControlStopTest.pingpong-jmh-worker-1"",
           ""stack"": [
              ""org.openjdk.jmh.it.control.ControlStopTest.ping(ControlStopTest.java:45)"",
              ""org.openjdk.jmh.it.control.jmh_generated.ControlStopTest_pingpong_jmhTest.pingpong_Throughput(ControlStopTest_pingpong_jmhTest.java:79)"",
              ""java.base\/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)"",
              ""java.base\/java.lang.reflect.Method.invoke(Method.java:578)"",
              ""org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:514)"",
              ""org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:497)"",
              ""java.base\/java.util.concurrent.FutureTask.run(FutureTask.java:317)"",
              ""java.base\/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)"",
              ""java.base\/java.util.concurrent.FutureTask.run(FutureTask.java:317)"",
              ""java.base\/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)"",
              ""java.base\/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)"",
              ""java.base\/java.lang.VirtualThread.run(VirtualThread.java:311)""
           ]
         },
         {
           ""tid"": ""22"",
           ""name"": ""org.openjdk.jmh.it.control.ControlStopTest.pingpong-jmh-worker-2"",
           ""stack"": [
              ""java.base\/java.lang.VirtualThread.park(VirtualThread.java:592)"",
              ""java.base\/java.lang.System$2.parkVirtualThread(System.java:2649)"",
              ""java.base\/jdk.internal.misc.VirtualThreads.park(VirtualThreads.java:54)"",
              ""java.base\/java.util.concurrent.locks.LockSupport.park(LockSupport.java:219)"",
              ""java.base\/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:754)"",
              ""java.base\/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1099)"",
              ""java.base\/java.util.concurrent.CountDownLatch.await(CountDownLatch.java:230)"",
              ""org.openjdk.jmh.runner.InfraControl.preSetup(InfraControl.java:86)"",
              ""org.openjdk.jmh.it.control.jmh_generated.ControlStopTest_pingpong_jmhTest.pingpong_Throughput(ControlStopTest_pingpong_jmhTest.java:117)"",
              ""java.base\/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)"",
              ""java.base\/java.lang.reflect.Method.invoke(Method.java:578)"",
              ""org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:514)"",
              ""org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:497)"",
              ""java.base\/java.util.concurrent.FutureTask.run(FutureTask.java:317)"",
              ""java.base\/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)"",
              ""java.base\/java.util.concurrent.FutureTask.run(FutureTask.java:317)"",
              ""java.base\/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)"",
              ""java.base\/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)"",
              ""java.base\/java.lang.VirtualThread.run(VirtualThread.java:311)""
           ]
         }
        ],
        ""threadCount"": ""2""
```;;;","2023-06-08 08:09;shade;Running with `taskset -c 0` shows more interesting picture.

More instrumentation on JMH side confirms that both threads counted down the latch, but only one virtual thread had managed to unblock from await later:

```
# Warmup Iteration   2: Thread[#1,main,5,main] arrived at warmup await
VirtualThread[#15,org.openjdk.jmh.it.control.ControlStopTest.pingpong-jmh-worker-1]/runnable@ForkJoinPool-1-worker-2 preSetup counted down, proceeding to await
VirtualThread[#17,org.openjdk.jmh.it.control.ControlStopTest.pingpong-jmh-worker-2]/runnable@ForkJoinPool-1-worker-2 preSetup counted down, proceeding to await
VirtualThread[#17,org.openjdk.jmh.it.control.ControlStopTest.pingpong-jmh-worker-2]/runnable@ForkJoinPool-1-worker-2 preSetup passed await
java.util.concurrent.ForkJoinPool@4f7d0008[Running, parallelism = 1, size = 0, active = 0, running = 0, steals = 0, tasks = 0, submissions = 0]
java.util.concurrent.ForkJoinPool@4f7d0008[Running, parallelism = 1, size = 0, active = 0, running = 0, steals = 0, tasks = 0, submissions = 0]
java.util.concurrent.ForkJoinPool@4f7d0008[Running, parallelism = 1, size = 0, active = 0, running = 0, steals = 0, tasks = 0, submissions = 0]
```

Only one worker is active in common pool, and it runs the virtual thread. Another virtual thread is starved. 

```
      {
        ""container"": ""java.util.concurrent.ThreadPoolExecutor@6ea6d14e\/jdk.internal.vm.SharedThreadContainer@1923b4cd"",
        ""parent"": ""<root>"",
        ""owner"": null,
        ""threads"": [
         {
           ""tid"": ""17"",
           ""name"": ""org.openjdk.jmh.it.control.ControlStopTest.pingpong-jmh-worker-2"",
           ""stack"": [
              ""org.openjdk.jmh.it.control.ControlStopTest.pong(ControlStopTest.java:53)"",
              ""org.openjdk.jmh.it.control.jmh_generated.ControlStopTest_pingpong_jmhTest.pingpong_Throughput(ControlStopTest_pingpong_jmhTest.java:122)"",
              ""java.base\/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)"",
              ""java.base\/java.lang.reflect.Method.invoke(Method.java:578)"",
              ""org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:514)"",
              ""org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:497)"",
              ""java.base\/java.util.concurrent.FutureTask.run(FutureTask.java:317)"",
              ""java.base\/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)"",
              ""java.base\/java.util.concurrent.FutureTask.run(FutureTask.java:317)"",
              ""java.base\/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)"",
              ""java.base\/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)"",
              ""java.base\/java.lang.VirtualThread.run(VirtualThread.java:311)""
           ]
         },
         {
           ""tid"": ""15"",
           ""name"": ""org.openjdk.jmh.it.control.ControlStopTest.pingpong-jmh-worker-1"",
           ""stack"": [
              ""java.base\/java.lang.VirtualThread.park(VirtualThread.java:592)"",
              ""java.base\/java.lang.System$2.parkVirtualThread(System.java:2649)"",
              ""java.base\/jdk.internal.misc.VirtualThreads.park(VirtualThreads.java:54)"",
              ""java.base\/java.util.concurrent.locks.LockSupport.park(LockSupport.java:219)"",
              ""java.base\/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:754)"",
              ""java.base\/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1099)"",
              ""java.base\/java.util.concurrent.CountDownLatch.await(CountDownLatch.java:230)"",
              ""org.openjdk.jmh.runner.InfraControl.preSetup(InfraControl.java:88)"",
              ""org.openjdk.jmh.it.control.jmh_generated.ControlStopTest_pingpong_jmhTest.pingpong_Throughput(ControlStopTest_pingpong_jmhTest.java:74)"",
              ""java.base\/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)"",
              ""java.base\/java.lang.reflect.Method.invoke(Method.java:578)"",
              ""org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:514)"",
              ""org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:497)"",
              ""java.base\/java.util.concurrent.FutureTask.run(FutureTask.java:317)"",
              ""java.base\/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)"",
              ""java.base\/java.util.concurrent.FutureTask.run(FutureTask.java:317)"",
              ""java.base\/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)"",
              ""java.base\/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)"",
              ""java.base\/java.lang.VirtualThread.run(VirtualThread.java:311)""
           ]
         }
        ],
        ""threadCount"": ""2""
      },
      {
        ""container"": ""ForkJoinPool-1\/jdk.internal.vm.SharedThreadContainer@47f81bf1"",
        ""parent"": ""<root>"",
        ""owner"": null,
        ""threads"": [
         {
           ""tid"": ""16"",
           ""name"": ""ForkJoinPool-1-worker-1"",
           ""stack"": [
              ""java.base\/jdk.internal.misc.Unsafe.park(Native Method)"",
              ""java.base\/java.util.concurrent.locks.LockSupport.park(LockSupport.java:371)"",
              ""java.base\/java.util.concurrent.ForkJoinPool.awaitWork(ForkJoinPool.java:1893)"",
              ""java.base\/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1809)"",
              ""java.base\/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)""
           ]
         },
         {
           ""tid"": ""18"",
           ""name"": ""ForkJoinPool-1-worker-2"",
           ""stack"": [
              ""java.base\/jdk.internal.vm.Continuation.run(Continuation.java:251)"",
              ""java.base\/java.lang.VirtualThread.runContinuation(VirtualThread.java:223)"",
              ""java.base\/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)"",
              ""java.base\/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)"",
              ""java.base\/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)"",
              ""java.base\/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)"",
              ""java.base\/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)"",
              ""java.base\/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)""
           ]
         }
        ],
        ""threadCount"": ""2""
      }
```;;;","2023-06-08 08:31;shade;ControlStopTest just busy-loops. It should probably do a `Thread.yield` to allow virtual thread to switch and make progress...;;;","2023-06-08 09:03;skuksenko;`taskset -c 0` is not a working combination for a 2-threaded benchmark.

It's a known issue - if run JMH benchmark with virtual threads and a number of threads larger than carrier thread executor parallelism  - JMH micro don't make enough progress to finish micros.
JMH synch points require not only N different threads to make progress, but they also require N working threads to make progress.
If N > carrier thread executors parallelism - there is no N working virtual threads.
I didn't report that yet, since more evaluation is required, and virtual threads work perfectly when the number of benchmark threads is less than carrier thread executor parallelism.

""taskset -c 0,1"" was reproduced - to be continued.
;;;","2023-06-08 09:07;shade;I think even the `taskset -c 0,1` would not work, if there is a stray virtual thread that takes out a platform thread for it. I cannot reproduce a hang with the patch I have in PR. So I am proceeding with that one, and leave other issues for later.;;;","2023-06-08 09:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmh/pull/111
Date: 2023-06-08 16:02:44 +0000;;;","2023-06-08 09:51;skuksenko;I am afraid since Thread.yield() doesn't give fairness  - we always may get starvation.;;;","2023-06-09 05:43;roboduke;Changeset: 482561a2
Author:    Aleksey Shipilëv <shipilev@amazon.de>
Committer: GitHub <noreply@github.com>
Date:      2023-06-09 14:43:19 +0000
URL:       https://git.openjdk.org/jmh/commit/482561a2be24e47f1c3a855b3ce69f56130ec57e
;;;",,,,,,,,,,,,,
JMH: The interrupt to time-outing benchmark can be delivered to worker data barrier,CODETOOLS-7903490,5102729,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2023-06-08 00:45,2023-06-09 04:45,2023-10-01 09:55,2023-06-09 04:45,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"This is similar to CODETOOLS-7903001, but now for the CyclicBarrier introduced with CODETOOLS-7903476. This seems to cause the intermittent failures with executor-fjp:

```
rg.openjdk.jmh.it.interrupts.NonInterruptibleInterruptTest
invokeAPI(org.openjdk.jmh.it.interrupts.NonInterruptibleInterruptTest)  Time elapsed: 36.522 sec  <<< ERROR!
org.openjdk.jmh.runner.RunnerException: Benchmark caught the exception
	at org.openjdk.jmh.runner.Runner.runBenchmarks(Runner.java:572)
	at org.openjdk.jmh.runner.Runner.internalRun(Runner.java:309)
	at org.openjdk.jmh.runner.Runner.run(Runner.java:185)
	at org.openjdk.jmh.it.interrupts.NonInterruptibleInterruptTest.invokeAPI(NonInterruptibleInterruptTest.java:65)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
Caused by: org.openjdk.jmh.runner.BenchmarkException: Benchmark error during the run
	at org.openjdk.jmh.runner.BenchmarkHandler.runIteration(BenchmarkHandler.java:429)
	at org.openjdk.jmh.runner.BaseRunner.runBenchmark(BaseRunner.java:283)
	at org.openjdk.jmh.runner.BaseRunner.runBenchmark(BaseRunner.java:233)
	at org.openjdk.jmh.runner.BaseRunner.doSingle(BaseRunner.java:138)
	at org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked(BaseRunner.java:75)
	at org.openjdk.jmh.runner.ForkedRunner.run(ForkedRunner.java:72)
	at org.openjdk.jmh.runner.ForkedMain.main(ForkedMain.java:86)
	Suppressed: java.lang.Exception: java.lang.IllegalStateException: Worker data barrier error 
		at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:539)
		at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:497)
		at java.base/java.util.concurrent.ForkJoinTask$AdaptedCallable.exec(ForkJoinTask.java:1456)
		at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
		at java.base/java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:667)
		at java.base/java.util.concurrent.ForkJoinTask$AdaptedCallable.run(ForkJoinTask.java:1464)
		at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
		at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
		at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
		at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
		at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
		at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
	Caused by: java.lang.IllegalStateException: Worker data barrier error 
		at org.openjdk.jmh.runner.BenchmarkHandler.getWorkerData(BenchmarkHandler.java:446)
		at org.openjdk.jmh.runner.BenchmarkHandler.access$300(BenchmarkHandler.java:49)
		at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:512)
		... 13 more
	Caused by: java.lang.InterruptedException
		at java.base/java.util.concurrent.CyclicBarrier.dowait(CyclicBarrier.java:214)
		at java.base/java.util.concurrent.CyclicBarrier.await(CyclicBarrier.java:364)
		at org.openjdk.jmh.runner.BenchmarkHandler.getWorkerData(BenchmarkHandler.java:444)
		... 15 more
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903001,CODETOOLS-7903476,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31tsj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2023-06-08 01:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmh/pull/110
Date: 2023-06-08 08:03:40 +0000;;;","2023-06-09 04:45;roboduke;Changeset: 9a975571
Author:    Aleksey Shipilëv <shipilev@amazon.de>
Committer: GitHub <noreply@github.com>
Date:      2023-06-09 13:43:10 +0000
URL:       https://git.openjdk.org/jmh/commit/9a9755714746f76bfaaa067e777457ce6ef64bf1
;;;",,,,,,,,,,,,,,,,,,,,,
